CHI 90 f’tmeedngs April 1990 PARTICIPATORY DESIGN OF COMPUTER SYSTEMS ( PANEL ) Moderator : Jeff Johnson Human - Computer Interaction Department , HP Labs P . O . Box 10490 Palo Alto , CA 94303 - 0969 Panelists : ( 415 ) 857 - 7661 , jjohnson @ hplabs . hp . com Pelle Ehn , Media and Information Sciences Department , Aarhus University Jonathan Grudin , MCC and Aarhus University Bonnie Nardi , Human - Computer Interaction Department , HP Labs Kari Thoresen , Norwegian Computing Center Discussant : Lucy Suchman , System Sciences Lab , Xerox PARC INTRODUCTION Despite a proliferation of methodologies for designing computer systems , we commonly end up with systems that appear to have been designed in spite of the users : they are difficult to master and / or are poorly suited for the users’ tasks . Participatory design rejects the assump - tion that designers design and users use , assuming instead that unless representative users are among the designers , it is unlikely that the system will make adequate use of the users’ skills and talents or provide good support for their tasks . Of course , poorly designed systems have negative effects for both users and their employers . Panelists will address one or both of the following questions : 1 . Participatory design has been practiced more in Europe , particularly Scandinavia , than it has in the U . S . Lack of know - how in the U . S . is not the only factor : cultural and political differences also play a role . What are the problems and prospects for participatory design in the U . S . ? 2 . Participatory design has been confined mainly to the development of computer systems customized for a specific professional practice or organizational set - ting . Is there a place for participatory design in the development of so - called horizontal applications and computer - based appliances ? If so , how would the appropriate methodologies be the same and how would they differ ? promote participatory design methodologies , espe - cially in the United States , Computer Professionals for To Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish requires a fee and / or specific permission . 0 1990 ACM 0 - 89791 - 345 - O / 90 / 0004 - 0141 1 SO Social Responsibility held a conference , PDC’90 , imme - diately prior to CHI’90 . PDC’90 brought together researchers and practitioners of participatory design , sys - tem designers interested in learning about it , and users interested in learning how they can contribute to , and benefit from , participating in the design of computer systems . Most of the participants in this panel took part in PDC’90 , and will include insights and experiences from that conference in their remarks . PANEL PARTICPANTS Jeff Johnson is a user - interface researcher at Hewlett - Packard L & oratories . Previously , he was a user - inter - face researcher at US WEST Advanced Technologies and an application designer and implementor at Xerox Infor - mation Systems and Cromemco , Inc . He received B . A . and Ph . D . degrees in cognitive psychology from Yale and Stanford Universities , respectively . He is on the Executive Committee of Computer Professionals for So - cial Responsibility . Pelle Ehn is an Associate Professor at the Department of Information and Media Science , University of Aar - bus . Denmark . Since the mid - 1970s he has conducted practical research on participatory design . This work includes the DEMOS project , a cooperation with work - ers in a newspaper , a repair shop , a warehouse , and a steel mill to develop strategies for union participation in systems design . In the UTOPIA project , he cooperat - ed with newspaper workers to develop alternative com - puter - based technology based on the concept of quality of work and product . Now he is working on the COOP project , developing tools and methods for user / designer cooperation . He has authored , co - authored , or edited several books on participatory design and related topics [ l , 2 , 33 . He earned the Ph . D . degree in 1988 from the University of Umea , Sweden . Jonathan Grudin is a Visiting Associate Professor at the Computer Science Department of Aarhus University , Denmark , on . leave from the Human Interface Laborato - ry of the Microelectronics and Computer Technology Cl - II 90 proceedings April 1990 Corporation ( MCC ) . He spent several years working in product development organizations as a software engi - neer , and his MCC research focuses on user interface de - velopment practices in large development companies . Bonnie Nardi joined the Human - Computer Interaction Department of Hewlett - Packard Laboratories in 1989 . She received her Ph . D . in anthropology from the Univer - sity of California , Irvine . She has held both academic and industrial positions , and for the past five years has worked in the computer industry . She is interested in user - interface design , knowledge - based software sys - tems , and user programming . She believes that soft - ware design should be informed by ethnographic studies of users to learn how people use computers in everyday life . She is currently studying spreadsheet users to find out why spreadsheet software has been so successful among users with no formal programming education . Kari Thoresen has been a Research Scientist at the Nor - wegian Computing Center in Oslo since 1972 . Her research pertains to systems development in an organiza - tional perspective . Recent projects have been in coopera - tion with hospital nurses , planning departments in small municipalities , and systems developers in the Nor - wegian Telecommunication Administration . She is a member ( 85 - 87 ) of the Norwegian Advisory Council to the Government on IT policy , and a Norwegian represen - tative to IFIP TC 9 . She received a Masters degree in natural sciences from Oslo University in 1966 . Lucy Suchman is a researcher in the System Sciences Lab - oratory at Xerox Palo Alto Research Center , where she manages the Work Practice and Technology Area . She received her Ph . D . in Social / Cultural Anthropology from the University of California at Berkeley in 1984 . Her publications include Plans and Situated Actions : The problem of human - machine communication , Cm - bridge University Press , 1987 . PANELISTS’ SUMMARY STATEMENTS Pelle Ehn Participatory design has two major aspects . The politi - cal one is obvious . Participatory design concerns ques - tions of democracy , power , and control at the work - place . In this sense it is a deeply controversial issue from a management point of view . The other major as - pect has to do with skills and the quality of the goods and services produced , Theoretically , and in practical experience , the participa - tion of skilled users in the design process has been dem - onstrated to be an important factor for successful de - sign and good quality products . However , without a firm link between the quality aspect of user participa - tion and the democracy and control aspect , participatory design is a deeply controversial issue from the point of view of the employees and their labor organizations . Given that agreement can be reached on the importance of both the democracy aspect and the quality aspect , par - 142 ticipatory design is a promising approach for the fu - ture , It is , however , an approach that faces non - trivial theoretical and methodological problems . Our design methods must change so as to take : users’ experience seri - ously . Epistemologically this means that the fundamen - tal Cartesian “picture theory” of the world must be replaced . But , taking users seriously also means under - standing that systems design is boring to most people . We must develop design methods that make participa - tion not only rewarding in terms of yielding better working conditions , but also fun . My position is that this can be done . This position is based on theoretical and practical involvement with par - ticipatory design in Scandinavia during the last fifteen years . However , my position is not that this ideal has been reached in Scandinavia . We , like the rest of the world , desperately need a glasnost in systems design , and a perestroika to be able to design for quality of work and product in the real world . Jonathan Grudln The organizational structure and development processes in large product development organizations were estab - lished prior to the importance of the human - computer interface to software . As a result , there are inherent ob - stacles within these organizations to involving users in the design and development of the interface . These in - clude problems in identifying appropriate users , obtain - ing access to them , using the results of contacts , and ob - taining feedback following product release . Internal communication problems exacerbate the problem . In ad - dition , approval and review processes that may be satis - factory for most software can be hazardous to interface development . Overcoming these obstacles may nltima - trely require organizational change ; in the meantime , those wortig within the organization must be aware of these constraints and seek organizational paths to cir - cumnavigate or hurdle them , Obstacles to identifying appropriate user - participants . These stem from the nature of developing products that are intended to appeal to a broad range of users , not all of whom are necessarily identified in advance , and from the division of responsibilities within organizations set up to develop such products . The user interface special - ist often works with a development team on a particu - lar application or even part of an application . Not even the project manager of the development group may see the larger picture : the application mix that customers typically use , the practices and preferences of the in - stalled customer base , strategic information about in - tended markets for a product ( e . g . , banking vs insurance industry ; p . rivate MDs vs HMOs ) . This information may reside in distant Marketing or Sales divisions , or may be jealously guarded by high - level management due to its competitive importance . Another complication is that systems are often extensively modified or ex - tended by other development organizations ( either with - in the company , within the customer’s company , or by an independent company that tailors the product for spe - cific vertical markets ) . These developers are also users CHI 90 Proceedings & ril1990 whose participation might be desirable . Obstacles to gaining access to users once identified . One problem is that existing contacts within the cus - tomer organization may be with information system spe - cialists or managers who serve as spokespeople for the users , and not with the users themselves . Getting past these people may not be easy , as their job is precisely to serve as intermediaries . In addition , sales representa - tives may be loathe to have developers meet with cus - tomers , fearing that the developers will offend or alarm the customers or create dissatisfaction by describ - ing products not yet available . Obstacles to effective use of the results . Given the po - tential diversity of customers for a given product , it is often difficult to know how to generalize from limited contact with users . There is the danger of overgeneraliz - ing from one or two experiences , and the complementa - ry problem of making decisions when users disagree . Obstacles resulting from the luck of user feedback . Some ( often haphazard ) feedback from users may be col - lected , but it rarely gets back to developers . It is the job of field service or software support groups to work with customers and maintain products , while the devel - opers work on new releases or move on to other projects . The developers’ lack of experience with feed - back is an obstacle both to improving specific products and to their overall sensitivity to the possible value of user participation . They aren’t aware of the users’ pain . Where is the design team ? Broadly defined , the “user interface” is not often the province of one team . The hardware is designed by one group , the software by an - other , the documentation by a third , and the training by a fourth . Communication among these groups may be surprisingly little . With which group is a user to par - ticipate ? And while technical writers ( to choose just one example ) recognize that they should participate in designing the software interface , since the interface must work together as a whole , there is rarely corpo - rate awareness of this . So how likely is the company to see the value of placing m on development teams ? Obstacles arising in the development process . Efforts to routinize software development create difficulties for the less predictable aspects of design , of which the user interface is one . An emphasis on advance review and “sign - off’ on designs works against iterative de - sign . The high visibility of the user interface makes its design particularly subject to controversy . Finally , the software development process is one of constant com - promise and tradeoff . There are many competing pressures , In the absence of strong empirical support , aspects of the user interface may be undervalued when such bargaining occurs , and hence compromised . These are severe but not intractable problems . Ulti - mately we will see changes in structure and processes within product development organizations , because ob - taining the participation of users will become too im - portant an element in product success . In the meantime , these obstacles must be faced one at a time , with an un - derstanding of why the organizational constraints are there . Without such awareness it is too easy to be inef - fective and frustrated , blaming apparently - recalcitrant individuals for the lack of progress toward participa - tory design , when it is not individuals but organization - al processes that must be changed . Bonnle Nardl Users have an insatiable appetite for new software appli - cations . Our tasks change , we learn new ways to do things , and there is immense diversity in the work we do with computers . While it may be feasible to call in outside advisors , developers , and facilitators to expedite participatory design for infrequent projects such as plan - ning a new system of networked PCs for an office , the constant need for new software makes assembling and managing such teams difficult . One way for users to get the applications they want is to build them them - selves . This is the most practical solution for two reasons : 1 ) there are never enough developers to go around for all the applications users would like to have , and 2 ) users understand their own tasks - domains in a way that others cannot . We need software that allows users to build applications specific to their tasks , and that does not require extensive training in programming . What should this software be like ? Spreadsheets and HyperCard * are two programs that have proven very useful to non - programmers . They share three character - istics : 1 ) they are limited domain environments capable of supporting only a certain class of applications , 2 ) they have strong visual formats based on familiar visual displays which suggest a way to organize and present da - ta , and , 3 ) they are constructed in layers , the highest of which allows users to build applications without know - ing formal programming techniques . Successive layers such as the macro languages of spreadsheets or Hyper - Card’s HyperTalk * allow more sophisticated pieces to be added to the applications built with the first layer . If spreadsheets and HyperCard are any indication , it is unlikely that user programming will be achieved with general purpose programming languages , even visual ones . Example - based programming and program visual - iation may help people learn traditional programming , but they will not extend broad computing power to those . who do not take the formal courses in which these techniques are used and taught , The expressive power provided by the abstractness of a language such as C or Lisp or Pascal comes at too high a price for the non - pro - grammer : the mapping fmm the everyday way we think about a problem to the way it is expressed in the ab - stract computer language is too difficult . In limited - domain software systems such as HyperCard and spread - sheets , the software is much closer to an everyday repre - sentation of the user’s problem : a spreadsheet is a table of numbers that are related to one another via simple al - gebraic formulas , and a HyperCard stack is a set of 3X5 cards . These systems only work for a certain class of applications , but non - programmers can conceptualize 143 CHI 90 Pmceediw Apfil1990 and build applications with them . The above speculations about user programming clearly require much more study . I would like to really under - stand spreadsheets and HyperCard and other user pro - gramming systems . A good way to learn about them is to do ethnographic studies of people actually using these systems . As an example of such research , I have been studying how non - programmers develop spread - sheets . I have found that spreadsheets are developed coonerativelv ; non - programmers build basic spreadsheet models , and are then aided by more sophisticated users who help in areas such as macro writing , using the ad - vanced presentation capabilities of spreadsheets , and writing complex formulas [ 4 , 51 . This happens in very informal ways - - people do not organize themselves in - to teams or task forces to build spreadsheets , they sim - ply activate existing informal social networks . What this tells us about user programming is that non - pro - grammers need to be able to do real development work , but they do not have to do & l the work . Different kinds of users with differing skills and interests can work together , as long as the software supports them . What I’ve learned about cooperative spreadsheet develop - ment is only one finding from one study about one kind of software . One of my reasons for being at the panel is to say that we should be studying how people use ex - isting commercially available software to find out what works and what doesn’t work . Over the last 20 years or so , computer access has been slowly extended to less sophisticated users , and there is much to be learned from studying programmable systems that have large us - er populations , including statistical packages such as SPSS and SAS , spreadsheets , 4GL . 5 , style sheets in word processing programs , HyperCard , the Metaphor * work - station , and NewWave * . * HyperCard and HyperTalk are trademarks of Apple Comput - er . Metaphor is a trademark of Metaphor Computer Systems . NewWave is a trademark of Hewlett - Packard Corporation . Karl Thoresen In Norway , participation in systems design is facilitated by laws , labour agreements , negotiation procedures , and work environment councils . However , formal rights do not guarantee meaningful participation . Several other conditions should be fulfilled . User representatives need time off from their work . Officially , this is often granted . In practice however , user representatives often find themselves trying to cope with more than one job . Systems developers , on the other hand , should be encouraged to follow and ob - serve the users in their regular work , to be able to un - derstand the context in which the system will be used . Analysis of users’ work is commonly carried out in meeting rooms , or often just by questionnaires , which give only a vague impression of the actual work . The systems designers should also be given the opportunity to see the results of their design . Just sitting down with someone who uses the system is a new qm - ien ~ 144 to most designe - rs . Thus , lack of knowledge on botli sides can undermine good intentions . Established models for project organi - zation , project work , work analysis , etc . are commonly based on implicit assumptions that the necessary knowl - edge somehow exists , making the process of designing a system mainly a matter of extracting the knowledge from the participants , be it users or developers . More often than not , these assumptions do not hold . There - fore , development projects need to be transformed from production processes to mutual learning processes . Learning must be built into the process , by changing the ways in which project groups work together . This is not an easy task in a setting restricted by tight time - schedules and strict resource control . However , we see a growing acceptance of the need to rethink the traditional life - cycle models of software development , yielding more iterative , learning - based models . My own experience suggests a design approach that inte - grates develoament and use . Feedback from actual use - situations may be a slow process , but it may be crucial to building mutual learning into the process . My experience comes partly from building systems for particular work places , and partly from building more general packages in cooperation with a vendor . The project design certainly should be different when the goal is to develop generic tools , but the principles of in - corporating learning into the process are still valid . So far the arguments that seem to have most effect , on managers in particular , are not the qualification as - pects . More often the key words are “system quality” , with respect to both use and “user acceptance” . We need investigations to clarify the relations between systems quality with regard to use , and the benefits for the orga - nization . Such insights might help in making participa - tory design more acceptable . REFERENCES 1 . Ehn , P . Work - Oriented Design of Computer Artzfucts . Erlbaum , Hillsdale , N . J . , 1989 . 2 . Bjerknes , G . , Ehn , P . , Kyng , M . ( eds ) Computers and Democracy - - A Scandinavian Challenge . Gower , Brookfield , VT , 1987 . 3 . Greenbaum , J . and Kyng , M . ( eds ) Design at Work . Erlbaum , Hillsdale , NJ . , in press . 4 . Nardi , B . “Spreadsheet Use : A Case Study of Cooperative Computing . ” Unpublished manuscript , Hewlett - Packard Laboratories , Palo Alto , 1989 . 5 . Nardi , B . and Miller , J . “Twinkling Lights and Nested Loops : Distributed Problem Solving and Spreadsheet Development . ” STL - Report - 89 - 30 , Hewlett Packard Laboratories , Palo Alto , 1989 . Submitted to the ACM Conference on Office Information Systems .