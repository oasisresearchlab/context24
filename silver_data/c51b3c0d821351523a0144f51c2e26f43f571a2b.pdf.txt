IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 1045 Analog Circuit Design Knowledge Mining : Discovering Topological Similarities and Uncovering Design Reasoning Strategies Fanshu Jiao , Student Member , IEEE , Sergio Montano , Cristian Ferent , Student Member , IEEE , Alex Doboli , Senior Member , IEEE , and Simona Doboli Abstract —Mining engineering metaknowledge from electronic documents is important in devising new design solutions for emerging applications as well as in identifying new business opportunities . Continuously and comprehensively reviewing and assessing the entire technical literature to ﬁnd the most relevant ideas and solutions is cumbersome as engineering innovations are constantly being proposed . In particular , high performance analog circuit design has been at the forefront of technolog - ical innovations given their importance in applications , like telecommunications , mobile applications , and health care . This paper proposes a model and mining techniques for representing analog circuit design metaknowledge . The metaknowledge repre - sentation includes three components : an associative component presenting the conceptual hierarchy of the considered circuits , a component expressing the performance capabilities ( e . g . , trade - offs and bottlenecks ) of the circuits , and a causal modeling part describing the more likely starting ideas and design plans used to create a circuit . Knowledge structures can be used to tackle new applications , identify opportunities to improve existing circuits , and validate design correctness . A case study illustrates the pro - posed knowledge structure for a set of 30 modern , high - frequency analog circuits . Index Terms —Design for space exploration , mixed mode , modeling , symbolic techniques . I . I NTRODUCTION T HERE has been a constant need for innovation in ana - log circuit design as new applications emerged and new manufacturing processes have been devised . Over time , prob - lem speciﬁcations have continuously changed with respect to the required size , speed , bandwidth , linearity , power con - sumption , and robustness of the designs . New ideas , design solutions , topological structures , and analysis methods have been constantly presented in the related literature to address current challenges and opportunities . Often , it is hard to sum - marize and organize the entire published literature , so that , while devising a novel solution , all related ideas and cir - cuit designs are effectively identiﬁed , analyzed , and utilized Manuscript received May 14 , 2014 ; revised August 28 , 2014 ; accepted October 1 , 2014 . Date of publication April 1 , 2015 ; date of current version June 16 , 2015 . This work was supported by the Directorate for Computer and Information Science and Engineering under Grant IIS 0856038 . This paper was recommended by Associate Editor X . Li . F . Jiao , S . Montano , C . Ferent , and A . Doboli are with the Department of Electrical and Computer Engineering , State University of New York at Stony Brook , Stony Brook , NY 11794 - 2350 USA ( e - mail : alex . doboli @ stonybrook . edu ) . S . Doboli is with the Department of Computer Science , Hofstra University , Hempstead , NY 11549 USA . Digital Object Identiﬁer 10 . 1109 / TCAD . 2015 . 2418287 as starting - points for new circuit designs . It is not unlikely that superior designs are ignored or previous ideas are redis - covered . Similarly , automated synthesis methods are arguably ill - equipped to immediately reuse or reﬁne recent circuit design innovations ( presented in the literature ) due to their lack of capabilities for knowledge mining and reasoning . These limitations are likely to result in less effective circuit designs , hence lower design quality , productivity , and market impact . Automatically mining and constructing circuit design meta - knowledge representations from electronic documents can offer a quicker and less - costly way to systematically orga - nize , reuse , disseminate , and expand state - of - the - art design knowledge , tackle new design opportunities and applica - tions , and understand the dynamics ( evolution ) of design ideas that address speciﬁc performance challenges . Mining metaknowledge from scientiﬁc and engineering documents has been an intriguing endeavor in areas like medicine and genetics [ 1 ] , [ 6 ] . Current applications include identifying the best curing procedures , integrating genome sequencing data , ﬁnding incoherencies in data , and many more . In spite of these opportunities , to the best of our knowledge , there has been no work on metaknowledge mining and representation in analog circuit design . This paper discusses a representation for knowledge min - ing for analog circuit design . An important step in knowledge description is not only mining and expressing the topological features and performance capabilities of new circuits , but also discovering the most likely reasoning ( design ) plans that pro - duced a design , e . g . , the starting ideas , sequences of design steps , and their justiﬁcations . Design plans can be reused or extended to tackle new problems by synthesizing new cir - cuit topologies , or might expose design steps that can be improved to create more efﬁcient solutions . Also , discover - ing the ( most likely ) ideas that served as starting points in a design are utilized to understand how ideas evolve and propa - gate within a design community . This can be used to uncover unexplored design opportunities and new market niches . This paper illustrates the using of the proposed knowledge represen - tation for analog circuit topology synthesis . Topology selection and reﬁnement were discussed in [ 7 ] and [ 11 ] . Various data mining methods have been suggested for cir - cuit modeling , including identiﬁcation of feature similarities and differences , classiﬁcation , and clustering . Liu et al . [ 25 ] proposed sequential ﬁtting of regressors to represent the per - formance space of circuits , including the vast space regions explored during synthesis . The circuit modeling procedure 0278 - 0070 c (cid:2) 2015 IEEE . Personal use is permitted , but republication / redistribution requires IEEE permission . See http : / / www . ieee . org / publications _ standards / publications / rights / index . html for more information . 1046 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 in [ 5 ] extracts piecewise linear models from trained neural networks . De Bernardinis et al . [ 4 ] described support vector machine - based modeling , in which circuits are classiﬁed based on the offered performance . A knowledge extraction tech - nique using binary decision trees is discussed in [ 17 ] . Decision trees utilize performance attributes to partition a set of circuit topologies based on their achievable performance , e . g . , topolo - gies that offer a certain dc gain value , slew rate ( SR ) , and so on . Clustering circuit features has been proposed to identify the regularities of circuit topologies [ 3 ] , or to build classiﬁca - tion schemes for analog circuits [ 11 ] . However , these methods did not consider knowledge structures that include abstractions or design plans of the represented circuits . Moreover , tradi - tional clustering methods do not use symbolic expressions , which are powerful in giving insight into circuit behavior and performance . Identifying the sequence of design steps to create a circuit design is similar to understanding system or process causal - ity . Understanding causality has been an important research topic [ 18 ] , [ 19 ] . Causality - related algorithms learn the struc - ture of the causal model of a process and its parameters from a set of samples . Simon’s algorithm [ 21 ] causal ordering , a seminal work , generates partial causal graphs to indicate the causal relations among the variables of a structural description of a system modeled as sets of linear equations . Nayak [ 18 ] studied causal approximations through bipartite matching as a way to tackle the complexity of causal modeling of physi - cal systems . Lu and Druzdzel [ 16 ] extended the algorithm by Simon to under - constrained , structural equations . In spite of this paper , to the best of our knowledge , mining causal infor - mation ( e . g . , the design plan ) from circuit schematics has not been yet studied . This paper proposes a novel representation for expressing the knowledge extracted from analog circuits . The knowledge structure representation has three parts as follows . 1 ) The associative part groups a set of circuits into a hier - archy of abstract concepts ( abstractions ) . An abstraction describes the similarities among its instances as well as the symbolic expressions that present the patterns of the alternative topological features ( i . e . , nodes and edges ) and electrical behavior of the instances . 2 ) The performance capabilities describe a circuit’s or an abstraction’s performance tradeoffs and bottlenecks rele - vant to the problem requirements . This paper proposes a method to generate performance tradeoffs for the more abstract concepts by combining the tradeoff tables of their instances . Tables indicate the common attribute variations of the instances and the distinct attribute variations of the alternative designs . 3 ) The causal part identiﬁes possible design features that served as starting ideas in devising new circuits as well as the design steps and their justiﬁcations in creating the designs . This paper also presents the algorithms required to compute each of the three parts of the design knowledge representations . This paper discusses the experimental results for a knowl - edge structure built for 30 state - of - the - art , high - frequency circuits . A case study on circuit topology synthesis illustrates the usefulness of knowledge representation . This paper has the following structure . Section II presents the main deﬁnitions of the knowledge representation , Fig . 1 . Overview of the methodology to produce knowledge representations . ( b ) ( a ) Fig . 2 . ( a ) Basic V – I converter circuit and ( b ) simple associative part . and Section III discusses the algorithms to construct representations . Section IV offers a reasoning - based synthe - sis methodology using the proposed knowledge representation . Section V presents experimental results . The conclusion ends this paper . II . C IRCUIT D ESIGN K NOWLEDGE R EPRESENTATION Fig . 1 offers an overview of the proposed methodology to produce knowledge representations for analog circuit designs . Inputs are circuit topologies ( schematics ) , which are ﬁrst con - verted into their signal - ﬂow graph ( SFG ) representation using the method in [ 24 ] . SFGs express linear and weak nonlin - ear ac performance and noise . Fig . 3 illustrates the SFGs of simple differential input ( DI ) stages . The nodes of SFGs cor - respond to the circuit nodes and arcs describe node coupling . Every node is annotated with a symbolic expression of the node’s pole . Every arc has a symbolic expression denoting node coupling . Next , the similarities and differences between circuit pairs are computed using the symbolic comparison algorithm in [ 10 ] . The tradeoffs and bottlenecks of each circuit are also calculated . Then , feature similarities and differences are utilized to produce more abstract concepts by clustering circuit instances . This step generates the associative part of the knowledge representation . The following step produces the performance capabilities of the associative part by combining the performance tradeoffs of the instances forming abstract concepts . Finally , the causal part is found by using the circuit schematics , tradeoffs , and associative component to identify the starting ideas and design step sequences that were likely used to design a circuit . The main elements of the three knowledge representation parts are presented next . A . Associative Part We offer a summary of the associative part as a detailed description of its theoretical characteristics was presented in [ 8 ] and the method to compute abstractions was offered in [ 9 ] . Attributes , concepts , tradeoffs , and bottlenecks are the main elements of an associative part . Fig . 2 depicts a simple JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1047 Fig . 3 . Associative part for simple DI stages . associative part and Fig . 3 shows the associative part for a set of DI circuits . Every circuit topology is characterized by a set of attributes that express the symbolic relations between circuit parame - ters ( e . g . , device sizes ) under the constraints that deﬁne the behavior of the circuit . An attribute deﬁnes a symbolic , math - ematical relation ( rel ) between a set of variables ( vars ) and holds for a set of constraints called context ( context ) [ 8 ] ( vars ; rel ; context ) . ( 1 ) Variables are physical properties that can be measured ( observed ) , like device dimensions , value ranges of the sig - nals ( voltages and currents ) , consumed energy , and so on . The constraints in set context relate to the performance requirements . Example 1 : Fig . 2 ( a ) shows a basic V – I converter to gen - erate an output current I od proportional to the input voltage V id . In addition , the performance requirements include max - imizing the gain and linearity and minimizing the difference between parameters K 1 and K 2 . The following attribute relates the output to the design variables [ 8 ] : (cid:2)(cid:3) I S , V id , V 1 , ds , V 1 , gs , V 2 , ds , V 2 , gs , K 1 , K 2 , I od (cid:4) gain = I od V id = (cid:5) 2 I S KV idq (cid:6) 1 − K 2 I S V 2id V 1 , ds > V 1 , gs − V t , V 2 , ds > V 2 , gs − V t , K 1 = K 2 = K (cid:7) . ( 2 ) The attribute represents the involved design variable ( e . g . , bias current I S , voltages V 1 , ds , V 1 , gs , V 2 , ds , and V 2 , gs , and transistor sizes K i ) , the gain performance expressed as a relation between variables , and the context , which states that the two transis - tor operate in saturation and their gains ( sizes ) are matched . Note that the context expressions relate to the performance requirements of the problem . Depending on the meaning of the variables , attributes cor - respond to three representation facets : 1 ) circuit topology ( structure ) , when variables are currents and voltages at the circuit nodes ; 2 ) electrical circuit behavior , when variables are the electrical signals ( e . g . , state variables ) of the circuit and relations are the transfer functions between nodes ; and 3 ) circuit performance , which relates standard performance attributes ( like gain , bandwidth , SR , etc . ) to circuit parameters , i . e . , device sizes and signal values . For example , attribute ( 2 ) describes circuit performance . Deﬁnition 1 : A concept describes a group of instances ( e . g . , circuits or other concepts ) through the following four elements : 1 ) a nonempty set I of the common attributes of the instances ; 2 ) a nonempty set U of the unique attributes of the concept , hence which distinguish the concept from others ; 3 ) a set E of enabling conditions that control the attributes ; and 4 ) the same performance requirements of the instances ( which sets the same context for the circuits ) [ 8 ] . Example 2 : Fig . 2 ( b ) presents concept 1 which is deﬁned by set I of common attributes ( A 1 and A 2 ) , set U of unique attributes ( A 0 ) , and set E of enabling conditions ( cond 1 ) . The performance requirements of the concept are also shown in the ﬁgure . Concept 1 corresponds to the set represented by concept 2 and concept 3 . Note that these concepts include the common attributes of concept 1 ( A 1 and A 2 ) , but also have distinguishing attributes A 3 and A 4 , respectively . Deﬁnition 2 : The associative part of the knowledge repre - sentation is the hierarchical description of a set of circuits and their corresponding concepts at various levels of abstraction . Example 3 : Fig . 3 presents the associative part correspond - ing to simple DI stages in operational ampliﬁer circuits . Concept D is the most abstract concept , in which the two identical sub - graphs P 1 , P 2 , and P 3 correspond to the two input transistors of the stage . Edge labels express the cou - pling between nodes . Every node includes the pole expression at the node . The two nodes P 2 encircled by dashed line are coupled in the more detailed instances , including the coupling to nodes P 1 shown as shaded bubbles . Nodes labeled with a star , e . g . , nodes P 2 and P 3 , are nodes used for implementing new coupling in the more detailed circuit structures . Concept D corresponds to two , more detailed concepts : D 1 in which the two nodes P 2 of concept D are merged , and concept D 2 that uses a more complex coupling to connect the two nodes P 2 . Concept D 3 is an instance of concept D 2 , in which nodes P 3 are not used for coupling to produce more complex inputs stages . Concept D 3 is a simple DI stage . Note that concept D 5 is based on concept D 2 , but does not include the features of coupling at nodes P 3 . The concepts in Fig . 3 have their sets I deﬁned by the sym - bolic expressions that link nodes P i in the graphs and their sets U correspond to the symbolic expressions of the edges that occur in a concept D i but not in the other concepts , which are immediate descendants of the same concept as D i . Tradeoffs are attributes that relate two or more performance attributes , so that setting the variable values to improve one performance attribute reduces another performance attribute . Tradeoffs are expressed as tables in which columns represent performance attributes [ e . g . , gain , noise , pole set , and gain - pole product ( GPP 0 ) ] and rows indicate the design variables that control each attribute [ 10 ] . 1048 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 TABLE I P ERFORMANCE T RADEOFFS OF C IRCUIT 4 ( 1 ) IN F IG . 11 TABLE II P ERFORMANCE T RADEOFFS OF C IRCUIT 4 ( 2 ) IN F IG . 11 Example 4 : Table I illustrates the performance table for circuit 4 ( 1 ) in Fig . 11 . The columns indicate the common - mode ( CM ) gain , dc gain , noise , dominant pole ( DP 0 ) , and GPP 0 . Upward arrows express that increasing variable value improve the performance attribute . Downward arrows show that the variable worsens the attribute . Bottlenecks are performance attributes that are upper or lower bound to a ﬁxed value . B . Performance Capabilities The tradeoff tables of instances are combined to produce tradeoff tables of the corresponding concepts . The combined tables indicate the common tradeoffs speciﬁc to the similar vari - ables of the instances and alternative tradeoffs that are possible through the distinct ( speciﬁc ) variables of the alternatives . Deﬁnition 3 ( Similar Tradeoffs ) : Let us assume two trade - offs , tradeoff T 1 of circuit C 1 and tradeoff T 2 of circuit C 2 . First , let us consider that each tradeoff is controlled by a sin - gle variable : parameter v 1 for circuit C 1 and parameter v 2 for circuit C 2 . Tradeoffs T 1 and T 2 are similar , if variables v 1 and v 2 originate the same kind of variations ( e . g . , improving or worsening ) for the performance attributes of the tradeoffs . Then , the two controlling variables v 1 and v 2 are similar with respect to the two tradeoffs . Second , let us assume that each tradeoff is controlled by a set of variables , SV 1 and SV 2 , respectively . Tradeoffs T 1 and T 2 are similar , if there is a mapping between all variables in sets SV 1 and SV 2 , so that the associated variables are similar with respect to the two tradeoffs . The two sets of controlling variables , SV 1 and SV 2 , are called similar . Example 5 : In Tables I and II , the two tradeoffs on the ﬁrst row are similar and involve the similar variables g md3 and g md10 of the two circuits . The tradeoffs on rows seven are not similar . They show different variations of the attributes . The distance between two tradeoffs over a circuit parameter domain (cid:2) is deﬁned by the total differences in the performance attribute values computed for domain (cid:2) . The distance between the tradeoffs characterizes their dissimilarity . Deﬁnition 4 ( Distance / Dissimilarity Between Two Tradeoffs ) : Given tradeoffs T 1 of circuit C 1 and T 2 of C 2 and parameter domain (cid:2) , the distance between the two tradeoffs is computed by the following expression : dist ( T 1 , T 2 ) = p (cid:8) i = 1 (cid:9) (cid:2) w i | A 1 , i − A 2 , i | . ( 3 ) Tradeoffs T 1 and T 2 are characterized by p performance attributes A i . w i are the weights associated to each attribute both for normalization and for indicating the importance of the attribute . These weights are used for building relation rel of the attribute description of the tradeoff [ expression ( 1 ) ] . Example 6 : Considering that tradeoffs T 1 and T 2 include only two performance attributes , the distance is computed by the expression w 1 (cid:10) (cid:2) | A 1 , 1 − A 2 , 1 | + w 2 (cid:10) (cid:2) | A 1 , 2 − A 2 , 2 | . If a circuit design does not meet the problem requirements , the distance of tradeoff T to satisfying the problem require - ments is equal to the minimum distance of the attributes that do not meet the constraints to the requirements computed for the domain (cid:2) (cid:3) for which the minimum distance is achieved . Deﬁnition 5 ( Distance to Satisfying the Problem Requirements ) : The distance to satisfying the problem requirements is computed as follows : dist ( PC , T ) = min p (cid:8) i = 1 (cid:9) (cid:2) (cid:3) w i | PC i − A i | ( 4 ) where PC i is the p unsatisﬁed performance requirements and A i is the corresponding performance attributes . Deﬁnition 6 ( Pareto Criterion ) : For parameter domain (cid:2) , tradeoff T 1 of circuit C 1 dominates tradeoff T 2 of circuit C 2 , if for every performance attributes A 1 , i ∈ T 1 and A 2 , i ∈ T 2 , A 1 , i > A 2 , i or | A 1 , i − A 2 , i | < (cid:3) , where (cid:3) is application dependent . The tradeoffs and bottlenecks for concepts are found by combining the tradeoffs of their related instances . The result - ing tradeoff table includes the similar tradeoffs as well as merged tradeoffs , which express the alternative tradeoffs of the instances . Merging two tradeoffs pertaining to two circuits is performed according to the next deﬁnition . Deﬁnition 7 ( Merging Two Tradeoffs ) : The merged trade - off of two tradeoffs T 1 ∈ C 1 and T 2 ∈ C 2 includes the similar performance attribute entries of the two tradeoffs ( e . g . , if both entries are ↑ or ↓ ) and the dissimilar entries , which express the alternative performance attribute variations , like ↑ / ↓ , ↑ / − , and − / ↓ . The similar controlling variables of the similar performance attributes are grouped together in the merged tradeoff table . Lemma 1 : When grouping multiple tradeoffs , the merged table includes only the following type of entries : ↑ , ↓ , − , ↑ / ↓ , ↑ / − , − / ↓ , and ↑ / ↓ / − . Proof : Any other alternative is reduced to one of the above seven situations . For example , merging ↑ / ↓ with ↑ results in ↑ / ↓ , or merging ↑ / ↓ with − produces ↑ / ↓ / − . Example 7 : Table III describes the tradeoff table computed for the abstraction representing circuits 4 ( 1 ) and 4 ( 2 ) . The ﬁrst four rows present tradeoffs that are common to the two circuits , hence are tradeoffs of the abstraction too . Each of the tradeoffs have the same controlling variables and express the same type of attribute variations . The tradeoffs in rows ﬁve and six show for both circuits the same variation of the noise attributes , but the two circuits differ with respect to the JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1049 TABLE III P ERFORMANCE C APABILITIES FOR THE A BSTRACTIONS 4 ( 1 ) AND 4 ( 2 ) controlling variables that set the noise attribute . The parame - ters outside the accolades are common to both circuits . The parameters inside the accolades are speciﬁc to one of the cir - cuits , e . g . , − / C gd3 in row ﬁve indicates that the parameter occurs in the second circuit , while the ﬁrst circuit does not include a similar parameter ( null variable ) . Rows seven and eight present tradeoffs for which the attributes have different attribute variations . The tradeoff table indicates that the abstraction for circuits 4 ( 1 ) and 4 ( 2 ) offers more ﬂexibility in improving the bandwidth and noise performance of the related circuits , but less capabilities in improving the common mode and dc gain . Tradeoff 1 improves DP 0 , tradeoffs 1 and 2 improve GPP 0 , and tradeoffs 1 , 6 , and 7 better the noise performance . However , only tradeoff 2 improves gain . C . Causal Part The main elements describing the causal part of a knowl - edge representation are as follows : 1 ) causality of a design step ; 2 ) design sequence ; 3 ) utility ; 4 ) justiﬁcation ; and 5 ) consistency . The elements are introduced next . The causality of a design step expresses the reasons for using the step to produce a design , e . g . , reducing the distance to the application goal ( problem requirements ) . Deﬁnition 8 ( Causality of a Design Step ) : (cid:11) dist ( goal , S ) | < DF , Des , CP > → < DF (cid:3) , Des (cid:3) , CP (cid:3) > (cid:12) . ( 5 ) The deﬁnition states that a design step represents the asso - ciation between the triplet : 1 ) the set DF (cid:3) of new design attributes ( features ) introduced ( at various abstraction levels ) by the step ; 2 ) the resulting design Des (cid:3) that incorporates fea - tures DF (cid:3) ; and 3 ) set CP (cid:3) of the constraints for design Des (cid:3) and the reason that justiﬁes this decision represented by the dis - tance dist between the desired goal ( i . e . , problem speciﬁcation ) and performance S of the current design Des evaluated for attributes DF incorporated by the design . Set CP is constraints over the design parameters of design Des , e . g . , device values and device operation modes ( i . e . , transistor operation modes ) . Deﬁnition 9 ( Design Sequence ) : A design sequence is a succession of design steps , for which the causality of each step is expressed as in expression ( 5 ) . The deﬁnition of design step causality indicates that there are two kinds of steps depending on their justiﬁcation of being used to create a new circuit design : 1 ) design steps that are jus - tiﬁed by changing the performance tradeoffs and bottlenecks through the attributes of the modiﬁed structural features and 2 ) design steps that relax the design constraints of a solution due to the new structural features . ( a ) ( b ) Fig . 4 . ( a ) Circuit 4 ( 1 ) and ( b ) its corresponding design sequence . Utility captures quantitatively the justiﬁcation of a design step with respect to the two criteria . Deﬁnition 10 ( Utility ) : Utility = < dist ( goal , S ) dist ( goal , S (cid:3) ) , R ( CP (cid:3) ) R ( CP ) > . ( 6 ) Function R describes the constraining level deﬁned by the constraints in set CP ( CP (cid:3) ) . For example , function R could represent the ranges of circuit parameters . The ﬁrst utility term indicates the amount by which the performance of the new design S (cid:3) is closer to the goal as compared to the performance of the initial design S . The second term shows the amount by which the design constraints were relaxed by the new design . Deﬁnition 11 ( Justiﬁed Design Step ) : Given a goal , a design step is justiﬁed , if at least one of its resulting utility com - ponents ( distance to goal or constraining level ) is greater than 1 . A design sequence is justiﬁed if each design step is justiﬁed . Note that a design sequence might not be justiﬁed , if it includes at least one design step , which neither improves per - formance nor relaxes the design constraints . Unjustiﬁed design steps might arguably represent reasoning ﬂaws . Deﬁnition 12 ( Consistency ) : A design sequence is consis - tent if the end design ( the design after the last design step ) meets the speciﬁed goal ( problem requirements ) . Deﬁnition 13 ( Starting Ideas ) : Given a design sequence , the starting features ( ideas ) of the sequence are the triplets < DF , Des , CP > of the design steps that originate the sequence . DF , Des , and CP have the same meaning as in the design step causality deﬁnition . Example 8 : Fig . 4 illustrates circuit 4 ( 1 ) and its correspond - ing design sequence . The circuit in Fig . 4 ( a ) is an operational transconductor ampliﬁer for low voltage (cid:2)(cid:4) modulators [ 15 ] . The design sequence in Fig . 4 ( b ) presents the starting design features ( ideas ) and the design steps that created the circuit . According to [ 15 ] , the starting features included combining a fully differential structure with common mode feedback with a complementary folded cascode ( FC ) structure . The justi - ﬁcation for using complementary FC is its high gain , high speed operation , and better dynamic range ( DR ) for low volt - age supply [ 15 ] . The corresponding structure in Fig . 4 ( a ) was labeled as 1 . The starting features include the design step that decided to use a complementary folded structure instead of just a cascode structure due to its improved DR . The next two design steps in the sequence include the steps that intro - duce the two biasing circuits labeled as 3 and 4 in Fig . 4 ( a ) . The last design step of the sequence replaced the current sources with cascode current sources , labeled as 5 in the ﬁgure . 1050 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 ( a ) ( b ) ( c ) Fig . 5 . ( a ) Design sequence , ( b ) unjustiﬁed sequence , and ( c ) incremental reasoning for topology synthesis . This step is justiﬁed by the need to improve common mode rejection ratio ( CMRR ) , which is a bottleneck of the circuit . Deﬁnition 14 ( Required Design Step ) : Given a design sub - sequence Sub , a design step D is required for sub - sequence Sub , if every consistent design sequence including Sub also includes step D following Sub . A required sub - sequence is a sequence of required steps . Required sub - sequences represent unique causal structures that cannot be replaced by equivalent structures . Common sub - sequences of distinct design sequences characterize the ﬂexibility of the circuit structures corresponding to the sub - sequence with respect to accommodating the different goal requirements tackled by the circuits . For example , steps 3 and 4 are required steps in the sequence in Fig . 4 ( b ) as the circuit would not operate without biasing . Theorem 1 : A design sequence consistent for goal G is inconsistent for goal G (cid:3) ( G (cid:8) = G (cid:3) ) , if and only if it includes at least one design step that introduces a bottleneck for goal G (cid:3) . The ﬁrst design step ( in the sequence ) introducing a bottleneck is called branching step for goal G (cid:3) . Proof : If there was no bottleneck for goal G (cid:3) then the sequence is justiﬁed , which contradicts the assumption . Example 9 : Fig . 5 ( b ) shows an unjustiﬁed reasoning ﬂow , in which the ﬂow for a previous goal [ Fig . 5 ( a ) ] does not create a constraint - satisfying design for a new goal . The reasoning sub - sequence in Fig . 5 ( a ) produces the bottleneck in Fig . 5 ( b ) . As shown in Fig . 5 ( c ) , a synthesis ﬂow based on incremental reasoning attempts to remove the bottleneck by considering an alternative design step , which spawns a new design sub - sequence that meets the problem requirements . The next section discusses the algorithms to construct associative parts , performance capabilities , and causal parts ( mining starting design features and design step sequences ) . III . A LGORITHMS TO C ONSTRUCT K NOWLEDGE R EPRESENTATIONS A . Constructing Associative Parts Fig . 6 presents the algorithm to construct the associative part of a knowledge representation . Inputs are a set of circuits C 1 , C 2 , . . . , C n , and output is KnowStr , the corresponding associative part . Fig . 3 is an example of an associative part . The algorithm starts by identifying all circuit sub - sets that incorporate the same structural features , like circuits with complementary inputs , circuits with FC outputs , circuits with common feedback structures , and so on . This step is achieved by computing all maximal circuit clusters K i based on the structural similarity of the circuits in a cluster , e . g . , the number structural features shared by the circuits . Cluster maximality indicates that a cluster is not contained in another cluster . Next , the outermost for - loop creates bottom - up the concept structure for each cluster K i . The process ﬁrst identiﬁes Fig . 6 . Algorithm to construct the associative part . set P i of the most structurally similar instances in set K i ( either circuits or concepts ) , and then creates by calling pro - cedure Create abstraction a new abstract concept ( C a ) that describes the instances . Concept C a is added to the associa - tive part KnowStr , and further considered to produce more concepts . After creating the concept structure for cluster K i , the algo - rithm adds additional links to express feature combinations between the concepts corresponding to the current cluster ( denoted as concept M ) and the concepts of another cluster ( described as concept Q ) . Procedure Abstr & Par checks that concept Q relates to a different cluster K j and is the most abstract concept in that cluster to include the speciﬁc structural feature f i . A link is added between concepts Q and M . Constructing an abstract concept for a set of instances ( procedure Create abstraction ) requires computing sets I , U , and E of the abstraction based on sets I , U , and E of the instances . The algorithm is described in [ 9 ] . These sets are calculated using the following four sets I 1 – I 4 . 1 ) Set I 1 is the set of matched nodes of the instances . Two nodes in different circuits are matched , if they present the same electrical behavior within the two circuits , e . g . , the symbolic transfer functions from inputs to the node and from the node to outputs are the same for the two nodes . Matched nodes are found using the method in [ 10 ] . 2 ) Set I 2 includes the arcs between matched nodes . Their identiﬁcation is obvious starting from the matched nodes in set I 1 . 3 ) Sets I 3 and I 4 express the alternative features of the instances . While each alternative is speciﬁc to some but not all instances , ignoring to include a description of the alternative features can result in abstract concepts that do not describe valid design solutions or do not express the performance achieved by its instances . For example , in Fig . 3 , if only matched nodes and arcs are considered ( sets I 1 and I 2 ) then concept D would include nodes P 1 , P 2 , P 3 , and P 4 , and the two arcs linking P 1 and P 3 and P 2 and P 4 , respectively . However , this structure does not describe the meaning of a DI pair . To add the missing information , set I 3 includes arcs between the matched nodes in set I 1 , where the arcs express the sym - bolic expressions of the paths between matched nodes but which pass through unmatched nodes . These arcs are labeled with the joined symbolic expressions of the paths . 4 ) Set I 4 includes the nodes labeled with star ( nodes that are unique to an instance ) and the arcs of the alternatives ( arcs shown with dashed line ) . JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1051 ( a ) ( b ) ( c ) Fig . 7 . Algorithm for constructing performance capabilities . ( a ) Finds the set of similar tradeoffs for two circuits . ( b ) Merges two rows in two different tradeoff tables . ( c ) Merges two tradeoff tables . The information in Set I 4 about alternatives can be used to generate induction patterns that are used to create more instances of the same kind [ 9 ] . Set U of the abstract concept includes the unique fea - tures of the concept as compared to the other concepts that share with it the same parent in the knowledge representation . Set I = I 1 ∪ I 2 ∪ I 3 ∪ I 4 − U . The algorithm to compute the joined symbolic expressions used for set I 3 was introduced in [ 9 ] . It ﬁnds the maximum associations ( similarities ) between the symbolic expressions of the paths connecting two pairs of matched nodes in two circuits and describes the dissimilar terms by symbols that unify these terms . Joined symbolic expressions include all sim - ilar variables and operators in the two expressions while new variables represent the unmatched variables and operators . Example 10 : Given two circuits C 1 and C 2 , let us assume that the matched nodes P and Q of the two circuits are connected through paths through unmatched nodes . If p = ( x 1 + x 2 ) x 3 + x 1 + x 2 + x 3 is the symbolic expres - sion of the path in circuit C 1 and q = ( x 1 + x 5 ) x 3 + x 6 is the symbolic expression of the path in circuit C 2 , then the abstract concept includes an arc between nodes P and Q labeled with the following joined expression , ( x 1 + α ) x 3 + β , where variable α uniﬁes variables x 2 and x 5 , and symbol β uniﬁes x 1 + x 2 + x 3 and x 6 . The domain of α is the inter - section domain ( x 2 ) ∩ domain ( x 5 ) and the domain of β is the intersection domain ( x 1 + x 2 + x 3 ) ∩ domain ( x 6 ) . B . Computing Performance Capabilities Fig . 7 presents three algorithms to calculate performance capabilities . The algorithms assume that the considered tradeoffs are relevant for the given problem description , otherwise they would have been pruned in a preliminary step . The algorithm in Fig . 7 ( a ) computes the set S of sim - ilar tradeoffs for two circuits C 1 and C 2 . It considers all pairs of rows in the two tradeoff tables , and groups them if their attributes present similar variations and their controlling variables represent two situations : 1 ) all controlling variables correspond to matched nodes in the two circuits , therefore , the nodes present similar electrical behavior and 2 ) all controlling variables have similar natures , like transconductances ( g m ) or capacitances ( C gd , C db , C gs ) . This guarantees that the variables have similar value ranges , hence generate similar attribute variations in the two circuits . The algorithm in Fig . 7 ( b ) implements the tradeoff merging procedure . It considers two tradeoffs ( e . g . , two rows of the tradeoff tables of two circuits ) , and returns the merged trade - off . First , the similar controlling variables of the two tradeoffs are identiﬁed and grouped together . Any dissimilar variables ( e . g . , variables that are unique to a circuit ) are grouped with a null variable ( ⊥ ) to indicate that the variable is speciﬁc to an alternative ( null variables indicates the absence of a vari - able that would correspond to the variable of another circuit ) . The grouped variables become the controlling variables of the merged tradeoff . The similar attributes are added ( with - out change ) to the merged tradeoff . The dissimilar attributes are combined as presented in the deﬁnition for merging two tradeoffs ( Section II - B ) . Finally , the algorithm in Fig . 7 ( c ) computes the new trade - off table ( New Table ) that merges tradeoff tables Tab 1 and Tab 2 of two circuits . First , it adds the similar tradeoffs to the new table . Next , the remaining tradeoff rows are grouped together , if they are reasonably similar ( e . g . , the number of similar attributes exceeds a threshold value ) . Dissimilar trade - offs ( which are unique to a circuit ) are grouped with a null tradeoff ( e . g . , a tradeoff without controlling variables or any attribute variations ) to indicate that the tradeoff does not have a similar tradeoff in the other circuit . Finally , the grouped tradeoffs are merged together and added as rows to tradeoff table ( New Table ) . C . Mining Causal Parts 1 ) Identifying Starting Ideas : Starting ideas are the design features and constraints ( e . g . , triplets < DF , Des , CP > in Section II - C ) of the design steps that originate the design sequence that creates a given circuit . Note that the very initial idea that might have jump - started the design process of creat - ing a new circuit might be different from the starting ideas . The very initial ideas do not necessarily lead to the ﬁnal solution . Instead , the insight gained during an iterative , reasoning - based design process transform and evolve the very initial ideas into the starting ideas of the design sequence that produces the circuit design . Before detailing the algorithm to mine starting ideas , we classify starting ideas into the following types . a ) Private Set of Features ( set Γ ) : The set includes cir - cuit features that have been used by the same group in their previous circuit designs and are also in the current circuit . b ) Collective Set of Features ( set Λ ) : The set represents the design features that occur in designs devised by other groups and which are present in the analyzed circuit too . Such design features are discussed in papers cited by the paper presenting the considered circuit . 1052 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 Fig . 8 . Algorithm for ﬁnding starting ideas in a circuit design . c ) New Design Insight ( set Ψ ) : The set includes design features that are new insight acquired by the authors of a circuit . This insight cannot be found in the related design literature or in the previous design work of the authors . d ) Common Set of Features ( set Θ ) : It incorporates design features that are well known , traditional design knowledge . The complete set of features ( set (cid:4) ) represents all circuit features in a design . Fig . 8 shows the algorithm to ﬁnd the starting ideas for a given circuit C . Inputs are the circuit and the associative part Kst built for a sufﬁciently large set of analog circuits , including previous designs by the authors of circuit C and related circuits such as the ones cited in this paper . First , the algorithm computes sets (cid:4) , (cid:11) , and (cid:12) for circuit C using the associative part Kst . Set S is initialized to the union of the sets (cid:11) and (cid:12) as they are obviously starting ideas in pro - ducing circuit C . However , the starting ideas in sets (cid:13) and (cid:14) are still unknown , and are identiﬁed next . There are starting ideas in sets (cid:13) and (cid:14) only if the set of all circuit features ( set (cid:4) ) is not equal to the reunion of the current set S ( the starting features in (cid:11) ∪ (cid:12) ) and the fea - tures of the design steps that can be justiﬁed starting from the features in set S . The latter features are computed by proce - dure Find design sequence , which is described next . Then , for all remaining features x [ the features of set (cid:4) − ( Q ∪ S ) ] , the algorithm ﬁnds the features in set (cid:4) that can be justiﬁed by adding x to the set of starting features S . At the end of the for - loop , set Q includes all circuit features in set (cid:4) that can be justiﬁed by other features in set (cid:4) . Thus , the features remain - ing in set (cid:4) − ( Q ∪ S ) must be added to set S too . The last for - loop considers all features x in set (cid:4) − ( Q ∪ (cid:11) ∪ (cid:12) ) and adds them either to set (cid:14) , if according to the associative part they represent common knowledge , or otherwise to set (cid:13) , hence showing that the features are new design insight by the authors . The ﬁrst for - loop ﬁrst considers the more concrete fea - tures before analyzing more abstract features . This is because circuit presentations in publications arguably offer a more implementation - oriented description , in which physical details are presented , analyzed , and measured , while abstract ( more conceptual ) features are usually less emphasized . This presentation style is reasonable as conceptual ideas offer a Fig . 9 . Algorithm for mining design sequences . more qualitative argument , which , however , can be secondary in the presentation . ( Also , evidence in cognitive psychology shows that learning always proceeds from detailed - dominated situations to more abstract , conceptual situations [ 2 ] . ) 2 ) Mining Design Sequences : The algorithm for mining design sequences identiﬁes the design steps and their order - ing that can be justiﬁed starting from set S of starting ideas , a given circuit C , and the associative part Kst . Each design step , deﬁned as in ( 5 ) , introduces features present in set (cid:4) ( all features ) of circuit C , and is justiﬁed ( hence , reduces the distance between problem requirements and solution perfor - mance or relaxes the design constraints ) . If set S includes all starting ideas of the circuit then the identiﬁed sequence must include all features in set (cid:4) − S , hence it produces the ﬁnal design . The algorithm is shown in Fig . 9 . The algorithm terminates if no more design steps are added to the ordered sequences Seq and TempSeq . The for - loop considers the feature x in set S (cid:3) , starting ﬁrst with the more abstract features as well as the more likely fea - tures ( features that have been used more in previous designs ) . A new design step N is created to reﬂect the changes in the design introduced by adding feature x , its implementation P and the modiﬁcation in performance and design constraints . Design step N is appended at the end of the overall design sequence Seq . The second for - loop considers the remaining features in set T , which are not direct implementations of the starting ideas , but improve the circuit performance , hence are justiﬁed . A design step N is produced for each feature , and added to sequence Seq . The third for - loop tackles the features JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1053 Fig . 10 . Reasoning ﬂow for analog circuit topology synthesis . used to bias . As a single feature might be insufﬁcient to bias the entire circuit , the feature is added to sequence TempSeq of temporary steps . This sequence includes steps that individually are not justiﬁed , but can be justiﬁed as a group . If TempSeq becomes justiﬁed then a new design step N is created and added to Seq . IV . A PPLICATION OF K NOWLEDGE R EPRESENTATIONS : R EASONING - B ASED T OPOLOGY S YNTHESIS Analog circuit topology synthesis through a reasoning - based ﬂow is an application of the proposed knowledge representa - tion for circuit designs . Topology synthesis creates new circuit topologies ( structures ) for a set of performance requirements and constraints . Existing approaches include methods that uti - lize rule - based decision mechanisms [ 13 ] , genetic algorithms to evolve new structures based on building blocks in a static library [ 14 ] , and multiobjective evolution using an age - layered population [ 17 ] . While in theory a genetic or evolutionary algorithm could evolve any structure , the solution space that must be explored is huge and unstructured , making it difﬁcult to produce the optimal topologies for new requirements . We argue that solution space traversal becomes more effec - tive if there are mechanisms to structure the solution space , reuse previous design results , and prune infeasible or less - optimal regions . The associative part serves as a mechanism to structure the solution space by highlighting feature similarities and differences among concepts . Concepts partition the solu - tion space into sub - regions , which helps pruning less optimal areas . Moreover , design step sequences of the causal parts indi - cate groups of features that should be utilized together to tackle certain performance requirements as well as the conditions ( constraints ) under which the features can be used effectively . Hence , the causal part helps reusing previous design results while eliminating infeasible feature combinations . The reasoning - based synthesis ﬂow using design knowl - edge representations is presented in Fig . 10 . This procedure attempts to mimic human reasoning [ 12 ] , [ 22 ] , although at a very simple level . Inputs to the ﬂow are the knowledge representation built for representative designs , performance requirements ( goal ) , and the starting ideas ( features ) for the design solution to be created . Starting ideas might be at a more conceptual level ( e . g . , processing ﬂow of abstract signals ) or speciﬁc , structural features , which are incrementally modiﬁed and / or combined into a new solution . TABLE IV C IRCUIT F EATURES AND T HEIR A BBREVIATIONS Next , the ﬂow identiﬁes the solution bottlenecks with respect to the pursued goal , and then selects the variables that can be used to tackle the bottleneck . The alternative structural features that include the variables create the next design step as expressed by relation ( 5 ) . The alternatives represent either fea - tures already present in the knowledge representation ( reuse ) or new features that have been proposed in the published literature . The selection of feature alternatives to address bot - tlenecks is based on similarity to existing designs , bottom - up across the associative concept structure . Fig . 5 ( c ) illustrates the process . Initially , alternatives are analyzed among the instances of the same concept as the current design ( e . g . , design concept in the ﬁgure ) . If these alternatives do not address the bottle - neck then the instances of the next , more abstract concept are considered ( i . e . , concept in the ﬁgure ) , and so on . Using analogies ( similarities ) is well known in design [ 23 ] . Other reasoning strategies are utilized to add new instances to the associative part , if the existing concepts cannot tackle a bottleneck . Induction creates new design features that follow the same patterns deﬁned as the distinguishing features of the instances that belong to the same concept . differential pairs can be used to create an induction pattern that produces triple and quadruple differential pairs to improve gain and linear - ity . Feature combination describes the situation in which the novel features are not within the patterns of the distinguish - ing features of a concept but belong to the features of another concept . For example , the novel attribute is the common mode feedback structure of a circuit of a different concept . Design step sequences of causal parts are useful in two ways for solution space pruning . First , the justiﬁcation information indicates the feature groups that can tackle together a certain performance requirement . If the bottleneck attributes are not among the justiﬁcations of its design steps then a sequence should not be considered . Second , the ﬂow can decide by ana - lyzing the constraints of the design steps , if the features of a sub - sequence can or cannot be combined with the features of other sub - sequences . Conﬂicting constraints show that the sub - sequences cannot be utilized together . V . E XPERIMENTAL R ESULTS Experiments considered a set of 30 modern operational transconductance ampliﬁer ( OTA ) circuits for high - frequency applications . Fig . 11 illustrates the circuit schematics , and 1054 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 Fig . 11 . Circuit set used in experiments . Table IV enumerates the features of the circuits and their abbreviations . Results discuss an illustrating case study , the knowledge representation of the circuit set , and a synthesis example using the representation . A . Case Study The case study illustrates the knowledge structure for circuits 4 ( 1 ) , 4 ( 2 ) , and 27 . Circuits 4 ( 1 ) and 4 ( 2 ) are topo - logically the most similar circuits in the set . Circuit 4 ( 2 ) adds feedforward compensation ( FFC ) to circuit 4 ( 1 ) by connecting the DIs to differential outputs ( DOs ) . Symbolic circuit models were build for the three circuits using the method in [ 24 ] . Fig . 12 ( b ) presents their structural models and the models of the abstractions 4 ( 1 ) and 4 ( 2 ) . The model of the circuit 4 ( 2 ) includes all nodes and edges of the model for circuit 4 ( 1 ) , but in addition also incorporates the arcs shown in bold , dotted lines . The four arcs between the DIs and DOs represent the additional FFC of circuit 4 ( 2 ) . Fig . 12 ( c ) illustrates the model for circuit 27 . It has the same structural features as circuits 4 ( 1 ) and 4 ( 2 ) but connected differently . The new couplings are shown in bold , dotted arcs . They implement feedforward regulation ( FFR ) for circuit 27 . JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1055 ( a ) ( d ) ( b ) ( c ) Fig . 12 . Knowledge structure for FC circuits . ( a ) Sample of an associative part . ( b ) Structural models for circuits 4 ( 1 ) and 4 ( 2 ) . ( c ) Structural model for circuit 27 . ( d ) Abstraction of the circuits 4 ( 1 ) , 4 ( 2 ) , and 27 . TABLE V P ERFORMANCE T RADEOFFS OF C IRCUIT 27 1 ) Associative Part : Fig . 12 ( d ) presents the abstraction of the three circuits . The nodes are the matched nodes of the three circuits ( set I 1 ) , and the edges in continuous line exist in all three circuits ( set I 2 ) . The four edges in bold , dotted lines between inputs and outputs are the overall coupling which each of the three circuits includes , but using different ways of implementing them ( set I 3 ) . The symbolic expressions of the these arcs have the form g m , x + g m , y ( g m , z + sC gd , v ) + γ . The circuit nodes that are involved in implementing the overall arcs are shadowed ( the nodes are part of set I 4 ) . Abstractions 4 ( 1 ) and 4 ( 2 ) describe structures with or with - out FFC , in which the two optional edges ( marked with “ * ” ) between inputs and outputs introduces zeros sC gd − g mg that are used in pole compensation . 2 ) Performance capabilities : Tables I , II , and V present the tradeoffs for circuits 4 ( 1 ) , 4 ( 2 ) , and 27 , respectively . Each row indicates a tradeoff between performance attributes CM gain , dc gain , noise , DP 0 , and GPP 0 . Up - arrows ( ↑ ) represent that the variable improves the attribute , and down - arrow ( ↓ ) describes that the variable worsens the attribute . The ﬁrst column shows the circuit parameters that control a speciﬁc tradeoff . Table III is the tradeoff table computed for concepts 4 ( 1 ) and 4 ( 2 ) and was already discussed in Section II . Table VI TABLE VI P ERFORMANCE C APABILITIES FOR THE A BSTRACTIONS 27 , 4 ( 1 ) , AND 4 ( 2 ) Fig . 13 . Initial ideas and design sequences for circuits 4 ( 2 ) and 27 . presents the tradeoffs of the abstraction build for circuit 27 and the abstraction for circuits 4 ( 1 ) and 4 ( 2 ) [ abstractions 4 ( 1 ) , 4 ( 2 ) , and 27 in Fig . 12 ] . For brevity , the table includes only the tradeoffs that show similarity of their attribute variations . Similar to Table III , it indicates the higher ﬂexibility of the related circuits to address frequency ( i . e . , DP 0 and GPP 0 ) and noise related attributes and less ﬂexibility in achieving high CM and dc gains . This suggests that the circuits following the conceptual ideas represented by this abstraction tackle better high - frequency requirements , but are less for high gain . For example , using the ﬁrst tradeoff to increase CM and dc gains worsens noise , but then improving noise or bandwidth ( DP 0 ) reduces the circuit gain . 3 ) Causal reasoning : The causal reasoning part indicates the starting features ( ideas ) and the design step sequence that was used to create a circuit . Fig . 4 ( b ) shows the causal part for circuit 4 ( 1 ) and Fig . 13 presents the causal part for circuits 4 ( 2 ) and 27 . The starting ideas for circuit 4 ( 1 ) [ Fig . 4 ( a ) ] are using a complementary FC and a fully differ - ential structure with common mode feedback . As the authors indicate [ 15 ] , both ideas are from the literature , hence , are part of set (cid:12) . Using complementary FC includes the cascode structure as a starting idea , as it has high gain and high speed operation , while its bottleneck is its limited DR . The design step of using complementary FC is justiﬁed by the need to improve DR . The two ideas are combined into the design of circuit 4 ( 1 ) . The design step sequence includes two justiﬁed steps to add biasing circuits for the correct operation of the circuit . Another justiﬁed step is to use cascode bias circuit as it improves the CMRR of the circuit . The starting ideas for circuit 4 ( 2 ) ( Fig . 13 ) are combining circuit 4 ( 1 ) ( set (cid:11) ) and FFC ( set (cid:12) ) [ 15 ] . The ﬁrst justiﬁed step refers to the speciﬁc implementation of the FFC scheme . 1056 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 Fig . 14 . Overall knowledge structure for the studied circuits . The next two steps relate to the reﬁnement of the cascode biasing current sources to accommodate the presence of FFC . The starting idea for circuit 27 ( Fig . 13 ) is the abstract idea of using cross - coupled input as means to improve linearity . Note that this idea is not part of sets (cid:11) or (cid:12) , and hence represents new insight ( set (cid:13) ) . The ﬁrst justiﬁed step of the sequence includes implementing the abstract idea by using cross - coupled cascodes . The next two justiﬁed design steps add the necessary biasing . B . Knowledge Representation for the Circuit Set The associative and causal parts of the knowledge represen - tation for the circuits in Fig . 11 are summarized next . 1 ) Associative Part : Fig . 14 shows the associative part . The top most node describes the abstract concept with a variable number of differential inputs ( DI ) + and single outputs ( SO ) or DO . For example , circuit 9 has a pair of DIs and circuit 2 includes four DIs . The abstract concept has ﬁve descendants based on the nature of the output stages ( OSs ) : structures with folded cascode ( FC ) outputs , structures with cascode out - puts ( CO ) , structures with AB outputs ( AB ) , structures with no separate output ( NO ) stages , and structures with basic out - put ( OS ) stages . Each of the ﬁve abstractions represents the circuits that include the speciﬁc OS . In addition , circuit 18 presents a circuit concept for a universal OpAmp , which sim - ilar to the top abstraction , includes a variable number of DIs and a common output stage [ 20 ] . Each of the top ﬁve abstract concepts further includes more speciﬁc concepts . For example , the circuits in abstraction FC are grouped using various criteria , such as the means of achieving the desired problem requirements of high gain and bandwidth , and the structural similarity of the circuit features . Concept input part includes circuits that offer a variety of ways of implementing differential inputs ( DI ) + as a way of achiev - ing high gain - high frequency requirements . Concept multipath incorporates designs with multiple signal paths from input to output to achieve the performance requirements . Concept Output ampl uses local feedback at the OSs to boost gain . Cluster Extra stage represents circuits that have extra struc - tures connected to the FC structure of the circuits . Note that each of these abstract concepts represents a different concep - tual strategy to address the problem requirements . Fig . 12 ( a ) shows the knowledge structure built for circuits with comple - mentary differential input ( CDI ) pairs and FC , DOs devised using fully symmetrical structures ( FSym ) . 2 ) Causal Part : Table VII summarizes the causal part for the circuits in Fig . 14 . The ﬁrst column indicates the cir - cuit , columns 2 – 7 the characteristics of the starting ideas , and columns 8 – 10 the speciﬁcs of the design sequences . Column 2 TABLE VII C AUSAL P ART FOR THE C IRCUITS IN F IG . 11 presents the type of the starting ideas , column 3 indicates the number of starting ideas , columns 4 – 7 give the num - ber of starting ideas in sets (cid:11) , (cid:2) , (cid:13) , and (cid:14) . Column 8 offers the number of steps in the design sequences , column 9 gives the kind of starting ideas to which the design steps of the sequences are linked to , and column 10 indicates the justiﬁcation of the steps . Experiments indicated that starting ideas can be classiﬁed into ﬁve types . a ) Type 1 indicates that starting ideas combine physical features . JIAO et al . : ANALOG CIRCUIT DESIGN KNOWLEDGE MINING : DISCOVERING TOPOLOGICAL SIMILARITIES 1057 b ) Type 2 corresponds to combining physical and more abstract features . c ) Type 3 is combinations of abstract features . d ) Type 4 is starting ideas of not using certain features ( e . g . , compensation capacitors ) . e ) Type 5 represents a novel abstraction created from combined physical features . Most starting ideas are either of Type 1 , combination of concrete , structural features from different designs ( 18 ideas ) , or of Type 2 , combination of concrete features and more abstract concepts ( 12 ideas ) . Ideas of Type 4 were less fre - quent ( ﬁve ideas ) suggesting that it is less common to start from ideas that require not to incorporate speciﬁc features . Similarly , in only two cases , starting ideas were of Type 5 , hence the designer started by creating an abstract concept for existing physical features , e . g . , a dual path OpAmp was gen - eralized into a multipath ( i . e . , three path ) circuit . No design included starting ideas of Type 3 , combination of two or more abstractions . Out of a total of 101 starting ideas , only 14 ideas were previously used by the authors in their designs ( set (cid:11) ) , and 22 ideas represented common analog circuit design knowl - edge ( set (cid:14) ) . Hence , ideas in sets (cid:11) and (cid:14) account for about one third of the total ideas . Most ideas ( 42 ideas ) come from related work ( set (cid:12) ) and new insight acquired by designers ( 29 ideas in set (cid:13) ) . For example , circuit 7 proposes a new feedforward method to avoid using Miller capacitor in high frequency circuits . Circuits 8 and 11 use active feedback stage compensation . Circuit 21 is a three - path OTA realizing the idea of multipath OpAmp . While a design might incorporate multiple starting ideas in sets (cid:11) , (cid:12) , and (cid:14) , they use in general only one insight - related feature ( set (cid:13) ) . Design sequences include up to ﬁve steps , which are often ( 25 circuits ) linked to ideas from related work ( set (cid:11) ) . Design sequences were moderately often connected ( ten cir - cuits ) to ideas expressing new insight ( set (cid:13) ) . Only rarely , design sequences corresponded to previously used features in set (cid:11) ( ﬁve circuits ) or to common design features in set (cid:14) ( six circuits ) . C . Reasoning - Based Synthesis Using Design Knowledge Representations This case study presents reasoning - based circuit topology synthesis using the proposed design knowledge representation . The goal is to create a new circuit that maximizes linearity and SR while keeping gain and bandwidth reasonably high . The used knowledge representation was the one shown in Fig . 14 and corresponds to the circuits in Fig . 11 . No circuit in Fig . 11 is optimized for both high linearity and high SR . Fig . 15 ( a ) illustrates the starting ideas and the design step sequence that produced the circuit in Fig . 15 ( b ) . The start - ing ideas were of Type 2 as they combined crosscoupled input stage ( physical feature ) and multipath structure ( abstract feature ) . The starting ideas were identiﬁed as follows . The knowledge representation contains the following highly linear circuits : 5 ( 1 ) , 5 ( 2 ) , 12 , 16 , 20 , 22 , 25 , and 26 . The correspond - ing concept includes cross - coupled input stage as a feature , except circuit 5 , which uses a mobility compensation struc - ture . Circuit 21 is the only high SR circuit in the set . Its distinguishing feature is three - path architecture . Cross - coupled input stage feature was selected as it appears in more circuits , ( a ) ( b ) Fig . 15 . ( a ) Starting ideas and design sequences . ( b ) Synthesized circuit . TABLE VIII P ERFORMANCE C OMPARISON hence has a higher ﬂexibility for being used in various designs . Combining mobility compensation and multipath structures could have been considered as starting ideas too . The design step sequence includes the following steps . The abstract starting idea of using a multipath architecture had to be implemented as a two - path structure . This is justiﬁed by relaxing the structural constraints of the circuits , e . g . , it is sim - pler to combine a two - path structure and cross - coupled input stage . Step N 1 introduced source degeneration feature at the input stage ( from circuit 12 ) , which is justiﬁed by improving circuit linearity . Step N 2 introduced FC and cascode current mirrors to implement the two - path structure ( feature from circuit 21 ) . The step is justiﬁed by high SR , gain , and out - put current . Step N 3 adds the regulated OS ( from circuit 12 ) justiﬁed by the need to increase gain . Step N 4 introduces sim - ple current source biasing required for correct operation of the circuit ( feature from circuit 21 ) . The resulting circuit topology is shown in Fig . 15 ( b ) . Table VIII summarizes the performance of the new circuit as compared to circuits 12 and 21 . SR of the new circuit is by 78 % higher than that of circuit 12 and only by 12 % lower than that of circuit 21 . The linearity ( THD ) of the new circuit is 50 % worse than that of circuit 12 and by 63 % better than that of circuit 21 . While none of the circuits Pareto dominates the other two , the new circuit offers a better compromise with respect to achieving simultaneously high linearity and SR . VI . C ONCLUSION Mining analog circuit design knowledge from electronic documents is important in devising new design solutions for 1058 IEEE TRANSACTIONS ON COMPUTER - AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS , VOL . 34 , NO . 7 , JULY 2015 emerging applications as well as in identifying new busi - ness opportunities in areas like telecommunications , mobile applications , and health care . This paper proposes a model and mining algorithms for representing analog circuit design knowledge . The proposed knowledge representation model includes three components : an associative component present - ing the conceptual hierarchy of the considered circuits , a com - ponent expressing the performance capabilities ( e . g . , tradeoffs and bottlenecks ) of the circuits , and a causal modeling part describing the more likely starting ideas and design plans used to create a circuit . The associative part groups circuits into hierarchical abstractions based on the symbolic similarities of the instances . Starting from the performance tradeoffs and bot - tlenecks of the circuits , performance capabilities express the tradeoffs of abstract concepts by combining the tradeoff tables of their instances . Finally , the causal part identiﬁes the initial ideas that support ﬁnding sequences of justiﬁed design steps for a given design . The proposed knowledge structure can be used to tackle new applications ( e . g . , by selecting or reﬁning a circuit topology ) , identify new design opportunities ( by analyzing the combining of design features that have never been used together ) , and validating design correctness by showing that all steps in a design sequence are justiﬁed . R EFERENCES [ 1 ] E . Boyle et al . , “Go : : TermFinder—Open source software for access - ing Gene Ontology information and ﬁnding signiﬁcantly enriched Gene Ontology terms associated with a list of genes , ” Bioinformat . Appl . Note , vol . 20 , no . 18 , pp . 3710 – 3715 , 2004 . [ 2 ] M . Chi , P . Feltovich , and R . Glaser , “Categorization and representation of physics problems by experts and novices , ” Cogn . Sci . , vol . 5 , no . 2 , pp . 121 – 152 , 1981 . [ 3 ] A . Chowdhary , S . Kale , P . Saripella , and N . Sehgal , “A general approach for regularity extraction in datapath circuits , ” in Proc . IEEE Int . Conf . Comput . - Aided Design ( ICCAD ) , San Jose , CA , USA , 1998 , pp . 332 – 339 . [ 4 ] F . De Bernardinis , M . Jordan , and A . Sangiovanni - Vincentelli , “Support vector machines for analog circuit performance representation , ” in Proc . Design Autom . Conf . ( DAC ) , Anaheim , CA , USA , 2003 , pp . 964 – 969 . [ 5 ] S . Doboli and A . Doboli , “Piecewise - linear modeling of analog circuits using trained feed - forward neural networks and adaptive clustering of hidden neurons , ” in Proc . Int . Joint Conf . Neural Netw . , vol . 2 . Portland , OR , USA , 2003 , pp . 1126 – 1131 . [ 6 ] S . Dwight et al . , “Saccharomyces genome database : Underlying prin - ciples and organisation , ” Brief . Bioinformat . , vol . 5 , no . 1 , pp . 9 – 22 , 2004 . [ 7 ] C . Ferent , “Systematic modeling and characterization of analog circuits using symbolic and data mining techniques , ” Ph . D . dissertation , Dept . Electr . Eng . , Stony Brook University , New York , NY , USA , 2013 . [ 8 ] C . Ferent and A . Doboli , “An axiomatic model for concept structure description and its application to circuit design , ” Knowl . - Based Syst . , vol . 45 , pp . 114 – 133 , Jun . 2013 . [ 9 ] C . Ferent and A . Doboli , “Formal representation of the design feature variety in analog circuits , ” in Proc . Forum Specif . Design Lang . ( FDL ) , Paris , France , 2013 , pp . 1 – 7 . [ 10 ] C . Ferent and A . Doboli , “Symbolic matching and constraint gen - eration for systematic comparison of analog circuits , ” IEEE Trans . Comput . - Aided Design Integr . Circuits Syst . , vol . 32 , no . 4 , pp . 616 – 629 , Apr . 2013 . [ 11 ] C . Ferent and A . Doboli , “Analog circuit design space description based on ordered clustering of feature uniqueness and similarity , ” Integr . VLSI J . , vol . 47 , no . 2 , pp . 213 – 231 , 2014 . [ 12 ] R . Gibbs , The Cambridge Handbook of Metaphor and Thought . New York , NY , USA : Cambridge Univ . Press , 2008 . [ 13 ] R . Harjani , R . Rutenbar , and L . Carley , “OASYS : A framework for analog circuit synthesis , ” IEEE Trans . Comput . - Aided Design Integr . Circuits Syst . , vol . 8 , no . 12 , pp . 1247 – 1266 , Dec . 1989 . [ 14 ] W . Kruiskamp and D . Leenaerts , “DARWIN : CMOS opamp synthesis by means of genetic algorithm , ” in Proc . 32nd Design Autom . Conf . , San Francisco , CA , USA , 1995 , pp . 433 – 438 . [ 15 ] H . Lampinen and O . Vainio , “An optimization approach to designing OTAs for low - voltage sigma - delta modulators , ” IEEE Trans . Instrum . Meas . , vol . 50 , no . 6 , pp . 1665 – 1671 , Dec . 2001 . [ 16 ] T . - C . Lu and M . Druzdzel , “Interactive construction of graphical deci - sion models based on causal mechanisms , ” Eur . J . Oper . Res . , vol . 199 , no . 3 , pp . 873 – 882 , 2009 . [ 17 ] T . McConaghy , P . Palmers , P . Gao , M . Steyaert , and G . Gielen , Variation - Aware Analog Structural Synthesis . Dordrecht , The Netherlands : Springer , 2009 . [ 18 ] P . Nayak , “Causal approximations , ” Artif . Intell . , vol . 70 , nos . 1 – 2 , pp . 277 – 334 , 1994 . [ 19 ] J . Pearl , Causality : Models , Reasoning and Inference . New York , NY , USA : Cambridge Univ . Press , 1999 . [ 20 ] J . Ramirez - Angulo and F . Ledesma , “The universal opamp and appli - cations in continuous - time resistorless and capacitorless linear weighted voltage addition , ” IEEE Trans . Circuits Syst . II , Exp . Briefs , vol . 53 , no . 5 , pp . 404 – 408 , May 2006 . [ 21 ] H . Simon , “Causal ordering and identiﬁability , ” in Studies in Econometric Method . Cowles Commission for Research in Economics . Monograph No . 14 . , W . C . Hood and T . C . Koopmans , Eds . New York , NY , USA : Wiley , 1953 , pp . 49 – 74 . [ 22 ] E . Smith and D . Osherson , An Invitation to Cognitive Science . Thinking . Cambridge , MA , USA : MIT Press , 1995 . [ 23 ] S . Vosniadou and D . Osherson , Similarity and Analogical Reasoning . Cambridge , MA , USA : Cambridge Univ . Press , 1989 . [ 24 ] Y . Wei and A . Doboli , “Structural macromodeling of analog circuits through model decoupling and transformation , ” IEEE Trans . Comput . - Aided Design Integr . Circuits Syst . , vol . 27 , no . 4 , pp . 712 – 725 , Apr . 2008 . [ 25 ] H . Liu , A . Singhee , R . Rutenbar , R . Carley , “Remembrance of Circuits Past : Macromodeling by Data Mining in Large Analog Design Spaces , ” in Proc . Design Autom . Conf . , New Orleans , LA , USA , 2002 , pp . 437 – 442 . Fanshu Jiao ( S’14 ) received the B . S . degree from the University of Science and Technology of China , Hefei , China , in 2011 . She is currently pursuing the Ph . D . degree in electrical engineering with the State University of New York at Stony Brook , Stony Brook , NY , USA . Her current research interests include analog cir - cuit design automation , particularly methods for design knowledge mining , and development of knowledge mining tools . Sergio Montano , photograph and biography not available at the time of publication . Cristian Ferent ( S’08 ) received the Dipl . Ing . degree in electronics and telecommunications engineer - ing from the Technical University of Cluj - Napoca , Cluj - Napoca , Romania , in 2007 , and the M . S . and Ph . D . degrees from the State University of New York at Stony Brook , Stony Brook , NY , USA , in 2008 and 2013 , respectively . His current research interests include CAD for analog circuit design , particularly methods for sys - tematic comparison , and classiﬁcation of circuits based on macromodel descriptions . Alex Doboli ( S’99 – M’01 – SM’07 ) received the M . S . and Ph . D . degrees in computer science from Politehnica University , Timi¸soara , Romania , in 1990 and 1997 , respectively , and the Ph . D . degree in computer engineering from the University of Cincinnati , Cincinnati , OH , USA , in 2000 . He is a Professor with the Department of Electrical and Computer Engineering , State University of New York at Stony Brook , Stony Brook , NY , USA . His current research interests include mixed - signal CAD . Simona Doboli , photograph and biography not available at the time of publication .