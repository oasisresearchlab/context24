A Taxonomy of Assets for the Development of Software - Intensive Products and Services Ehsan Zabardast a , ∗ , Javier Gonzalez - Huerta a , Tony Gorschek a , b , Darja Šmite a , Emil Alégroth a and Fabian Fagerholm a , c a Software Engineering Research Lab SERL , Blekinge Institute of Technology , Campus Karlskrona , Valhallavägen 1 , Karlskrona , Sweden b fortiss GmbH , Guerickestraße 25 , 80805 Munich , Germany c Department of Computer Science , Aalto University , Espoo , Finland A R T I C L E I N F O Keywords : Assets in Software Engineering Asset Management in Software Engi - neeringAssetsfor Software - Intensive Products or Services Taxonomy A B S T R A C T Context : Developing software - intensive products or services usually involves a plethora of software artefacts . Assets are artefacts intended to be used more than once and have value for organisations ; examples include test cases , code , requirements , and documentation . During the development process , assets might degrade , aﬀecting the eﬀectiveness and eﬃciency of the development process . Therefore , assets are an investment that requires continuous management . Identifying assets is the ﬁrst step for their eﬀective management . However , there is a lack of awareness of what assets and types of assets are common in software - developing organisations . Most types of assets are understudied , and their state of quality and how they degrade over time have not been well - understood . Method : We perform a systematic literature review and a ﬁeld study at ﬁve companies to study and identify assets to ﬁll the gap in research . The results were analysed qualitatively and summarised in a taxonomy . Results : We create the ﬁrst comprehensive , structured , yet extendable taxonomy of assets , containing 57 types of assets . Conclusions : The taxonomy serves as a foundation for identifying assets that are relevant for an organisation and enables the study of asset management and asset degradation concepts . 1 . Introduction The fast pace of the development of software - intensive products or services impacts the decision - making process both for design and operational decisions . Such products and services are engineered by “applying well - understood practices in an organised way to evolve a product [ or service ] containing a nontrivial software component from inception to market , within cost , time , and other constraints . [ 37 ] ” Acting fast to cope with change can compromise the val - ues of the delivered product , environment , development pro - cess , and the assets involved , such as source code , test cases , and documentation [ 18 , 86 ] . Assets are software artefacts that are intended to be used more than once during the inception , development , delivery , or evolution of a software - intensive product or service [ 86 ] . Assets can lose their value and degrade “due to intentional or unintentional decisions caused by technical or non - technical ThisresearchwassupportedbytheKKfoundationthroughtheSHADE KK - Hög project under grant 2017 / 0176 and Research Proﬁle project SERT under grant 2018 / 010 at Blekinge Institute of Technology , SERL Sweden . ∗ Corresponding author ehsan . zabardast @ bth . se ( E . Zabardast ) ; javier . gonzalez . huerta @ bth . se ( J . Gonzalez - Huerta ) ; tony . gorschek @ bth . se ( T . Gorschek ) ; darja . smite @ bth . se ( D . Šmite ) ; emil . alegroth @ bth . se ( E . Alégroth ) ; fabian . fagerholm @ aalto . fi ( F . Fagerholm ) https : / / ehsanzabardast . com / ( E . Zabardast ) ; http : / / gonzalez - huerta . net / ( J . Gonzalez - Huerta ) ; https : / / gorschek . com / ( T . Gorschek ) ORCID ( s ) : 0000 - 0002 - 1729 - 5154 ( E . Zabardast ) ; 0000 - 0003 - 1350 - 7030 ( J . Gonzalez - Huerta ) ; 0000 - 0003 - 1744 - 3118 ( D . Šmite ) ; 0000 - 0002 - 7298 - 3021 ( F . Fagerholm ) manipulation of an asset or its associated assets during all stages of the product life - cycle . [ 86 ] ” During the development of software - intensive products or services , decisions are usually made quickly to respond to change , focusing on fast delivery , leaving considerations on the assets involved as a secondary objective . Thus , these decisions often result in long - term negative consequences not only on the quality of the delivered product or service but also on the assets such as code , architecture , and documentation , to name a few . Researchers and practitioners have traditionally used the technical debt ( TD ) metaphor [ 22 ] to refer to the impact of the intentional and unintentional sub - optimal decisions on assets as a consequence of meeting strict deadlines [ 41 , 86 ] . TD , in practice , has become a concept used to assess and reason about one asset in isolation , i . e . , it considers the impact of sub - optimal decisions related to a speciﬁc asset [ 86 ] . How - ever , assets can degrade due to the propagation of degradation coming from other assets . For example , taking shortcuts in re - quirements elicitation ( i . e . , requirements TD ) , created under time pressure , lead to sub - optimal design and development decisions [ 58 , 86 ] . The TD metaphor does not consider the propagation of degradation on assets , it mainly focuses on code - based as - sets , and often it does not take non - technical assets such as documentation , environmental , and other supporting items into account [ 5 , 16 , 65 ] . This is evident from , for example , the tools available for measuring TD that tend to all focus on measuring code - related TD , as pointed out in the tertiary study by Rios et al . [ 65 ] . Since the original TD metaphor Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 1 of 25 a r X i v : 2102 . 09884v3 [ c s . S E ] 21 O c t 2022 A Taxonomy of Assets for the Development of Software - Intensive Products and Services was proposed in 1992 , Software engineering has evolved to take a wider , more encompassing perspective on software development , including aspects such as processes and envi - ronments but also softer factors . However , this perspective is still fairly new , and it is unclear how assets shall be dealt with and what role they play in this context [ 86 ] . The motivation behind the work presented in this paper comes from industrial collaborations where the concept of TD did not fully cover their needs since code - based assets , although important , only represented a part of the challenge . From a practitioner’s perspective , it is valuable to have the ability to identify what assets are available , which of them are important , and how and why they degrade . This is es - pecially important as a product or service evolves over time , when assets are reused many times , and when they inevitably become subject to change and degradation . The degradation of assets is central to their maintenance and evolution [ 5 ] . In our previous work [ 86 ] , we have deﬁned assets and asset degradation . We have articulated the importance of identifying and studying them . From a research perspective , a potential beneﬁt of introducing assets as a complementary concept to TD , with a broader deﬁnition , is that it takes all so - called “items of value” [ 56 ] into account and widens the view of what can hold value in the context of developing software - intensive products or services [ 86 ] . The widened deﬁnition also fosters an understanding of what assets can be negatively impacted by degradation and , thereby , the understanding that overlooking said assets can be detrimental to the development and evolution of such products and services . However , to gain such understanding , we must ﬁrst understand what assets are subject to the concept , warranting the need for the taxonomy of assets presented in this work . The paper is structured as follows : Section 2 provides the background and related work on the topic . Section 3 describes the research methodology , which separately cov - ers the literature review and the ﬁeld study . The results are presented in Section 4 , together with the proposed asset man - agement taxonomy . Section 5 discusses the principal ﬁndings and the implications of the results . The threats to validity are also discussed and addressed in Section 5 . And ﬁnally , Section 6 presents the conclusion and the continuation of the work together with the future directions . 2 . Background and Related Work Assets related to software products or services have been studied previously . For instance , from a managerial perspec - tive where the term asset is used to discuss how products in product lines are developed from a set of core assets with built - in variation mechanisms [ 62 ] , or making emphasis only on business - or market - related assets , like the in the works by Ampatzoglou et al . [ 4 ] , Cicchetti et al . [ 19 ] , Wohlin et al . [ 83 ] , and Wolfram et al . [ 84 ] . In contrast , in this work , our focus is on the inception , development , evolution , and maintenance of software - related assets . 2 . 1 . Artefacts and Assets in Software Engineering Describing how a software system is envisioned , built , and maintained is part of the Software Development Pro - cesses ( SDP ) [ 72 ] . The SDP prescribes the set of activities and roles to manipulate software artefacts , e . g . , source code , documentation , reports , and others [ 18 ] . Artefacts in software engineering ﬁeld have been tradi - tionally deﬁned as i ) “documentation of the results of de - velopment steps” [ 18 ] ; ii ) “a work product that is produced , modiﬁed , or used by a sequence of tasks that have value to a role” [ 56 ] ; and iii ) “a self - contained work result , having a context - speciﬁc purpose and constitutes a physical repre - sentation , a syntactic structure and a semantic content of said purpose , forming three levels of perception” [ 56 ] . Soft - ware artefacts are , therefore , self - contained documentation and work products that are produced , modiﬁed or used by a sequence of tasks that have value to a role [ 56 ] . Understanding software artefacts , how they are struc - tured , and how they relate to each other has a signiﬁcant inﬂuence on how organisations develop software [ 18 ] . The documentation in large - scale systems can grow exponentially ; therefore , there is a need for structurally organising software artefacts [ 18 ] . Artefacts deﬁned by most of the SDPs are monolithic and unstructured [ 77 ] . The content of poorly struc - tured artefacts is diﬃcult to reuse , and the evolution of such monolithic artefacts is cumbersome [ 70 ] . Therefore , diﬀerent SDPs present various models for presenting software arte - facts , e . g . , the Rational Uniﬁed Process ( RUP ) [ 38 , 39 ] . There are ways to classify and structure software artefacts based on well - known modelling concepts . Examples of such models are the work of Broy [ 18 ] and Silva et al . [ 70 ] . Moreover , there are ontologies and meta - models to classify artefacts in speciﬁc software development areas ( e . g . , Idowu et al . [ 34 ] Mendez et al . [ 57 ] , Zhao et al . [ 87 ] , and Constantopoulos and Doerr [ 21 ] ) . However , the deﬁnitions of artefacts presented in the literature do not distinguish between : i Artefacts that have an inherent value for the develop - ment organisation ( i . e . , an asset [ 86 ] ) from the artefacts that do not have any value for the organisation 1 [ 86 ] . The value of each asset is a property that can characterise its degradation , i . e . , if an asset degrades , although it con - tinues being an asset , its value for the organisation has degraded . ii Artefacts that are intended to be used more than once “An asset is a software artefact that is intended to be used more than once during the inception , development , de - livery , or evolution of a software - intensive product or service . . . [ 86 ] ” “If an artefact is used once and discarded or disregarded afterwards , it does not qualify as an as - set . [ 86 ] ” . We believe that the following example clariﬁes the distinction between Temporary Artefacts vs Assets : An API description used by developers as a reference has value in the development eﬀort . If changes are made ( new 1 Mendez et al . [ 56 ] deﬁne artefacts as having value for a role which is substantially diﬀerent from having value for the organisation . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 2 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services decisions , new ways to adhere to components , etc . ) , but the API description is not updated to reﬂect this , the utility ( value ) of the API description becomes lower ( the asset degrades ) . On the other hand , an automatically generated test result is not seen as an asset , as it is transient or inter - mediate . It is generally created as a work product used once to be “transformed” into “change requests” , “tickets” or other management artefacts . Once transformed into the new asset “change requests” , it is discarded . New test results reports will be created ( and discarded ) on each ex - ecution of the tests . Therefore , artefacts that are intended to be used more than once and have value for the organisa - tion ( i . e . , assets ) need to be monitored by the organisation since their continuous maintenance and evolution renders the need for exercising quality control . [ 64 , 86 ] . 2 . 2 . Technical Debt and Asset Degradation Cunningham introduced the TD metaphor in 1992 to de - scribe the compromises resulting from sub - optimal decisions to achieve short - term beneﬁts [ 22 ] . All assets ( which are per deﬁnition artefacts , too ) are subject to TD , i . e . , while assets are created , changed , and updated , they might incur TD [ 53 ] . The TD metaphor has been extended and studied by many researchers [ 65 ] . It has been an interesting topic for both academia and industry , and it has grown from a metaphor to a practice [ 42 ] . TD is currently recognised as one of the critical issues in the software development industry [ 10 ] . TD is “pervasive” , and it includes all aspects of software devel - opment , signifying its importance both in the industry and academia [ 41 ] . The activities that are performed to prevent , identify , monitor , measure , prioritise , and repay TD are called Technical Debt Management ( TDM ) [ 5 , 31 ] and include such activities as , for example , identifying TD items in the code , visualising the evolution of TD , evaluating source code state , and calculating TD principal [ 65 ] . As the TD metaphor was extended to include diﬀerent aspects of software development , various TD types were introduced [ 5 ] , e . g . , requirements debt , test debt , and docu - mentation debt . The introduction of diﬀerent types of TD has led researchers to attempt to classify the diﬀerent types and categories of TD . One of the earliest classiﬁcations of TD is the work of Tom et al . [ 78 ] . Other secondary and tertiary studies have been performed to summarise the current state of TD and TD types , e . g . , by Lenarduzzi et al . [ 50 ] , Rios et al . [ 65 ] , and Li et al . [ 53 ] . The metaphor has been mainly operationalised by re - searchers and practitioners on source code , i . e . , code , design , and architecture [ 5 ] . The organisational , environmental and social aspects of TD have not received the same amount of attention [ 65 ] . Moreover , TD types are often studied in iso - lation , not considering how one TD can be contagious to other assets and the permeation to other TD types [ 5 ] . For example , when the TD in code grows , a valid question would be whether and how it impacts the TD in tests and the extent of such impact . Moreover , TDM activities have been investigated in sev - eral secondary studies with diﬀerent perspectives , some fo - cusing on tools , others on strategies , but there is still a lack of uniﬁed analysis aligning these diﬀerent perspectives [ 65 ] . Lastly , TD is generally studied in the current state of the software , and it is understudied with regards to the evolu - tionary aspects of TD , i . e . , studying TD on a “snapshot” of a system is not enough [ 26 , 63 ] . Therefore , a more appropriate approach to studying TD is to study its evolution [ 17 ] . It is only by periodically monitoring TD that we can study the eco - nomic consequences of TD [ 24 ] , determine the performance of the system in the future [ 25 ] , and create methods and frameworks to react quickly to the accumulation of TD [ 52 ] . In our previous work [ 86 ] , we coined another concept Asset Degradation “as the loss of value that an asset suﬀers due to intentional or unintentional decisions caused by techni - cal or non - technical manipulation of the asset , or associated assets , during all stages of the product life - cycle” [ 86 ] . All assets can degrade , which will aﬀect their value for the or - ganisation in diﬀerent ways . Degradation can be deliberate , unintentional , and entropy [ 86 ] . Deliberate degradation is introduced by taking a conscious decision , understanding its long - term consequences and accommodating short - term needs . Unintentional degradation is introduced by taking a sub - optimal decision either because we are not aware of the other , better alternatives or because we cannot predict the consequences of selecting “our” alternative . Finally , entropy is introduced just by the ever - growing size and complexity that occurs when software systems are evolving [ 48 , 49 ] . The degradation that is due to the continuous evolution of the soft - ware , and which is not coming directly from the manipulation of the asset by the developers , is entropy [ 86 ] . 2 . 3 . Taxonomies in Software Engineering Scientists and researchers have long used taxonomies as a tool to communicate knowledge . Early examples are noted in the eighteen century , for instance , the work of Carl von Linné [ 54 ] . Taxonomies are mainly created and used to com - municate knowledge , provide a common vocabulary , and help structure and advance knowledge in a ﬁeld [ 29 , 46 , 81 ] . Taxonomies can be developed in one of two approaches ; top - down , also referred to as enumerative , and bottom - up , also referred to as analytico - synthetic [ 15 ] . The taxonomies that are created using the top - down method use the existing knowledge structures and categories with established deﬁ - nitions . In contrast , the taxonomies that use the bottom - up approach are created using the available data , such as experts’ knowledge and literature , enabling them to enrich the existing taxonomies by adding new categories and classiﬁcations [ 80 ] . Software engineering ( SE ) is continually evolving and becoming one of the principal ﬁelds of study with many sub - areas . Therefore , the researchers of the ﬁeld are required to create and update the taxonomies and ontologies to help mature , extend , and evolve SE knowledge [ 81 ] . The Guide to the Software Engineering Body of Knowledge ( SWEBOK ) can be considered as a taxonomy that classiﬁes software engi - neering discipline and its body of knowledge in a structured way [ 13 ] . Software engineering knowledge areas are deﬁned in SWEBOK , and they can be used as a structured way of com - Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 3 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services munication in the discipline . Other examples of taxonomies in software engineering are the work of Glass et al . [ 30 ] and Blum [ 12 ] . Specialised taxonomies with narrower scopes are also popular in the ﬁeld . These taxonomies are focused on speciﬁc sub - ﬁelds of software engineering such as Taxonomy of IoT Client Architecture [ 76 ] , Taxonomy of Requirement Change [ 68 ] , Taxonomy of Architecture Microservices [ 28 ] , Taxonomy of Global Software Engineering [ 71 ] , and Tax - onomy of Variability Realisation Techniques [ 75 ] to name a few . This paper presents a taxonomy of assets in the incep - tion , planning , development , evolution , and maintenance of a software - intensive product or service . The taxonomy is built using a hybrid method , i . e . , the combination of top - down and bottom - up . The details of the taxonomy creation are presented in Section 3 . 3 . 2 . 4 . Summary of the Gaps In this paper , we identify and categorise assets in software development and software engineering . We use the concept of assets and their intentional and unintentional degradation . Moreover , we aim to address the following real - world prob - lems : • Bring awareness to practitioners and academicians . A precise and concise terminology of assets enables prac - titioners and academicians to consider new ways of dealing with asset degradation [ 86 ] . • The ripple eﬀect that the degradation of an asset can impose on other assets is another aspect that necessi - tates the creation of taxonomy to understand relations between assets [ 41 , 86 ] . In this paper , we identify the software artefacts that adhere to this deﬁnition of assets and are common in the industry . We aim to address the following gap : identifying and dis - tinguishing assets by considering every aspect of software development . For example , assets related to environment and infrastructure , development Process , ways of working , and organisational aspects [ 5 , 65 ] that have not received enough attention . We aspire to identify assets and provide a synthesis of existing knowledge in the area of asset management . 3 . Research Overview This section presents the research methodology of the paper . The process followed to build the taxonomy is divided into two main parts : a systematic literature review ( SLR ) and a ﬁeld study [ 73 ] of industrial cases using focus group inter - views and ﬁeld notes as data collection methods . Combining an SLR and a ﬁeld study helps us look at the phenomenon from diﬀerent perspectives and create a complete picture of the phenomena of assets . In addition , this multi - faceted view provides insights that can strengthen the validity of the results . In this work , we are answering the following research question : 𝑅𝑄 ∶ What assets are managed by organisations during the inception , planning , development , evolution , and mainte - nance of software - intensive products or services ? The rest of this section presents the SLR ( See Section 3 . 1 ) , the ﬁeld study [ 73 ] ( See Section 3 . 2 ) , and taxonomy creation ( See Section 3 . 3 ) . 3 . 1 . Systematic Literature Review : Planning and Execution This subsection describes the systematic literature review conducted in this work . All assets are subject to degradation . Asset degradation can be classiﬁed into three categories deliberate , uninten - tional , and entropy [ 86 ] . Asset degradation can also be mea - sured and monitored using diﬀerent metrics , e . g . , the amount of TD . TD is a familiar concept for practitioners and has received a growing interest in academia and the industry [ 65 ] . TD has become a broad research area that has focused on diﬀerent assets . The fact that TD research studies a partic - ular asset might imply that that asset might be of value for software development organisations , or at least that might be perceived as such by TD researchers . Therefore , we do believe we can use the TD literature as a proxy for identifying and categorising diﬀerent types of assets . In order to study the state of art , we performed an SLR to capture the classiﬁcations and deﬁnitions of the various assets addressed by these previous research works ( top - down method ) [ 15 ] . In our literature review , the goal was to iden - tify systematic literature reviews , systematic mapping stud - ies , and tertiary studies . We reviewed secondary and tertiary research papers by performing an SLR using snowballing , following the guidelines by Wohlin [ 82 ] . We selected snow - balling as a search strategy as it allowed us to explore the area as well as its reported eﬃciency [ 6 ] . The starting set of papers for snowballing was collected through a database search in Google Scholar in October 2021 using the following search string in : “technical debt” AND ( “systematic literature review” OR “systematic mapping study” OR “tertiary study” ) . We chose to use the search string only in Google scholar since it is not restricted to spe - ciﬁc publishers [ 6 ] , and it can help avoid publisher bias [ 82 ] . We selected , with the inclusion and exclusion described be - low , the articles that presented a classiﬁcation for TD , i . e . , articles that present diﬀerent types of TD . The SLR execution procedure to identify assets included the following steps as illustrated in Figure 1 . The results of this process are presented in Section 4 . 1 . • Step 1 : Collection of the start set of relevant articles ( seed papers ) , including SLRs , SMSs , and tertiary stud - ies on TD , by using a search string . • Step 2 : Evaluate the papers - start set in the ﬁrst itera - tion - for inclusion / exclusion based on the criteria . – Inclusion Criteria : ◦ The selected papers should report secondary or tertiary studies ; Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 4 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Collection of the Start Set - Search String in Google Scholar Selection of Relevant Articles with TD Classification Snowballing Extracting Assets and Types of Assets Sythesizing the Definitions Forward Snowballing BackwardSnowballing Step 1 : Step 2 : Step 3 : Step 3 . 1 : Step 3 . 2 : Step 4 : Step 5 : Creating the Matrix of Assets and Types of Assets Step 6 : Figure 1 : The literature review execution process . ◦ the papers should present any classiﬁcation of TD and assets aﬀected by TD ; ◦ the papers should be written in English ; the papers’ main aim is the literature review . – Exclusion Criteria : ◦ The papers that present informal literature re - views and are duplications of previous stud - ies are not included . • Step 3 : The snowballing procedure for identifying additional secondary and tertiary studies on TD that satisfy our inclusion / exclusion criteria : – Step 3 . 1 : Backward snowballing by looking at the references of the selected papers . The back - ward snowballing was ﬁnished in one round . – Step 3 . 2 : Forward snowballing by looking at the papers that cite the selected papers . The forward snowballing was ﬁnished in one round . • Step 4 : Extracting diﬀerent types of assets and as - sets together with their respective deﬁnitions from the selected articles . • Step 5 : Synthesising the deﬁnitions of the types of assets and assets provided by the selected articles . • Step 6 : Creating the matrix of types of assets and as - sets based on TD classiﬁcations deﬁned by the selected articles . 3 . 2 . Field Study ( Focus Group Interviews ) : Planning and Execution To study the state of practice , we performed ﬁeld studies , using focus groups and ﬁeld notes as data collection in ﬁve companies to ﬁnd evidence on how assets are deﬁned and used . The ﬁve companies were selected using convenience sampling , as the companies are involved in an ongoing re - search project that focuses , among other topics , on addressing asset degradation challenges . The focus groups’ process is presented in Figure 2 . The reports from the focus groups were coded and used for the con - struction of the taxonomy . We used the bottom - up method [ 15 ] for updating the existing structure that we obtained from the literature review . The focus groups were planned as a half - working day ( four hours ) . 3 . 2 . 1 . Case Company Characterisation We have collected the data for this study by collaborating with ﬁve companies that work in the area of construction machinery , communication & ICT , consultancy services , and ﬁnancial services . The research partner companies are Er - icsson ( telecommunication & ICT ) , Fortnox ( Financial Ser - vices ) , Qtema ( Consultancy Services ) , Time People Group ( Consultancy Services ) , and Volvo CE ( Construction Ma - chinery ) . The partner companies are mature in their development practices and have well - established , successful products . They are interested in continuously improving their products and development processes , which turns into their willingness to participate in studies like this . All the collaborating com - panies work on developing software - intensive products or services and are involved in a large ongoing research part - nership 2 . The details of the case companies are presented in Table 1 . Note that the order of the companies in Table 1 does not correspond with the order of focus groups ( focus group IDs ) in Table 4 , which has been shuﬄed to preserve conﬁdentiality . 3 . 2 . 2 . Focus Groups’ Procedure The steps taken during the industrial focus groups are presented in this section . The focus groups include six steps ( see Figure 2 ) : • F1 . Focus group participants introducing themselves . • F2 . One of the moderating researchers presenting the topic . • F3 . Focus group participants discussing the topic , pro - viding insight into their views / experiences with TD and document them in notes . • F4 . Focus group participants discussing assets and asset management in detail after a second presentation of the concept . 2 See www . rethought . se . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 5 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Focus Groups Data Extraction Extracting the Asset Matrix Closing Discussion Participants ' View on TD Items in Terms of Assets Introduction of the Concept of Asset Management Participants ' View on What TD Is Introduction of the Topic Introduction of the Participants First Cycle Coding In Vivo Coding Validating and Resolving the Conflicts Second Cycle Coding Pattern Coding Validating and Resolving the Conflicts F1 D1 F2 F3 F4 F5 F6 D2 D3 D4 Figure 2 : The ﬁeld study execution process . Table 1 Case company details . The table is ordered alphabetically based on the name of the companies , and does not correspond to the order in Table 4 . Company Domain InvestigatedSite EnterpriseSize Participants’Roles Number of Participants Ericsson Telecommunication & ICT Karlskrona , Sweden Large Senior System Architect Corporate Senior Strategic Expert Operations & Testing 3 Fortnox Finance Växjö , Sweden Large Head of Development Product Owner Development Manager System Architect Testing 14 Qtema † Consultancy Stockholm , Sweden SME Chairman of the Board Requirements Analyst Sales Manager Project Manager IT AdministrationManager 6 Time People Group † Consultancy Stockholm , Sweden SME Data Consultant Project Manager Consultant Senior Agile Coach IT Project Manager Team Leader Chief Executive Oﬃcer ( CEO ) ConsultantTestLeader 7 Volvo CE ConstructionMachinery Gothenburg , Sweden Large Enterprise Architect Solution Architect Business Information Architect 5 † Time People Group and Qtema participated in the same workshop . • F5 . Focus group participants discussing what they wrote before as TD examples and rethinking them in terms of assets , asset degradation , and asset manage - ment . • F6 . A closing discussion and focus groups . Each Focus group starts with participants introducing themselves with background information about their work , including their current role in the organisation ( step F1 ) . One of the moderating researchers then presents the Focus group’s agenda and covers the importance of the topic and the grow - ing interest in value creation and waste reduction both in academia and in the industry ( step F2 ) . After the initial introduction of the topic by the moder - ating researchers , the participants are divided into groups . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 6 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services They are asked to list and discuss the challenges with their ways of working ( while considering varying aspects of TD ) , i . e . , the problems they know or have encountered or expe - rienced ( step F3 ) . After the time is up , the notes are read , discussed , and abstracted to a more general description and later put on a whiteboard . The connections between the items on the board are identiﬁed and marked down with a marker . After a second presentation , i . e . , introducing the partici - pants to the concepts related to asset management and asset degradation ( step F4 ) , the participants add new items to the previous notes on the board . Participants then reﬁne the items from the board for the rest of the Focus group ( step F5 ) . The Focus group ends with a closing discussion on the topic and the items ( step F6 ) . In the context of this research , we have moved the focus from the traditional TD metaphor to asset degradation . In this framework , we talk about asset degradation as the devi - ation of an asset from its representation . That way , we can focus , potentially , on any type of asset and its representation . This framework provides us with a broader , holistic view that allows us to study how an asset’s degradation ( e . g . , require - ments ) might introduce degradation in other assets ( e . g . , code or test cases ) . The researchers’ minutes that were written during each session were then aggregated and summarised in a report sent back to the participants , that were asked to provide us with feedback . The written notes from the participants and the ﬁnal reports were used as raw data for creating the taxonomy using the data extraction method described in Section 3 . 2 . 3 . The raw data ( i . e . , participants’ notes and the reports ) were used for coding and later to extract types of assets and ex - plicit assets . The details of the data extraction and taxonomy creation are described in Section 3 . 3 . Unfortunately , since this research is under non - disclosure agreements ( NDA ) with participating companies , we cannot disclose any further information about the companies , the participants , or the collected materials . 3 . 2 . 3 . Data Extraction To create the matrix of assets from industrial insights , we use the hybrid method of coding , as suggested by Sal - daña [ 69 ] . The coding is divided into two main cycles : First Cycle Coding and Second Cycle Coding . First Cycle Coding of the raw data happens in the initial stage of coding . The raw data , which can be a clause , a sentence , a compound sentence , or a paragraph , is labelled based on the semantic content and the context in which it was discussed during the Focus group . We have used the in vivo coding method [ 69 ] to label the raw data in the ﬁrst cycle . In vivo coding prioritises the participants’ opinions [ 69 ] ; therefore , it is suitable for labelling raw data in the ﬁrst cycle coding in our study , where participants’ opinions are used as input . It adheres to the “verbatim principle , using terms and concepts drawn from the words of the participants themselves . By doing so , [ the researchers ] are more likely to capture the meanings inherent to people’s experiences . ” [ 74 , p . 140 ] It is commonly used in empirical and practitioner research . [ 20 , 27 , 74 ] The coding was done by two researchers independently ( step D1 , see Figure 2 ) . The labels were then compared to validate the labels and to identify conﬂicting cases . A third researcher helped to resolve the conﬂicts by discussing the labels with the two initial researchers ( step D2 , see Figure 2 ) . Second Cycle Coding is done primarily to categorise , theorise , conceptualise , or reorganise the coded data from the ﬁrst cycle coding . We have used Pattern Coding [ 69 ] as the second cycle coding method . Pattern codes are explanatory or inferential codes that identify an emergent theme , con - ﬁguration or explanation [ 69 , p . 237 ] . According to Miles et al . [ 60 , p . 86 ] , pattern coding is used in cases where : ( i ) the researchers aim to turn larger amounts of data into smaller analytical units . ( ii ) the researchers aim to identify themes from the data . ( iii ) the researchers aim to perform cross - case analysis on common themes from the data gathered by studying multiple cases . Similar to the ﬁrst cycle coding process , pattern coding was done by two researchers independently ( step D3 , see Figure 2 ) . The results were compared to validate the classiﬁ - cations and to identify conﬂicting cases . A third researcher resolved the conﬂicting cases in a discussion session with the two researchers ( step D4 , see Figure 2 ) . The results of the insights gathered from industrial focus groups are presented in Section 4 . 2 . 3 . 3 . Taxonomy Creation To describe a precise syntax and the semantics of the diﬀerent concepts used for the taxonomy creation , we created a metamodel ( presented in Figure 3 ) . The metamodel illus - trates the structural relationships between the metaclasses , i . e . , concepts , in the taxonomy . The metaclasses presented in the metamodel are : • The “AssetsTaxonomy” metaclass is the container meta - class for the items in the model . • The “TypeOfAsset” metaclass represents the hierar - chical classiﬁcation of assets . The items belonging to this metaclass can be further broken down into sub - classiﬁcations representing various groups of assets . The types of assets are containers for the assets . Types of assets are identiﬁed from the state - of - the - art ( i . e . , existing academic literature ) , state - of - practice ( i . e . , the industrial insights gathered through the industrial focus groups ) , or the identiﬁed by researchers . • The “Asset” metaclass represents assets . Each asset belongs to one and only one type of asset , assuring orthogonality by design . Assets are identiﬁed from the state - of - the - art ( i . e . , existing academic literature ) , state - of - practice ( i . e . , the industrial insights gathered through the industrial focus groups ) , or identiﬁed by researchers . • The “Reference” metaclass represents the references from which each asset or type of asset has been iden - tiﬁed . Reference can originate from academic litera - Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 7 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services ture ( the literature review ) or industrial insights ( gath - ered from industrial focus groups ) . References can be mapped to individual assets / type of assets or multiple assets / type of assets . Reference title : String type : String TypeOfAsset name : String definition : String 0 . . . * 0 . . . * Asset name : String definition : String 1 . . . * AssetsTaxonomy 1 . . . * 1 . . . * 0 . . . * 1 . . . * 0 . . . * Figure 3 : Asset Management Metamodel . The creation of the taxonomy included three steps . First , we summarised the relevant topics on TD types ( top - down approach ) with items that we extracted from the literature review . We created the matrix based on the literature’s deﬁ - nitions , i . e . , by synthesising the deﬁnitions to identify simi - larities , diﬀerences , and hierarchies of identiﬁed items . We have grouped the deﬁnitions provided by the literature based on their semantic meaning . In the second step , we utilised the extracted assets from industrial focus groups ( Section 3 . 2 . 3 ) to create a second asset matrix ( bottom - up approach ) . Like the previous step , we used the deﬁnitions of the assets and their types and the participants’ statements from the focus groups . By combining the two matrices in the last step , we created the asset management tree . To complete the tree , we added some nodes based on the researchers’ expertise and extensive industry knowledge from decades of industrial research that we perceived were missing nodes and leaves . We mention such cases as Author Deﬁned Assets ( ADA ) when presenting the results . The process of adding ADA started with researchers sug - gesting assets that should be included in the taxonomy . These suggested assets were brought up in internal workshops 3 where all the researchers discussed , reﬂected , improved , and added or removed the suggested assets . User Stories , as an example , were suggested by one of the researchers to be con - sidered as assets during one of the internal workshops . The discussion was regarding ( i ) whether or not User Stories are assets , ( ii ) if they ﬁt in the taxonomy according to the def - inition , ( iii ) where they belong in the tree , ( iv ) what they represent , ( v ) and how they degrade . After the discussions , 3 Internal workshops refer to the workshops where the researchers dis - cussed the taxonomy . the researchers decided that User Stories belong to [ AM1 ] - [ AM1 . 1 ] Functional - Requirements - Related Assets in the tax - onomy tree . The assets included in the taxonomy should adhere to the deﬁnition of an asset [ 86 ] . 3 . 4 . Taxonomy Validation This section describes the taxonomy validation proce - dure . According to Usman et al . [ 81 ] , the validation process includes orthogonality demonstration , benchmarking , and utility demonstration . The taxonomy was created to be or - thogonal by design ( i . e . , each element can only be a member of one group ) , as described in Section 3 . 3 . Therefore , in this validation we focus on benchmarking and utility demonstra - tion . We conducted three separate workshops ( one for each company ) to validate the taxonomy and its structure with the six participants ( including Product Owner , Developer , Soft - ware Architect , Scrum Master , Test Quality Assurance , and Research Engineer ) from three companies namely , Ericsson ( 2 participants ) , Fortnox ( 3 participants ) , and Volvo CE ( 1 participant ) who were involved during the industrial work - shops for the data collection . The procedure for the validation workshops is presented below . 1 . The taxonomy was sent to the participants to study before the validation workshops . 2 . During the validation workshops , the taxonomy was presented to the participants . 3 . After the presentation , the participants ﬁlled in a ques - tionnaire that included four questions : ( a ) “ Select the assets from the taxonomy that you were not aware of . ” ( b ) “ Select the assets that you think should not be in the taxonomy . ” ( c ) “ Write down the assets that are missing from the taxonomy . ” ( d ) “ Prioritise the top 5 assets based on your experi - ence . ( index starting from 1 as the most impor - tant asset ) . You can add missing assets from the previous question as well . ” 4 . At the end of each workshop , a discussion session was held where participants asked questions regarding the taxonomy and its content . The discussions were recorded . We decided to apply changes to the taxonomy after the validation workshops were concluded , in cases when the ma - jority of the participants suggested a given change in the taxonomy . The results of the validation workshops are pre - sented in Section 4 . 4 . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 8 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 2 The articles gathered for the literature review during the snowballing process . Code Title SeedPaper BackwardSnowballing Forward Snowballing P1 A Consolidated Understanding of Technical Debt [ 78 ] x P2 An Exploration of Technical Debt [ 79 ] x P3 Towards an Ontology of Terms on Technical Debt [ 3 ] x P4 A Systematic Mapping Study on Technical Debt and Its Management [ 53 ] x P5 Identiﬁcation and Management of Technical Debt : A Systematic Mapping Study [ 2 ] x P6 Managing Architectural Technical Debt : A Uniﬁed Model and Systematic Literature Review [ 11 ] x P7 A tertiary study on technical debt : Types , management strategies , research trends , and base information for practitioners [ 65 ] x P8 A systematic literature review on Technical Debt prioritization : Strategies , processes , factors , and tools [ 50 ] x P9 Investigate , identify and estimate the technical debt : a systematic mapping study [ 8 ] x 4 . Results This section presents the results of the systematic litera - ture review and then the results from the ﬁeld study . We will present the asset management taxonomy built by aggregating the results from both . Finally , we will present the results of the validation workshops . 4 . 1 . Results from the SLR The ﬁnal list of selected papers included nine articles , presented in Table 2 . To create the ﬁnal assets’ matrix ( pre - sented in Section 4 . 3 ) , we extracted the data from each article . For example , in paper P4 [ 53 ] , we refer to Figure 8 on page ten of the article , where the authors summarise the “TD clas - siﬁcation tree” and their respective deﬁnitions . The authors deﬁne Requirements TD as “the distance between the optimal requirements speciﬁcations and the actual system implemen - tation , under domain assumptions and constraints” [ 53 , p . 9 ] . Requirements is also mentioned as a TD item in P3 , P5 , P6 , and P8 . Table 3 presents the summary of our ﬁndings based on the types of TD . The codes of the papers are used as a ref - erence throughout this paper . It is important to mention that Table 3 does not represent an overview of the ﬁnal assets but only the ones extracted from the SLR . However , this matrix helps us to categorise assets and types of assets according to existing classiﬁcations . Looking at Table 3 we can see that there are fewer cat - egories in the earlier studies ( P1 and P2 ) compared to later studies ( P3 to P9 ) . The more recent papers that follow these studies break down the bigger categories into more speciﬁc categories . For example , Architecture and Design are put into one category in P1 and P2 and later , they are broken down into their own categories . It is important to mention that P7 has fewer categories since the study is on the speciﬁc topic of Architectural Technical Debt . 4 . 2 . Results from the Field Study There were a total of four focus groups , each held with the participation of employees from diﬀerent companies . The focus groups’ procedure stayed the same , while the closing discussion of each focus group was on the topic of interest for that focus group’s participants ( the stakeholders ) . The topics included , but were not limited to , Lack of Knowledge / Competence , Architecture Lifecycle , Business Models for Products , and Backlog Update Issues / Backlog Size . Two researchers used the in vivo coding method to label 386 statements during the ﬁrst cycle coding . After matching and validating the labels , 14 cases of conﬂicting labels were identiﬁed . The conﬂicting labels were resolved during a discussion session with a third researcher . The researchers agreed on the new labels for the conﬂicting cases during that discussion . The focus groups are presented in chronological order in Table 4 , i . e . , WS1 was the ﬁrst focus group . Examining Table 4 , we observe that assets are mentioned more often than types of assets in the industrial focus groups , whereas types of assets are more frequent in the literature review ( see Table 3 ) . Finally , assets that are related to Operations , Management , and Organisational Management were highlighted more in the industrial focus groups than the literature review . 4 . 3 . The Asset Management Taxonomy Using the key concepts extracted from the labelled data ( presented in Table 3 and Table 4 ) , we build the taxonomy of assets . The taxonomy contains the assets identiﬁed both through the literature review and through the industrial focus groups . The assets included in the taxonomy are presented in a tree ( graph ) . The nodes represent the assets ( the leaf nodes ) and the types of assets ( non - leaf nodes ) . The tree presented in Figure 4 contains only the types of assets ( The full tree is presented in Appendix A ) . Note that the nodes in the tree in Figure 4 are mapped to represent their source . For example , a node can be assigned with [ P1 ] as a reference for an article in the literature review . Similarly , Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 9 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 3 Asset matrix from technical debt literature . P 1 2012 P 2 2013 P 3 2014 P 4 2015 P 5 2016 P 6 2018 P 7 2018 P 8 2019 P 9 2020 E m e r g i n g C a t e go r y ( i e s ) P h a s e , du r i n g w h i c h t h e a r t e f a c t i s p r o du c e d F e a t u r e s R e qu i r e m e n t s R e qu i r e m e n t s R e qu i r e m e n t s R e qu i r e m e n t s R e qu i r e m e n t s R e qu i r e m e n t s P r o du c t R e qu i r e m e n t s R e qu i r e m e n t s U s a b ili t y U s a b ili t y U s a b ili t y Q u a li t y R e qu i r e m e n t s D e s i g n \ A r c h i t ec t u r e D e s i g n a nd A r c h i t ec t u r e A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e D e s i g n A r c h i t ec t u r e D e s i g n D ec i s i o n s D o c u m e n t a t i o n D e s i g n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n D o c u m e n t a t i o n P r o du c t D o c u m e n t a t i o n D e s i g n S p ec i ﬁ c a t i o n s A r c h i t ec t u r a l D o c u m e n t a t i o n A r c h i t ec t u r a l D o c u m e n t a t i o n C o d e C o d e C o d e C o d e C o d e C o d e C o d e C o d e C o d e S o u r ce C o d e D e v e l o p m e n t B u il d B u il d B u il d B u il d B u il d B u il d B u il d D o c u m e n t a t i o n S e r v i ce S e r v i ce S e r v i ce S e r v i ce W e b S e r v i ce s V e r s i o n i n g V e r s i o n i n g V e r s i o n i n g V e r s i o n i n g V e r s i o n i n g V e r s i o n i n g T e s t i n g T e s t i n g T e s t T e s t T e s t T e s t T e s t T e s t F un c t i o n a l T e s t V e r i ﬁ c a t i o n a nd V a li d a t i o n D e f ec t s D e f ec t s D e f ec t s D e f ec t s D e f ec t s D e f ec t s D e f ec t s T e s t A u t o m a t i o n T e s t A u t o m a t i o n T e s t A u t o m a t i o n T e s t A u t o m a t i o n T e s t A u t o m a t i o n T e s t C a s e D o c u m e n t a t i o n T e s t D o c u m e n t a t i o n E n v i r o n m e n t E n v i r o n m e n t & I n f r a s t r u c t u r e O p e r a t i o n s I n f r a s t r u c t u r e H a r d w a r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e I n f r a s t r u c t u r e E n v i r o n m e n t & I n f r a s t r u c t u r e O p e r a t i o n a l P r o ce ss e s O p e r a t i o n s P r o ce ss P r o ce ss P r o ce ss P r o ce ss P r o ce ss M a n a g m e n e t M a n a g e m e n t D o c u m e n t a t i o n S p ec i ﬁ c a t i o n s D o c u m e n t a t i o n I n t e r n a l R u l e s & S p ec i ﬁ c a t i o n s C o l o r G u i d e : A ss e t s T y p e s o f A ss e t s T e m p o r a r y A r t e f a c t s Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 10 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 4 Asset matrix from industrial input . WS1 WS2 WS3 WS4 EmergingCategory ( ies ) Phase , during which the artefact is produced ContradictoryRequirements Requirements Requirements Requirements Product Requirements Requirements ArchitecturalModels Documentation Documentation Documentation Product Documentation Design ArchitecturalDocuments Architectural Documentation Architectural Documentation Architecture Software Structure Architecture Architectural ( Source Code ) DangerousCode Code Code Code Source Code Development APIs API Versions APIs Libraries Third Party Products Libraries \ External Libraries Test Cases Tests Test Cases Test Cases VeriﬁcationandValidation Automated Tests Test Automation Scripts Bug Reports Application Data Application Data Operations Kubernets Containers \ Kubernets Tools Ways of Working Ways of Working DocumentationaboutWaysofWorking DocumentationaboutWaysofWorking Management Coding Standards Coding Standards Coding Standards Architectural Rules Architectural Internal Standards DocumentationStandards DocumentationInternalRules \ Standards Product Roadmap Product Management Product Management Backlog Product Backlog Organisation’sRoadmap Holistic Strategy Organisation’sStrategy OrganisationalManagement Organisation’sStructure Organisation’sStructure Business Models Business Models Color Guide : Assets Types of Assets Temporary Artefacts [ WS1 ] as a reference for an asset coming from industrial focus groups 4 . And ﬁnally , Author Deﬁned Assets ( [ ADA ] ) are assets included in the taxonomy by the researchers . The process described in Section 3 . 3 , combining the as - set matrices from the literature review , the input from the industrial focus groups , and completing the tree with Author Deﬁned Assets ( ADA ) resulted in the taxonomy containing 24 types of assets and a total of 57 assets . The eight main types of assets included in the taxonomy are : • Product - Requirements - Related Assets ( AM1 ) refer to assets ( and types of assets ) concerned with software requirements , including the elicitation , analysis , speci - ﬁcation , validation , and management of requirements during the life cycle of the software product . 4 The IDs on the focus groups on Table 4 have been obfuscated to preserve anonymity and have no relationship with the order of companies shown in Table 1 . • Product - Representation - Related Assets ( AM2 ) re - fer to the assets ( and types of assets ) concerned with system and architectural design and any documentation related to these assets . • Development - Related Assets ( AM3 ) refer to the as - sets ( and types of assets ) concerned with the develop - ment of the software product , including the code , build , and versioning . • Veriﬁcation - and - Validation - Related Assets ( AM4 ) refer to assets ( and types of assets ) concerned with software testing and quality assurance and the output provided by such assets that help the stakeholders in - vestigate the quality of the software product . • Operations - Related Assets ( AM5 ) refer to assets ( and types of assets ) concerned with the data produced or collected from operational activities , e . g . , any data col - lected during the use of the product or service . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 11 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 4 : The Asset Management Taxonomy . The tree contains only the types of assets . The full tree is presented in Appendix A . • Environment / Infrastructure - Related Assets ( AM6 ) refers to assets ( and types of assets ) concerned with the development environment , the infrastructure , and the tools ( including support applications ) that facilitate the development or deployment process . • Development - Process / Ways - of - Working - Related As - sets ( AM7 ) refer to assets ( and types of assets ) con - cerned with product and process management and all the interrelated processes and procedures during the development process . • Organisation - Related Assets ( AM8 ) refer to assets ( and types of assets ) concerned with organisations , such as team constellation , team collaborations , and organisational governance . In the remainder of the section , we present the eight major types of assets labelled AM1 - AM8 . We include the deﬁnitions of each type of asset together with their corresponding assets . 4 . 3 . 1 . Product - Requirements - Related Assets ( AM1 ) Product - Requirements - Related Assets include the follow - ing three types of assets ( see Figure 5 with the taxonomy’s sub - tree and Table 5 with deﬁnitions of each asset ) : • Functional - Requirement - Related Assets ( AM1 . 1 ) refer to the assets related to the functions that the software shall provide and that can be tested [ 13 ] . We have identiﬁed the following assets belonging to this type : Feature - Related Backlog Items , User Stories , and Use Cases . • Quality - Requirement - Related Assets ( AM1 . 2 ) refer to the assets related to non - functional requirements that act to constrain the solution [ 13 ] . We have identiﬁed the following assets belonging to this type : System Re - quirements , User Interface Designs , Quality Scenarios ( i . e . , the - ilities ) , and User Experience Requirements . • Product - Modiﬁcation - Related Assets ( AM1 . 3 ) refer to assets that mandate a change of the system and , but not necessarily , the requirements . Change Requests is an asset we identiﬁed belonging to this type . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 12 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 5 : Product - Requirements - Related Assets Sub - tree . Table 5 Product - Requirements - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Feature - Related Backlog Items AM1 . 1 Feature - Related Backlog Items are the results of reﬁning and breaking down the user stories to create executable tasks [ 61 ] . User Stories AM1 . 1 User Stories are , according to the agile development paradigm , a way to specify the features of the software that is being developed [ 61 ] . Use Cases AM1 . 1 Use Cases are lists of actions or events that describe how a user will achieve a goal in a system [ 40 ] . System Require - ments AM1 . 2 “System Requirements are the requirements for the system as a whole . System Require - ments [ . . . ] encompass user requirements , requirements of other stakeholders ( such as regulatory authorities ) , and requirements without an identiﬁable human source . ” [ 13 ] . User Interface De - signs AM1 . 2 “User Interface Design is an essential part of the software design process . User interface design should ensure that interaction between the human and the machine provides for eﬀective operation and control of the machine . For software to achieve its full potential , the user interface should be designed to match the skills , experience , and expectations of its anticipated users . ” [ 13 ] . Quality Scenarios ( The - ilities ) AM1 . 2 “A quality attribute ( QA ) is a measurable or testable property of a system that is used to indicate how well the system satisﬁes the needs of its stakeholders . ” [ 7 ] A quality scenario is a way of stating a requirement in an unambiguous and testable manner [ 7 ] . User Experience Requirements AM1 . 2 User Experience Requirements “are considered key quality determinants of any product , system or service intended for human use , which in turn can be considered as product , system or service success or failure indicators and improve user loyalty . ” [ 47 , 44 ] . Change Requests AM1 . 3 Change Requests are the modiﬁcations to the software product that are not coming from the requirements analysis of the product . 4 . 3 . 2 . Product - Representation - Related Assets ( AM2 ) Product - Representation - Related Assets include the fol - lowing two types of assets ( see Figure 6 with the sub - tree and Table 6 with deﬁnitions of each asset ) : • Architecture - and - Design - Related Assets ( AM2 . 1 ) refer to the assets that are used to design , communicate , represent , maintain , and evolve the software product , which is divided into : – Architectural - Documentation - Related Assets ( AM2 . 1 . 1 ) refer to the assets used to design , communicate , represent , maintain , and evolve the architectural representation of a software product . We have identiﬁed the following assets belonging to this type : Architectural Models and Architectural Doc - umentation . – Design - Related Assets ( AM2 . 1 . 2 ) refer to the as - sets that belong to the design that occurs during the development process . We have identiﬁed the following assets belonging to this type : Design Decisions Documentation and System Designs . • Product - Documentation - Related Assets ( AM2 . 2 ) refer to the assets that belong to the product documentation and the process of creating such documentation . We have identiﬁed the following assets belonging to this type : Documentation Automation Scripts and Product Documentation . 4 . 3 . 3 . Development - Related Assets ( AM3 ) Development - Related Assets include the following three types of assets ( see Figure 7 with the sub - tree and Table 7 with deﬁnitions of each asset ) : • Build - Documentation - Related Assets ( AM3 . 1 ) refer to the assets related to the build system itself , the build Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 13 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 6 : Product - Representation - Related Assets Sub - tree . Table 6 Product - Representation - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Architectural Mod - els AM2 . 1 . 1 Architecture Models are partial abstractions of systems , they capture diﬀerent properties of the system [ 43 ] . “Architecture modeling involves identifying the characteristics of the system and expressing it as models so that the system can be understood . Architecture models allow visualisation of information about the system represented by the model . ” [ 45 ] Architectural Doc - umentation AM2 . 1 . 1 Architectural Documentation are the representations of the decisions made to construct the architecture of the software [ 43 ] . Design Decisions Documentation AM2 . 1 . 2 Design Decisions Documentation are the results of the design decisions that architects create and document during the architectural design process [ 13 ] . System Designs AM2 . 1 . 2 System Designs are the processes of deﬁning elements of a system . These elements are speciﬁed in the requirements and are extracted to create modules , architecture , components and their interfaces and data for a system . DocumentationAutomationScripts AM2 . 2 Documentation Automation Scripts are the scripts that generate documentation based on the state of the source code . Product Documen - tation AM2 . 2 Product Documentation are the operational guidelines ( such as user manuals and installa - tion guides ) for when the product is in use . environment , and the build process . We have identiﬁed the following assets belonging to this type : Build Plans , Build Results , and Build Scripts . • Code - Related Assets ( AM3 . 2 ) refer to the assets that are related to the source code . We have identiﬁed the following assets belonging to this type : Source Code , Code Comments , APIs , Architecture ( Code Structure ) —i . e . , a set of structures that can be used to reason about the system including the elements , relations among them , and their properties [ 7 ] — , and Libraries / External Libraries . • Source - Code - Management - Related Assets ( AM3 . 3 ) re - fer to the assets related to managing the source code , such as versioning and problems in code versioning and burndown charts . Versioning Comments is an asset we identiﬁed belonging to this type . 4 . 3 . 4 . Veriﬁcation - and - Validation - Related Assets ( AM4 ) Veriﬁcation - and - Validation - Related Assets include the following four types of assets ( see Figure 8 with the sub - tree and Table 8 with deﬁnitions of each asset ) : • Functional - Tests - Related Assets ( AM4 . 1 ) refer to the assets related to testing the functionality of the system , its related features , and how they work together . We have identiﬁed the following assets belonging to this type : Unit Tests , Integration Tests , System Tests , and Acceptance Tests . • Non - Functional - Test - Related Assets ( AM4 . 2 ) refer to the assets related to testing the quality attributes of the system and whether they satisfy the business goals and requirements . We have identiﬁed Non - Functional Test Cases as an asset which belongs to this type . • Test - Documentation - Related Assets ( AM4 . 3 ) refer to the assets related to documenting the testing process . Test Plans is an asset we identiﬁed belonging to this type . • Test - Automation - Related Assets ( AM4 . 4 ) refer to the as - sets that are utilised for automated testing of the system . We have identiﬁed the following assets belonging to this type : Test Automation Scripts and Test Automation ( Real / Synthetic ) Data . 4 . 3 . 5 . Operations - Related Assets ( AM5 ) Operation - Related Assets are all the assets created as the result of operational activities , extracted during the opera - tional activities , or used during the operational activities , e . g . , any data collected during the use of the product or service Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 14 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 7 : Development - Related Assets Sub - tree . Table 7 Development - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Build Plans AM3 . 1 Build Plans are the descriptions of how developers intend to build the software , i . e . , by compilation of artefacts in a build chain , which will end in a running software . Build Results AM3 . 1 Build Results are the results of the build process , including the comments , documentation , and other artefacts that are generated during the build process . This is seen as a persistent asset if it holds more data than just an automated “throw away” report , and / or if the asset is used for reference over time . Build Scripts AM3 . 1 Build Scripts are the scripts that are used to run the build process . Source Code AM3 . 2 Source Code is the collection of code written in a human - readable and comprehensible manner stored as plain text [ 36 ] . Code Comments AM3 . 2 Code Comments are the comments that developers integrate and write within the source code to clarify and describe certain parts of the code or its functionality [ 32 ] . APIs AM3 . 2 APIs ( Application Program Interfaces ) are the interfaces that are created to facilitate interaction of diﬀerent components and modules . Architecture ( Code Structure ) AM3 . 2 Architecture is the actual and fundamental relationships and structure of a software system and its source code [ 7 ] . Libraries / External Libraries AM3 . 2 Libraries / External Libraries are source code that belongs to the product but is not developed or maintained within the project , i . e . , the developers . The software project depends on it and references the library . Web Services AM3 . 2 Web Services are running services on devices handling requests coming from networks Versioning Com - ments AM3 . 3 Versioning comments are the comments that developers submit to any version control application they use for the development . Such comments can later be extracted and viewed to identify the purpose of each event . Figure 8 : Veriﬁcation - and - Validation - Related Assets Sub - tree . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 15 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 8 Veriﬁcation - and - Validation - Related Assets Deﬁnitions . Asset AM type Deﬁnition Unit Tests AM4 . 1 Unit Tests are the tests written to examine the individual units of the code [ 33 ] . “Unit tests generally focus on the program logic within a software component and on correct implementation of the component interface . ” [ 9 ] Integration Tests AM4 . 1 Integration Tests are the tests written to examine the combined set of modules as a group [ 9 , 35 ] . System Tests AM4 . 1 System Tests are the tests written to examine the system’s compliance with the require - ments . Acceptance Tests AM4 . 1 Acceptance Tests are the tests conducted to examine and determine whether the require - ments are met according to the speciﬁcations of the requirements . Non - Functional Test Cases AM4 . 2 Non - Functional Test Cases are the tests that examine the quality of the system , i . e . , non - functional aspects such as performance , availability , and scalability . Test Plans AM4 . 3 Test Plans are the documents that describe the testing scope and test activities that will be performed on the system throughout the development lifecycle . Test Automation Scripts AM4 . 4 Test Automation Scripts are the scripts that automate part of the testing process . More speciﬁcally , the scripts automate distinct testing activities or types of tests . Test Automation ( Real / Synthetic ) Data AM4 . 4 Test Automation ( Real / Synthetic ) Data is the generated data that are used by the automation scripts to test the system . Figure 9 : Operation - Related Assets Sub - tree . ( see Figure 9 with the sub - tree ) . The operations - related assets include Customer Data , Application Data , and Usage Data . Table 9 provides deﬁnitions of each asset : 4 . 3 . 6 . Environment - and - Infrastructure - Related Assets ( AM6 ) Environment - and - Infrastructure - Related Assets are all the assets used in the development environment or as an in - frastructure for development during software development ( see Figure 10 with the sub - tree ) . The environment - and - infrastructure - related assets include Deployment Infrastruc - ture , Tools , and Tools Pipelines . Table 10 presents environment - and - infrastructure - related assets deﬁnitions : 4 . 3 . 7 . Development - Process / Ways - of - Working - Related Assets ( AM7 ) Development - Process / Ways - of - Working - Related Assets include the following three types of assets ( see Figure 11 with the sub - tree and Table 11 with deﬁnitions of each asset ) : • Product - Management - Related Assets ( AM7 . 1 ) refer to the assets related to the management of the product or service . These assets come from diﬀerent stages , such as business justiﬁcation , planning , development , veriﬁcation , pricing , and product launching . We have identiﬁed the following assets belonging to this type : Product Management Documentation , Documentation About Release Procedure , Product Business Models , Product Roadmap , Product Scope , and Product Back - log . • Process - Management - Related Assets ( AM7 . 2 ) refer to the assets related to managing the development process , including internal rules , plans , descriptions , speciﬁca - tions , strategies , and standards . We have identiﬁed the following assets belonging to this type : Requirements Internal Standards , Architectural Internal Standards , Documentation Internal Rules / Speciﬁcations , Build Internal Standards , Coding Internal Standards / Spec - iﬁcations , Versioning Internal Rules / Speciﬁcations , Testing Internal Rules / Speciﬁcations / Plans / Strate - gies , Process Internal Descriptions , Process Data , and Documentation About Ways of Working . 4 . 3 . 8 . Organisation - Related Assets ( AM8 ) Organisation - Related Assets are all the assets that repre - sent organisations’ properties . The identiﬁed organisation - related assets include Organisational Structure , Organisa - tional Strategy , and Business Models ( see Figure 12 with the sub - tree and Table 12 with the deﬁnition of each asset ) : Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 16 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 9 Operations - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Customer Data AM5 Customer Data is data that is collected from the customers ( end users ) of the software product such as user feedback . Application Data AM5 Application Data is the data that is created , collected , used , and maintained while developing the software product such as system performance . Usage Data AM5 Usage Data is the data that is collected while the software product is operational such as the data related to the performance of the system . Figure 10 : Environment - and - Infrastructure - Related Assets Sub - tree . 4 . 4 . Summary of Validation Workshops In this section , we present the summary of the taxonomy validation workshop described in Section 3 . 4 . The participants were asked to select the assets from the taxonomy that they were not aware of or assets that were new to them . Collectively the participants selected 33 assets . These assets and the number of times they were chosen are presented in Table 13 . The participants were asked to select the assets that , based on their experience , should not be in the taxonomy . Overall , the participants selected 13 assets . Table 10 Environment - and - Infrastructure - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Deployment Infras - tructure AM6 Deployment Infrastructure are all the steps , activities , tools , process descriptions , and processes that facilitate the deployment of a software - intensive product . Tools AM6 Tools are any physical and virtual entities that are used for the development of a software product such as integrated development environments ( IDE ) , version control systems , spreadsheets applications , compilers , and debuggers . Tools Pipelines AM6 Tool Pipelines are automated processes and activities that facilitate and enable developers to reliably and eﬃciently compile , build , and deploy the software - intensive product . Figure 11 : Development - Process / Ways - of - Working - Related Assets Sub - tree . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 17 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 11 Development - Process / Ways - of - Working - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Product Manage - ment Documenta - tion AM7 . 1 Product Management Documentation is any documentation that is used to facilitate the management activities and processes during the product development . DocumentationAboutReleaseProcedure AM7 . 1 Documentation About Release Procedure is the description of the product release plan and the entities and activities associated with release . Product Business Models AM7 . 1 Product Business Models are the descriptions of how the organisation creates value for the customers with the software - intensive product . Product Roadmap AM7 . 1 Product Road Map is the abstract , high - level description of the evolution of the product during the development . Product Scope AM7 . 1 Product Scope is the description of the characteristics , functionality , and features of the software - intensive product . Product Backlog AM7 . 1 Product Backlog is any document that acts as a list where the features , change requests , bug ﬁxes , and other similar activities are stored , listed , and prioritised . Requirements In - ternal Standards AM7 . 2 Requirements Internal Standards are the speciﬁc rules that the company introduces and utilises internally for dealing with the requirements of the product . Architectural Inter - nal Standards AM7 . 2 Architectural Internal Standards are the speciﬁc rules that the development team introduces and utilises internally for designing , creating , and maintaining the architecture of the software - intensive product . DocumentationInternalRules / Speciﬁcations AM7 . 2 Documentation Internal Rules / Speciﬁcations are the speciﬁc rules that the development team introduces and utilises internally for creating and maintaining the documentation . Build Internal Standards AM7 . 2 Build Internal Standards are the speciﬁc rules that the development team introduces and utilises internally for the build activities . Coding In - ternal Stan - dards / Speciﬁcations AM7 . 2 Coding Internal Standards / Speciﬁcations are the rules that the development team intro - duces and utilises internally while developing the software - intensive product . Versioning Internal Rules / Speciﬁca - tions AM7 . 2 Versioning Internal Rules / Speciﬁcations are the rules that the development team introduces and utilises internally for version control during the development of software - intensive products . Testing Internal Rules / Speciﬁ - cations / Plans / Strategies AM7 . 2 Testing Internal Rules / Speciﬁcations / Plans / Strategies are the rules that the development team introduces and utilises internally for testing activities and procedures . Process Internal Descriptions AM7 . 2 Process Internal Descriptions are the descriptions of the procedures and activities that the development team introduce and utilise during the development of software - intensive products . Process Data AM7 . 2 Process Data is are the metrics and other information that concern the past and current status of the development process . Examples of such data are velocity , issues , bugs , backlog items , etc . DocumentationAboutWays of Working AM7 . 2 Documentation About Ways of Working are the description of work plans and working patterns , i . e . , how the organisation and the development team plan to create and release the software - intensive product . These assets and the number of times there were chosen are presented in Table 14 . In an open question , the participants were asked to write down the assets that were missing from the taxonomy . Git Comments , Code Review Data , Contract Documentation , and Communication Channels were mentioned in the question - naire . Finally , we asked the participants to prioritise the top ﬁve assets based on their experience . The answers to the last question are summarised in Table 15 . The utility of the taxonomy is demonstrated through the use of taxonomy by practitioners and classiﬁcation of existing knowledge [ 14 ] . The participants in the validation workshops were able to use the taxonomy to identify and classify assets . There are no existing taxonomies to compare the clas - siﬁcation schemes ; therefore , the taxonomy benchmarking was done with experts’ knowledge . The validation workshop participants did not make any suggestions regarding the struc - ture of the taxonomy . All participants agreed that the schema and categories ( i . e . , types of assets ) were adequate . 5 . Discussion This section discusses our ﬁndings in light of the research question , followed by the general lessons learned and impli - Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 18 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 12 : Organisation - Related Assets Sub - tree . Table 12 Organisation - Related Assets’ Deﬁnitions . Asset AM type Deﬁnition Organisation’sStructure AM8 Organisation’s Structure is the description of how the organisation directs the activities to achieve organisational goals . Organisation’sStrategy AM8 Organisation’s Strategy is the description of the plans that guide the organisation how to allocate its resources to support the development of the software - intensive product . Business Models AM8 Business Models are the descriptions of how the organisation creates value with the software - intensive product for the organisation . cations . 5 . 1 . Principal Findings 𝑅𝑄 ∶ What assets are managed by organisations during the inception , planning , development , evolution , and mainte - nance of software - intensive products or services ? In Section 4 . 3 we have presented a taxonomy of assets , which includes eight major types of assets AM1 to AM8 . Although the taxonomy is orthogonal by design ( i . e . , an asset or a type of asset can only be classiﬁed as a member of one type of assets ) , assets and types of assets are not isolated , i . e . , some assets and types of assets are interrelated . For example , architectural documentation is directly related to architecture since architectural documentation is a representation of the architecture of the system . During internal workshops and the taxonomy creation procedure , presented in Section 3 . 3 , we identiﬁed several meta - characteristics of assets . These meta - characteristics are : • Easier to contextualise : It is easier for the stakehold - ers to identify such assets in the software product con - text . For example , the data that the company acquires from the operation of the product , i . e . , Application Data , can be used as input to improve the product . • More tangible : Some assets are more prominent in industry and have been studied and discussed more deeply before , and therefore the asset is not alien any - more . For example , every software company , one way or another , has Code , in one form or another , or a Product Backlog with speciﬁc characteristics which is familiar to all people involved in the development of the software - intensive products or services . • Easier to measure : There are already existing metrics used to measure the state of such assets . For example , there are many metrics available to measure Source Code , such as LOC and Cyclomatic Complexity . • Used universally : The assets that are deﬁned in the same way across diﬀerent organisations and academia , meaning that they are not organisation - speciﬁc . For ex - ample , the software’s architecture ( Code Structure ) is a universal and inherent aspect of any software - intensive product or service . Out of the eight major types of assets , two types have been studied more extensively , namely Development - Related Assets and Product - Representation - Related Assets . These results are not new and have been highlighted in previous studies such as [ 5 ] , i . e . , prior studies on TD focus on source - code - related assets . These types of assets are easier to study due to the abundance of metrics and evaluation methods and , therefore , have been studied in many research articles . The reason behind this might be that : • The TD metaphor was initially introduced in the con - text of prevalent assets [ 5 ] . Therefore the researchers have spent more time investigating and exploring this speciﬁc phenomenon . For example , many papers in - vestigate a software product’s architecture , exploring diﬀerent ways of evaluating architecture using diﬀerent tools and measurements . • These types of assets are easier to contextualise in the TD metaphor , i . e . , identifying such assets and how they can be subject to incur debt . For example , the concept of code smells is easier to grasp since it is a more tangible artefact . It is simple to deﬁne how the software product can incur debt if the code does not align with certain “gold standards” ; i . e . , it is smelly . The rest of the types of assets have not received extensive time to be explored . The reason behind this might be that : Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 19 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Table 13 This table summarises the assets that the validation workshop participants were not aware of . The number represented the number of times the asset was selected by the participants . Asset Selected by 1 AM2 . 2 - Documentation Automation Scripts 4 2 AM7 . 1 - Product Management Documentation 3 3 AM1 . 2 - Quality Scenarios 2 4 AM3 . 1 - Build Plans 2 5 AM7 . 1 - Product Business Models 2 6 AM7 . 2 - Requirements Internal Standards 2 7 AM7 . 2 - Architectural Internal Standards 2 8 AM7 . 2 - Documentation Internal Rules / Speciﬁcations 2 9 AM7 . 2 - Build Internal Standards 2 10 AM7 . 2 - Versioning Internal Rules / Speciﬁcations 2 11 AM7 . 2 - Testing Internal Rules / Speciﬁcations / Plans / Strategies 2 12 AM7 . 2 - Process Internal Descriptions 2 13 AM7 . 2 - Process Data 2 14 AM1 . 1 Feature - Related Backlog Items 1 15 AM1 . 2 - User Experience Requirements 1 16 AM2 . 1 . 1 - Architectural Models 1 17 AM3 . 1 - Build Results 1 18 AM3 . 2 - Architecture ( Code Structure ) 1 19 AM3 . 2 - Libraries / External Libraries 1 20 AM3 . 2 - Web Services 1 21 AM3 . 3 - Versioning Comments 1 22 AM4 . 1 - Acceptance Tests 1 23 AM4 . 4 - Test Automation ( Real / Synthetic ) Data 1 24 AM5 - Usage Data 1 25 AM6 - Deployment Infrastructure 1 26 AM6 - Tools 1 27 AM7 . 1 - Documentation About Release Procedure 1 28 AM7 . 1 - Product Scope 1 29 AM7 . 1 - Product Backlog 1 30 AM7 . 2 - Coding Internal Standards / Speciﬁcations 1 31 AM7 . 2 - Documentation About Ways of Working 1 32 AM8 - Organisation’s Structure 1 33 AM8 - Organisation’s Strategy 1 • These types of assets were added later as “types of technical debt , ” such as Requirements Debt [ 23 , 51 ] and Process Debt [ 55 ] . The TD metaphor was not ini - tially used to deal with these types of assets [ 5 ] . These types of TD were introduced in an eﬀort to extend the metaphor and , therefore , have not been investigated thoroughly . • Unlike the other types ( i . e . , Development - Related and Product - Representation - Related Assets ) , it is harder to identify and / or deﬁne how and to what extent one can incur debt in software products . For example , in - curring Documentation Debt might diﬀer in diﬀerent companies and development teams . We have seen that the existing literature on TD classi - ﬁes various TD types and presents ontologies on the topic . These classiﬁcations have evolved since the introduction of the extended TD metaphor . We observe that the relevant asset categories we have extracted from industrial insights can be mapped to the classiﬁcations provided in TD literature . We observe that : • Some existing TD types and categories , such as code Table 14 This table summarises the assets that the validation workshop participants , based on their experience , deemed not needed to be included in the taxonomy . The number represented the number of times the asset was selected by the participants . Asset Selected by 1 AM1 . 2 - Quality Scenarios 1 2 AM3 . 1 - Build Plans 1 3 AM3 . 2 - Libraries / External Libraries 1 4 AM4 . 1 - Unit Tests 1 5 AM5 - Usage Data 1 6 AM7 . 1 - Product Management Documentation 1 7 AM7 . 2 - Requirements Internal Standards 1 8 AM7 . 2 - Architectural Internal Standards 1 9 AM7 . 2 - Documentation Internal Rules / Speciﬁcations 1 10 AM7 . 2 - Build Internal Standards 1 11 AM7 . 2 - Versioning Internal Rules / Speciﬁcations 1 12 AM7 . 2 - Testing Internal Rules / Speciﬁcations / Plans / Strategies 1 13 AM8 - Business Models 1 Table 15 This table summarises the assets that the validation workshop participants , based on their experience , selected as the top ﬁve assets . The number represented the number of times the asset was selected by the participants . Asset Selected by AM1 - Product Requirements Related Assets 4 AM1 . 1 - Functional Requirements Related Assets 1 AM1 . 3 - Product Modiﬁcation Related Assets 1 Use Cases 1 System Requirements 1 AM2 - Product Representation Related Assets 1 AM2 . 1 . 2 - Design Related Assets 2 Product Documentation 1 AM3 - Development Related Assets 3 AM3 . 2 - Code Related Assets 1 Source Code 1 Architecture 1 AM4 - Veriﬁcation and Validation Related Assets 2 AM4 . 1 - Functional Tests Related Assets 1 AM5 - Operation Related Assets 1 AM6 - Environment and Infrastructure Related Assets 3 AM7 - Development Process / Ways of Working Related Assets 3 AM7 . 1 - Product Management Related Assets 1 AM8 - Organisation Related Assets 1 that are well - deﬁned and well - recognised , ﬁt into simi - lar categories as in the presented taxonomy . • Some types of assets that are relevant to the indus - try have been understudied or not even studied at all . There is room for extending the research in such ar - eas [ 65 ] , e . g . , Operations - Related Assets ( AM5 ) and Environment - and - Infrastructure - Related Assets ( AM6 ) ( see Section 4 . 1 ) . • By creating the taxonomy , we highlight both the areas of interest and the gaps in research . Therefore , iden - tifying the areas in the software engineering body of knowledge that need to be investigated and the areas that need to evolve according to the current interest . Finally , our taxonomy of assets has an innate relation - ship with the TD research and the taxonomies , ontologies , Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 20 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services secondary , and tertiary studies in the TD topic . The taxon - omy of assets is created using empirical evidence from the industry and peer - reviewed articles . The taxonomy of as - sets provides actual tangible assets , whereas other studies mainly present areas where assets belong to . Furthermore , we present our results from the industrial perspective and how the TD metaphor is not enough to deal with assets’ problems , i . e . , TD’s main focus is sub - optimal solutions . In contrast , asset degradation goes beyond TD and considers diﬀerent types of degradation , including the ripple eﬀect and chain reactions of degradation that stems from the relations be - tween assets . From what we gathered , the industry does not care about TD in isolation . TD is a part of a bigger problem , i . e . , managing asset degradation when companies deal with software - intensive products or services [ 86 ] . And there is a need to consider a more holistic view to be able to address the asset degradation problem . 5 . 2 . Lessons Learned This section presents the lessons learned from running the industrial focus groups , synthesising the ﬁndings , and cre - ating the taxonomy . The importance of source - code - related assets is undeniable ( i . e . , assets in AM1 , AM2 , AM3 , and AM4 ) . However , we observe that the social and organisation aspect of the development is very important to the industry , through these aspects have not received as much attention in the TD area [ 5 , 65 ] , although the TD community has already identiﬁed them as a research area that deserves more atten - tion [ 55 ] . Taking a look at some statements from participants in the industrial focus groups highlights this fact . Examples of such statements are : • “There are many people who work in the same area in the same code base . Creates conﬂicts and slow releases . ” • “The problem is the delta operation , and the plan is at such a high level that it is impossible to understand . Too abstract . ” • “ . . . training the teams in what is considered best prac - tices improves team cohesion and eases collabora - tion . ” • “ [ There is ] no holistic platform strategy ( Conway’s law ) . ” The large - scale software projects developed in large or - ganisations are highly coupled with the social and organisa - tion aspect of work . The prevalence of assets related to the social and organisation aspect of development , e . g . , Business Models and Product Management Documentation , indicates the necessity to characterise and standardise such assets , how they are perceived , and how they are measured and moni - tored . While creating the taxonomy , we observed that assets do not exist in isolation , i . e . , they are entities with characteristics and properties that exist in a software development environ - ment . In the following , we will discuss the assets with similar characteristics and properties and assets that have implicit relations with each other . Assets that have similar characteristics and properties . For example , Unit Tests have similar characteristics and prop - erties as Source Code , i . e . , unit tests are code , and therefore , their value degradation can have analogous connotations . This means that there are possibilities to evaluate such as - sets’ degradation with similar characteristics and properties using similar metrics . Still , the degradation of one asset ( e . g . , Source Code ) might impact or even imply the degradation of the other asset ( e . g . , Unit Tests ) [ 1 ] . Therefore , such cou - pling and relations of the assets should be considered when analysing and managing such assets . Assets that have implicit relations between each other . Im - plicit relations between assets can arise from their inherent coupling properties . Diﬀerent assets related to certain as - pects of the product will have implicit relations that are not visible in the taxonomy as presented now . For example , Ar - chitectural Models and Architecture ( Code Structure ) have an inherent relationship . Architectural Models should be the representation of the architecture of the system , i . e . , the code structure . Therefore , similar to the previous point , the value degradation of the assets with such implicit relations can have analogous connotations . Their degradation might impact the degradation of the other related assets . For exam - ple , the degradation of any of the functional - requirements - related assets will eventually be reﬂected in the degradation of functional - test - related assets . 5 . 3 . Contributions The contribution of this work is the following : • Providing common terminology and taxonomy for as - sets that are utilised during software development and ; • Providing a mapping over the assets and the input used to create the taxonomy , i . e . , input from the literature and input from the industry One contribution of the taxonomy is that it is a guideline for future research by providing a map of diﬀerent types of assets . The map illustrates the diﬀerent areas deﬁned and studied and those that lack a shared understanding or are under - explored . Therefore , the taxonomy provides a sum - mary of the body of knowledge by linking empirical studies with industrial insights gathered through the industrial focus groups . Providing a common taxonomy and vocabulary : • Makes it easier for the diﬀerent communities to com - municate the knowledge . • Creates the opportunity to ﬁnd and build upon previous work . • Helps to identify the gaps by linking the empirical studies to the taxonomy . • Highlights potential areas of interest . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 21 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services • Makes it possible to build and add to the taxonomy ( new assets , details ) as knowledge is changed over time by researchers in the ﬁeld . • For practitioners , the evolving taxonomy can be used as a map to identify assets and the degradation that can impact other assets ( ripple and chain eﬀects that can spread the degradation to other assets like degra - dation of code causing degradation on test - code or vice - versa [ 1 ] ) , where such implicit degradation are not immediately detectable . Finally , it might help large organisations to deal with de - veloping software - intensive products or services that rely on external resources to help them achieve the business goals of their products . A major external contributor to new knowl - edge that can help practitioners in the industry is research ﬁndings . Therefore , understanding and applying the research ﬁndings is crucial for them . Having a taxonomy of assets summarising the state - of - the - art and state - of - practice body of knowledge for the assets utilised for developing software - intensive products or services is useful . Practitioners can refer to the taxonomy systematically built with the accumu - lated knowledge of academia and other practitioners to extract what they need in speciﬁc domains . We believe that our ﬁndings to collect and organise the diﬀerent assets and terminologies used to describe the assets will help practitioners be more aware of each type of asset and how they are managed in the context . 5 . 4 . Limitations and Threats to Validity In this section , we cover the limitations of our work and how they might aﬀect the results . The taxonomy is created based on the data extracted from the literature review , the ﬁeld study , and academic expert knowledge . We combined the inputs from the mentioned sources to create the taxon - omy . We designed the taxonomy to be extendable with new data identiﬁed by us and others in future studies as software engineering areas evolve ( See Section 3 . 3 ) . We encourage researchers and practitioners to consider the taxonomy within their organisation and identify the potential new types of as - sets and assets that can complement the asset management taxonomy’s representativeness . In the rest of this section , we cover the threats to construct , internal , and external validity as suggested by Runeson and Höst [ 66 ] and Runeson et al . [ 67 ] . Construct validity reﬂects the operational measurements and how the study represents what is being investigated . We are aware that the literature review is conducted in a limited area , i . e . , TD . We chose the TD topic for the reasons mentioned in Section 3 . 1 . We acknowledge that the performed snowballing and limiting the literature review to a speciﬁc topic might aﬀect the construct validity of this work since we could not cover all the topics and the articles related to those topics . We acknowledge that the participants of the focus groups do not include all the relevant stakeholders in organisations . We tried mitigating this threat by involving participants with diﬀerent roles and varying expertise from the companies . We are also aware that the participants’ statements in the focus groups can be interpreted diﬀerently by the researcher and the participants . We mitigate this threat in three ways . First , by sending the summary , with the transcription of their state - ments and our own notes , back to the participants , asking for their feedback ; second , by having two researchers code the raw data independently ; and third , by choosing to code the data using the in vivo coding method , the qualitative analysis prioritises the participants’ opinions . External validity refers to the generalisability of the results and whether the results of a particular study can hold in other cases . We acknowledge and understand that the results are not comprehensive and might not be generalisable . The created taxonomy is based on the collected data and is extendable . We have provided a systematic way of extending the taxon - omy , i . e . , the meta - model . Finally , other threats that can aﬀect the study’s external validity are the number of involved companies , the country where the companies ( investigated sites ) are located , i . e . , Sweden , and the involvement of all the roles in these organisations . Reliability refers to the extent that the data and analysis are dependent on the researchers . When conducting qualitative studies , the goal is to provide results that are consistent with the collected data [ 59 ] . We have tried to mitigate this threat , i . e . , consistency of the results . Firstly , by rigorously docu - menting and following the procedures of the focus groups to collect consistent data [ 85 ] . And secondly , by relying on consistency during the analysis , i . e . , blind labelling of the data by multiple researchers and peer reviewing the labels . 6 . Conclusions and Future Work This paper presents a taxonomy for classifying assets with inherent value for an organisation subject to degradation . These assets are used during the development of software - intensive products or services . The creation of the taxonomy of assets attempts to provide an overarching perspective on various assets for researchers and practitioners . The tax - onomy allows us to characterise and organise the body of knowledge by providing a common vocabulary of and for assets . Eight major types of assets are introduced in the tax - onomy : assets related to Product Requirements , Product Representation , Development , Veriﬁcation and Validation , Operations , Environment and Infrastructure , Development Process / Ways - of - Working , and Organisation . The taxonomy could be used for : • Identify the gaps in research by providing the points of interest from practitioners’ perspectives . • Identify the state - of - the - art research for individual as - sets and their properties for practitioners . • Communicate and spread the body of knowledge . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 22 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services The taxonomy helps draw out the assets with similar char - acteristics and implicit relations among them . Most of such similarities of characteristics , properties , and relations are not immediately visible when considering the assets from only one perspective . Taking a more abstract and high - level look at the assets involved in the development of software - intensive products or services can help facilitate the management ac - tivities and the overall development process . The dimensions provided by our taxonomy are not ex - haustive , nor are the assets we identiﬁed . Therefore , we intend to conduct further investigation to complement the taxonomy by incorporating the new knowledge . Furthermore , we would like to study the relationship between assets , how the degradation of an asset can have a ripple eﬀect and chain reactions , causing the degradation of other assets , and how the degradation impacts the development process . Lastly , we intend to investigate the individual properties of assets to identify the metrics used for measuring assets , their value , and their degradation ( or lack thereof ) . Besides , future and ongoing work will use the taxonomy as a base for further studies and exploration of assets , their characteristics , and the concepts of value , degradation and its diﬀerent types . A . Appendix : The Asset Management Taxonomy The full tree of the asset management taxonomy is pre - sented in Figure 13 . References [ 1 ] Alégroth , E . , Gonzalez - Huerta , J . , 2017 . Towards a Mapping of Software Technical Debt onto Testware , in : 2017 43rd Euromicro Conference on Software Engineering and Advanced Applications , Vienna , Austria . pp . 404 – 411 . URL : 10 . 1109 / SEAA . 2017 . 65 . [ 2 ] Alves , N . S . , Mendes , T . S . , de Mendonça , M . G . , Spínola , R . O . , Shull , F . , Seaman , C . , 2016 . Identiﬁcation and management of technical debt : A systematic mapping study . Information and Software Technology 70 , 100 – 121 . [ 3 ] Alves , N . S . , Ribeiro , L . F . , Caires , V . , Mendes , T . S . , Spínola , R . O . , 2014 . Towards an ontology of terms on technical debt , in : 2014 Sixth International Workshop on Managing Technical Debt , IEEE . pp . 1 – 7 . [ 4 ] Ampatzoglou , A . , Bibi , S . , Chatzigeorgiou , A . , Avgeriou , P . , Stamelos , I . , 2018 . Reusability index : A measure for assessing software assets reusability , in : International Conference on Software Reuse , Springer . pp . 43 – 58 . [ 5 ] Avgeriou , P . , Kruchten , P . , Ozkaya , I . , Seaman , C . , 2016 . Managing technical debt in software engineering ( dagstuhl seminar 16162 ) , in : Dagstuhl Reports , Schloss Dagstuhl - Leibniz - Zentrum fuer Informatik . [ 6 ] Badampudi , D . , Wohlin , C . , Petersen , K . , 2015 . Experiences from us - ing snowballing and database searches in systematic literature studies , in : Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering , pp . 1 – 10 . [ 7 ] Bass , L . , Clements , P . , Kazman , R . , 2003 . Software architecture in practice . Addison - Wesley Professional . [ 8 ] BenIdris , M . , 2020 . Investigate , identify and estimate the technical debt : a systematic mapping study . International Journal of Software Engineering and Applications ( IJSEA ) 9 . [ 9 ] Berner , S . , Weber , R . , Keller , R . K . , 2005 . Observations and lessons learned from automated testing , in : Proceedings . 27th International Conference on Software Engineering , 2005 . ICSE 2005 . , pp . 571 – 579 . doi : 10 . 1109 / ICSE . 2005 . 1553603 . [ 10 ] Besker , T . , Martini , A . , Bosch , J . , 2017 . Time to pay up : Technical debt from a software quality perspective . , in : CIbSE , pp . 235 – 248 . [ 11 ] Besker , T . , Martini , A . , Bosch , J . , 2018 . Managing architectural tech - nical debt : A uniﬁed model and systematic literature review . Journal of Systems and Software 135 , 1 – 16 . [ 12 ] Blum , B . I . , 1994 . A taxonomy of software development methods . Communications of the ACM 37 , 82 – 94 . [ 13 ] Bourque , P . , Fairley , R . E . , et al . , 2014 . Guide to the software engineer - ing body of knowledge ( SWEBOK ( R ) ) : Version 3 . 0 . IEEE Computer Society Press . [ 14 ] Britto , R . , Wohlin , C . , Mendes , E . , 2016 . An extended global software engineering taxonomy . Journal of Software Engineering Research and Development 4 , 1 – 24 . [ 15 ] Broughton , V . , 2015 . Essential classiﬁcation . Facet Publishing . [ 16 ] Brown , N . , Cai , Y . , Guo , Y . , Kazman , R . , Kim , M . , Kruchten , P . , Lim , E . , MacCormack , A . , Nord , R . , Ozkaya , I . , Sangwan , R . , Sea - man , C . , Sullivan , K . , Zazworka , N . , 2010a . Managing technical debt in software - reliant systems , in : Proceedings of the FSE / SDP Work - shop on Future of Software Engineering Research , Association for Computing Machinery , New York , NY , USA . p . 47 – 52 . URL : https : / / doi . org / 10 . 1145 / 1882362 . 1882373 , doi : 10 . 1145 / 1882362 . 1882373 . [ 17 ] Brown , N . , Cai , Y . , Guo , Y . , Kazman , R . , Kim , M . , Kruchten , P . , Lim , E . , MacCormack , A . , Nord , R . , Ozkaya , I . , et al . , 2010b . Managing technical debt in software - reliant systems , in : Proceedings of the FSE / SDP workshop on Future of software engineering research , pp . 47 – 52 . [ 18 ] Broy , M . , 2018 . A logical approach to systems engineering artifacts : semantic relationships and dependencies beyond traceability—from re - quirements to functional and architectural views . Software & Systems Modeling 17 , 365 – 393 . [ 19 ] Cicchetti , A . , Borg , M . , Sentilles , S . , Wnuk , K . , Carlson , J . , Pap - atheocharous , E . , 2016 . Towards software assets origin selection supported by a knowledge repository , in : 2016 1st International Work - shop on Decision Making in Software ARCHitecture ( MARCH ) , IEEE . pp . 22 – 29 . [ 20 ] Coghlan , D . , Brannick , T . , 2014 . Doing Action Research in Your Own Organization ( 4th ed . ) . London : Sage . [ 21 ] Constantopoulos , P . , Doerr , M . , 1995 . Component classiﬁcation in the software information base . Object - Oriented Software Composition , 177 . [ 22 ] Cunningham , W . , 1992 . The wycash portfolio management system . ACM SIGPLAN OOPS Messenger 4 , 29 – 30 . [ 23 ] Ernst , N . A . , 2012 . On the role of requirements in understanding and managing technical debt , in : 2012 Third International Workshop on Managing Technical Debt ( MTD ) , pp . 61 – 64 . doi : 10 . 1109 / MTD . 2012 . 6226002 . [ 24 ] Falessi , D . , Shaw , M . A . , Shull , F . , Mullen , K . , Keymind , M . S . , 2013 . Practical considerations , challenges , and requirements of tool - support for managing technical debt , in : 2013 4th International Workshop on Managing Technical Debt ( MTD ) , IEEE . pp . 16 – 19 . [ 25 ] Fernández - Sánchez , C . , Díaz , J . , Pérez , J . , Garbajosa , J . , 2014 . Guid - ing ﬂexibility investment in agile architecting , in : 2014 47th Hawaii International Conference on System Sciences , IEEE . pp . 4807 – 4816 . [ 26 ] Fernández - Sánchez , C . , Garbajosa , J . , Yagüe , A . , Perez , J . , 2017 . Identiﬁcationandanalysisoftheelementsrequiredtomanagetechnicaldebtbymeansofasystematicmappingstudy . Journal of Systems and Software 124 , 22 – 38 . [ 27 ] Fox , M . , Green , G . , Martin , P . , 2007 . Doing practitioner research . Sage . [ 28 ] Garriga , M . , 2017 . Towards a taxonomy of microservices architectures , in : International Conference on Software Engineering and Formal Methods , Springer . pp . 203 – 218 . [ 29 ] Glass , R . L . , Vessey , I . , 1995 . Contemporary application - domain tax - onomies . IEEE Software 12 , 63 – 76 . [ 30 ] Glass , R . L . , Vessey , I . , Ramesh , V . , 2002 . Research in software en - gineering : an analysis of the literature . Information and Software technology 44 , 491 – 506 . [ 31 ] Griﬃth , I . , Taﬀahi , H . , Izurieta , C . , Claudio , D . , 2014 . A simulation Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 23 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services study of practical methods for technical debt management in agile software development , in : Proceedings of the Winter Simulation Con - ference 2014 , IEEE . pp . 1014 – 1025 . [ 32 ] Grubb , P . , Takang , A . A . , 2003 . Software maintenance : concepts and practice . World Scientiﬁc . [ 33 ] Hamill , P . , 2004 . Unit test frameworks : tools for high - quality software development . " O’Reilly Media , Inc . " . [ 34 ] Idowu , S . , Strüber , D . , Berger , T . , 2022 . Asset management in machine learning : State - of - research and state - of - practice . ACM Comput . Surv . URL : https : / / doi . org / 10 . 1145 / 3543847 , doi : 10 . 1145 / 3543847 . [ 35 ] ISO / IEC / IEEE , 2010 . Systems and software engineering . ISO / IEC / IEEE 24765 : 2010 . Technical Report . ISO / IEC / IEEE . [ 36 ] Kernighan , B . W . , 1974 . ‘programming in c - a tutorial . Unpublished internal memorandum , Bell Laboratories . [ 37 ] Klotins , E . , Unterkalmsteiner , M . , Gorschek , T . , 2018 . Software - intensive product engineering in start - ups : a taxonomy . IEEE Software 35 , 44 – 52 . [ 38 ] Kroll , P . , Kruchten , P . , 2003 . The Rational Uniﬁed Process Made Easy : A Practitioner’s Guide to the RUP : A Practitioner’s Guide to the RUP . Addison - Wesley Professional . [ 39 ] Kruchten , P . , 2000 . The rational uniﬁed process 2nd edition : An introduction . [ 40 ] Kruchten , P . , 2004 . The rational uniﬁed process : an introduction . Addison - Wesley Professional . [ 41 ] Kruchten , P . , Nord , R . , Ozkaya , I . , 2019 . Managing Technical Debt : Reducing Friction in Software Development . Addison - Wesley Profes - sional . [ 42 ] Kruchten , P . , Nord , R . L . , Ozkaya , I . , 2012 . Technical debt : From metaphor to theory and practice . Ieee software 29 , 18 – 21 . [ 43 ] Kruchten , P . B . , 1995 . The 4 + 1 view model of architecture . IEEE software 12 , 42 – 50 . [ 44 ] Kujala , S . , Miron - Shatz , T . , 2013 . Emotions , experiences and us - ability in real - life mobile phone use , in : Proceedings of the SIGCHI Conference on Human Factors in Computing Systems , pp . 1061 – 1070 . [ 45 ] Kumar , A . , Nori , K . V . , Natarajan , S . , Lokku , D . S . , 2014 . Value matrix : Fromvaluetoqualityandarchitecture , in : Economics - DrivenSoftware Architecture . Elsevier , pp . 205 – 240 . [ 46 ] Kwasnik , B . H . , 1992 . The role of classiﬁcation structures in reﬂecting and building theory . Advances in Classiﬁcation Research Online 3 , 63 – 82 . [ 47 ] Law , E . L . C . , Van Schaik , P . , 2010 . Modelling user experience – an agenda for research and practice . Interacting with computers 22 , 313 – 322 . [ 48 ] Lehman , M . , 1996 . Laws of software evolution revisited , in : Euro - pean Workshop on Software Process Technology , Springer , Berlin , Heidelberg . pp . 108 – 124 . [ 49 ] Lehman , M . M . , 1979 . On understanding laws , evolution , and conser - vation in the large - program life cycle . Journal of Systems and Software 1 , 213 – 221 . [ 50 ] Lenarduzzi , V . , Besker , T . , Taibi , D . , Martini , A . , Arcelli Fontana , F . , 2021 . A systematic literature review on technical debt priori - tization : Strategies , processes , factors , and tools . Journal of Sys - tems and Software 171 , 110827 . URL : https : / / www . sciencedirect . com / science / article / pii / S016412122030220X , doi : https : / / doi . org / 10 . 1016 / j . jss . 2020 . 110827 . [ 51 ] Lenarduzzi , V . , Fucci , D . , 2019 . Towards a holistic deﬁnition of requirements debt , in : ACM / IEEE International Symposium on Em - pirical Software Engineering and Measurement , pp . 1 – 5 . doi : 10 . 1109 / ESEM . 2019 . 8870159 . [ 52 ] Letouzey , J . L . , Ilkiewicz , M . , 2012 . Managing technical debt with the sqale method . IEEE software 29 , 44 – 51 . [ 53 ] Li , Z . , Avgeriou , P . , Liang , P . , 2015 . A systematic mapping study on technical debt and its management . Journal of Systems and Software 101 , 193 – 220 . [ 54 ] von Linné , C . , 1735 . Systema naturae ; sive , Regna tria naturae : sys - tematice proposita per classes , ordines , genera & species . Haak . [ 55 ] Martini , A . , Stray , V . , Moe , N . B . , 2019 . Technical - , social - and process debt in large - scale agile : An exploratory case - study , in : Hoda , R . ( Ed . ) , Agile Processes in Software Engineering and Extreme Programming – Workshops , Springer International Publishing , Cham . pp . 112 – 119 . [ 56 ] Méndez , D . , Böhm , W . , Vogelsang , A . , Mund , J . , Broy , M . , Kuhrmann , M . , Weyer , T . , 2019 . Artefacts in software engineering : a fundamental positioning . Software & Systems Modeling 18 , 2777 – 2786 . [ 57 ] Méndez , D . , Penzenstadler , B . , Kuhrmann , M . , Broy , M . , 2010 . A meta model for artefact - orientation : fundamentals and lessons learned in requirements engineering , in : International Conference on Model Driven Engineering Languages and Systems , Springer . pp . 183 – 197 . [ 58 ] Méndez , D . , Wagner , S . , Kalinowski , M . , Felderer , M . , Mafra , P . , Vetro , A . , Conte , T . , Christiansson , M . T . , Greer , D . , Lassenius , C . , et al . , 2016 . Naming the pain in requirements engineering : contempo - rary problems , causes , and eﬀects in practice . [ 59 ] Merriam , S . B . , Tisdell , E . J . , 2015 . Qualitative research : A guide to design and implementation . John Wiley & Sons . [ 60 ] Miles , M . B . , Huberman , A . M . , Saldaña , J . , 2014 . Qualitative data analysis : A methods sourcebook . 3rd . [ 61 ] Müter , L . , Deoskar , T . , Mathijssen , M . , Brinkkemper , S . , Dalpiaz , F . , 2019 . Reﬁnement of user stories into backlog items : Linguistic structure and action verbs , in : International Working Conference on Requirements Engineering : Foundation for Software Quality , Springer . pp . 109 – 116 . [ 62 ] Northrop , L . , Clements , P . , Bachmann , F . , Bergey , J . , Chastek , G . , Cohen , S . , Donohoe , P . , Jones , L . , Krut , R . , Little , R . , et al . , 2007 . A framework for software product line practice , version 5 . 0 . SEI . – 2007 – http : / / www . sei . cmu . edu / productlines / index . html . [ 63 ] Power , K . , 2013 . Understanding the impact of technical debt on the capacity and velocity of teams and organizations : Viewing team and organization capacity as a portfolio of real options , in : 2013 4th International Workshop on Managing Technical Debt ( MTD ) , IEEE . pp . 28 – 31 . [ 64 ] Reussner , R . , Goedicke , M . , Hasselbring , W . , Vogel - Heuser , B . , Keim , J . , Märtin , L . , 2019 . Managed software evolution . Springer Nature . [ 65 ] Rios , N . , de Mendonça Neto , M . G . , Spínola , R . O . , 2018 . A tertiary studyontechnicaldebt : Types , managementstrategies , researchtrends , and base information for practitioners . Information and Software Technology 102 , 117 – 145 . [ 66 ] Runeson , P . , Höst , M . , 2009 . Guidelines for conducting and report - ing case study research in software engineering . Empirical software engineering 14 , 131 – 164 . [ 67 ] Runeson , P . , Host , M . , Rainer , A . , Regnell , B . , 2012 . Case study research in software engineering : Guidelines and examples . John Wiley & Sons . [ 68 ] Saher , N . , Baharom , F . , Ghazali , O . , 2017 . Requirement change taxonomy and categorization in agile software development , in : 2017 6thInternationalConferenceonElectricalEngineeringandInformatics ( ICEEI ) , IEEE . pp . 1 – 6 . [ 69 ] Saldaña , J . , 2015 . The coding manual for qualitative researchers . Sage . [ 70 ] Silva , M . , Oliveira , T . , Bastos , R . , 2009 . Software artifact metamodel , in : 2009 XXIII Brazilian Symposium on Software Engineering , pp . 176 – 186 . doi : 10 . 1109 / SBES . 2009 . 28 . [ 71 ] Šmite , D . , Wohlin , C . , Galvin , a , Z . , Prikladnicki , R . , 2014 . An empiri - cally based terminology and taxonomy for global software engineering . Empirical Software Engineering 19 , 105 – 153 . [ 72 ] Sommerville , I . , 2015 . Software engineering . 10th , in : Book Software Engineering . 10th , Series Software Engineering . Addison - Wesley . [ 73 ] Stol , K . J . , Fitzgerald , B . , 2018 . The abc of software engineering re - search . ACM Transactions on Software Engineering and Methodology 27 , 1 – 51 . doi : 10 . 1145 / 3241743 . [ 74 ] Stringer , E . T . , 2014 . Action Research ( 4th Edition ) . Thousand Oaks , CA : Sage . [ 75 ] Svahnberg , M . , Van Gurp , J . , Bosch , J . , 2005 . A taxonomy of vari - ability realization techniques . Software : Practice and experience 35 , 705 – 754 . [ 76 ] Taivalsaari , A . , Mikkonen , T . , 2018 . A taxonomy of iot client archi - tectures . IEEE software 35 , 83 – 88 . [ 77 ] Tilley , S . , Huang , S . , 2002 . Documenting software systems with views iii : towards a task - oriented classiﬁcation of program visualization Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 24 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services techniques , in : Proceedings of the 20th annual international conference on Computer documentation , pp . 226 – 233 . [ 78 ] Tom , E . , Aurum , A . , Vidgen , R . , 2012 . A consolidated understanding of technical debt , in : ECIS 2012 Proceedings . [ 79 ] Tom , E . , Aurum , A . , Vidgen , R . , 2013 . An exploration of technical debt . Journal of Systems and Software 86 , 1498 – 1516 . [ 80 ] Unterkalmsteiner , M . , Feldt , R . , Gorschek , T . , 2014 . A taxonomy for requirements engineering and software test alignment . ACM Transac - tions on Software Engineering and Methodology ( TOSEM ) 23 , 1 – 38 . [ 81 ] Usman , M . , Britto , R . , Börstler , J . , Mendes , E . , 2017 . Taxonomies in software engineering : A systematic mapping study and a revised taxonomy development method . Information and Software Technology 85 , 43 – 59 . [ 82 ] Wohlin , C . , 2014 . Guidelines for snowballing in systematic literature studies and a replication in software engineering , in : Proceedings of the 18th international conference on evaluation and assessment in software engineering , pp . 1 – 10 . [ 83 ] Wohlin , C . , Wnuk , K . , Smite , D . , Franke , U . , Badampudi , D . , Cic - chetti , A . , 2016 . Supporting strategic decision - making for selection of software assets , in : International conference of software business , Springer . pp . 1 – 15 . [ 84 ] Wolfram , K . , Martine , M . , Sudnik , P . , 2020 . Recognising the types of software assets and its impact on asset reuse , in : European Conference on Software Process Improvement , Springer . pp . 162 – 174 . [ 85 ] Yin , R . K . , 2009 . Robert k . yin . Case study research : Design and methods 4 . [ 86 ] Zabardast , E . , Frattini , J . , Gonzalez - Huerta , J . , Mendez , D . , Gorschek , T . , Wnuk , K . , 2022 . Assets in software engineering : What are they after all ? Journal of Systems and Software 193 , 111485 . URL : https : / / www . sciencedirect . com / science / article / pii / S0164121222001662 , doi : https : / / doi . org / 10 . 1016 / j . jss . 2022 . 111485 . [ 87 ] Zhao , Y . , Dong , J . , Peng , T . , 2009 . Ontologyclassiﬁcationforsemantic - web - based software engineering . IEEE Transactions on Services Com - puting 2 , 303 – 317 . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 25 of 25 A Taxonomy of Assets for the Development of Software - Intensive Products and Services Figure 13 : The asset management taxonomy . Zabardast , Gonzalez - Huerta , Gorschek , et al . : Preprint submitted to Elsevier Page 26 of 25