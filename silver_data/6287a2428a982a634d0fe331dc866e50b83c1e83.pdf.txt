Context - descriptive Prototypes and Their Application to Medicine Administration Claus Bossen Department of Information and Media Studies University of Aarhus 8200 Aarhus N , Denmark bossen @ imv . au . dk Jens Bæk Jørgensen Department of Computer Science University of Aarhus 8200Aarhus N , Denmark jbj @ daimi . au . dk ABSTRACT A context - descriptive prototype is an interactive graphical animation , driven by a formal , executable engine , implemented in some programming or modelling language . The two main properties of a context - descriptive prototype are : ( 1 ) it is an integrated description that describes system , work processes , and context of use ; ( 2 ) it is a formal description . Because of ( 1 ) , designers , including users , are provided with a means to investigate the system in the context of the envisioned work processes . Because of ( 2 ) , investigations into questions of formalisation and automation , not only of the system , but also of the work processes , can be made explicitly and become subject for discussions and further elaboration . We describe a concrete context - descriptive prototype of the hospital work process medicine administration and its support by a new pervasive system . We discuss findings from evaluation of the prototype in cooperation with nurses , and finally compare context - descriptive prototypes with other kinds of prototypes . ACM Classification D 2 . 2 Design tools and techniques ; H 1 . 2 User / Machine Systems Author Keywords Prototyping ; user - centered design ; pervasive computing . INTRODUCTION The background for this paper is a research project that investigates the opportunities of pervasive computing [ 24 ] for health care . The aim of the project is to enable an electronic patient’s record ( EPR ) , which is presently being deployed at hospitals to become mobile and more easily accessible . While one of the advantages of the EPR is the quick access to updated information about patients in multiple places at the same time , drawbacks are expected to arise , since access will be mainly through stationary PCs . The daily work of clinicians , however , is characterized by a high degree of mobility . The joint project between a hospital , a software firm and our research group has envisioned a pervasive health care system ( PHCS ) as a solution to these anticipated problems [ 1 , 5 ] . A series of 11 workshops with the participation of physicians , nurses , and computer scientists have been held over the last three years . Furthermore , an anthropologist ( one of the authors ) has conducted two months of fieldwork in a hospital department . In addition to these traditional methods , we have used context - descriptive prototypes as a way of involving users in the design process . Prototypes are often used in design of interactive systems . Usually , a prototype represents the system itself and other means like role - plays are applied in order to simulate or emulate the work processes to be supported and the context of use . A context - descriptive prototype integrates a prototype of a system with an explicit description of the work processes to be supported and the context of use . A context - descriptive prototype of the hospital work process medicine administration , covering the pouring and giving of medicine , and its proposed support by PHCS will be described . The prototype has been subject to investigations by nurses at evaluation workshops . We present four selected discussions that arose and argue for the ability of the context - descriptive prototype as an aid in design of PHCS . In a discussion of general advantages and in comparison with related approaches , we argue that context - descriptive prototypes may be applicable in design of interactive systems more generally , as an alternative to usual prototyping combined with role - plays . The structure of the paper is as follows . Firstly , we describe PHCS and the medicine administration work process . Secondly , we present the medicine administration contextdescriptive prototype . Thirdly , we report on the evaluation of the medicine administration context - descriptive prototype . Fourthly , we discuss a number of general advantages of context - descriptive prototypes . Fifthly , we compare the use of context - descriptive prototypes – context - descriptive prototyping – with other approaches for design of interactive systems in general and Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . DIS2004 , August 1 – 4 , 2004 , Cambridge , Massachusetts , USA . Copyright 2004 ACM 1 - 58113 - 787 - 7 / 04 / 0008 . . . $ 5 . 00 . pervasive systems like PHCS in particular . Finally , we draw the conclusions . PHCS AND MEDICINE ADMINISTRATION PHCS is a context - aware system [ 25 ] . PHCS is able to register and react upon certain changes of context . More specifically , nurses , patients , beds , medicine trays and other items are equipped with radio frequency identity ( RFID ) tags , enabling presence of such items to be detected automatically by context - aware computers , for example located by the medicine cabinet and by the patient beds . Recognising that it is difficult to interpret human intent and to develop systems that act on our behalf [ 3 , 11 ] PHCS is propositional in the sense that it makes qualified propositions or guesses . Context changes may result in automatic generation of buttons , which appear at the task - bar of computers , and users must explicitly accept a proposition by clicking a button – or implicitly ignore or reject it by not clicking . The presence of a nurse holding a medicine tray for patient P in front of the medicine cabinet is a context that triggers automatic generation of a button Medicine plan : P , because in many cases , the intention of the nurse is now to navigate to the medicine plan for P . If the nurse clicks the button , she is logged in and taken to P ' s medicine plan . It is , of course , impossible always to guess the intention of a user from a given context , and without the propositional property , automatic short - cutting could become a nuisance , because some guesses will inevitably be wrong [ 11 ] . PHCS is also built on the principle of non - intrusiveness , that is not interfering with or interrupting hospital work processes in an undesired way . Thus , when a nurse approaches a computer , it should react on her presence in such a way that a second nurse , who may currently be working on the computer , is not disturbed or interrupted . Propositionality and non - intrusiveness cooperate to ensure satisfaction of a basic user requirement : important hospital work processes have to be executed as conscious and active acts by responsible human personnel , not automatically by a computer . The work process in focus in this paper is medicine administration . It involves medicine plans as the one shown in Figure 1 ( with an interface that is simplified and translated into English for the purpose of this paper ) . The current context of PHCS is that nurse Jane Brown is engaged in pouring medicine for patient Bob Jones for the giving to take place at 12 noon . The medicine plan on the display shows which medicine have been prescribed ( indicated by “Pr” ) , poured ( “Po” ) , and given ( “G” ) at the current time . In this way , it can be seen that Sustac and Angettes have been poured for the 12 noon giving , but Cuprofen not yet . Moreover , the medicine tray of another patient , Tom Smith , stands close to the computer and has triggered a task - bar button that provides a short - cut to his medicine plan . Figure 1 . Outline of PHCS One scenario for medicine administration is the following : assume that nurse N wants to pour medicine into a medicine tray and give it to patient P . First , N goes to the room containing the medicine cabinet ( the medicine room ) . Here is a context - aware computer on which the buttons Login : N and Patient list : N appear on the task - bar when N approaches . Assume that the second button is clicked . Then , N is logged in and a list of those patients of which she is in charge is displayed on the computer . A medicine tray is associated with each patient . When N takes P ' s tray nearby the computer , the button Medicine plan : P will appear on the task - bar , and a click will make P ' s medicine plan appear on the display . N pours the prescribed medicine into the tray and acknowledges this in PHCS . When N leaves the medicine room , she is automatically logged out . N now takes P ' s medicine tray and goes to the ward where P lies in a bed , which is supplied with a context - aware computer . When N approaches , the buttons Login : N , Patient list : N , and Medicine plan : P will appear on the task - bar . If the last button is clicked , the medicine plan for P is displayed . Finally , N gives the medicine tray to P and acknowledges this in PHCS . When N leaves the bed area , she is automatically logged out again . MEDICINE ADMINISTRATION CONTEXT - DESCRIPTIVE PROTOTYPE The context - descriptive prototype is constructed in an iterative process involving three tiers : informal prose , a formal model , and a graphical animated representation . Together these three tiers constitute an executable use case [ 14 , 15 ] . Tier 1 consists of informal prose descriptions of the future system and work process . Typically this would be use cases or scenarios based on ethnographic field studies . Figure 2 . Part of Tier 2 : medicine administration CPN model Tier 2 is a formal , executable model , which is based on tier 1 : it integrates various tasks and sub - tasks ( a number of use cases and their variations ) . Tier 3 , the context - descriptive prototype itself , is an animation interface to tier 2 , which represents the work processes and their proposed computer support linked to and consistent with tier 2 , but using only graphics , concepts and terminology that are familiar to and understandable for the users . The creation of a contextual prototype by itself spurs communication between users ( or user representatives ) and systems developers . This is obviously so in the making of prose descriptions , but also the case in the making of tier 2 and 3 , since their construction will lead to the clarification of ambiguities and to new question . As a result , tiers may be rewritten or remodelled . Hence , building the context - descriptive prototype is a means to detect misunderstandings and misconceptions by confronting system developers with users ' understanding of new work processes and their proposed computer support , and vice versa . In the case presented here , creating the formal model of medicine administration caused the modellers to understand and make the relationship between the involved subtasks explicit . In this process a number of misconceptions were discovered . For example , the medicine administration work process is not as “regular” ' as the involved computer scientist initially thought . Pouring and giving of medicine cannot be seen as separate activities : it should be possible to interrupt giving of medicine , temporarily go to pouring of medicine , and eventually resume giving . Both giving and pouring involve the use of PHCS to find medicine plans and making acknowledgements , and the system should , e . g . , not insist that all fields on a screen pertaining to giving must be filled , before it is possible to go to a screen pertaining to pouring . The formal model used as execution engine at tier 2 is a Coloured Petri Net ( CPN ) [ 13 ] . The model consists of 11 modules . To give an impression of the model , an example of a module describing nurses’ approach to and exit from the medicine room is shown in Figure 2 . The construction of the model , the model itself , and the technical details of CPN are described more thoroughly in [ 14 , 15 ] . In the present paper , we report on evaluation of the context - descriptive prototype together with users . Both the context - descriptive prototype and the underlying CPN model were created and executed in the Design / CPN tool [ 6 ] ( after this project Design / CPN has been replaced by the newer CPN Tools ) . The context - descriptive prototype , shown in Figure 3 , is a graphical animation , which runs in three sections . The Department section shows the lay - out of a hospital department with wards , the medicine room , the so - called team room ( the nurses ' office ) , and two bath rooms . The Medicine room section shows the medicine cabinet , pill boxes , medicine trays , tables and the computer screen ( enlarged ) . Figure 3 . Tier 3 : medicine administration context - descriptive prototype The Ward section shows a patient , a bed , a table and the computer screen . Thus , the Department section gives an overview , and the other sections zoom in on areas of interest . The animation is interactive in the sense that the animation user is prompted to make choices . In Figure 3 , the animation shows a situation where nurse Jane Brown is in the medicine room , shown in the Department section and the Medicine room section , sufficiently close to produce two task - bar buttons at the computer . The animation user must make choices in order to drive the animation further . Specifically , by selecting one of the buttons to the right in the Medicine room section , the animation user can choose to take a tray or leave the medicine room . Also , the animation user can select one of the task - bar buttons at the computer . As examples , if the animation user pushes the Leave medicine cabinet button , the animation user sees Jane Brown walking away from the medicine cabinet and the removal of the task - bar buttons on the computer screen , which were generated because of Jane Brown ' s presence . If the animation user pushes the Take tray button and then selects Bob Jones ' medicine tray , it is moved close to the computer , and a medicine plan button for Bob Jones appears on the task - bar . If this button is pushed , the computer will display a screen like in Figure 1 . The difference between a usual prototype of a system and a context - descriptive prototype can be seen from Figure 1 : A usual prototype only explicitly represents the computer screens shown in the Medicine room section and the Ward section . Figure 3 adds a description of the work process and the context . EVALUATION OF MEDICINE ADMINISTRATION CONTEXT - DESCRIPTIVE PROTOTYPE The context - descriptive prototype was evaluated at three workshops . The participants had four types of different professional backgrounds : ( 1 ) Nurses from hospitals ; ( 2 ) nurses working as medical consultants in a software firm engaged in developing an EPR ; ( 3 ) an anthropologist ; ( 4 ) a computer scientist . The anthropologist and the computer scientist are the authors of this paper and were the organisers of the workshops . At each workshop , they gave an introduction explaining the purpose of context - descriptive prototyping . After that , the participating nurses were asked to interact with the prototype and were encouraged to speak up and discuss aloud in order to analyse and design medicine administration and its support by PHCS . The prototype was made available on a large interactive screen as shown in Figure 4 . All workshops were filmed on video , transcribed and analysed . In this section , we present four selected discussions , which arose at the workshops , and which we believe are important to raise in design of PHCS . Figure 4 . Two nurses discussing medicine administration while the computer scientist listens Automating Documentation of Giving of Medicine The first discussion arose around the possibility of over - ruling PHCS’s general design principles of propositionality and non - intrusiveness , and provide automatic execution of a service . More specifically , automating documentation of giving of medicine – and whether this can be done safely – was considered . Seeing an animated sequence in which a nurse walks to a ward and puts a medicine tray on a table triggered discussion of the possibility of letting PHCS automatically document for ‘given’ whenever the right nurse puts the right medicine tray at the bed of the right patient . Designing PHCS to support this properly requires a detailed examination of giving of medicine . With paper patient records , nurses sign for ‘given’ by putting their initials on the medicine plan . In many cases , ‘given’ indicates that a patient has actually taken the medicine . For tablets , however , it is not always the case that ‘given’ implies ‘taken’ . Some nurses do not make such a distinction at all ; they rely on the assumption that patients want to recover and take what is handed out . For other nurses , however , the distinction is essential . A nurse , who had worked four years in psychiatry , argued strongly for making a distinction between ‘handed - out’ and ‘taken’ for some psychiatric patients . With injections , ‘given’ indicates for certain that the injection has actually come into the body of the patient . Today , nurses of course just interpret the status ‘given’ according to the type of medicine in question and the particular patient of concern . With automatic documentation of giving by PHCS , however , more care must be exercised . Automatically assigning the status of ‘given’ would , for example , not be appropriate for medicine given by injection : co - presence of the right nurse , right medicine and right patient does not necessarily imply that the medicine has actually been given . It happens often that the nurse is interrupted and does not actually get to inject the medicine even though the syringe is just about to penetrate the patient’s skin . Hence , if automatic signing of giving by PHCS should work well , it requires the system to be designed with a more rigid categorisation and with support for more fine - grained categories than used today . At least , distinctions must be made between : ( 1 ) ‘handed - out’ and ‘given / taken’ ; ( 2 ) medicine given orally or by infusion ; ( 3 ) different kinds of medicine . A number of design decisions must be made : For example , one can choose to let all automatic signing have the status of ‘handed - out’ only and let ‘given / taken’ require explicit action by the nurses . An alternative is to automatically sign for ‘given / taken’ except in the cases where this would be inappropriate and where only ‘handed - out’ would apply . Here ‘given / taken’ would again require explicit action by the nurses . Preventing Giving of Wrong Medicine The second discussion was about using PHCS to help prevent giving of wrong medicine . Seeing various work patterns in the animation triggered a host of suggestions for the possibility of letting PHCS alleviate this problem . Nurses are responsible for ensuring that patients get the right medicine , but are at odds with a hectic workday including patients being moved to other wards quite often . To lessen the amount of work , medicine is at some hospital departments poured for one day ahead into trays , instead of pouring and giving for each specific time in question . Since the workday of nurses is divided into three shifts , the implication of such pouring is that the nurse who gives medicine to a patient may not be the same nurse who poured the medicine . Daily practices are different at different hospital departments , and some nurses strongly oppose giving medicine , which have been poured by another nurse . This assumes a strong confidence in the meticulousness of colleagues . If a patient gets wrong medicine , not only the nurse who has poured the medicine , but also the nurse who has given it , can be held legally responsible . Discussions came up about how PHCS could be designed to contribute to make nurses more confident that each patient is given the medicine that is prescribed precisely for him or her , no matter who has poured it . A specific suggestion was that if the tray of one patient was placed at another patient’s bed , PHCS should issue a warning , for example a warning light or sound . Another suggestion was related to the trolley some departments use to place poured medicine trays upon and which is divided into small sections – one for each patient . If one patient’s medicine tray was placed in the wrong section , a warning signal should similarly appear when the trolley was sufficiently close to a PHCS computer . Amongst other suggestions was automatic closure of the medicine cabinet whenever the nurse left it , and trays with a lid that would only unlock when close to the right patient . Sequencing Work : Prescribe – Pour – Give ? The third discussion shows how the understanding of the relationships between the subtasks involved in medicine administration was deepened . More specifically , the context - descriptive prototype gave rise to consideration of the sequencing of prescribing , pouring , and giving medicine ; and of the division of work between nurses and physicians . Such an understanding is essential to ensure that PHCS is designed so that medicine administration is well supported and not constrained in unacceptable ways . Reacting to the animation which showed a nurse go to the medicine room to pour and then proceed to a ward to give medicine , the nurses made clear that ‘prescribed’ , ‘poured’ and ‘given’ could not be regarded as ordered sequences without hindering their work . The context - descriptive prototype assumes that signing for ‘poured’ and ‘given’ is done separately in PHCS ; the animation shows that the former always takes place in the medicine room , while the latter always takes place at the wards . This assumption , however , turned out not to be true . There were discussions about whether a distinction between ‘poured’ and ‘given’ should be made at all , and about in which order . Some nurses argued that in some situations such a distinction was not appropriate . They often administered medicine after having been with the patient and seen the need for at certain medicine . They would then make certain that a prescription was made , pour the medicine , and give it to the patient . In such a situation , they would not first sign for ‘poured’ in the medicine room and then for ‘given’ at the ward . Instead , they would just sign for ‘given’ when taking the medicine at the cabinet and then give it to the patient . PHCS should be designed to make it possible to sign for ‘given’ in the sense of ‘poured - and - given’ in one single click ; it should not be necessary to find and update the patient’s medicine plan separately in the medicine room and at the ward . With respect to division of work between nurses and physicians , in the medicine plan presented in the context - descriptive prototype , medicine could have three states : prescribed , poured and given ( See Figure 1 ) . Initially , medicine was prescribed , since the considered scenario assumed that a physician had previously done so . The nurses participating in the workshops only had to sign for ‘poured’ when medicine had been put into the tray and ‘given’ whenever the tray had been given to the patient . As the responsibilities and authority of nurses and physicians are defined by law and in accordance with daily practice , this seemed to be a fair representation . It turned out , however , that reality was more complicated . While only physicians can prescribe medicine , nurses are actually allowed to make choices about medicine in certain situations . Sometimes nurses consult a physician over the phone to get permission to administer a medicine and give the medicine . The physician will later write the prescription . To support this situation , PHCS should be designed to allow that a nurse signs for ‘poured’ and ‘given’ without the medicine having had the status of ‘prescribed’ . Documenting Pouring of Medicine The fourth and final discussion is about PHCS’s support for documentation of pouring of medicine . At the hospital departments , there are usually 4 regular times of giving of medicine for a day ( 8am , 12pm , 5pm , and 10pm ) . Medicine is either poured for a single time of giving or for one day ahead . In the former case , nurses would like to be able to sign for all medicine at one of the regular times of giving in one click ( vertically in the medicine plan in Figure 1 ) . In the latter case , nurses either wanted to be able to sign for one medicine but for all regular times of giving in one click also ( horizontally in the medicine plan in Figure 1 ) , or , even more efficiently , to be able to sign for pouring all medicine for all 4 times of giving in one click . The latter however spurred a discussion about whether this was wise in case she was interrupted . If she had not signed for each medicine singularly and had to rush off , she might not remember how far she had got . Nor would she be able to hand over the task to a colleague . PHCS should be designed to provide different options of signing for pouring and giving of medicine : for one kind of medicine for one time of giving , for one kind of medicine across several times of giving , or for all relevant medicine for one time of giving . ADVANTAGES OF CONTEXT - DESCRIPTIVE PROTOTYPES The evaluation presented above is evidence that the medicine administration context - descriptive prototype can be used to trigger discussions between users and system developers in the design of PHCS . We believe that context - descriptive prototypes are applicable in the design of interactive systems more generally . We will sustain this conjecture in the remainder of this paper . We begin by discussing what we see as three general advantages of context - descriptive prototypes . In the next section , we use these advantages in a comparison of context - descriptive prototypes with related design approaches . Scenario Management A context - descriptive prototype is a means to manage scenarios . If the formal model is a CPN model , it can constitute a coherent description of a large number of scenarios . The description of medicine administration so far in this paper captures just a few combinations of the involved subtasks . The context - descriptive prototype incorporates many other combinations of prescribe - pour - give and their subtasks . For example , the prototype reflects that medicine may be poured for one or more patients , for only one round of giving , all four regular rounds of a 24 hours period , or for ad hoc giving ; a nurse may have to fetch trays left at the wards prior to pouring ; a nurse may approach the medicine cabinet without intending to pour medicine , but only to log into EPR or to check an already filled medicine tray ; two or more nurses may do medicine administration at the same time . To support the work process properly , the design of PHCS must take these scenarios and numerous others into account . The formal and coherent nature of CPN supports that dependencies and interrelations between various scenarios and subtasks are described and kept track with . This is also possible using text and graphics , but it is difficult , cumbersome , and error - prone . A formal model is an appropriate representation that ensures consistency between many crisscrossing interrelations . Precise and Unambiguous Specification A context - descriptive prototype , with an underlying formal model , constitutes a partial specification of the functionality of the system being considered . In this way , a context - descriptive prototype may be used as a precise and an unambiguous specification on which system developers can base their more detailed technical design and eventually their implementation . In the medicine administration context - descriptive prototype , as explained in detail [ 14 , 15 ] , the module of the CPN model shown in Figure 2 specifies the following examples of requirements : ( R1 ) When a nurse approaches the medicine cabinet , the medicine cabinet computer must add a login button and a patient list button for that nurse to the task - bar . ( R2 ) When a nurse leaves the medicine cabinet , if she is logged in , the medicine cabinet computer must blank off its display , remove the nurse ' s login button and patient list button from the task - bar , and log her out . ( R3 ) When a nurse selects her login button , she must be added as a user of EPR , and the login button must be removed from the task - bar of the computer . The context - descriptive prototype also enables investigations into the consequences of formalisation of work processes . Automatisation of drug administration has turned out to pose problems for the work of nurses and pharmacists [ 18 , 19 ] and more generally formalisation , which inevitably is part of systems development , has been discussed extensively [ 8 , 10 , 21 ] . Sometimes formalisation of work processes is desired , but in other cases , it is an unwanted side effect that hinders work rather than supporting it [ 4 , 10 ] . Related to this discussion is the question of when to automate [ 11 ] , as was exemplified in the evaluation of the medicine administration context - descriptive prototype . Easy and Massive User Involvement A context - descriptive prototype is persistent and repeatable . Therefore , it is easy to make it subject for investigation by many users distributed in time and space . As an example , the medicine administration context - descriptive prototype may be put on a laptop and brought to a group of nurses on one hospital today and to another group of nurses on another hospital tomorrow . Context - descriptive prototypes support massive user involvement : If interaction with the medicine administration context - descriptive prototype via the Internet is made possible , thousands of future users have the opportunity to conveniently experiment with new work processes and their proposed computer support , and to provide feedback . To facilitate such a massive user involvement , there should be a support system to store and retrieve feedback reports , and to help filter potentially relevant feedback from less relevant feedback . RELATED APPROACHES In this section , we put context - descriptive prototyping in perspective by comparing with more traditional approaches for design of interactive systems and with some of the recently proposed approaches for design of context - aware systems like PHCS . Role - plays With Paper Mock - ups Role - plays with paper mock - ups are another means to assess the interplay between a proposed system and the work processes to be supported . An advantage of paper mock - ups is that they are low - cost to create and that they may be easily modified during a role - play , for example , in order to immediately test if a new design proposal seems better . This flexibility is not fully shared with context - descriptive prototypes , which are more difficult and time - consuming to change . Role - plays with paper mock - ups allow enactment of system and work processes in an informal way . However , a system may seem to fit well with a work process when the interplay is enacted informally , but this may not be so when interaction has to comply with the formalisations made when the system is eventually implemented . The context - descriptive prototype makes consequences of formalisation of the system , the work processes , and their interplay explicit at an early stage . In this way , consequences can be subject for discussions and further elaboration , which can increase the probability that system and work processes work well together . The flexibility and low - cost of role - plays and paper mock - ups must be traded off with a lack of the three properties listed as advantages of context - descriptive prototypes in the previous section . Paper mock - ups do not in themselves represent use scenarios ; these scenarios are enacted in role - plays . Therefore , role - plays with paper mock - ups do not support scenario management in the same way as context - descriptive prototypes do . Moreover , paper mock - ups do not constitute a precise and unambiguous specification . Finally , role - plays with paper mock - ups have a transient and local nature and do not support easy and massive user involvement well . Role - plays With High - fidelity Prototypes Usual high - fidelity computer prototypes of systems share salient characteristics like being executable and interactive with context - descriptive prototypes . High - fidelity prototypes can be used to make the formalisation caused by the system itself explicit . Like role - plays with paper mock - ups , role - plays with high - fidelity prototypes do not support management of use scenarios well ( again , because such scenarios are not explicitly represented ) . Technology probes , however , seem a promising approach through which to bring prototypes into real - life settings [ 12 ] . High - fidelity prototypes are usually implemented in a programming language . Therefore , if they can be seen as a specification at all , it is only as a low - level technical specification of the system itself . In comparison , the CPN model , which underlies the medicine administration context - descriptive prototype , is a more abstract specification of both the system itself and of elements of the work process to be supported . In general , when the underlying execution engine for a context - descriptive prototype is created in a graphical modelling language like CPN , it may be possible to find users , who are able to participate in the formal modelling ( for example , a physician with some flair for abstract thinking and logics ) . This is obviously beneficial for the effeciency of the design process . It makes it possible to ensure that the formal model is a proper description of the considered work processes and their proposed computer support , before the context - descriptive prototype itself is built and subsequently made available to a broad selection of users . High - fidelity prototypes are persistent and repeatable like context - descriptive prototypes ; it is easy to make high - fidelity prototypes available for many users distributed in time and space . However , as mentioned earlier , role - plays have a local nature . Therefore role - plays with high - fidelity prototypes do not support massive user involvement in the same way as context - descriptive prototypes . In role - plays both with paper mock - ups and with high - fidelity prototypes , the kind of reflexivity spurred is different from the kind of reflexivity spurred by context - descriptive prototyping . With role - plays , users play out scenarios possibly using a prototype and hence situate themselves in context ( for example until a breakdown takes them out of context ) . They constantly go into and out of ( played ) context of use and make reflections in a setting that closely resembles a real work situation . Users interacting with a context - descriptive prototype similarly situate themselves in context , but in a more distanced way since they do not play - out , but interact with a representation of different scenarios on a screen . If internalised playing out of scenarios is a goal , this is a disadvantage of the context - descriptive prototype , whose advantage on the other hand is the overview provided and commented upon positively at the evaluation workshops . To which degree dis - and advantages balance out here , depends upon what kind of reflexiveness is desired . Approaches for Design of Context - Aware Systems While useful in general for design of interactive systems , we believe that context - descriptive prototypes are particularly valuable for design of context - aware , pervasive systems like PHCS . Analysis and description of the interplay between system , work processes to be supported , and context of use seem especially important in design of such systems , because the vision of pervasive computing is to interweave human practice and system functionality more tightly . In this section , we compare context - descriptive prototyping with some of the emerging approaches to design of context - aware systems . Liu and Khooshabeh [ 16 ] compare paper mock - ups and high - fidelity prototyping for ubiquitous ( pervasive ) computing environments . They give a number of arguments why paper mock - ups are not appropriate for design of pervasive systems : it is important to facilitate experiments on a large scale , over a long period of time , and with a high quality of data . High - fidelity prototypes support these issues much better than paper mock - ups . Below , we limit ourselves to discussion of high - fidelity prototypes . UBIWISE [ 2 ] is a simulator for ubiquitous computing . The approach has a number of similarities with context - descriptive prototyping . UBIWISE concentrates on computation and communication devices , but the authors speculate ( their own term ) that it may well be used to test scenarios and to be used . In comparison , context - descriptive prototyping strongly emphasises explicit representation of the work processes to be supported by a new system , and it has been evaluated together with users . UBIWISE is a three - dimensional model of the users’ environment in contrast to our two - dimensional model . Consolvo et al [ 7 ] address user study techniques in design and evaluation of context - aware systems . They apply a combination of traditional ethnographic - like fieldstudies and interviewing in the design phase , while the built system is evaluated real life . The approach does not as context - descriptive prototyping address how to enable early user evaluation of the envisioned system , nor , for example , issues of formalisation or scenario management . Dey et al’s conceptual framework and Context Toolkit [ 9 ] specify mainly software architectural aspect , and is criticised by Bellotti and Edwards for not taking human factors into account to a sufficient degree [ 3 ] . We see context - descriptive prototyping as a step toward this goal by being a means , which can increase the probability that a context - aware system is designed so it is intelligible and supports the accountability of users . Sohn and Dey’s iCAP [ 20 ] allows users to be actively involved in the technical construction of context - aware systems through an intuitive drag - and - drop drawing interface . In comparison , in context - descriptive prototyping , we see users like nurses as being active in experimenting with and providing feedback to context - descriptive prototypes , but we leave the technical development to professional system developers . Letting users actively create prototypes , even in a seemingly easy drag - and - drop drawing fashion , is not always possible because after all , it requires time and a technical expertise that may not be available ( the viability of the iCAP approach had not been evaluated with real users at the time of writing [ 20 ] ) . Bardram et al [ 1 ] propose video prototyping to be used in design of pervasive systems . While video prototyping allows for high - fidelity visualisation of work processes and use context , the media is not interactive . CONCLUSIONS We have introduced the concept of a context - descriptive prototype , whose two main properties are : ( 1 ) it is an integrated description of systems , work processes , and context of use ; ( 2 ) it is a formal description . Property ( 1 ) reflects the well - known fact that interactive systems should be designed together with the work processes to be supported ; not in isolation . In the case study presented in this paper , we have experienced that the explicit provision of the context of the system ( cf . Figure 3 ) has ameliorated one of the problems often cited when prototypes are discussed : that users tend to over - focus on small details rather than paying proper attention to important overall issues [ 17 , 22 ] . We believe that a context - descriptive prototype often yields a proper balance between overview and details . An example of an overall issue brought up by the medicine administration context - descriptive prototype is the sequencing of work . An example of a more detailed – but important – issue is the investigation of how PHCS can be designed to support automatic signing of giving of medicine . Property ( 2 ) ensures that a context - descriptive prototype can be used as basis for investigation of the consequences of formalisation . However , a context - descriptive prototype represents both system and work processes in a formal way and making a formal representation of work processes must be done with care . In the example of this paper , medicine administration is a multi - faceted human task , which involves many actions that are informal and which are not all amenable to be represented by a formal model , which is inherently simplified and an abstraction . The medicine administration context - descriptive prototype does not , for example , describe that a junior nurse may informally contact a more experienced colleague in order to get some advice about the pouring of medicine and how to properly read a medicine plan . The context - descriptive prototype deliberately only models the points of interaction between system and work process ; not the work process of medicine administration in all its diversity – the latter is neither intended , nor desired ( formalising what is inherently informal may easily misdirect discussions and lead to misunderstandings and misconceptions ) . We have described some general advantages of context - descriptive prototypes and discussed these in comparison with related approaches . An important additional issue to take into account in a comparison is cost - effectiveness . This is in general a difficult question to address [ 23 ] . It is not easy to characterise situations in which one or the other kind of prototyping is more appropriate from a cost - benefit point of view . We judge that the effort required to develop a context - descriptive prototype is comparable to the effort required to develop a usual high - fidelity prototype of a system and more than to create paper mock - ups . However , a more crucial issue is the person hours required to use the different kinds of prototypes versus the benefits obtained . To make an assessment of quantity against quality is extremely difficult . We plan to use context - descriptive prototyping in other system development projects to gain more experience with its qualities against other approaches and a more a reliable indication of its cost - effectiveness . ACKNOWLEDGEMENTS Our warm thanks to the nurses that participated in the evaluation workshops . REFERENCES 1 . Bardram , J . , et al . , Virtual Video Prototyping for Healthcare System , in Proc . of DIS´02 . 2002 , ACM : London . p . 167 - 77 . 2 . Barton , J . J . and V . Vijayaraghavan , UBIWISE , A Ubiquitous Wireless Infrastructure Simulation Environmen t . 2002 , HP Labs Stanford Uni . : Palo Alto . 3 . Bellotti , V . and K . Edwards , Intelligibility and Accountability : Human Considerations in Context Aware Systems . Journ . of HCI , 2001 . 16 ( 2 - 4 ) : p . 193 - 212 . 4 . Bowers , J . , G . Button , and W . Sharrock , Workflow from Within and Without , in Proc . of ECSCW ' 95 . 1995 , Kluwer : Dordrecht . p . 51 - 66 . 5 . Christensen , H . B . and J . E . Bardram , Supporting Human Activities - Exploring Activity - Centered Computing , in Proc . UBICOMP 2002 . 2002 : Springer , Göteborg . p . 107 - 16 . 6 . Christensen , S . , J . B . Jørgensen , and L . M . Kristensen , Design CPN - A Tool for Coloured Petri Nets , in TACAS . 1997 , Netherlands : Twente . p . 209 - 23 . 7 . Consolvo , S . , L . Arnstein , and B . Franza . User Study Techniques in the Design and Evaluation of a Ubicomp Environment . in Proc . of UBICOMP 2002 . 2002 . Malmö : Springer . p . 73 - 90 . 8 . CSCW , Commentaries and a Respons in the Suchman - Winograd Debate . Computer Supported Cooperative Work , 1995 . 3 ( 1 ) : p . 29 - 95 . 9 . Dey , A . K . , G . D . Abowd , and D . Salber , A Conceptual Framework and a Toolkit for Supporting the Rapid Prototyping of Context - Aware Applications . Journ . of HCI , 2001 . 16 : p . 97 - 166 . 10 . Dourish , P . , Process Description as Organisational Accounting Devices : , in Proc . of GROUP ' 01 . 2001 , ACM Press : New York . p . 52 - 60 . 11 . Horvitz , E . Principles of Mixed - Initiative User Interface . in Proc . of CHI ' 99 . 1999 . Pittsburgh , Pennsylvania : ACM . p . 159 - 66 . 12 . Hutchinson , H . , et al . , Technology Probes : Inspiring Design for and with Families , in Proc . of CHI ' 03 . 2003 : p . 17 - 24 . 13 . Jensen , K . , Coloured Petri Nets . Monographs in Theoretical Computer Science . An EATCS Series . Vol . 1 . 1992 : Springer . 14 . Jørgensen , J . B . and C . Bossen , Executable Use Cases : Requirements For a Pervasive Health Care System , IEEE Software , 2004 . 21 ( 2 ) : p . 34 - 41 . 15 . Jørgensen , J . B . and C . Bossen , Requirements Engineering for a Pervasive Health Care System , in Proc . of RE ' 03 . 2003 , IEEE : Monterey Bay . p . 55 - 64 . 16 . Liu , L . and P . Khooshabeh . Paper or Interactive ? A Study of Prototyping Techniques for Ubiquitous Computing Environments . in Proc . of CHI ' 03 . 2003 : ACM , USA . p . 1030 - 1 . 17 . Mackay , W . E . , A . V . Ratzer , and P . Janecek , Video Artifacts for Design : Bridging the Gap Between Abstraction and Detail , in Proc . of DIS ' 00 , 2000 . ACM , New York . p . 72 - 82 . 18 . Novek , J . , Hospital Pharmacy Automation : Collective Mobility or Collective Control ? Social Science & Medicine , 2000 . 51 : p . 491 - 503 . 19 . Novek , J . , IT , Gender , and Professional Practice . Science , Technology & Human Values , 2002 . 27 ( 3 ) : p . 379 - 403 . 20 . Sohn , T . Y . and A . K . Dey , iCAP : An Informal Tool for Interactive Prototyping of Context - Aware Applications , in Proc . of CHI ' 03 . 2003 , ACM : New York . p . 974 - 975 . 21 . Suchman , L . , Do categories have politics ? The language / action perspective reconsidered . Computer Supported Cooperative Work , 1994 . 2 ( 3 ) : p . 177 - 90 . 22 . Sutcliffe , A . , Scenario - based Requirements Engineering , in Proc . of RE ' 03 . 2003 , IEEE : Monterey Bay , California . p . 320 - 9 . 23 . Vredenburg , K . , et al . Design Methods : A survey of user - centered design practice . in Proc . of CHI ' 02 . 2002 . Minneapolis : ACM . p . 471 - 8 . 24 . Weiser , M . , The Computer for the 21st Century . Scientific American , 1991 . 265 ( 3 ) : p . 94 - 104 . 25 . Winograd , T . , Architectures for Context . Journ . of Human Computer Interaction , 2001 . 16 : p . 401 - 419 .