J . - M . Colom and M . Koutny ( Eds . ) : ICATPN 2001 , LNCS 2075 , pp . 71 – 80 , 2001 . © Springer - Verlag Berlin Heidelberg 2001 CPN / Tools : A Post - WIMP Interface for Editing and Simulating Coloured Petri Nets Michel Beaudouin - Lafon , Wendy E . Mackay , Peter Andersen , Paul Janecek , Mads Jensen , Michael Lassen , Kasper Lund , Kjeld Mortensen , Stephanie Munck , Anne Ratzer , Katrine Ravn , Søren Christensen , and Kurt Jensen Department of Computer Science University of Aarhus IT - Parken , Aabogade 34 8200 Aarhus N - Denmark cpn2000 @ daimi . au . dk Abstract . CPN / Tools is a major redesign of the popular Design / CPN tool from the University of Aarhus CPN group . The new interface is based on advanced , post - WIMP interaction techniques , including bi - manual interaction , toolglasses and marking menus and a new metaphor for managing the workspace . It chal - lenges traditional ideas about user interfaces , getting rid of pull - down menus , scrollbars , and even selection , while providing the same or greater functionality . It also uses the new and much faster CPN simulator and features incremental syntax checking of the nets . CPN / Tools requires an OpenGL graphics accelera - tor and will run on all major platforms . 1 Introduction Interaction techniques for desktop workstations have changed little since the creation of the Xerox Star in the early eighties . The vast majority of today’s interfaces are still based on a single mouse and keyboard to manipulate windows , icons , menus , dialog boxes , and to drag and drop objects on the screen . While these WIMP interfaces ( Windows , Icons , Menus , Pointing ) are now ubiquitous , they are also reaching their limits : as new applications become more powerful , the corresponding interfaces be - come more complex . Some users are at a breaking point and are less and less able to cope with new software releases [ 11 , 12 ] . New interaction techniques , such as toolglasses [ 4 ] and marking menus [ 10 ] , have been proposed to reduce this trade - off between power and ease - of - use . Yet such post - WIMP interaction techniques tend to be developed in isolation , as the focus of a par - ticular research project . As a result , they have not made it into commercial tools even though they have been shown to be significantly more efficient than traditional tech - niques . CPN / Tools is the first real - size application to combine such advanced interac - tion techniques into a consistent interface . The goal of this project is two - fold : first , it will provide the CPN community with a new , cutting - edge interface to edit and simu - late Coloured Petri Nets ; second , it paves the way to a new generation of post - WIMP applications that will take advantage of recent advances in graphical interfaces . 72 M . Beaudouin - Lafon et al . The CPN2000 Project CPN / Tools is a complete redesign of Design / CPN [ 9 ] , a graphical editor and simulator of Coloured Petri Nets ( CPNs ) developed at Meta Software ( USA ) and the University of Aarhus ( Denmark ) over the past 10 years and a remote descendant of PeTriPote [ 1 ] . Design / CPN has a standard WIMP interface , based on direct manipulation , menus and dialog boxes . It is in use by over 600 organizations around the world , in both academia and industry . Production CPNs can have over a thousand places , transitions and arcs , structured into a hundred modules or more . The CPN2000 project started in February 1999 . We used a highly participatory de - sign process , involving the users throughout the design process [ 14 , 9 ] . Version 1 of CPN / Tools was released in April 2000 and is in use by a small group of CPN design - ers . Version 2 will be released to a selected set of users outside the project . The CPN / Tools interface uses a combination of traditional , recent and novel inter - action techniques , e . g . tool palettes , toolglasses , and magnetic guidelines . Integrating these interaction techniques together in a consistent way in a single tool proved quite challenging . To our knowledge , this had never been done before . We wanted to design a system that would strike a better balance between power and simplicity than current WIMP interfaces . This led us to define three design principles : reification , polymor - phism and reuse [ 3 ] . Reification states that any entity in the interface should be acces - sible as a first - class object . Polymorphism states that commands should apply to as many different object types as possible . Reuse states that any output from the system and any input to the system should be reusable later , e . g . in the form of macros . The resulting interface has no menu bars , no pull - down menus , no scrollbars , no dialog boxes and no notion of selection . Instead , it uses a unique combination of floating palettes , toolglasses and hierarchical marking menus , a novel windowing model based on pages and binders , and several new interaction techniques such as magnetic guidelines to align objects and bi - manual interaction to manipulate objects . This interface supports the same or higher level of functionality as the previous De - sign / CPN application , yet we have empirical evidence [ 14 , 9 , 3 ] that it is both simpler to use and more powerful . The rest of this article presents the CPN / Tools interface and outlines the design process and implementation . The design process is further described in [ 14 , 9 , 3 ] and implementation details and performance data can be found in [ 2 ] . 2 The CPN / Tools Interface The CPN / Tools interface requires a traditional mouse and keyboard , plus a trackball ( or other locator ) for the non - dominant hand . For simplicity , we assume a right - handed user , but the mouse and trackball can be swapped for left - handed users . The keyboard is used only to input text and to navigate within and across text objects . The design of the bi - manual interaction follows Guiard’s Kinematic Chain theory [ 7 ] in which the left hand manipulates the context ( container objects such as windows and toolglasses ) while the right hand manipulates objects within that context . The excep - tion is direct interaction for zooming and resizing , which , according to Casalta et al .