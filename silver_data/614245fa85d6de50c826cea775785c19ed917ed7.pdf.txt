Cl - 4 90 Proceedings April1990 COLLABORATION AWARENESS IN SUPPORT OF COLLABORATION TRANSPARENCY = REQUIREMENTS FOR THE NEXT GENERATION OF SHARED WINDOW SYSTEMS J . Chris Lauwers and Keith A . Lantz Olivetti Research California 2882 Sand Hill Road Menlo Park , CA 94025 415 - 496 - 6200 , { lauwers , lantz } @ orc . olivetti . com ABSTRACT Shared window systems enable existing applications to be shared in the context of a real - time teleconference . The de - velopment and successful use of several such systems , al - beit within limited user communities , testifies to the merits of the basic idea . However , experience to date has suggested a number of areas that have not been adequately addressed , namely : spontaneous interactions , shared workspace man - agement , floor control , and annotation and telepointing . This paper focuses on the ramifications , for the software designer , of various user requirements in these areas . While the rec - ommendations that result are motivated by the desire to enable continued use of collaboration - transparent applica - tions , addressing them involves the development of systems software that is distinctly collaboration - aware . KEYWORDS : computer - supported cooperative work , shared window systems , desktop teleconferencing . 1 INTRODUCTION Numerous efforts are currently underway to develop com - puter support for group work . One technology that has commanded particular attention for over 20 years is computer - supported real - time teleconferencing , the ultimate goal of which is to integrate contemporary ( non - computer - supported ) audio / video teleconferencing technologies with workstation - based network computing environments . The resulting system would enable geographically distributed in - dividuals to collaborate , in real time , using multiple media ( in particular , text , graphics , facsimile , audio , and video ) and Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and ik date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish requires a fee and / or specific permission . 0 1990 ACM O - 89791 - 345 - O / 90 / 0004 - 0303 1 . 50 all available computer - based tools , from their respective of - fices . We refer to such a facility as desktop teleconferencing . The data conferencing aspect of desktop teleconferencing re - quires applications that support multi - user interfaces , so that , for example , two users can collaborate on the writing of a pa - per , the preparation of a budget , or the debugging of a pro - gram . In some cases , the most effective way of accomplish - ing this is to develop special - purpose ( collaboration - aware ) applications designed for simultaneous use by multiple users ( see , for example , [ 7 , 19 , 25 , 281 ) . In many cases , how - ever , it would be better if conferees could simply share ex - isting single - user ( collaboration - transparent ) applications . In contemporary window - based environments , this require - ment has led to the development of shared window systems . The purpose of a shared window system is to enable exist - ing ( window - based ) applications to be invoked from within a teleconference . Moreover , each user may participate in any number of teleconferences simultaneously - sharing differ - ent subsets of her applications ( and associated windows ) - as well as retain private access to other applications . These latter features distinguish shared window systems from terminal linking or shared - screen teleconferencing facili - ties , which require that the user share everything on her screen ( refer , in particular , to Engelbart’s seminal work on NLS [ 81 ) . One of the lirst shared window systems , VConf [ 181 , was de - veloped by the authors at Stanford University , based in part on ideas originally proposed by Satin and Greif at MIT [ 26 ] and by Forsdick at BBN [ 9 ] . We have since developed a new system , Dialogo , at Olivetti [ 5 ] . Numerous similar sys - tems have been developed elsewhere , including Rapport at AT & T Bell Labs [ l ] , SharedX at HP Labs [ 14 ] , VISEX at MCC [ 16 ] , Conference Desk at Olivetti - Milan [ 22 ] , and the latest incarnation of MMConf 1 at BBN [ 3 ] . The develop - ment and successful use of all of these systems , albeit within limited user communities , is ample testimony to the merits of the basic idea . ‘The original version of MIbfConf , which helped inspire VConf , was embedded in a specific application ( the Diamond multi - media editor ) and therefore did not constitute a shamd window system as defined herein . 303 CHI 90 Pmceedngs ADtil1 ! 390 However , experience to dale has also suggested a number of areas for improvement . Space limitations prohibit us from giving a comprehensive overview , so this paper focuses on the ramifications , for the software designer , of several per - ceived user requirements . The reader is referred to two com - panion papers [ 20 , 213 for more demiled discussion of our current opinions with respect to environmental factors - in particular , the inadequacies of the X Window System as a basis for a shared window system - and structural issues - specifically , the long - running debate over replicated archi - tectures . This paper , then , will address the following specific issues : l spontaneous interactions : How can a shared window system support spontaneous interactions ( as opposed to pre - planned meetings ) ? For example , how can confer - ence startup overhead be minimized ? How can private windows be brought into the conference ? How can late - comers be supported ? l workspace management : How can a shared window system provide better management of windows associ - ated with a conference ? For example , how can it ensure that instances of a shared windalw are kept consistent , or that the user , if she wishes , can easily distinguish pri - vate windows from shared windows or all windows as - sociated with a particular conference ? l floor control : How can a shared window system assist in “moderating” a conference ? For example , if anyone is to be permitted to “speak” at any time , how might the system assist in recovering from any conflicts that occur ? How might it adapt to increases in communi - cations delay or number of participants , where running open floor may not be acceptable ? l annotation and telepointing : How can a shared win - dow system support pointing at and annotation of shared objects ? l performance : Quite simply , the system must be re - sponsive ; in particular , the user should notice no dif - ference from running under the base window system . This is a requirement that spans all other issues and will be dealt with accordingly , that is , in the context of the discussions associated with each of the issues presented above . As suggested in the phrasing of the above issues , our dis - cussion focuses on how to achieve desired behaviors , where what is desired has been determined by evaluation of our own informal observations and the observations , both anec - dotal and experimental , of other research groups ( e . g . [ 6 , 12 , 17 , 24 , 27 ] ) . The discussion is further biased by the intent to limit the impact on existing applications , that is , to continue to support collaboration - transparent applications . An inter - esting result , however , is that the new “systems software” we are calling for is distinctly collaboration - aware . 304 Keith Chris Figure 1 : Abstract architecture of a shared window system . Ovals should be interpreted simply as modules , which may or may not be implemented as separate processes or reside in separate address spaces . The body of the paper is organized as follows . In Sec - tion 2 we present a brief overview of shared window sys - tems . This is followed , in order , b ! y a discussion of the is - sues noted above , specifically , support for spontaneous in - teractions ( Section 3 ) , shared workspace management ( Sec - tion 4 ) , floor control ( Section 5 ) , and annotation and tele - pointing ( Section 6 ) . Section 7 concludes with a summary of our recommendations for designers of the next generation of shared window systems . 2 SHARED WINDOW SYSTEMS : AN OVERVIEW At the highest level of abstraction , a shared window system consists of a conference agent that is interposed between up - plications and the window system ( s : ee Figure 1 ) . The prin - cipal function of the conference agent is to multiplex out - put streams from applications onto the participants’ window systems and demultiplex the input streams from all partic - ipants into a single input stream directed at the appropriate application ( s ) . This activity both creates a shared workspace wherein each participant sees the same view of every win - dow associated with the shared applications - although the layout of those windows may vary ( see Section 4 ) - - and per - mits each participant to interact , through their local input de - vices , with shared applications . * In addition to I / O multiplexing , the conference agent is also responsible for : * We refer to applications running under a shared window system as “shared applications” even though they have not been modified in any way . Similarly , we refer to the windows associatl : d with those applications as “shared windows . ” CHI 90 Pmceedrws 0 Boor control : Processing user input with respect to whether or not that user is currently authorized to gen - erate input for a particular application or applications . Architecturally , one can think of a floor control module being invoked on every user input . A companion set of mechanisms is needed for changing the floor . l workspace management : Determines the manner in which shared windows are “grouped” within the shared workspace , including window layout . Architecturally , one can think of a workspace management module sim - ilar to contemporary window managers . l dynamic reconfiguration : Handling latecomers and the departure of participants prior to termination of the conference . Architecturally , one can think of a recon - figuration module being invoked whenever someone joins or leaves a conference . l secretarial functions : These include conference ini - tialization and termination , pre - staging , and logging . Architecturally , one can think of these functions as be - ing provided by a conference secretary module . These functions form the core of discussion in the remainder of the paper . Implementation Strategies The interposition of conference agent functionality can be achieved in a variety of ways , depending in part on the un - derlying architecture of both the window system and the op - erating system . For example , in the context of a server - based window system such as X or NeWS the conference agent can itselfbe implemented as a server ( or collection of servers ) ; it appears to be an application from the viewpoint of the win - dow system and a window system from the viewpoint of the applications . The alternative is to modify either the window system library linked with applications or the window sys - tem itself . Indeed , in the case of a kernel - based window sys - tem such as SunWindows , at least some of the conference agent functionality must be implemented in the run - time li - braries ( see , for example , [ 3 ] ) . A related decision is whether or not to replicate applica - tions . Figure 2 ( a ) presents the canonical centralized archi - tecture , wherein there is one instance of each application and one instance of the conference agent . Figure 2 ( b ) , on the other hand , presents the fully replicated architecture , wherein there are as many instances ( or replicas ) of each ap - plication and the conference agent as there are participants in the conference . Application replication offers two key advantages over the centralized architecNe : performance and versatility . On the other hand , it requires that all replicas of the application be synchronized at all times . Consequently , of the shared win - dow systems developed to date , only VConf , Dialogo , and ( 4 Co > Figure 2 : ( a ) Canonical centralized architecture . ( b ) Canoni - cal fully replicated architecture , In both cases , circles should be interpreted as module instances - typically processes in separate address spaces . The use of two subscripts for appli - cations in the replicated architecture indicates that the appli - cations are replicated , with the lirst subscript identifying the application and the second the replica of that application . MMConf have adopted a replicated architecture . s We will discuss some of the ramilications of application replication in this paper ; further details may be found in [ 2 , 3 , 18 , 203 . 3 SUPPORTING SPONTANEOUS INTERACTIONS Not all group interactions occur in the context of scheduled meetings . In fact , many interactions between collaborators are spontaneous and unplanned . This means that users can not always predict who they will be interacting with , nor can they anticipate which windows need to be shared . Forexam - ple , consider debugging : “Something went wrong . It’s here on my screen now . I’d like you to take a look at it and help me debug it . ” Shared window systems need to accommodate these types 3 The Colabproject at XeroxPAFK also adopted a replicated architecture fortheir collaboration - aware tools [ lo , 283 . 305 Cl - II 90 Proceedirlgs Aplill990 of interactions . This requires that initiating a conference be a light - weight operation , so as not to ‘be a deterrent to spon - taneity . In addition , it should be possible for latecomers to join an ongoing conference , Moreover , a shared window system should allow users to pick up private windows and move them onto a different . display ( to allow co - workers to work on them asynchronously ) or to lbring private windows into a shared workspace ( for synchrolnous collaboration ) . 4 In order to share or transfer privalte windows , it must be possible to dynamically interpose a conference agent in the existing communication link between the applica - tion and the window system . This allows the conference agent to intercept and translate subsequent application re - quests and redirect them to different displays . Although more recent message - based operating systems support facil - ities for dynamic reconfiguration of communication links - Accent [ 23 ] , for example , used such a scheme to interpose a debugger between applications and the user - they are not commonly available in commercial Unix systems . ‘If the sys - tem does not support such dynamic reconfiguration , users must create all private windows in the context of a confer - ence agent if they want to share or move them later . Once the presence of a conference agent is assumed , the problem of moving private windows reduces to the problem of bring - ing latecomers into an ongoing conference . The remainder of this section , therefore , will focus on dealing with latecom - ers . In order to bring a latecomer into a shared session , shared state needs to be replicated on the newcomer’s workstation . In a shared window system , shared state is distributed be - tween the applications , the conference agent , and the win - dow server . Which of these entities need to be brought up to date depends on the system architecture . The centralized ar - chitecture only requires the transfer of window server state . As a result of this state transfer , replicas of all shared win - dows will be created on the newcomer’s display . The repli - cated architecture , on the other hand , also requires the cre - ation of new replicas of the applications and the transfer of application state into these new replicas . Three basic mechanisms are available for transferring sys - tem state : 1 . The system can replay to the new replica ( application , conference agent , or window server , depending on the architecture ) the history of events that led to the current Sti % tCS 2 . The system can upload the shared state from an existing replica and download it directly into the new replica . 40urdiscussion is focusedonmakingthe state S’ associated witbpersm B consistent with the state S associated with person A . It ignores the utility of and mechanisms required for B to see everything that happened to reach state S in the first place . sThis is analogous to log - based recovery in database management systems . 306 3 . Process migration techniques ‘can be applied to copy rather than move an existing replica . Histories Replaying event histories is the most straightforward ap - proach for bringing latecomers up to date . It works well with both the centralized and the replicated architectures . In a replica & d environment , the input event stream to ap - plications is logged and replayed to newly created applica - tion replicas . Window system state is updated automatically by the applications in response to the input events . In a centralized environment , on the other hand , output requests are logged and replayed to the window system on the late - comer’s workstation . Although this approach is straightforward , it suffers from three significant drawbacks . First , it simply may not be pos - sible to replay the log accurately . Itf any event depends on state external to the window system , and that state differs at the time of the replay from the time the event originally took place , then replay may lead to different results . Sec - ond , histories may require a lot of disk space , especially in a centralized environment , since output traffic is typically an order of magnitude larger than input traffic . Third , replay - ing the log of events is a time consuming process that could disrupt the ongoing conference . Direct State Transfer A faster way to bring latecomers up to date consists of di - rectly downloading the entire shared state vector into new replicas . This requires , however , thlat the entity being repli - cated support mechanisms for uploading and downloading state information . Unfortunately , m , ost existing applications do not support such mechanisms , set this approach is not fea - sible in a tiplicated environment ( where application state needs to be replicated ) . In a centralized environment , where application state need not be replicated , this approach requires window system state to be transferred from one window server into another . Ideally , the relevant state would be represented in a single state vector and expressed in a device - independent way , so that the shared state vector could simply be passed along to the appropriate window server without interpretation by the conference agent . Regrettably , existing window servers nei - ther store state in an appropriate ma . nner nor provide the req - uisite query and set facilities . Therefore , to implement direct state transfer with existing window systems , conference agems need to maintain redun - dant copies of shared window system state so that a late - comer can be brought up to date by projecting the conference agent’s state vector onto the latecomer’s window serverp @ Jhis is the approach taken by SharedX . In fact , SharedX is a complete X 11 server implemented on top of itself : the low - level graphics routines aTe implemented using Xl 1 library routines . ShlaredX , therefore , is referred to as a nested server . CHI 90 l’mceedngs April 1990 This approach , however , is troublesome for performance and efficiency reasons . Process Migration Since direct state transfer is not possible in a replicated envi - ronment , an alternative approach consists of extending pro - cess migration facilities to allow shared applications to be duplicated on latecomers’ workstation . Such facilities , how - ever , are extremely complex . The main difficulties arise from the need to rebind connections to external services ( like connections to the conference agent , file descriptors , etc . ) to corresponding services on the workstation of the new replica . Moreover , shared files need to be replicated on the new workstation . Although most of these problems have been addressed in the context of message - based distributed operating systems ( see , for example , [ 29 , 30 ] ) , it is unlikely that these facilities will become widespread in the near fu - ture . Summary In summary , this discussion suggests two clear guidelines for supporting spontaneous interactions in the near term : 1 . It seems unlikely that without additional operating sys - tem support , the replicated architecture can provide light - weight mechanisms for supporting spontaneous interactions . When there is a pressing need to support such interactions , a more centralized architecture - possibly a hybrid architecture as suggested in [ lS ] - needs to be adopted . Specifically , applications intro - duced into an ongoing conference should be grafted onto an existing instance of a conference agent , and latecomers should share an existing instance of a con - ference agent and each application . 2 . Existing window systems do not provide adequate mechanisms for uploading and downloading the state vector associated with client connections , As a result , too much window system state and functionality must be duplicated in the conference agent , This is inefficient and expensive . Steps should be taken to organize state in a more effective manner and to provide associated set and query operations , In the long term , we believe that even these steps are in - adequate , indeed , that providing the most effective support for spontaneous interactions requires the implementation of conference agent functionality within the base window sys - tem . 4 WORKSPACE MANAGEMENT One architectural component of shared window systems that has received relatively little attention so far is workspace management . Workspace managers are very much like win - dow managers , since they control the layout and size of a user’s windows . Traditional window managers , how - ever , are inadequate in a shared window system environment where both shared and private windows need to be managed . As demonstrated la & r in this section , achieving acceptable behavior typically requires that all instances of a shared win - dow have identical size . Workspace managers , therefore , need to coordinate between themselves to guarantee consis - tent sizes of shared windows . Moreover , additional func - tionality may be necessary that does not apply to traditional single - user environments and that cannot be provided by ex - isting window managers . For example , a shared workspace manager should allow conferees to distinguish : l shared windows from private windows , l all windows associated with a given conference , and l which of several conferences a window is associated with . These facilities can consist of simple visual cues to identify shared windows ( for example , use different colors for win - dow borders ) , or mechanisms for bringing all windows of a session to the top . Alternatively , shared workspace man - agers can provide mechanisms to organize shared windows into shared workspaces , separate from each user’s private workspace . Very few shared window systems built to date have ad - dressed these issues . In SharedX , for example , shared workspace management functionality is subsumed by each participant’s private window manager . Since existing win - dow managers don’t distinguish between shared and private windows , collaborators can freely mix shared and private windows on their display . No mechanisms are provided to identify shared windows . Moreover , collaborators can move and resize shared windows independently of other partici - pants . Unfortunately , rather awkward displays may result when users privately resize shared windows . The Emacs text editor , for example , keeps a command - input line at the bot - tom of its window . This line ( as well as part of the displayed text ) may be clipped if a collaborator privately reduces the size of her Emacs window . In a replicated environment , the use of private window man - agers can lead not , only to appearance problems , but to in - correct operation due toinconsistencies in application state . Consider again the Emacs text editor . Emacs keeps track of the size of the window that it displays its buffers in . This information is used , for example , to determine how many lines to scroll when going to the next page in the document . If different participants use different sizes for shared Emacs windows , they lose mutualconsistency of their displays after scrolling one page . MMConf solves this problem by broad - casting notifications of changes in window size to all appli - cation peers . A radical way to distinguish private from shared windows is to employ grouping facilities similar to Rooms 1151 . In this 307 CHI 90 Proceedings & il1990 approach , a separate workspace is created for each shared session - in Xl 1 , for example , by creating a pseudo - root window . All shared windows are organized within this workspace . Both Dialog0 and Rapport currently take this conference room approach . The question here is to what extent does the system allow users to lay out windows in the shared1 workspace indepen - dently from other participants , , Dialolgo implements strict WYSIWIS ( What You See Is What I See 1271 ) : all par - ticipants have identical layouus of the shared workspace . Considerable opinion supports this alpproach : WYSIWIS workspaces can make a conference more effective by pro - viding a common frame of reference to conference partic - ipants . This is important , for example , when trying to use telepointing facilities ( like those described in Section 6 ) that span the entire shared workspace . Strict WYSIWIS in Dialog0 is guaranteed by delegating con - trol over the shared workspace to a separate window man - ager that runs as a shared application within the workspace . In theory , this approach solves the consistency and presen - tation problems that arise when private window managers control shared windows , In practice , however , resolving all the synchronization problems involved has proven exceed - ingly difficult 1203 . Moreover , the WYSIWIS , approach has one important limitation from a user’s point of view : As a re - sult of sharing a single conference window manager , concur - rent operation within the shared work , space is not possible ; that is , it is impossible for different collaborators to work on different conference applications at the same time . This is a direct consequence of the fact that there exists only one inpur focus per conference ( maintained by the conference window manager and shared by all collaborators ) . This limitation is not present in systems like SharedX , MMConf and Confer - ence Desk , which do not adopt the WYSIWIS approach , but those systems in turn do not provide the visual advantages of a conference room metaphor . It appears , then , that none of the approaches implemented to date are sufficient and that addressing their limitations re - quires the development of new collaboration - aware window managers . This would allow each window manager to co - ordinate with other window managers in its conference to guarantee consistent sizing of shared windows . Moreover , it would alIow window managers to provide visual cues to dis - tinguish shared from private windows , and to perform stack - ingoperations on all windows in the same session . Finally , in the context of conference rooms , collaboration - aware win - dow managers could better support concurrent activities - for example , by providing a separate input focus for each participant and a separate conference floor for each confer - ence application . Thus , we again see a need to introduce conferencing func - tionality into the base window system , in this case the win - dow manager . Unfortunately , existing standards for com - munication between appbcations and window managers do not support the necessary mechanisms . Changing these stan - 308 dards to accommodate window sharing may require existing applications to be changed also in order to conform to the new standards . 5 FLOOR C : ONTROL One of the Iissues raised in the preceding discussion of workspace management was that of permitting different par - ticipants to interact with different shared applications at the same time . This is one manifestation of the general prob - lem offloor cmontrol : who can communicate , with whom ( or what ) , when , and how ? In a true muhi - media conference , it is possible to distinguish a separate ifloor for each medium . In this section , however , we address audio and video only in the context o . f how they can assist us in managing access to the shared workspace . Floor control is an extremely contentious area of debate , with policies ranging from permitting only one person at a time to control the entire shared workspace , to running “open floor” with anyone generating input at any time to any window . These policies can be characterized along three dimensions : 1 . the number of floors - one f6r the entire conference , one per shared application , or one per window ; 2 . the number of people who can “hold” a floor at the same time ; and 3 . how the floor is passed ( or handed off ) between floor holders . This includes the potential use of auxiliary communication channels , speci6cally audio . The arguments over the first two dimensions amount to argu - ments over the amount of concurrent activity to be permitted . Separate floors correspond to sub - conferences and number of holders per floor corresponds to how the meeting is being run ( “floor control” in its most restricted sense ) . Concur - rency was touched on briefly in Section 4 . The reader is left to imagine further arguments for or against concurrency , us - ing his or her own experience in meetings ( face - to - face or teleconferences ) as a guide . With respect to how the floor is passed , this is where tech - nology can clearly be used to improve upon traditional so - cial protocols . For example , the system can maintain lists of people who have asked for the floor , and can optionally introduce hysteresis by selecting from this list at random rather than from the head of the queue . Or , when the ba - sic algorithm is preemptive - the requester gets the floor on demand - the system can ensure that a request for the floor is not granted unless the current floor holder has been inactive for some ( tunable ) delta [ 111 . All arguments considered , the only certainty is that no one policy will suffice for all groups , in ali situations . For exam - ple , one geographically distributed team of programmers us - ing SharedX has reported the need to alternate between open floor when “brainstorming” to one - person - at - a - time when wanting to make sure a particular piece of code is coded CHI 90 Pmeediws Apil1990 correctly [ 13 ] . In general , running open floor becomes in - creasingly difficult as the number of participants increases , as anyone who has participated in a large meeting ( especially a multi - party audio conference ) can attest . Moreover , experience indicates that even a shared window system tailored to a particular group’s behavior will require different mechanisms ( and policies ) depending on the oper - ating environment in which a conference takes place . In par - ticular , running open floor becomes increasingly difficult as communications delay increases . Anyone who has engaged in a telephone conversation over a satellite link can appreci - ate the types of conflicts that arise . Finally , the availability of audio and video links may signifi - cantly influence the floor control mechanisms required in the conference agent . In particular , if a high - quality audio link is available , and is synchronized with the data channel , there may not be a need for rigid floor handoff policies , since con - ference participants can use traditional social protocols over the audio link to negotiate access to the shared workspace . Indeed , rigid floor control mechanisms might even obstruct these negotiations . However , as suggested in our allusions to satellite communications and multi - party audio conferences , access to the audio link can itself be a problem - the solution to which may well be mechanisms in the conference agent . What , then , would the ideal shared window system provide by way of mechanisms ? In a nutshell , support for a broad range of policies indicated above , in an architecture capable of switching between different policies depending on user preferences and operating environment . Moreover , in sup - port of running open floor , the ideal system would provide mechanisms to enable recovery from conflicting input - that is , to prevent or compensate for data corruption resulting from simultaneous input . 7 Given that people running open floor are already prepared to account for some conflicts and to prevent them from occurring via social protocols , these mechanisms should almost certainly be optimistic - there to recover from the presumably rare conflicts that do occur rather than to limit availability ( hence response ) by prevent - ing conflicts from occurring [ 4 ] . It remains for further re - search to determine the details of how all these mechanisms can be incorporated in a coherent fashion , and without mod - ifying existing applications . 6 ANNOTATION AND TELEPOINTING In a real - time conference , the ability to point at shared ob - jects on the display can greatly enhance communication be - tween conference participants , It allows users to make ref - erences like “let’s move this there” . Most shared window systems ( including Dialogo , SharedX , MMConf , and Rap - port ) include a telepoinring facility that displays au arrow - shaped pointer in the shared workspace . Conference partic - ipants can grab this pointer and move it around the shared workspace to direct attention to specihc objects . Equally 71’his problem does not exist for true audiohrideo teleconferencing . valuable is the ability to make graphical annotations , for ex - ample , to say ( and draw ) : “I think it should look like this . . . ” This simulates real - life presentations where overlays are used to annotate presented materials . Telepointing and annotation facilities are most easily imple - mented if the underlying window system supports transpar - ent windows . In that case , the annotation and telepointing tools can create transparent windows on top of existing wiu - dows , and use these transparent windows as their drawing canvases . * Unfortunately , no existing window system sup - ports transparent windows . Without transparent windows , it is still possible to imple - ment a telepointing facility , In Dialogo , for example , the telepointing application draws its pointer directly in the shared conference windows ( by XORing ) . Telepointing is achieved by repeatedly erasing the pointer and redrawing it in its new position as it tracks the controlling user’s mouse movements . However , this method can result in incorrect displays if the window being XORed is associated with an application that is simultaneously generating output to that window . 7 CONCLUSIONS We have discussed a set of user requirements that require at - tention in order for shared window systems to mature and become more widely used . Rather than offering an exper - imental evaluation of how different approaches to each re - quirement measure up in actual use , we have focused on the tradeoffs involvedin implementing those approaches that have been deemed “reasonable” by the community at large . The l 0 following is a summary of our recommendations : If spontaneous interactions are to be supported , a fully replicated architecture is impractical in the short term . Rather , an application introduced into au ongoing con - ference should be grafted onto an existing instance of a conference agent , and latecomers should share an ex - isting instance of a conference and each application . Moreover , steps should be taken to organize applica - tion state internal to the window system in a more ef - fective manner and to provide associated “global” set and query operations . Window managers ( and the conventions to communi - cate with them ) need to be extended to support shared windows . This would enable experimentation with new strategies for managing shared workspaces , including the use of visual cues to distinguish shared windows from private windows and implementation of confer - ence rooms whose layout can vary with the participant . l Conference agents should support a range of floor con - trol strategies and be able to switch between them de - pending on other communication channels available , * These tools can be built as simple single - user applications , since the shared window system allows them to be shared like any other existing application . 309 , CHI90 PfIIceedngs & nil 1990 user preferences , and operating environments . It is not sufficient , particularly in high - delay environments , to rely exclusively on social protocols . On the other hand , certain floor handoff policies are not acceptable in many environments . l Window systems may need to : support features that are of little use in single - user environments but are ex - tremely valuable in a collaborative setting . One exam - ple is transparent windows , whuch enable efficient im - plementation of annotation and telepointing facilities . l Finally , and related to all the previous requirements , many problems could be avoided or more easily solved if conferencing functionality were implemented di - rectly in the underlying window system . This is only practical , however , if the necessary modifications be - come part of the “standard” distribution . In closing we observe that while these recommendations are motivated by the desire to make shared window sys - tems more convenient to use - and therefore to promote continued use of collaboration - transparent applications - addressing them involves the development of systems soft - ware that is distinctly collaboration - aware . ACKNOWLEDGMENTS Tommy Joseph and Allyn Romanow have contributed greatly to the Dialog0 effort . They , along with Terry Crow - ley , Phil Gust , and John Patterson have also influenced many of the ideas presented in this paper . Barbara Fredrickson pro - vided much useful input from the “human factors” perspec - tive . Finally , thanks to the User Interface Task Force of the Internet Activities Board for the engaging discussions that contributed to the observations in Section 5 . REFERENCES [ l ] S . R . Ahuja , J . R . Ensor , D . N . Horn , and S . E . Lucco . The Rapport multimedia conferencing system : A soft - ware overview . In Proc . 2ndlEEE Conference on Com - puter Workstations , pages 52 - 58 . IEEE , March 1988 . [ 2 ] S . R . Ahuja , J . R . Ensor , and SE . Lucco . A comparison of application sharing mechanisms in real - time desktop conferencing systems . Technical report , AT & T Bell Labs . Submitted for publication . [ 3 ] T . Crowley and H . Forsdick . MMConf : The Diamond multimedia conferencing system . In Proc . Groupware Technology Workshop . IFIP Working Group 8 . 4 , Au - gust 1989 . [ 4 ] S . B . Davidson . Optimism and consistency in parti - tioned distributed database systems . ACM Transac - tions on Database Systems , 9 ( 3 ) : 456481 , September 1984 . 151 [ 61 [ 71 @ I 191 WI 1111 Cl21 [ 131 Cl41 [ I51 WI u71 WI Desktop Teleconferencing Group . Dialogo : A repli - cated shared window system . Technical report , Olivetti Research California , in preparation . C . Egido . Videoconferencing as a technology to sup - port group work : A review of its failure . In Proc . CSCW 88 Conference on Colmputer - Supported Coop - erative Work , pages 13 - 24 . ACM , September 1988 . C . Ellis , SJ . Gibbs , and G . L . . Rein . Design and use of a group editor . In Proc . Working Cor $ erence on Engi - neering for Human - Computer Interaction . LFIP Work - ing Group 2 . 7 , August 1989 . D . C . Engelbart . NLS teleconferencing features : The Journal , and shared - screen telephoning . In Proc . Full COMPCON , pages 173 - 176 . IEEE , September 1975 . H . C . Forsdick . Explorations in real - time multimedia conferencing . In Proc . 2nd International Symposium on Computer Message Systems , pages 299 - 315 . lFIP , September 1985 , G . Foster . Collaborative Systems andMulti - Userlnter - faces . PhD thesis , University of California - Berkeley , 1986 . J . J . Garcia Luna Aceves , E . J . Craighill , and R . Lang . Floor management and control for multimedia com - puter conferecning . In Proc . Multimedia ‘89 : 2nd In - ternational WorkshoponMultimediaCommunications . IEEE Communications Society , April 1989 . J . Grudin . Why CSCW applications fail : Problems in the design and evaluation of organizational interfaces . In Proc . CSCW88 Conjerence on Computer - Supported Cooperative Work , pages 8 . 5 - 93 . ACM , September 1988 . P . Gust . Personal communication . February 1989 . P , Gust . SharedX : X in a distributed group work envi - ronment . Presentation at the2nd Annual X Conference , MIT , January 1988 . D . A . Henderson Jr . and SK . Card . Rooms : The use of multiple virtual workspaces to reduce space contention in a window - based graphical user interface . ACM Transactions on Graphics , 5 ( 13 ) : 211 - 243 , July 1986 . B . Janssen . Personal communication . February 1988 . R . Kraut and C . Egido . Patterns of contact and commu - nication in scientific research collaboration . In Proc . CSCW 88 Conference on Computer - Supported Coop - erative Work , pages 1 - 12 . ACM , September 1988 . K . A . Lantz . An experiment in integrated multime - dia conferencing . In Proc . CSCW 86 Conference on 310 CHI 90 Pmeedngs April1990 [ I91 PO1 WI w P31 [ 241 Computer - Supported Cooperative Work , pages 261 - 275 . MCC Software Technology Program , Decem - ber 1986 . Reprinted in I . Greif ( editor ) , Computer - Supported Cooperative Work : A Book of Readings , pages 533 - 552 . Morgan Kaufmaun Publishers , 1988 . K . A . Lantz , J . C . Lauwers , B . Arons , C . Binding , P . Chen , J . Donahue , T . A . Joseph , R . Koo , A . Ro - manow , C . Schmandt , and W . Yamamoto . Collabora - tion technology research at OlivettiResearch Center . In Proc . Groupware Technology Workshop , IFIP Working Group 8 . 4 , August 1989 . J . C . Lauwers , T . Joseph , K . A . Lantz , and A . Romanow . Replicated architectures for shared window systems : A critique . Technical report , OlivettiResearch California . Submitted for publication . J . C . Lauwers and K . A . Lantz . Desktop teleconferenc - ing and existing window systems : A poor match . Tech - nical report , Olivetti Research California , in prepara - tion . S . Piccardi and F . Tisato . Conference Desk : Au exper - iment and model for application sharing . Technical re - port , Systems Software Laboratory , Direzione Olivetti Ricerca - Milan , January 1989 . R . F . Rashid and G . G . Robertson . Accent : A commu - nication oriented network operating system kernel . In Proc . 8th Symposium on Operating Systems Principles , pages 64 - 75 . ACM , December 1981 . Proceedings pub - lished as Operating Systems Review 1 S ( 5 ) . R . W . Root . Design of a multi - media vehicle for so - cial browsing . In Proc . CSCW 88 Conference on Computer - Supported Cooperative Work , pages 25 - 38 . ACM , September 1988 . PI WI WI CW ~ 291 [ 301 S . K . Sarin and I . Greif . Software for interactive on - line conferences . In Proc . 2nd Conference on Office information Systems , pages 46 - 58 . ACM , June 1984 . S . K . Sarin and I . Greif . Computer - based real - time con - ferencing systems . Computer , 18 ( 10 ) : 3345 , Octo - ber 1985 . Reprinted in I . Greif ( editor ) , Computer - Supported Cooperative Work : A Book of Readings , pages 397 - 420 . Morgan Kaufmann Publishers , 1988 . M . Stelik , D . G . Bobrow , G . Foster , S . Larming , and D . Tatar . WYSIWIS revised : Early experiences with multiuser interfaces . ACM Transactions on Office In - formation Systems , 5 ( 2 ) : 147 - 167 . April 1987 . Pre - sented at the CSCW’86 Conference on Computer - Supported Cooperative Work , December 1986 . M . Stetik , G . Foster , D . G . Bobrow , K . Kahn , S . Lan - ning , and L . Suchman . Beyond the chalkboard : Com - puter support for collaboration and problem solving iu meetings . Communications of the ACM , 30 ( 1 ) : 32 - 47 , January 1987 . Reprinted in I . Greif ( editor ) , Computer - Supported Cooperative Work : A Book of Readings , pages 335 - 366 . Morgan Kaufmann Publishers , 1988 . M . M . Theimer . Preemptable Remote Execution Facili - ties for Loosely - coupled Distributed Systems . PhD the - sis , Stanford University , 1986 . M . M . Theimer , K . A . Lantz , and D . R . Cheriton . Pre - emptable remote execution facilities for the V - System . In Proc . 10th Symposium on Operating Systems Princi - ples , pages 2 - 12 . ACM , December 1985 . Proceedings published as Operating Systems Review 19 ( 5 ) . 311