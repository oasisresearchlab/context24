Subgoal Labeled Worked Examples in K - 3 Education Johanna Joentausta University of Helsinki Helsinki , Finland johanna . joentausta @ helsinki . fi Arto Hellas University of Helsinki Helsinki , Finland arto . hellas @ helsinki . fi ABSTRACT Worked examples are step - by - step instructions that are used to demonstrate and teach problem - solving processes . Subgoal labels are used to group the steps of worked examples into cohesive units that may help the learner to identify key information about the process . We conducted a study on the applicability of subgoal la - beled worked examples with 9 and 10 - year - old pupils ( n = 43 ) who were learning the principles of programming using LightBot . Us - ing a between groups design , pupils in three classes were working with LightBot . One of the groups had no additional instructional materials for the LightBot environment , one of the groups had a set of worked examples without subgoal labels , and the last group had the same set of worked examples with subgoal labels . We mea - sured pupils’ success in terms of how many LightBot levels they completed during the class . In addition , pupils’ beliefs and attitudes towards programming were assessed before and after the exper - iment . Our results indicate that in a programming environment such as LightBot , simple worked examples provide no significant benefit over no examples , but worked examples with subgoal la - bels can help pupils complete more levels . At the same time , the instructional materials in the study had no significant influence on the pupils’ beliefs towards computer use or programming . CCS CONCEPTS • Social and professional topics → K - 12 education ; Computa - tional thinking ; • Software and its engineering → Programming by example ; ACM Reference Format : Johanna Joentausta and Arto Hellas . 2018 . Subgoal Labeled Worked Exam - ples in K - 3 Education . In SIGCSE ’18 : The 49th ACM Technical Symposium on Computer Science Education , February 21 – 24 , 2018 , Baltimore , MD , USA . ACM , New York , NY , USA , 6 pages . https : / / doi . org / 10 . 1145 / 3159450 . 3159494 1 INTRODUCTION Countries across the globe have embraced programming and in - cluded aspects of it into their school curricula [ 16 , 21 ] . While the perceived difficulty of programming is rarely discussed within the context of primary schools , research into teaching programming in Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than the author ( s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , topostonserversortoredistributetolists , requirespriorspecificpermission and / or a fee . Request permissions from permissions @ acm . org . SIGCSE ’18 , February 21 – 24 , 2018 , Baltimore , MD , USA © 2018 Copyright held by the owner / author ( s ) . Publication rights licensed to Associa - tion for Computing Machinery . ACM ISBN 978 - 1 - 4503 - 5103 - 4 / 18 / 02 . . . $ 15 . 00 https : / / doi . org / 10 . 1145 / 3159450 . 3159494 higher education has highlighted high drop out rates in program - ming courses as a problem [ 8 , 30 ] . Pupils’ experiences related to learning can have long - lasting effects . Success and positive feedback can lead to a reinforced self - efficacy [ 5 ] , while struggling and poor feedback may lead to a complete aversion of the topic . These experiences may also influ - ence pupils’ career and study choices in the future [ 32 ] . As such , it is important for teachers to be able to support pupils in a way that the early experiences in a given subject are positive . When teaching programming in schools , teachers often use tools such as LightBot , LOGO , and Scratch [ 16 , 26 ] . These environments come in various shapes and are targeted to specific age groups [ 26 ] . Most such environments share a visual or tangible approach to learning programming ; pupils control an entity or a set of entities that act in a virtual world . The environments are exploratory by nature , which also means that pupils can work in the environment either individually or in groups without explicit guidance from teachers . When learning to use such educational programs and learning to program using them , it is possible that additional materials could be beneficial . For example , a pupil may benefit from the use of step - by - step instructions that outline the problem solving process – worked examples [ 3 ] . Moreover , grouping the steps into cohesive units with meaningful subgoal labels could help the pupil to identify key aspects of the problem solving process , and subsequently to identify reoccurring subgoals in similar problems [ 12 ] . While such studies have been conducted in higher education and teacher training [ 22 , 23 ] , studies on the topic in primary schools are rare . In this article , we describe the results of a study of the benefits of using different types of instructional materials for LightBot in pro - gramming classes intended for third grade pupils who are between 9 and 10 year old . Using a between groups design with three classes , pupils used either no additional instructional materials , instruc - tional materials with worked examples but without subgoal labels , or instructional materials with worked examples and subgoal labels . All of the three classes had two instructors present for the duration of the experiment , and pupils in all of the three classes could ask for questions and help from the instructors throughout the experiment . In addition to collecting pupils’ progress , pre - and post - experiment surveys on pupils’ self - beliefs and self - efficacy about computers and programming were used . This article is organized as follows . In the next Section , we de - scribe worked examples and subgoal labels , briefly discuss concepts related to pupils’ self - beliefs , and finally outline the current state of programming education in the studied context . Then , in Section 3 , we describe our research methodology , including the research questions and data . This is followed by the results and the discus - sion , in which we also outline the limitations of this work . Finally , Section 5 concludes this article . Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 616 2 BACKGROUND 2 . 1 Worked examples Worked examples are an instructional technique in which learners are provided step - by - step guidelines for solving a problem [ 3 , 29 ] . By following these guidelines , learners familiarize themselves with the problem domain and the way a particular type of a problem in that domain is solved . Worked examples have been used , for example , in mathematics , athletics and programming [ 3 ] . In general , worked examples have been shown to improve learn - ing of novices in procedural domains . In cases where the learner is already familiar with the problem and knows how to solve it , worked examples may be detrimental and learners may consider them redundant [ 17 ] . The degree of familiarity with the problem may also influence the benefit from the worked examples ; for ex - ample , some studies have suggested that learners who are given only partially worked out examples may perform as well as those with fully worked out examples [ 24 ] . Whilst the use of worked examples in the computing education domain has been suggested by various authors [ 1 , 10 , 15 , 31 ] , their use within the computing education domain has received only little empirical research [ 28 ] . The step - by - step guidelines of worked examples , while beneficial for novices who are learning a new task , may not help learners form a higher - level understanding of what they are solving or to help them to build a conceptual understanding of the problem [ 12 ] ; novices may not learn to distinguish the key features from the worked examples . 2 . 2 Subgoal labeling When solving problems using a set of examples , e . g . worked ex - amples , students may memorize the steps without learning how to solve the tacit sub - problems . This may lead to a situation where stu - dents are unable to solve similar problems if the previously studied examples do not directly apply [ 11 ] . Subgoal labeling is a technique where sets of steps in a problem solving process are isolated to help students learn how specific subgoals are solved [ 11 ] . By grouping steps of worked examples together and giving the groups – that is , subgoals of the problem – meaningful names that describe the purpose of each particular group to the learner , learners may be able to focus on these higher level features of the problem while using the worked examples [ 2 , 12 ] . As a consequence , students may also be able to apply the subgoals when working on new problems [ 11 ] . Studies in which subgoal labels have been used within the con - text of learning programming suggest that the inclusion of subgoal labels may improve learner performance over traditional worked examples [ 22 , 23 ] . At the same time , it is possible that very spe - cific goals may actually hinder the acquisition of programming comprehension skills [ 14 ] . 2 . 3 Self - efficacy and attitudes Self - efficacy – as defined by Albert Bandura – is the ability to see oneself as a capable individual who can succeed in a given task or in a specific situation [ 4 ] . Self - efficacy is developed through experiences and feedback , and it partially directs the actions of each individual . For example , individuals with low self - efficacy can see challenging tasks as something to avoid instead of something to master , while high self - efficacy can increase motivation and the drive to solve challenging tasks [ 6 ] . Self - efficacy is not only intertwined with school performance , but also with behavior , well - being , social relationships and per - formance in general [ 5 , 6 ] . It can also influence career and study choices [ 9 ] , leading to e . g . aversion of specific subjects . It is possible to increase self - efficacy through interventions [ 13 , 34 ] , however , these interventions typically take weeks . Another possibility is to use explicitly set goals , which can enhance self - efficacy as problems become easier to understand [ 18 , 27 ] . 2 . 4 Programming in Finnish schools The Finnish national curriculum for general education ( grades 1 - 9 ≈ ages 7 - 16 ) was recently revised and taken into use in fall 2016 . The new curriculum places more emphasis on future competences and posits , among other things , that students are expected to learn the basics of information technology and programming . The curriculum stipulates that pupils in grades 3 - 6 are expected to learn programming using visual programming tools . Program - ming is included to the grading of the subject mathematics – in order for a student to receive the grade 8 ( out of scale 4 - 10 , where 4 is the poorest grade and 10 is the best ) , the student should be able to create a working program . The curriculum does not emphasize specific tools or program - ming environments . As a consequence , the teachers are free to select the tools that they feel suit their teaching the most . Com - monly used tools in the grades 3 - 6 include LightBot 1 , Scratch 2 and others . No explicit expectations are set for the third grade , in which this study took place . 3 METHODOLOGY 3 . 1 Research questions Our research questions for this study are as follows : • How do the instructional materials affect pupils’ progress in LightBot ? • Does pupils’ perceived self - efficacy and their attitudes to - wards computing change based on the instruction format ? With the first research question , How do the instructional mate - rials affect pupils’ progress in Lightbot ? , we wish to determine the impact of different types of instructional materials ( no materials , worked examples , worked examples with subgoal labels ) on learn - ing programming in a primary school setting . Our explicit focus is on LightBot , which is a commonly used novice programming environment . With the second research question , Does pupils’ perceived self - efficacy and their attitudes towards computing change based on the instruction format ? , we wish to study whether a short intervention can influence students attitudes towards computing . Previous re - search suggests that explicitly set goals may influence self - efficacy , and as a consequence , it is plausible that minor effects could be observed even after a short intervention . 1 http : / / lightbot . com 2 https : / / scratch . mit . edu / Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 617 3 . 2 Context and participants The study presented in this article was conducted in Finland . Our study focused on primary school pupils who are in the third grade ( between 9 and 10 years ) . As the curriculum states that students in primary school should be introduced to a visual programming en - vironment , we chose to use LightBot in our study as it is consistent with the curriculum . A total of three classes were recruited for the study , and parental consent forms were sent to each parent of the children in the classes . In total , 47 pupils received parental consent and 4 did not . Thus , our starting population for the study was 47 pupils in three classes , labeled henceforth as groups ; Group A ( n = 17 ) , Group B ( n = 17 ) and Group C ( n = 13 ) . The gender distribution of the population was somewhat skewed ; from the 47 pupils , 32 were girls . 3 . 3 Experimental setup Our experiment was designed as a between groups study , where each group – class – in the experiment was given different instruc - tional handouts , while the task and instructors were held constant . The duration of the experiment was one class hour , which con - sisted of filling pre - and post - questionnaires and a 45 - minute ses - sion of LightBot . The class was tutored by two experienced instruc - tors , who had previously instructed several similar classes for 7 to 12 year old primary school pupils . One of the instructors is also the first author of this article . The main responsible teacher of each class was also present and participated in advising the pupils , but the teachers were not previously familiar with LightBot . The pre - questionnaire included questions about gender , native language , programming experience , opinion about computing skills in general , questions related to self - efficacy , and a few questions about educational achievements and diligence . Post - questionnaire mostly focused on the programming experience , including ques - tions such as “I could complete programming tasks” and “I was happy about the number of tasks I completed” . The questionnaire was given as a Likert - like form , where the students had range of smileys that indicated their agreement . A red sad face indicated disagreement and a green happy face indicated agreement . In the between groups design , the classes were used as a nat - ural and convenient way to group the students , which was also requested by the schools – their preference was that students could stay with their teacher and that each student in the same class would receive the same instruction . Group A did not receive any written instructions . Group B received illustrated worked example printouts of ( n = 5 ) levels that the instructors had previously es - timated as difficult , and Group C received the same instructional materials as Group B , but with subgoal labels ( Figure 1 ) . In each class , instructors guided any pupil who asked for help as he or she was working on levels that had not previously been estimated as difficult . However , when the pupil was working on a level that had previously been estimated as difficult by the instruc - tors , the procedure of providing guidelines differed between the classes . In Group A with no instructional materials , the instructors provided similar guidance as before , but in Groups B and C , the instructors suggested that the pupil reads out the provided instruc - tional materials , and if needed , also read them out themselves . Switch on the lights Move towards blue tile 1 . Walk one step forward 2 . Turn left There are two different solutions in this level , but one of them is longer and does not fit into the MAIN - slot . 1 - 7 4 . Repeat twice : turn left , jump and switch on the light 3 . Repeat twice : jump and switch on the light Figure 1 : An example of a worked example printout with subgoal labels . The printout without subgoal labels did not have the texts “Move towards the blue tile” and “Switch on the lights” . When guidance was needed and the issue was erroneous code , the code was examined in co - operation with the pupil . If the pupil had not made any code at all , the instructor and the pupil started to think together which step would be a good one to start with . When the robot was moved , the pupil started to consider the next move , possibly with the help of the instructor . Pupils were always praised for both trying and succeeding . 3 . 4 Data and analysis Pupils’ progress in the game was measured as a part of the post - study questionnaire . The game consists of three different segments , where the first of them has 8 levels , the second one had 6 levels and the third one had 6 levels . During the analysis , pupils answers were numbered sequentially from 1 to 20 . The analysis of the response data was conducted using SPSS software 3 . 4 RESULTS AND DISCUSSION A total of 47 pupils had informed consent from their parents . Four of the 47 pupils did not complete the surveys , and thus , answers from 43 pupils were included into the analysis . 4 . 1 Materials and pupil progress The average progress of each group is shown in Table 1 . In order to determine whether the instructional format had an effect on the pupils’ progress in LightBot , we used Kruskall - Wallis one - way analysis of variance [ 19 ] to assess the difference between the groups . The analysis revealed that there was no statistically significant difference between the group that had no instructional materials and the group that had the material with worked examples ( df = 2 , p > 0 . 05 ) . 3 https : / / www . ibm . com / analytics / us / en / technology / spss / Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 618 Table 1 : Average progress in LightBot during the 45 minute class for each of the separate groups . Group A had no in - structional materials , Group B had worked examples , and Group C had worked examples with subgoal labels . Group Average progress in LightBot Group A 10 . 29 Group B 10 . 65 Group C 13 . 58 When analyzing the difference between the group that had used worked examples with subgoal labels and the other groups , a statis - tically significant difference between was found ( df = 2 , p = 0 . 004 ) . That is , the group with worked examples with subgoal labels per - formed significantly better than the other groups . The difference between the groups is visualized as a Boxplot in Figure 2 . We ex - cluded one value from group B due to a very likely mistake – a pupil had indicated that he or she had completed only two levels , something that the instructors knew was false 4 . Class A c h i e v e d l e v e l i n L i g h t b o t Figure 2 : The difference between the average achieved Light - Bot level in each of the groups . Group A on the left had no instructional materials , Group B in the middle had worked examples , and Group C on the right had worked examples with subgoal labels . To summarize , our response to the Research Question 1 " How do the instructional materials affect pupils’ progress in LightBot ? " is as follows . We did not observe a statistically significant improve - ment in the progress of pupils who used worked examples when compared to those who did not use any type of materials . We did , however , find that the group who used materials with subgoal la - beled worked examples performed significantly better than the group with no materials and the group with worked examples but no subgoal labels . 4 It is possible that the pupil was thinking about 2 - 1 , that is the first level of the second segment , but wrote down 1 - 2 , that is the second level of the first segment . As this is only speculative , the pupil was excluded from the analysis 4 . 2 Self - Efficacy and perceptions of programming Students’ perceived self - efficacy and perceptions of programming were assessed using a pre - and post - study survey . In this study , we limit the analysis to questions that were identical in the pre - and post - survey . These questions were as follows : • I consider myself as a good computer user • I believe programming is useful • I believe programming will teach you how to use computer In our analysis , we refer to the first question as a question that measured pupils’ self - efficacy , while the two subsequent questions are related to pupils’ perceptions about computing . When analyzing the difference between pupils’ answers in the pre - and post - questionnaire , no statistically significant difference was found . Moreover , the instructional format did not influence the result . We must note , however , that this result can be a side - product of a ceiling effect ; vast majority of the pupils responded with very high values already during the pre - questionnaire , and there was room for only a marginal bump in the post - questionnaire . To summarize , our response to the Research Question 2 " Does pupils’ perceived self - efficacy and their attitudes towards computing change based on the instruction format ? " is as follows . In a short , one hour computing experience , we did not observe a statistically significant change in the surveyed metrics . We note , however , that there was a ceiling effect in place , which may have influenced the outcomes . 4 . 3 Notes on programming experience When asking the pupils about their background with program - ming , our initial goal was to exclude the few pupils with previ - ous programming experience that we expected to find from the study . Surprisingly , nearly one half of the pupils had some previous programming experience ; some had programmed using Bee - bots , some had programmed using Scratch , and some had previously used LightBot . A couple of pupils also responded that they had played Minecraft – we are unsure how they considered this as programming . The pupils with previous programming background were evenly distributed among the groups . Given the opportunity , we also studied whether pupils’ previous programming experience affected their progress in LightBot . When analyzing the pupils as two groups who had either programmed previously or had no previous programming experience , we found that there was a statistically significant difference between the groups’ progress ( Mann - Whitney U - Test [ 20 ] , U = 312 . 5 , p = 0 . 022 ) . On average , the pupils with previous programming background progressed to the level 12 . 2 , while the pupils with no previous programming background progressed to the level 10 . 8 . These results are in line with previous findings in higher edu - cation that indicate that previous programming experience indeed helps with programming tasks ( see e . g . [ 33 ] ) . 4 . 4 Pupils’ and teachers’ perceptions During the experiment , pupils’ and teachers’ outbursts were also monitored . Overall , in all of the classes , both pupils and teachers indicated that they had enjoyed programming a lot . Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 619 We noted an interesting observation in the groups who had the instructional materials at their disposal . When given the instruc - tional materials , more than a single pupil ( approx 2 - 3 in both groups B and C ) stated that they did not want to cheat when studying . In other terms , some pupils saw the step - by - step instructions as cheat - ing , and voiced out loud that they wanted to solve the problems by themselves . As we did not explicitly note down the pupils who voiced the outbursts , and our response data is anonymous , we do not know if the pupils held their mind or if they actually chose to use the provided materials in the end . In a broader sense , this observation highlights the attitude of some of the pupils in the classroom . Having step - by - step guidelines that the pupil could use to solve a problem can be seen as cheating by some . We do not know if this is a cultural issue of if the observation holds globally . 4 . 5 Limitations of study Our study has a few limitations which we address next . First , the study was conducted in a country with a rather homogeneous pop - ulation ; only approximately 30 % of the pupils reported that their native language was not Finnish . The educational system in Fin - land is also such that the teachers in Kindergarten have Bachelors degrees in education , and the teachers in primary schools have Masters degrees in education . That is , it is possible that results in other contexts could be influenced by how pupils are taught to learn and act in school . Our study was conducted as a between groups design , and as such , there may be differences between the groups . All of the groups came from similar schools and there was no significant difference in the backgrounds of the pupils . It is true that a randomized controlled trial would have possibly reduced bias , but the schools expected each pupil in the same classroom to have the same treatment . When considering the instruction , it is possible that the instruc - tion format influenced the way how instructors acted with the pupils . For example , the instructors may have benefited from the subgoal labels during the instruction . On the other hand , upon dis - cussion , the instructors noted that upon problems , they attempted to teach pupils to identify key subgoals . The behavior did not change across the classes . When measuring pupils’ progress , we used self - reported metrics . In hindsight , as the levels were marked down using the notation that shows both the segment and the level , it would have been more meaningful to have the instructors mark down the highest level that each pupil achieved . In our study , at least one pupil had answered the question incorrectly , writing down that he or she had reached only the second level . The instructors knew that all of the students were able to proceed further than the second level , and as a consequence , the entry was discarded from analysis . Future studies on the topic should consider having instructors mark down the levels . Similarly , the questionnaire used has not been validated . The questionnaire was designed by the authors based on [ 7 , 25 ] and given in Finnish to the pupils . The questions were designed to be sufficiently short for the pupils , and the scale in the questionnaire was given using smiley - faces to retain attention . It is , however , possible that such design choices influenced the overall study and the results : we do not know , for example , how pupils perceive the distance between two smileys . Finally , during the study , two additional instructors were present in the classes . We do not know whether similar results would have been achieved in a classroom with only one teacher . 5 CONCLUSIONS In this study , we assessed the effect of different types of instruc - tional materials in three third grade classes where 9 and 10 year old pupils were learning to program using LightBot . Each class received different instructional materials ; first class received no additional instructional materials , the second class received instruc - tional materials with worked examples , and the third class received instructional materials with worked examples and subgoal labels . Our results show that pupils did not benefit from the worked examples when comparing to no instructional materials . There was a statistically significant improvement in the progress of the group that used worked examples with subgoal labels however . The group with worked examples and subgoal labels completed , on average , almost three more levels in LightBot than the other groups . Percent - wise , this is almost a 30 % improvement in the number of completed levels . These results suggest that if the learning environment has been created to provide ample scaffolding , as LightBot does , it is possible that worked examples do not provide additional benefit . As the goals in LightBot are very specific and the LightBot environment has been constructed so that players start with small problems and eventually tackle larger ones , pupils may reach the same benefits from LightBot itself than they would gain from worked examples . Our results can also , however , be interpreted so that designers of such games as LightBot would benefit from incorporating subgoal labels into their instructional materials . During the study , we surveyed pupils self - efficacy and attitudes towards computing , and used a pre - and post - questionnaire to study whether the attitudes were changed as a result of the experiment . We did not find any statistically significant differences between the groups nor between the pre - and post - questionnaires . We note , however , that this could be explained by a ceiling effect : majority of the pupils reported very high self - efficacy and attitudes already during the beginning of the study . Overall , these results indicate that pupils can benefit from in - structional materials with worked examples and subgoal labels when learning programming using educational environments . We did not assess long - term retention or conceptual knowledge of the students , however ; in our future work , we are looking to address if this improvement in the quantity of levels that the pupils can complete has an effect on how the pupils understand programming concepts . ACKNOWLEDGEMENTS We would like to express our gratitude to the anonymous review - ers whose suggestions have helped us to improve the manuscript considerably . We also acknowledge and thank the teachers in the respective schools and greet Anu Riihiaho – the other instructor – thank you ( again ) ! Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 620 REFERENCES [ 1 ] Siti - SorayaAbdul - RahmanandBenedictDuBoulay . 2014 . Learningprogramming via worked - examples : Relation of learning styles to cognitive load . Computers in Human Behavior 30 ( 2014 ) , 286 – 298 . [ 2 ] RobertKAtkinson , RichardCatrambone , andMaryMargaretMerrill . 2003 . Aiding Transfer in Statistics : Examining the Use of Conceptually Oriented Equations and Elaborations During Subgoal Learning . Journal of Educational Psychology 95 , 4 ( 2003 ) , 762 . [ 3 ] Robert K Atkinson , Sharon J Derry , Alexander Renkl , and Donald Wortham . 2000 . Learning from examples : Instructional principles from the worked examples research . Review of educational research 70 , 2 ( 2000 ) , 181 – 214 . [ 4 ] Albert Bandura . 1977 . Self - efficacy : Toward a unifying theory of behavioral change . Psychological Review ( 1977 ) , 191 – 215 . [ 5 ] Albert Bandura . 1993 . Perceived self - efficacy in cognitive development and functioning . Educational psychologist 28 , 2 ( 1993 ) , 117 – 148 . [ 6 ] Albert Bandura . 1997 . Self - efficacy : The exercise of control . Macmillan . [ 7 ] Albert Bandura . 2006 . Guide for constructing self - efficacy scales . Self - efficacy beliefs of adolescents 5 , 307 - 337 ( 2006 ) . [ 8 ] Jens Bennedsen and Michael E Caspersen . 2007 . Failure rates in introductory programming . ACM SIGCSE Bulletin 39 , 2 ( 2007 ) , 32 – 36 . [ 9 ] Nancy E Betz and Gail Hackett . 1986 . Applications of self - efficacy theory to understanding career choice behavior . Journal of social and clinical psychology 4 , 3 ( 1986 ) , 279 – 289 . [ 10 ] Michael E . Caspersen and Jens Bennedsen . 2007 . Instructional Design of a Programming Course : A Learning Theoretic Approach . In Proceedings of the Third International Workshop on Computing Education Research ( ICER ’07 ) . ACM , New York , NY , USA , 111 – 122 . https : / / doi . org / 10 . 1145 / 1288580 . 1288595 [ 11 ] Richard Catrambone . 1995 . Aiding subgoal learning : Effects on transfer . Journal of educational psychology 87 , 1 ( 1995 ) , 5 . [ 12 ] RichardCatrambone . 1998 . Thesubgoallearningmodel : Creatingbetterexamples so that students can solve novel problems . Journal of Experimental Psychology : General 127 , 4 ( 1998 ) , 355 . [ 13 ] JoannaCDunlap . 2005 . Problem - basedlearningandself - efficacy : Howacapstone course prepares students for a profession . Educational Technology Research and Development 53 , 1 ( 2005 ) , 65 – 83 . [ 14 ] Chia - Yen Feng and Ming - Puu Chen . 2014 . The effects of goal specificity and scaffolding on programming performance and self - regulation in game design . British Journal of Educational Technology 45 , 2 ( 2014 ) , 285 – 302 . [ 15 ] Simon Gray , Caroline St . Clair , Richard James , and Jerry Mead . 2007 . Suggestions for Graduated Exposure to Programming Concepts Using Fading Worked Exam - ples . In Proceedings of the Third International Workshop on Computing Education Research ( ICER ’07 ) . ACM , New York , NY , USA , 99 – 110 . https : / / doi . org / 10 . 1145 / 1288580 . 1288594 [ 16 ] PeterHubwieser , MichailNGiannakos , MarcBerges , TorstenBrinda , IraDiethelm , JohannesMagenheim , YogendraPal , JanaJackova , andEgleJasute . 2015 . Aglobal snapshot of computer science education in K - 12 schools . In Proceedings of the 2015 ITiCSE on Working Group Reports . ACM , 65 – 83 . [ 17 ] Slava Kalyuga , Paul Chandler , Juhani Tuovinen , and John Sweller . 2001 . When problem solving is superior to studying worked examples . Journal of educational psychology 93 , 3 ( 2001 ) , 579 . [ 18 ] Steve WJ Kozlowski and Bradford S Bell . 2006 . Disentangling achievement orientation and goal setting : effects on self - regulatory processes . Journal of Applied Psychology 91 , 4 ( 2006 ) , 900 . [ 19 ] William H . Kruskal and W . Allen Wallis . 1952 . Use of Ranks in One - Criterion Variance Analysis . J . Amer . Statist . Assoc . 47 , 260 ( 1952 ) , 583 – 621 . https : / / doi . org / 10 . 1080 / 01621459 . 1952 . 10483441 [ 20 ] Henry B Mann and Donald R Whitney . 1947 . On a test of whether one of two random variables is stochastically larger than the other . The annals of mathematical statistics ( 1947 ) , 50 – 60 . [ 21 ] Linda Mannila , Valentina Dagiene , Barbara Demo , Natasa Grgurina , Claudio Mirolo , Lennart Rolandsson , and Amber Settle . 2014 . Computational Thinking in K - 9 Education . In Proceedings of the Working Group Reports of the 2014 on Innovation & Technology in Computer Science Education Conference ( ITiCSE - WGR ’14 ) . ACM , New York , NY , USA , 1 – 29 . https : / / doi . org / 10 . 1145 / 2713609 . 2713610 [ 22 ] Lauren E . Margulieux , Mark Guzdial , and Richard Catrambone . 2012 . Subgoal - labeled Instructional Material Improves Performance and Transfer in Learning to Develop Mobile Applications . In Proceedings of the Ninth Annual International Conference on International Computing Education Research ( ICER ’12 ) . ACM , New York , NY , USA , 71 – 78 . https : / / doi . org / 10 . 1145 / 2361276 . 2361291 [ 23 ] Briana B . Morrison , Lauren E . Margulieux , and Mark Guzdial . 2015 . Subgoals , Context , and Worked Examples in Learning Computing Problem Solving . In Proceedings of the Eleventh Annual International Conference on International Computing Education Research ( ICER ’15 ) . ACM , New York , NY , USA , 21 – 29 . https : / / doi . org / 10 . 1145 / 2787622 . 2787733 [ 24 ] Fred G Paas . 1992 . Training strategies for attaining transfer of problem - solving skill in statistics : A cognitive - load approach . Journal of educational psychology 84 , 4 ( 1992 ) , 429 . [ 25 ] Paul R Pintrich et al . 1991 . A manual for the use of the Motivated Strategies for Learning Questionnaire ( MSLQ ) . ( 1991 ) . [ 26 ] A Rees , Francisco J García - Peñalvo , T Toivonen , J Hughes , I Jormananinen , M Tuul , M Virnes , and D Reimann . 2016 . Evaluation of existing resources ( study / analysis ) . ( 2016 ) . [ 27 ] DaleHSchunk . 1990 . Goalsettingandself - efficacyduringself - regulatedlearning . Educational psychologist 25 , 1 ( 1990 ) , 71 – 86 . [ 28 ] Ben Skudder and Andrew Luxton - Reilly . 2014 . Worked Examples in Computer Science . In Proceedings of the Sixteenth Australasian Computing Education Con - ference - Volume 148 ( ACE ’14 ) . Australian Computer Society , Inc . , Darlinghurst , Australia , Australia , 59 – 64 . http : / / dl . acm . org / citation . cfm ? id = 2667490 . 2667497 [ 29 ] John Sweller and Graham A Cooper . 1985 . The use of worked examples as a substitute for problem solving in learning algebra . Cognition and instruction 2 , 1 ( 1985 ) , 59 – 89 . [ 30 ] Arto Vihavainen , Jonne Airaksinen , and Christopher Watson . 2014 . A systematic review of approaches for teaching introductory programming and their influ - ence on success . In Proceedings of the tenth annual conference on International computing education research . ACM , 19 – 26 . [ 31 ] Arto Vihavainen , Matti Paksula , and Matti Luukkainen . 2011 . Extreme appren - ticeship method in teaching programming for beginners . In Proceedings of the 42nd ACM technical symposium on Computer science education . ACM , 93 – 98 . [ 32 ] Xueli Wang . 2013 . Why students choose STEM majors : Motivation , high school learning , and postsecondary context of support . American Educational Research Journal 50 , 5 ( 2013 ) , 1081 – 1121 . [ 33 ] Christopher Watson , Frederick WB Li , and Jamie L Godwin . 2014 . No tests required : comparing traditional and dynamic predictors of programming success . In Proceedingsofthe45thACMtechnicalsymposiumonComputerscienceeducation . ACM , 469 – 474 . [ 34 ] Amy L Zeldin and Frank Pajares . 2000 . Against the odds : Self - efficacy beliefs of women in mathematical , scientific , and technological careers . American Educa - tional Research Journal 37 , 1 ( 2000 ) , 215 – 246 . Paper Session : Elementary # 1 SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 621