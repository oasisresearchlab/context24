Selection of our books indexed in the Book Citation Index in Web of Science™ Core Collection ( BKCI ) Interested in publishing with us ? Contact book . department @ intechopen . com Numbers displayed above are based on latest data collected . For more information visit www . intechopen . com Open access books available Countries delivered to Contributors from top 500 universities International authors and editors Our authors are among the most cited scientists Downloads We are IntechOpen , the world’s leading publisher of Open Access books Built by scientists , for scientists 12 . 2 % 116 , 000 120M TOP 1 % 154 3 , 800 0 Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics Etsuji Tomita 1 , Tatsuya Akutsu 2 and Tsutomu Matsunaga 3 1 The University of Electro - Communications & The Research and Development Initiative , Chuo University , Tokyo 2 Kyoto University , Kyoto 3 NTT DATA Corporation , Tokyo Japan 1 . Introduction Many problems can be formulated as graphs where a graph consists of a set of vertices and a set of edges , in which the vertices stand for objects in question and the edges stand for some relations among the objects . A clique is a subgraph in which all pairs of vertices are mutually adjacent . Thus , a maximum clique stands for a maximum collection of objects which are mutually related in some speciﬁed criterion . The so called maximum clique problem is one of the original 21 problems shown to be NP - complete by R . Karp ( 19 ) . Therefore , it is strongly believed that the maximum clique problem is not solvable easily , i . e . , it is not solvable in polynomial - time . Nevertheless , much work has been done on this problem , experimentally and theoretically . It attracts much attention especially recently since it has found many practical applications to bioinformatics ( see , e . g . , ( 2 ; 15 ; 27 ; 28 ; 37 ; 3 ; 9 ; 4 ; 8 ; 14 ; 55 ; 23 ; 25 ; 22 ; 13 ) ) and many others ( see , e . g . , excellent surveys ( 34 ; 5 ) , and ( 17 ; 20 ; 31 ; 49 ; 54 ; 51 ) ) . This chapter presents efﬁcient algorithms for ﬁnding a maximum clique and maximal cliques as effective tools for bioinformatics , and shows our successful applications of these algorithms to bioinformatics . 2 . Preliminaries ( 1 ) We are concerned with a simple undirected graph G = ( V , E ) with a ﬁnite set V of vertices and a ﬁnite set E of unordered pairs ( v , w ) ( = ( w , v ) ) of distinct vertices called edges . V is considered to be ordered , and the i - th element in V is denoted by V [ i ] . A pair of vertices v and w are said to be adjacent if ( v , w ) ∈ E . ( 2 ) For a vertex v ∈ V , let Γ ( v ) be the set of all vertices that are adjacent to v in G = ( V , E ) , i . e . , Γ ( v ) = { w ∈ V | ( v , w ) ∈ E } . We call | Γ ( v ) | , i . e . , the number of vertices adjacent to a vertex v , the degree of v . In general , for a set S , the number of elements in S is denoted by | S | . ( 3 ) For a subset R ⊆ V of vertices , G ( R ) = ( R , E ∩ ( R × R ) ) is an induced subgraph . An induced subgraph G ( Q ) is said to be a clique if ( v , w ) ∈ E for all v , w ∈ Q ⊆ V with v (cid:5) = w . In this case , we may simply state that Q is a clique . In particular , a clique which is not properly contained in any other clique is called maximal . A maximal clique with the maximum size is called a 32 www . intechopen . com 2 Biomedical Engineering , Trends , Researches and Technologies Maximal Cliques { A , B , F } A B C F D E { B , C , E , F } : Maximum Clique { C , D , E } Fig . 1 . Example graph maximum clique . The number of vertices of a maximum clique in an induced subgraph G ( R ) is denoted by ω ( R ) . Consider an example graph G 0 = ( V 0 , E 0 ) in Fig . 1 , where V 0 = { A , B , C , D , E , F } and E 0 = { ( A , B ) , ( A , F ) , ( B , C ) , ( B , E ) , ( B , F ) , ( C , D ) , ( C , E ) , ( C , F ) , ( D , E ) , ( E , F ) } . All maximal cliques are { A , B , F } , { B , C , E , F } and { C , D , E } , where { B , C , E , F } is a maximum clique of size 4 . Note that { B , C , E } is a clique , but is not a maximal clique since it is contained in a larger clique { B , C , E , F } . 3 . Ef ﬁ cient algorithms for ﬁ nding a maximum clique 3 . 1 A basic algorithm One standard approach for ﬁnding a maximum clique is based on the branch - and - bound depth - ﬁrst search method . Our algorithm begins with a small clique , and continues ﬁnding larger and larger cliques until one is found that can be veriﬁed to have the maximum size . More precisely , we maintain global variables Q , Q max , where Q consists of vertices of a current clique , Q max consists of vertices of the largest clique found so far . Let R ⊆ V consist of candidate vertices which may be added to Q . We begin the algorithm by letting Q : = ∅ , Q max : = ∅ , and R : = V ( the set of all vertices ) . We select a certain vertex p from R and add p to Q ( Q : = Q ∪ { p } ) . Then we compute R p : = R ∩ Γ ( p ) as the new set of candidate vertices . This procedure ( EXPAND ( ) ) is applied recursively while R p (cid:5) = ∅ . Note here that if | Q | + | R | ≤ | Q max | then Q ∪ R can contain only a clique that is smaller than or equal to | Q max | , hence searching for R can be pruned in this case . This is a basic bounding condition . When R p = ∅ is reached , Q constitutes a maximal clique . If Q is maximal and | Q | > | Q max | holds , Q max is replaced by Q . We then backtrack by removing p from Q and R . We select a new vertex p from the resulting R and continue the same procedure until R = ∅ . This is a well known basic algorithm for ﬁnding a maximum clique ( see , e . g . , ( 12 ; 10 ) ) and is shown in detail in Fig . 2 as Algorithm BasicMC . The process can be represented by a search 626 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 3 procedure BasicMC ( G = ( V , E ) ) begin global Q : = ∅ ; global Q max : = ∅ ; EXPAND ( V ) ; output Q max end { of BasicMC } procedure EXPAND ( R ) begin while R (cid:5) = ∅ do p : = a vertex in R ; if | Q | + | R | > | Q max | then Q : = Q ∪ { p } ; R p : = R ∩ Γ ( p ) ; if R p (cid:5) = ∅ then EXPAND ( R p ) else ( i . e . , R p = ∅ ) if | Q | > | Q max | then Q max : = Q ﬁ ﬁ Q : = Q − { p } else return ﬁ R : = R − { p } od end { of EXPAND } Fig . 2 . Algorithm BasicMC forest that is similar to Fig . 3 ( b ) . 3 . 2 Algorithm MCQ We present a very simple and efﬁcient algorithm MCQ ( 46 ) that is a direct extension of the previous BasicMC . 3 . 2 . 1 Pruning One of the most important points to improve the efﬁciency of BasicMC is to strengthen the bounding condition in order to prune unnecessary searching . For a set R of vertices , let χ ( R ) be the chromatic number of R , i . e . , the minimum number of colors so that all pairs of adjacent vertices are colored by different colors , and χ ′ ( R ) be an approximate chromatic number of R , i . e . , a number of colors so that all pairs of adjacent vertices are colored by different colors . Then we have that ω ( R ) ≤ χ ( R ) ≤ χ ′ ( R ) ≤ | R | . While obtaining χ ( R ) is also NP - hard , an appropriate χ ′ ( R ) could be a better upper bound of ω ( R ) than | R | , and might be obtained with low overhead . Here , we employ very simple greedy or sequential approximate coloring to the vertices of R , as introduced in ( 42 ; 12 ; 43 ) . Let positive integral numbers 1 , 2 , 3 , . . . stand for colors red , green , yellow , . . . Coloring is 627 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 4 Biomedical Engineering , Trends , Researches and Technologies also called Numbering . For each p ∈ R , sequentially from the ﬁrst vertex to the last , we assign a positive integral Number No [ p ] which is as small as possible . That is , when the vertices in R = { p 1 , p 2 , . . . , p m } are arranged in this order , ﬁrst let No [ p 1 ] = 1 , and subsequently , let No [ p 2 ] = 2 if p 2 ∈ Γ ( p 1 ) else No [ p 1 ] = 1 , . . . , and so on . After Numbers are assigned to all vertices in R , we sort these vertices in ascending order with respect to their Numbers . We select p as the last ( rightmost ) vertex in R ( at the 4th line in procedure EXPAND ( R ) in Fig . 2 ) , then No [ p ] = Max { No [ q ] | q ∈ R } , that is an approximate chromatic number of R . So , we replace the basic bounding condition : if | Q | + | R | > | Q max | then in Fig . 2 BasicMC , by the following new bounding condition : if | Q | + No [ p ] > | Q max | then . Numbering is applied every time prior to application of EXPAND ( ) . Since the greedy Numbering to R is carried out in O ( | R | 2 ) - time and is not so time - consuming , the new bounding condition can be very effective to reduce the search space with low overhead . 3 . 2 . 2 Initial sorting and simple numbering We have shown in ( 12 ) that both search space and overall running time are reduced when one sorts the vertices in an ascending order with respect to their degrees prior to the application of a branch - and - bound depth - ﬁrst search algorithm for ﬁnding a maximum clique . Carraghan and Pardalos ( 10 ) also employ a similar technique successfully . Therefore , at the beginning of our algorithm , we sort vertices in V in a descending order with respect to their degrees . This means that a vertex with the minimum degree is selected at the beginning of the while loop in EXPAND ( ) in Fig . 2 since the selection of p is from the last ( rightmost ) to the ﬁrst ( leftmost ) . Furthermore , we initially assign Numbers to the vertices in V simply , so that No [ V [ i ] ] = i for i ≤ ∆ ( G ) , where ∆ ( G ) is the maximum degree of G , and No [ V [ i ] ] = ∆ ( G ) + 1 for ∆ ( G ) + 1 ≤ i ≤ | V | . This initial Number has the desired property that No [ p ] ≥ ω ( V ) for any p in V while V (cid:5) = ∅ . Thus , this simple initial Number sufﬁces . This completes our explanation of the algorithm MCQ . See ( 46 ) for further details . 3 . 3 Algorithm MCR Algorithm MCR ( 48 ) is an improved version of MCQ , where improvements are mainly for the initial sorting of the vertices . First , we alter the order of the vertices in V = { V [ 1 ] , V [ 2 ] , . . . , V [ n ] } so that in a subgraph of G = ( V , E ) induced by a set of vertices V ′ = { V [ 1 ] , V [ 2 ] , . . . , V [ i ] } , it holds that V [ i ] always has the minimum degree in { V [ 1 ] , V [ 2 ] , . . . , V [ i ] } for 1 ≤ i ≤ | V | . While the resulting order is identical to that of ( 10 ) , it should be noted that time - consuming computation of the degree of vertices is carried out only at the beginning of MCR as in MCQ , and hence the overhead of the overall selection of vertices is very small , too . Here , the degrees of adjacent vertices are also taken into consideration . Numbering of the vertices is carried out in a similar way to MCQ , but more closely . The above considerations lead to an improved clique ﬁnding algorithm MCR . Example run We show an example run of MCR to an input graph G 1 given in Fig . 3 ( a ) . In the initial sorting , vertex G with the minimum degree is selected at ﬁrst . Then , vertices F and E follow after G . Now the remaining vertices A , B , C , D are of the same minimum degree , 628 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 5 G A B C D E F ( a ) An input graph G 1 1 , 2 , 3 , 4 , D , A , B , C , E , 5 , E , B , 1 , 2 , D , C , 1 , 2 , E , A , 1 , 1 , F , 6 , 6 G No : searching Q max = { A , B , C , D } ( b ) A search forest of G 1 No : 3 D 3 E 2 F √ √ √ √ Fig . 3 . Example run of MCR and then Numbering is applied to this set of vertices to have No [ A ] = 1 , No [ B ] = 2 , No [ C ] = 3 , No [ D ] = 4 . The other vertices are numbered as No [ E ] = 4 + 1 = 5 , No [ F ] = 6 ( = ∆ ( G 1 ) + 1 ) , No [ G ] = 6 . In addition , we have that Q max = { A , B , C , D } ( of size 4 ) , since every degree of the vertices in the induced subgraph G 1 ( { A , B , C , D } ) is 3 = 4 − 1 . The result of the initial sorting of vertices is shown at the top of Fig . 3 ( b ) and the corresponding numbers are just below these vertices . Subsequently , in EXPAND ( ) , the rightmost vertex G is selected to have Q = { G } , R G = Γ ( G ) = { A , E , F } . These vertices A , E , F are numbered 1 , 1 , 2 as shown in the second row of Fig . 3 ( b ) . 629 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 6 Biomedical Engineering , Trends , Researches and Technologies Here , | Q | + No [ F ] = | { G } | + 2 = 3 < | Q max | = 4 , then prune ( √ : checkmark in Fig . 3 ( b ) ) . The searching proceeds from the right to the left as shown in Fig . 3 ( b ) . As a result , the maximum clique in G 1 is Q max = { A , B , C , D } . 3 . 4 Algorithm MCS Algorithm MCS ( 39 ; 49 ; 50 ) is a further improved version of MCR . 3 . 4 . 1 New approximate coloring When vertex r is selected , if No [ r ] ≤ | Q max | − | Q | then it is not necessary to search from vertex r by the bounding condition , as mentioned in Sect . 3 . 2 . 1 . The number of vertices to be searched can be reduced if the Number No [ p ] of vertex p for which No [ p ] > | Q max | − | Q | can be changed to a value less than or equal to | Q max | − | Q | . When we encounter such vertex p with No [ p ] > | Q max | − | Q | ( de f = No th ) ( No th stands for No threshold ) , we attempt to change its Number in the following manner ( 16 ) . Let No p denote the original value of No [ p ] . [ Re - NUMBER p ] 1 ) Attempt to ﬁnd a vertex q in Γ ( p ) such that No [ q ] = k 1 ≤ No th , with | C k 1 | = 1 . 2 ) If such q is found , then attempt to ﬁnd Number k 2 such that no vertex in Γ ( q ) has Number k 2 . 3 ) If such number k 2 is found , then change the Numbers of q and p so that No [ q ] = k 2 and No [ p ] = k 1 . ( If no vertex q with Number k 2 is found , nothing is done . ) When the vertex q with Number k 2 is found , No [ p ] is changed from No p to k 1 ( ≤ No th ) ; thus , it is no longer necessary to search from p . 3 . 4 . 2 Adjunct ordered set of vertices for approximate coloring The ordering of vertices plays an important role in the algorithm as demonstrated in ( 12 ; 10 ; 46 ; 48 ) . In particular , the procedure Numbering strongly depends on the order of vertices , since it is a sequential coloring . In our new algorithm , we sort the vertices in the same way as in MCR ( 48 ) at the ﬁrst stage . However , the vertices are disordered in the succeeding stages owing to the application of Re - NUMBER . In order to avoid this difﬁculty , we employ another adjunct ordered set V a of vertices for approximate coloring that preserves the order of vertices appropriately sorted in the ﬁrst stage . Such a technique was ﬁrst introduced in ( 38 ) . We apply Numbering to vertices from the ﬁrst ( leftmost ) to the last ( rightmost ) in the order maintained in V a , while we select a vertex in the ordered set R for searching , beginning from the last ( rightmost ) vertex and continuing up to the ﬁrst ( leftmost ) vertex . An improved MCR obtained by introducing only the technique ( 38 ) in this section is named MCR * . 3 . 4 . 3 Reconstruction of the adjacency matrix Each graph is stored as an adjacency matrix in the computer memory . Sequential Numbering is carried out according to the initial order of vertices in the adjunct ordered set V a , as described in Sect . 3 . 4 . 2 . Taking this into account , we rename the vertices of the graph and reconstruct the adjacency matrix so that the vertices are consecutively ordered in a manner identical to the initial order of vertices obtained at the beginning of MCR . The above - mentioned reconstruction of the adjacency matrix ( 41 ) results in a more effective use of the cache memory . The new algorithm obtained by introducing all the techniques described in Sects . 3 . 4 . 1 – 3 . 4 . 3 in MCR is named MCS . Table 1 shows the running time required to solve some DIMACS 630 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 7 dfmax New ILOG MCQ MCR MCS Graph ( 18 ) ( 33 ) ( 35 ) ( 46 ) ( 48 ) ( 50 ) brock400 1 22 , 051 8 , 401 1 , 783 1 , 771 693 block800 1 > 10 5 > 10 , 667 18 , 002 17 , 789 9 , 347 MANN a27 > 10 5 > 2 , 232 14 5 . 4 2 . 5 0 . 8 MANN a45 > 10 5 > 10 , 667 4 , 646 3 , 090 281 p hat500 - 2 133 96 24 4 . 0 3 . 1 0 . 7 p hat1000 - 2 > 10 5 12 , 478 2 , 844 2 , 434 221 san200 0 . 9 3 42 , 648 135 10 0 . 16 0 . 06 san400 0 . 7 2 > 10 5 113 50 1 . 0 0 . 3 0 . 1 san400 0 . 9 1 > 10 5 1 , 259 46 . 3 3 . 4 0 . 1 gen200 p0 . 9 44 48 , 262 5 . 39 0 . 47 gen400 p0 . 9 55 5 , 846 , 951 58 , 431 gen400 p0 . 9 65 > 2 . 5 × 10 7 151 , 597 C250 . 9 > 10 5 44 , 214 3 , 257 Table 1 . Comparison of the running time [ sec ] benchmark graphs ( 18 ) by representative algorithms dfmax ( 18 ) , New ( 33 ) , ILOG ( 35 ) , MCQ , MCR , and MCS , taken from ( 50 ) . ( 10 5 seconds ≃ 1 . 16 days ) . Our user time ( T 1 ) in ( 50 ) for DIMACS benchmark instances : r100 . 5 , r200 . 5 , r300 . 5 , r400 . 5 , and r500 . 5 are 1 . 57 × 10 − 3 , 4 . 15 × 10 − 2 , 0 . 359 , 2 . 21 , and 8 . 47 seconds , respectively . ( Correction : These values described in the Appendix of ( 50 ) should be corrected as shown above . However , other values in ( 50 ) are computed based on the above correct values , hence other changes in ( 50 ) are not necessary . ) While MCR * obtained by introducing the adjunct set V a of vertices for approximate coloring in Sect . 3 . 4 . 2 is almost always more efﬁcient than MCR ( 38 ) , combination of all the techniques in Sects . 3 . 4 . 1 – 3 . 4 . 3 makes it much more efﬁcient to have MCS . The aim of the present study is to develop a faster algorithm whose use is not conﬁned to any particular type of graphs . We can reduce the search space by sorting vertices in R in descending order with respect to their degrees before every application of approximate coloring , and hence reduce the overall running time for dense graphs ( 36 ; 21 ) , but with the increase of the overall running time for nondense graphs . Appropriately controlled application of repeated sorting of vertices can make the algorithm more efﬁcient for wider classes of graphs ( 21 ) . Parallel processing for maximum - clique - ﬁnding is very promising in practice ( 41 ; 53 ) . For practical applications , weighted graphs becomes more important . Algorithms for ﬁnding maximum - weighted cliques have also been developed . For example , see ( 45 ; 32 ; 30 ) for vertex - weighted graphs and ( 40 ) for edge - weighed graphs . 4 . Ef ﬁ cient algorithm for generating all maximal cliques In addition to ﬁnding only one maximum clique , generating all maximal cliques is also important and has many diverse applications . In this section , we present a depth - ﬁrst search algorithm CLIQUES ( 44 ; 47 ) for generating all maximal cliques of an undirected graph G = ( V , E ) , in which pruning methods are employed as in Bron and Kerbosch’s algorithm ( 7 ) . All maximal cliques generated are output in a tree - like form . 631 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 8 Biomedical Engineering , Trends , Researches and Technologies 4 . 1 Algorithm CLIQUES The basic framework of CLIQUES is almost the same as BasicMC without the basic bounding condition . Here , we describe two methods to prune unnecessary parts of the search forest , which happened to be the same as in the Bron - Kerbosch algorithm ( 7 ) . We regard the set SUBG ( = V at the beginning ) as an ordered set of vertices , and we continue to generate maximal cliques from vertices in SUBG step by step in this order First , let FINI be a subset of vertices of SUBG that have been already processed by the algorithm . ( FINI is short for “ﬁnished” . ) Then we denote by CAND the set of remaining candidates for expansion : CAND = SUBG − FINI . So , we have SUBG = FINI ∪ CAND ( FINI ∩ CAND = ∅ ) , where FINI = ∅ at the beginning . Consider the subgraph G ( SUBG q ) with SUBG q = SUBG ∩ Γ ( q ) , and let SUBG q = FINI q ∪ CAND q ( FINI q ∩ CAND q = ∅ ) , where FINI q = FINI ∩ Γ ( q ) and CAND q = CAND ∩ Γ ( q ) . Then only the vertices in CAND q can be candidates for expanding the complete subgraph Q ∪ { q } to ﬁnd new larger cliques . Secondly , given a certain vertex u ∈ SUBG , suppose that all the maximal cliques containing Q ∪ { u } have been generated . Then every new maximal clique containing Q , but not Q ∪ { u } , must contain at least one vertex q ∈ SUBG − Γ ( u ) . Taking the previously described pruning method also into consideration , the only search subtrees to be expanded are from vertices in ( SUBG − SUBG ∩ Γ ( u ) ) − FINI = CAND − Γ ( u ) . Here , in order to minimize | CAND − Γ ( u ) | , we choose such vertex u ∈ SUBG to be the one which maximizes | CAND ∩ Γ ( u ) | . This is essential to establish the optimality of the worst - case time - complexity of CLIQUES . Our algorithm CLIQUES ( 47 ) for generating all maximal cliques is shown in Fig . 4 . Here , if Q is a maximal clique that is found at statement 2 , then the algorithm only prints out a string of characters “ clique , instead of Q itself at statement 3 . Otherwise , it is impossible to achieve the worst - case running time of O ( 3 n / 3 ) for an n - vertex graph . Instead , in addition to printing “clique” at statement 3 , we print out q followed by a comma at statement 7 every time q is picked out as a new element of a larger clique , and we print out a string of characters “ back , ” at statement 12 after q is moved from CAND to FINI at statement 11 . We can easily obtain a tree representation of all the maximal cliques from the sequence printed by statements 3 , 7 , and 12 . The output in a tree - like format is also important practically , since it saves space in the output ﬁle . 4 . 2 Time - complexity of CLIQUES We have proved that the worst - case time - complexity is O ( 3 n / 3 ) for an n - vertex graph ( 47 ) . This is optimal as a function of n , since there exist up to 3 n / 3 cliques in an n - vertex graph ( 29 ) . The algorithm is also demonstrated to run fast in practice by computational experiments . Table 2 shows the running time required to solve some DIMACS benchmark graphs by representative algorithms CLIQUE ( 11 ) , AMC ( 24 ) , AMC * ( 24 ) , and CLIQUES , taken from ( 47 ) . For practical applications , enumeration of pseudo cliques sometimes becomes more important ( 52 ) . 632 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 9 procedure CLIQUES ( G ) begin 1 : EXPAND ( V , V ) end of CLIQUES procedure EXPAND ( SUBG , CAND ) begin 2 : if SUBG = ∅ 3 : then print ( “ clique , ” ) 4 : else u : = a vertex u in SUBG which maximizes | CAND ∩ Γ ( u ) | ; 5 : while CAND − Γ ( u ) (cid:5) = ∅ 6 : do q : = a vertex in ( CAND − Γ ( u ) ) ; 7 : print ( q , “ , ” ) ; 8 : SUBG q : = SUBG ∩ Γ ( q ) ; 9 : CAND q : = CAND ∩ Γ ( q ) ; 10 : EXPAND ( SUBG q , CAND q ) ; 11 : CAND : = CAND − { q } ; 12 : print ( “ back , ” ) od ﬁ end of EXPAND Fig . 4 . Algorithm CLIQUES CLIQUE AMC AMC * CLIQUES Graph ( 11 ) ( 24 ) ( 24 ) ( 47 ) brock200 2 181 . 4 75 . 2 35 . 9 0 . 7 johnson16 - 2 - 4 908 151 153 4 keller4 3 , 447 1 , 146 491 5 p hat300 - 2 > 86 , 400 16 , 036 4 , 130 100 Table 2 . Comparison of the running time [ sec ] 5 . Applications to bioinformatics 5 . 1 Analysis of protein structures In this subsection , we show applications of maximum clique algorithms to the following three problems on protein structure analysis : ( i ) protein structure alignment , ( ii ) protein side - chain packing , ( iii ) protein threading . Since there are many references on these problems , we only cite references that present the methods shown here . Most of other relevant references can be reached from those references . Furthermore , we present here only the deﬁnitions of the problems and reductions to clique problems . Readers interested in details such as results of computational experiments are referred to the original papers ( 1 ; 2 ; 3 ; 4 ; 8 ) . 5 . 1 . 1 Protein structure alignment Comparison of protein structures is very important for understanding the functions of proteins because proteins with similar structures often have common functions . Pairwise comparison of proteins is usually done via protein structure alignment using some scoring scheme , where an alignment is a mapping of amino acids between two proteins . Because of 633 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 10 Biomedical Engineering , Trends , Researches and Technologies G ( V , E ) P Q p 1 p 2 p 3 q 3 q 4 q 2 q 1 ( ) , p 1 q 1 ( ) , p 2 q 1 ( ) , p 3 q 1 ( ) , p 1 q 2 ( ) , p 1 q 3 ( ) , p 1 q 4 ( ) , p 3 q 2 ( ) , p 3 q 3 ( ) , p 3 q 4 Fig . 5 . Reduction from protein structure alignment to maximum clique . Maximum clique shown by bold lines ( right ) corresponds to protein structure alignment shown by dotted lines ( left ) . its importance , many methods have been proposed for protein structure alignment . However , most existing methods are heuristic ones in which optimality of the solution is not guaranteed . Bahadur et al . developed a clique - based method for computing structure alignment under some local similarity measure ( 2 ) . Let P = ( p 1 , p 2 , . . . , p m ) be a sequence of three - dimensional positions of amino acids ( precisely , positions of C α atoms ) in a protein . Let Q = ( q 1 , q 2 , . . . , q n ) be a sequence of positions of amino acids of another protein . For two points x and y , | x − y | denotes the Euclidean distance between x and y . Let f ( x ) be a function from the set of non - negative reals to the set of reals no less than 1 . 0 . We call a sequence of pairs M = ( ( p i 1 , q i 1 ) , . . . , ( p i l , q i l ) ) an alignment under non - uniform distortion if the following conditions are satisﬁed : – i k < i h and j k < j h hold for all k < h , – ( ∀ k ) ( ∀ h (cid:5) = k ) (cid:2) 1 f ( r ) < | q j h − q j k | | p j h − p j k | < f ( r ) (cid:3) , where r = min { | q j h − q j k | , | p j h − p j k | } . Then , protein structure alignment is deﬁned as the problem of ﬁnding a longest alignment ( i . e . , l is the maximum ) . It is known that protein structure alignment is NP - hard under this deﬁnition . This protein structure alignment problem can be reduced to the maximum clique problem in a simple way ( see Fig . 5 ) . we construct an undirected graph G ( V , E ) by V = { ( p i , q j ) | i = 1 , . . . , m , j = 1 , . . . , n } , E = { { ( p i , q j ) , ( p k , q h ) } | i < k , j < h , 1 f ( r ) < | q h − q j | | p k − p i | < f ( r ) } . Then , it is straight - forward to see that a maximum clique corresponds to a longest alignment . 5 . 1 . 2 Protein side - chain packing The protein side - chain packing problem is , given an amino acid sequence and spatial information on the main chain , to ﬁnd side - chain conformation with the minimum potential energy . In most cases , it is deﬁned as a problem of seeking a set of ( χ 1 , χ 2 , . . . ) angles whose potential energy becomes the minimum , where positions of atoms in the main chain are ﬁxed . This problem is important for prediction of detailed structures of proteins because such prediction methods as protein threading cannot determine positions of atoms in the side - chains . It is known that protein side - chain packing is NP - hard and thus various heuristic methods have 634 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 11 been proposed . Here , we brieﬂy review a clique - based approach to protein side - chain packing ( 2 ; 3 ; 8 ) . Let R = { r 1 , . . . , r n } be the set of amino acid residues in a protein . Here , we only consider χ 1 angles and then assume that positions of atoms in a side - chain are rotated around the χ 1 axis . Let r i , k be the i th residue whose side - chain atoms are rotated by ( 2 π k ) / K radian , where we can modify the problem and method so that the rotation angles can take other discrete values . We say that residue r i , k collides with the main chain if the minimum distance between the atoms in r i , k and the atoms in the main chain is less than a threshold L 1 ˚A . We say that residue r i , k collides with residue r j , h if the minimum distance between the atoms in r i , k and the atoms in r j , h is less than L 2 ˚A . We deﬁne an undirected graph G ( V ; E ) by V = { r i , k | r i , k does not collide with the main chain } , E = { { r i , k , r j , h } | r i , k does not collide with r j , h } . Then , it is straight - forward to see that a clique with size n corresponds to a consistent conﬁguration of side chains ( i . e . , side - chain conformation with no collisions ) . We can extend this reduction so that potential energy can be taken into account by using the maximum edge - weighted clique problem . 5 . 1 . 3 Protein threading Protein threading is one of the prediction methods for three - dimensional protein structures . The purpose of protein threading is to seek for a protein structure in a database which best matches a given protein sequence ( whose structure is to be predicted ) using some score function . In order to evaluate the extent of match , it is required to compute an optimal alignment between an amino acid sequence S = s 1 s 2 . . . s n and a known protein structure P = ( p 1 , p 2 , . . . , p m ) , where s i and p j denote the i th amino acid and the j th residue position , respectively . As in protein structure alignment , a sequence of pairs ( ( s i 1 , p j 1 ) , ( s i 2 , p j 2 ) , . . . , ( s i l , p j l ) ) is called an alignment ( or , a threading ) between S and P if i k < i h and j k < j h hold for all k < h . Let g ( s i k , s i h , p j k , p j h ) give a score ( e . g . , pseudo energy ) between residue positions of p j k and p j h when amino acids s i k and s i h are assigned to positions of p j k and p j h , respectively . Then , protein threading is deﬁned as a problem of ﬁnding an optimal alignment that minimizes the pseudo energy : ∑ k < h g ( s i k , s i h , p j k , p j h ) , where we ignore gap penalties for the simplicity . This protein threading problem can be reduced to the maximum edge - weighted clique problem ( 1 ; 4 ) , which seeks for a clique that maximizes the total weight of edges in the clique . From an instance of protein threading , we construct an undirected graph G ( V , E ) by V = { ( s i , p j ) | i = 1 , . . . , n , j = 1 , . . . , m } , E = { { ( s i , p j ) , ( s k , p h ) } | i < k , j < h } , where the weight of an edge is given by − g ( s i , s k , p j , p h ) . It is straight - forward to see that a maximum edge - weight clique corresponds to an optimal alignment . Though this clique - based approach is not necessarily the best for protein threading , the results of ( 1 ; 4 ) suggest that it is useful for protein threading with certain constraints . 635 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 12 Biomedical Engineering , Trends , Researches and Technologies 5 . 2 Data mining for related genes in a biomedical database In this subsection , we present an application of enumerating cliques . Readers interested in details are referred to the original paper ( 25 ) . Progress in the life sciences cannot be made without integrating biomedical knowledge on numerous genes in order to help formulate hypotheses on the genetic mechanisms behind various biological phenomena , including diseases . There is thus a strong need for a way to automatically and comprehensively search biomedical databases for related genes , such as genes in the same families and genes encoding components of the same pathways . We constructed a graph whose vertices ( nodes ) were gene or disease pages , and edges were the hyperlink connections between those pages in the Online Mendelian Inheritance in Man ( OMIM ) database ( 25 ; 26 ) . This work was based on the assumption that the structures of hyperlink connections correspond to the structural features of biological systems . Clique enumeration approach has been applied to a relational graph based on the assumption that relevant relationships are reﬂected in completely interconnected subgraphs ( cliques ) or nearly completely interconnected subgraphs ( pseudo - cliques ) . We address the extraction of related genes by searching for densely connected subgraphs in a biomedical relational graph . Sets of related genes are detected by enumerating densely - connected subgraphs modeled as cliques ( 47 ) or pseudo - cliques ( 52 ) . We obtained over 20 , 000 sets of related genes ( called ‘gene modules’ ) by enumerating cliques computationally . Table 3 shows gene sets included in typical large gene modules . The gene module in the ﬁrst row is constituted by a family of chemokine genes , and the gene module in the second comprises NF - κ B family genes ( including RelA and RelB ) and genes that form complexes with them ( I κ B ) . The gene module in the third row is made up of ‘DNA repair’ - related genes . The BRCA1 - associated proteins ; the BLM , MSH6 , MSH2 , and MLH1 proteins ; and subunits of the RFC complex are involved in DNA repair . The genes in the module in the fourth row are related to general transcription factor ( GTF ) protein complexes . The gene module in the bottom row is associated with the signal transduction pathway of the inﬂammatory response . TNF receptor - associated factor 2 ( TRAF2 ) is a protein that interacts with TNF receptors and is required for signal transduction . The MAP kinase kinase kinase 14 ( MAP3K14 ) gene in this module encodes a protein that simulates NF - κ B activity by binding to the TRAF2 gene product . The gene modules thus comprise various types of related genes including gene families , complexes , and pathways . For applying gene modules to disease mechanism analysis , we assembled gene modules associated with the metabolic syndrome as an example of a typical multifactorial disease comprising obesity , diabetes , hyperlipidemia , and hypertension . The number of gene modules associated with diabetes , hyperlipidemia , hypertension , and obesity were 110 , 16 , 34 , and 28 , respectively . There were no overlaps among the modules . Then a total of 188 modules and 124 genes contained were identiﬁed . The 10 most frequent genes in the 188 modules are listed in Table 4 along with the numbers of times they were found in the modules ( i . e . , cliques ) of various sizes . As shown in the table , INS gene and LEP gene are Gene module Attribute { PPBP , SCYB6 , GRO2 , GRO3 , IL8 , SCYB10 , IFNG , GRO1 , PF4 , SCYB5 , MIG , SCYB11 } Family { NFKBIA , NFKB1 , NFKB2 , RELA , REL , CHUK , MAP3K7 , IKBKB , NFKBIB , MAP3K14 , RELB } Family & Complex { RFC4 , RFC1 , BRCA1 , MSH2 , MLH1 , APC , RFC2 , MSH6 , MRE11A , BLM } Complex { POLR2A , GTF2E1 , GTF2B , GTF2F1 , GTF2H1 , TAF1 , TAF10 , GTF2A2 , GTF2A1 } Complex { TNFRSF5 , NFKB1 , TNF , TNFRSF1A , TNFRSF1B , CHUK , TRAF2 , MAP3K14 } Pathway Table 3 . Typical large gene modules computationally extracted as pseudo - cliques . 636 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 13 Size Rank Gene Total 2 3 4 5 6 7 1 INS 29 2 6 2 18 1 0 2 LEP 27 2 6 4 12 3 0 3 POMC 16 1 0 3 10 2 0 4 PCSK1 13 0 1 2 9 1 0 5 IRS2 12 0 0 0 11 1 0 5 IGF1 12 0 1 0 10 1 0 5 INSR 12 3 4 1 4 0 0 8 IRS1 11 0 0 1 9 1 0 9 MC4R 10 0 0 1 7 2 0 10 FGF1 9 0 0 1 4 2 2 Table 4 . The 10 most frequent genes in the 188 extracted modules associated with the metabolic syndrome . the top and the 2nd , respectively . The modules of size 6 including INS gene or LEP gene were { Obesity , LEP , MC4R , POMC , AGRP , LEPR } , { Obesity , LEP , MC4R , POMC , AGRP , PCSK1 } and { Diabetes , LEP , IGF1 , IRS1 , INS , IRS2 } . Each module contains biologically plausible genes related to obesity or diabetes . By combining the 188 modules and 124 genes using the correspondence analysis , we obtained a coherent holistic picture helpful for interpreting relations among genes ( 25 ) . The comprehensive extraction of gene modules can be a potential aid to researchers in the biomedical sciences by providing a systematic methodology for interpreting relationships among genes and biological phenomena . 6 . Conclusion We have presented efﬁcient algorithms for ﬁnding maximum and maximal cliques , and shown our successful application to bioinformatics . It is expected that these algorithms can be convenient and effective tools for much more problems in bioinformatics . 7 . Acknowledgments We should like to express our sincere gratitude to our many colleagues and ( former ) students who worked with us in this research . Many helpful comments by E . Harley are appreciated . We wish to thank P . M . Pardalos and his colleagues for reviewing our earlier works including ( 43 ) , ( 44 ) in their surveys ( 34 ) , ( 5 ) . Our earlier works received considerable attention by their reviews . Thanks are also to D . S . Johnson and M . Trick for their efforts in organizing the Second DIMACS Implementation Challenge for Cliques , Coloring , and Satisﬁability ( 18 ) . They made it easier for us to compare the results of different algorithms carried out on various computers . This research was partially supported by Grants - in - Aid for Scientiﬁc Research Nos . 19500010 , 21300047 , 22500009 , 22240009 , and many others from the Ministry of Education , Culture , Sports , Science and Technology , Japan , a Special Grant for the Strategic Information and Communications R & D Promotion Programme ( SCOPE ) Project from the Ministry of Internal Affairs and Communications , Japan , and the Research Fund of the University of Electro - Communications to the Advanced Algorithms Research Laboratory . The research was also provided a grant by the Funai Foundation for Information Technology . 637 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 14 Biomedical Engineering , Trends , Researches and Technologies 8 . References [ 1 ] Akutsu , T . , Hayashida , M . , Bahadur D . K . C , Tomita , E . , Suzuki , J . , Horimoto , K . : Dynamic programming and clique based approaches for protein threading with proﬁles and constraints , IEICE Trans . on Fundamentals of Electronics , Communications and Computer Sciences , E89 - A , 1215 - 1222 ( 2006 ) . The preliminary version was presented In : Akutsu , T . , Hayashida , M . , Tomita , E . , Suzuki , J . , Horimoto , K . : Protein threading with proﬁles and constraints , Proc . IEEE Symp . on Bioinformatics and Bioengineering ( BIBE 2004 ) , 537 - 544 ( 2004 ) [ 2 ] Bahadur D . K . C . , Akutsu , T . , Tomita , E . , Seki , T . , Fujiyama , A . : Point matching under non - uniform distortions and protein side chain packing based on an efﬁcient maximum clique algorithm , Genome Informatics , 13 , 143 – 152 ( 2002 ) [ 3 ] Bahadur D . K . C , Tomita , E . , Suzuki , J . , Akutsu , T . : Protein side - chain packing problem : A maximum edge - weight clique algorithmic approach , J . Bioinformatics and Computational Biology , 3 , pp . 103 - 126 ( 2005 ) [ 4 ] Bahadur , D . K . C . , Tomita , E . , Suzuki , J . , Horimoto , K . , Akutsu , T . : Protein threading with proﬁles and distance constraints using clique based algorithms , J . Bioinformatics and Computational Biology , 4 , 19 – 42 ( 2006 ) [ 5 ] Bomze , I . M . , Budinich , M . , Pardalos , P . M . , Pelillo M . : The maximum clique problem , In ; Du , D . - Z . , Pardalos , P . M . ( Eds . ) , Handbook of Combinatorial Optimization , Supplement vol . A , Kluwer Academic Publishers , 1 – 74 ( 1999 ) [ 6 ] Bradde , S . , Braunstein , A . , Mahmoudi , H . , Tria , F . , Weigt , M . , Zecchina , R . : Aligning graphs and ﬁnding substructures by a cavity approach , Europhisics Letters , 89 ( 2010 ) [ 7 ] Bron , C . , Kerbosch , J . : Algorithm 457 , Finding all cliques of an undirected graph , Comm . ACM , 16 , 575 – 577 ( 1973 ) [ 8 ] Brown , J . B . , Bahadur , D . K . C . , Tomita , E . , Akutsu , T . : Multiple methods for protein side chain packing using maximum weight cliques , Genome Informatics , 17 ( 1 ) , 3 – 12 ( 2006 ) [ 9 ] Butenko , S . , Wilhelm , W . E . : Clique - detection models in computational biochemistry and genomics - Invited Review - , European J . Operational Research , 173 , 1 – 17 ( 2006 ) [ 10 ] Carraghan , R . , Pardalos , P . M . : An exact algorithm for the maximum clique problem , Operations Research Letters , 9 , 375 – 382 ( 1990 ) [ 11 ] Chiba , N . , Nishizeki , T . : Arboricity and subgraph listing algorithms , SIAM J . Comput . , 14 , 210 – 223 ( 1985 ) [ 12 ] Fujii , T . , Tomita , E . : On efﬁcient algorithms for ﬁnding a maximum clique , Technical Report of IECE , AL81 - 113 , 25 – 34 ( 1982 ) [ 13 ] Fukagawa , D . , Tamura , T . , Takasu , A . , Tomita , E . , Akutsu , T . : A Clique - based method for the edit distance between unordered trees and its application to analysis of glycan structure , BMC Bioinformatics , Suppl . for APBC 2011 ( to appear ) [ 14 ] Han , K . , Cui , G . , Chen , Y . : Identifying functional groups by ﬁnding cliques and near - cliques in protein interaction networks , Proc . 2007 Frontiers in the Convergence of Bioscience and Information Technologies , 159 – 164 ( 2007 ) [ 15 ] Hattori , M . , Okuno , Y . Goto , S . , Kanehisa , M . : Development of a chemical structure comparison method for integrated analysis of chemical and genomic information in the metabolic pathways , J . American Chemical Society , 125 , 11853 – 11865 ( 2003 ) [ 16 ] Higashi , T . , Tomita , E . : A more efﬁcient algorithm for ﬁnding a maximum clique based on an improved approximate coloring , Technical Report of the University of Electro - Communications , UEC - TR - CAS5 ( 2006 ) [ 17 ] Hotta , K . , Tomita , E . , Takahashi , H . : A view - invariant human face detection method 638 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Ef ﬁ cient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics 15 based on maximum cliques . Trans . IPSJ , 44 , SIG14 ( TOM9 ) , 57 – 70 ( 2003 ) [ 18 ] Johnson , D . S . , Trick , M . A . ( Eds . ) : Cliques , Coloring , and Satisﬁability , DIMACS Series in Discrete Mathematics and Theoretical Computer Science , vol . 26 , American Mathematical Society ( 1996 ) [ 19 ] Karp , R . : Reducibility among combinatorial problems , In ; Miller , R . E . , Thatcher , J . W . ( Eds . ) Comlexity of Computer Computations , Plenum Press , New York , 85 – 103 ( 1972 ) [ 20 ] Kobayashi , S . , Kondo , T . , Okuda , K . , Tomita , E . : Extracting globally structure free sequences by local structure freeness . In : Chen , J . , Reif , J . ( Eds . ) , Proc . Ninth International Meeting on DNA Based Computers , 206 ( 2003 ) [ 21 ] Kohata , Y . , Nishijima , T . , Tomita , E . , Fujihashi , C . , Takahashi , H . : Efﬁcient algorithms for ﬁnding a maximum clique , Technical Report of IEICE , COMP89 - 113 , 1 – 8 ( 1990 ) [ 22 ] Li , X . , Wu , M . , Kwoh , C . - K . Ng , S . - K . : Computational approaches for detecting protein complexes from protein interaction networks : a survey , BMC Genomics , 11 ( 2010 ) [ 23 ] Liu , G . , Wong , L . , Chua , H . - N . : Complex discovery from weighted PPI networks , Bioinformatics , 1891 – 1897 ( 2009 ) [ 24 ] Makino , K . , Uno , T . : New algorithms for enumerating all maximal cliques , SWAT 2004 , Lecture Notes in Computer Science , 3111 , 260 – 272 ( 2004 ) [ 25 ] Matsunaga , T . , Yonemori , C . , Tomita , E . , Muramatsu , M . : Clique - based data mining for related genes in a biomedical database , BMC Bioinformatics , 10 : 205 ( 2009 ) [ 26 ] Matsunaga , T . , Kuwata , S . , Muramatsu , M . : Computational gene knockout reveals transdisease - transgene association structure , J . Bioinformatics and Computational Biology , 8 , 843 - 866 ( 2010 ) [ 27 ] Mohseni - Zadeh , S . , Br´ezellec , P . , Risler , J . - L . : Cluster - C , An algorithm for the large - scale clustering of protein sequences based on the extraction of maximal cliques , Comput . Biol . and Chemist . , 28 , 211 - 218 ( 2004 ) [ 28 ] Mohseni - Zadeh , S . , Louis , A . , Br´ezellec , P . , Risler , J . - L . : PHYTOPROT : a database of clusters of plant proteins , Nucleic Acids Res . , 32 D351 - D353 ( 2004 ) [ 29 ] Moon , J . W . , Moser , L . : On cliques in graphs , Israel J . Math . , 3 , 23 – 28 ( 1965 ) [ 30 ] Nakamura , T . , Tomita , E . : Efﬁcient algorithms for ﬁnding a maximum clique with maximum vertex weight , Technical Report of the University of Electro - Communications , UEC - TR - CAS3 ( 2005 ) [ 31 ] Nakui , Y . , Nishino , T . , Tomita , E . , Nakamura , T . : On the minimization of the quantum circuit depth based on a maximum clique with maximum vertex weight . Technical Report of RIMS , 1325 , Kyoto University , 45 – 50 ( 2003 ) [ 32 ] ¨Osterg˚ard , P . R . J . : A fast algorithm for the maximum - weight clique problem , Nordic J . Computing , 8 , 424 - 436 ( 2001 ) [ 33 ] ¨Osterg˚ard , P . R . J . : A fast algorithm for the maximum clique problem , Discrete Applied Math . , 120 , 197 – 207 ( 2002 ) [ 34 ] Pardalos , P . M . , Xue , J . : The maximum clique problem , J . Global Optimization , 4 , 301 – 328 ( 1994 ) [ 35 ] R´egin , J . - C . : Using constraint programming to solve the maximum clique problem , Principles and Practice of Constraint Programming , Lecture Notes in Computer Science , 2833 , 634 - 648 ( 2003 ) [ 36 ] Shindo , M . , Tomita , E . , Maruyama , Y . : An efﬁcient algorithm for ﬁnding a maximum clique , Technical Report of IEC , CAS86 - 5 , 33 – 40 ( 1986 ) [ 37 ] Strickland , D . M . , Barnes , E . , Sokol , J . S . : Optimal protein structure alignment using maximum cliques , Operations Research , 53 , 389 – 402 ( 2005 ) [ 38 ] Sutani , Y . , Tomita , E . : Computational experiments and analyses of a more efﬁcient 639 Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics www . intechopen . com 16 Biomedical Engineering , Trends , Researches and Technologies algorithm for ﬁnding a maximum clique , Technical Report of IPSJ , 2005 - MPS - 57 , 45 – 48 ( 2005 ) [ 39 ] Sutani , Y . , Higashi , T . , Tomita , E . Takahashi , S . , Nakatani , H . : A faster branch - and - bound algorithm for ﬁnding a maximum clique , Technical Report of IPSJ , 2006 - AL - 108 , 79 – 86 ( 2006 ) [ 40 ] Suzuki , J . , Tomita , E . , Seki , T . : An algorithm for ﬁnding a maximum clique with maximum edge - weight and computational experiments , Technical Report of IPSJ , 2002 - MPS - 42 , 45 – 48 ( 2002 ) [ 41 ] Takahashi , S . , Tomita , E . : Parallel computation for ﬁnding a maximum clique on shared memory computers , Technical Report of the University of Electro - Communications , UEC - TR - CAS3 ( 2007 ) [ 42 ] Tomita , E . , Yamada , M . : An algorithm for ﬁnding a maximum complete subgraph , Conference Records of the National Convention of IECE 1978 , 8 ( 1978 ) [ 43 ] Tomita , E . , Kohata , Y . , Takahashi , H . : A simple algorithm for ﬁnding a maximum clique , Technical Report of the University of Electro - Communications , UEC - TR - C5 ( 1 ) ( 1988 ) [ 44 ] Tomita , E . , Tanaka , A . Takahashi , H . : The worst - case time complexity for ﬁnding all maximal cliques , Technical Report of the University of Electro - communications , UEC - TR - C5 ( 2 ) ( 1988 ) [ 45 ] Tomita , E . Wakai , Y . , Imamatsu , K . : An efﬁcient algorithm for ﬁnding a maximum weight clique and its experimental evaluations , Technical Report of IPSJ , 1999 - MPS - 27 , 33 – 36 ( 1999 ) [ 46 ] Tomita , E . , Seki , T . : An efﬁcient branch - and - bound algorithm for ﬁnding a maximum clique , Discrete Math . and Theoret . Comput . Sci . , Lecture Notes in Computer Science , 2731 , 278 – 289 ( 2003 ) [ 47 ] Tomita , E . , Tanaka , A . Takahashi , H . : The worst - case time complexity for generating all maximal cliques and computational experiments ( An invited paper in the Special Issue on COCOON 2004 ) , Theoret . Comput . Sci . , 363 , 28 – 42 ( 2006 ) ( Awarded “Theoretical Computer Science Top Cited Article 2005 - 2010” by Elsevier . ) [ 48 ] Tomita , E . , Kameda , T . : An efﬁcient branch - and - bound algorithm for ﬁnding a maximum clique with computational experiments , J . Global Optimization , 37 , 95 – 111 ( 2007 ) , J . Global Optimization , 44 , 311 ( 2009 ) [ 49 ] Tomita , E . : The maximum clique problem and its applications - Invited Lecture , Technical Report of IPSJ , 2007 - MPS - 67 / 2007 - BIO - 11 , 21 – 24 ( 2007 ) [ 50 ] Tomita , E . , Sutani , Y . , Higashi , T . , Takahashi , S . , Wakatsuki , M . : A simple and faster branch - and - bound algorithm for ﬁnding a maximum clique , WALCOM : Algorithms and Complexity , Lecture Notes in Computer Science , 5942 , 191 - 203 ( 2010 ) [ 51 ] Tomita , E . : Plenary Lecture : The maximum clique problem , Proc . 14th WSEAS International Conf . on Computers ( vol . I ) , 19 , Corfu Island , Greece ( 2010 ) [ 52 ] Uno , T . : An efﬁcient algorithm for solving pseudo clique enumeration problem , Algorithmica , 56 , 3 – 16 ( 2010 ) [ 53 ] Wakatsuki , M . , Takahashi , S . , Tomita , E . : A parallelization of an algorithm for ﬁnding a maximum clique on shared memory computers , Technical Report of IPSJ , 2008 - MPS - 71 , 17 – 20 ( 2008 ) [ 54 ] Yonemori , C . , Matsunaga , T . , Sekine , J . , Tomita , E . : A structural analysis of enterprise relationship using cliques , DBSJ Journal , 7 , 55 - 60 ( 2009 ) [ 55 ] Zhang , B . , Park , B . - H . , Karpinets , T . , Samatova , N . F . : From pull - down data to protein interaction networks and complexes with biological relevance , Bioinformatics , 24 , 979 – 986 ( 2008 ) 640 Biomedical Engineering Trends in Electronics , Communications and Software www . intechopen . com Biomedical Engineering , Trends in Electronics , Communications and Software Edited by Mr Anthony Laskovski ISBN 978 - 953 - 307 - 475 - 7 Hard cover , 736 pages Publisher InTech Published online 08 , January , 2011 Published in print edition January , 2011 InTech Europe University Campus STeP Ri Slavka Krautzeka 83 / A 51000 Rijeka , Croatia Phone : + 385 ( 51 ) 770 447 Fax : + 385 ( 51 ) 686 166 www . intechopen . com InTech China Unit 405 , Office Block , Hotel Equatorial Shanghai No . 65 , Yan An Road ( West ) , Shanghai , 200040 , China Phone : + 86 - 21 - 62489820 Fax : + 86 - 21 - 62489821 Rapid technological developments in the last century have brought the field of biomedical engineering into a totally new realm . Breakthroughs in materials science , imaging , electronics and , more recently , the information age have improved our understanding of the human body . As a result , the field of biomedical engineering is thriving , with innovations that aim to improve the quality and reduce the cost of medical care . This book is the first in a series of three that will present recent trends in biomedical engineering , with a particular focus on applications in electronics and communications . More specifically : wireless monitoring , sensors , medical imaging and the management of medical information are covered , among other subjects . How to reference In order to correctly reference this scholarly work , feel free to copy and paste the following : Etsuji Tomita , Tatsuya Akutsu and Tsutomu Matsunaga ( 2011 ) . Efficient Algorithms for Finding Maximum and Maximal Cliques : Effective Tools for Bioinformatics , Biomedical Engineering , Trends in Electronics , Communications and Software , Mr Anthony Laskovski ( Ed . ) , ISBN : 978 - 953 - 307 - 475 - 7 , InTech , Available from : http : / / www . intechopen . com / books / biomedical - engineering - trends - in - electronics - communications - and - software / efficient - algorithms - for - finding - maximum - and - maximal - cliques - effective - tools - for - bioinformatics © 2011 The Author ( s ) . Licensee IntechOpen . This chapter is distributed under the terms of the Creative Commons Attribution - NonCommercial - ShareAlike - 3 . 0 License , which permits use , distribution and reproduction for non - commercial purposes , provided the original is properly cited and derivative works building on this content are distributed under the same license .