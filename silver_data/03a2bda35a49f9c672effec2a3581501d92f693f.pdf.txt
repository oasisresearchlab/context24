Edgar H . Sibley Panel Editor Although individual use of computers is fairly widespread , in meetings we tend to leave them behind . At Xerox PARC , an experimental meeting room called the Colab has been created to study computer support of collaborative problem solving in face - to - face meetings . The long - term goal is to understand how to build computer tools to make meetings more effective . BEYOND THE CHdLKBOARD : COMPUTER SUPPORT FOR COllA0ORATlON AND PROBLEM SOlVlhIG / IV MEETINGS MARK STEFIK , GREGG FOSTER , DANIEL G . BOBROW , KENNETH KAHN , STAN LANNING , and LUCY SUCHMAN Meetings are used for virtuall : y any intellectual task that requires the coordination or agreement of sev - eral people . Statistical studies suggest that office workers spend as much as SO - - TO percent of their time in meetings [ 26 ] . Paradoxically , even with the widespread distribution of computers , most com - puter systems in use aid the work of separate indi - viduals rather than their work in groups . In meet - ings , computers are typically left behind in favor of more passive media like chalkboards * and flip charts . Media influence the course of a meeting because they interact strongly with participants resources for communication and memory . Chalkboards , for example , provide a shared and focused memory for a meeting , allowing flexible placement of text and figures , which complements our human capabilities for manipulating spatial memories . However , space is limited and items disappear when that space is needed for something else , and rearranging items is ’ The term cknlkboard in this article refers to any of the wall - mounted erasable writing surfaces commonly used in meeting rc ~ cxns , whether they are white , black , or some other color and whether the marks are made with chalk , crayon , or ink . We use this term to avoid misunderstandings about the word blnckboard , which , among other things , can mean a commercially available teleconferencing product , or B programming organization for artificial - intelligence systems . We also avoid the term whiteboard , which can mean a white metal writing surface on which colored pens are used , or a specific graphical database tool developed at Xerox PARC ( 91 . 0 1987 ACM OOOl - 0782 / 87 / 0100 - 0032 75c inconvenient when they must be manually redrawn and then erased . Handwriting on a chalkboard can be illegible . Chalkboards are also unreliable for in - formation storage : They are used in rooms shared by many groups , and text and figures created in one meeting may be erased during the next . If an issue requires several meetings , some other means must be found to save information in the interim . Many of the functions that are awkward or impos - sible with chalkboards are implemented easily with computers . Window systems and drawing aids , for example , provide flexibility for rearranging text and figures , and text can be displayed in fonts that are crisp and reproducible . File systems make it possible to retrieve information generated from previous meetings , to revisit old arguments , to show the his - tory of a series of arguments , and to resume discus - sions . Independent workstations allow meeting participants to share views , point to objects under discussion , and work on different aspects of a prob - lem simultaneously , with the result that participa - tion can feel less like being a member of a commit - tee , and more like acting as a collaborator at a barn raising . To explore these ideas , an experimental meeting room known as the Colab has been set up at Xerox PARC . In the Colab , computers support collaborative processes in face - to - face meetings . The Colab is de - 32 Communications of the ACM January 1987 Volume 30 Number 1 Computing Practices signed for small working groups of two to six persons using personal computers connected over a local - area network ( Figure 1 ) . In our design , we have drawn on familiar elements from conventional meet - ing rooms . The focus of the Colab project is to make our own meetings among computer scientists more effective and to provide an opportunity for conduct - ing more general research on how computer tools affect meeting processes . ’ Much prior research has focused on the use of computer and communication technology to support teleconferencing [ 18 , 191 and what is known as com - puter conferencing [ 16 , 171 , which emphasizes the use of computers to support asynchronous commu - nication and discussion over a computer network . The Colab , on the other hand , focuses on problem solving in face - to - face meetings - the most common kind of meeting in our research group and our start - ing point . In this article , we describe the meeting tools we have built so far as well as the computational under - pinnings and language support we have developed for creating distributed software . Finally , we present some preliminary observations from our first Colab meetings and some of the research questions we are now pursuing . TOOLS FOR COLLABORATION An office worker using a computer will choose dif - ferent programs to achieve different purposes . Com - pleting a single project may involve the use of sev - eral different tools : a spreadsheet program , a text editor , and a sketching program . In a similar vein , activities arise in the course of a meeting that re - quire different supporting programs . In this article , we use the term meeting fools to refer to programs that support group interaction and problem solving in meetings , and the term Colab tools to refer to meeting tools developed specifically for use in the Colab . A fundamental requirement for meeting tools is that they provide a coordinated interface for all par - ticipants . Such a multiuser interface is intended to let meeting participants interact with each other easily and immediately through a computer medium . The term WYSIWYG ( what you see is what you get ) is generally used to describe text editors in which text appears the same during editing as it will during printing . To describe an important abstrac - tion for meeting tools , we have defined an analogous term : WYSIWIS ( what you see is what I see - pro - nounced “whizzy whiz” ) , which refers to the presen - ‘Lucy Suchman . the last author of the present article . is an anthropologist for whom the C & b represents part of a larger study of face - to - face collaboration and its technology . The Colab is an experimental meeting room designed for typical use by two to six persons . Each person has a work - station connected to a personal computer . The computers are linked together over a local - area network ( ethernet ) that supports a distributed database . Besides the workstations , the room is equipped with a large touch - sensitive screen and a stand - up keyboard . FIGURE 1 . A View of the Colab tation of consistent images of shared information to all participants . A meeting tool is strictly WYSIWIS if all meeting participants see exactly the same thing and where the others are pointing . WYSIWIS creates the impression that members of a group are interacting with shared and tangible ob - jects . It extends to a group conversation the kind of shared access to information that is experienced by two people sitting together over a sketch . WYSIWIS is the critical idea that makes possible the sense of teamwork illustrated in the barn - raising metaphor . It recognizes the importance of being able to see what work the other members have done and what work is in progress : to “see where their hands are . ” With meeting tools , this visual cue can be approximated by providing pointers to work in progress and by graying out objects that are being worked on . Although strict WYSIWIS would give everyone the same image on their displays , in practice we have Iaway 1987 Volume 30 Number I Communications of the ACM 33 Computing Practices found this too limiting and instead use relaxed ver - sions of WYSIWIS [ 32 ] . For example , it can be useful to differentiate between public interactive windows that are accessible to the entire group , and private windows with limited access ( e . g . , for personal elec - tronic mail ) . Private windows violate the concept of strict WYSIWIS , as does relaxation of pointer dis - plays . Although pointing is an efficient way to refer to things in conversa . tion , displaying the cursors of all active participants is usually too distracting . Mak - ing pointers visible only on request becomes an effective compromise . Another WYSIWIS relaxation permits public windows to appear at different places on different screens so that public pointers can be translated into window - relative coordinates . This sacrifices some ability to refer lto things by screen position , but it does permit personalized screen layouts . Meetings , like other processes , can be more effi - cient when several things are done at once . Since Colab tools support simultaneous action , a key issue in tool design is recognizing and supporting those activities that can be decomposed for parallel action . For parallel action , a task must be broken up into appropriately sized operations that can be executed more or less independently by ‘different members of the group . If the operations are too small , they will be too interdependent , and interference will pre - clude any substantial . parallelism . For example , to create a shared text , interactions should not be at the level of individual keystrokes . On the other hand , if operations are needlessly large , opportu - nities for synergy are lost . The ability to act in parallel on shared objects also brings with it potential for conflict . Conflict resolu - tion strategies will become necessary in some cases , but often we can rely on social constraints . A con - flict detection system or “busy signal” graphically warns users that someone else is already editing or otherwise using an item ; a busy item is grayed out on all screens . Our initial goal was to create tools to support the kinds of meetings that our group has , which range from the informal to the formal . One of the informal meeting tools we have developed , Boardnoter , closely imitates the functionality of a chalkboard ( Figure 2 ) . It is intended for informal meetings that rely heavily on inforrnal freestyle sketching . To draw with Boardnoter , one uses ; the “chalk , ” to erase one uses the “eraser , ” to type one uses the miniature “typewriter , ” and to point one uses the “pointer . ” To sketch a square with Boardnoter , one simply “picks up the chalk” and makes four strokes . A subsequent version of Boardnoter will go beyond the chalkboard by adding capabilities for copying , moving , resizing , linking with rubber band lines , grouping , and smoothing ( neatening ) , and for using and scaling se - lections from a set of predrawn images . Other Colab tools are based on much more formal models of the meeting process . In this article , we focus our attention on two such tools : Cognoter , a tool for organizing ideas to plan a presentation ; and Argnoter , a tool for considering and evaluating alter - nate proposals . Although both tools are intended to bring appropriate computational support to struc - tured meeting processes , the contrast between the two processes will highlight the range of opportu - nities that exist for applying computer technology in this medium . ORGANIZING IDEAS FOR A PRESENTATION USING COGNOTER Cognoter3 is a Colab tool used to prepare presenta - tions collectively . Its output is an annotated outline of ideas and associated text . We have used Cognoter to prepare outlines for talks and papers , including this one . In some ways , it is similar to the Think - Tank , Freestyle [ 25 ] , and NoteCards [ 34 ] programs . All are used to organize ideas , but Cognoter is unique in that it is intended for collective use by a group of people . The Cognoter process imitates a meeting style for collaborative writing that we have used at Xerox PARC without computational support for several years . Usually , we begin with a clear slate : The ideas are in our heads and nothing is written down . The problem at this point is how to get started : It is not very helpful to begin by asking , “Well , we need an outline . What should we put in I . A . l ? ” Rather , plan - ning a presentation requires that the group decide what the ideas are , which ideas go together , which ideas come first , the order of presentation , and , finally , which ideas warrant elimination . Cognoter organizes a meeting into three distinct phases - brainstorming , organizing , and evaluation - each of which emphasizes a different set of activi - ties . As the group advances through the respective phases , the set of possible actions is expanded : For instance , brainstorming , which is emphasized in the first phase , is still possible in the last phase . Groups that find the rigid enforcement of phases too pre - scriptive can skip immediately to the last phase where all the operations are possible . Our intention is to experiment with methods for encouraging par - ticular meeting processes and styles of behavior without making the tools too inflexible and prescriptive . ‘The name Cognoter comet from both cog - noter [ a cognition noter ) or co - gno - ter ( knowing together ] . 34 Communications of the ACM ] anua y 1987 Volume 30 Number I Computing Practices Note : The actual screen colors for the current version of Colab are black on white ; in Figures 2 - 6 , the color green has been added for editorial emphasis - Ed . The Boardnoter meeting tool in the Colab is operational but clicking the mouse or pen over the chalk icon ; to erase one still in the early stages of development . A key feature is that picks up the eraser ; to point one picks up the pointer . Since it provides a large area for freestyle sketching . Below the more than one boardful of information may be needed in the writing area is a “chalk tray” containing several implements : course of a meeting , the “stampsheet” of shrunken stamp - a piece of chalk , an eraser , a miniature typewriter , and a sized boards at the bottom makes it possible to obtain a pointer . To draw on the board , one picks up the chalk by fresh board or to switch back to a board created earlier . FIGURE 2 . Screen Image of Boardnoter Brainstorming Since the brainstorming phase involves the initial generation of ideas used in the presentation , it is important to encourage synergy in group interac - tions and to not interfere with or inhibit the flow of ideas [ lo ] . In Cognoter , therefore , ideas are not eval - uated or eliminated in this phase , and little attention is given to their organization ( see Figure 3 , next page ) . Instead , there is one basic operation : A partici - pant selects a free space in a public window and types in a catchword or catchphrase characterizing an idea . Participants may act simultaneously , adding idea items and supporting text at any time , but may not delete an item ( even their own ) , although they can move them around . Supporting text is used to clarify the meaning of an item and to establish ter - minology for the presentation . Once entered , it can be publicly displayed or further edited by any par - ticipant . As the window fills up to encompass what appears to be a jumble of ideas on different levels , begging for organization , pressure to move on to the next phase begins to mount . Organizing In the organizing phase , the group attempts to estab - lish an order for the ideas generated in the brain - storming phase . With Cognoter , the order of ideas can be established incrementally by using two basic operations : linking ideas into presentation order and grouping ideas into subgroups . In addition , the item - moving operation allows these operations to be dis - cussed prior to actually executing them by moving items near each other before clustering or linking . The basic operation is to simply assert that one idea should come before another . Linking is usually accompanied by some verbal discussion : For exam - ple , a participant may say , “I’m putting Colab tools before open issues because you need to understand ] anuary 1987 Volume 30 Number 1 Communications of the ACM 35 Computing Practices In the brainstorming phase , participants may add ideas and supporting text . Criticism or deletion of ideas is discouraged . ideas are entered into the window by clicking the mouse in the background of the window and typing in a short title or phrase that stands for the idea . Text explaining the ideas in more detail is entered by selecting the item with a mouse and then using a text editor in a separate window . FIGURE 3 . Brainstorming with Cognoter what we have done before you can understand what comes next . ” The ordering is indicated visually by directed links between items as shown in Figure 4 . The meaning of the links is transitive , meaning that , if X comes before Y , and Y comes before Z , then X must come before Z . The links are used collectively to determine a complete order of presentation . Items can also be clustered into groups and moved to their own windows as shown in Figure 5 . When a group is formed , a bracketed item standing for the whole group is displayed in the window ; the grouped items themselves are displayed in an associated window . Links are distributive across groups ; a link to or from a bracketed item is treated like a link to or from the whole group . By these transitive and distributive op - erations , a small nurnber of explicit links can highly constrain the total order of ideas . Evaluation The third phase , evaluation , determines the final form of the presentation . Participants review the overall structure to reorganize ideas , fill in missing details , and eliminate peripheral and irrelevant ideas . In Cognoter , the various decision - making pro - cesses are separate and distinct operations . Delaying deletion until the last phase , for example , provides a more visible basis for argument in the sense that an argument for deleting an idea because it is not rele - vant may be more convincing when that idea is not visibly linked with any others ; or arguing the unim - portance of an idea may be more convincing when the competing ideas are available for comparison . In the same sense , an argument that there is an excess of material may be more compelling when all the material can be seen , or a charge that an idea is vague may be more convincing in the presence of other ideas that are more fully substantiated . Delaying deletion also has some beneficial effects on group dynamics : Deleting an idea during the brainstorming phase could easily be interpreted as criticism and might either inhibit certain partici - pants or provoke tangential argument , whereas argu - ing that an idea does not fit or is insubstantial in the Chalkboards - In Cognoter , the order of ideas is established incrementally . The basic operation is determining that one idea should come before another , which is indicated visually by directed links between items . The meaning is transitive , meaning that , if X comes before Y , and Y comes before Z , then X must come before Z . Collectively , the links determine the order of idea presentation . Links are added or removed by clicking the mouse on the desired items . Items will usually have one or more links to other items . FIGURE 4 . Establishing the Order of Ideas 36 Con7n1unications of the A ( : M ] anuary 1987 Volume 30 Number I Computing Practices Items can be clustered into groups representing ideas that will be worked on together . Each group has an associated window for displaying its items . A group is named when it is formed , and that name appears as original window . FIGURE 5 . Grouping Items evaluation phase may have the beneficial effect of prodding other group members to clarify or extend the idea . Other operations besides deletion are also appro - priately delayed until the evaluation phase . For ex - ample , arguing that an idea is misplaced is more compelling when alternate places to put it are visi - ble ; this is a good time to consider the reordering of ideas . Since the linking operation that takes place in the organizing phase is usually based on considera - tions local to two ideas , seeing the entire presenta - tion , with most of the links in place , allows the user to appraise the overall structure and consider more global concerns , such as balance . Cognoter provides a systematic process for an - swering the question , “What should we put in I . A . l ? ” Starting points for a presentation can be iden - tified systematically : These are the items with no incoming links . Cognoter then helps in the final ordering of ideas by preparing an outline and indi - cating which ideas are ordered arbitrarily . By tra - versing the item graph , an outline is generated , with or without the attached text . ThinkTank . Beyond the most obvious difference , which is that Cognoter is designed for simultaneous use by multiple participants ( although the process it embodies is also useful for single users ) , Cognoter also divides the thinking process into smaller and different kinds of steps that are incremental and effi - cient . In ThinkTank , ideas are always organized in an outline - there is no other place to put them - whereas Cognoter separates the tasks of idea genera - tion and ordering . Cognoter also provides for incre - mental ordering through a link - forming operation whereby a partial ordering of ideas is refined step - wise toward a complete ordering . Transitivity and grouping operations make it possible to organize the ideas efficiently with a small number of links . Some important parts of the presentation planning process are not explicit in Cognoter : For example , Cognoter does not inquire as to the audience , the appropriate technical level , the goals of the paper , or arguments for deleting or ordering ideas . Modifica - tions to Cognoter could make such questions ex - plicit , but they are now outside the scope of the current tool . In many respects , Cognoter supports a process that Cognoter is the first useful Colab tool developed is quite different from that underlying tools like and is still evolving . We are now experimenting a bracketed item in the ] anua y 1987 Volume 30 Number 1 Communications of the ACM 37 Computing Practices with various relaxations of the WYSIWIS concept . In the current version of Cognoter , for example , win - dows showing links and items are public , but outline and item editing windows are private . The absence of visual cues indicating whic : h are public and which private can be confusing for the first - time users . With several months experience using Cogno - ter’s multiuser interface , we are actively exploring trade - offs in the design of the next generation of the tool [ 32 ] . AN ARGUMENTATION SPR . EADSHEET FOR PROPOSALS [ ARGNOTER ) Argnoter , 4 the Colab tool being developed for pre - senting and evaluating proposals , is now in the early stages of design and implementation and is pre - sented here chiefly as a contrast to Cognoter . Imple - menting and experimenting with Argnoter are now major focuses of the Colab project . As with Cognoter , the basic meeting process supported by Argnoter has been used by our group without com - putational aid for several years . Proposal meetings start when one or more mem - bers of the group have a proposal for something to be done , typically a design for a - program or a plan for a course of research . The goal of the meeting then becomes to pick the best proposal . The proposals are at least partially worked out before the meeting , as opposed to Cognoter meetings , which begin with a blank slate . Since Argnoter participants have already invested some energy in the crreation of these pro - posals , the meetings have a greater potential for dis - pute and disagreement . Discovering , understanding , and evaluating disagreement are therefore essential parts of informed decision making in these meetings . In developing a design - which is essentially a dialectic between goals and possibilities - designers usually begin without knowing exactly what is wanted or what is possible . They explore parts of the design space as driven by their current goals , and sharpen their goals as they learn what is possible . In collaborative design tasks , this interaction and ten - sion between goals and alternatives must play itself out in the communications arnong collaborators . At the beginning , design goals are not necessarily shared ; the elaboration of a common set of goals is part of the collaborative process and includes the incremental development and selection of design alternatives . The intuition guiding the A . rgnoter process is the recognition that much of the Idispute and misunder - standing that arise in meetings about design propos - als are due to three major causes : owned positions , that is , personal attachment to certain positions ; un - ‘The name Arpokv is intended to suggest quntenf rmfer , that is . a tool IO help organize and evaluate arguments . stated assumptions ; and unstated criteria . Hence , a ma - jor theme of Argnoter design is that alternatives be made explicit : Proposals themselves are explicit , as are assumptions and evaluation criteria . In essence , the Argnoter meeting comprises three distinct phases - proposing , arguing , and evaluating - which in some respects are similar to the respec - tive phases in Cognoter , but different enough to warrant description . Proposing In the proposal phase , the proposals are stated ex - plicitly : Each proposal is given a short text descrip - tion , and perhaps a sketch , and is named according to its features or functions . In Argnoter , a proposal will be created in , and displayed by , a set of con - nected windows called proposal “forms , ” which can be either private or public . Public proposal forms are WYSIWIS , whereas a private form appears only on the machine of the participant who controls it . Pri - vate forms ensure that every participant can view or create a new proposal without having to share its use . Other windows will allow viewing any of the proposals under consideration in the meeting . New proposals are created by modifying an existing one or combining features from two or more different ones . A new proposal automatically inherits text , sketches , and statements from its parent proposals . Even with the high - resolution , wide - format dis - plays used in the Colab , space for windows is lim - ited : A proposal displayed with its text , sketch , and arguments occupies about one - fourth of the screen . The default configuration allows enough viewing space for two public proposal forms , one private form , and a variety of other forms . However , displays of the kind available on most personal computers would be inadequate for viewing even a single pro - posal and would not work well for most Colab tools . Arguing The next phase consists of presenting reasons for choosing or not choosing individual proposals . Rea - sons must be written down . On the chalkboard , the reasons are written as statements underneath the respective proposals . Each statement is identified as either pro or con and consists of a short text descrip - tion like “very expensive” or “can’t be done in less than six months . ” The structure of Argnoter encour - ages participants to write pro and con statements about all proposals , not just pro statements for the ones they are in favor of and con statements for the rest . Since the pro and con statements are there for all to see and contemplate , participants tend to take the time to formulate them carefully . Insubstantial statements like “I just don’t like proposal X” will carry less weight than ones that are specific and focused . 30 Communications of the ACM lanua y 1987 Volume 30 Number 1 Computing Practices This shared use of a chalkboard to present propos - als and arguments has been used habitually and suc - cessfully by other groups that we know about . The following anecdote about another laboratory illus - trates this : On any given morning at the Laboratory of Molecular Biology in Cambridge , England , the blackboard of Francis Crick or Sidney Brenner will commonly be found covered with logical trees . On the top line will be the hot new result just up from the laboratory or just in by letter or rumor . On the next line will be two or three alternative explanations , or a little list of “what he did wrong” . Underneath will be a series of suggested experi - ments or controls that can reduce the number of possi - bilities . And so on . The tree grows during the day as one man or another comes in and argues about why one of the experiments wouldn’t work , or how it should be changed . [ 27 ] For comparative purposes , it is possible in the ar - gument phase to categorize pro or con statements across proposals in terms of categories like compati - bility , cost , development time , efficiency , feasibility , simplicity , and utility . With computational support , it is possible to automatically create auxiliary tables that compare proposals on the basis of these cate - gories . In the argument stage , participants can add state - ments or modify existing proposals . This tends to foster a synergy among ideas , joint contributions to proposals and reasons , and the systematic develop - ment of parallel reasoning across proposals . Accord - ing to Platt 1271 , this kind of group participation in the articulation of multiple proposals and arguments often leads to a very productive decision - making process : The conflict and exclusion of alternatives that is neces - sary for sharp inductive inference has been all too often a conflict between men , each with his single Ruling The - ory . But whenever each man begins to have multiple working hypotheses , it becomes purely a conflict be - tween ideas . . . . In fact , when there are multiple hy - potheses which are not anyone’s “personal property” and when there are crucial experiments to test them , the daily life in the laboratory takes on an interest and ex - citement it never had , and the students can hardly wait to get to work to see how the detective story will come out . The articulation of multiple proposals and their ar - guments leads naturally into the next phase - evalu - ation - in the sense that proposals are being evalu - ated indirectly by analyzing the reasons behind them . Moreover , this articulation encourages a style of de - cision making that separates arguments about evalu - ation criteria from arguments about the proposals themselves . Evaluating First , the evaluation considers the assumptions be - hind individual arguments . Assumptions in Argnoter are expressed as statements about statements : For example , the statement “this assumes that labor costs can be ignored” could refer to the statement “this proposal is inexpensive . ” Whereas historically we might have written such assumptions on the chalkboard next to the corresponding arguments , with Argnoter , we will ultimately provide facilities for viewing the structure of arguments in terms of the connections between these statements . Meeting participants often disagree about the va - lidity of statements : One person might believe that “sixteen million bit memory chips will be readily available in six months” and another may not . In Argnoter , we will try to model these differences with explicit “belief sets , ” a belief set being a map - ping of a set of statements into valid ( believed ) or invalid ( not believed ) categories . This kind of model - ing is something that cannot effectively be done on chalkboards . The act of making belief sets explicit enables Argnoter to act as a kind of argumentation spreadsheet where a proposal is viewed and evaluated in rela - tion to a specified set of beliefs . The proposal display is generated by stepping through the arguments about the proposal , looking up the assumptions , and then displaying those arguments that are sup - ported in the specified belief set . Multiple belief sets may coexist , and any participant is able to create ( or specialize ) belief sets . The belief sets are intended to characterize different generic points of view ( e . g . , liberal versus conservative , marketing versus development ) . Just as a numerical spreadsheet program provides a way of exploring entailments of hypothetical nu - merical relationships , an argumentation spreadsheet like Argnoter provides a way of exploring belief en - tailments . A numerical spreadsheet program pro - vides no in - depth understanding of the meanings of interest rate , tax rate , or monthly income , but it does compute the necessary sums and display changes in the derived values when the input values are changed . In the same way , Argnoter need not understand the meanings of design proposals : It need only differentiate between proposals , arguments , as - sumptions , and belief sets , and compute the relevant logical support relationships . One should be able to change a belief assignment and then immediately see the relevant changes in the proposal display . Dif - ferences in point of view can also be highlighted ( e . g . , by displaying a proposal under different belief sets ) . Other evaluations , like sensitivity analyses , can be done using the same information . Next , evaluation criteria are selected and ranked . ] arluary 1987 Volume 30 Number I Communications of the ACM 39 Communications of the ACM 41 Computing Practices Computing Practices stamp describing the author and time of the change . Every request to change data broadcasts several things : the new data , its stamp , and the stamp of the previous version of the data on the originating ma - chine . When a machine receives a message request - ing a change , it first checks whether the previous stamp in the request is the same as the stamp in its database . If they are different , a “dependency con - flict” is signaled . The conflict is then resolved by a process that involves human intervention ( at least to temporarily suspend activity ) , followed by propaga - tion of the resolved values for data or the creation of multiple versions of the data . The advantage of the dependency - detection ap - proach is responsiveness . Changes to data do not first require serialization or the delay of obtaining a lock . The system assumes thLat a change can always be made , but it may have to fix things later if a conflict is detected . Like the cooperative model , the dependency - detection model contains inherent race conditions , but it is able to detect them after the fact . If two participants change data at the same time , at least one of the machines will detect a dependency con - flict as described above . However , it is possible to get “false alarms” if messages about changes to data from different sources arrive out of order ; a depen - dency conflict would then be incorrectly signaled . Similarly , if two participants made a series of nearly simultaneous changes to a datum , multiple false alarms might be signaled . The ability to distinguish false alarms can be enhanced by keeping a longer history of changes . We do not yet have enough expe - rience to decide whether the dependency - detection model ( which is closely related to an approach called certification [ 2 ] ) is necessary or practical . Roving - Locks Model . The roving - locks model tries to reduce the delay in obtaining locks that is incurred with the centralized - lock model by distributing the lock - granting processes along with lock ownership . This is different than simply locating locks with the data ; the intention . here is to distribute control over specific data items to their last user , leading to a sort of “working set” [ 8 ] for locks . In this scenario , a participant’s machine would tend to acquire the set of locks for that subset of the database on which it is actively working . Most lock requests would require no communication with other machines . After the first access , delay in getting a lock would be signifi - cant only in those cases where the lock is on a re - mote machine , that is , when two or more partici - pants are actually competing for the same parts of the database . Even if the working - set model is valid for locks , we suspect that the success of this model may de - pend on its having a preemptive scheduler to bound the delays in obtaining remote locks . More experi - ence with the model is needed to determine whether roving locks is a practical solution . Language Support Colab software is built on Xerox Lisp Machines con - nected by an Ethernet [ 23 ] . The software is written in Loops 143 , an object - oriented extension of Lisp [ 28 ] that resembles Smalltalk - [ l4 ] in that pro - grams are organized in terms of objects that can hold data . Computation proceeds as objects send mes - sages to each other . Loops supports the notion of permanent objects whose identity is specified by a unique identifier that is guaranteed to be unique across machines . Versions of these permanent ob - jects can exist on several machines simultaneously . An association is a set of representations on multiple machines that stand for the same object ; the individ - ual representations are called associates and have the same unique identifier . In the Colab , we use the term conversation to refer to the combination of a set of machines , Colab tools , and participants working together to solve a prob - lem . When a new participant is added to a conversa - tion , all participants find out about the newcomer , and the newcomer finds out about the other partici - pants ; the newcomer’s machine gets copies of the object that represent the database . In a conversation , communication is implemented by a combination of system facilities and program - ming abstractions and is supported over the Ethernet by several layers of protocols . Our implementation rests on a protocol for remote procedure calls [ 3 ] . On top of this , we have added a mechanism for sending messages to an object on a remote machine , and another for sending messages to all the associates of an object in a conversation . Colab tools communicate via a programming ab - straction that we call broadcast methods . Broadcast methods extend the object - oriented notion of meth - ods from a single machine to multiple machines in a conversation . When a method is annotated as being a broadcast method , invoking it on one machine means that it will be run on all machines in the conversation , For example , if Move is a broadcast method in a Cognoter window for moving an item in the window , and item37 receives a Move message on one of the machines , then item37’s associates on all the other machines will also receive the same mes - sage . All the details of queueing and transmitting the message to the relevant machines are handled auto - matically without further specification by the pro - grammer . Broadcast methods provide a simple abstraction for organizing communication , and a mechanism for Computing Practices efficient communication about changes to the data - messages between machines . The viewer shows base . Colab tools assume that the software is loaded when messages are queued , sent , and received , as on the machines of all participants . In most cases , well as the identity of the other machines . Using the the bandwidth of network communication can be viewer , we can often detect cases of unnecessary or reduced by sending instructions rather than data . incorrect message sending . Ideally , one should be able to take a program writ - ten for a single machine and change it into a distrib - uted program by annotating some of the methods so that they will broadcast . In practice , this has worked out rather well . To support this facility , we have found it useful to establish a discipline for deciding which methods should be broadcast . Methods are categorized roughly into three differ - We have also developed tools for propagating pro - gram changes between machines . In debugging ses - sions , we have found it useful to make program changes on one machine and then to broadcast the changes to the other machines . ent sets that are treated differently with respect to conversion to broadcast methods : user input , semantic actions , and display actions . User - input methods con - trol user interaction that specifies a change to be made to the database ; they are run at the user’s request ( e . g . , caused by mouse action ) and are used to determine the nature and scope of a change . User - input methods are not made into broadcast methods because only the user initiating the change wants to engage in the interaction . The actual changes to the database are made by the semantic - action methods , which are broadcast so that the changes to the data - base will propagate to all machines containing the meeting database . Display - action methods update the displays and are not broadcast because the dis - play is updated as a side effect of changing the data - base . If the image in more than one window depends on the value of a datum , then multiple display - action methods should be triggered by a single semantic - action method . PRELIMINARY OBSERVATIONS AND RESEARCH QUESTIONS If computers are to provide more effective meeting tools , we need a commensurately more adequate un - derstanding of meeting processes . Although meetings are something that most of us know well , they come under the heading of those everyday activities that , because we know them so well , remain largely unexamined . Designing the Colab has required that we look again at the organization of meetings and meeting technology ; at the same time , the Colab cur - rently in place provides an experimental setting for pursuing these lines of research . In this section we present our preliminary observations about the Colab and describe the research issues that have been raised by these observations . In some cases , the appropriate partitioning of methods into these categories can be subtle . For ex - ample , windows for displaying data can be parame - terized ( as in the case of proposal forms for Argno - ter ) , thereby altering their display according to dis - play parameters that specify belief sets or rankings of evaluation criteria . Maintaining WYSIWIS for these windows requires that changes to these pa - rameters be considered part of the database and be broadcast as semantic actions ; the subtlety arises to the extent that “display parameters” might be con - fused with display - action methods , which are not broadcast . Furthermore , when semantic actions can be derived from more primitive ones , only the prim - itive ones need be broadcast . In their current form , Colab tools reflect our expe - rience of , and ideas about , our own work processes , in particular those aimed at collaborative writing and argumentation . Our research strategy is to draw upon familiar practices first , and then to locate those practices within a wider range of face - to - face meet - ings in different settings and with different partici - pants . The Colab was used early on to produce the present article , and even though the Colab was not yet fitted with audiovisual recording equipment or documenting software , these early sessions did pro - vide a set of preliminary observations about the rela - tionship between Cognoter tools and the writing process , and their relation to the process of collabo - rative writing . The Structure of the Writing Process The current Cognoter design reflects a set of conjec - tures regarding the writing process , from the early stage of idea generation and development through the generation of a path or outline for a final presen - tation . The actual use of Cognoter revealed not only the points of fit between design and process , but some subtle disjunctures as well . Support for Debugging To make the debugging process more manageable , we have created tools for tracing and intercepting messages on the network . To monitor message trans - mission between machines , we use a conversation viewer . It works for all Colab tools , letting us moni - tor the broadcast queues and processes used to send For example , the design premise for Cognoter was that the brainstorming window be an unstructured repository for ideas . The availability of a public win - dow , into which people could easily and sponta - neously enter new text , would allow the group to ] auuary 1987 Volume 30 Number 1 Communications of the ACM 43 Compufiq Practices put a large number of ideas “Ionto the table” with - out a great deal of discussion or negotiation . Ideally , this initial brainstorming phase is followed by an organizing phase , in which group members elaborate the relationships between ideas and debate their co - gency . However , in early sessions with Cognoter , we found that even before moving on to the organizing phase , members began using spatial grouping in the brainstorming window to display relationships be - tween ideas . Even after items were explicitly linked , the spatial cues helped to display the relationships between items ; these spatial cues , in turn , were important to the elaboration of meaning . The process of organizing and evaluation made it easier to see whether or not the set of ideas gener - ated during brainstorming was complete . Although our initial design assumption was that use of the outlining tool would follow completion of the evalu - ation phase , in practice , participants found the out - lining tool useful for displaying intermediate states of the emerging structure as well . These observa - tions suggest slightly different “joints” in the process than we had originally assumed . In future sessions , we will look carefully at the natural organization of the group writing process , the way people use the available tools to see the developing structure of their collective argument , and the relationship be - tween the initial design assumptions and the actual uses people make of the tools . Maintaining the Collaboration The Colab’s starting premise was that serial access to problem - solving technology obstructs the kind of equal participation that ideally characterizes collab - oration , particularly for an activity like writing , where collaboration seems ideally not to involve any predetermined or fixed division of labor among par - ticipants . The multiuser interface was designed to overcome this obstacle by letting participants act simultaneously , write independently , and enter new text into a shared database - virtually at the same time . By equalizing access of all participants to dis - plays and shared data , the Colab’s interface en - hances flexibility as to roles and discourages control over the activity by any one participant . However , our early sessions demonstrated that the constraints imposed by current technologies are not just a limitation on collaboration but in some ways a resource as well . In particular , the fact that a writing technology allows only one person to enter text at a time enforces a kind of shared . focus ( i . e . , a focus on that person’s actions ) that maintains a common con - text for the group . Where only one person at a time has access to the writing technology , roles are in a very real sense visible at a glance ; moreover , what is being done to the text is transparent in the actions of whomever controls the writing technology . Many of the accompanying practices - rising to go to the chalkboard , taking over the keyboard - can also be viewed as resources for the participants in the sense of seeing what is going on and providing a basis for the smooth exchange of roles . The possibility of in - dependent writing activity and simultaneous entry of new text brings new demands on participants to stay informed about what others are doing . Relaxing the requirements on turn taking by allowing parallel actions necessitates alternative ways of accomplish - ing what the turn - taking system accomplishes : namely , an orderly transition from one participant to the next , and an incremental , sequentially coherent development of the joint activity . In early Cognoter meetings , the work of maintain - ing a shared focus was evident in the ebb and flow of meeting activity . During the ordering phase par - ticularly , where ideas are elaborated , participants tended to interact verbally for a few minutes , ex - plaining immediate goals and making short - term plans of action , after which the group settled into their “assignments , ” typing intently for a while . After a few minutes of parallel editing , people would lose track of what the others were doing and , there - fore , of what to do next . The group would then stop interacting with the system and again discuss where they were and what they should do . These transi - tions between parallel and convergent activity some - times required negotiation . In particular , individuals engaged in different activities might not arrive at transition places simultaneously and might not be equally interruptable at any given time . The early Cognoter sessions encompassed several such cycles of regrouping , summarization , joint planning , and then parallel action . Along with personal interaction , shared focus is achieved by means of reference to common objects . Cognoter’s goal , as with a chalkboard , is to enable participants to refer to common objects through var - ious kinds of efficient reference such as deixisS and pointing . Although the WYSIWIS idealization recog - nizes that efficient reference depends on a common view of the work at hand , a distinctive problem arises in computer - based environments in that the boundary between logical and physical objects is blurred . This represents a tremendous advantage , on one level , in that relaxations of WYSIWIS allow par - ticipants to tailor their individual display of the shared view to their own specifications . However , it also means that , although people may be referring to the “same” piece of text , the text may be in an en - tirely different location on their respective displays . With the use of windows that can be moved , re - 5Deixis means referring to something either verbally ( e . g . , “the gray house across the street” ) or by pointing . 44 Comtnunications of the ACM / away 1987 Volume 30 Number 1 Coniputiq Practices shaped , and scrolled , conventions are required to avoid situations in which one person tries to see some text at the top of a long passage while another tries to see text at the bottom , or one member of the group puts up a very large public window , obscuring everyone else’s view ( situations that we have infor - mally dubbed “Scroll Wars” and “Window Wars” ) . As well as confirming the usefulness of a single view of the public record , our early experience with Cognoter identified a more subtle element of shared focus . With a single display device ( e . g . , a chalk - board or workstation ) , it is common for one person to be assigned the task of actually entering new text into the record ; typically , not only the new text , but the writing activity itself , is visible to the other par - ticipants . In the current design of Cognoter , how - ever , the actual editing is done in private windows , with only the finished text broadcast to copartici - pants . This design decision , while encouraging paral - lel activity , poses some interesting new problems for the collaborative process . In particular , participants in the early sessions expressed frustration at not being able to see what the others were doing ; specifi - cally , at not being able to watch when others were engaged in writing . To an important degree , it seems that participants need access not only to the product of each others’ writing , but to the writing process itself . The unanticipated usefulness of the video switch , which allows one to switch between dis - plays6 underscores the importance of a shared view for maintaining the joint focus . User frustrations in this regard reopen the question as to the ideal grain size at which individual and group transactions take place , and the relationship between private and public views . In general , these early observations were con - firmed by a small set of controlled experiments run at UC Berkeley . In the trials , several pairs of student collaborators unfamiliar with the Colab used either Cognoter or a chalkboard to plan article outlines . The outcomes showed that the interface of Cognoter is complicated enough to require practice to be used effectively [ 13 ] . More extensive trials with larger groups will await the completion of video recording and meeting analysis tools that are now being created . Research Questions Our guiding question has been , What are the pro - cesses of collaboration for which the computer is an appropriate tool , and what particular Colab tools could be designed to support these processes ? As a first approximation , Cognoter and Argnoter have as - ‘The Colab video switch allows the content of any screen to be directed to another screen : it was originally designed to aid in debugging across multiple machines . sumed two contrasting processes of collaborative writing and argumentation , both drawn from our own experience . Cognoter takes a joint presentation as its object and encourages consensus by supporting a single viewpoint , whereas Argnoter encourages competing proposals and delayed consensus by al - lowing the display and comparison of multiple views . Having identified the collaborative processes and refined the associated tools , we need next to ques - tion the generality of our assumptions . To what ex - tent do our work practices compare and contrast with other settings and other participants ? Does a tool , by reifying a process and making it explicit , thereby also make it portable across groups ? Or do we need a set of tools that can be customized to different users in different settings ? Under what circumstances are explicit structures desirable , and under what circumstances do we want to minimize the amount of structure we build into our tools ? These questions and others will be explored as we extend the design and experiment with its use . RELATED WORK The possibility that computers might be used to sup - port group problem solving was appreciated by early visionaries long before it was practically feasible . In 1946 , Bush presented a hypothetical system called a “Memex” that included an interactive database [ 6 ] by which associative “trails” of exploration could be saved to be recalled and retraced at a later time . Bush believed that a common encyclopedic database of information integrated from many areas of human activity would enhance the quality of societal prob - lem solving . In the 196Os , experimental systems like the NLS / AUGMENT [ ll , 121 began to use computers to support collaboration . The NLS / AUGMENT sup - ported terminal linking , electronic mail , sharing of files , and “televiewing” - the ability to “pass the gavel” among several people working together at separate terminals . Englebart saw machines as pro - viding an important medium for communication and was known for his development of novel user inter - faces like the mouse . Englebart was also an early worker in hypertext , systems that organize frag - ments of text in annotated networks . This work has been pursued in several other systems including TEXTNET [ 33 ] , Xanadu [ 24 ] , NoteCards [ 34 ] , and Annoland . At a time when time - shared systems like TENEX [ 6 ] popularized electronic mail and shared files , some observers ( e . g . , Lederberg [ Zl ] ) reported a qual - itative difference in the ways they were interacting with colleagues . In the mid 1976 . s , researchers at the Stanford AI Lab built a video , audio , and keyboard larluary 1987 Volume 30 Number 1 Communications of the ACM 45 Computing Practices crossbar switch to allow uselrs at multiple worksta - tions to collaborate from sep , arate workstations . At the same time , another line of work pursued the use of communications facilities to tie together people working at different locations . Known as teleconfer - encing [ 18 , 191 , this work eschewed much use of computers and has developed slowly , due largely to high communication costs fos video images . Mean - while , others have developed systems for remote conferencing that rely mostly on computers rather than video : Known as computer conferencing , these systems include electronic mail , editors , voting mechanisms , shared files , and archiving , but do not provide structure for the conferences based on any models of group problem - solving processes . In [ 16 ] , Hiltz and Turoff review some of these systems and provide an extensive bibliography ; prime examples are EIES [ Ii’ ] and some parts of NLS / AUGMENT [ ll ] . Although computers have been used experimen - tally in meetings to support specialized problem - solving processes since at least 1972 [ 35 ] , the impact has been much less dramatic : than with other com - puter applications ( see [ 20 ] ) . Most of these systems are organized around formal and mathematical models of decision making like multiattribute utility models and cost - benefit anal . yses . The Delphi method [ 22 ] and the Nominal Group method [ 20 ] , for example , are techniques for structuring group problem solving that have been used with and with - out computer support . The Delphi model considered by Turoff [ 35 ] is designed for technological forecast - ing by a geographically dispersed group , while the Nominal Group represents a consensus - forming process for face - to - face meetings ; both have been characterized as “rational but naive” [ 20 ] . Since we have little experience with them , we offer no inde - pendent assessment ; however , we note that the meeting processes used in the Colab are similar to the meeting methods commonly taught in corporate training programs . RTCAL / IOLC , a somewhat analogous system to the Colab that was developed at MIT by Sunil Sarin [ SO ] , allows a group of users to synchronously ex - change information from personal calendar data - bases to schedule a future meeting . It differs from the Colab in particular trade - offs of computer com - munication ( e . g . , RTCAL has a centralized database management scheme ) and the absence of process models for problem solving , but is similar in that it uses personal computers , works in real time , and maintains consistent views by message passing over a local network [ 29 ] . Another research project re - ported by Applegate , Konsynski , and Nunamaker [ l ] also resembles the Colab in that it provides personal computers to meeting participants around a confer - ence table and uses a video projector to provide large public views ; it also provides tools for brain - storming and analysis . However , unlike the Colab , it is oriented around decision support models for plan - ning and quantitative analysis . Also , since it is built using microcomputers with very limited display space , there has been little opportunity to experi - ment with private and public windows or multiuser interfaces . Kraemer and King [ 20 ] observe that there are very few successful computer conference rooms , if any , and that even these systems have been plagued by hardware difficulties . As the primary obstacles to success , they cite inaccessibility of computing re - sources , unreliable video projectors , and limited graphics capabilities . However , they quite rightly note that in recent years computing and projection technology have become much more reliable and also less expensive . We agree with them that most of the activity with computer - supported conferences over the next three to four years will center on re - search and development . In terms of technology , there have been several advances that will enable this work to proceed at a much more rapid pace : among them , more powerful personal workstations , local - area networks , ad - vanced programming environments [ 31 ] , distributed programming , and interface technology . These ad - vances will make it possible to develop prototype systems quite rapidly and thus to experiment readily with new tools . CONCLUSIONS Focusing on developing and understanding “team computers” ( i . e . , collaborative systems for group meetings ) , the Colab project has produced a usable meeting room and several operational tools . The liveboard is operational but not fully integrated with our software . As we begin to use the Colab on a regular basis , it will afford a laboratory for studying the effects of the tools on collaborative meetings . The Colab meeting room is now being fitted with the video equipment necessary to record working Colab sessions . We will use the Colab to try to understand why collaborative problem solving is organized as it is , the relationship of that organization to existing technology , and the trade - offs involved in displacing old practices with new technology . Upon hearing about the Colab , a manager from a large American corporation whose job it is to intro - duce appropriate computing technology at the exec - utive staff level told us an interesting story . After working diligently for several months to bring things up - to - date and to revitalize operations with tools like electronic mail , document processing , databases , and automatic spreadsheets , he remained unsure about the degree of success he had achieved . One 46 Communications of the ACM January 1987 Volume 30 Number 1 Confputir ~ g Practices day , in a burst of frank evaluation , one of his charges told him that , despite the best intentions , he felt the computer was not making a difference and did not expect it to save him more than 30 minutes a day , even if he did learn how to use it . The reason was that this individual was not in his office for more than 30 minutes ; he spent almost his entire day in meetings ! Morul : Office automation simply does not reach people who are away from their offices , which brings us back to the premise of the Colab project : Meetings are important . They are at the core of the way most organizations do business . As such , tools like the Colab touch fundamentally the ways we meet and make decisions collectively . Acknowledgments . This article has benefited greatly from the suggestions and criticisms of Agustin Araya , John Seely Brown , Richard Fateman , John Florentin , Mark D . Hill , Bernard0 Huberman , Randy Katz , Mark Miller , Sanjay Mittal , Ted Selker , Jeff Shrager , and Mike Stonebraker . Many thanks to Bill Volkers for creating the live - board , and to Stu Card and Jeff Shrager for early ideas for the liveboard . We wish to acknowledge Ted Selker for his suggestions about many aspects of the Colab and for designing electronic chalk for the liveboard ; Steve Osburn , Joan Osburn , Gene Hall , and Lee Anderson for creating the Colab physical setting ; and Steven Levy for his contributions to the first implementations of Colab software . Special thanks to John Seely Brown for his ideas , criticisms , and encouragement on the Colab project . Without his support , the project could never have been launched nor could the initial momentum have been sustained . Thanks also to Bill Spencer and George Pake for creating an environment at Xerox PARC that makes projects like this possible . 32 . Stefik , M . . Foster . G . . Lanning . S . . and Tatar . D . The scope of WYSIWIS : Early experiences with multi - user interfaces . In Proceed - irtgs of fhe Corrfererlce otr Computer - Supported Cooperative Work ( Aus - tin . Tax . , Dec . ) . ACM . New York . To be published . 33 . Trigg . R . . and Weiser . M . TEXTNET : A network - based approach to text handling . ACM Tram . Off . IIIJ Sysf . 4 . 1 ( Jan . 1986 ) , l - 23 . 34 . Trigg . K . . Suchman . L . . and Halasz , F . Supporting collaboration in No & Cards . In Proceedings of the Cwference on Conlputer - Supported Cwperafivr Work ( Austin , Tex . . Dec . ) . ACM , New York . To be pub - lished . REFERENCES 1 . Applegate . L . M . , Konsynski , B . K . . and Nunamaker . J . F . A group deci - sion support system for idea generation and issue analysis in organi - zational planning . In Proceedings of the Conference ou Computer - Supporfrd Cvoy ~ rutivr Work ( Austin , Tex . . Dec . ) . ACM , New York . To be published . 2 . Bernstein , P . A . , and Goodman , N . Concurrency control in distrib - uted database systems . ACM Comput . Surv . 13 , 2 ( June 1981 ) , 185 - 221 . 35 . Turoff . M . Delphi conferencing : Computer - based conferencing with anonymity . Technol . Forecasfirlg Sot . Change 3 ( 1972 ) , 159 - 204 . CR Categories and Subject Descriptors : H . 1 . 2 [ Models and Princi - ples ] : User / Machine Systems - - hunIan factors ; hunla ~ information process - ~ 8 ; H . 2 . 4 [ Database Management ] : Systems - distributed systems : H . 4 . m [ Information Systems Applications ] : Miscellaneous 3 . Birrell . A . D . . and Nelson , B . J . Implementing remote procedure calls . Tech . Note CSL - 83 - 7 . Xerox PAKC . Palo Alto , Calif . . Dec . 1983 . 4 . Bobrow , D . G . . and Stefik , M . ] . The Loops Manual . Xerox PARC , Palo Alto , Calif . . 1983 . General Terms : Design , Human Factors . Languages Additional Key Words and Phrases : Computer - supported collabora - tion . computer - supported groups , computer - supported meetings , multi - user interfaces 5 . Bobrow . U . G . . Burchfiel . I . D . . Murphy , D . L . , and Tomlinson , R . S . TENEX . a paged time - sharing system for the PDP - 10 . Cornmun . ACM 15 . 3 ( Mar . 1972 ) . 135 - 143 . Received l / 85 ; accepted 7 / & i 6 . Bush , V . As we may think . Atlunlic Morn . 176 , 1 ( June 1945 ) . 101 - 106 . 7 . Coffman . E . G . , Elphick . M . J . . and Shoshani . A . System deadlocks . ACM Con ~ put . Surv . 3 . 2 ( June 1971 ) , 67 - 78 . 8 . Denning , P . 1 . Virtual memory . ACM Conlput . Sure . 2 , 3 ( Sept . 1970 ) . 153 - 189 . Authors’ Present Addresses : Mark Stefik . Daniel G . Bobrow , Kenneth Kahn . Stan Lanning . and Lucy Suchman , Intelligent Systems Laboratory , Xerox Palo Alto Research Centar . 3333 Coyote Hill Road , Palo Alto , CA 94304 : Gregg Foster , Computer Science Division . University of Califor - nia . Berkeley . CA 94720 . 9 . Donahue . I . . and Widorn . 1 . Whiteboards : A graphical database tool . Permission to copy without fee all OI part of this material is granted ACM Tram . Off . Iuf Syst . 4 . 1 ( Jan . 1966 ) . 24 - 41 . provided that the copies are not made or distributed for direct commer - 10 . Uoyle . M . . and Straus . D . How fo Make Meefings Work . Berkeley cial advantage , the ACM copyright notice and the title of the publication Publishing Group . Naw York . 1984 . and its date appear . and notice is given that copying is by permission of 11 . Eoglebart . D . C . Collaboration support provisions in AUGMENT , the Association for Computing Machinery . To copy otherwise . or to OAC 84 digest . In Procrrditlgs of the 1984 AFIPS Office Aufonrafio ~ ~ republish . requires a fee and / or specific permission . Cottfcrrnce ( Los Angeles , Calif . Feb . 20 - 22 ) . AFIPS . Reston . Va . . 1984 . pp . 51 - 58 . 12 . Englebart . D . C . . and English , W . K . Research center for augmenting human intellect . In Proceedings of fhe Fall loint Computing Corlferetlce ( San Francisco . Calif . . Dec . Y - 11 ) . AFIPS , Reston , Va . . 1968 , pp . 395 - 410 . 13 . Foster . G . Collaborative systems and multi - user interfaces : Computer - based tools for cooperative work . Doctoral dissertation , Computer Science Division . Univ . of California at Berkeley , Dec . 1986 . To be published . 14 . Goldberg . A . , and Robson . D . Smalltalk - 80 : The Language and Its Im - plenwr ~ fatiwr . Addison - Wesley , Keading , Mass . . 1983 . 15 . Hansen . P . B . Operating System Principles . Prentice - Hall , Englewood Cliffs , N . J . , 1973 . 16 . Hiltz . S . R . . and Turoff , M . The Network Nation : Human Communica - fiou via Computer . Addison - Wesley . Reading , Mass . , 1978 . 17 . Hiltz . SK . . and Turoff , M . The evolution of user behavior in a com - puterized confarencing system . Commun . ACM 24 , 11 ( Nov . 1981 ) , 739 - 752 . 18 . Johansen . R . Telecotlferencing atfd Beyond : Conmumicatiom in the Of - fice of fhr Future . McGraw - Hill , New York , 1984 . 19 . Johansen , R . , Vallee . J . , and Spangler , K . Electronic Meetings : Tech ! & sal Altenrafives atld Social Choices . Addison - Wesley . Reading , Mass . , 1979 . 20 . Kraemer , K . L . . and King , J . L . Computer supported conference rooms : Final report of a state of the art study . Dept . of Information and Computer Science , Univ . of California , Irvine , Dec . 1983 . 21 . Lederberg . 1 . Digital communications and the conduct of science : The new literacy . Proc . IEEE 66 , 11 ( Nov . 1976 ) , 1313 - 1319 . 22 . Linstone . H . A . . and Turoff . M . The De / phi Mefhod : Techtiiques and Applicatiorls . Addison - Wesley . Reading . Mass . , 1975 . 23 . Metcalfe . R . M . , and Bog & D . R . Ethernet : Distributed packet switch - ing for local computer networks . Cunmnn ACM 19 , 7 ( July 1976 ) , 395 - 404 . 24 . Nelson . T . Literary Machi , rrs . Ted Nelson , Swarthmore . Pa . . 1981 . 25 . O’Connor . R . J . Outline processors catch on . InfoWorld ( July 2 , 19841 , 30 - 31 . 26 . Panko . R . R . Office work . Off . Techml . People 2 ( 1964 ) . 205 - 236 . 27 . Platt . J . R . Strong Inference . Scie ! Ice 146 , 3642 ( Oct . 1964 ) . 347 - 353 . 28 . Sanella . M . . et al . Inferlisp Reference Manual . Xerox PARC , Palo Alto , Calif . . 1983 . 29 . Sarin . SK . Interactive on - line conferences . Ph . D . thesis MIT / LCS / TK - 330 . MIT . Cambridge . Mass . , Dec . 1984 . 30 . Sarin . S . . and Greif , 1 . Computer - based real - time conferencing sys - tems . Conrpufer 18 , 10 ( Oct . 1985 ) . 33 - 45 . 31 . Sheil , B . Power tools for programmers . Dafnmafiotl ( Feb . 1983 ) . 131 - 144 . ] atluary 1987 Volume 30 Number 1 Communications of the ACM 47