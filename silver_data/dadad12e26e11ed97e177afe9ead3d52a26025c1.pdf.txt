- 1 - Video artifacts for design : Bridging the gap between abstraction and detail Wendy E . Mackay , Anne V . Ratzer & Paul Janecek University of Aarhus Department of Computer Science 34 Åbogade 8200 Århus N , DENMARK { mackay , avratzer , pjanecek } @ daimi . au . dk ABSTRACT This paper describes how our use of video artifacts affected the re - design of a graphical editor ( Design / CPN ) for building , simulating , and analyzing Coloured Petri Nets . The two primary goals of the project were to create design abstractions that integrate recent advances in graphical interaction techniques and to explicitly support the various patterns of using Petri Nets in real - world settings . Using a participatory design process , we organized a series of video - based design activities that helped us manage the tension between finding useful design abstractions and specifying the details of the user interface . Video artifacts resulting from one activity became the basis for the next , facilitating communication among members of the multi - disciplinary design team . The video artifacts provided an efficient way of capturing and incorporating subtle aspects of “Petri Nets In Use” into our design and ensured that the implementation of our design principles was grounded in real - world use . Keywords : Coloured Petri Nets , Participatory Design , Design process , Video Prototyping , Video Brainstorming , Toolglasses , Magnetic Guidelines , Design abstraction , Design details INTRODUCTION Video is a powerful tool that can be used throughout the design process , from initial observation of users , through idea generation ( video brainstorming ) and design exploration ( video prototyping ) to system evaluation . ( See Mackay and Tatar , 1989 , for an early collection of different uses of video as a research and design tool ) . Examples that are more recent have highlighted innovative uses of video to support critical incident analysis ( Hartson and Castillo , 1998 ) and to examine large quantities of video data ( Lange et al . , 1998 , Burr & Søndergaard , 2000 ) . While various multimedia data analysis systems have been developed over the years ( Halasz et al . , 1987 , Mackay & Davenport , 1989 , Hibino & Rundensteiner , 1998 , Mackay & Beaudouin - Lafon , 1998 ) , the problem remains that video is generally considered too detailed and cumbersome to work with . Even those who strongly advocate gathering detailed observations of use seek ways to abstract their findings , e . g . , Eriksson & Simon’s ( 1993 ) Verbal Protocol Analysis and Beyer and Holzblatt’s ( 1998 ) Contextual Inquiry . How can we take advantage of highly contextual , qualitative data , generating usable design abstractions without losing the key details ? This paper explores how selected use of video artifacts throughout the design process can bridge this gap between qualitative details and design abstractions . Video artifacts can be considered as the output of one design activity and then reused as input to the next . This reuse provides an efficient way to identify relevant material and apply it in later design phases . Going back and forth between detail and abstraction for both technology and system use ensures that design principles are appropriately grounded and that details are organized in a conceptually useful and accessible way . This paper describes our use of video artifacts to support the design of a new tool for creating and simulating Coloured Petri Nets . We begin with a brief description of the CPN2000 design project and then explain the four key elements of the design framework : the specific interaction techniques , the overall design principles , the generalized contexts of use and the users’ individual patterns of interaction . We then explain the design process , which addresses both the tension between technology and use and the tension between abstraction and detail . Finally , we follow the video artifacts related to the design of a particular interaction technique , toolglasses that support style changes , to illustrate how they support communication and bridge the gap between abstraction and detail . We conclude with an analysis of the role of video artifacts in the design process . The CPN2000 Project Coloured Petri Nets ( CPNs ) are a graphical formalism used by researchers and practitioners to describe , simulate and prove complex concurrent systems ( Jensen , 1992 ) . The Design / CPN tool , developed in the 1980s at the University of Aarhus , provides a graphical editor to interactively create , simulate , and analyze CPNs . The tool has been very successful and is in active use by over - 2 - 600 organizations around the world . However , the time has come to take advantage of advances in interface design and CPN simulation over the past decade . The CPN2000 project is a complete redesign of the Design / CPN tool . The project draws from three areas of expertise within the computer science department : Coloured Petri Nets , object - oriented languages and human - computer interaction . The project , funded by Hewlett - Packard , began in February 1999 , and involves participants from each of these research areas , with a core group of 11 people involved in the design and implementation . A primary goal of the redesign is to explore how recent advances in graphical interfaces and interaction techniques can improve the editor’s support for Coloured Petri net designers . This requires an understanding of Petri Nets In Use , our term for the collection of guidelines , work styles , and interaction patterns that influence the way designers build CPNs ( Janecek et al . , 1999 ) . We use a participatory design process ( Greenbaum & Kyng , 1989 ) , with users ( in our case , Coloured Petri Net designers ) contributing actively in the evaluation and redesign of their own Petri Nets In Use . Because we did not know in advance what the interface should look like , we began with a largely bottom - up design strategy . We were concerned about the details of the interface and used video to capture details of current use of the existing Design / CPN tool and to help us specify the details of the new interaction techniques . Yet we also worked top - down , revisiting a set of articulated design principles and models of use in order to simplify the interface , develop a clean system architecture , and ensure consistency in the design . DESIGN FRAMEWORK The design of any interactive system involves work within two domains : The technology domain consists of the factors that influence the architecture of the system , its functionality , and the interaction techniques . The use domain consists of design guidelines , overall work styles and the individual patterns of use . Addressing the tension between these domains has been a cornerstone of Human - Computer Interaction research for the past two decades ( Card , Moran and Newell , 1983 , Norman & Draper , 1986 , Norman , 1988 ) . Our design framework identifies two main issues in each domain . Within the technology domain , we must work out the specifics of different interaction techniques as well as create a set of design principles that unify the architecture of CPN2000 . In the use domain , we must understand the specific interaction patterns or ways in which CPN designers work as well as create models that capture the context of use or Petri Nets In Use . Note that both domains involve an inherent tension between abstractions , which are necessary for coherent design , and details , which are necessary to ensure that the system actually works . Good design requires both abstraction and detail : the challenge is integrate the two , so that they enhance rather than compete with each other . Figure 1 organizes the four main considerations of our design framework ( interaction techniques , design principles , context of use , and interaction patterns ) along two axes : technology / use and abstraction / detail . The next section describes each of these in turn . Figure 1 : The design framework The first consideration in the design framework is a technological one : the choice of interaction technique . The design process requires exploration of many details before settling on the final implementation . Interaction Techniques As stated earlier , one of the main goals of the CPN2000 project was to experiment with new interaction techniques . Standard architectures for graphical interfaces do not support these “Post - WIMP” interaction techniques and they are not trivial to add to existing interface toolkits . Thus , one of the major design activities has been to specify the details of several new interaction techniques and to build a user interface architecture to support them . We are working with the Instrumental Interaction model ( Beaudouin - Lafon , 2000 ) in which instruments mediate the interaction between a user and the objects in the interface . This model extends Shneiderman’s ( 1983 ) description of direct manipulation interfaces , which follow three principles : continuous representation of the objects of interest with meaningful visual metaphors , physical actions such as presses of labeled buttons instead of complex syntax , and rapid incremental reversible operations whose effect on the object of interest is immediately visible . Most traditional graphical interfaces implement direct manipulation through a combination of Windows , Icons , Menus , and Pointing ( WIMP ) . Although these have a number of strengths , e . g . , when designed well they are self - revealing to a novice user , they also force users to divert their focus away from the objects they are working with to commands embedded in menus and dialog boxes . In the context of a graphical editor , this separation between object and action is inefficient and slow . Abstraction use Contexts of Use Technology Detail principlesDesign Interaction patternsInteraction techniques - 3 - Toolglasses ( Bier et al . , 1993 ) , are a good example of instrumental interaction : they are floating , semi - transparent instruments for direct , two - handed manipulation . They are positioned with the non - dominant hand and applied with the dominant hand . A toolglass similar to a color palette would allow a user to apply a color to or absorb a color directly from an underlying object . The non - dominant hand moves the desired color over the object of interest ; the user then applies the color by clicking through the toolglass on the underlying object with the dominant hand . The user can thus specify both the object and the action with a single mouse click . Creating a particular toolglass sounds simple but involves a large number of design decisions , each of which interact with other design decisions . One could , of course , arbitrarily decide to pick one particular set of characteristics . However , we found that minor differences in the details often had a major impact on how the tool was perceived by users . Thus , our design process involved experimenting with a variety of different toolglass designs . We were also interested in selecting from a set of possible interaction techniques . At first , we thought we would have to choose the “best” interaction technique among the three we explored in depth ( toolglasses , marking menus and floating palettes ) . However , after an informal study and a controlled experiment , we found that no single interaction technique was always superior ( or always inferior ) to the others . Instead , some individuals strongly preferred one interaction technique in most circumstances ( with those preferences roughly evenly distributed across the three tools ) . The rest alternated their preferences according to the particular context of use ( described below ) . The second consideration in the design framework is also technological : the articulation of a set of design principles . These principles provide an abstraction that guides technological design choices given many individual design options . Design principles The three key principles we used to direct the overall graphical design are reification , polymorphism , and reuse : 1 . Reification extends the notion of what constitutes an object . Thus , commands can be made accessible as instruments , combinations of properties can be turned into styles , and the selection of multiple objects can be tagged and accessed as groups . 2 . Polymorphism extends the power of commands with respect to these objects , allowing similar operations to be applied to different objects . Thus , various objects can be cut , copied or pasted , any operation can be undone , and operations that apply to a single object can be applied to groups of objects . 3 . Reuse provides a way of capturing and reusing patterns of use . The user can reuse both previous commands and the responses by the system . Thus , input may be reused as the “redo” command and macros , output may be reused as input to other commands , and new commands may be created out of existing commands and a partial list of pre - defined arguments . These principles are explained in greater detail in Beaudouin - Lafon & Mackay ( 2000 ) . The reification principle has strongly influenced the design of the new tool . For example , in the current tool a set of objects are aligned by applying a “vertically align center” command , but additional objects cannot be added without reselecting the aligned objects . In the new tool , this alignment command is reified into a magnetic guideline , a visible first - class object that is continuously accessible and modifiable . New objects can be attached to the guideline , and moving the guideline also moves all the objects attached to it . These design principles are even more powerful when combined . For example , they led us to the insight that we did not need the concept of selection , which in turn enabled us to combine and integrate four interaction techniques : direct interaction , marking menus , floating palettes , and toolglasses . The design principles emerged during the design process beginning with the basic idea of instrumental interaction and our interest in integrating advanced interaction techniques . The videotapes of actual use also influenced the design principles by clarifying the different contexts in which the system would be used , and highlighting the diversity of approaches in the current tool . The third consideration in the design framework involves users : the examination of the context of use . Like the design principles , identification of the various contexts of use provides useful abstractions for describing how users work in different situations . Context of Use Early in the project , we realized that we needed to distinguish between the abstract creation of pre - defined Petri Nets and the more realistic problem of creating Petri Nets in everyday work settings . This led to our exploration of the concept of Petri Nets in Use , i . e . the collection of factors that influence the way a CPN designer works . We divide these factors into visual representations , work styles ( in different contexts of use ) , and individual interaction patterns . Visual representations are an essential component of a CPN designer’s work : they serve to communicate the underlying meaning of the net . Guidelines , such as Jensen’s ( 1992 ) readability guidelines , include suggestions on the use of structure and graphical attributes to emphasize the flow of data and the semantic relationships among objects . CPN designers draw from other sources as well , including information visualization techniques ( Noik , 1994 ) and guidelines from graph drawing research ( Di Battista , 1999 ) . Understanding - 4 - these guidelines and how designers employ them is important for creating a usable design tool . Work styles describe the CPN designer’s overall process of creating a net and are highly dependent on the context of use . In general , our observations and interviews showed that CPN designers usually begin by modeling the core functionality and then progressively add details , switching between editing ( building the model ) and simulation ( testing the model ) . This is similar to Schon’s ( 1983 ) description of design as an iterative process of “seeing” , “moving” and “reflection - in - action” . Our user studies identified three qualitatively different Petri Net design activities , which reflect three different work contexts : Edit an existing Petri Net : Implementing a set of hand - written changes on - line requires little active understanding of CPNs , but does require skill with the purely graphical or layout changes to the net . Modify an existing Petri Net : Copying a working Petri Net and editing it to address the problem at hand requires thinking about Petri Nets as nets , not simply their graphical components but takes advantage of existing layout and debugged code . Create a new Petri Net from scratch : Creating a new net from scratch requires the most understanding of CPNs but very little attention to layout , which is usually done later . Most current tools are designed to support making final layout decisions ( the first context of use ) . The assumption is that the CPN designer already knows what the net should look like . Our studies showed that this first situation does occur , usually after a group design meeting in which notes are written on paper and the on - line CPN is modified accordingly . However , the second is far more common . CPN designers rarely start with a blank page , instead they prefer to reuse previously solved problems . The main difficulty with this strategy is that it favors experienced CPN designers who have built up a personal library of usable nets ; novice CPN designers with the least knowledge and ability are the most likely to create new nets from scratch . Abstracting these three “contexts of use” enables us to identify , separate , and understand the reason for many of the interaction patterns we see in our videotapes . Which leads to the fourth consideration in the design framework : the capture of individual interaction patterns . As with interaction techniques , the design process requires the examination of a variety of detailed examples of interaction patterns before understanding the requirements of the new CPN tool . Interaction patterns Interaction patterns describe low - level sequences of commands performed by CPN users as they build , edit , or simulate CPNs . For example , in the first use context described above ( implementing a set of graphical changes ) , the CPN designer might turn seven objects blue , then rearrange five of them into a line , then add three new objects , and finally add arcs connecting them . The CPN designer would think of each object in turn and seek a tool that enabled an “object - first , command - second” syntax . In the third context of use ( creating a new CPN from scratch ) , the CPN designer might perform the same set of actions , but in a different order , since s / he would be thinking in terms of the structure of the CPN . S / he would then seek a tool that supported rapid switching between object - command and command - object , enabling rapid creation and manipulation of the CPN . Identifying and characterizing these individual interaction patterns requires access to many examples of individual interactions with the tool , under a variety of contexts . Understanding how these interaction patterns obtain in the current tool helps us determine which should be supported in the new tool , which need to be improved , and which need to be omitted entirely . USE OF VIDEO ARTIFACTS Despite some initial skepticism from our more theoretically minded colleagues , video has become an essential and accepted component of our design process . Spanning the full range of design activities , we use video to capture detailed examples of CPN designers at work , to illustrate new ideas for interacting with the tool , to show how the future tool would be used in different work contexts to accomplish different tasks , and to capture the results of both formal and informal evaluations of the tool . Video from each activity has dramatically enhanced communication among members of the design team ( who have a wide variety of backgrounds and knowledge of CPNs ) and with the sponsors of the project . A key factor in the success of this use of video has been the reuse of video . Video clips and related artifacts such as storyboards are not only the output of individual design activities , but also serve as input to subsequent design activities . Recycling video artifacts is more efficient : By continually re - evaluating the video in different contexts , we achieve both a deeper understanding of the design problem and become increasingly familiar with the details of both the technology and its use . DESIGN PROCESS Figure 2 shows how our design process maps onto the design framework in figure 1 . We began by observing users , then explored a variety of new ideas , then narrowed down those ideas into a workable design , and finally evaluated the design . In each case , we would go back to previous steps as needed , gathering new observations , generating more ideas or designing a new aspect of the system , or evaluating a design , as needed . - 5 - Figure 2 : Video artifacts in the design process The small collections of boxes next to each phase of the design process represent the video artifacts collected in that phase . In each case , the resulting video is analyzed and selected artifacts are presented or used as a foundation for the next design phase . Phase 1 : Observation We began the project by finding out as much as we could about the current use of the existing Design / CPN tool . We observed and videotaped expert users from both the local CPN group and from a local company , as well as student users learning the tool . We also interviewed members of each group . We analyzed the video to identify both normal patterns of use and problems with the current tool . We collected video clips of frequently occurring activities , such as handling the “red boxes” that indicate compilation errors , and grouped them together for a presentation to the design group . Some situations were very familiar , others surprised the CPN designers : expert users often underestimate how much time they spend on minor manipulations of the tool , especially those involving layout . We also created a set of use scenarios from the videos , which acted both as a method of interpreting and analyzing the data in terms of work styles and contexts of use , and as inspiration in later design activities . The video clips and interviews also served to specify the required functionality of the new tool and helped us begin to formulate our understanding of Petri Nets in Use . We have been able to reuse two forms of the video from the observation phase . Short clips illustrating open design issues , e . g . ineffective interaction patterns , are used to inspire and stimulate the brainstorming sessions . Longer “use scenarios” that show an entire task being performed in a particular use context , together with storyboards ( figure 6 ) are used to focus the design process in phase 3 . Phase 2 : Video brainstorming The purpose of the second phase was to generate as many new ideas as possible , without evaluating them . We performed several kinds of brainstorming activities with different groups of people . At the first user workshop , we asked members of the local user group to identify good and bad characteristics of the old tool and to generate ideas for the new tool . Later , we held weekly and sometimes bi - weekly design sessions , with a small group of CPN users , usually with more focused brainstorming tasks . In some cases , the brainstorming was open ; in others , we based the problem solving on video use scenarios drawn from phase 1 . We noticed that the format of the brainstorming session deeply affected both the quantity and quality of the resulting ideas : 1 . “Say it” We began with a standard brainstorming exercise , in which participants came up with as many ideas as they can , each of which were written on the whiteboard for later analysis . We found that this approach generated the largest quantity of ideas , but they were mostly vague , poorly formulated , and not particularly innovative . 2 . “Show it” We asked participants to draw on the whiteboard to illustrate the idea . This resulted in a reasonable quantity of ideas that were somewhat better formulated , but still very abstract and “static” . 3 . “Act it” We provided simple prototyping tools including colored pens , paper , transparencies , Post - it notes , and paper versions of real Petri Net examples . We asked participants to “act out” each interaction idea by drawing and cutting out the interface elements and demonstrating the interaction : what would a user actually do ? This resulted in fewer ideas , but each was well considered and more likely to capture the dynamic nature of the interaction . Communication among members of the design teams improved . 4 . “Videotape it” We repeated the “act it” exercise , but asked participants to also perform each idea for the camera ( see figure 3 ) . Figure 3 : A video brainstorming session After a bit of initial practice , the participants became actively engaged in producing video examples of new styles of interaction . This technique produced the fewest ideas , but the resulting ideas were the most innovative , in - depth and were able to be used directly by Technology Abstraction Detail Video prototypes Use use in context illustrating 3 . Design : 4 . Evaluation : use Contexts of principlesDesign patternsInteraction Interactiontechniques use ; scenarios Video clips of use of new tool 2 . Brainstorming : design ideas for Video clips of 1 . Observation : interaction patterns Video prototypes illustrating - 6 - programmers not involved in the exercise to create software simulations and tests . It is difficult to explain why participants act differently in the “act it” and the “videotape it” exercises . Perhaps because they know their ideas will be captured and viewed later , they are more likely to work out the details and think through the ideas . We saw more “theme and variation” explorations in this version , as participants wanted to capture the different possibilities for each idea . This exercise also had the highest level of participation : it is difficult to sit quietly thinking about other things when everyone else is preparing the materials for and organizing a new “take” . Although we reused ideas from each type of brainstorming session , the videotaped ideas were the easiest to reuse , and reappeared in later design activities as inspiration or reminders of different approaches . Phase 3 : Design Phase 3 began the difficult process of narrowing down the variety of design options we generated and selecting those that will appear in the new tool . We used the results of the brainstorming session , combined with the video clips of use scenarios , to create design scenarios illustrating how the new tool might be used . Our approach involves both bottom - up activities , revisiting the videos from the initial observations of use and from the video brainstorming sessions , and top - down activities . We systematically identify all the necessary and desired functions of the new tool and lay them out in a functional table . Within each category , we identify the objects and their corresponding operations . Then , for each function , we identify a set of possible interaction techniques . We link the scenarios to a functional table , enabling us to systematically analyze how well the new tool supports Petri Nets In Use and decide among different interaction techniques . For example , the preferred interaction technique changes according to whether you are creating a single CPN “transition” ( shown as a rectangle ) or a large set of transitions . Some interaction techniques make the former easier , whereas others make the latter easier . We wanted to facilitate the sequences that make most sense from a CPN designer’s perspective , in each of the most common contexts of use . Phase 4 : Evaluation A systematic experimental evaluation of all possible design options is impossible : The design of the new tool is very complex , with each decision affecting other decisions . So , we find ourselves returning to the previous design phases to gather more data . The video data from each previous phase has proven useful in helping us to design different kinds of evaluation . For example , at a retreat for CPN designers ( most of whom were not involved in the design of CPN2000 ) , one dozen ( six pairs ) of CPN designers systematically tried and commented on each of the new interaction techniques . We began with videotapes of our design scenarios and then presented software prototypes of the new tool , derived directly from the video brainstorming videotapes . We also conducted a more formal experiment to compare the different interaction techniques under different use contexts . In this experiment we asked 18 CPN designers from outside the project to work through seven scenarios , derived from our observations of expert users in an external company . The scenarios were varied systematically to capture each of the contexts of use . ( Note : We plan to report on the results of these studies in a future paper . For the purposes of this paper , suffice it to say that the video artifacts from the observation sessions were essential for the design of the experiment . ) Of course , we videotaped the participants in both evaluation exercises , which has resulted in new observations of use . For example , we are currently working on the design of “groups” of objects , and were able to identify different strategies for creating and managing groups from the experiment . We have a video archive , which makes it easy to go back and ask questions as they arise . For example , we have videotaped use of the prototypes at different stages ; referring to older videotapes helps us track how the tool has changed , remember ideas that would otherwise get lost and to check for consistency across versions . DESIGN PROBLEMS AND SOLUTIONS One significant issue identified during the initial phases of the design process was the need for improved support for managing graphical attributes , such as color and line thickness . Effective use of these graphical attributes enhances readability of the net . Examples include making semantically similar objects look the same , emphasizing the differences among functionally distinct objects , and highlighting the main flow of a CPN cycle . The new CPN2000 editor supports the concept of styles , or collections of graphical attributes , which can be implemented with a toolglass . This section provides a specific example of the role of video artifacts by tracing the evolution of the CPN2000 toolglass through the design process . One of the first issues raised in our early interviews and open - ended brainstorming sessions was the problem of managing attribute styles . CPN designers wanted to be able to create personalized style sheets and search for objects based on their style attributes . When we observed users at work , we looked for different examples of the ways people used styles . For example , one group used line thickness , rather than color , to distinguish different types of flow in the network because they only had a black - and - white printer . We were interested in the specific ways in which users changed line styles to fit the corporate guidelines . Figure 4 shows how the current tool manages graphical attributes with a standard , modal dialog box . Note the quantity of attributes the user must choose among . Today’s Design / CPN users do not have access to styles . Instead , they usually copy an object with the desired style - 7 - and then change any non - shared attributes in the new item . Figure 4 : Managing attributes in the old tool We have numerous video clips of users trying to change attributes with the old tool . The “ideal” situation shows a four - step process : The user selects the line , chooses the “set graphical attributes” entry in the menu , selects the desired line thickness in the dialog box , and then clicks “OK” . Repeating this process for multiple objects is very cumbersome . Other video clips show significantly longer and more frustrating attempts to change attributes . Video brainstorming Workshop We showed videos of recent research in new interaction techniques prior to one of the video brainstorming workshops . The CPN designers felt that the toolglass , with its use of two hands , might significantly reduce the number of keystrokes and frustration involved in changing attributes . The idea was to create a see - through tool containing the relevant attributes ( color , line thickness , etc . ) : the left hand would move the tool over the desired object and the right hand would “click through” the toolglass to apply the appropriate attribute to the appropriate object . Figure 5 : “Styleglass” : Style preview toolglass Based on the video clips of users having problems changing attributes with the old tool and the video clips of new interaction techniques , the CPN designers , together with other participants in the design workshop , developed ideas for several variations of tool glasses . Different groups worked with different scenarios ; figure 5 shows one of the design ideas from the group working with a scenario concerning the layout of a CPN . The idea , called a “styleglass” , allows the user to display objects in the net with different styles : one style for the client side of the network , one for the server side . Participants at the workshop developed several variations on this idea : One - handed toolglasses , toolglasses that can be resized , and toolglasses for cut and paste of graphical structures . We gave the video clips of these ideas to one of the programmers , who was able to quickly build software prototypes that helped us try out the “look - and - feel” of the different versions . We systematically varied some of the characteristics of these software prototypes , e . g . , changing the number and color of the cells , switching between one and two - handed input , and switching between transparent and opaque cells ) in Tcl / Tk and presented them to the CPN2000 project group for evaluation . Once members of the design team had a chance to actually try the toolglass , they became convinced of its potential and decided to pursue it as a major element of the design . ( Note that this was not a minor decision , since it involves asking users of the new CPN2000 tool to use both a mouse and a separate pointing device , such as a trackball . ) Another outcome was that design team members were able to see the direct link between the video artifacts they had created and their realization in working software . The designers could recognize their own and their colleagues’ ideas and judge how faithfully the software version followed the idea . We were able to make a simple collection of prototypes and refer to video artifacts for additional ideas . This built confidence in both the video artifacts and the software prototypes and significantly enhanced communication between CPN designers and software developers . Given the simplicity of these first prototypes , the feedback was mostly on the idea level and not really an in - depth evaluation . Some of this feedback ( how many frames should we have , where do you click to apply changes to an object , etc . ) was used in the design phase and for the subsequent prototypes . Design We decided to develop the ideas from the video brainstorming workshops into full - fledged designs . We created design scenarios that were grounded in our videotaped observations of actual use of CPNs , as the basis for the design . We constructed several scenarios , some composed of actual video clips , others re - enacted based on video we had seen . - 8 - Figure 6 shows a segment of a paper storyboard used to construct one of these video clips . The clip showed simple editing of graphical attributes on a single page , Figure 6 : Part of storyboard for use scenario selecting all items with some particular property and changing them to a new style . The storyboard contains a number of screenshots showing the changes made throughout the task , with an explanation of the operations performed next to the screenshots . The users were asked to fill out an empty storyboard with their own ideas for interactions and then act these interactions out to the video camera . We showed the workshop participants the video clip and then asked them to brainstorm ideas on how the task could be performed with the future tool . They generated a number of different versions of a search and replace toolglass : a toolglass that makes it easy to find and change items with a certain property or combination of properties . Figure 7 : Graphical search and replace toolglass Figure 7 shows one of the ideas , a circular toolglass with three sections around the outside for line style , line thickness , and line color . Clicking through the center picks up the attributes of the object underneath , changes the current settings in the different sections of the toolglass , and highlights other objects in the diagram with the same attributes . A related toolglass allows the user to specify the values of attributes to search for and the attributes to replace them with . It is possible , for example , to set the toolglass to find all objects that are red and make their outlines dashed . Figure 8 : Toolglass prototypes . ( a ) Click through Toolglass . ( b ) Magic Lens version of Toolglass We based the second software prototypes on the evaluation of the first and the design ideas from the use scenario workshop . We built two simple versions of toolglasses for changing the graphical attributes of objects in the net . Figure 8a shows a toolglass prototype that a user clicks through to apply an attribute to an underlying object . Figure 8b shows a Magic Lens version of the earlier prototype with transparent cells showing the net underneath in different styles , with click - through for applying the styles . The upper two cells of the toolglass show the arcs in different line thicknesses , and the lower two cells show the arcs in different colors . Evaluation We continued to define and evaluate the low - level interaction with toolglasses , similar to those shown above , by testing them against use scenarios . We also used the design principles to ensure consistency among design ideas and to generate new avenues for exploration . The walkthrough and experimental evaluations were based on video clips and the “context of use” principles . These studies provided feedback on the details of the interaction , such as reaction time , appearance of toolglasses , the use of two hands and the contexts of use . - 9 - Figure 9 : Attribute toolglass in the new tool Figure 9 shows the most recent version of an attribute toolglass , in a full - scale working prototype of CPN2000 . The user can change the color or line thickness of an object by “clicking through” the appropriate cell in the top two rows . The last row includes cells for picking up styles from existing objects and applying them to other objects . The user can thus carry around up to four personalized styles , for use as needed . The appearance and interaction with the toolglass is the result of trying out and comparing options derived from the different design activities and continuously asking users for feedback . One can see a clear connection between the first prototype in figure 5 and the final version , yet many of the small details have changed . The role of the video camera The video camera has different roles and different influences in the different situations . The camera can act as an unobtrusive “fly on the wall” in field studies of users at work . Yet , its presence becomes important in design meetings , focusing the designers’ thoughts , increasing their awareness of the details of the interaction , and facilitating communication among the participants . Finally , the presence of the camera actively changes the behavior of the participants during video prototyping , forcing them to think through the interactions they are proposing and illustrating them in a way that can be captured directly with the software . CONCLUSION Our design process , which explicitly used video artifacts to capture and communicate the details of the interaction throughout the design process has helped us to manage the tension between abstract discussions of design principles and detailed discussions of interface details . One can deride observations of use in the field as merely “anecdotal evidence” , which may or may not be typical of ordinary use . Yet , we have found that even small quantities of video examples shown to designers astonish them and challenge their assumptions about how users use existing systems . Video clips of external users , ranging from novice to expert , help counterbalance the often strongly held opinions of the CPN experts participating in the tool’s design . While we cannot hope to capture every aspect of use , we can capture a great deal of both usual and unusual situations , providing a rich and concrete basis from which to design . The temptation with lots of unrelated bits of video is to create a separate solution for each one . This is where the design principles come in : they help us look at the more general problems underlying the specific examples we see and address them at a more global level . Our analysis of the video data has also helped to identify distinct patterns of use , which , when checked with other groups of CPN users , match what they say they do . In general , the video artifacts provided an efficient way of capturing and incorporating subtle aspects of Petri Nets In Use into our design and ensured that the implementation of our design principles was grounded in real - world use . ACKNOWLEDGMENTS We would like to thank all the members of the CPN2000 design team who participated in our design process , including members of the Beta , HCI , and CPN groups . We would also like to thank the CPN users , students , and experts who participated throughout the design process . Thanks especially to Michel Beaudouin - Lafon for comments on an earlier draft of this paper . REFERENCES Beaudouin - Lafon , M . ( 2000 ) Instrumental Interaction : An Interaction Model for Designing Post - WIMP User Interfaces . In Proceedings of Human Factors in Computing Systems , ACM / CHI2000 , the Hague , the Netherlands , ACM Press . ( Available at : http : / / www . daimi . au . dk / ~ mbl / CHI2000 ) Beaudouin - Lafon , M . and Mackay , W . ( 2000 ) Reification , Polymorphism and Reuse : Three principles for designing visual interfaces . To appear in Proceedings of Advanced Visual Interfaces , AVI 2000 , Palermo , Italy . ( Available at : http : / / www . daimi . au . dk / ~ mbl / AVI2000 ) Beyer , H . & Holtzblatt , K . ( 1998 ) Contextual Design . Defining Customer - Centered Systems . Morgan Kaufmann Publishers . Bier , E . , Stone , M . , Pier , K . , Buxton , W . , and DeRose , T . ( 1993 ) Toolglass and magic lenses : The see - through interface . In Proceedings of the 20th annual conference on Computer graphics , pp . 73 - 80 . Buur , J . & Søndergaard , A . ( 2000 ) Video Card Game : An augmented environment for User Centered Design discussions , To appear in Proceedings of DARE 2000 , Designing Augmented Reality Environments . Elsinore , Denmark . ACM / SIGCHI . Card , S . , Moran , T . , and Newell , A . ( 1983 ) The Psychology of Human - Computer Interaction . Hillsdale , N . J . : Lawrence Ehrlbaum Associates . Carroll , J . ( 1995 ) Scenario - based design . Envisioning work and technology in system development . NY : Wiley & Sons . Di Battista , G . , Eades , P . , Tamassia , R . , & Tollis , I . ( 1999 ) Graph Drawing - - Algorithms for the Visualization of Graphs . Prentice Hall , New Jersey . Greenbaum , J . & Kyng , M . ( 1991 ) Design at work : Cooperative design of computer systems . NY : Lawrence Erlbaum Associates , Inc . Halasz , F . , Moran , T . & Trigg , R . ( 1987 ) Notecards in a Nutshell . In Proceedings of CHI + GI ‘97 , Human Factors in Computing Systems . Toronto , Canada , ACM Press . pp . 45 - 52 . Hartson , R . and Castillo , J . ( 1998 ) . Remote evaluation for post - deployment usability improvement . Proceedings of ACM AVI ‘98 , Conference on Advanced Visual Interfaces . Bari , Italy : ACM . - 10 - Hibino , S . & Rundensteiner , E . ( 1998 ) Comparing MMVIS to a time - line for temporal trend analysis of video data . In Proceedings of ACM AVI ‘98 , Conference on Advanced Visual Interfaces . Bari , Italy : ACM . pp . 195 - 204 . Janecek , P . , Ratzer , A . , & Mackay , W . ( 13 - 15 October 1999 ) Petri Nets in Use : Redesigning Design CPN . In Proceedings of the Second Workshop on Practical Use of Coloured Petri Nets and Design / CPN . ( K . Jensen , Ed . ) , pp . 119 - 131 . Aarhus , Denmark . Jensen , K . ( 1992 ) Coloured Petri Nets - - Basic Concepts , Analysis Methods and Practical Use . Volume 1 , Basic Concepts . EATCS Monographs on Theoretical Computer Science , Springer - Verlag . Lange , B . M . , Jones , M . A . & Meyers , J . L . ( 1998 ) Insightlab : An immersive team environment linking paper , displays , and data . In Proceedings of ACM CHI ‘98 Human Factors in Computing Systems . Los Angeles , California : ACM / SIGCHI , pp . 416 - 423 . pp . 550 - 557 . Mackay , W . E . and Davenport , G . ( July 1989 ) . Virtual Video Editing in Interactive Multi - Media Applications . Communications of the ACM , Vol . 32 ( 7 ) . Mackay , W . E . and Bødker , S . ( 1994 ) Workshop on Scenario - Based Design . In CHI’94 Conference Companion . , Boston , MA : ACM Press . Mackay , W . E . & Fayard , A . L ( 1997 ) HCI , Natural Science and Design : A Framework for Triangulation Across Disciplines , In Proceedings of DIS’97 : Designing Interactive Systems . Amsterdam , Holland . Mackay , W . E . and Tatar , D . ( 1989 ) Workshop on Video as a Research and Design Tool . Special Issue of the SIGCHI Bulletin . ACM / SIGCHI . Mackay , W . & Beaudouin - Lafon , M . ( 1998 ) DIVA : Exploratory Data Analysis with Multimedia Streams . In Proceedings of ACM CHI ‘98 Human Factors in Computing Systems . Los Angeles , California : ACM / SIGCHI , pp . 416 - 423 . Nielsen , J . and Phillips , V . L . ( 1993 ) Estimating the relative usability of two interfaces : Heuristic , format and empirical methods . In Proceedings of INTERCHI ‘93 ACM Conference on Human Factors in Computing ( pp . 214 - 221 ) Amsterdam , The Netherlands : ACM Press . Norman , D . A . and Draper , S . W . ( 1986 ) . User - Centered System Design . Hillsdale , New Jersey : Ehrlbaum Associates . Norman , D . A . ( 1988 ) The Design of Everyday Things . New York : Basic Books . Noik , E . G . ( 1994 ) A Space of Presentation Emphasis Techniques for Visualizing Graphs . In Proceedings of Graphics Interface ‘94 , pp . 225 - 233 . Schon , D . ( 1983 ) The Reflective Practitioner . New York : Basic Books . Shneiderman , B . ( 1983 ) . Direct Manipulation : a Step Beyond Programming Languages . IEEE Computer , 16 ( 8 ) , pp . 57 - 69 . Ericsson , K . A . & Simon , H . A . ( 1993 ) Protocol Analysis : Verbal Reports as Data . Cambridge : MIT Press . Suchman , L . ( 1987 ) . Plans and Situated Actions . Cambridge , England : Cambridge University Press .