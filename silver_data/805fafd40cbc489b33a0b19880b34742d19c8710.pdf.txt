COGNITIVE SCIENCE 16 , 395 - 429 ( 1992 ) The Structure of Design Problem Spaces VINOD GOEL AND PETER PIROLLI University of California , Berkeley It is proposed that there are important generalizations about problem solving in design activity that reach across specific disciplines . A framework for the study of design is presented that ( a ) characterizes design as a radial category and fleshes out the task environment of the prototypical cases : ( b ) takes the task environ - ment seriously : ( c ) shows that this task environment occurs in design tasks , but does not occur in every nondesign task : ( d ) explicates the impact of this task environment on the design problem space : and ( e ) demonstrates that , given the structure of the information - processing system , the features noted in the prob - lem spaces of design tasks will not all occur in problem spaces where the task environment is vastly different . This analysis leads to the claim that there are a set of invariant features in the problem spaces of design situations that collec - tively constitute a design problem space . Protocol studies are reported in which the problem spaces of three design tasks in architecture , mechanical engineer - ing , and instructional design are explored ond compared with several protocols from nondesign problem - solving tasks . The proper study of mankind is the science of design . ( Simon , 1981 , p . 159 ) 1 . INTRODUCTION Design is a quintessential cognitive task . The activity of design involves the mental formulation of future states of affairs . The products of design ac - tivity are external representations of such possible futures . Creative design is also one of the recognizable features that distinguishes modern humans from other intelligent makers of artifacts ( Mellars , 1989 ; White , 1989 ; This article is a condensed version of chapters 3 and 4 of Gael’s ( 1991 ) dissertation . Fund - ing for this research was provided by the Office of Naval Research Cognitive Science Program , grant number NOOO14 - 88 - K - 0233 to Peter Pirolli , and a Myrtle L . Judkins Memorial Fellow - ship , a Canada Mortgage and Housing Corporation Scholarship , a Gale Fellowship , and a research internship at the System Sciences Lab at Xerox PARC and CSLI at Stanford Univer - sity to Vinod Goel . We would like to thank Dan Berger , Kate Bielacxyc , Susan Newman , Mii Reeker , and Mike Sipusic for comments and discussions throughout this project . Correspondence and requests for reprints should be sent to Vmod Goel , Cognitive Neuro - science Section , NIH / NINDS / MNB , 9000 Rockville Pike , Bldg . 10 , Room 5S209 , Bethesda , MD 20892 . 395 396 GOEL AND PIROLLI Wynn , 1979 , 1981 ) . Design is , therefore , fundamentally mental , representa - tional , and a signature of human intelligence : Features that surely make it an important subject of study in cognitive science . The study of design in cognitive science is also timely in the context of past and recent developments in the field . Much of the early work on prob - blem solving ( e . g . , Newell & Simon , 1972 ) examined performance on well - structured , semantically impoverished tasks - such as puzzle solving - having well - defined goals , problem states , and operators . Ill - structured problems , which have ill - defined goals , states , or operators , have been receiving increas - ing attention . Such research includes studies of software design ( Guindon , 1989 ; Jeffries , Turner , Polson , & Atwood , 1981 ; Kant , 1985 ) , mechanical engineering ( Ullman , Dietterich , & Stauffer , 1988 ) , and the formulation of administrative policy ( Voss , Greene , Post , & Penner , 1983 ) . In addition , studies of problem solving in semantically rich domains involving the use of mental models , such as physics ( Gentner & Gentner , 1983 ) , have also in - creased over the past decade . Design , of the sort we are interested in , is ill - structured in that the tasks involve underspecified goals and operators . The kinds of knowledge that may enter into a design solution are practically limitless . Furthermore , because design inherently consists of the formula - tion of models of possible states of affairs in the world , it intrinsically in - volves mental models and a rich set of semantics . Given such trends in the study of problem solving , design is a compelling test bed for further integra - tion and advancement of theories of cognition . There are also practical reasons for being interested in the study of design . Design activity has major impact on construction and manufactur - ing costs and capabilities . Although it is the case that design accounts for only 3 - 7 % of product costs , and that the real money is spent during the manufacturing or construction stage , it is also the case that 80 % of manu - facturing costs are committed during the first 20 % of the design process ( Dixon & Duffey , 1990 ) . Analysts have noted serious shortcomings in both education and practice of design and have recently stressed that a lack of a basic scientific understanding of the design process is endangering Ameri - can industry and productivity ( Dertouzos , Lester , & Solow , 1989 ) . In this article , we present a framework , theory , and method for the study of design tasks , along with empirical analyses of expert design in three diverse disciplines . Our goal is to address the knowledge and cognitive pro - cesses of individual designers , although clearly , design is often the coor - dinated effort of many individuals ( Curtis , Krasner , & Iscoe , 1988 ) . The framework is intended to encompass theories or models that generalize across design tasks , provide accounts of individual acts of design , and af - ford computational accounts of moment to moment information process - ing . In the next section we embed our work in the literature with a very brief outline of past design research and then present our research framework and empirical analyses in subsequent sections . GENERIC DESIGN 397 2 . AN OVERVIEW OF DESIGN RESEARCH The development of systematic theories of design has a long history within the design professions , dating back to Leon Battista Alberti’s ( 1450 / 1988 ) treatise on architecture . More recently , cross - disciplinary systematization of design was attempted in the design methodology movement . In part , this movement was spurred on by the large military and civilian projects of the 1950s and 196Os , such as the development of the Polaris Missile and the moon landing . The design methodology movement responded with a number of prescriptive proposals for the systematization of the design process . A number of researchers ( Alexander , 1964 ; Archer , 1969 ) observed that design had two components : a logical element and a creative element . Both were necessary , but required very different abilities . The basic idea of the design methodology movement was to develop systematic external methods and tools to carry out the logical analysis better , and to unburden the designer to engage in the creative aspects of problem solving ( Cross , 1984 ) . One of the intellectual outcomes of this research was a consensus among many practitioners that , whereas the various design professions , for exam - ple , architecture , engineering , industrial design , urban design , and so on , differed in particulars , they nonetheless shared a common core that united - them as design professions and differentiated them from nondesign profes - sions such as medicine . This unifying core was thought to reside in the fact that design problem - solving activity involved the following sequence of steps : 1 . An exploration and decomposition of the problem ( i . e . , analysis ) . 2 . An identification of the interconnections among the components . 3 . The solution of the subproblems in isolation . 4 . The combination ( taking into account the interconnections ) of the par - tial solutions into the problem solution ( i . e . , synthesis ) . On this basis many researchers concluded that “the logical nature of the act of designing is largely independent of the character of the thing designed” ( Archer , 1969 , p . 76 ) . These prescriptive proposals for revamping design methods gave way to studies involving either the logical analysis of design problems ( Alexander & Poyner , 1966 ; March , 1976 ; Reitman , 1964 ; Rittel & Webber , 1973 ; Simon , 1973a ) or empirical studies ( Akin , 1979 , 1986 ; Darke , 1979 ; Eastman , 1969 ) of design as it naturally occurs in the world ( or at least the laboratory ) . Another line of attack on design problems emanated from information - processing analyses of problem solving . Design problems that require some creativity for their solution were identified as ill - defined or ill - structured problems by Reitman ( 1964 ) . In other words , such problems initially have underspecified or ambiguous specifications of their start state , goal state , or the function that transforms the start state to the goal state . Simon 398 GOEL AND PIROLLI ( 1973a ) argued that there was nothing intrinsic about a problem , per se , that make it ill - or well - structured , but rather , that such properties could only be determined by examining the relationship between the problem solver , its available knowledge , and the problem to be solved . Furthermore , Simon concluded that information - processing accounts were adequate to deal with both ill - structured and well - structured problem solving . Many recent analyses of design have been carried out in the framework of cognitive psychology or artificial intelligence ( Akin , 1979 , 1986 ; Brown & Chandrasekaran , 1989 ; Guindon , 1989 ; Jeffries et al . , 1981 ; Kant , 1985 ; Mostow , 1985 ; Tong & Franklin , 1989 ; Ullman et al . , 1988 ) . However , as noted in Goel and Pirolli ( 1989 ) , much of the cognitive science research on design problem solving suffers from the following difficulty : Either the research has tended to concentrate on the analysis of discipline - specific design domains and has shied away from cross - disciplinary generalizations ; or the term “design” has been applied to an increasingly large set of activities that begins to drain it of substance . Such unlikely tasks as learning ( Perkins , 1986 ) , communication ( Thomas , 1978 ) , letter writing , naming , and schedul - ing ( Thomas & Carroll , 1979 ) have all been called design activities . We differ from much of this research in believing neither that ( a ) design activity characterizations must be discipline specific , n . or ( b ) that design is a ubiquitous activity . There is no more reason to construe every cognitive activity as a design activity than there is reason to construe every cognitive activity as a game - playing activity or a natural language - generation activity . We assume that there are significant commonalities in the structure of design problems and tasks across the various design disciplines , and there are significant differences in the structure of design problems and non - design problems . As such , we make a strong commitment to the study of design as a subject matter in its own right , independent of specific tasks or disciplines . We use the term generic design to refer to this study . We should note , however , that we are not alone in thinking that there must be interest - ing generalizations to be drawn across broad classes of problems ( e . g . , Chandrasekaran , 1983 , 1987 ; Greeno , 1978 ) . Another way in which our work differs from other efforts in cognitive science is that we explicitly acknowledge that our studies must emphasize the analysis of design problems and the situations in which they occur . Al - though the importance of analyzing such tusk environments has been stressed in classical theories of human information processing and problem solving ( Newell & Simon , 1972 ) , such analyses are often taken for granted . In par - ticular , researchers dealing with design problems have not let such under - standing inform their data analysis and theorizing . We propose to take and develop the notion of design problems and the contexts in which they occur and let it seriously guide our cognitive characterizations . Our research can therefore be viewed as an integration of two themes . It is an attempt to show that design problem solving is a natural category of GENERIC DESIGN 3954 activity and is interestingly different from nondesign problem - solving ac - tivity . This attempt draws on the analysis of design problems and situations , and uses the results as both framing and explanatory constructs . In the next section we propose a framework in which to carry out such a study ; subse - quent sections describe empirical analysis conducted within the framework . 3 . A FRAMEWORK FOR STUDYING DESIGN In order to study generic design , we need to develop criteria for demarcating and recognizing design problems , and we need some understanding of their common characteristics . Our framework for such an analysis derives from Newell and Simon’s ( 1972 ) information - processing theory of human problem solving . Basically , a human problem solver is viewed as an information - pro - cessing system with a problem . A tusk environment is the external environ - ment , inclusive of the problem , in which the information - processing system operates . A problem space is a formalization of the structure of processing molded by the characteristics of the information - processing system , . and more importantly , the task environment . A problem space is defined in terms of states of problem solving , operators that move the problem solving from one state to another , and evaluation functions . Our intuitions about generic design can be formulated in information - processing theory as an hypothesis about the design problem space . Design Problem Space Hypothesis : Problem spaces exhibit major invariants across design problem - solving situations and major variants across design and nondesign problem - solving situations . Our level of characterization of the design problem space will not be in terms of states , operators , and evaluation functions , as is standard in many psychological investigations ( Newell & Simon , 1972 ) , but will be stated in a higher level vocabulary , in terms of a set of invariant features common to , or characteristic of , design problem spaces . Formally , this move to abstrac - tion is comparable to the development of process and data abstractions in computer science ( Liskov & Guttag , 1984 ) . The basic strategy for explicating the design problem space will be as follows : ( a ) specify some salient features in the cognitive structure of the designer ; ( b ) specify the salient common features or invariants in the task environment of design problems ; ( c ) show that they constitute a rather unique set of invariants not found in just any arbitrary problem - solving situation ; ( d ) let the problem space be shaped by these two sets of con - straints ; ( e ) ‘note the structure of the resulting problem space and make “ex - planatory connections” between this structure and the invariants of the 400 GOEL AND PIROLLI design task environment and the cognitive system ; ( f ) show that the struc - ture of at least some nondesign problem spaces is very different ; ( g ) make the Newell and Simon ( 1972 ) argument that , given the structure of the prob - lem solver as a constant across all cognitive activity , any interesting dif - ferences across problem spaces of vastly different tasks will be a function of the task environment ; and Q on this basis , claim that these features are in - variants of design situations and collectively constitute a design problem space . In the following subsections we specify the structure of the informa - tion - processing system , the structure of the design task environment , and make some predictions about the design problem space . 3 . 1 The Structure of the Information - Processing System In the classic Newell and Simon ( 1972 ) theory of human problem solving , a cognitive system is a simple , relatively unconstrained mechanism . It is basic - ally a physical symbol manipulation system with memory stores ( short term , long term , external ) , a processor , sensory receptors , and motor effecters . There are , of course , several more sophisticated accounts in the literature . We view our use of the Newell and Simon theory , as a way of providing a reasonable first - order approximation of human information processing that is consistent with a wide variety of more recent proposals of human cogni - tive architectures ( Anderson , 1983 ; Newell , in press ) . The essential con - straints on human information processing proposed by Newell and Simon that are relevant to our analysis - the limitations of short - term memory , ex - ternal memory , and the sequential nature of symbolic processing - would probably show up in many theoretical alternatives . Even a connectionist theory would probably incorporate similar assumptions to address the human limitations in heeding information , and the sequential nature of problem - solving activity . 3 . 2 The Structure of the Design Task Environment Task environments consist of ( a ) a goal , ( b ) a problem , and ( c ) other rele - vant external factors ( Newell & Simon , 1972 ) . In many studies of problem solving , the emphasis has been on how the structure and content of apartic - ular problem gets mapped onto the problem space . In contrast , our explica - tion of the design task environment involves looking beyond the individual problem and specifying the relevant external factors common to all design problems . Having put the problem thus , there are two difficulties that must be dealt with . First , before one can look at the commonalities across the category of design problems , one must be able to specify what constitutes the category , or at least to identify members of it . Second , having identified the category in some way , one is confronted with the problem of identifying the aspects of the task environment that are relevant . Both of these difficulties have GENERIC DESIGN 401 proven to be a notoriously challenging ( Goel & Pirolli , 1989 ) . We provide criteria motivated by categorization theory to address the first problem and rely on intuitions , developed through immersion in the discipline of archi - tectural design , ’ to generate criteria that address the second problem . It is our contention that design is too complex an activity to be specified by necessary and sufficient conditions . Rather , design as a category exhibits what Rosch ( 1978 ) called “prototype effects . ” Furthermore , it is what Lakoff ( 1987 ) called a “radical category , ” a category in which there is a central , ideal , or prototypical case and then some unpredictable but motivated variations . Given this assumption , one could use a variety of con - vergent operationalizations to determine the constituent structure of the category of design activity . For instance , if one shows people a list of profes - sions , for example , doctor , lawyer , architect , teacher , engineer , researcher , and asks which are the best examples of design professions , people will usually pick out the same few cases . In this list we believe the best examples would be architecture and engineering . We propose to call these central , or prototypical examples of design profession . Having made this observation , we have a nonarbitrary and interesting characterization of design activity . We are now in a position to take a serious look at the task environment of these prototypical design profes - sions and attempt to isolate some interesting common features . We note the following overt features of design task environments ( for an earlier approx - imation of this list , see Goel & Pirolli , 1989 ) : A . Distribution of information . As initially noted by Reitman ( 1964 ) , there is a lack of information in each of the three components of design prob - lems . The start state is incompletely specified , the goal state is specified to an even lesser extent , and the transformation function from the start to goal states is completely unspecified . B . Nature of constraints . The constraints on design task environments are generally of two types : ( a ) nomological , and ( b ) social , political , legal , economic , and so on . The latter consists of rules and conventions and are always negotiable . The former consists of natural laws and are never negotiable . However , the constraints of natural law vastly under - determine design solutions . Design constraints are rarely , if ever , logi - cal ( i . e . , they are not constitutive of the task ) . 2 C . Size and complexity of problems . Design problems are generally large and complex spanning time scales on the order of days , months , or even years . I First author . 2 These important distinctions have not been widely appreciated in the literature . Simon ( 1973a ) , for example , failed to ( refused to ) recognize them . 402 GOEL AND PIROLLI D . E . F . G . H . I . J . K . L . Component parts . Being large and complex , design problems have many parts . But there is little in the structure of design problems to dic - tate the lines of decomposition . Decomposition is substantially dictated by the practice and experience of the designer . Interconnectivity of parts . The components of design problems are not logically interconnected . There are , however , many contingent inter - connections among them . Right and wrong answers . Design problems do not have right or wrong answers , only better and worse ones ( Rittel & Webber , 1973 ) . Input / output . The input to design problems consists of information about the people who will use the artifact , the goals they want to satisfy , and the behavior believed to lead to goal satisfication . The output con - sists of the artifact specification . Functional information in many ways mediates between the input and output information . This is a rather standard characterization adapted from Wade ( 1977 ) , and is further discussed in Section 4 . 1 . 3 . Feedback loop . There is no genuine feedback from the world during the problem - solving session , It must be simulated or generated by the designer during the problem - solving session . Feedback from the world comes only after the design is completed and the artifact is constructed and allowed to function in its intended environment . But , of course , at this point , the feedback cannot influence the current project , only the next “similar” project . Costs of errors . There are costs associated with each and every action in the world , and the penalty for being wrong can be high ( Rittel & Webber , 1973 ) . Independent functioning of artifact . The artifact is required to function independently of the designer . Distinction between specification and delivery . There is a distinction to be made between the specification of the artifact and the construction and delivery of the artifact . Temporal separation between specification and delivery . There is a tem - poral separation between the specification and delivery or construction of the artifact . The specification precedes delivery . These are all significant invariants in the task environments of prototypi - cal design situations . Many of them have been noted previously by other researchers . Our claim here is that we can use them as a template to identify other cases of design . To the extent that the task environment of a given problem situation meets or conforms to this template , that problem situa - tion is a prototypical example of a design situation . To the extent that a task environment varies from this template - by omission of one or more of the requirements - it is a less central case of design activity . GENERIC DESIGN 403 Note that we are not stipulating what is and what is not a design activity . To do that we would have to insist that the 12 task environment characteris - tics listed above , or some subset of them , constitute necessary and sufficient conditions for design activity . We make no such claim . Rather , all we are suggesting is that we have a template of some salient characteristics com - mon to the task environment of problem situations that are consistently rec - ognized as good examples of design activity . Problem situations in which the task environment fails to conform to this template on one or more counts are deviations from the central case . In this article we will only be in - terested in central cases . We have no interest in saying how far a problem can deviate from the prototype and still be considered design . Thus , we will use the label “design” to refer to situations that closely conform to the prototypical or central cases . Some problem - solving situations , which fit well into the schema , are in - structional design , interior design , some cases of software design , and music composition . Some tasks that deviate slightly are writing and painting . In these latter cases there is usually no separation between design and delivery . The problem solver actually constructs the artifact rather than specifying it . Some activities that deviate more radically are classroom teaching , sponta - neous conversation , and puzzle solving . To illustrate how nondesign tasks differ from design , we will examine the task environments of two well - structured problems that have been exten - sively studied in the literature ( Newell & Simon , 1972 ) . The first task is cryptarithmetic , a puzzle in which an addition problem is presented , but all digits have been replaced by letters . The task involves solving the addition problem by making hypotheses about the correspondences between letters and digits . The second task is the Moore - Anderson logic task , posed as a game in which subjects transform given symbol strings into goal symbol strings according to certain transformation rules . The game moves are isomorphic to theorem proving by logical inference . The following is a sum - mary comparison of these two tasks to the 12 features of design environ - ment listed previously . A . ’ Distribution of information . In the case of cryptarithmetic , the start state is completely specified . The goal test is also clearly defined . The transformation function is restricted to only two operations , which are specified in advance : ( a ) assign a digit between 0 and 9 to a letter , and ( b ) perform addition . In the Moore - Anderson tasks both the start and goal states are completely specified . The set of legal operators is also specified . All the subject has to do is figure out the right order of application . B . ’ Nature of constraints . In both cryparithmetic and the Moore - Anderson task the rules are definitional or constitutive of the task . As such they 404 c . ’ D . ’ E . ’ F . ’ G . ’ H . ’ I . ’ J . ’ K . ’ L . ’ GOEL AND PIROLLI have a logical necessity about them . If one is violated , we are simply not playing that game , but some other game . Size and complexity . In both cryptarithmetic and the Moore - Anderson task , the problems are relatively small and simple . The ones we looked at ( Newell & Simon’s , 1972 ) took anywhere from 10 to 40 min to solve . Component parts . Even though the problems are relatively small , they break down into a number of components . In cryptarithmetic each row ( addend ) is treated as a component . In the Moore - Anderson task each well - formed formula ( wff ) constitutes a component part . However , in both cases , unlike the design cases , this breakdown is enforced by the logical structure of the problem . Interconnectivity of parts . In cryptarithmetic the few components ( rows ) that do exist , are logically interconnected . That is , there exists the possibility that any row will sum to greater than 9 and affect the next row . In the Moore - Anderson task there are logical connections between the wffs but they are not obvious . In fact , the task is substan - tially to discover these interconnections . Right and wrong aMWerS . In the cryptarithmetic problems we examined there was only one definite right answer . All other answers were simply wrong . In the Moore - Anderson task the answer consists of the right sequence of operators . Although there may be several right sequences , all other \ s are definitely wrong . Also , it is clear when one has a right sequence . Input / output . In cryptaritbmetic the input is limited to letters , num - bers , and the rules of the game . The output is a particular sequence of numbers . In the Moore - Anderson task the input consists of the wffs , and the operators . The output consists of the sequence of lawful opera - tor applications sufficient to transform the premise wffs into the con - clusion wff . Feedback loop . In cryptarithmetic there is genuine feedback after every operation ( i . e . , substitution and summation ) . It is , however , local feed - back and the final decision needs to satisfy global constraints . In the Moore - Anderson task there is local feedback after every operator ap - plication . But it is of limited value . More useful feedback comes after sequences of operator applications . Costs of errors . In both cases , the cost of error is negligible in the sense that a wrong answer may cause the subject some embarrassment , but it will not affect the lives of third - party “users . ” Independent functioning of artifact . Not applicable . Distinction between specification and delivery . Not applicable . Temporal separation of specification and delivery . Not applicable . The reader will note that these nondesign task environments differ from the design task environment on all 12 features . Incidentally , they also differ GENERIC DESIGN 405 from each other in respect to features A ’ and F ‘ . But the consequences of this latter difference will not be pursued here . The consequences of the dif - ferences between design task environments and nondesign task environ - ments will be considered in some detail in a later section . This is not to suggest that all nondesign task environments will be so radically different . For instance , an intermediate case is provided by the task environment of some mathematical problems , such as those presented in Schoenfeld ( 1985 ) . However , we have purposefully chosen to contrast the design cases with cases that deviate radically . The sharp contrast makes the distinctions clear . If something substantive is uncovered , we can move onto the subtler comparisons that will be involved in the less deviant cases . If nothing interesting emerges in these clear - cut cases , nothing will emerge in the subtler cases . 3 . 3 The Structure of Design Problem Spaces The following is a list of a dozen invariants found in the structure of the design problem spaces we examined . Each can be explained or justified by an appeal to the structures of the information - processing system and design task environment as articulated above . 1 . Problem structuring . The lack of information in start states , goals states , and transformation functions will require extensive problem structuring before problem solving can commence . 2 . Distinctproblem - solvingphases . Design problem solving can be further subcategorized into three interestingly distinct phases , preliminary design , refinement , and detail design . ) This is probably due to the size and complexity of problems and the many different types of informa - tion and levels of detail that need to be considered . 3 . Reversing direction of transformation function . Because the structure of the task is not well specified in advance , and the constraints are non - logical , the designer has the option to reverse the direction of the trans - formation function by transforming the problem to one for which he or she may already have a solution , or into a problem for which the solu - tion is in some way more effective or desirable . 4 . Modularity / decomposability . Given the size and complexity of design problems and the limited capacity of short - term memory , one would expect decomposition of the problem into a large number of modules . However , given the fact that there are few or no logical connections among modules but only contingent ones , one would expect the de - signer to attend to some of these and ignore the others . a There is nothing deep about there being three phases rather than n phases . Designers use these three phases to talk about their processes . We too found them useful for our purposes . It would certainly have been possible to do a finer - grained or coarser - grained individuation . 406 GOEL AND PIROLLI 5 . Incremental development of artifact . Interim design ideas are nurtured and incrementally developed until they are appropriate for the task . They are rarely discarded and replaced with new ideas . The principle reasons for this would be the size and complexity of problems and the sequential nature of the information - processing system , and the fact that there are no right or wrong answers . 6 . Control structure . Designers use a limited commitment mode control strategy that enables the generation and evaluation of design compo - nents in multiple contexts . 7 . Making and propagating commitments . Because design plans and specifications have to be produced in a finite amount of time , and have to be interpretable by a third party , designers have to make , record , and propagate commitments . 8 . Personalized stopping rules and evaluation functions . Because there are no right or wrong answers and direct feedback is lacking , the evaluation functions and stopping rules that designers use will be personalized ( i . e . , derived from personal experience and immersion in the profession ) . 9 . Predominance of memory retrieval and nondemonstrative inference . Because there are very few logical constraints on design problems , deductive inference plays only a minimal role in the problem - solving process . Most decisions are a result of memory retrieval and nondeduc - tive inference . 10 . Constructing and manipulating models . Because design typically occurs in situations where it is not possible , or too expensive to manipulate the world directly , designers usually manipulate representations of the world . ( We only get one run on the world , whereas we can get as many runs as we like on models of the world . ) 11 . Abstraction hierarchies . The qualitative difference in the input and out - put information and the several distinct problem - solving phases result in orthogonal abstraction hierarchies . 12 . Use of artificial symbol systems . Given the size and complexity of prob - lems , the need to construct and manipulate external models , and the use of abstraction hierarchies , designers will make extensive use of artificial symbol systems . The first six of these invariants will be discussed and illustrated with data in section 5 . 0 . A lengthier and more complete discussion of all 12 invariants is available in Goel ( 1991 ) , but before beginning the discussion we present our methodology and data analyses . 4 . DATABASE AND CODING SCHEME Our empirical studies have focused largely on the analysis of verbal proto - cols from expert designers in various disciplines . This has required the GENERIC DESIGN 407 development of a rather complex protocol analysis scheme that can be tied to our framework for the design problem space . In addition to developing analyses to find commonalities across design tasks , we have also been in - terested in exploring how design tasks might differ from nondesign tasks . Consequently , we have also performed analyses of nondesign verbal proto - cols that were readily available in the literature . Altogether , we have accu - mulated a database of 12 design protocols and six nondesign protocols . Both sets are described and a detailed analyses of three of the design proto - cols and two of the nondesign protocols is presented . 4 . 1 Design Protocols Twelve design protocols , of approximately 2 hours each were collected from experts in the disciplines of architecture , mechanical engineering , and in - structional design . Although we examined and coded all 12 , we will restrict our discussion here to one from each discipline . The three were selected on the basis of ( a ) the completeness of the artifact specification produced by the individuals , and ( b ) the fluency of the subjects’ verbalization . 4 . 1 . 1 Subjects . One of the protocols was produced by a subject ( Subject S - A ) performing our architecture task . Subject S - A was a doctoral student in the Department of Architecture at the University of California , Berkeley , who volunteered to participate in the study . Subject S - A had 6 years of pro - fessional experience , but had never designed a post office . A second proto - col was produced by Subject S - M in solving our mechanical engineering task . Subject S - M was a doctoral student in the Department of Mechanical Engineering at Stanford University , and also volunteered to participate in the study . Subject S - M had 3 years of professional experience including working for a firm in Italy designing bank teller machines . The third proto - col was collected from Subject S - I on an instructional design task . Subject S - I was a professional instructional designer working for a large multina - tional corporation who also volunteered to participate in the study . Subject S - I had over 10 years of experience in designing technical training material , mainly on the operation and servicing of office machinery and systems . Subject S - I was also familiar with the text editor that was the focus of his design task . 4 . I . 2 Task Descriptions . l Architecture . The architecture task involved the design of an auto - mated post office ( where postal tellers were replaced by automated postal teller machines , APTMs ) for a site on the UC Berkeley campus . Subject S - A was given two documents : an outline of the experiment procedures and a design brief that motivated the need for the post office and specified the client’s needs and requirements . The site was visible from the place of the experiment . TABLE 2 Breakdown of Knowledge Sources for Statements Made in Each Design Development Phase Problem Solving Subiect S - A Design Brief Experimenter Self Inferred Subiect S - M Design Brief Experimenter Self Inferred Subject S - l Design Brief Experimenter Self Inferred Combined Subfects Design Brief Experimenter Self Problem Prelimlnory Structuring Design . 09 . oo . 13 . Ol . 77 . 96 . Ol 33 . ll . w . 44 . 04 . 44 . 93 . W . 03 . 30 . W . 14 . 05 . 47 - 95 . Ol . W . 21 . W . 25 . 03 . 53 . 95 Refinement 34 . w 30 . 00 . w . w 1 . 00 . W . W . Ol . 99 . W . Ol . W . 96 Detail Design . Ol . w . 93 . 06 . w . oo 1 . 00 . W . W . W 1 . w . W . W . W . 98 Inferred . Ol . 02 43 - 02 TABLE 3 Output Mode Associated with Statements in Each Design Development Phase Problem Solving Subfect S - A Verbal Written Subject S - M Verbal Written Subfect S - l Verbal Written Combined Subjects Verbal Written Problem Preliminary Structuring Design . 06 34 . 14 - 16 . a9 . 55 . ll . 45 30 . 55 - 20 . 45 . 0B . 77 . 12 . 23 Refinement . 50 . 42 . 52 . 40 . 60 . 40 . 61 . 39 Detail Design . 67 . 33 . 66 . 34 . 19 - 01 . 71 . 29 416 GENERIC DESIGN 409 Focus Experimental task Monitor Design Miscellaneous development Design Design Book operator method keeping n Proilem structuring ProAlem solving / A Preliminary Reline Detail Figure 1 . Categories of general focus in protocol coding scheme points being made about the topic . A second way of demarcating statements is to use noncontent cues such as pauses , phrase and sentence boundaries , and the making and breaking of contact between pen and paper . We looked at both of these ways of demarcating statements and applied whichever one pro - vided the finer - grained individuation . The mean duration of statements was approximately 8 s . The mean number of words per statement was about 15 . 4 . 1 . 3 . 2 Coding Scheme . Our protocol coding scheme was similar in spirit , but not detail , to schemes employed in other recent studies of design ( Greeno , Korpi , Jackson , & Michalchik , 1990 ; Ullman et al . , 1988 ) . Each statement was coded along several dimensions ( see Goel , 1991 , Appendix D , for a more complete description of the scheme along with illustrative ex - amples ) . Figure 1 illustrates how each statement could be assigned to one of four categories used to identify the general focus of a designer’s activity . Experimental task statements were statements concerned with the ex - perimental design and setup . Monitor statements indicated metacogmtion , or reflection about design methods . These were statements in which a sub - ject reviewed or commented upon the problem - solving m - ocess itself . Three different types of monitoring statements were identified : explicit mentions of design operators , statements about design methodology , and statements about bookkeeping . Design development statements were statements that advanced the development of the artifact . 410 GOEL AND PIROLLI Design development statements were further divided into ( a ) problem - structuring statements , which generated or solicited information that fur - ther structured the problem , or ( b ) problem - solving statements , in which the design specification was advanced in some way . Problem - solving statements were divided into ( a ) preliminary design statements , which were the initial specifications of a design solution ; ( b ) refinement statements , which elabo - rated an established design element ; and ( c ) detail statements , which served to finalize the form of some design element . These labels are rather stan - dard terms that designers routinely use to talk about various phases of design development . They are , of course , relative to the available time and the degree of completeness of the design specification . But nonetheless , given the final output of the designer , it is possible to trace the development and segment it into phases . We also coded all design development statements according to the aspects of design development referred to in the statements . This subcategorization was orthogonal to the breakdown of design development statements presented in Figure 1 , and differentiated the type of content attended to by the desiger . For each statement we identified whether the content of the statement referred to : people , purposes , behavior , function , structure , and resources . As with the problem - solving categories , these subcategories are also quite standard in the design literature . The ones we employ are adopted from Wade ( 1977 ) . Briefly , the intuition behind these terms is that artifacts are designed to perform certain functions , which are calcu - lated to support certain behaviors , which help in the realization of certain purposes held by people . This categorization provides a chain linking users to artifacts and recognizes that each intermittent step needs to be con - sidered . To these categories we have added resource ( e . g . , time , money , manpower , etc . ) . It should be noted that these are not disjunctive categories . A single statement can fall into more than one category . In addition to coding the general aspects of the design being attended to , we also aggregated statements into episodes of closely related statements united by a focus on some particular component of the designed artifact . We called these aggregates modules and submodules . Unlike the codings discussed so far , the module coding scheme was dependent on the particular design tasks and the particular individual solving the task . Finally , for each statement , we coded some information about the partic - ular problem - solving step being executed by a designer : ( a ) the operator applied , ( b ) the content to which it was applied , ( c ) the mode of the output , and ( d ) the source of knowledge used ( see Figure 2 ) . Operators were a label - ing of statements by the function they served in the problem space . Although we made no theoretical commitment to any specific set , we found the 11 noted in Figure 2 adequate for our needs . The mode of output of a statement was encoded as either verbal or written . Each statement was also GENERIC DESIGN 411 Problem solving step - add - evaluati - propose - comment - repeat - elaborate - lUW - modify . - VW - read - request - miscellaneous written verbal sell inler design brief F experimenter Figure 2 . Localized problem - solving step categories in protocol coding scheme coded for the source of knowledge of the statement . The four categories used were the experimenter , the design brief , self ( retrieved from long - term memory ) , and inferred ( deductively ) from the information existent in the problem space . Although the complete coding scheme was complex , each part of the scheme provided a different view onto the unfolding of the design process and the evolution of the design itself . In the next subsection , we describe how the scheme was modified to code protocols collected in nondesign tasks . 4 . 2 Nondesign Protocols Our six nondesign protocols were gathered from several published sources . They include mathematics , cryptarithmetic , and the Moore - Anderson tasks , and range in duration from 15 min to 40 min . Two mathematics protocols were taken from Schoenfeld ( 1985 , Appendices 9 . 1 and 9 . 5 ) . These two were selected from several in Schoenfeld because they were the only ones that approximated our experimental setup of single subjects giving uninterrupted and unprompted protocols . Two cryptarithmetic and two Moore - Anderson task protocols were chosen from Newell and Simon ( 1972 , Appendices 6 . 1 , 7 . 1 , 9 . 2 , 8c 10 . 1 ) . These protocols were chosen on the basis of their duration . Each of these six nondesign protocols was analyzed and coded . However , keeping with our strategy of contrasting extreme cases , we discuss and com - pare only the cryptarithmetic and Moore - Anderson task problem spaces with the design problem space . 4 . 2 . 1 Subjects . The subjects in both the cryptarithmetic and Moore - Anderson tasks were undergraduate college students . 412 GOEL AND PIROLLI 4 . 2 . 2 Task Descriptions . The cryptarithmetic tasks for both subjects ( NS6 . 1 and NS7 . 1 ) involved solving the following puzzle : DONALD D = 5 + GERALD ROBERT in which each letter stands for a specific digit and the digits associated with ROBERT are the sum of the digits associated with DONALD + GERALD , and it is given that D = 5 . Cryptarithmetic problems are basically constraint satis - faction problems . The Moore - Anderson task is a string transformation task , isomorphic to deductive inferences in propositional logic using logical inference schemas . The task for Subject NS9 . 2 in Newell and Simon ( 1972 ) was Ll : ( R - - P ) * ( - R - Q ) LO : - ( - Q * P ) where Ll was a premise and LO was a goal . The transformation rules are specified in Newell and Simon ( p . 406 ) . Using the same transformation rules , the task for Subject NS10 . 2 in Newell and Simon was : Ll : P * ( Q * R ) L2 : - ( P - T ) - - ( P * Q ) LO : T . T where Ll and L2 were premises and LO was the goal . 4 . 2 . 3 Protocol Coding Procedure . The protocols were reproduced from their original source and recoded with a subset of the scheme devised for the design protocols , which was modified as follows : 1 . As with the design protocols , design development statements were dif - ferentiated into problem - structuring and problem - solving statements . However , the problem - solving statements were not further differen - tiated into the various design phases . 2 . The aspect of design development category was eliminated . 3 . The mode of output was not coded . The first two changes were necessitated by the data . There is no interesting sense in which the nondesign data were amenable to a further breakdown of the problem - solving category into subcategories , and the aspect of design development category was inappropriate . Both of these issues will be dis - cussed later . There was not enough information available in the published sources to code for the mode of output . GENERIC DESIGN 413 5 . THE DESIGN PROBLEM SPACE In this section , we list and briefly discuss some of the more interesting in - variants in the design problem space . In each case we ask the following three questions : What is the phenomenon ? Why does it occur ? What is the sup - porting data ? We will also consider if and in what form the phenomenon transpires in nondesign problem spaces . 5 . 1 Problem Structuring Problem structuring is the process of drawing upon our knowledge to com - pensate for missing information and using this knowledge to construct the problem space ( Simon , 1973a ) . It occurs for the obvious reason . Design problems are incompletely specified but the specification of a problem space requires complete information about start states , goal states , operators , and evaluation functions . In Goel and Pirolli ( 1989 ) we examined the form and organization of some of this knowledge and how it was applied . Here we want to note the extent and location of problem - structuring phases and also say a few words about how they differ from problem solving . The first thing to note is that problem structuring accounted for approxi - mately 25 % of the statements devoted to design development in our design protocols . In our three protocols it ranged from a low of 18 % to a high of 30 % ( for a mean of 24 % ) . In contrast , only 0 . 3 % of the nondesign proto - cols were devoted to problem structuring . The second point is that problem - structuring statements occurred mainly at the beginning of the task , where one would expect them , but also reoccurred periodically as needed . Figure 3 shows the temporal distribution , aggregated over 5 - min intervals , of the problem - structuring and problem - solving phases for subjects S - A , S - M , and S - I ( see p . 413 ) . Although problem structuring is a widely recognized concept , it is often unclear as to how it differs from problem solving . In our design protocols , we noted several phenomena that appear to differentiate problem - structur - ing activities from problem - solving activities : 1 . Aspects of the design considered . Table 1 ( p . 415 ) presents a breakdown of the aspects of design attended to by subjects across the design devel - opment phases . In general , subjects produced proportionately more statements about people , the purposes of the artifact , and resources during the problem - structuring phases than in problem - solving phases ( preliminary design , refinement , and detail design ) . In contrast , statements about the structure or function of the artifact were more prominent in the problem - solving phases than in the problem - structuring phases . These results suggest the problem structuring in design is associated with attention to how the artifact may be used and 414 GOEL AND PIROLLI I wroblem Structuring WPreliminaty Design a Relinemenln Detail Design 5 15 25 35 45 55 65 75 85 95105115 5 15 25 35 45 55 65 75 85 95 Time ( minutes ) Figure 3 . Distribution and extent of problem structuring and problem solving far Subjec S - A , S - M , and S - l ( aggregated aver 5 min intervals ) what is available to form it , whereas problem solving is associated wil attention to specification of the function and form of the artifact . 2 . The primary source of knowledge . The client and design brief were ir portant sources of knowledge during problem structuring but not du ing problem solving ( Table 2 , p . 416 ) . Problem structuring is associate with bringing new information into the problem space . GENERIC DESIGN 415 TABLE 1 Proportion of Statements Made in Each Design Development Phase About Various Aspects of a Design Problem Structuring Problem Solving Preliminary Detoil Design Refinement Design Subfect S - A People Purpose Resource Behavior Function Structure Subiect S - M People Purpose Resource Behavior Function Structure Subject S - l People Purpose Resource Behavior Function Structure Combined Subjects People Purpose Resource Behavior Function . 14 . 13 . 14 . 02 - 11 . 02 . OB . ll . lO . lB . 43 . 54 . 22 . 07 . 22 . 04 . Ol . oo . 09 . 03 . w . lO . ll . 03 . 26 . 35 . 06 . 29 . 43 . 69 . 33 - 10 . 16 . 02 . 26 . w 34 . 02 . oo . 15 . 20 . 71 . 22 . ll . lO . 02 . 14 . 02 . OB . 09 . 14 . 23 . 06 . w . w . Ol . lO 33 . w . w . oo . oo . 4B . 52 . 04 . W . W . Ol . 32 . Ol . W 43 . Ol . 05 . 90 . 06 . W . W . 09 . lO . 76 . W . W . W . W 33 . 67 . 02 . W . Ol . 03 . 19 Structure . 32 . 53 . 63 . 75 3 . The degree of commitment made to output statements ( as evidenced by the quantity and character of written output ) . There was a higher per - centage of verbal - only statements generated during problem structuring than during problem solving ( Table 3 , p . 416 ) . Written output may indi - cate a high degree of commitment to particular design decisions , whereas purely verbal statements about the design indicate less commitment . 4 . Operators . There was a higher percentage of add and propose operators in the problem - structuring phase than the problem - solving phase ; 42 . 3 % of the operators applied during the problem - structuring phase were add operators . This was systemically reduced to 36 . 7070 , 35 . 3 % , and 32 % during the preliminary design , refinement , and detailing TABLE 2 Breakdown of Knowledge Sources for Statements Made in Each Design Development Phase Problem Solving Subiect S - A Design Brief Experimenter Self Inferred Subiect S - M Design Brief Experimenter Self Inferred Subject S - l Design Brief Experimenter Self Inferred Combined Subfects Design Brief Experimenter Self Problem Prelimlnory Structuring Design . 09 . oo . 13 . Ol . 77 . 96 . Ol 33 . ll . w . 44 . 04 . 44 . 93 . W . 03 . 30 . W . 14 . 05 . 47 - 95 . Ol . W . 21 . W . 25 . 03 . 53 . 95 Refinement 34 . w 30 . 00 . w . w 1 . 00 . W . W . Ol . 99 . W . Ol . W . 96 Detail Design . Ol . w . 93 . 06 . w . oo 1 . 00 . W . W . W 1 . w . W . W . W . 98 Inferred . Ol . 02 43 - 02 TABLE 3 Output Mode Associated with Statements in Each Design Development Phase Problem Solving Subfect S - A Verbal Written Subject S - M Verbal Written Subfect S - l Verbal Written Combined Subjects Verbal Written Problem Preliminary Structuring Design . 06 34 . 14 - 16 . a9 . 55 . ll . 45 30 . 55 - 20 . 45 . 0B . 77 . 12 . 23 Refinement . 50 . 42 . 52 . 40 . 60 . 40 . 61 . 39 Detail Design . 67 . 33 . 66 . 34 . 19 - 01 . 71 . 29 416 GENERIC DESIGN 417 phases respectively . Similarly , propose operators , which accounted for 10 . 7 % of the operators applied during problem structuring , were sys - temically decreased to lo % , 7 . 6 % , and 6 . 7 % during the preliminary design , refinement , and detailing phases , respectively . 5 . 2 Distinct Problem - Solving Phases In addition to the distinction between problem structuring and problem solving , there is a further differentiation of problem solving into several distinct phases . We have subcategorized problem solving into preliminary design , refinement , and detail design . As noted earlier , these categories are quite standard among designers . As might be expected , these phases were generally engaged in sequentially by our subjects , starting from preliminary design , passing through refinements , and ending with detail design , though it was not unusual for a subject to return to an earlier phase as previously unnoticed aspects emerged ( see Figure 3 , p . 414 ) . There was , however , con - siderable variability among subjects as to the amount of time devoted to each phase . The three problem - solving phases differ at least in terms of the following three respects : 1 . 2 . 3 . Aspects of the design considered . There was a steady decrease in the consideration of people , purpose , and resource aspects of design devel - opment from preliminary to detail design and a corresponding increase in the structural aspect ( see Table 1 ) . The behavior and function aspects on average seemed to stay relatively constant across the three phases . The primary source of knowledge . There was still some input from the client and / or design brief at the preliminary design stage , but it disap - peared by the detailing stage ( see Table 2 ) . The degree of commitment made to output statements ( as evidenced by the quantity and character of written output ) . There was a steady in - crease in the number of verbalizations committed to paper as subjects progressed from preliminary design , through refinement , to detail design ( see Table 3 ) . There was also an increase in the degree of explicit - ness and detailing in the written or drawn material ( see Goel , 1991 for illustrations ) . We take both of these as evidence of increasing commit - ment to the emerging design . It is our conjecture that the distinct phases result not only from the size and complexity of the problems , but perhaps more importantly , from a com - bination of the different types of information that must be considered dur - ing the session ( i . e . , people , purposes , behavior , function , and structure ) and the different levels of detail at which it is considered . Again , the situation was quite different for the nondesign protocols . In - stead of the problem solving being comprised of distinct phases of different 418 GOEL AND PIROLLI activities , it was comprised of cycles of the same basic activity . In nondesign problems , the subject is searching for a solution . If it is not on the path being searched , one must back up and start down another path . The activity one engages in as one goes down each path is basically the same . This is demon - strated by data that will be discussed later . 5 . 3 Reversing the Direction of Transformation Function The designer naturally interprets the problem situation through personal ex - periences and biases . But in addition to this , designers will occasionally stop and explicitly try to change the problem situation so it more closely fits their expertise , knowledge , and experience . This involves manipulating both the problem constraints and the client’s expectations . We call this reversing the direction of the transformation function because rather than transforming initial problem states to a goal state , the designer can negotiate changes to the initial state and goal state that experience suggests are more easily achievable , or perhaps might lead to a more effective design solution . An example of an ( unsuccessful ) attempt to change explicitly the start and goal states specified by a design brief was provided by the following negotiation sequence . Subject S - A was standing on a ninth floor balcony and had a bird’s eye view of the small triangular site he had been given for the proposed post office . He was not content just to build a post office but wanted to redesign the whole area . S - A : So , given the fact we have that triangle over there as a limit . And I can - not exceed that I suppose ? E : Bight , that , that . . . S - A : I have to take that for granted ? E : I , I would think so . S - A : That’s the boundary of . You do not allow me to , to exceed in , in my area of intervention ? E : No , I think you should restrict it to that . S - A : So , I am constrained to it and there is no way I can take a more radical attitude . Say , well , look , you are giving me this , but I actually , I , I’d come back to the client and say well look , I really think that you should restructure actually the whole space , in between the building . I’d definitely do that , if that was the case . You come to me as a client , and come to me with a triangle alone , I will give you an answer back pro - posing the whole space . Because , I , I think the whole space should be constructed . So , that there is an opportunity to finally to plan and that space through those , ah , this building , open up Anthropology and , and plan the three buildings together . So , as to really make ah , this ah , a more communal facility . . . The reasons why such episodes occur are clear : ( a ) the problem is incom - pletely specified , and ( b ) design constraints are nonlogical and therefore manipulable . GENERIC DESIGN 419 Notice such a sequence simply could not ( and does not ) occur in nonde - sign problem spaces where the problem constraints completely satisfy the problem , and indeed are constitutive of the problem . If it did occur - if the subject requested a change in the problem parameters - we would simply say that he could not do the assigned problem and was changing it to a dif - ferent problem . 5 . 4 Solution Decomposition into Leaky Modules A number of researchers have noted the important role played by decom - position in dealing with complexity ( Alexander , 1964 ; Simon , 1962 , 1973b , 1977 ) . However , there is considerable disagreement as to the extent and structure of decomposition of design problems . Some researchers assume strict treelike decompositions ( Alexander , 1964 ; Brown & Chandrasekaran , 1989 ) . But Alexander ( 1965 ) argued that “A city is not a tree ; it is a semi - lattice . ” There has also been some discussion about the extent of intercon - nections or the encapsulation of the modules . In Goel and Pirolli ( 1989 ) it was noted that designers decomposed the design solution into “leaky modules” ( i . e . , sparsely connected modules ) and had two main strategies for dealing with these interconnections : ( a ) they either blocked the leaks by making functional level assumptions about the interconnected modules ; or ( b ) they deferred further development of the current module in order to attend to an interconnected module . It was also stressed that partial interconnectivity ( as opposed to total connection or total disconnection ) was a genuine phenomenon and had to be taken seriously . The decomposition of a design into maximally independent units ameliorates the difficulties faced by a limited - capacity , information pro - cessor dealing with typically large and complex design problems . Yet , it is also a fact about the world that artifactual objects and processes are com - posed of entities that are in fact related to one another in complex ways . Somehow , the design process has to decompose a design to reduce atten - tional loads , yet remain attendant to possibly important interconnections among decomposed modules . In this study we investigate the density and distribution of these inter - connections . We divided the protocols into modules ( see Section 4 ) and used the mentioning of one module inside another module as an indication of interconnections between the modules . Here we report the findings for Subject S - A . Subject S - A decomposed his solution into 34 modules clustered into four larger groups . ( We will refer to these 34 modules as submodules and use the term “module” to refer to the four larger groups . ) The four groups ( or modules ) were “Site , ” “Building , ” “Services , ” and “APTM . ” The sub - modules within the Site module were things like trees , illumination , circula - tion , and so on . The submodules within the Building modules included , mail 420 GOEL AND PIROLLI storage , configuration of plan , roof , location of equipment , and the like . The Services modules included items such as number of machines , mail pickup , number of people and service times , and so forth . The APTM module included things such as machine components , interface , and stamp - ing procedure . Given these 34 submodules , there are 1 , 122 logically possible intercon - nections that can be made . We found that 7 . 4 % of these connections were actually made . Furthermore , there is , as might be expected , a difference in the density of connections among the four major groups and among the submodules internal to the groups . The former connections are consider - ably denser than the latter ( 13 . 4 % vs . 4 . 5 % ) . These results support claims of the near decomposibility of design solutions . To compare these results with the nondesign problem spaces we did the same analysis on several nondesign protocols . In the case of cryptarithmetic we found that subjects decomposed the task into modules corresponding to columns of letters . Because the problems only had six columns , there were only six modules ( as compared to over 30 for each of the design tasks ) . But , although the actual number of modules were substantially fewer , the density of interconnections among modules was considerably greater . Using the same procedure as before we found that the density of interconnections for Subject NS6 . 1 was greater than that of the design problem space . In the cryptarithmetic problem space of Subject NS6 . 1 , 20 % of the possible con - nections were made , as opposed to 7 . 4 % for the design problem space of Subject S - A . The denser interconnectivity of the cryptarithmetic modules is exactly what one would expect given the fact that cryptarithmetic was designed as a multiple constraint satisfaction problem and all the constraints are logical ( i . e . , they must be attended to ) . This is perhaps why such problems can have relatively few modules and still be very challenging . The reason design prob - lems can have many modules and still be tractable is because the intercon - nections are contingent rather than logical . The designer has a greater degree of flexibility in determining which ones to attend to and which ones to ignore . 5 . 5 Incremental Development of Artifact As interim design ideas or solutions are generated , they are retained , massaged , and incrementally developed until they reach their final form . Very rarely are ideas or solutions forgotten or discarded . In other words , in - formation about the state of the design , and associated knowledge brought into the design problem space , appears to increase in a monotonic fashion throughout the design process . This is one of the most robust findings in the literature on problem solving in design ( Kant dc Newell , 1985 ; Ullman et al . , 1988 ) . The duration of the incremental development process is , to a great extent , a function of the resources available . GENERIC DESIGN 421 There are a number of factors in the design task environment that would seem to favor a strategy of incremental development . First , the problems are large and , given the sequential nature of information processing , cannot be completed in a single processing cycle . Second , because there are few logical constraints on design problems and no right or wrong answers , there is little basis for giving up partial solutions and starting over from scratch . It makes more sense to continue to develop what already exists . Third , in - cremental development is compatible with the generation and evaluation of design components in multiple contexts , which will be discussed in the following section on control structure . Incremental development does not occur in the nondesign protocols that we analyzed . Although it is true that the nondesign problems were also too large to be completed in a single cognitive step , there was , nonetheless , a different character about the progression of knowledge states and problem states . More specifically , most of the search paths explored in finding solu - tions are wrong . When a particular search path is abandoned , much of the information associated with that path is also abandoned as the problem solver returns to a previous knowledge state and begins a new search path . The accumulation of knowledge relevant to a solution does not monotoni - cally increase as the problem solver switches from one search path to another . Incremental development in design , and its comparison to nondesign problem solving can be better understood by examining some particular protocol analyses and a more detailed discussion of the control processes operative in design problem solving . Both are discussed in the next section . 5 . 6 Control Structure There are a number of issues that a control strategy for traversing design problem spaces needs to address . Among them are the following three : 1 . Are the solution modules to be developed in isolation from each other , or are there to be interconnections among the solutions ? 2 . Is the information to be processed sequentially or in parallel ? 3 . Are the solutions to be developed incrementally or appear completely formed ? We have already discussed results and assumptions regarding each of these issues : ( a ) the solution modules are interconnected to some degree ; ( b ) the cognitive process is assumed to be sequential ; and ( c ) the solutions are developed incrementally , A control strategy that accommodates and sup - ports each of these facts is required . Our data indicate that designers use a limited - commitment - mode control strategy ( LCM control strategy ) . This strategy is closely related to Stefik’s ( 1980 ) “least - commitment” control strategy . The basic feature of the LCM 422 GOEL AND PIROLLI strategy is that , when working on a particular module , it does not require the designer to complete that module before beginning another . Instead , one has the option of putting any module on hold and attending to other related ( or even unrelated ) modules , and returning to the module on hold at a later time , This embedding can go several levels deep and one is not irrevo - cably committed to interim solutions . One always has the option of modify - ing partial design solutions at a later point . This , in effect , lets the designer take advantage of multiple problem - solving contexts in the generation and evaluation of design elements . To specify this more precisely , we need to ( a ) show that design elements are indeed considered in different contexts , and ( b ) trace out the actual control structure showing the LCM control strategy . In order to do ( a ) we first need a way to individuate design elements and design contexts . 5 . 6 . 1 Individuating Design Elements and Contexts . There is a straight - forward mapping among design elements and the modules and submodules identified earlier . Contexts are not easy to individuate . They were identified using the following method : The protocol was divided into modules and submodules , and a unique number was assigned to each token occurrence of modules and submodules . Each numbered segment at the level of module or submodule constituted a different context . Whenever module or submodule type were instantiated , it was in a different context . This notion of context seems to combine both temporal and content components , because whenever a uniquely numbered module or submodule was considered , it was at a unique time t and it was proceeded and followed by a uniquely numbered sequence of modules or submodules ( which means there was different information in the problem space ) . We have , for each of the subjects , a tracing of modules and submodules and the contexts in which they were considered . These tracings are best presented in conjunc - tion with control strategies , to which we now turn our attention . 5 . 6 . 2 . Control Strategies . Control strategies can be enumerated at differ - ent levels . We used a three - level hierarchical analyses that accounts for the protocols at the level of module , submodule , and individual statement types . As the module and submodule categories are task - and subject - specific , the control structure at these levels will also be task - and subject - specific . Because the categories at the level of individual statements are general across all the tasks and subjects , the control structure at this level will also generalize across tasks and subjects . The actual formalism that we use to capture and display the control structure is a transition network ; more specifically , it is a recursive transi - tion network ( RTN ; Winograd , 1983 ) . These networks have been widely used in the computational linguistic field to recognize , parse , and generate natural language strings . We use them ( manually ) to recognize our protocols . GENERIC DESIGN 423 Some samples of control structure from Subject S - A’s protocol ( one from each level ) are presented in Networks 1 , 2 , and 3 ( Figure 4 , p . 424 ) . The reader is referred to Goel ( 1991 ) for a representation of the complete structure . The salient features of the networks are summarized here , and the reader is invited to examine Figure 4 for details . The control structure is naturally analyzed into three hierarchical levels : Modules ( Network 1 ) 1 ( reamive call ) 1 Submodules ( Network 2 ) 1 ( recursive call ) 1 Statements ( Network 3 ) The first two levels are task - specific ; the third is general across all three tasks . Within any of the levels , one does not get a consistent , steady , linear movement through the problem . Rather , one gets repetitive , cyclical , flexible control structure at all three levels . The effect of this repetition and reiteration is that most modules and submodules are considered several times , in several different contexts . For example , in Network 1 , the site module is considered five times , the building module seven times , and services module four times , and the APTM module four times . Table 4 summarizes the multiple occurrences of submodules ( see p . 425 ) . The single Local Control Structure ( LCS ) network can recognize all the modules in all the protocols . That is , it can do a flat or local statement by statement recognition of all the protocols . Most of the action in the protocols seems to be internal to major modules , at the level of submodules ( Network 2 ) . The top - and bottom - level networks ( Networks 1 , 3 ) are rather sparse and simple . Although the control strategy for the nondesign problem space looks similar ( in terms of the cyclical , repetitive revisitation of modules ) to the LCM control strategy of the design problem space ( see Goel , 1991 ) much of the similarity is superficial . There is an important difference in the two cases . In the nondesign problem space most of the problem solving occurs internal to modules and / or episodes . There is little carryover from previous - se ~ “p0Luq”s aq + 110 , 0 a , “ , , “ , , S , O , , “O > [ OJOI M . j + S0Z ! U6OJaJ E yJOM + JN ‘ ~ ~ IlpOUJqtlS , , egs , , aq + saz ! u603aJ 2 yJom + aN * salnpoiu ~ noj aq + jo lanai aq , + o IOJO ( OJd a4alduroD aq4 sazy602aJ 1 yJom4aN - pasJahoJ ( am S ~ JD ay tp ! qM u ! ( 4xawo3 PUD ) amanbas aq4 @ ads sJaqwnu J , , aql ‘Io > o4oJd s , v - s pa ! qnS az @ oDaJ 4 ~ 114 syJoM + au Nla jo aldtuos ‘v 0Jn6jd GENERIC DESIGN 425 TABLE 4 Occurrences of Submodules in Multiple Contexts for Subject S - A Modules No . of Submodules Submodules Considered Considered Mare Than Once ( % I Range Hiah Low Site 9 89 7 1 Building 18 20 5 1 Services 4 25 3 1 APTM 3 33 2 1 Total 33 44 TABLE 5 Trace of the Development of Knowledge in Subject NS6 . l’s Repeated Visits to Module 6 Visit No . 1 . 2 . 3 . 4 . 5 . 6 . Concluding Knowledge State Development of Knowledge G has to be an even number Initial proposal No letter in front of R Connection with first visit unclear G has to be either 1 or 2 Ignore / reverse previous conclusion R has to be greater than 5 Connection to previous visits unclear G is going to be 1 May be connected to Visit 3 R = 9 May be connected to Visit 4 G = 3 Unconnected to any previous state visits to a module or episode . In fact , Newell and Simon ( 1972 ) , in their original analysis of these protocols , claimed that in returning to a former state , the subject is in fact returning to the previous knowledge state with respect to the problem . If the subject goes down the wrong path and returns to the previous state , all that the subject knows is that the path just explored does not lead to the goal state . The subject does not have an enriched understanding of the state he is returning to . This can be demonstrated by tracing through the repeat visits to a module and / or episode and examining the state of knowledge at the end of each visit . Table 5 provides such a trace of Subject NS6 . l’s visits to the sixth column module . Note the third , “development of knowledge , ” col - umn in Table 5 ; it indicates that there is not a close connection between the current visit to a module or episode and previous such visits . In the design case , although problem solving does occur internal to modules , there is also considerable carryover and development of the module from visit to visit , as evidenced by the incremental development phenom - enon , and further substantiated by the trace of Subject S - A’s repeated visits to the submodule “seating” in Table 6 . When the designer cycles back , it is 426 GOEL AND PIROLLI TABLE 6 Trace of the Development of Knowledge in Subiect S - A’s Repeated Visits to the “Seating” Module Vlslt No . Concluding Knowledge State Development of Knowledge 1 . Keep seating below evergreens : Initial proposol don’t disturb overall scheme 2 . Keep existing seating Reaffirm original proposal 3 . Incorporate seating elements OS Builds upon first two visits part of building strucutre ; relaxation and view of playing field important 4 . As per third visit , but decouple Modify third visit seating from building structure 5 . Locate seating along boarders Build upon fourth visit 6 . Counterposltion seats so OS to break Build upon fifth visit up symmetry and not affect circulation not to the previous knowledge state , but rather to a previous topic instan - tiated in the current context . This is indicative of some higher level control structure that we have not yet uncovered . 6 . SUMMARY AND CONCLUSION In this article we have proposed a framework and method for the investiga - tion of design as a cognitive process , and demonstrated some interesting results they yield . In particular , we started with some intuitions about the notion of generic design and put forward the design problem space hypothe - sis . To investigate the hypothesis we : 1 . Circumscribed design activity from nondesign activity in a nonarbitrary and nonvacuous manner by a . suggesting that design is a radical category exhibiting prototype effects ; b . examining some prototype cases and analyzing their task environ - ments ; C . noting that not all task environments share these features ( i . e . , not every task environment is a design task environment ) ; and d . associating design activity with certain invariant characteristics of task environments . 2 . Used the structure of the design task environment and a few well - accepted constraints on the structure of information - processing systems to generate 12 invariant characteristics of design problem spaces . 3 . Analyzed data from both design and nondesign tasks and found evidence for the postulated invariants . More particularly , we presented GENERIC DESIGN 427 data illustrating extensive problems structuring , distinct problem - solving phases , reversing the direction of the transformation function , near decomposibility of design solutions , incremental development of design solutions , and a LCM control strategy . We were also able to ex - plain why each of the invariants occur by appealing to the structure of the design task environment . Along the way we provided a detailed qualitative and quantitative characterization of design problem spaces . 4 . Equally importantly , we also presented evidence indicating that these invariants do not occur either at all , or at least not in the same form , in some nondesign problem spaces . On the basis of this data and analyses , we conclude that the notion of a design problem space is an interesting and explanatory theoretical construct worthy of further study . REFERENCES Akin , 0 . ( 1979 ) . An exploration of the design process . Design Methods and Theories , 13 , 115 - 119 . Akin , 0 . ( 1986 ) . Psychology of architectural design . London : Pion . Alberti , L . B . ( 1988 ) . On theart of building in ten books ( J . Rykwert , N . Leach , & R . Tavernor , Trans . ) . Cambridge , MIT Press . ( Original work published 1450 ) Alexander , C . ( 1964 ) . Notes on the synthesis of form . Cambrige , MA : Harvard University Press . Alexander , C . ( 1965 ) . A city is not a tree . Architectural Forum , 122 , 58 - 62 . Alexander , C . , & Poyner , B . ( 1966 ) . The atoms of environmentalstructure . London : Ministry of Public Building and Works . Anderson , J . R . ( 1983 ) . The architecture of cognition . Cambridge , MA : Harvard University Press . Archer , L . B . ( 1969 ) . The structure of the design process . In G . Broadbent & A . Ward ( Eds . ) , Design methods of architecture . New York : Wittenborn . Brown , D . C . , & Chandrasekaran , B . ( 1989 ) . Designproblemsolving . San Mateo , CA : Morgan Kaufmann . Chandrasekaran , B . ( 1983 ) . Towards a taxonomy of problem - solving types . AI Magazine , 4 , 9 - 17 . Chandrasekaran , B . ( 1987 ) . Towards a functional architecture for intelligence based on generic information - processing tasks . Proceedings of the International Joint Conference on Artificial Intelligence ( pp . 1183 - l 192 ) . San Mateo , CA : Morgan Kaufmann . Cross , N . ( 1984 ) . Developments in design methodology . New York : Wiley . Curtis , B . , Krasner , H . , & Iscoe , N . ( 1988 ) . A field study of the software design process for large systems . . Communications of the ACM , 31 , 1268 - 1287 . Darke , J . ( 1979 ) . The primary generator and the design process . Design Studies , I , 36 - 44 . Dertouzos , M . L . , Lester , R . K . , & Solow . R . M . ( 1989 ) . Made in America : Regaining thepro - ductive edge . Cambridge , MA : MIT Press . Dixon , J . R . . & Duffey , M . R . ( 1990 ) . The neglect of engineering design . California Manage - ment Review , 32 , 9 - 23 . 420 GOEL AND PIROLLI Eastman , C . M . ( 1969 ) . On the analysis of intuitive design processes . In G . Moore ( Ed . ) , Emerging techniques in environment design andplanning . Cambridge , MA : MIT Press . Ericsson , K . A . , L Simon , H . A . ( 1984 ) . Protocol analysis : Verbal reports OS data . Cambridge , MA : MIT Press . Gentner , D . , & Gentner , D . R . ( 1983 ) . Flowing waters or teeming crowds : Mental models of electricity . In D . Gentner & A . L . Stevens ( Eds . ) , Mental models . Hillsdale , NJ : Erlbaum . Gael , V . ( 1991 ) . Sketches of thought : A study of the role of sketching in design problem solv - ing and its implications for the computational theory of mind . Unpublished doctoral dissertation , University of California , Berkeley . Goel , V . , & Pirolli , P . ( 1989 ) . Motivating the notion of generic design within information - processing theory : The design problem space . AI Magazine , IO , 19 - 36 . Greeno , J . G . ( 1978 ) . Natures of problem - solving abilities . In W . K . Estes ( Ed . ) , Handbook of learning and cognitiveprocesses . Vol . 5 : Human information processing . Hillsdale , NJ : Erlbaum . Greeno , J . G . , Korpi , M . , Jackson , D . , Br’Michalchik , V . ( 1990 ) . Ill - structured problem solving in instructional design . Proceedings of the Annual Codefence of the Cognitive Science Society ( pp . 939 - 946 ) . Hillsdale , NJ : Erlbaum . Guindon , R . ( 1989 ) . The process of knowledge discovery in system design . Proceedings of the International Cortference on Human - Computer Interaction . Elsevier . Jeffries , R . , Turner , A . D . , Polson , P . G . , & Atwood , M . E . ( 1981 ) . The processes involved in designing software . In J . R . Anderson ( Ed . ) , Cognitive skills and their acquisition . Hillsdale , NJ : Erlbaum . Kant , E . ( 1985 ) . Understanding and automating algorithm design . Proceedings of the Ninth International Joint Conference on Artificial Intelligence . Los Altos , CA : Morgan Kaufmann . Kant , E . , & Newell , A . ( 1985 ) . Problem - solving techniques for the design of algorithms . Injor - motion Processing and Management , 20 , 97 - 118 . Lakoff , G . ( 1987 ) . Women , fire , and dangerous things : What categories reveal about the mind . Chicago : University of Chicago Press . Liskov , B . , Kc Guttag , J . ( 1986 ) . Abstraction and specification in program development . Cambridge , MA : MIT Press . March , L . J . ( 1976 ) . The logic of design and the question of value . In L . J . March ( Ed . ) , The architecture of form . Cambridge , England : Cambridge University Press , Mellars , P . ( 1989 ) . Technological changes across the middle - upper Paleolithic transition : Economic , social , and cognitive perspectives . In P . Mellars & C . Stringer ( Eds . ) , The human revolution : Behavioral and biological perspectives on the origins of modern hominid % Edinburgh : Edinburgh University Press . Mostow , J . ( 1985 ) . Toward better models of the design process . AI Magazine , 6 , 44 - 57 . Newell , A . ( 1990 ) . Unified theories of cognition . Cambridge , MA : Harvard University Press . Newell , A . , & Simon , H . A . ( 1972 ) . Human problem solving . Englewood Cliffs , NJ : Prentice - Hall . Perkins , D . N . ( 1986 ) . Knowledge OS design . Hillsdale , NJ : Erlbaum . Reitman , W . R . ( 1964 ) . Heuristic decision procedures , open constraints , and the structure of ill - defined problems . In M . W . Shelly & G . L . Bryan ( Eds . ) , Human judgements and optimolity . New York : Wiley . ’ Rittel , H . , & Webber , M . ( 1973 ) . Dilemmas in a general theory of planning . Policy Sciences , 4 , 155 - 169 . Rosch , E . ( 1978 ) . Principles of categorization . In E . Rosch & B . B . Lloyd ( Eds . ) , Cognition and categorization . Hillsdale , NJ : Erlbaum . Schoenfeld , A . ( 1985 ) . Mathematical problem solving . Orlando , FL : Academic . GENERIC DESIGN 429 Simon , H . A . ( 1962 ) . The architecture of complexity . Proceedings of the American Philosophi - cal Society , 106 , 467 - 482 . Simon , H . A . ( 1973a ) . The structure of ill - structured problems . Artificial Intelligence , 4 , 181 - 204 . Simon , H . A . ( 1973b ) . The organization of complex systems . In H . H . Pattee ( Ed . ) , Hierarchy theory . New York : Brazileer . Simon , H . A . ( 1977 ) . How complex are complex systems ? Proceedings of the 1976 Biennial Meeting of the Philosophy of Science Association , 2 , 507 - 522 . Simon , H . A . ( 1981 ) . The sciences of the artificial ( 2nd ed . ) . Cambridge , MA : MIT Press . Stefik , M . ( 1980 ) . Planning and meta - planning ( MOLGEN : Part 2 ) . Artificial Intelligence , 14 , 141 - 169 . Thomas , J . C . ( 1978 ) . A design - interpretation analysis of natural English with applications to man - computer interaction . International Journal of Man - Machine Studies , JO , 651 - 668 . Thomas , J . C . , & Carroll , J . M . ( 1979 ) . The psychological study of design . Design Studies , I , s - 11 . Tong , C . , 8c Franklin , P . ( 1989 ) . Tuning a knowledge base of refinement rules to create good circuit designs . Proceedings of the 11th International Joint Coderence on Artificial In - telligence . Los Altos , CA : Morgan Kaufmann . Ullman , D . G . , Dietterich , T . G . , & Stauffer , L . A . ( 1988 ) . A model of the mechanical design process hosed on empirical dota ( Tech . Rep . No . DPRG - 88 - 1 ) . University of Oregon , Dept . of Mechanical Engineering . Voss , J . F . , Greene , T . R . , Post , T . A . , & Penner , B . C . ( 1983 ) . Problem - solving skill in the social sciences . In G . H . Bower ( Ed . ) , Thepsychology of learning and motivation : Ad - vances in research theory . New York : Academic . Wade , J . ( 1977 ) . Architecture , problems andpurposes : Architectural design as a basicproblem - solving process . New York : Wiley . White , R . ( 1989 ) . Production complexity and standardization in early Aurignacian bead and pendant manufacture : Evolutionary implications . In P . Mellars & C . Stringer ( Eds . ) , The human revolution : Behavioral and biological perspectives on the origins of modern hominids . Edinburgh : Edinburgh University Press . Winograd , T . ( 1983 ) . Language as II cognitiveprocess . Vol . I : Syntax . Reading : MA : Addison - Wesley . Wynn , T . ( 1979 ) . The intelligence of later Acheulian hominids . Man , 14 , 371 - 391 . Wynn , T . ( 1981 ) . The intelligence of Oldowan hominids . Journal of Human Evolution , IO , 529 - 541 .