COGNITIVE SCIENCE 12 , 101 - 138 ( 1988 ) - FERMI : A Flexible Expert Reasoner with Multi - Domain lnferencing JILL H . LARKIN Carnegie - Mellon University FREDERICK REIF University of California , Berkeley JAIME ~ ARBONELL ANGELAGUGLIOTTA Carnegie - Mellon University Expert reasoning combines voluminous domain - specific knowledge with mare general factual and strategic knowledge . Whereas expert system builders have recognized the need for specificity and problem - solving researchers the need far generality , few attempts have been made to develop expert reasoning engines combining different kinds of knowledge at different levels of generality . This paper reports on the FERMI project , a computer - implemented expert reasoner in the natural sciences that encodes factual and strategic knowledge in separote semantic hierarchies . The principled decomposition of knowledge according to type and level of specificity yields both power and cross - doman generality , as demonstrated in FERMI’s ability to apply the same principles of invariance and decomposition to solve problems in fluid statics , DC - circuits , and centroid loca - tion . Hierarchical knowledge representation and problem - solving principles are discussed , and illustrative problem - solving traces are presented . 1 . INTRODUCTION Most computer - implemented expert systems , and many humans , encode their knowledge so that information of varying generality is indiscriminately mingled . As a result , potentially general knowledge encoded in one domain cannot readily be used in others - making it difficult to extend knowledge or to respond flexibly to novel situations . Furthermore , this undifferentiated mingling of general and specific knowledge makes it difficult for a system to explain its reasoning since it is unable to relate features of various problems to a limited amount of general knowledge . This work was supported by the Office of Naval Research , Contract Number # NOOO74 - 82 - C - 50767 . Correspondence and requests for reprints should be sent to Jill H . Larkin , Department of Psychology , Carnegie Mellon University , Pittsburgh , PA 15213 - 3890 . 101 102 LARKIN , REIF , CARBONELL . AND GUGLIOTTA This paper described a prototype computer - implemented problem - solving system that aims to overcome the preceding difficulties by encoding its declar - ative and procedural information hierarchically at the appropriate level of generality . In particular , the system includes two related hierarchies , one of scientific principles and one of problem - solving methods . We call the system FERMI , an acronym for Flexible Expert Reasoner with Multiple - domain Inferencing , and also a tribute to the physicist Enrico Fermi who was well - known for his powerful abilities to reason from general principles in multiple domains in the natural sciences . FERMI initially solved problems in one domain ( a subset of fluid statics ) . Its general knowledge has since then proved readily extensible , with little addition of problem - solving code , to two quite unrelated domains ( to DC circuits and to computations of centers of mass ) . It is our hope that FERMI will ultimately demonstrate how expert systems can be built to achieve much greater power by judiciously separating knowledge according to levels of generality . Moreover , the separation of strategic knowledge ( e . g . , problem - solving methods ) and factual knowledge ( e . g . , scientific relations such as in - variance , decomposition , and equilibrium ) , provide far more generative power than would present in a system encoding explicitly combinations of various types of knowledge . In addition to its problem - solving power , we expect FERMI to provide hypotheses of how skilled human experts separate knowledge according to its generality . Finally , FERMI should allow us to test how general knowl - edge can be communicated to humans so as to help them flexibly learn and use large amounts of knowledge . FERMI is currently just a prototype system . It can use two general princi - ples , together with appropriate domain - specific knowledge , to solve problems in four separate domains of physics . It comprises about 2000 lines of lisp code . This paper therefore provides a demonstration of the concepts raised in this introduction , rather than a description of a fully implemented system . The next few paragraphs give a brief overview of the deficiencies exhibited by many current expert systems , of the considerations underlying the design of FERMI , and of the general knowledge and methods presently incorpo - rated in FERMI . The subsequent sections discuss in greater detail the struc - ture of FERMI , the diverse problems which our prototype version of FERMI has been able to solve on the basis of its limited general knowledge , and future extensions of FERMI which promise to lead to much greater problem - solving power and also to some educational applications . 1 . 1 . Common Deficiencies of Expert Systems Rule - based expert systems often mingle indiscriminately all kinds of strate - gic or factual knowledge , irrespective of cross - domain generality . General principles and domain - specific instances , widely applicable methods and FLEXIBLE EXPERT REASONER 103 particular inferences , are all woven into an amorphous set of rules compris - ing the “knowledge base” of the system . It is probably not surprising that this situation arises both in human learners and in the development of expert systems . Indeed , knowledge is usually acquired in a specific context by observing and encoding the efforts or explanations of some “informant” ( e . g . , an expert consultant , a textbook , or a teacher ) . In this specific con - text , this informant applies both general and specific knowledge . The learner of the knowledge engineer building the expert system ( neither of whom are domain experts ) have no way to assess the potential generality of the knowl - edge being exhibited . Therefore , he or she naturally encodes a mixture of knowledge applicable to the specific context . In fact , this approach can work quite well in domains sufficiently focused that broad use of general knowl - edge is not required ( Feigenbaum , et al . 1971 ; McDermott , 1980 ; McDermott , 1982 ; Shortliffe , 1976 ) . Mixing knowledge of different degrees of generality is , however , not only unaesthetic and unprincipled ; it also makes it almost impossible to apply general knowledge to other domains , no matter how similar to the present expertise . There is no way to identify , much less extract and reason from , the general knowledge . Correspondingly , the following problems arise almost universally both for human learners ( Brown & Campione , 1984 ; Reed , Ernst , & Banerji , 1974 ) and for computer - implemented expert systems . l Brittleness . The system or learner cannot readily respond to minor variations leading to situations even slightly different from those for which the knowledge was originally encoded . l Lack of genera & ability or transfer . The system or learner cannot readily extend his or her knowledge beyond the bounds of that originally avail - able , nor extend it to other domains . Dealing with somewhat different circumstances requires both the addition of new domain - specific knowl - edge as well as the recoding of more general principles . l Lack of explanatory power . The system cannot explain its reasoning in a manner that human beings can easily understand . A major reason is that general knowledge , shared by the system and the human , cannot provide an explicit basis for explanation , but becomes submerged in a morass of specific details . 1 . 2 . Design of the FERMI System FERMI is a working prototype of an expert reasoner that aims to overcome the preceding deficiencies by explicitly separating knowledge according to its level of generality . The system employs a standard artificial - intelligence ( AI ) method for building knowledge - representation systems . In particular , FERMI uses schemas , ( Bobrow , 1977 ; Brachman , 1979 ; Fox , 1979 ; Minsky , 1975 ) data structures composed of slots and corresponding jillers . Each 104 LARKIN , REIF , CARBONELL , AND GUGLIOTTA schema provides a structure for storing related knowledge . Any slot in a schema may have associated information about how the slot may be filled ( e . g . , default values and constraints ) . Slots in FERMI may also have associ - ated @ / ers , that is , pieces of code to be implemented whenever the system needs to fill the slot about which it has not stored information . [ For exam - ple , a puller associated with the muss slot of an object schema might check whether the average density and volume of the object are known . If so , the puller would multiply these quantities and place the result as the filler of the mass slot . ] Pullers have in different guises have occurred throughout the AI literature , perhaps first emerging as if - added demons in the CONNIVER system ( Sussman , 1975 ) , and continuing through KRL ( Bobrow , 1977 ) and SRL ( Wright & Fox , 1983 ) . FERMI’s schemas are connected to hierarchies by isa links indicating class membership . When a schema A is connected by an isa link to a second schema B , then A inherits automatically all the contents ( slots , fillers , asso - ciated information , and pullers ) from the schema B . The isa relation is trans - itive ; in other words , if A isa B and B isu C , then B inherits directly the contents of C , and A inherits from B both the original contents of B and all the knowledge that B inherited from C . Inheritance occurs along any chain of isa links . Because of this inheritance , knowledge common to a variety of schemas need be encoded only once . The inheritance structure is thus similar to that of tangled semantic networks ( Bobrow , 1977 ; Brachman , 1979 ; Fahlman , 1979 ) , with the added proviso that constraints , defaults , and pullers are also inherited . In solving complex problems , FERMI uses three levels of knowledge . It has domain - specific knowledge ( e . g . , about pressure drops ) . It has domain - independent knowledge of methods for quantitative sciences ( e . g . , decom - position , invariance ) . Finally , it uses weak methods ( means - ends analysis , breath - first and depth - first search ) to decide what methods and domain - specific knowledge to use . The general principles are applied when the domain - specific knowledge fails . When several methods or domain - specific relations are applicable , weak methods are used to choose between them . FERMI is also based on research on how information is structured in the physical sciences ( Chi , Feltovich , & Glaser , 1981 ; Reif & Heller , 1982 ) . Physical scientists can identify general principles and problem - solving methods ( e . g . , energy principles or decomposition methods ) as well as spe - cific instantiations ( e . g . , decomposition of vectors into components ) . They can also distinguish between more and less general principles or methods . ( For example , the statement “path integrals of scalar - field differences are path independenl” is quite general , while the statement “pressure drop in a static fluid is path independent” is specific to the domain of fluid statics . ) Reflecting experts’ knowledge of more and less general principles and FLEXIBLE EXPERT REASONER 105 methods , FERMI has two distinct schema hierarchies , one encoding scien - tific principles of different levels of generality , and the other encoding problem - solving methods of different levels of generality . These two hier - archies interact to produce FERMI’s abilities . A system like FERMI , designed according to the preceding guidelines , should have the following advantages : ( 1 ) It should overcome many of the deficiencies of more traditional expert systems by being more robust , more readily extensible to other domains , and more readily able to explain its rea - soning to humans . ( 2 ) Such a system should also provide a concrete testable model simulating the knowledge structures of sophisticated human experts capable of flexibly using and generalizing large amounts of knowledge . In this respect , FERMI might serve as a particularly interesting computer - implemented model of the kind used in recent years to understand the psychology of expert performance ( Larkin , McDermott , Simon , & Simon , 1980a ; Larkin , McDermott , Simon , & Simon , 1980b ; Simon & Simon , 1978 ) . ( 3 ) A FERMI - like system could serve as the knowledge base for a powerful instructional system that , unlike many human instructors , would guide human learners in acquiring knowledge usefully structured according to levels of generality . 2 . PRINCIPLES IN FERMI One can envision a system like FERMI encoding a variety of general rela - tions valid for reasoning about the natural sciences , such as : decomposi - tion , invariance , equilibrium , etc . The currently completed prototype of FERMI requires only the first two of these principles , and their associated methods , to solve a variety of problems . 2 . 1 . Decomposition The first of these principles states that certain quantities are decomposable in the following sense : Consider a quantity Q which is a function of some entity E , a relation which can be formally written as Q = Q ( E ) . ( For example , the quantity Q might be a pressure drop which is a function of the path join - ing two points in a liquid . ) Suppose also that this entity E can be conceived as consisting of subentities Ei . ( For example , a path can be conceived to con - sist of subpaths or segments which collectively make up the original path . ) A corresponding quantity Q @ ) is then associated with each such subentity Ei . ( For example , there is a pressure drop associated with each component segment of a path . ) If the quantity Q is decomposable with respect to the entity E , then the value of the total quantity Q associated with E is simply equal to some specified combination function applied to the values Q ( Ei ) of Q associated with the individual components Ei of E . ( For example , the 106 LARKIN , REIF , CARBONELL , AND GUGLIOTTA pressure drop associated with a path is simply equal to the arithmetic sum of the pressure drops associated with all the individual segments of this path . ) The decomposition principle can be summarized in the following equation : Q ( E ) = Ei Q ( E ) , where { Ei } is a set of entities that can be composed into the original entity E . More generally the summation might be replaced by other composition functions ( e . g . , multiplication , weighted addition ) . The general “decomposition method” associated with this principle ap - plies to all decomposable quantities . It specifies the following general pro - cedure to find the value of a quantity from the values associated with its components : ( 1 ) If a quantity Q is decomposable with respect to an entity E , find a decomposition into component entities Ei such that each associated value Q ( Ei ) is less difficult to compute than Q . ( 2 ) Compute the values Q ( Ei ) associated with all these component entities . ( 3 ) Combine these values by using the specified combination function . The decomposition principle and associated decomposition methods apply to functions of many types of entities . For example , decomposition applies to pressure drops or potential drops as functions of paths , to areas or centers of mass as functions of regions , and to temporal functions expressed as functions of frequency . As discussed later , the decomposition methods can also use different strategies ( iterative decomposition or recursive decompo - sition ) for choosing useful component entities . 2 . 2 . Comparison of Invariants The second general principle used by FERMI is the invariance principle which specifies that a quantity Q is invariant in the following sense : Suppose that Q is a function of an entity E or set of such entities . ( For example , the quantity Q might be the energy of a particle and would then be a function of the position and velocity of this particle . ) Then Q is invariant with respect to E if Q remains the same if E is changed . ( For example , under appropriate conditions , the energy of a particle remains invariant when its position and velocity change . ) The equation Q ( Ei ) = constant , for all Ei expresses the invariance principle , where E , and E2 are two values of the entity E . The following method ( “comparison of invariants” ) is used in conjunc - tion with the invariance principle : ( 1 ) If a quantity Q invariant with respect to an entity E , select two values ( E , and E , ) of E relevant to quantities men - tioned in the problem . ( 2 ) Compute and equate the expressions Q , and Q2 for the values of Q associated with E , and El . The result of this method is an equation relating quantities of interest in the problem . [ For example , the FLEXIBLE EXPERT REASONER 107 energy of a particle can be expressed in terms of its position and velocity . If the particle’s energy is invariant , a consideration of the particle at two dif - ferent times ( corresponding to different positions and velocities of the parti - cle ) yields an equation relating these positions and velocities . ] 2 . 3 . Current Implementations of These , Principles The general principles of decomposability and invariance are currently used by FERMI in three domains . The first is the computation of pressure drops in fluids at rest . The second is the calculation of potential drops in direct - current electric circuits . The third is the calculation of centers of mass for planar objects . ( The calculation of centers of mass involves composition by a weighted - average operator , unlike the calculation of pressure or potential drops which involves composition simple scalar addition . ) Thus FERMI currently implements two principles ( decomposability and invariance ) with associated methods , and can use this knowledge in three domains to com - pute pressure drops , potential drops , and centers of mass . The next two sections of this paper describe the current implementation of FERMI , first discussing its architecture and then its problem - solving per - formance in various domains . The final section discusses the potential power of this approach by describing planned future extensions of FERMI and the far larger range of problems that it should then be able to address with a relatively small number of additional general strategies and principles . 3 . ARCHITECTURE The first part of this section provides an overview of FERMI’s problem - solving capabilities and of the architecture of its knowledge . The remaining parts discuss more technical details of FERMI’s implementation . 3 . 1 . FERMI’s Knowledge and Capabilities FERMI currently can find the pressure drop between any two points in a liquid , the potential drop between any two points in an electric circuit , and the position of the center of mass of any planar object decomposable into rectangular parts . To solve such problems in all three of these domains , in both simple and more complex situations , FERMI requires the same general principles ( decomposability and invariance ) and associated methods _ together with some domain - specific knowledge about’ fluid statics , about electric circuits , and about the definition of center of mass . FERMI can also solve moderately complex electric - circuit problems by using the preceding general decomposability and invariance principles together with its domain - specific knowledge about electric circuits . In addi - 108 LARKIN , REIF , CARBONELL , AND GUGLIOTTA tion , FERMI can use algebra flexibly to solve an equation for any quantity appearing in it and to propagate symbolic algebraic expressions without requiring numerical solutions . FERMI’s knowledge is entirely stored in schemas of various levels of gen - erality . Its general knowledge is stored in general “quantity schemas” and in associated general “method schemas . ” Its domain - specific knowledge is stored in domain - specific quantity schemas and in associated local methods called “pullers . ” The following paragraphs describe briefly FERMI’s do - main - specific and general knowledge , and how they interact to solve various kinds of problems . 3 . 1 . 2 . Domain - Specific Knowledge . For each domain , FERMI has specific knowledge encoded in quantity schemas . We use single quotes to indiate the name of any schema . ( For example , “pressure drop” is the central domain - specific quantity schema used for problems in fluid statics . ) We indicate the name of a slot in a schema by using single quotes to enclose the schema name separated by a slash from the name of the particular slot . ( For example , “pressure drop / result” is the “result slot” of the “pressure drop” schema , i . e . , the slot which stores the value of the quantity “pressure drop . ” We omit the schema name , retaining only the slash , if the schema name is obvious from the context ( e . g . , the previous slot may be simply indiced by “ / result . “ ) Certain slots in quantity schemas have associated with them domain - specific actions called “pullers . ” A puller , as shown in the following exam - ple , contains procedural knowledge of how to fill the slot when it is empty and no inheritable value is available . Example 1 : A problem solved by domain - specific knowledge . The “pressure drop / result” slot has a puller that can find the value of the pressure drop when specific conditions ( specified in the slot “ / computability requirements” ) are satisfied . This puller encodes the following particular method based on domain - specific knowledge about fluid statics : If two points are located one below the other , separated by a height h , in a single fluid of density px and not separated by a wall , then find the pressure drop from the lower to the higher by computing the pro - duct pgh . The phrases in the if clause are the contents of the “pressure drop / com - putability requirements” slot . FERMI first checks that these requirements are satisfied , and , if so , proceeds to compute the indicated product . FERMI uses this puller to solve simple problems like the following : A beaker is filled with oil ( of density 0 . 8 gm / cm’ ) . What is the pressure drop from a point at the bottom of the beaker to a point located in the oil 3 cm above the bottom point ? In this example , the puller associated with “pressure drop / result” first checks the “pressure drop / computability requirements” slot and finds that FLEXIBLE EXPERT REASONER 107 energy of a particle can be expressed in terms of its position and velocity . If the particle’s energy is invariant , a consideration of the particle at two dif - ferent times ( corresponding to different positions and velocities of the parti - cle ) yields an equation relating these positions and velocities . ] 2 . 3 , Current Implementations of These , Principles The general principles of decomposability and invariance are currently used by FERMI in three domains . The first is the computation of pressure drops in fluids at rest . The second is the calculation of potential drops in direct - current electric circuits . The third is the calculation of centers of mass for planar objects . ( The calculation of centers of mass involves composition by a weighted - average operator , unlike the calculation of pressure or potential drops which involves composition simple scalar addition . ) Thus FERMI currently implements two principles ( decomposability and invariance ) with associated methods , and can use this knowledge in three domains to com - pute pressure drops , potential drops , and centers of mass . The next two sections of this paper describe the current implementation of FERMI , first discussing its architecture and then its problem - solving per - formance in various domains . The final section discusses the potential power of this approach by describing planned future extensions of FERMI and the far larger range of problems that it should then be able to address with a relatively small number of additional general strategies and principles . 3 . ARCHITECTURE The first part of this section provides an overview of FERMI’s problem - solving capabilities and of the architecture of its knowledge . The remaining parts discuss more technical details of FERMI’s implementation . 3 . 1 . FERMI’s Knowledge and Capabilities Fl ? RMI currently can find the pressure drop between any two points in a liquid , the potential drop between any two points in an electric circuit , and the position of the center of mass of any planar object ‘decomposable into rectangular parts . To solve such problems in all three of these domains , in both simple and more complex situations , FERMI requires the same general principles ( decomposability and invariance ) and associated method + together with some domain - specific knowledge about’ fluid statics , about electric circuits , and about the definition of center of mass . FERMI can also solve moderately complex electric - circuit problems by using the preceding general decomposability and invariance principles together with its domain - specific knowledge about electric circuits . In addi - 110 LARKIN , REIF , CARBONELL , AND GUGLIOTTA Specifically , the “decomposition” schema specifies the following general method : Suppose that a quantity Q is , by virtue of a isu link , a “decompos - able quantity” with an “‘ / entity” slot filled by a pointer to an entity E . Then the “decomposition” schema contains a “ / control - structure” slot filled by a piece of code which executes the following actions : ( 1 ) Decompose E so that each component entity Ei satisfies as many of “E / computability requirements” as possible . ( 2 ) Construct schemas Qi , of the same “ / type” as Q , associated with each of the subentities Ei . ( 3 ) Fill the “QJresult” slot for each Qi ( using the associated pullers which can be applied because the computability requirements are satisfied ) . ( 4 ) Combine these results by using the “Q / combination function” to yield the filler for the slot “Q / result . ” The structure used for “decomposable quantity” is also used to imple - ment “invariant quantity . ” A pointer to a general method for dealing with invariant quantities is included in a general quantity schema from which it is inherited by a variety of specific quantities . In this way the general method is encoded only once , but is accessible to all those quantities . To illustrate the use of general methods , consider again the following example . Example 2 : Problem Solved with General Knowledge . The “potential drop” schema inherits from “decomposable quantity” a pointer to the decomposition method . “Potential drop” also has slots and fillers specifying that it is decomposable over the entity “path” and that its combination function is “scalar addition . ” ( Both “path” and “scalar addi - tion” are themselves also schemas . ) This knowledge lets FERMI solve easily a simple problem like the following : There is a 5 volt potential drop from point A to point B and a 10 volt potential drop from B to C . What then is the poten - tial drop from A to C ? After the “potential drop / result” puller fails , the “known path decompo - sition” method decomposes the path from A to C into a path from A to B and one from B to C . Each of these segments trivially satisfies the “potential drop / computability requirements” since the potential drops are already known for these path segments . FERMI then applies the “potential drop / combination function” ( i . e . , scalar addition ) to combine the individual potential drops ( 5 and 10 volts ) and thus obtains the desired “potential drop / results of 15 volts . The knowledge applied in this example is very general . The same knowledge would find the pressure drop from A to C by using knowledge about the pressure drops from A to B and from B to C . It would also find the center of mass of an object by applying its “ / combination function” ( average weighted by mass ) to known centers of mass of component objects . 3 . 1 . 3 . Combined Knowledge Application . FERMI can combine its domain - specific knowledge ( stored in specific quantity schemas and their pullers ) and its general knowledge ( stored in general quantity schemas and their methods ) . If domain - specific knowledge alone fails to solve a problem , FLEXIBLE EXPERT REASONER 109 these requirements are satisfied , i . e . , that there are two points in the same liquid , located one above the other , and not separated by a wall . The puller then multiplies the given values of p , g , and h and places the result in the “pressure drop / result” slot . As this example illustrates , the knowledge in specific quantity schemas and their pullers is domain - specific , here applying only to the quantity “pressure drop . ” 3 . 1 . 2 . General Knowledge . Of more central interest is FERMI’s knowl - edge of general principles and methods that apply to a large variety of do - mains . This knowledge is encoded in two kinds of related schemas : l General quantity schemas from which domain - specific quantities ( like “pressure drop” ) inherit knowledge . l Associated method schemas that encode related general problem - solving methods . A general quantity schema contains pointers to one or more general methods . These pointers are inherited by all quantities related to that general quantity by any chain of isa links . Hence , the method is general in that it applies to this entire class of quantities . If a problem cannot be solved with pullers , FERMI checks the “ / methods” slot of the schema for the quantity it wants to find . The corresponding “quantity schema” may be connected by isa links to a “general quantity” schema with a filled “ / methods” slot containing a pointer to a general method . This pointer is inherited along the isa links to the “quantity schema” of interest . If this is the case , FERMI tries this method to solve the problem . For example , the current implementation of FERMI has a general quantity schema called “decomposable quantity . ” Its major slots are the following : “ / entity” : The decomposable quantity is a function of this specified entity . It can be decomposed with respect to any decomposition of this entity into component entities . “ / combination function” : This combination function specifies how the desired quantity can be found from the quantities associated with the individual com - ponent entities . ( For example , this combination function might be scalar addition or some weighted average . ) The schemas for many specific quantities ( including “pressure drop , ” “potential drop , ” and “center of mass” ) are connected by isa chains to the schema “decomposable quantity . ” Correspondingly , all of these quantities inherit a pointer to the general method schema “decomposition” which helps to decompose complex problems into simpler ones associated with component entities . 112 LARKIN , REIF , CARBONELL , AND GUGLlOl - fA In summary , FERMI’s knowledge consists of hierarchically organized sets of general and domain - specific schemas for quantities and for methods . These schemas can be used either alone , or in interacting fashion , to solve problems that involve knowledge of varying degrees of generality . 3 . 41 . 4 . Implementation Language . The implementation of FERMI requires a language that can easily handle schema hierarchies and inheritance . We chose the schema - representation language SRL ( Fox , 1979 ; Wright & Fox , 1983 ) in which isa links cause automatic inheritance of all the slots and their associated knowledge ( fillers and pullers ) . This inheritance is transitive , that is , it occurs along any chain of isa links . FERMI’s power comes from using these schema hierarchies extensively to encode both declarative knowledge of principles and procedural knowledge of problem - solving methods . The rest of this section describes in greater detail FERMI’s quantity and method schemas , as well as their hierarchical organization . 3 . 2 . FERMI’s Schemas 3 . 2 . I . Quantity Schemas . A quantity schema consists of slots ( which may or may not be filled ) . Each can store attributes of the quantity . Each quantity schema includes a “ / result” slot which is to be filled with the value of the quantity ( here pressure drop ) . The puller associated with this slot first checks whether its “ / computability requirements” are satisfied ; if so it applies a domain - specific method to compute the quantity . For the “pressure drop” schema , this method involves finding the indicated values for density , height , and gravitatonal constant . The “pressure drop” schema also contains the slots “ / pointI” and “point2” which contain pointers to schemas representing the two points be - tween which the pressure drop is measured . The “ / isa” slot contains one or more pointers to more general schemas with contents that are inherited by the current schema . Here the “pressure drop” schema isa “sum over path” schema ; hence “pressure drop” inherits all the contents of that schema , with results described later . Pullers act recursively in the following sense . A puller may need the value of a slot that is currently empty and may therefore cause this slot’s puller to act . This process continues until the system encounters a slot with no puller , or succeeds in finding the filler of the originally desired slot . ( For example , when the result of a “pressure drop” schema is desired , its puller acts and requests a value for the vertical distance between the two specified points . If the “ / result” slot for that schema is not filled , then it’s puller acts to sub - tract the height - coordinates y of the two points . If these y coordinates are unknown , their pullers act . ) This recursive puller architecture allows domain - specific knowledge to be encoded locally . In other words , each puller knows how to compute its own slot , but can interact with other knowledge anywhere FLEXIBLE EXPERT REASONER 111 FERMI tries general methods . Usually , in contrast to the preceding exam - ples , general methods alone do not completely solve the problem . Instead , the general methods require specific information which is supplied by the domain - specific quantity schemas and their pullers . This process is illustrated by FERMI’s solution to Example 3 Example 3 : Problem solved by Domain - specific and General Knowledge . A beaker is partly filled with water of density pw = 1 . 0 gram / cm’ . A layer of oil , of density p0 = 0 . 8 gram / cm’ floats on top , as shown in Figure 1 . What is the pressure drop from a point A , located 2 cm below the water - oil interface , to another point B located 1 cm above the interface and 4 cm to the right of A ? This problem violates “pressure drop / computability requirements” in two ways because the points are neither in the same liquid nor located vertically one above the other . Hence , FERMI calls on the general method of path decomposition , . inherited by the “pressure drop / methods” slot from “decom - posable quantity . ” This method seeks a set of path segments that ( 1 ) collec - tively make up a path from A to B , and ( 2 ) individually satisfy the “pressure drop / computability requirements . ” The result is the set of segments A - X , X - Y , and Y - B shown in Figure 1 . This step uses general knowledge . FERMI then computes a pressure drop for each of these constructed segments , and then composes them ( by addition ) to obtain the originally desired pressure drop . This step uses both the domain - specific formula for pressure drop and a general method for combining quantities with a composition function ( here addition ) . In other words , FERMI performs the following calculation for pressure drops indicated by the symbol P : PA8 = PAX + PXY + PXB = O + Pw g ( 2 ) + & h g ( 1 ) = O + ( l . O ) ( 980 ) ( 2 ) + ( 0 . 8 ) ( 980 ) ( 1 ) = 2744 dyne / cm’ Here FERMI uses the known value g = 980 for the gravitational accelera - tion . ( For simplicity , the present implementation of FERMI suppresses units , assuming that all quantities are specified in terms of the fundamental units of centimeter , gram , and second . ) oil yy . . . _ _ . _ . _ . _ _ . _ - . 4 B xi water ; A ; Figure 1 . A pressure - drop problem requiring both general and domain - specific knowledge 114 LARKIN , REIF , CARBONELL . AND GUGLIOITA For example , in the schema for the method of iterative path decomposi - tion , the entity of interest is a path which can be decomposed into subpaths . The “ / step generator” slot generates a single step ( i . e . , path segment ) which ( 1 ) violates none of the computability requirements of the quantity being computed , ( 2 ) is as large as possible , and ( 3 ) produces a complementary problem more soluble than the original one . The “ / done test” slot contains a pointer to code for checking whether computability requirements are satis - fied for a single complementary step . The schema for the comparison - of - invariants method has , like all method schemas , a “ / control structure” slot with code that executes when the method is called and that , in turn , calls code in other slots . The “ / alterna - tive getter” slot contains information about how to find or generate other situations to exploit the invariant properties of the quantity of interest . For example , in the case of path invariance , these other situations are alternative paths between two points . The schema contains then a “ / path generator” slot accessing code that can generate a path either ( 1 ) parallel or perpendicular to a given direction , or ( 2 ) along predefined paths ( e . g . , along the wires of an electric circuit ) . The filler of “ / entity type” indicates what kind of quantity ( e . g . , pressure drop ) is invariant . The “ / invariance rela - tion” slot contains a pointer to the “equation” schema holding the equation template for the particular kind of invariance . In all cases , any intermediate expansion of the problem by general methods is checked against a “more soluble” condition . Therefore , even if an expan - sion may be more complex to implement than the original problem it either contains a set subproblems all simpler than the original , or at least one sub - problem guaranteed soluble . 3 . 2 . 3 . Examples of FERMI’s Functioning . We illustrate here how FERMI applies its quantity and method schemas to two quite different problems re - quiring recursive and iterative decomposition , with one requiring region rather than path decomposition . Example 4 : Problem solved with recursive path decomposition . Consider the problem of finding the pressure drop from A to B in water - filled container shown in Figure 2 . When FERMI tries to solve this problem , it successively tries to apply the available methods specified in the “pressure drop” schema . In this case , the “pressure drop / result” pullers fail because the conditions specified by “ / corn - putability requirements” are violated ( i . e . , intervening walls intersect the straight path from A to B ) . FERMI then tries to solve the problem by using “iterative path decomposition . ” This effort also fails for the following rea - sons : FERMI first constructs the path segments A - X and X - Y shown in Figure 2 , thereby moving closer to B and satisfying all computability requirements . But when FERMI tries to iterate the process , considering the remaining path FLEXIBLE EXPERT REASONER 115 Figure 2 . Figure illustrating a problem solved with recursive path decomposition Y - B , it cannot find a path segment that begins at Y moves closer to B , and satisfies the “pressure drop / computability requirements . ” At this point , FERMI tries the method of “recursive path decomposition , ” the second general method schema associated with “pressure drop . ” This method tries to find a point Z satisfying the following conditions : ( 1 ) At least one of the new paths A - Z and Z - B violate fewer of the computability require - ments than the original path A - B , and ( 2 ) neither path violates more computa - bility requirements than the original path . The means for generating a path which does not violate a particular computability requirement is stored with the computability requirement itself . In this case the “in container” require - ment stores the following method : Start at the center of the line joining the two points of interest , A and B . Move along the perpendicular bisector of this line until reaching a point Z for which AZ and BZ do not violate the incon - tainer restruction . If point Z itself moves outside the container , then move in the opposite direction . The result is the point Z shown in Figure 2 . Note that the original path A - B violated all three computability requirements , i . e . , that it should lie in a region of homogeneous liquid density , that it should not inter - sect any walls , and that it should be along a preferred direction ( vertical or horizontal ) . By contrast , each of the new paths A - Z and Z - B violates only the single computability requirement that it should be along a preferred direction . The problem solution is completed as discussed earlier by applying domain - specific knowledge to the simple vertical and horizontal paths . Just as different control structures ( iterative or recursive ) can be used with the same type of entity ( e . g . , path ) , different types of entities can be used with the same control structure . Thus , FERMI can use the iterative control structure either with paths or with regions . Exatnple 5 is solved by iterative region decomposition . Example 5 : Problem solved with iterative region decomposition . Consider finding the center of mass of the two - dimensional metal object shown in Figure 3 . As always , FERMI starts its work by trying direct domain - specific methods encoded as pullers . Here the “center of mass” schema contains the following 116 LARKIN , REIF , CARBONELL , AND GUGLlOllA Y t x Figure 3 . A problem solved with iterative region decomposition method , encoded in the puller of the “ / result” slot and in the “ / computability requirements” slot : If a rectangular object is aligned parallel to the x and y axes , with two parallel sides located at x , and x2 and the other two parallel sides at y , and yl , the center - of - mass coordinates xc and yc are found by com - puting the respective averages of these positions . Direct application of the puller fails in this case because the weather vane is not rectangular in shape . Then FERMI tries to apply iterative decomposition because the “center of mass / methods” slot contains a pointer to “iterative region decomposition . ” To do this , FERMI starts at an arbitrary corner of the weather vane , say corner A in Figure 3 , and constructs a region satisfying the following requirements : ( 1 ) The region satisfies the “center of mass / computa - bility requirements” of being a rectangle . ( 2 ) The remaining region should be as small as possible , i . e . , the chosen rectangle should be as large as possible . The chosen rectangular region is the rectangle ABCD indicated in Figure 3 . The “region decomposition / done test” then determines that the computa - bility requirements are satisfied by the three remaining rectangular regions . ( Note that this “ / done test , ” unlike that used for path decomposition , must be able to cope with multiple remaining regions . ) FERMI then calculates the centers of mass for all four regions , and combines them using the “center of mass / composition function” ( average position weighted by mass ) . 3 . 3 . Schema Hierarchies The individual quantity and method schemas gain much of their power from their organization into schema hierarchies . Almost every schema ( e . g . , the “pressure drop” or “decomposition” schema ) uses considerable knowledge not directly encoded in that schema . Instead , each schema is connected by isu links to other more general schemas . Knowledge encoded in schemas of high generality is then inherited by more specific schemas lower in the hier - archy . The following comments describe more fully the hierarchies encoding quantities and those encoding methods . 3 . 3 . 1 . The Quantity Hierarchy . Figure 4 shows part of FERMI’s hier - archy of quantity schemas . The previously described “pressure drop” schema appears near the bottom of this hierarchy . It is connected by isu links ( indi - cated by solid lines ) to the more general schemas of “difference quantity , ” FLEXIBLE EXPERT REASONER 117 qwYy I I I ( type ) difference ( properties1 quantity I - I I - - I I I I scalar vector I decoapoaable invariant field field 1 I quanttty qunrity I - - I l I I I I I I path region path input - tlae I I output I I I - I I I invariant aua over path I I - - i i I pressure potential drop drop I - ‘ - i I PD PD2 Figure 4 . FERMI’s hierarchy of quantities “invariant sum over path , ” and scalar field . Other isa links connect the “pressure drop” schema indirectly to still more general schemas such as “decomposable quantity” and “quantity . ” These general methods are employed only after pullers have failec ! to return an answer . In this way , FERMI exploits available specific methods before exploring more general ones . Our earlier discussion of the “pressure drop” schema included essentially only knowledge encoded directly in the “pressure drop” schema itself . But the “pressure drop” schema can , in addition , use all the knowledge inherited from schemas higher in the hierarchy of Figure 4 . Tdis inheritance , which causes each schema to function as if it contained all the slots and fillers of the schemas higher in the hierarchy , serves the following three major functions . 1 . A schema may inherit a puller . For example , the “difference quantity” schema in Figure 4 includes in its “ / result” slot a puller that specifies how to find the drop in a quantity by subtracting its final value from its initial one . This puller is inherited by the “pressure drop” schema so that it knows how to find the value of a pressure drop from a point A to a point B by subtracting the pressure at B from that at A . Encoding this 118 LARKIN , REIF , CARBONELL . AND GUGLIOTTA 2 . 3 . knowledge in the more general “difference quantity” schema makes it available not only to “pressure drop , ” but also to other schemas such as “potential drop . ” A schema may inherit pointers to a general method . For example , in Figure 4 the schema “decomposable quantity” includes a pointer to the general “path decomposition” method schema . Correspondingly , the “pressure drop” schema inherits this knowledge and can thus also make use of this method . Because the knowledge of this general method is not directly encoded in the “pressure drop” schema , it can be inherited not only by this schema but by many other specific quantities to which it applies . Schemas may inherit slots . For example , “pressure drop” ( and all other quantity schemas ) inherit a “ / result” slot from the general “quantity” schema . This use of inheritance helps to keep the system consistent , en - suring that related schemas have the same slots . A schema often inherits knowledge from more than one source . For example , the “pressure drop” schema in Figure 4 inherit a puller from the “difference quan - tity” schema and also a pointer to the general decomposition method from “invariant sum over path . ” The preceding kinds of inheritance provide the following benefits : 1 . Inheritance simpll ~ es coding . General knowledge needs to be encoded only once and can then be used repeatedly by a large variety of more specific schemas . 2 . Inheritance makes it easy to apply old information in new ways . For ex - ample , electric potential drop , like pressure drop , is a differencequantity and an invariant sum over path . The specific formulae for computing such a potential drop are , however , completely different . Nevertheless , the “potential drop” schema in Figure 4 was easily added to the system after all the other schemas shown there had been completed . It provided only a small amount of domain - specific information about how to com - pute potential drops , but immediately inherited a large amount of essen - tial information from the previously coded general schemas . As a result , very little new programming was required to allow FERMI to apply old knowledge to a new domain . 3 . Inheritance facilitates the encoding of specific problems . For example , a specific quantity in a problem , such as a specific pressure drop PD’ , is simply encoded as a schema “PD”’ that isa “pressure drop . ” Thus , it automatically inherits all the knowledge of the quantity schema , includ - ing pointers to pullers and general methods . In addition , problem - spe - cific knowledge ( e . g . , pointers to the specific points between which the particular pressure drop PD’ is to be found ) is encoded in the relevant slots of the particular PD’ schema . Thus FERMI is provided with im - mediate access to both specific and general information . FLEXIBLE EXPERT REASONER 119 4 . Inheritance provides an easy way to encode general principles . Inheri - tance through isa links is the means whereby FERMI encodes what physical scientists call “principles . ” Thus the principle of conservation of energy , asserting that the energy of a system is an invariant quantity under certain conditions , is encoded by establishing an isa link between an appropriate energy schema and the “invariant quantity” schema . This isa link gives the “energy” schema all of the knowledge associated with an invariant quantity , including a pointer to all problem - solving methods exploiting invariance . Similarly , the isa chain between “pres - sure drop” and “invariant sum over path” in Figure 4 expresses the principle that pressure drops are path - invariant . 5 . Inheritance encourages consistency . When a decision is made about how to encode certain knowledge ( i . e . , what slots to create , etc . ) , that decision is implemented in the most general schema to which it is appli - cable . Inheritance then assures that that decision is consistently imple - mented for all of the specific schemas connected to that general schema . Among quantities in the physical sciences , conflicting multiple inheri - tances appear not to be a problem . An inheritance link between a specific and a general property ( e . g . , between “pressure drop” and “path indepen - dent” quantity” is exactly equivalent to the correct physical statement that pressure drops are path independent . Similarly , the link from “pressure drop” to “path decomposable quantity” means exactly that pressure drops are decomposable over path . Inheritance links are placed in the quantity hierarchy only when such corresponding statements are physically correct . This correctness means that the methods accessed from the general quanti - ties do apply correctly to the specific quantities that inherit this access . “Pressure drop” is both path invariant and path decomposable , and knowl - edge associated with either or both may be correctly applied . 3 . 3 . 2 . The Method Hierarchy . Figure 5 summarized the hierarchy that encodes FERMI’s knowledge about general problem - solving methods . ( Schemas in parentheses are planned , but not yet implemented . ) The struc - ture used to represent decomposable . quantities is also used for invariant quantities . As in the quantity hierarchy , schemas higher in the hierarchy encode general knowledge that applies to several schemas lower in the hier - archy . By separating more general knowledge , it needs to be encoded only once and inheritance lets it apply in many specific situations . The general method schema , at the top of the hierarchy in Figure 5 , con - tains a “ / control structure” slot which specifies code to be executed when - ever the method is invoked . This slot is inherited by all other methods lower in the hierarchy . [ For example , the method of “iterative path decomposi - tion” inherits from the general “decomposition schema” slots for “ / step generator , ” “ / done test , ” and “ / entity type . ” These slots are needed by all 120 LARKIN , REIF , CARBONELL , AND GUGLIOTTA method I ‘ - r - I property - related algebraic ( analogy ) methods methods I I decomposi tlon comparison of invariants - I I I - - I I I ( control structure ] Ientity I type1 peth input - output I I I - - I I - 1 I known iterative recursive I I Th region constrained preferred peth direction I I I L \ I / \ I / I I I I Irecursive I recursive I I - - > jpath decomp . I [ region decoap . [ _ _ - - _ _ _ _ - - - - - - - - - - - - - - - - - - - - - I / ( iterative l iterative I - - - - - - - - - - - - > [ path decomp . 1 region decomp . 1 1 known I known - - - - - - - - - - - - - - - - - - - - - > Ipath decomp . I ] region decomp 1 Figure 5 . FERMI’s hierarchy of major problem - solving methods decomposition methods , but not by the other methods ( such as invariance or analogy ) indicated in Figure 5 . 1 As in the case of the quantity hierarchy , this inheritance encourages consistency by ensuring that related schemas have the same slots . This method hierarchy allows different parts of a method to be encoded separately and used in a variety of contexts . For example , a decomposition method muSt include both control - structure information ( about how to de - compose a problem ) and entity - type information ( about what types of entities to decompose ) . Figure 5 , and the following comments , indicate how these two ingredients of the decomposition method are encoded in two classes of descendants of the decomposition schema . The method schemas contain filled “ / step generator” slots with contents corresponding either to recursive , iterative or known decomposition methods . In the “iterative decomposition” schema , this slot is filled with pointers to code that specifies how to construct a first solvable problem , and how then to iterate this process to generate a sequence of such solvable FLEXIBLE EXPERT REASONER 121 problems . In the “recursive decomposition” schema , this slot contains pointers to code that specifies how to subdivide a problem into two sub - problems , and how then recursively to construct more such subproblems . In the “known path decomposition” the code simply identifies subproblems already present in the problem representation . The entity - type schemas con - tain slots with fillers specifying whether the entity of interest is a path or a region . They also contain slots with pointers to schemas providing knowl - edge of the details of decomposition specific either to paths or to regions . The structure of the hierarchy , involving the invariance method for com - paring invariants , is quite similar . The general “comparison of invariants” schema contains a control structure specifying how to generate equations exploiting the invariance property of a quantity . As indicated in Figure 5 , this control structure is then inherited by the more specific invariance methods lower in the hierarchy ( e . g . , by invariance with respect to changed paths , or invariance with respect to changes from input to output current at a node in an electric circuit ) . The schemas for “path invariance” or “input - output invariance” have different contents for the “ / alternative getter” slot which generates the changed entity to be considered . In the case of pre - ferred - direction invariance , the “ / alternative getter” uses the contents of a “ / path generator” slot that generates paths parallel or perpendicular to a preferred direction ( e . g . , vertical or horizontal paths ) ; in the case of con - strained invariance , the “ / alternative getter” generates paths among those specified in a problem ( e . g . , along the wires in a given electric circuit ) . The preceding separation of various kinds of knowledge about methods has the following advantages : ( 1 ) Pertinent knowledge is encoded with , less repetition . For example , FERMI can combine any “control structure” schema with any “entity type” schema , yielding four separate schemas for decomposition . Each part of the method is used in two of these methods , but needs to be encoded only once . ( 2 ) It is easily possible to use old knowl - edge in new ways . For example , if a new “entity type” schema is added , FERMI can automatically use it with any of its “control structure” schemas ; similarly , if a new “control structure” is added , FERMI can immediately use it with any “entity type . ” The method hierarchy is a tree ( not a network ) except for the highly struc - tured interaction of control structure and entity type knowledge combined to form the matrix of decomposition strategies . In neither situation , the tree or the matrix , is there any possibility of conflicting multiple inheritance . 3 . 3 . 3 . Other Schemas in FERMI’s Hierarchical Knowledge . All of FERMI’s knowledge is encoded in the form of hierarchically organized schemas . Thus the hierarchy of schemas in Figures 4 and 5 are only part of encompassing hierarchies . The fact that ail of FERMI’s schemas are encoded in hierarchies enforces consistent separation of more and less general knowl - 122 LARKIN , REIF , CARBONELL , AND GUGLIOTTA edge . When knowledge from some schema turns out to be useful in a second schema , it is moved to a common ancestor and then inherited by both . This system makes it relatively easy to add knowledge without creating conflicts , even though we currently add knowledge by hand without any special facili - ties . Clancey ( 1983a , 1983b ) points out similar maintainability advantages for his hierarchically structured system . There are more specific “object” schemas which contain slots for physi - cal properties like mass and density . They also contain slots for geometric properties like height and width , and pointers to point schemas that specify the physical boundaries of the object . ( Not all these slots need to be filled ; e . g . , the slots for mass or density in the case of circuit elements ) . As men - tioned previously , schemas may contain pointers to various simple action schemas , for example , to tests for computability requirements or to tests for better solubility . These additional schemas are simpler and inherit less complex knowledge than the general quantity schemas discussed previously . Nevertheless , the hierarchical structure of all this knowledge retains the previously mentioned advantages : Knowledge relevant to any group of schemas needs to be en - coded only once in a higher - level schema . 4 . PERFORMANCE The goal of this section is to show FERMI’s performance on a difficult problem requiring combined application of knowledge of varying generality . . We have already seen FERMI’s application of domain - specific knowledge and physical - science methods , both alone ( Examples 1 and in combination with Example 2 ) . We now present a more complex example that illustrates FERMI’s combined application of these two kinds of knowledge together with simple depth - first search . Example 6 : Solution to a complex problem The problem is that of finding the current I , , in Figure 6a . Figure 6b shows a slightly simplified goal tree constructed from the trace of FERMI’s solution . The complete trace , with a discussion is given in the Appendix . As FERMI applies its domain - specific methods and physical - science methods to this problem , it constructs either single subgoals or sets of subgoals . A sub - goal set is either an AND set , ( indicated by double arcs in Figure 6b ) , or an OR set , ( indicated by single arcs ) . To satisfy the parent goal , all of an AND set must be satisfied , but just one of an OR set must be satisfied . FERMI generates and searches the tree in Figure 6b left - to - right depth - first ( a very general weak method ) . In particular , attempts to satisfy ( left to right ) each new node in a newly - generatep subgoal set . An x through the line leading to the node indicates that FERMI could neither satisfy that node ( through lookup or pullers ) nor could it generate any new subgoals ( with methods ) . “A \ lo < I - O Invariance I Io = l , + 12 I , & I * \ I 3 amps v . V , = l , R , V , = smf vl = v * ~ ery path ) y = I . ” = i * 4 & variance V’ = - emf * \ v’ = v ; + v ; + v ; I I I yg v ; v ; Q I a I I 4 , 4 I . . . 0’ 6v 0 1 . Not a resistor . 2 . Would produce circular algebra ; not a battery 3 . Element cannot be decomposed . . 4 . Not a resistor ; not a battery . 5 . No pmviowly known decompo & lon . Figure 6 . A . Circuit diagram for a problem requiring application of domain - specific knowl - edge , physical - science methods , and weak search methods to find the current IO . 123 124 LARKIN , REIF , CARBONELL , AND GUGLIOTTA I a L b R2 ( 2 ohm ) d C Figure 6 - B . Goal tree for FERMI’s solution to this problem . That node is therefore a failure and FERMI backs up to the first available OR set above the failure , and tries the next goal in that set . Each x is labeled with a number , keyed at . the bottom of Figure 6b to a list of reasons for possible failure . Three kinds of goal nodes appear in Figure 6b . The goal to find the value of a single quantity ( e . g . , IO , V , ) is represented by that quantity . Goals to apply a method appear as italicized phrases ( e . g . , I - O invariance for input - output in - variance ) . These are always subgoals of quantity goals . An equation in Figure 6b indicates a goal to instantiate that equation and to solve it for the first quantity appearing above it in the tree . Equation goals arise either from appli - cation of the method above it , or from application of a puller ( indicated by a P ) on the arc leading to the equation . Briefly , this solution proceeds as follows : The puller ( I = V / R ) associated with Ia fails because the resistance associated with a wire is zero . Therefore the single method associated with current ( input - output invariance ) is invoked to generate the equation ZO = L + 4 . Instantiating this equation requires values for both of the new quantities , that is an AND subgoal to find I , and Iz . The work to find I , and I1 is identical , and Figure 6b shows only that for I , , with the result ( 3 amps ) given for I , . ( The dotted line indicates omitted work . ) The puller associated with the current I , generates the goal to instantiate the equa - tion II = VI / RI , with the following AND subgoal set of finding values for V , and R , . Working left to right , FERMI considers V , first . ( R , is subsequently evaluated as 3 ohms by lookup . ) The two pullers for potential drop both fail here . In the first , VI = I ) RI , Ii has already been “visited” higher on the tree and introducing it here would lead to circular algebra . The second puller ( V = - emf ) fails because the element is not a battery . FERMI then creates an OR set of subgoals to apply methods associated with potential drop . The first three ( known , iterative , and recursive path decomposition ) fail because the element here cannot be composed . The final - method , path invariance , generates two equations , reflecting that V , is equal to the potential drop ( V , ) along the path through resistor 2 and V , is also equal to the potential drop ( V * ) along the path through the battery . Both pullers fail to apply to V * because this path is neither a resistor nor a battery , but a com - posite of two wires ( resistors with zero resistance ) and a battery . Applying se - quentially the four methods associated with V * , known - path - decomposition FLEXIBLE EXPERT REASONER 125 ( kpd ) fails because the path has not been decomposed , but iterative path decomposition succeeds in breaking the path into the wires ( paths l * and 3 * ) and the battery ( path 2 * ) . Pullers yield the indicated values for each of the associated potential drops . ( The usual puller steps are omitted here from Figure 6b , as indicated by dotted lines . ) Now FERMI applies further knowledge from its methods as it works back up the successful branches of its tree , combining values according to combina - tion functions in the methods . The potential drop V * , and hence V , , is 0 + 6 + 0 , or 6 volts . The puller equation II = V , / RI combines the values 6 volts and 3 ohms to yield II = 2 amps . The value Zz = 3 amps ( found by a process exactly analogous to that used for I , ) is added to II = 2 amps by input - output invari - ance to yield the desired value 5 amps . A review of this solution suggests both FERMI’s strong points and limita - tions . In solving complex problems , FERMI integrates effectively both domain - specific and general knowledge , together with extremely general weak methods . This approach gives it the ability to solve a variety of prob - lems of similar complexity in currently three domains . And as discussed in the next section , small additions of knowledge could extend this capability considerably . FERMI’s solution , however , has major inefficiencies due to the follow - ing lacks in its general knowledge . First , it has no intelligent way of selecting what method to apply first . These methods are stored in some arbitrary order , and applied in that order , guided only by depth - first search . Second , FERMI has no ability to learn , no ability to profit from one part of a solu - tion in completing a later part . For example , in the sample problem , the solution trees for I , and I1 are identical . With more intelligence , FERMI could use the successful solution for I , to shorten its work on I1 . Both of these issues , method selection and use of analogous solution are part of our ongoing work ( Cheng & Carbonell , 1986 ) . 5 . POTENTIAL CAPABILITIES We now describe possible and planned extensions of FERMI’s knowledge and corresponding capabilities . After reviewing FERMI’s current capabili - ties , we describe first extensions based on the current two principles ( decom - posability and invariance ) . We then discuss possible new general principles , and finally extensions designed to provide greater explanatory power and teaching capabilities . 5 . 1 . Current Capabilities Although the current prototype FERMI system has only two general methods ( decomposition and invariance ) , this limited knowledge used in conjunction with small amounts of knowledge in four different domains , is sufficient to 126 LARKIN , REIF , CARBONELL , AND GUGLIOTTA enable FERMI to solve a range of reasonably complex problems . As dis - cussed in the preceding sections , the types of problems , presently solvable by FERMI , include the following : Problems about pressures in liquids . FERMI can find the pressure dif - ference between any two points in one or more liquids at rest , even when there are several distinct layers of such liquids , and even if these liquids are in a container whose walls , interrupt a direct straight line connecting the points of interest . Problems about centers of mass . FERMI can find the center of mass of any planar object which is rectangular or decomposable into rectangular parts . Problems about electric circuits . FERMI can find time - independent potential drops or currents in electric circuits consisting of any small number of wires , resistors , and batteries interconnected in variouS . ways . FERMI can also now apply invariance of energy to relate the mass and speeds of a satellite or of a falling object at two different locations . As de - scribed later , this ability required an extension of the invariance principle . 5 . 2 . Possible Extensions FERMI’s present knowledge of decomposition could be applied to many domains , if the appropriate domain - specific knowledge were added . In each case , an important quantity in the domain is decomposable , so that decom - position provides a solution to an important class of problems concerning this quantity . Table 1 lists some of these domains , indicating for each the quantity or quantities that are decomposable . TABLE 1 Domains with Important Quantities ( shown In italics ) that ore Decomposable Liquids ot rest Electric circuits Geometry Mechanics Electricity and magnetism Heat and thermodynamics Chemistry Waves Pressure drop between any two points The Potentlal drop between any two points length of a line , area of a surface , volume of a region Moss of an obfect , center of moss of an obiect , the force , exerted on an ob / ect by other interacting ob / ects Electric ffeld , magnetfc field , electric and mognetlc potenflols Internal energy of any system , entropy of any system Molecular weight , reoctton rate , several reacting chemical species Wave dlsturbance , due to several waves present simultaneously FLEXIBLE EXPERT REASONER 127 TABLE 2 Four Kinds of Invariance Path Pressure - and potential drop are invariant under changes In path . Any path may be used to calculate them . Input - Output Invariance Steady - state flow rates of charge , mass : quantities unchanging in the course of time . ( Such quantities obey a “conservation principle” and include momentum , angular momenfum . energy . ) Spatial Rotated through a 90° angle or lBO” angle . Many quon - titles can often be determined for such symmetries . In its present implementation , FERMI uses its general invariance princi - ple ( and associated method for comparing invariants ) only to a very limited extent . Path invariance for pressure - and potential - drops and input - output invariance for current flowing into and out of a junction . Table 2 shows these invariances together with two additional invariance methods , invariance under temporal and changes . These new invariance principles could be added to FERMI’s repertoire using much of the existing invariance knowledge . Were this done as described in Table 2 , important new classes of problems could be solved . 5 . 3 . Potential Capabilities Based on New General Methods Decomposition and invariance , while centrally important to problem solving in the physical sciences , are just two of a number of general methods . We discuss here three additional such methods : constraint satisfaction , seman - tic interpretation of algebra , and simple reasoning by analogy . 5 . 3 . 1 . Constraint Satisfaction . The invariance and decomposition princi - ples in FERMI specify the properties of certain quantities , properties which can be regarded as constraints on the possible values of these quantities . These constraints are currently expressed as equations relating two otherwise unconstrained Values ( e . g . , Ppnlt , r = Ppalh z ) . There are , however , other kinds of constraint relations , including importantly “fixed value” constraints , specifying that an expression must have a certain specified value , often zero . For example , in the domain of mechanics , an object remains in equilibrium ( without accelerating ) if the total force F exerted on the object by all other interacting objects satisfies the constraint that F = O . Similarly , the domain of electricity , an isolated electrically neutral object must have a total charge Q which satisfies at all times the charge - conservation principle that Q = O . The invariance principle can also be expressed as a fixed - value constraint on difference of the relevant quantity . In symbols , the invariance constraint that Qi = Ql is equivalent to the statement that the difference AQ = QI - QJ satisfies the constraint AQ = 0 . 128 LARKIN , REIF , CARBONELL , AND GUGLIOTTA To exploit the power of expressing general principles as constraints , FERMI would need an associated general method of constraint satisfaction . As discussed elsewhere ( Reif & Heller , 1982 ) , such a method involves the following two major steps : ( 1 ) Finding enough constraints , applicable to a particular problem , so that only one solution is consistent with all of these constraints . ( 2 ) Finding a solution by trying to satisfy all of these constraints . Constraint satisfaction has particular virtues in complex problems because the solution is organized around several constraints . For example , the complex solution diagramed in Figure 6b could be organized into four modules , the first three based on substituting known and desired values in each of three constraint equations ( IO = 11 + 12 , VI = VO , and V2 = VO ) , and the last consisting of solving simultaneously the resulting three equations . 5 . 3 . 2 . Semantic Interpretation of Algebra . FERMI already has not only the ability to solve equations , but also to generate them from general and domain - specific knowledge . However , it would be desirable to have the converse ability to interpret the meaning of equations obtained during a solution process . This would allow FERMI to use algebra more intelligently and efficiently , and also to explain better results obtained by its calcula - tions . FERMI would then also simulate more closely the behavior of human experts whose problem - solving abilities are often enhanced by the ability to interpret collections of algebraic symbols ( Larkin & Simon , 1981 ) . For example , consider the problem of finding the pressure drop from A to B in the slanted mine shaft shown in Figure 7 . FERMI currently constructs the path segments indicated by dotted lines , computes individually the pres - sure drops for each , and adds them , as in the equation PAB = C i Pghi , where hi are the heights of the individual segments . ( FERMI uses its own internal grid of points to determine the lengths of each segment . ) A more sensible and efficient procedure would consist of removing items equal to 4m : lm : Figure 7 . Mine - shaft problem facilitated by the interpretation of equations . FLEXIBLE EXPERT REASONER 129 zero , factoring the resulting expression , and then relating the algebraic sum , B / r , to the total height H = # meter of the mine shaft . The ability to interpret the meaning of this algebraic sum would not only simplify the solution of this problem , but would also lead FERMI to display the intelligent insight that the answer depends merely on the vertical separa - tion of the points , but does not depend on the width of the shaft or on the horizontal offset between its top and bottom . 5 . 3 . 3 . Reasoning by Analogy . FERMI’s abilities would be improved by the ability to recognize and exploit analogies , both within a given problem and between different problems . The potential utility of analogical reasoning within a given problem is illustrated by Example 3 , a circuit problem with two identical branches . FERMI carries out a calculation to find the current in the first branch and then carries out exactly the same calculation again for the second branch . The ability to recognize that the two branches are analogous would allow FERMI simply to take its solution for the first branch and map it onto the other , without the need to repeat the calculation . The potential utility of analogical reasoning between different problems is illustrated by the following example . When FERMI is currently faced by a problem asking for the pressure drop between two points which are not vertically aligned , it joins these points by a path consisting of vertical and horizontal segments . It then sums potential drops for each segment , simply adding zero for each horizontal segment , so that only vertical segments are relevant . But FERMI does not make this inference explicitly , nor is it able to use this result to solve more simply other problems involving points that are not vertically aligned . Improved design should allow FERMI to store its knowledge about a previously solved problem so that it can then map corre - sponding results and methods to other problems recognized as analogous . 5 . 4 . Applications to Understanding and Learning by Humans FERMI offers the potential of improving human - computer interaction and of providing some insights into effective forms of human knowledge orga - nization . Such applications include the following : l Effective explanatory power . FERMI’s hierarchical knowledge organiza - tion , separating general knowledge from more detailed domain - specific knowledge , should help FERMI to explain its reasoning in ways that are easily understandable by humans . In particular , FERMI can explain its reasoning by referring to a few general principles that are likely to be familiar to humans . Many of the general principles ( invariance , decom - position ) have analogs in everyday life and may be somewhat familiar from a variety of contexts . Furthermore , such general knowledge can 130 LARKIN , REIF , CARBONELL , AND GUGLlOl - fA serve as an embedding framework and advance organizer for explana - tions involving more detailed domain - specific knowledge . l Instructional applications . FERMI should be useful for the design of ef - fective computer - aided instruction or intelligent tutoring systems . In par - ticular , FERMI has the advantage that it can present its knowledge and explain its reasoning in forms comprehensible to humans . Furthermore , FERMI can induce a human learner to acquire knowledge organized in useful forms separated according to different levels of generality . l Psychological studies of human knowledge organization . FERMI can provide a computer - implemented psychological model for studying the effects of human knowledge organizations that structure knowledge hierarchically and separate knowledge of different degrees of generality . Furthermore , irrespective of any computer involvement , it is possible to carry out experiments on human subjects who have acquired similar knowledge organizations . The effectiveness of such human knowledge organizations can then be studied by investigating the performance of such subjects on various intellectual tasks . 6 . CONCLUDING REMARKS The preceding pages discuss a prototype of an expert system which separates its knowledge according to levels of generality , embedding domain - specific knowledge within more general knowledge . Such a knowledge representa - tion is economical and powerful , having the following advantages : 1 . General knowledge can be applied repeatedly in different domains , with only limited additions of more domain - specific knowledge . 2 . Knowledge can be used flexibly , with relatively easy generalization or transfer to new domains . Correspondingly , rather small amounts of knowledge can interact in rich ways to solve a large number of varied problems . 3 . Such a system can exploit its general knowledge to communicate more readily with humans in order to explain its reasoning or to teach , FERMI is a prototype expert system based on these design ideas . In par - ticular , FERMI’s knowledge is organized into schemas , hierarchically orga - nized according to levels of generality , with inheritance of information from more general schemas , higher in the hierarchy to more specific schemas at lower levels . There are two such interacting hierarchies : One of these en - compasses declarative knowledge about various entities , including general principles specifying the properties of important quantities ; the other encom - passes associated procedural knowledge , including general methods to be used in conjunction with important principles . The general knowledge , included in the present prototype implementation of FERMI , is quite limited . It includes essentially only two general principles FLEXIBLE EXPERT REASONER 131 ( decomposability and invariance ) , together with associated general methods ( decomposition and comparison of invariants ) and algebraic capabilities . Nevertheless , when combined with relatively small amounts of domain - spe - cific information , this limited general knowledge allows FERMI to solve a considerable range of fairly complex problems in several different domains ( e . g . , finding pressure drops in liquids , potential drops or currents in electric circuits , or centers of mass of complexly - shaped objects ) . The present prototype implementation of FERMI should be readily ex - tensible by adding a few more general principles and methods . When these are used jointly in conjunction with limited amounts of domain - specific knowledge , FERMI promises to become a powerful expert system capable of solving a far larger range of problems in various domains . It should then also be readily able to explain its reasoning to humans and should provide a useful basis for an effective intelligent tutoring system . n Original Submission Date : September 5 , 1986 . REFERENCES Bobrow , DC . , & Winograd , T . ( 1977 ) . An overview of KRL , a knowledge representation language . Cognitive Science , I , 3 - 46 . Brachman , R . J . ( 1979 ) . In the epistemological status of semantic networks . In N . V . Findler ( Ed . ) , Associative networks New York : Academic . Brown , A . L . , & Campione , J . C . ( 1984 ) . Three faces of transfer : Implications for early com - petence , individual differences , and instruction . In M . Lamb , A . Brown , & B . Rogoff ( Eds . ) , Advances in developmental psychology . Hillsdale , NJ : Erlbaum . Cheng , P . W . , & Carbonell , J . G . ( 1986 ) . The FERMI system : Inducing iterative macro - opera - tors from experience . In Proceedings of the th Conference of the AM . AIII . Chi , M . T . H . , Feltovich , P . J . . & Chaser , R . ( 1981 ) . Categorization and representation of physics problems by experts and novices . Cognitive Science , 2 , 121 - 152 . Clancey , W . ( 1983a ) . The Advantages of abstract control knowledge in expert system design . In Proceedings of the National Conference on Artificial Intelligence . American Asso - ciation for Artificial Intelligence . Ciancey , W . ( 1983b ) . The epistomology of rule - based expert system - A framework for expla - nation . Artificial Intelligence , 20 , 215 - 251 . Fahlman , S . E . ( 1979 ) . NETL : A system for representing and using real world knowledge . Cambridge , MA : MIT Press . Feigenbaum , E . A . , Buchanan , E . A . , L Lederberg , J . ( 1971 ) . On generality and problem solv - ing : A case study using the DENDRAL program . In D . Michie ( Ed . ) , Machine Intelli - gerice 6 . Edinburgh University Press , Edinburgh , Scotland . FOX , M . S . ( 1979 ) . On inheritance in knowledge representation . In IjCAIVIproc . IJCAI - 79 . Larkin , J . H . ( 1981 ) . Enriching formal knowledge : A model for learning to solve problems in physics . In J . R . Anderson ( Ed . ) , Cognitive skills and their acquisition . Hillsdale , NJ : Erlbaum . Larkin , J . H . ( 1983 ) . The role of problem representation in physics . In D . Gentner & A . L . Stevens ( Eds . ) , Mental models . Hillsdale , NJ : Erlbaum . Larkin , J . H . , McDermott , J . , Simon , D . P . , & Simon , H . A . ( 1980 , June ) . Expert and novice performance in solving physics problems . Science , 208 , 1335 - 1342 . 130 LARKIN , REIF , CARBONELL , AND GUGLIOTTA serve as an embedding framework and advance organizer for explana - tions involving more detailed domain - specific knowledge . l Instructional applications . FERMI should be useful for the design of ef - fective computer - aided instruction or intelligent tutoring systems . In par - ticular , FERMI has the advantage that it can present its knowledge and explain its reasoning in forms comprehensible to humans . Furthermore , FERMI can induce a human learner to acquire knowledge organized in useful forms separated according to different levels of generality . l Psychological studies of human knowledge organization . FERMI can provide a computer - implemented psychological model for studying the effects of human knowledge organizations that structure knowledge hierarchically and separate knowledge of different degrees of generality . Furthermore , irrespective of any computer involvement , it is possible to carry out experiments on human subjects who have acquired similar knowledge organizations . The effectiveness of such human knowledge organizations can then be studied by investigating the performance of such subjects on various intellectual tasks . 6 . CONCLUDING REMARKS The preceding pages discuss a prototype of an expert system which separates its knowledge according to levels of generality , embedding domain - specific knowledge within more general knowledge . Such a knowledge representa - tion is economical and powerful , having the following advantages : 1 . General knowledge can be applied repeatedly in different domains , with only limited additions of more domain - specific knowledge . 2 . Knowledge can be used flexibly , with relatively easy generalization or transfer to new domains . Correspondingly , rather small amounts of knowledge can interact in rich ways to solve a large number of varied problems . 3 . Such a system can exploit its general knowledge to communicate more readily with humans in order to explain its reasoning or to teach . FERMI is a prototype expert system based on these design ideas . In par - ticular , FERMI’s knowledge is organized into schemas , hierarchically orga - nized according to levels of generality , with inheritance of information from more general schemas , higher in the hierarchy to more specific schemas at lower levels . There are two such interacting hierarchies : One of these en - compasses declarative knowledge about various entities , including general principles specifying the properties of important quantities ; the other encom - passes associated procedural knowledge , including general methods to be used in conjunction with important principles . The general knowledge , included in the present prototype implementation of FERMI , is quite limited . It includes essentially only two general principles FLEXIBLE EXPERT REASONER 133 In panel 1 , the desired current , called current - 0 in the trace and I0 in Figures ( 6 and 8 ) , is found in three steps . In ( G2 - R2 ) “Lookup” and use of pullers fail , the latter because the wire through which I0 flows in neither an ideal battery nor an ideal resistor with non - zero resistance . In ( G3 - R3 ) FERMI applies methods , considering input - output invariance , the only method applicable to currents . FERMI applies this method first to a node involving three wires ( and hence three currents ) - in this case node 6 . ( The other node through which I0 flows is node a involving just one other cur - rent , that flowing through the battery . FERMI prefers to apply input - output invariance to nodes with larger numbers of inputs and outputs . ) Applying input - output invariance to node b produces expression - Z ( + current - l cur - rent - 2 ) , where current - l and current - 2 are respectively the currents flowing through resistors R , and R2 . In ( G4 - R4 ) FERMI evaluates the single expres - sion generated by relevant methods . This evaluation is successful , yielding the desired value of current - O . In more detail , the goal G4 to evaluate any available expression for cur - rent - 0 sets the more specific subgoal ( G5 ) to evaluate expression - l ( + cur - rent - l current - 2 ) . Goal G5 requires the AND subgoal to find values for both current - l and current - 2 . These values are found by identical processes given in the detailed traces in panel 2 and subsequent panels . We now turn to panel 2 to elaborate FERMI’s process for getting a value for current - l , that is for getting result R6 in response to goal G6 . There are two main steps in this part of the trace : ( 1 ) Applying pullers ( G7 - R7 ) yields expression - 2 = ( / potential - drop - l resistance - l ) where potential - drop - l is the potential drop from b to c across resistor 1 and resistance - l , is the resistance of that resistor . ( 2 ) Evaluating this expression ( G8 - R8 ) yields the value of current - l . In more detail , the computability requirements of the “current” puller are satisfied because I , is a current through a single component ( the resistor labeled R , in Figure 6a ) . FERMI uses this puller to produce expression - 2 . The goal G8 is the goal to evaluate all available expressions for I , , and G9 aims to evaluate expression - 2 . Evaluating expression - 2 requires the AND goal to find values for , both potential - drop - l and resistance - l . These values are found through a simple lookup for resistance - l ( G29R29 ) and through application of methods for potential - drop - l ( GlO - RlO ) . The goal GlO to find potential - drop - l is achieved in three major steps : First with ( Gil - Rll ) , FERMI tries to apply the puller potential - drop 7 ( * resistance current ) . This relation , however , is the same as that just applied to I , under goal G7 . Applying it again to find potential - drop - l in terms of I , simply generates a new copy of the old equation . FERMI therefore rejects application of this puller with the message non - circularity : not satisfied . This message means that the puller expression contains one or more quanti - ties ( here I , ) already encountered in the tree of goals . Applying this puller a second time would produce algebraic circularity . Second , with ( G12 - R12 ) , Figure 8 . Trace of FERMI’s work on a complex problem requiring several kinds of knowledge . Problem : Two resistors of resistance RI = 3 ohm and R2 = 2 ohm are con - nected in parallel shown in Figure 6a . The battery has an emf of 6 volts . What is the current IO flowing through the wire from a to b ? Panel 1 Main Steps of the Solution 21 : current - 0 Lookup : empty 02 : Apply - pullers Apply puller : ( + potential - drop resistance ) flnite - resistance not - satlsfied falls R2 : fails 63 : Apply methods I Apply method : input - output - invariance current - 0 I expresslon - l [ + current - l current - 21 R3 : current - 0 = expression - l 04 : evaluate - expressions - for - current - 0 OR { expression - l } G5 : Evaluate expression - l : ( + current - l current - 2 ) AND { current - l current - 2 } G6 : current - l This pert Of tf8Ce el8bOf8tr ? d in panel 2 . R6 : current - l = 2 . 0 67 : current - 2 Finding current - 2 proceeds exactly like finding cumnt - 1 . R7 : current - 2 = 3 . 0 R5 : expression - l = 5 . 0 R4 : evaluate - expressions - for - current - O : 5 . 0 II : current - O = 5 . 0 134 Panel 2 Finding current - l 16 : current - l Lookup : empty 07 : Apply - pullers Apply puller : ( + potential - drop resistance ) Compulablllly - requirements : satisfied current - l = expression - 2 p potential - drop - l reslslance - 1 ] R7 : current - l = ( expression - 2 ) G6 : evaluate - expresslons - for - current - l OR { exoression - 2 1 GE a : ‘ Evaluate expression - 2 : ( + potential - drop - l AND { potential - drop - l resistance - l ) G resistance - l ) 10 : bolenllal - drop - i - ookup : empty Sl 1 : Apply - pullers Apply puller : ( ’ current resistance ) or ( - emf ) ) vislled - quantities not - sallsfied fails 311 : fails 212 : Apply methods { kpd Ipd rpd path - lnvarlance ) Apply method : kpd Falls Apply method : ipd Fails Apply method : rpd Falls Apply method : path - invariance potential - drop - l = expression - 3 [ potential - drop - 31 { from b lo c through battery } = expression4 [ potential - drop - 71 { from b to c through resistor Fi2 ) i12 : polenllal - drop - 1 = expression - 3 = expression4 313 : evaluate - expressions - for - potential - drop - l Elaboreted in panel 3 il3 : evaluate - expressions - for - potential - drop - l : 6 . 0 10 : polenllal - drop - l = 6 . 0 R G29 : resistance - l I Lookup : 3 . 0 R29 : resistance - l = 3 . 0 R ! 3 : expression - 2 = 2 . 0 h6 : evaluate - expressions - for - current - l : 2 . 0 16 : current - l = 2 . 0 ( conthed ) Figure 8 Continued Panel 3 Evaluating the Potential Drop from b to c 13 : evaluate - expressions - for - potential - drop - l OR { expresslon - 3 expression - 4 ) 0’ 14 : E & Me expr & ion9 : ( potential - drop - 3 ) rND ( potemial - drop - 3 I R’ 15 : pdtential - drcp - 3 Lookup : empty G16 : Apply - pullers Apply puller : ( * current resistance ) or ( - emf ) ) path - lies - In - same - component not - satisfied falls R16 : fails G17 : Apply methods { kpd ipd rpd path - invariance 1 Apply method : kpd potential - drop - 3 = expression - 5 [ + potential - drop - 6 { from b to a ) potential - drop - 5 { from a lo d } potential - drop - 41 { from d lo c ) R17 : potential - drop - 3 = expression - 5 I G16 : evaluate - expressions - for - potential - drop - 3 OR ( expression - 5 ) G19 : Evaluate expresslond : ( + potential - drop - 6 potential - drop - 5 potential - drop + I I Elaborated in panel 4 I kl9 : expression - 5 = 6 . 0 R16 : evaluate - expressions - for - potential - drop - J : 6 . 0 115 : potentiaidrop - 3 = 6 . 0 exprerrlon - 3 a 6 . 0 13 : evaluate - expressions - for - potential - drop - l : 6 . 0 136 Panel 4 Evaluating the Expression for the Sum of Potential Drops i19 : Evaluate expression - S : ( + potential - drop - 6 potential - drop - 5 potential - drop - 4 ) AND { potential - drop - 6 potential - drop - 5 potential - drop4 ) : 20 : potential - drop - 6 Lookup : empty G21 : Apply - pullers Apply puller : ( ’ current r & stance ) or ( - emf ) ) Computablllty - requirements : satisfied potential - drop - 6 = 0 R21 : potential - drop - 6 = 0 R20 : potential - drop - 6 = 0 622 : potential - drop - 5 Lookup : empty G23 : Apply - pullers Apply puller : ( ’ current resistance ) or ( - emf ) ) Computablllty - requirements : satlsfled potential - drop - 5 = expresslon - 6 [ emf - l ] R23 : potential - drop - 5 = ( expresslon6 ) G24 : evaluate - expresslons - for - potentlal - drop - 5 OR ( expresslon - 6 } G25 : Evaluate expression - 6 : ( emf - 1 ) AND { emf - 1 ) G26 : emf - 1 I Lookup : 6 . 0 R26 : emf - 1 = 6 . 0 expression - 6 = 6 . 0 R25 : expression - 6 = 6 . 0 R24 : evaluate - expresslons - for - potentlal - drop - 5 : 6 . 0 R22 : potential - drop - 5 = 6 . 0 627 : potentlal - drop - 4 Lookup : empty G26 : Apply - pullers Apply puller : ( * current resistance ) or ( - emf ) Computablllty - requirements : satisfied R28 : potential - drop4 = 0 R27 : potentlal - drop - 4 = 0 119 : expresslon - 5 = 6 . 0 137 Figure 8 Continued Panel 3 Evaluating the Potential Drop from b to c 13 : evaluate - expressions - for - potentiel - drop - l OR I expresston - expression4 I I k19 : expression - 5 = 6 . 0 R16 : evaluate - expressions - for - potential - drop - 3 : 6 . 0 \ 15 : potentialdrop - - 6 . 0 expression - 3 = 6 . 0 13 : evaiuatwxpressions - for - potential - drop - 1 : Evaluate expression - 3 : ( potential - drop - 3 ) rND ( potential - drop - 3 } 15 : potential - drop - 3 Lookup : empty G16 : Apply - pullers Apply puller : ( * current resistance ) or ( - emf ) ) path - lies - in - same - component not - satisfied falls R16 : fails G17 : Apply methods { kpd ipd rpd path - invariance I Apply method : kpd potentlai - drop3 = expression5 [ + potential - drop - 6 { from b to a ) potential - drop - 5 { from a to d ) pcHentiai - drop - 41 { from d to c ) R17 : potential - drop - 3 = expression - 5 G16 : evaluate - expressions - for - potential - drop - 3 OR ( expression - 5 ) G19 : Evaluate expression - 5 : ( + potentlai - drop - 6 potential - drop - 5 potential - drop - 4 ) Elaborated in penel 4 6 . 0 136