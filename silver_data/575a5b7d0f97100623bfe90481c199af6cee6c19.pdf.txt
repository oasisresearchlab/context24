Constructing and sampling directed graphs with given degree sequences Kim , H . , del Genio , C . , Bassler , K . & Toroczkai , Z . Published PDF deposited in Coventry University’s Repository Original citation : Kim , H , del Genio , C , Bassler , K & Toroczkai , Z 2012 , ' Constructing and sampling directed graphs with given degree sequences ' New Journal of Physics , vol . 14 , 023012 . https : / / dx . doi . org / 10 . 1088 / 1367 - 2630 / 14 / 2 / 023012 DOI 10 . 1088 / 1367 - 2630 / 14 / 2 / 023012 ISSN 1367 - 2630 ESSN 1367 - 2630 Publisher : IOP Publishing Copyright © and Moral Rights are retained by the author ( s ) and / or other copyright owners . A copy can be downloaded for personal non - commercial research or study , without prior permission or charge . This item cannot be reproduced or quoted extensively from without first obtaining permission in writing from the copyright holder ( s ) . The content must not be changed in any way or sold commercially in any format or medium without the formal permission of the copyright holders . PAPER Constructing and sampling directed graphs with given degree sequences To cite this article : H Kim et al 2012 New J . Phys . 14 023012 View the article online for updates and enhancements . Related content Exact sampling of graphs with prescribed degree correlations Kevin E Bassler , Charo I Del Genio , Péter L Erds et al . - Fast Track Communication Hyunju Kim , Zoltán Toroczkai , Péter L Erds et al . - Analytical maximum - likelihood method to detect patterns in real networks Tiziano Squartini and Diego Garlaschelli - Recent citations New Classes of Degree Sequences with Fast Mixing Swap Markov Chain Sampling PÉTER L . ERDS et al - Network community detection using modularity density measures Tianlong Chen et al - Tiziano Squartini and Diego Garlaschelli - This content was downloaded from IP address 194 . 66 . 32 . 16 on 30 / 11 / 2018 at 09 : 36 The open – access jour nal for physics New Jou rnal of Ph ys ics Constructing and sampling directed graphs with given degree sequences H Kim 1 , 2 , C I Del Genio 3 , K E Bassler 4 , 5 and Z Toroczkai 2 , 6 1 Department of Physics , Virginia Tech , Blacksburg , VA 24061 , USA 2 Interdisciplinary Center for Network Science and Applications ( iCeNSA ) , Department of Physics , University of Notre Dame , Notre Dame , IN 46556 , USA 3 Max - Planck - Institut f¨ur Physik Komplexer Systeme , N¨othnitzer Str . 38 , D - 01187 Dresden , Germany 4 Department of Physics , University of Houston , 617 Science and Research 1 , Houston , TX 77204 - 5005 , USA 5 Texas Center for Superconductivity , University of Houston , 202 Houston Science Center , Houston , TX 77204 - 5002 , USA E - mail : toro @ nd . edu New Journal of Physics 14 ( 2012 ) 023012 ( 23pp ) Received 21 September 2011 Published 6 February 2012 Online at http : / / www . njp . org / doi : 10 . 1088 / 1367 - 2630 / 14 / 2 / 023012 Abstract . The interactions between the components of complex networks are often directed . Proper modeling of such systems frequently requires the construction of ensembles of digraphs with a given sequence of in - and out - degrees . As the number of simple labeled graphs with a given degree sequence is typically very large even for short sequences , sampling methods are needed for statistical studies . Currently , there are two main classes of methods that generate samples . One of the existing methods ﬁrst generates a restricted class of graphs and then uses a Markov chain Monte - Carlo algorithm based on edge swaps to generate other realizations . As the mixing time of this process is still unknown , the independence of the samples is not well controlled . The other class of methods is based on the conﬁguration model that may lead to unacceptably many sample rejections due to self - loops and multiple edges . Here we present an algorithm that can directly construct all possible realizations of a given bi - degree sequence by simple digraphs . Our method is rejection - free , guarantees 6 Author to whom any correspondence should be addressed . New Journal of Physics 14 ( 2012 ) 023012 1367 - 2630 / 12 / 023012 + 23 $ 33 . 00 © IOP Publishing Ltd and Deutsche Physikalische Gesellschaft 2 the independence of the constructed samples and provides their weight . The weights can then be used to compute statistical averages of network observables as if they were obtained from uniformly distributed sampling or from any other chosen distribution . Contents 1 . Introduction and deﬁnitions 2 2 . Mathematical foundations 5 2 . 1 . Algorithmic considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2 . 2 . Theorems on which the algorithm is based . . . . . . . . . . . . . . . . . . . . 7 3 . The algorithm 9 3 . 1 . Finding the allowed set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 3 . 2 . Summary for ﬁnding the allowed set . . . . . . . . . . . . . . . . . . . . . . . 12 4 . The sampling problem 12 4 . 1 . Biased sampling over classes . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 4 . 2 . Computing the weights . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 4 . 3 . A simple example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 5 . Complexity of the algorithm 17 5 . 1 . The Fulkerson – Ryser test revisited . . . . . . . . . . . . . . . . . . . . . . . . 18 6 . Discussion 19 Acknowledgments 21 References 22 1 . Introduction and deﬁnitions In network modeling problems [ 1 – 7 ] , one often needs to generate ensembles of graphs obeying a given constraint . A typical constraint is the case when the only information available is the degrees of the nodes and not the actual connectivity matrix . Note that the node degrees by themselves , that is , the degree sequence in general , does not determine a graph uniquely : there can be a very large number of graphs having the same degree sequence [ 8 ] . Full graph connectivity is uniquely determined by the degree sequence only for a special class of sequences ( see [ 9 ] for the case of undirected graphs ) . Often , the interest lies in the study of network observables , as determined by the given sequence of degrees , and unbiased by anything else . These can be graph theoretical measures or properties of processes happening on the network ( e . g . spreading processes , such as of opinion or disease ) . The problem of creating and sampling graphs with a given degree sequence , i . e . degree - based graph construction [ 10 , 11 ] , is a well - known and challenging problem that has attracted considerable interest among researchers [ 8 , 10 – 20 , 22 – 30 ] . There are two main classes of algorithms that are used today to achieve the construction of graphs with given degree sequences . One of them is typically referred to as ‘switching’ or edge - swap based [ 13 , 15 , 16 , 25 , 27 ] , while the other one is usually called ‘matching’ or stub - matching based [ 8 , 12 , 14 , 17 , 26 , 31 – 34 ] . Switching methods repeatedly swap the ends of two randomly chosen edges within a Markov chain Monte - Carlo ( MCMC ) scheme until a new , quasi - independent , sample is produced . Unfortunately , the mixing time of MCMC schemes for arbitrary sequences New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 3 is not known in the general case . The other class consists of direct construction methods , which perform pairwise matchings of the half - edges emanating from randomly chosen nodes until all edges are realized . Unfortunately , this method can easily generate multiple edges and self - loops , i . e . edges starting and ending on the same node , after which the sample must be rejected in order to avoid biases [ 35 ] . For a comparison of the two classes of methods , see [ 23 ] . Recently , a novel degree - based construction [ 10 ] and sampling method [ 11 ] was introduced for undirected graphs , which has a worst - case scaling of O ( N M ) , where M is the number of edges ( 2 M is the sum of the degrees , which are given ) . A similar method was obtained independently in [ 34 ] , but that method is less efﬁcient , with a worst - case scaling of O ( N 2 M ) . Although the algorithm in [ 11 ] is a direct construction method using stub - matchings , it is rejection free , the samples are statistically independent and the algorithm also provides a weight for every realization . An application of this algorithm to sequences sampled from power - law ( scale - free ) degree distributions is presented in [ 36 ] . In many systems the interaction between two entities is not mutual but has a direction from one to the other , such as in the cases of human relationships in social networks [ 37 ] , gene interactions in regulatory networks , trophic interactions in food webs [ 20 , 21 ] , etc . Such systems require representation by directed graphs ( digraphs ) . In fact , undirected graphs can be interpreted as digraphs in which there are two , oppositely directed edges for each connected pair of nodes . Here we present a generalization of the degree - based graph construction problem to directed graphs . Some of the necessary mathematical foundations , laid down in [ 30 ] , are here used and expanded to introduce a digraph construction and sampling algorithm . Although the approach follows closely the one introduced by us for the undirected case [ 11 ] , the generalization is not at all straightforward , and there are signiﬁcant differences that the directed nature of the links induces . Before we present our algorithm , we introduce some notations , based on [ 30 ] . Let us denote by d ( i ) i and d ( o ) i the in - and out - degrees of a node i . Given the sequence D = n(cid:16) d ( i ) 1 , d ( o ) 1 (cid:17) , (cid:16) d ( i ) 2 , d ( o ) 2 (cid:17) , . . . , (cid:16) d ( i ) N , d ( o ) N (cid:17)o of non - negative integer pairs , we want to construct a simple directed graph G ( V , E ) such that node k ∈ V has ( d ( i ) k , d ( o ) k ) for its in - and out - degrees , respectively , for all k = 1 , 2 , . . . , N . A simple directed graph is a graph that has neither self - loops nor multiple directed edges in the same direction between two nodes . There can be at most two edges between a pair of nodes , oppositely directed . We call the sequence D a bi - degree sequence ( BDS ) . When there is a simple digraph with a given BDS D for its degrees , we say that the BDS is graphical and that the digraph realizes D . Equivalently , we will also talk about ‘graphicality’ as a property . We distinguish realizations as labeled digraphs , and do not deal here with isomorphism questions . That is , if two realizations are identical up to a permutation of their indices , i . e . they are isomorphic , we will still consider them distinctly . In order to avoid isolated nodes , in the following we will assume that d ( i ) j + d ( o ) j > 0 , for all j = 1 , . . . , N . As examples , ﬁgures 1 ( a ) and ( b ) show two realizations of the BDS D 1 = { ( 1 , 0 ) , ( 1 , 2 ) , ( 2 , 2 ) , ( 2 , 1 ) , ( 0 , 1 ) } , and ﬁgure 1 ( c ) shows a realization of D 2 = { ( 3 , 0 ) , ( 3 , 0 ) , ( 1 , 2 ) , ( 1 , 2 ) , ( 1 , 2 ) , ( 1 , 2 ) , ( 1 , 2 ) , ( 1 , 2 ) } . Examples of non - graphical BDS are the sequences D 3 = { ( 2 , 2 ) , ( 2 , 1 ) , ( 1 , 3 ) , ( 1 , 1 ) } and D 4 = { ( 5 , 6 ) , ( 5 , 6 ) , ( 5 , 6 ) , ( 4 , 3 ) , ( 3 , 3 ) , ( 2 , 1 ) , ( 2 , 1 ) , ( 1 , 1 ) } . Note that even if a BDS is graphical , not all connection sequences are guaranteed to end up with a simple digraph . For example , ﬁgure 1 ( d ) shows a simple digraph realization of D 5 = { ( 0 , 1 ) , ( 2 , 0 ) , ( 1 , 2 ) , ( 2 , 2 ) } . However , if we were to place the ﬁrst four edges as in New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 4 Figure 1 . Examples of realizations of graphical BDSs . Panels ( a ) and ( b ) show two non - isomorphic realizations of the same BDS . Panel ( c ) shows a digraph that cannot be obtained via the Havel – Hakimi ( HH ) algorithm for digraphs . Panel ( d ) shows a realization of a different BDS . Panel ( e ) illustrates that not all possible connections lead to a simple digraph even if a BDS is graphical : in fact , the connections in the ﬁgure break the graphical character . Figure 2 . The construction of a digraph realizing a given BDS proceeds by connecting the out - stubs of the nodes to the in - stubs of other nodes . In this ‘bipartite’ representation the vertical gray bars represents single nodes . ﬁgure 1 ( e ) , we would break graphicality : from there on , we would not be able to complete the realization of the BDS without creating either self - loops or multiple edges . Hence , it is important to ﬁnd an algorithm that builds digraphs with a given BDS . As we will see , this is a challenging problem in itself . An algorithm that builds a digraph from a given BDS sequentially connects the out - links of a node to the in - links of others . We can think of these out - and in - links as ‘out - stubs’ and ‘in - stubs’ emanating from a node , which are paired up with the corresponding stubs of other nodes . An intuitive representation of this is shown in ﬁgure 2 . As the graph construction algorithm proceeds , the number of stubs of the nodes decreases . At any time during this process we will call the number of remaining in - stubs New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 5 and out - stubs of a node its residual in - and out - degrees , and the corresponding BDS D = n(cid:16) ¯ d ( i ) 1 , ¯ d ( o ) 1 (cid:17) , (cid:16) ¯ d ( i ) 2 , ¯ d ( o ) 2 (cid:17) . . . , (cid:16) ¯ d ( i ) N , ¯ d ( o ) N (cid:17)o the residual BDS . Finally , another concept we will need to use in what follows is the notion of normal order [ 30 ] , which is essentially the lexicographic order on the BDS . That is , we say that a BDS is in normal order if for all 1 6 j 6 N − 1 , we have either d ( i ) j > d ( i ) j + 1 or , if d ( i ) j = d ( i ) j + 1 , then d ( o ) j > d ( o ) j + 1 . Thus , the BDS D 6 = { ( 5 , 2 ) , ( 4 , 4 ) , ( 4 , 3 ) , ( 2 , 5 ) , ( 2 , 4 ) , ( 2 , 1 ) } shown in ﬁgure 2 is arranged in normal order . Once a BDS is in normal order , we will use the words ‘left’ or ‘right’ to describe the directions towards lower or higher index values in the sequence . The remainder of this paper is organized as follows . Section 2 introduces the fundamental mathematical notions and algorithmic considerations that are at the basis of our digraph construction algorithm . Section 3 presents the algorithm and its derivation details . Readers interested only in the algorithm itself 7 may skip section 3 . 1 ( which is the most technical part of the paper ) and proceed directly to the summary described in the beginning of section 3 and in section 3 . 2 . Section 4 deals in detail with the digraph sampling problem , provides the derivation of the sample weights and presents a simple example . Section 5 is dedicated to the complexity of the algorithm and section 6 concludes the paper . 2 . Mathematical foundations As seen from the examples above , not all sequences of non - negative integer pairs can be realized by simple digraphs . The sufﬁcient and necessary conditions for the realizability of a BDS are given by the ‘FR’ theorem [ 38 – 40 ] : Theorem 1 ( Fulkerson – Ryser ) . A sequence of non - negative integer pairs D = n(cid:16) d ( i ) 1 , d ( o ) 1 (cid:17) , . . . , (cid:16) d ( i ) N , d ( o ) N (cid:17)o with d ( i ) 1 > d ( i ) 2 > . . . > d ( i ) N is graphical iff d ( i ) i 6 N − 1 , d ( o ) i 6 N − 1 , 1 6 i 6 N , ( 1 ) N X i = 1 d ( i ) i = N X i = 1 d ( o ) i , ( 2 ) and for all 1 6 k 6 N − 1 : k X i = 1 d ( i ) i 6 k X i = 1 min n k − 1 , d ( o ) i o + N X i = k + 1 min n k , d ( o ) i o . ( 3 ) Given a BDS , we can easily test if it is graphical using this theorem , and thus we will also refer to it as the ‘FR test’ . Condition ( 1 ) states that both the number of in - and out - degrees for all nodes must be not larger than the number of other nodes it could connect to , or receive connections from . Condition ( 2 ) is a consequence of the requirement that every out - stub must join an in - stub somewhere else ; the sequence D 3 given in one of the above examples is not graphical because it fails this condition . Condition ( 3 ) is less intuitive . Its lhs is the total number of in - stubs that the group of k highest in - degree nodes can receive . Within this group , a node’s out - stubs can absorb no more of those in - stubs from the same group than its out - degree or k − 1 ( it cannot absorb 7 Source codes and documentation can be downloaded from http : / / www . biond . org / node / 272 . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 6 from itself ) , whichever is smaller ( giving the ﬁrst sum on the rhs of ( 3 ) ) . Outside of this group , a node cannot absorb more of those in - stubs than its out - degree or k , whichever is smaller ( the second sum on the rhs of ( 3 ) ) . Hence , the necessity of ( 3 ) . For the complete proof see [ 39 , 40 ] . Note that the example sequence D 4 above fails condition 3 for k = 3 . The FR test is the directed version of the Erd˝os – Gallai ( EG ) theorem ( test ) for undirected graphs . An important note is that BDSs are less constraining than undirected ones . The out - stub of a node is always connected to an in - stub of another , not affecting that node’s out - stubs , whereas such a distinction does not exist for the undirected case . Alternatively , if we disregard for a moment the directionality of the links and consider the degree of the node to be the sum of its in - and out - degrees , then the corresponding graph realizing the BDS can have two edges running between the same pair of nodes , whereas this is not allowed in the undirected case . 2 . 1 . Algorithmic considerations The FR theorem only tests for graphicality , but it does not provide an algorithm for constructing the digraph ( s ) realizing the given BDS . At ﬁrst sight this might not seem an issue . However , the sequence D 5 in ﬁgures 1 ( d ) and ( e ) reminds us that graphicality can easily be broken by a careless connection of stubs . Clearly , for the purposes of digraph construction , it should not matter which edges we create ﬁrst , as long as we make sure that every connection made does not break graphicality . In other words , the possibility of creating the rest of the edges , so that a simple digraph results in the end , must always be preserved . Thus , the key for the creation of an algorithm that builds simple digraphs realizing a given BDS without rejections is in a theorem that allows us to check if we would break graphicality by placing a speciﬁc connection . Indeed , such theorems exist , and they will be discussed below . However , interestingly , they require that connections be made from the same node , until all its stubs are used away into edges . That is , assuming that we already made some connections from a given node i , preserving graphicality , these theorems give necessary and sufﬁcient conditions for keeping graphicality by the next connection still involving node i . Simply put , they will not work in general if we attempted a new connection from j to k , where j , k 6 = i , while node i still has dangling stubs . The connections already made from i to some set of nodes X i represent a constraint for the new connections from i , as these novel connections must avoid the set X i . We call such a constraint associated with a node a star constraint on that node . Once all the stubs of node i are connected into edges while preserving graphicality , we obtain a graphical residual sequence D 0 on at most N − 1 nodes . Clearly , the new connections we make from this point on will not be constrained in any way by the connections we made from node i . For the purposes of realizing the sequence D 0 we can simply remove node i with its fully completed connections , create a realization by a simple graph of D 0 and then , in the end , add back node i with its connections to this graph in order to obtain a realization of D . The comments above hold both for the undirected and directed cases . One might think of using the EG test for the undirected case and the FR test for the directed case on a residual degree sequence to decide if graphicality was broken after attempting a new connection from the same node . For the undirected case , we have shown in [ 11 ] that the passing of the EG test by the residual sequence is only a necessary condition if there is already a star constraint on a node . For example , consider the graphical degree sequence d = { 6 , 5 , 5 , 3 , 3 , 2 , 1 , 1 } and assume that we made connections from node i = 3 to nodes X 3 = { 1 , 6 , 7 } . The residual sequence after these connections is d 0 = { 5 , 5 , 2 , 3 , 3 , 1 , 0 , 1 } . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 7 It is easy to check that it passes the EG test . However , we will break graphicality with every realization of d 0 , because it will form a double edge with one of the existing connections from node i = 3 to X 3 . Thus , additional considerations have to be made to ensure the graphicality of the residual sequence for the undirected case , as described in [ 11 ] . For the directed case here we use the sufﬁcient and necessary conditions for graphicality under star constraints as provided by theorem 2 below , proven in [ 30 ] . From now on , we will always talk about algorithms that ﬁrst ﬁnish all the out - stubs of a node before moving onto another node with non - zero out - degree . In the case of a graphical BDS , once all the out - degrees of all the nodes have been connected into directed edges , we are guaranteed to have completed a digraph , because the total number of in - stubs equals the total number of out - stubs , according to property ( 2 ) . 2 . 2 . Theorems on which the algorithm is based An algorithm that builds graphical realizations of degree sequences of simple undirected graphs is the HH algorithm [ 41 , 42 ] : we choose any node with non - zero residual degree ; then we connect all its stubs to nodes with the largest residual degrees avoiding self - and multiple connections . This process is repeated with other nodes until all stubs of all nodes are used . There is a corresponding version of the HH algorithm for BDSs as well , introduced ﬁrst in [ 43 ] and then rediscovered independently in [ 30 ] , the latter providing an alternative proof . The HH algorithm for BDS proceeds as follows : given a normal - ordered BDS , choose any node with non - zero residual out - degree , then connect all its out - stubs to nodes with the largest residual in - degrees , without creating multiple edges running in the same direction , nor self - loops . Reorder in normal order the residual sequence and repeat this process until all stubs of all nodes are used . While for any given BDS , the HH algorithm will construct a set of digraphs , it cannot construct all possible digraphs realizing the same sequence , as shown in [ 30 ] . For example , the HH algorithm can never result in the digraph shown in ﬁgure 1 ( c ) realizing the example sequence D 2 above . It is easy to see why : there are two kinds of nodes in this example , with bi - degrees ( 3 , 0 ) and ( 1 , 2 ) . The only nodes with non - zero out - degrees are the ( 1 , 2 ) types . Using the HH algorithm , we would have to connect both out - stubs of such a node to the nodes with the largest in - degrees , that is , to the two ( 3 , 0 ) types . However , the digraph in ﬁgure 1 ( c ) does not have a ( 1 , 2 ) node being connected to both ( 3 , 0 ) nodes , yet it realizes the sequence . The limitation of the HH algorithm comes from the fact that it prescribes to connect the out - stub of a node i to an in - stub of the node with the largest residual in - degree that does not yet receive a connection from node i . However , there can be other nodes whose in - stubs can form a connection with an out - stub of i without breaking graphicality . This shows the importance of ﬁnding a method able to build not just a realization of a BDS , but all the possible realizations of any given BDS . In the remainder , given a residual BDS D , we denote by A i ( D ) the allowed set of i , i . e . the set of all nodes to which an out - stub of i can be connected without breaking graphicality . Also , let us denote by X i ( D ) the set of nodes to which connections were already made from i , thus representing the star constraint at that stage . The graphicality test under a star constraint on node i is provided as theorem 2 below . In order to announce it , however , we need to introduce one more deﬁnition . Consider a BDS D and a given node i with out - degree d ( o ) i > 0 from this BDS . Let us also consider a subset of nodes S ⊂ V such that | S | 6 d ( o ) i , where | S | denotes the number of nodes in S , i . e . its size , and for every node j ∈ S , d ( i ) j > 0 . Next , we take D and reduce by unity the in - degrees of all its nodes in New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 8 S and then reduce by | S | the out - degree of node i . The BDS D 0 thus obtained will be called the BDS reduced by S about node i from BDS D . Equivalently , D 0 is the residual sequence obtained from D after connecting an out - stub from i to an in - stub of every node from S . Theorem 2 ( Star - constrained graphicality ) . Let D be a BDS in normal order on N nodes , and let X i , | X i | 6 N − 1 − d ( o ) i , be a set of nodes whose in - stubs are forbidden to be connected to the out - stubs of node i ( including i ) . Deﬁne L i as the set of the ﬁrst ( ‘leftmost’ ) d ( o ) i nodes in D but not from X i . Then , there exists a simple digraph which realizes D and avoids connections from i to X i , if and only if the BDS D 0 reduced by L i about node i from D is graphical . The proof of this theorem can be found in [ 30 ] . What this theorem does is to turn a star - constrained graphicality problem for BDS D into an unconstrained one on the reduced BDS D 0 . The graphicality of D 0 is then easily tested via the FR theorem . The set L i as deﬁned above will be called the leftmost set for node i . Although announced in its full generality , as X i could be any predeﬁned subset of nodes with | X i | 6 N − 1 − d ( o ) i , this theorem applies directly to the digraph construction process when X i represents the set of nodes to which connections were already made in previous steps from the same node i , hence forbidding us to make further connections from i to these very same nodes . In this case , the BDS D represents the residual sequence D at that stage of the construction process . As discussed above , in order for us to be able to construct all the simple digraphs that realize a given BDS , we need to ﬁnd the allowed set A i ( D ) for the next out - stub of i . Clearly , after every connection from the same node i , the residual sequence changes , and along with it the allowed set may change as well . In order to ﬁnd A i ( D ) for the next out - stub of node i , we could just simply attempt connections sequentially to every node with non - zero in - degree not in X i ( D ) ∪ { i } , and test for graphicality after each attempt using theorem 2 . The set of nodes for which graphicality would have been preserved would form A i ( D ) . However , this would be inefﬁcient and actually not needed . In fact , we can exploit a result which states that , if graphicality is broken by a connection , it will be broken by all other connections to the right of the previous one , in the normal order sense . This is expressed in the following : Theorem 3 . Let D be a graphical BDS in normal order and let X i be a forbidden set for node i , with i ∈ X i . Let j < k be two nodes such that j , k / ∈ X i . If the residual BDS D j obtained from D after forming an edge directed from i to j is not graphical , then the bi - degree sequence D k obtained from D by forming a directed edge from i to k is also not graphical . This theorem follows from the direct contraposition of lemma 6 in [ 30 ] . Thus , what we need to do is to ﬁnd efﬁciently the leftmost node q in the residual sequence in normal order , a connection to which would break graphicality . We will refer to this node q as the leftmost fail - node . All connections to this node and to nodes to its right are guaranteed to break ( star - constrained ) graphicality , whereas all connections to its left ( with the exception of forbidden nodes and self ) are guaranteed to preserve the graphical character . Note that both theorems 2 and 3 are based on the HH theorem for BDSs . In fact theorem 2 is a generalization of the HH theorem to include star constraints . Also note that , while for the FR theorem only the in - degrees must be ordered non - increasingly , for the HH theorem and hence for both theorems 2 and 3 , the BDS must be in normal order , as ordering by in - degrees alone is not sufﬁcient . This is easily seen from the following example of graphical BDS ( not New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 9 in normal order ) D 7 = { ( 2 , 0 ) , ( 2 , 1 ) , ( 0 , 1 ) , ( 0 , 2 ) } . Using the HH theorem , if we do not worry about normal ordering , but just order by in - degree , we could choose to connect the out - stub of node ( 0 , 1 ) to an in - stub of node ( 2 , 0 ) , then connect the out - stub of node ( 2 , 1 ) to the remaining in - stub of ( 2 , 0 ) ( connecting to the largest residual allowed residual in - degree ) , after which we have clearly broken graphicality : both out - stubs of ( 0 , 2 ) now must be connected to the two in - stubs of ( 2 , 1 ) . We are now ready to present our digraph construction algorithm , which produces random samples from the set of all possible simple digraphs realizing a given BDS . 3 . The algorithm Given a graphical BDSs D in normal order ( initially D = D ) : ( 1 ) Deﬁne as work - node the lowest - index node i with non - zero ( residual ) out - degree . ( 2 ) Let X i be the set of forbidden nodes for the work - node , which includes i , nodes with zero in - degrees and nodes to which connections were made from i previously . In the beginning , X i includes only the work - node and zero in - degree nodes . ( 3 ) Find the set of nodes A i that can be connected to the work - node without breaking graphicality . ( 4 ) Choose a node m ∈ A i uniformly at random and connect an out - stub of i to an in - stub of m . ( 5 ) After this connection add node m to X i . ( 6 ) If node i still has out - stubs , bring the residual sequence in normal order and then repeat the procedure from ( 3 ) until all out - stubs of the work node are connected away into edges . ( 7 ) If there are other nodes left with out - stubs , reorder the residual degree sequence in normal order and repeat from ( 1 ) . The most involved step of the algorithm is ﬁnding the allowed set ( step ( 3 ) ) , which is introduced in the next subsection . However , if the reader is interested only in the algorithm itself and less in its derivation , then he / she may skip directly to section 3 . 2 . 3 . 1 . Finding the allowed set Let i be the work - node chosen as in ( 1 ) and let D denote the normal ordered , residual sequence obtained after having connected some of the out - stubs of i to in - stubs of other nodes , such that graphicality is still preserved . These previous connections from node i form the set of forbidden nodes X i for the next out - stub σ of i . X i also contains the work - node i itself i ∈ X i and all other nodes with zero in - degrees . Let L i be the set of the ﬁrst ( lowest index ) d ( o ) i nodes from D , not in X i . As D is ( star constrained ) graphical , we can connect σ to any of the nodes in L i without breaking graphicality ( due to theorem 2 ) , hence L i ⊆ A i . Let m be the last element of L i in the normal ordered BDS D and let us ‘color’ ( label ) red all the non - forbidden nodes , i . e . all the nodes not in X i , to the right of node m . Please note that these color labels are associated with the nodes , deﬁned by their bi - degrees , and not with their indices of location in the sequence . This set of red nodes R i forms the set of candidates for the leftmost fail - node q . All other nodes are colored ( labeled ) black . To ﬁnd the leftmost fail - node we could New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 10 simply connect out - stub σ to an in - stub of a red node ‘ , add the new connection temporarily to the set of forbidden nodes , bring the new residual sequence into normal order , then test for graphicality using theorem 2 . This procedure could then be repeated sequentially , with ‘ going over all the red nodes from left to right , until graphicality would fail for the ﬁrst time at ‘ = q . However , the considerations in the following paragraphs allow us to deﬁne a better method . For the sake of argument let us perform the sequential testing as explained above . It would imply the following steps for a given red node ‘ : ( a ) Reduce the out - degree at the work - node i and the in - degree at ‘ by unity , that is , d ( o ) i 7→ d ( o ) i − 1 and d ( i ) ‘ 7→ d ( i ) ‘ − 1 , resulting in a new residual BDS D ‘ . ( b ) Bring D ‘ into normal order ( required by theorem 2 ) . Note that ‘ is the only node whose in - degree has changed and only the work - node had its out - degree changed ( its in - degree was not affected ) . Thus , when bringing D ‘ into normal order , the relative positioning of all the other nodes does not change . The work - node might have shifted to the right to a new position i 0 within the block of nodes with the same in - degree ( i 0 > i ) , and the red node’s new position ‘ 0 might have also moved to the right in the normal ordered sequence ( ‘ 0 > ‘ ) . ( c ) Add ‘ 0 to the forbidden set for the work - node . ( d ) Now , as required by theorem 2 , reduce by unity the in - degrees of the nodes in the leftmost adjacency set L i 0 and reduce the out - degree of the work - node i 0 to zero . This results in the new sequence D 0 ‘ 0 . ( e ) Order the BDS D 0 ‘ 0 by in - degrees , non - increasingly . ( f ) Apply the FR theorem to test for graphicality . Thus , whether the connection of the work - node i to ‘ breaks graphicality ultimately depends on whether the residual BDS D 0 ‘ 0 fails ( or passes ) the FR test . However , as we noted before , for the FR test we do not need to have the BDS D 0 ‘ 0 in normal order , we only need to have it ordered non - increasingly by the in - degrees . Additionally , observe that in step ( d ) the reduction of the in - degrees always happens on the same set of nodes , independently of the red node ‘ ; that is , the leftmost adjacency set L i 0 is the same for all ‘ . Thus , in this particular case of theorem 2’s application , ultimately we do not need to bring D ‘ into normal order ( step ( b ) ) , only non - increasingly by in - degrees , which would be done anyway in step ( e ) . That means we can just skip step ( b ) ; we do not need to move around any of the nodes at that stage . Thus , the only difference between the sequences D 0 ‘ 0 for different ‘ s is at the position of this node after the reordering in ( e ) , with respect to the rest of the sequence . These observations suggest that we should deﬁne a BDS D 0 obtained from the BDS D by reducing by unity the in - degrees of all nodes in the set L i \ { m } and by d ( o ) i − 1 the out - degree of the work - node i , leaving only one out - stub ( out - stub σ ) at i . Clearly , the BDS D 0 is graphical ( connecting out - stub σ to an in - stub of node m surely preserves graphicality , by theorem 2 ) . Let us now order D 0 non - increasingly by its in - degrees , in a speciﬁc way , described as follows . Shift only the reduced in - degree nodes in D to the right with respect to the rest of the sequence such as to restore non - increasing ordering by the in - degrees ( if needed ) . Since only the in - degrees of the nodes in the set L i \ { m } have been reduced , keep the relative ordering of all other nodes in D 0 exactly the same as in D . Thus the relative ordering of the red nodes and of the work node have been preserved as well . Let us denote the new location of the work node in D 0 by j ( j 6 i ) . Connecting now σ to an in - stub of a red node ‘ in this sequence will produce the New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 11 same set of residual bi - degrees as in step ( d ) above . To be able to apply the FR theorem , then all we need to do is to shift to the right node ‘ in the sequence ( if needed ) to make sure that it is non - increasingly ordered by in - degrees . Since only the in - degree at ‘ was modiﬁed ( reduced by unity ) , this reordering is very simple : if x denotes the location of the last node of the block of nodes with the same in - degree as node ‘ in D 0 ( x > ‘ ) , then we simply swap the node at ‘ with the node at x after the reduction of the in - degree at ‘ . Let us denote the obtained sequence by D 0 . Clearly , it is non - increasingly ordered by in - degrees , and thus we can apply the FR theorem to see if it is graphical . Note : it could happen that x = j ( e . g . there are many nodes with zero out - degree but larger in - degree than the work - node as deﬁned in ( 1 ) ) ; however , the steps below can be applied just the same . Next , we show how to identify the leftmost red fail - node q by investigating how the inequalities in ( 3 ) break down . Since D 0 is graphical , we have for all 1 6 k 6 n − 1 ( n is the last element of D 0 ) that L 0 ( k ) 6 R 0 ( k ) , where L 0 and R 0 are the lhs and rhs of inequalities ( 3 ) written for D 0 : L 0 ( k ) = k X s = 1 d 0 ( i ) s , ( 4 ) R 0 ( k ) = k X s = 1 min n k − 1 , d 0 ( o ) s o + n X s = k + 1 min n k , d 0 ( o ) s o . ( 5 ) Let us denote by L 0 ( k ) and R 0 ( k ) the lhs and rhs of the inequality ( 3 ) corresponding to D 0 . Since the rhs of ( 3 ) involves only out - degrees , and we only reduced the out - degree of the work - node from 1 to 0 , we will always have R 0 ( k ) = R 0 ( k ) − 1 , except when k = 1 and the work - node is at j = 1 , in which case R 0 ( 1 ) = R 0 ( 1 ) . However , in this case , L 0 ( 1 ) = L 0 ( 1 ) , because only the in - degree of j = 1 appears , which does not get changed . Thus , since L 0 ( 1 ) 6 R 0 ( 1 ) ( D 0 is graphical ) , graphicality cannot be broken at k = 1 when j = 1 . Let us now consider that the work - node is still at position j = 1 , but k > 1 . For 1 < k < x , the in - degrees in D 0 are the same as those in D 0 , hence L 0 ( k ) = L 0 ( k ) . For k > x , however , we have L 0 ( k ) = L 0 ( k ) − 1 . Now consider j > 1 . For 1 6 k < x , we have L 0 ( k ) = L 0 ( k ) and for k > x , L 0 ( k ) = L 0 ( k ) − 1 . The following summarizes the relationships above : ( A ) j = 1 : ( A . 1 ) k = 1 : L 0 ( 1 ) = L 0 ( 1 ) , R 0 ( 1 ) = R 0 ( 1 ) . ( A . 2 ) 1 < k < x : L 0 ( k ) = L 0 ( k ) , R 0 ( k ) = R 0 ( k ) − 1 . ( A . 3 ) x 6 k : L 0 ( k ) = L 0 ( k ) − 1 , R 0 ( k ) = R 0 ( k ) − 1 . ( B ) j > 1 : ( B . 1 ) 1 6 k < x : L 0 ( k ) = L 0 ( k ) , R 0 ( k ) = R 0 ( k ) − 1 . ( B . 2 ) x 6 k : L 0 ( k ) = L 0 ( k ) − 1 , R 0 ( k ) = R 0 ( k ) − 1 . Since L 0 ( k ) 6 R 0 ( k ) for all k , graphicality for D 0 can only be broken ( that is to have L 0 > R 0 for some k ) , if L 0 ( k ) = R 0 ( k ) namely in the cases ( A . 2 ) and ( B . 1 ) above . Observe that L 0 ( k ) and R 0 ( k ) are computed from D 0 ; hence they are independent of ‘ or x . This gives us the following simple procedure for ﬁnding the leftmost fail - node if it exists . Starting from k = 2 for j = 1 , and k = 1 for j > 1 , ﬁnd the smallest k 0 for which L 0 ( k 0 ) = R 0 ( k 0 ) . If no such k 0 exists , then there are no fail - nodes and all non - forbidden nodes are to be included in the allowed set . If New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 12 there is such a k 0 , the ﬁrst red node q 0 to the right of k 0 ( q 0 > k 0 + 1 ) is the leftmost fail - node of D 0 , which when identiﬁed in the original BDS D will give the leftmost fail - node q . All non - forbidden nodes to the left of q are to be included in the allowed set . 3 . 2 . Summary for ﬁnding the allowed set What we discussed in detail in the previous subsection corresponds to step ( 3 ) of the main algorithm described in the beginning of section 3 . Given the normal - ordered BDS D at the end of step ( 2 ) of the main algorithm : ( 3 . 1 ) Identify L i from the ﬁrst d ( o ) i nodes not in X i . ( 3 . 2 ) Identify the ‘red’ set R i as those nodes that are neither in L i nor in X i . Note that the color label is associated with the node , not its index . ( 3 . 3 ) Build D 0 as follows : d 0 ( i ) b = ( d ( i ) b − 1 if b ∈ L i \ { m } , d ( i ) b otherwise and d 0 ( o ) c = (cid:26) 1 if c = i , d ( o ) c otherwise , where m is the last node in L i . ( 3 . 4 ) Shift nodes from L i \ { m } to the right in the sequence ( and only these ) such as to restore ordering non - increasingly by in - degrees ( if needed ) , preserving the color labels of the nodes in the process . The work - node may have shifted to a new location j after this step . This is the updated sequence D 0 . ( 3 . 5 ) Starting from k = 1 if j 6 = 1 or from k = 2 if j = 1 , ﬁnd k 0 as the smallest k such that L 0 ( k ) = R 0 ( k ) , where L 0 ( k ) and R 0 ( k ) are computed from the reordered ( after step ( 3 . 4 ) ) D 0 using ( 4 ) and ( 5 ) . If there is no such k 0 , then the allowed set A i is all the nodes in D except nodes from the forbidden set X i . ( 3 . 6 ) Otherwise ﬁnd the leftmost red node q 0 in the updated BDS D 0 to the right of k 0 , that is , with q 0 > k 0 . Then the corresponding node q in D will be the leftmost fail node . Note that q 0 is the new position of the node at q in D after the reordering in ( 3 . 4 ) . ( 3 . 7 ) The allowed set A i is formed by all nodes in D not in X i , and to the left of q . 4 . The sampling problem The algorithm generates an independent sample digraph every time it runs , without restarts or rejections , and it guarantees that every possible realization of a graphical BDS by simple digraphs can be generated with a non - zero probability . However , the algorithm realizes the digraphs with non - uniform probability . Nevertheless , knowing the relative probability for every digraph’s occurrence allows us to calculate network observable averages as if they were obtained from a uniform sampling . In particular , the following expression , which is a well - known result in biased sampling [ 44 , 45 ] , provides these averages as h Q i = P M j = 1 w ( s j ) Q ( s j ) P M j = 1 w ( s j ) , ( 6 ) New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 13 where Q is an observable measured from the samples s j generated by an algorithm . The w ( s j ) sample weight is the inverse of the relative probability of the occurrence of s j and M is the number of the samples generated . In section 4 . 1 we give a detailed derivation of this formula , specialized to our graph construction problem . The weights of the samples generated by our algorithm are given by w ( s ) = Y i d ( o ) i Y j = 1 k i ( j ) , ( 7 ) where i runs over all the nodes with non - zero out - degree as they are picked by the algorithm to become work - nodes , and k i ( j ) = | A i ( j ) | is the size of the allowed sets A i ( j ) just before connecting the j th out - stub of i . Note that w > 1 since there always exists at least one digraph realizing the BDS . Section 4 . 2 gives a derivation of ( 7 ) . 4 . 1 . Biased sampling over classes Our algorithm sequentially connects all stubs from a series of work nodes and ﬁnishes with a simple , labeled digraph . This process can be uniquely described by a path of connection sequences . Having chosen a work node i 1 for the ﬁrst time , it determines the allowed set A i 1 . We next choose uniformly at random a node j 1 ( i 1 ) ∈ A i 1 and connect a stub of i 1 to a stub at j 1 ( i 1 ) . We could have chosen j 1 ( i 1 ) following any other criterion , but in that case the expression ( 7 ) of the weights would have to be modiﬁed accordingly . After this connection we recompute the new allowed set A j 1 ( i 1 ) , then connect another stub of i 1 and so on until all the stubs have been used up at i 1 . Let us denote by s such a path of connection sequences : s = n i 1 , j 1 ( i 1 ) , . . . , j ¯ d ( o ) i 1 ( i 1 ) ; i 2 , j 2 ( i 2 ) , . . . , j ¯ d ( o ) i 2 ( i 2 ) . . . o , ( 8 ) where ¯ d ( o ) i denotes the residual out - degree of node i . A path s uniquely deﬁnes the digraph G ( s ) created , as the collection of all connections in ( 8 ) forms the edge set of the created graph G ( s ) . However , several paths may lead to the same digraph . Also note that the order of the connections in ( 8 ) matters in the calculation of the weight , as the corresponding allowed sets in general depend on the history of connections up to that point . For a ﬁnite BDS the number of distinct samples ( paths ) is also ﬁnite . Let us denote this set of paths by 5 = { π 1 , . . . , π P } . Let us now assume that we built with our algorithm a sequence of samples s 1 , s 2 , . . . , s M , and that the sample number M is large enough for us to see all elements of 5 sufﬁciently many times . Given some path s we compute a quantity Q ( s ) , and we are interested in calculating the average of Q over path ensembles . In our case Q is deﬁned on the ﬁnal graph itself Q ( s ) = Q ( G ( s ) ) , but for now we will not consider that explicitly . If we were just simply computing the average of Q over the set of samples , we would obtain an average biased by the way the algorithm builds the paths from 5 : h Q i = 1 M M X i = 1 Q ( s i ) = P X k = 1 M k M Q ( π k ) , ( 9 ) New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 14 where M k is the number of times we have seen path π k appear in the sequence of samples . Clearly , ρ k = lim M →∞ M k M ( 10 ) is the probability with which path π k is generated via the algorithm . We now assume that we can compute analytically the path probabilities ρ k , from knowing how the algorithm works . Instead of ( 9 ) we want to compute the average as if it was measured over the uniform ensemble of paths , that is , h Q i up = 1 P P X k = 1 Q ( π k ) . ( 11 ) If we form h Q i bp = P Mi = 1 1 ρ ( s i ) Q ( s i ) P Mi = 1 1 ρ ( s i ) ( 12 ) = P Pk = 1 M k M ρ ( π k ) Q ( π k ) P Pk = 1 M k M ρ ( π k ) , we have lim M →∞ h Q i bp = h Q i up , due to ( 10 ) . Thus , the weighted average ( 12 ) should be used in order to obtain averages according to uniform sampling in the M (cid:29) 1 limit . Let us assume that there is an equivalence relation ‘ ∼ ’ between paths , hence inducing a partitioning of 5 into K equivalence classes : 5 = C 1 ∪ · · · ∪ C K , where C ‘ = { π k ‘ 1 , . . . , π k ‘µ‘ } . The size of class C ‘ is denoted by µ ‘ = | C ‘ | . We have P K ‘ = 1 µ ‘ = P . Alternatively , for some given path π , we will denote by C ( π ) the equivalence class of π and by µ ( π ) = | C ( π ) | its size . Let us also assume that if s , r ∈ C ‘ , i . e . s ∼ r , then Q ( s ) = Q ( r ) . For example , in our case distinct paths may lead to the same digraph . We introduce the equivalence relation ‘ ∼ ’ and say that two paths s and r are equivalent , s ∼ r , if they produce the same labeled digraph , G ( s ) = G ( r ) . Clearly , if Q depends only on the constructed graph , i . e . Q ( π ) = Q ( G ( π ) ) for all π ∈ 5 , then Q ( s ) = Q ( r ) whenever s ∼ r . Our goal is to obtain the average of Q uniformly over the equivalence classes , that is , h Q i uc = 1 K K X ‘ = 1 Q ( π k ‘ 1 ) , ( 13 ) where we chose to write the ﬁrst element of C ‘ in the argument of Q , but of course , any other element could have been chosen from the same class , as Q is constant within a class . In general , ( 12 ) will not produce h Q i uc , but a sum weighted by class sizes . Instead , let us consider h Q i bc = P Mi = 1 1 µ ( s i ) ρ ( s i ) Q ( s i ) P Mi = 1 1 µ ( s i ) ρ ( s i ) . ( 14 ) It is then easy to see that h Q i bc = P P k = 1 M k / M µ ( π k ) ρ ( π k ) Q ( π k ) P P k = 1 M k / M µ ( π k ) ρ ( π k ) M →∞ −→ h Q i uc . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 15 In order for ( 14 ) to be useful in practice , one has to be able to compute the size of the equivalence class µ ( s ) from seeing s and knowing how the algorithm works . Fortunately this is possible in our case , as shown next . 4 . 2 . Computing the weights First , let us note that when connecting the out - stubs of a work - node we are not affecting the out - stubs of any other nodes , but only in - stubs . Hence , all nodes with non - zero out - degrees will eventually be picked as work - nodes by the algorithm . Since normal ordering is ﬁrst by in - degrees , the order in which nodes will become work - nodes depends on the sequence of connections . Let us now calculate the probability of the path s in ( 8 ) . Given a residual sequence , the work - node i 1 is uniquely determined by the algorithm as described before . Since the next connection is picked uniformly at random , the probability of the link from i 1 to j 1 ( i 1 ) ∈ A i 1 ( j 1 ) is | A i 1 ( j 1 ) | − 1 . Let k i ( j ) = | A i ( j ) | denote the number of nodes in A i ( j ) . Then , it is easy to see that the probability of a path s is given by ρ ( s ) =  Y k d ( o ) ik Y j = 1 k i k ( j )   − 1 , ( 15 ) where i 1 , i 2 , . . . denote the work - nodes in the order in which they are picked by the algorithm . This expression can be computed readily in a computer as the algorithm progresses . In order for us to use ( 14 ) it seems that we would need also to obtain the size µ ( s ) of the class to which path s belongs . Clearly , two different paths s and s 0 will result in the same graph ( s ∼ s 0 ) if and only if the sequence of connections in one path is a permutation of the connections in the other path . Hence , the class size µ ( s ) is nothing but the number of permutations of the connections , which is the same for all paths ; that is , all classes have the same size µ . Since all connections are made from a node ﬁrst before moving on to another , we have µ = Q Ni = 1 d ( o ) i ! . However , we actually do not need to use this number : one can simply multiply by µ both the numerator and the denominator of ( 14 ) to obtain ( 6 ) and ( 7 ) . 4 . 3 . A simple example Here we illustrate the algorithm on a simple BDS : D ≡ D 8 = { ( 2 , 2 ) , ( 2 , 1 ) , ( 1 , 3 ) , ( 1 , 1 ) , ( 1 , 0 ) } ( in normal order ) . Using the same drawing convention as in ﬁgure 2 , we start from the sequence of in - and out - stubs shown in 3 ( a ) . To help the exposition we assign the unique identiﬁers a , b , c , d and e to the nodes . In the beginning D = D , the work - node is i = 1 ( that is , node a ) , X i = { a } , d ( o ) i = 2 , L i = { b , c } with m = 3 ( node c ) . According to step ( 3 . 3 ) in section 3 . 2 , we ﬁnd that D 0 = { ( 2 , 1 ) , ( 1 , 1 ) , ( 1 , 3 ) , ( 1 , 1 ) , ( 1 , 0 ) } , which is already in non - increasing order by in - degrees , and thus no shifting is necessary ( step ( 3 . 4 ) ) . Since i = 1 , we start from k = 2 ( step ( 3 . 5 ) ) and use ( 4 ) and ( 5 ) to compute L 0 ( k ) and R 0 ( k ) . We ﬁnd that k 0 = 5 and thus all the nodes except those in X i are part of the allowed set : A a ( 1 ) = { b , c , d , e } . Here we used the notation from section 4 . 1 ; that is , A i ( j ) denotes the allowed set before connecting the j th stub of node i . Thus k a ( 1 ) = | A a ( 1 ) | = 4 . Let us assume that step ( 4 ) results in node d being selected from A a ( 1 ) and we connect a stub of node a to a stub of node d , see ﬁgure 3 ( b ) . Update X i to X i = { a , d } . The new residual BDS is { ( 2 , 1 ) , ( 2 , 1 ) , ( 1 , 3 ) , ( 0 , 1 ) , ( 1 , 0 ) } . Since node a has a remaining out - stub , the work - node is still node a . We bring this new residual New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 16 Figure 3 . Illustration of the steps of the algorithm on the BDS D 8 ( section 4 . 3 ) . The same drawing convention is used as in ﬁgure 2 . The nodes are also assigned the unique identiﬁers a – e . The ( green ) rectangles denote the work - node , the ‘ X ’ symbols denote forbidden nodes , nodes from the set L i are denoted by blue half - circles ( m symbolizing its last element ) and nodes from the ‘red’ set R i are denoted by red circles . sequence into normal order , obtaining D = { ( 2 , 1 ) , ( 2 , 1 ) , ( 1 , 3 ) , ( 1 , 0 ) , ( 0 , 1 ) } , see ﬁgure 3 ( c ) . In this ordering , the work - node is i = 1 ( node a ) , X i = { a , d } , d ( o ) i = 1 , L i = { b } , m = 2 . Thus L i \ { m } = ∅ . Step ( 3 . 3 ) then implies that D 0 = D and it is already ordered non - increasingly by in - degrees . Since i = 1 we perform step ( 3 . 5 ) starting from k = 2 and ﬁnd that k 0 = 3 . According to step ( 3 . 6 ) , red node q 0 = 4 ( node e ) is the fail node . Indeed , this checks out : if we were to connect the remaining out - stub of node a to the in - stub of node e , we would break graphicality . This is because node c ( of index 3 in ﬁgure 3 ( c ) ) has three out - stubs that need to be connected to the in - stubs of three different nodes , other than self , but at this stage that would be impossible , as there are only two other nodes left with in - stubs , namely nodes a and b . Thus , the allowed set for the remaining ( second ) stub of node a is A a ( 2 ) = { b , c } and k a ( 2 ) = | A a ( 2 ) | = 2 . Let us now assume that by chance we connected this stub to node b . We obtain the residual BDS D = { ( 2 , 0 ) , ( 1 , 3 ) , ( 1 , 1 ) , ( 1 , 0 ) , ( 0 , 1 ) } , which we have already arranged in normal order , see ﬁgure 3 ( d ) . Now , the lowest index node with non - zero out - degree , i . e . the new work - node , is i = 2 ( node c ) , X i = { c , d } , d ( o ) i = 3 , L i = { a , b , e } , m = 4 ( node e ) . Clearly , there are no nodes left for the red set ; that is , R i = ∅ . This implies that the allowed set for the ﬁrst stub of c is formed by all the nodes in L i ; that is , A c ( 1 ) = { a , b , e } and k c ( 1 ) = 3 . From here on , the red set will stay empty . This process is then easily repeated until we form a graphical realization . For example , by making connections c to a and then obtaining A c ( 2 ) = { b , e } , k c ( 2 ) = 2 and ( for example ) connecting node c to e . Following this , A c ( 3 ) = { b } , k c ( 3 ) = 1 ; that is , there is only one connection that can be made from c , namely to b . The next work - node becomes node b ( only one out - stub ) with New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 17 r M r theo [ r M r t h e o ] 2 1 / 2 Figure 4 . Biased sampling on the example BDS D 8 . The measure monitored is Newman’s assortativity coefﬁcient r [ 46 ] . In ( b ) the ensemble average was taken over 50 runs . A b ( 1 ) = { c , a } and k b ( 1 ) = 2 . Assume that we make the choice of connecting b to a . The only work - node left is node d , which must be connected to node c ; that is , A d ( 1 ) = { c } and k d ( 1 ) = 1 . Thus , we have ﬁnished a graphical realization along the path of connections s 1 = { ( a , d ) , ( a , b ) ; ( c , a ) , ( c , e ) , ( c , b ) ; ( b , a ) ; ( e , c ) } . The weight produced along this path based on ( 7 ) is w ( s 1 ) = k a ( 1 ) k a ( 2 ) k c ( 1 ) k c ( 2 ) k c ( 3 ) k b ( 1 ) k d ( 1 ) = 4 × 2 × 3 × 2 × 1 × 2 × 1 = 96 . There are 11 distinct labeled digraphs realizing D 8 and there are 2 ! 1 ! 3 ! 1 ! 0 ! = 12 paths in a class , leading to the same graph . Let us now consider the Pearson coefﬁcient r of degree – degree correlations , or the assortativity coefﬁcient deﬁned for directed graphs [ 46 ] as our network observable Q = r . For each one of the 11 graphical realizations of D 8 , r can be calculated exactly , as can the uniform average over this ensemble , obtaining h r i theo = − 0 . 040 506 . We will refer to h r i theo as the ‘theoretical value’ . We then let our algorithm run on this sequence to produce M samples and use ( 6 ) and ( 7 ) to obtain the corresponding coefﬁcient h r i M . Figure 4 ( a ) shows a few runs with different seeds and their convergence to the theoretical value . Figure 4 ( b ) shows the standard deviation ( [ h r i M − h r i theo ] 2 ) 1 / 2 where the overline denotes an ensemble average over runs . 5 . Complexity of the algorithm To determine the theoretical upper bound for the complexity of the algorithm , i . e . the worst - case complexity , note that there are only three steps in the algorithm that require more than O ( 1 ) computational operations , or steps , to complete . Firstly , after each connection is placed , one must bring the residual sequence into normal order , steps ( 6 ) or ( 7 ) . To accomplish this , both the work - node i and the target node m will have to move to the right , but the relative positions of all other nodes will remain unchanged . In other words , if we were to remove nodes i and m , the rest of the BDS would already be sorted . Thus , in order to complete these steps , one only has to ﬁnd the new positions of nodes i and m and insert them into the already sorted BDS . Therefore , the complexity of either one of steps ( 6 ) and ( 7 ) is simply O ( 2 log N + N ) ≈ O ( N ) , where N is the number of the nodes in the sequence being ordered . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 18 Secondly , the allowed set A must be built before placing each connection ( step 3 ) . Following the summary of this step , given in section 3 . 2 , note that steps ( 3 . 1 ) – ( 3 . 4 ) can all be ﬁnished during a single scan of the residual BDS . This is clearly so for the creation of the leftmost set L i and for setting the ‘red’ color labels ( or ﬂags ) ( steps ( 3 . 1 ) and ( 3 . 4 ) ) . Concerning the ordering of the BDS D 0 , it is possible to create it already sorted by simply scanning the BDS D while keeping track of the in - degree d ? of the nodes currently being copied and the index a in D 0 of the ﬁrst node with that in - degree . Then , because D is in normal order , the only possibility for a node in D 0 to break the order is when its in - degree equals d ? + 1 . In this case , it can be simply swapped with the node at a , because , as argued in section 3 . 1 , the mechanism to build the allowed set is entirely based on the FR theorem , which does not require the BDS to be in normal order , but to be simply ordered non - increasingly by its in - degrees . Thus , steps ( 3 . 1 ) – ( 3 . 4 ) can be completed in O ( N ) steps . Thirdly , the computation of the sums L 0 , R 0 and their comparison must be conducted , which is the same step as ( 3 ) in an FR test . To determine the complexity of an FR test note that computing the repeated sums for each one of the inequalities ( 3 ) is quite inefﬁcient . Instead , below we derive recurrence relations that allow us to complete the FR test in a linear , O ( N ) number of steps . The steps of the main algorithm are performed sequentially and thus can all be completed in a total of O ( N ) steps . They must , however , be repeated for each edge in the digraph . Thus , the maximum complexity of the algorithm is O ( N M ) where M = P i d ( o ) i is the number of edges . Since O ( M ) 6 O (cid:0) N 2 (cid:1) the maximum complexity of the algorithm is O ( N 3 ) . It is important to note , however , that for a given BDS the complexity of the algorithm can be substantially smaller , similar to the case for our undirected graph sampling algorithm [ 11 ] . 5 . 1 . The Fulkerson – Ryser test revisited The most complex part of the FR test is to compute the lhs and the rhs of inequalities ( 3 ) , which we rewrite here for the sake of readability : L ( k ) = k X s = 1 d ( i ) s , R ( k ) = k X s = 1 min (cid:8) k − 1 , d ( o ) s (cid:9) + N X s = k + 1 min (cid:8) k , d ( o ) s (cid:9) . Our goal is to ﬁnd recursion relations for L ( k ) and R ( k ) . For the lhs the relation is simply L ( k + 1 ) = L ( k ) + d ( i ) k , with L ( 1 ) = d ( i ) 1 . For the rhs , ﬁrst note that one can write it as R ( k ) = − k + N X i = 1 min n k , g ( o ) i ( k ) o , ( 16 ) where g ( o ) i ( k ) is the family of integer sequences deﬁned as g ( o ) i ( k ) = (cid:26) d ( o ) i + 1 , ∀ i 6 k , d ( o ) i , ∀ i > k . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 19 Now , let us introduce G k ( p ) = P Ni = 1 δ p , g ( o ) i ( k ) , i . e . the number of indices i for which g ( o ) i ( k ) = p . Then , from ( 16 ) it follows that R ( k ) = − k + k X p = 1 pG k ( p ) + k N X p = k + 1 G k ( p ) , ( 17 ) hence R ( 1 ) = N − 1 − G 1 ( 0 ) , ( 18 ) where we used the fact that P Np = 0 G k ( p ) = N . Furthermore , let us introduce the following notations : 1 G k ( p ) ≡ G k ( p ) − G k − 1 ( p ) , ˜ G k ( q ) ≡ q X i = 0 G k ( i ) . Then , after some simple manipulations , from ( 17 ) it follows that R ( k ) − R ( k − 1 ) = N − 1 − ˜ G k − 1 ( k − 1 ) + k − 1 X p = 1 p 1 G k ( p ) + k N X p = k 1 G k ( p ) . ( 19 ) Finally , note that 1 G k ( p ) = δ p , d ( o ) k + 1 − δ p , d ( o ) k . Substituting it into ( 19 ) , we obtain R ( k ) = (cid:26) R ( k − 1 ) + N − ˜ G k − 1 ( k − 1 ) , ∀ d ( o ) k < k , R ( k − 1 ) + N − ˜ G k − 1 ( k − 1 ) − 1 , ∀ d ( o ) k > k . ( 20 ) Thus , we have turned the problem of ﬁnding a recursion relation for R ( k ) into the problem of ﬁnding ˜ G k ( k ) . To solve this , ﬁrst note that ˜ G k ( k ) = ˜ G k − 1 ( k − 1 ) + G k − 1 ( k ) − δ k , d ( o ) k , with ˜ G 1 ( 1 ) = G 1 ( 0 ) + G 1 ( 1 ) . The above equation constitutes a recursion relation for ˜ G k ( q ) . Such a relation can be rewritten as ˜ G k ( k ) = ˜ G k − 1 ( k − 1 ) + G 1 ( k ) + S ( k ) , where S ( k ) = k − 1 X t = 2 δ k , d ( o ) t + 1 − k X t = 2 δ k , d ( o ) t . Observe that S ( k ) and G 1 ( k ) can be easily computed while scanning the BDS , and then , calculating L ( k ) and R ( k ) for each k requires a single operation . Thus , the entire FR test can be completed in O ( N ) steps . 6 . Discussion In summary , we have developed a graph construction and sampling algorithm to construct simple directed graphs realizing a given sequence of in - and out - degrees . Such constructions are needed in practical modeling situations , ranging from epidemics and sociology through New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 20 0 50 100 150 200 250 300 log w 0 0 . 005 0 . 01 0 . 015 0 . 02 0 . 025 0 . 03 p Figure 5 . Probability distribution p of the logarithm of weights for an ensemble of BDSs on N = 100 nodes . The in - degrees were drawn from a normalized power - law distribution ∼ d − γ in with γ = 3 and the out - degrees were drawn from a Poisson distribution e − λ λ d out / d out ! , with the same average as the average in - degree , λ = h d in i . The black circles are the simulation data and the red continuous line is a Gaussian ﬁt . food webs to transcriptional regulatory networks , where we are interested in learning about the statistical properties of the network observables as determined only by the BDS and nothing else . Unlike existing algorithms such as the conﬁguration model , which is affected by uncontrolled biases and unacceptably long running times except for a very restricted class of sequences , our algorithm is rejection - free . Also , it guarantees the independence of the produced samples , unlike MCMC methods , which have unknown mixing times . While its mathematical underpinnings are non - trivial , the algorithm itself is straightforward to implement . In principle , our approach can be extended to include more complex constraints , such as a given sequence of motif frequencies , but we have only concentrated on degree sequences since they are , arguably , the most fundamental of constraints . The algorithm can also be used to sample from given in - and out - degree distributions , not just sequences : given such distributions , one ﬁrst samples a graphical BDS from these , then one applies our algorithm to generate digraphs . In this case , however , the sample weights ( 7 ) must be modiﬁed to reﬂect the probability of the occurrence of the given graphical BDS when drawn from the distributions . Just as in the case of undirected graphs , we can expect the distributions of the weights for large graphs to be log - normal , as shown in [ 11 ] . As an example , ﬁgure 5 shows the distribution for BDSs in which the in - degrees follow a power law with exponent γ = 3 and the out - degrees a Poisson distribution whose mean matches the average in - degree . Indeed , the distribution of the weight logarithms is well approximated by a Gaussian . Similarly , in the undirected case , we ﬁnd , for all the examples we studied numerically , that the standard deviation σ of the distributions of weight logarithms grows more slowly than the mean m with the number of nodes N ; see ﬁgure 6 showing the scaling of m and σ for BDSs in which both in - degrees and out - degrees follow a power - law distribution with exponent γ = 3 . Thus , we may expect that typically , in the New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 21 m , 10 0 10 1 10 2 10 3 10 4 10 5 N 10 1 10 2 10 3 10 4 Figure 6 . Mean m ( black circles ) and standard deviation σ ( red squares ) of the distributions of the logarithm of the weights versus the number of nodes N of samples . In - degrees and out - degrees are both drawn from a power - law distribution P ( d ) ∼ d − γ , with γ = 3 . The solid black line and the dashed red line are data ﬁt results , showing that m and σ follow power - law scaling laws m ∼ N α and σ ∼ N β . The values of the exponents , given by the slopes of the lines , are α = 1 . 23 ± 0 . 02 and β = 0 . 81 ± 0 . 02 . N → ∞ limit , the rescaled weight distribution becomes a delta function , making the sampling asymptotically uniform . Bounds on the complexity of the algorithm could easily be obtained by inspecting the algorithm , showing a maximum complexity of the order of O ( N M ) , where M is the total number of edges , M = P Ni = 1 ¯ d ( o ) i . In developing our results , we also provided an efﬁcient way of implementing the FR test , whose scope of application goes beyond our present algorithm , as it can be used in any context to determine whether a BDS is graphical . Acknowledgments HK was supported in part by the US National Science Foundation ( NSF ) through grant DMR - 1005417 and KEB was supported by the NSF grant DMR - 0908286 . ZT and HK were supported in part by the NSF BCS - 0826958 and HDTRA 201473 - 35045 and by the Army Research Laboratory under Cooperative Agreement Number W911NF - 09 - 2 - 0053 . The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the ofﬁcial policies , either expressed or implied , of the Army Research Laboratory or the US Government . The US Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation here on . New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 22 References [ 1 ] Newman M E J 2010 Networks : an Introduction ( Oxford : Oxford University Press ) [ 2 ] Easley D and Kleinberg J 2010 Networks , Crowds , and Markets : Reasoning about a Highly Connected World ( Cambridge : Cambridge University Press ) [ 3 ] Barrat A , Barth ´ elemy M and Vespignani A 2008 Dynamical Processes on Complex Networks ( Cambridge : Cambridge University Press ) [ 4 ] Newman M E J , Barab ´ asi A L and Watts D J 2006 The Structure and Dynamics of Networks ( Princeton Studies in Complexity ) ( Princeton , NJ : Princeton University Press ) [ 5 ] Boccaletti S , Latora V , Moreno Y , Chavez M and Hwang D - U 2006 Phys . Rep . 424 175 [ 6 ] Ben - Naim E , Frauenfelder F and Toroczkai Z 2004 Complex Networks ( Lecture Notes in Physics ) ( Berlin : Springer ) [ 7 ] Dorogovtsev S N and Mendes J F F 2003 Evolution of Networks : From Biological Nets to the Internet and WWW ( Oxford : Oxford University Press ) [ 8 ] Bender E A and Canﬁeld E R 1978 J . Comb . Theory A 24 296 [ 9 ] Koren M 1976 J . Comb . Theory B 21 235 [ 10 ] Kim H , Toroczkai Z , Erd ˝ os P L , Mikl ´ os I and Sz ´ ekely L A 2009 J . Phys . A : Math . Theor . 42 392001 [ 11 ] Del Genio C I , Kim H , Toroczkai Z and Bassler K E 2010 PLoS ONE 5 e10012 [ 12 ] Bollob´as B 1980 Eur . J . Comb . 1 311 [ 13 ] Taylor R 1982 SIAM J . Algebr . Disc . Methods 3 114 [ 14 ] Molloy M and Reed B 1995 Random Struct . Algebr . 6 161 [ 15 ] Rao A R , Jana R and Bandyopadhya S 1996 Indian J . Stat . 58 225 [ 16 ] Kannan R , Tetali P and Vempala S 1999 Random Struct . Algebr . 14 293 [ 17 ] Newman M E J , Strogatz S H and Watts D J 2001 Phys . Rev . E 64 026118 [ 18 ] Chung F and Lu L 2002 Ann . Comb . 6 125 [ 19 ] Maslov S and Sneppen K 2002 Science 296 910 [ 20 ] Milo R , Shen - Orr S , Itzkovitz S , Kashtan N and Chklovskii D 2002 Science 298 824 [ 21 ] Morelli L G 2003 Phys . Rev . E 67 066107 [ 22 ] Itzkovitz S , Milo R , Kashtan N , Ziv G and Alon U 2003 Phys . Rev . E 68 026127 [ 23 ] Milo R , Kashtan N , Itzkovitz S , Newman M E J and Alon U 2003 arXiv : cond - mat / 0312028v2 [ 24 ] Park J and Newman M E J 2003 Phys . Rev . E 68 026112 [ 25 ] Viger F and Latapy M 2005 Lect . Notes Comput . Sci . 3595 440 – 9 [ 26 ] Britton T , Deijfen M and Martin - L¨of A 2006 J . Stat . Phys . 124 1377 – 97 [ 27 ] Cooper C , Dyer M and Greenhill C 2007 Comb . Probab . Comput . 16 557 – 93 [ 28 ] Bianconi G , Coolen A C C and Perez Vicente C J 2008 Phys . Rev . E 78 016114 [ 29 ] Bianconi G 2009 Phys . Rev . E 79 036114 [ 30 ] Erd ˝ os P L , Mikl ´ os I and Toroczkai Z 2010 Electron . J . Comb . 17 R66 [ 31 ] Bogu˜n´a M , Pastor - Satorras R and Vespignani A 2004 Eur . Phys . J . B 38 205 [ 32 ] Catanzaro M , Bogu˜n´a M and Pastor - Satorras R 2005 Phys . Rev . E 71 027103 [ 33 ] ´Angeles Serrano M and Bogu˜n´a M 2005 Proc . CNET2004 Am . Inst . Phys . Conf . 776 101 – 7 [ 34 ] Blitzstein J and Diaconis P 2011 Internet Math . 6 489 [ 35 ] Hartmann A K 1999 Practical Guide to Computer Simulations ( Singapore : World Scientiﬁc ) [ 36 ] Del Genio C I , Gross T and Bassler K E 2011 Phys . Rev . Lett . 107 178701 [ 37 ] Wasserman S and Faust K 1994 Social Network Analysis : Methods and Applications ( Cambridge : Cambridge University Press ) [ 38 ] Chartrand G and Lesniak L 1986 Graphs and Digraphs 2nd edn ( Monterey , CA : Wadsworth ) [ 39 ] Fulkerson D R 1960 Pac . J . Math . 10 831 [ 40 ] Ryser H 1963 Combinatorial Mathematics ( Carus Mathematical Monographs vol 14 ) ( Rahway , NJ : Mathematical Association of America ) New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / ) 23 [ 41 ] Havel V 1955 ˇCasopis Pˇest . Mat . 80 477 [ 42 ] Hakimi S L 1962 J . SIAM Appl . Math . 10 496 [ 43 ] Kleitman D J and Wang D L 1973 Discrete Math . 6 79 [ 44 ] Cochran W G 1977 Sampling Techniques 3rd edn ( New York : Wiley ) [ 45 ] Newman M E J and Barkema G T 1999 Monte - Carlo Methods in Statistical Physics ( Oxford : Oxford University Press ) [ 46 ] Newman M E J 2003 Phys . Rev . E 67 026126 New Journal of Physics 14 ( 2012 ) 023012 ( http : / / www . njp . org / )