Lessons Learned in the Design and Delivery of an Introductory Programming MOOC J . Michael Fitzpatrick Vanderbilt University Nashville , TN , USA Ákos Lédeczi Vanderbilt University Nashville , TN , USA akos . ledeczi @ vanderbilt . edu Gayathri Narasimham Vanderbilt University Nashville , TN , USA Lee Lafferty Brisbane , QLD , Australia lee . h . lafferty @ gmail . com Réal Labrie Montréal , Qc , Canada realngo @ gmail . com Paul T . Mielke Palo Alto , CA , USA paul . t . mielke @ gmail . com ABSTRACT This paper describes the design and delivery of a highly successful MOOC that uses MATLAB to teach introduc - tory computer programming to a wide audience . The deci - sions behind the curriculum and assessment strategy are de - tailed , and the results are evaluated based on three sessions of the course that saw 80 , 000 active students , two million lecture views and 100 , 000 auto - graded programming assign - ment sets during the three sessions delivered in 2015 . CCS Concepts • Education → E - learning ; Distance learning ; • Soft - ware notations and tools → General programming lan - guages ; Keywords computer science education , MOOC , computer program - ming , MATLAB 1 . INTRODUCTION Since 2000 , Vanderbilt University has required all non - computer science engineering majors to take CS1103 Intro - ductory Programming for Engineers and Scientists in their freshmen year . The novel aspect of the course is the pro - gramming language it uses : MATLAB [ 7 ] . While the rea - soning behind this choice is detailed in the next section , it can be summarized by two points : 1 ) MATLAB is a full - featured , easy - to - use programming language and 2 ) it has become a standard tool in all engineering disciplines and many other ﬁelds as well . With the steady rise in popular - ity of Computer Science ( CS ) in general , the course has seen enrollment numbers rise rapidly as more and more students outside of the Engineering School see its value . It is impor - tant to note that the primary goal of CS1103 is to teach Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full cita - tion on the ﬁrst page . Copyrights for components of this work owned by others than ACM must be honored . Abstracting with credit is permitted . To copy otherwise , or re - publish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . Request permissions from permissions @ acm . org . SIGCSE ’17 , March 8 – 11 , 2017 , Seattle , WA , USA . c (cid:13) 2017 ACM . ISBN 978 - 1 - 4503 - 4698 - 6 / 17 / 03 . . . $ 15 . 00 DOI : http : / / dx . doi . org / 10 . 1145 / 3017680 . 3017730 computer programming to novices . It just happens to use MATLAB to achieve this goal . However , students also end up learning MATLAB itself as an additional beneﬁt . In 2014 , the instructors decided to create a massive open online course ( MOOC ) based on CS1103 . The resulting In - troduction to Programming with MATLAB online course [ 2 ] , or simply MATLAB MOOC , as people informally re - fer to it , was delivered three times in 2015 and quickly be - came one of the highest - rated free online courses available [ 1 ] . Based on extensive feedback from hundreds of students , we believe that the following major factors are responsible for the success of the course : 1 ) a curriculum based on ex - perience with a traditional course , 2 ) polished lectures , 3 ) programming assignments with automatic grading , and 4 ) active participation in the discussion forums by both in - structors and mentors . The remainder of the paper dis - cusses these factors in detail and presents an evaluation of the MOOC based on data on thousands of students who took the course in 2015 . 2 . WHY MATLAB ? The ﬁrst question one might ask about this course is : Why MATLAB ? MATLAB is well established as a standard pro - gramming language in engineering , science , economics , ﬁ - nance , and other ﬁelds and yet is hardly known in computer science . However , the intended target of this MOOC is not current or future computer science majors . It is meant to be an introduction to computer programming for a wider au - dience . Therefore , the language selection was driven by two questions : 1 ) What is a good language to teach program - ming to novices ? 2 ) Knowledge of what language would beneﬁt people in a large variety of professions ? We argue that MATLAB is a good choice because it is a full - featured procedural programming language that hides memory management from the user . Memory management is one of the more diﬃcult aspects of programming to mas - ter [ 8 ] . MATLAB is also dynamically typed in that it does require type declarations and performs dynamic type con - version at run time . Furthermore , a unique aspect of MAT - LAB is the way in which it supports polymorphism . Most of its built - in functions accept varying numbers and types of input arguments and provide their results in multiple ways depending on how the function is called . This approach makes the language ﬂexible , and it usually requires much less programming by users to get the results they need than 219 that required by a more traditional language . On the other hand , some of these very beneﬁts would be considered sig - niﬁcant drawbacks if the goal were to use MATLAB to write large , complex software . But MATLAB is typically used to write relatively small , primarily numerical programs to solve very domain - speciﬁc problems . It is not a general - purpose programming language in that one would not also use it to write operating systems , compilers , or mobile apps , for in - stance . The answer to the ﬁrst question then is that MATLAB is a good language as an introduction even if it is not neces - sarily the best . However , the answer to the second question is clear . The MATLAB language has a built - in numerical model using mathematical operators for vectors , matrices , and linear algebra . One can express complex computations in a natural way with a single MATLAB statement that would take many lines of code with nested loops in C or Java . Moreover , MATLAB comes with a large library of basic numerical functions as well as thousands of advanced functions grouped in “Toolboxes” for domains such as Digi - tal Signal Processing , Statistics , Bioinformatics , Communi - cations , Data Acquisition , etc . The Integrated Development Environment ( IDE ) includes a debugger and sophisticated support for data plotting . For these reasons , MATLAB has become an industry standard in many scientiﬁc and engi - neering domains . Hence , teaching MATLAB gives the stu - dents a directly marketable skill as evidenced by the number of open job opportunities with MATLAB as a requirement . There are other good programming languages for numeri - cal applications , such as Maple , R , Python or Mathematica . Any of these languages could be a contender , and both R and Python have the advantage of being free . Python with its NumPy and SciPy packages is especially appealing , but in the end , we chose MATLAB because it has been heav - ily used consistently for ten years at Vanderbilt’s engineer - ing and science departments , and it is also widely used in academia outside our institution . Finally , we have developed and ﬁne - tuned our MATLAB - based curriculum during the past 15 years in the classroom with several thousand stu - dents . It seemed natural to transfer the result to a MOOC . 3 . CURRICULUM DEVELOPMENT CS1103 Introduction to Computer Programming has been a required introductory computer programming course for all engineering majors other than computer science for 15 years . It has seen over 2500 students during that time . The curriculum has been continually revised based on our ﬁrst - hand experience while teaching it and on student reviews . We also solicited and received feedback from faculty from various departments who teach higher - level courses in which these students use MATLAB extensively . As a result , we were able to identify gaps that showed up when the stu - dents tried to apply in practice what they had learned in our classroom . By 2013 the curriculum had matured to a point at which we decided to write a textbook that closely matches the course material [ 3 ] . In the design of the MOOC , the ﬁrst decision to make was the length . Experience shows , and common sense suggests , that shorter MOOCs have higher completion rates . How - ever , our primary success criterion was never the comple - tion rate . We wanted to create a course that provides useful knowledge and practical skills to students who are willing to put in the required eﬀort to ﬁnish it . While we were advised that six weeks is an optimal length for a MOOC , we focused on designing the curriculum ﬁrst and then determining how long it would take to deliver it eﬀectively only afterwards . CS1103 is a one - semester course . But delivering the ma - terial in a real classroom has a lot of overhead . Instructors need to repeat the most important concepts multiple times , they need to answer questions , conduct in - class tests , and they face many logistical issues inherent to teaching a large class . By contrast , the video format can be very compact , primarily because viewers can rewind and repeat segments as many times as they wish . Nevertheless , trying to ﬁt the entire curriculum of CS1103 into a MOOC would have still resulted in an overly long course . Therefore , we distilled the most important concepts and arrived at eight weekly modules outlined below : • Lesson 1 : Introduction to MATLAB . The ﬁrst module focuses on the MATLAB user interface . Top - ics include how to use MATLAB as a sophisticated calculator , the help system , and basic plotting . The concepts of variables , syntax , and semantics are intro - duced . • Lesson 2 : Matrices and Operators . The basic unit with which MATLAB works is the matrix . This lesson teaches how to deﬁne matrices , extract parts of them , and combine them to form new matrices . It also covers how to use operators to add , subtract , multiply , and divide matrices . Operator precedence and associa - tivity are included . • Lesson 3 : Functions . This lesson teaches how to deﬁne a function and how the environment inside a function is separated from the outside via a well de - ﬁned interface through which it communicates with that outside world . Local variables and the concept of scope are introduced . • Lesson 4 : Programmer’s Toolbox . This lesson in - troduces a number of useful built - in functions as well as the concept of polymorphism and how MATLAB exploits it to change a function’s behavior on the ba - sis of the number and type of its inputs and outputs . In addition , the random number generator , keyboard input , and printing in the Command Window are cov - ered . An introduction to the debugger is also included . • Lesson 5 : Selection . Selection is introduced cov - ering the if - statement and its various versions , switch - statements , relational operators , and logical operators . This lesson also teaches how to write polymorphic func - tions and how to make functions resistant to error . • Lesson 6 : Loops . In this lesson , the for - loop and the while - loop are introduced . The break - statement and nested loops are also covered . Two of MATLAB’s most powerful features , logical indexing and implicit loops , are presented as well . • Lesson 7 : Data Types . This lesson covers both strings and a variety of numerical types . It also in - troduces heterogeneous collections of data via structs and cells , the latter of which implements MATLAB’s pointer concept . • Lesson 8 : File Input / Output . This lesson teaches how to create , read , and write MAT - ﬁles , Excel ﬁles , text ﬁles , and binary ﬁles . It also covers how to navi - gate among folders with MATLAB commands . 220 An equally important decision was what to leave out of the curriculum . We knew from experience that the concepts of recursion , numerical data type conversions , and variable length input argument lists , all of which are included in CS1103 , are harder to grasp and not absolutely necessary for an introductory class , so we left them out of the MOOC . Other concepts taught in CS1103 but not in the MOOC in - clude search and sort algorithms and a brief introduction to linear algebra . Searching and sorting are required for stu - dents who transfer into computer science from this course , and linear algebra is required for students who move on to higher - level engineering courses , but neither is absolutely necessary in a beginning programming course . Each lesson is broken up into multiple video clips . Stud - ies show that short clips of three to four minutes are more engaging than longer ones [ 4 ] . However , we let the mate - rial drive the duration of the videos and not the other way around . Therefore , the video segments have a wide range of lengths from two minutes to almost an hour . Overall , the MOOC has 45 clips with a cumulative duration of over 12 hours . There are many options for the design of MOOC videos . Live classroom recordings , casual sitting at a desk , studio recordings , and screen capture are the most popular ones . With so much material to ﬁt into the course , we opted for an approach that minimizes overhead . We produced pri - marily two styles of videos . One style shows the instructor talking into the camera while superimposed over slides in the background ( see Figure 1 ) . The other shows MATLAB being used , with only the computer screen visible . In the lat - ter case , which comprises about ninety percent of the video time , the instructor could be heard but not seen . The former style was used to explain high - level concepts , while the lat - ter was used to show how to implement those concepts . In each case the videos were based on detailed scripts to make sure that all important concepts were covered in the proper order . The creation of the scripts began with an outline of the concepts to be taught throughout the entire course . That outline was then reﬁned , supplemented with illustra - tive examples , and expanded into a rough monologue . While the course that preceded this MOOC is a traditional lecture course in which the instructor formally addresses a room full of students , we felt that because the typical stu - dent of a MOOC is alone when watching the videos , a more intimate style would be appropriate . Thus , during the devel - opment of the script and especially during the personalizing of the videos , we strove to make the monologue feel casual . Figure 1 : Example of instructor talking into camera Humor was injected frequently , the instructor commented on his own programming experience , including errors he himself had made , and the microphone was kept close for a warm , conversational sound . Finally , the instructor made an eﬀort to make his reading of the script sound spontaneous , and he delivered it relatively slowly and distinctly for the sake of students for whom English is not their ﬁrst language . Despite the scripting , most segments required multiple takes with script modiﬁcations between takes , and after each video was recorded , a lengthy editing process ensued in which long typing sequences were sped up , the audio track was modiﬁed to eliminate distracting sounds or silences , and the video track was modiﬁed with annotations , panning , and zooming . After ﬁnished videos were uploaded , the instruc - tors spent considerable additional time correcting the subti - tles generated by the delivery platform provider . The entire process took several months to complete , but the end result was over 12 hours of polished video lectures . 4 . ASSESSMENT The only way to learn computer programming is by doing it . Watching the video lectures gives the students the nec - essary background to start programming , but that is only a passive activity . The most important skill they need to mas - ter is the application of the concepts that they are learning to solve actual problems . Therefore , programming assign - ments play a key role in the course . Their primary goal is to help students learn ; assessing their performance by grading the solutions is just a secondary aspect . The material in the ﬁrst two weeks of the course is basic and does not lend itself to reasonable assignments . The only assessment during that time is a multiple - choice test at the end of Week 2 . However , Weeks 3 through 8 each have a set of programming assignments . Each problem in an as - signment asks the students to implement a single function that returns one or more values based on input arguments . Each weekly set has a mixture of simple and progressively more challenging problems . For example , a problem in the ﬁrst set might ask for a function that computes the area of a circle where the input is the radius . The last problem of the set may be a function that returns an n - by - n identity matrix , where n is a positive integer input , without using loops or any built - in MATLAB functions . The latter prob - lem may give even an experienced programmer pause espe - cially if he / she is new to MATLAB . So , why include such problems ? Given the sheer number of students who typically sign up to MOOCs on popular topics , it was anticipated that the learners will come with a huge variety of backgrounds , inter - ests , and abilities . Based on the decade of experience of the instructors of CS1103 , we found that the best way of keeping the fastest learners engaged is to challenge them . They may ﬁnd the general speed of the course slow , since it is designed for the middling student , but they appreciate hard and fun assignments . In the classroom it might be an extra - credit problem that does the trick . Our hypothesis was that in a MOOC , a few challenging problems beyond the required passing level of the assignment will prove engaging and mo - tivating . While inevitably a few students complained about the diﬃculty of some of the problems , the overwhelming majority of the feedback was very positive . Most students found it very motivating to try to solve all the problems each week . We have even seen students sign up for the re - 221 vised 2016 version of the course just to do the new set of programming assignments . Unlike many online courses that merely ask the students a few trivial questions to verify that they watched the videos , our goal was to have students graduate with a certain level of demonstrated proﬁciency . Therefore , the assignment sets get harder each week . The last one may even be considered a kind of ﬁnal exam because the problems were not limited to the week’s topic , but were general , non - trivial programming problems , such as converting roman numerals to arabic num - bers and a function for scoring in bowling . We believe that students who have reached the required 66 % credit , meaning that they have solved at least two thirds of the assignments , have achieved a mastery of the subject on par with that of a B student in CS1103 . Students who have solved all the assignments would in all likelihood get an A + . Note that the students were not left on their own to solve the assignments in isolation . One of the most complimented aspects of the course in reviews was the active discussion fo - rum where mentors and instructors answered student ques - tions very rapidly . See Section 5 for more details . Each weekly assignments had ﬁrm deadline , and we main - tained strict enforcement of those deadlines for one reason : After an assignment’s deadline had passed , we were free to post the “oﬃcial” solutions . When a particular prob - lem had multiple solutions with signiﬁcantly diﬀering tech - niques , they were all included with brief commentaries on their merits . This approach proved to be beneﬁcial not only to students who could not solve a problem but also to those who did but learned new approaches from the solutions pro - vided by experienced programmers . Another key aspect of helping students solve the pro - gramming assignments is the auto - grader program devel - oped speciﬁcally for this MOOC . While peer grading has been studied widely [ 6 , 9 ] , its quality is still debated , it can be rather subjective , and it makes course delivery more dif - ﬁcult from a logistical point of view . While peer grading is the only scalable approach in most subjects , a computer programming course lends itself to auto - grading . The only drawback to that approach is the diﬃculty in giving par - tial credit , which would require automated program analy - sis of some kind . However , in an introductory programming course it is reasonable to base student assessment on multi - ple , smaller assignments and to verify the correctness of the solution simply by testing it on various inputs and giving either full credit or no credit based on the outputs produced by those inputs . That is the strategy we followed . One of the ﬁrst design decisions was to opt for client - side grading . Since grading involves running the student’s code , doing it on the server would be a security risk . It would also be more complicated to set up , maintain , and provide technical support to students . Another advantage of client - side execution is that it allows students to work oﬄine . Each weekly set had a“grader” , which the students needed to run on their computers . The grader gives the students the option of either testing their functions one - by - one or testing the entire set at once ( See Figure 2 ) . In the latter case , an alphanumeric code is generated corresponding to the stu - dent’s grade for that assignment , which can be submitted on the course website to get an oﬃcial grade . The grader tests the student’s function on multiple inputs advancing from the simplest case to“corner”cases , which are cases that test the generality of the solution . The grader program reveals each successive test case and stops when the ﬁrst incorrect output is encountered . This approach helps students gradually debug their programs . To prevent students from hard - coding their answers to the various test cases , a number of randomly generated inputs are also in - cluded for testing . Note that the auto - grader hides all errors and exceptions caught in the student’s function to encour - age them to test and debug their functions before they run the grader . Figure 2 : Example auto - grader run MATLAB provides for - loops and while - loops , which may be employed to solve problems involving matrices instead of its far more eﬃcient built - in matrix operations . Further - more , MATLAB provides a rich set of libraries with thou - sands of functions . As a result , students are tempted to avoid matrix operations , and many simple problems that an introductory course might include as assignments have ready - made solutions available . Thus several assignments specify that the student is forbidden to use certain con - structs , such as loops or speciﬁed built - in functions . The auto - grader uses an undocumented feature of MATLAB to parse the source code of the students’ solutions in order to enforce these rules . The design of the grader program , the test cases , the so - lutions , and the language of the problem speciﬁcations re - quired many iterations , and the help of the mentors was so - licited . They received the assignments and the auto - graders , just as the students do during the class , and solved the prob - lems . Many bugs , inconsistencies , and ambiguous wordings were caught and corrected via this process . 5 . DELIVERY We chose scheduled sessions as opposed to on - demand de - livery for two reasons : First , they allow us to impose dead - lines and release oﬃcial solutions after they have passed . Second , because they limit the time window , instructors and experienced mentors can better aﬀord to actively partici - pate in the discussion forums . We delivered three sessions in 2015 with start times in April , July , and October , but we also made all lectures available at all times on YouTube independently of the scheduling of the MOOC sessions . We started the ﬁrst session with one Teaching Assistant ( TA ) from Vanderbilt University and no Community TAs ( or mentors ) . Within a few weeks , we were able to iden - tify a few students who were very active on the forums , very 222 knowledgeable , and able to provide help to students without giving answers . We promoted these students to mentors . In the remaining two sessions , new mentors emerged each time . Some mentors even participated in multiple sessions . They were nicely distributed geographically from Europe to North America to Australia , so help was available to students 24 hours a day . They answered questions many times within minutes , or in the worst case a couple of hours , so students who were stuck on a problem were able to get help quickly . Many discussion threads became quite lengthy as mentors guided the students toward the solution iteratively . The most helpful mentors had well over a thousand posts each . Mentors were likely the number one factor in keeping the students engaged and motivated . The course received unan - imous praise from students with regard to the amount and timeliness of help available on the forums . During the delivery of the ﬁrst session , one important les - son learned was that students were not able to ask the right questions . The most typical comment was “My solution is correct , but the grader says it fails . What shall I do ? ” Since students were not allowed to post code , there was no infor - mation that the mentors could use to help them . Therefore , we created a“Homework FAQ”explaining how to avoid com - mon pitfalls and how to ask questions that provide enough information . More importantly , we created a new hour - long video on problems solving in general , on how to debug func - tions , and on how to use the grader productively . These two adjustments dramatically increased the eﬀectiveness of the discussion forums after the ﬁrst session . 6 . EVALUATION Participants in the three oﬀerings of the MATLAB MOOC in 2015 came from 195 countries , including 50 % from emerg - ing economies . The three most common countries were the US ( 20 % ) , India ( 18 % ) , and China ( 8 % ) . Approximately 25 % of our learners were females . About 51 % were full - time or part - time students , and about 55 % were either employed full - time or part - time . Further , nearly 67 % of them had a bachelor’s degree or higher level of education . Over 150 , 000 students registered for the MOOC in 2015 . However , that is a somewhat misleading number . Since reg - istration is free , many people sign up , but many of those never start the course . A better measure is the number of active users who watch at least one video , which was about 80 , 000 people . As shown in Figure 3 , the number of viewers steadily declined throughout the course to about 18 , 000 for the last video clip ( # 45 ) . The former can be considered the number of active learners who started the class , while the latter is a good proxy for the number of students who ﬁn - ished it . Accordingly , the completion rate comes to about 22 % which is higher than average [ 5 ] . Figure 3 : No . of unique users viewing each video Figure 4 shows the number of students who submitted each assignment . These assignments comprised the quiz at the end of Lesson 2 and six programming problem sets , one for each of the remaining weeks . There is a substantial drop from the quiz to the ﬁrst programming exercise , suggesting that if an assessment is easier , more people will do it , while presumably learning less . About 10 , 000 students worked on the ﬁrst “real” homework , i . e . , the ﬁrst programming set , and about half of them submitted all of them . The last as - signment , which was considerably harder than the previous ones , was submitted by about 4800 students . Figure 4 : No . of unique users who submitted solu - tions to each assignment Figure 5 shows the mean grades received . The means were close to 90 % except for the more diﬃcult ﬁnal assignment . Overall 5300 students passed the course , having scored at least 67 % overall . This number of students is higher than the number of submissions for the last assignment . This dis - crepancy occurs because solving the quiz and the ﬁrst four homework sets with grades near 100 % puts the student over the passing threshold obviating the need to submit further assignments . If we consider the number of students who achieved this passing level relative to the number of active users who started the course , the completion rate becomes 6 . 6 % , which is lower than the 10 % level of the average large MOOC [ 5 ] . However , the requirements of this course are much more stringent than the norm . Interestingly , while 5300 may seem small compared to the number of learners who started the course , it is about twice the number of stu - dents who have taken CS1103 in the last 15 years combined ! Figure 5 : Mean grade for each assignment ( percent ) To gauge the opinion of the student population , we asked them to ﬁll out a post - course survey . The number of re - sponses to individual questions varied between 1300 and 3000 ( we experienced some data loss in one of the sessions related to the survey ) . It is important to note that in all likelihood students who ﬁnished the course are overrepre - sented in the survey . So , the results in the table below may be skewed . 223 Question Excellent or Very Good Overall Experience 85 % Video Lectures 84 % Assessment 81 % Discussion Forum 59 % Instructor Clarity 89 % Instructor Knowledge 92 % Table 1 : Post - course survey summary Clearly , the majority of the students were satisﬁed with the course . The only surprising number is the comparatively low percentage for the usefulness of the discussion forums . We believe that many students did not need much help in solving the assignments , so did not utilize the forums and hence , did not consider them to be useful . However , based on many comments from students , those who actually used it clearly found the forums extremely helpful . Another couple of questions pertained to the diﬃculty of the MOOC and the workload . About 27 % rated the course and the workload the highest possible , while an additional 56 % thought that both were “just right . ” Finally , 86 % per - cent of the learners agreed or strongly agreed with the state - ment “my goals in taking the course were strongly fulﬁlled . ” For 2016 , the course has been moved to the latest Coursera software platform for which the available analytics are dif - ferent , so making a direct comparison to 2015 is not feasible . For example , only paying students can submit assignments for an oﬃcial grade , hence , we no longer know how many students have solved the problems at a passing level . If we only consider the approximately 1000 paying students , the completion rate , based on successfully solving the assign - ments , is at 88 % for 2016 , but there are two weeks left in the third session this year . At the time of this writing in early December , we have had almost 36 , 000 active users so far in 2016 . The course has been rated at 4 . 8 out of 5 by the 651 students who have provided feedback . The items in the curriculum , such as video lectures , assignments , oﬃcial solutions , etc . , have gathered over 8600 likes and fewer than 160 dislikes . Currently , Class Central , a well - known MOOC - aggregator site has our course listed as the 5th highest rated free online course out of the 6000 surveyed based on student ratings [ 1 ] . 7 . CONCLUSIONS Given the high number of students who participated in the course , the completion rate and the data from the post course survey , we believe that our approach to the design and delivery of an introductory programming MOOC targeted at a wide audience have been clearly validated . We have learned many lessons during the last two years . First , we learned that creating a high - quality MOOC takes far more work and far more time than we had anticipated . More importantly , based on feedback from several hundred students , we have identiﬁed the following major factors that made this course one of the most highly rated online courses [ 1 ] available today : • A curriculum based on a real course with a long track record ( and a corresponding textbook ) but condensed and adjusted for the online format . • Polished , scripted video lectures maintaining a rela - tively slow pace . • Practical , progressively more challenging programming assignments coupled with a sophisticated auto - grader program that provides just the right amount of feed - back to the students . • Active , timely participation of volunteer expert men - tors in the discussion forums guiding students patiently through the more challenging assignments . We believe that these last two items would hardly be sus - tainable in an on - demand delivery mode or using continuous overlapping sessions . Therefore , we intend to continue de - livering the course in three or four non - overlapping sessions each year , while keeping all video lectures freely available on YouTube to anyone , anytime . 8 . ACKNOWLEDGMENTS VIDL , the Vanderbilt Institute for Digital Learning helped produce the MOOC . Financial support was provided by the MathWorks . The company also provides a free MATLAB li - cense to every student for the duration of the course . Finally , Brandon Armstrong and Matt Tearle from MathWorks have been serving as community TAs and helping countless stu - dents on the course forum since the very ﬁrst session . Their contributions are gratefully acknowledged . 9 . ADDITIONAL AUTHORS Additional authors : Aatish Kumar ( University of Ams - terdam , email : aatishk @ live . com ) and Katherine A . Brady ( Vanderbilt University , email : katherine . a . brady @ vander - bilt . edu ) . 10 . REFERENCES [ 1 ] Top 50 Free Online Courses of All Time , Class Central . https : / / www . class - central . com / collection / top - free - online - courses , 2016 . Cited 2016 November 3 . [ 2 ] Introduction to Programming with MATLAB , Coursera . https : / / www . coursera . org / learn / matlab , 2016 . Cited 2016 November 3 . [ 3 ] J . M . Fitzpatrick and A . Ledeczi . Computer Programming with MATLAB . Fitzle LLC , 2013 . [ 4 ] P . J . Guo , J . Kim , and R . Rubin . How video production aﬀects student engagement : An empirical study of mooc videos . In Proceedings of the First ACM Conference on Learning @ Scale Conference , L @ S ’14 , pages 41 – 50 , New York , NY , USA , 2014 . ACM . [ 5 ] K . Jordan . Initial Trends in Enrolment and Completion of Massive Open Online Courses . The International Review of Research in Open and Distributed Learning , 15 ( 1 ) , 2014 . [ 6 ] H . Luo , A . C . Robinson , and J . - Y . Park . Peer Grading in a MOOC : Reliability , Validity , and Perceived Eﬀects . Journal of Asynchronous Learning Networks , 18 ( 2 ) : n2 , 2014 . [ 7 ] MATLAB website . http : / / www . mathworks . com / products / matlab / . Cited 2016 August 12 . [ 8 ] I . Milne and G . Rowe . Diﬃculties in learning and teaching programming—views of students and tutors . Education and Information Technologies , 7 ( 1 ) : 55 – 66 , 2002 . [ 9 ] J . - W . Strijbos . Unravelling Peer Assessment . Elsevier , 2010 . 224