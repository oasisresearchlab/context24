1 Software Engineering & Design CST IB / IIG / CS Diploma Alan Blackwell OUTLINE OF COURSE (cid:147) Introduction – the “Software Crisis” (cid:147) Software Construction (cid:147) Object - oriented Design (cid:147) Interaction Design (cid:147) Design Challenges (cid:147) Project Management 2 Books (cid:147) Code Complete : A practical handbook of software construction (cid:147) Steve McConnell , Microsoft Press 1993 (cid:147) UML Distilled ( 2nd edition ) (cid:147) Martin Fowler , Addison - Wesley 2000 (cid:147) Interaction Design : Beyond human - computer interaction (cid:147) Jenny Preece , Helen Sharp & Yvonne Rogers , Wiley 2002 (cid:147) Software Engineering ( European edition ) (cid:147) Roger Pressman , McGraw - Hill 2001 (cid:147) Further : (cid:147) Programming as if People Mattered , Nate Borenstein (cid:147) The Mythical Man Month , Fred Brooks (cid:147) Computer - Related Risks , Peter Neumann (cid:147) The Sciences of the Artificial , Herb Simon (cid:147) Educating the Reflective Practitioner , Donald Schon (cid:147) London Ambulance Service & CAPSA reports , Finkelstein Supervisions (cid:147) The course is practical , not theoretical (cid:147) Designed specifically to feed in to your projects ( and your future life … ) (cid:147) No point in having supervisions to discuss the material until you have tried it in practice , so : (cid:147) Part IIG & IB students ( group project ) (cid:147) Supervisions should help you apply project management , object - oriented design methods etc . in your group (cid:147) Diploma students ( project and dissertation ) (cid:147) Supervisions should address interface design issues , coding , testing and evaluation techniques . 3 Introduction The Software Crisis London Ambulance Service (cid:147) The project : automate inefficient manual operation (cid:147) 999 calls written on forms (cid:147) map reference looked up (cid:147) conveyor belt to central point (cid:147) controller removes duplicates , passes to NE / NW / S district (cid:147) division controller identifies vehicle and puts note in its ‘activation box’ (cid:147) form passed to radio dispatcher (cid:147) Takes about 3 minutes , and 200 staff ( of 2 , 700 total ) . (cid:147) some errors ( esp . deduplication ) , (cid:147) some queues ( esp . radio ) , (cid:147) call - backs are laborious to deal with 4 LAS : Project Background (cid:147) Attempt to automate in 1980’s failed (cid:147) the system failed a load test (cid:147) Industrial relations poor (cid:147) pressure to cut costs (cid:147) Decided to go for fully automated system : (cid:147) controller answering 999 call has on - screen map (cid:147) send “email” directly to ambulance (cid:147) Consultancy study to assess feasibility : (cid:147) estimated cost £1 . 5m , duration 19 months … (cid:147) provided a packaged solution could be found (cid:147) excluding automatic vehicle location system LAS : Award of Tender (cid:147) Idea of a £1 . 5m system stuck , but (cid:147) automatic vehicle location system added (cid:147) proviso of packaged solution forgotten (cid:147) new IS director hired (cid:147) tender put out 7 February 1991 (cid:147) completion deadline January 1992 (cid:147) 35 firms looked at tender (cid:147) 19 submitted proposals , most said : (cid:147) timescale unrealistic (cid:147) only partial automation possible by January 1992 (cid:147) Tender awarded to consortium : (cid:147) Systems Options Ltd , Apricot and Datatrak (cid:147) bid of £937 , 463 … £700K cheaper than next bidder 5 LAS : Design Phase (cid:147) Design work ‘done’ July (cid:147) main contract August (cid:147) mobile data subcontract September (cid:147) in December told only partial implementation possible in January – (cid:147) front end for call taking (cid:147) gazetteer + docket printing (cid:147) by June 91 , a progress meeting had minuted : (cid:147) 6 month timescale for 18 month project (cid:147) methodology unclear , no formal meeting program (cid:147) LAS had no full time user on project (cid:147) Systems Options Ltd relied on ‘cozy assurances’ from subcontractors LAS : Implementation (cid:147) Problems apparent with ‘phase 1’ system (cid:147) client & server lockup (cid:147) ‘Phase 2’ introduced radio messaging , further problems (cid:147) blackspots , channel overload at shift change , (cid:147) inability to cope with ‘established working practices’ such as taking the ‘wrong’ ambulance (cid:147) System never stable in 1992 (cid:147) Management pressure for full system to go live (cid:147) including automatic allocation (cid:147) ‘no evidence to suggest that the full system software , when commissioned , will not prove reliable’ 6 LAS : Live Operation (cid:147) Independent review had noted need for : (cid:147) volume testing (cid:147) written implementation strategy (cid:147) change control (cid:147) training (cid:147) … it was ignored . (cid:147) 26 October (cid:147) control room reconfigured to use terminals not paper (cid:147) resource allocators separated from radio operators and exception rectifiers (cid:147) No backup system . (cid:147) No network managers . LAS : 26 & 27 October - Disaster (cid:147) Vicious cycle of failures (cid:147) system progressively lost track of vehicles (cid:147) exception messages built up , scrolled off screen , were lost (cid:147) incidents held as allocators searched for vehicles (cid:147) callbacks from patients increased workload (cid:147) data delays - voice congestion - crew frustration - pressing wrong buttons and taking wrong vehicles (cid:147) many vehicles sent , or none (cid:147) slowdown and congestion proceeded to collapse (cid:147) Switch back to semi - manual operation on 27 Oct (cid:147) Irretrievable crash 02 : 00 4 Nov due to memory leak : (cid:147) ‘unlikely that it would have been detected through conventional programmer or user testing’ (cid:147) Real reason for failure : poor management throughout 7 The Software Crisis (cid:147) Emerged during 1960’s (cid:147) large and powerful mainframes ( e . g . IBM 360 ) made far larger and more complex systems possible (cid:147) why did software projects suffer failures & cost overruns so much more than large civil , structural , aerospace engineering projects ? (cid:147) Term ‘software engineering’ coined 1968 (cid:147) hope that engineering habits could get things under control (cid:147) e . g . project planning , documentation , testing (cid:147) These techniques certainly help – we’ll discuss (cid:147) But first : (cid:147) how does software differ from machinery ? (cid:147) what unique problems and opportunities does it bring ? Why is software different ( and fun ) ? (cid:147) The joy of making things useful to others (cid:147) The fascination of building puzzles from interlocking “moving” parts (cid:147) The pleasure of a non - repeating task (cid:147) continuous learning (cid:147) The delight of a tractable medium (cid:147) “pure thought stuff” 8 What makes software hard ? (cid:147) The need to achieve perfection (cid:147) Need to satisfy user objectives , conform with systems , standards , interfaces outside control (cid:147) Larger systems qualitatively more complex ( unlike ships or bridges ) because parts interact in many more than 3 dimensions . (cid:147) Tractability of software leads users to demand ‘flexibility’ and frequent changes (cid:147) Structure of software can be hard to visualise / model (cid:147) Much hard slog of debugging and testing accumulates at project end , when : (cid:147) excitement is gone (cid:147) budget is overspent (cid:147) deadline ( or competition ) looming The ‘Software Crisis’ (cid:147) The reality of software development has lagged behind the apparent promise of the hardware (cid:147) Most large projects fail - either abandoned , or do not deliver anticipated benefits (cid:147) LSE Taurus £ 400 m (cid:147) Denver Airport $ 200 m (cid:147) Some software failures cost lives or cause large material losses (cid:147) Therac 25 (cid:147) Ariane (cid:147) Pentium (cid:147) NY Bank - and Y2K in general (cid:147) Some combine project failure with loss of life , e . g . London Ambulance Service 9 Special emphases of this course (cid:147) Requirements : (cid:147) User centred interaction design , not older requirements capture methods ( Pressman describes both ) (cid:147) Analysis and design : (cid:147) Object - oriented design and UML , not older structured analysis ( Pressman describes both ) (cid:147) Construction : (cid:147) Emphasise coding , not metrics (cid:147) Project management & quality assurance : (cid:147) Pressman best on these ( and also best overview , though weak on UML and interaction design ) Part I Software Construction 2 lectures 10 Software Construction (cid:147) Decomposition and Modularity (cid:147) Coding style (cid:147) Naming (cid:147) Configuration (cid:147) Testing (cid:147) Efficiency Decomposition and Modularity (cid:147) top - down decomposition : stepwise refinement dispatch ambulance identify region take 999 call send ambulance allocate vehicle estimate arrival note patient condition radio crew record address find vehicle in region assign vehicle to call 11 Top - down versus Bottom - up (cid:147) This course is structured in a bottom - up way . (cid:147) Why ? (cid:147) Start with what you understand (cid:147) Build complex structures from well - understood parts (cid:147) Deal with concrete cases in order to understand abstractions (cid:147) The same advantages can apply to software as to teaching . (cid:147) Real software construction combines top - down and bottom up . Bottom - up design issues (cid:147) Some important programming skills apply to every language : (cid:147) Naming variables and functions (cid:147) Organising control structures (cid:147) Laying out lines of code (cid:147) Using comments (cid:147) Achieving type - safety (cid:147) Designing modules 12 Modularity - routines (cid:147) Is this routine required ? (cid:147) Define what it will do (cid:147) What information will it hide ? (cid:147) Inputs (cid:147) Outputs ( including side effects ) (cid:147) How will it handle errors (cid:147) Give it a good name (cid:147) How will you test it ? (cid:147) Think about efficiency and algorithms (cid:147) Write as comments , then fill in actual code Modularity beyond the routine (cid:147) Separate source files in C (cid:147) Inputs , outputs , types and interface functions defined by declarations in “header files” . (cid:147) Private variables declared in the source file (cid:147) Classes in Java (cid:147) Inputs and outputs can be controlled by visibility specifiers and access functions (cid:147) Aim for all data to be private , and as few public functions as possible (cid:147) Classes in C + + (cid:147) Somewhat like C , somewhat like Java (cid:147) Modules in ML 13 Using comments (cid:147) Comments help the person reading your code understand what you intended it to do . (cid:147) The purpose of a class or routine (cid:147) And also its limitations (cid:147) Warning the reader of surprises (cid:147) Defining data units and allowable ranges (cid:147) The person reading the comments may be you … in a year ( or a few weeks ) time . (cid:147) In larger group projects (cid:147) Authorship ( and copyright ? ) (cid:147) Change history , especially in shared code Coding style : layout (cid:147) Objectives : (cid:147) Accurately express logical structure of the code (cid:147) Consistently express the logical structure (cid:147) Improve readability (cid:147) Good visual layout shows program structure (cid:147) Mostly based on white space and alignment (cid:147) The compiler ignores white space (cid:147) Alignment is the single most obvious feature to human readers . (cid:147) Code layout is most like the art of typography 14 Expressing global structure Function _ name ( parameter1 , parameter2 ) / / Function which doesn’t do anything , beyond showing the fact / / that different parts of the function can be distinguished . type1 : local _ data _ A , local _ data _ B type2 : local _ data _ C / / Initialisation section local _ data _ A : = parameter1 + parameter2 ; local _ data _ B : = parameter1 - parameter2 ; local _ data _ C : = 1 ; / / Processing while ( local _ data _ C < 40 ) { if ( ( local _ data _ B ^ 2 ) > local _ data _ A ) then { local _ data _ B : = local _ data _ B – 1 ; } else { local _ data _ B : = local _ data _ B + 1 ; } / / end if local _ data _ C : = local _ data _ C + 1 ; } / / end while } / / end function Expressing local control structure while ( local _ data _ C < 40 ) { form _ initial _ estimate ( local _ data _ C ) ; record _ marker ( local _ data _ B – 1 ) ; refine _ estimate ( local _ data _ A ) ; local _ data _ C : = local _ data _ C + 1 ; } / / end while if ( ( local _ data _ B ^ 2 ) > local _ data _ A ) then { / / drop estimate local _ data _ B : = local _ data _ B – 1 ; } else { / / raise estimate local _ data _ B : = local _ data _ B + 1 ; } / / end if 15 Expressing structure within a line (cid:147) Whitespacealwayshelpshumanreaders (cid:147) newtotal = oldtotal + increment / missamount - 1 ; (cid:147) newtotal = oldtotal + increment / missamount - 1 ; (cid:147) The compiler doesn’t care – take care ! (cid:147) x = 1 * y + 2 * z ; (cid:147) Be conservative when nesting parentheses (cid:147) while ( ( ! error ) & & readInput ( ) ) (cid:147) Continuation lines – exploit alignment (cid:147) if ( ( aLongVariableName & anotherLongOne ) | ( someOtherCondition ( ) ) ) { … } Naming variables : Form (cid:147) Priority : full and accurate ( not just short ) (cid:147) Abbreviate for pronunciation ( remove vowels ) (cid:147) e . g . CmptrScnce ( leave first and last letters ) (cid:147) Parts of names reflect conventional functions (cid:147) Role in program ( e . g . “count” ) (cid:147) Type of operations ( e . g . “window” or “pointer” ) (cid:147) Hungarian naming ( not really recommended ) : (cid:147) e . g . pscrMenu , ichMin (cid:147) Even individual variable names can exploit typographic structure for clarity (cid:147) xPageStartPosition (cid:147) x _ page _ start _ position 16 Naming variables : Content (cid:147) Data names describe domain , not computer (cid:147) Describe what , not just how (cid:147) CustomerName better than PrimaryIndex (cid:147) Booleans should have obvious truth values (cid:147) ErrorFound better than Status (cid:147) Indicate which variables are related (cid:147) CustName , CustAddress , CustPhone (cid:147) Identify globals , types & constants ( in C ) (cid:147) e . g . g _ wholeApplet , T _ mousePos (cid:147) Even temporary variables have meaning (cid:147) Index , not Foo Naming variables : Role (cid:147) Decide which is which , don’t mix them up ! (cid:147) Fixed value ( maybe not declared constant ) (cid:147) Always the same ( e . g . screensize ) (cid:147) Stepper (cid:147) Predictable succession of values ( e . g . month ) (cid:147) Follower (cid:147) Gets its value from another variable ( e . g . previous ) (cid:147) Most - recent holder (cid:147) Latest in a series ( e . g . finish ) (cid:147) Most - wanted holder (cid:147) Best value so far ( e . g . largest ) (cid:147) Gatherer (cid:147) Accumulating effect of individual values ( e . g . total ) (cid:147) One - way flag (cid:147) Never goes back to its initial value ( e . g . error ) (cid:147) Temporary 17 Achieving type - safety (cid:147) Refine types to reflect meaning , not just to satisfy the compiler . (cid:147) Valid ( to compiler ) , but incorrect , code : (cid:147) float totalHeight , myHeight , yourHeight ; (cid:147) float totalWeight , myWeight , yourWeight ; (cid:147) totalHeight = myHeight + yourHeight + myWeight ; (cid:147) Type - safe version : (cid:147) type t _ height , t _ weight : float ; (cid:147) t _ height totalHeight , myHeight , yourHeight ; (cid:147) t _ weight totalWeight , myWeight , yourWeight ; (cid:147) totalHeight = myHeight + yourHeight + myWeight ; Compile error ! Defensive programming (cid:147) Assertions and correctness proofs would be useful tools , but are seldom available . (cid:147) Defensive programming includes additional code to help ensure local correctness (cid:147) Treat function interfaces as a contract (cid:147) Each function / routine (cid:147) Checks that input parameters meet assumptions (cid:147) Checks output values are valid (cid:147) System - wide considerations (cid:147) How to report / record detected bugs (cid:147) Perhaps include off - switch for efficiency 18 Efficiency (cid:147) The worst mistakes come from using the wrong algorithm (cid:147) e . g . lab graduate reduced 48 hours to 2 minutes (cid:147) Hardware now fast enough to run most code fast enough ( assuming sensible algorithms ) (cid:147) Optimisation is a waste of your time (cid:147) Optimisation is required (cid:147) For extreme applications (cid:147) When pushing hardware envelope (cid:147) Cost - effective techniques (cid:147) Check out compiler optimisation flags (cid:147) Profile and hand - optimise bottlenecks Formal methods (cid:147) Pioneers ( e . g . Turing ) talked of proving programs using mathematics (cid:147) program verification started with Floyd ( 67 ) (cid:147) followed up by Hoare ( 71 ) and others (cid:147) Now a wide range of techniques and tools for both software and hardware , ranging from the general to highly specialised . (cid:147) Z , based on set theory , for specifications (cid:147) LOTOS for checking communication protocols (cid:147) HOL for hardware (cid:147) Not infallible – but many bugs are found (cid:147) force us to be explicit and check designs in great detail (cid:147) but proofs have mistakes too (cid:147) Considerable debate on value for money 19 Configuration Management (cid:147) Version control (cid:147) Change control (cid:147) Variants (cid:147) Releases Version control (cid:147) Record regular “snapshot” backups (cid:147) often appropriate to do so daily (cid:147) Provides ability to “roll back” from errors (cid:147) Useful even for programmers working alone MondayVers0 . 1 TuesdayVers0 . 2 Wed’dayVers0 . 3 ThursdayVers0 . 4 FridayCock - up ! Week - End : Version 0 . 4 Week - End : Version 0 . 2 20 Change control (cid:147) Essential in programming teams (cid:147) Avoid the “clobbering” problem (cid:147) Older tools ( RCS , SCCS ) rely on locking (cid:147) More recent ( CVS ) automate merging MondayV0 . 1 Alan : TuesdayV0 . 2a Alan : Wed’dayV0 . 3 Ross : ThursdayV0 . 4 ? ? Ross : TuesdayV0 . 2b Alan’s work is clobbered ! ! Variants (cid:147) Branching results in a tree of different versions or “variants” (cid:147) Maintaining multiple branches is costly (cid:147) Merge branches as often as possible (cid:147) Minimise number of components that vary in each branch ( ideally only one configuration file ) (cid:147) If necessary , conditional compile / link / execution can merge several variants into one 1 2a 2b 2a1 2b1 2a2 2b2 3 4 split merge two updates two updates single update 21 Builds and Releases (cid:147) Record actual configuration of components that were in a product release , or even an overnight build integrating work of a team . (cid:147) Allows problems to be investigated with the same source code that was delivered or tested (cid:147) Allow start of development on next release while also supporting current release (cid:147) Universal requirement of commercial software development ( at least after release 1 . 0 ! ) (cid:147) Bug fixes made to 1 . 0 . 1 are also expected to be there in 2 . 0 , which requires regular merging (cid:147) Note : My version of Internet Explorer is 6 . 0 . 2800 . 1106 . xpsp2 . 030422 - 1633 Testing (cid:147) Testing is neglected in academic studies (cid:147) but great industrial interest - maybe half the cost (cid:147) It takes place at a number of levels - cost per bug removed rises dramatically at later stages : (cid:147) validation of the initial design (cid:147) module test after coding (cid:147) system test after integration (cid:147) beta test 1 field trial (cid:147) subsequent litigation (cid:147) . . . (cid:147) Common failing is to test late , because early testing wasn ' t designed for . (cid:147) This is expensive . We must design for testability 22 Testing strategies (cid:147) Test case design : most errors in least time (cid:147) White box testing (cid:147) Test each independent path at least once (cid:147) Prepare test cases that force paths (cid:147) Control structure testing (cid:147) Test conditions , data flow and loops (cid:147) Black box testing (cid:147) Based on functional requirements (cid:147) Boundary value analysis (cid:147) Stress testing : at what point will it fail ? (cid:147) ( vs . performance testing – will it do the job ) ? Regression testing (cid:147) Checking that new version of software gives same answers as old version (cid:147) Probably single biggest advance in tools for software engineering of packaged software (cid:147) Use a large database of test cases , including all bugs ever found . Specific advantages : (cid:147) customers are much more upset by failure of a familiar feature than of a new one (cid:147) otherwise each bug fix will have a ~ 20 % probability of reintroducing a problem into set of already tested behaviours (cid:147) reliability of software is relative to a set of inputs . Best test the inputs that users actually generate ! (cid:147) Test automation tools reduce mundane repetition (cid:147) both API / command based , and UI ( e . g . mouse replay ) 23 When to stop testing (cid:147) Reliability growth model helps assess (cid:147) mean time to failure (cid:147) number of bugs remaining (cid:147) economics of further testing , . . . . . (cid:147) Software failure rate (cid:147) drops exponentially at first (cid:147) then decreases as K / T (cid:147) Changing testers brings new bugs to light (cid:147) to get a mttf of 10 9 hours , need 10 9 hours testing bug s time spent testing e - A / t k / T bugs tester1 tester2 tester 3 tester 4 Tools (cid:147) We use tools when some parameter of a task exceeds our native ability (cid:147) heavy object : raise with lever (cid:147) tough object : cut with axe (cid:147) Software engineering tools deal with complexity . There are two kinds of complexity : (cid:147) Incidental complexity dominated programming in the early days . e . g . writing machine code is tedious and error prone . Solution : high level language (cid:147) Intrinsic complexity of applications is the main problem nowadays . e . g . complex system with large team . “Solution” : waterfall / spiral model to structure development , project management tools , etc . (cid:147) We can aim to eliminate incidental complexity but must manage intrinsic complexity 24 Part II Object - oriented Design 2 lectures Object - oriented design (cid:147) Design as modelling ; (cid:147) The Unified Modelling Language ; (cid:147) Use case analysis ; (cid:147) Class modelling ; (cid:147) Object interaction ; (cid:147) State and activity descriptions . 25 Why structured design ? (cid:147) “Organic” hacking doesn’t work when : (cid:147) Many programmers on project . (cid:147) Too large to hold in your head . (cid:147) Need for accurate estimates . (cid:147) Several companies involved . (cid:147) So design techniques must provide : (cid:147) language for communication (cid:147) decomposition and simplification (cid:147) predictable relationship to implementation language (cid:147) basis for contractual agreements Why object - oriented ? (cid:147) Partly fashion … (cid:147) 1980s : structured design for structured languages (cid:147) 1990s : OO design for OO languages (cid:147) … but basic principles still good : (cid:147) Good designers used OO ( and structured ) techniques before methods became widespread . (cid:147) OO ( and structured ) techniques are applicable to projects using older languages . (cid:147) Current best practice in techniques and tools . 26 Elements of OO design (cid:147) The word “design” can mean a product or a process . (cid:147) The Product : a collection of models (cid:147) like architects’ models , sketches , plans , details (cid:147) models simplify the real world (cid:147) models allow emphasis of specific aspects (cid:147) Diagrams ( share aspects of fashion sketches , and also of engineering drawings ) (cid:147) a cultural tradition in software (cid:147) easy to draw for personal / communicative sketching (cid:147) can be made tidy with tools ( templates , CASE tools ) The OO design process (cid:147) A process is some set of phases defined by project procedures (cid:147) much more on project procedures later in the course (cid:147) Iteration between and within phases , e . g . : (cid:147) requirement (cid:81) system analysis (cid:147) module design (cid:81) architectural design (cid:147) design (cid:81) coding (cid:81) test (cid:147) … more on this later in course (cid:147) Process depends on context and policy (cid:147) OO techniques must be flexible 27 Standardisation (cid:147) Early 90s : the methodology wars (cid:147) structured methods didn’t support inheritance etc . (cid:147) many ( > 50 ) hacked upgrades and new methods (cid:147) The battlefield : (cid:147) books , CASE tools , training (cid:147) Consolidation : (cid:147) Natural leaders emerged , mostly by merit (cid:147) Rational Software hired the leaders for UML (cid:147) Object Management Group blessed the result (cid:147) IBM now owns the result – but it’s the best we have ( and Eclipse tools are genuinely useful ) Tools (cid:147) Diagrams : most obvious benefit from CASE tools (cid:147) drawing packages or specialist diagram tools will do (cid:147) Repositories : understand diagram content (cid:147) maintain name / type database , diagram consistency (cid:147) Code generation : at the least , saves typing (cid:147) dumping class signatures in Java / C + + syntax is easy (cid:147) anything more is hard ( and perhaps pointless ) (cid:147) Alternative languages : UML still useful (cid:147) inheritance , instantiation can be implemented in C etc . (cid:147) OO design can be exploited in later development work 28 UML : Unified Modeling Language UML diagrams - overview (cid:147) Use Case diagrams - interactions with / interfaces to the system . (cid:147) Class diagrams - type structure of the system . (cid:147) Collaboration diagrams - interaction between instances (cid:147) Sequence diagrams - temporal structure of interaction (cid:147) Activity diagrams - ordering of operations (cid:147) Statechart diagrams - behaviour of individual objects (cid:147) Component and Deployment diagrams - system organisation 29 Design role of UML diagrams Structure Diagrams Implementation Diagrams Behaviour Diagrams Class Diagrams Statechart Diagrams Activity Diagrams Sequence Diagrams Collaboration Diagrams Use Case Diagrams Component Diagrams Deployment Diagrams Interaction Diagrams UML diagrams in process context Structure Diagrams Implementation Diagrams Behaviour Diagrams Class Diagrams Statechart Diagrams Activity Diagrams Sequence Diagrams Collaboration Diagrams Use Case Diagrams Component Diagrams Deployment Diagrams Interaction Diagrams Requirementsspecification Analysis Design Implementation 30 UML Use Case diagram UML Use Case diagram (cid:147) Actors (cid:147) play system role (cid:147) may not be people (cid:147) Use case (cid:147) like a scenario (cid:147) Relationships (cid:147) include (cid:147) extend (cid:147) generalisation 31 UML Class diagram UML Class diagram (cid:147) Attributes (cid:147) type and visibility (cid:147) Operations (cid:147) signature and visibility (cid:147) Relationships (cid:147) association (cid:147) with multiplicity (cid:147) potentially aggregation (cid:147) generalisation 32 UML Collaboration diagram UML Collaboration diagram (cid:147) Objects (cid:147) class instances (cid:147) can be transient (cid:147) Links (cid:147) from associations (cid:147) Messages (cid:147) travel along links (cid:147) numbered to show sequence 33 UML Sequence diagram UML Sequence diagram (cid:147) Interaction again (cid:147) same content as collaboration (cid:147) emphasises time dimension (cid:147) Object lifeline (cid:147) objects across page (cid:147) time down page (cid:147) Shows focus of control 34 UML Activity diagram UML Activity diagram (cid:147) Like flow charts (cid:147) Activity as action states (cid:147) Flow of control (cid:147) transitions (cid:147) branch points (cid:147) concurrency ( fork & join ) (cid:147) Illustrate flow of control (cid:147) high level - e . g . workflow (cid:147) low level - e . g . lines of code 35 UML Statechart diagram UML Statechart diagram (cid:147) Object lifecycle (cid:147) data as state machine (cid:147) Harel statecharts (cid:147) nested states (cid:147) concurrent substates (cid:147) Explicit initial / final (cid:147) valuable in C + + (cid:147) Note inversion of activity diagram 36 UML Component diagram UML Deployment diagram 37 Quality criterion : Cohesion (cid:147) Each component does “one thing” only (cid:147) Functional cohesion – one operation only (cid:147) Sequential – processing data in sequence (cid:147) Communication via shared data (cid:147) Things that must be done at the same time (cid:147) Bad cohesion (cid:147) Sequence of operations with no necessary relation (cid:147) Unrelated operations selected by control flags (cid:147) No relation at all – purely coincidental Quality criterion : Encapsulation (cid:147) Separating interface from implementation (cid:147) Design precautions : (cid:147) Define visibility - keep implementation private (cid:147) Avoid unnecessary associations (cid:147) Consequences : (cid:147) Unexpected ( forgotten ) interaction and dependencies (cid:147) Implementation techniques : (cid:147) Visibility declarations ( C + + / Java ) , module export 38 Quality criterion : Loose coupling (cid:147) Keeping parts of design independent (cid:147) Design precautions : (cid:147) reduce relationships between diagram nodes (cid:147) Consequences : (cid:147) achieve reusability , modifiability (cid:147) Implementation techniques : (cid:147) may require several iterations of design for clear conceptual model Quality criterion : Client - Server Contracts (cid:147) Consider every object as a “server” (cid:147) Design precautions : (cid:147) perhaps use Object Constraint Language ( OCL ) to express ( semi - formal ) constraints on associations , events , messages (cid:147) Consequences : (cid:147) reliability , improved partitioning , graceful degradation (cid:147) Implementation techniques : (cid:147) support for pre - and post - conditions ( e . g . Eiffel ) 39 Quality criterion : Natural data model (cid:147) Creating a conceptually clear class structure (cid:147) Design precautions : (cid:147) experiment with alternative association , aggregation , generalisation , before committing to code (cid:147) Consequences : (cid:147) achieve good mapping to problem domain ( hard to retro - fit generalisations ) . (cid:147) Implementation techniques : (cid:147) relies on inheritance Design Exemplars (cid:147) Complete designs come from project experience (cid:147) More general solutions : Design Patterns (cid:147) The programmer’s bag of tricks (cid:147) e . g . Smalltalk Model - View - Controller (cid:147) Collection of patterns : Gamma et . al . (cid:147) ( originally architect Christopher Alexander’s “pattern language” ) 40 UML Extension & Formalisation (cid:147) UML provides extension mechanisms (cid:147) Business modeling extension (cid:147) Real - time extension (cid:147) Executable UML (cid:147) UML includes a formal specification language (cid:147) Object Constraint Language ( OCL ) (cid:147) not covered in this course Minimal UML design (cid:147) Some programmers don’t like to design first . (cid:147) ( Not me ) ! But what if no management support , no tools ? (cid:147) Quick and dirty OO design : (cid:147) Write use case “stories” , note commonality (cid:147) Keep a piece of paper for each class (cid:147) write attributes , operations , relationships (cid:147) lay out on table , and “talk through” scenarios (cid:147) Consider object lifecycle : state change , persistence (cid:147) When your desk gets too small , buy a proper tool 41 Further UML / OOD resources (cid:147) http : / / www . uml . org / (cid:147) http : / / www . eclipse . org / (cid:147) http : / / www . ibm . com / software / rational / uml / (cid:147) http : / / www . cetus - links . org / oo _ uml . html OO design : Summary (cid:147) Large , complex projects need a structured design process . (cid:147) Design ( the process ) involves creating models ( the product ) . (cid:147) UML is an established common language for OO design . (cid:147) Design projects can be structured around UML models . (cid:147) A common design language provides a basis for assessing quality and standardised solutions . 42 Part III Interaction Design 3 lectures Interaction Design (cid:147) Interaction styles (cid:147) The historic effects of interface hardware (cid:147) Evaluation based on interface analysis (cid:147) Models of user cognition (cid:147) Understanding the needs of users (cid:147) Evaluation based on cognitive analysis (cid:147) Contextual requirements gathering (cid:147) Understanding the situation of use (cid:147) Evaluation of prototypes in context 43 Control panels (cid:147) Early computers were like scientific instruments (cid:147) For specialists only (cid:147) Unit of interaction : the configuration of the machine Mathematical languages (cid:147) Write down an equation on paper (cid:147) Punch it into a tape in some code (cid:147) Feed the tape into the machine (cid:147) Unit of interaction : whole programs DIMENSION A ( 11 ) READ A 2 DO 3 , 8 , 11 J = 1 , 11 3 I = 11 - J Y = SQRT ( ABS ( A ( I + 1 ) ) ) + 5 * A ( I + 1 ) * * 3 IF ( 400 > = Y ) 8 , 4 4 PRINT I , 999 . GOTO 2 8 PRINT I , Y 11 STOP 44 Data files (cid:147) Punch data records ( or program lines ) onto cards (cid:147) Feed stacks of cards into machine (cid:147) Unit of interaction : collection of prerecorded items (cid:147) Can be rearranged Command lines (cid:147) Teletype : like faxing individual requests to the computer (cid:147) Unit of interaction : command & response , creating a dialogue (cid:147) UNIX started here (cid:147) Disadvantage : users must remember possible commands OBEY YES SIR 45 WYSIWYG (cid:147) Originally “Glass teletypes” (cid:147) Look , no paper ! (cid:147) Units of interaction : (cid:147) The full - screen editor (cid:147) User can see the product being worked on (cid:147) “What You See Is What You Get” (cid:147) All possible commands can be listed in a menu Graphical displays (cid:147) Separate menu ( text ) and product ( graphic ) (cid:147) Unit of interaction : depends on mode (cid:147) Can commands and product be combined ? (cid:147) Modeless interaction 46 Pointing devices (cid:147) Allow seamless movement between menus and products on the same screen . (cid:147) Unit of interaction : the cursor position Bitmapped displays (cid:147) Units of interaction : icons and windows (cid:147) Windows : multiple contexts shown by frames . (cid:147) Icons : pictures representing abstract entities . 47 WIMP : w indow / i con / m enu / p ointer (cid:147) Unit of interaction is not textual (cid:147) ( note no keyboard in this ad ) . (cid:147) Object of interest is the unit of interaction Direct manipulation (cid:147) Described by Shneiderman : (cid:147) objects of interest continuously visible (cid:147) operations by physical actions , not commands (cid:147) actions rapid , incremental , reversible (cid:147) effect of actions immediately visible (cid:147) basic commands for novices , more for experts 48 Heuristic evaluation (cid:147) Usability evaluation technique based on general interaction principles (cid:147) Comparing system design to set of usability heuristics . (cid:147) systematic search for usability problems (cid:147) team of evaluators , working independently (cid:147) each evaluator assesses all of interface Sample heuristics (cid:147) Visibility of system status (cid:147) keep users informed : appropriate feedback in reasonable time (cid:147) Match between system and the real world (cid:147) familiar language , not system - oriented terms : obey real - world conventions & natural order (cid:147) User control and freedom (cid:147) clearly marked “emergency exit” , undo & redo 49 Sample heuristics (cid:147) Consistency and standards (cid:147) platform conventions , not new names for same things (cid:147) Error prevention (cid:147) prevent problem from occurring in the first place (cid:147) Recognition rather than recall (cid:147) visible actions & options , don’t rely on user memory Evaluation example 50 Partial evaluation example (cid:147) Visibility of system status (cid:147) Current track , time , all visible (cid:147) Match between system and the real world (cid:147) Like a tape recorder (cid:147) Help user recognise & recover from errors (cid:147) Not many errors possible (cid:147) But can’t get back to where you were after an accidental track change (cid:147) Consistency and standards (cid:147) Access to Windows menu is unexpected Interaction styles summary (cid:147) History of interaction styles has emphasised changing units of interaction . (cid:147) Heuristic evaluation is at present the most popular usability evaluation method : (cid:147) simple and cheap to conduct (cid:147) easily justifiable on commonsense grounds (cid:147) Disadvantages (cid:147) doesn’t address deeper system design problems (cid:147) These require not just a surface description , but a model of the user . 51 User - centred design (cid:147) Early focus on users and tasks (cid:147) Cognitive models of user needs (cid:147) Ethnographic observation of task context (cid:147) Empirical measurement (cid:147) Experimental studies (cid:147) Hypothesis testing methods (cid:147) Think - aloud protocols (cid:147) Surveys and questionnaires (cid:147) Structured access to introspective data (cid:147) Iterative design (cid:147) Prototyping (cid:147) Contextual design Models of user cognition (cid:147) Engineering view of the user ( black box ) : input output input output From research into physical motion From research into visual perception User Computer 52 Top - down decomposition of user longtermmemory workingmemory vision motioncontrol problemsolving input output Vision longtermmemory workingmemory vision motioncontrol problemsolving input output 53 Gestalt laws of perception (cid:147) Principles of 2D display perception from 1920s Gestalt laws in user interface (cid:147) Palm Beach County , Florida - U . S . Presidential Election 2000 54 Visual search (cid:147) Finding letter in a list : T LIST ~ kN mvunmgsuignshetovazcvteown (cid:147) Finding different { colour , orientation } : T POPOUT ~ k Visual input decomposed (cid:147) Marr’s black box theory of vision retinalimage 3Dmodel primalsketch 2 1 / 2D sketch Pivot - handle - cylinder - hinge - screw - … - … - … 55 Marr’s theory of vision (cid:147) The black boxes in Marr’s model are almost an inverse of the modelling and rendering processes in 3D computer graphics (cid:147) Is this suspicious ? (cid:147) Whatever the 3D situation , current displays are actually rendered in 2 1 / 2 dimensions : A whole lot of rubbish which is not at all important apart from needing to show that a window can have contents . It would be better if it actually said something of value , or even better if it happened to include some graphics , controls ( such as menu bars or other realistic items ) but that would have the disadvantage of managing and copying multiple items ( or single large items in the case of windows grabbed from the screen - they could be down - sampled , but then they wouldn’t be legible anyway ) . So on the whole it is best to stick with this . Sorry . A whole lot of rubbish which is not at all important apart from needing to show that a window can have contents . It would be better if it actually said something of value , or even better if it happened to include some graphics , controls ( such as menu bars or other realistic items ) but that would have the disadvantage of managing and copying multiple items ( or single large items in the case of windows grabbed from the screen - they could be down - sampled , but then they wouldn’t be legible anyway ) . So on the whole it is best to stick with this . Sorry . A whole lot of rubbish which is not at all important apart from needing to show that a window can have contents . It would be better if it actually said something of value , or even better if it happened to include some graphics , controls ( such as menu bars or other realistic items ) but that would have the disadvantage of managing and copying multiple items ( or single large items in the case of windows grabbed from the screen - they could be down - sampled , but then they wouldn’t be legible anyway ) . So on the whole it is best to stick with this . Sorry . Motion control longtermmemory workingmemory vision motioncontrol problemsolving input output 56 Motion control - Fitts’ Law (cid:147) From experiments moving between two targets (cid:147) Time to point at a target depends on : (cid:147) target width (cid:147) amplitude of movement (cid:147) T = K log 2 ( A / W + 1 ) (cid:147) Useful prediction of time to move mouse across the screen to click on a button Memory longtermmemory workingmemory vision motioncontrol problemsolving input output 57 Working memory - Miller (cid:147) How many things can we remember at one time ? (cid:147) 4786779 (cid:147) G522KUJ (cid:147) In lists of letters , objects , digits : between 5 and 9 (cid:147) Seven plus or minus two ( G . A . Miller , 1956 ) (cid:147) Content is significant , e . g . remember 25 letters : (cid:147) ksnehfifmwbtdoanebgocnesj (cid:147) fruitapplegrapeguavalemon (cid:147) Working ( short - term ) memory can retain around 7 + / - 2 chunks of information . Long term memory (cid:147) Learning involves re - coding from short - term to long - term memory . (cid:147) Distributed “connectionist” models of memory : (cid:147) re - coding involves forming associations (cid:147) ( this model does not account for semantic structure ) . 58 Memory coding demonstration (cid:147) Get a pencil and paper Word list memory (cid:147) keyboard (cid:147) notebook (cid:147) speed (cid:147) banana (cid:147) absence (cid:147) withhold (cid:147) telephone (cid:147) category (cid:147) pencil (cid:147) rucksack (cid:147) concern (cid:147) camel (cid:147) classic (cid:147) right (cid:147) bicycle (cid:147) transfer (cid:147) operation (cid:147) armchair 59 Write them down ! Word list memory (cid:147) keyboard (cid:147) camel (cid:147) rucksack (cid:147) bicycle (cid:147) armchair (cid:147) banana (cid:147) notebook (cid:147) telephone (cid:147) pencil (cid:147) concern (cid:147) speed (cid:147) absence (cid:147) withhold (cid:147) category (cid:147) classic (cid:147) right (cid:147) transfer (cid:147) operation 60 Working memory and mnemonics (cid:147) Two kinds of working memory (cid:147) Phonological loop ( lists you can pronounce ) (cid:147) Visual - spatial sketchpad ( mental images ) (cid:147) Both modes can contribute to associations in long term memory . (cid:147) Both at once produce stronger memory trace (cid:147) Words that can be visualised are easier to remember - dual coding ( Paivio 1972 ) (cid:147) Basis of mnemonic techniques (cid:147) explain benefit of pictorial mnemonics in UIs Problem solving longtermmemory workingmemory vision motioncontrol problemsolving input output 61 Problem solving - GPS (cid:147) Generalised Problem Solver ( Ernst & Newell 1969 ) (cid:147) Reduce difference between current and goal state (cid:147) Decompose new goal into sub - goals ( recursively ) buy pizza get money go to shop buy it find job … Implications of GPS (cid:147) Computational model of problem - solving (cid:147) Recursive difference reduction results in a sub - goal hierarchy . (cid:147) Leaves of the goal tree are physical operations . (cid:147) Main function of perceptual ( visual ) input is to identify required difference reductions . (cid:147) Working memory imposes limits on depth of goal tree ( like a stack overflow ) . 62 Cognitive model of user needs longtermmemory workingmemory vision motioncontrol problemsolving input output The Model Human Processor (cid:147) Combine various psychological observations into a common quantitative framework . (cid:147) Decompose basic actions involved in user interaction tasks into : (cid:147) perceptual events (cid:147) motion events (cid:147) cognitive events (cid:147) Keystroke level model : Evaluate interface options by estimating total time taken for all operations 63 Keystroke Level Model Units (cid:147) K : press a key ( constant given task and skill ) (cid:147) 0 . 12 seconds for good typist , 0 . 28 seconds for average , 0 . 75 seconds for difficult tasks . (cid:147) H : home hands on mouse or keyboard (cid:147) 0 . 40 seconds . (cid:147) P : point with a mouse ( using Fitts ' law ) (cid:147) 0 . 8 to 1 . 5 seconds , 1 . 1 seconds on average . (cid:147) D : draw with mouse (cid:147) forget this - original assumptions now outdated . (cid:147) R : system response time to an action . (cid:147) M : time the user takes to mentally prepare action . KLM Example (cid:147) Problem : How long does it take to reformat a word in bold type within Microsoft Word , using either : a ) Keys only b ) Font dialog 64 Keys - only method < shift > + (cid:206) (cid:206) + (cid:206) (cid:206) + (cid:206) + (cid:206) + (cid:206) < ctrl > + b Keys - only method (cid:147) Mental preparation : M (cid:147) Home on keyboard : H (cid:147) Mental preparation : M (cid:147) Hold down shift : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Press (cid:206) : K (cid:147) Release shift : K (cid:147) Mental preparation : M (cid:147) Hold down control : K (cid:147) Press b : K (cid:147) Release control : K 65 Keys - only method (cid:147) 1 occurrence of H (cid:147) 3 occurrences of M (cid:147) 12 occurrences of K 0 . 40 1 . 35 * 3 0 . 28 * 12 7 . 81 seconds Font dialog method click , drag release , move click , move release move , click move , click 66 Fitts’ law estimate (cid:147) Would normally calibrate experimentally (cid:147) Crude estimate based on screen distance , and KLM performance average : (cid:147) T = K log 2 ( A / W + 1 ) = 1 . 1s ( on average ) (cid:147) Average distance : half window size ~ 220 pixels (cid:147) Average button width : menu item radius ~ 32 pixels (cid:147) K = 1 . 1 / log 2 ( 220 / 32 + 1 ) = 0 . 3695 Motion time estimates (cid:147) Estimate K = 0 . 36 ( from part II HCI course ) (cid:147) From start of “The” to end of “cat” ( T = 0 . 36 log 2 ( A / W + 1 ) ) : (cid:147) distance 110 pixels , width 26 pixels , T = 0 . 88 s (cid:147) From end of “cat” to Format item on menu bar : (cid:147) distance 97 pixels , width 25 pixels , T = 0 . 85 s (cid:147) Down to the Font item on the Format menu : (cid:147) distance 23 pixels , width 26 pixels , T = 0 . 34 s (cid:147) To the “bold” entry in the font dialog : (cid:147) distance 268 pixels , width 16 pixels , T = 1 . 53 s (cid:147) From “bold” to the OK button in the font dialog : (cid:147) distance 305 pixels , width 20 pixels , T = 1 . 49 s 67 Font dialog method (cid:147) Mental preparation : M (cid:147) Reach for mouse : H (cid:147) Point to “The” : P (cid:147) Click : K (cid:147) Drag past “cat” : P (cid:147) Release : K (cid:147) Mental preparation : M (cid:147) Point to menu bar : P (cid:147) Click : K (cid:147) Drag to “Font” : P (cid:147) Release : K (cid:147) Mental preparation : M (cid:147) Move to “bold” : P (cid:147) Click : K (cid:147) Release : K (cid:147) Mental preparation : M (cid:147) Move to “OK” : P (cid:147) Click : K Font dialog method (cid:147) 1 occurrence of H (cid:147) 4 occurrences of M (cid:147) 7 occurrences of K (cid:147) 6 mouse motions P (cid:147) Total for dialog method : (cid:147) Total for keyboard method : 0 . 40 1 . 35 * 4 0 . 28 * 7 1 . 1 + 0 . 88 + 0 . 85 + 0 . 34 + 1 . 53 + 1 . 49 13 . 95 seconds ( + 1 × R ) vs . 7 . 81 seconds 68 GOMS (cid:147) Extension of Keystroke Level Model : (cid:147) GOMS = Goals Operators Methods Selection (cid:147) Includes model of problem solving based on General Problem Solver (cid:147) User has some goal that can be decomposed . (cid:147) Operators are those at the keystroke level . (cid:147) Experienced users have a repertoire of methods . (cid:147) Time is required to select a method for some goal . (cid:147) Model also accounts for memory and learning . GOMS / KLM Assessment (cid:147) Can give actual quantitative performance estimates for a user interface design . (cid:147) Keystroke level model only describes expert user carrying out familiar task . (cid:147) Only weak representation of perceptual , cognitive and motor subsystems (cid:147) No consideration of the user’s knowledge . (cid:147) GOMS doesn’t account for main variations in performance (cid:147) Errors (cid:147) Strategy change 69 Beyond black box user models (cid:147) Why do users do the things they do ? (cid:147) Mental models of devices and programs (cid:147) adequate for the task … (cid:147) but may break down in unusual situations (cid:147) e . g . mental model of electricity as flowing water : ( Gentner & Gentner 1983 ) (cid:147) “taps” turn the flow on , “hoses” direct it to go where you need it . (cid:147) it can leak out and make a mess . (cid:147) This is good enough ! Detailed technical models don’t always help . User’s model ? 70 Designer’s model Wiring closet Toilets Kitchen Stair s Plantroom Mental simulation of a model (cid:147) Adding new record to a database (cid:147) Will the new record appear as the first or last ? (cid:147) If mental model of database is as a stack of cards … (cid:147) … the answer depends on whether the stack is face - up or face - down . Record 001 New record 71 What happened ? Data discarded ? Translation ? Override ? Two clipboards ? Layers ? Problem solving with a model Copy in Illustrator Paste in Photoshop Copy in Illustrator Paste in Word Can’t edit text Can edit text Understanding user context (cid:147) Model - based planning theories neglect the problem of situated action (cid:147) Sometimes complex behaviour simply results from a complex environment – cognitive modelling is not enough to understand it . 72 Ethnographic field studies (cid:147) Emphasise the detail of user activity , not theories and rationalisation . (cid:147) Researchers work in the field (cid:147) Observing context of user’s work (cid:147) Participating in subjects’ activities . (cid:147) Main characteristics : (cid:147) Observe subjects in a range of contexts . (cid:147) Observe over a substantial period of time . (cid:147) Full record of both activities and artefacts . (cid:147) Transcription from video / audio recordings Structured ethnographic analysis (cid:147) Division of labour and its coordination (cid:147) Plans and procedures (cid:147) When do they succeed and fail ? (cid:147) Where paperwork meets computer work (cid:147) Local knowledge and everyday skills (cid:147) Spatial and temporal organisation (cid:147) Organisational memory (cid:147) How do people learn to do their work ? (cid:147) Do formal methods match reality ? 73 Interviews (cid:147) Ethnographic observation is usually supplemented by interview (cid:147) Often conducted in the place of work during contextual enquiry . (cid:147) Encourages emphasis on user activity , rather than research concerns (cid:147) Can alternatively be theory - driven , with questions structured to : (cid:147) collect data into common framework (cid:147) ensure all important aspects covered Empirical studies of usability (cid:147) Empirical measures tend to investigate specific questions (cid:147) Ideally questions identified from contextual study (cid:147) Measure user characteristics (cid:147) Estimate parameters of skilled performance (cid:147) Identify common mental models (cid:147) Investigate potential designs (cid:147) Compare benefits of alternatives (cid:147) Assess performance against design goals 74 Controlled experiments (cid:147) Based on a number of observations : (cid:147) How long did Fred take to order a CD from Amazon ? (cid:147) How many errors did he make ? (cid:147) But every observation is different . (cid:147) So we compare averages : (cid:147) over a number of trials (cid:147) over a range of people ( experimental subjects ) (cid:147) Results usually have a normal distribution Experimental treatments (cid:147) A treatment is some modification that we expect to have an effect on usability : (cid:147) How long does Fred take to order a CD using this great new interface , compared to the crummy old one ? (cid:147) Expected answer : usually faster , but not always number of observationtrials time taken to order CD ( faster ) new old 75 Think - aloud studies (cid:147) Gain some understanding of mental models . (cid:147) Subject talks continuously while performing a defined experimental task . (cid:147) transcribed as a verbal protocol for detailed study of what user thinks is happening . (cid:147) Can be used to assess usability of prototypes during empirical evaluation , identifying breakdowns in usage or understanding . Surveys and questionnaires (cid:147) Collect subjective evaluation from users (cid:147) more like market research than like opinion polls (cid:147) Closed questions … (cid:147) yes / no or Likert scale ( opinion from 1 to 5 ) (cid:147) useful for statistical comparison (cid:147) Open questions … (cid:147) require coding frame to structure data (cid:147) useful for exploratory investigation (cid:147) Questionnaires : valuable for online studies 76 Product field testing (cid:147) Brings advantages of task analysis to assessment & testing phases of product development . (cid:147) Case study : Intuit Inc . ’s Quicken product (cid:147) originally based on interviews and observation (cid:147) follow - me - home programme after product release : (cid:147) random selection of shrink - wrap buyers ; (cid:147) observation while reading manuals , installing , using . (cid:147) Quicken success was attributed to the programme : (cid:147) survived predatory competition , later valued at $ 15 billion . Bad empirical techniques (cid:147) Purely affective reports : 20 subjects answered the question “Do you like this nice new user interface more than that ugly old one ? ” (cid:147) No observation at all : “It was decided that more colours should be used in order to increase usability . ” (cid:147) Introspective reports made by a single subject ( often the programmer or project manager ) : “I find it far more intuitive to do it this way , and the users will too . ” 77 Iterative design (cid:147) Cycle of construction and evaluation (cid:147) User interface designs are seldom right the first time , so improve chances of meeting user’s needs by repeating cycle of : (cid:147) building a prototype (cid:147) trying it out with users . (cid:147) Accurate simulation of interface helps develop and assess mental models (cid:147) Either illustrative mock - ups of interface , or interactive rapid prototypes as basis for discussion . Prototyping product concepts (cid:147) Emphasise appearance of the interface , create some behaviour with scripting functions : (cid:147) Visio – diagrams plus behaviour (cid:147) Macromedia Director – movie sequence (cid:147) JavaScript – web pages (cid:147) Visual Basic ( or VBA in PowerPoint , Excel … ) (cid:147) Cheap prototypes are good prototypes (cid:147) More creative solutions are often discovered by building more prototypes . (cid:147) Glossy prototypes can be mistaken for the real thing – either criticised more , or deployed ! 78 Prototypes without programming (cid:147) Low - fidelity prototypes ( or mockups ) (cid:147) Paper - and - glue simulation of interface (cid:147) User indicates action by pointing at buttons on the paper “screen” (cid:147) Experimenter changes display accordingly (cid:147) “ Wizard of Oz ” simulation method (cid:147) Computer user interface is apparently operational (cid:147) Actual system responses are produced by an experimenter in another room . (cid:147) Can cheaply assess effects of “intelligent” interfaces Participatory design (cid:147) Users become partners in the design team (cid:147) Originated in Scandinavian printing industry (cid:147) Recent research even includes children (cid:147) PICTIVE method (cid:147) Users generate scenarios of use in advance (cid:147) Low fidelity prototyping tools ( simple office supplies ) are provided for collaborative session (cid:147) The session is videotaped for data analysis (cid:147) CARD method (cid:147) Cards with screen - dumps on them (cid:147) Cards are arranged and rearranged on the table to explore workflow options 79 New trends in user interfaces (cid:147) Information appliances / Ubiquitous computing (cid:147) Adding computing and communication functions to common devices : (cid:147) toasters , desks , radios , refrigerators (cid:147) Integrating devices into the environment : (cid:147) by extending existing devices (cid:147) PDAs , cellphones , smart cards (cid:147) through new device categories (cid:147) intelligent walls / paper , active badges , keyrings , jewellery (cid:147) Emphasise functionality with minimal “interface” Part IV Design Challenges 2 lectures 80 Design Challenges (cid:147) Human errors and critical systems (cid:147) Hazards (cid:147) Risk (cid:147) Reliability (cid:147) Management failure ( CAPSA case study ) . THERAC - 25 (cid:147) 25 MEV ‘therapeutic accelerator’ for radiotherapy cancer treatment 81 THERAC - 25 operation (cid:147) Two modes of operation : (cid:147) 25 MEV focused electron beam on a target that generates X - rays for treating deep tumours (cid:147) 0 . 25 MEV spread electron beam for direct treatment of surface tumours (cid:147) Patient in shielded room , operator console outside (cid:147) operator confirms dosage settings from console (cid:147) Turntable between patient and beam contains : (cid:147) scan magnet for steering low power beam (cid:147) X - ray target to be placed at focus of high power beam (cid:147) plunger to stop turntable in one or other position (cid:147) microswitches on the rim to detect turntable position THERAC hazard (cid:147) Focused beam for X - ray therapy (cid:147) 100x the beam current of electron therapy (cid:147) highly dangerous to living tissue (cid:147) Previous models ( Therac 6 and 20 ) (cid:147) fuses and mechanical interlocks prevented high intensity beam selection unless X - ray target in place (cid:147) Therac 25 safety mechanisms replaced by software . (cid:147) fault tree analysis arbitrarily assigned probability 10 - 11 to fault ‘computer selects wrong energy’ . (cid:147) But from 1985 - 87 , at least six accidents (cid:147) patients directly irradiated with the high energy beam (cid:147) three died as consequence (cid:147) Major factors : poor human computer interface , poorly written , unstructured code . 82 The THERAC accidents (cid:147) Marietta , Georgia , June 1985 : (cid:147) Woman ' s shoulder burnt . Sued & settled out of court . Not reported to FDA , or explained (cid:147) Ontario , July 1985 : (cid:147) Woman ' s hip burnt . Died of cancer . 1 - bit switch error possible cause , but couldn’t reproduce the fault . (cid:147) Yakima , Washington , December 85 : (cid:147) Woman ' s hip burnt . Survived . ‘Could not be a malfunction’ (cid:147) Tyler , Texas , March 86 : (cid:147) Man burned in neck and died . AECL denied knowledge of any hazard (cid:147) Tyler , Texas , April 86 : (cid:147) 2 nd man burnt on face and died . Hospital physicist recreated fault : if parameters edited too quickly , interlock overwritten (cid:147) Yakima , Washington , January 87 : (cid:147) Man burned in chest and died . Due to different bug thought now to have also caused the Ontario accident THERAC lessons learned (cid:147) AECL ignored safety aspects of software (cid:147) assumed when doing risk analysis ( and investigating Ontario ) that hardware must be at fault (cid:147) Confused reliability with safety (cid:147) software worked & accidents rare … (cid:147) … so assumed it was ok (cid:147) Lack of defensive design (cid:147) machine couldn ' t verify that it was working correctly (cid:147) Failure to tackle root causes (cid:147) Ontario accident not properly explained at the time ( nor was first Yakima incident ever ! ) 83 More THERAC lessons (cid:147) Complacency (cid:147) medical accelerators previously had good safety record (cid:147) Unrealistic risk assessments (cid:147) “think of a number and double it” (cid:147) Inadequate reporting , follow - up and government oversight . (cid:147) Inadequate software engineering (cid:147) specification an afterthought (cid:147) complicated design (cid:147) dangerous coding practices (cid:147) little testing (cid:147) careless human interface (cid:147) careless documentation design ‘Human Error’ probabilities (cid:147) Extraordinary errors 10 - 5 (cid:147) difficult to conceive how they would occur (cid:147) stress free environment , powerful success cues (cid:147) Errors in common simple tasks 10 - 4 (cid:147) regularly performed , minimum stress involved (cid:147) Press wrong button , read wrong display 10 - 3 (cid:147) complex tasks , little time , some cues necessary (cid:147) Dependence on situation and memory 10 - 2 (cid:147) unfamiliar task with little feedback and some distraction : (cid:147) Highly complex task 10 - 1 (cid:147) considerable stress , little time to perform (cid:147) Unfamiliar and complex operations O ( 10 ^ 0 ) (cid:147) involving creative thinking , time short , stress high “Skill is more reliable than knowledge” 84 Modes of Automation ( a ) Computer provides information and advice to operator ( perhaps using a mechanical or electrical display , perhaps by reading sensors directly ) Computer Operator Displays Controls Sensors Actuators Process Modes of Automation ( b ) Computer reads and interprets sensor data for operator Computer Operator Displays Controls Sensors Actuators Process 85 Modes of Automation ( c ) Computer interprets and displays data for operator and issues commands ; operator makes varying levels of decisions Computer Operator Displays Controls Sensors Actuators Process Modes of Automation ( d ) Computer assumes complete control of process with operator providing advice or high - level direction Computer Operator Sensors Actuators Process 86 Critical software (cid:147) Many systems have the property that a certain class of failures is to be avoided if at all possible (cid:147) safety critical systems (cid:147) failure could cause death , injury or property damage (cid:147) security critical systems (cid:147) failure could result in leakage of classified data , confidential business data , personal information (cid:147) business critical systems (cid:147) failure could affect essential operations (cid:147) Critical computer systems have a lot in common with critical mechanical or electrical systems (cid:147) bridges , flight controls , brakes , locks , . . . (cid:147) Start out by studying how systems fail Definitions (cid:147) Error : (cid:147) design flaw or deviation from intended state (cid:147) Failure : (cid:147) non - performance of the system within some subset of the specified environmental conditions (cid:147) Fault : (cid:147) Computer science : error → fault → failure (cid:147) but note electrical engineering terminology : ( error → ) failure → fault (cid:147) Reliability : (cid:147) probability of failure within a set period of time (cid:147) Sometimes expressed as ‘mean time to ( or between ) failures’ - mttf ( or mtbf ) 87 More definitions (cid:147) Accident (cid:147) undesired , unplanned event that results in a specified kind ( and level ) of loss (cid:147) Hazard (cid:147) set of conditions of a system , which together with conditions in the environment , will lead to an accident (cid:147) thus , failure + hazard → accident (cid:147) Risk : hazard level , combined with : (cid:147) Danger : probability that hazard → accident (cid:147) Latency : hazard exposure or duration (cid:147) Safety : freedom from accidents System Safety Process (cid:147) Obtain support of top management , involve users , and develop a system safety program plan : (cid:147) identify hazards and assess risks (cid:147) decide strategy for each hazard ( avoidance , constraint , . . . . ) (cid:147) trace hazards to hardware / software interface : which will manage what ? (cid:147) trace constraints to code , and identify critical components and variables to developers (cid:147) develop safety - related test plans , descriptions , procedures , code , data , test rigs . . . (cid:147) perform special analyses such as iteration of human - computer interface prototype and test (cid:147) develop documentation system to support certification , training , . . (cid:147) Safety needs to be designed in from the start . It cannot be retrofitted 88 Real - time systems (cid:147) Many safety critical systems are also real time (cid:147) typically used in monitoring or control (cid:147) These have particular problems (cid:147) Extensive application knowledge often needed for design (cid:147) Critical timing makes verification techniques inadequate (cid:147) Exception handling particularly problematic . (cid:147) eg Ariane 5 ( 4 June 1996 ) : (cid:147) Ariane 5 accelerated faster than Ariane 4 (cid:147) alignment code had an ‘operand error’ on float - to - integer conversion (cid:147) core dumped , core file interpreted as flight data (cid:147) full nozzle deflection → 20 degrees angle of attack → booster separation → self destruct Hazard Analysis (cid:147) Often several hazard categories e . g . Motor Industry Software Reliability Association uses : (cid:147) Uncontrollable : failure outcomes not controllable by humans and likely to be extremely severe (cid:147) Difficult to control : effects might possibly be controlled , but still likely to lead to very severe outcomes (cid:147) Debilitating : effects usually controllable , reduction in safety margin , outcome at worst severe (cid:147) Distracting : operational limitations , but a normal human response limits outcome to minor (cid:147) Nuisance : affects customer satisfaction , but not normally safety (cid:147) Different hazard categories require different failure rates and different levels of investment in varying software engineering techniques 89 Failure modes & effects analysis (cid:147) FMEA is heart of NASA safety methodology (cid:147) software not included in NASA FMEA (cid:147) but other organisations use FMEA for software (cid:147) Look at each component ' s functional modes and list the potential failures in each mode . (cid:147) Describe worst - case effect on the system (cid:147) 1 = loss of life (cid:147) 2 = loss of mission (cid:147) 3 = other (cid:147) Secondary mechanisms deal with interactions (cid:147) Alternative : Fault Tree Analysis (cid:147) work back systematically from each identified hazard (cid:147) identify where redundancy is , which events are critical Redundancy (cid:147) Some systems , like Stratus & Tandem , have highly redundant hardware for ' non - stop processing‘ (cid:147) But then software is where things break (cid:147) ‘Hot spare’ inertial navigation on Ariane 5 failed first ! (cid:147) Idea : multi - version programming (cid:147) But : significantly correlated errors , and failure to understand requirements comes to dominate ( Knight , Leveson 86 / 90 ) (cid:147) Also , many problems with redundancy management . For example , 737 crashes Panama / Kegworth CPU CPU CPU CPU ` ? ? 90 Example - Kegworth Crash (cid:147) British Midland 737 - 400 flight 8 January 1989 (cid:147) left Heathrow for Belfast with 8 crew + 118 passengers (cid:147) climbing at 28 , 300’ , fan blade fractured in # 1 ( left ) engine . Vibration , shuddering , smoke , fire (cid:147) Crew mistakenly shut down # 2 engine , cut throttle to # 1 to descend to East Midlands Airport . (cid:147) Vibration reduced , until throttle reopened on final approach (cid:147) Crashed by M1 at Kegworth . 39 died in crash and 8 later in hospital ; 74 of 79 survivors seriously injured . (cid:147) Initial assessment (cid:147) engine vibration sensors cross - wired by accident (cid:147) Mature assessment (cid:147) crew failed to read information from new digital instruments (cid:147) Recommendations : (cid:147) human factors evaluations of flight systems , clear ‘attention getting facility’ , video cameras on aircraft exterior Myths of software safety (cid:147) Computers are cheaper than analogue or electromechanical devices (cid:147) shuttle software costs $ 100 , 000 , 000 p . a . to maintain (cid:147) Software is easy to change (cid:147) but hard ( and expensive ) to change safely (cid:147) Computers are more reliable (cid:147) shuttle had 16 potentially fatal bugs since 1980 – half of them had actually flown (cid:147) Increasing software reliability increases safety (cid:147) perfectly functioning software still causes accidents 91 More myths (cid:147) Testing or formal verification can remove all errors (cid:147) exhaustive testing is usually impossible (cid:147) proofs can have errors too (cid:147) Software reuse increases safety (cid:147) using the same software in a new environment is likely to uncover more errors (cid:147) Automation can reduce risk (cid:147) potential not always realised , humans still need to intervene CAPSA project (cid:147) Now Cambridge University Financial System (cid:147) Previous systems : (cid:147) In - house COBOL system 1966 - 1993 (cid:147) Didn’t support commitment accounting (cid:147) Reimplemented using Oracle + COTS 1993 (cid:147) No change to procedures , data , operations (cid:147) First attempt to support new accounts : (cid:147) Client - server “local” MS Access system (cid:147) To be “synchronised” with central accounts (cid:147) Loss of confidence after critical review (cid:147) May 1998 : consultant recommends restart with “industry standard” accounting system 92 CAPSA project (cid:147) Detailed requirements gathering exercise (cid:147) Input to supplier choice between Oracle vs . SAP (cid:147) Bids & decision both based on optimism (cid:147) ‘vapourware’ features in future versions (cid:147) unrecognised inadequacy of research module (cid:147) no user trials conducted , despite promise (cid:147) Danger signals (cid:147) High ‘rate of burn’ of consultancy fees (cid:147) Faulty accounting procedures discovered (cid:147) New management , features & schedule slashed (cid:147) Bugs ignored , testing deferred , system went live (cid:147) “Big Bang” summer 2000 : CU seizes up CAPSA mistakes (cid:147) No phased or incremental delivery (cid:147) No managed resource control (cid:147) No analysis of risks (cid:147) No library of documentation (cid:147) No requirements traceability (cid:147) No policing of supplier quality (cid:147) No testing programme (cid:147) No configuration control 93 CAPSA lessons (cid:147) Classical system failure ( Finkelstein ) (cid:147) More costly than anticipated (cid:147) £10M or more , with hidden costs (cid:147) Substantial disruption to organisation (cid:147) Placed staff under undue pressure (cid:147) Placed organisation under risk of failing to meet financial and legal obligations (cid:147) Danger signs in process profile (cid:147) Long hours , high staff turnover etc (cid:147) Systems fail systemically (cid:147) not just software , but interaction with organisational processes Problems of large systems (cid:147) Study of 17 large & demanding systems (cid:147) ( Curtis , Krasner , Iscoe , 1988 ) (cid:147) 97 interviews investigated organisational factors in project failure (cid:147) Main findings - large projects fail because (cid:147) ( 1 ) thin spread of application domain knowledge (cid:147) ( 2 ) fluctuating and conflicting requirements (cid:147) ( 3 ) breakdown of communication and coordination (cid:147) These were often linked , with typical progression to disaster ( 1 ) → ( 2 ) → ( 3 ) 94 More large system problems (cid:147) Thin spread of application domain knowledge (cid:147) who understands all aspects of running a telephone service / bank branch network / hospital ? (cid:147) many aspects are jealously guarded secrets (cid:147) sometimes there is structured knowledge ( eg pilots ) (cid:147) otherwise , with luck , you may find a genuine ' guru‘ (cid:147) So expect specification mistakes (cid:147) Even without mistakes , specification may change : (cid:147) new competitors , new standards , new equipment , fashion (cid:147) change in client : takeover , recession , refocus , … (cid:147) new customers , e . g . overseas , with different requirements (cid:147) Success and failure both bring their own changes ! More large system problems (cid:147) How to cope with communications overhead ? (cid:147) Traditionally via hierarchy (cid:147) information flows via managers , they get overloaded (cid:147) Usual result - proliferation of committees (cid:147) politicking , responsibility avoidance , blame shifting (cid:147) Fights between ' line ' and ' staff ' departments (cid:147) Management attempts to gain control may result in constriction of some interfaces , e . g . to customer (cid:147) Managers often loath to believe bad news (cid:147) much less pass it on (cid:147) Informal networks vital , but disrupted by ' reorganisation‘ (cid:147) We trained hard , but it seemed that every time we were beginning to form up into teams , we would be reorganised . I was to learn later in life that we tend to meet any new situation by reorganising , and a wonderful method it can be for creating the illusion of progress while producing confusion , inefficiency and demoralisation . (cid:147) Caius Petronius ( AD 66 ) : 95 Part V Project Management 2 lectures Project Management (cid:147) Lifecycle costs and Brooks’ Law (cid:147) The classic “waterfall model” (cid:147) Evolutionary and incremental models (cid:147) Spiral model (cid:147) Rapid Application Development (cid:147) Rational Unified Process (cid:147) Novel structures (cid:147) Chief programmer (cid:147) Egoless programming (cid:147) eXtreme Programming (cid:147) Changing ( maturing ) organisations 96 What does code cost ? (cid:147) Even if you know how much was spent on a project , (cid:147) how do you measure what has been produced ? (cid:147) Does software cost per mile / per gallon / per pound ? (cid:147) Common measure is KLOC ( thousand lines of code ) (cid:147) First IBM measures ( 60 ' s ) : (cid:147) 1 . 5 KLOC / man year ( operating system ) (cid:147) 5 KLOC / man year ( compiler ) (cid:147) 10 KLOC / man year ( app ) (cid:147) AT & T measures : (cid:147) 0 . 6 KLOC / man year ( compiler ) (cid:147) 2 . 2 KLOC / man year ( switch ) Metrics & estimation (cid:147) More sophisticated measures : (cid:147) Halstead ( entropy of operators , operands ) (cid:147) McCabe ( graph complexity of control structures ) (cid:147) For estimation : “Function Point Analysis” (cid:147) Lessons learned from applying empirical measures : (cid:147) main productivity gains come from using appropriate high level language (cid:147) each KLOC does more (cid:147) wide variation between individuals (cid:147) more than 10 times 97 Brooks’ Law (cid:147) Brooks’ The Mythical Man - Month attacked idea that “men” and months interchangeable , because : (cid:147) more people → more communications complexity (cid:147) adding people → productivity drop as they are trained (cid:147) e . g consider project estimated at 3 men x 4 months (cid:147) but 1 month design phase actually takes 2 months ! (cid:147) so 2 months left to do work estimated at 9 man - months (cid:147) add 6 men , but training takes 1 month (cid:147) so all 9 man - months work must be done in the last month . (cid:147) 3 months work for 3 can ' t be done in 1 month by 9 ( complexity , interdependencies , testing , . . . ) (cid:147) Hence Brooks ' Law : “Adding manpower to a late software project makes it later” Boehm’s empirical study (cid:147) Brooks’ Law ( described 1975 ) led to empirical studies (cid:147) Boehm Software Engineering Economics , 1981 : (cid:147) cost - optimum schedule time to first shipment , T (cid:147) = 2 . 5 x cube root of total number of man months (cid:147) with more time , cost rises slowly (cid:147) ‘people with more time take more time’ (cid:147) with less time , the cost rises sharply (cid:147) Hardly any projects succeed in < 0 . 75T , regardless of number of people employed ! (cid:147) Other studies show if more people are to be added , should be added early rather than late (cid:147) Some projects have more and more resources thrown at them yet are never finished at all , others are years late . 98 The software life cycle (cid:147) Cost of owning a system not just development but whole cost over life cycle : (cid:147) Development , Testing , Operations , Replacement (cid:147) In ‘bespoke’ software days (cid:147) 90 % of IT department programming effort was maintenance of old systems (cid:147) Most research on software costs and methods focuses on this business model . (cid:147) Different business models apply (cid:147) to safety critical and related software (cid:147) to package software (cid:147) but many lessons apply to them all Life cycle costs (cid:147) Development costs ( Boehm , 75 ) Reqmts / Spec Implement Test Cm’d & Control 48 % 20 % 34 % Space 34 % 20 % 46 % O / S 33 % 17 % 50 % Scientific 44 % 26 % 30 % Business 44 % 28 % 28 % (cid:147) Maintenance costs : typically ten times as much again 99 Reducing life cycle costs (cid:147) By the late 60’s the industry was realising : (cid:147) Well built software cost less to maintain (cid:147) Effort spent getting the specification right more than pays for itself by : (cid:147) reducing the time spent implementing and testing (cid:147) reducing the cost of subsequent maintenance . Common difficulties (cid:147) Code doesn ' t ‘wear out’ the way that gears in machinery do , but : (cid:147) platform and application requirements change over time , (cid:147) code becomes more complex , (cid:147) it becomes less well documented , (cid:147) it becomes harder to maintain , (cid:147) it becomes more buggy . (cid:147) Code failure rates resemble those of machinery (cid:147) ( but for different reasons ! ) bugs time 100 More common difficulties (cid:147) When software developed ( or redeveloped ) (cid:147) unrealistic price / performance expectations (cid:147) as hardware gets cheaper , software seems dear (cid:147) Two main causes of project failure (cid:147) incomplete / changing / misunderstood requirements (cid:147) insufficient time (cid:147) These and other factors lead to the ‘tar pit’ (cid:147) any individual problem can be solved (cid:147) but number and complexity get out of control The Waterfall Model Implementation & unit testing Operations & maintenance Integration & system testing Requirements Specification written in user ' s language written in system language checks units against specification Checks requirements are met (cid:147) ( Royce , 1970 ; now US DoD standard ) 101 The Waterfall Model Implementation & unit testing Operations & maintenance Integration & system testing Requirements Specification Requirements are developed by at least two groups of people who speak different languages and who come from different disciplines . Specification , Design and Implementation are done by a group of single - discipline professionals who usually can communicate with one another . Installation is usually done by people who don ' t really understand the issues or the problem or the solution . After a start - up period , Operation is almost always left to people who don ' t understand the issues , ethics , problem or solution ( and often little else ) . Maintenance is usually performed by inexperienced people who have forgotten much of what they once knew about the problem or the solution . ( this information repeated on next slide ) Requirements are developed by at least two groups of people who speak different languages and who come from different disciplines . Specification , Design and Implementation are done by a group of single - discipline professionals who usually can communicate with one another . Installation is usually done by people who don ' t really understand the issues or the problem or the solution . After a start - up period , Operation is almost always left to people who don ' t understand the issues , ethics , problem or solution ( and often little else ) . Maintenance is usually performed by inexperienced people who have forgotten much of what they once knew about the problem or the solution . New York security consultant Robert Courtney examined 1000s of security breaches - 68 % due to careless or incompetent operations . 102 Feedback in the waterfall model (cid:147) Validation operations provide feedback (cid:147) from Specification to Requirements (cid:147) from Implementation / unit testing to Specification (cid:147) Verification operations provide feedback (cid:147) from Integration / system testing to Implementation / unit testing (cid:147) from operations / maintenance back to Integration / system testing (cid:147) What ' s the difference ? (cid:147) Validation : ` are we building the right system ? ' (cid:147) Verification : ` are we building it right ? ' (cid:147) What about validation from operations back to requirements ? (cid:147) this would change the model ( and erode much of its value ) Advantages of waterfall model (cid:147) Project manager ' s task easier with clear milestones (cid:147) Can charge for requirement changes (cid:147) each stage can even be a separate contract (cid:147) System goals , architecture & interfaces clarified together (cid:147) conducive to good design practices (cid:147) Compatible with many tools and design methods (cid:147) Where applicable , waterfall is an ideal approach (cid:147) critical factor : whether requirements can be defined in detail , in advance of any development or prototyping work . (cid:147) sometimes they can ( e . g . a compiler ) ; (cid:147) often they can ' t ( e . g . user - centred design ) 103 Iterative development (cid:147) Some systems need iteration to clarify requirements (cid:147) Others make operations fail - safe as possible (cid:147) Naive approach : (cid:147) This algorithm needn ' t terminate ( satisfactorily ) (cid:147) Can we combine management benefits of waterfall , with flexibility of iterative development ? Develop outline spec Buildsystem Use system System OK ? Deliversystem YES NO Spiral model ( Boehm , 88 ) Requirements plan Life - cycle plan Risk analysis Prototype 1 Developmentplan Risk analysis Prototype 2 Softwarerequirements Requirementsvalidation Operationalprototype Plan next phases Determine objectives , alternatives , constraints Evaluate alternatives and resolve risks Develop and verify next level product Detaileddesign Code Test Integrate Implement Increasing cost 104 Features of spiral model (cid:147) Driven by risk management (cid:147) Fixed number of iterations , each of form : (cid:147) identify alternatives , then (cid:147) assess and choose , then (cid:147) build and evaluate (cid:147) Allows for ( some amount of ) iterative prototyping in early stages Rapid Application Development (cid:147) Mainly focused on user - centred design (cid:147) Includes “Joint Application Development” (cid:147) Intensively collaborative requirements gathering exercise , with all stakeholders involved (cid:147) Implementation is iterative ( < 6 month cycles ) (cid:147) Lifecycle phases (cid:147) Project initiation (cid:147) JAD workshop (cid:147) Iterative design and build (cid:147) Evaluate final system (cid:147) Implementation review 105 Rational Unified Process (cid:147) Proposed by UML authors (cid:147) Phases ( any of which may iterate ) (cid:147) Inception – capture business rationale and scope (cid:147) Elaboration – domain model , architectural design , risk analysis , implementation planning (cid:147) Construction – incremental implementation of use cases , iterative code change , refactoring (cid:147) Transition – final touches , including optimisation (cid:147) Any may vary in degree of ceremony ( documentation , contracts , sign - off etc . ) Universal project management (cid:147) Manager deals with human consequences of intrinsic complexity by : (cid:147) Planning : estimation , identifying risk (cid:147) Monitoring : progress & tolerance for “slip” (cid:147) Controlling : effort distribution & scheduling (cid:147) Motivating : may be based on technical respect from staff , but managerial competence essential (cid:147) Management tools : (cid:147) PERT ( program evaluation and review technique ) (cid:147) CPM ( critical path method ) (cid:147) Software implementing these ( e . g . MS Project ) 106 Activity Charts (cid:147) Show a project ' s tasks and milestones ( with allowable variation ) (cid:147) Problem : relatively hard to visualise interdependencies and knock - on effects of any milestone being late . T1T2T3 T4 T6T5 T7 T8T9 T10 M1 M2 M3 4 / 7 11 / 7 18 / 7 25 / 7 1 / 8 8 / 8 15 / 8 22 / 8 29 / 8 Critical Path Analysis (cid:147) Drawing activity chart as graph with dependencies makes critical path easier to find and monitor (cid:147) PERT charts include bad / expected / good durations (cid:147) warn of trouble in time to take actions (cid:147) mechanical approach not enough (cid:147) overestimates of duration come down steadily (cid:147) underestimates usually covered up until near deadline ! (cid:147) management heuristic (cid:147) the project manager is never on the critical path 107 Documentation (cid:147) Projects have various management documents : (cid:147) contracts - budgets - activity charts & graphs - staff schedules (cid:147) Plus various engineering documents : (cid:147) requirements - hazard analysis - specification - test plan - code (cid:147) How do we keep all these in step ? (cid:147) Computer science tells us it ' s hard to keep independent files in synch (cid:147) Possible solutions (cid:147) high tech : CASE tool (cid:147) bureaucratic : plans and controls dept (cid:147) convention : self documenting code Alternative philosophies (cid:147) Some programmers are very much more productive than others - by a factor of ten or more (cid:147) ‘Chief programmer teams’ , developed at IBM ( 1970 - 72 ) seek to capitalise on this (cid:147) team with one chief programmer + apprentice / assistant , (cid:147) plus toolsmith , librarian , admin assistant , etc (cid:147) get the maximum productivity from the available talent (cid:147) Can be very effective during the implementation stage of a project (cid:147) However , each team can only do so much (cid:147) Complementary to ( rather than opposed to ) waterfall / spiral and other project management methodologies 108 More alternative philosophies (cid:147) ‘Egoless programming’ (cid:147) code owned by team , not by individual ( Weinberg , 1971 ) . (cid:147) in direct opposition to the ‘chief programmer’ idea . (cid:147) ‘Xtreme Programming’ ( XP ) (cid:147) small groups work together for fast development cycle iteration , early exposure to users . ( Beck 199x ) (cid:147) ‘Literate programming’ (cid:147) code as a work of art , designed not just for machine but for human readers / maintainers ( Knuth et al ) (cid:147) Objections : (cid:147) can lead to wrong design decisions becoming entrenched , defended , propagated more passionately (cid:147) ‘creeping elegance’ may be symptom of project out of control (cid:147) There is no silver bullet ! ISO 9000 quality standards (cid:147) Not software specific (cid:147) Requires a quality manual : documented quality system (cid:147) Design control : requirements documentation and functional traceability (cid:147) Inspection ( review ) : plans and status (cid:147) Test status : what tests will be done , which have been conducted , which successful (cid:147) Handling : library , backup and configuration 109 Capability Maturity Model (cid:147) Emphasises shift from ' product ' to ' process ' (cid:147) A good team isn ' t permanent (cid:147) need repeatable , manageable performance (cid:147) not outcome dependent on individual genius or heroics (cid:147) Capability Maturity Model ( CMM ) (cid:147) ‘market leading’ approach to this problem (cid:147) developed at CMU with DoD funding (cid:147) identifies five levels of increasing maturity in a software team or organisation (cid:147) provides a guide to moving up from one level to the next Levels of CMM Initial ( 1 ) Repeatable ( 2 ) Defined ( 3 ) Managed ( 4 ) Optimising ( 5 ) Disciplinedprocess Standard , consistentprocess Predictableprocess Continuouslyimprovingprocess Empirical model based on observations and refined over a number of years How to move up the ladder : focus at each stage on what is most lacking 110 Levels of CMM Initial ( 1 ) Projects are chaotic Success depends on luck and heroism Repeatable ( 2 ) Defined ( 3 ) Managed ( 4 ) Optimising ( 5 ) Levels of CMM Initial ( 1 ) Repeatable ( 2 ) Software configuration management Software quality assurance Software subcontract management Software project tracking and oversight Software project planning Requirements management Defined ( 3 ) Managed ( 4 ) Optimising ( 5 ) 111 Levels of CMM Defined ( 3 ) Peer reviews Intergroup coordination Software product engineering Integrated software management Training programme Organisation process definition Organisation process focus Initial ( 1 ) Repeatabl e ( 2 ) Managed ( 4 ) Optimising ( 5 ) Levels of CMM Managed ( 4 ) Software quality management Quantitative process management Optimising ( 5 ) Initial ( 1 ) Repeatable ( 2 ) Defined ( 3 ) 112 Levels of CMM Optimising ( 5 ) Process change management Technology change management Defect prevention Initial ( 1 ) Repeatab le ( 2 ) Defined ( 3 ) Managed ( 4 ) CONCLUSIONS (cid:147) Software engineering and design are hard (cid:147) Completely generic tools meet very specific tasks (cid:147) Must engage with human needs in social context (cid:147) Fundamentally about managing complexity (cid:147) Craft skills of software construction (cid:147) Decomposition and modular construction (cid:147) Modelling tools that enable analysis and design (cid:147) User centred design : knowledge & attitude (cid:147) Broad understanding of human and social sciences (cid:147) Protect user needs in corporate / technical environment (cid:147) Systematic management (cid:147) Awareness of lifecycle model and suitable tools (cid:147) Measuring and reflecting on process improvement