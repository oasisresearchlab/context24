Software Cinema—Video - based Requirements Engineering Oliver Creighton Siemens AG Corporate Technology Software & Engineering 1 Otto - Hahn - Ring 6 , 81730 München , Germany creighto @ in . tum . de Martin Ott , Bernd Bruegge Technische Universität München Institut für Informatik / I1 Applied Software Engineering Boltzmannstraße 3 , 85748 Garching , Germany [ ott , bruegge ] @ in . tum . de Abstract The dialogue between end - user and developer presents several challenges in requirements development . One issue is the gap between the conceptual models of end - users and formal speciﬁcation / analysis models of developers . This paper presents a novel technique for the video analysis of scenarios , relating the use of video - based requirements to process models of software development . It uses a knowl - edge model—an RDF graph—based on a semiotic interpre - tation of ﬁlm language , which allows mapping conceptual into formal models . It can be queried with RDQL , a query language for RDF . The technique has been implemented with a tool which lets the analyst annotate objects as well as spatial or tem - poral relationships in the video , to represent the conceptual model . The video can be arranged in a scenario graph ef - fectively representing a multi - path video . It can be viewed in linear time order to facilitate the review of individual sce - narios by end - users . Each multi - path scene from the conceptual model is mapped to a UML use case in the formal model . A UML sequence diagram can also be generated from the annota - tions , which shows the direct mapping of ﬁlm language to UML . This sequence diagram can be edited by the analyst , reﬁning the conceptual model to reﬂect deeper understand - ing of the application domain . The use of the Software Cinema technique is demon - strated with several prototypical applications . One exam - ple is a loan application scenario for a ﬁnancial services consulting ﬁrm which acted as an end - user . 1 . INTRODUCTION Innovation begins and ends with people : Before a vision - ary system can be described , stakeholders in the entire prod - uct lifecycle need to be identiﬁed . As market success is no - toriously hard to predict , to better understand the people it involves seems like a particularly promising idea . [ 20 ] A fo - cus on customers and end - users and their early involvement in a development project is a cornerstone of agile methods . [ 7 ] As many small design decisions inﬂuence the ﬁnal look and feel of products , a representative group of end - users should ideally be involved in all of them . Sadly , this is of - ten impracticable . Scalability requirements of software processes , involv - ing ever more people in various roles , have aggravated the situation . This is in large parts due to the need for decom - position of large and complex systems to managable chunks that can be developed by single developers . This model hi - erarchy , however , has not always brought the desired effect of stakeholders being able to quickly and easily grasp the scope of the entire system . Even in state - of - the - art nota - tions , models are still expressed in languages designed for solution domain experts . Particularly for systems that con - sist of many diverse and dynamically changing components , maybe even used in unforseen environments , we still lack a system representation that will tell the story and paint the big picture . [ 21 ] From a requirements negotiation perspec - tive , this situation can be broken down into the following key challenges : 1 . Expectations . It can be hard to deﬁne the expectations that stakeholders have of a new system . Conversely , systems and subsystems also have expectations of their environment . Unfortunately , expectations and environ - ment must be assumed to change over time . Effective negotiation must try to elicit expectations and precon - ceptions of stakeholders , but clear deﬁnitions of expec - tations may never be found . From the system perspec - tive , a comparable challenge is the minimal deﬁnition of an environment in which a subsystem can operate . 2 . Change . One aspect of requirements negotiation is the search for appropriate conceptual models . Stakehold - 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 ers base these on their experience , and thus effectively reuse the concepts for new systems . If , however , rev - olutionary changes occur because of disruptive tech - nologies , it may become necessary to revise the com - monplace notions of what a new system does and how . This also poses a challenge to the willingness of stake - holders to consider revolutionary new ideas . 3 . Communication . Stakeholders may have differing per - ceptions of reality , e . g . , software systems for manag - ing loans will look and feel differently for debitor and creditor . Directly stating expectations in a neutral form that anybody will perceive identically is challenging , if possible at all . To increase the awareness of “other” perspectives , communication needs to be concrete and direct . 4 . Language . Stakeholders may have differing back - grounds , terminology , and education . This naturally impacts how they communicate . For two people , the same concept might be called differently ( a synonym ) or—even harder to detect—the same word might be used to mean different things ( a homonym ) . Finding such inconsistencies in communication is a challenge , but there might also be a great potential there for deﬁn - ing agreeable solutions based on concepts rather than words . 5 . Vision . Stakeholders should be convinced of a par - ticular vision for a new system ; and the visions of all stakeholders should be in ( negotiated ) agreement . Of - tentimes , a visionary system is explained by its con - ceived features . But features are usually described on a level of detail that does not facilitate grasping the wealth of potential scenarios of innovative systems . The key challenge is reaching a high expressiveness of statements without convoluting the essence of the visionary system . Models of software are built for speciﬁcation , analysis , or communication . The closer one gets towards machine - level , the more formal the representation of software be - comes . Models for communication are usually on a con - ceptual level . Model - driven design works by a series of transformations in model space , directed towards a formal representation of the proposed solution . When developers encounter an existing solution for which no representation in model space is available , they transform the implementa - tion into a conceptual model through ‘reverse engineering , ’ or—as it is more commonly called—analysis . The constant cycle between formal and conceptual models is what under - lies agile approaches . In eXtreme Programming , for exam - ple , the only formal model that developers create at all is testable code . [ 2 ] Implemen - tation reverse engineering forward engineering analysis communi - cation speciﬁ - cation model transfor - mations formal conceptual Figure 1 . Model and Implementation : We consider two distinct sets of representations for software : Models on a higher level of abstraction live in model space . Source code and circuit diagrams of employed hardware , i . e . machine - level solutions live in imple - mentation space . 2 . RELATED WORK The main inﬂuences for our research are model - driven software development , models and metadata of digital video , and a spectrum of prototyping techniques . We shall brieﬂy discuss them in the following sections . 2 . 1 . Model - driven Approaches To aid inventors in assessing the scope and context in which new devices might be used in , use - case - driven mod - els of the application domain have been suggested . [ 16 ] In contrast to technically possible devices , the clear focus on actors shall guide inventors to usable systems that are set in an appropriate model of the application domain . [ 15 ] Ideally , the very same people whose domain is in question validate these models . The validation of models , however , requires knowledge and expertise with notations and their semantics . [ 20 ] Moreover , various competing notations and domain - speciﬁc languages exist today , so this expertise is hard to acquire and maintain . The UML is gaining a lot of industry - support and conse - quently allows many variations and customizations . This , however , endangers its intended goal of unifying notational conventions , for the questionable beneﬁt of partial code generation or other edge cases of model - driven design . By following the agendas of tool vendors and by enabling highly specialized uses already in its speciﬁcation , the re - sulting complexity is almost prohibitive of UML becoming a ‘lingua franca . ’ It may rather lead to another confusion of tongues in software modeling . Moreover , UML might not be suitable for certain kinds of innovative systems , such as distributed or highly interactive systems . [ 10 ] 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 2 . 2 . Digital Video Models In 1991 , Apple introduced the QuickTime framework [ 1 ] which became a widespread technology for multimedia and its ﬁle format has now also been selected for the MPEG - 4 standard . It organizes time - based media in tracks and pro - vides functionality for play - back and editing . Tracks combine data of different types into a single video . Each track structures video , audio , subtitles , or other time - based data . A track begins at a certain time after the beginning of a clip and is played for a certain duration . The media data is organized sequentially within those tracks . Chunks of such media data are called ‘media samples . ’ All media samples cover a certain period of time . Some types of media samples—such as audio samples—are seen as self - contained continuous streams . Other sample types need to further divide the media data into sequences of sample units—for example , video samples consist of single frames . The smallest unit of media data is called a ‘media atom . ’ Media atoms are the basic elements of digital video . Unfortunately , identifying regions of interest in media atoms is still a manual process . However , extensive research efforts have gone into automatic digital video annotation and feature extraction . These approaches provide query - ing languages for digital video or image retrieval . [ 22 ] The underlying models are capable of describing digital video content in a spatial and a temporal context : The spatial context is restricted to two dimensions , as visual tracks consist only of a series of video frames show - ing two - dimensional images . These images are taken from one camera position and can be represented as rows and columns of pixels after digitization . All photographed ob - jects are therefore reduced to pixel regions . No information of their physical relation to each other is captured other than what can be seen from the camera’s perspective . The temporal context is given as the point in time of when a single image is shown in a structured sample of im - ages . This is a relative measure from the start of a digital video and can be matched to the point in time when the im - age was taken , if the camera also adds a time code track to the video clip . Hence , the resolution of digital video can be measured along three dimensions : pixels per inch , color depth , and frames per second . Systems that allow querying or im - age retrieval represent an abstraction of these technicalities to their users by indexing detectable features that can be queried for . Cuts in digital video , for example , can be de - tected by calculating similarity measures between consec - utive frames . Is the difference above a certain threshold , a change in perspective is very likely . This simple technique enables systems to select so - called ‘poster frames’ for clips that can be shown when presenting a static view of a longer digital video consisting of multiple clips . 2 . 3 . Prototype - based Approaches Houde and Hill proposed a taxonomy of prototypes along the reasons for building them , suggesting the three categories of Role , Implementation , and Look and feel pro - totypes : “Role refers to questions about the function that an artifact serves in a user’s life—the way in which it is useful to them . Look and feel denotes questions about the concrete sensory experience of using an artifact—what the user looks at , feels and hears while using it . Implementation refers to questions about the techniques and components through which an artifact performs its function—the ‘nuts and bolts’ of how it actually works . ” [ 12 ] For role prototypes , using paper as the primary medium has its advantages . It is very natural and easily done to use sketches on paper in design work . Snyder has described a prototyping approach based on this medium : Paper Proto - typing . [ 24 ] The technique is reminiscent of Wizard of Oz experiments that are common in the ﬁeld usability engineer - ing . The main criticism is related to the prototype’s ﬁdelity . A person showing different pieces of paper , depending on the state of the prototyped interface , bears little resemblance to working software . However , the idea of testing usability early , so early that pieces of paper is all that exists of an en - visioned system , is a powerful one : The earlier a prototype can be shown and tested , the more time can be saved from exploring unsuitable solutions . The paper prototyping tech - nique aims at reducing the amount of effort that prototypes require . Especially software ( including GUI ) prototypes can be costly . For implementation prototypes , an interesting ap - proach towards GUI prototyping is presented by Harel and Marelly [ 11 ] . They propose an extension of the message sequence chart , called Live Sequence Chart ( LSC ) . “The name comes from the ability to specify liveness , i . e . , things that must occur . Technically , LSC s allow a distinction be - tween possible and necessary behavior , both globally , on the level of an entire chart , and locally , when specifying events , guarding conditions , and progress over time within a chart . ” [ 11 , p . 16 ] Based on the formal deﬁnition of LSC s , two techniques that are supported by a tool called Play - Engine allow to ‘play in’ scenario - based behavior and to ‘play out’ the sum of all played - in information to allow veriﬁcation of the modeled behavior . These techniques allow programming on a high level of abstraction , essentially creating a rich base of rules that the reactive system needs to adhere to . A model - checking algorithm enables ‘smart’ selection of rules in case of ambiguities , when more than one LSC could be executed . It assures that if a stable , non - aborting state can be reached by the right sequencing of events , this se - quence is chosen for play - out . If no such sequence exists in the model , the algorithm proves that this is impossible . 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 Harel and Marelly argue that this enables developers to capture and model requirements for reactive systems from a nonfunctional GUI prototype in a more intuitive way than earlier speﬁciation techniques . For look and feel prototypes , Mackay et . al . discuss a video - based design process for innovative systems as well as for enhancement of existing systems . They present the use of video artifacts in a design process . [ 17 ] As soon as a new design has been prototyped , potential end - users are asked to work on speciﬁc tasks with the new design . These activities are ﬁlmed and analyzed in detail . It is a useful technique for analysts to become more familiar with an ap - plication domain . This is an important step for analysts or developers who are supposed to also offer a model of the solution . However , bridging the gap between application domain and solution domain is of no relevance to video pro - totypes , as they are strictly focused on just the design of new inventions . Another example that shows how videos can help the requirements process is given by Binder [ 3 ] , following a theatrical metaphor for collaborative exploration of new de - sign possibilities . By videotaping such improvisations , he shows how end - users can contribute to the design process . He collaborated with an electrician who improvised work - ing with a new industrial PDA ( a foam mock - up ) in his reg - ular work environment . A similar example is presented by Iacucci et . al . [ 13 ] The reach of video prototypes is quite large . It allows to involve a larger audience in early feedback loops than other prototyping techniques that require a prototypical sys - tem to be installed , maintained , and explained to potential users . A video prototype can be shown to stakeholders and their feedback can be collected without any more ef - fort than playing back a DVD at home . When the popula - tion of potential end - users who should give feedback is also globally distributed , the communication channel can also be based on video . This only requires—apart from a playback facility—a means to capture video , which today is as easy as installing a cheap webcam . 3 . The Software Cinema Technique Employing digital video in requirements engineering is one example of using video for software development projects in general . Figure 2 shows several videos attached to activites of the software lifecycle model , represented in this case as a V - model . [ 4 ] These videos were created dur - ing real software development projects where we employed the Software Cinema technique as case studies to validate our ideas . The ﬁrst example of video - based requirements develop - ment is a scenario movie produced early in a software de - velopment project . It is presented after only a few weeks S p ec i ﬁ c a ti o n a n d D ec o m po s iti o n R e a li z a ti o n a n d I n t e g r a ti o n System Deployment SystemAcceptance System Integration Object Realization Req . ments Development System Speciﬁcation SystemDesign ObjectDesign Validation and Veriﬁcation SystemMaintenance ProblemStatement Scenario ARENA Scenario + Use Cases Handy - Credit S . + UCs + Classes sBuilding Scenario JAMESTRAMPSTARS Figure 2 . Use of Video in Software Development : Digital video can be used in several activites of the software lifecycle . The ﬁgure shows four uses of dig - ital video related to activites in a V - model . into a project , for problem statement validation with the customer . We tried this approach in a project called ARENA . The second example is a video - based prototype show - ing the scenario and selected use cases . It is used for re - quirements validation and system speciﬁcation . Our exam - ple was the end - result of the Handy - Credit project , which was planned to run only up to the speciﬁcation phase . The third example is a scenario , use case , and static sys - tem model ( i . e . , class structure ) . It can be used for system model validation and nonfunctional requirements negotia - tion with various stakeholders . Our example was created for a smart / secure Building ( sBuilding ) system , which served as experimental validation material for the Software Cin - ema technique and tool kit . The Handy - Credit and sBuild - ing projects are discussed in more detail in section 3 . 1 . The last example is the use of video during system ac - ceptance tests , the ﬁnal event before a system is installed on - site for actual use and maintenance . The scenarios show the developed system in its envisioned target environment . All examples generally focus on facilitating negotiation and feedback . Video is always employed as a visual sce - nario that shows how the envisioned system may look , work , or be used . It can also be more concrete and depict only selected use cases . Another example could be the maintenance phase of a software development project . This would enable to eval - uate the actual real - world usability of a ﬁnished product in the ﬁeld . Considering examples for video prototyping de - scribed in literature , this seems a useful use of video in soft - ware development , too . [ 17 ] Requirements development must support a certain non - linearity , i . e . multiple inconsistent models in varying de - grees of abstraction . Expressing all models in a spec - iﬁcation language such as UML favors the engineer and risks premature elimination of inconsistencies . For exam - ple , use cases represent many—even mutually exclusive— 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 scenarios ; some end - users cannot easily grasp this abstrac - tion when presented with a formal notation showing only bubbles and lines . The Software Cinema technique uses ﬁlm as a semi - formal representation of software models . Film as a medium has been geared towards transporting the feel for other people’s lives and thoughts since its early stages . [ 19 ] We employ it to bridge the rhetoric gap between end - users and engineers . This addresses two issues : First , providing a model of reality that all stakeholders can understand equally well . Second , giving all involved developers a rich base of reference for what the complete system is intended to achieve . The technique describes how to create and extend a digital video - based description of the application domain in order to provide an analysis of actual end - user require - ments . The informality of ﬁlm enables modeling scenarios that still contain inconsistencies , which is an important feature when gathering requirements from multiple viewpoints . Additionally , ﬁlm is particularly well suited to express sys - tem behavior over time . As the technique is based on digital video , sophisticated tools for manipulation and annotation of the footage can be used or developed . By making the ﬁlm ‘clickable , ’ i . e . allowing a viewer to directly refer to objects seen on screen , the envisioned reality that is depicted can be discussed and annotated on a ﬁne - grained level of detail . In contrast to formal notations , this level of detail does not come at the price of very abstract representations . These are important steps towards a valid model of the application domain . Rich discussions about trade - off situ - ations provide the rationale that designers and developers need when designing and manufacturing a product . There is , of course , the downside of higher effort that is required for a video - based requirements analysis . It can easily be justiﬁed , however , by comparing its added value to the de - velopment process : Video - based models can be reused for entire families of product lines and provide entry - points for new and highly innovative products . Moreover , with the advances in consumer electronics and the resulting ease of creating semi - professional material , the effort is constantly decreasing . Considering how much more effort is needed to ﬁx a mistake of the requirements speciﬁcation in later phases , the economics of the approach look reasonably at - tractive . After shooting the clips , they are annotated in multiple ways by the analyst , focusing on developer’s needs . A ba - sic annotation is to identify pixel regions in the clip and assign identiﬁers to them , so the the movie becomes ‘click - able’ and objects that are seen can be selected directly on screen . Automated detection and tracking of objects in video has already been demonstrated in research prototypes and will directly beneﬁt the proposed technique when com - monly available . Analyst Video Producer Customer / End - User Give Feedback Reﬁne Visionary Scenario RequirementsAnalysisVideo [ + Use Case Model & Annotations ] Review Model [ Model valid ] System Design [ Model not valid ] State Problem & PerformActivity AnalyzeProblem Present Visionary Scenario Produce Scenario Clips RequirementsAnalysisVideo [ + Problem Annotations ] P R E - P R ODU C T I ON E ND - U S E R S E SS I ON P O S T - P R ODU C T I ON Figure 3 . The Software Cinema technique has three phases : 1 ) Preproduction , which leads to a visionary scenario . 2 ) End - user session , in which feedback is incorporated . 3 ) Postproduction , where analysis leads to enriched formal requirements . We distinguish three roles : Customer / End - user who commissions a project and who is a domain specialist ; Analyst who is in charge of requirements development ; Video producer who shoots , edits , and modiﬁes scenario ﬁlms with standard video editing , compositing , and animation tools . After enough ﬁlm material has been produced to make a discussion with the end - users feasible , the analyst shows the inital visionary scenario , based in a real - life situation that end - users are familiar with . During the discussion , the analyst can directly select and annotate the semantic units . When end - users are satisﬁed with how the video analy - sis shows the system to be like , the end - user session phase can be concluded . The analyst can then create the use case model that is added to the knowledge model and also vali - dated by the end - user . In the postproduction phase , the analyst has many video clips that show various scenarios of the system . Further - more , several alternative takes , exceptional , and forbidden behavior is also available . When end - users agree to the un - derlying use case model , it is handed over to development together with the system speciﬁcation . Otherwise a new it - eration is initiated . 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 To support this process , we built a custom tool for video - based requirements called Xrave . This tool will be dis - cussed in more detail in section 3 . 2 . The internal knowledge model of Xrave is based on a semiotic interpretation of ﬁlm language . Mode Filmic Reality Presentation Signiﬁer Signiﬁed Meaning decoding encoding Figure 4 . Concept of a sign : A signiﬁer is related to a signiﬁed meaning by semiotic encoding or mode . Basic modes are icon , index , and symbol . Semiotics deﬁnes a sign as the basic unit of signiﬁcation of any language . A sign is composed of the signiﬁer and the signiﬁed meaning as shown in ﬁgure 4 . In ﬁlm language , signiﬁers are the audio - visual video elements that humans can perceive . Film producers use signiﬁers of their choos - ing to encode certain signiﬁed meanings , so the audience has decode that meaning when they are watching the ﬁlm . In the context of Software Cinema , we model signiﬁers as taking part in relationships . The composition is in arbi - trary multiplicity : a relationship relates one or more signi - ﬁers spatially or temporally . All this is modeled on the pre - sentation side . The link between ﬁlm and software models is achieved by allowing to use the same semiotic mapping for relationships as for signiﬁers . Signiﬁed meanings are , at ﬁrst hand , abstract concepts . We deﬁned a translation of signiﬁed meanings to software model primitives on the basis of the semiotic encoding . 3 . 1 . Prototypical Applications Different academic settings provided opportunities for prototypical application of the technique . We discuss two examples in this section . 1 ) The Handy - Credit seminar , where students devel - oped a preliminary system design and a scenario movie . The clients were , in this case , software developers in a ﬁ - nancial services consulting ﬁrm . The goal was not to imple - ment a design , but to provide a completely new perspective on a loan application system that the clients had already de - ployed . So far , only personal applications in a bank ofﬁce , application via internet , and in - store loans handled by re - tailers directly were supported . The project should provide a detailed scenario with use cases of a new “channel” for loan applications . Two versions were produced . A ﬁrst rough version—a silent movie—depicted the main idea of the Handy - Credit system : A shopper stands in front of a computer store out - side its business hours and decides to do some ‘interactive window shopping . ’ He connects his mobile phone with the articles in the store display over a Bluetooth connection and orders a 23 - inch display that he sees in the store’s window . To ﬁnance this , he takes on a new credit with his bank , which is all made available by an application run on his mobile phone . Figure 5 . Handy - Credit Rough Version ( left ) and Fi - nal Version ( right ) : This is an example of a scenario movie that shows how a visionary system might work . Close - up shots of the mobile phone showed a text - based menu that was usable by the actors . In voice - over narration and through editing , the effects caused by the menu selections were explained . The focus for the movie was on the emotional aspects of using a distributed shop application and taking out a new line of credit . The movie wanted to be persuasive in that re - spect , so the decision was made that the visual impact had to be enhanced . As a consequence , a professional camera - man and drama students were brought in , to provide a more polished look and feel of the scenario . It enhanced the ef - fect of helping the viewer to identify with the protagonist’s motives : He just bought an expensive 23 - inch display by credit , but feels really good about it , as he can brag about it to his girlfriend . 2 ) The sBuilding development project , where we envi - sioned a smart / secure building system for a security agency . Scenarios , use case , and static system models were created to serve as reference material . The visionary scenario is about a security agency who orders a new security infrastructure for their building from a consulting company . At ﬁrst , the requirements for the new system were elicited . A set of system scenarios were iden - tiﬁed . The overall focus for the requirements was on detec - tion of unauthorized access , monitoring , and surveillance . The use case model is comprised of three actors , the em - ployee , the security ofﬁcer , and the data protection ofﬁcer . The actors interact with very different system interfaces . They range from terminals , iris and thumbnail scanners to mobile phones . Most of the use cases are initiated by the employee in his typical daily work . A few examples are : 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 system log in , entering the building , and scheduling a meet - ing . The security ofﬁcer initiates use cases such as issuing a day pass for a visitor , locking persons in , or checking the lo - cation of persons . The data protection ofﬁcer is responsible for archiving the records . All scenarios were ﬁlmed and imported into the Software Cinema tool kit where the shots were annotated . The sce - narios were arranged into scenes , i . e . combined into use cases . Then the annotations were mapped to model objects from which a static system model was derived . After the preproduction phase of the Software Cinema technique had been concluded after only two days of shoot - ing and editing , several end - user sessions followed . They were part of an exploratory validation experiment con - ducted within the scope of this project . The experiment itself is discussed in more detail in section 4 . 1 . In the end - user sessions , errors or wrong assumptions were identiﬁed . The feedback was incorporated during the postproduction phase . While in the Handy - Credit project only the main sce - nario was ﬁlmed for requirements validation we broadened the scope in the sBuilding project to a system speciﬁcation with scenarios , use cases , and a static system model . 3 . 2 . The Software Cinema Tool Kit To enable the Software Cinema technique , we deﬁned and developed a Software Cinema tool kit shown in ﬁgure 6 . It supports innovation driven by end - users as discussed by von Hippel and Katz [ 25 ] . To realize our vision—using videos as models for software development processes—the tool kit requires appropriate tools for video prototyping and software modeling . The main tool for the analyst during the Software Cin - ema preproduction phase is a shot editor , shown in ﬁgure 7 . The basic entities of videos handled are shots which rep - resent a contiguous sequence of pictures from one camera perspective . Shots are usually annotated with metadata de - scribing the ﬁlmic context they are setup in . For example , the distance attribute of a shot might tell whether it is a close - up or a head - and - shoulders shot . Additionally , free - form textual annotations allow the analyst to attach general feedback from the customer to any semantic unit ( i . e . , ob - ject or relationship ) . With the shot editor , the analyst can identify regions over time and associate them with model objects . The analyst employs a selection tool to identify relevant pixel regions in a frame and tracks it using keyframing techniques . To complete a sign as deﬁned in section 3 , the signiﬁer is as - sociated with a signiﬁed . The shot editor visually bridges the gap between the ﬁlm model and the software model by means of those associations . It shows a canvas on which video frames are drawn and a timeline for giving a temporal Xrave Framework SoftwareModeling Video Prototyping Player Xrave Reference Implementation Filmic Model Semiotic Model RequirementsAnalysisVideo Figure 6 . Tool Kit Components : The commercial off - the - shelf components must be treated as blackbox components : These are the player , video prototyp - ing , and software modeling components . At the heart of the tool kit , there is a requirements analysis video framework , providing abstractions for combining ﬁlm and formal models . A reference implementation of a Software Cinema tool , called Xrave , uses these ab - stractions . overview of the shot . The video frame is superimposed with signiﬁer annotations . Another tool , the sequence editor shown in ﬁgure 8 , is used by the analyst to model the ﬂow of the narrative events occuring in a movie . Such ﬂows are represented as Live Sequence Charts . The analyst can create , edit , and delete associations between signiﬁers . These relationships are ei - ther spatial or temporal in nature . Their meanings are spec - iﬁed by deﬁning their encoding between the signiﬁers and the signiﬁed meanings . The coupling between digital video and software mod - els enables different multi - media presentation and editing modes . A given point in time can be translated into a de - ﬁned position in a sequence chart and vice versa . Thus , shots can be played together with these diagrams . The se - quence editor offers different presentation modes for this purpose . An experimental presentation mode is the ‘three - dimensional’ viewpoint . When watching a video , the spec - tator looks at the video from roughly a 45˚ angle above . In other words , the video is projected onto a virtual screen lay - ing in front of the spectator like a ‘light table . ’ There is only one video frame visible at a time , but the action and spatial relationships between objects can be followed nevertheless . The current movie time in the diagram is where the video layer intersects the diagram . During playback , the object boxes and their lifelines follow the positions of the signi - ﬁers in the video and the events are moving from bottom to top . This way , past events can be seen above and future events below the video . 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 Figure 7 . Shot Editor : A shot is opened in the editor and a signiﬁer has been identiﬁed . The Software Cinema technique may require hundreds of shots for a proposed system . Xrave keeps them in a li - brary that can be queried with RDQL . [ 18 ] A rule - based in - terface on top simpliﬁes searches for particular shots . For example , when ﬁltering shots for ﬁrst - person point - of - view and those containing a cell phone object , the following RDQL query is constructed : SELECT ? ident WHERE ( ? x xr : identifier ? ident ) , ( ? x xr : pointOfView ? pov0 ) , ( ? x xr : hasSignifier ? sign1 ) , ( ? sign1 xr : signifiedObject ? signobj1 ) , ( ? signobj1 dc : title ? signobjtitle1 ) AND ? pov0 eq ’First - Person’ & & ? signobjtitle1 ~ ~ / Cell Phone / i USING dc for < http : / / purl . org / dc / elements / 1 . 1 / > , xr for < http : / / www . globalse . org / softwarecinema / xrave - mdma / 1 . 0 / > An RDF graph depicting this query is shown in ﬁgure 9 . Shots alone do not yet make a movie , therefore Xrave allows analysts to compose different shots into scenes that may be non - linear . The approach Xrave supports is branched or multi - path video . The analyst imports shots to a scene , annotates them and then arranges them in various sequences . So different scenarios can be modeled in a sin - gle scene . The arranged shots form an acyclic graph with scenarios mapped to the paths of the graph . A single graph is tied to a single scene and can be referred to as a use case . Edgar : Employee checkFingerprint ( ) openDoor ( ) open door grant acces Check Credentials D1 : Outer Door System Figure 8 . Sequence Editor : Presenting video with mapped Live Sequence Charts . ? x First - Person xr : pointOfView ? ident x r : i d e n ti ﬁ e r ? sign1 ? signobj1 x r : h a s S i gn i ﬁ e r x r : h a s S i gn i ﬁ e d O b j ec t contains " Cell Phone " d c : titl e Figure 9 . RDF graph representing the RDQL query : Fil - tering for shots in ﬁrst - person view containing a cell phone object . The scene in ﬁgure 10 shows a graph with four different paths . A software - oriented entry point for solution domain ex - perts in Xrave is the UML use case view . The use case bub - bles in this view are linked to the respective scene which represents the use case . In an end - user session it is often useful to review a dis - tinct ﬂow of events across scene boundaries in one go . A movie editor in Xrave enables the linear composition of paths of arbitrary scene graphs . The resulting sequence then represents a speciﬁc run through the proposed system sce - narios . Xrave builds on a strong theoretical and formal base by implementing the semiology - based mapping of ﬁlm to soft - ware models described in section 3 . It expresses the knowl - edge gained from the video metadata and the rich annota - tions provided by the analyst in RDF . The Dublin Core vo - 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 < Node 397b90 i : 1 o : 2 t : n > < Node 3cc410 i : 2 o : 1 t : n > < Node 3a55a0 i : 1 o : 1 t : n > walk to AP - D2 Only one person at a time may be in front of an AP - D2 AP - D2 auth KC Keycard authentication is to weak enter The 3 different locking mechanism have to be opened in the correct order ! door closed The door has to be locked with 3 different locking mechanism to accord to ISO 522131 alert security AP - D2 thumb Only the right thumb is valid . How do we handle amputees ? Figure 10 . Scene Graph : Showing a scene with four different paths and annotated shots . cabulary [ 14 ] is used to describe basic properties of a re - source like title or creator . Additionally we deﬁned a vo - cabulary for Xrave which is capable of expressing the ﬁlmic and semiotic model of an Xrave project , e . g . descriptions of scenes , shots , signiﬁers and their associations . The RDF standard enables inter - application model sharing or export of Xrave’s model into other applications . Xrave also inter - operates with professional video production tools and re - lies on their functionality for video editing and compositing tasks . 4 . CONCLUSION Software Cinema is , in our opinion , a useful technique that contributes to solving the major challenges for require - ments engineering discussed in section 1 . 1 . Video helps stakeholders to visualize the future sys - tem . In the concrete medium , they can more clearly deﬁne expectations , as there are objects , relation - ships , and activities that can directly be pointed to . 2 . In the case of revolutionary changes due to technol - ogy shifts , a video - analysis allows people who are un - familiar with the new technology to indirectly experi - ence it by watching actors on screen using it . These videos can be produced—using special effects—even before the technology is ready . 3 . Video restricts differing perceptions of reality . Seeing an action performed is a more direct experience than reading about it . 4 . Video can bridge the gap between stakeholders’ back - grounds , terminology , and education . Just as profes - sionally produced ﬁlms , videos can be made suitable for ‘all audiences . ’ 5 . As a timed medium , video is forced to make all its ex - pressive statements in a restricted timeframe . It con - sequently needs to focus on the essentials of the vi - sionary system . 4 . 1 . Exploratory Comparative Experiment To test the feasibility of the technique to enable knowl - edge transfer , a comparative experiment was conducted im - mediatly after Xrave was in alpha stage that allowed test - ing . The study focused on the requirements analysis pro - cess , where the tool kit allowed automating some of the re - quired steps . It was not a formal study , particularly due to its restrictive test population and small sample size . To minimize the effect that insufﬁciencies of Xrave might have on the suitability of the Software Cinema tech - nique , we conducted a usability test before the useful - ness study . It served as a usability validation test to show whether Xrave has a satisfactory level of usability . After that , the comparative experiment was conducted to evaluate whether the Software Cinema technique is an improvement from current scenario - based methods of requirements elici - tation . As guideline we used Rubin’s methodology . [ 23 ] The results of the early validation experiment yield an in - teresting picture . Requirements negotiation based on video deﬁnitely worked . However , in comparison to a textual ( but also scenario - based ) approach , we could not ﬁnd immense advantages . We believe this to be a deﬁcit in our experiment setup rather than in the general video - based technique . A formal study with broader and more diverse population , and with a larger sample size , could test some of the hypothe - ses on Software Cinema . If such a study were conducted , special attention needs to be paid to the fact that comparing the treatments of subject matter in two different media is a major challenge . [ 6 ] 4 . 2 . Future Work We see many avenues for future work that is based on our research . They can be categorized into improvements of the proposed tool kit and technique , deeper research of the formalisms , and exploration of uses of Software Cinema in 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006 areas other than requirements engineering . Our next step is the industrial application of the technique on a real - world problem . The theory behind Software Cinema provides a founda - tion , basic design , and inspiration for the deﬁned Software Cinema tool kit and its custom - built Xrave tool for the cre - ation of ‘Requirements Analysis Videos . ’ The tool kit deﬁ - nition also includes a guideline for how to use commercial off - the - shelf components in a Software Cinema project . In essence , the theory regards video as a model that is closest to end - users and offers guidance as to how this model maps to computer - based implementations of innovative products . We see that requirements development is generally a work in abstractions or concept engineering . This calls for particularly supporting communication between all stake - holders , from end - user to manufacturing . The Software Cinema technique allows rich , broadband knowledge trans - fer of concepts on appropriate levels of abstraction . This should ultimately lead to higher - quality products that have been built by incorporating several viewpoints and globally optimized trade - off decisions . References [ 1 ] Apple . An introduction to QuickTime TM [ online , cited June 2005 ] . Available from : http : / / developer . apple . com / quicktime / qttutorial / movies . html . [ 2 ] K . Beck . eXtreme Programming eXplained : Embrace Change . Addison - Wesley Publishing Company , Dec . 2000 . [ 3 ] T . Binder . Setting the stage for improvised video scenarios . In CHI ’99 Extended Abstracts on Human Factors in Com - puter Systems , pages 230 – 231 . ACM Press , 1999 . [ 4 ] M . Broy and A . Rausch . Das neue V - Modell XT : Ein an - passbares Modell für Software und Systems Engineering . Informatik Spektrum , 28 ( 3 ) , June 2005 . [ 5 ] B . Bruegge and A . H . Dutoit . Object - Oriented Software En - gineering : Using UML , Patterns and Java . Prentice - Hall , New Jersey , 2nd edition , 2003 . [ 6 ] R . E . Clark and B . M . Sugrue . Research on instruc - tional media , 1978 – 1988 . In G . Anglin , editor , Instruc - tional Technology : Past Present and Future , chapter 32 , pages 348 – 364 . Libraries Unlimited , Englewood , CO , USA , 1995 . Available from : http : / / nt . media . hku . hk / webcourse / references / Clark . htm [ cited May 2005 ] . [ 7 ] A . Cockburn and J . Highsmith . Agile software development : The people factor . IEEE Computer , 34 ( 11 ) : 131 – 133 , Nov . 2001 . Available from : http : / / doi . ieeecomputersociety . org / 10 . 1109 / 2 . 963450 [ cited June 2005 ] . [ 8 ] O . Creighton . Software Cinema : Employing Digital Video in Requirements Engineering . PhD thesis , Technische Uni - versität München . Verlag Dr . Hut , Munich , Germany . ISBN : 3 - 89963 - 328 - 8 , May 2006 . [ 9 ] O . Creighton , M . Ott , and B . Bruegge . Software Cinema— Video - based Requirements Engineering for Agile Design . In International Summit on Agility , Design & Manufacturing 2005 ( ADEMSE ’05 ) , Dec . 2005 . [ 10 ] M . Glinz . Problems and deﬁciencies of UML as a require - ments speciﬁcation language . In Proceedings of the 10th In - ternational Workshop on Software Speciﬁcation and Design , pages 11 – 22 . IEEE Computer Society Press , Nov . 2000 . [ 11 ] D . Harel and R . Marelly . Come , Let’s Play : Scenario - Based Programming Using LSCs and the Play - Engine . Springer - Verlag , Aug . 2003 . [ 12 ] S . Houde and C . Hill . What do prototypes prototype ? In M . G . Helander , T . K . Landauer , and P . V . Prabhu , editors , Handbook of Human - Computer Interaction . Elsevier Sci - ence B . V . , Amsterdam , 2nd edition , Aug . 1997 . [ 13 ] G . Iacucci , K . Kuutti , and M . Ranta . On the move with a magic thing : Role playing in concept design of mobile services and devices . In Proceedings of the Conference on Designing Interactive Systems ( DIS 2000 ) , pages 193 – 202 . ACM Press , 2000 . [ 14 ] D . C . M . Initiative . Dublin core metadata element set , version 1 . 1 : Reference description [ online ] . Dec . 2004 [ cited Feb . 2005 ] . Available from : http : / / dublincore . org / documents / dces / . [ 15 ] M . Jackson . Software Requirements & Speciﬁcations : A Lexicon of Practice , Principles and Prejudices . Addison - Wesley Publishing Company , 1995 . [ 16 ] I . Jacobson , M . Christerson , P . Jonsson , and G . Oever - gaard . Object - oriented Software Engineering : A Use Case Driven Approach . Addison - Wesley Publishing Company , New York , 4th edition , 1993 . [ 17 ] W . E . Mackay , A . V . Ratzer , and P . Janecek . Video artifacts for design : Bridging the gap between abstraction and detail . In Proceedings of the Conference on Designing Interactive Systems ( DIS 2000 ) , pages 72 – 82 . ACM Press , 2000 . [ 18 ] F . Manola and E . Miller . RDF primer [ online ] . Feb . 2004 [ cited Feb . 2005 ] . Available from : http : / / www . w3 . org / TR / rdf - primer / . [ 19 ] J . Monaco . How to Read a Film : The World of Movies , Me - dia , and Multimedia : Art , Technology , Language , History , Theory . Oxford University Press , New York , 3rd book & DVD edition , Mar . 2000 . [ 20 ] D . A . Norman . Emotional Design : Why We Love ( Or Hate ) Everyday Things . Basic Books , Dec . 2003 . [ 21 ] B . Nuseibeh and S . Easterbrook . Requirements engineering : A roadmap . In ICSE — Future of SE Track , pages 35 – 46 , 2000 . [ 22 ] M . Petkovic and W . Jonker . A framework for video modelling . In Proceedings of the 18th IASTED Con - ference on Applied Informatics , Feb . 2000 . Avail - able from : http : / / www . ins . cwi . nl / projects / acoi / DMW / publications / iasted00 . pdf [ cited Feb . 2005 ] . [ 23 ] J . Rubin . Handbook of Usability Testing . John Wiley & Sons , New York , 1994 . [ 24 ] C . Snyder . Paper Prototyping : The Fast and Easy Way to Design and Reﬁne User Interfaces . Morgan Kaufmann Pub - lishers , Inc . , Apr . 2003 . [ 25 ] E . von Hippel and R . Katz . Shifting innovation to users via toolkits . Management Science , 48 ( 7 ) : 821 – 833 , July 2002 . 14th IEEE International Requirements Engineering Conference ( RE ' 06 ) 0 - 7695 - 2555 - 5 / 06 $ 20 . 00 © 2006