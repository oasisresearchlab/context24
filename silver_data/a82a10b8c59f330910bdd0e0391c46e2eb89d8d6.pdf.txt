Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Microtask Programming : Building Software with a Crowd Thomas LaToza 1 , Ben Towne 2 , Christian Adriano 1 , André van der Hoek 1 1 University of California , Irvine 2 Carnegie Mellon University Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 2 task microtasks Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 3 What if programming could be microtasked ? Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 4 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 5 24 million users x 1 day = ? ? ? How can programming work be decomposed into microtasks ? Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu CrowdCode : A System for Microtask Programming 6 All work done in self-­‐contained microtasks , enabling workers to edit only a single a func = on or test and providing relevant background ! Microtasks automa = cally generated by the system and assigned to workers ! Provides to write code , test , debug , and respond to changes ! Online IDE for Javascript programming , enabling developers to login and work for 5 mins or 5 hours ! Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 7 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 8 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 9 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu What if you needed to add a parameter… 10 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Programming work is dynamic 11 Exis = ng approaches to microtasking complex work rely on a sta - c workﬂow speciﬁed by a single requestor or worker e . g . , MapReduce approach in CrowdForge [ KiWur + 2011 ] ! ! Programming is dynamic , cannot enumerate tasks a priori • Discover need for addi = onal func = ons • Need to debug the bugs that emerge when they occur • Func = ons may change their signature , necessita = ng changes to their callers ! ! How can microtasks be appropriately generated and coordinated for dynamic , complex work ? ! Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu The dependency structure of so : ware work 12 CRdoMoves doMove test move into non-­‐ back row test move two spaces forward test move forward test single jump Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Adding a parameter 13 CRdoMoves doMove test move into non-­‐ back row test move two spaces forward test move forward test single jump signature change signature change signature change Signature change microtask Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu 14 The dependency structure of so : ware work test func = on func = on func = on test test test test ! func = on func = on func = on func = on test ! ! ! ! ! ! ! ! ! ! ! Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Coordina - ng programming work 15 Ar = facts send messages to other ar = facts Request an ar = fact to be found or created ! Change a func = on signature ! Report an issue in an ar = fact ! ! ! Each ar = fact may have an ac = ve microtask , enabling parallel work Messages may generate mul = ple microtasks to do on a single ar = fact To prevent merge conﬂicts , microtasks queued on ar = facts ! ! ! Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu State of ar - fact tracked , used to generate microtasks 16 ! Func = on state machine Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Tes - ng Given descrip = on , separate microtasks to write code , write tests Adds redundancy -­‐ code must pass tests ! If func = on passes its tests , it is correct Assumes purely func = onal code ( e . g . , no shared mutable state or environment ) Suitable for wri = ng libraries ! Run tests When func = on changes and is fully wriWen ( no pseudocode ) Or when test changes If func = on’s callees are not implemented , discard test results 17 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Modular debugging by tes - ng 18 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Feasibility Evalua - on : Is it possible to program using microtasks ? Lab study Crowd of 12 grad students & staﬀ ! Each provided separate room , only communica = on through system ! Worked together for ~ 1 . 25 hours implemen = ng checkers 19 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Results 20 • Worked for a total of 14 . 25 person - hours ! • Completed 265 microtasks ! • Wrote 480 lines of code across 16 functions , and an additional 61 unit tests ! • Did not ﬁnish implementing checkers Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Percep - ons of CrowdCode Participants differed in reaction to the loss of context in microtasking : ! ! ▪ ! Some found it freeing : “ I had to keep less context in my head when writing functions , because I ! ! could not make assumptions [ about ] the rest of the program ” ( P6 ) ! ! ▪ ! Others found it burdensome and wanted more information not provided ! ! Participants appreciated ability to specialize : ! ! ▪ ! “ I think that CrowdCode would make me more likely to contribute as I could solve the tasks which I could do , and skip the others . I could take on tasks with higher difﬁculty as and when I feel comfortable . Hence , CrowdCode would be ideal in working in an OSS project… " ( P11 ) ! ! ▪ ! “ I was willing to be imperfect with my work . It was more important for me to constantly push out new work . ” ( P1 ) ! ! Found social features ( esp . points and leaderboard ) motivating ! ! ▪ ! “ help building a productive vibe to coding ” ( P10 ) ! ! 11 of 12 participants agreed would be more likely to contribute to OSS project with CrowdCode ! ! ▪ ! Lower barrier to entry compared to “taxing” “learning and involvement curve” ( P7 ) of OSS ! ! ▪ ! Ability to specialize by skipping some tasks ! ! ▪ ! Might be too constraining for seasoned developers but may be better for newcomers ( P1 ) ! ! Majority agreed that more communication would help them work more effectively ! ! ▪ ! Cited a desire to share technical experience , clarify tasks , ask questions about others ' work 21 Department of Informa - cs , UC Irvine Collabora - on Laboratory SDCL So : ware Design and sdcl . ics . uci . edu Conclusions Basic programming tasks can be done modularly • Decontextualiza = on of work may have both beneﬁts and drawbacks • May enable transient work , specializa = on , and more fun ( ? ) ! Much more to sokware development work • Discussion , GUIs , sokware design • Can all sokware tasks be microtasked ? Should they ? ! Genera = ng microtasks through ar = fact state machines enables dynamic , crea = ve work to be microtasked • May be applicable to other domains ( e . g . , authoring a large document ) 22