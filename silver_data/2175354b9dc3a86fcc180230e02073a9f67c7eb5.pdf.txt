Quilt : a collaborative tool for cooperative writing Robert S . Fish Robert E . Kraut Mary D . P . Leland Bell Communications Research Michael Cohen University of Washington Abstract Quilt is a computer - based tool for collaborative writing , which provides annotation , messaging , computer conferencing , and notification facilities to support communication and information sharing among the collaborators on a document . In addition , extensible sets of social roles and communication types are used to provide views of a document tailored to individual collaborators or to other users of the document based upon their position in a permission hierarchy . This paper describes the rationale for and design of Quilt . 1 . Introducrion People working together to write a single document is a common occurrence , both in the business and the research worlds . While reliable estimates are unavailable for business memos , in the sciences the proportion of jointly authored articles has been increasing steadily throughout the century , so that in some fields over 65 % of articles are jointly written [ Over , 19821 . By merging ideas from hypertext with knowledge of the social roles and communication patterns involved in a collaborative writing effort , we have designed a system which supports some components of cooperative writing . We call this system Quilt to conjure the image of work as a social activity , in which people cooperate to produce useful and aesthetic objects . The requirements we have placed on Quilt come from systematic research on social aspects of writing , including interviews with research scientists writing technical reports [ Kraut , Galegher , & Egido , 19871 , questionnaires completed by book co - authors [ Kraut , 19881 , observations of scientists and engineers in a research laboratory [ Fish , 19881 , and the more general literature on work group behavior [ McGrath 1984 ; Hat kman 19831 . One of the major problems confronting collaborators is that of coordination and information sharing . Collaborative writing is a communication task between the co - authors as much as it is one between the authors and their audience . For joint authors , information sharing means that some information that would have remained implicit throughout an individual writing project must become explicit so that it can be communicated to co - authors . Co - authors communicate information about the substance of their work ( e . g . , what they are actually writing ) , the procedures of their work ( e . g . , who needs to do what when ) , and perhaps more subtly the interpersonal relationship that underlies the work project ( e . g . , the possibility that one partner is not pulling his or her fair share ) . A major goal of Quilt is to provide mechanisms to enhance the communication among co - authors . In addition to explicit information sharing , collaborative writers must also coordinate their activities . They must mesh their work so that all of it gets done , that it is not done redundantly , and that it is done in a timely manner in which one partner’s activities do not impede another’s progress . Quilt includes automatic record keeping that helps collaborators keep track of current activity and mechanisms that make it easy for the collaborators to notify each other of the state of their work . The manner in which collaborative writers share information , coordinate activity , and jointly supervise each other depends both on the nature of the interpersonal relationship between them , the stage of the project , and their social roles . For example , peers are likely to revise each other’s text , without discussion or permission to make specific changes , while co - authors of unequal status are likely to maintain proprietary rights over text that they have drafted . Research assistants , graduate students , and reviewers may comment on a manuscript without changing it or may send private queries to particular authors . Quilt has mechanisms for defining , changing , and enforcing such social roles and their associated rights and responsibilities . Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing IMachinery . To copy otherwise , or to republish , requires a fee and / or specific permission . 0 1988 ACM 0 - 89791 - 261 - 6 / 88 / 0003 / 0030 $ 1 . 50 30 These requirements to share information with co - authors and to coordinate activitye , as well as the overarching need to develop and maintain a pleasant and productive working relationship , all imply that any tool to support collaborative writing must support communication among the collaborators as well as the more traditional writing and text - editing capabilities . Unfortunately , currently collaborative authors are ill - served by the communications - based and computer - based tools available to them . Current word - processing programs primarily produce polished final copy , but do not support well the process of writing itself [ Coombs , Renear , & DeRose 19871 , much less collaborative writing . In particular , they do not support the communication vital to the collaborative process . Only recently have commercial products appeared that support the transition from preliminary outlines to first drafts or allow even rudimentary annotation by co - authors [ Edwards , Levine , & Kurland 19861 . We know of only a few systems to support multiple authors [ Delisle & Schwartz 1987 ; Greif & Sarin 19871 and these systems concentrate more on controlling and facilitating access to the parts of document than on communication and annotation . Only in the specialized case of software development do systems exist that support multiple versions of documents or enforced access rights [ Halt , Ramsey , & Grimes 1983 ; Tichy 1982 ; Delisle & Schwartz 19871 , which collaborators would find useful in determining how a partner has changed their work . Even next - generation hypertext systems [ Conklin 1987 ; Meyrowitz 1986 ; Yankelovich , Meyrowitz , & van Dam 1985 ; Halasz , Moran , & Trigg 19871 are designed as new ways of structuring text , rather than as ways for collaborators to communicate with each other about the text they are writing . This paper describes our design of Quilt , a collaborative authoring system that allows collaborators to annotate work - in - progress , to exchange messages , and to track the status of the work . It is designed to supplement other research projects in collaborative writing , and as a result it does not attempt to support synchronous conferencing through which authors can point at and modify common documents [ cf . , Cook , Ellis , Graf , Rein , & Smith 1987 ; Sarin & Greif 1984 ; Sarin & Greif 1985 ; Stefik , Bobrow , Foster , Lanning , & Tatar 19871 . Nor is it designed as an authoring system for capturing ideas , thoughts , and research results , and organizing them into a coherent document [ cf . , Allen , Nix & Perlis 1981 ; Chamberlin , King , Slutz , Todd , & Wade 1981 ; Hammer , Ilson , Anderson , Gilbert , Good , Niamir , Rosenstein , & Schoichet 1981 ; Meyrowitz & van Dam 1982 ; Trigg & Weiser 1986 ; Walker 19811 . The next sections describe the features of Quilt and discuss our implementation plans for Quilt along with the current limitations and possible extensions . 2 . Quilt Fearures At a general level , Quilt can be thought of as a hybrid of a multi - user hypermedia system , a computer conferencing system , and multi - media electronic mail . It allows users to share voice and text messages and documents . More importantly , it allows users to change and annotate this information , with the history of these changes and other annotations attached to arbitrary regions of the document . Quilt attempts to incorporate elements of what we know about the social roles and communication patterns that occur in collaborative work . Each user of Quilt is assumed to have a specific role in regard to a particular document at a particular time , and categories of usage privileges can be associated with each role . For example , these roles may be used to regulate the views of the information available ro users . Quilt supports different rights to the information depending on the interaction between users’ social roles , the nature of the information , and stage of the project . In addition , Quilt provides easy access to information about users’ work activities , to aid in the coordination between co - workers . 2 . I Fearures ) - or annotation The initial version of Quilt is designed for writing a standard , linear document that is primarily text , but uses a hypertext methodology for aiding the process of writing . Figures , tables , and illustrations can be incorporated if the text editor / document formatter supports them . It is designed to be editor independent , so that standard , familiar editors and other document tools can be used to manipulate the document . In Quilt , a document consists of a base and nodes linked to the base using a locally developed hypertext methodology . These nodes act like the scraps of paper , notes , Post - its and marginalia in traditional paper manuscripts . In this way , oId versions of text , proofreading notations , substantive editorial comments , and queries to the author can all be incorporated as hypertext nodes . Unlike general hypertext systems , however , we do not 31 believe we need to support a full graph , in which any node can be linked to any other one . Rather Quitt is designed to support tree structures , in which base documents can be annotated and the annotations can be annotated recursively . At any time , a draft of the document consists of the the following node types : a ) a current base document , which is the text and other material that the writers consider the current publicly visible portion of their work ; b ) suggestions for revision in a form that users with appropriate permissions can swap with a current paragraph in the base document ; and c ) voice or text comments . The permissions associated with comments and their ability to notify potential readers of their existence defines the following three types of comments : 1 ) private comments , visible only to the creator ; 2 ) public comments that can be read by anyone who can read their parent ; 3 ) directed messages , whose existence is displayed only to named individuals and groups and which are made available to reader either as annotations in Quilt or through a notification system ( i . e . , electronic mail ) . In addition to creating and reading these nodes , users at any time can save a history version of the base document , complete with its associated links . Through an automatic process of paragraph comparison , readers can use the history version to see side - by - side comparisons of changes between versions of a paragraph . In addition to standard editors , Quilt - specific editing operations are available to work on portions of a draft . The material that the user is able to edit depends on the user’s social role and the permissions associated with the material and on views selected by a user depending on the node type . For example , co - authors can see the public view of the manuscript , or the view that includes their comments to each other , or the views that include their private comments to themselves . The editing operations include creation , deletion , modification , browsing , reading , copying and moving , searching on content or attributes , printing with flattening , and attaching triggers . Browsing and attaching triggers deserve further attention . When browsing through a Quilt document , the user is shown the structure of the annotations associated with an object , either using a text - based table of contents or a graphical overview of the links between the nodes . Triggers are arbitrary condition - based or time - based actions associated with Quilt objects . While we anticipate that most actions will be notifications to relevant participants , the general facility to execute any Quilt or system command is provided . For example , the action associated with a comment about a deadline might be to notify a co - author that action needs to be taken , remind the co - author before the deadline , and report to the initial author at deadline whether the manuscript had been modified . User - defined social roles mesh with the types of objects and actions to define the permissions associated with them . That is , Quilt uses information about social roles to determine the types of activities that are allowed on the types of nodes by various types of collaborators . For example , one collaborative style associated with a document may allow an author and co - author to change each other’s work , a graduate assistant to read correspondence between the authors , a reviewer to create directed messages to the authors , and anyone to read the public portions and make private comments . A directed message or private comment can only be manipulated by its creator and recipients . Other working styles , often based on informal and changing agreements among collaborators , are easily configured in QuiIt through a table - driven interface . 2 . 2 Features for activity coordination The features previously described take a hypertext metaphor and apply it to the problem of tying communication among collaborators to annotation of a document in progress . In reading and working on the document , co - authors and other interested parties have available to them the embedded annotations of other participants in the document creation . This system , in which hypertext is used to embed document history and annotation ! does not , however , fully solve the problem of coordinating the activity among the co - authors . In particular , Quilt also has features that attempt to aid a frequent probtem among collaborators : knowing what was done . At a general level , information sharing and activity coordination require that participants keep each other informed about what they are doing . The extent to which this information can be generated automatically wiIl relieve collaborators of many housekeeping chores . Quilt provides two mechanisms for exchanging this status information . First , Quilt maintains an activity log for each node , which keeps a record of collaborators’ interaction with the document . Entries in the activity log can be entered by the participants , generated by machine , or be a combination of the two . User - 32 generated entries typically describe abstract intentions or accomplishments , such as ‘ * Reorganized section 2” or “I’m thinking about a new data analysis for this section . . . “ . while machine - generated entries describe low level actions , such as “Edited section 2 for 2 hours , 31 minutes ; 15 out of 41 paragraphs were changed” . While the technology for generating such entries is simple , establishing the balance between useful status information , littering detail , and invasion of privacy is difficult . Quilt also uses the modification history to warn users if they attempt to modify an object that another user is currently changing . This warning permits users to avoid creating incompatible variants which must later be merged manually . The second mechanism for exchanging information is the use of forms or semi - structured messages [ ! vfaIone , Grant , Turbak , Brobst , & Cohen 1987 ; Malone , Grant , Lai , Rao , & Rosenblitt 19871 , which ease both creation and machine processing of messages . The contents of some comments , messages , and activity log entries can be partially completed automatically , with entries such as creator , date , document portion . In addition , the creator can select some parts of a comment from a standard repertoire , e . g . , “I’m finished , your turn” , “I just made minor changes” , or “I’ve read it / we need to talk” . The standard repertoire allows Quilt to distinguish messages that require action by the collaborators and to trigger Quilt to actively notify them . 2 . 3 Quilt as computer conference system In the previous sections we have described Quilt as a tool for cooperative writing that contains a strong communication component . Quilt’s features make it a text and voice , asynchronous conferencing system as well as a tool for writing . We intend to use Quilt as a computer conference because we believe that computer conferencing is a valuable communication facility for collaborative writing . Quilt as a computer conference provides one medium through which collaborators can have planning discussions in a form that could easily lead to writing project . One can think of a computer conference as a multiauthored document whose structure accretes rather than being preplanned as a typical manuscript might be . In a Quilt conference , each topic and optional opening statement is a base document . Responses to prior postings will typically be public comments , although directed messages and private comments are also supported . Unlike traditional computer conferencing systems [ Parnes 1985 ; Hiltz & Turroff 19781 , the spatial order of the conference topics and responses need not correspond to the temporal order . The annotation mechanisms in Quilt release users from the need to make elaborate references to indicate that to which they are responding . We have yet to determine whether the ease of creating links that Quilt allows will lead to difficulties in following the flow of ideas in a potentially complex conference tree . 3 . Implementation Plans Our implementation of Quilt has two goals . First , because writers already use a wide variety of document processing and communication tools , and because collaborators frequently use different tools on a single document , we want to be able to accommodate the continued use of these existing tools , where possible . These tools will minimize the overhead to collaborative groups of moving to the use of Quilt in their work . Second , because our interest is not in developing window managers , databases , or editors , but in developing a framework for collaborative writing , we are using relatively standard and available software to provide these services . We are using Orion [ Banerjee , Chou , Garza , Kim , Woelk , Ballou , & Kim 19871 as our underlying database system and X windows [ Scheifler & Gettys 19861 and the XR toolkit for window management . This approach also increases Quilt’s extensibility and portability . 3 . I Architecture of Qudt The top - level module of Quilt is driven by the users’ interaction with Quilt . Users interact with Quilt both to create and customize collaborations and to access the documents and messages within a collaboration . During editing of a document , Quilt interposes a monitor process between the editor and the user , allowing Quilt commands to be used in addition to editor commands . The top - level module calls on two subordinate modules . The Quilt - Orion Server retrieves and stores the information about users , collaborations , and documents . The Quilt - X Interface displays appropriate information on the screen and responds to user input . The figure below shows the architecture of Quilt . 33 QUILT TOP LEVEL [ ] j QUILT - ORION SERVER I ORION 3 . 2 Top Level of Quilt QUILT - X INTERFACE J XandXR When a user wishes to define a default style of collaboration , create a new collaboration , or modify an existing collaboration , the top level calls on the Quilt - X Interface to display a form which the user fills in with the needed information . The top - level then packages this information and requests the Quilt - Orion server to store it in the Orion database . For example , a user wishing to create a new collaboration first names the collaboration and its initial members , and selects the collaboration style . This style can be one of the Quilt - provided defaults , a personal default style , the style of another collaboration involving that user , or a new style to be defined for this collaboration . A table - driven interface is used to define a new style or to modify a selected style . Finally , the user assigns each member to one or more of the social roles that are defined for the chosen style . When a user wishes to access one of the documents in a collaboration , he chooses the collaboration , document , and access mode from a series of menus . The data needed for these menus is retrieved by the Quilt - Orion Server from the Orion database , and displayed by the Quilt - X Interface . As explained above , we have decided writers can use their standard text editors within Quilt . This decision means that the editor , rather than Quilt , knows how and where the text is disptayed and changed . This ceding of control from Quilt to the editor leads to problems because Quilt needs to know where both the text and mouse cursors are located so that it can correctly interpret requests to add or access annotations . It also needs to know where references to annotations occur in the text , so that it can properly display the information about them . We overcome these difficulties by having a monitor process transparently interposed between the user and the editor . In general , the monitor passes the user’s keyboard input to the editor , and the editor’s output to the screen . However , the editor output is also interpreted by the monitor to update a shadow image of the screen . Thus , Quilt commands know where the cursor and mouse pointer currently are , and can use this information to determine what is being referenced . During modification or annotation , references are embedded in the text as indices into a table of annotations for that node . For each editor , Quilt must be told the necessary editor commands for insertion ; it then uses these commands to put in link references . When encountering a link reference , Quilt transforms the index into a general indication of an annotation and displays information about the annotation in a window adjacent to the line containing the annotated text . The figure below shows an example of a user named Bob accessing a document to read a portion of the text , to look at one of the annotations , and to add another annotation . He sees indications of those annotations that his role permits him to access and that are included in his selected view . In this example , he can see indications of a public comment from his co - author Anne and his own private message . Bob can look at the contents of one of these annotations , by selecting its indication from the adjacent window . Bob can respond to any of these annotations , as well as adding new annotations . Here , Bob adds a directed message to Anne . The types of annotations are selected from a menu of those defined by the style of the collaboration . In this case , Bob chooses “Directed Message” from the menu of annotation types and then types his message into a window that has opened for this purpose . 34 This is the introduction to a document . It has annotations , like this one * * * * , Anne Comment Ott ? ? . tie added to it . The originator , type * * * * Bob Private Oct . 30 and date of the annotation are given in the side window . Example of part of a document and its annotations This is the introduction to a document . me Commenr Oct . 22 It has annotations , like this one * * * * , Anne Comment Oct . 22 added to it . The originator , type * * * * Bob Private Oct . 30 and date of the annotation are given in the side window . Example of reading one of the annotations This is the introduction to a document . Annotation Type It has annotations , like this one * * * * , Comment Directed Message from Bob to Anne Oct . 31 added to it . The originator , type * * * * Revision and date of the annotation are given in We should remember to point out that the side window . 0 Directed Message the comment is inserted at the current Private Note cursor location . Example of Bob sending a Directed Message to Anne 3 . 3 Quilt - Orion Server The Orion database holds the components of draft documents , and the information about the users and their collaborations . Since Orion is a single - user system , the Quilt - Orion Server talks to the database on one side , and to all instantiations of the Quilt top - level on the other side . This server translates requests to store and retrieve Quilt data into the corresponding Orion commands . Orion is used to simulate a hypertext - style linkage of a draft document’s components . For document components , the Orion database holds two types of entities : multimedia node objects and links between these nodes . In general , an annotation consists of both the link , which indicates its type , and a node , which holds its contents . These entities are organized into classes , using the Orion class hierarchy mechanism . The Quilt Object class is the base class for document components . Its attributes include type , creator , activity log , and triggers . The type tells whether it is a node or link . The creator attribute tells who originally created the object . The activity log includes both machine and human generated comments on accesses to the object . Quilt automaticaliy records each user’s reading , writing , modifying , or annotating of an object , and also allows the user to enter a comment explaining the activity . The trigger attribute is a set of actions to occur when specified changes are made to the object or at specified times . The class of Node Objects is one of the subclasses of the Quilt Object class . A Node Object stores a chunk of information - initially either text or voice . It has attributes for data type , links in , links out , and the data itself . The data type attribute gives the type of information and describes how the information should be presented . The links attributes describe the sets of the links leading to and from the node . References to the outgoing links are embedded within the text of the node . The data attribute points to the storage containing the information chunk of the node . The other subclass of the Quilt Object class is the class of Link Objects . h Link Object ties one Node Object to another . Its attributes include annotation type , from node . and to node . The annotation type attribute indicates the type of the link , which can be any of the types defined in the collaboration style . Each Link Object also has attributes for the two nodes at the ends of the link . This structure allows arbitrary nesting , permitting annotations on annotations . - More specialized types of link nodes have additional attributes . For example , a Directed , Message Object has a list of recipients . The Quilt editing actions described in Section 2 . 1 are provided by using a base set of methods on the Quilt Objects . In addition to the actions discussed there , Quilt has internal methods for following links and updating activity logs . When following a link , the node at the end of the link is displayed , according to its 35 type and the permissions of the user . In addition to the document components , Orion is used to store information about social roles , access rights , and annotation types in each collaboration . This information includes the users and the collaborative groups they form ; the default and user - defined roles and annotation types for each collaboration ; and the permissions table for each collaboration . When the user defines or changes a collaboration , Quilt translates this information into its internal format and requests the Quilt - Orion Server to store it . Quilt uses this information to determine which objects are accessible and changeable by a particular user . We plan to also use this customization mechanism to experiment with different variants and incorporate appropriate defaults . 4 . Summary and Conclusions Quilt is an attempt on our part to build a useful tool for the task of collaborative writing . Our intent is to build something that , for the type of writing done regularly by engineers and scientists , can produce gains in productivity and perhaps quality over standard means . We have attempted , where possible , to make Quilt compatible with current technical tools , such as text editors and mailers , so that it can be used with a minimum of disruption to the work environment our potential users have already evolved . The placement of users into niches of privilege relative to creating , commenting , and reading a document is derived from a conviction that similar , if usually implicit , roles exist for traditional documents . Only use and experimentation will allow us to refine this mechanism to reflect accurately the types and the dynamics of social roles that are involved in document creation . Quilt does not do a number of things . It probably will not aid workers in initiating a collaboration , because this activity is based on the frequent informal communication arising from physical proximity . Only if a collaboration has a firm social footing can we expect Quilt to be a positive element in the attempts to write collaboratively . Through its conference system , however , it can supplement the intense , face - to - face meetings with which collaborators general accomplish their initial planning . Quilt does not provide mechanisms for synchronous communication . Co - workers will often talk to each other directly in the course of their work . It may be the case that while they are talking , they may want to browse through their jointly authored Quilt document . In our current proposal , they will use face - to - face meetings and the telephone to accomplish this task , perhaps while using Quilt on - line or while holding Quilt printed output in front of them . Moreover , there are also a number of technical limitations to Quilt . Primary among these is that Quilt as planned uses a centralized database to store a document and its annotations . Therefore , long - distance collaborators must have access to the same machine in order to use Quilt . When a distributed version of our underlying database becomes available , we will provide a distributed version of Quilt . Quilt is currently a work in progress . Our intention is to use this system ourselves and with collaborators and modify it as experience shows us the utility or lack thereof of its features . Only with such experience can we be confident that eventually writers will find Quilt useful . REFERENCES 1 . Allen , T . , Nix , R . , & Perlis , A . PEN : A hierarchical document editor . Sigplan Norices , 16 , ( 1981 ) 74 - 81 . 2 . Banerjee , J . , Chou , H . - T . , Garza , J . F . , Kim , W . , Woelk , D . ! Ballou , N . , & Kim , H . - J . Data model issues for object - Oriented applications . ACM Transactions on 0 , yice Information Systems . 5 , ( 1987 ) 3 - 26 . 3 . Chamberlin , D . D . , King , J . C . , Slutz , D . R . , Todd , S . J . P . . & Wade , B . W . JANUS : An interactive system For document composition . Sigplan Norices . 16 , ( 1981 ) 82 - 91 . 1 . Conklin , J . Hypertext : An introduction and survey . Compurer , JO , ( 1987 ) 17 - 41 5 . Cook , P . , Ellis , C . , Graf , M . , Rein , G . , & Smith , T . Project Nick : Meetings augmentation and analysis . ACM Transactions on Ojke Informarion Sysrems , 5 . ( 1987 ) 1X2 - 146 6 . Coombs , J . H . , Renear , A . H . , & DeRose , S . , Markup systems and the future of scholarly text processing , Communicarions of rhe ACM . 30 , ( 1987 ) 933 - 947 . 7 . Delisle , N . M . & Schwartz , M . D . Contexts : A partitioning concept for hypertext . ACM Transactions on OfSlce Informarion Sysrems , 5 , ( 1987 ) 168 - 186 8 . Edwards , M . U . , Levine , J . A . , Kurland , D . M . ForCommenr . Broderbund , 1986 . 36 9 . Fish , R . A comparison of remote and standard collaborations . Paper presented at the Workshop on Technology and Cooperative Work , Tucson , AZ , February 26 - 25 , 1988 . 10 . Greif , I . & Sarin , S . Data sharing in group work . ACM Transactions on Office Information Systems , 5 , ( 1987 ) 187 - 211 11 . Hackman , J . R . The design of work teams . In J . W . Lorsch ( Ed . ) , Handbook of Organizational Behavior . Englewood Cliffs , NJ : Prentice - Hall , ( 1983 ) 315 - 342 . 12 . Halasz , F . G . , Moran , T . P . , & Trigg , R . H . Notecards in a nutshell . Proceedings of CHI + GI 2987 . New York : ACM Press , 1987 , 45 - 52 . 13 . Hammer , M . , Ilson , R . , Anderson , I’ . , Gilbert , E . , Good , M . , Niamir , B . , Rosenstein , L . , & Schoichet , S . The implementation of Etude : An integrated and interactive document production system . Sigpian Notices , 16 , ( 1981 ) 137 - 146 . 14 . Hiltz , S . R . & Turroff , M . The Network Nation : Human Communication via Computer . Reading , MA : Addison - Wesley , 1978 . 15 . Holt , A . W . , Ramsey , H . R . , & Grimes , J . D . Coordination system technology as the basis for a programming environment . Electrical Communication , 57 , ( 1983 ) 307 - 314 . 16 . Kraut , R . E . Collaboration in writing books . Unpublished research . 17 . Kraut , R . E . , Galegher ! J . & Egido , C . Relationships and tasks in scientific collaboration . Human - Computer Interaction , In press . 18 . Malone , T . W . , Grant , K . R . , Lai , K . - Y . , Rao , R . , & Rosenblitt , D . Semistructured messages are surprisingly useful for computer - Supported coordination . ACM Transactions on Oflce Information Systems , 5 , ( 1987 ) 115131 . 19 . Malone , T . W . , Grant , K . R . , Turbak , F . A . , Brobst , S . A . , & Cohen , - MM . D . Intelligent information - sharing systems . Communications of the ACM , 30 , ( 1987 ) 390 - 402 . 20 . McGrath , J . E . Groups : Interaction and Performance . Englewood Cliffs , NJ : Prentice - Hall , Inc . , 1984 . 21 . Meyrowitz , N . Intermedia : The architecture and construction of an object - Oriented hypermedia system and applications framework . Sigplan Notices , 21 , ( 1986 ) 186201 22 . Meyrowitz , N . & van Dam , A . Interactive editing systems . Computing Surveys , 14 , ( 1982 ) . 23 . Over , R . Collaborative research and publication in psychology . American Psychologist , 37 , ( 1982 ) 996 - 1001 . 24 . Parries , R . ConferII . Ann Arbor , MI : Advertel Communications Systems , 1985 . 25 . Sarin , S . & Greif , I . Software for interactive on - Line conferences . Proceedings for ACM - SIGOA Conference on Oflce Information Systems , June 1984 . 26 . Sarin , S . & Greif , I . Computer - Based real - time conferencing systems . Computer , 18 , ( 1985 ) 33 - 45 27 . Scheifler , R . W . & Gettys , J . The X window system . ACM Transactions on Computer Graphics , 5 , ( 1986 ) 79 - 109 . 28 . Stefik , M . , Bobrow , D . B . , Foster , G . , Lanning , S . , & Tatar , D . WYSIWIS revised : Early experiences with multiuser interfaces . ACW Transactions on Ofice information Systems , 5 , ( 1987 ) 147 - 167 29 . Tichy , W . F . Design , implementation , & evaluation of a revision control system . Proceedings of the 6th International Conference on Software Engineering , ( 1982 ) , 58 - 67 , 30 . Trigg , R . H . & Weiser , M . , TEXTNET : A network - based approach to text handling . ACM Transactions on Office Information Systems , I , ( 1986 ) l - 23 . 31 . Walker , J . H . The Document Editor : A support environment for preparing technical documents . Sigplan Notices , 16 , ( 1981 ) 44 - 49 . 32 . Yankelovich , N . , Meyrowitz , N . , & van Dam , A . Reading and writing the electronic book . Computer , 18 , ( 1985 ) 15 - 30 37