Cliques and Clustering : A Combinatorial Approach Anuj Mehrotra Department of Management Science School of Business Administration University of Miami Coral Gables , FL 33124 - 8237 e - mail : anuj @ umiami . ir . miami . edu Michael A . Trick Graduate School of Industrial Administration Carnegie Mellon University Pittsburgh , PA 15213 - 3890 e - mail : trick + @ cmu . edu March 18 , 1997 Submitted Abstract We use column generation and a specialized branching technique for solving con - strained clustering problems . We also develop and implement an innovative com - binatorial method for solving the pricing subproblems . Computational experiments comparing the resulting branch - and - price method to competing methodologies in the literature are presented and suggest that our technique yields a signi(cid:12)cant improvement on the hard instances of this problem . 1 1 Introduction Given a graph G ( V ; E ) where V is the vertex set and E is the edge set , and edge weights we ; e 2 E , we consider clustering problems that involve partitioning G into connected sub - graphs or clusters such that the sum of the edge weights in every cluster is maximized ( or , equivalently , the total weight on edges between clusters in minimized ) . Several graph par - titioning type problems have been studied in the literature . Uncapacitated versions of this problem model a common problem in qualitative data analysis of partitioning a number of items into clusters , where items within a cluster tend to be homogeneous with respect to some given characteristics . These clusters provide a succinct summary of the data in a way that lends itself to further analysis ( for instance , restricting analysis to items in the same cluster , or (cid:12)nding representative items within each cluster ) . See for example , Barahona and Majhoub [ 1 ] , Chopra [ 3 ] , Chopra and Rao ( [ 4 ] , [ 5 ] ) , and Gr(cid:127)otschel and Wakabayashi ( [ 8 ] , [ 9 ] ) . In the capacitated versions of the problems we consider , the nodes that can be present in each cluster are restricted by a knapsack constraint . This model is used in applications such as computer register allocation , design of electronic circuits , and in (cid:12)nite element computations as given in Ferreira et al . [ 6 ] . One approach to these problems is to determine the polyhedral structure of a formulation and apply cutting plane methods . Gr(cid:127)otschel and Wakabayashi ( [ 8 ] , [ 9 ] ) provide a detailed description of the uncapacitated clustering problem and give a cutting plane approach for solving a particular integer programming formulation . This approach , as illustrated in [ 9 ] and con(cid:12)rmed by our experience when we implemented it for comparisons , is very e(cid:11)ective for these clique partitioning problems . 2 Similar methods are not as e(cid:11)ective for capacitated clustering problems . Ferreira et al . [ 6 ] provide a number of classes of cutting planes for the clustering problem where the nodes in each cluster must satisfy a knapsack constraint . Despite the use of the most favorable formulations , a state - of - the - art implementation , and strong valid inequalities , it appears that the polyhedral structure of these capacitated graph partitioning problems does not lend itself to an e(cid:11)ective branch - and - cut procedure . We use decomposition methods for these problems . These methods , called branch - and - price or column generation methods , are e(cid:11)ective when aspects of the problem can be en - capsulated in a subproblem optimization . Surveys and general papers on this technique include Barnhart et al . [ 2 ] , Johnson et al . [ 11 ] and Vanderbeck [ 21 ] . Our objective is to exploit the advantages of the branch - and - price approach , which include the strength of the linear programming relaxation of the corresponding formulation , and the ability to easily accommodate various restrictive modi(cid:12)cations to the problems that arise in applications of practical interest . As a subproblem in this branch - and - price approach , we need to solve a problem of inde - pendent interest : the knapsack - constrained maximum weighted cluster problem . The sub - problem is of independent interest because of its equivalence to a node constrained max - cut problem [ 1 ] and to a capacity constrained 0 - 1 boolean quadric program [ 16 ] . The polyhedral structures corresponding to various formulations for this problem are again very complicated and the separation problem for most known valid inequalities are di(cid:14)cult [ 12 , 21 ] . In previous work on coloring problems [ 14 ] , we developed and implemented an enumera - tion procedure for solving maximum weight clique problems in which the weight of a clique 3 was given by the weights on the nodes in the clique and there were no capacity constraints . We extend that procedure to the knapsack - constrained maximum weighted cluster problem . Our combinatorial method for this problem uses innovative bounding techniques , includes exploiting a tightening procedure based on maximum (cid:13)ow , and is very fast on small to medium sized problems . We use this extension to develop a column generation procedure for solving clustering problems that is comparable to methods for solving uncapacitated clustering problems and yields signi(cid:12)cant improvements on capacitated clustering problems . In the remaining sections , we provide a description of the mathematical formulations , explain our combinatorial method for solving the maximum weight clique problem with capacity restrictions , outline the branch - and - price methodology and present computational results . We conclude with a summary of our contributions . 2 Mathematical Formulations In this section , we (cid:12)rst discuss the uncapacitated clustering problem ( UCP ) which is also known as the clique partitioning problem when the underlying graph is complete . Next , we discuss the formulation that has been most recently used for solving capacitated cluster - ing problems by branch - and - cut procedures and close this section by providing a unifying formulation that models several di(cid:11)erent clustering problems . 2 . 1 The Uncapacitated Clustering Problem Given a complete graph G = G ( V ; E ) on n vertices , with weight wij on edge ( i ; j ) 2 E ( which is not restricted in sign ) , a cluster of G is a subset of nodes together with all edges 4 induced by that subset . The weight of a cluster is the sum of the weights of the edges within the cluster . The clustering problem is to partition the nodes into clusters so that the sum of the weights of the clusters is maximized . Gr(cid:127)otschel and Wakabayashi [ 8 ] and [ 9 ] ( henceforth GW ) formulate this problem as follows : Let xij be a binary variable that is 1 if i and j are placed in the same cluster : then the uncapacitated clustering problem ( UCP ) is to Maximize X ij wijxij Subject to xij + xjk (cid:0) xik (cid:20) 1 ; 1 (cid:20) i < j < k (cid:20) n xij (cid:0) xjk + xik (cid:20) 1 ; 1 (cid:20) i < j < k (cid:20) n (cid:0)xij + xjk + xik (cid:20) 1 ; 1 (cid:20) i < j < k (cid:20) n xij 2 f0 ; 1g ; 1 (cid:20) i < j (cid:20) n Each constraint is a triangle constraint that says that if i and j are in the same cluster , and j and k are in the same cluster , then i and k are in the same cluster . While GW further explore the polyhedral structure of this problem , their computational results show quite clearly that the linear relaxation of the above integer program is an excellent representation of the clustering problem . In fact , for only one practical problem were they unable to solve the integer program by solving the linear program ( in that case , adding two other valid inequalities su(cid:14)ced to (cid:12)nd the optimal integer solution ) . However , one di(cid:14)culty of the GW formulation is that the linear relaxation of UCP is a very large even for small sized problems . For instance , for 30 nodes , the linear relaxation of UCP has approximately 12 , 000 constraints . Therefore , rather than solving the linear 5 program directly , GW suggest a cut generation technique where a subset of triangle inequality constraints is used initially , and then new constraints are added only if they are violated by the current linear programming solution . They show that typically only a small fraction of the possible triangle inequalities are actually needed to (cid:12)nd the optimal linear programming solution ( and that solution is almost always integral ) . There are a few drawbacks to the approach of GW . First , the linear program may turn out to be of signi(cid:12)cant size , even within the bounds of a cut generation technique . Second , the formulation is not robust to additional requirements on the clusters . It is very di(cid:14)cult to add constraints on the number of clusters chosen without adding a large number of auxiliary variables . 2 . 2 The Capacitated Clustering Problem The capacitated clustering problems we consider in this paper limit the nodes in the clusters by including a knapsack constraint on node weights in each cluster . There are several alternate formulations considered for these problem , see for example , [ 10 , 12 ] . Among these formulations , the one which has been found most useful for solution via a branch - and - cut procedure is discussed here . The following formulation that models this capacitated clustering problem ( CCP ) is based on minimizing the weight on edges that have end - nodes in di(cid:11)erent clusters and has been studied in [ 6 , 7 ] : 6 Min X e2E weye Subject to K X k = 1 z k i = 1 ; i 2 V X i2V fiz k i (cid:20) F ; k = 1 ; : : : ; K X k2K1 z k i (cid:0) X k2K1 z k j ; (cid:20) yij K1 (cid:18) f1 ; : : : ; Kg ; ( i ; j ) 2 E yij ; z k i 2 f0 ; 1g ; i 2 V ; k = 1 ; : : : ; K : In this model , yij is 1 if the edge ( i ; j ) is in the multicut , and 0 otherwise . The node variables z k i determine if node i is in cluster k . It is assumed that there are K clusters to be formed and that the node capacity of each cluster is limited by the knapsack constraints P i2V fiz k i (cid:20) F . Ferreira et al . [ 6 ] study the polyhedral structure of this formulation and use a branch - and - cut procedure to solve capacitated graph partitioning problems in [ 7 ] . This and other direct explicit formulations [ 6 , 7 , 11 ] , do not have a strong LP relaxation . Furthermore , the known valid inequalities for these problems are di(cid:14)cult to separate . Even very sophisticated and specialized branch - and - cut procedures as reported in Ferreira et al . [ 7 ] do not provide very encouraging results . 7 2 . 3 Unifying Formulation To overcome these di(cid:14)culties , we use an alternative formulation which will be solved using a branch - and - price method . Let s be a generic cluster of G , and let xs be a binary variable that will be 1 if cluster s is used in the solution to the clustering problem and 0 otherwise . Let ws be the weight of the cluster . Then the clustering problem cluster formulation , ( CF ) , is Maximize X s wsxs Subject to X s : i2s xs = 1 ; for all i 2 V xs 2 f0 ; 1g The constraint says node i must be in exactly one of the chosen clusters . This formu - lation captures both capacitated as well as uncapacitated clustering problems . Additional requirements can also be easily incorporated , including upper bounds on the number of clus - ters chosen ( by adding a constraint limiting P s xs ) and various limits on each cluster ( by not including variables corresponding to infeasible clusters ) . For a problem of any reasonable size , there are certainly far too many variables to solve CF directly . We can solve the linear relaxation of CF by using column generation . The following is a brief overview of the column generation technique in terms of CF . Begin with a subset (cid:22) S of clusters . Solve the linear relaxation of CF restricted to s 2 (cid:22) S . This gives a feasible solution to the linear relaxation of CF and a dual value (cid:25)i for each constraint in CF . Now , determine if it would be useful to expand (cid:22) S . This can be determined by solving the 8 following Maximum Weight Cluster Problem ( MWCP ) : Given a graph G ( V ; E ) with node weights (cid:25)i ; i 2 V and edge weights wij ; ( i ; j ) 2 E , (cid:12)nd a cluster whose total weight ( node and edge weight together ) is maximized . If the optimal value is less than or equal to 0 , then there exist no improving clusters : the solution to the linear relaxation of CF over the current (cid:22) S also solves the linear relaxation of CF over S . Otherwise , any feasible solution to this problem with total weight greater than 0 provides an improving cluster . In particular , the optimal solution corresponds to the maximum weight cluster that should be added to (cid:22) S . This process is repeated until there is no improving cluster . If the resulting solution to the linear relaxation of CF has xs integer for all s 2 (cid:22) S , then xs corresponds to an optimal solution to CF over all clusters . When some of the xs are not integer , though , we are faced with the problem of enforcing integrality . If there are constraints on the number of clusters to be chosen , the duals for these constraints will simply modify the cuto(cid:11) for an improving cluster . For instance , if there is an upper bound U , and (cid:13) is the dual value for the corresponding constraint , then a cluster must have value at least (cid:13) in order to improve the solution . To complete this algorithm , we need to do two things . First , since MWCP is itself a di(cid:14)cult problem , we must devise techniques to solve it that are su(cid:14)ciently fast to be able to be used repeatedly . This technique must also be able to handle capacity restrictions . Second , we must (cid:12)nd a way of enforcing integrality if the solution to the linear relaxation of CF contains fractional values . Standard techniques of enforcing integrality ( cutting planes , (cid:12)xing variables ) make it di(cid:14)cult or impossible to generate improving clusters . We discuss 9 these two problems in the next two sections . 3 Generating Improving Clusters In order for any column generation technique to work well , it is necessary to have a fast algorithm for solving the problem for generating improving clusters . For this clustering problem , the subproblem has a very natural interpretation . The subproblem can be seen as a Maximum Weighted Cluster Problem : given a graph with weights on the nodes and edges , (cid:12)nd a complete subgraph that has largest weight , where the weight of a subgraph is the sum of the node weights and edge weights in the subgraph . For the uncapacitated clustering problems , the edge weights are typically unrestricted in sign . The nodes weights that correspond to the optimal dual values for the master linear program are nonpositive as long as the single node clusters are included in the master linear program . We will assume that the graph is complete ( if not , edges with large negative costs can be added to make it complete ) . We devise an implicit enumeration technique that uses innovative bounding techniques to reduce the search space . The basic outline of the algorithm is as follows : at each step each node is either in the cluster , not in the cluster , or undecided . An \ undecided " node is chosen as the branching variable and two new problems are created : one where the node is in the cluster , and another where the node is not in the cluster . In order to reduce the search , an upper and lower bound is calculated for each subproblem , and the algorithm keeps track of the best cluster found to date . If the upper bound of a subproblem is no more than the weight of best cluster , the subproblem may be fathomed , since no better solution can be 10 found . If the lower bound represents a feasible solution , and it is better than the best cluster found , then the best cluster found is replaced with the lower bound solution . There are three keys to this algorithm : the calculation of the upper bound , the (cid:12)nding of a feasible solution ( and a lower bound ) , and the choice of a branching variable . Let G be a complete graph , let ui be the weight on node i , and let wij be the weight on edge ( i ; j ) . A subproblem consists of a set S of nodes that must be in the cluster and a set U of nodes that may or may not be in the cluster . 3 . 1 Upper Bounds Let a + be a if a (cid:21) 0 and 0 otherwise . Clearly , the following value is an upper bound on the maximum weight cluster : X i2S ui + X i2S ; j2S wij + X i2U u + i + X i2S [ U ; j2U w + ij ( UB ) In this bound , all the weight within S is added to all positive weight associated with U . This bound is very simple to calculate , but is not likely to be very useful : any negative values within U are simply ignored . The bound can be strengthened in the case that some or all of the node weights are negative . Consider a node i 2 U with ui < 0 and an edge ( i ; j ) with wij > 0 . Let (cid:14) = minfwij ; (cid:0)uig . Create a new clustering problem identical to the current problem except ui is replaced by ui + (cid:14) and wij by wij (cid:0) (cid:14) . In this new problem , the weights of all clusters have remained the same or increased ( if the cluster contains neither or both of i and j or just j , then it remains the same , if it contains just i then it increases by (cid:14) ) . Therefore an 11 upper bound on the cluster weight in the new problem is also an upper bound on the cluster weight in the original . Using upper bound ( UB ) on the transformed problem , we decrease the upper bound by (cid:14) . We call this transformation shifting , since positive weight is shifted from the edges to the nodes to cancel negative weight there . The weight from edge ( i ; j ) can be shifted to either i or j , or it can be shifted to both as long as the amount shifted is no more than wij . The problem of (cid:12)nding the optimal shifting ( the one that gives the smallest upper bound ) can be formulated as a transportation problem . On the left hand side of the graph , create a node for each edge with positive weight with supply w ( i ; j ) . On the right hand side , create a node for each node with negative weight with demand (cid:0)ui . Create an edge from the ( i ; j ) node to i and another edge to j . The problem of maximizing the (cid:13)ow sent out of the edge nodes is equivalent to (cid:12)nding the best upper bound . Rhys [ 18 ] ( and also Picard and Ratli(cid:11) [ 17 ] ) use the network given to solve the cluster - ing problem when all edge weights are positive and all node weights are zero or negative . Essentially , our enumerative procedure changes negative edge weights to zero and uses the resulting solvable special case to form an upper bound . 3 . 2 Lower Bounds We can get a lower bound for each subproblem by (cid:12)nding a feasible solution . While more complicated heuristics are possible , one simple heuristic would be to put all of U in the cluster , together with S . Another heuristic would be take none of U , so to take S alone as the cluster . Keeping in mind , however , the results of Rhys , a natural feasible solution is to 12 place all nodes whose weight after shifting is zero or positive into the cluster . In the case where there are no negative cost edge weights , this is the optimal cluster ; otherwise this is a heuristic ( but likely very good ) cluster . 3 . 3 Branching Variable There are many possible variables that could be chosen as the branching variable . For instance , simply picking a member of U at random would be a valid choice . Computationally , it seems that making a better choice involves examining the e(cid:11)ect that (cid:12)xing a variable has on the upper and lower bounds . For instance , choosing the variable to be in S that gives the lowest upper bound is a possible choice . This was the choice made in our computational results . Such a variable often leads to quick fathoming in at least one of the branches . A special type of branching occurs when it can be shown that one branch cannot possibly contain the optimal solution . This type of branching is called variable (cid:12)xing and can greatly reduce the search space . For instance , consider a node i of U and the sum of its weight and the weight of all edges ( i ; j ) for j 2 S . If this sum is negative , and cannot be made positive by adding in any set of edges from i to members of U , then clearly i cannot be in any optimal cluster . Similarly if the sum is positive and cannot be made negative by adding in any set of edges from i to members of U , then i must be in the optimal cluster . In each case we can (cid:12)x the variable to be in the cluster or out of the cluster respectively . 13 3 . 4 Modi(cid:12)cations for Capacitated Problem This algorithm is easily modi(cid:12)ed to include capacity restrictions on the cluster . The following changes are needed : 1 . A problem can be fathomed when the total size of the elements of S is larger than the knapsack capacity . 2 . The upper bound is calculated as follows : during the weight shifting phase , all positive edge weights are shifted to the nodes , giving modi(cid:12)ed node weights u 0 i . Items are ordered in decreasing u 0 i = fi order and added to the knapsack until the knapsack is (cid:12)lled ( with possibly a fractional amount of the last item added ) . It is straightforward to show that this gives an upper bound on the optimal weighted clique . 3 . The ordering given can be used as an alternative branching rule . Our computational results suggest branching on the highest u 0 i = fi node ( which di(cid:11)ers from standard knap - sack problems that branch on the fractional item ) . 4 . Variable (cid:12)xing at 1 cannot be done , due to the presence of the knapsack constraint . The resulting algorithm solves the capacitated weighted cluster problem roughly as quickly as the basic algorithm solves the uncapacitated weighted cluster problem : the ad - vantages ( early fathoming , improved branching ) seem to o(cid:11)set the disadvantages ( lack of variable (cid:12)xing ) . The enumerative algorithm we use is very robust to modi(cid:12)cations in the problem . For instance , there is no di(cid:14)culty in modifying it to handle upper and lower bounds on the cluster 14 size : this simply changes the lower bound calculation and provides alternative fathoming possibilities . 3 . 5 Implementation There are a number of other aspects that are critical to an e(cid:11)ective implementation . For example , a code that recalculates the upper and lower bounds for each subproblem will be much slower than one that incrementally changes those bounds to re(cid:13)ect nodes added to and removed from the cluster . Each of the upper bounds , lower bounds , branching , and (cid:12)xing must be done in order to have an e(cid:11)ective code . To see this , we solved a series of problems generated by the column generation process . Each problem came from the same underlying clustering problem , so each has 33 nodes . The only di(cid:11)erences come from the weights associated with the nodes . The twelve problems come from the (cid:12)rst twelve iterations of the column generation technique . For this problem , there were no upper or lower bounds on the cluster size . Results from other instances show similar features . We created four codes . The (cid:12)rst , denoted I , uses only the simple upper bound and branches on the (cid:12)rst unassigned variable . The second code ( II ) tightens the upper bound by heuristically solving the transportation problem at each step . The third code ( III ) improves on II by choosing the branching node as given in the branching subsection . The fourth code ( IV ) adds in the simple variable (cid:12)xing . For each code we report the number of subproblems ( SP ) solved and the CPU time ( T ) ( in seconds on a Sun Sparcstation 10 / 50 ) . The results are summarized in Table 1 . 15 Problem Code I Code II Code III Code IV T SP T SP T SP T SP 1 0 . 5 11417 0 . 5 11417 0 . 1 1409 0 . 1 376 2 0 . 3 5811 0 . 2 5811 0 . 1 739 0 . 1 262 3 0 . 5 9897 0 . 5 9897 0 . 1 991 0 . 1 396 4 0 . 9 18191 0 . 6 17443 0 . 2 1501 0 . 1 374 5 1 . 4 29429 0 . 9 27049 0 . 3 2533 0 . 1 613 6 1 . 0 42829 1 . 1 32965 0 . 3 3217 0 . 1 612 7 4 . 0 87881 2 . 1 64529 0 . 5 4477 0 . 2 1012 8 6 . 6 147141 2 . 4 75941 0 . 8 8325 0 . 3 1616 9 12 . 7 270099 2 . 6 83527 1 . 1 11357 0 . 2 1075 10 21 . 8 486933 3 . 4 108931 1 . 6 17151 0 . 2 1487 11 40 . 8 901653 3 . 6 116187 2 . 0 20695 0 . 2 1136 12 61 . 4 1377481 3 . 5 111759 1 . 9 21303 0 . 1 995 Table 1 : Comparison of four codes for Uncapacitated MWCP It is clear from the results that the simpler codes have di(cid:14)culty with the instances as the column generation technique progresses . The fully featured code , however , is robust to the changes in the node weights associated with the dual changes in the linear relaxation of CF as newer columns are added to it . The Maximum Weighted Cluster Problem can be also formulated using variables zij ( corresponding to edge ( i ; j ) in the cluster ) and xi ( corresponding to node i in the cluster ) . The problem is then to Maximize X ( i ; j ) 2E wijzij + X i2V (cid:25)ixi Subject to ze (cid:20) xi ze (cid:20) xj ze (cid:21) xi + xj (cid:0) 1 9 > > > > > > > > = > > > > > > > > ; e = ( i ; j ) 2 E ze (cid:21) 0 ; e 2 E ; and xi 2 f0 ; 1g ; i 2 V : 16 This formulation has been studied from a polyhedral perspective by Padberg [ 16 ] . A con - straint fixi (cid:20) F can be added to this formulation to model the capacity restriction . Solving this integer program directly however , is much slower than the combinatorial algorithm . We solved four sets of problems , where the instances in each set are from successive applica - tions of the column generation approach . Table 2 shows the success of the combinatorial algorithm . Number Number Combinatorial Integer of of Algorithm Programming Nodes Instances Algorithm 30 7 0 . 3 49 . 7 34 10 2 . 3 74 . 8 33 36 156 . 0 3899 . 0 40 88 64 . 5 1250 . 5 Table 2 : Solving the capacitated subproblem ( Total time in seconds ) 4 Branching ( Main Algorithm ) One di(cid:14)culty in using column generation for solution of integer programs is the development of branching rules to ensure integrality . Rules that are appropriate for integer programs where the entire set of columns is explicitly available do not (cid:12)t well with restricted integer programs where the columns are generated by implicit techniques . Consider , for instance , the rule of branching on a fractional variable , where the variable is set to 1 in one subproblem and set to 0 in the other . The former subproblem causes no problem for CF : setting a cluster to 1 corresponds to using that cluster . Those vertices can then be removed from the graph . The other subproblem is more di(cid:14)cult . Setting a variable to 0 corresponds to not permitting the use of that cluster . To prevent this cluster from being regenerated involves (cid:12)nding the 17 second , third , and so on best solutions to the already di(cid:14)cult subproblem . This is a much more expensive operation than simply (cid:12)nding the highest weight set . In the case of the set partitioning model , this di(cid:14)culty is overcome by using the so called Ryan - Foster branching [ 19 ] , also see [ 2 , 14 , 20 ] . Consider a fractional solution to the linear relaxation of CF . It is easy to see that there exist two sets S1 and S2 , and vertices i ; j , such that i 2 S1 \ S2 , and j 2 S1 n S2 , and at least one of xs1 or xs2 is fractional . Create the subproblems : DIFFER ( i , j ) and SAME ( i , j ) , where DIFFER ( i , j ) is a subproblem where i and j are in di(cid:11)erent clusters . This can be enforced by changing the weight between them to be a large negative number . SAME ( i , j ) is a subproblem where i and j are in the same cluster , which can be enforced by suitably collapsing i and j into a single node . The current fractional solution is valid for neither of the two subproblems , but clearly any feasible integer solution is in one of them . Since we have simply changed the graph , the subproblem solution method presented before will continue to work for these subproblems . More complicated branching rules are possible , but seem unnecessary here . In fact , none of the UCP instances required branching . This echoes the results of GW , who rarely needed more than the triangle inequalities to (cid:12)nd an optimal integer solution . Additionally , since the linear relaxation of CF is at least as strong as the linear relaxation of the more direct formulations , both for capacitated as well as uncapacitated clustering problems , only a few branches are usually explored . 18 5 Computational Experience 5 . 1 Clique Partitioning Problems The methodology has been implemented on a DEC ALPHA 3000 ( Model 300 ) workstation using CPLEX version 2 . 1 as the linear programming solver and MINTO version 1 . 5 [ 15 ] as the integer programming solver . First , we implemented the method of Gr(cid:127)otschel and Wakabayashi using CPLEX for solving some UCP instances ( our code for this is named LP - CLUS ) . GW show that their cutting plane technique is a very e(cid:11)ective method for solving this problem , and our results con(cid:12)rm that . The clustering code based on branch and price ( BP - CLUS ) used some simple heuristics in addition to the exact maximum weight cluster algorithm described in section 3 to identify good clusters . Table 3 illustrates the results for four sample data sets which appear in [ 9 ] . The (cid:12)rst contains morphological data on 36 cetacea ( whales , porpoises , and dolphins ) . The second has similar data on 30 types of wild cats . The third set concerns the opinions of 34 workers about their workplace and environment . The fourth set describes the maintenance experience of 33 cars . In all cases , the objective was to use the data to cluster the items into similarity classes without limits on cluster size or number of clusters . The results show a clear advantage for LP - CLUS , though BP - CLUS is not tremendously slow . The strength of BP - CLUS , however , is in its (cid:13)exibility . In all of the above cases , the solution consisted of one large cluster and a small number of very small clusters . In 19 Number of LP - CLUS BP - CLUS Nodes Time Time 36 0 0 33 1 2 34 27 166 33 12 68 Table 3 : Clique Partitioning Problem ( Times in seconds ) order to (cid:12)nd the most useful clusters , it is necessary to see the sensitivity of the objective to restrictions on cluster size and number . If the objective does not change much when clusters are forced to more evenly sized , the result may be more useful than the unrestricted solution . We consider the capacitated clustering problems next . 5 . 2 Capacitated Clustering Problems For capacitated clustering problems , we use the compiler design problems (cid:12)rst introduced in [ 11 ] as our test case . These problems have subsequently also been solved by Ferreira et al . [ 7 ] and by Vanderbeck [ 21 ] . Ferreira et al . [ 7 ] use the formulation in section 2 . 2 and a branch - and cut method . While their code performs well for smaller instances , they report large computation times for the more di(cid:14)cult problems . One of the problems that they did not run to completion , would reportedly require days of computation time for verifying optimality . Vanderbeck [ 21 ] has implemented a column generation approach which works better for these problems . Vanderbeck [ 21 ] reports that his computational experiments indicate that solving the pricing subproblem directly using commercial software outperforms the use of a specialized branch - and - cut procedure for solving the subproblems . The di(cid:14)culties for the branch - and - cut approach for solving the subproblems are some - what explained by the complexity of the separation problems typically encountered . Most of 20 the separation problems for the known valid inequalities are either known or suspected to be NP - hard . In particular , the following separation problem for a critically important inequal - ity : given a graph with edge and node weights , determine a maximum weighted subtree such that the nodes in the tree satisfy a capacity restriction is shown to be MAXSNP - complete [ 13 ] , so not only is it NP - hard to determine optimal solutions , it is not possible to deter - mine arbitrarily good approximate solutions in polynomial time unless P = NP . Hence , a cutting - plane approach that requires repeated solution of such separation problems is bound to encounter di(cid:14)culty . It seems , then , that a branch - and - price approach that uses state - of - the - art commercial software for solving the subproblems appears to be the best available methodology in the literature for these problems . We , therefore , (cid:12)rst implemented a branch - and - price method using our combinatorial method for solving the ( capacitated ) maximum weighted cluster subproblems and then implemented the subproblem using CPLEX 4 . 0 directly . Formulating and solving an integer programming formulation of the subproblem led to a number of di(cid:14)culties and decisions . Note that when an edge weight for edge ( i ; j ) , is positive , the constraint zij (cid:21) xi + xj (cid:0) 1 is unnecessary because the maximization objective automatically forces this constraint to be satis(cid:12)ed . Therefore , we included these constraints only when an edge had to be given a high negative weight to implement the DIFFER ( i , j ) rule . Without this exclusion , the integer programming formulation can not be solved by CPLEX in times that would still be comparable . Similarly , even though we used a code that (cid:12)nds maximum weight cliques ( and hence we used edges of weight zero to complete the original graph ) , we did not include the corresponding edge constraints in the 21 integer programming formulation . This tended to speed up the CPLEX implementation by about 25 % . The size of the graphs for the capacitated clustering problems is shown in Table 4 . The LP and IP values shown represent the objective value for the LP relaxation of the uni(cid:12)ed formulation and the optimal integer objective value respectively . The knapsack capacity is limited to be either 450 or 512 . F = 450 F = 512 Graph Nodes Edges LP IP LP IP 1 45 98 2928 2928 3238 3238 2 30 56 1642 1642 1748 1748 3 47 101 3574 3569 3969 3960 4 47 99 1837 1837 1993 1993 5 30 47 1099 1099 1174 1174 6 61 187 22245 22216 23564 23564 Table 4 : Capacitated Clustering Problems Since , in branch - and - price methods , it is not necessary to generate the most enterable column , or the cluster that prices out most favorably , often subproblems are not solved to completion . We provide results in Tables 5 and 6 when the subproblems are solved to completion . In Tables 7 and 8 , we summarize the results when the (cid:12)rst improving cluster is found at each iteration . To understand the role of number of improving clusters generated for overall optimization as the quality of improving clusters is changed , we also solved these problems with a target value of 25 . 0 for an improving cluster . These results are summarized in Tables 9 and 10 . The results under the heading combinatorial method use the method for solving the sub - problems as developed here . The heading CPLEX summarizes the results obtained when the subproblems were solved using CPLEX on the integer programming formulation in section 22 3 . 5 . The cluster capacity is 450 for results in Tables 5 , 7 and 9 , and a capacity of 512 is used for problems in Tables 6 , 8 and 10 . The tables list the cpu seconds , the number of clusters generated and the number of nodes explored in the branch - and - price tree to determine the optimal solutions . For all these results , the branch - and - price algorithm was implemented us - ing MINTO version 2 . 0 and CPLEX version 4 . 0 was used . The platform was DEC ALPHA MODEL 300 . For CPLEX runs , an asterisk next to timings indicates that numerical di(cid:14)culties were overcome by adjusting tolerances for enterable column after it was determined that the method will not converge with an optimal solution otherwise . Such an adjustment in tol - erance appears to be necessary only in one or two subproblems after branching to prevent an in(cid:12)nite regeneration of a non - enterable columns . Despite this tolerance adjustment , the solutions found were optimal . Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 46 . 9 43 1 99 . 2 43 1 2 3 . 0 29 1 19 . 6 25 1 3 139 . 5 86 11 342 . 5 104 13 4 201 . 7 51 1 137 . 6 50 1 5 2 . 5 30 1 17 . 0 30 1 6 352 . 4 124 5 1553 . 0 * 126 5 Table 5 : Subproblems solved to optimality , Capacity 450 There are several interesting observations from these tables . First note that the strength of the unifying formulation used in branch - and - price method is clearly demonstrated as it is often unnecessary to branch and the LP optimal is integral . Secondly , almost universally , the combinatorial method outperforms the state of the art integer programming code . Further - more , it is clear that from a perspective of (cid:12)nding approximate solutions , the combinatorial 23 Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 79 . 5 57 1 109 . 4 53 1 2 3 . 3 24 1 15 . 9 24 1 3 115 . 8 107 5 467 . 5 * 155 15 4 438 . 4 61 1 218 . 5 73 1 5 3 . 0 31 1 17 . 9 30 1 6 394 . 4 109 1 961 . 7 119 1 Table 6 : Subproblems solved to optimality , Capacity 512 Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 29 . 6 140 1 82 . 3 76 1 2 1 . 4 45 1 16 . 3 32 1 3 44 . 7 241 7 255 . 8 161 5 4 84 . 7 123 1 113 . 0 84 1 5 2 . 8 75 1 16 . 1 47 1 6 415 . 1 582 5 912 . 2 205 5 Table 7 : First improving cluster , Capacity 450 Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 113 . 3 216 1 91 . 7 87 1 2 2 . 9 79 1 16 . 3 39 1 3 164 . 4 315 11 222 . 5 158 11 4 298 . 8 217 1 107 . 6 83 1 5 4 . 9 117 1 14 . 2 38 1 6 771 . 0 405 1 659 . 5 162 1 Table 8 : First improving cluster , Capacity 512 Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 22 . 3 76 1 66 . 9 76 1 2 2 . 2 38 1 11 . 6 32 1 3 117 . 2 187 7 243 . 6 161 5 4 112 . 7 102 1 91 . 2 84 1 5 2 . 2 45 1 13 . 0 47 1 6 349 . 9 379 5 865 . 7 205 5 Table 9 : Target of 25 . 0 , Capacity 450 24 Combinatorial Method CPLEX Graph seconds subp nodes seconds subp nodes 1 80 . 3 126 1 72 . 6 87 1 2 3 . 4 55 1 13 . 1 39 1 3 143 . 1 162 5 226 . 4 158 11 4 134 . 8 131 1 86 . 3 83 1 5 4 . 5 61 1 11 . 2 38 1 6 363 . 3 269 1 613 . 0 166 1 Table 10 : Target of 25 . 0 , Capacity 512 method is even better as the number of subproblems solved by the combinatorial method far exceeds those solved by CPLEX in more time . With regard to whether the subproblems should be solved to optimality , as expected , there is a trade - o(cid:11) as the number of clusters generated increases overall with lower cut - o(cid:11) for an enterable cluster . The overall timings for these problems do not seem to be extremely dependent on this choice . This can be inferred as a demonstration of robustness of the method and provides a good comparison between the two approaches to solve the subproblems in a stable sense . 6 Conclusions We have implemented a branch - and - price technique for solving clustering problems . We have used this for solving both some capacitated as well as uncapacitated problems and compared this to the state - of - the - art competitive methods . We have also presented a specialized branch - and - bound procedure for the maximum weight clique problem , a problem of independent interest because of its relationship with boolean quadratic programs [ 16 ] . Limited experiments indicate that this specialized method is much more e(cid:11)ective than solving an integer programming formulation for this problem . 25 In order to improve the branch and price technique , it is clear that still faster ways are needed to solve the subproblems which tend to be very time consuming . An improved method will likely involve still tighter upper bounds that can quickly show when no improving cluster exists . References [ 1 ] F . BARAHONA and R . MAJHOUB , 1986 . On the cut polytope . Mathematical Pro - gramming 36 , 157 - 173 . [ 2 ] C . BARNHART , E . L . JOHNSON , G . L . NEMHAUSER , M . W . P . SAVELSBERGH , and P . H . VANCE . Branch - and - Price : Column Generation for Huge Integer Programs . Operations Research , to appear . [ 3 ] S . CHOPRA , 1994 . The graph partitioning polytope on series - parallel and 4 - wheel free graphs . SIAM journal on discrete mathematics 7 , 16 - 22 . [ 4 ] S . CHOPRA and M . R . RAO , 1993 . The partition problem . Mathematical Programming 59 , 87 - 116 . [ 5 ] S . CHOPRA and M . R . RAO , 1991 . On the multiway cut polyhedron . Networks 21 , 51 - 89 . [ 6 ] C . E . FERREIRA , A . MARTIN , C . C . DE SOUZA , R . WEISMANTEL and L . A . WOLSEY , 1996 . Formulations and valid inequalities for the node capacitated graph partitioning problem . Mathematical Programming , 74 , 247 - 266 . 26 [ 7 ] C . E . FERREIRA , A . MARTIN , C . C . DE SOUZA , R . WEISMANTEL and L . A . WOLSEY , 1996 . The node capacitated graph partitioning problem : A computational study . CORE Discussion Paper , Universit(cid:19)e Catholique de Louvain , Lovain - la - Neuve , Belgium . [ 8 ] M . GR (cid:127) OTSCHEL and Y . WAKABAYASHI , 1989 . A cutting plane algorithm for a clustering problem . Mathematical Programming Series B 45 , 59 - 96 . [ 9 ] M . GR (cid:127) OTSCHEL and Y . WAKABAYASHI , 1990 . Facets of the clique partitioning polytope . Mathematical Programming 47 , 367 - 387 . [ 10 ] E . L . JOHNSON , 1989 . Modeling and strong linear programs for mixed integer pro - gramming . S . W . Wallace ( ed . ) . Algorithms and Model Formulations in Mathematical Programming , NATO ASI Series 51 . [ 11 ] E . L . JOHNSON , A . MEHROTRA , and G . L . NEMHAUSER , 1993 . Min - cut clustering . Mathematical Programming , 62 , 133 - 151 . [ 12 ] A . MEHROTRA , 1992 . Constrained Graph Partitioning : Decomposition , Polyhedral Structure and Algorithms . Ph . D . Thesis , Georgia Institute of Technology , Atlanta , GA . [ 13 ] A . MEHROTRA and C . A . TOVEY , 1997 . Maximum Weight Capacitated Subtrees , submitted . [ 14 ] A . MEHROTRA and M . A . TRICK , 1996 . A column generation approach for graph coloring . INFORMS Journal on Computing , 8 , 344 - 354 . 27 [ 15 ] G . L . NEMHAUSER , M . W . P . SAVELSBERGH , and G . C . SIGISMONDI , 1994 . MINTO , a Mixed INTeger Optimizer . Operations Research Letters , 15 , 47 - 58 . [ 16 ] M . PADBERG , 1989 . The boolean quadratic polytope : some characteristics , facets and relatives . Mathematical Programming Series B 45 , 139 - 172 . [ 17 ] J . C . PICARD and H . D . RATLIFF , 1975 . Minimumcuts and related problems . Networks 5 , 394 - 422 . [ 18 ] J . M . W . RHYS , 1970 . A selection problem of shared (cid:12)xed costs and network (cid:13)ows . Management Science 17 , 200 - 207 . [ 19 ] D . M . RYAN and B . A . FOSTER , 1981 . An integer programming approach to scheduling . A . Wren ( ed . ) Computer Scheduling of Public Transport Urban Passenger Vehicle and Crew Scheduling , North Holland , Amsterdam , 269 - 280 . [ 20 ] P . H . VANCE , C . BARNHART , E . L . JOHNSON , and G . L . NEMHAUSER , 1993 . Solving Binary Cutting Stock Problems by Column Generation and Branch - and - Bound . Computational Optimization and Applications , III , 111 - 130 . [ 21 ] F . VANDERBECK , 1994 . Decomposition and Column Generation for Integer Programs . Doctoral Thesis , Facult(cid:19)e des Sciences Appliqu(cid:19)ees , Universit(cid:19)e Catholique de Louvain , Lovain - la - Neuve , Belgium . 28