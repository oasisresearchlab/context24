Heuristic Solutions for General Concave Minimum Cost Network Flow Problems Dalila B . M . M . Fontes and José Fernando Gonçalves Faculdade de Economia da Universidade do Porto and LIACC Rua Dr . Roberto Frias , 4200 - 464 Porto , Portugal We address the single - source uncapacitated minimum cost network ﬂow problem with general concave cost functions . Exact methods to solve this class of prob - lems in their full generality are only able to address small to medium size instances , since this class of prob - lems is known to be NP - Hard . Therefore , approximate methods are more suitable . In this work , we present a hybrid approach combining a genetic algorithm with a local search . Randomly generated test problems have been used to test the computational performance of the algorithm . The results obtained for these test prob - lems are compared to optimal solutions obtained by a dynamic programming method for the smaller prob - lem instances and to upper bounds obtained by a local search method for the larger problem instances . From the results reported it can be shown that the hybrid method - ology improves upon previous approaches in terms of efﬁciency and also on the pure genetic algorithm , i . e . , without using the local search procedure . © 2007 Wiley Periodicals , Inc . NETWORKS , Vol . 50 ( 1 ) , 67 – 76 2007 Keywords : Network ﬂow ; heuristics ; genetic algorithms ; local search ; concave - cost optimization ; combinatorial optimization 1 . INTRODUCTION In this work , we focus on the Single Source Uncapaci - tated ( SSU ) concave Minimum Cost Network Flow Problem ( MCNFP ) , which can be used to address a broader class of MCNFPs . General nonlinear MCNFPs can be transformed into concave MCNFPs on an expanded network [ 27 ] . In addi - tion , multiple source and capacitated networks can be trans - formed into single source and uncapacitated networks [ 35 ] . Many practical situations where a product is routed through a network exist . This can be seen from the wide and diverse application areas in which network ﬂow problems Received April 2005 ; accepted July 2006 Correspondence to : D . B . M . M . Fontes ; e - mail : fontes @ fep . up . pt Contract grant sponsor : FCT ; Contract grant number : POCTI / MAT / 61842 / 2004DOI10 . 1002 / net . 20167 Published online in Wiley InterScience ( www . interscience . wiley . com ) . © 2007 Wiley Periodicals , Inc . have been utilized ( see e . g . , [ 18 ] and the references therein ) . Concave cost functions in network ﬂow problems arise in practice as a consequence of taking into account eco - nomic considerations ; for example , ﬁxed costs may arise and economies of scale often lead to a decrease in marginal costs . The complexity of concave MCNFPs arises from min - imizing a concave function over a convex feasible region , deﬁned by the network constraints , which implies that a local optimum is not necessarily a global optimum . Furthermore , there is no simple criterion for deciding whether a local min - imum is also a global minimum . The main feature deﬁning the complexity of MCNFPs is the type of cost function for each arc . A discussion of other parameters affecting problem complexity can be found in [ 7 ] . Most of the work developed on concave MCNFPs consid - ers SSU problems with ﬁxed - charge cost functions , that is , functions having a ﬁxed cost component and a linear rout - ing cost component . This problem is a particular case of the moregeneralSSUconcaveMCNFP , althoughNP - Harditself . Recent work on MCNFPs with ﬁxed - charge costs is given in [ 30 ] , where the authors also discuss other ﬁxed - charge prob - lems . Other works [ 19 , 20 , 32 ] considering routing concave costs do not include ﬁxed costs . MCNFPs involving both concave routing costs and ﬁxed costs on each arc have been addressed only by Burkard et al . [ 4 ] and Fontes et al . [ 8 , 9 , 11 ] . 2 . OVERVIEW OF EXISTING METHODS Existing algorithms for concave MCNFPs can be char - acterized in terms of the type of problems they solve and whether the solution provided is exact ( a global optimum ) or an approximation ( a bound ) . The problem types include restrictions on both the objective function and on the under - lying network . For example , a special case arises from considering a ﬁxed number of nonlinear arcs ( the remaining arcs being linear ) for which polynomial - time or even strongly polynomial - time algorithms have been developed , see [ 34 ] . Another special case of MCNFPs , for which numer - ous methods have been proposed , is the MCNFP with ﬁxed - charge costs . Recent works have been reported , for example , by Kim and Hooker [ 25 ] that have developed a NETWORKS—2007—DOI 10 . 1002 / net branch - and - bound method , which combines constraint pro - gramming techniques with linear programming techniques ; by Ortega and Wolsey [ 30 ] , who developed a branch - and - cut algorithm by extending the cutting planes used for solving uncapacitated lot sizing problems previously developed ; and by Kim and Pardalos , which give a dynamic slope scaling procedure for ﬁxed - charge costs [ 22 ] and for piecewise linear concave costs [ 23 , 24 ] . Among exact solution methodologies for general con - cave MCNFP , Branch - and - Bound ( BB ) has been the most commonly used ; a relevant discussion can be found in [ 21 ] and a more recent survey in [ 9 ] . An efﬁcient BB method to solve SSU concave MCNFPs is given in [ 12 ] . The branch - ing is done by adding arcs that extend the current subtree , while the bounding is obtained by linear underestimation . An improvement is given in [ 19 ] , where the bounding pro - cess has been enhanced by projecting the lower bound on the cost of extending the current path . The problems consid - ered have concave routing costs , but no ﬁxed costs and just some vertices are demand vertices . Horst and Thoai [ 20 ] used linear underestimation by convex envelopes and rectangular partition to develop an improved BB algorithm . In the prob - lems addressed all vertices are demand vertices ; only some arcs have concave costs ( without a ﬁxed cost component ) , the remainder being linear . In [ 9 ] , Fontes et al . give a BB method where the bounding is performed by lower bounds derived by state space relaxations [ 10 ] of a dynamic programming formulation [ 11 ] . The search is further restricted by using the upper bounds developed in [ 8 ] . The problems considered havegeneralconcavecostfunctionsonallarcsandallverticesaredemandvertices . Another successful approach is Dynamic Programming ( DP ) , although most previous works developed for MCNFPs are problem speciﬁc and take advantage of the speciﬁc net - work structure to increase efﬁciency . A DP approach , called “Send - and - Split” was proposed by Erikson et al . [ 6 ] to solve SSU concave MCNFPs . No computational results are reported , however ; it can be seen that the computational time requirements are exponential in the number of vertices . More recently , Fontes et al . [ 11 ] have developed a DP approach for SSU general concave MCNFPs . Although their method does not depend on the type and number of concave arc costs , it is useful for only small to medium problem instances as the computational requirements grow exponentially with prob - lem size . The results they have obtained are used to evaluate the quality of the solutions provided by the Hybrid Genetic Algorithm ( HGA ) for the smaller size instances . The authors were able to solve optimally problems with up to 19 vertices in about 5 h . Due to the complexity of nonlinear network optimization problems and to the fact that efﬁcient methods exist only for highly structured subclasses or small size problems , consid - erable effort in the research community has been devoted to approximate methods . Burkard et al . [ 4 ] consider acyclic graphs with small degree vertices and general concave cost functions . Linear approximations in a DP approach are obtained . For network ﬂow problems deﬁned on complete graphs , only problems with up to 21 vertices are solved for which the time requirements are above 13 h . Local search methods take advantage of the knowledge that an optimal solution to the SSU concave MCNFP is an extreme ﬂow . The main advantage is that the search is con - ﬁned to extreme ﬂows . The main drawback is that there are many solutions , where the method can get trapped , that are local optima but not global optima . An obvious way of trying to avoid such entrapment is to repeat the local search many times , each time with a different initial solution . Such a local search method has been developed by Fontes et al . [ 8 ] . An important feature of their algorithm is that valuable informa - tion is obtained from the structure of a lower bound solution to the concave MCNFP in order to generate initial feasible solutions . The lower bounds are derived from a state space relaxation and improved by a state space ascent procedure [ 10 ] based on a DP formulation of the original problem [ 11 ] . A tabu search method embedding the local search method developed by Gallo and Sodini [ 13 ] to solve the multicom - modity SSU concave MCNFP can be found in [ 1 ] . This improves the local search by allowing movements to a worse solution in the hope that a better one can be found if a dif - ferent search pattern is used . To prevent cycling , a list of solutions visited is kept in order to avoid going back to solu - tions already visited . The problems addressed consider only some vertices to be demand vertices and concave arc cost functions having no ﬁxed cost . In [ 32 ] Smith and Walters describe a GA approach to the problem of ﬁnding optimal trees on networks at minimum cost . The initial population is made up of randomly gener - ated feasible trees . A probability , which is proportional to the ﬁtness is computed and assigned to each tree . After two trees T 1 and T 2 have been chosen , the two graphs are superimposed to form a new directed graph G . All arcs in trees T 1 and T 2 will be in graph G and will retain their directions . Mutations are introduced by randomly adding extra arcs to the graph G . It is always possible to generate at least two feasible children as the parents are spanning trees and mutation can only add extra arcs . The method is tested on SSU concave MCNFP where all vertices are demand vertices and all arcs have con - cave routing costs , given by the square root of the ﬂow , and no ﬁxed cost component . The problem instances have a number of vertices ranging from 15 up to 35 vertices . The quality of the solution and the computational time required to ﬁnd them are not reported . In this paper , we present a Hybrid Genetic Algorithm ( HGA ) , where a Local Search Strategy is incorporated into a genetic algorithm , to solve the SSU MCNFP with general concave costs . The Local Search algorithm tries to improve the solutions in the population by using domain - speciﬁc information , while the genetic algorithm recombines good solutions in order to investigate different regions of the solu - tion space . The HGA is used to solve SSU MCNPFs with both concave routing costs and ﬁxed costs . The problem sizes range from 10 up to 50 vertices and have been downloaded from the OR - Lib [ 3 ] . In order to assess whether the HGA 68 NETWORKS—2007—DOI 10 . 1002 / net is independent of the cost function types we also consider “easier” MCNFPs , which have linear routing costs , ﬁxed - charge costs , or concave routing costs with no ﬁxed costs . The computational results are compared with results reported in literature and these comparisons allow for the conclusion that the HGA is not only effective but also efﬁcient for ﬁnding good solutions to the SSU concave MCNFPs . We also com - pare the HGA results with the results obtained by the genetic algorithm alone . This comparison shows the effectiveness of using the hybrid approach . 3 . PROBLEM DEFINITION The network G = ( W , A ) to be optimized consists of a set W of n + 1 nodes ( node n + 1 denotes the source node and nodes 1 , . . . , n denote demand nodes ) and a set A of m directed arcs , A ⊂ { ( i , j ) : i , j ∈ W } . Each node i , except for the source node , has an associated nonnegative integer demand value r i . The supply at the source node matches the total demand required by the n demand nodes . A general nondecreasing , nonnegative , and concave cost function g ij is associated with each arc ( i , j ) and satisﬁes g ij ( 0 ) = 0 . The objective is to ﬁnd a subset S of arcs to be used and the level of ﬂow routed through them x ij for all arcs ( i , j ) ∈ S , in order to satisfy the demand at minimum cost . The problem can be written in an intuitive way in the form of a nonlinear mathematical programming model , given by : ( P ) Minimize (cid:1) ( i , j ) ∈ A g ij ( x ij ) ( 1 ) Subject to (cid:1) ( k , i ) ∈ A x ki − (cid:1) ( i , k ) ∈ A x ik = r i ∀ i ∈ W \ { n + 1 } ( 2 ) x ij ≥ 0 ∀ ( i , j ) ∈ A . ( 3 ) Equation ( 1 ) states the minimum cost nature of the prob - lem , while Equation ( 2 ) represents the ﬂow conservation constraints . Concave MCNFPs have the combinatorial property that if a ﬁnite solution exists then an optimal solution occurs at a node ( extreme point ) of the corresponding feasible domain ( deﬁned by the network constraints ) . SSU concave MCNFPs have a ﬁnite solution if and only if there exists a direct path going from the source node to every demand node and if there are no negative cost cycles . Therefore , an extreme ﬂow is a tree rooted at the single source spanning all demand nodes [ 35 ] . Thus , our objective is to ﬁnd an optimal tree rooted at the source node that satisﬁes all customers demand at minimum cost . 4 . METHODOLOGY In recent years many optimization approaches have been developed , one of the most popular being the genetic algo - rithms , which are based on the genetic process of biolog - ical organisms . Over many generations , natural populations evolve according to the principles of natural selection , that is , survival of the ﬁttest , ﬁrst clearly stated by Charles Darwin in “The Origin of Species . ” Typically , genetic algorithms ( GAs ) evolve a population of solutions as the result of selection , competition , and recombination . Crossover and mutation are used to maintain a diversity of the evolving population and thus escape from local optima . GAs are a powerful stochas - tic global search technique as the search is performed by exploiting information sampled from different regions of the solution space [ 31 ] . Nevertheless , GAs usually do not perform well in ﬁne - tuning near local optimum solutions because they use minimum a priori knowledge and fail to exploit local information . Local Search algorithms start with an initial solution , namelynetworktopology , andtrytoreachanoptimalsolution by means of small perturbations to the current solution , that is , the search is done within a pre - speciﬁed neighborhood . However , Local Search methods may suffer from becoming trapped into local optima if the solution space is complex [ 28 ] , which is the case for concave network design problems . The inclusion of a Local Search procedure into a GA often leads to substantial improvement since the “local” improve - ment capabilities of the former are being combined with the “global” nature of the GA . The incorporation of Local Search operators into genetic algorithms has provided very good results for some combinatorial optimization problems , namely : backbone design of communication networks [ 26 ] , maintenance scheduling problem [ 5 ] , and feature selection problem [ 29 ] . In our HGA , we hybridize the genetic algorithm described in section 4 . 1 , with a modiﬁed version of the Local Search method developed in [ 8 ] . The approach developed comprises a genetic algorithm , a Tree - Constructor and a Local Search and is illustrated in Figure 1 . Recall that an optimal solution to the concave MCNFP is a tree rooted at the single source spanning all demand nodes . FIG . 1 . Architecture of the proposed approach . NETWORKS—2007—DOI 10 . 1002 / net 69 FIG . 2 . Chromosome decoding procedure . In our approach , we use and explore this knowledge . The GA is responsible for evolving the population of chromosomes , which represent the parameters ( node priorities ) used by the Tree - Constructor . For each chromosome the following three phases are applied : Decoding of priorities : transforms the chromosome supplied by the GA into node priorities Tree - Constructor : constructs a tree based on the node priori - ties of the previous phase Local search : tries to improve the current solution by means of small perturbations . After a solution ( Here and hereafter solution is also used to refer to a feasible tree . ) is obtained , the corresponding quality ( cost ) is measured and the feedback is sent to the genetic algorithm . 4 . 1 . The Genetic Algorithm Before a genetic algorithm can be run , a suitable encod - ing ( or representation ) for a problem solution must be devised . The solutions to the problem are represented as a set of parameters . These parameters ( known as genes ) are joined together to form a string of values ( chromosome ) . In genetic terminology , the set of parameters represented by a particular chromosome is referred to as an individ - ual . The ﬁtness of an individual depends on its chromosome and is evaluated by the ﬁtness function , which assigns a ﬁgure of merit to each encoded solution . The individuals , during the reproductive phase , are selected from the popula - tion and recombined , producing offspring , which comprise the next generation . Parents are randomly selected from the population using a scheme , which favors ﬁtter indi - viduals . Having selected two parents , their chromosomes are recombined using mechanisms of crossover . Mutation is applied to some individuals , to guarantee population diversity . 4 . 2 . Chromosome Representation and Decoding The GA described in this paper uses a random key alpha - bet U ( 0 , 1 ) . The evolutionary strategy used is identical to the one proposed by Bean [ 2 ] , the main difference occurring in the crossover operator . The important feature of random keys is that all offspring formed by crossover are feasible solutions since the feasibility issue is moved into the objective func - tion evaluation . If any random key vector can be interpreted as a feasible solution , then any crossover vector is also fea - sible . Through the dynamics of the genetic algorithm , the system learns the relationship between random key vectors and solutions with good objective function values . A chromosome , which is made of n genes ( where n is the number of demand nodes ) , is encoded as a vector of random keys ( random numbers ) . Chromosome = ( gene 1 , gene 2 , . . . , gene n ) . The n genes are used to obtain the priorities , which in turn will be used by the Tree - Constructor procedure . The decoding ( mapping ) of each chromosome into priorities is accom - plished by sorting the genes and constructing the solution tree in ascending order of priority ( see Fig . 2 ) . 4 . 3 . Evolutionary Strategy To breed good solutions , the random key vector popu - lation is operated upon by a GA . Many variations of GAs can be obtained by varying the reproduction , crossover , and mutation operators . The reproduction and crossover opera - tors determine which parents will have offspring , and how genetic material is exchanged between the parents to create those offspring . Reproduction and crossover operators tend to increase the quality of the populations and force popula - tion convergence . Mutation opposes population convergence since it allows for random alteration of genetic material . Given a current population , we perform the following three steps in order to obtain the next generation , a population of the same size . These steps are illustrated in Figure 3 . FIG . 3 . Transitional process between consecutive generations . 70 NETWORKS—2007—DOI 10 . 1002 / net FIG . 4 . An example of a parameterized uniform crossoveover . 4 . 3 . 1 . Reproduction . Some of the best individuals are copied from the current generation into the next ( see TOP in Fig . 3 ) . This strategy is called elitist [ 14 ] and its main advantage is that the best solution is monotonically improv - ing from one generation to the next . However , it can lead to a rapid population convergence to a local minimum . Never - theless , this can be overcome by using high mutation rates as described below . 4 . 3 . 2 . Crossover . Regarding the crossover operator , para - meterized uniform crossovers [ 33 ] are used as opposed to the traditional one - point or two - point crossover . Two individuals are randomly chosen to act as parents . One of the parents is chosen amongst the best individuals in the population ( TOP in Figure 3 ) , while the other is randomly chosen from the whole current population ( including TOP ) . For each gene a random number is generated . If the random number obtained is smaller than a threshold - value , called crossover probability ( CProb ) , for example 0 . 7 , then the allele of the ﬁrst parent is used . Otherwise , the allele used is that of the second parent . An example of a crossover outcome is given in Figure 4 . 4 . 3 . 3 . Mutation . Mutation , here , is used in a broader sense . The operator we deﬁne acts like a mutation operator and its purpose is to prevent premature convergence of the population . Instead of performing gene - by - gene mutation , with very small probability at each generation , we introduce some new individuals into the next generation ( see BOT in Fig . 3 ) . This new individuals are randomly generated from the same distribution as the original population and thus , no genetic material of the current population is brought in . This leads to a simple statement of population convergence . 4 . 4 . The Tree Constructor We use the node priorities , given by the decoding proce - dure , to determine the order by which nodes are considered by the tree constructor . The algorithm repeatedly performs the following three steps in turn , until either a tree or an infeasi - ble solution is has been obtained . The ﬁrst step , consists of ﬁnding the highest priority node not yet supplied . In the sec - ond step , the algorithm searches for the set of nodes that can act as a parent , for the node found in the ﬁrst step . Lastly , in the third step , the parent is chosen as the highest priority node not creating an infeasibility , if one exists . A potential solution becomes infeasible whenever a cycle has to be created . It should be noticed that the way this constructor has been built , at any intermediate step we might have several com - ponents , since we are not building up a connected graph . Furthermore , as already said , we might end up reaching a solution that cannot lead to a tree due to the occurrence of a cycle . Whenever this happens , rather than dropping the solu - tion and looking for another one , we keep such a solution and associate to it a very high cost , that is , a poor ﬁtness value . 4 . 5 . The Local Search After a solution has been successfully obtained , a Local Search procedure is applied to it . In order to give a detailed descriptionofthisprocedure , letusﬁrstgiveabriefdiscussion of local optimality for the concave MCNFP . For the concave MCNFP , the standard marginal deﬁnition of local optimality , that is , rerouting a small portion of ﬂow , is not satisfactory . For strictly concave cost functions it results in all extreme ﬂows being locally optimal . In here , we use the generalized deﬁnition developed by Gallo and Sodini [ 13 ] , N ( X ) = { X (cid:5) | X (cid:5) is an extreme ﬂow adjacent to the extreme ﬂow X } , where an extreme ﬂow X (cid:5) is said to be adjacent to an extreme ﬂow X if X ∪ X (cid:5) contains a single undirected cycle . The Local Search improves on a given initial solution by comparing it with the cost of adjacent extreme solutions . As no trans - shipment nodes exist , adjacent extreme solutions are obtained by replacing an arc currently in the solution by an arc not in the solution such that the new solution is still an extreme ﬂow , that is , a tree . The order by which candidate arcs are considered is deter - mined by the priorities associated with the outcoming node of each candidate arc . Let j be the highest priority node , then arc ( i , j ) currently in the solution is removed . To replace this arc we go through all other nodes in descending order of node priority and choose the ﬁrst one , say k for which adding the arc ( k , j ) does not create a cycle . The current best solution is updated whenever an adjacent extreme ﬂow that improves upon it is found , regardless of the improvement magnitude . This algorithm is iteratively repeated until all nodes have been considered . There are two main differences between the Local Search published in [ 8 ] and the one developed here , namely : ( i ) in the TABLE 1 . Interval of values for TOP , BOT , and CProb . Parameter Interval TOP 0 . 10 – 0 . 20 BOT 0 . 15 – 0 . 30 CProb 0 . 70 – 0 . 80 NETWORKS—2007—DOI 10 . 1002 / net 71 TABLE 2 . GA conﬁguration . Population Size 10 × number of nodes Crossover Probability 0 . 7 TOP The top 15 % chromosomes of the previous population are copied to the next generation BOT The bottom 15 % chromosomes of the next generation randomly generated Fitness Cost Stopping Criterion 100 generations Seeds 5 aforementioned Local Search the nodes are visited in ascend - ing numerical order , while in here we use node priorities to deﬁne that order ; and ( ii ) in [ 8 ] all nodes are considered to be removed and for each one of them all other nodes are considered to act as parent , and thus all existing arcs are tried . 5 . COMPUTATIONAL EXPERIMENTS In this section we report on the computational results obtained . But ﬁrst , we give details of the GA conﬁguration and of the test problems used . 5 . 1 . GA Conﬁguration The present state - of - the - art theory on genetic algorithms doesnotprovideinformationonhowtoconﬁgurethem . Inour past experience with genetic algorithms based on the same evolutionary strategy ( see [ 15 – 17 ] ) , we have obtained good results with values of TOP , BOT , and crossover probability ( CProb ) , as given in Table 1 . For the population size , good results have been obtained by indexing it to the size of the problem , that is , by using small size populations for small problems and larger size popula - tions for larger problems . Based on past experience and in order to adequate the conﬁguration to the speciﬁc problem we have conducted a small pilot study by using combina - tions of the following values for TOP = ( 0 . 10 , 0 . 15 , 0 . 20 ) , BOT = ( 0 . 15 , 0 . 20 , 0 . 25 , 0 . 30 ) , and CProb = ( 0 . 70 , 0 . 75 , 0 . 80 ) . We have tried population sizes having 2 , 5 , 10 , and 15 times the number of nodes in the problem instance . The conﬁguration , for which we have obtained the best results in given in Table 2 . TABLE 3 . HGA average computational performance for smaller size instances . Type I Type II Type III Type IV Size Gap Time Gap Time Gap Time Gap Time 10 0 0 . 71 0 . 005 0 . 82 0 0 . 84 0 0 . 90 12 0 1 . 07 0 1 . 23 0 1 . 32 0 1 . 42 15 0 1 . 80 0 2 . 11 0 2 . 24 0 2 . 50 17 0 2 . 64 0 3 . 15 0 3 . 27 0 3 . 74 19 0 3 . 24 0 4 . 00 0 4 . 10 0 4 . 63 FIG . 5 . The effect of cost function type on the HGA computational time - average results . This conﬁguration has been used in all computation exper - iments and in all problem instances . From the experimental results obtained it can be seen that this conﬁguration provides excellent results in terms of solution quality and that it is very robust . 5 . 2 . Test Problems To test the efﬁciency and effectiveness of the HGA we have used the Euclidian problem set described in [ 8 ] , which can be downloaded from [ 3 ] . The results obtained by the HGA are compared with optimal solutions found by a DP approach [ 11 ] for problem instances with up to 19 nodes and to heuristic solutions found by a Local Search algorithm [ 8 ] , for larger size problems . The results obtained show evidence of the efﬁciency of the proposed algorithm . Furthermore , in order to show the effectiveness of the hybridization we also report on the results obtained by using the GA alone , that is , without using the Local Search procedure . The only difference between the GA and the HGA is that the former does not perform solution improvement by using the Local Search procedure , thus all parameters are the same . The following four types of cost function were used : poly - nomials of degree 0 ( linear problems ) , degree 1 ( ﬁxed - charge problems ) , and degree 2 ( problems having a concave routing component ) both with and without a ﬁxed cost component . TABLE 4 . GA average computational performance for smaller size instances . Type I Type II Type III Type IV Size Gap ( % ) Time Gap ( % ) Time Gap ( % ) Time Gap ( % ) Time 10 0 . 25 0 . 21 3 . 63 0 . 24 0 . 99 0 . 23 3 . 47 0 . 25 12 0 . 34 0 . 29 4 . 15 0 . 34 1 . 14 0 . 31 3 . 81 0 . 35 15 0 . 37 0 . 45 2 . 85 0 . 52 0 . 83 0 . 50 3 . 01 0 . 55 17 0 . 34 0 . 58 4 . 07 0 . 67 1 . 14 0 . 62 3 . 96 0 . 72 19 0 . 13 0 . 74 3 . 88 0 . 86 0 . 86 0 . 81 3 . 65 0 . 93 72 NETWORKS—2007—DOI 10 . 1002 / net FIG . 6 . Comparison of the computational time requirements - average results . The cost functions g ij are nondecreasing and a ij , b ij , and c ij are nonnegative . g ij ( x ) = (cid:2) − a ij · x 2 + b ij · x + c ij , if x > 0 , 0 , otherwise . More speciﬁcally , we consider : • Type I : linear ( Linear problems are only considered to show strong evidence on the fact that the method performance does not depend either on the type of cost functions or on the num - ber of nonlinear arc costs . ) , obtained by setting a ij = 0 and c ij = 0 • Type II : linear ﬁxed - charge , obtained by setting a ij = 0 • Type III : concave , obtained by setting c ij = 0 • Type IV : concave with ﬁxed - charge . 5 . 3 . Computational Results Forproblemswith10 , 12 , 15 , 17 , and19nodesweconsider all four cost functions and the results obtained are compared to the optimal solution values reported in [ 11 ] . For each prob - lem size and cost function type , 30 problem instances have been solved and the HGA average results are summarized in Table 3 , where time is in seconds and gap is the optimality gap in percentage . TABLE 5 . Average computational performance for type II larger size instances . UB GA HGA Size Gap Time Gap Time Gap Time 25 0 . 017 5 . 27 0 . 05 1 . 47 0 9 . 51 30 0 . 001 20 . 64 0 . 04 2 . 23 0 14 . 61 40 0 . 002 113 . 02 0 . 01 4 . 12 0 . 005 31 . 67 50 0 144 . 26 0 . 01 6 . 20 0 59 . 22 From the six hundred smaller size problem instances solved only for one type II problem with 10 nodes we did not obtain an optimal solution . Furthermore , the time require - ments are quite modest , since the problem that took longer to be solved ( a type IV problem with 19 nodes ) needed only 6 . 63 seconds . This can be better seen in the plot of Figure 5 . From this graph , it can also be seen that the computational time requirements are very similar for all types of cost functions . Nonetheless , the complexity of the problem varies and cost types have been deﬁned considering increasing complexity . In order to show the effectiveness of the hybridization , we also report on the results obtained by the pure GA , i . e . , withoutusingtheLocalSearch . Theresultsobtainedaregiven in Table 4 . By comparing the results reported in Tables 3 and 4 , it can be concluded that the HGA provides better quality solu - tions . Furthermore , the quality of the solutions provided by the HGA is unaffected by problem type . This was not the case for the GA , since the quality of the solutions for prob - lems with a ﬁxed cost component ( types II and IV ) is much worse . It also should be noticed that , while the GA ﬁnds an optimal solution for 599 problem instances out of the 600 solved , the GA does not obtain an optimal solution for 156 such problems . The computational time required by the GA is smaller ; on average it takes between 20 % and 30 % of the time needed by the HGA , but since no single problem took more than 7 s to be solved by the HGA , this is not a problem . TABLE 6 . Average computational performance for type IV larger size instances . UB GA HGA Size Time GA / UB Time HGA / UB HGA / GA Time 25 14 . 22 105 . 05 1 . 60 100 . 72 95 . 98 10 . 28 30 24 . 77 103 . 57 2 . 42 99 . 13 96 . 05 18 . 39 40 210 . 61 101 . 23 4 . 57 99 . 90 98 . 73 42 . 70 50 1000 . 00 100 . 84 6 . 97 99 . 94 99 . 14 77 . 62 NETWORKS—2007—DOI 10 . 1002 / net 73 FIG . 7 . The effect of cost function type on the HGA computational time - average result . The comparison of the results we report here for the HGA with those of Fontes et al . [ 8 ] , for the LS , allows for the conclusion that the HGA provides solutions with roughly the same quality . Nevertheless , the computational time require - ments of the HGA are much smaller , at least for problems of type IV . Furthermore the magnitude of the computational time improvement increases with problem size . These con - clusions can be better seen in Figure 6 , where we have plotted the computational times of both methods for ﬁxed - charge problems ( type II ) and concave cost problems also involving a ﬁxed component ( type IV ) . For larger size problems , with 25 , 30 , 40 , or 50 nodes , we have solved ﬁfteen problem instances for each problem type , the results obtained , by both the GA and the HGA , for these problems are given in Tables 5 and 6 for problems of type II and type IV , respectively . In these tables we also give the results reported in [ 8 ] . In Table 5 the quality of the solu - tions is measured by the optimality gap , which is computed using the optimal solutions obtained by CPLEX . However , in Table 6 the quality of the solutions we obtain is measured by a ratio , which is computed as a percentage of the upper bounds obtained in [ 8 ] ( UB ) , since no optimal solutions are available . Ascanbeseentheresultsreportedinthesetables , theHGA is the method that produces better quality solutions . ( Recall that the problem being solved is a minimization problem and therefore , better solutions correspond to smaller upper bound values . ) Regarding the time requirements , the better method is the pure GA . However , time requirements for the HGA are very modest , since on average for the larger and most difﬁcult problems it takes under 78 s . It should also be noticed that the GA on its own provides solutions that on average can be up to 5 % worse than the ones reported in [ 8 ] ; however the time required to do so is on average between 22 and 143 times smaller . Once again , it can be concluded that problem complexity , measured by cost function type , affects , neither algorithm effectiveness nor algorithm efﬁciency . This can be seen in Figure 7 ; and also that although the quality of the results are quite similar , the computational time required to ﬁnd such results in our method is better . Furthermore , the magnitude of the computational time improvement grows with problem size , ( see Fig . 8 ) . 6 . CONCLUSIONS In this paper we have presented a Hybrid Genetic Algo - rithm ( HGA ) that combines a genetic algorithm and a Local Search procedure , to solve SSU concave MCNFPs . The type of test problems used have been addressed only by Fontes et al . [ 8 – 11 ] and Burkard et al . [ 4 ] . Other authors considering SSU concave MCNFPs either restrict the number of concave arc costs or consider concave functions that may include a concave routing cost component or a ﬁxed cost component , but never both . In order to show the effectiveness and efﬁciency of the HGAwehavecomparedtheresultsitprovideswiththeresultsobtainedbytheGAalone , that is , not using the Local Search procedure . As we have seen , the HGA provides better quality FIG . 8 . The effect of problem size on computational time - average results . 74 NETWORKS—2007—DOI 10 . 1002 / net solutions , although it takes longer to do so . However , given the magnitude of the computational times involved , this is not really an issue . The results obtained have also been compared with other approaches . The comparisons have shown the HGA to improve upon the efﬁciency and effectiveness of existing methods . For all but one of the 600 problems with sizes rang - ing from 10 to 19 we were able to obtain an optimal solution . For larger size problems , having from 25 up to 50 nodes , we have found the optimal solution for all ﬁxed - charge prob - lems . For concave problems we do not have optimal solutions to compare our solutions with . Thus , they have been com - pared with upper bound values reported in the literature and also with the ones obtained by the GA approach . The results reported have shown the algorithm proposed to be not only very efﬁcient but also effective . Furthermore , we have also shownthattheperformanceofouralgorithmisbasicallyinde - pendent of problem complexity , here measured by the type of cost functions considered . The quality of the solutions obtained by the HGA algorithm is quite similar to the ones reported by Fontes et al . [ 8 ] . In addition , the HGA compu - tational time requirements are much smaller . Thus , the HGA proposed in here is capable of efﬁciently ﬁnding good quality heuristic solutions for SSU MCNFPs with general concave arc costs , which are NP - hard problems . REFERENCES [ 1 ] C . Bazlamaçci and K . Hindi , Enhanced adjacent extreme - point search and tabu search for the minimum concave - cost uncapacitated transshipment problem , J Oper Res Soc 47 ( 1996 ) , 1150 – 1165 . [ 2 ] J . C . Bean , Genetic algorithms and random keys for sequenc - ing and optimization , ORSA J Comput 6 ( 1994 ) , 54 – 160 . [ 3 ] J . E . Beasley , Or - Library . http : / / www . brunel . ac . uk / depts / ma / research / jeb / orlib / netﬂowccinfo . html . [ 4 ] R . E . Burkard , H . Dollani , and P . H . Thach , Linear approxi - mations in a dynamic programming approach for the unca - pacitated single - source minimum concave cost network ﬂow problem in acyclic networks , J Global Optimiz 19 ( 2001 ) , 121 – 139 . [ 5 ] E . K . Burke and A . J . Smith , Hybrid evolutionary techniques for the maintenance scheduling problem , IEEE Trans Power Syst 15 ( 2000 ) , 122 – 128 . [ 6 ] R . E . Erickson , C . L . Monma , and A . F . Veinott , Send - and - splitmethodforminimum - concave - costnetworkﬂows , Math Oper Res 12 ( 1987 ) , 634 – 664 . [ 7 ] D . B . M . M . Fontes , Optimal network design using nonlinear cost ﬂows , PhD Thesis , The Management School , Imperial College of Science Technology and Medicine , London , UK , 2000 . [ 8 ] D . B . M . M . Fontes , E . Hadjiconstantinou , andN . Christoﬁdes , Upper bounds for single source uncapacitated minimum concave - cost network ﬂow problems , Networks 41 ( 2003 ) , 221 – 228 . [ 9 ] D . B . M . M . Fontes , E . Hadjiconstantinou , and N . Christondes , A branch - and - bound for the minimum concave cost network ﬂow problem , J Global Optimiz 34 ( 2006 ) , 127 – 155 . [ 10 ] D . B . M . M . Fontes , E . Hadjiconstantinou , andN . Christoﬁdes , Lower bounds from state space relaxations for network routing problems , J Global Optimiz 34 ( 2006 ) , 97 – 125 . [ 11 ] D . B . M . M . Fontes , E . Hadjiconstantinou , andN . Christoﬁdes , A new dynamic programming approach for solving single - source uncapacitated concave minimum cost network ﬂow problems , Eur J Oper Res 174 ( 2006 ) , 1205 – 1219 . [ 12 ] G . Gallo , C . Sandi , and C . Sodini , An algorithm for the min concave cost ﬂow problem , Eur J Oper Res 4 ( 1980 ) , 249 – 255 . [ 13 ] G . Gallo and C . Sodini , Adjacent extreme ﬂows and appli - cation to minimum concave cost ﬂow problems , Networks 9 ( 1979 ) , 95 – 121 . [ 14 ] D . E . Goldberg , Genetic algorithms in search optimization and Machine Learning , Addison - Wesley , Reading , MA , 1989 . [ 15 ] J . F . Gonçalves and J . R . Almeida , A hybrid genetic algorithm for assembly line balancing , J Heuristics 8 ( 2002 ) , 629 – 642 . [ 16 ] J . F . Gonçalves , J . J . M . Mendes , and M . G . C . Resende , A hy - brid genetic algorithm for the job shop scheduling problem , Eur J Oper Res 167 ( 2005 ) , 77 – 95 . [ 17 ] J . F . Gonçalves and M . G . C . Resende , An evolutionary algo - rithm for manufacturing cell formation , Comput Indust Eng 47 ( 2004 ) , 247 – 273 . [ 18 ] G . M . Guisewite , “Network problems , ” Handbook of global optimization , R . Horst and P . M . Pardalos ( Editors ) , Kluwer Academic , Dordrecht , 1994 , pp . 609 . [ 19 ] G . M . GuisewiteandP . M . Pardalos , Algorithmsforthesingle - source uncapacitated minimum concave - cost network ﬂow problem , J Global Optimiz 3 ( 1991 ) , 245 – 265 . [ 20 ] R . Horst and N . V . Thoai , An integer concave minimization approach for the minimum concave cost capacitated ﬂow problem on networks , OR Spectrum 20 ( 1998 ) , 45 – 53 . [ 21 ] D . Kennedy , Some branch - and - bound techniques for nonlin - ear optimization , Math Program 42 ( 1988 ) , 147 – 169 . [ 22 ] D . Kim and P . M . Pardalos , A solution approach to the ﬁxed charge network ﬂow problem using a dynamic slope scaling procedure , Operat Res Lett 24 ( 1999 ) , 195 – 203 . [ 23 ] D . Kim and P . M . Pardalos , A dynamic domain contrac - tion algorithm for nonconvex piecewise linear network ﬂow problems , J Global Optimiz 17 ( 2000 ) , 225 – 234 . [ 24 ] D . Kim and P . M . Pardalos , Dynamic slope scaling and trust interval techniques for solving concave piecewise linear network ﬂow problems , Networks 35 ( 2000 ) , 216 – 222 . [ 25 ] H . - J . Kim and J . N . Hooker , Solving ﬁxed - charge network ﬂow problems with a hybrid optimization and constraint programming approach , Ann Oper Res 115 ( 2002 ) , 95 – 124 . [ 26 ] A . Konak and A . E . Smithy , A hybrid approach for back - bone design of communication networks , IEEE Proc 1999 Congress Evol Comput IEEE , Washington , DC , 1999 , pp . 1817 – 1823 . [ 27 ] B . W . Lamar , “A method for solving network ﬂow prob - lems with general nonlinear arc costs , ” Network optimization problems : Algorithms , Applications and Complexity , D . - Z Du and P . M . Pardalos ( Editors ) , World Scientiﬁc , Singapore , 1993 , pp . 147 – 167 . [ 28 ] Z . Michalewicz , Genetic algorithms + data structures = Evolution programs , 3rd ed . , Springer - Verlag , New York , 1996 . NETWORKS—2007—DOI 10 . 1002 / net 75 [ 29 ] I . - S . Oh , J . - S . Lee , andB . - R . Moon , “Localsearch - embedded genetic algorithms for feature selection , ” Proceedings of the 16th international conference on pattern recognition , Vol . 2 , IEEE , Quebec , Canada , 2002 , pp . 148 – 151 . [ 30 ] F . Ortega and L . A . Wolsey , A branch - and - cut algorithm for the single - commodity , uncapacitated , ﬁxed - charge network ﬂow problem , Networks 41 ( 2003 ) , 143 – 158 . [ 31 ] C . R . Reeves , Modern heuristic techniques for combinatorial problems , “Genetic algorithms , ” Blackwell Scientiﬁc Press , Oxford , 1993 , pp . 151 – 196 . [ 32 ] D . K . Smith and G . A . Walters , Evolutionary approach for ﬁnding optimal trees in undirected networks , Eur J Oper Res 120 ( 2000 ) , 593 – 602 . [ 33 ] W . M . Spears and K . A . Dejong , “On the virtues of parameterized uniform crossover , ” Proceedings of the fourth international conference on genetic algorithms , Morgan Kaufmann Publishers , San Mateo , CA , 1991 , pp . 230 – 236 . [ 34 ] H . Tuy , “The minimum concave - cost network ﬂow prob - lem with a ﬁxed number of nonlinear arc costs : Complex - ity and approximation , ” Approximation and complexity in numerical optimization : Continuous and discrete problems , P . M . Pardalos ( Editor ) , Kluwer Academic , Boston , 2000 , pp . 383 – 402 . [ 35 ] W . I . Zangwill , Minimum concave cost ﬂows in certain networks , Manag Sci 14 ( 1968 ) , 429 – 450 . 76 NETWORKS—2007—DOI 10 . 1002 / net