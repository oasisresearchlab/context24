Empirical Software Engineering https : / / doi . org / 10 . 1007 / s10664 - 020 - 09840 - 9 An empirical study of the characteristics of popular Minecraft mods Daniel Lee 1 · Gopi Krishnan Rajbahadur 1 · Dayi Lin 1 · Mohammed Sayagh 1 · Cor - Paul Bezemer 2 · Ahmed E . Hassan 1 © Springer Science + Business Media , LLC , part of Springer Nature 2020 Abstract It is becoming increasingly difficult for game developers to manage the cost of developing a game , while meeting the high expectations of gamers . One way to balance the increasing gamer expectation and development stress is to build an active modding community around the game . There exist several examples of games with an extremely active and successful modding community , with the Minecraft game being one of the most notable ones . This paper reports on an empirical study of 1 , 114 popular and 1 , 114 unpopular Minecraft mods from the CurseForge mod distribution platform , one of the largest distribution platforms for Minecraft mods . We analyzed the relationship between 33 features across 5 dimensions of mod characteristics and the popularity of mods ( i . e . , mod category , mod documentation , environmental context of the mod , remuneration for the mod , and community contribution for the mod ) , to understand the characteristics of popular Minecraft mods . We firstly ver - ify that the studied dimensions have significant explanatory power in distinguishing the popularity of the studied mods . Then we evaluated the contribution of each of the 33 fea - tures across the 5 dimensions . We observed that popular mods tend to have a high quality description and promote community contribution . Keywords Mods · Mod development · CurseForge · Minecraft 1 Introduction The team size , cost and complexity in game development can grow exponentially as the user requirements increase ( Shumovsky 2018 ) . Thus , it has become challenging to develop a successful game , and game developers are constantly under an immense amount of stress ( Phillips 2018 ) . One approach to balance the increasing gamer expectation and devel - opment stress is to build an active modding community around the game . Skyrim and Communicated by : Emerson Murphy - Hill (cid:2) Gopi Krishnan Rajbahadur Krishnan @ cs . queensu . ca Extended author information available on the last page of the article . Empirical Software Engineering Minecraft are examples of games that have been successful in building active modding com - munities ( Hackman and Bj¨orkqvist 2014 ; Zorn et al . 2013 ) to increase the longevity of the games . For example , the Skyrim game still has a median of 86 new mods released per day 8 years after its initial game release in 2011 , along with more than 514M total unique down - loads of mods ( Scott 2007 ) . Prior work also shows that an active modding community can contribute to the increased sales of the original game ( Poretski and Arazy 2017 ) . There are two key components of an active modding community of a game : the active development of mods , and the active adoption of mods by gamers . In our prior work , we looked at how game developers can help maintain the active development of mods , and observed that games from developers with a consistent modding support within the same or different game franchises , were associated with faster releases of mods ( Lee et al . 2018 ) . In this paper , we identify the characteristics that distinguish popular mods from unpopu - lar ones . To do so , we study 33 characteristics along 5 dimensions of 1 , 114 popular and 1 , 114 unpopular mods for the Minecraft game from the CurseForge mod distribution plat - form – one of the largest distribution platforms for Minecraft mods . We focus on the mods from the Minecraft game because it has one of the largest and most active modding communities ( Mills 2015 ) . In particular , we answer the following two research questions ( RQs ) : RQ1 : Do our studied dimensions have enough explanatory power to distinguish popular mods from unpopular ones ? Motivation : The goal of this research question is to investigate how well each studied dimension of characteristics ( i . e . , features ) of mods can individually distinguish the pop - ular mods from unpopular ones . We also investigate how well all the studied dimensions together can distinguish popular mods from unpopular ones . Prior work ( Tian et al . 2015 ) used similar dimensions to identify the characteristics that distinguish mobile apps with high ratings from the ones with low ratings . The results of this research question lay the foundation for further investigations of the characteristics of popular mods . Findings : We observed that each studied dimension of characteristics of a mod has sig - nificant explanatory power in distinguishing popular from unpopular mods . Among the studied dimensions , the community contribution for the mod dimension has the largest explanatory power . However , our combined model which uses all the features across the five dimensions outperforms the best model using an individual dimension by 10 % ( median ) . RQ2 : What features best characterize a popular mod ? Motivation : The goal of this research question is to investigate which features of mods can best characterize popular mods . The results of RQ1 show that the studied features have a strong explanatory power for the popularity of a mod . In this RQ , we further investigate the characteristics of popular mods at a granular level . Findings : We observed that 18 of the 33 ( 54 . 5 % ) studied features help in distinguish - ing popular mods from unpopular ones . Simplifying the mod development is positively correlated with mod popularity . In addition , popular mods tend to promote community contribution with a source code repository URL and an issue tracking URL , and have a richer mod description . The remainder of the paper is outlined as follows . Section 2 gives background infor - mation about the Minecraft game and the CurseForge mod distribution platform . Section 3 Empirical Software Engineering gives an overview of related work . Section 4 discusses our methodology . Sections 5 dis - cusses the results of our empirical study . Section 6 outlines threats to the validity of our findings . Section 7 concludes our study . 2 Background This section provides a brief overview of the Minecraft game and the CurseForge mod distribution platform . 2 . 1 The Minecraft Game The Minecraft game is an open - ended 3D sandbox game , initially develope the Java pro - gramming language , where gamers can use various resources ( e . g . , blocks ) to create their own worlds ( Mojang 2019 ) . Developed by the Mojang 1 game studio , the Minecraft game is one of the best selling video games of all time in 2019 , with over 176 million copies sold since its release in 2011 ( Blake 2019 ) . Mods are considered one of the most popular aspects of the Minecraft game , and are credited for the great success of the game ( Geere and Copeland 2019 ; Finley 2014 ; O’Brien 2013 ) . 2 . 2 The CurseForge Mod Distribution Platform Minecraft mods on CurseForge . The CurseForge mod distribution platform hosts one of the largest online Minecraft mod repositories with more than 12 , 000 downloadable mods ( CurseForge 2006 ) . Table 1 shows a comparison of the CurseForge mod distribution platform to other Minecraft mod distribution platforms with respect to the number of mods . The CurseForge mod distribution platform provides a dedicated page for each mod . The dedicated page contains detailed information about a mod including contributors , releases , and dependencies , while categorizing the mod under at least one mod category . Further - more , mod developers can provide their Paypal 2 or Patreon 3 donation URLs on their mod’s page . Patreon is a crowdfunding platform where content creators such as mod developers can promote themselves , and receive monthly donations . Mod contributors on CurseForge . A mod on the CurseForge mod distribution platform can have multiple contributors , and each contributor is assigned a role for the mod ( i . e . , artist , author , contributor , documenter , former author , maintainer , mascot , owner , tester , ticket manager , or translator ) . There can be multiple contributors of a mod with the same role , except for the “owner” role which is only assigned to the user that creates the mod on the platform . Unfortunately , the CurseForge mod distribution platform does not provide any official definition for the roles . Furthermore , we observed that the number of mod devel - opers in a mod does not always accurately represent the actual number of contributors . For example , the Fossils and Archeology Revival mod 4 shows 10 mod developers on the Curse - Forge page , but the mod has 17 contributors on Github . Hence , we do not use the mod developer roles or the number of mod developers in our study . 1 https : / / mojang . com / 2 https : / / www . paypal . com / 3 https : / / www . patreon . com / 4 https : / / minecraft . curseforge . com / projects / fossils Empirical Software Engineering Table 1 An overview of Minecraft mod distribution platforms Minecraft mod distribution platform # of mods CurseForge 1 12 , 710 Planet Minecraft 2 9 , 159 Minecraft Six 3 3 , 880 Minecraft Mods 4 532 1 https : / / minecraft . curseforge . com 2 https : / / www . planetminecraft . com 3 http : / / minecraftsix . com 4 https : / / www . minecraftmods . com Mod releases and dependencies on CurseForge . The dedicated page of each mod on the CurseForge mod distribution platform lists the mod releases with corresponding upload dates and supported Minecraft , Java , and Bukkit 5 versions . In addition , the dependencies for each release are also listed on a mod’s page . The CurseForge mod distribution plat - form supports the declaration of several types of dependencies of a mod release , including “incompatible” , “tool” , “required” , “embedded library” , and “optional dependencies” . 3 Related Work This section discusses prior studies that are related to our study . We discuss related work on ( 1 ) empirical studies of game mods , ( 2 ) games and software engineering , ( 3 ) studies of the Minecraft game , and ( 4 ) mining online software distribution platforms . 3 . 1 Empirical Studies of Game Mods Several prior studies studied the modding community to identify and analyze the relation - ship between mod developers and the game industry , yielding insights on collaborative practices and strategies , as well as capturing the value of mods ( Arakji and Lang 2007 ; Jeppesen 2004 ; Nieborg and Van der Graaf 2008 ) . A few prior studies mined data from the Nexus Mods distribution platform to quantitatively study the motivation behind mod devel - opers based on the users’ expectations , and to understand how to build and maintain an active modding community ( Dey et al . 2016 ; Lee et al . 2018 ) . Particularly , Dey et al . ( 2016 ) study the meta data available for popular and unpopular mods of six famous PC games across several popular online mod distribution platforms to investigate the motivations of mod developers . They find that user demands and the content created by the mod developers correlate very weakly and suggest that more effort needs to undertaken to bridge this gap . Furthermore , similar to our study they also seek to investigate what features make a mod popular . However , they consider only the general tags associated with a given mod and they do it across multiple games without any consideration to the game - specific characteristics . 5 Bukkit is a Minecraft Server mod that helps in the running and modification of a Minecraft server . See https : / / bukkit . org / pages / about - us / for more details . Empirical Software Engineering Additionally , Poretski and Arazy ( 2017 ) conducted an empirical study on 45 games from the Nexus Mods distribution platform and observed that mods increased the sales of the original game . Targett et al . ( 2012 ) empirically studied user - interface mods of the World of Warcraft 6 game to gather insights on how mods contribute to the World of Warcraft game and its modding community . They observed that modifications helped the interface of video games meet the needs of users , since every user has their own ideal interface . Similarly , Wu ( 2016 ) studied popular Reddit threads on Minecraft mod discussions to uncover the learnt knowledge by Minecraft modders . They assert that these threads con - tain vast peer - generated knowledge on how to create artifacts in the Minecraft environment . Leavitt ( 2013 ) studied the evolution of the creative process around the creation of Minecraft mods . Additionally , several studies ( Lane et al . 2017 ; Nguyen 2016 ) investigated Minecraft mods and their role in enhancing individual creativity and general interest in the field of Science , Technology , Engineering and Mathematics ( STEM ) . They found that modding in the context of the Minecraft game positively influenced both of these aforementioned aspects . Beggs ( 2012 ) studied how the dynamics between producers and consumers within the game industry are impacted by modding . They did so by studying Minecraft mods . Beggs observed that Minecraft modders in total spend close to 3 million hours weekly cre - ating and maintaining mods . Furthermore , they also noted that the modding culture pushes game consumers into generally preferring games that allow modding . Different from the aforementioned studies , we study the characteristics that distinguish popular mods from unpopular ones specific to a particular game ( Minecraft ) in order to better understand the characteristics of popular mods . 3 . 2 Games and Software Engineering Several studies investigated open source game projects to relate them to software engineer - ing aspects ( Ahmed et al . 2017 ; Pascarella et al . 2018 ) . For instance , Pascarella et al . ( 2018 ) investigated how the developers contribute to video games in an open source setting . A few studies analyzed the development of the authors’ own video games ( Graham and Roberts W 2006 ; K¨ohler et al . 2012 ) , while Guana et al . ( 2015 ) studied the development of their own game engine . In particular , Guana et al . ( 2015 ) outline how game development is more complicated than traditional software development and presents a model - driven approach to simplify the development of game engines . B´ecares et al . ( 2017 ) investigated the gameplay of the Time and Space game and outlined an approach to automate the game tests . A few prior studies studied the videos of game - related bugs ( Lewis et al . 2010 ) . Notably , Lin et al . ( 2019a ) identified gameplay videos that showcase game bugs , as na¨ıve meth - ods such as keyword search is inaccurate . They proposed a random forest classifier that out - performs other classifiers ( i . e . , logistic regression and neural network ) , and provides a precision that is 43 % higher than the na¨ıve keyword search approach . Furthermore , several studies ( Lewis C and Whitehead 2011 ; Politowski et al . 2016 ; Washburn et al . 2016 ) have been conducted on the postmortems of games based on articles / magazines to draw insights on the do’s and dont’s of game development . Ampatzoglou and Stamelos ( 2010 ) provided researchers with a systemic review on avail - able literature . In addition , Scacchi and Cooper ( 2015 ) extensively analyzed the software engineering literature of games . 6 https : / / worldofwarcraft . com / en - us / Empirical Software Engineering Rather than investigating the software engineering aspect of the original game , in this paper we conduct an empirical study by mining the software engineering aspects of game mods that are available in the CurseForge platform . 3 . 3 Studies of the Minecraft Game Several prior studies have examined the Minecraft game for pedagogical uses ( Nebel et al . 2016 ; Stone et al . 2019 ; Lenig and Caporusso 2018 ; Al - Washmi et al . 2014 ; Bayliss 2012 ; Bebbington 2014 ; Brand and Kinash 2013 ; Duncan 2011 ; Ekaputra et al . 2013 ; Hanghøj et al . 2014 ; Petrov 2014 ; Short 2012 ; Siko et al . 2011 ; Zorn et al . 2013 ) . In addition , Nebel et al . ( 2016 ) conducted an extensive literature review on the usage of the Minecraft game in education . A few prior studies primarily focused on using the Minecraft game to study the players of the game ( Canossa et al . 2013 ; M¨uller et al . 2015 ; Quiring 2015 ) . Further - more , a few prior studies primarily focused on using the Minecraft game to streamline the development of software ( Balogh and Besz´edes 2013 ; Saito et al . 2014 ) . In our study , we analyze Minecraft mods to provide an empirical understanding of the characteristics of popular mods . 3 . 4 Mining Online Software Distribution Platforms Mining online software distribution platforms to provide useful information and insights about the popularity of software has been a fundamental part of software engineering research . We present a brief summary of how mining online software distribution platforms has been carried out in the context of traditional software , games and mobile apps . Traditional software . GitHub is one of the most popular online code hosting distribu - tion platforms for traditional software . Several prior studies investigated the popularity of software projects in GitHub to provide insights to software developers ( Zhu et al . 2014 ; Blincoe et al . 2016 ; Kalliamvakou et al . 2014 ; Borges et al . 2016a ; Borges and Hora 2016b ; Borges and Valente 2018 ) . For example , Borges and Hora . ( 2016b ) outline how a GitHub repository gathers popularity over time . In addition , Borges et al . outline the characteris - tics of successful GitHub repositories for other software developers to mimic . Similarly , Zhu et al . ( Zhu et al . 2014 ) suggest that better folder organizational practices lead to better project popularity in GitHub . Mobile apps . Many prior studies investigated features that impact the success of a mobile app by mining data from mobile app stores to provide useful guidelines to mobile app developers ( Guerrouj and Azad 2015 ; Tian et al . 2015 ; Bavota et al . 2014 ; Linares - V´asquez et al . 2013 ; Taba et al . 2014 ; Chia et al . 2012 ) . For example , Tian et al . ( 2015 ) studied the differences between popular and unpopular mobile apps and found that popular apps generally have more complex code and better exploit the latest features of the target Android SDK ( Software Development Kit ) . Taba et al . ( 2014 ) studied how the complexity of the UI of a mobile app affects its popularity and provided guidelines to developers on the amount of UI complexity they should strive for in order to keep their users happy . Similarly , Bavota et al . ( 2014 ) and Linares - V´asquez et al . ( 2013 ) studied the characteristics of the APIs used by popular and unpopular apps and recommended developers to use less defect - prone and change - prone APIs to ensure the popularity of their mobile apps . Games . Prior studies that mine data from online game distribution platforms primar - ily focused on extrapolating useful insights for game developers from platforms such as Steam ( Sifa et al . 2014 ; Blackburn et al . 2014 ; Lin et al . 2019b ) . For example , Lin et al . ( 2017 ) studied urgent updates on the Steam platform and observed several update patterns Empirical Software Engineering to help developers avoid undesirable updates . Lin et al . ( 2018 ) also studied the early access model on the Steam platform and suggested that game developers use the early access model to elicit early feedback and gather more positive feedback . Cheung GK et al . ( 2014 ) inves - tigated over 200 Xbox 360 game reviews to understand how the first hour of gameplay engages new players . Similarly , Ahn et al . ( 2017 ) analyzed game reviews between popular and unpopular games on the Steam platform to better understand the characteristics of pop - ular Steam games , and offered guidance to game developers on how to make their game popular . Though many studies mined various software repositories and provided insights to devel - opers , these insights do not directly translate to mod developers as software such as mobile apps and games are developed from the ground - up for the consumption of users . In con - trast , game mods are software that was built to enhance , extend or provide ( new ) features to an existing game in a meaningful way by hacking the source code of the original or through official APIs . Several prior studies ( Murphy - Hill et al . 2014 ; Pascarella et al . 2018 ; Petrillo et al . 2009 ; 2008 ) show that video game development is starkly different from other types of software development . Therefore , by extension , we expect game mod development ( which is a subset of game development ) to be different from mobile app and video games development . For instance , consider these two studies by Tian et al . ( 2015 ) and Ahn et al . ( 2017 ) . Both studies examine the characteristics of popular mobile apps and video games by mining the Google Play store and the Steam platform respectively to provide insights to mobile app and video game developers . For the mobile app developers , Tian et al . ( 2015 ) suggest that size of the app , number of promotional images and the target SDK are the three key elements that are associated with the popularity of a mobile app . In contrast , Ahn et al . ( 2017 ) recommend developers to improve the gameplay , the challenge and the motivational aspects and emotional connect of the video game while lowering the price and improv - ing the game’s storyline . However , different from both of these studies , from studying the CurseForge platform we find that popular mods are likely to have a better mod description , ease other mod development and welcome community contributions . Such a result further signifies that game mods are different from other types of software . Hence , the findings and recommendations for mobile developers , game developers and traditional software developers to ensure the popularity of their software as prescribed by prior studies cannot be directly transferred to game mod developers . Therefore , a study such as ours is pivotal in understanding the characteristics of popular mods . We envision future studies to build on our work in order to help developers improve the popularity of their mods . We did however conduct our study in the same vein as the aforementioned studies by mining the CurseForge mod distribution platform to gain an empirical understanding of the characteristics of popular mods . To the best of our knowledge , the study by Dey et al . ( 2016 ) is the only other study that mines online mod distribution platforms to study the characteristics of popular mods . However , they focus only on the tags that are provided for the mods on the distribution platforms and do not endeavour to provide insights to mod developers . We study the characteristics of popular and unpopular mods specific to a particular game ( Minecraft ) to better understand what characterizes popular mods . These characteristics can be further explored by future work to assist mod developers in improving the quality of their mods . Furthermore , we are the first to conduct a statistically rigorous analysis on 33 features collected across 5 dimensions to generate insights for mod developers . Empirical Software Engineering Fig . 1 An overview of our data collection 4 Methodology This section discusses the methodology of our empirical study of the characteristics of popular and unpopular Minecraft mods . Figure 1 gives an overview of our methodology . 4 . 1 Collecting Data We collected the dataset for our study from the CurseForge mod distribution platform on June 6 , 2019 , using a customized crawler . Table 2 shows an overview our Minecraft mod dataset . Collecting Mods . We collected the information of 12 , 710 mods . In particular , we collected the name , categories , number of total comments , source code URL , issue tracking URL , Paypal URL , and Patreon URL for each mod . Collecting Mod Releases . We collected the information of 111 , 574 releases across all mods . In particular , we collected the type , upload date , size , number of downloads , and supported Minecraft , Java , and Bukkit versions for each mod release . Collecting Dependencies . We collected 76 , 453 mod dependencies across all mod releases . In particular , we collected the type , mods , and the direction for each dependency . 4 . 2 Filtering Mods To ensure the quality of the studied mods , we first removed 295 inactive mods that have no mod releases . Then , we removed 6 , 845 mods that were created before 2014 or after 2016 to ensure the studied mods all have an equal chance to obtain a high number of downloads . For the remaining 5 , 570 mods , we selected the top and bottom 20 % of the mods based on their total number of downloads for our study . We consider the top 20 % of mods ( 1 , 114 mods ) as popular mods , and the bottom 20 % of mods ( 1 , 114 mods ) as unpopular mods based on their total number of downloads . Hence the claims that are made about a mod being ( un ) popular are about the likelihood of the mod belonging to the most / least popular group of mods . We do not take into account the lifetime of a mod ( despite some mods being created in 2014 and some mods being created in 2016 ) when separating the mods into popular and unpopular groups . We do so as the number of median downloads across the studied years for Empirical Software Engineering Table 2 An overview of the CurseForge mod distribution platform dataset Number of total mods 12 , 710 Number of studied mods 2 , 228 Number of studied dimensions 5 Number of studied features 33 Number of total mod releases 111 , 574 Number of total mod dependencies 76 , 453 mods in the popular and unpopular groups remains relatively consistent as we can observe from Fig . 2 . Furthermore , we observed that the number of popular mods that were created each year in the studied period also remains consistent . More specifically , among the 1 , 114 popular mods , 279 were created in 2014 , and 415 and 418 mods were created in 2015 and 2016 respectively . In total , we studied 2 , 228 mods . Our selection approach is similar to prior study ( Tian et al . 2015 ) which selected the highest and lowest rated mobile apps for study . We choose to study the number of downloads as a proxy for the popularity of a mod , as this number acts as a good indicator of the needs for the provided features / alterations by the mod within the Minecraft community . Furthermore , a mod becoming popular in an online platform like CurseForge is pivotal for the mod developers . For instance , as Postigo et al . Postigo ( 2007 ) outline , mod developers want their mods to be popular as being known Fig . 2 Distribution of the number of downloads that are received by popular and unpopular mods that are created in 2014 , 2015 and 2016 Empirical Software Engineering in the modding community may open up potentially lucrative job opportunities . Finally , identifying features that affect the popularity of software in online distribution platforms is widely regarded as an important software engineering challenge ( Nagappan and Shihab 2016 ) . This importance is for example demonstrated by the many software engineering studies that examine the characteristics of popular mobile apps in app stores ( e . g . , ( Harman et al . 2012 ; Tian et al . 2015 ; Bavota et al . 2014 ; Linares - V´asquez et al . 2013 ) ) . For each of the 2 , 228 mods , we used the information of the mod’s latest release and dependencies in our study . 4 . 3 Selecting Features Starting from prior work on the popularity of mobile apps ( Tian et al . 2015 ) and our own intuition , we defined 5 dimensions that might be associated with the popularity of mods ( i . e . , mod category , mod documentation , environmental context of the mod , remuneration for the mod , and community contribution for the mod ) . Then , we define for each dimen - sion the features that are available on the CurseForge platform and that we can extract in an automated fashion . We end up with 33 features ( characteristics ) that we leverage to under - stand the differences between the characteristics of popular and unpopular Minecraft mods . Table 3 shows an overview of the 33 features and their associated dimensions , along with their corresponding explanation and rationale . In addition , we normalized all features with the ‘ numeric ’ type in Table 3 using a log ( 1 + x ) transformation to reduce the bias caused by the outliers . 5 Characteristics of Popular and Unpopular Minecraft Mods In this section , we present the results of our empirical study of the characteristics of popular and unpopular Minecraft mods . 5 . 1 RQ1 : Do our studied dimensions have enough explanatory power to distinguish popular mods from unpopular ones ? Motivation : In this research question , we investigate how well each studied dimension of characteristics ( i . e . , features ) of mods can individually distinguish the popular mods from unpopular ones . We also investigate how well can all the studied dimensions together dis - tinguish popular mods from unpopular ones . Prior study ( Tian et al . 2015 ) used similar dimensions to identify the characteristics that distinguish mobile apps with high ratings from the ones with low ratings . The results of this research question lay the foundation for further investigations of the characteristics of popular mods . Approach : To investigate how well the individual dimensions can distinguish popular mods from unpopular ones ( i . e . , their explanatory power ) , we built a logistic regression model for each dimension in Table 3 . We used logistic regression , instead of other complex techniques ( e . g . , a neural network ) as logistic regression is transparent and interpretable ( Ruiz A and Villa N 2008 ; Molnar 2018 ) . In particular , for each dimension’s model , we used the features in a dimension as independent variables and whether the mod is popular as the dependent variable . We consider the given dimension to have significant explanatory power if the AUC of the model constructed with the dimension is greater than 0 . 5 , which means that the dimension can distinguish popular from unpopular mods . The dimension that Empirical Software Engineering T a b l e 3 D i m e n s i on s a nd t h e i r f ea t u r e s d e s c r i b i ng t h e c h a r ac t e r i s t i c s o f popu l a r a nd unpopu l a r M i n ec r a f t m od s D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti on a l e M od C a t e go r y N u m b e r o f ca t e go r i e s ( nu m c a t e go r i e s ) T o t a l nu m b e r o f ca t e go r i e s t h a t a m od b e l ong s t o . A m od m u s t b e l ong t o a t l ea s t on e ca t e go r y . N u m e r i c M od s t h a t o ff e r a v a r i e t y o f ca t e go r i e s ca n a tt r ac t u s e r s w it h m o r e op ti o n s . M i s ce ll a n e ou s ( i s c a t m i s c ) M od s t h a t do no t b e l ong t o a ny o f t h e e x i s ti ng ca t e g o r i e s . F o r e x a m p l e , t h e O p e n B l o ck s m od . 1 B oo l ea n C e r t a i n M i n ec r a f t m od ca t e go r i e s i n t h e C u r s e - F o r g e m od d i s t r i bu ti o n p l a t f o r m m a y a tt r ac t m o r e u s e r s t o t h e m od . F ood ( i s c a t f ood ) M od s t h a t p r ov i d e c h a ng e s t o a ny t h i ng r e l a t e d t o f ood i n - g a m e . F o r e x a m p l e , t h e A pp l e S k i n m od . 2 B oo l ea n W o r l d g e n e r a ti on ( i s c a t w o r l d g e n ) M od s t h a t p r ov i d e c h a ng e s r e l a t e d t o t h e w o r l d , s u c h a s n e w t e rr a i n s . B oo l ea n M a g i c ( i s c a t m ag i c ) M od s t h a t p r ov i d e c h a ng e s r e l a t e d t o m a g i c i n t h e M i n ec r a f t g a m e . F o r e x a m p l e , t h e R oo t s m od . 3 B oo l ea n A P I a n d li b r a r y ( i s c a t li b r a r y ap i ) M od s t h a t p r ov i d e s h a r e d c od e f o r o t h e r m od d e v e l op e r s t o u s e . B oo l ea n F a b r i c ( i s c a t f ab r i c ) M od s t h a t a r e c r ea t e d u s i ng t h e F ab r i c 4 m odd i ng t oo l c h a i n . B oo l ea n T ec hno l ogy ( i s c a t t ec hno l og y ) M od s t h a t p r ov i d e c h a ng e s f o r a ny i n - g a m e t ec h - no l o g y . B oo l ea n Empirical Software Engineering T a b l e 3 ( c on ti nu e d ) D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti on a l e A r m o r , t oo l s , a nd w ea pon s ( i s c a t a r m o r w e apon s t oo l s ) M od s t h a t p r ov i d e c h a ng e s t o i n - g a m e a r m o r , w ea pon s , a nd t oo l s . B oo l ea n A ddon s ( i s c a t addon s ) M od s t h a t p r ov i d e u tiliti e s f o r m od u s e r s t o ea s il y e x t e nd i n - g a m e f ea t u r e s . B oo l ea n S e r v e r u tilit y ( i s c a t s e r ve r u tilit y ) M od s t h a t p r ov i d e c h a ng e s t o t h e s e r v e r - s i d e o f t h e M i n ec r a f t g a m e . B oo l ea n R e d s t on e ( i s c a t r e d s t on e ) M od s t h a t a r e p r ov i d e c h a ng e s r e l a t e d t o t h e r e d s t on e r e s ou r ce i n t h e M i n ec r a f t g a m e . B oo l ea n M a p a nd i n f o r m a ti on ( i s c a t m ap i n f o ) M od s t h a t p r ov i d e c h a ng e s r e l a t e d t o t h e l o ca ti on a nd i n f o r m a ti on on it e m s . B oo l ea n S t o r a g e ( i s c a t s t o r ag e ) M od s t h a t p r ov i d e m od u s e r s b l o c k s a nd it e m s , w h i c h i m p r ov e t h e e x i s ti ng i n - g a m e s t o r a g e . B oo l ea n T w i t c h i n t e g r a ti on ( i s c a t t w it c h i n t e g r a ti on ) M od s t h a t p r ov i d e c h a ng e s r e l a t e d t o t h e i n t e r ac - ti on b e t w ee n t h e m od a nd t h e T w it c h p l a t f o r m . B oo l ea n C o s m e ti c ( i s c a t c o s m e ti c ) M od s t h a t p r ov i d e c h a ng e s t o t h e t e x t u r e a nd ae s t h e ti c o f t h e i n - g a m e m od e l s . B oo l ea n Empirical Software Engineering T a b l e 3 ( c on ti nu e d ) D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti on a l e M o d D o c u m e n t a ti on N u m b e r o f w o r d s i n t h e s ho r t d e s c r i p - ti on ( nu m w o r d s s ho r t d e s c ) N u m b e r o f w o r d s i n t h e m od ’ s p r e - v i e w d e s c r i p ti on . N u m e r i c T h e l ong e r t h e d e s c r i p ti on , t h e m o r e li k e l y t h a t m od u s e r s w ill und e r s t a nd w h a t t h e m od o ff e r s w it hou t do w n l o a d i ng t h e m od . N u m b e r o f w o r d s i n t h e l ong d e s c r i p - ti on ( nu m w o r d s l ong d e s c ) N u m b e r o f w o r d s i n t h e m od ’ s m a i n d e s c r i p ti on . N u m e r i c A dv e n t u r e a nd R P G ( i s c a t ad ve n t u r e r pg ) M od s t h a t c h a ng e t h e g a m e p l a y e xp e r i e n ce o f t h e i n - g a m e a dv e n - t u r e . B oo l ea n M od w i k i U R L ( i s m od w i k i u r l ) A n e x t e r n a l li nk w it h t h e do c u m e n t a ti on o f a m od . B oo l ea n T h e p r e s e n ce a nd qu a lit y o f a m od ’ s do c u m e n - t a ti on ca n h e l p o t h e r m od u s e r s und e r s t a nd ho w t o u tili ze t h e m od t o it s f u ll po t e n ti a l , w h i c h ca n g i v e u s e r s a b e tt e r e xp e r i e n ce . N u m b e r o f i m a g e s ( nu m i m ag e s ) N u m b e r o f i n - g a m e s c r ee n s ho t s t h a t a m od h a s . N u m e r i c I n - g a m e s c r ee n s ho t s ca n h e l p p r o m o t e a nd v i s u - a ll y e xp l a i n t h e m o d ’ s f un c ti on a liti e s , w h i c h m a y a tt r ac t u s e r s , w it hou t t r y i ng t h e m od f i r s t . E nv i r on m e n t a l C on t e x t o f t h e M od L a t e s t nu m b e r o f i n c o m p a ti b l e d e p e n - d e n c i e s ( nu m i n c o m pa ti b l e d e p ) N u m b e r o f i n c o m p a ti b l e d e p e nd e n c i e s t h a t a r e i n t h e l a t e s t r e l ea s e o f t h e m od , w h i c h m ea n s t h a t a no t h e r m od i s no t c o m p a ti b l e w it h t h e m od . N u m e r i c D e p e nd e n c i e s p r o v i d e m od s m o r e f un c ti on - a liti e s , w h i c h c ou l d m a k e t h e m od a pp ea l t o m o r e u s e r s . Empirical Software Engineering T a b l e 3 ( c on ti nu e d ) D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti on a l e L a t e s t nu m b e r o f t oo l d e p e nd e n c i e s ( nu m t oo l d e p ) N u m b e r o f w o r d s i n t h e m od ’ s m a i n d e s c r i p ti on . N u m e r i c L a t e s t nu m b e r o f r e qu i r e d d e p e nd e n c i e s ( nu m r e qu i r e d d e p ) N u m b e r o f r e qu i r e d d e p e nd e n c i e s t h a t a r e i n t h e l a t e s t r e l ea s e o f t h e m od , w h i c h m ea n s a no t h e r m od i s r e qu i r e d t o m a k e t h e m od f un c ti on . N u m e r i c L a t e s t nu m b e r o f e m b e dd e d li b r a r y d e p e nd e n c i e s ( nu m e m b e dd e d li b d e p ) N u m b e r o f e m b e dd e d li b r a r y d e p e nd e n c i e s t h a t a r e i n t h e l a t e s t r e l ea s e o f t h e m od , w h i c h p r o - v i d e s s h a r e d c od e f o r t h e m od ’ s d e v e l op m e n t . N u m e r i c L a t e s t nu m b e r o f op ti on a l d e p e nd e n c i e s ( nu m op ti ona l d e p ) N u m b e r o f op ti on a l d e p e nd e n c i e s t h a t a r e i n t h e l a t e s t r e l ea s e o f t h e m od , w h i c h m ea n s t h e d e p e nd e n c y a dd i ng a ce r t a i n f un c ti on a lit y ca n b e s w it c h e d on a nd o ff . N u m e r i c L a t e s t nu m b e r o f s uppo r t e d M i n ec r a f t v e r s i on ( s ) ( l a t e s t nu m m c ve rs i on s ) N u m b e r o f M i n ec r a f t v e r s i on s s uppo r t e d by t h e l a t e s t m od r e l ea s e , w h i c h c o rr e s pond s t o a s p e - c i f i c v e r s i on o f t h e M i n ec r a f t g a m e . M od s m u s t s uppo r t a t l ea s t on e M i n ec r a f t v e r s i on . N u m e r i c A l a r g e r nu m b e r o f s uppo r t e d v e r s i on s c ou l d a tt r ac t m o r e u s e r s t o a m od by p r ov i d i ng m o r e s t a b ilit y , a nd acce ss t o f un c ti on a liti e s fr o m d i ff e r e n t v e r s i on s . Empirical Software Engineering T a b l e 3 ( c on ti nu e d ) D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti o n a l e L a t e s t nu m b e r o f s uppo r t e d J a v a v e r - s i on ( s ) ( l a t e s t nu m j a v a ve rs i on s ) N u m b e r o f J a v a v e r s i on s s uppo r t e d by t h e l a t e s t m od r e l ea s e . M od d e v e l op e r s ca n op ti on a ll y p r ov i d e t h i s i n f o r m a ti on . N u m e r i c L a t e s t nu m b e r o f s uppo r t e d B ukk it v e r - s i on ( s ) ( l a t e s t nu m bu kk it ve rs i on s ) N u m b e r o f B ukk it A P I 5 v e r s i on s s uppo r t e d by t h e l a t e s t m od r e l ea s e . T h e B ukk it A P I e x t e nd s t h e m u lti p l a y e r s e r v e r o f t h e M i n ec r a f t g a m e f o r o t h e r s t o m od i f y . M od d e v e l op e r s ca n op ti on a ll y p r ov i d e t h i s i n f o r m a ti on N u m e r i c R e m un e r a ti on f o r t h e M od P a y P a l U R L ( i s pa y pa l u r l ) A n e x t e r n a l li nk t o P a y P a l f o r don a ti on s . B oo l ea n M od d e v e l op e r s t h a t a s k f o r don a - ti on s a r e m o r e li k e l y t o b e d e d i - ca t e d t o m odd i ng , w h i c h ca n a tt r ac t m o r e u s e r s . P a t r e on U R L ( i s pa t r e on u r l s ) A n e x t e r n a l li nk t o P a t r e on f o r don a ti on s . B oo l ea n C o m m un it y C on t r i bu ti on f o r t h e M od S ou r ce c od e U R L ( i s m od s ou r ce c od e ) A n e x t e r n a l li nk t o t h e s ou r ce c od e o f a m od ( e . g . , G it hub ) . B oo l ea n M od s t h a t p r ov i d e a li nk t o t h e i r s ou r c e c od e c ou l d i nv it e m o r e c on - t r i bu t o r s , w h i c h c ou l d a tt r ac t u s e r s w it h m o r e c on t e n t a t a f a s t e r s p ee d . Empirical Software Engineering T a b l e 3 ( c on ti nu e d ) D i m e n s i on F ea t u r e N a m e E xp l a n a ti on T yp e R a ti on a l e I ss u e t r ac k i ng U R L ( i s m od i ss u e s ) A n e x t e r n a l li nk t o a n i ss u e t r ac k i ng s y s t e m . B oo l ea n M od s t h a t p r ov i d e a li nk t o a n i ss u e t r ac k i ng s y s - t e m c ou l d i nd i ca t e t o a u s e r t h a t a m od i s m o r e s t a b l e , w h i c h m a y a tt r ac t t h e m t o t h e m od . 1 h tt p s : / / www . c u r s e f o r g e . c o m / m i n ec r a f t / m c - m od s / op e nb l o c k s 2 h tt p s : / / www . c u r s e f o r g e . c o m / m i n ec r a f t / m c - m od s / a pp l e s k i n 3 h tt p s : / / www . c u r s e f o r g e . c o m / m i n ec r a f t / m c - m od s / r oo t s 4 h tt p : / / f a b r i c m c . n e t / 5 h t t p s : / / d e v . bukk it . o r g / Empirical Software Engineering results in the largest AUC is deemed to have the most explanatory power and vice versa . We used the glm function 7 from the stats package 8 to create the logistic regression models . To validate the performance of our built models , we performed 100 out - of - sample boot - strap iterations to compute the AUC ( Area Under the receiver operator characteristics Curve ) for each model . Prior study Tantithamthavorn et al . ( 2016 ) showed that the out - of - sample bootstrap technique had the best balance between the bias and variance of estimates . The out - of - sample bootstrap technique randomly samples data with replacement for n iter - ations . The sampled data in an iteration is used as the training set for that iteration , while the data that was not sampled in that iteration is used as the testing set for that iteration . We then trained a model with the training set and calculated the AUC of the model with the testing set for each iteration . In addition , to investigate how well all studied dimensions combined can distinguish popular mods from unpopular mods , we built a logistic regression model using all 33 fea - tures from the 5 dimensions in Table 3 . We evaluated the performance of this combined model using the same aforementioned process of computing the AUC of the model with 100 out - of - sample bootstrap iterations . Furthermore , we used the Scott - Knott effect size difference test to statistically sort and rank the distributions of the AUCs of all studied dimensions ( Tantithamthavorn et al . 2016 ) . We used the sk esd function 9 from the ScottKnottESD package 10 for the Scott - Knott effect size difference test . Findings : Each studied dimension has significant explanatory power to individually identify popular mods . Figure 3 shows the distribution of AUCs per studied dimension . The lowest median AUC among the studied dimensions was 0 . 66 , implying that every dimension has significant explanatory power ( i . e . , the model has an AUC > 0 . 5 ) in dis - tinguishing popular mods from unpopular ones . In addition , the Scott - Knott effect size difference test shows a statistical significant difference between each studied dimensions , with non - negligible effect sizes . Among the studied dimensions , the community contribu - tion for the mod dimension is ranked as having the largest explanatory power , whereas the remuneration for the mod dimension is ranked as having the lowest explanatory power . The combined model has a larger explanatory power than each of the studied dimen - sion individually . Figure 3 shows the distribution of AUCs of the combined model that combines all studied dimensions together . The combined model has the largest median AUC of 0 . 91 , outperforming every one of the studied dimensions on their own . The Scott - Knott effect size difference test confirms that the combined model has the highest ranking in explanatory power compared to the individual studied dimensions . In addition , Fig . 3 shows that the combined model has a 10 % higher median AUC than the community contribution for the mod dimension ( the dimension with the highest explanatory power among the studied dimensions ) , and a 38 % higher median AUC than the remuneration for the mod dimension ( the dimension with the lowest explanatory power among the studied dimensions ) . Prior study ( Tian et al . 2015 ) also observed that a combined model with all the dimensions has a larger explanatory power than models with individual 7 https : / / www . rdocumentation . org / packages / stats / versions / 3 . 6 . 1 / topics / glm 8 https : / / www . rdocumentation . org / packages / stats / versions / 3 . 6 . 1 9 https : / / www . rdocumentation . org / packages / ScottKnottESD / versions / 1 . 2 . 2 / topics / % 22sk esd % 22 10 https : / / www . rdocumentation . org / packages / ScottKnottESD / versions / 1 . 2 . 2 Empirical Software Engineering Fig . 3 The distribution of the AUCs of models constructed with an individually studied dimension , and with all studied dimensions combined . The different colors represent the statistically different ranks given by the Scott - Knott effect size difference test . The distributions are sorted by their ranks ( presented in ascending order from left to right with remuneration for the mod having the lowest rank ) from the Scott - Knott effect size difference test dimensions in the context of distinguishing mobile apps with high ratings from mobile apps with low ratings . 5 . 2 RQ2 : Which features best characterize a popular mod ? Motivation : In this research question , we investigate which mod features can best char - acterize popular mods . The results of RQ1 show that the studied dimensions have a strong explanatory power for the popularity of a mod . In this RQ , we further investigate the char - acteristics of popular mods at the feature - level across 33 features and 5 dimensions to systematically quantify the association between the studied features and the number of downloads for a mod . Approach : To investigate which features can best characterize popular mods , in this research question we focus on analyzing the combined model with all dimensions of fea - tures , as RQ1 shows that the combined model has the most explanatory power for mod popularity . Figure 4 shows an overview of our approach to construct , evaluate and analyze the combined model . Below we explain each step in detail : Empirical Software Engineering Fig . 4 An overview of the process that we used to build , evaluate and analyze the combined model Correlation analysis We performed correlation analysis to reduce collinearity between the features before we built the models , since correlated features can affect the inter - pretation of the model ( Midi et al . 2010 ; McIntosh et al . 2016 ) . We used the varclus function 11 from the Hmisc package 12 in R to filter out highly correlated features . We calculated Spearman’s correlation coefficients among the studied features . We consider a pair of features with a Spearman correlation coefficient > = 0 . 7 as highly correlated . We did not observe high correlations among our studied features . 2 . Redundancy analysis Before building the models , we also performed redundancy analysis to eliminate redundant features that can interfere with the relationship between the independent variables ( i . e . , features ) , which in turn may distort the relationship the independent variables have with the dependent variable ( i . e . , popularity ) ( McIntosh et al . 2016 ) . We used the redun function 13 from the Hmisc package in R to filter out features that can be linearly predicted by other features . We removed the ‘ number of categories ’ feature as it is redundant , leaving 32 features for the remainder of the study . 3 . Building the combined model We used all the remaining features after step 2 to build a logistic regression model . However , the model’s regression coefficients could vary or be estimated incorrectly based on the sample of data and the underlying assumptions ( Fox and Monette 2002 ) . Hence , to avoid biasing the estimated regression coefficients , we 11 https : / / www . rdocumentation . org / packages / Hmisc / versions / 4 . 2 - 0 / topics / varclus 12 https : / / cran . r - project . org / web / packages / Hmisc / index . html 13 https : / / www . rdocumentation . org / packages / Hmisc / versions / 4 . 2 - 0 / topics / redun Empirical Software Engineering used the bootcov function from the rms package using 100 bootstrap iterations to adjust the regression coefficients with bootstrap estimates , to ensure the non - arbitrariness of the estimated regressions co - efficients in the combined model ( Harrell et al . 1984 ; Harrell and Slaughter 2001 ) . 4a . Explanatory power of features We used Wald’s χ 2 to measure the explanatory power of the features in the model from step 3 . The larger the Wald χ 2 , the larger the explana - tory power of the feature ( Harrell et al . 1984 ) . Prior study by Thongtanunam and Hassan ( 2018 ) used the same approach to compute the explanatory power of features . We com - puted the Wald χ 2 with the Anova function 14 from the car package 15 in R using the parameter test . statistic = ‘Wald’ . Table 4 shows the explanatory power of each feature ( Wald χ 2 ) . 4b . Explanatory power of dimensions Though in RQ1 , we observed that each dimension of features of a mod has explanatory power , we are uncertain of the unique explana - tory power each of them contains in relation to the other dimensions . Understanding the unique explanatory power of each dimension is critical to assert which of these dimen - sions matter the most for characterizing the popularity of a mod . For example , from Fig . 3 we observe that the environmental context of the mod and mod documentation dimensions by themselves can explain the popularity of a mod with a median AUC of 0 . 74 . However , we are uncertain of how much unique power each of these dimensions contribute to the model built on all the studied dimensions , which had a median AUC of 0 . 92 . Therefore , we conducted a chunk test on each of the studied dimensions in the combined model from step 3 , to quantify the explanatory power of each studied dimension ( Harrell 2001 ; McIntosh et al . 2016 ) . For each of the studied dimensions ( given in Table 3 ) , the chunk test estimates the difference in goodness of fit ( by computing the difference in log - likelihood ) between the full model ( i . e . , the combined model from step 3 ) and the combined model that was built without one studied dimension ( whose explanatory power we are com - puting ) . The chunk test reports a Chi - square value ( (cid:3) LR χ 2 ) ( which is the difference in log - likelihood compared to the Chi - squared distribution ) and a p - value . The Chi - squared value quantifies the unique explanatory power that was lost due to the removal of the given dimension ( in relation to the other dimensions ) and a lower p - value ( < = 0 . 05 ) signifies the dimension’s significance . We used the lrtest function 16 from the lmtest package 17 in R to conduct the chunk test . Table 4 shows the explanatory power of each dimension ( (cid:3) LR χ 2 ) . 5a . Backward feature selection We do backward feature selection to ensure the parsi - mony of the constructed model , as suggested by Harrell et al . ( 1984 ) . For instance , if a model contains a large number of independent features , the model becomes too com - plex to draw explanations . Hence , ( Harrell et al . 1984 ) suggests using backward feature selection when the goal of the model is to interpret it . We used the fastbw function 18 from the rms package in R to perform a backward elimination of features . The fastbw function takes the model that was constructed on all the features ( 32 ) and eliminates 14 https : / / www . rdocumentation . org / packages / car / versions / 3 . 0 - 3 / topics / Anova 15 https : / / www . rdocumentation . org / packages / car / versions / 3 . 0 - 3 16 https : / / www . rdocumentation . org / packages / lmtest / versions / 0 . 9 - 37 / topics / lrtest 17 https : / / www . rdocumentation . org / packages / lmtest / versions / 0 . 9 - 37 18 https : / / www . rdocumentation . org / packages / rms / versions / 5 . 1 - 3 . 1 / topics / fastbw Empirical Software Engineering Table 4 An overview of the statistics of each dimension and its features . The larger the (cid:3) LR χ 2 , the larger the role of a studied dimension Wald χ 2 ( % ) P - value Mod Category ( (cid:3) LR χ 2 : 23 . 51 % ) 0 . 00 Fabric 20 . 54 < 0 . 01 Armor , tools , and weapons 7 . 92 < 0 . 01 Addons 2 . 22 < 0 . 01 Food 2 . 17 < 0 . 01 World generation 1 . 64 < 0 . 01 API and library 1 . 47 < 0 . 01 Miscellaneous 1 . 39 < 0 . 01 Server utility 1 . 17 < 0 . 01 Storage 0 . 79 0 . 02 Redstone 0 . 50 0 . 06 Adventure and RPG 0 . 43 0 . 08 Cosmetic 0 . 27 0 . 17 Technology 0 . 10 0 . 39 Map and information 0 . 02 0 . 73 Magic 0 . 01 0 . 74 Twitch integration 0 . 00 0 . 97 Mod Documentation ( (cid:3) LR χ 2 : 13 . 03 % ) 0 . 00 Number of words in the long description 5 . 18 < 0 . 01 Number of images 2 . 06 < 0 . 01 Mod wiki URL 1 . 72 < 0 . 01 Number of words in the short description 0 . 46 0 . 07 Environmental Context of the Mod ( (cid:3) LR χ 2 : 18 . 63 % ) 0 . 00 Latest number of Bukkit versions 15 . 45 < 0 . 01 Latest number of required dependencies 9 . 27 < 0 . 01 Latest number of optional dependencies 0 . 81 0 . 02 Latest number of Minecraft versions 0 . 49 0 . 07 Latest number of Java versions 0 . 06 0 . 53 Latest number of tool dependencies 0 . 00 0 . 85 Latest number of incompatible dependencies 0 . 00 0 . 86 Latest number of embedded library dependencies 0 . 00 0 . 98 Remuneration for the Mod ( (cid:3) LR χ 2 : 10 . 42 % ) < 0 . 01 Paypal URL 6 . 21 < 0 . 01 Patreon URL 1 . 56 < 0 . 01 Community Contribution for the Mod ( (cid:3) LR χ 2 : 34 . 41 % ) 0 . 00 Issues URL 11 . 21 < 0 . 01 Source code URL 4 . 86 < 0 . 01 Total 100 . 00 Similarly , the larger the Wald χ 2 , the larger the explanatory power of a feature in the combined model ( The percentages and p - value are rounded to two decimal places ) . The feature is statistically significant if the p - value < = 0 . 05 . Sorted by the Wald χ 2 per studied dimension Empirical Software Engineering the features that do not significantly contribute to reducing the AIC of the model . We removed 14 of the 32 features ( 44 % ) using the fastbw function . In result , we obtained a new combined model with 18 features . Similarly , the larger the Wald χ 2 , the larger the explanatory power of a feature in the combined model ( The percentages and p - value are rounded to two decimal places ) . The feature is statistically significant if the p - value < = 0 . 05 . Sorted by the Wald χ 2 per studied dimension 5b . Build the final model With the reduced feature set from step 5a , we reconstructed the final combined model . Similar to step 3 , we adjusted the regression coefficients with the bootstrap estimate , as outlined by Harrell et al . ( 1984 ) . 5c . Performance evaluation To demonstrate the quality of the constructed model from 5b , we calculated the AUC of the model using 100 out - of sample bootstrap iterations to evaluate the performance of the model . 5d . Nomogram analysis We used the final combined model from step 5b to create and analyze a nomogram using the nomogram function 19 from the rms package in R , which provides a way to measure the explanatory power of each feature in distinguish - ing popular from unpopular mods . A nomogram provides a graphical visualization of the parsimonious logistic regression model that we built in step 5b . Although the Wald χ 2 can provide insight into the explanatory power of each feature in the combined model , the nomogram provides us with an exact interpretation on how the variation in each fea - ture affects the outcome probability . For instance , while the Wald χ 2 may indicate that the number of words in the long description of a mod is important , the Wald χ 2 does not provide insights on how the exact number of words in the long description contribute to the explanatory power in distinguishing popular from unpopular mods . Furthermore , the Wald χ 2 does not show if a certain feature has a positive or negative role in distin - guishing popular from unpopular mods , whereas the nomogram does . For instance , if for a given mod , the feature “ latest num bukkit versions ” is 0 , then it has a positive role in distinguishing popular from unpopular mods . Several prior studies ( Shariat et al . 2009 ; Chun et al . 2007 ) showed that nomograms are one of the most accurate discriminatory tools in interpreting a logistic regression model . Hence , we constructed a nomogram to observe the exact role of features in classifying if a given mod is either popular or unpop - ular . Another key difference between the Wald χ 2 and nomogram is that the nomogram can show the contribution of each feature towards the outcome probability for each of the studied mods , whereas the Wald χ 2 only shows the overall contribution ( which is not specific to each mod ) . Figure 5 shows the results of the nomogram analysis . 5e . Partial effects analysis We used the final combined model from step 5b and the nomogram analysis from step 5d to create partial effects plots , which show how different values in numeric features with respect to another feature held constant at the median for numeric features and at the mode for boolean features , contributes the outcome probabil - ity . Hence , the partial effects analysis provides a deeper explanation of how the variation in certain features can contribute to the probability of a mod being popular or unpopular . In addition , to measure if two distributions are significantly different , we used the Wilcoxon tests . The Wilcoxon signed - rank test is a paired and non - parametric statistical test , whereas the Wilcoxon rank - sum test is an unpaired and non - parametric statistical test , where the null hypothesis indicates that it is equally likely that a randomly selected value from one sample will be less than or greater than a randomly selected value from a second 19 https : / / www . rdocumentation . org / packages / rms / versions / 5 . 1 - 3 . 1 / topics / nomogram Empirical Software Engineering Fig . 5 The nomogram visualizes the role of each feature in distinguishing a mod’s popularity . The line against each feature in the figure , varies between the range of values for that given feature . The “ points ” line at the top of the figure , is used to calculate the magnitude of contribution that each feature has and “ Total Points ” at the bottom of the figure gives the total points generated by all the features for a given instance ( i . e . , for a given mod ) . For instance , if for a given mod , the feature “ is cat fabric ” has a value of 1 , then it contributes 100 points . Finally , the line against “ Popularity ” shows the probability of a mod to be classified as a popular mod according to the total number of points ( which is computed by summing up all the individual points contributed by each feature ) . For instance , if all the features for a given mod contribute a total of 260 points , then the probability of that mod to be classified as popular by our explanatory model is 99 % and similarly , if the total points given by all the features for a particular mod is less than 110 , then that mod will be classified as not popular . Also , the model used to generate this nomogram achieved a median AUC of 0 . 92 on 100 out - of - sample bootstrap iterations sample ( Wilcoxon 1945 ) . If the p - value of the used Wilcoxon test on the two distributions is less than 0 . 05 , we reject the null hypothesis , and conclude that the two distributions are significantly different . In addition , to calculate the magnitude of the difference we calcu - late the Cliff’s delta d effect size ( Long et al . 2003 ) , with the following thresholds ( Romano et al . 2006 ) : Effect size = ⎧⎪⎪⎨ ⎪ ⎪⎩ negligible ( N ) , if | d | ≤ 0 . 147 . small ( S ) , if 0 . 147 < | d | ≤ 0 . 33 . medium ( M ) , if 0 . 33 < | d | ≤ 0 . 474 . large ( L ) , if 0 . 474 < | d | ≤ 1 . Findings : Mods that simplify mod development are a popular type of mods . Figure 5 shows that mods that belong to the “fabric” , “addons” , and “API and library” categories tend to be among the most popular mods . We further investigated the mods under each cat - egory and observed that all of the 16 collected “fabric” mods are popular mods , 73 . 3 % of the studied “addons” mods are popular mods , and 71 . 1 % of the studied “API and library” Empirical Software Engineering category mods are popular mods . Mods of the “fabric” category are created using the “fab - ric” mod development toolchain , which offers a mod ecosystem that makes updating a mod simpler and provides modularity of the code ( Fabric development team 2018 ) . Mods of the “API and library” category can be leveraged by others and mod developers to make mod development simpler . In addition , mods of the “addons” category , such as the TOP Addons mod , add support to and extend other mods . 20 Finally , the “miscellaneous” , “food” , “world generation” , “armor tools weapons” , and “server utility” mod categories are more related to unpopular mods . Over 70 % of the studied popular mods include a source code URL and / or issue tracking URL , as shown in Fig . 5 . We investigated the studied popular mods and observed that 77 % of the popular mods have an issue tracking URL , and 71 % of the popular mods have a source code URL . In addition , Fig . 6 shows that the presence of an issue tracking URL with at least about 145 words in the mod’s main description increases the probability of distinguishing popular from unpopular mods . Furthermore , from Table 4 , we observe that the community contribution dimension ( which captures the presence / absence of source code URL and / or an issue tracking URL ) has the highest explanatory power ( 34 . 4 % ) among all the other studied dimensions . Even though other individual features contribute towards characterizing the popularity of a mod , community contribution dimension as a whole is more important . Popular mods have longer descriptions than unpopular mods . The descriptions of popular mods have a median of 161 . 5 words , whereas the descriptions of unpopular mods have a median of 75 words . The Wilcoxon rank - sum test confirms that the number of words in the description of popular mods and unpopular mods is statistically significantly different , with a medium Cliff’s delta effect size . In Fig . 6 , we held the mod wiki URL at a constant against the number of words in the description because if a mod developer is willing to provide external documentation , they could be more willing to make an effort into providing a richer description for the mod . Prior work ( Tian et al . 2015 ) showed that high - rated mobile apps had significantly longer app descriptions , which is consistent with our results . In addition , Fig . 5 shows that popular mods have more images and a wiki URL . There - fore we posit that mod developers who make an effort to provide external documentation are likely to further explain how the mod works visually to users by presenting in - game screenshots , and Fig . 6 confirms this observation . Prior work ( Tian et al . 2015 ) observed that the number of images is one of the top three influential factors in determining that a mobile app will be high - rated , which is consistent with the results of our study of mods . Finally , the number of words in the description , the number of images , and having a wiki URL are all features that are related to the mod documentation dimension , and all of them have a positive relationship with mod popularity . Popular mods typically accepted donations and tended to be more active ( i . e . , they have more releases and comments ) . Figures 5 and 6 show that popular mods often have a Paypal URL or Patreon URL . Mods with a PayPal URL have a median of 13 mod releases , whereas mods without a PayPal URL have a median of 2 mod releases ; mods with a Patreon URL had a median of 21 mod releases , whereas mods without a Patreon URL had a median of 3 mod releases . The Wilcoxon rank - sum test confirms that the differences in the number of mod releases between mods with and without a PayPal URL or Patreon URL are both statistically significant , with a medium Cliff’s delta effect size for a PayPal URL and a large Cliff’s delta effect size for a Patreon URL . Furthermore , mods with a Patreon URL 20 https : / / www . curseforge . com / minecraft / mc - mods / top - addons Empirical Software Engineering Fig . 6 The impact of features on the outcome probability when another feature is held constant ( features are held constant at the median for numeric features and at the mode for boolean features ) . The grey area shows a confidence interval at 95 % have a median of 25 comments per mod , while mods without a Patreon URL have a median of 1 comment per mod . The Wilcoxon rank - sum test confirms a statistically significant difference in the number of comments between mods with and without a Patreon URL , with a small Cliff’s delta effect size . In total , we observed that 88 mod developers advertise their Patreon URL on their mods’ pages . We manually investigated the motivation of them accepting donations by looking at each of their Patreon profiles . 14 % of these mod developers created a Patreon to support their living ( e . g . , pay bills ) , 32 % of them created a Patreon for fun and did not expect profit , 32 % of them created a Patreon to obtain motivation in continuously releasing new content ( e . g . , faster release of content ) , and 23 % of them either closed or did not finish setting up their Patreon profile . We further investigated the release frequency of mods ( with more than 1 mod release ) that are created by the 32 % of mod developers who use Patreon for motivation to release new content . However , the Wilcoxon rank - sum test shows no statistically significant differ - ence in the release frequency between mods that are created by mod developers that accept donations for motivation to mod ( a median mod release frequency of every 6 days ) and mods that are created by other mod developers ( a median mod release frequency of 7 days ) . The Empirical Software Engineering Wilcoxon rank - sum test did show a statistically significant difference in the number of mod releases between mods that are created by mod developers that accept donations to mod ( a median number of 23 mod releases ) and mods that are created by other mod developers ( a median number of 11 mod releases ) , with a medium Cliff’s delta effect size . Hence , mod developers who accept donations as a motivation to create mods do produce a larger number of mods than other mod developers ( though not necessarily more popular mods ) . However , their release frequency is similar to the mod developers who do not accept donations as a motivation . Interestingly , LexManos 21 received the most donations at $ 2 , 157 per month . LexManos is the creator and primary developer of the popular Minecraft Forge API ( Morrison 2014 ) , which is a mod loader API that is required to run most Minecraft mods . However , other mod developers who have a valid Patreon URL only generate a median of $ 4 per month . 6 Threats to Validity This section outlines the threats to the validity of our findings . 6 . 1 Internal Validity A threat to the internal validity of our study is that we only studied the top and bottom 20 % of the mods ( based on their number of downloads ) . However , the top and bottom 20 % of the mods ensures that there is a clear distinction between popular and unpopular mods , as mods having close to the median number of total downloads can belong to either one . Such approach is also used in prior study ( Tian et al . 2015 ) . Another threat to the internal validity of our study is that we only focused on the mods that were created between 2014 and 2016 . However , such restriction is necessary to reduce the bias introduced by the extreme short or long lifetime of a mod . An additional internal threat to validity is that we do not cover all the possible features that are related to mods . However , we conduct a first study to understand the characteristics of popular and unpopular mods specific to a particular game ( Minecraft ) and we encourage future work to explore additional features and dimensions . For example , Minecraft has been used as a sandbox for a plethora of activities , for example , in the education sector . Therefore , the educational value of a mod might potentially be an important confounder in determining the popularity of a mod in addition to the features that we observe in our study . We suggest that future studies investigate how the other latent functional and educational aspects of Minecraft modding affect its popularity using statistical procedures that are similar to the ones that are outlined in our study . Finally , it is important to realize that mod developers of the CurseForge mod distribution platform could at anytime change the name of their mod , remove mod developers or delete the mod . As a result , some older mods or mod developers may not exist at the time of our 21 https : / / www . patreon . com / lexmanos Empirical Software Engineering data collection . Future studies should investigate the life cycle of mods and mod developers on the CurseForge mod distribution platform . 6 . 2 External Validity A threat to the external validity of our study is that we only studied mods from the Curse - Forge mod distribution platform . However , the CurseForge mod distribution platform has the largest number of mods out of other mod distribution platforms , as shown in Section 2 . Furthermore , we clearly document the data collection and the statistical approach that we use to arrive at the characteristics of popular game mods in the CurseForge platform . There - fore , our approach could be replicated by other future studies that seek to investigate the characteristics of popular and unpopular mods across different mod distribution platforms ( such as the Nexus mods platform ) . Another threat to the external validity of our study is that we only studied mods for the Minecraft game . Although the Minecraft game is one of the best selling games in 2019 , and hosts one of most active and largest modding commu - nities , our results may or may not generalize across mods developed for a different game . Therefore , future studies should use our outlined approach compare our results with mods of different games . 7 Conclusion An active modding community not only helps game developers meet the growing and changing needs of their gamer base , but also leads to a better overall gaming experience . In this paper , we studied the characteristics of popular mods with a large number of downloads by analyzing 2 , 228 Minecraft mods from the CurseForge mod distribution platform , along 5 dimensions of characteristics for a mod : mod category , mod documentation , environmen - tal context of the mod , remuneration for the mod , and community contribution for the mod . We firstly verified that the studied dimensions have significant explanatory power in distin - guishing popular from unpopular mods . Then , we investigated the contribution of each of the 33 features across these 5 dimensions of mod characteristics on the popularity of a mod . The most important findings of our paper are : 1 . The community contribution for the mod dimension has the strongest explanatory power of the popularity of mods . Popular mods tend to promote community contribu - tion with a source code URL and an issue tracking URL . 2 . Simplifying the mod development is positively correlated with mod popularity . 3 . Popular mods tend to have a high quality description . Based on our findings , we suggest future work to further investigate the impact of the features that distinguish popular mods , to eventually come with recommendations that assist mod developers in improving the popularity of their mods . References Ahmed F , Zia M , Mahmood H , Al Kobaisi S ( 2017 ) Open source computer game application : an empirical analysis of quality concerns . Entertain Comput 21 : 1 – 10 Empirical Software Engineering Ahn S , Kang J , Park S ( 2017 ) What makes the difference between popular games and unpopular games ? analysis of online game reviews from steam platform using word2vec and bass model . ICIC Express Letters , pp 1729 – 1737 Al - Washmi R , Bana J , Knight I , Benson E , Kerr OAA , Blanchfield P , Hopkins G ( 2014 ) Design of a math learning game using a Minecraft mod . In : European conference on games based learning , academic conferences international limited , vol 1 , p 10 Ampatzoglou A , Stamelos I ( 2010 ) Software engineering research for computer games : a systematic review . Inf Softw Technol 52 ( 9 ) : 888 – 901 Arakji RY , Lang KR ( 2007 ) Digital consumer networks and producer - consumer collaboration : Innovation and product development in the video game industry . J Manag Inf Syst 24 ( 2 ) : 195 – 219 Balogh G , Besz ´ edes ´ A ( 2013 ) CodeMetrpolis – A Minecraft based collaboration tool for developers . In : 2013 First IEEE working conference on software visualization VISSOFT , IEEE . pp 1 – 4 Bavota G , Linares - Vasquez M , Bernal - Cardenas CE , Di Penta M , Oliveto R , Poshyvanyk D ( 2014 ) The impact of api change - and fault - proneness on the user ratings of android apps . IEEE Trans Softw Eng 41 ( 4 ) : 384 – 407 Bayliss JD ( 2012 ) Teaching game AI through Minecraft mods . In : International Games Innovation Confer - ence , IEEE . pp 1 – 4 Bebbington S ( 2014 ) A case study of the use of the game Minecraft and its affinity spaces for information literacy development in teen gamers . PhD thesis , Universit´e d’Ottawa / University of Ottawa B´ecares JH , Valero LC , Mart´ın PPG ( 2017 ) An approach to automated videogame beta testing . Entertain Comput 18 : 79 – 92 Beggs B ( 2012 ) Minecraft , it’s a mod , mod , modder’s world : Computer game modifications as civic discourse . Reconstruction : , Studies in Contemporary Culture , 12 ( 2 ) Blackburn J , Kourtellis N , Skvoretz J , Ripeanu M , Iamnitchi A ( 2014 ) Cheating in online games : a social network perspective . ACM Trans Internet Technol ( TOIT ) 13 ( 3 ) : 9 Blake V ( 2019 ) Minecraft might be the biggest - selling video game of all time now . https : / / www . eurogamer . net / articles / 2019 - 05 - 19 - minecraft - might - be - the - biggest - selling - video - game - of - all - time - now , ( last visited : July 11 , 2019 ) Blincoe K , Sheoran J , Goggins S , Petakovic E , Damian D ( 2016 ) Understanding the popular users : Following , affiliation influence and leadership on github . Inf Softw Technol 70 : 30 – 39 Borges H , Valente MT ( 2018 ) What’s in a github star ? understanding repository starring practices in a social coding platform . J Syst Softw 146 : 112 – 129 Borges H , Hora A , Valente MT ( 2016a ) Predicting the popularity of github repositories . In : Proceedings of the The 12th International Conference on Predictive Models and Data Analytics in Software Engineering , pp 1 – 10 Borges H , Hora A ( 2016b ) Understanding the factors that impact the popularity of github repositories . In : 2016 IEEE International conference on software maintenance and evolution ( ICSME ) , IEEE pp . 334 – 344 Brand J , Kinash S ( 2013 ) Crafting minds in Minecraft . Educ Technol Solut 55 : 56 – 58 Canossa A , Martinez JB , Togelius J ( 2013 ) Give me a reason to dig Minecraft and psychology of motivation . In : 2013 IEEE Conference on Computational Inteligence in Games ( CIG ) , IEEE . pp 1 – 8 Cheung GK , Zimmermann T , Nagappan N ( 2014 ) The first hour experience : how the initial play can engage ( or lose ) new players . In : First ACM SIGCHI Annual Symposium on Computer - Human Interaction in Play , ACM , pp 57 – 66 Chia PH , Yamamoto Y , Asokan N ( 2012 ) Is this app safe ? a large scale study on application permissions and risk signals . In : Proceedings of the 21st international conference on World Wide Web , pp 311 – 320 Chun FKH , Karakiewicz PI , Briganti A , Walz J , Kattan MW , Huland H , Graefen M ( 2007 ) A criti - cal appraisal of logistic regression - based nomograms , artificial neural networks , classification and regression - tree models , look - up tables and risk - group stratification models for prostate cancer . BJU international 99 ( 4 ) : 794 – 800 CurseForge ( 2006 ) . CurseForge https : / / minecraft . curseforge . com / . ( last visited : March 12 , 2019 ) Dey T , Massengill JL , Mockus A ( 2016 ) Analysis of popularity of game mods : A case study . In : Annual symposium on computer - human interaction in play companion extended abstracts , ACM , pp 133 – 139 Duncan SC ( 2011 ) Minecraft , beyond construction and survival . Well Played : , a journal on video games , value and meaning 1 ( 1 ) : 1 – 22 Ekaputra G , Lim C , Eng KI ( 2013 ) Minecraft : A game as an education and scientific learning tool . Information Systems International Conference ( ISICO ) Fabric development team ( 2018 ) . Fabric Announcement . http : / / fabricmc . net / 2018 / 12 / 10 / announcement . html , ( last visited : August 30 , 2019 ) Empirical Software Engineering Finley K ( 2014 ) New Minecraft Mod teaches you code as you play . https : / / www . wired . com / 2014 / 08 / learntomod / , ( last visited : July 11 , 2019 Fox J , Monette G ( 2002 ) An R and S - Plus companion to applied regression . Sage Geere D , Copeland W ( 2019 ) The best Minecraft mods . https : / / www . pcgamer . com / best - minecraft - mods / , ( last visited : July 11 2019 ) Graham TN , Roberts W ( 2006 ) Toward quality - driven development of 3D computer games . In : International workshop on design , Specification , and Verification of Interactive Systems . Springer , Berlin , pp 248 – 261 Guana V , Stroulia E , Nguyen V ( 2015 ) Building a game engine : A tale of modern model - driven engineering . In : IEEE / ACM 4th International Workshop on Games and Software Engineering , IEEE . pp 15 – 21 Guerrouj L , Azad S ( 2015 ) the influence of app churn on app success and stackoverflow discussions . In : 2015 IEEE 22Nd international conference on software analysis , evolution , and reengineering ( SANER ) , IEEE . pp 321 – 330 Hackman E , Bj¨orkqvist U ( 2014 ) Modders of skyrim : Motivations and modifications : A qualitative study of what motivations and modifications the modders of Elder scrolls : Skyrim exhibit . Master’s thesis , S¨odert¨orn University Hanghøj T , Hautopp H , Jessen C , Denning RC ( 2014 ) Redesigning and reframing educational scenarios for Minecraft within mother tongue education . In : European conference on games based learning , academic conferences international limited , vol 1 . pp 182 Harman M , Jia Y , Zhang Y ( 2012 ) App store mining and analysis : Msr for app stores . In : 2012 9Th IEEE working conference on mining software repositories ( MSR ) , IEEE . pp 108 – 111 Harrell FE Jr ( 2001 ) Lecture Notes in Biostatistical Modeling . http : / / biostat . mc . vanderbilt . edu / wiki / pub / Main / BioMod / notes . pdf . Last visited : , September 2 , 2019 Harrell FE Jr , Slaughter JC ( 2001 ) Introduction to Biostatistics for Biomedical Research . http : / / hbiostat . org / doc / bbr . pdf , Last visited : , September 2 , 2019 Harrell FE Jr , Lee KL , Califf RM , Pryor DB , Rosati RA ( 1984 ) Regression modelling strategies for improved prognostic prediction . Stat Med 3 ( 2 ) : 143 – 152 Jeppesen LB ( 2004 ) Profiting from innovative user communities : How firms organize the production of user modifications in the computer games industry . Tech rep , Department of Industrial Economics and Strategy Copenhagen Business School Kalliamvakou E , Gousios G , Blincoe K , Singer L , German DM , Damian D ( 2014 ) The promises and perils of mining github . In : Proceedings of the 11th working conference on mining software repositories , pp 92 – 101 K¨ohler B , Haladjian J , Simeonova B , Ismailovi´c D ( 2012 ) Feedback in low vs . high fidelity visuals for game prototypes . In : Second international workshop on games and software engineering : realizing user engagement with game engineering techniques , IEEE , pp 42 – 47 Lane HC , Yi S , Guerrero B , Comins NF ( 2017 ) Minecraft as a sandbox for stem interest development : Preliminary results . In : 25th International conference on computers in education proceedings Leavitt A ( 2013 ) The source of open - source culture : Participation in the production of an open media artifact , minecraft . AoIR Selected Papers of Internet Research , pp 3 Lee D , Lin D , Bezemer CP , Hassan AE ( 2018 ) Building the perfect game - an empirical study of game modifications . Empirical Software Engineering Under review , pp 1 – 23 Lenig S , Caporusso N ( 2018 ) Minecrafting virtual education . In : International Conference on Applied Human Factors and Ergonomics . Springer , Berlin , pp 275 – 282 Lewis C , Whitehead J ( 2011 ) The whats and the whys of games and software engineering . In : 1st International Workshop on Games and Software Engineering , ACM , pp 1 – 4 Lewis C , Whitehead J , Wardrip - Fruin N ( 2010 ) What went wrong : a taxonomy of video game bugs . In : Fifth International Conference on the Foundations of Digital Games , ACM , pp 108 – 115 Lin D , Bezemer CP , Hassan AE ( 2017 ) Studying the urgent updates of popular games on the Steam platform . Empir Softw Eng 22 ( 4 ) : 2095 – 2126 Lin D , Bezemer CP , Hassan AE ( 2018 ) An empirical study of early access games on the Steam platform . Empir Softw Eng 23 ( 2 ) : 771 – 799 Lin D , Bezemer CP , Hassan AE ( 2019a ) Identifying gameplay videos that exhibit bugs in computer games . Empir Softw Eng 24 ( 115 ) : 1573 – 7616 Lin D , Bezemer CP , Zou Y , Hassan AE ( 2019b ) An empirical study of game reviews on the Steam platform . Empir Softw Eng 24 ( 1 ) : 170 – 207 Linares - V´asquez M , Bavota G , Bernal - C´ardenas C , Di Penta M , Oliveto R , Poshyvanyk D ( 2013 ) Api change and fault proneness : a threat to the success of android apps . In : Proceedings of the 2013 9th joint meeting on foundations of software engineering , pp 477 – 487 Long JD , Feng D , Cliff N ( 2003 ) Ordinal analysis of behavioral data . Handbook of psychology , pp 635 – 661 Empirical Software Engineering McIntosh S , Kamei Y , Adams B , Hassan AE ( 2016 ) An empirical study of the impact of modern code review practices on software quality . Empir Softw Eng 21 ( 5 ) : 2146 – 2189 Midi H , Sarkar SK , Rana S ( 2010 ) Collinearity diagnostics of binary logistic regression model . J Interdiscip Math 13 ( 3 ) : 253 – 267 Mills A ( 2015 ) A Brief History of Minecraft Modding . https : / / hub . packtpub . com / brief - history - minecraft - modding / , ( last visited : July 11 , 2019 ) Mojang ( 2019 ) What is Minecraft ? . https : / / www . minecraft . net / en - us / what - is - minecraft / , ( last visited : July 11 , 2019 ) Molnar C ( 2018 ) Interpretable machine learning . A Guide for Making Black Box Models Explainable 7 . https : / / christophm . github . io / interpretable - ml - book / Morrison A ( 2014 ) How To Make Minecraft A Survival Game . https : / / www . rockpapershotgun . com / 2014 / 10 / 24 / minecraft - survival - mods / , ( last visited : March 12 , 2019 ) M¨uller S , Kapadia M , Frey S , Klinger S , Mann RP , Solenthaler B , Sumner RW , Gross M ( 2015 ) Statistical analysis of player behavior in Minecraft . In : Proceedings of the 10th International Conference on the Foundations of Digital Games , Society for the Advancement of the Science of Digital Games Murphy - Hill E , Zimmermann T , Nagappan N ( 2014 ) Cowboys , ankle sprains , and keepers of quality : How is video game development different from software development ? , ACM , USA Nagappan M , Shihab E ( 2016 ) Future trends in software engineering research for mobile apps . In : 2016 IEEE 23Rd international conference on software analysis , evolution , and reengineering ( SANER ) , IEEE , vol 5 , pp 21 – 32 Nebel S , Schneider S , Rey GD ( 2016 ) Mining learning and crafting scientific experiments : a literature review on the use of minecraft in education and research . J Educ Technol & Soc 19 ( 2 ) : 355 – 366 Nguyen J ( 2016 ) Minecraft and the building blocks of creative individuality . Configurations 24 ( 4 ) : 471 – 500 Nieborg DB , Van der Graaf S ( 2008 ) The mod industries ? the industrial logic of non - market game production . Eur J Cult Stud 11 ( 2 ) : 177 – 195 O’Brien C ( 2013 ) How Minecraft became one of the biggest video games in history . https : / / www . latimes . com / business / la - xpm - 2013 - sep - 03 - la - fi - tn - how - minecraft - video - games - 20130822 - story . html , ( last visited : July 11 , 2019 Pascarella L , Palomba F , Di Penta M , Bacchelli A ( 2018 ) How is video game development different from software development in open source ? In : 2018 IEEE / ACM 15th International Conference on Mining Software Repositories ( MSR ) , pp 392 – 402 Petrillo F , Pimenta M , Trindade F , Dietrich C ( 2008 ) Houston , we have a problem . . . a survey of actual problems in computer games development . In : Proceedings of the 2008 ACM symposium on Applied computing , pp 707 – 711 Petrillo F , Pimenta M , Trindade F , Dietrich C ( 2009 ) What went wrong ? a survey of problems in game development . Computers in Entertainment ( CIE ) 7 ( 1 ) : 1 – 22 Petrov A ( 2014 ) Using Minecraft in education : A qualitative study on benefits and challenges of Game - Based Education . Unpublished master’s thesis , University of Toronto , Ontario , Canada https : / / tspace . library . utoronto . ca / bitstream / 1807 / 67048 / 1 / Petrov Anton 201406 MT MTRP . pdf Phillips T ( 2018 ) The human cost of Red Dead Redemption 2 . https : / / www . eurogamer . net / articles / 2018 - 10 - 25 - the - human - cost - of - red - dead - redemption - 2 , ( last visited : March 12 , 2019 ) Politowski C , Fontoura L , Petrillo F , Gu´eh´eneuc YG ( 2016 ) Are the old days gone ? : A survey on actual software engineering processes in video game industry . In : In : 5th International Workshop on Games and Software , Engineering , ACM , pp 22 – 28 Poretski L , Arazy O ( 2017 ) Placing value on community co - creations : A study of a video game ‘modding’ community . In : ACM Conference on Computer Supported Cooperative Work and Social Computing , ACM , pp 480 – 491 Postigo H ( 2007 ) Of mods and modders : Chasing down the value of fan - based digital game modifications . Games and Culture 2 ( 4 ) : 300 – 313 Quiring T ( 2015 ) From voxel vistas : Place - making in minecraft . J Virtual Worlds Res 8 ( 1 ) Romano J , Kromrey JD , Coraggio J , Skowronek J , Devine L ( 2006 ) Exploring methods for evaluating group differences on the nsse and other surveys : Are the t - test and cohen’sd indices the most appropriate choices . In : Annual Meeting of the Southern Association for Institutional Research , Citeseer Ruiz A , Villa N ( 2008 ) Storms prediction : Logistic regression vs random forest for unbalanced data . arXiv : 08040650 Saito D , Takebayashi A , Yamaura T ( 2014 ) Minecraft - based preparatory training for software development project . In : 2014 IEEE International Professional Communication Conference ( IPCC ) . IEEE , pp 1 – 9 Scacchi W , Cooper KM ( 2015 ) Research challenges at the intersection of computer games and software engineering . In : Conference on Foundations of Digital Games Scott R ( 2007 ) . Nexus Mods . https : / / www . nexusmods . com / , ( last visited : August 30 2019 ) Empirical Software Engineering Shariat SF , Karakiewicz PI , Godoy G , Lerner SP ( 2009 ) Use of nomograms for predictions of outcome in patients with advanced bladder cancer . Ther Adv Urol 1 ( 1 ) : 13 – 26 Short D ( 2012 ) Teaching scientific concepts using a virtual world – Minecraft . Teac Sci J Aust Sc Teach Ass 58 ( 3 ) : 55 Shumovsky Y ( 2018 ) How much does it cost to make a video game ? . https : / / vironit . com / how - much - does - it - cost - to - make - a - video - game / , ( last visited : March 12 2019 ) Sifa R , Bauckhage C , Drachen A ( 2014 ) The playtime principle : Large - scale cross - games interest modeling . In : IEEE Conference on Computational Intelligence and Games , IEEE , pp 1 – 8 Siko J , Barbour M , Toker S ( 2011 ) Beyond Jeopardy and lectures : Using Microsoft PowerPoint as a game design tool to teach science . J Comput Math Sc Teach 30 ( 3 ) : 303 – 320 Stone BG , Mills KA , Saggers B ( 2019 ) Online multiplayer games for the social interactions of children with autism spectrum disorder : a resource for inclusive education . Int J Incl Educ 23 ( 2 ) : 209 – 228 Taba SES , Keivanloo I , Zou Y , Ng J , Ng T ( 2014 ) An exploratory study on the relation between user inter - face complexity and the perceived quality . In : International Conference on Web Engineering . Springer , Berlin , pp 370 – 379 Tantithamthavorn C , McIntosh S , Hassan AE , Matsumoto K ( 2016 ) An empirical comparison of model validation techniques for defect prediction models . IEEE Trans Softw Eng 43 ( 1 ) : 1 – 18 Targett S , Verlysdonk V , Hamilton HJ , Hepting D ( 2012 ) A study of user interface modifications in World of Warcraft . Game Studies 12 ( 2 ) Thongtanunam P , Hassan AE ( 2018 ) Review dynamics and its impact on software quality . IEEE Trans Softw Eng , pp 1 – 13 Tian Y , Nagappan M , Lo D , Hassan AE ( 2015 ) What are the characteristics of high - rated apps ? A case study on free Android applications . In : Software maintenance and evolution ( ICSME ) IEEE International Conference on , IEEE pp 301 – 310 Washburn MJr , Sathiyanarayanan P , Nagappan M , Zimmermann T , Bird C ( 2016 ) What went right and what went wrong : an analysis of 155 postmortems from game development . In : 38th International Conference on Software Engineering Companion , ACM , pp 280 – 289 Wilcoxon F ( 1945 ) Individual comparisons by ranking methods . Biometrics bulletin 1 ( 6 ) : 80 – 83 Wu HA ( 2016 ) Video game prosumers : Case study of a minecraft affinity space . Visual Arts Research 42 ( 1 ) : 22 – 37 Zhu J , Zhou M , Mockus A ( 2014 ) Patterns of folder use and project popularity : A case study of github repositories . In : Proceedings of the 8th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement , pp 1 – 4 Zorn C , Wingrave CA , Charbonneau E , LaViola JJ Jr ( 2013 ) Exploring Minecraft as a conduit for increa - sing interest in programming . In : FDG , International Conference on the Foundations of Digital Games , pp 352 – 359 Publisher’s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations . Daniel Lee holds an MSc in Computer Science from Queen’s University , Canada . His research interests include mining software repositories and empirical software engineering , specifically , in the intersection of software engineering and game mods . His research aims at providing a better understanding of Software Engineering aspects on mods and modding communities , to help game and mod developers produce higher quality games and mods , respectively . Contact him at dlee @ cs . queensu . ca . Empirical Software Engineering Gopi Krishnan Rajbahadur is currently a Ph . D . student in the Soft - ware Analysis and Intelligence Lab ( SAIL ) at Queen’s University , Canada . He received his BE in computer Science and Engineering from SKR Engineering college , Anna University , India . He also spent close to five years working as a data scientist in various software cor - porations in both India and Canada . His research interests include interpretable machine learning , mining software repositories , empir - ical software engineering and actionable software analaytics . More information at : http : / / gopikrishnanrajbahadur . me . Dayi Lin obtained his Ph . D . in Computer Science from the Software Analysis and Intelligence Lab ( SAIL ) at Queens University , Canada . His research interests include mining software repositories , empiri - cal software engineering , and game engineering . His research aims at using data science and machine learning to address challenges in the modern software development lifecycle . More information about Dayi is available on his website : http : / / lindayi . me . Mohammed Sayagh is a postdoctoral fellow in the Software Analysis and Intelligence Lab ( SAIL ) at Queen’s University . He obtained his Ph . D . from the Lab on Maintenance , Construction , and Intelligence of Software ( MCIS ) in Ecole Polytechnique Montreal ( Canada ) . His research interests include multi - component and multi - layer software systems , software configuration engineering , as well as source code analysis . More details about his work are available on “http : / / sailhome . cs . queensu . ca / msayagh” . Empirical Software Engineering Cor - Paul Bezemer is an assistant professor in the Electrical and Computer Engineering department at the University of Alberta . He heads the Analytics of Software , GAmes And Repository Data ( ASGAARD ) lab . Before that , he was a postdoctoral research fel - low in the Software Analysis and Intelligence Lab ( SAIL ) at Queen’s University in Kingston , Canada . His research interests cover a wide variety of software engineering and performance engineering - related topics . His work has been published at premier software engineer - ing venues such as the TSE and EMSE journals and the ESEC - FSE , ICSME and ICPE conferences . He is one of the vice - chairs of the SPEC research group on DevOps Performance . Before moving to Canada , he studied at Delft University of Technology in the Nether - lands , where he received his BSc ( 2007 ) , MSc ( 2009 ) and PhD ( 2014 ) degree in Computer Science . For more information about Cor - Paul and the ASGAARD lab see : http : / / asgaard . ece . ualberta . ca / Ahmed E . Hassan is an IEEE Fellow , an ACM SIGSOFT Influen - tial Educator , an NSERC Steacie Fellow , the Canada Research Chair ( CRC ) in Software Analytics , and the NSERC / BlackBerry Software Engineering Chair at the School of Computing at Queen’s University , Canada . His research interests include mining software repositories , empirical software engineering , load testing , and log mining . He received a PhD in Computer Science from the University of Water - loo . He spearheaded the creation of the Mining Software Repositories ( MSR ) conference and its research community . He also serves / d on the editorial boards of IEEE Transactions on Software Engineer - ing , Springer Journal of Empirical Software Engineering , and PeerJ Computer Science . More information at : http : / / sail . cs . queensu . ca / Empirical Software Engineering Aﬃliations Daniel Lee 1 · Gopi Krishnan Rajbahadur 1 · Dayi Lin 1 · Mohammed Sayagh 1 · Cor - Paul Bezemer 2 · Ahmed E . Hassan 1 Daniel Lee dlee @ cs . queensu . ca Dayi Lin dayi . lin @ cs . queensu . ca Mohammed Sayagh msayagh @ cs . queensu . ca Cor - Paul Bezemer bezemer @ ualberta . ca Ahmed E . Hasan ahmed @ cs . queensu . ca 1 Software Analysis and Intelligence Lab ( SAIL ) , Queen’s University Kingston , Kingston ON , Canada 2 Analytics of Software , Games and Repository Data ( ASGAARD ) Lab , University of Alberta Edmonton , Edmonton AB , Canada