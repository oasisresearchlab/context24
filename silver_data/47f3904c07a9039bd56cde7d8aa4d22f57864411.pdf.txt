Hypermedia Support for Collaboration in Requirements ; Analysis Kenji Takahashi ' , Colin Potts ? , Vinay Kurnd , Kenji Ota ' , and Jeffrey Dl . Smith ' ' " IT Software Laboratories , Nippon Telegraph and Telephone Corpoiration { kt , ota , sumisu ) @ nttlabs . com 2 College of Cornlputing , Georgia Institute of Technology potts @ cc . ga . tech . edu 3M / Cast Communications , Inc . vinay @ mborie . com Abstract We describe a model and system to support coltlabaration in requirements analysis with hypermedia technologies . The hypennedia support approaches the issues in communication , agreement , and traceability management , which are critical in the early phase in r e q i " t s analysis . Our approach consists of ( I ) an extemion of the Inquiry Cycle model , a cyclic model of requirements analysis , for the collaborative work , and ( 2 ) comprehensive interaction media thuthlly utilizes W W W ( World Wide Web ) and Intemet technologies . In this paper , we review the lessons leamt ji - om experiences in applying the Inquiry Cycle model and Tuiqiao , a hypertext tool based on the model , to collaborative work in requirements analysis of a telephone directory service . We then propose an extension of the model and d , iscuss the design of EColabor , a networked hypermedia s . ystem for requirements analysis . EColabor is based on the extended Inquiry Cycle model and implemented with the web ad Internet technologies , including distributed version control and audiolvideo conferencing . 1 . Introduction Recently , several field studies and experimlents have been conducted to investigate work practice anid problems in requirements analysis [ 7 ] , [ 12 ] , [ 18 ] , [ 28 : 1 . Results from these efforts commonly emphasize the importance of three activities : communication , agreement , ad traceability management . However these activities are often done inefficiently and are poorly supported . In response to these problems , we have developed the Inquiry Cycle model [ 20 ] , [ 22 ] , a cyclic ! model of requirements analysis , and a single - user support tool , ' Tuiqiac [ 27 ] , based on the model . The model and tool have been applied to several projects [ lo ] , [ 22 ] , 1231 . In a previous paper , we describe our experience in using both in various types of collaboration in the requirements analysis of an Internet telephone directory service [ 23 ] . Our results reveal limitations in applying our method eo cooperative situations and suggest some refinements : First , requirements analysis requires several styles of collaboration - from collaborative and synchronous to individual and asynchronous . Second , many decisions are postponed until the requirements are documented . These postponed decisions must not be forgotten , and categorized by the reasons for their postponement and the actions iquired of designers later . Finally , collaborative discussions have a more flexible structure and wider range of expression than those provided in the Inquiry Cycle model . Examples include new insights irrelevant to the " official " topic and transitory information expressed in spoken words or as informal sketches on a whiteboard . In this paper , we discuss our refmed approach to supporting collaborative work in requirements analysis with hypermedia technology . Hypermedia technology can play an important role in helping a team keep track of various kinds of informal information that they generate and refer to ( such as records of discussions , decisions made , agreements , and changes ) . First , we review the Inquiry Cycle model and the lessonis learnt from applying it to re , d requirements projects . Next , we introduce our refinements to the model that are aimed at better support for collaboration through shared h y p m d a documentation . We then describe EColabor , a group tool which is based on the refmed model and which uses Internet and WWW ( World Wide VVeb ) technology for its 0 - 8186 - 7252 - 8196 $ 5 . 00 0 1996 IEEE Proceedings of ICRE ' 96 31 implementation . We close by discussing the status of EColabor and our plans . 2 . Inquiry Cycle The Inquiry Cycle is a cyclic model for requirements analysis , which consists of three activities ( Figure 1 ) : ( a ) Exjv - ession is the proposing or preparing of requirements - related information , including not only requirements documents , but also domain - specific information , scenarios , and enterprise goals . ( b ) Discussion includes discussing requirements in formal meetings and circulating of comments and individual annotation of requirements . ( c ) Commitment includes making decisions based on the discussions , such as change requests , agreements about terminology , and commitments to seek missing information . These three activities repeat under the control of a strategy eo refine requirements until they become deliverable . Figure 1 . The Inquiry Cycle ( The number and nature of the stages are controlled by the strategy ) The Inqulry Cycle is a generic model and can be instantiated to adapt to a specific organization , project , or purpose . Requirements analysis methods , such as scenario analysis and goal - based analysis may be used during the three activities [ 22 ] , [ 24 ] . For example , in developing the telephone directory system we instantiated the Inquiry Cycle with natural language text and the system’s goal hierarchy for expression , a speech act theory [ 25 ] that is similar to but simpler than IBIS ( Issue Based Information System ) [ 15 ] for discussion , and the goal - based analysis method for strategy . The Inquiry Cycle is an artifact - based model , which has two major advantages for collaborative work ( 1 ) it makes changes traceable , and ( 2 ) it helps “participants1” in requirements sessions share awareness by making the artifact being discussed visible and explicit . “Awareness” is vital for effective collaborative work . For example , participants sometimes fail to understand what someone is talking about in a teleconference because they do not know what the speaker is looking at while speaking . Such problems rarely happen in face - to - face meetings because people know how to maintain awareness of focus . Tuiqiao is a single - user hypertext tool for requirements analysis based on an instantiation of the Inquiry Cycle model [ 27 ] . It allows users to keep track of textual requirements and their related information by linking them in a non - linear manner . The instantiation of the hquiry Cycle model consists of textual descriptions and scenarios for expression , a simple speech act model that has only three categories ( questions , answers , and reasons ) for discussion , informal consensus leading to typed hypertext editing operations for commitment , and the scenario analysis method for strategy . There are three possible views of the Inqulry Cycle model dependmg on how it is expected to contribute to requirements analysis ; as a rhetoric for explaining one’s ideas and persuading others it contributes to effective communication and agreement ; as a representation method of requirements analysis history it contributes to traceability : and as a process model it coordinates and guides participants toward an agreed specification . 3 . Lessons learnt Here we summarize our experiences in applying the Inquiry Cycle model with Tuiqiao to the development of an Intemet - based telephone directory service , called JTD [ 23 ] . Tuiqiao is basically a single - user tool , but if used in To avoid narrowing our discussion here too much , we use the neutral word “participant” for one who participates in a requirements analysis , such as analysts and customers . 32 Cogent , an advanced electronic meeting room [ 16 ] , it enables Tuiqiao and other single - user tools to belhave as a collaborative tool . In the Cogent room , every participant has herhis own display and project herhis scmzn image to others . All the participants can thus share the same view of Tuiqiao - one of them just operates ‘Tuiqiao on herhis display and projects the display image to the others . In the project , three sub - teams , who weire located in different places ( two in Tokyo and one in California ) , participated . They worked in various styles - synchronous collaboration with and without Cogent and Tuiqiao , asynchronous collaboration via e - mail , and individual work with Tuiqiao or an outline processor . Tuiqiao is based on the instantiation of the Inquiry Cycle which assumes that ( 1 ) requirements documents to be discussed already exist before a requirements session , and ( 2 ) all the discussions correspond exactly to specific parts of the requirements drafts . Our experileince with Tuiqiao , however , reveals limitations of these assumptions in a collaborative setting [ 23 ] . For example , the subjects of discussions ( artifacts ) are created during the session as sketches on a whiteboard rather than prepared beforehand . Ongoing discussions include questions about questions , questions about answers , and so on . In addition , some discussions concem the entire target system , and completely new ideas are sometimes generated during such discussions . This made it diifficult to determine which parts of the requirements these discussions should be linked to . “Volatile” information was also important but could not handled well by the current model and tools . Such information included a function list written on a whiteboard during a brain - storming session , wl ; lich was the first requirements draft , and spoken words about design sketches of user interface drawn in a participant’s notebook . Although this information rapidly evolved during discussions and was difficult to keep track of , it was a major driving force in the face - to - face meetings and contributed to the requirements documents . ‘We need a mechanism to facilitate smooth transition from unstructured , volatile information to structured , solid documents . Categorizing the status of discussions helped us manage requirements analysis process , because it suggested what actions to take next . For example , questions that required input from the customers ( if recognizedas being of this type ) helped us to prepare for interviews with customers . This answers the common criticism of design trackmg tools that they are not designed for the benefit of the people who actually use them ( e . g . , analysts ) but for other peclplle ( e . g . , maintainers ) in the later development phases [ 411 , [ 9 ] . Many work styles and tools were used during the rquirements analysis . Our work styles swted from s ynchroinous collaboration to asynchronous and individual work as we progressed . Also ow focus shifted from expression and discussion to commitment . For example , at first we regularly met and discussed a requirements draft , using Tiiiqiao in the Cogent room . One participant then revised the document and distributed1 it to the others . We then discussed the document using e - mail . We could not easily mlove the results of one work style to another whde maintaining traceability . We need a framework to integrate existing tools for synchronous , asynchronous and individual work . 41 . Hypermedia approach We now describe an instantiation of the Inquiry Cycle model that seamlessly supports any combination of s , ynchronous / asynchronous and distributdcollocated collaboration . Our instantiation ( 1 ) handles multimedia information , such as diagrams and video / audio records as well as text , ( 2 ) represents the requirements analysis more flexibly . , including the status of the information , and ( 3 ) introduces a “reminder” type of discussion element that capture , general and new ideas . Multimedia information captures artifacts in the process of creation during discussions while audio / video recording reduces the need to take notes . 4 , . 1 Requirements elaboration strategy As the strategy for the instantiation , we use “goal - based analysis” [ l ] , [ 2 ] and “scenario analysis” [ 22 ] , [ 24 ] . These are used to determine or elicit requirements and are orthogonal to the conventional methodologies , such as CIOA / D and SA / SD , andl can be adapted prior to these methodologies to gather informal information that will be slpecifiecl as requirements . Although goal based analysis and sceniario analysis can be systematized and the resulting methods learned like any other , elsewhere we show that analysts use both strategies naturalby [ 28 ] . 4 , 2 Expression of requirements Requirements are expressed in terms of requirements documents , goal hierarchies , scenarios , and exhibits . Requirements document : Requirements documents consist of two types of elements : textual descriptions and diagrams . Text descriptions are requirements written in natural language . Diagrams in requirements documents typically have formal semantics , such as entity - relation 33 diagrams and dataflow diagrams , but informal illustrations can also be included . Goal hierarchy : The goal hierarchy represents what is to be achieved by the target system . In the hierarchy , goals are achieved by achieving subgoals . The god - based analysis method identifies goals and their subgoals until they are specific enough to be operationalized . For example , a goal of the telephone directory service ( JTD ) is “statistics on customers’ access to system known by subscribers” €231 . Scenario : pt‘scenario is one or more ( usually several ) end - to - end transactions involving the reqwred system and its environment . There are three kinds of scenarios : generic scenarios , specialized scenarios , and episodes . A generic scenario is a sequence of actions , each consisting of three components : a description , participating object classes , and services involved in the action . A generic scenario can be specialized into several specialized scenarios , each of which corresponds to a uferent situation . Each element of a generic scenario is accordingly specialized into a demled description , a see of objects , or a set of services . Episodes are the building blocks of generic scenarios . Episodes are ‘phases’ of activity and are therefore scenario fragments . Each episode illustrate the achievement or obstruction of a goal . For example , an episode for the goal of JTD above is “consumers’ access to JTD established” . Exhibit : Exhibits capture the “volatile” ideas generated during collaboration . Exhibits include spoken comments and sketches drawn on whiteboards . Eventually , useful exhibits are transcribed and incorporated into the requirements documents . Exhibits are expressed in four ~ f e r e n t types of media . audio , video , sketches , and text . Audio and video capture ideas and the process of their being presented . Written ideas are represented in sketches and text . All pieces of such information are synchronized and interconnected . For example , consider a sequence of actions in which participants draw , discuss , and modify a sketch . An audiohide0 record of the discussion links the original to the modified sketch so that the sequence can be easily traced . Sometimes no requirements document is available , particularly at initial meetings . These sessions produce a requirements expression that consists only of exhibits . Such exhibits , for example , include a wish list of system functions written on a whiteboard in a brain storming session . Version : A version of the expression represents requirements agreed upon at a certain point . An expression consists of requirements documents , exhibits , goals , and scenarios . The overall expression and each element of the document have different and independent versioning schemes . This distinction between versioning schemes of entire documents and their elements allows us : ( 1 ) to work on specific elements in parallel while maintaining consistency , and ( 2 ) to create a new requirements document for a variant system by using elements of any versions as building blocks . For example , imagine version 1 of an expression ( EX - 1 ) consisting of two paragraphs of a requirements document ( P1 - 1 and P2 - 1 ) and a description of the goal hierarchy ( GH - 1 ) . After a discussion of EX - I , PI - 1 is revised to P1 - 2 . Then , the participants decide to make version 2 ( EX - 2 ) of the expression from P1 - 2 , P2 - I , and GH - 1 . They also produce a variant ( PI - al ) , that is , version 1 of variant ‘a’ ( called version ‘al’ ) of P1 - 1 , and defme version ‘al’ ( EX - al ) , which consists of Pla - 1 , P1 - 2 , and GH - 1 . The transitions between these versions are illustrated in Figure 2 . Figure 2 . Transitions between versions of a requirements expression Interrelationships within expressions : The elements of a version of an expression are interrelated by three types of relationships : “previoushext” , “subsumes” , and “related to” . The “previous / next” and “subsumes” relationships are used to represent the expression in a linear way like a printed document : “previous” and “next” determine the sequence of the expression , and “subsumes” 34 defines which element includes others . For example , an element of the expression that corresponds to ii chapter subsumes other elements that correspond to sections . “Related to” links related elements of the expression - for example , an element and its references . There are also “old / new” relationships between old and new versions of elements of the expression . Such relationships can be established between versions of the expression . 4 . 3 Discussion of requirements Discussions are represented by two types of‘ elements : inquiries and reminders . Inquiry elements ( questions , answers , and reasons ) form the main thread of a discussion . These elements are essential and fixed in this Inquiry Cycle instantiation . Reminders are elements to capture “free floating” discussions , which are not dllrectly related to a particular part of the expression . These two types of elements can be specialized andor decomposed further according to a specific decision - making policy or procedure that participants follow . For example , some participants apply a more formal policy that specifies and manages the deadline for each task . They need to further categorize the reminder type , such as scheduling and responsibility assignment , to keep track of the deadlines . Inquiry elements : The three types of inquiry elements ( questions , answers and reasons ) are interconnected ad each one has a status ( e . g . , resolved or unresolved ) . Interrelationships between inquiry elements : In the instantiation of the Inquiry Cycle model for the single user tool , Tuiqiao , only the requirements cm be the subject of a discussion . However , in the collaborative work instantiation , any element of the hypermedia record , including exhibits , inquiry elements , and even change requests ( see “Commitment” below ) , can be the subject of a discussion , so the elements can be : flexibly interconnected . For example , questions are interconnected for various reasons : Dependency : Some questions cannot be answered until other questions have been answered . ClariJication : Questions may be asked to CliiUify the meaning of other questions . This usually happens in asynchronous sessions . In synchronous sessioins , these issues are immediately resolved within the sessioin , so the clarification questions do not need to be recordedl . Decomposition : When a question covers a widle scope , analysts decompose it into several sub - questions . The original question often cannot be answered until all the sub - questions have been answered . Status of inquiry elements : Inquiry elements can be resokd or unresolved . This categorization indicates the progress of the analysis process and helps us track responsibilities . We finther break down unresolved element , according to the reasons they remain unresolved . Doing so helps us know what actions to take to resolve them ( Table 1 ) . We have identified five reasons for unresolved discussion elements ; : deferred until implementation 0 waiting for customer input needing additional work ( such as a technical feasibility study , imarket research , performance analysis ) e depending on others ( i . e . the resolution of other elements ) , and other ( e . g . , pending discussion ) For example , an analyst raises a question , “What kind of statistical information should be recor & d ? ’ - Other analysts respond to the questions with two alternative answers : ( 1 ) “All information should be recwded to the smallest & tail ( e . g . , number of accesses by a speci $ c consumer ) to be used ! or mketing” and ( 2 ) “Only informalSon necessary to detect excessive accesses , which may indicate illegal copying the entire database , should be recorded’’ . Then they set the statuis of these answers to ‘‘ . waiting , for customer input” and decide to ask their customer about her / his opinion on tlhe answers . Table 1 . Status and actions to take L “tatus values I Actions to take I consideration . I lWaitinl : for customer input agenda for the next session with the compile the elements as the interview I I 1 additio & l work1 work , and address the elements based I on the results have been resolved and then address these notes based on those resolutions prioritize and schedule the elements . These elements may turn out to be of R , eminder : Some elements cannot be related directly to a specific element of the requirements expression . We call it “reminder” . The reminder type is a “parts bin” of useful ideas [ 6 ] ) , including : - implementation directives or warnings , and 35 - project management reminders , such as assigning responsibilities , checking the status of projects , al scheduling . 4 . 4 Commitment There are six types of commitments : refinement , clarification , retraction , merge , split , and transcription . Rejnement results in more complex structural alternatives : one or more requirements are derived from the refined requirement . CZariJcatiun results in the rewording of one or more requirements . Retraction deletes a requirement . Merging generates a new requirement from several requirements . Splitting generates several requirements from one requirement . Transcription transcribes and incorporates informal exhibits into a new version of an expression . These commitments are shown in Figure 3 . Refinement Merge Rq . 2 Clarification Rq . 3 Retraction Transcription Figure 3 . Types of commitment 5 . EColabor : A hypermedia system for requirements analysis EColabor is an active hypermedia system for collaboration in requirements analysis based on the Inquiry Cycle model described in Section 4 . EColabor manages as networked hypermedia the pieces of information generated and r e f e r r e d to during requirements analysis - such as requirements documents , video records of discussions about the documents , and change histones . For better communication and faster agreement , it transmits the information in various media and modes , including audiohide0 conferencing . For ensured traceability , it keeps track of the evolving requirements documents along with the informal background information . For efficient coordination , it monitors and navigates the requirements analysis process , including sending notifications at particular events . We decided to implement EColabor using Internet and WWW technologies , because their interoperability and large user populations of these technologies potentially solve the “incompatibility” and “critical mass” problems that are common to collaborative tools [ 19 ] . 5 . 1 Architecture EColabor has a client - server archtecture that provides participants , even if distributed or working asynchronously , with transparent access to the EColabor hypermedia information [ 26 ] . The client - sewer architecture also allows each participant to shift seamlessly between herhis private working space and the shared public working space for a requirements analysis project with well - maintained integrity and well - protected privacy . The architecture of EColabor is shown in Figure 4 . server 4i - J I I 4 Figure 4 . Client - server architecture of EColabor The EColabor hypermedia information is stored and maintained in a public OODB ( object - oriented database ) . Participants access this public database through cache servers and some data is cached in their private databases . Participants can store private documents and notes in their private databases . They can also check out the public data to the private databases and check in revisions . The central server is responsible for managing the public 36 database , including access control and version control . Tuiqiao clients communicate with vidleo / audio conferencing tools , shared whiteboards , and other clients . They also handle interactions with users . Other clients , such as e - mail clients , can be connected to the Tuiqiao clients via an API ( application programmer’s interface ) . Let’s consider two examples to see how this architecture works : 1 ) Distributed participants can have a synchronous requirements meeting by using vidm / audio cordkrencing , Tuiqiao clients and shared whiteboards via LNVWAN . The Tuiqiao client’s connections with the teleconferencing tools and the shared whiteboards enable the video / audio streams and the images on the whiteboards to be mrded , indexed , and linked to relevant elements of the EColabor hypermedia information during the meetings . ( 2 ) Asynchronous participants can also access elements of the information to review records of discussions iibout it , replay video segments related to it , and so on . If the participants have comments on the element , they can submit the comments to the public database vial e - mail . The participants can also make changes to parts of requirements documents in parallel and then submit them into the public database by explicitly checking them in or out . Basic mechanisms include : ( 1 ) assigning an URL to each element of the hypermedia information stored in the OODB , ( 2 ) extending H l T P ( hypertext transfer protocol : ) to handle check in / out of versions of documents and using the extension for communications between the Tuiqiao clients and the servers , ( 3 ) sharing the information handled by Tuiqiao clients and the views of the clients by duplicating HTTP requests , and ( 4 ) multicasting the audiohidm streams via MBme [ 14 ] for audiohide0 conferencing . 5 . 2 Communication support EColabor provides the following communication - multi - point audiohideo conferencing - semi - structured e - mail - shared electronic whiteboard - application sharing A suite of multimedia communication too1 . s [ 13 ] is available to users both on the desktop computers in their offices as well as in Cogent . The suite includes a multimedia conferencing tool ( “phone ) , multimedia mail authoring tool ( storyboard ) , a sharable web browser ( sharedMosaic ) , and a sharable electronic whiteboard ( wb ) . Cogent allows participants to seamlessly manewer views between private and public spaces via elecfronic and support : uaditional presentation tools . Streams of the audiohide0 conferencing are automatically segmented and captured by note - taking functions ( see 5 . 3 Traceability support ) . Semi - structured e - mail is used in asynchronous sessions . The e - mail messages are categorized into four itypes , each corresponding to a different inquiry element type : question , answer , reason , or commitment . The messages can be represented in text , pictures , audio andor video . ’We use Storyboard , a MIME ( multiple internet mail extensions ) [ 3 ] multimedia e - mail tool [ 13 ] , to compose , send , receive , and replay such multimeida messages in a WYSIWYG manner . EColabor then puts ithe messages into the appropriate places in the hypermedia informatiion according to the senders’ prescription in the messages . ( 5 . 3 Traceability support EColaibor lets participants keep track of evolving , process d the requirements documents in multimedia . According to the Inquiry Cycle model , pieces of the ( documents , questions , answers , reasons , and commitments are recorded in multimedia and interconnected . / Selection triggered segmentation of raudioivideo record : EColabor colntinuously records an entire session in audiohidm and provides support for : segmenting the records on the fly , using the “selection itriggered segmentation” method similar to Synthesis , a video - based collaborative writing tool 1211 . The method asks participants to select the elements of the EColabor hypermedia information that they are rdiscussing as specifically as possible on their computer rdisplays . These selections are used to let the other ] participants and EColabor itself k” what is currently lbeing discussed . This ensures that “awareness” is be ishared among the participi”ts and also enables EColabor to segment the audiohide0 m r d s iind link them to the itdated pieces of the information . Triggered by the selectionls , EColabor segments and records the audio / video streams , and links the segments to the selected pieces ( that is , the ones being discussed ) . Newly created elements are selected by default . For example , EColabor attaches a ‘“beginning” tag to the current point of the video / audio stream when a participant selects and starts discussing a ] paragraph of the requirernents document in the public : space , and attaches an “end” tag to the current point when ithe participant selects anotlher paragcaph . The audiohidm : segments ; may overlap . Afterward , participants can replay rmly a segment relevant to a specific element of the Ihjqxrmedia information . The ] participants can also explicitly segment the i3udiO / vidm streams and label the segments . They 37 segment and label a topic being discussed in a synchronous session . The labeled topic is a temporal record - it is not categorized according to the Inquiry Cycle model because it may contain several types of the elements . After the session , the participants should transcribe appropriate element types from the audioivideo record of the to @ , EColabor supports taking snapshots of sketches and text on the shxed whiteboards . Segmentation of the audiohide0 records is triggered when a snapshot is taken on the assumption that participants come to an agreement at that point . The audiohide0 segment between the current and previous snapshots explains how and why the current one is produced , and thus is linked to the current one . The elements being selected during this period are linked to both the segment and the snapshots . ~ ~ 3 5 . 4 Coordination support Jeff ( rw ) whenever Qta ( rw ) to d l when Kenji Kenji ( rw ) Send Rq7 ( Kenji ) checked out Status management : EColabor identifies and reports the status of the requirements andysis process . EColabor allows users to define vdues of the status of the discussion elements of the hypermedia information and to set any of the values ( see Status in 4 . 3 Discussion of Requirements ) . To display status , ECoiabor uses styles and colors in the Tuiqiao client and provides functions for status retrieval . A listing of the current status can be produced at any time . More importantly , EColabor can keep progress visible and prompts for or executes required actions . Participants can specify these actions - what to do and when ( for example , sending a customer an e - mail message asking a question when its status is set to “waiting for customers input” ) . Version control : EColabor lets participants conrrol access to the working version , and define a new version . It manages the status of discussions over revision . We use the “baseline” approach to version control , in which an official baseline version is shared by all participants . Each element can be checked out , modified , and then checked in to be included in a new baseline version . A variant of the baseline can be created for another project to develop a variant system . Check - in and check - out processes may be done in parallel , and thus several participants can be working on the same expression simultaneously . When checked in , each element is uniquely and automatically named as a new version by the central server . The access right to red andlor write an element can be & fmed and is managed by the central server . When all participants have finshed editing , they define a new baseline version of the expression and check in it to the central database . The expression version is also uniquely and automatically numbered by the central server . The status of elements of the baseline version is recorded and maintained in a version control table , which is managed by the central server . The version control table consists of the following columns : - Requiremenfs indicates elements of the requirements document . - Who is working on monitors who is working on each element . - Permission controls who has r d w r i t e right to each element . - Action specifies what should be done and when . - Cwrent working variant keeps track of working variant of each element that is latest but not checked in as an element of the baseline version . For example , in Table 2 , three participants , Jeff , Ota , and Kenji , are involved in a concurrent editing session . They are independently working on a requirements expression , which consists of Rql , Rq2 , and Rq3 . Jeff has checked out Rql and checked in Rq4 as a new version of Rql . Kenji has also checked out Rql , split it into two Rq5 and Rq6 , and checked them in as variants of Rql . Rq3 has also been checked out and changed into a new version , Rq7 , by Kenji . According to the “Action” fields , a mail message is sent to all participants when Rql is checked in and when Rq3 is checked out . Rql can be read and edited by all the three participants , Rq2 by Jeff and Qta , and Rq3 by Qta and Kenji . Table 2 . An example of version control table Current Whois Permis - Reqts . woipg sion Action working variant The participants can even go back to an earlier version and produce a variant that branches at a certain point in the discussions on the version . For example , a variant is prcduced by selecting another alternative answer that was not taken as follows ( Figure 5 ) . Version 1 of requirements document , which consists of three elements ( Rql , Rq2 , and Rq3 ) , is being analyzed . The first , Rql is challenged by a question ( Ql ) , two alternative answers ( AI and A2 ) 38 are answered to Q1 ( a question ( 42 ) is also raised but not answered ) . Next , A1 is selected and a change nec [ uesc ( Cl ) is suggested based on AI . Then according to C1 , Rql is changed into Rql’ . Finally the version 2 of the document , which consists of Rql’ , Rq2 , and Rq3 , is clefmed . Afterwards , someone traces back through this analysis process , select the other answer ( A2 ) and tlhinks of a change request ( C2 ) . According to C2 , Rql is changed into Rqla . Then s / he defines a variant of the document , which consists of Rqla , Rq2 , and Rq3 . Some discussions and commitments remain postponed even after a new version has been created . EColabor manages the status of the requirements analysis process over versions and displays the status accordingly . In the example above , because Q1 is resolved in the process of revising version 1 into the version 2 , Q1 sholuld not be displayed along with the version 2 . 42 , however , should be displayed because it still remains open ( Figure 5 ) . Figure 5 . Variant of documentatiion Based on the version control table , EColabor provides the following four functions for controlling versions : Access right management lets participants set tlhe : vdue of the “Permission” column of the version control table in order to qualify or disqualify a participant to read or edit an element of the expression . Status monitoring monitors and m r d s who is working on which element in the “Who is working on” column of the table . Coordinarion helps participants coordinate theiu editing processes based on the scripts in the “Action” column . For example , a participant prepares a script that sends a notification to participants who are concurrentlly editing the same element of an expression when any modification is made to that element to avoid inconsistency in their editing results . Merging support composes a suggested versicln of the current working variants upon participants’ requests based on the “Current working variant” column . For example , based on Table 2 , EColabor suggests a new version , which consists of Rq4 ( or Rq5 and Rq6 ) , Rq2 , and Rq7 . 5 . 5 Sta . tus EColabor is being implemented in three globally distributed sites ( Tokyo , Palo Alto , and Atlanta ) . Most of the components of EColabor , including the Tuiqiao client and multimedia communication tools , exist . Our development efforts are focused on the server that integrates the components . We atie applying the Inquiry Cycle and the prototype to our own development process . We use a research network environment , PEARnet ( Pacific East Asia Research Network ) , to communicate and collaborate [ 141 . PEARnet provides connections with variable bandwidths ( 1 . 5M - 3 Mbps ) , but from our experience only 128 - 256 Kbps lbandwidth is generally sufficient for productive one - to - one audiohideo conferences , which is one of the most bandwidth demanding applications . 6 . Discussion Several researches have addrased communication , agreement , and traceability during requirements analysis . None of them , however , have mtegrated these three subjects . For communication and agreement , single user tools ( e . g . , gIBIS 151 ) exist as well as collaborative tools ( e . g . , S [ BYL 1171 ) . These tools , lhowever , do not relate the supported communications to tlhe artifacts which they inre about and contribute to . Therefore they fail to ensure the tracebility . On the other hand , tools for traceability management do not sufficiently suppoirt commuinication and agreement in requirements analysis [ 81 . To rnanage documents and programs , many configuration management systems have been developed and practically used . Because these systems assume that the documents have a certain structure andlor are being produced following a certain proceduire [ Ill , it is difficult for the systems to support the early phase of the requirements analysis process that involves intensive interactions among the participants and rapid changes of the infonnal and unstructured documents . The parts of our approach are not new . Rather our focus is on : ( 1 ) a comprehensive model to integrate these parts for seamlessly supporting collaboration in requirements analysis , and ( 2 ) hypermedia technologies that implement the integration by fully utilizing the Internet” . Fume work includes full implementation of EColabor , field studies in global collaboration with EColabor , and incorporation of EColabor into a collaboration environment ( e . g . , Cogent ) . In the field studies , we will assess feasibility of our approach , such as trade - off between effectiveness and cost , baridwidth or media type . 39 We will also promote the standardization of the extension of HTTP and other related specifications for collaborative work via the web . References [ l ] Anton , A . I . , W . M . McCracken , and C . Potts , “Goal Decomposition and Scenario Analysis in Business Process Engineering” , Roc . 6th Int . Conf . Advanced Information Systems Engineering , pp . 94 - 104 , 1994 . [ 2 ] Anton , A . I . , “Goal - Based Requirements Analysis” , Proc . ICRE96 , to appear . [ 3 ] Borenstein , N . , “MIME ( Multiple Intemet Mail Extensions ) Part One : Mechanism for Specifiig and Describing the Format of Intemet Message Bodies” , Internet Network Working Group Request for Comments , RFC - 125 1 , 1993 . [ 4 ] Burgess - Yakemovic , K . C . and J . Conklin , “Report on a Development Project Use of an Issue - Based Information System” , Proc . ACM 1990 Conf . Computer - Supported Cooperative Work ( CSCW’90 ) , pp . 105 - 1 18 , 1990 . [ 5 ] Conklin , J . and M . Begeman , “gIBIS : A Tool for all Reasons” , J . Am . Soc . Inf . Sci . , May 1989 , pp . 200 - 213 . [ 6 ] Constantine , E . , “Work Organization : Paradigms for Project Management and Organization” , Comm . ACM , Vol . 36 , No . 10 , pp . 34 - 43 , 1993 . [ 7 ] Curtis , B . , H . Krasner and N . Iscoe , “A Field Study of the Software Design Process for Large Teams” , Comm . ACM , Vol . 31 , No . 11 , pp . 1268 - 1287 , 1988 . [ 8 ] Gotel , 0 . C . Z and C . W . Finkelstein , “An Analysis of the Requirements Traceability Problem” , Proc . Int . Conf . Requirements Eng . , pp . 94 - 101 , 1994 . [ 9 ] Grudin , J . , “Why CSCW applications fail : Problems in the design and evaluation of organizational interfaces” , Proc . CSCW‘88 , pp . 85 - 93 , 1988 . [ lo ] Higuchi , M . and K . Takahashi , “World Wide Collaborative Writing : A Case Study” , Proc . Conf . on Asian - Pacific World Wide Web , pp . 171 - 177 , 1995 . [ Ill Humphrey , W . S . , Managing the Software Process , Addison Wesley Publishing , 1989 [ 12 ] Kaiya , H . and M . Saeki , “A Supporting Tool for Face - to - face Meetings to Develop Software Specifications” ( in Japanese ) , EICE Technical Report , KBSE93 - 13 , pp . 9 - 16 , 1993 . [ 13 ] Kumar , V . and J . Glicksman , “A SHAREd Web To Support Design Teams” , Proc . IEEE Third Workshops on Enabling Technologies : Infrastructure for Collaborative Enterprises , pp . 178 - 182 , 1994 . [ 14 ] Kumar , V . , Mbone : interactive Multimedia on the internet , New Riders Publishing , Indianapolis , IN , 1995 [ 15 ] Kunz , W . and H . Rittel , “Issues as Elements of Information Systems” , Working Paper 131 , Inst . Urban and Regional Development , Univ . Califomia at Berkeley , 1970 . [ 16 ] Kuwana , E . , E . Yana , Y . Sakamoto , Y . Nakamura , and K . Horikawa “Computer - Supported Meeting Environment for Collaborative Software Development” , Information and Sofnyare Technology , Butterworth Hinemann UK , to appear . [ 17 ] Lee , J . , “SIBYL : A Tool for Managing Group Design” , [ 18 ] Lubars , M . , C . Potts , and C . Richter , “A Review of the State of Practice in Requirements Modeling” , Proc . RE’93 , pp . 2 - 14 , 1993 . [ 19 ] Markus , M . L . and T . Connolly , “Why CSCW applications fail : Problem in the adaption of interdependent work tools” , Proc . CSCW’90 , pp . 371 - 380 , 1990 . [ 20 ] Potts , C . and K . Takahashi , “An Active Hypertext for System requirements” , Proc . 7th Int . Workshop on Software Specification and Design , pp . 62 - 68 , 1993 . [ 21 ] Potts , C . , 9 . D . Bolter , and A . Badre , “Collaborative Pre - Writing with a Video - Based Group Working Memory , Graphics Visualization and Usability Center Technical Report 93 - 35 , Georgia Institute of Technology , 1993 . [ 22 ] Potts , C . , K . Takahashi and A . I . Anton , “Inquiry - based Scenario Analysis of System Requirements” , IEEE Software , Vol . 11 , No . 2 , pp . 21 - 32 , 1994 . [ 23 ] Potts , C . , K . Takahashi , J . D . Smith , and K . Ota , “An Evaluation of Inquiry - Based Requirements Analysis for an Intemet Service” , Proc . RE‘95 , pp . 172 - 180 , 1995 . [ 24 ] Potts , C . , “Using Schematic Scenarios to Understand User Needs” , Proc . Symposim on Designing Interactive Systems ( DIS’95 ) , to appear , 1995 . [ 25 ] Searle , J . R . , Speech Acts , Cambridge University Press , 1969 . [ 26 ] Smith , J . D . and K . Takahashi , “Multimedia Architecture to Support Requirements Analysis” , Proc . European Workshop on Interactive Multimedia Communications and Services , to appear . [ 27 ] Takahashi , K . and C . Potts , “Tuiqiao : A Hypertext Tool for Requirements Analysis” , Tech . Report GIT - CC - 94107 , Georgia Institute of Technology , 1994 . [ 28 ] Takahashi , K . and S . Yamamoto , “An Analysis of Traceability in Requirements Documements” , IEICE Transactions on Information and Systems , Vol . E78 - D , No . 4 , pp . 394 - 402 , 1994 . ROC . CSCW’90 , pp . 79 - 92 , 1990 . 40