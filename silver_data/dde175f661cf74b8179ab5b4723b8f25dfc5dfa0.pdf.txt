Annals of Operations Research 117 , 175 – 190 , 2002  2003 Kluwer Academic Publishers . Manufactured in The Netherlands . An Application of Tabu Search Heuristic for the Maximum Edge - Weighted Subgraph Problem ELDER MAGALHÃES MACAMBIRA ∗ elder @ cos . ufrj . br Universidade Federal do Rio de Janeiro – UFRJ , A . L . Coimbra de Pós - graduação e Pesquisa em Engenharia – COPPE , Programa de Engenharia de Sistemas e Computação – PESC , Caixa Postal 68511 , CEP : 21145 - 970 , Rio de Janeiro , RJ , Brazil Abstract . The purpose of this article is to describe an efﬁcient search heuristic for the Maximum Edge - weighted Subgraph ( MEwS ) problem . This problem requires to ﬁnd a subgraph such that the sum of the weights associated with the edges of the subgraph is maximized subject to a cardinality constraint . In this study a tabu search heuristic for the MEwS problem is proposed . Different algorithms to obtain an initial solution are presented . One neighborhood search strategy is also proposed . Preliminary computa - tional results are reported for randomly generated test problems of MEwS problem with different densities and sizes . For most of test problems , the tabu search heuristic found good solutions . In addition , for large size test problems , the tabu search outperformed the local search heuristic appearing in the litera - ture . Keywords : combinatorial optimization , edge - weighted subgraph problem , metaheuristics , tabu search Introduction Nowadays , metaheuristics based on neighborhood search , such as tabu search , simulated annealing and GRASP , have been widely investigated and applied to a large spectrum of problems . Its problems frequently found , are combinatorial ones . Many of them consist of the search , on a given graph , for a set of edges satisfying certain conditions . One of these problems is the Dense k - Subgraph ( DkS ) problem , which consists of the determination of the maximum dense k - vertex subgraph of a given graph ( see [ 5 ] ) . That is , on a input a graph G and a parameter k , we are interested in ﬁnding a set of k vertices with maximum average degree in the subgraph induced by this set . An alternative extension of DkS problem is the Maximum Edge - weighted Subgraph ( MEwS ) problem . The MEwS problem can be described as follows . Let G = ( V , E ) be an undirected graph , where V is a vertex set and E is an edge set , with | V | = n and | E | = m . Each edge e = ( u , v ) of E has a nonnegative cost or weight w uv , and a nonnegative integer valued k such that 2 (cid:1) k (cid:1) n . The Maximum Edge - weighted Subgraph problem consists in ﬁnding one subgraph H = ( U , F ) of G such that the sum ∗ The author was partially supported by Conselho Nacional de Desenvolvimento Cientíﬁco e Tecnológico do Brasil ( grant 146245 / 1999 - 7 ) and Fundação Carlos Chagas Filho de Amparo à Pesquisa do Estado do Rio de Janeiro ( grant E - 26 / 152 . 603 / 2001 ) . 176 MACAMBIRA of the weights of the edges in F is maximized and the number of vertices in U is equal to k . The decision version of the MEwS problem is NP - complete ( see [ 2 ] ) , as far as it reduces to the Maximum Clique problem . The Maximum Edge - weighted Subgraph problem is also called Heaviest Subgraph problem . As in most others NP problems the computational complexity limits the exclusive use of exact techniques . The design of an efﬁcient heuristic therefore becomes of paramount importance for dealing with its solution . In a recent work , Macambira and de Meneses [ 16 ] proposed a metaheuristic GRASP for the Maximum Edge - weighted Subgraph problem . The heuristic can be described as follows . The greedy function of the construction phase favors the nodes corresponding to the maximum sum of the weights associated with its outgoing edges . The local search phase tries to improve the actual solution by swapping one element in the solution set with one not belonging to the solution . Recently , the tabu search heuristic has been largely applied for solving hard com - binatorial optimization problems : scheduling and timetabling [ 3 , 11 , 22 ] , graph theory [ 15 , 17 , 18 , 20 , 21 ] , routing [ 1 , 7 , 12 , 19 ] , and telecommunications [ 4 , 6 , 13 , 14 , 24 – 26 ] . Oth - ers applications can be found in [ 10 ] . In this paper , we address the design , implemen - tation and testing of a tabu search heuristic for the Maximum Edge - weighted Subgraph problem . This paper is organized as follows . In section 1 , the tabu search heuristic is pre - sented in details , including three different strategies to obtain an initial solution and one search strategy used for the obtaining the neigborhood . Computational results for ran - domly generated problems are reported in section 2 , together with some comparisions with GRASP heuristic . Finally , section 3 includes some conclusions and remarks . 1 . Tabu search Tabu search is a search procedure that operates iteratively through neighborhood , from one solution to another , by moves with assistance of adaptive memory . To exploit this memory effectively , the heuristic makes use of several principles and associated algo - rithm designs . In this section , we describe brieﬂy the main general aspects of tabu search heuris - tic and then we present the elements of tabu search proposed for the Maximum Edge - weighted Subgraph problem . 1 . 1 . Elementary tabu search procedure Tabu search is basically an iterative neighborhood search strategy that allows moves that degrade the objective function . It starts with a solution and then , at each iteration , one move is applied to the current solution , leading to one of its neighbor solutions . Tabu status are imposed to the moves that resulted in a deteriorated solution and it is possible to distinguish between admissible and tabu moves . APPLICATION OF TABU SEARCH HEURISTIC 177 Through such moves , the method can escape from bad local optima ( as opposed to a pure descent approach ) . A tabu status can be overrided whenever the corresponding tabu move leads to a better solution . This is the aspiration criterion . The control of search process is the main issue underlying tabu search . It makes use of two adaptive ﬂexible memories : short term and long term memory . To avoid cycling , a short term memory , known as the tabu list , stores previously visited solutions or componentes of previously visited solutions . It’s then forbidden or tabu to come back to these solutions for a certain number of iterations . In order to get high quality solutions , the tabu search use a long term memory . The long term memory consists of elite solutions ( high quality local optima ) encountered at various points in the solution process . This provides a diversiﬁcation phase in the process . Algorithm 1 presents the general aspects of tabu search heuristic discuted above . Let S be the solution at the current iteration , and S ∗ the best solution found so far , num _ iter the current iteration counter , and T the list of tabu moves . A tabu search - based short term memory may be expressed as follows . Algorithm 1 . Elementary tabu search procedure procedure Elementary _ Tabu _ Search ( ) 1 . Initialize the solution S ; 2 . S ∗ : = S ; 3 . num _ iter : = 0 ; 4 . T : = ∅ ; 5 . / ∗ generate neighborhood of S ∗ / 6 . Construct a list of candidate moves from the neighborhood of S and evaluate each candidate move ; 7 . / ∗ best neighbor ∗ / 8 . Select the highest evaluation move that does not belong to T , or which qualiﬁes to be selected as a result of being admissible by aspiration criterion . Perform the move , and update the solution S ; 9 . / ∗ update best solution ∗ / 10 . if ( solution S is better than solution S ∗ ) 11 . then update S ∗ ; 12 . Update aspiration criterion ; / ∗ aspiration criterion ∗ / 13 . Update tabu list T ; / ∗ tabu list ∗ / 14 . / ∗ stop criterion ∗ / 178 MACAMBIRA 15 . if ( stopping criteria are satisﬁed ) 16 . then terminate with solution S ∗ 17 . else 18 . num _ iter : = num _ iter + 1 ; 19 . goto step 6 ; 20 . return ( S ∗ ) ; end Elementary _ Tabu _ Search The tabu search heuristic proposed for the Maximum Edge - weighted Subgraph problem follows the general guidelines provided in [ 8 ] . In the following , each compo - nent is then presented in greater detail . 1 . 2 . Initial solution Tabu search heuristic implementations require an initial solution . A solution S for the tabu search is represented with a vector of n elements , where the i th component is equal to 1 if vertex i belongs to solution S . Three different strategies were implemented to get one initial solution S 0 : • Rand _ Node : at each iteration , a node v / ∈ S 0 is randomly selected ; • Rand _ Edge : at each iteration , an edge e = ( u , v ) is randomly selected . If one ( or both ) its extremities do not belong to initial solution S 0 , then this node is inserted into the initial solution S 0 ; • Greedy _ Node : at each iteration , we select the node v / ∈ S 0 corresponding to the maximum sum of the weights associated with its outgoing edges and it is assigned to initial solution S 0 . 1 . 3 . Neighborhood strategy and moves Local search methods are based on the investigation of the solution space , by succes - sively exploring the neighborhood of a current solution and moving to one of its neigh - bors whenever an improving move is found . Thus , the neighborhood deﬁnition is one of the critical aspects of tabu search . Previous studies show that the choice of a neighbor - hood has a signiﬁcant impact on the solution quality ( see [ 9 ] ) . The neighborhood structure must be simple and contain good solutions . In our implementation , we have chosen to use the common types of moves reported in [ 15 , 16 ] . These moves consist in swapping one node from current solution with one not belonging to this solution . Such moves are elementary in the search process , but they introduce good changes to the current solution . So , given a solution S , a neighbor solution of S is obtained through the application of a move to a pair of nodes u and v by considering the neighborhood strategy called APPLICATION OF TABU SEARCH HEURISTIC 179 randomized . This neigborhood strategy , denoted by Nrand , is deﬁned by exchange operations between the nodes u and v randomly selected such that u belongs to current solution S and v do not . 1 . 4 . Aspiration criterion In the tabu search heuristic proposed , the aspiration criterion is activated everytime a tabu move leads to a solution of greater sum than the sum of current solution , that is whenever it improves the weight of the current best solution . In this case , the corresponding tabu status is deactivated and the tabu move is executed . 1 . 5 . Termination criterion The following stopping condition was tested in the tabu search heuristic : limit on the maximum number of iterations , denoted by NUM _ ITERATIONS , where there is not improvement in the value of the best known solution . 1 . 6 . Tabu search algorithm The pseudo - code of the proposed tabu search heuristic for the MEwS problem is pre - sented below . Algorithm 2 . Tabu search heuristic proposed for the MEwS problem procedure Tabu _ Search _ for _ MEwS ( V , E , w , k ) S : current solution . S : best neighbor solution . S ∗ : best solution found . asp ( S ) : aspiration criterion . T : tabu list . 1 . / ∗ initializations ∗ / 2 . Compute an initial solution → S : = InitialSolution ( V , E , w , k ) ; 3 . T : = ∅ ; 4 . asp ( S ) : = w ( S ) + 1 ; 5 . S ∗ : = S ; 6 . num _ iter : = 0 ; 7 . best _ iter : = 0 ; 180 MACAMBIRA 8 . while ( num _ iter − best _ iter < NUM _ ITERATIONS ) do / ∗ stop criterion ∗ / 9 . S : = NeighborhoodStructure ( V , E , w , k , S , T , asp ( S ) ) ; / ∗ best neighbor ∗ / 10 . if ( w ( S ) (cid:2) w ( S ∗ ) ) 11 . then / ∗ best solution found ∗ / 12 . S ∗ : = S ; 13 . best _ iter : = num _ iter ; 14 . end _ if 15 . / ∗ update aspiration criterion ∗ / 16 . if ( w ( S ) (cid:2) asp ( S ) ) 17 . then asp ( S ) : = w ( S ) + 1 ; 18 . else if ( w ( S ) (cid:2) w ( S ) + 1 ) 19 . then asp ( S ) : = w ( S ) + 1 ; 20 . Update tabu list T ; 21 . S : = S ; / ∗ update current solution ∗ / 22 . num _ iter : = num _ iter + 1 ; 23 . end _ while 24 . return ( S ∗ ) ; end Tabu _ Search _ for _ MEwS An initial solution is computed in line 2 . Next , the list of tabu , the aspira - tion criterion , the best solution found , the number of iterations , and the number of best solution found are initialized in lines 3 – 7 . The tabu search heuristic stops after NUM _ ITERATIONS are performed without improvement in the best solution found . The loop from 8 to 23 is performed until this stopping condition is not attained . At each tabu search iteration , the neighborhood of current solution is determined through of moves described in section 1 . 3 and based in moves of tabu list and aspiration criterion . The best neighbor solution S is set in line 9 . The best solution and the iteration number in which it was found are update in lines 10 – 14 . The aspiration criterion and the tabu list are update in lines 16 – 20 . In line 21 , the current solution moves to the best neighbor solution and a new iteration starts in line 22 . APPLICATION OF TABU SEARCH HEURISTIC 181 2 . Computational results In this section , we present numerical results obtained with the application of the tabu search heuristic proposed in this work for the MEwS problem . The heuristic is coded in C language and compiled with the gnu gcc compiler . All computational experiments have been performed on a Pentium III 600 MHz with 256 Mbytes of RAM memory . We ﬁrst introduce the test problems and parameter values for the tabu search heuris - tic . Then , we compare the results obtained with the tabu search heuristic with those obtained with the GRASP heuristic implemented in [ 16 ] . 2 . 1 . Test problems Three different classes of test problems have been used to test the proposed tabu search heuristic . These classes consist of eighty problems , which are generated randomly us - ing the algorithm detailed in [ 23 ] . These problems are associated with sparse or dense graphs where n = { 40 , 42 , 43 , 44 , 45 , 46 , 48 , 50 , 60 , 70 , 80 , 90 , 100 } . The value of pa - rameter k is equal (cid:13) n / 2 (cid:14) because the value creates the most difﬁcult test problems from a compuational standpoint . Table 1 speciﬁes test problems to be used . In the table , the ﬁrst column indicates the class of problem to be solved . The number of nodes , the number of edges and the weights associated to the edges are shown , for each class , in columns 2 – 4 . The notation [ a , b ] indicates problems in which the weights were uniformly generated as an integer between a and b . 2 . 2 . Parameter settings Preliminary experiments have been conducted to determine appropriate parameter values for the tabu search heuristic . Extensive computations have been performed , in particu - lar , to ﬁne tune the tabu list T cardinality and the stopping criterion . The experiments indicated | T | = k and NUM _ ITERATIONS = m . Three different strategies ( section 1 . 2 ) were tested to obtain an initial solution for the MEwS problem . The results for some test problems are summarized in table 2 . The various headings of table 2 are as follows . The ﬁrst column indicates the problem tested , where the name Pcc . xx . yy . zz denote the class of test problem ( cc ) , the number of Table 1 The classes of test problems . Class Problem data | V | = n | E | = m Weight PO1 40 – 50 480 – 1114 [ 1 , 100 ] PO2 40 – 50 435 – 1104 [ 100 , 500 ] PO3 60 – 100 1125 – 4463 [ 100 , 500 ] 182 MACAMBIRA Table 2 Computational results obtained for each initial solution strategy . Problem Strategy Rand _ Node Rand _ Edge Greedy _ Node P01 . 40 . 480 . 20 3798 3901 5501 P01 . 40 . 709 . 20 5303 5117 7682 P01 . 40 . 737 . 20 6210 5647 7324 P01 . 45 . 606 . 23 5841 5693 7221 P01 . 45 . 699 . 23 6680 6918 8897 P01 . 45 . 895 . 23 7773 7451 9844 P01 . 48 . 600 . 24 4619 4193 7149 P01 . 48 . 665 . 24 5206 4775 7675 P01 . 48 . 1015 . 24 7962 8111 10300 P02 . 42 . 585 . 21 35313 33633 43132 P02 . 42 . 672 . 21 38685 37326 49856 P02 . 42 . 770 . 21 42858 41504 53182 P02 . 46 . 707 . 23 42863 42578 53225 P02 . 46 . 809 . 23 47084 45965 57866 P02 . 46 . 929 . 23 53125 51193 61643 P02 . 50 . 615 . 25 39482 37438 47171 P02 . 50 . 837 . 25 48463 49586 60177 P02 . 50 . 1104 . 25 61518 63028 76514 P03 . 60 . 1125 . 30 61548 62535 81737 P03 . 60 . 1390 . 30 77029 78223 96401 P03 . 60 . 1592 . 30 92170 95865 108419 P03 . 70 . 1557 . 35 88426 94842 107174 P03 . 70 . 1909 . 35 104363 107888 127436 P03 . 70 . 2178 . 35 120289 123634 140681 P03 . 80 . 2056 . 40 122150 117266 151861 P03 . 80 . 2508 . 40 144792 140094 174200 P03 . 80 . 2848 . 40 160242 160585 187197 P03 . 90 . 2628 . 45 152995 152872 182829 P03 . 90 . 3198 . 45 185552 183448 214469 P03 . 90 . 3614 . 45 201197 209304 235580 P03 . 100 . 3482 . 50 206925 210416 239855 P03 . 100 . 3950 . 50 231293 230401 263158 P03 . 100 . 4463 . 50 261290 255403 288154 nodes ( xx ) , the number of edges ( yy ) and the number of nodes in the solution ( zz ) . The value of initial solution obtained by each strategy is shown in columns 2 , 3 and 4 , respectively . As can be seen from table 2 , neither Rand _ Node nor Rand _ Edge strategies dom - inate the other , but the Greedy _ Node strategy obtained better initial solutions . So , the strategy chosen to generate an initial solution was Greedy _ Node strategy . APPLICATION OF TABU SEARCH HEURISTIC 183 Table 3 Computational results obtained by GRASP and TS heuristics for class P01 . Problem GRASP Tabu Search Initial Best _ Sol Best _ Iter Time Initial Best _ Sol Best _ Iter Time P01 . 40 . 480 . 20 5452 5662 115 11 5501 5714 112 9 P01 . 40 . 709 . 20 7252 7742 48 17 7682 7742 11 12 P01 . 40 . 737 . 20 7374 8183 101 18 7324 8183 10 13 P01 . 42 . 587 . 21 6107 6426 144 16 6366 6451 4 13 P01 . 42 . 689 . 21 7205 7539 112 20 7358 7539 5 15 P01 . 42 . 783 . 21 7862 8049 165 22 7985 8078 15 18 P01 . 43 . 642 . 22 8215 8402 397 21 7676 8402 10 15 P01 . 43 . 732 . 22 8567 8901 133 24 8694 8933 208 28 P01 . 43 . 820 . 22 9027 9433 463 27 9423 9443 4 20 P01 . 44 . 669 . 22 7682 8112 182 23 8082 8112 10 17 P01 . 44 . 754 . 22 7699 8319 134 26 8143 8319 26 20 P01 . 44 . 762 . 22 8198 8568 23 26 8211 8604 14 20 P01 . 44 . 891 . 22 9070 9328 813 30 9252 9372 510 24 P01 . 44 . 924 . 22 9767 10179 162 32 9953 10187 95 26 P01 . 45 . 606 . 23 7257 7518 154 24 7221 7531 267 18 P01 . 45 . 699 . 23 8621 9115 503 28 8897 9115 3 19 P01 . 45 . 895 . 23 9858 10080 769 36 9844 10030 90 27 P01 . 46 . 512 . 23 5561 6259 194 18 6047 6298 9 16 P01 . 46 . 550 . 23 6089 6340 185 20 6248 6351 47 122 P01 . 46 . 706 . 23 6998 7751 421 27 7770 7771 3 28 P01 . 46 . 823 . 23 8762 9094 329 33 8895 9094 2 26 P01 . 46 . 936 . 23 9284 9799 218 38 9744 9799 6 29 P01 . 48 . 600 . 24 6782 7139 455 25 7149 7183 396 24 P01 . 48 . 665 . 24 7655 7772 428 29 7675 7803 43 27 P01 . 48 . 1015 . 24 10211 10650 716 49 10300 10687 19 52 P01 . 50 . 606 . 25 7072 7407 108 29 7319 7452 29 31 P01 . 50 . 881 . 25 8603 9468 197 55 9214 9512 245 46 P01 . 50 . 985 . 25 10066 10563 210 56 10321 10712 521 75 P01 . 50 . 1104 . 25 10708 11128 419 65 11100 11204 11 48 P01 . 50 . 1114 . 25 11305 11672 1014 65 11417 11705 8 87 After some tuning the parameters’ values for the tabu search heuristic ( strategy to obtain the initial solution , number of iterations , the size of the tabu list and the stopping criterion ) , we are ready to investigate its overall effectiveness . 2 . 3 . Experiments In this section we summarize the computational results obtained for the three classes described in table 1 . 184 MACAMBIRA 2 . 3 . 1 . Class P01 results The ﬁrst class contains thirty test problems . Table 3 summarizes the results we have obtained by applying GRASP and tabu search heuristics for the problems in class P01 . The headings of table 3 are depicted as follows . The column Initial indicates the value of initial solution , the column Best _ Iter indicates the number of iteration in which the best solution was obtained by heuristic , the column Best _ Sol indicates the value of best solution obtained either by GRASP heuristic or by tabu search heuristic after NUM _ ITERATIONS iterations and the column Time indicates the best solution CPU time . Times are measured in seconds . Initially , the results presented in table 3 indicate that tabu search heuristic out - performs GRASP heuristic with respect to solution quality . Better solutions than the currently known ones were found for twenty out of the thirty problems . These instances are marked with bold . For the remaining problems , both algorithms found the same solution , except in one problem , P01 . 45 . 895 . 23 , in which GRASP heuristic found better solution than tabu search heuristic . From these observations one can raise the improvement of solution obtained with tabu search heuristic over the GRASP heuristic . This improvement is expressed by per - centage % Solution = z ( tabu ) − z ( GRASP ) z ( tabu ) × 100 ( 1 ) where z ( tabu ) and z ( GRASP ) indicate , respectively , the value of best solution found by tabu search and GRASP heuristic . Additionally , the following value was calculated for each test problem % Time = t ( GRASP ) − t ( tabu ) t ( GRASP ) × 100 . ( 2 ) The value Time indicates the improvement in CPU time required by tabu search ( if any ) to generate better results than GRASP heuristic , where t ( tabu ) and t ( GRASP ) indicate , respectively , the total CPU time required by tabu search and GRASP heuristic . For each test problem , table 4 shows the improvement of solution and CPU time obtained with our tabu search heuristic . The label − indicates the problems where the tabu search did not ﬁnd better results than GRASP heuristic or the problems where the tabu search did not get to improve CPU time . It discloses that the tabu search is indeed quite good for these test problems . The improvement of solution of tabu search over GRASP is at most 1 . 39 % . Notably , the tabu search succeds in ﬁnding good solutions to all test problems taking until 32 . 14 % less CPU time in relation to GRASP heuristic . Also , from table 3 , it can be seen that our tabu search heuristic provides the best solution in sixteen out of the thirty test problems before k = (cid:13) n / 2 (cid:14) iterations whereas the GRASP did not ﬁnd in any test problem . APPLICATION OF TABU SEARCH HEURISTIC 185 Table 4 Percentage improvement from TS over GRASP for class P01 . Problem % Solution % Time P01 . 40 . 480 . 20 0 . 91 18 . 18 P01 . 40 . 709 . 20 – 29 . 41 P01 . 40 . 737 . 20 – 27 . 78 P01 . 42 . 587 . 21 0 . 39 18 . 75 P01 . 42 . 689 . 21 – 25 . 00 P01 . 42 . 783 . 21 0 . 36 18 . 18 P01 . 43 . 642 . 22 – 28 . 57 P01 . 43 . 732 . 22 0 . 36 – P01 . 43 . 820 . 22 0 . 11 25 . 93 P01 . 44 . 669 . 22 – 26 . 09 P01 . 44 . 754 . 22 – 23 . 08 P01 . 44 . 762 . 22 0 . 42 23 . 08 P01 . 44 . 891 . 22 0 . 47 – P01 . 44 . 924 . 22 0 . 08 18 . 75 P01 . 45 . 606 . 23 0 . 17 25 . 00 P01 . 45 . 699 . 23 – 32 . 14 P01 . 45 . 895 . 23 – 25 . 00 P01 . 46 . 512 . 23 0 . 62 11 . 11 P01 . 46 . 550 . 23 0 . 17 – P01 . 46 . 706 . 23 0 . 26 – P01 . 46 . 823 . 23 – 21 . 21 P01 . 46 . 936 . 23 – 23 . 68 P01 . 48 . 600 . 24 0 . 61 4 . 00 P01 . 48 . 665 . 24 0 . 39 6 . 89 P01 . 48 . 1015 . 24 0 . 35 – P01 . 50 . 606 . 25 0 . 60 – P01 . 50 . 881 . 25 0 . 46 16 . 36 P01 . 50 . 985 . 25 1 . 39 – P01 . 50 . 1104 . 25 0 . 68 26 . 15 P01 . 50 . 1114 . 25 0 . 28 – 2 . 3 . 2 . Class P02 results The second class contains thirty ﬁve test problems . Table 5 presents the results obtained for the problems in class P02 . The experiments in this class are interesting . Again tabu search found good solutions for the majority problems . The tabu search heuristic found best solutions than GRASP heuristic for twenty six out of thirty ﬁve problems . In the remaining nine problems , both heuristics found the same solution in seven problems and in only two problems , P02 . 40 . 453 . 20 and P02 . 44 . 645 . 22 , the GRASP heuristic found better solution than tabu search heuristic . From table 5 , we can see that in two out of thirty ﬁve problems the tabu search heuristic found the best solution before k iterations whereas GRASP heuristic found in 186 MACAMBIRA Table 5 Computational results obtained by GRASP and TS heuristics for class P02 . Problem GRASP Tabu Search Initial Best _ Sol Best _ Iter Time Initial Best _ Sol Best _ Iter Time P02 . 40 . 395 . 20 32238 34731 56 9 34491 34491 2 8 P02 . 40 . 563 . 20 39138 42260 532 13 41472 42279 18 11 P02 . 40 . 648 . 20 46345 47490 347 15 46866 47490 6 12 P02 . 40 . 694 . 20 46744 48171 304 23 47199 48264 17 13 P02 . 40 . 697 . 20 47230 48098 381 18 47324 48098 431 14 P02 . 42 . 430 . 21 32793 35524 166 14 32700 35803 18 10 P02 . 42 . 502 . 21 38093 41463 53 16 41685 41685 0 11 P02 . 42 . 585 . 21 39925 42947 134 17 43132 43132 0 13 P02 . 42 . 672 . 21 48484 50184 506 21 49856 50230 353 16 P02 . 42 . 770 . 21 52160 53182 746 25 53182 53182 0 16 P02 . 44 . 468 . 22 32537 37100 308 13 36754 37102 8 13 P02 . 44 . 551 . 22 41303 42763 5 21 42721 42763 1 15 P02 . 44 . 645 . 22 43685 47486 377 28 45606 47258 7 33 P02 . 44 . 740 . 22 49119 51702 154 29 50090 51793 157 22 P02 . 44 . 850 . 22 56242 58983 552 36 58575 59095 11 22 P02 . 45 . 497 . 23 40241 42714 325 19 42784 42784 0 15 P02 . 45 . 584 . 23 45663 47774 183 21 45655 47774 8 18 P02 . 45 . 680 . 23 50650 54195 518 25 54280 54599 1 21 P02 . 45 . 777 . 23 54351 57249 662 39 57059 57272 11 23 P02 . 45 . 890 . 23 58315 62983 420 35 61811 62983 14 27 P02 . 46 . 514 . 23 39802 41390 381 28 40940 41628 227 21 P02 . 46 . 606 . 23 42720 47073 582 24 46637 47111 10 24 P02 . 46 . 707 . 23 49685 53123 158 41 53225 53260 158 24 P02 . 46 . 809 . 23 55529 59262 449 57 57866 59336 32 33 P02 . 46 . 929 . 23 59944 61977 815 65 61643 62000 221 33 P02 . 48 . 560 . 24 41119 45225 325 43 44857 45242 11 24 P02 . 48 . 662 . 24 49251 51839 584 56 50579 51972 22 36 P02 . 48 . 770 . 24 53555 55491 538 51 54256 55707 15 43 P02 . 48 . 883 . 24 59881 62962 823 61 61462 62962 9 48 P02 . 48 . 1014 . 24 65122 69204 380 72 68575 69333 5 53 P02 . 50 . 615 . 25 44529 47392 351 36 47171 47729 15 35 P02 . 50 . 721 . 25 51418 54326 290 50 53651 54616 21 40 P02 . 50 . 837 . 25 56736 61291 776 53 60177 61492 12 48 P02 . 50 . 959 . 25 64829 68891 116 80 66967 69045 8 55 P02 . 50 . 1104 . 25 74581 77115 465 63 76514 77476 30 50 one problem . It is still interesting to note that in four out of thirty ﬁve problems , the initial solution corresponds to the best solution produced by tabu search . Also , the results obtained for this class show a decrease in CPU time of tabu search in relation to CPU time of GRASP . For each problem , table 6 shows the improvement of solution and CPU time . The tabu search heuristic takes about 49 . 23 % less CPU time APPLICATION OF TABU SEARCH HEURISTIC 187 Table 6 Percentage improvement from TS over GRASP for class P02 . Problem % Solution % Time P02 . 40 . 395 . 20 – 11 . 11 P02 . 40 . 563 . 20 0 . 04 15 . 38 P02 . 40 . 648 . 20 – 20 . 00 P02 . 40 . 694 . 20 0 . 19 43 . 48 P02 . 40 . 697 . 20 – 22 . 22 P02 . 42 . 430 . 21 0 . 78 28 . 57 P02 . 42 . 502 . 21 0 . 53 31 . 25 P02 . 42 . 585 . 21 0 . 43 23 . 53 P02 . 42 . 672 . 21 0 . 09 23 . 81 P02 . 42 . 770 . 21 – 36 . 00 P02 . 44 . 468 . 22 0 . 0054 – P02 . 44 . 551 . 22 – 28 . 57 P02 . 44 . 645 . 22 – – P02 . 44 . 740 . 22 0 . 18 24 . 14 P02 . 44 . 850 . 22 0 . 19 41 . 67 P02 . 45 . 497 . 23 0 . 16 21 . 05 P02 . 45 . 584 . 23 – 14 . 29 P02 . 45 . 680 . 23 0 . 74 16 . 00 P02 . 45 . 777 . 23 0 . 0402 41 . 03 P02 . 45 . 890 . 23 – 22 . 86 P02 . 46 . 514 . 23 0 . 57 25 . 00 P02 . 46 . 606 . 23 0 . 081 – P02 . 46 . 707 . 23 0 . 26 41 . 46 P02 . 46 . 809 . 23 0 . 12 42 . 11 P02 . 46 . 929 . 23 0 . 037 49 . 23 P02 . 48 . 560 . 24 0 . 038 44 . 19 P02 . 48 . 662 . 24 0 . 26 35 . 71 P02 . 48 . 770 . 24 0 . 39 15 . 09 P02 . 48 . 883 . 24 – 21 . 31 P02 . 48 . 1014 . 24 0 . 19 26 . 39 P02 . 50 . 615 . 25 0 . 71 2 . 78 P02 . 50 . 721 . 25 0 . 53 20 . 00 P02 . 50 . 837 . 25 0 . 33 9 . 43 P02 . 50 . 959 . 25 0 . 22 31 . 25 P02 . 50 . 1104 . 25 0 . 47 20 . 63 and with respect to the improvement of solution of tabu search over GRASP it never exceeds 0 . 78 % . 2 . 3 . 3 . Class P03 results Finally , ﬁfteen large - scale instances are examined in class P03 . The results are shown in table 7 . Again the tabu search heuristic performs rather GRASP heuristic . It can be seen that our tabu search provides better solutions than GRASP heuristic for all test 188 MACAMBIRA Table 7 Computational results obtained by GRASP and TS heuristics for class P03 . Problem GRASP Tabu Search Initial Best _ Sol Best _ Iter Time Initial Best _ Sol Best _ Iter Time P03 . 60 . 1125 . 30 77828 82137 998 61 81737 82683 20 50 P03 . 60 . 1390 . 30 91760 97458 775 140 96401 97823 2 121 P03 . 60 . 1592 . 30 105951 108720 557 175 108419 109008 981 165 P03 . 70 . 1557 . 35 104197 109256 1173 283 107174 110011 29 260 P03 . 70 . 1909 . 35 124962 129457 1421 359 127436 129937 89 323 P03 . 70 . 2178 . 35 138163 142173 1106 382 140681 142928 11 333 P03 . 80 . 2056 . 40 144583 150386 229 350 151861 152330 6 304 P03 . 80 . 2508 . 40 167226 173352 1772 450 174200 174809 1611 565 P03 . 80 . 2848 . 40 180835 187516 2848 519 187197 188880 5 412 P03 . 90 . 2628 . 45 178146 185013 1445 724 182829 187657 17 627 P03 . 90 . 3198 . 45 207957 215280 287 919 214469 217614 55 761 P03 . 90 . 3614 . 45 233369 242079 2221 1080 235580 243089 80 837 P03 . 100 . 3482 . 50 230734 239657 1402 1530 239855 242317 27 1381 P03 . 100 . 3950 . 50 259257 268927 3057 1785 263158 271024 31 1509 P03 . 100 . 4463 . 50 283564 290299 1247 2049 288154 293070 14 1601 Table 8 Percentage improvement from TS over GRASP for class P03 . Instance % Solution % Time P03 . 60 . 1125 . 30 0 . 66 18 . 03 P03 . 60 . 1390 . 30 0 . 37 13 . 57 P03 . 60 . 1592 . 30 0 . 26 5 . 71 P03 . 70 . 1557 . 35 0 . 69 8 . 13 P03 . 70 . 1909 . 35 0 . 37 10 . 03 P03 . 70 . 2178 . 35 0 . 504 12 . 83 P03 . 80 . 2056 . 40 1 . 28 13 . 14 P03 . 80 . 2508 . 40 0 . 83 – P03 . 80 . 2848 . 40 0 . 72 20 . 62 P03 . 90 . 2628 . 45 1 . 41 13 . 39 P03 . 90 . 3198 . 45 1 . 07 17 . 19 P03 . 90 . 3614 . 45 0 . 42 22 . 50 P03 . 100 . 3482 . 50 1 . 098 9 . 74 P03 . 100 . 3950 . 50 0 . 77 15 . 46 P03 . 100 . 4463 . 50 0 . 95 21 . 86 problems . Observe that in ten out of ﬁfteen problems , the best solution was obtained before k iterations by tabu search heuristic whereas the GRASP did not ﬁnd in any problem . APPLICATION OF TABU SEARCH HEURISTIC 189 For each problem , table 8 shows the improviment of the solution and CPU time . The values of improvement of the solution is at most 1 . 41 % whereas the values of CPU time show a decrease and it taking about 22 . 50 % . 3 . Conclusions We have described a tabu search heuristic for solving the Maximum Edge - weighted Sub - graph problem . In our approach , three types strategies to obtain an initial solution were proposed . The search incorporates simple swap moves and one neighborhood structure . The performance of the tabu search heuristic has been evaluated on three different test problems classes and compared to other existing heuristic . The results obtained with the proposed heuristic are remarkable . In general , we obtain high quality solutions and the required computational times are excellent . Numerical tests , show that for sixty ﬁve smaller test problems , our tabu search heuristic yields good quality solutions on the majority of problems . For the ﬁfteen larger problems , our tabu search outperforms the best local search heuristic previously avail - able in the all problems tested . These outcomes show that our tabu search heuristic is very effective for the Maxi - mum Edge - weighted Subgraph problem . In our opinion , the simplicity of our approach makes it competitive even for the larger instances . Moreover , we understand that these results could be signiﬁcantly improved by exploring diversiﬁcation strategies and by considering more sophisticated rules to explore the neighborhoods . References [ 1 ] A . Amberg , W . Domschke and S . Voss , Multiple center capacitated arc routing problems : A tabu search algorithm using capacitated trees , European Journal of Operational Research 124 ( 2 ) ( 2000 ) 360 – 376 . [ 2 ] G . Ausiello , P . Crescenzi , G . Gambosi , V . Kann , A . M . Spaccamela and M . Protasi , Complexity and Approximation : Combinatorial Optimization Problems and Their Approximability Properties ( Springer , Berlin , 1999 ) . [ 3 ] C . C . B . Cavalcante and C . C . de Souza , A tabu search approach for scheduling problem under labour constraints , Technical report IC - 97 - 13 , Universidade Estadual de Campinas , Instituto de Computação ( 1997 ) ( in English ) . [ 4 ] S . Chamberland and B . Sansò , On the design problem of multitechnology networks , INFORMS Jour - nal on Computing 13 ( 3 ) ( 2001 ) 245 – 256 . [ 5 ] U . Feige , G . Kortsarz and D . Peleg , The dense k - subgraph problem , Algorithmica 29 ( 3 ) ( 2001 ) 410 – 421 . [ 6 ] B . Fortz , P . Soriano and C . Wynants , A tabu search algorithm for self - healing ring network design . Technical report 2000 / 15 , Université Libre de Bruxelles , Service de Mathématique de la Gestion , Institut de Statistique et de Recherche Opérationnelle , 2000 . [ 7 ] M . Gendreau , G . Laporte , C . Musaraganyi and E . Taillard , A tabu search heuristic for the heteroge - neous ﬂeet vehicle routing problem , Computers and Operations Research 26 ( 12 ) ( 1999 ) 1153 – 1173 . [ 8 ] F . Glover , Tabu search – part I , ORSA Journal on Computing 1 ( 3 ) ( 1989 ) 190 – 206 . [ 9 ] F . Glover , Tabu search – part II , ORSA Journal on Computing 2 ( 3 ) ( 1990 ) 3 – 32 . 190 MACAMBIRA [ 10 ] F . Glover and M . Laguna , Tabu Search ( Kluwer Academic , Boston , MA , 1995 ) . [ 11 ] F . de C . Gomes , C . N . de Meneses and E . M . Macambira , Course schedule using metaheuristics , in : XXVI Simpósio Brasileiro de Pesquisa Operacional , Florianópolis ( SC ) , Brazil ( 1994 ) pp . 225 – 231 . [ 12 ] A . Hertz , G . Laporte and M . Mittaz , A tabu search heuristic for the capacitated arc routing problem , Operations Research 48 ( 1 ) ( 2000 ) 129 – 135 . [ 13 ] M . Laguna , Clustering for the design of SONET rings in interofﬁce telecommunications , Management Science 40 ( 11 ) ( 1994 ) 1533 – 1541 . [ 14 ] M . Laguna and F . Glover , Bandwidth packing : A tabu search approach , Management Science 39 ( 4 ) ( 1993 ) 492 – 500 . [ 15 ] E . M . Macambira , A metaheuristic algorithm for the maximum edge - weighted clique problem , in : IX Congresso Latino – Iberoamericano de Investigación Operativa , University of Buenos Aires , Ar - gentina ( 1998 ) pp . 67 . 1 – 67 . 6 . [ 16 ] E . M . Macambira and C . N . de Meneses , A GRASP for the maximum edge - weighted subgraph prob - lem , in : IX Congresso Latino – Iberoamericano de Investigación Operativa , University of Buenos Aires , Argentina ( 1998 ) pp . 68 . 1 – 68 . 5 . [ 17 ] F . Montenegro , N . Maculan , G . Plateau and P . Boucher , A tabu search for the Euclidean Steiner tree problem in R n , in : Third Metaheuristics International Conference ( MIC ) , Angra dos Reis ( RJ ) , Brazil ( 1999 ) p . 343 . [ 18 ] C . C . Ribeiro and M . C . de Souza , Tabu search for the steiner problem in graphs , Networks 36 ( 2000 ) 138 – 146 . [ 19 ] F . Semet and E . Taillard , Solving real - life vehicle routing problems efﬁciently using taboo search , Annals of Operations Research 41 ( 1993 ) 469 – 488 . [ 20 ] Y . M . Sharaiha , M . Gendreau , G . Laporte and I . M . Osman , A tabu search algorithm for the capacitated shortest spanning tree problem , Networks 29 ( 3 ) ( 1997 ) 161 – 171 . [ 21 ] P . Soriano and M . Gendreau , Diversiﬁcation strategies in tabu search algorithms for the maximum clique problem , Annals of Operations Research , 63 ( 1996 ) 189 – 207 . [ 22 ] M . J . F . Souza , N . Maculan and L . S . Ochi , GTS - II : Uma heurística para o problema do horário de escolas , in : X Congresso Latino - Iberoamericano de Investigación Operativa ( 2000 ) . [ 23 ] H . Späth , Heuristically determining cliques of given cardinality with minimal cost within weighted complete graphs , Zeitschrift für Operations Research 29 ( 1985 ) 125 – 131 . [ 24 ] M . Vasquez and J . K . Hao , A heuristic approach for antenna positioning in cellular networks , Journal of Heuristics 7 ( 5 ) ( 2001 ) 443 – 472 . [ 25 ] J . Xu , S . Y . Chiu and F . Glover , Using tabu search to solve the steiner tree - star problem in telecommu - nications network design , Telecommunication Systems 6 ( 1996 ) 117 – 125 . [ 26 ] J . Xu , S . Y . Chiu and F . Glover , Tabu search for dynamic routing communication network design , Telecommunication Systems 8 ( 1997 ) 55 – 77 .