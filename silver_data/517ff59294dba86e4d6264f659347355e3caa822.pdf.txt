Conﬁguring Random Graph Models with Fixed Degree Sequences ∗ Bailey K . Fosdick † Daniel B . Larremore ‡ Joel Nishimura § Johan Ugander ¶ September 8 , 2018 Abstract Random graph null models have found widespread application in diverse research communi - ties analyzing network datasets , including social , information , and economic networks , as well as food webs , protein - protein interactions , and neuronal networks . The most popular family of random graph null models , called conﬁguration models , are deﬁned as uniform distributions over a space of graphs with a ﬁxed degree sequence . Commonly , properties of an empirical net - work are compared to properties of an ensemble of graphs from a conﬁguration model in order to quantify whether empirical network properties are meaningful or whether they are instead a common consequence of the particular degree sequence . In this work we study the subtle but important decisions underlying the speciﬁcation of a conﬁguration model , and investigate the role these choices play in graph sampling procedures and a suite of applications . We place par - ticular emphasis on the importance of specifying the appropriate graph labeling—stub - labeled or vertex - labeled—under which to consider a null model , a choice that closely connects the study of random graphs to the study of random contingency tables . We show that the choice of graph labeling is inconsequential for studies of simple graphs , but can have a signiﬁcant impact on anal - yses of multigraphs or graphs with self - loops . The importance of these choices is demonstrated through a series of three in - depth vignettes , analyzing three diﬀerent network datasets under many diﬀerent conﬁguration models and observing substantial diﬀerences in study conclusions under diﬀerent models . We argue that in each case , only one of the possible conﬁguration mod - els is appropriate . While our work focuses on undirected static networks , it aims to guide the study of directed networks , dynamic networks , and all other network contexts that are suitably studied through the lens of random graph null models . 1 Introduction A conﬁguration model is a uniform distribution over graphs with a speciﬁc degree sequence . For researchers studying network data , it is common to employ a conﬁguration model as a degree - preserving null model that holds ﬁxed the degree sequence of an empirical graph while randomizing all other structure . In other domains , researchers study the properties of graph algorithms , dy - namical models , or optimization routines on “realistic” graphs by sampling random graphs from a conﬁguration model with an empirically relevant degree sequence . ∗ All authors contributed equally to this work . † Department of Statistics , Colorado State University , Ft . Collins , CO 80523 USA ( bailey @ stat . colostate . edu ) ‡ Santa Fe Institute , 1399 Hyde Park Rd . Sante Fe , NM , 87501 USA ; Department of Computer Science , University of Colorado , Boulder , CO 80309 , USA ; BioFrontiers Institute , University of Colorado , Boulder , CO 80303 , USA . ( daniel . larremore @ colorado . edu ) § School of Mathematical and Natural Sciences , Arizona State University , Glendale , AZ 85306 USA ( joel . nishimura @ asu . edu ) ¶ Management Science & Engineering , Stanford University , Stanford , CA , 94305 USA ( jugander @ stanford . edu ) 1 a r X i v : 1608 . 00607v3 [ s t a t . M E ] 10 O c t 2017 There is a tendency in the literatures of graph mining , machine learning , and network science to think of and study one conﬁguration model— the conﬁguration model—without specifying or reﬂecting upon the deﬁning properties of the space of graphs over which the uniform distribution is considered . As a consequence , misunderstandings have developed within a number of domain sciences surrounding the conﬁguration model , at times because discussions refer to uniform distribu - tions over subtly but importantly diﬀerent spaces of graphs . In this paper , we clarify the diﬀerences between eight commonly arising graph spaces and their corresponding uniform distributions , aiming to provide an orderly review and guide for the diverse ﬁelds of study where conﬁguration models have found application . In some circumstances , diﬀerences between particular graph spaces are asymptotically small in the limit of large and sparse graphs with restricted degree sequences . However , as we will demonstrate , not all diﬀerences between graph spaces are asymptotically small , and perhaps more importantly , a great deal of modern graph analysis is performed on graphs that are well short of fulﬁlling these asymptotic promises . We begin by reviewing eight common graph spaces over which one might seek a uniform distri - bution . These spaces can be organized according to the answers to three binary questions , which we describe in Section 1 . 5 . We then provide a detailed overview of the subtleties involved in uniformly sampling from these diﬀerent spaces in Sections 2 and 3 , primarily through correctly speciﬁed Markov chains , with brief discussions of other related graph spaces , including connected , directed , and weighted graphs 1 . After establishing formal sampling results we then turn to a series of three vignettes in Section 5 that illustrate the scientiﬁc importance of choosing the correct graph space as a null model . In particular , we argue that the common default choice of studying conﬁguration models over stub - labeled graphs ( where each half - edge is labeled ) is an inappropriate choice for most analyses of non - simple graphs . Importantly , we demonstrate that this choice of null model leads to diﬀerent conclusions than more appropriate null models based on vertex - labeled graphs . 1 . 1 Basic deﬁnitions Recall the basic deﬁnition of a graph as an ordered pair G = ( V , E ) , consisting of a vertex set V and an edge set E ⊆ V × V . The edge set E is understood to be a simple set , but if E is a multiset ( where a vertex pair ( u , v ) can appear several times in E ) then the graph is instead called a multigraph . Depending on the context , a graph or multigraph may allow or disallow the presence of self - loops ( edges of the form ( u , u ) , connecting a vertex to itself ) . A graph is also often represented as a | V | × | V | adjacency matrix , such that the ( i , j ) th entry w ij is equal to the number of edges between vertices i and j . For undirected graphs , as considered here , the adjacency matrix is symmetric . The choices to allow or disallow self - loops or multiedges are the ﬁrst two choices in specifying a conﬁguration model’s graph space . In order to be precise about the properties of each graph space , we brieﬂy review four deﬁnitions . First , a simple graph is a graph without self - loops or multiedges . Second , there is no established name in the literature for a graph allowing self - loops but without multiedges , so we refer to such a graph plainly as a loopy graph . In the literature , multigraphs are sometimes taken to have self - loops or not ; we adopt the more conventional name multigraph to refer speciﬁcally to multigraphs without self - loops , and use loopy multigraph to refer to a multigraph that allows self - loops ( also sometimes called a pseudograph ) . See Figure 1 ( a ) for a diagram illustrating the basic relationships between these graph spaces . 1 See also [ 27 ] whose publication followed this work’s submission . 2 1 . 2 Vertex - and stub - labeled graph spaces A graph G = ( V , E ) consists of two sets : a vertex set V and an edge set E . These sets can be unlabeled or labeled , motivating the following deﬁnitions that will be used throughout the paper . Deﬁnition 1 ( Vertex - labeled graph ) . A vertex - labeled graph is a graph in which each vertex has a distinct label . For vertex - labeled graphs , there is a bijection between graphs and adjacency matrices , i . e . each vertex - labeled graph can be uniquely identiﬁed by its adjacency matrix and vice versa . However , in addition to vertices , the two endpoints of each edge ( where they connect to vertices ) , can also be labeled separately . The case when these half - edges or “stubs” are labeled motivates the following deﬁnition . Deﬁnition 2 ( Stub - labeled graph ) . A stub - labeled graph is a graph in which each half - edge ( stub ) has a distinct label , and thus each edge has a pair of distinct labels . Note that a stub - labeled graph also has implicitly labeled vertices , since each vertex is distinctly labeled by the set of labeled stubs attached to it . However , in contrast with vertex - labeled graphs , there is not a bijection between stub - labeled graphs and adjacency matrices , i . e . multiple stub - labeled graphs can correspond to the same adjacency matrix . An unlabeled graph is a graph in which neither edges nor vertices are labeled . An unlabeled graph can be thought of as an isomorphism class in a space of labeled graphs , where there exists a set of labeled graphs that all correspond to the same unlabeled graph . Similarly , there exists a set of stub - labeled graphs which correspond to the same vertex - labeled graph , motivating the following deﬁnition . Deﬁnition 3 ( Stub - isormorphism ) . A stub - isomorphism equivalence class is the set of all stub - labeled graphs which , upon removal of stub labels , results in the same vertex - labeled graph . Equiva - lently , a stub - isomorphism class is the set of all stub - labeled graphs which are represented by the same adjacency matrix . Two graphs in the same stub - isomorphism class are said to be stub - isomorphic . For the space of simple graphs with a given degree sequence { k i } i ∈ V , where k i is the degree of vertex i —and only for simple graphs , as we shall see—the number of stub - isomorphic graphs corresponding to a given vertex - labeled graph is a constant that depends only on the degree sequence ( which is ﬁxed ) . As a result , each vertex - labeled graph appears the same number of times in the space of stub - labeled graphs , and hence , the uniform distributions over both spaces are equivalent in most practical contexts where analyses ignore explicit stub labels . On the other hand , for non - simple graphs with loops and / or multiedges , this is not the case , and the choice of labeling can radically change the space of graphs , and thereby , a resulting / downstream / derivative analysis . We visualize the diﬀerently labeled spaces for an example degree sequence , { 2 , 2 , 1 , 1 } , in Figure 1 ( c - e ) . In the vertex - labeled space , half the graphs ( 3 of 6 ) have self - loops and only a third of the graphs ( 2 of 6 ) are simple ; in the stub - labeled space , the majority of the graphs ( 8 of 15 ) are simple . As we will show in Section 4 , self - loops and multiedges are always more common in vertex - labeled graphs , and for many degree sequences they are vastly more common . Uniform distributions over these diﬀerently labeled spaces can therefore produce wildly diﬀerent answers to straightforward questions . For example , if one asks , “What fraction of graphs with the given degree sequence form a single connected component ? ”for this degree sequence , the answer varies considerably—1 / 4 , 2 / 6 , or 8 / 15—depending on the space . 3 vertex - labeled stub - labeled e d c graph isomorph . s i m p l e l oop y and / o r m u l t i g r aph s a b simplegraphs no multiedges no self - loops multigraphs loopy multigraphs loopy graphs 1 2 3 4 5 6 1 2 5 6 2 6 3 4 1 3 5 4 1 2 3 5 6 4 1 4 5 6 2 3 1 4 5 2 4 2 1 2 3 4 5 6 1 3 5 6 6 Figure 1 : Graph spaces . ( a ) Nested and overlapping graph spaces , deﬁned by allowing or prohibit - ing self loops or multiedges . ( b ) Two instances of stub - matching resulting in the same vertex - labeled graph but diﬀerent stub - labeled graphs . ( c - e ) For the degree sequence { k i } = { 2 , 2 , 1 , 1 } , the ( c ) set of graph isomorphism classes , ( d ) set of vertex - labeled graphs , and ( e ) set of stub - labeled graphs , ( where the stub labels are delineated by the locations where they protrude from a vertex ) . For the two simple graphs in panel ( d ) , they are both “stub - isomorphic” to the same number of stub - labeled graphs in panel ( e ) , in particular , to exactly (cid:81) i k i ! = 4 graphs . However , the sizes of the stub - isomorphism classes diﬀer for graphs with self - loops or multiedges , illustrating why vertex - and stub - labeled spaces may not be treated as equivalent . Note that both graphs shown in panel ( b ) fall in the same row of panel ( e ) . 1 . 3 A brief history of stubs Stub - labeled graphs arise naturally from a relatively simple stub matching process . The ﬁrst step assigns a speciﬁc number of stubs to each vertex , ensuring that each vertex will have exactly the desired number of edges as speciﬁed by the degree sequence . To guarantee vertex i will have the correct degree k i , we force one endpoint of each of k i edges to be vertex i while the other endpoint is left ﬂoating , unassigned . In this way , each vertex i has k i half - edges or stubs . Joining two such stubs produces an edge . Note that by construction , every vertex has the correct number of edges , so repeatedly joining pairs of stubs results in a graph with the correct degree sequence , shown in Fig . 1 ( b ) . More precisely , the stub matching process takes a speciﬁed degree sequence { k i } i ∈ V and gen - erates a graph using the following randomized process . Each vertex i is assigned exactly k i stubs , and pairs of stubs are chosen uniformly at random and connected until there are no remaining unpaired stubs . This process , which only requires that the total number of stubs be even , creates a loopy multigraph with exactly the speciﬁed degree sequence . Due to the fact that stubs are chosen uniformly at random , this stub - matching procedure ( also called the pairing model [ 17 ] ) samples uniformly from the space of stub - labeled loopy multigraphs , as discussed further in Section 3 . 1 . Stub matching was ﬁrst introduced by Bollob´as [ 19 ] as a method for enumerating the number of vertex - labeled simple graphs with certain degree sequences [ 11 , 12 ] . Although stub matching draws from the space of stub - labeled loopy multigraphs , Bollob´as assumed that the degrees of all vertices did not grow too quickly , relative to the size of the graph , and then showed that the number of stub - labeled graphs with self - loops and / or multiedges was asymptotically small relative to the number of stub - labeled simple graphs . By the fact that every vertex - labeled simple graph is 4 stub - isomorphic to exactly (cid:81) i k i ! stub - labeled graphs ( see Section 4 and Figure 1 ( d - e ) ) , Bollob´as provided an asymptotically tight estimate ( for large graphs ) of the number of vertex - labeled simple graphs . Of note , Bollob´as called each stub - labeled graph a conﬁguration , the origin of the name conﬁguration model for these uniform distributions . Bollob´as’ analysis contains two subtleties that are major sources of confusion about conﬁgu - ration models . First , as noted above , every vertex - labeled simple graph is isomorphic to a ﬁxed number of stub - labeled simple graphs ( e . g . this number is four for the degree sequence { 2 , 2 , 1 , 1 } in Figure 1 ) , but the same cannot be said for graphs with self - loops or multiedges . Second , many analyses assume conditions on the degree sequence ( e . g . , adequately bounded growth ) under which the number of non - simple graphs is asymptotically small relative the number of simple graphs , but for any ﬁnite degree sequence the number of non - simple graphs can represent a substantial fraction of the graph space . The mathematical literature is almost always precise regarding these two points . However , as conﬁguration model random graphs have spread into diverse ﬁelds due to waves of interest in graph analysis and network science methods , these points have often caused confusion in the broader literature , as we discuss below . We hope that this work helps mark a turning point in that confusion . In the remainder of this introduction , we brieﬂy survey the history of diﬀerent applications of ﬁxed - degree - sequence random graph null models , and then summarize the concrete decisions that underlie the choices of diﬀerent conﬁguration model null models . 1 . 4 A brief history of applications of random graphs with ﬁxed degree sequence The practice of comparing an observation to a randomized null model has its origins in R . A . Fisher’s foundational work on randomization for hypothesis testing [ 53 ] . Random graph null models extend this practice to the space of graphs . They allow comparisons between properties of real - world graphs and properties of graphs drawn at random from a graph space , ultimately allowing us to quantify what is surprising and what is expected . However , as with any hypothesis test , the choice of randomized null model directly aﬀects the conclusions that can be drawn from the test . For this reason , the classic but overly simplistic Erd˝os - R´enyi random graph model , in which each possible edge exists independently with probability p , or its near equivalent , in which a ﬁxed number of edges are placed between random pairs of vertices , are usually avoided . Compared to an Erd˝os - R´enyi null model , real - world networks often appear rich in structure by comparison . Instead , due to the fact that many key properties of networks are strongly constrained by the distribution of vertex degrees [ 109 , 18 , 24 , 34 , 81 , 118 ] , it is far more common and appropriate to use as a null model a space of graphs in which the degrees of all the vertices are ﬁxed , but where the edges are otherwise placed between vertices uniformly at random . This family of degree - preserving random graph models , which we call conﬁguration models throughout this paper , have been discovered independently and used as null models in sociology , ecology , systems biology , combinatorics , statistics , psychology and network science , spanning over 80 years of applied research . We detail some of this rich history here . Null models in sociology : chance sociograms , 1930s . In 1934 Jacob Moreno initiated the quanti - tative study of social networks through his inﬂuential book Who Shall Survive ? [ 103 ] . Soon there - after , in 1938 , Moreno and Jennings published Statistics of Social Conﬁgurations , which introduced statistics to social network analysis through the use of so - called chance sociograms , i . e . randomly sampled adjacency matrices with ﬁxed out - degrees ( i . e . one ﬁxed margin ) [ 104 ] . Moreno and Jen - nings argued that in order to establish the statistical signiﬁcance of an analysis , one should compare an observed social network with a network constructed through a chance experiment . 2 Moreno and 2 Moreno and Jennings in fact frequently used the word “conﬁgurations” to describe their chance sociograms , several decades before Bollob´as’ work : “Study of the ﬁndings of sociometric tests showed that the resulting conﬁgurations , 5 Jennings demonstrated their procedure by studying a population of 26 children at the New York State Training School for Girls in Hudson , NY . The children were surveyed for their three preferred dining partners , creating a directed network of dining partner preferences . This observed network was compared to a small set of seven manually randomized directed graphs restricted such that each vertex had three outgoing edges and no multiedges ( as in the observed network ) . Moreno and Jennings contrasted their empirical graph with their small ensemble of graphs drawn from their null model , and concluded that some observed network features were statistically signiﬁcant while others were not . While our focus in this work is on undirected ( as opposed to directed ) conﬁgura - tion models , directed conﬁguration models are discussed brieﬂy in Section 3 . 2 . Another signiﬁcant early use of a random graph null model in sociology is contained in Davis and Leinhardt’s work testing Homans’ structural theory of social hierarchy from the 1950’s [ 68 ] . The study tested the theory by studying social network subgraph frequencies [ 38 ] , contrasting empirical frequencies with those of an Erd˝os - R´enyi random graph null model . Null models in ecology : species co - occurrence patterns , 1970s . A conﬁguration model arose independently in ecology when , in 1975 , Jared Diamond published an analysis of bird species co - occurrence on the islands of the Bismarck Archipelago and argued that , based on the patterns of species presence and absence observed across the islands , the presence of some species precluded the presence of others [ 45 ] . In 1979 , Connor and Simberloﬀ argued that the patterns themselves were not suﬃcient evidence for such conclusions ; they argued that a null model of randomly assigned species to islands , in which the number of species per island and number of islands per species are exactly preserved , should be used to assess the possibility that the empirical patterns are the result of random chance [ 35 ] . In other words , Connor and Simberloﬀ argued that observed patterns should be compared against a null model , and in particular against a degree - preserving conﬁguration model , based on the observed presence / absence matrix . This methodological debate has continued for over 40 years regarding both the correct null model and appropriate test statistics for quantifying patterns of species presence / absence patterns ( see [ 61 ] for a partial review ) . Many contributions to the ongoing ecological discussion have been made in the years since . In 1987 , Wilson contributed a ﬁxed marginal null model , which required that any matrix in the ensemble have the same number of sites per species and species per site as the observed data , corresponding directly to an undirected bipartite conﬁguration model with ﬁxed degrees [ 138 ] . 3 Wilson’s 1987 ﬁxed marginal null model assembled the network via a stub matching procedure . He found that often , the stub matching was unable to ﬁnish without creating a double edge , and so he found better success rates by using a heuristic nearly equivalent to the Havel - Hakimi algorithm [ 66 , 65 ] ( though Wilson states that he was unable to ﬁnd any proof in the literature of his method ) . This debate illustrates the disconnect between the ecology and mathematics literatures at the time . Null models for tables : matrix counting and contingency tables , 1970s - 1990s . Contingency tables are rectangular matrices with integer entries , representing a tabulation of entities along two dimensions , e . g . the number of college graduates by major and institution . These tables , when viewed as adjacency matrices , characterize an undirected bipartite multigraph . There are straightforward analogous connections between the binary tables in ecology and the more general in order to be compared with one another , were in need of some common reference base from which to measure the deviations . It appeared that the most logical ground for establishing such a reference could be secured by ascertaining the characteristics of typical conﬁgurations produced by chance balloting for a similar size population with a like number of choices . ” That said , the term conﬁguration model is generally accepted to stem from Bollob´as’ usage of the word . 3 A bipartite network is a network where edges only occur between two distinct sets of vertices . For example , a plant - pollinator network contains both plants and insects as vertices and edges connecting pollinating insects to plants , and no edges between pairs of insects or pairs of plants . 6 ( non - binary ) contingency tables studied in statistics [ 31 ] . As in the network literature , contingency table analyses often involve asking whether table properties are interesting compared to random tables with the same row and column totals ( the same marginal totals ) . An initial focus of this literature was on enumerating the number of matrices with ﬁxed marginals [ 56 , 44 ] . Compared to presence / absence matrices , where the entries are restricted to be either 0 or 1 , analyzing adjacency matrices corresponding to contingency tables is much more straightforward . Many direct sampling procedures have been proposed [ 113 ] , as well as procedures which exactly characterize the null distribution of tables with ﬁxed marginals and do not rely on sampling ( see [ 134 , 1 ] for reviews of these methods ) . Null models in systems biology : network motifs , 2000s . As the large - scale study of both genetic regulatory networks and neuronal networks emerged in the early 2000s , lengthy debates were held in the literature regarding the choices of ( and technical means for sampling from ) null models . The debate on genetic regulatory networks began with a study by Milo et al . that found speciﬁc network motifs ( regulatory patterns ) that were more frequent than expected in a conﬁguration model null model [ 100 , 69 ] . Soon after that work was published , King issued a commentary that called attention to choices in the design of the random graph sampling algorithms in these works , noting that they did not sample uniformly from any graph spaces of reasonable interest [ 74 ] . A series of responses by the original authors led to corrected algorithms for sampling from the stub - labeled spaces of random graphs with ﬁxed degree sequences [ 99 , 70 ] . It is worth mentioning that other work on conﬁguration model null models of genetic regulatory networks , using correct sampling techniques , was also being conducted in parallel to the above controversy [ 90 ] . A parallel debate in the literature on neuronal networks noted that the study of network motifs in neuronal networks [ 100 , 98 ] involving comparisons between observed structures and conﬁguration model random graphs was ﬂawed at a deeper conceptual level , as it overlooked the role of spatial structure in brains [ 5 ] . A series of published exchanges followed [ 97 , 6 ] , leading to the study of speciﬁc spatial network null models for studying brain networks [ 123 ] . A similar adaptation , known as distance modularity [ 87 ] , has recently been introduced to the broader literature on network community detection . Other applications of conﬁguration model random graph null models include studies of patterns in the structure of the world wide web [ 109 ] , the Internet [ 91 ] , food webs [ 127 ] , academic career trajectories [ 89 ] , the dynamics of social contagion [ 28 ] , disease propagation [ 124 ] , opinion dynamics [ 137 ] , and economic network eﬀects [ 129 ] . As we discuss at length in Section 5 . 3 , these null models also underlie all community detection methods based on modularity maximization [ 108 ] . Across these diverse applications as well as the earlier literatures , diﬀerent applications have tended to employ slightly diﬀerent null models , and these variations make it very diﬃcult to compare and contrast ﬁndings . In the next subsection we introduce a sequence of concrete choices that formalize the decisions underlying the choice of a graph space , and hence a conﬁguration model . Consequences of these decisions are discussed at length in Section 5 through a series of application vignettes . 1 . 5 Choosing a graph space It is often impossible to unambiguously identify an empirical graph as coming from a particular space of graphs ; additional knowledge about the system that produced the graph is almost always required . For example , as shown in Figure 1 , simple graphs are a subset of the other graph spaces , and thus a given simple graph may plausibly lie within any of the spaces , deﬁned by the presence or absence of self - loops , multiedges , and stub - labels . Therefore , in order to choose the appropriate graph space for a null model , we introduce three questions about the graph and the system that produced it . 7 simple ( skip Q3 ) loopy multigraph loopy multigraph (cid:127) two graphs (cid:127) one graph , drawn two ways (cid:127) one valid ; one nonsensical (cid:127) three graphs (cid:127) one graph , drawn three ways (cid:127) one valid ; two nonsensical Question 1 : loops ? Question 3 : vertex - or stub - labeled ? stub - labeled vertex - labeled Q ue s t i on 2 : m u l t i edge s ? These configurations are . . . Figure 2 : Choosing a graph space . Three questions must be answered in order to correctly choose a conﬁguration model graph space . Questions 1 and 2 address whether the graph has , or could possibly have , self - loops and multiedges . If the space permits self - loops , multiedges , or both , then Question 3 addresses whether the space is vertex - labeled or stub - labeled . These questions are explained in detail in the text , Section 1 . 5 . Question 1 : Are there self - loops in the graph ? For example , a citation network consisting of papers ( as vertices ) and their citation relationships ( as edges ) cannot have self - loops since a single paper can never cite itself . On the other hand , a network of authors ( as vertices ) and their citation relationships ( as edges ) may very well have self - loops since authors can , and do , cite their own work . Note that an observed network of authors and their citations ought to reside within a graph space allowing self - loops , even if a particular observed network has no self - loops . However , in some cases , the method of data collection or recording itself may preclude self - loops—even if a self - loop would be reasonable and interpretable—and in such cases , the relevant graph space should not include self - loops . Question 2 : Are there multiedges in the graph ? For example , a network of contacts among barn swallows—analyzed in Section 5 . 2—in which each edge represents an observed inter - action between a pair of birds , may have multiedges corresponding to multiple observations of an interaction between the same pair of birds . On the other hand , a protein - protein interaction network , in which two proteins are connected if they interact , cannot ever have a multiedge since interactions in this context are conceptually boolean . Note that an observed network may reside within a graph space allowing multiedges , even if a particular observed network has no multiedges . However , as in Question 1 , in some cases , the method of data collection or recording itself may preclude multiedges—even if a multiedge would be reasonable and interpretable—and in such cases , the relevant graph space should not include multiedges . If the answers to the ﬁrst two questions are both no , then the space of simple graphs is the appropriate space . For the purposes of sampling from a simple conﬁguration model , there is then no meaningful diﬀerence between vertex - and stub - labeled spaces . One need only to ensure that the graph sampling algorithm correctly samples from the space of simple graphs ( a non - trivial task further discussed in Section 2 ) , due to the fact that any ensemble of vertex - labeled simple graphs can easily be converted into an ensemble of stub - labeled simple graphs , and vice versa ( see Section 4 for further discussion ) . However , if the answer to either of the previous questions was yes , indicating that the graph space contains self - loops , multiedges , or both , we pose a key third question . Question 3 : Is the graph space stub - labeled or vertex - labeled ? Consider a pair of 8 vertices connected by two edges . If swapping the edges so that they cross , as shown in Figure 2 , produces a distinct graph , the space is stub - labeled . Alternatively , if crossing the edges either produces a graph with the same interpretation or produces a nonsensical graph , the space is vertex - labeled . There are a number of instances where a graph should be treated as vertex - labeled rather than stub - labeled . For example , if the stubs are ordered ( e . g . temporally ) in a way that would make swapping nonsensical , the space of graphs is vertex - labeled in spite of the fact that the stubs have identities . Such a situation is commonly encountered when studying a telephone network ( also called a call detail record or CDR ) , where edges represent phone calls between individuals . If a pair of individuals are recorded sharing two phone calls , it is meaningless to consider the crossed graph that connects the stub associated with the ﬁrst call and the ﬁrst individual to the stub associated with the second call and the second individual , as this swap represents a graph that could never have been observed . See Section 5 . 2 for a concrete exploration of these diﬀerences . If , on the other hand , the crossed edges and parallel edges as shown in Figure 2 are distinguishable and plausible , the space of graphs should be stub - labeled . For example , in a network of intermarriages between families or villages , an edge may correspond to an individual from one village marrying an individual from another village . Here , diﬀerent sets of marital pairings are meaningful and distinct , indicating that the graph space is stub - labeled . One alternative approach to answering Question 3 involves considering the adjacency matrix of the graph . For a vertex - labeled space , each graph corresponds to a single , unique adjacency matrix , and each adjacency matrix corresponds to a single , unique vertex - labeled graph . On the other hand , multiple stub - labeled graphs have identical adjacency matrices , and a valid adjacency matrix corresponds to a stub - isomorphism class of stub - labeled graphs , as shown in Figure 1 . Thus , Question 3 may be answered by considering whether the adjacency matrices corresponding to the graph space are unique and distinct objects , or whether repeated adjacency matrices are allowed in the ensemble . Answers to the ﬁrst two questions in this section fully specify whether the graph space is simple , loopy , multigraph , or loopy multigraph , and the answer to the third question determines whether the space is stub - labeled or vertex - labeled . Since , for the purposes of sampling simple graphs or analyzing network properties that are functions of the adjacency matrix , there is no practical dif - ference stub - labeled and vertex - labeled spaces , we may often treat these as equivalent and focus on the seven distinct and non - interchangeable spaces of graphs just described . Organization . In Section 2 we describe space - speciﬁc Markov chain Monte Carlo algorithms that provably generate uniform samples from the graph spaces discussed above . Alternative meth - ods for sampling random graph null models are discussed in Section 3 , and related questions about counting the number of graphs in a given graph space are covered in Section 4 . Section 5 employs the samplers from Section 2 , examining the questions and decisions outlined in this introduction in the context of three separate applications of conﬁguration model null models to study empirical network structure . Readers whose primary interest is understanding the practical consequences of conﬁguration model choices are invited to skip Sections 2 – 4 and go directly to Section 5 , though the earlier sections establish the procedures employed therein . 9 2 Markov chain Monte Carlo Sampling In this section we establish theoretical justiﬁcations for the use of Markov chain Monte Carlo ( MCMC ) methods to uniformly sample from graph spaces with a ﬁxed degree sequence , with speciﬁc considerations for multiedges , self - loops , and vertex - or stub - labeling . In all methods presented in this section , a Markov chain over the desired space of graphs is designed to have a stationary distribution that is uniform over the entire space . We emphasize key diﬀerences between sampling stub - labeled and vertex - labeled graph spaces , and furnish pseudocode for all the MCMC sampling algorithms that we analyze . 4 We begin by reviewing the double edge swap Markov chain method for sampling stub - labeled loopy multigraphs , the easiest space for understanding the validity of the sampling procedure . We outline the three suﬃcient conditions ( regularity , aperiodicity , connectivity ) that combine to establish that random double edge swaps on stub - labeled loopy multigraphs have a unique and uniform stationary distribution . The corresponding lemmas and theorems are then reported , with references provided for known proofs , for stub - labeled simple graphs and stub - labeled multigraphs ( without loops ) . Following the treatment of stub - labeled graph spaces , we then characterize Markov chains with stationary distributions that are uniform over vertex - labeled graph spaces . These chains have not previously been described , though they are closely related to existing methods for sampling the space of contingency tables with ﬁxed marginals [ 134 ] , a problem from the statistics literature and discussed in the introduction . Sampling from spaces of loopy graphs ( without multiedges ) is not discussed in this section . Such spaces lack certain key properties necessary for sampling methods involving double edge swap routines to succeed . We elaborate on this matter in Section 3 , where we also discuss other methods for graph sampling , including alternative Markov chains as well as direct sampling techniques . 2 . 1 Edge swap Markov chains First developed for bipartite simple graphs [ 14 ] and directed simple graphs [ 117 ] , Markov chain traversals of graph spaces are popular ways to sample from a variety of graph spaces [ 96 , 6 , 106 ] . If the Markov chain is constructed so that the stationary distribution of the chain is the uniform distribution over the desired graph space , samples taken from this chain at suﬃciently spaced intervals ( see the discussion of mixing times in Section 2 . 5 ) can be treated as independent uniform samples from the space . The fundamental gadget underlying the approach is a randomized way of generating new graphs from existing graphs . Seemingly rediscovered multiple times [ 65 , 119 , 106 , 16 ] , the most popular way to alter a graph without changing the degree sequence is the double edge swap , ﬁrst suggested by Petersen in 1891 [ 115 ] , and depicted in Figure 3 . Let { u 1 , . . . , u k u } denote the set of edge stubs for a vertex u with degree k u . Across the literature , double edge swaps are also sometimes referred to as degree - preserving rewirings [ 22 , 131 ] , checkerboard swaps 5 [ 126 , 61 , 6 ] , tetrads [ 135 ] or alternating rectangles [ 117 ] . Deﬁnition 4 ( Double Edge Swap , stub - labeled ) . A stub - labeled double edge swap replaces a pair of stub - labeled edges ( u i , v j ) and ( x p , y q ) with stub - labeled edges ( u i , x p ) and ( v j , y q ) . 4 Implementations in Python are available at https : / / github . com / joelnish / double - edge - swap - mcmc 5 Checkerboard swaps are frequently implemented by selecting 4 vertices at random [ 6 ] while double edge swaps choose 2 edges at random . We focus on selecting edges at random as it is more eﬃcient on sparse graphs . 10 Figure 3 : Double edge swaps . Double edge swaps alter a graph’s structure without changing the degree sequence . Each pair of edges may be swapped in two diﬀerent ways : ( left ) ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) and ( right ) ( u , v ) , ( y , x ) (cid:32) ( u , y ) , ( v , x ) . Explicitly labeling stubs emphasizes that the stub - labeled double edge swap diﬀers from its vertex - labeled version . That said , the notation of tracking stubs is largely unnecessary as the exact labels of stubs can be inferred in context and standard network analyses ( of assortativ - ity , modularity , etc . ) do not consider stub labels . For a pair of edges ( u , v ) and ( x , y ) there are two possible swaps , as shown in Figure 3 . As a shorthand , we denote these possible swaps as ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) and ( u , v ) , ( y , x ) (cid:32) ( u , y ) , ( v , x ) . In contrast to arbitrary edge rewires [ 21 ] , double edge swaps preserve the degree distribution of the graph . Notice , however , that some double edge swaps can create self - loops , e . g . ( u , x ) , ( u , y ) (cid:32) ( u , u ) , ( x , y ) , as well as multiedges , e . g . when any produced edge replicates an existing edge . The way such swaps are handled has important consequences for the stationary distribution of the Markov chain . Many of the properties of the double edge swap can be understood as graphical properties of the graph of graphs , the state diagram of the Markov chain in the space of graphs . We construct the graph of graphs associated with a degree sequence by letting each graph with the speciﬁed degree sequence be a vertex and connecting two vertices ( i . e . graphs ) with an edge if one double edge swap can transform one graph into the other . We use G ( k ) or G to generically denote a graph of graphs with a speciﬁed degree sequence k = { k i } i ∈ V . Throughout the text we only consider graph spaces with a given degree sequence , and as a consequence we almost always suppress the degree sequence k from the notation , denoting a graph of graphs as simply G . With a few simple yet crucial modiﬁcations , sampling graphs using a random walk on G creates a Markov chain with a stationary distribution that is uniform over a desired graph space with a given degree sequence . The statements in the following sections can be stated either in the language of Markov chains or in the language of graph properties of G . To prove that samples from the Markov chain asymp - totically obey a uniform distribution over a space of graphs , we show that by correctly specifying state transition probabilities , the chain satisﬁes three conditions : ( i ) that the transition matrix of the chain is doubly stochastic ( G is regular 6 ) , ( ii ) that the chain is irreducible ( equivalently , G is strongly connected 7 ) , ( iii ) and that the chain is aperiodic ( G is aperiodic 8 ) . The regularity of G implies that the stationary distribution is uniform . A Markov chain that is both irreducible and aperiodic ( G is connected and aperiodic ) is said to be ergodic . This property 6 A weighted directed graph is regular if every vertex has the same total out - degree weight and total in - degree weight . For unweighted graphs , regularity implies all vertices have equal degree . 7 A graph is strongly connected if every vertex can be reached from any other vertex . 8 A graph is aperiodic if the greatest common divisor of the lengths of all cycles in the graph is one . 11 guarantees that there is an unique stationary distribution that fully describes the long term behavior of the chain . Aperiodicity of G is often immediate and is particularly important if one wishes to subsample a Markov chain , a common strategy where only an infrequent set of samples ( less sequentially correlated than the full set of samples ) is retained . Once regularity and aperiodicity are established for loopy multigraphs , we show that with the appropriate modiﬁcations to transition probabilities , these properties also hold for the graph of graphs associated with any subspace of loopy multigraphs with a ﬁxed degree sequence , whether vertex - labeled or stub - labeled . In contrast , connectivity of G ( the irreducibility of the Markov chain ) is not always guaranteed , and requires a non - trivial proof for many graph spaces , but is critical to ensuring that all possible graphs are sampled . 2 . 2 Markov chains on stub - labeled loopy multigraphs We begin by considering the simplest graph space for constructing and analyzing double edge swaps , G stubl , m , where stub denotes stub - labeled , m denotes an allowance for multiedges , and l denotes an allowance for loops . Further , let M = 12 (cid:80) i ∈ V k i denote the total number of edges in any graph in the graph space . Deﬁnition 5 ( Graph of loopy multigraphs , stub - labeled ) . For some predeﬁned degree sequence k = { k i } , the graph of stub - labeled loopy multigraphs G stubl , m = { V stubl , m , E stubl , m } is a directed graph , where the vertex set V stubl , m is the set of all stub - labeled loopy multigraphs with degree sequence k and there is a directed edge ( G 1 → G 2 ) ∈ E stubl , m iﬀ there exists a stub - labeled double edge swap that transforms G 1 ∈ V stubl , m into G 2 ∈ V stubl , m . For the space of loopy multigraphs , all edges in the graph of graphs G stubl , m are reciprocated : any double edge swap of distinct edges leads to a graph in the space and the double edge swap on ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) can be undone by the “reciprocal” double edge swap ( u , x ) , ( v , y ) (cid:32) ( u , v ) , ( x , y ) . Note however , that double edge swaps in other spaces are not necessarily reciprocated by the same number of swaps . We now show the three necessary conditions : that G stubl , m is regular , connected and aperiodic . Lemma 1 . G stubl , m is a regular graph . Proof . For each graph G j ∈ V stubl , m there are (cid:0) M 2 (cid:1) pairs of edges and M ( M − 1 ) possible double edge swaps that each correspond to a unique graph - graph transition edge into and out of G j . We immediately see that G stubl , m is M ( M − 1 ) regular , where each vertex has M ( M − 1 ) incoming and outgoing edges . Next , the following lemma , ﬁrst proved by [ 47 ] and largely provided by Newman in [ 106 ] , gives connectivity for stub - labeled loopy multigraphs with any speciﬁed degree sequence . Lemma 2 . G stubl , m is a strongly connected graph . Proof . First , we note that it is possible to permute stub labels using double edge swaps : for a graph G i ∈ V stubl , m with vertex u with degree at least 2 ( vertices with degree 1 have only a single possible stub labeling ) , a double edge swap ( u i , a k ) , ( b (cid:96) , u j ) (cid:32) ( u i , b (cid:96) ) , ( u j , a k ) swaps two labeled stubs of u . Since double edge swaps allow for pairwise swaps of stubs , all possible stub - labelings within a given stub - isomorphism class of graphs are connected within G stubl , m ( or any other stub - labeled space we discuss ) . The remainder of the proof therefore only requires showing that every stub - isomorphism class is connected to every other . 12 To complete the proof , we drop stub labels and will show how to construct a path from any G 1 = ( V 1 , E 1 ) ∈ G stubl , m to any non - isomorphic G 2 = ( V 2 , E 2 ) ∈ G stubl , m such that each step in the path creates and does not eliminate , edges in E 2 . Let (cid:15) 1 , 2 = | E ∗ 1 \ E ∗ 2 | , where the asterisks denote that the stub labels have been dropped from the edge sets . Since (cid:15) 1 , 2 = 0 if and only if G 1 is isomorphic to G 2 , it suﬃces to show that for any non - isomorphic graphs G 1 and G 2 there exists a neighbor of G 1 , G 3 , with (cid:15) 3 , 2 ≤ (cid:15) 1 , 2 − 1 . Since (cid:15) 1 , 2 > 0 there exists ( u , v ) ∈ E ∗ 2 \ E ∗ 1 . However , since the degrees of u and v are , respec - tively , the same in both G 1 and G 2 , there must be edges ( u , x ) and ( v , y ) in E ∗ 1 \ E ∗ 2 . Performing the double edge swap ( u , x ) , ( v , y ) (cid:32) ( u , v ) , ( x , y ) creates a graph G 3 with edge ( u , v ) and thus with (cid:15) 3 , 2 ≤ (cid:15) 1 , 2 − 1 . Since (cid:15) 1 , 2 is ﬁnite , a repeated application of this argument eventually produces a path , and therefore G stubl , m is connected . Lemma 3 . G stubl , m is an aperiodic graph . Proof . If G ∈ V stubl , m has only a single edge , G stubl , m is trivially aperiodic since | V stubl , m | = 1 . If G has two edges ( u , v ) and ( x , y ) then G stubl , m contains both a cycle of length 2 ( because all transitions are reciprocated ) and also a cycle of length 3 : ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) followed by ( u , x ) , ( y , v ) (cid:32) ( u , y ) , ( x , v ) and ( u , y ) , ( v , x ) (cid:32) ( u , v ) , ( x , y ) . The greatest common divisor of the cycle lengths 2 and 3 is 1 , and therefore G stubl , m is aperiodic . The following theorem assembles the above properties to establish the desired uniformity of the MCMC sampler . Theorem 1 . A random walk on G stubl , m is ergodic and has a uniform stationary distribution . Proof . Since G stubl , m is strongly connected ( Lemma 2 ) and aperiodic ( Lemma 3 ) random walks on G stubl , m are ergodic . Since G stubl , m is also regular ( Lemma 1 ) it has the unique stationary distribution (cid:126) 1 | V stubl , m | . Thus , we conclude that a Markov chain deﬁned as a random walk on G stubl , m in fact samples from the uniform distribution of stub - labeled loopy multigraphs , as desired . A similar MCMC approach can sample the other graph spaces under analysis here , though the proofs are slightly more involved . 2 . 3 Markov chains on other stub - labeled graph spaces We now show that with some care it is possible to construct Markov chains deﬁned over the other stub - labeled graph spaces we have discussed such that their stationary distributions are also uniform . We establish this uniformity by deriving state transitions that ensure the chains are regular , connected , and aperiodic . Our results here apply to spaces of either simple graphs or multigraphs with a given degree sequence . The space of loopy graphs ( without multiedges ) with a given degree sequence is not connected by double edge swaps for all degree sequences and so we do not discuss it here ; see Section 3 for more details on that space . Deﬁnition 6 ( Graph of multigraphs and graph of simple graphs , stub - labeled ) . For a degree sequence k = { k i } , the graph of stub - labeled simple graphs G stubs = { V stubs , E stubs } is a directed graph of simple graphs . For distinct G i and G j in V stubs , a directed edge ( G i → G j ) is in E stubs if and only if there exists a double edge swap that transforms G i into G j ; for any double edge swap that would transform G i to a graph G j that is not in V stubs , there instead exists a directed self - loop G i → G i . The graph of stub - labeled multigraphs G stubm is deﬁned similarly for multigraphs , with subscripts of m where appropriate . 13 A critical diﬀerence between the deﬁnitions of G stubs and G stubm compared with the earlier deﬁ - nition of G stubl , m is the inclusion of directed self - loops G i → G i for each swap that would leave the space . This modiﬁcation essentially employs the “swap and hold” [ 6 ] ( also called “trial swap” [ 96 ] ) method to ensure the graph of graphs is regular . 9 Indeed , we will now show that G stubs and G stubm are both regular and both aperiodic . As a result , extending Theorem 1 only requires space - speciﬁc proofs of connectivity , which we provide . Lemma 4 . G stubs and G stubm are regular graphs . Proof . As in Lemma 1 , a graph G i in either space has (cid:0) M 2 (cid:1) pairs of edges , which correspond with M ( M − 1 ) possible double edge swaps . Notice that any possible swap from G i to another graph G j in the space is reciprocated , while any swap that would go to a graph outside of the space corresponds with an incoming self - loop as constructed in the deﬁnition of G stubs and G stubm . Thus , any graph G i in either of these two spaces has in - degree and out - degree M ( M − 1 ) . Lemma 5 . G stubs and G stubm are aperiodic graphs . Proof . If there are any self - loops in the graph of graphs ( where self - loops correspond to rejected swaps ) and the graph of graphs is also connected then it is aperiodic . Meanwhile , if the graph of graphs does not have any rejected swaps ( e . g . when max i ∈ V k i < 2 ) , then it has the exact same structure as G stubl , m and is thus aperiodic by Lemma 3 . Before proving connectivity of the graph of graphs in the next lemma , we note that the proofs of Lemmas 4 and 5 are easily and directly applied to any subspace of stub - labeled loopy multigraphs with ﬁxed degree sequence ( e . g . , subspaces of graphs consisting of a single connected component , or subspaces with a constrained number of triangle motifs ) . However , despite the fact that regularity and aperiodicity are easy to establish for the graphs of graphs corresponding to such subspaces , proofs of their connectivity , if they are possible at all , require more complicated and subspace - speciﬁc constructions , and are considerably more involved . In fact , as noted above , for loopy graphs ( without multiedges ) connectivity does not hold for all degree sequences ; see Section 3 . Below we establish the connectivity of G stubm and G stubs for any given degree sequence . Lemma 6 . G stubm is a strongly connected graph . Proof . The proof that G stubl , m is connected ( Lemma 2 ) can be adjusted very slightly for the absence of self - loops . In the proof of Lemma 2 , if the two edges being considered for a double edge swap share an endpoint vertex then rewiring ( u , x ) and ( v , x ) creates the desired edge ( u , v ) but also the self - loop ( x , x ) , and thus is not a valid swap as it would not stay within the space of loop - free multigraphs . But since x has two edges contained in E 1 \ E 2 and x has the same degree in both the graph G 2 and G 1 , there must exist at least one edge ( x , z ) ∈ E 2 \ E 1 , where z (cid:54) = u , z (cid:54) = v . Rewiring ( u , v ) and ( x , z ) in G 2 produces a neighboring graph G 3 with edge ( u , x ) and thus (cid:15) 1 , 3 ≤ (cid:15) 1 , 2 − 1 . Lemma 7 . G stubs is a strongly connected graph . We do not provide a proof here as this result has been proven independently many times : in 1962 [ 13 ] , stated without proof in 1973 [ 46 ] , proved twice in the same monograph but by diﬀerent authors in 1981 [ 48 , 131 ] , in 1994 [ 16 ] , and most recently in 2010 [ 139 ] . 9 In spaces featuring graphs without self - loops , each graph will have exactly (cid:80) i ∈ V (cid:0) k i 2 (cid:1) swaps that could create self - loops ; thus regularity is preserved if swaps that create self - loops either resample the current graph or are all ignored as possible swaps . There is a computational beneﬁt from ignoring self - loop - creating edge swaps ( as opposed to resampling the current graph ) , but it is likely small for most degree sequences . 14 Theorem 2 . A random walk on G stubm or G stubs is ergodic and has a uniform stationary distribution . Proof . Being regular ( by Lemma 4 ) , connected ( by Lemmas 6 and 7 ) , and aperiodic ( by Lemma 5 ) graphs , random walks on G stubm and G stubs are ergodic and have the unique stationary distributions (cid:126) 1 | V stubm | and (cid:126) 1 | V stubs | respectively . We conclude this subsection on sampling stub - labeled graph spaces with pseudocode for a uniform sampling algorithm . The important distinction between this algorithm and most incorrect algorithms ( see Section 3 . 1 for a further discussion of sampling algorithms known to be non - uniform ) is that incorrect algorithms have a tendency to overlook the resampling step . 10 2 . 4 Markov chains on vertex - labeled spaces For any analysis of simple graph null models , sampling from the vertex - labeled space is equiva - lent to sampling from the stub - labeled space : the two distributions are proportional within stub - isomorphism classes ( see Section 4 for details on this conversion ) . For non - simple graphs , the vertex - labeled and stub - labeled spaces are no longer cleanly proportional , but we show it is pos - sible to adapt the double edge swap MCMC procedures to uniformly sample vertex - labeled graph spaces . We begin with the following deﬁnition , closely related to the double edge swap deﬁned for stub - labeled spaces . Deﬁnition 7 ( Double edge swap , vertex - labeled ) . A vertex - labeled double edge swap replaces pair of edges ( u , v ) and ( x , y ) with edges ( u , x ) and ( v , y ) . As in the stub - labeled setting , the vertex - labeled double edge swap leads to a Markov chain on the graph of vertex - labeled graphs , which we generically denote with G vert ( in contrast with G stub ) . In any graph space , stub - labeled double edge swaps map onto vertex - labeled double edge swaps simply by ignoring the stub - labeling : a vertex - labeled graph of graphs G vert can be created by treating stub - isomorphic graphs within G stub as a single graph in G vert . This construction of G vert gives deﬁnitions for G vertl , m , G vertm , and G verts as agglomerated , weighted , and directed , versions of the stub - labeled graphs of graphs G stubl , m , G stubm , and G stubs , respectively . As a result , they immediately inherit the strong connectivity and aperiodicity properties of their respective stub - labeled spaces , as follows . Lemma 8 . G vertl , m , G vertm , and G verts are strongly connected 11 . Proof . Each of the vertex - labeled graph of graphs can be created by repeatedly combining ver - tices from the analogous stub - labeled graph of graphs until all stub - permutations of the same vertex - labeled graph have been combined together . Since iteratively combining vertices preserves connectivity , G vertl , m , G vertm , and G verts inherit strong connectivity from G stubl , m , G vertm , and G stubs . Lemma 9 . G verts , G vertm , and G vertl , m are aperiodic graphs . Proof . For any ﬁxed degree sequence , the proofs of Lemmas 3 and 5 either apply directly , and thereby establish aperiodicity , or the proofs of Lemmas 3 and 5 do not apply because they necessi - tated double edge swaps between two graphs in the same stub - isomorphism class . However , even in this case , the double edge swap between graphs in the same stub - isomorphism class implies there is a self - loop in the graph of graphs , and the graph of graphs is thus aperiodic . 10 Implementations in Python are available at https : / / github . com / joelnish / double - edge - swap - mcmc 11 Additionally , the graph space which allows multiedges and single self - loops is connected under edge swaps , while the graph space which allows only single edges , but potentially multi - self - loops , is disconnected unde edge swaps for some degree sequences [ 110 ] . 15 a b Figure 4 : Transition probabilities for uniform sampling . The graph of vertex - labeled loopy multigraphs G vertl , m ( { 2 , 1 , 1 } ) contains two possible graphs G 1 and G 2 . ( a ) A random walk on this graph of graphs has P r ( G 1 → G 2 ) = 1 but P r ( G 2 → G 1 ) = 12 and therefore its corresponding Markov chain will not have a uniform stationary distribution since the graph of graphs is not regular . ( b ) If transition probabilities are modiﬁed such that each graph has equal in - degree weight and out - degree weight ( i . e . transition mass ) , and these weights are equal to each other , the corresponding Markov chain will have a uniform stationary distribution and will therefore sample each graph with equal probability . Algorithm 1 stub - labeled MCMC Require : initial graph G 0 , graph space ( simple , multigraph , or loopy multigraph ) Ensure : sequence of graphs G i for i < number of graphs to sample do choose two edges at random randomly choose one of the two possible swaps if edge swap would leave graph space then resample current graph : G i ← G i − 1 else swap the chosen edges , producing G i end if end for While connectivity and aperiodicity of vertex - labeled graphs of graphs follow directly from the properties of the stub - labeled spaces , regularity is more complicated . The analysis of stub - labeled graphs of graphs relied on the fact that each swap had a unique reciprocal swap . This reciprocity is not present in vertex - labeled graphs of graphs . For example , consider G vertl , m on a degree sequence as simple as { 2 , 1 , 1 } . As shown in Figure 4 ( a ) , the graph of graphs G vertl , m ( { 2 , 1 , 1 } ) contains only two possible graphs : G 1 ( with self - loop ( x , x ) and edge ( u , v ) ) and G 2 ( with two adjacent edges ( u , x ) and ( v , x ) ) . Every swap originating in G 1 creates G 2 ( both swaps of ( x , x ) and ( u , v ) create ( u , x ) and ( v , x ) ) , but only one of the two possible swaps originating in G 2 reaches G 1 ( ( u , x ) , ( v , x ) (cid:32) ( u , v ) , ( x , x ) corresponds to G 2 → G 1 while ( u , x ) , ( x , v ) (cid:32) ( u , x ) , ( x , v ) corresponds to G 2 → G 2 ) . If unaltered , a random walk on G vertl , m ( { 2 , 1 , 1 } ) has the non - uniform stationary distribution ( P r ( G 1 ) = 13 , P r ( G 2 ) = 23 ) . Restoring the regularity of G vertl , m ( { 2 , 1 , 1 } ) , as in Figure 4 ( b ) , is achieved by rejecting the swap G 1 → G 2 with probability 12 and instead looping back to G 1 . Figure 4 shows a diﬃculty arising from self - loops ; vertex - labeled swaps of multiedges suﬀer a similar problem with a similar resolution . As we will show , an extra layer of rejection sampling suﬃces to restore the uniform stationary distribution for any vertex - labeled graph . There are two natural ways to implement rejection sampling for vertex - labeled graphs , which we provide in Algorithm 2 and in the supplemental material , Algorithm 3 . The simpler of the two approaches , Algorithm 2 , employs a rejection sampling that modiﬁes all swaps G i → G j , i (cid:54) = j , to have probability 1 M ( M − 1 ) . The following lemma demonstrates that Algorithm 2 achieves this 16 uniform probability on all possible swaps . Lemma 10 . A Markov chain deﬁned by a random walk on G vertl , m , G vertm , or G verts with transition probabilities given by Algorithm 2 has a doubly stochastic transition matrix . Proof . Algorithm 2 randomly selects two edges e 1 and e 2 and also selects one of the two possible ways to swap e 1 and e 2 . The goal is to make all swaps equally probable . If e 1 or e 2 is a self - loop then the potential swap is rejected with probability 12 . If not rejected , then if both edges connect the same vertices ( i . e . e 1 = e 2 ) , the swap is made with probability 2 w e 1 ( w e 1 − 1 ) , where w e 1 is the multiplicity of edge e 1 , and otherwise the swap is made with probability 1 w e 1 w e 2 . If no swap is made or the proposed swap would not change the graph ( e . g . ( u , v ) ( v , v ) (cid:32) ( u , v ) ( v , v ) ) the current graph is resampled by the chain . To see that these rejection probabilities give all swaps an equal overall probability of success , consider the following table of double edge swaps cases , which presents the form of each possible swap , the number of such possible swaps , and the acceptance probabilities used by Algorithm 2 . e 1 , e 2 (cid:32) e 3 , e 4 # possible Pr ( perform swap ) stub - labeled swaps if e 1 or e 2 is a self - loop if e 1 = e 2 if e 1 (cid:54) = e 2 ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) w uv w xy – – 1 / ( w uv w xy ) ( u , x ) , ( x , v ) (cid:32) ( u , v ) , ( x , x ) w ux w xv – – 1 / ( w ux w xv ) ( x , x ) , ( u , v ) (cid:32) ( u , x ) , ( x , v ) 2 w xx w uv 1 / 2 – 1 / ( w xx w uv ) ( u , u ) , ( x , x ) (cid:32) ( u , x ) , ( u , x ) 2 w uu w xx 1 / 2 – 1 / ( w uu w xx ) ( u , x ) , ( u , x ) (cid:32) ( u , u ) , ( x , x ) (cid:0) w ux 2 (cid:1) – 1 / (cid:0) w ux 2 (cid:1) – On a pair of edges containing a self - loop , both swaps result in the same edges post - swap , giving a factor of 2 to the number of possible swaps of that type . Notice also that multiplying the factors in a given row results in the same overall transition mass , 1 , for each row . Thus , every swap is equally likely with probability 1 M ( M − 1 ) and the transition matrix is doubly stochastic . As a direct result of Lemma 10 , the sum of edge weights directed to any graph in G with these transition probabilities equals one . Algorithm 2 can be understood as changing general double edge swap stub - labeled spaces into double edge swap vertex - labeled spaces for any subspace of loopy multigraphs with a ﬁxed degree sequence . Assembling Lemmas 8 , 9 and 10 gives the following theorem . Theorem 3 . A Markov chain on G vertl , m , G vert m , or G vert s with transition probabilities given by Algo - rithm 2 is ergodic and has a uniform stationary distribution . Proof . Lemma 10 gives that (cid:126) 1 | V l , m | , (cid:126) 1 | V m | , and (cid:126) 1 | V s | are the respective stationary distributions ; strong connectivity ( Lemma 8 ) and aperiodicity ( Lemma 9 ) give that the Markov chain is ergodic . We conclude this subsection on sampling vertex - labeled graph spaces with pseudocode for the uniform sampling algorithm , Algorithm 2 , used in the above proofs . A more eﬃcient but more complicated approach is given in Algorithm 3 in the supplemental material . This more eﬃcient algorithm achieves regularity by computing both the forward and reverse probabilities of any given double edge swap according to the cases in Figure 5 . It then down - samples ( rejects ) the higher probability swap to have the same probability as the lower probability swap . For example , in Algorithm 3 a double edge swap of the edges ( u , v ) and ( x , y ) ( on distinct vertices u , v , x , y ) to form ( u , y ) and ( x , v ) is accepted with probability min ( 1 , w uy w xv w uv w xy ) , whereas Algorithm 2 accepts this swap with probability 1 w uv w xy . While Algorithm 3 requires calculating these forward and reverse 17 swaps on 4 vertices swaps on 3 vertices swaps on 2 vertices swaps on 1 vertex Figure 5 : Possible double edge swaps for Algorithms 2 and 3 . Algorithms 2 and 3 can be understood by examining the probabilities of each double edge swap that is possible for a given graph . The diagram’s labeled transitions give the number of possible double edge swaps that transition between each graph , organized by the number of unique vertices involved , where w ij are the edge multiplicities in the originating graph . Uniform sampling of a graph space can be achieved by down - sampling transitions to be equal in both directions . probabilities for each swap , we observe empirically that it mixes substantially faster on degree sequences with higher degrees . 2 . 5 Mixing times As discussed in the previous section , a MCMC sampler based on double edge swaps will eventually sample from G stubl , m , G stubm , G stubs , G vertl , m , G vertm and G verts uniformly . A natural question , and one of practical importance , is how many swaps it takes before a sample from the Markov chain is negligibly correlated with the starting graph . This question is usually studied in the language of mixing time , the number of steps in a Markov chain required to produce a sample a prescribed distance from the stationary distribution of the chain [ 84 ] . A Markov chain on a graph space is said to be rapidly mixing if the mixing time can be expressed as a polynomial in the number of vertices . Empirical investigations tend to support the notion that the mixing times of edge swap MCMC samplers tend to be reasonable and not prohibitive [ 99 , 106 ] . Theoretical investigations have identiﬁed various conditions on the degree sequence k which rigorously support these observations [ 36 , 63 ] . However , the case of general k is yet to be fully understood . As ﬁrst demonstrated in [ 121 ] , the most common argument to derive mixing time bounds uses a multicommodity ﬂow argument , and the most common focus has been on regular simple graphs and regular directed graphs . Thus far , rapid mixing has been proved for double edge swap MCMC methods on simple graphs with regular degree sequences [ 36 ] , regular directed graphs [ 62 ] , and half - regular and almost half - regular bipartite graphs [ 95 , 51 ] . Beyond regular graphs , there are bounds based on the minimum and maximum degrees , which give polynomial mixing in time O ( k 14 max M 9 ( M log ( M ) − log (cid:15) ) ) if 3 ≤ k max ≤ 14 √ M [ 63 ] . A loosely related set of investigations shows that while the shortest paths in G verts can be approximated to within a factor of 7 / 4 , ﬁnding the shortest path is NP - hard [ 16 , 50 ] . 18 Algorithm 2 vertex - labeled MCMC Require : initial graph G 0 , graph space ( simple , multigraph , or loopy multigraph ) Ensure : sequence of graphs G i for i < number of graphs to sample do choose two distinct edges e 1 and e 2 uniformly at random randomly choose one of the two possible swaps if edge swap would leave the graph space then resample current graph : G i ← G i − 1 else P ← 1 if e 1 and e 2 are copies of the same multi - edge then P ← 2 P w e 1 ( w e 1 − 1 ) else P ← P w e 1 w e 2 end if if e 1 or e 2 are a self - loop then P ← 12 P end if if Unif ( 0 , 1 ) < P then swap chosen edges to produce G i else resample current graph : G i ← G i − 1 end if end if end for Mixing time results for non - simple graphs are , by comparison , poorly developed . While stub - and vertex - labeled spaces have diﬀerent transition probabilities and diﬀerent structures , recall that vertex - labeled graphs of graphs can be created by repeatedly merging vertices in the corresponding stub - labeled graph of graphs . As a result , the total diameter of a vertex - labeled graph of graphs G vert is necessarily always smaller than the corresponding stub - labeled graph of graphs G stub , but the additional layer of rejection sampling in vertex - labeled MCMC chains may lead mixing times to be large for degree sequences where multiedges and self - loops are more common . Determining the conditions , if any exist , in which the smaller diameter of vertex - labeled spaces corresponds to faster mixing times is an interesting open question . In practice , there are well - accepted diagnostics to numerically assess the quality of MCMC mixing [ 58 ] . One popular method is to compare the variance inside a sequence to variance across multiple sequences , while other methods analyze the correlation inside a sequence . These diagnos - tics are typically performed on a sequence of graph statistics , rather than directly on a sequence of graphs . One complicating factor of using inter - sequence variation to assess convergence is the diﬃculty in ﬁnding independent starting graphs with which to start the chain [ 20 ] . Ultimately , when considering the potential eﬀect of mixing times , it is important to gauge the risk of a slow mixing time ( and thus a biased sampler ) , against errors associated with uniformly sampling from an inappropriate space , as is often the case with stub - matching . 19 3 Other sampling methods and other null models Edge swap Markov chains are not the only means of sampling from conﬁguration models , nor are conﬁguration models the most appropriate random graph null model for all analyses . In this section we brieﬂy review other techniques for sampling conﬁguration models , as well as other random graph null models that have been usefully employed in other contexts . Very little is known about the adaptation of the methods in this section to vertex - labeled graph spaces , but such adaptations are discussed when known . 3 . 1 Direct sampling and other sampling methods Edge swap Markov chain methods work by randomly manipulating an initial graph to produce a new graph , with the idea being that the stationary distribution of this random process is designed to be uniform over the graph space . In contrast , “direct” methods sample the same space by constructing one graph at a time without any dependence on previous samples . Sampling uniformly from graph spaces is closely related to enumerating the number of graphs in a given space , a task commonly known as graph enumeration [ 10 ] ( see Section 4 for more on these connections ) . The stub - matching procedure pioneered by Bollob´as [ 19 ] , also called the pairing model and dis - cussed in Section 1 . 3 , is an example of a direct method for sampling the space of loopy multigraphs with a given degree sequence . Stub matching begins with a prescribed number of half edges or stubs attached to each vertex in an otherwise empty graph and then randomly joins pairs of unmatched stubs to form a graph . The graph created by this procedure is a uniform sample from the space of stub - labeled loopy multigraphs . For more restricted graph spaces , i . e . those that omit self - loops and / or multiedges , stub match - ing must be adapted . Early work on directly sampling simple graphs with speciﬁed degree se - qeuences focused on regular graphs [ 94 ] , with later results giving approximately uniform sampling for more general degree sequences [ 10 ] . The simplest adaptation of stub matching for restricted graph spaces , e . g . for simple graphs , is to use rejection sampling : complete a stub - matching proce - dure , and if the resulting graph is not in the graph space , reject the sample . This process is repeated until a simple an admissible graph is returned . Using rejection sampling , an unrejected graph is a proper uniform sample from the graph space . Unfortunately , rejection sampling for simple graphs can take exponential time—exponential in the size of the graph—for some degree sequences with degrees that increase in the size of the graph . In contrast to rejection sampling , a more eﬃcient approach is to apply sequential importance sampling [ 17 ] , where edges are possibly rejected dur - ing the construction process ( rather than waiting until the end to reject the output graph ) . The basic idea behind sequential importance sampling is to guide the matching process by rejecting edges that push the stub - matching process toward overrepresented simple graphs . Interestingly , a sequential importance sampling technique whereby each edge is rejected with a probability k i k j 4 M is suﬃcient to approximately sample uniformly for graph spaces where the max degree k max obeys k max = O ( M 1 / 4 − τ ) for some τ > 0 [ 10 ] , but this asymptotic statement does not furnish any clear guarantees for an empirical graph of a ﬁxed size . Other modiﬁcations to stub matching exist , usually posed in the context of creating simple graphs , and each with a mix of desirable and undesirable properties . One approach freely matches stubs , which may create a self - loop or multiedge , but such an edge is immediately removed via a double edge swap [ 83 ] . In contrast to rejection or importance sampling , this loop and multiedge rewiring approach ensures that a graph from the desired space is produced by each full run of the algorithm , which may dramatically improve the rate at which samples are produced . However , it unfortunately biases the sampling in ways that are not yet described or understood . Other methods 20 knowingly generate biased simple graphs via constrained stub - matching , and each sample’s relative probability is calculated in order to perform a posteriori bias corrections that reweight the samples to guarantee uniformity [ 41 ] . Again , there do not yet exist bounds on the convergence of such methods to the uniform distribution desired . More exotic direct sampling procedures include the so - called Go with the Winners algorithm [ 3 ] applied to graph generation [ 99 ] . This method employs stub - matching on a collection of graphs in parallel , replacing failed attempts to create simple graphs with cloned copies of non - failed attempts , eventually producing a set of admissible graphs . Finally , it is possible to deﬁne an alternative Markov chain based on perfect matchings to uniformly sample regular simple graphs [ 71 ] ; this method can be adapted to non - regular degree sequences but without eﬃciency guarantees . Constructive procedures for determining whether a given degree sequence is graphical ( that there exists a simple graph with the given degree sequence [ 57 ] ) , notably the Havel - Hakimi algorithm [ 66 , 64 ] , are highly non - uniform direct sampling procedures . The Havel - Hakimi algorithm is useful as a starting point for MCMC methods in contexts where one starts with a degree sequence but no corresponding simple graph—Havel - Hakimi is guaranteed to eﬃciently produce a simple graph , which one can then use as the initial state of a MCMC method . 3 . 2 Markov chains for sampling other spaces Markov chains other than “double edge swap” chains can be used to traverse other graph spaces with speciﬁed degree sequences , notably spaces of connected graphs , spaces of loopy graphs ( without multiedges ) , and spaces of directed graphs . Loopy graphs ( without multiedges ) . Sampling methods based on the double edge swap Markov chain discussed in Section 2 are unfortunately not suﬃcient for sampling uniformly from the space of loopy graphs with a speciﬁed degree sequence . The main challenge to sampling is that for certain degree sequences the double edge swap Markov chain does not connect the entire space of loopy graphs . For example , the degree sequence { 2 , 2 , 2 } in the space of loopy graphs admits both a triangle graph and a graph consisting of 3 self - loops , but on both graphs it is easy to see that any proposed double edge swaps would create a multiedge . Thus the two graphs in the space are not connected by any sequence of double edge swaps that remain in the space of loopy graphs , and this lack of connectivity applies to both the stub - and vertex - labeled spaces . Generalizing this observation , it is the case that the space of loopy graphs is connected for any degree sequence that can wire a simple graph and is neither the degree sequence of a path , { 2 , 2 , . . . , 2 } , nor that of a clique , { n − 1 , n − 1 , . . . , n − 1 } [ 111 ] . Alternatively , if the Markov chain is modiﬁed to occasionally employ a three - edge triangle - loop swap ( the swap ( u , u ) , ( v , v ) , ( w , w ) (cid:32) ( u , v ) , ( v , w ) , ( w , u ) and the reciprocal swap ( u , v ) , ( v , w ) , ( w , u ) (cid:32) ( u , u ) , ( v , v ) , ( w , w ) ) , a basic modiﬁcation of Algorithm 1 and Algorithm 2 suﬃces to sample uniformly from these spaces ; see [ 111 ] for more details . Connected graphs . Many real - world graphs are connected , either by design ( e . g . the architecture of the Internet [ 91 ] ) or by virtue of how they were measured ( using snowball sampling [ 60 ] or other traversal techniques ) . It is known that double edge swaps can rewire any connected graph to any other with the same degree sequence [ 131 , 16 ] . Therefore , if one correctly rejects swaps that would leave the space of connected graphs then Theorems 2 and 3 would apply . Thus , we can conclude that there exists a double edge swap MCMC sampler of connected graphs whose stationary distribution is the uniform distribution over connected graphs with a prescribed degree sequence . However , there is no computationally expedient way to certify connectivity 12 of the resulting graph for a proposed swap . A useful heuristic solution is to only check connectivity after completing a longer 12 Checking connectivity can be done in O ( (cid:112) | V | ) time with each change to the graph [ 49 ] . 21 reversing a directed triangle 3 edge swap connectivity preserving edge swap a b c Figure 6 : Other varieties of edge swaps . In addition to the double - edge swap , a number of other edge swaps have been used to construct MCMC samplers of speciﬁc spaces . These auxiliary swap routines are necessary to ensure the underlying graph of graphs associated with the chain is connected . ( a ) Markov chains on directed graph spaces require an additional swap that reverses a directed triangle . ( b ) The k - Flipper swap for k = 3 , swapping the endpoints of length - 3 paths , preserves connectivity spaces of connected graphs . ( c ) Swaps involving more than 2 edges enable sampling graph spaces with more complicated constraints . sequence of swaps [ 59 , 136 ] . A more expedient approach for sampling connected simple graphs with a given degree sequence follows from a Markov chain deﬁned by a diﬀerent swap : a k - Flipper Markov chain in a given graph space selects length - k paths uniformly at random ( typically employed with k = 3 , see Figure 6 ( b ) ) and swaps the endpoints of the path [ 88 ] . This swap clearly results in a graph that has the same connectivity before and after the swap . What is less clear is that a chain utilizing this swap does not necessarily explore the full space of connected graphs with a speciﬁed degree sequence ; a chain occasionally utilizing a small additional swap ( dubbed the bowtie swap ) is required to ensure that the graph of graphs is connected , and thus samples the entire space of connected graphs [ 52 ] . This chain has a uniform stationary distribution , and some mixing time results are known under mild assumptions [ 52 ] . Of note , k - Flipper techniques cannot be extended ( in any obvious way ) to graph spaces that allow self - loops as a k - Flipper swap is unable to ever create a self - loop . Studies of the space of connected graphs have been focused on simple graphs , and it is an open question to understand what role the choice of stub - labeling vs . vertex - labeling has in studies of connected multigraphs . Directed graphs . Sampling directed graphs using edge swap Markov chains introduces new subtleties that are not present when sampling undirected graphs . Most importantly , a directed graph has two separate degree sequences , the in - degree sequence and out - degree sequence , and one may wish to ﬁx either or both of these . The two sequences are coupled because the sum of the graph’s in - degree must equal the sum of its out - degrees . Furthermore , in order for a graph of directed graphs to be connected under edge swaps , a directed triangle reversal swap is needed , Figure 6 ( a ) , which reverses the direction of a three - edge cycle [ 75 , 117 , 78 ] . Sampling both stub - labeled and vertex - labeled directed graphs builds on a similar theoretical framework as undirected graphs [ 25 , 26 , 27 ] . Broadly speaking , as richer network models are considered the sensible value of uniform dis - tributions as statistical null models decreases . Developing an appropriate null model for richer networks , where directed graphs are one example , requires carefully considering and modeling a hypothesized generative processes . For example , a directed version of a citation network should roughly obey causality constraints ( cycles would indicate past papers citing future papers ) , and the statistical properties of such a network might be best captured by comparing it to the output of generative model that explicitly accounts for publication date . 22 3 . 3 Distributions over graphs with edge weights In applications , graphs often have scalar weights associated with their edges . In some special cases , these weights are integers and can be interpreted as the number of edges between vertices . The graph then is , in fact , a multigraph and the techniques discussed thus far may be applied directly . However in all other cases , where the weights do not have a natural edge multiplicity interpretation , specifying a null model becomes substantially more diﬃcult . In particular , a decision must be made regarding whether the null model should preserve just vertex degrees , or both vertex degrees and vertex total weight ( the sum of the edge weights associated with a vertex ) . Even in the former , simpler case , a null model that preserves vertex degrees must choose carefully how to additionally randomize the edge weights . To see the diﬃcultly of this problem , consider any double - edge swap process where at least two edge weights are distinct . The original weights could be assigned at random to the pair of rewired edges , corresponding to a null model in which edge existence and edge weight are entirely independent , but this would not preserve the total weight associated with the involved vertices . On the other hand , edge existence and edge weights could be chosen to be coupled in some way , but that requires actively placing assumptions on the nature of the relationships . In general , devising a procedure that preserves vertices’ degrees and their total weights while randomizing the edges and weights is an open problem . 3 . 4 Other distributions over graph spaces Lastly , we note other varieties of distributions over graph spaces that are sometimes employed as null models . Most of these models depart from conﬁguration models in that the constraint to an exact degree sequence k = { k i } i ∈ V is relaxed . Often these models exhibit speciﬁed well - studied degree sequences in expectation . The random graph model most closely related to conﬁguration models is the Chung - Lu model [ 32 ] . Rather than being speciﬁed by a ﬁxed degree sequence , the Chung - Lu model is parametrized by a sequence of expected degrees , and for most well - behaved degree sequences the model correctly samples graphs with these expected degrees . In the context of producing simple graphs , one can also generate a graph via stub - matching and then remove all self - loops and / or multiedges that have been generated , a procedure called the erased conﬁguration model or Molloy - Reed conﬁguration model [ 102 , 109 ] . Deleting an edge necessarily changes the degree sequence , and thus this technique will not sample only graphs with the speciﬁed degree sequence . For suﬃciently bounded degree sequences , it has been shown that asymptotically there will be only O ( 1 ) such deletions in large graphs [ 102 ] . Thus , when the degree sequence lacks large degrees and for applications robust to a small number of edge deletions , the erased conﬁguration model may provide a suitable approximation to the uniform distribution over simple graphs . A separate and signiﬁcant literature on random graph null models studies ensembles of graphs that are the result of random growth processes . The Price model [ 39 , 40 ] , also known as the preferential attachment model [ 8 ] , generates random graphs with heavy - tailed degree sequences ( though many other generative processes also generate such degree sequences [ 101 , 33 ] ) . Graphs generated by the Price model have very diﬀerent structural properties than graphs generated by conﬁguration models with the same expected degree sequence : asymptotically almost surely , graphs generated by the Price model are somewhere dense , while for the corresponding degree sequences , graphs generated by the erased conﬁguration model ( or Chung - Lu model ) are nowhere dense ( and in fact have bounded expansion , a stronger property ) with high probability [ 42 ] . In other words , 23 graphs that are common under one model are extremely rare under the other , and vice versa . Other network growth processes include uniform growth [ 23 ] , again resulting in graphs with properties diﬀerent from graphs grown under the Price model . For empirical graphs that may have resulted from a growth process , comparing the properties of the graph to the properties of an ensemble of random graphs generated from a growth model may be appropriate . Many null models other than conﬁguration models are sampled using Markov chains . For example , Markov chains can be constructed to sample graphs with ﬁxed degree - degree correlations , speciﬁcally by specifying each sampled graph to have a ﬁxed joint degree - degree matrix 13 [ 4 , 125 , 37 ] ; direct sampling methods exist for this space as well [ 9 ] . There is a non - trivial relationship between graphs with ﬁxed degree - degree matrices and connected graphs : connectivity imposes constraints on a degree - degree matrix , e . g . a connected graph of more than three vertices cannot have any degree - one – degree - one connections . Swaps that involve more edges ( e . g . Figure 6 ( c ) ) have been tailored to attempt to satisfy more complex constraints such as a ﬁxed number of triangles or ﬁxed component sizes [ 130 ] . However , even many - edge swaps may fail to connect the space for some constraints . For instance , the space of graphs with a ﬁxed number of triangles is disconnected , even for triple or quadruple edge swaps [ 110 ] . Another approach is to allow graphs which break some constraints , but bias edge swaps towards satisfying constraints , such as those used to sample graphs which satisfy constraints on the counts of arbitrary subgraphs of ﬁxed size [ 112 ] . Exponential random graph models ( ERGMs ) furnish non - uniform distributions over graph spaces that increase the relative probability of observing certain structural properties , and are typically sampled using Markov chain methods [ 122 ] , though the mixing times of these chains are sometimes known to be very poor [ 15 , 30 ] . ERGMs generally focus on simple graphs , though some recent work has extended ERGMs to multigraphs [ 43 , 77 , 29 ] ; identifying diﬀerences between ERGMs speciﬁed in vertex - labeled vs . stub - labeled spaces is an open question . A diﬀerent non - uniform triadic closure Markov Chain , related to the Strauss model ( a speciﬁc ERGM ) [ 128 ] , has also been proposed and studied for its abilities to replicate empirical subgraph frequencies in social networks [ 132 ] . Lastly , there is an enormous literature on models of community structure in networks . The most prominent such model is the stochastic block model [ 67 ] , which generalized the aﬃliation model [ 55 ] . The stochastic block model has also been adapted to model overlapping ( mixed - membership ) com - munity structure [ 2 ] , community structure in bipartite networks [ 80 ] , and hierarchical community structure [ 114 ] . Other related graph null models include the degree - corrected stochastic block model [ 73 ] and the block two - level Erd˝os - R´enyi ( BTER ) model [ 76 ] . The degree - corrected stochastic block model merges the stochastic block model with techniques from the Chung - Lu model to target an expected degree sequence . 4 Graph enumeration Graph enumeration—counting the number of graphs within a space—relates directly to the uniform sampling problems discussed in this paper . Given a vertex - labeled graph G , we can calculate the number of stub - labeled graphs that are isomorphic to G , highlighting the diﬀerence in size and composition between stub - and vertex - labeled spaces , as shown , for example , in Figure 1 . By eﬃciently enumerating this correspondence , it is possible to use a simple reweighting scheme to convert a uniform sample taken from one graph space to a uniform sample under another graph 13 A degree - degree matrix is a matrix C where entry C k , k (cid:48) denotes the number of edges between vertices of degree k and vertices of degree k (cid:48) . A graph with a given degree - degree matrix also has a ﬁxed degree sequence , which can be easily reconstructed from the degree - degree matrix [ 125 ] . 24 space . While theoretically sound , this approach can fail dramatically in practice for many graph spaces . Graphs that are frequent in one distribution can be enormously diﬀerent from the graphs that are frequent under the other distribution , meaning that unreasonably large sample sizes are required to overcome biases ; see Section 5 . 1 for an illustration of this with an empirical degree sequence from a collaboration network . Labeled graph spaces . The correspondence between vertex - labeled and stub - labeled graph enu - merations is straightforward . For a vertex - labeled graph G = ( V , E ) with a degree sequence k = { k i } , we deﬁne q simple ( G ) as the number of stub - labeled simple graphs that correspond to a vertex - labeled simple graph G . The set of k i stubs for vertex i can be arranged in k i ! unique permutations , and this simple counting argument applied to the entire vertex set shows that : q simple ( G ) = n (cid:89) i = 1 k i ! . ( 1 ) This count depends only on the degree sequence { k i } and not any other property of G . In other words , for a ﬁxed degree sequence we see that each graph G in the vertex - labeled space has the same number of stub - labeled graphs that correspond to it . Notice that this is true of the two simple graphs examples in Figure 1 ( d , e ) . As a result , for simple graphs—and only for simple graphs—the relative sizes of the the isomorphism classes are the same in the vertex - labeled and stub - labeled spaces . Thus , an ensemble of random vertex - labeled simple graphs can be converted into a sample of stub - labeled simple graphs by randomly assigning stub - labels to each graph in the ensemble , and an ensemble of stub - labeled simple graphs can be regarded as a sample of vertex - labeled simple graphs by simply ignoring stub labels . For graphs with multiedges or self - loops , it is still possible to count the number of stub - labeled graphs that correspond to each vertex - labeled graph , but now the multiplicity depends on more than just the degree sequence . The quantities are derived by adjusting q simple ( G ) , the numerator in each quantity , for the number of identical conﬁgurations involving multiedges and / or self - loops . Let w ij be the integer number of edges between vertices i and j . For a single self - loop w ii = 1 , again counting the number of edges . The multiplicities for each space are then as follows : q loopy ( G ) = q simple ( G ) × 1 (cid:81) ni = 1 w ii ! ( 2 w ii ) ( 2 ) q multi ( G ) = q simple ( G ) × 1 (cid:81) i < j w ij ! ( 3 ) q loopy multi ( G ) = q simple ( G ) × 1 (cid:81) ni = 1 w ii ! ( 2 w ii ) × 1 (cid:81) i < j w ij ! . ( 4 ) The conversion factors in the equations above can be enormous , illustrating that , as stated above , the graphs that are prevalent in one distribution can be extremely diﬀerent from those that are prevalent in the other distribution . As a result , a conversion between stub - labeled and vertex - labeled spaces is an infeasible approach to sampling from the less easily sampled space . Unlabeled graph spaces . For any enumeration related to the space of unlabeled graphs ( iso - morphism classes , see Figure 1 ( c ) , eﬃcient counting is unfortunately infeasible . Let p simple ( G ) be the number of vertex - labeled simple graphs that correspond to an unlabeled graph G . It is well known that p simple ( G ) = n ! / | Aut ( G ) | , where | Aut ( G ) | is the size of the automorphism group of G , i . e . the number of distinguishable vertex graph labelings . Determining | Aut ( G ) | is polynomial - time equivalent to determining if two vertex - labeled graphs in the group are isomorphic [ 93 ] , making it as computationally diﬃcult as the famous graph isomorphism problem [ 7 ] , for which the best known 25 algorithm is quasipolynomial . Enumerating the size of the isomorphism class for loopy graphs , multigraphs , and loopy multigraphs is at least as hard . Thus , there are no known practical and eﬃcient means of transferring between unlabeled and labeled graph spaces . This reasoning also tells us that any sampling method that could produce a uniform sample from the space of unlabeled graphs G with a speciﬁed degree sequence would furnish a way to count | Aut ( G ) | , and thus must take at least quasipolynomial time ( unless graph isomorphism is in the complexity class P ) . It is therefore unlikely that the uniform distribution over unlabeled graphs will see a polynomial time direct sampler , or a Markov chain sampler with a polynomial mixing time . 5 Applications In this section we use three real - world examples that demonstrate how a conﬁguration model can be used as a null model , employing the sampling procedures outlined in Section 2 , and how the choice of graph space can have substantial impact on hypothesis tests and scientiﬁc conclusions . The ﬁrst example studies a graph of collaborations among researchers to show that the choice of null model graph space greatly impacts null distributions of degree correlations , leading to varying conclusions about the meaning of the observed degree correlation in the network . The second example studies a graph of interactions among barn swallows to show that the choice between vertex - labeled and stub - labeled spaces is non - trivial and directly impacts conclusions about the underlying animal behavior . Finally , the third example uses a graph of social support in South Indian villages to demonstrate that the vertex clusters found by modularity maximization , a popular community detection method traditionally based on the stub - labeled loopy multigraph conﬁguration model , are sensitive to the choice of underlying graph space . Together , these examples illustrate the practical diﬀerences between graph spaces and show how the methods presented in this paper can be applied 14 . 5 . 1 Degree assortativity in a collaboration network Degree assortativity measures the extent to which pairs of connected vertices tend to have similar degrees . This degree - degree correlation is an easily computable and single - valued summary of edge patterns in a graph , and it has been used to shed light on the organizational diﬀerences between broad categories of social , biological , and technological networks [ 105 , 106 ] . It is most commonly computed as the Pearson correlation between degrees of vertices that are connected in the network . It is deﬁned as r = 1 M (cid:80) ( u , v ) ∈ E k u k v − µ 2 k σ 2 k , ( 5 ) where µ k and σ 2 k are the mean and variance of the vertex degrees across stubs in the network . Positive degree - degree correlations ( r > 0 ) are commonly interpreted as degree assortativity , while negative correlations ( r < 0 ) are interpreted as degree disassortativity , but meaningful interpreta - tions of r require that we ﬁrst quantify the possibility that degree - degree correlations are solely a consequence of the speciﬁc degree sequence ( see , for example , structural disassortativity described in [ 18 ] ) . In this application of conﬁguration models , we show that not only does the choice of graph space dramatically shift the null distribution of degree - degree correlations , but that it can even aﬀect the sign of the expected value of the correlation and eﬀectively invert the conclusions drawn from hypothesis tests . 14 Results in this section utilize code available at https : / / github . com / joelnish / double - edge - swap - mcmc with con - vergence assessed via trace plots , autocorrelation , and eﬀective sample size analyses . 26 −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r S i m p l e g r aph s D en s i t y −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r Loop y g r aph s D en s i t y −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r M u l t i g r aph s D en s i t y −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r Loop y m u l t i g r a p h s D en s i t y −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 50 100 r Stub - labeled Vertex - labeled note : for simple graphs and statistics based on the graph adjacency matrix , stub - labeled vertex - labeled ≡ Figure 7 : Degree assortativity of the geometers collaboration network . Distributions of degree assortativity corresponding to conﬁguration models over various graph spaces are shown in grey , and the degree assortativity of the geometers collaboration graph is shown in blue . The thick red border around the vertex - labeled multigraph panel indicates the space chosen by answering the three guiding questions listed in Section 1 . 5 . For the spaces of multigraphs and loopy multigraphs , the conﬁguration models uses the degree sequence of the multigraph collaboration network , while for the spaces of simple graphs and loopy graphs , the conﬁguration models uses the degree sequences of the simpliﬁed collaboration network . Due to the fact that degree assortativity is a function of the graph adjacency matrix , distributions of assortativity over simple graphs ( top row ) are identical for both stub - and vertex - labeled spaces . Degree assortativity is common in social networks , and collaboration networks are commonly thought to be no exception , due to collaborations between extremely productive researchers . Here we consider a collaboration network among computational geometry researchers , where vertices represent researchers and edges represent co - authorship on a paper or book . The data come from the Computational Geometry Database [ 72 ] and consist of 9 , 072 vertices and 22 , 577 edges . In a collaboration network a c - author publication induces a c - clique in the graph , because every pair of the c co - authors will share an edge , c ( c − 1 ) / 2 edges in total from a c - author publication . A collaboration network is naturally a multigraph since researchers often collaborate on multiple papers together , but there are no self - loops by construction . In Section 1 . 5 and Figure 2 , we listed and considered three questions to guide the choice of graph space , which we now answer in order . First , due to the construction of the collaboration graph , the network does not allow self - loops . Second , geometers can co - author multiple papers , so the network allows for multiedges . Third , the crossing of two edges in the multigraph is nonsensical—it is meaningless for author A’s ﬁrst collaboration with author B to be matched with author B’s second collaboration with author A , and vice - versa—and therefore this collaboration network should be considered to be a vertex - labeled multigraph . 27 Although the collaboration network is a multigraph , a researcher might consider “simplifying” the observed network into the space of simple graphs by removing all duplicate edges between pairs of vertices , or equivalently thresholding all edge multiplicities at one . Although not applicable here , if the observed graph were to contain self - loops , an analogous removal of self - loops would be necessary to “simplify” the graph . Networks are sometimes simpliﬁed for convenience , stemming from a desire to analyze a binary simple graph using familiar tools . Simpliﬁcation may also have a scientiﬁc basis , if , for example , the question of interest did not concern the number of relations between a pair of vertices but only whether or not any relation existed . Regardless , we demonstrate here that the decision to simplify can greatly impact conclusions . Figure 7 shows distributions of degree assortatitivity over the diﬀerent conﬁguration models de - scribed in this paper , where the correlations of the empirical graphs ( the original and the simpliﬁed ) are shown as blue dashed lines , and the null distributions based on correctly sampled conﬁguration models ( Section 2 ) are shown as grey probability densities . 15 Note immediately that many of the null distributions in Figure 7 have almost no overlap in their distributional mass , illustrating two key practical implications of null model selection . First , comparing the panels in each column illustrates a direct impact of the inclusion or exclusion of self - loops and / or multiedges . Second , comparing the panels in each row indicates that , although the space of vertex - labeled graphs is nested within the space of stub - labeled graphs , the frequency at which each vertex - labeled graph appears in the stub - labeled space is so dramatically non - uniform that the ranges of degree - degree correlations under each null distribution appear disjoint . Most importantly , the null distribution diﬀerences shown in Figure 7 lead to conﬂicting study conclusions . All four stub - labeled conﬁguration models—which our decision framework identify as incorrect models—suggest that the observed collaboration graph is far more assortative than a random graph with the same degree sequence . However , this conclusion is dramatically tempered when using the vertex - labeled multigraph conﬁguration model that was identiﬁed by answering the three questions of Section 1 . 5 . Furthermore , if one incorrectly allowed self - loops and sampled the space of vertex - labeled loopy multigraphs one might erroneously conclude that the collaboration network was slightly dis assortative . The dramatic variation of degree - degree correlations among null models , shown in Figure 7 , highlights the importance of correctly choosing a graph space , and avoiding the default null model of stub - labeled loopy multigraphs associated with straightforward stub matching . 5 . 2 Trait assortativity in a barn swallow interaction network Trait assortativity measures the extent to which pairs of connected vertices tend to have simi - lar scalar - valued traits . This pairwise correlation is calculated using the same formula as degree assortativity in Eq . ( 5 ) , but with degrees replaced with trait values [ 105 , 106 ] . As with degree assortativity , measurements of trait assortativity provide clues as to how particular traits are re - lated to the arrangement of a network’s edges . And again , as with degree assortativity , large or small values of trait assortativity are uninterpretable without ﬁrst understanding the distribution of values which might be observed by random chance . In this application of conﬁguration models , we show once more that scientiﬁc conclusions are highly sensitive to the graph space chosen as a null model , applying the methods of this paper to a multigraph of interactions among barn swallows and a trait that quantiﬁes the birds’ plumage color . Past studies have shown that plumage color of the Colorado barn swallow ( Hirundo rustica 15 Although the space of loopy graphs is not necessarily connected under double - edge swaps , it can be shown to be connected for the degree sequence of this collaboration network , allowing the use of Algorithm 2 or 3 from Section 2 ; see [ 111 ] for details . 28 erythrogaster ) is associated with reproductive success [ 120 ] , but it is unknown if this is due to genetic incompatibility between birds of diﬀerent colors or if it is due to the preferential mixing of birds by color . To investigate whether there is evidence that swallows preferentially interact with other swallows of similar color , we consider network and trait data describing a population of 17 Colorado barn swallows collected during the 2014 breeding season [ 86 ] . Each vertex in the network represents a swallow , and each edge represents an interaction : an interaction was recorded between bird pairs whenever their proximity tags registered a close encounter , with interactions aggregated over 15 hours and measured across three days [ 85 , 86 ] . Researchers also recorded the color of each bird’s ventral plumage as a scalar , standardizing colors between bird sexes . To determine whether birds of similar color interacted more than one would expect by chance , while controlling for the fact that some birds have higher interaction counts than others , we compare the observed assortativity by color to the distribution of assortativity values for networks with identical degrees ( i . e . , interactions counts ) but with their interactions randomized . We now apply the three questions of Section 1 . 5 and Figure 2 to guide the choice of null model graph space . First , due to the fact that a bird cannot interact with itself , the network does not allow for self - loops . Second , because pairs of swallows may interact multiple times during the data collection period , the network allows for multiedges . Third , the crossing of two edges in the multigraph is nonsensical due to their temporal ordering—it is meaningless for bird A’s ﬁrst interaction to be paired with bird B’s second interaction , and vice - versa—and therefore this interaction network is a vertex - labeled multigraph . As in the previous application , a slight change in the scientiﬁc question could change the graph space selected by the three questions . Speciﬁcally , if the researchers wished to determine whether birds of similar color tended to ever interact with each other , the network should be “simpliﬁed” by reducing all multiedges to single edges , creating a vertex - labeled simple graph in which an edge is present between any pair of swallows that interacted at any point during data collection . It is tempting to think that this simpliﬁcation will not be impactful—after all , only 34 % of interacting bird pairs interacted more than once , and only 11 % interacted more than twice . However , we now show that this is not the case . Figure 8 shows color assortativity distributions for the simple graph conﬁguration model and for vertex - labeled and stub - labeled multigraph conﬁguration models , as well as p - values for the corre - sponding one - sided hypothesis tests testing for positive color assortativity ( i . e . whether swallows of similar color preferentially interact ) . Thus , in each case the p - value is equal to the proportion of the null distribution graphs with assortativity values greater than the observed value ; small p - values are indicative that the observed assortativity is noteworthy . Once more , the choice of conﬁgura - tion model has a substantial and signiﬁcant impact on the null distributions of color assortativity . An analysis based on simple graphs would conclude that the presence or absence of interaction is signiﬁcantly correlated with plumage color ( p = 0 . 001 ) . However , the related analysis based on vertex - labeled multigraphs—the analysis identiﬁed by the three questions from Section 1 . 5— concludes that there is no evidence that the number of interactions is signiﬁcantly correlated with plumage color ( p = 0 . 852 ) . This application reveals another , more subtle aspect of choosing a graph space . Due to the fact that both degree and trait assortativity are computed as a Pearson correlation , it is often assumed that in the absence of correlations , i . e . , when edges are placed at random , r = 0 [ 105 ] , and that r > 0 and r < 0 indicate assortative and disassortative mixing patterns , respectively . However , as shown in Figures 7 - 8 , zero is the incorrect point for comparison ; the distribution of color assortativity in Figure 8 is centered around zero for only one of the three graph spaces shown . Moreover , the simpliﬁed network has a near - zero assortativity , indicated by the blue dashed line , yet when compared with its null distribution from a simple conﬁguration model , it is clear that the 29 −0 . 6 −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 . 6 0 1 2 3 45 r Stub - labeled S i m p l e g r aph s D en s i t y p = 0 . 001 −0 . 6 −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 . 6 0 12 3 45 r M u l t i g r aph s D en s i t y p = 0 . 608 −0 . 6 −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 . 6 0 1 2 3 45 r p = 0 . 001 Vertex - labeled −0 . 6 −0 . 4 −0 . 2 0 . 0 0 . 2 0 . 4 0 . 6 0 12 3 45 r p = 0 . 852 note : for simple graphs and statistics based on the graph adjacency matrix , stub - labeled vertex - labeled ≡ Figure 8 : Color assortativity of the barn swallow interaction network . Null distributions of color assortativity associated with the uniform distribution over simple graphs , stub - labeled multigraphs , and vertex - labeled multigraphs . The vertical blue line denotes the observed assor - tativity for the simpliﬁed ( top row ) original ( bottom row ) barn swallow networks . The thick red border around the vertex - labeled multigraph panel indicates the space chosen by answering the three guiding questions listed in Section 1 . 5 . Also depicted are the ( upper - tailed ) p - values , i . e . the proportion of the null distribution assortativity values that are greater than the respective ob - served assortativity . Due to the fact that trait assortativity is a function of the graph adjacency matrix , distributions of assortativity over simple graphs ( top row ) are identical for both stub - and vertex - labeled spaces . interaction presence / absence ( simple ) network is signiﬁcantly assortative by plumage color . Thus , the choice of conﬁguration model aﬀects not only the scientiﬁc hypothesis being tested and its conclusion , but also the baseline against which we should anchor our intuition for correlations in networks . 5 . 3 Community detection in a South Indian village social support network Community detection is a fundamental task of network science in which the vertices are divided into groups ( also called clusters or communities ) based solely on the patterns of edges . Often , communities are deﬁned as groups of vertices that are more densely connected to each other than one would expect by chance . Community detection provides a course - grained summary of the network which enables further study of its large - scale organization and may also reveal correlations between vertex attributes and global network structure . Partitions of vertices produced by community detection have been used in a wide variety of applications , including studies of large - scale online social network structure [ 82 ] , evolutionary constraints of malaria parasites [ 79 ] , and constructing experimental treatment groups for randomized controlled trials on networks [ 133 ] . There are many approaches to community detection in networks [ 54 ] , with one of the most popular being modularity maximization [ 108 ] . Modularity measures the strength of community structure in a network for a particular division of the vertices into groups , and its maximization is based on the premise that communities are groups of vertices that are more densely linked to each other than one would expect by chance—that is , than one would expect , were the edges of 30 the network arranged randomly . More precisely , modularity is the average diﬀerence between the observed network adjacency matrix A and its expectation E [ A | k ] , under a conﬁguration model null model , across all within - group edges in the network . In particular , modularity assumes a stub - labeled loopy multigraph conﬁguration model , for which the expected number of edges between any two vertices i and j , with degrees k i and k j , respectively , would be E stubl , m [ A ij | k ] = k i k j / 2 M . 16 The widely used modularity Q is therefore deﬁned as Q = 1 2 M (cid:88) i , j (cid:18) A ij − k i k j 2 M (cid:19) δ ( g i , g j ) , ( 6 ) where A is the network adjacency matrix , g i is the community assignment of vertex i , and δ is the Kronecker delta which restricts the sum to within - group edges . The null model of modularity maximization , as it is written above , is the space of stub - labeled loopy multigraphs , yet this space is not necessarily an appropriate null model for many real - world networks . Modularity is often used to analyze simple graphs , and this can lead to unexpected or undesirable community partitions [ 92 , 22 ] . If a simple graph is suﬃciently large , suﬃciently sparse , and its degree sequence is suﬃciently bounded , then the expected number of edges between two vertices in the space of simple graphs is asymptotically the same as the expectation in the space of stub - labeled loopy multigraphs , i . e . E s [ A ij | k ] ≈ k i k j / 2 M [ 107 ] ( where s denotes simple graphs ) . Thus , Eq . ( 6 ) will produce asymptotically correct values for simple graphs . However , for ﬁnite simple graphs , we lack guarantees about the accuracy of Eq . ( 6 ) . The deﬁnitions and methods introduced in this paper now enable us to estimate these expectations to arbitrary accuracy by ﬁrst identifying the correct graph space ( Section 1 . 5 ) and then sampling from it appropriately ( Section 2 ) . We now show that the choice of conﬁguration model , and in particular the choice of a vertex - labeled model , meaningfully changes the results of community detection . For this investigation we analyzed a network of social support relationships in a pair of South Indian villages collected by Power [ 116 ] . The number of edges between two members of the villages corresponds to the number of diﬀerent social supports between them . Due to the diﬀerential meaning of each support , for a pair who share m mutual supports , there are m possible ways these can be shared , not m ! . Thus , the dataset indicates that it belongs to the space of vertex - labeled multigraphs by answering the questions of Section 1 . 5 : self - loops are nonsensical , multiedges exist , and vertices are labeled but stubs are not . In order to redeﬁne modularity for an arbitrary graph null model , we rewrite the expected number of edges between two vertices of degree k and k (cid:48) as E [ C k , k (cid:48) ] / n k n k (cid:48) , where n k is the number of vertices in the network with degree k and E [ C k , k (cid:48) ] is the expected number of edges between all vertices of degrees k and k (cid:48) respectively under the speciﬁed null model . We then rewrite modularity in generic form , based on E [ C k , k (cid:48) ] , Q generic = 1 2 M (cid:88) i , j (cid:18) A ij − E [ C k i , k j ] n k i n k j (cid:19) δ ( g i , g j ) . ( 7 ) To change the null model , we need only change the distribution of graphs over which E [ C k , k (cid:48) ] is deﬁned . For most graph spaces , an analytical expression for E [ C k , k (cid:48) ] is unknown , but by using the MCMC techniques of Section 2 , we can estimate E [ C k , k (cid:48) ] for any graph space discussed in this 16 Expectations over the Chung - Lu model [ 32 ] and expectations over the stub - labeled loopy multigraph conﬁguration model are identical under a mild assumption on the skew of the degree distribution , that max i , j k i k j / (cid:80) (cid:96) k (cid:96) ≤ 1 . Thus , for stub - labeled loopy multigraphs , either model may be used to produce the estimate k i k j / 2 M , but as we shall see , this is not the case for other graph spaces , for which the Chung - Lu model cannot be used . 31 paper . Speciﬁcally , for each sample graph , and for all degrees k and k (cid:48) in the degree sequence , we tally the number of edges between vertices of degrees k and k (cid:48) and then average these counts over all samples to estimate E [ C k , k (cid:48) ] . Figure 9 ( a ) shows the non - uniform diﬀerences between E [ C k , k (cid:48) ] for the stub - labeled loopy multi - graph and the vertex - labeled multigraph . In particular , edges between vertices with more disparate degrees are more common under the standard stub - labeled loopy multigraph space than the vertex - labeled multigraph space . As a result , the vertex - labeled multigraph modularity function favors grouping connected vertices with diﬀering degrees more than the stub - labeled loopy multigraph modularity function . The vertex - labeled multigraph null model meaningfully changes the land - scape of the modularity objective function , which we demonstrate by studying the behavior of two diﬀerent modularity maximizing algorithms . The ﬁrst algorithm , based on the Kernighan - Lin algorithm , begins with a random partition of the network’s vertices into a ﬁxed number of communities . Then , a deterministic local search proceeds by sequentially proposing to move each vertex into each of the other communities . The proposal that most increases or least decreases modularity is accepted and a single full iteration is completed when every vertex has been forced to moved exactly once . The highest modularity partition from one iteration is then used to seed the next iteration , and the algorithm exits when a full iteration passes with no improvement . For our investigation we recorded the ﬁnal partition returned by the algorithm for K commu - nities , where K = 2 , 3 , . . . , 10 , beginning from 100 random initial partitions and using Eq . ( 6 ) as the objective function . Next , starting from the same 100 initial partitions , we recorded the ﬁnal partitions using Eq . ( 7 ) as the objective function . The two objective functions produced diﬀerent ﬁnal partitions from the same initial partitions in a vast majority of cases for K > 2 , as shown in Figure 9 ( b ) , and these diﬀerences were substantial , as indicated by a normalized mutual informa - tion in Figure 9 ( c ) substantially below one . Additionally , we tested whether the locally maximum modularity partitions of one objective function’s were also local maxima of the other function , and found that between 9 % and 19 % were not , indicating that the two null models are in disagreement about the locations of locally optimal partitions . The second modularity maximization algorithm considered is a fully deterministic greedy algo - rithm that begins with each vertex in a community of its own . Then , at each step of the algorithm there is a proposal to merge every possible pair of communities , and the merger that most increases modularity is chosen [ 108 ] . This process is repeated sequentially until the vertices are all merged into a single community . From the resulting sequence of partitions and modularity values , we may either select the partition with the highest modularity score or select the partition with a desired number of communities . In our investigation of the village social network using this greedy algorithm , the highest mod - ularity partition using both Eqs . ( 6 ) and ( 7 ) had 10 communities . These two maximum modularity partitions were identical for both null models , yet partitions were identical at only 43 % ( 335 of 782 ) of the agglomerative steps . Thus , while a majority of the algorithm’s agglomerative choices diﬀered by null model , a large fraction of partitions remained the same , and both models produced the same optimal partition with 10 communities . Together , these tests show that modularity maximization , a community detection method based on a conﬁguration model , is sensitive to the particular conﬁguration model used in Eq . ( 7 ) . While other algorithms for modularity - based community detection may explore the modularity surfaces using diﬀerent means , the surfaces themselves are nevertheless distinct . In order to preserve in - terpretability of modularity maximization’s results , practitioners should choose the correct graph space from which the observed network is plausibly drawn . 32 50 100 150 200 degree , k’ 100 200 deg r ee , k - 2 . 5 - 2 - 1 . 5 - 1 - 0 . 5 0 0 . 5 1 1 . 5 2 2 . 5 S t ub - l abe l ed l oop y m u l t i g r aph C kk ’ - V e r t e x - l abe l ed m u l t i g r aph C kk ’ 50 150 2 34 5 6 7 89 10 # of communities 0 0 . 2 0 . 4 0 . 6 0 . 8 1 f r a c t i on i den t i c a l f i na l pa r t i t i on s 2 3 4 5 6 7 8 9 10 number of communities 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 N M I be t w een E q ( 6 ) and E q ( 8 ) pa r t i t i on s Figure 9 : Choice of conﬁguration model space impacts modularity maximization . Mod - ularity maximization identiﬁed communities in a social multigraph of 782 vertices under two con - ﬁguration null models : stub - labeled loopy multigraphs [ Eq . ( 6 ) ] and vertex - labeled multigraphs [ Eq . ( 7 ) ] . ( a ) Non - uniform diﬀerences between the two null model matrices are colored as indi - cated ; white space indicates that there were zero vertices of degree k . ( b ) Results of modularity maximization by deterministic local search ( see text ) , starting from identical initial state but using the two diﬀerent null models , diﬀer for the vast majority of initial states and number of communities K , except the case of K = 2 communities for which 88 % agreed . ( c ) Distributions of normalized mutual information ( NMI ) , which measures similarity of partitions , show diﬀerences between the partitions found using the two null models . 6 Conclusions Random graphs with ﬁxed degree sequences appear across an enormous number of mathematical and scientiﬁc domains , and , until this point , uniform distributions of such graphs have commonly been called the conﬁguration model . In this paper we showed that the concept of a random graph with a ﬁxed degree sequence can be applied to eight overlapping , yet often meaningfully diﬀerent graph spaces . We introduced three questions in Section 1 . 5 regarding the presence or absence of self - loops , multiedges , and stub labels , which can be used along with contextual knowledge of a real - world network to decide upon the most appropriate graph space . Three applications in Section 5 highlighted the particularly important distinction between stub - labeled and vertex - labeled spaces . In particular , the use of a stub - labeled conﬁguration model in place of its vertex - labeled counterpart inverted the conclusions of degree - correlation hypothesis tests and changed the optimization landscape for community detection . Simply put , stub - and vertex - labeled spaces are not interchangeable . Simple and non - simple conﬁguration models are not interchangeable either . Although there are widely known asymptotic conditions under which the space of stub - labeled loopy multigraphs contains few graphs with self - loops or multiedges [ 102 ] , many graphs analyzed in practical contexts are simply too small or too dense to lean on these asymptotic results . As part of our work , we presented three Markov chain Monte Carlo sampling algorithms and proved that they can be used to generate graphs uniformly from the eight graph spaces discussed . To that end , pseudocode and Python implementations are provided , as used in the three applications of Section 5 . However , as with most algorithms , there are tradeoﬀs . While these MCMC approaches are proven to uniformly sample from the desired graph space , rigorous mixing time bounds have not been established , and we look forward to future mixing time investigations . Throughout this paper we discussed and reviewed the wide and disparate history of conﬁguration models and their sampling techniques , drawing on literature from sociology , ecology , combinatorics , 33 statistics , and physics . Many results regarding conﬁguration models have been discovered multiple times , in part due to the deep and scattered literature , and in part due to the fact that that there exist various names given to the same set of models , and one name given to multiple diﬀerent models . It is therefore our hope that the results and summaries in this paper help to clarify and reﬁne the study of conﬁguration models , their graph spaces , and their applications . Acknowledgements . The authors would like to thank Kristen Altenberger , Aaron Clauset , Iris Levin , Stephen Ragain , Henry Scharf , Alice Schwarze and the Networks Journal Club at Uni - versity of Oxford for thoughtful comments on early versions of the manuscript , Eleanor Power for providing South India social support network data , Iris Levin and Rebecca Safran for providing data on barn swallow contacts , and the American Mathematical Society’s Mathematics Research Community on Networks for bringing the authors together . References [ 1 ] Alan Agresti . A survey of exact inference for contingency tables . Statistical Science , pages 131 – 153 , 1992 . [ 2 ] Edoardo M Airoldi , David M Blei , Stephen E Fienberg , and Eric P Xing . Mixed membership stochastic blockmodels . Journal of Machine Learning Research , 9 ( Sep ) : 1981 – 2014 , 2008 . [ 3 ] David Aldous and Umesh Vazirani . “Go with the winners” algorithms . In SFCS 1994 Pro - ceedings of the 35th Annual Symposium on Foundations of Computer Science , pages 492 – 501 . IEEE , 1994 . [ 4 ] Yorgos Amanatidis , Bradley Green , and Milena Mihail . Graphic realizations of joint - degree matrices . Unpublished manuscript , arXiv : 1509 . 07076 , 2008 . [ 5 ] Yael Artzy - Randrup , Sarel J Fleishman , Nir Ben - Tal , and Lewi Stone . Comment on ‘Net - work motifs : Simple building blocks of complex networks’ and ‘Superfamilies of evolved and designed networks’ . Science , 305 ( 5687 ) : 1107 – 1107 , 2004 . [ 6 ] Yael Artzy - Randrup and Lewi Stone . Generating uniformly distributed random networks . Physical Review E , 72 ( 5 ) : 056708 , 2005 . [ 7 ] L´aszl´o Babai . Graph isomorphism in quasipolynomial time . In Proceedings of the 48th Annual ACM Symposium on Theory of Computing , pages 684 – 697 . ACM , 2016 . [ 8 ] Albert - L´aszl´o Barab´asi and R´eka Albert . Emergence of scaling in random networks . Science , 286 ( 5439 ) : 509 – 512 , 1999 . [ 9 ] Kevin E Bassler , Charo I Del Genio , P´eter L Erd˝os , Istv´an Mikl´os , and Zolt´an Toroczkai . Exact sampling of graphs with prescribed degree correlations . New Journal of Physics , 17 ( 8 ) : 083052 , 2015 . [ 10 ] Mohsen Bayati , Jeong Han Kim , and Amin Saberi . A sequential algorithm for generating random graphs . Algorithmica , 58 ( 4 ) : 860 – 910 , 2010 . [ 11 ] Andr´as B´ek´essy , P Bekessy , and J´anos Koml´os . Asymptotic enumeration of regular matrices . Stud . Sci . Math . Hungar , 7 : 343 – 353 , 1972 . [ 12 ] Edward A Bender and E Rodney Canﬁeld . The asymptotic number of labeled graphs with given degree sequences . Journal of Combinatorial Theory , Series A , 24 ( 3 ) : 296 – 307 , 1978 . 34 [ 13 ] Claude Berge . Theory of graphs and its applications . Methuen , London , 1962 . [ 14 ] Julian Besag and Peter Cliﬀord . Generalized Monte Carlo signiﬁcance tests . Biometrika , 76 ( 4 ) : 633 – 642 , 1989 . [ 15 ] Shankar Bhamidi , Guy Bresler , and Allan Sly . Mixing time of exponential random graphs . The Annals of Applied Probability , 21 ( 6 ) : 2146 – 2170 , 2011 . [ 16 ] Daniel Bienstock and Oktay G¨unl¨uk . A degree sequence problem related to network design . Networks , 24 ( 4 ) : 195 – 205 , 1994 . [ 17 ] Joseph Blitzstein and Persi Diaconis . A sequential importance sampling algorithm for gener - ating random graphs with prescribed degrees . Internet Mathematics , 6 ( 4 ) : 489 – 522 , 2011 . [ 18 ] Mari´an Bogun´a , Romualdo Pastor - Satorras , and Alessandro Vespignani . Cut - oﬀs and ﬁnite size eﬀects in scale - free networks . The European Physical Journal B - Condensed Matter and Complex Systems , 38 ( 2 ) : 205 – 209 , 2004 . [ 19 ] B´ela Bollob´as . A probabilistic proof of an asymptotic formula for the number of labelled regular graphs . European Journal of Combinatorics , 1 ( 4 ) : 311 – 316 , 1980 . [ 20 ] Stephen Brooks and Andrew Gelman . Some issues in monitoring convergence of iterative simulations . In In Proceedings of the Section on Statistical Computing . ASA , 1998 . [ 21 ] Zdzis(cid:32)law Burda and Andr´e Krzywicki . Uncorrelated random networks . Physical Review E , 67 ( 4 ) : 046118 , 2003 . [ 22 ] Sonia Caﬁeri , Pierre Hansen , and Leo Liberti . Loops and multiple edges in modularity maximization of networks . Physical Review E , 81 ( 4 ) : 046102 , 2010 . [ 23 ] Duncan S Callaway , John E Hopcroft , Jon M Kleinberg , Mark EJ Newman , and Steven H Strogatz . Are randomly grown graphs really random ? Physical Review E , 64 ( 4 ) : 041902 , 2001 . [ 24 ] Duncan S Callaway , Mark EJ Newman , Steven H Strogatz , and Duncan J Watts . Network robustness and fragility : Percolation on random graphs . Physical Review Letters , 85 ( 25 ) : 5468 , 2000 . [ 25 ] Corrie J Carstens . Proof of uniform sampling of binary matrices with ﬁxed row sums and column sums for the fast curveball algorithm . Physical Review E , 91 : 042812 , Apr 2015 . [ 26 ] Corrie J Carstens , Annabell Berger , and Giovanni Strona . Curveball : A new generation of sampling algorithms for graphs with ﬁxed degree sequence . arXiv preprint arXiv : 1609 . 05137 , 2016 . [ 27 ] Corrie J Carstens and Kathy J Horadam . Switching edges to randomize networks : What goes wrong and how to ﬁx it . Journal of Complex Networks , page cnw027 , 2016 . [ 28 ] Damon Centola , V´ıctor M Egu´ıluz , and Michael W Macy . Cascade dynamics of complex propagation . Physica A : Statistical Mechanics and its Applications , 374 ( 1 ) : 449 – 456 , 2007 . [ 29 ] Arun G Chandrasekhar and Matthew O Jackson . Tractable and consistent random graph models . Technical report , National Bureau of Economic Research , 2014 . 35 [ 30 ] Sourav Chatterjee and Persi Diaconis . Estimating and understanding exponential random graph models . The Annals of Statistics , 41 ( 5 ) : 2428 – 2461 , 2013 . [ 31 ] Yuguo Chen , Persi Diaconis , Susan P Holmes , and Jun S Liu . Sequential Monte Carlo methods for statistical analysis of tables . Journal of the American Statistical Association , 100 ( 469 ) : 109 – 120 , 2005 . [ 32 ] Fan Chung and Linyuan Lu . The average distances in random graphs with given expected degrees . Proceedings of the National Academy of Sciences , 99 ( 25 ) : 15879 – 15882 , 2002 . [ 33 ] Aaron Clauset , Cosma Rohilla Shalizi , and Mark EJ Newman . Power - law distributions in empirical data . SIAM Review , 51 ( 4 ) : 661 – 703 , 2009 . [ 34 ] Reuven Cohen , Daniel Ben - Avraham , and Shlomo Havlin . Percolation critical exponents in scale - free networks . Physical Review E , 66 ( 3 ) : 036113 , 2002 . [ 35 ] Edward F Connor and Daniel Simberloﬀ . The assembly of species communities : Chance or competition ? Ecology , pages 1132 – 1140 , 1979 . [ 36 ] Colin Cooper , Martin Dyer , and Catherine Greenhill . Sampling regular graphs and a peer - to - peer network . Combinatorics , Probability and Computing , 16 ( 04 ) : 557 – 593 , 2007 . [ 37 ] ´Eva Czabarka , Aaron Dutle , P´eter L Erd˝os , and Istv´an Mikl´os . On realizations of a joint degree matrix . Discrete Applied Mathematics , 181 : 283 – 288 , 2015 . [ 38 ] James A Davis and Samuel Leinhardt . The structure of positive interpersonal relations in small groups . In Sociological Theories in Progress . Vol . 2 , eds . J . Berger , M . Zelditch , and B . Anderson , 1971 . [ 39 ] Derek J . de Solla Price . Networks of scientiﬁc papers . Science , 149 ( 3683 ) : 510 – 515 , 1965 . [ 40 ] Derek J . de Solla Price . A general theory of bibliometric and other cumulative advantage processes . Journal of the American Society for Information Science , 27 ( 5 ) : 292 – 306 , 1976 . [ 41 ] Charo I Del Genio , Hyunju Kim , Zolt´an Toroczkai , and Kevin E Bassler . Eﬃcient and exact sampling of simple graphs with given arbitrary degree sequence . PLoS ONE , 5 ( 4 ) : e10012 , 2010 . [ 42 ] Erik D Demaine , Felix Reidl , Peter Rossmanith , Fernando S´anchez Villaamil , Somnath Sik - dar , and Blair D Sullivan . Structural sparsity of complex networks : Bounded expansion in random models and real - world graphs . arXiv preprint arXiv : 1406 . 2587 , 2014 . [ 43 ] Bruce A Desmarais and Skyler J Cranmer . Statistical inference for valued - edge networks : the generalized exponential random graph model . PLoS ONE , 7 ( 1 ) : e30136 , 2012 . [ 44 ] Persi Diaconis and Anil Gangolli . Rectangular arrays with ﬁxed margins . In David Aldous , Persi Diaconis , Joel Spencer , and J . Michael Steele , editors , Discrete Probability and Algo - rithms , volume 72 of The IMA Volumes in Mathematics and its Applications , pages 15 – 41 . Springer New York , 1995 . [ 45 ] Jared M Diamond . Assembly of species communities , 1975 . [ 46 ] Roger B Eggleton . Graphic sequences and graphic polynomials : A report . Inﬁnite and Finite Sets , 1 : 385 – 392 , 1973 . 36 [ 47 ] Roger B Eggleton and Derek Allan Holton . The graph of type ( 0 , ∞ , ∞ ) realizations of a graphic sequence . Springer , 1979 . [ 48 ] Roger B Eggleton and Derek Allan Holton . Simple and multigraphic realizations of degree sequences . Springer , 1981 . [ 49 ] David Eppstein , Zvi Galil , Giuseppe F Italiano , and Amnon Nissenzweig . Sparsiﬁcation—a technique for speeding up dynamic graph algorithms . Journal of the ACM , 44 ( 5 ) : 669 – 696 , 1997 . [ 50 ] P´eter L Erd˝os , Zolt´an Kir´aly , and Istv´an Mikl´os . On the swap - distances of diﬀerent realiza - tions of a graphical degree sequence . Combinatorics , Probability and Computing , 22 ( 03 ) : 366 – 383 , 2013 . [ 51 ] P´eter L Erd˝os , S´andor Z Kiss , Istv´an Mikl´os , and Lajos Soukup . Approximate counting of graphical realizations . PLoS ONE , 10 ( 7 ) : e0131300 , 2015 . [ 52 ] Tom´as Feder , Adam Guetz , Milena Mihail , and Amin Saberi . A local switch Markov chain on given degree graphs with application in connectivity of peer - to - peer networks . In 2006 47th Annual IEEE Conference on Foundations of Computer Science , pages 69 – 76 . IEEE , 2006 . [ 53 ] Ronald A Fisher . The design of experiments . 1935 . Oliver and Boyd , Edinburgh , 1935 . [ 54 ] Santo Fortunato . Community detection in graphs . Physics Reports , 486 ( 3 ) : 75 – 174 , 2010 . [ 55 ] Ove Frank and Frank Harary . Cluster inference by using transitivity indices in empirical graphs . Journal of the American Statistical Association , 77 ( 380 ) : 835 – 840 , 1982 . [ 56 ] Mitchell Gail and Nathan Mantel . Counting the number of r × c contingency tables with ﬁxed margins . Journal of the American Statistical Association , 72 ( 360a ) : 859 – 862 , 1977 . [ 57 ] Tibor Gallai and Paul Erd˝os . Graphs with prescribed degree of vertices ( hungarian ) , mat . Lapok , 11 : 264 – 274 , 1960 . [ 58 ] Andrew Gelman , John B Carlin , Hal S Stern , David B Dunson , Aki Vehtari , and Donald B Rubin . Bayesian Data Analysis , Third Edition . CRC Press , 2014 . [ 59 ] Christos Gkantsidis , Milena Mihail , and Ellen Zegura . The Markov chain simulation method for generating connected power law random graphs . In Proceedings of the Fifth Workshop on Algorithm Engineering and Experiments , volume 111 , page 16 . SIAM , 2003 . [ 60 ] Leo A Goodman . Snowball sampling . The Annals of Mathematical Statistics , pages 148 – 170 , 1961 . [ 61 ] Nicholas J Gotelli and Gary R Graves . Null models in ecology . Smithsonian Institution Press , Washington , D . C . , 1996 . [ 62 ] Catherine Greenhill . A polynomial bound on the mixing time of a Markov chain for sampling regular directed graphs . The Electronic Journal of Combinatorics , 18 ( 1 ) : P234 , 2011 . [ 63 ] Catherine Greenhill . The switch Markov chain for sampling irregular graphs . In Proceedings of the Twenty - Sixth Annual ACM - SIAM Symposium on Discrete Algorithms , pages 1564 – 1572 . SIAM , 2015 . 37 [ 64 ] S Louis Hakimi . On realizability of a set of integers as degrees of the vertices of a linear graph . i . Journal of the Society for Industrial & Applied Mathematics , 10 ( 3 ) : 496 – 506 , 1962 . [ 65 ] S Louis Hakimi . On realizability of a set of integers as degrees of the vertices of a linear graph ii . Uniqueness . Journal of the Society for Industrial & Applied Mathematics , 11 ( 1 ) : 135 – 147 , 1963 . [ 66 ] V´aclav J Havel . A remark on the existence of ﬁnite graphs . Casopis Pest . Mat , 80 ( 477 - 480 ) : 1253 , 1955 . [ 67 ] Paul W Holland , Kathryn Blackmond Laskey , and Samuel Leinhardt . Stochastic blockmodels : First steps . Social Networks , 5 ( 2 ) : 109 – 137 , 1983 . [ 68 ] George C Homans . The human group . 1950 . [ 69 ] Shalev Itzkovitz , Ron Milo , Nadav Kashtan , Guy Ziv , and Uri Alon . Subgraphs in random networks . Physical Review E , 68 ( 2 ) : 026127 , 2003 . [ 70 ] Shalev Itzkovitz , Ron Milo , Nadev Kashtan , Mark EJ Newman , and Uri Alon . Reply to “Comment on ‘Subgraphs in random networks”’ . Physical Review E , 70 ( 5 ) : 058102 , 2004 . [ 71 ] Mark Jerrum and Alistair Sinclair . Fast uniform generation of regular graphs . Theoretical Computer Science , 73 ( 1 ) : 91 – 100 , 1990 . [ 72 ] Bill Jones . Computational geometry database ( http : / / jeﬀe . cs . illinois . edu / compgeom / biblios . html ) , 2002 . accessed 7 / 1 / 2016 . [ 73 ] Brian Karrer and Mark EJ Newman . Stochastic blockmodels and community structure in networks . Physical Review E , 83 ( 1 ) : 016107 , 2011 . [ 74 ] Oliver D King . Comment on “Subgraphs in random networks” . Physical Review E , 70 ( 5 ) : 058101 , 2004 . [ 75 ] Daniel J Kleitman and Da - Lun Wang . Algorithms for constructing graphs and digraphs with given valences and factors . Discrete Mathematics , 6 ( 1 ) : 79 – 88 , 1973 . [ 76 ] Tamara G Kolda , Ali Pinar , Todd Plantenga , and C Seshadhri . A scalable generative graph model with community structure . SIAM Journal on Scientiﬁc Computing , 36 ( 5 ) : C424 – C452 , 2014 . [ 77 ] Pavel N Krivitsky . Exponential - family random graph models for valued networks . Electronic Journal of Statistics , 6 : 1100 , 2012 . [ 78 ] M Drew LaMar . Directed 3 - cycle anchored digraphs and their application in the uniform sampling of realizations from a ﬁxed degree sequence . In Proceedings of the Winter Simulation Conference , pages 3353 – 3364 . Winter Simulation Conference , 2011 . [ 79 ] Daniel B Larremore , Aaron Clauset , and Caroline O Buckee . A network approach to analyzing highly recombinant malaria parasite genes . PLoS Comput Biol , 9 ( 10 ) : e1003268 , 2013 . [ 80 ] Daniel B Larremore , Aaron Clauset , and Abigail Z Jacobs . Eﬃciently inferring community structure in bipartite networks . Physical Review E , 90 ( 1 ) : 012805 , 2014 . 38 [ 81 ] Daniel B Larremore , Woodrow L Shew , and Juan G Restrepo . Predicting criticality and dy - namic range in complex networks : Eﬀects of topology . Physical Review Letters , 106 ( 5 ) : 58101 , 2011 . [ 82 ] Jure Leskovec , Kevin J Lang , Anirban Dasgupta , and Michael W Mahoney . Community structure in large networks : Natural cluster sizes and the absence of large well - deﬁned clusters . Internet Mathematics , 6 ( 1 ) : 29 – 123 , 2009 . [ 83 ] Jure Leskovec and Rok Sosic . Snap : A general purpose network analysis and graph mining library . arXiv preprint arXiv : 1606 . 07550 , 2016 . [ 84 ] David Asher Levin , Yuval Peres , and Elizabeth Lee Wilmer . Markov Chains and Mixing Times . American Mathematical Soc . , 2009 . [ 85 ] Iris I Levin , David M Zonana , John M Burt , and Rebecca J Safran . Performance of encoun - ternet tags : Field tests of miniaturized proximity loggers for use on small birds . PLoS ONE , 10 ( 9 ) : e0137242 , 2015 . [ 86 ] Iris I Levin , David M Zonana , Bailey K Fosdick , Se Jin Song , Rob Knight , and Rebecca J Safran . Stress response , gut microbial diversity and sexual signals correlate with social inter - actions . Biology Letters , 12 ( 6 ) , 2016 . [ 87 ] Xin Liu , Tsuyoshi Murata , and Ken Wakita . Detecting network communities beyond assortativity - related attributes . Physical Review E , 90 ( 1 ) : 012806 , 2014 . [ 88 ] Peter Mahlmann and Christian Schindelhauer . Peer - to - peer networks based on random trans - formations of connected regular undirected graphs . In Proceedings of the seventeenth annual ACM symposium on Parallelism in algorithms and architectures , pages 155 – 164 . ACM , 2005 . [ 89 ] R Dean Malmgren , Julio M Ottino , and Lu´ıs A Nunes Amaral . The role of mentorship in prot´eg´e performance . Nature , 465 ( 7298 ) : 622 – 626 , 2010 . [ 90 ] Sergei Maslov and Kim Sneppen . Speciﬁcity and stability in topology of protein networks . Science , 296 ( 5569 ) : 910 – 913 , 2002 . [ 91 ] Sergei Maslov , Kim Sneppen , and Alexei Zaliznyak . Detection of topological patterns in complex networks : Correlation proﬁle of the internet . Physica A : Statistical Mechanics and its Applications , 333 : 529 – 540 , 2004 . [ 92 ] Claire P Massen and Jonathan PK Doye . Identifying communities within energy landscapes . Physical Review E , 71 ( 4 ) : 046101 , 2005 . [ 93 ] Rudolf Mathon . A note on the graph isomorphism counting problem . Information Processing Letters , 8 ( 3 ) : 131 – 136 , 1979 . [ 94 ] Brendan D McKay and Nicholas C Wormald . Uniform generation of random regular graphs of moderate degree . Journal of Algorithms , 11 ( 1 ) : 52 – 67 , 1990 . [ 95 ] Istv´an Mikl´os , P´eter L Erd˝os , and Lajos Soukup . Towards random uniform sampling of bipar - tite graphs with given degree sequence . The Electronic Journal of Combinatorics , 20 ( 1 ) : P16 , 2013 . [ 96 ] Istv´an Mikl´os and J´anos Podani . Randomization of presence - absence matrices : Comments and new algorithms . Ecology , 85 ( 1 ) : 86 – 92 , 2004 . 39 [ 97 ] Ron Milo , Shalev Itzkovitz , Nadav Kashtan , Reuven Levitt , and Uri Alon . Response to com - ment on ”Network motifs : Simple building blocks of complex networks” and ”Superfamilies of evolved and designed networks” . Science , 305 ( 5687 ) : 1107 – 1107 , 2004 . [ 98 ] Ron Milo , Shalev Itzkovitz , Nadav Kashtan , Reuven Levitt , Shai Shen - Orr , Inbal Ayzenshtat , Michal Sheﬀer , and Uri Alon . Superfamilies of evolved and designed networks . Science , 303 ( 5663 ) : 1538 – 1542 , 2004 . [ 99 ] Ron Milo , Nadev Kashtan , Shalev Itzkovitz , Mark EJ Newman , and Uri Alon . On the uniform generation of random graphs with prescribed degree sequences . arXiv preprint cond - mat / 0312028 , 2003 . [ 100 ] Ron Milo , Shai Shen - Orr , Shalev Itzkovitz , Nadav Kashtan , Dmitri Chklovskii , and Uri Alon . Network motifs : Simple building blocks of complex networks . Science , 298 ( 5594 ) : 824 – 827 , 2002 . [ 101 ] Michael Mitzenmacher . A brief history of generative models for power law and lognormal distributions . Internet mathematics , 1 ( 2 ) : 226 – 251 , 2004 . [ 102 ] Michael Molloy and Bruce Reed . A critical point for random graphs with a given degree sequence . Random structures & algorithms , 6 ( 2 - 3 ) : 161 – 180 , 1995 . [ 103 ] Jacob L Moreno . Who Shall Survive ? Nervous and Mental Disease Publishing Co . , 1934 . [ 104 ] Jacob L Moreno and Helen H Jennings . Statistics of social conﬁgurations . Sociometry , pages 342 – 374 , 1938 . [ 105 ] Mark EJ Newman . Assortative mixing in networks . Physical Review Letters , 89 ( 20 ) : 208701 , 2002 . [ 106 ] Mark EJ Newman . Mixing patterns in networks . Physical Review E , 67 ( 2 ) : 026126 , 2003 . [ 107 ] Mark EJ Newman . Networks : An Introduction . OUP Oxford , 2010 . [ 108 ] Mark EJ Newman and Michelle Girvan . Finding and evaluating community structure in networks . Physical Review E , 69 ( 2 ) : 026113 , 2004 . [ 109 ] Mark EJ Newman , Steven H Strogatz , and Duncan J Watts . Random graphs with arbitrary degree distributions and their applications . Physical Review E , 64 ( 2 ) : 026118 , 2001 . [ 110 ] Joel Nishimura . Swap connectivity for two graph spaces between simple and pseudo graphs and disconnectivity for triangle constraints . arXiv preprint arXiv : 1704 . 01951 , 2017 . [ 111 ] Joel Nishimura . Uniformly sampling graphs with self - loops and a given degree sequence . arXiv preprint arXiv : 1701 . 04888 , 2017 . [ 112 ] Chiara Orsini , Marija M Dankulov , Almerima Jamakovic , Priya Mahadevan , Amin Vahdat , Kevin E Bassler , Zolt´an Toroczkai , Mari´an Bogu˜n´a , Guido Caldarelli , Santo Fortunato , et al . Quantifying randomness in real networks . Nature Communications , 6 : 8627 , 2015 . [ 113 ] Michael Pateﬁeld . Algorithm AS 159 : An eﬃcient method of generating random r × c tables with given row and column totals . Applied Statistics , pages 91 – 97 , 1981 . 40 [ 114 ] Tiago P Peixoto . Hierarchical block structures and high - resolution model selection in large networks . Physical Review X , 4 ( 1 ) : 011047 , 2014 . [ 115 ] Julius Petersen . Die theorie der regul¨aren graphs . Acta Mathematica , 15 ( 1 ) : 193 – 220 , 1891 . [ 116 ] Eleanor A Power . Religious Practice and Social Support in Rural South India . PhD thesis , Stanford University , https : / / searchworks . stanford . edu / view / 11381251 , 2015 . [ 117 ] A Ramachandra Rao , Rabindranath Jana , and Suraj Bandyopadhyay . A Markov chain Monte Carlo method for generating random ( 0 , 1 ) - matrices with given marginals . Sankhy¯a : The Indian Journal of Statistics , Series A , pages 225 – 242 , 1996 . [ 118 ] Juan G Restrepo , Edward Ott , and Brian R Hunt . Onset of synchronization in large networks of coupled oscillators . Physical Review E , 71 ( 3 ) : 036151 , 2005 . [ 119 ] Herbert J Ryser . Combinatorial properties of matrices of zeros and ones . Canadian Journal of Mathematics , 9 : 371 – 377 , 1957 . [ 120 ] Rebecca J Safran , Colby R Neuman , Kevin J McGraw , and Irby J Lovette . Dynamic paternity allocation as a function of male plumage color in barn swallows . Science , 309 ( 5744 ) : 2210 – 2212 , 2005 . [ 121 ] Alistair Sinclair . Improved bounds for mixing rates of Markov chains and multicommodity ﬂow . Combinatorics , probability and Computing , 1 ( 04 ) : 351 – 370 , 1992 . [ 122 ] Tom AB Snijders . Markov chain Monte Carlo estimation of exponential random graph models . Journal of Social Structure , 3 ( 2 ) : 1 – 40 , 2002 . [ 123 ] Olaf Sporns and Rolf K¨otter . Motifs in brain networks . PLoS Biol , 2 ( 11 ) : e369 , 2004 . [ 124 ] Guillaume St - Onge , Jean - Gabriel Young , Edward Laurence , Charles Murphy , and Louis J Dub´e . Susceptible - infected - susceptible dynamics on the rewired conﬁguration model . arXiv preprint arXiv : 1701 . 01740 , 2017 . [ 125 ] Isabelle Stanton and Ali Pinar . Constructing and sampling graphs with a prescribed joint degree distribution . Journal of Experimental Algorithmics , 17 : 3 – 5 , 2012 . [ 126 ] Lewi Stone and Alan Roberts . The checkerboard score and species distributions . Oecologia , 85 ( 1 ) : 74 – 79 , 1990 . [ 127 ] Daniel B Stouﬀer , Juan Camacho , Wenxin Jiang , and Lu´ıs A Nunes Amaral . Evidence for the existence of a robust pattern of prey selection in food webs . Proceedings of the Royal Society B : , 274 ( 1621 ) : 1931 – 1940 , 2007 . [ 128 ] David Strauss . On a general class of models for interaction . SIAM Review , 28 ( 4 ) : 513 – 527 , 1986 . [ 129 ] Arun Sundararajan . Local network eﬀects and complex network structure . The BE Journal of Theoretical Economics , 7 ( 1 ) , 2007 . [ 130 ] Lionel Tabourier , Camille Roth , and Jean - Philippe Cointet . Generating constrained random graphs using multiple edge switches . Journal of Experimental Algorithmics ( JEA ) , 16 : 1 – 7 , 2011 . 41 [ 131 ] Richard Taylor . Contrained switchings in graphs . Springer , 1981 . [ 132 ] Johan Ugander , Lars Backstrom , and Jon Kleinberg . Subgraph frequencies : Mapping the empirical and extremal geography of large graph collections . In Proceedings of the 22nd International Conference on World Wide Web , pages 1307 – 1318 . ACM , 2013 . [ 133 ] Johan Ugander , Brian Karrer , Lars Backstrom , and Jon Kleinberg . Graph cluster random - ization : Network exposure to multiple universes . In Proceedings of the 19th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining , pages 329 – 337 . ACM , 2013 . [ 134 ] Albert Verbeek and Pieter M Kroonenberg . A survey of algorithms for exact distributions of test statistics in r × c contingency tables with ﬁxed margins . Computational Statistics & Data Analysis , 3 : 159 – 185 , 1985 . [ 135 ] Norman D Verhelst . An eﬃcient mcmc algorithm to sample binary matrices with ﬁxed marginals . Psychometrika , 73 ( 4 ) : 705 – 728 , 2008 . [ 136 ] Fabien Viger and Matthieu Latapy . Eﬃcient and simple generation of random simple con - nected graphs with prescribed degree sequence . In Computing and Combinatorics , pages 440 – 449 . Springer , 2005 . [ 137 ] Duncan J Watts and Peter Sheridan Dodds . Inﬂuentials , networks , and public opinion for - mation . Journal of Consumer Research , 34 ( 4 ) : 441 – 458 , 2007 . [ 138 ] J Bastow Wilson . Methods for detecting non - randomness in species co - occurrences : A con - tribution . Oecologia , 73 ( 4 ) : 579 – 582 , 1987 . [ 139 ] Guo - Qiang Zhang . Traversability of graph space with given degree sequence under edge rewiring . Electronics Letters , 46 ( 5 ) : 351 – 352 , 2010 . 42 Supplementary Materials : Algorithm 3 This algorithm uniformly samples vertex - labeled graph spaces more eﬃciently than Algorithm 2 by comput - ing both the forward and reverse probabilities of any double - edge swap according to the cases in Figure 5 . It then down - samples the higher probability swap to have the same probability as the lower probability swap , accelerating mixing . Algorithm 3 vertex - labeled MCMC Require : initial graph G 0 , graph space ( simple graph , multigraph , or loopy multigraph ) Ensure : sequence of graphs G i for i < number of graphs to sample do choose two distinct edges ( u , v ) and ( x , y ) uniformly at random if Unif ( 0 , 1 ) < 0 . 5 then u , v ← v , u end if if edge swap would leave the graph space then resample current graph : G i ← G i − 1 end if if ∃ 4 distinct vertices in u , v , x , y then SwapsTo ← w uv w xy SwapsFrom ← ( w ux + 1 ) ( w vy + 1 ) else if ∃ 3 distinct vertices in u , v , x , y then if u = v or x = y then SwapsTo ← 2 w uv w xy SwapsFrom ← ( w ux + 1 ) ( w vy + 1 ) else SwapsTo ← w uv w xy SwapsFrom ← 2 ( w ux + 1 ) ( w vy + 1 ) end if else if ∃ 2 distinct vertices in u , v , x , y then if only one of ( u , v ) or ( x , y ) is a self - loop then G i ← G i − 1 continue else if both ( u , v ) and ( x , y ) are self - loops then SwapsTo ← 2 w uu w xx SwapsFrom ← 12 ( w ux + 2 ) ( w ux + 1 ) else SwapsTo ← 1 2 w uv ( w uv − 1 ) SwapsFrom ← 2 ( w uu + 1 ) ( w vv + 1 ) end if else G i ← G i − 1 continue end if P ← min ( 1 , SwapsFromSwapsTo ) if Unif ( 0 , 1 ) < P then swap ( u , v ) , ( x , y ) (cid:32) ( u , x ) , ( v , y ) to produce G i else G i ← G i − 1 end if end for 43 Four species of graphs lived on the last page , The wise old mulooph was the most cited sage . To her left , the muraph , no loop - looping bow , The second key graph in the modeling show . Yet all was not well with the old grumpy grimple , Since basic stub matching just can’t make graphs simple . Last graph of the four , an elusive young looph , Whose counterexample demands a new proof . Each graph in its space , with uniform frequence , A place for each case—and with ﬁxed degree sequence ! “Don’t cry because it’s over . Smile because it happened . ” – Dr . Seuss 44