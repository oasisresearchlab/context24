Towards the Web of Applications : Incorporating End User Programming into the Web 2 . 0 Communities Navid Ahmadi , Mehdi Jazayeri , Francesco Lelli Faculty of Informatics University of Lugano , Switzerland ﬁ rstname . lastname @ usi . ch Alexander Repenning AgentSheets , Inc . Boulder , CO 80301 U . S . A alexander @ agentsheets . com ABSTRACT The Web is evolving from the Web of documents to the Web of applications . Web 2 . 0 communities need end - user programming tools to create interactive applications accord - ing to their skills and domain of interest . However , due to the diﬀerent domains of programming in diﬀerent com - munities , providing a generic EUP tool to all communities is not possible . We aim at encapsulating development of domain - oriented EUP tools as a community - based eﬀort - taking place at two layers : ( i ) among diﬀerent communi - ties , and ( ii ) inside a particular community . Accordingly , we suggest a domain - independent model and its respective Web - based infrastructure to supports diﬀerent online com - munities to create and appropriate end user development tools for building interactive artifacts collaboratively . Categories and Subject Descriptors : H . 5 . 3 [ Informa - tion Interfaces and Presentation ] : Group and Ogranization Interfaces General Terms : Human Factors , Languages Keywords : Web 2 . 0 , end user programming , community - based domain construction , interactive applications , Web - based applications 1 . INTRODUCTION Web 2 . 0 [ 19 ] is evolving the Web from the Web of doc - uments to the Web of applications [ 21 ] , where typical Web users will build their own applications . Web 2 . 0 has pro - moted communities of Web users to develop diﬀerent types of static artifacts such as images and movies collaboratively . However , development of interactive artifacts as a collabo - rative activity in Web 2 . 0 communities has remained chal - lenging since Web 2 . 0 communities consist of mostly typical Web users with no background in programming . Therefore they need end user programming ( EUP ) tools to create in - teractive artifacts . Tools and models developed in end user programming studies can be tailored to enable end users of Web 2 . 0 com - Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro ﬁ t or commercial advantage and that copies bear this notice and the full citation on the ﬁ rst page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior speci ﬁ c permission and / or a fee . SoSEA’09 , August 24 , 2009 , Amsterdam , The Netherlands . Copyright 2009 ACM 978 - 1 - 60558 - 682 - 3 / 09 / 08 . . . $ 10 . 00 . munities to create interactive artifacts . However , diﬀerent Web 2 . 0 communities are associated with diﬀerent domains each of which needs its own EUP tools to create interactive artifacts . Therefore , devising a generic EUP tool for all the communities is not possible . Rather , each community needs its own domain - speciﬁc tools to create such artifacts . To address the ”domain challenge” , we aim at encapsu - lating the development of domain - oriented EUP tools as a community - based eﬀort that happens inside Web 2 . 0 com - munities . We base our approach on leveraging the collabo - rative dimension of end user programming , which has been recognized as a persistent activity in several EUP contexts , to enable communities to build domain - speciﬁc tools col - laboratively . Accordingly , we suggest a generic model to support the development of domain - oriented EUP tools in Web 2 . 0 communities . We consider embodying domain de - velopment process as a community - eﬀort at two distinct lay - ers : ( i ) inter - domain tool construction , where diﬀerent communities share a generic infrastructure that supports de - velopment and sharing of EUP tools and components ; ( ii ) intra - domain tool appropriation , where members of a particular community collaborate to adapt developed tools from the infrastructural layer and shape a domain - speciﬁc end user development environment according to the commu - nity’s domain . The rest of the paper is organized as follow : in Section 2 we provide the state of the art of programming by end users on the Web ; in Section 3 we explore the collaborative dimen - sion of end user programming on which we rely our work . In Section 4 we demonstrate our suggested model to sup - port community - based development of EUP tools . Finally , in Section 5 we present our future work , and conclude . 2 . EUP ON THE WEB : STATE OF THE ART In this section we investigate the current situation for sup - porting typical Web users to write programs on the Web . Respectively , we do not consider other aspects of end user development such as designing dynamic HTML pages as pro - gramming and skip them here . Web 2 . 0 has activated typical Web users to contribute to the data and information society . But the users’ potential for contribution goes beyond just injecting the information to the Web . Web users are potentially able to customize , pro - cess and adapt the existing data according to their personal and organizational needs . Recommendation systems are the simplest examples of tools to enable users to customize the information by collecting and recommending useful informa - tion to other people on the Web . The demand to mix data 9 and services on the Web according to the user’s need has led to the development of Web Mashups [ 26 ] , i . e . a combination of data and services from several sources on the Web . The data is usually provided as a feed or the output of other services , and the services can be Web and REST . Mashups are native Web applications written in JavaScript , and us - ing AJAX , JSON and XML technologies . The fast growth of Web mashups proves the need for processing Web data and building applications on top of them . Another type of tools to enable Web users to extract data from pages and auto - mate tasks over the data are called automators . Examples of such tools include Chickenfoot [ 5 , 4 ] and coScripter [ 10 , 3 ] . To lower the barrier of writing a Web mashup , tools have been created mostly by commercial companies but as free Web - based software . These atifacts usually provide a higher level of abstraction for the programming of mashups . For example Yahoo ! Pipes 1 provide a GUI to pipe data to oper - ators such as aggregators and services . Google Mashup Ed - itor ( GME ) 2 provide a higher level API to use in JavaScript while building mashups . Additional mashup building tools besides Yahoo ! Pipes and GME , includes Microsoft Popﬂy , and Intel Mashmaker [ 2 ] . From the end - user programming point of view EUP is not the target domain for these tools . They are mostly suitable for amateur and professional pro - grammers . However , there exists some research on enabling end users to build mashups . Marmite [ 24 , 25 ] and Vegemite [ 11 ] combine concepts from data - ﬂow programming , scripting , and spreadsheets to enable end users to build mashups . We can conclude that Web mashups and mashup building tools present the power of existing technology to build Web - based applications using data feeds , AJAX , JavaScript , and REST APIs . However , according to the described proper - ties of Web 2 . 0 communities , mashup tools do not satisfy the requirements to support Web 2 . 0 communities to build programs , since : (cid:129) Mashup tools support mixing data and services . Build - ing Web - based applications is left to JavaScript , which is not supposed to be used by end users of Web 2 . 0 communities . (cid:129) Mashup tools do not provide enough ﬂexibility to build interactive applications which can react according to the user’s behavior and environment’s triggers . (cid:129) Mashup tools provide domain speciﬁc languages for mixing data and services . However , Web 2 . 0 commu - nities have diﬀerent domains , which demand speciﬁc models and languages . 3 . COLLABORATIVE EUP End - user programming provides languages , tools , and mod - els to enable end users to write programs . End users are usu - ally domain experts , such as a physician , biologist , or librar - ian , without background in programming . They also have computational needs and are not interested in programming per se . In the software context , users are using end - user programming approaches to customize a software system . They are use to perform these changes while they are using the artifact rather than at design time , and this behavior is known as ”tailoring” . 1 http : / / pipes . yahoo . com 2 http : / / editor . googlemashups . com Nardi [ 17 ] argues that end users tend to gain computer knowledge and solve their computing problems by seeking help in their social environment , rather than laboring in iso - lation . Such pattern has been seen as a persistent activity and not the exception in several computing areas includ - ing sharing UNIX customization ﬁles [ 12 ] , spreadsheets [ 18 ] , tailorable oﬃce systems [ 13 ] , and CAD settings [ 8 ] . The col - laborative tailoring pattern have been demonstrated in other works as well [ 23 ] [ 14 ] [ 6 ] . Nardi [ 17 ] encounters a continuum of users with diﬀerent skills ranging from end users to local developers to program - mers in a community of end users and highlights the emer - gence of local developers in any settings where a computer program is widely used . Local developers are deﬁned as : ”domain experts who happen to have an intrinsic interest in computers and have more advanced knowledge of a particu - lar program” [ 17 ] . Fischer et al . [ 7 ] extend this continuum to the consumer / designer spectrum ranging from passive con - sumer to well - informed consumer , end user , power user , do - main designer , and meta designer . According to Pipek et al . [ 20 ] , Oberquelle proposes a classiﬁcation of groupware tai - loring based on collaborating actors , who are individuals or a group , from people aﬀected by a tailoring activity , who can be individuals or a group . Maclean et al . [ 13 ] argue that tailoring has to become a community driven activity based on the expertise of involved users . Morch et al . [ 16 ] argue that the context in which a software is being developed is diﬀerent from the context in which that software is being used , and to reach a shared context , tailoring has to be done as the indirect long - term collaboration between developers and user . They suggest ”Multiple Representations” to capture and preserve a rich development context to be shared among developers and users , and ”Application Units” which make multiple repre - sentations accessible to end users at use time . Fischer et al . [ 7 ] introduce meta - design , a conceptual framework aimed at providing social and technical infrastructures to support collaborative design , based on the assumption that future uses and problems can not be anticipated at design time . Pipek et al . [ 20 ] categorize the existing collaborative tailor - ing works , distinguishing between three levels of intensity of user involvement with tool usage , namely : ”shared use , ” ”shared context , ” and ”shared tool” and introduce a fourth scenario called ”shared infrastructure” , and for each they dis - cuss approaches to support collaborative scenarios . The goal in shared infrastructure tailoring is to support the appropri - ation beyond one tool or application . The challenge here is to support collaborative tailoring concretely due to the lack of a ”targeted” design for one speciﬁc application . Similar to the ”domain challenge” described in the introduction of this paper , the problem in here is a trade - oﬀ between the gen - erality of the infrastructure respective to diﬀerent domains and meeting domain’s tailoring rationale . At the programming language level few of end - user pro - gramming languages provide support for collaboration . Re - searchers have created a number of end - user programming models and languages since early 1960s in diﬀerent domains and with diﬀerent goals . Kelleher and Pausch [ 9 ] classify end - user programming languages according to their main purpose , where at the highest level they are divided into two branches of ( i ) languages with the purpose of teaching the programming concepts , and ( ii ) languages for empowering end users with programming to get their job done . Kelle - 10 her and Pausch identify three types of collaboration that are supported in diﬀerent programming languages . ( i ) side - by - side - based collaboration in which two or more users were manipulating the same program on computers that were lo - cated in the same room , ( ii ) networked - shared manipulation in which users were in diﬀerent locations but connected to a common network and could collaborate while building a pro - gram , and ( iii ) networked - shared results in which users were in diﬀerent location but connected to a common network and could share completed programs or program fragments . Based on their survey of ﬁfty eight end - user programming languages , there are only ten models supporting one of these three types , in which six of them support side - by - side collab - oration , only one of them support networked - shared manip - ulation , and three of them support networked - shared results . 4 . INCORPORATING EUP INTO WEB 2 . 0 In this section we propose a model to support development of domain - speciﬁc EUP tools across diﬀerent Web 2 . 0 com - munities . To cope with the ”domain challenge” we encapsu - late development of domain - speciﬁc EUP tool as a process that takes place inside the community . However , it has been discussed that the appropriation of existing tools is often more eﬃcient than construction of tools for a domain from scratch [ 15 ] . Accordingly , we divide the community - based development of EUP tools into two layers : ( i ) inter - domain tool construction , where diﬀerent communities share a generic infrastructure that supports development and shar - ing of EUP tools and components ; ( ii ) intra - domain tool appropriation , where members of a particular community collaborate to adapt developed tools from the infrastruc - tural layer to shape a domain - speciﬁc end user development environment according to the community’s domain . 4 . 1 Structure of a Community We base our model on the presence of the same program - ming skill continuum among users in the Web 2 . 0 commu - nities as those observed in other end user programming set - tings as explained in Section3 . Such communities are com - posed of mostly end - users , however , the presence of few do - main experts with programming knowledge and few profes - sional programmers in such communities are expected . We rely on the presence of a continuum of these three main roles , namely , end users representing domain experts , domain pro - grammers , and professional programmers , to conduct the development of EUP tools requested by the end users . Note that every individual can take more than one of these three roles . For example , a computational scientist can be at the same time , a domain expert and a professional programmer , which implies his role as a domain programmer . As we will see later , in our model we deﬁne each role according to the type of activity they are involving in . Figure 1 demonstrates main roles and their primary as - signed activity in our model . End users are supposed to deal with the EUP tools to build interactive applications . Do - main programmers build domain speciﬁc instructions , to be used or requested by end users , over the provided program - ming language and simulation environment . Professional programmers develop generic EUP languages and simula - tion environments according to the domain experts’ needs . The goal of this approach is to found a meta - design environ - ment [ 7 ] with several involvement points in which users with diﬀerent interests and programming skills collaborate on the Professional programmers Domain programmers End users N u m b e r o f P a r ti c i p a n t s + _ Simulation Env . EUP Language Domain Speci ﬁ c Language D o m a i n S p ec i ﬁ c n e ss + _ End user developed applications Figure 1 : Intra - community collaboration for tool construction and appropriation . design and implementation of components required for de - veloping interactive artifacts ( see next paragraph ) . As a re - sult of providing domain - speciﬁc EUP tools for Web com - munities , we expect that a larger number of end users gain access to computational tools . In order to enable appropriation of tools developed by other communities , we focus on structuring and modular - izing the basic tools that can be built and shared at the infrastructural level . As a result , the appropriation phase will be simpliﬁed to choosing required modules and bundling them into a domain - speciﬁc EUP environment . To modu - larize the basic tools , we consider the generic components required to build interactive artifacts . To enable end users to build interactive artifacts , interactive EUP environments , such as AgentSheets , consist of ( i ) a programming paradigm suitable for end users ; ( ii ) related domain - speciﬁc language ( DSL ) that captures the domain expression ; and ( iii ) an ex - ecution environment that simulates the world in which ob - jects interact . We consider the infrastructure to support de - velopment of these three types of components together with their underlying compiler that turns the end - user developed program into the machine - executable program . In the rest of the paper we consider these components of interactive domains as the interactivity components . 4 . 2 Supporting Inter - Domain Development In our model , tool development is not an isolated task that happens solely inside a particular community . Rather , diﬀerent communities with common interest in a particular tool have to be able to contribute to the development of that tool . The essence of this approach is : Inter - community collaboration : by enabling sharing among diﬀerent communities , we enable diﬀerent communi - ties with the common interest in a tool to get to know and collaborate with each other . A domain - independent infras - tructure is required to provide the ground for shaping and representing online communities and their members around EUP tool development activities . 11 EUP Languages DSLs Simulation Environments Shared Infrastructure Customized Development Environment interactive EUP apps Appropriation by a particular community Figure 2 : Shared infrastructure to support inter - domain tool construction . Diﬀerent colors repre - sent diﬀerent communities . Simulation environ - ments and EUP languages are mostly developed by professional programmers , while DSLs are mostly developed by domain programmers . Reuse : once an interactivity component was built by a community , it can be globally re - used by all other commu - nities . The infrastructure has to provide hosting and search services for developed interactivity components . Simplifying tool appropriation : as a result of collab - orative development and reuse across communities we can minimize the overall development , i . e , a community will need to build only non - existing components . Especially , by mod - ularizing required components into shared interactivity com - ponents the infrastructure can support appropriation . Figure 2 depicts our infrastructural model . In this model the members of diﬀerent communities collaborate according to their interests to build interactivity components . 4 . 3 Web as the Target Platform Conceptually , in the proposed model it is the commu - nity who decides on the development tools and languages to build the interactivity components , and deﬁnes the tar - get platform to which the end user developed programs will be compiled . However , our main goal is to support Web 2 . 0 communities to develop Web - based interactive artifacts to support the evolution of the Web towards the Web of ap - plications . Therefore , we focus on the Web as the target platform , i . e . , the compiler transforms the end user devel - oped programs to their Web - compliant equivalent executa - bles that runs inside a Web browser . We base our developments on exploiting native Web stan - dards , and mostly JavaScript as the assembly language of the Web platform , both for the target language to which developed programs will be compiled , and for creating the EUP development environment . By exploiting JavaScript as the target language , we avoid using third - party drivers such as Java applets or Flash , and browser plugins . As a result , the running overhead applied by the third - party drivers will be removed , and the devel - oped applications will be platform and browser indepen - dent . Furthermore , we consider the community to develop the compiler in the client - side Web - based languages , i . e . , JavaScript and AJAX , to provide a responsive development environment to the end user to build artifacts . By using JavaScript to create and EUP IDE for develop - ing interactive applications : ( i ) we will be able to exploit the Web as the distributed collaborative infrastructure to extend the EUP development environment to a collabora - tive development environment , leveraging the collaborative aspects of end user programming inside communities ; and ( ii ) we provide client - side compilation , rather than server - side compilation , of end users’ programs , which brings up several advantages including 1 ) providing an interactive and responsive compiler capable of immediate compilation of ap - plications without need to send the modiﬁed programs to the server for compilation ; 2 ) transferring the compilation process from the server to the clients , distributing the com - pilation load among clients , avoiding the server to become the bottle - neck ; and thus preserving the scalability of the system ; 3 ) mobile users with no network connection can con - tinue their development without need for a server . 4 . 4 Development Process To realize the suggested model , we plan to develop an ex - perimental end user programming infrastructure for online communities to develop tools for interactive domains . We divide our development process to small prototypes that we build and connect each other in a bottom - up fashion accord - ing to the following phases : ( i ) to investigate the feasibility of carrying EUP tools and environments for interactive ap - plications to the Web , we have developed a Web - based en - gine called Ristretto Mobile which compiles AgentSheets ap - plications , a well - known EUP environment , into native Web applications [ 1 ] ; Ristretto Mobile consists of a Web - based com - piler for programs written originally in AgentSheets using Visual AgenTalk [ 22 ] which is a graphical rule - base language , the equivalent JavaScript programs for AgentSheets instruc - tion set , and a Web - based simulator that simulates the work - sheets . According to our experiments , current technolo - gies , i . e . , native Web standards and existing Web browsers , allow rendering a reasonable amount of interactivity eﬃ - cient enough to execute EUP applications on the Web . ( ii ) Ristretto Mobile only provides the compiler , with no author - ing tool . To shape an EUP IDE on the Web we plan to de - velop e Web - based an extensible programming environment ﬁrst to support developing applications in Visual AgenTalk for Ristretto Mobile and gradually move our prototype to - wards a generic environment which can contain languages developed by communities ; ( iii ) Based on our experiences with developed prototypes , we develop a repository with the capability of inserting new interactivity components , in - cluding our developed prototypes . ( iv ) We plan to develop facilities for domain appropriation , where community mem - bers could choose from already existing interactivity compo - nents inside the infrastructure , put them together and shape EUP tools requested by domain experts . The infrastruc - ture helps communities in bundling chosen components into a customized development environment for end users , and takes care of dependencies . ( v ) We plan to build facilities into the infrastructure to support collaboration among com - munity members to develop new interactivity components and embed them inside the infrastructure . 12 Upon developing the experimental infrastructure , we plan to evaluate two diﬀerent aspects of the system : 1 ) testing the suitability of the infrastructure to support diﬀerent do - mains . We plan to develop few interactivity components and embed them into the infrastructure as the proof of concept . 2 ) User / community studies on carrying domain construc - tion / appropriation using the infrastructure . 5 . CONCLUSIONS In this research we aim at support communities of typi - cal Web users to program interactive applications collabora - tively in the Web 2 . 0 framework . We suggest a community - based approach for developing domain - speciﬁc EUP tools since : ( i ) Web 2 . 0 communities consist of mostly end users , demanding EUP tools for developing interactive applica - tions , ( ii ) the targeted domain of programming is not deﬁned in such a large communities of interest , therefore every com - munity needs tools suitable for programming in their own domain ; We suggest a two - layer model to support community - based development of EUP tools , in which the bottom layer provides an infrastructure for inter - domain collaboration for developing tools and languages for building interactive appli - cations , and the top layer supports appropriation of tools de - veloped inside the infrastructure to shape a domain - oriented development environment for end users of a particular com - munity . We aim at using the Web , as the target platform on which the end user developed applications will be executed . 6 . REFERENCES [ 1 ] N . Ahmadi , A . Repenning , and A . Ioannidou . Collaborative end - user development on handheld devices . Visual Languages and Human - Centric Computing , Jan 2008 . [ 2 ] O . Beletski . End user mashup programming environments . 2008 . [ 3 ] C . Bogart , M . Burnett , A . Cypher , and C . Scaﬃdi . End - user programming in the wild : A ﬁeld study of coscripter scripts . IEEE Symposium on Visual Languages and Human - Centric Computing , 2008 . VL / HCC 2008 , pages 39 – 46 , 2008 . [ 4 ] M . Bolin . End - user programming for the web . 2005 . [ 5 ] M . Bolin , M . Webber , P . Rha , T . Wilson , and R . Miller . Automation and customization of rendered web pages . UIST ’05 : Proceedings of the 18th annual ACM symposium on User interface software and technology , Oct 2005 . [ 6 ] A . Clement . Cooperative support for computer work : a social perspective on the empowering of end users . Proceedings of the 1990 ACM conference on Computer - supported cooperative work , pages 223 – 236 , 1990 . [ 7 ] G . Fischer and E . Giaccardi . Meta - design : A framework for the future of end user development . End User Development , Jan 2006 . [ 8 ] M . Gantt and B . Nardi . Gardeners and gurus : patterns of cooperation among cad users . CHI ’92 : Proceedings of the SIGCHI conference on Human factors in computing systems , Jun 1992 . [ 9 ] C . Kelleher and R . Pausch . Lowering the barriers to programming : A taxonomy of programming environments and languages for novice programmers . Computing Surveys ( CSUR , 37 ( 2 ) , Jun 2005 . [ 10 ] G . Leshed , E . Haber , T . Matthews , and T . Lau . Coscripter : automating & sharing how - to knowledge in the enterprise . CHI ’08 : Proceeding of the twenty - sixth annual SIGCHI conference on Human factors in computing systems , Apr 2008 . [ 11 ] J . Lin , J . Wong , J . Nichols , A . Cypher , and T . Lau . End - user programming of mashups with vegemite . IUI ’09 : Proceedingsc of the 13th international conference on Intelligent user interfaces , Feb 2009 . [ 12 ] W . Mackay . Patterns of sharing customizable software . CSCW ’90 : Proceedings of the 1990 ACM conference on Computer - supported cooperative work , Sep 1990 . [ 13 ] A . MacLean , K . Carter , L . L¨ovstrand , and T . Moran . User - tailorable systems : pressing the issues with buttons . Proceedings of the SIGCHI conference on Human factors in computing systems : Empowering people , Jan 1990 . Cited for ”Gentle Slope” . [ 14 ] T . Malone , K . Grant , K . Lai , R . Rao , and D . Rosenblitt . Semistructured messages are surprisingly useful for computer - supported coordination . ACM Transactions on Oﬃce Information Systems , Jan 1987 . [ 15 ] M . Mernik , J . Heering , and A . Sloane . When and how to develop domain - speciﬁc languages . ACM Computing Surveys , 37 ( 4 ) : 316 – 344 , 2005 . [ 16 ] A . Mørch and N . Mehandjiev . Tailoring as collaboration : The mediating role of multiple representations and application units . Computer Supported Cooperative Work ( CSCW ) , Jan 2000 . [ 17 ] B . Nardi . A small matter of programming : Perspectives on end user computing . MIT Press , Jan 1993 . [ 18 ] B . Nardi and J . Miller . Twinkling lights and nested loops : distributed problem solving and spreadsheet development . International Journal of Man - Machine Studies , Jan 1991 . [ 19 ] T . O’reilly . What is web 2 . 0 . Design patterns and business models for the next generation of software , 30 : 2005 , 2005 . [ 20 ] V . Pipek and H . Kahler . Supporting collaborative tailoring . End - User Development , Jan 2005 . [ 21 ] T . Raman . Toward 2w , beyond web 2 . 0 . Communications of the ACM , 52 ( 2 ) : 52 – 59 , 2009 . [ 22 ] A . Repenning and J . Ambach . Tactile programming : a uniﬁed manipulation paradigm supporting program comprehension , composition and sharing . Visual Languages , 1996 . Proceedings . , IEEE Symposium on , pages 102 – 109 , Aug 1996 . [ 23 ] R . Stallman . Emacs the extensible , customizable self - documenting display editor . ACM SigPlan Notices , Jan 1981 . [ 24 ] J . Wong and J . Hong . Marmite : end - user programming for the web . CHI ’06 : CHI ’06 extended abstracts on Human factors in computing systems , Apr 2006 . [ 25 ] J . Wong and J . Hong . Making mashups with marmite : towards end - user programming for the web . CHI ’07 : Proceedings of the SIGCHI conference on Human factors in computing systems , Apr 2007 . [ 26 ] R . Yee . Pro web 2 . 0 mashups : Remixing data and web services . Apress , 2008 . 13