Carnegie Mellon University Research Showcase @ CMU Tepper School of Business 1979 A restricted Lagrangean approach to the traveling salesman problem Egon Balas Carnegie Mellon University Nicos Christofides Carnegie Mellon UniversityDesign Research Center Follow this and additional works at : http : / / repository . cmu . edu / tepper This Technical Report is brought to you for free and open access by Research Showcase @ CMU . It has been accepted for inclusion in Tepper School of Business by an authorized administrator of Research Showcase @ CMU . For more information , please contact research - showcase @ andrew . cmu . edu . NOTICE WARNING CONCERNING COPYRIGHT RESTRICTIONS : The copyright law of the United States ( title 17 , U . S . Code ) governs the making of photocopies or other reproductions of copyrighted material . Any copying of this document without permission of its author may be prohibited by law . A RESTRICTED LAGRANGEAN APPROACH TO THE TRAVELING SALESMAN PROBLEM by Egon Balas * 6c Nicos Christofides * * DRC - 70 - 4 - 79 September 1979 ^ Graduate School of Industrial Administration Carnegie - Mellon University Pittsburgh , PA 15213 * * Imperial College of Science and Technology London , England This report was prepared as part of the activities of the Management Science Research Group , Carnegie - Mellon University , under Grant MCS76 - 12026 A02 of the National Science Foundation and Contract N0014 - 75 - C - 0621 NR 047 - 48 with the U . S . Office of Naval Research . Reproduction in whole or in part is permitted for any purpose of the U . S . Government . Abstract We describe an algorithm for the asymmetric traveling salesman problem ( TSP ) using a new , restricted Lagrangean relaxation based on the assignment problem ( AP ) . The Lagrange multipliers are constrained so as to guarantee the continued optimality of the initial AP solution , thus eliminating the need for repeatedly solving AP in the process of computing multipliers . We give several polynomially bounded procedures for generating valid inequalities and taking them into the Lagrangean function with a positive multiplier without violating the constraints , so as to strengthen the current lower bound . Upper bounds are generated by a fast heuristic whenever possible . When the bound - strengthening techniques are exhausted without matching the upper with the lower bound , we branch by using two different rules , according to the situation : the usual subtour breaking disjunction , and a new disjunction based on conditional bounds . We discuss computational experience on 120 randomly generated asymmetric TSP ' s with up to 325 cities , the maximum time used for any single problem being 82 seconds . Though the algorithm discussed here is for the asymmetric TSP , the approach can be extended to the symmetric TSP by using the 2 - matching problem instead of AP . University Libraries Carnegie Mellon University Pittsburgh , Pennsylvania 15213 1 . Outline of the Approach The traveling salesman problem ( TSP ) , i . e . , the problem of finding a minimum - cost tour ( or hamiltonian circuit ) in a directed graph G = ( N , A ) , can be formulated as the problem of minimizing ieN j«N 1J 1J Z x - 1 , j e N 1J ( 1 ) Z Z c _ . jc , subject to 1 , i eN I JeN iJ ( 2 ) ( 3 ) x tj c { 0 , 1 } , i . j eN ( 4 ) x is a tour . For ( i , j ) eA , c . . is the cost associated with the arc ( i , j ) ; for Conditions ( 3 ) , ( 4 ) can be replaced by ( 5 ) x tj > 0 , i , j € N ( 6 ) E E * * x > a j , t cQ jcN 1J XJ U where ( 6 ) is a set of inequalities which , together with ( 2 ) and ( 5 ) , define the convex hull of all tours in G . If S and T are node sets , we denote ( S , T ) = { ( i , j ) eA | icS , jeT } . For any problem P , we denote by v ( P ) the value of ( an optimal solution to ) P . We describe an arc premium / penalty - based branch and bound method for solving TSP , which uses ( a ) a new Lagrangean relaxation of TSP and a restricted Lagrangean problem derived from it , which has constraints on the multipliers ; - 2 - ( b ) several procedures for generating inequalities which can be taken into the Lagrangean function with a positive multiplier ( premium or penalty ) , without violating the constraints or changing the multipliers generated earlier ; ( c ) a new branching rule based on disjunctions derived from conditional bounds . We first outline the method , then discuss its various components in detail . The assignment problem ( 1 ) , ( 2 ) , ( 5 ) associated with TSP will be denoted by AP . It is well known that any . integer solution to AP is either a tour ( hamiltonian circuit ) , or a collection of sub tours ( a union of dis - joint circuits ) . The Lagrangean problem mentioned under ( a ) is an assign - ment problem obtained from AP by applying premia or penalties to certain arcs , in a way which is equivalent to taking into the objective function , in a Lagrangean fashion , some of the constraints ( 6 ) . From the set of inequalities ( 6 ) we extract a subset ( 7 ) Z Z aj , x > a j , t c T cQ icN jcN 1J 1J U and call LP the linear program ( 1 ) , ( 2 ) , ( 5 ) , ( 7 ) . Though the set Q is at least exponential in | N | , empirical evidence as well as theoretical considerations indicate that there are relatively small subsets T of Q such that the value of the corresponding LP comes very close to ( or coincides with ) that of TSP . Using Lagrangean relaxation on ( 7 ) and denoting by w the vector of Lagrange multipliers , we obtain the problem L ( w , x ) , equivalent to LP , of finding w > 0 to maximize z ( w ) , where ( 1 ' ) z ( w ) « ' min z z ( c - Z w a * ) x . + Z w a * icN jcN 1J tcT Z 1J 1J tcT C U subject to z x - i , i cN JCN 1J ( 2 ) ] Z x - 1 , j eN ( 5 ) x tj > 0 , - 3 - The Lagrangean relaxation L ( w , x ) of TSP can be used to generate lower bounds on v ( TSP ) . While L ( w , x ) may yield very strong bounds indeed , depending on the choice of the inequalities ( 6 ) , its solution via , say , subgradient optimization , requires a considerable computational effort , including the solution of the assignment problems associated with every vector w generated during the procedure . Instead , we consider a restriction RL ( w , x ) of the Lagrangean relaxation L ( w , x ) . Let x be an optimal solution to AP , i . e . , to the assignment problem with cost function ( 1 ) . RL ( w , x ) is then the problem of finding w > 0 to maximize z ( w ) defined by ( 1 ' ) , ( 2 ) and ( 5 ) , subject to ( 8 ) u ± + Vj + £ w fc a ^ for some u , v cR . Problem RL ( w , x ) has two properties which make it useful towards solving TSP . First , any u , v and w satisfying ( 8 ) and w > 0 is a feasible solution to the linear program dual to LP ; therefore the objective function value of this dual linear program is a lower bound on v ( LP ) , hence on v ( TSP ) , i . e . , we have Proposition 1 . If u , v and w > 0 satisfy ( 8 ) , then ( 9 ) 2 & . + 2 v + 2 waJ < v ( TSP ) . ieN jcN J tcT Second , while x remins an optimal solution to the assignment problem with the modified objective function ( I 7 ) , the changes brought about by the penalties / premia w t , tcT , are likely to create new , alternative optima . - 4 - Whenever such an alternative optimal solution x to the assignment problem ( I 7 ) , ( 2 ) , ( 5 ) turns out to be a tour , it has the following property . Proposition 2 . If x satisfies with equality the inequality ( 7 ) indexed by t for all t eT such that w > 0 , x is an optimal tour . Proof , x and ( u , v , w ) are feasible solutions to LP and its dual , respectively . From the definition of x , we have whenever x > 0 . This , together with the condition of the Proposition , means that x and ( u , v , w ) satisfy the complementary slackness conditions . Thus x is an optimal solution to LP , hence an optimal tour . | | We start by solving the assignment problem AP in the free variables . Next we use several different procedures for generating an increasing sequence of lower bounds on v ( TSP ) , by successively identifying inequalities ( 7 ) that ( i ) are not satisfied by the current solution x to AP , and ( ii ) admit a positive multiplier w which , together with the multipliers already assigned , satisfies ( 8 ) ; and by setting the multipliers w each time to the greatest positive value compatible with ( ii ) . At any given stage , the admissible graph G Q = ( N , AQ ) is the spanning subgraph of G containing those and only those arcs with zero reduced cost , i . e . , A Q » [ ( i , j ) «A ju . + Vj + Z V i j ' C l J J - When no more inequalities ( 7 ) satisfying conditions ( i ) and ( ii ) can be found , we store the bound given by ( 9 ) and try to find a tour in - 5 - the admissible graph . If a tour is found which satisfies with equality all inequalities associated with positive multipliers , it is optimal for the given subproblem . If a tour is found which violates this condition for some inequalities , attempts are made at finding new inequalities which satisfy the condition and admit positive multipliers . If successful , these attempts strengthen the lower bound , and they may also eliminate the inequalities that are slack . In any case , the value of the tour ( in the original costs c ) provides an upper bound on v ( TSP ) , while ( 9 ) provides a lower bound for the current subproblem ; and we branch . Finally , if no tour is found in G Q , we add arcs to G Q in the order of increasing reduced costs until a tour is found in the resulting graph . The cost of this tour again provides an upper bound on v ( TSP ) , while ( 9 ) still provides a lower bound for the current subproblem ; and we branch . The assignment problems are solved by the Hungarian method , the same method is used to recalculate the reduced costs whenever some u . and v have to be changed . The constraints ( 7 ) are " subtour - breaking 11 inequalities and combinations of the latter with * some of the equations ( 2 ) , but they are used here in a novel way . The bounding procedures are all polynomial - time algorithms , considerably more efficient ( in terms of improvement obtained versus computational effort ) than earlier approaches ( like [ 3 ] ) , as evidenced by the computational results of section 5 . Searching the admissible graph G Q for a tour is accomplished by a specialized implicit enumeration procedure , with a cut - off rule . Finally , for branching we use two different rules , one which derives a disjunction from a conditional bound [ 1 ] , and one which breaks up a subtour . A preliminary version of our approach , with fewer and less sophisticated bounding procedures , was discussed in [ 2 ] . - 6 - 2 . Bounding Procedures At any stage of the procedure , the reduced costs will be defined relative to the subset T ' cTof inequalities already introduced into the function ( I 7 ) . We use three types of inequalities ( 7 ) , and we will denote by T - , T ~ and T ~ the corresponding subsets of T . For teT , let 0 ^ S CN and S • N \ S . An arc set of the form K t * ( S t ' V is called a ( directed ) cutset . Clearly , the inequalities ( 7a ) Z x . . > 1 , teT . ( i , J ) «K t 1J are satisfied by every tour , and so are the inequalities ( 7b 7 ) Z Z x < | S t | - 1 , teT . i«s t jcs t 1J or , to preserve the direction of the inequality , ( 7b ) - Z Z x . . > 1 - | SJ , t€T 9 . ieS t JcS t iJ * 2 For a given set S , the " sub tour - breaking 11 inequalities ( 7a ) and ( 7b ) are equivalent : ( 7b ) can be obtained from ( 7a ) by subtracting the sum of the equations Z x - 1 , itS . , and ( 7a ) can be obtained from ( 7b ) by the reverse operation . Nevertheless , the presence of inequalities associated with the same set S in both subsets ( 7a ) and ( 7b ) need not be avoided , since it may enrich the set of dual vectors ( u , v , w ) satisfying ( 8 ) and w > 0 . - 7 - Finally , for any k«N , S t c N \ { k } and S t » N \ S t , the arc sets K = ( S t , S t \ Ck } ) and Kj - ( S t \ { k } , S t ) are ( directed ) cutsets in the subgraph < N \ ( k } ) o f G induced by N \ [ k } . Proposition 3 . The inequalities ( 7 C ) are satisfied by every tour . Proof . Every xe ( 0 , l } n that violates ( 7c ) corresponds to a subgraph G ' of G which is either disconnected , or contains an articulation point k ; hence G / cannot be a tour . | | Actually , more can be said about the family ( 7c ) : Proposition 4 . In the presence of the constraint set ( 2 ) , for every k eN and S t c N \ { k } , the inequality ( 7c ) is implied by the two subtour - breaking inequalities associated with the node sets S U { k } and S respectively , i . e . , by ( 7b ) X X x > - | sJ ieS t U { k } j«S t U [ k } 1J and ( 7b ) 2 - S 2 x > 1 - ls t ( 2 icS JS LJ Proof . The inequality ( 7c ) is the sum of ( 7b ) - , ( 7b ) 2 and the equations X x . . « 1 , i e S t jcN 1J X x ±1 - 1 , j «S . | | i€N 1J The components of w associated with the inequalities ( 7a ) , ( 7b ) , and ( 7c ) will be denoted by \ , p , and v respectively . - 8 - 2 . 1 * Bounding Procedure 1 starts by searching for an inequality ( 7a ) which satisfies conditions ( i ) , ( ii ) of section 1 , i . e . , is violated by x and can be assigned a positive multiplier without making any of the reduced costs negative . Clearly , these conditions are satisfied for the inequality ( 7a ) defined by a cutset K t , if and only if ( 10 ) K t PI A Q - 0 , where A ~ is the arc set of the admissible graph G Q . To find K satisfying ( 10 ) , we choose any node i eN and form its reachable set R ( i ) in G Q . If R ( i ) » N , there is no cutset ( S , S ) with i eS , satisfying ( 10 ) , so we choose another i eN . If for some i eN , R ( i ) t N , then K t * * S k * V satisfies ( 10 ) for S « R ( i ) • Furthermore , ( 11 ) \ t - min c Z ( i , J ) «K t LJ is clearly the largest value that can be assigned to the corresponding multiplier without making some reduced costs negative . We thus assign X the above value and set i . e . , we apply a premium of X to each arc of the cutset K . As a result of this , the arcs for which the nrj . niTmnn in ( 11 ) is attained , become admissible , and we add them to A QJ thus enlarging the admissible graph G Q . Next , we extend the reachable set R ( i ) of node i by using the new arcs of G Q and either find R ( i ) » N , or locate another cutset K satisfying ( 10 ) . If R ( i ) » N , again we choose another node . This procedure ends when R ( i ) = N , V i cN . At that stage G Q is strongly connected , and K n A Q ^ 0 for all cutsets K » ( S , S ) , ScN . - 9 - Proposition 5 . Bounding Procedure 1 stops after generating at most 2 " ( h - l ) ( h + 2 ) cutsets , where h is the number of subtours in x . Starting with node i ^ belonging to subtour S . , every cutset adds to G an ate which includes into R ( i ^ ) a new subtour . After generating at most h - 1 cut - sets , RCi ^ - N . Now starting with node i 2 belonging to subtour S 2 t $ l and proceeding to find R ( i 2 ) , again at most h - 1 cutsets can be generated . However , since we now have i 2 c R ( i ^ ) and i ^ e R ( i 2 ) , the number of strong components of the current graph G Q is at most h - 1 . Thus , continuing to find R ( i . ) for some node i - belonging to a subtour S 3 , S ^ S ^ S j , at most h - 2 cutsets can be generated , and since the vertices of S , S 2 and S 3 now form a strong component , the number of strong components in the current graph G - is at most h - 2 . Continuing in the same way , the number of cutsets generated by the procedure ( until G o becomes strongly connected ) is at most ( h - 1 ) + ( h - 1 ) + ( h - 2 ) + ( h - 3 ) + . . . + 1 » j ( h - l ) ( h + 2 ) . | ] Since the optimal dual variables u ^ v . associated with x are not changed by this procedure , and since E u + Z v - ex » v ( AP ) , if T x is the index set of the inequalities generated by Bounding Procedure 1 , the lower bound obtained for the current subproblem is , from Proposition 1 , ( 12 ) » v ( AP ) + E \ . tTtcT , 2 - 2 - Bounding Procedure 2 starts by searching for an inequality ( 7b ) which is violated by x and admits a positive penalty without changing any of the X t i t eT ^ . If S ^ , . . . , Sk are the node sets of the h subtours of x , every inequality ( 7b ) defined by S t , t - l , . . . , h , is violated by x ; but a positive penalty ^ can be applied without violating the condition that x . . > 0 implies c » 0 , only by changing the values of some u . and v . , and only if - 10 - an additional condition is satisfied . This condition can best be expressed in terms of the assignment tableau used in conjunction with the Hungarian method . A line of the tableau is a row or a column , a cell of the tableau is the intersection of a row and a column . Cells correspond to arcs and are denoted the same way . Let S be the node set of a sub tour of x , let A t » C ( i , j ) eA Q | i , j eS t ] and A ; - C ( l . J ) cA t | 5 tj > 0 } . Proposition 6 . A positive penalty can be applied to the arcs with both ends in S . if and only if there exists a set C of lines such that ( i ) every ( i , j ) cA ' is covered by exactly one line in C , ( ii ) every ( i , j ) eA \ A ' is covered by at most one line in C , ( iii ) no ( i , j ) c A 0 \ A t is covered by any line in C . If such a set C exists , and it consists of row set I and column set J , then the ^ ^ 1 ™™ applicable penalty is ( 13 ) n - min c , ( i , J ) «M 1J where ( 14 ) M - ( I , J ) U ( I , S t ) U ( S t , J ) - Proof . Sufficiency . Suppose there exists a line set C , consisting of row sets I and column sets J , satisfying conditions ( i ) , ( ii ) , ( iii ) . Then adding an amount n > 0 to c for all ( i , j ) e ( S , S ) , as well as to all u , , i € I , and all v . , j cJ , produces a set of reduced costs c ' . such that c ' . * 0 for all ( i , j ) eA ^ , since C * I UJ satisfies ( i ) . Further , from property ( ii ) of the set C , c ^ . > 0 , V ( i , j ) eA t \ A ^ ; and from - 11 - ( iii ) , Z ' L . = c ± . = 0 , V ( i , j ) « A 0 \ A t . Thus the only reduced costs that get diminished as a result of the above modification , are those associated with arcs ( i , j ) « A for which either ( a ) nothing is added to c j , j and p , is added to u ± or to v j5 or ( 0 ) ^ is added to Z ± . and to both u t and v ^ . The two sets of arcs for which ( « ) holds are ( I , § t ) and ( § t , J ) ; whereas the arc set for which 0 ) holds is ( I , J ) . The union of these three arc sets is M defined by ( 14 ) . Thus a positive penalty at most equal to ^ defined by ( 13 ) can be applied to the arc set ( S t , S t ) in the above described manner without producing any negative reduced costs . Necessity . Suppose a penalty n > 0 can be applied to the arc set ( S t , S t ) . Since adding n > 0 to Z ±y V ( i , j ) e ( S t , S t ) , produces positive reduced costs for all ( i , j ) eA fc , in order to obtain reduced costs c ' . . = 0 for all ( i , j ) eA ^ , one must increase by p , the sum u + v for all ( i , j ) eA ' . It is easy to see that if this can be done , then it can be done by adding n to u £ or Vj ( but not to both ) , for every ( i . jjeA ^ hence there exists a set C of lines satisfying condition ( i ) . Further , if ( i , j ) S A ^ , then n cannot be added to both Ui and v . without creating c ' < 0 , hence C must satisfy ( ii ) . Finally , if ( i»j ) eA Q \ A t , then p , cannot be added to either u . or v . without making c ! . < 0 , hence condition ( iii ) must also hold . | | Given the node set S of a subtour , we have to check whether a set of lines C satisfying ( i ) , ( ii ) , ( iii ) exists . This can be done as follows . First , every row i eS t such that ( i , j ) «A Q for some j e N \ S , and every column j «S £ such that ( i , j ) eA Q for some i eN \ S , can be ruled out as a candidate for entering C . Let R and K be the index sets of such rows and columns respectively , , and let Aj and and - 12 - Since by ( i ) every cell of A ' must be covered by at least one line in C , C must contain IJJ J - . For the same reason , if ( 15 ) Aj 0 R 0 K ^ then no positive penalty can be applied to the arc set ( S , S ) . Since by ( i ) and ( ii ) every cell of A ' must be covered by at most one line in C , if ( 16 ) A fc fl Ij 0 J t * 0 , then again no positive penalty can be applied to the arc set ( S , S ) . Now assume neither ( 15 ) nor ( 16 ) holds . Then if ( I , J ) covers A ' , we set C - I 1 U J ^ and we are done ; otherwise we use the Hungarian algorithm to complete the search for a cover satisfying ( i ) , ( ii ) , ( iii ) . If such a cover exists , the Hungarian algorithm finds it , and u given by ( 13 ) can be applied as a penalty ; otherwise the Hungarian method finds a cover which violates some of the conditions ( i ) , ( ii ) , ( iii ) , in which case no positive penalty can be applied . If T 2 is the index set of the inequalities ( 7b ) which admit positive penalties p , , we have the following Proposition 7 . ( 17 ) B 2 ' B l 4 " is a lower bound on the value of the current subproblem . Proof , Whenever a penalty M > > 0 is applied to an arc set ( S , S ) associated with a constraint ( 7b ) , the cost function of AP is modified , and the value of the solution x , hence also the value of a solution to the dual of AP , the assignment problem with the modified costs , is increased by l | S t ' | M V Thus > a f t er applying JT | penalties u , the value of an optimal solution ( u , v ) to the dual of AP is - 13 - Z < i . + I v - v ( AP ) + Z ieN jeN J Using Proposition 1 , and noting that a ! l • 1 for tel , and a * = 1 - | s | for t e T - , we obtain the lower bound 2 - E fi . + S * . + E X + E ( l - | S t | ) u . ieN j«N J teT teT c B 2 - E fi . + S ieN - v ( AP ) + Z \ + 2 n teT t«T 2 , . 2 . 3 . Bounding Procedure 3 searches for inequalities of the form ( 7c ) which are violated by x and admit a positive multiplier v without requiring changes in the multipliers assigned earlier . This is done by checking for each node whether it is an articulation point of G Q . If node k is an articula - tion point , i . e . , if the subgraph ^ N - [ k ^ of G Q is disconnected , with S fc as one of its components , then denoting K ^ » ( S t , ? t \ { k } ) and K " » ( ? \ [ k } , S ) we have K£ n A Q - 0 , K£ n A Q » 0 . Thus we can apply a positive premium to the arcs in the pair of cutsets ¥ ? . , K * , whose value is ( 18 ) v . » min c . . . If T 3 is the index set of ail those inequalities ( 7c ) found to admit a positive multiplier , at the end of Bounding Procedure 3 we have ( from - 14 - Proposition 1 and ( 17 ) ) the lower bound ( 19 ) v ( AP ) teT , Z teT , If at any time during the Bounding Procedure the current lower bound matches ( or exceeds ) the upper bound given by the value of the best available tour , the current subproblem is fathomed and we turn to another node of the search tree . Otherwise , after obtaining the bound B ~ we try to find a tour in G Q . 2 . 4 . Example 1 . Consider the 9 - city TSP whose cost matrix is shown in Table 1 . re . . i = 1 2 3 4 5 8 9 1 X 8 6 13 10 - T 5 4 9 2 2 X 9 15 14 - 7 10 5 3 8 4 X 17 16 11 K 1 4 11 12 15 X 3 9 2 11 5 15 18 20 5 X 14 4 I c 8 6 12 14 17 8 16 X 11 10 2 7 12 12 13 11 12 3 X 13 7 a u 14 10 15 15 7 2 •7 13 17 i 7 16 13 o q 4 X • Table 1 The solution to AP has value 31 . The reduced cost matrix [ c \ . ] is shown in Table 2 and the solution x is given by x . « 1 for those ( i , j ) corresponding to boxes in that matrix , x admissible graph is shown in Fig . 1 . ij 0 otherwise . The corresponding - 15 - 5 6 7 8 9 V • 4 4 , 0j 8 7 4 3 0 7 X 3 10 11 4 5 6 3 6 Tj X 12 13 8 4 3 7 9 X 6 0 5 9 13 14 A ' X 11 2 8 6 10 11 3 13 X 9 6 E 3 7 6 9 •0 - X 9 5 0 10 10 12 4 a X 5 li LJ 11 11 10 5 6 loi X Table 2 Bounding procedure 1 . Cutset ^ » ( { 1 , 2 , 3 } , { 4 , 5 , 6 , 7 , 8 , 9 } admits \ - 4 , and cutset K 2 • ( { 4 , 5 } , { 1 , 2 , 3 , 6 , 7 , 8 , 9 } ) admits ^ - 3 . The lower bound , from ( 12 ) , becomes B . « 31 + 4 + 3 » 38 . The new reduced cost matrix is shown in Table 3 and the corresponding admissible graph in Fig . 2 . 1 2 3 4 _ 5 4 8 10 0 : X 10 6 9 7 T tb ! < 6 7 8 9 1 X 4 " ol 5 4 4 3 0 7 2 [ Oj X 3 7 8 4 5 6 3 3 6 X 9 10 8 4 3 7 4 5 4 5 X 6 0 5 9 5 9 10 10 ^ L X 11 2 8 6 6 6 6 7 0 10 X 9 6 7 6 4 3 3 6 X 9 5 8 5 6 0 i 9 4 X 5 9 7 9 7 8 7 5 6 0 X Fig 1 , Graph G ^ defined by the AP solution . Fig 2 . G * after bounding procedure 1 . - 16 - Bounding procedure 2 . The subtours of the AP solution are ( 1 , 2 , 3 ) , ( 4 , 5 ) and ( 6 , 7 , 8 , 9 ) . Subtours ( 1 , 2 , 3 ) and ( 6 , 7 , 8 , 9 ) do not admit positive values of ^ . However , inequality ( 7b ) for subtour ( 4 , 5 ) is - ( x 45 + x 54 ) > - 1 , and a set C of lines of the matrix of Table 3 satisfying the conditions of Proposition 6 for this subtour is given by : ( row 5 , column 5 ) . From this set C we compute p , » 2 . From Proposition 7 , the lower bound becomes B 2 = * 38 + 2 = 40 . The new reduced cost matrix [ c ] is shown in Table 4 , and the corresponding admissible graph in Fig . 3 . 1 X 4 A 5 2 ' •i 3 0 7 2 fo ] X 3 7 6 4 5 6 3 3 6 •OJ X 9 8 8 4 3 7 4 5 4 5 X . " oT 6 0 5 9 5 7 8 8 X 9 0 6 4 6 6 6 7 0 3 X 9 6 0 7 6 4 3 3 4 X 9 5 3 5 6 0 7 7 4 X 5 9 7 9 7 3 5 5 6 3 X 1 2 3 4 •c . . ] = 5 2 6 8 J3j X 3 4 7 5 Tabl * 6 7 3 9 Bounding procedure 3 . Vertex 8 is an articulation point of the admissible graph of Fig . 3 . The cutsets corresponding to this articulation point are K ^ = ( [ 1 , 2 , 3 } , [ 4 , 5 , 6 , 7 , 9 } ) and K ^ = ( [ 4 , 5 , 6 , 7 , 9 } , [ 1 , 2 , 3 } ) . Applying ( 18 ) to Table 4 , we obtain v = 2 , corresponding to element ( 5 , 1 ) . From ( 19 ) the lower bound becomes B = 40 + 2 = 42 . The new reduced cost matrix and the corresponding admissible graph are shown in Table 5 and Fig . 4 respectively . Fist . 3 . G ~ after bounding procedure 2 . Fig . 4 . G n after bounding procedure 3 . - 17 - X 4 3 0 2 1 0 5 3 5 4 2 3 6 1 i f ' J \ X 7 6 6 2 3 5 3 2 3 X 6 0 5 9 5 6 6 ~ o ] X 9 0 6 4 4 4 5 0 8 X 9 6 4 2 1 3 4 m X 9 5 5 G 0 7 7 4 a X 5 5 7 5 8 5 5 6 [ oj X 3 , 4 3 57 x I T ] 0 3 78 T a b le 5 i— i 5 6 3 9 3 . Finding a Tour and Improving the Bound Establishing whether a graph contains a tour ( i . e . , is hamiltonian ) is , from the point of view of worst - case analysis , of the same order of difficulty as finding an optimal tour . However , for the vast majority of all possible graphs , the first problem is incomparably easier than the second one . We use a specialized implicit enumeration procedure , the multi - path method of [ 4 ] , ch . 10 , for finding a tour in G Q if one can be found without exceeding a given time limit . Let x denote the solution associated with such a tour . If x satisfies with equality all inequalities associated with positive multipliers ( i . e . , if the tour defined by x crosses exactly once each cutset K , contains exactly | sj - 1 arcs with both ends in S for all sets S , t cT , and contains exactly one arc of each pair of cutsets , K ' , K " , t e T 3 ) , then x defines an optimal tour for the current subproblem , and the latter is fathomed . For example , after bounding procedure 3 , when G Q is the graph of Fig . 4 , the following tour is detected in G Q : H * ( l , 2 , 3 , 8 , 9 , 6 , 7 , 4 , 5 , l ) . This tour satisfies with equality all four constraints with positive associated Lagrange multipliers ; i . e . , H contains exactly one arc of each of the cutsets Kj ^ and K 2 , contains exactly one arc of the subtour { ( 5 , 4 ) , ( 4 , 5 ) } , and contains exactly one arc of the set K ^ U K 1 ^ . Thus , H is an optimal solution to the TSP and B 3 = 42 is its value . - 18 - If an inequality that is slack for x belongs to one of the sets ( 7a ) or ( 7b ) , we attempt to strengthen the current lower bound by introducing some new inequalities ( of the same type ) that are tight for x , and that admit positive multipliers . If the attempt is successful , it may also result in the removal of the inequality that is slack for x . 3 . 1 . Bounding Procedure 4 . Suppose the inequality ( 7a ) associated with the cutset K is slack for x , i . e . , the tour H defined by x intersects K fc in more than one arc , and let HTK t - £ ( 1 ^ j ^ , . . . , ( i , j ) } . For every ( i , j ) e HOK , let S r be a set of nodes containing j and such that , denoting S r • N \ S r , the cutset K - ( 5 T , S r ) contains no other arc of H than ( * - r J r ) - Then the inequalities Z x > 1 , r - l , . . . , p 1J are all satisfied with equality by x . Since every K . contains an arc with zero reduced cost , namely the arc ( i , j ) also contained in K , the above inequalities do not admit a positive premium , unless the premium X applied to K t is reduced . If this is done , however , then a positive premium may be applicable to several of the sets K ^ , and the sum of these premia may well exceed the amount by which X must be reduced , i . e . , an improvement of the lower bound may be obtained . The conditions under which this is possible are stated in the next two propositions . Proposition 8 . The tour H intersects the cutset K • ( § r , S r ) only in the arc ( i r > i v ) > if a « * °»ly if the arcs of H with both ends in S r form a path whose first node is j . - 19 - Proof . Let H = ( i ( l ) , . . . , i ( n ) } , and without loss of generality , assume d r »J r ) * [ i ( l ) , i ( 2 ) } . Now suppose either S r = ( j ( 2 ) } , or the arcs of H with both ends in S r form a path ( i ( 2 ) , . . . , i ( k ) } . Then H intersects the cutset K ^ = ( S ^ S * ) in the single arc [ i ( l ) , i ( 2 ) ] « ( i , j ) . Conversely , suppose S r # [ j ( 2 ) } and the arcs of H with both ends in S r either form a path P whose first node is not j ( 2 ) , or do not form a path . In the first case , HfTK ^ = [ i ( h ) , i ( h + l ) ] , where i ( h + l ) is the first aode of P . In the second , the arcs of H with both ends in S r form k paths P - . . . . , P , , 1 ' k ' with k > 2 ; and £rK tr - - CKh ^ . Khj + l ) ] f . . . , [ 1 ( 1 ^ ) , 10 ^ + 1 ) ] f where l ( h r + l ) is the first node of P r , r = * 1 , . . . , k . \ \ Proposition 9 . A positive premium can be applied to the cutset K ( provided that \ t is decreased ) if and only if ( 20 ) ^ V n A 0 * 0 ' If R ^ 0 is the set of those r e { l , . . . , p } for which ( 20 ) holds , the maximum premium applicable to each K ^ . , reR , is ( 21 ) X r » min [ \ . , min c . ) > 0 ; provided the premium X applied to K is replaced by ( 22 ) . X « X - max X r . rcR This replaces the current lower bound B by ( 23 ) B 7 » B + Z X r - max X r . rcR reR Proof , A decrease in X increases the reduced costs of all arcs of K ; hence makes it possible to apply a positive premium to the arcs - 20 - of those , and only those , cutsets K satisfying condition ( 20 ) The maximum size of the premium on I ^ r is X defined by ( 21 ) , positive for those r for which ( 20 ) holds . The premia X T are however applicable only if X is diminished by the amount of the largest premium applied to the arcs of any cutset K ^ i . e . , only if X . is replaced by X of ( 22 ) ( otherwise some of the reduced costs become negative ) . If this is done , the current lower bound B is replaced by B 7 - B + Z X T + ( X - X ) reR which yields ( 23 ) after substituting for \ t . | | Bounding Procedure 4 looks for cutsets K to which a premium X > 0 had been applied and which are intersected by the tour H in more than one arc . For each arc ( i , j ) of fl that belongs to such a cutset K , we try to find a set S of nodes containing j and satisfying the conditions of Propositions 8 and 9 ; i . e . , such that the arcs of H with both ends in S r form a path whose first node is j , and that the cutset K ^ • ( S r , S r ) satisfyies ( 20 ) . As a matter of practicality , we first try | s r j * 2 , then | S r | » 3 etc . , until either we find a set which satisfies ( 20 ) or we find out that none exists . Taking the candidate sets in this order makes sense , since smaller sets S r define smaller cutsets K ^ over which one takes the minimum in ( 22 ) to define the premia \ r . If no sets S with the desired properties is found , we take another * r arc of HDK t . Otherwise we compute X , the premium to be applied to the cutset K ^ r , using ( 22 ) ; and then take the next arc of HD K . When all arcs of HHK ^ have been examined , we compute the new value X of the premium - 21 - applicable to the arcs of K , . , as given in ( 22 ) , and replace \ fc by \ All this replaces the reduced costs c . . by : ij - * • ( i . j ) eK \ K . , reR c ^ - A . + max A . ( x , j ) eK ( IK , r eR scR ^ c c + max X 8 ( i , j ) « K \ ( U K ts ) _ S «R C seR tS ^ c ij all other ( i , j ) eA and the lower bound B by B ' defined in ( 23 ) . If \ ft > o , the inequality associated with K fc ( which is slack for x ) continues to be represented in the Lagrangean form ( I 7 ) . If , however , \ - 0 , i . e . , max \ r - X , then reR t the inequality corresponding to K , . is removed from ( I 7 ) and we have succeeded in replacing this constraint , slack for the solution x , with a set of inequalities that are all tight for x . If X l is the index set of those inequalities ( 7a ) that are slack for x and for which | R | ^ 0 , and if we attach a subscript t to the index sets R associated with each cutset K t and to the premia X r indexed by R , then at the end of Bounding Procedure 4 we have the lower bound ( 24 ) B 4 - B 3 + £ Z X * - Z max \ * 3 . 2 . Example 2 . Consider the reduced cost matrix of Table 6 resulting from the solution of AP for an 8 - city TSP . The value of the AP solution is v ( AP ) • 50 . The admissible graph is given in Fig . 5 . - 22 - I 2 3 4 5 6 7 3 1 X 3 9 El 6 7 8 5 o B X 5 7 4 0 9 4 5 0 X 6 5 8 7 5 4 7 8 X 6 9 6 0 5 3 4 5 6 X HI 6 8 6 7 6 7 5 El X 8 2 7 3 9 3 6 2 6 X 3 6 5 4 9 5 4 El X Table 6 Applying bounding procedure 1 and taking cutset Kj» ( [ 1 , 2 , 3 , 4 } { 5 , 6 , 7 , 8 } ) we obtain X . ^ - 3 and hence B = 53 . The reduced cost matrix [ c . . ] is shown in Table 7 and the admissible graph G Q in Fig . 6 . 1 2 3 4 5 6 7 3 1 X 3 9 ED 6 7 8 5 2 0 X 5 7 4 0 9 4 3 5 a X 6 5 5 7 5 4 7 8 13 X 6 9 6 0 5 0 1 2 3 X 0 6 8 6 4 3 4 2 X 8 2 7 5 6 0 3 2 6 X GO 3 3 2 I 6 5 4 iD X Table 7 Bounding procedure 1 is complete and bounding procedures 2 and 3 are unsuccessful in improving the bound beyond B » 53 . Fig . 5 . Graph G Q defined by the AP solution . \ t V f ( X = 3 ) Fig . 6 . G after bounding procedures 1 , 2 and 3 . - 23 - A tour H = ( 1 , 5 , 6 , 2 , 3 , 7 , 8 , 4 , 1 ) is detected in G Q , but H contains two arcs of the cutset K - , and is therefore not necessarily optimal . Applying bounding procedure 4 to L , we identify the cutsets K . = ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , { 7 , 8 } ) with \ J»2 , and K 2 » ( { 1 , 2 , 3 , 4 , 7 , 8 } , { 5 , 6 } ) with 2 \ = 2 , while reducing the multiplier associated with cutset K ^ from X x - 3 to Xf 1 . The new reduced cost matrix is given in Table 8 and the associated admissible graph is shown in Fig 7 . 1 2 3 4 5 6 7 8 1 X 3 9 0 6 7 3 5 2 X 5 7 4 0 9 4 3 5 El X 6 5 8 7 5 4 7 8 m X 6 9 6 0 5 0 1 2 3 X 4 6 6 4 3 4 2 0 X 6 0 7 5 6 0 3 0 4 X B 8 3 2 1 6 3 2 a X Table 8 The lower bound is now improved from 53 to B , * 53 + 2 + 2 - 2 * 55 , as given by ( 24 ) . Next we turn to the inequalities ( 7b ) . 3 . 3 . Bounding Procedure 5 . Suppose the inequality ( 7b ) defined by the node set S is slack for x , i . e . - , the tour 3 contains fewer than | S | - 1 arcs of the set ( S , S ) • Let G be the subgraph of G induced by the arc set H n ( S , S ) , i . e . , the graph consisting of those arcs of the tour H with both ends in S , and the end - nodes of these arcs . Note that H ( 1 ( st f St ) ffl ^ y b « «npty , since it is possible for a tour to contain all Fig . 7 . G n after bouading procedure 4 . - 24 - nodes in S without containing any arc with both ends in S t J and when this is the case , no new inequalities can be derived from S ^ . Assume now that H f ) ( S ^ S ) £ 0 , and let C , . . . , C be the ( connected ) components of G . For q $ Q « 0» - » - > s } , let S and A denote the node set q q and arc set , respectively , of C . By construction , each C is an open ( directed ) path , with 2 < | S q | < | S t | - 1 and | A q | * Js q | - 1 ; hence x satisfies with equality each of the inequalities S q S qx . j < | s q ! - i . q cQ i e S q j e S q 1J or , to put them in the form ( 7b ) , ( 25 ) - £ £ x > 1 - | S q | , q cQ . i e S q j c S q 1J Since ( S q , S q ) ( lA o ^ 0 , VqcQ , these inequalities do not admit a positive penalty ( without a change in the dual variables u , v ) , unless the penalty M * associated with S is reduced . If , however , this can be done , then each of the inequalities ( 25 ) admits a positive penalty and the current lower bound may be strengthened . The next proposition states the conditions for this . Let F be the set of those arcs of 6 having both ends in S , but not both ends in the same set S q , for any q e Q ; i . e . , let F - ( S . , S ) - U ( S q , S q ) . C t t q cQ Proposition 10 . A penalty i± * > 0 can be applied to each of the arc sets ( S q , S q ) , q eQ ( provided that the penalty u is decreased ) , if and only if ( 26 ) F t fl A Q * 0 . - 25 - If ( 26 ) holds , then ( 27 ) u = min c . . > 0 , = min c . . ( i , j ) eF tlJ and the penalty | ± t can be applied to each arc set ( S q , S q ) provided that the penalty u > t applied to ( S t , S t ) is replaced by l * t - M» * . This replaces the current bound B by ( 28 ) B B + ( | Q | - 1 ) * . Proof . Since ( S q , S q ) C ( S t , S t ) and ( S q , S q ) n A Q * 0 , Vq € Q , a positive penalty ^ * can be applied to any ( and all ) of the arc sets ( S q , S q ) if and only if the penalty n fc applied to the arc set ( S t , S t ) can be reduced by the same amount y , t . This , however , is possible if and only if no arc in the set F fc has a zero reduced coat ( i . e . , condition ( 26 ) is satisfied ) * and n t does not exceed the reduced cost of any arc in F . When these conditions are present , all arc sets ( S q , S q ) , q «Q , can be penalized by the amount | ± * specified in ( 27 ) , provided the penalty ^ on the arc set ( S t , S t ) is replaced by ^ - j± * . The effect of all this on the lower bound is to add y , * as many times as the number | Q | of components of G , and to subtract JJ , * once ; i . e . , to add to the current bound B the amount ( | Q | - D * * • II Bounding Procedure 5 takes an inequality ( 7b ) that is slack for £ , forms the associated arc set F fc defined above , and checks condition ( 26 ) . If ( 26 ) is not satisfied , nothing can be done , and the procedure goes to the next ineqxiality that is slack for x . if ( 26 ) holds , we calculate » * given by ( 27 ) , t and penalize by p , * all arc sets ( S q , S q ) , qeQ , defined by the components of the graph G ; while replacing the penalty y , on the arcs of ( S , S ) , by M» - n * . This replaces the reduced costs c . . by - 26 - c and the current lower bound B by B " defined by ( 28 ) . If y , < ^ the inequality ( 7b ) defined by the vertex set S t ( which is slack for x ) continues to be part of the Lagrangean expression ( I 7 ) ; if , however , M» t - U ^ , i . e . the penalty associated with the inequality in question becomes zero , then we have succeeded in replacing this inequality in ( I 7 ) by a set of other constraints that are all tight for x . Next the procedure goes to another inequality ( 7b ) that is slack for x . When all such inequalities have been examined , let T - be the index set of of those among them for which condition ( 26 ) was satisfied , and for each t € T 2 , let | Q t | be the number of components of the graph G . Bounding Procedure 5 then produces the lower bound ( 29 ) B - B 4 + E + < | QJ - Ol * * • teTj . Finally , we turn to the inequalities ( 7c ) . 3 . 4 . Bounding Procedure 6 , Suppose the inequality ( 7c ) associated with the articulation point k and the cutsets K ^ » ( S ^ S ^ \ [ k } ) , K y / = ( ? \ { k } , S ) is slack for x , i . e . , the tour H defined by x contains more than one arc of the set K ^ U K " , and let H fl ( K ^ U K ^ ) - l ( i r j ^ ) , . . . , ( i pf J p ) } . For every ( i r , J r ) e£n ( K ^ U K ^ ) , r * l , . . - , p , we will specify a node set S r CN \ { k } such that , denoting S * » N \ S r and K ^ « ( S r , ? r \ Ck } ) , K ^ r « ( s ' XCk } ) , S r ) , the only arc of H contained in K ^ U K ^ is ( i r , J r ) . - 27 - Proposition IX , The only arc of H contained in K ' U K " is ( i , j ) , if and only if S = S \ { k ] , where S is the node set of one of the two paths P x = { k , . . . , i r } and P 2 - £j r , . . . , k } in H . Proof . Assume S « S \ { k ] , where S is the node set of P - or P - . In the first case , H O K ^ - { ( i r , J r ) } and H O K ^ = 0 ; in the second , H d K ^ = 0 and H H K ^ r - { ( i r , J r ) } . In both cases , ( i r »J r ) is the only arc of H contained Conversely , let ( i , j _ ) be the only arc of H contained in K ' U K " . Then either [ ( i ^ j ^ } * H O K ^ and HPIK ^ . - 0 , or ( ( i r , J r ) } - HOK ^ , and ^ / * r HflK = 0 . In the first case , H enters S from k rather than from some node of S ^ Mk } , since HflK ^ = 0 ; and it exits S r exactly once , through i y ; hence S r = S \ ( k } , where S is the node set of P - . In the second case , H exits S r through an arc whose front end is k , rather than some node of S T \ { k ] , since HflK ^ = 0 ; and it enters S r exactly once , through j ; hence S r - S \ { k } , where S is the node set of P 2 . | | Thus , if the node sets S r , r » l , . . . , p , satisfy the conditions of Proposition 11 , then the inequalities are all satisfied by x with equality . The next proposition states the conditions under which a positive premium can be applied to the sets K Proposition 12 . A positive premium can be applied to the arc set K tr UK tr lf and ° nly if ( 30 ) - 28 - If R ^ 0 is the set of those re { l , . . . , p } , for which ( 30 ) holds , the maximum premium applicable to each K ' U K ' , reR , is ( 31 ) v r * min { v min c } , t ( U ) eK 1J where K » < K t r UK tr ) NjC t ; P rovided t he P remium vt applied to K t is replaced by ( 32 ) v » v - max v . C C reR This replaces the current lower bound B by ( 33 ) B ' » B + E v r - max v r . reR reR Proof . Analogous to the proof of Proposition 9 . | | Bounding Procedure 6 looks for indices t€£ ~ for which a positive premium v has been applied to the arc set K ^ U K ^ , and for which H n ( K ^ U K ^ ) » { ( i 1 , j 1 ) , . . . , ( i p , j p ) } , with p > 2 . Given such a t « 3 > for each re { l , . . . , p } we use the node set of the path P r = ( k , . . . , i r ) in H , after removing from it node k , to derive an arc set of the form K ^ r U K ^ defined in Proposition 11 . We then check whether K ^ U K ^ satisfies ( 30 ) , and if so , we calculate the premium v to be applied to K ' UK ' ' ; otherwise we move to the next re ( l , . . . , p } . When all arcs of H n ( K ^ U K ^ ) have been examined , we compute the value v of the premium applicable to the arcs of K , as given by ( 32 ) , and replace v by G . All this replaces the reduced costs c . . by - 29 - c ' = ij - c . c . C . r - V - v r + . + maxseR max v S€R s V . , reR Ui . V . JL L . ( i , 3 ) « ( K t / r UK t ' fr ) nK t , reR ( i , 3 ) «K t \ U ( ^ s UK ^ s ) seR all other ( i , j ) eA and the lower bound B by B 7 defined in ( 33 ) . As in the case of Procedures 4 and 5 , if v = 0 , the inequality associated with K ' UK ' ' is removed from the Lagrangean function ( I 7 ) , otherwise it stays there with the new premium . Let T ^ be the index set of those inequalities ( 7c ) that are slack for x and for which | R | # 0 , and let us attach a subscript t to the index set R associated with K ' U K 7 / and to the premia v r indexed by R . At the end of Bounding Procedure 6 we then have the lower bound ( 34 ) B - B + I Z s > \ - £ max v r . tex ^ rcR t t « 3 rtR t Naturally , if at any stage of the bounding procedures described above the lower bound for the current subproblem matches the upper bound on v ( TSP ) given by the value of the best tour at hand , the current subproblem is fathomed . At this point we may find ourselves in one of two possible situations : ( a ) we have found a tour in GQ , and used it to obtain the lower bound B $ on the value of t ^ e current subproblem ; or ( P ) the attempt to find a tour was unsuccessful , and B ^ is the best lower bound we have for the current subproblem . In case ( j3 ) , we define G » ( N , A ) , with A » ( ( i , j ) eAJc \ . < e } , where the cT . . are the current reduced costs and e is the smallest number for which we are able to find a tour in G within the given time limit . In - 30 - either case , we denote by H the tour at hand , by ic the associated solution , by c \ . , ( i , j ) cA , the last set of reduced costs , and by B the lower bound for the current subproblem . Obviously ex , where c is the original cost vector , is an upper bound on v ( TSP ) , and the best such upper bound at each stage will be denoted by B * . 3 . 5 . Computational complexity of the bounding procedures . Each of the six bounding procedures discussed in sections 2 and 3 is polynomially bounded . For each of then except for the first one , the number of operations required in the worst case is 0 ( n ) , where n is the number of cities . For procedure 1 , 4 this number if 0 ( n ) . Solving the assignment problem at the start also 3 requires at most 0 ( n ) operations . At every node of the search tree , the bounding procedures are applied once ( after solving the assignment problem , if necessary ) in the order 1 , 2 , 3 . If at that point the node was still not fathomed ( i . e . , the lower bound is still below the current upper bound ) , an attempt is made at finding a tour in G Q . Though there is no algorithm guaranteed to accomplish this in polynomial time , we let our implicit enumeration procedure run only for a fixed amount of time , that is an input parameter defined as a linear function of n . If a tour is found , bounding procedures 4 , 5 , 6 are applied in that order ; otherwise we branch . In conclusion , the amount of work performed at any given node of the 4 search tree is 0 ( n ) in the worst case . 4 . Branching Rules Before branching , we attempt to fix some variables by using the bounds B and B * . Let j ) €A | c , . > B * - B } . - 31 - It is not hard to show ( see [ 1 ] ) that , if the reduced costs c . . are derived from the same dual solution and Lagrange multipliers as the lower bound B ( as is the case here ) , then any solution x to TSP such that ex < B * must satisfy the condition x . . = 0 , ¥ ( i , j ) eQQ . Hence we set x » 0 , ( i , j ) €Q n for the current subproblem and its descendants , i . e . , we replace A by AX * } - . Next we describe two branching rules , which we use intermittently . The first rule derives a disjunction from a conditional bound [ 1 ] ; the second rule derives one from a subtour - breaking inequality . 4 . 1 . A disjunction from a conditional bound can be obtained as follows . Consider a family of sets Q ^ C A , k • l , . . . , p , such that cf > 0 , ¥ ( i , j ) e ( X , k • l , . . . , p . Then if the inequalities ( ^ X« , ^ 1» , K ^ . L , • « . , p were added to the constraint set of LP , the lower bound B could be improved by choosing appropriate multipliers for these inequalities . Further , if this improved bound ( termed conditional , because of the hypothetical nature of the inequalities ) matches the upper bound B * , then every solution better than the one associated with B * violates at least one of the above inequalities ; i . e . , satisfies the disjunction ( 35 ) V ( x . . = » 0 , ¥ < i f j ) ea ) . fc - 1 1J To implement this principle , we first remove from the Lagrangean function ( l ' ) all those inequalities ( 7a ) and ( 7c ) that are slack for x while the associated multiplier w is positive . If T is the index set of these inequalities , this removal amounts to replacing B by B - B - E w - 32 - and c . . by - t = c . . + S , a w for ( i , j ) eA . Next , we choose a minimum - cardinality arc set S CH such that ( 36 ) Zx ? c > B * - B . S J The existence of such S CH would be guaranteed if we removed from ( l ' ) all inequalities ( 7 ) that are slack for x ( see [ 1 ] for a proof ) . However , removing the inequalities ( 7b ) would either produce negative reduced costs , or would require a recalculation of the u . and v . . To avoid this recalculation , we restrict ourselves to the removal of inequalities ( 7a ) and ( 7c ) , taking the risk of not being able to find a set S CH satisfying ( 36 ) . Whenever this happens , we apply the second branching rule , to be discussed below . Given that ( 36 ) holds , let S = { ( i 1 , J 1 ) , . . . , ( l , j ) } . We then ( i , j ) for as many indices kc { l , . . . , p } as possible , subject to the conditions construct a p x | A | 0 - 1 matrix D = ( d£ ) by setting d£ . * 1 in each column ( 37 ) d£ - 1 , k - l , . . . , p Vk and ( 38 ) E dj c < c , ( i , J ) eA . fc - 1 2 Vk LJ These constraints leave some freedom for choosing the entries d ^ of each column ( i , j ) eA , which we use to make the number of l ' s in each row as close to equal as possible . - 33 - Propositioa 13 . Every solution x to TSP such that ex < B * satisfies the disjunction ( 39 ) V ( x = 0 , V ( i , j ) eQ ) , k - 1 XJ K where ( 40 ) ) cA | dJ 1 } , k l , . . . f P . Outline of proof ( see [ 1 ] for details ) . If x violates ( 39 ) , it satisfies ( 41 ) > x > 1 , k - l , . . . , p . Adding ( 41 ) to the constraint set of LP and assigning the multiplier ( dual variable ) c . . to the k inequality ( 41 ) , yields the lower bound B + I c - B + Z Z = c . fc - 1 Vk ( iJ ) eS J > B * where the last inequality follows from ( 36 ) . Hence ex > B * , | | The disjunction ( 39 ) creates p subproblems . In the k subproblem we have x . . • 0 , ( i , j ) €Q , , and since ( i . , j . ) cHfl Q , , the tour H becomes infeasible for each of the subproblems . On the other hand , the current solution to AP remains feasible for each of the subproblems . 4 . 2 . A disjunction from a subtour breaking inequality is obtained in the usual way ; i . e . , if S is the arc set of a subtour of the AP solution , then every solution to TSP satisfies the disjunction : ( 42 ) \ / ( x . . - 0 and x = 1 , Vt < k - 1 ) V Vk W - 34 - At an arbitrary node of the branch and bound tree , a subset S f c5 of the arc set S ( of the sub tour selected for branching ) may already have been fixed to be in the solution . In this case set S in disjunction ( 42 ) is replaced by S \ S ' . Branching on ( 42 ) creates | s \ S f | subproblems - For each of these subproblems , the AP solution to the parent problem becomes infeasible . In choosing the arc set S for the disjunction ( 42 ) , it is desirable to give preference to subtours ( of the current AP solution ) having either a minimum number of arcs ( min | S | ) , or a minimum number of free arcs ( min | s \ S v | ) . In the computational tests discussed in the next section we used the first of these two criteria . As to the two disjunctions ( 39 ) and ( 42 ) , an efficient procedure must use them intermittently , since ( 39 ) can on occasion be considerably stronger than ( 42 ) , while at other times it can be much weaker . We tried several rules for mixing them , and the one actually used in the tests is discussed in the next section . S . Implementation and Computational Experience . Our algorithm was programmed in FORTRAN IV for the CDC 7600 and tested on a set of 120 randomly generated asymmetric TSP ' s of sizes varying between 50 and 325 cities . Here we discuss some features of the implementation , give the computational results , and interpret them . 5 . 1 . Use of sparsity . Unlike in the case of those symmetric TSP ' s whose costs are baaed on distances and can therefore be generated whenever needed from the 2n coordinates of the cities , in the case of the asymmetric TSP one has to explicitly store the costs , whose number in case of a complete graph is n ( n - l ) . However , our procedure derives both lower and upper bounds on - 35 - the value of the problem and , as discussed at the beginning of section 4 , provides a valid criterion for setting to 0 certain variables . As it will be discussed below , the number of variables that can be fixed at 0 before the first branching is usually very high . Therefore at that point we actually remove from the graph all those arcs whose variables can be fixed at 0 , and from then on we work with a graph ( usually quite sparse ) represented by a list of nodes and a list of arcs with their costs . Additional fixing of variables ( at 0 or 1 ) later in the procedure is handled differently ( see below ) . 5 . 2 , Solution of the AP ' s . At every node of the search tree , a subset of variables is fixed at 0 , another subset is fixed at 1 , and the current problem is the one in the free variables . A variable x , . is set to 1 by adding a large number M > 0 to all c . , k - 1 , . . . , n , k ^ j . A variable x is set to 0 by adding M to c . The reason for not simply removing the arc from the graph , as done before the first branching , is that ( a ) the variable and its cost may be needed later on another branch ; ( b ) the transition from the old AP solution to the one for the new subproblem is easier this way . All AP ' s are solved by the Hungarian algorithm modified as follows : ( i ) At every subproblem , we start with a solution derived from the solution of the predecessor problem . In particular , the growing of an alternating tree ( in search of an augmenting path during the application of the Hungarian algorithm ) starts with a matching ( i . e . , a set of independent zeroes in the reduced cost matrix ) derived from the solution to the predecessor of the current subproblem . A single augmenting path is almost always sufficient to solve the current AP . - 36 - ( ii ) Since the Hungarian algorithm is a dual procedure , it can be terminated prematurely whenever the value of the objective function exceeds the value of the current upper bound . 5 . 3 . Branching and node selection . The two types of branching discussed in section 4 are used intermittently according to the following rule . A branching of type 1 ( based on disjunction ( 39 ) ) is performed whenever a set of arcs SCH , S « { ( i . Jj ) , . . . , ( i , j ) } , can be found , such that ( i ) inequality ( 36 ) is satisfied ; ( ii ) | s | < ^ + 1 , where p is the condinality of the smallest subtour in the current AP solution ; and ( iii ) at least n / 3 variables can be fixed at 0 on each branch . Whenever any of the above conditions is violated , a branching of type 2 ( using disjunction ( 42 ) ) is performed . The node selection rule used in the code is to ehoose a successor of the current node whenever available , and otherwise to select a node k for which the following evaluation attains its minimum : Boo - new - Here B ( k ) is the lower bound for subproblem k , v ( AP ) is the value of the ( initial ) AP , while s ( 0 ) and s ( k ) are the number of subtours in the solutions to the initial AP and the current one ( at node k ) , respectively . The integer s ( k ) is used as a measure of the " distance " of the AP solution at node k from an optimal tour . 5 . 4 . Information stored for each subproblem . All subproblems are stored on a linked list in order of increasing lower bounds . For each subproblem k the following information is stored : - 37 - - The AP solution . - The value of the associated bound . - A pointer to the father node of node k . - A code to indicate the type of branching ( one of the 2 types described above ) that produced node k . - The number of sons of the father of node k . - The rank ( index ) of node k among its brothers . - If the type of branching that produced node k was based on disjunction ( 39 ) , we store the arcs in S = f ( i , , j _ ) , . . . , ( i , j ) } . If it was based on 11 p p disjunction ( 42 ) , then a pointer gives the subtour in the AP solution corresponding to S in ( 42 ) . - A list of the operations ( in coded and ordered form ) which produced the current matrix [ c . . ] from the matrix for the predecessor node . ( This is not strictly necessary but speeds up considerably the backtracking process ) . 5 . 5 . Computational results . The above described code was run on the CDC 7600 to solve 120 randomly generated test problems whose associated ( directed ) graphs are complete and whose cost coefficients were drawn from a uniform distribution of the integers in the range [ 1 , 1000 ] . The problems belong to 12 classes based on size , with n s 50 , 75 , . . . , 300 , 325 , and with 10 problems in each class . Table 9 summarizes the results . These results are quite remarkable , in that the number of nodes generated is surprisingly small , and seems to increase only slightly faster than the problem size ( number of cities ) . This is also illustrated on Fig . 8 , where the slope of the curve is only slightly steeper for 200 < n < 325 than for 50 < n < 200 . Note , also , that the maximum time required to solve any one of the 120 problems was 82 seconds . Table 9 . Computational results on random asymmetric TSP ' s . Class 1 2 3 4 5 6 7 8 9 10 11 12 n 50 75 100 125 150 175 200 225 250 275 300 325 Average no . of nodes 12 . 3 26 . 6 39 . 1 42 . 7 45 . 7 58 . 3 63 . 4 84 . 1 88 . 5 106 . 4 124 . 1 141 . 8 Computing time ( CDC 7600 seconds ) Average . 20 . 29 . 71 1 . 13 1 . 97 4 . 18 6 . 06 10 . 44 13 . 65 21 . 74 38 . 37 49 . 66 Maximum . 88 . 93 1 . 41 2 . 07 3 . 30 6 . 68 19 . 33 18 . 65 17 . 43 68 . 86 55 . 15 81 . 57 B o 25 . 2 26 . 7 21 . 8 19 . 6 19 . 6 20 . 1 14 . 7 11 . 1 12 . 5 9 . 3 10 . 7 7 . 7 Percentage of fathomed b B l 29 . 1 26 . 6 30 . 7 34 . 4 28 . 5 28 . 7 33 . 9 29 . 6 29 . 7 25 . 4 28 . 9 32 . 3 B 2 6 . 9 10 . 3 9 . 5 12 . 0 15 . 1 17 . 4 14 . 9 22 . 6 17 . 2 20 . 5 19 . 1 18 . 7 B 3 10 . 4 10 . 1 14 . 9 13 . 8 12 . 9 13 . 7 17 . 2 16 . 8 21 . 9 19 . 3 23 . 8 21 . 6 nodes y H 21 . 4 19 . 8 16 . 5 16 . 5 13 . 3 15 . 4 12 . 1 8 . 8 9 . 2 8 . 5 6 . 9 7 . 8 B 4 , 5 , 6 7 . 0 6 . 5 6 . 6 3 . 7 10 . 6 4 . 7 7 . 6 11 . 1 9 . 5 7 . 0 10 . 6 11 . 9 B o 5 . 3 5 . 3 4 . 9 4 . 8 3 . 9 4 . 6 4 . 1 3 . 8 3 . 3 2 . 9 3 . 1 2 . 6 B l 15 . 5 15 . 4 15 . 1 16 . 0 16 . 3 16 . 9 16 . 5 16 . 3 17 . 6 18 . 5 18 . 9 20 . 1 Percentage spent B 2 26 . 0 26 . 9 27 . 8 23 . 9 24 . 8 28 . 4 29 . 7 29 . 1 27 . 7 27 . 9 29 . 1 30 . 3 B 3 15 . 3 12 . 6 14 . 1 17 . 3 14 . 9 14 . 8 16 . 7 16 . 4 17 . 3 16 . 5 14 . 1 16 . 0 of time on H 1 . 2 0 . 8 0 . 8 1 . 1 1 . 3 0 . 9 1 . 6 1 . 8 1 . 6 1 . 9 2 . 1 2 . 1 B 4 , 5 , 6 20 . 1 20 . 7 23 . 1 26 . 1 26 . 6 19 . 3 19 . 1 20 . 1 20 . 2 18 . 9 20 . 0 17 . 1 Other 16 . 6 18 . 3 15 . 2 10 . 8 12 . 2 15 . 1 12 . 3 12 . 5 12 . 3 13 . 4 12 . 7 11 . 8 00 I Notes , n : number of cities B • lower bound obtained by solving the current AP and adding to v ( AP ) a penalty derived from [ " c ] B 1 > B 2 ' B 3 : l o w er bound obtained by procedures 1 , 2 and 3 , respectively H : upper bound obtained by finding a tour ln G satisfying the condition of Proposition 2 B , - • lower bound obtained by procedures 4 to 6 Other : branching , node selection , updating , etc . •I ? Fig . 8 . Number of nodes in the search tree 33 a function of problem size ( a ) - 40 - Since the average cost of the various bounding procedures is not proportional to their usefulness , we have tested each of the bounding procedures individually and in subsets to see whether their use pays off . The outcome of our tests was that using all 6 bounding procedures is more efficient than using any subset in any combination . Another remarkable feature of the approach discussed here is the large number of arcs that can be removed from the graph ( of variables that can be permanently fixed at 0 ) at the root node of the search tree , as a result of the test discussed at the beginning of section 4 . This is shown in Table 10 . The fact that such a high proportion of the arcs can be removed before branching shows the power of the bounding procedures used in our approach . For a comparison , if only the bound obtained from AP were used , then the percentage of variables removed in problem classes 1 , 2 and 3 would be on the average 87 % ( and this percentage does not seem to increase with problem size ) . Thus , for problem class 3 , for example , our bounding procedures reduce the number of arcs remaining in the graph from izhe 13 % that would be left by the AP bound , to 2 . 9 % . Table 10 . Percent of arcs removed on the average at the root node . Problem class Arcs removed ( average ) nr . nrt Total arcs A 10 ° 1 95 . 3 2 96 . 4 3 97 . 1 4 97 . 3 5 97 . 5 6 97 . 6 7 1 8 1 9 | 1 97 . 9 | 98 . 1 ! 98 . 4 10 98 . 3 11 98 . 6 12 98 . 7 In connection with the two branching rules , it is important to mix them judiciously . While rule 1 ( disjunction ( 39 ) ) often allows one to fix more variables than rule 2 ( disjunction ( 42 ) ) , if used as the only branching rule it yields inferior results , since occasionally it is very bad . The mixing strategy used in the above runs ( and discussed under 5 . 3 ) has resulted in rule 1 being used only at the upper levels of the search tree ( often at level 1 , or 1 and 2 , only ) . To compare the results obtained by using this strategy with those obtainable by using rule 2 only , we ran 4 of the 12 problem sets ( i . e . , 40 of the 120 problems ) with branching rule 2 only . Table 11 compares the results . - 41 - Table 11 . Comparison of branching rules Class 1 3 5 7 a 50 100 150 200 AverageRule 2 10 . 3 31 . 9 36 . 8 49 . 9 . no . of nodes Mix of rules 1 and 2 12 . 3 39 . 1 45 . 7 63 . 4 i Computing time ( CDC 7600 sec ) : Rule 2 . 29 2 . 10 4 . 60 11 . 68 Mix of rules 1 and 2 i . 20 . 71 1 . 97 6 . 06 Note that although branching rule 2 tends to produce a smaller number of nodes than the mixed strategy described in section 5 . 3 , it also tends to require about twice as much time than the latter . This is because the disjunction ( 39 ) ( rule 1 ) creates nodes for which the AP solution at the father node remains feasible , and for which a large number of variables can be fixed at 0 — two features that make such nodes easy to fathom . 6 . The Symmetric Case Our algorithm can of course be applied to symmetric TSP 1 s as it is , but it would not be efficient for such problems in its present form . This is so because of the well known fact that AP f s associated with symmetric TSP ' s tend to have optimal solutions involving a large number of subtours of length two . However , our approach can easily be adapted to the symmetric case by replacing the assignment problem with the 2 - matching problem as the basic relaxation of the TSP . We are in che process of developing such an algorithm for the symmetric TSP . References [ 1 ] E . Balas : " Set Covering with Cutting Planes from Conditional Bounds . " MSRR # 399 , Carnegie - Mellon University , July 1976 . [ 2 ] E . Balas and N . Christofides : " A New Penalty Method for the Traveling Salesman Problem . ' 1 Paper presented at the Ninth International Symposium on Mathematical Programming , Budapest , August 1976 . [ 3 ] N . Christofides : " Bounds for the Traveling Salesman Problem . " Operations Research , 20 , 1972 , p . 1044 - 1055 . [ 41 N . Christofides : Graoh Theory : An Algorithmic Approach . Academic Press , 1976 . wwnn t , s . * JiiMv . A . iUN OF T MIS P AV»C . { * MI iJmtm anim DOCUMENTATION PAGE READ DSFCRE FORM t f»CPO«T NUMBER Technical Report No . 439 2 . GCVT ACCESSION NOW 3 - j C * T * cOG MUM . # ffA 4 . TITLE A Restricted Lagrangean Approach to the Traveling Salesman Problem TYPE 0 * ACPOHT ft PCWOO COVC«BO Technical Report July 1979 < s . ? ESFO * MINQ one . - U 1 • . CONTRACT OH JAAM7 Egon Balas and Nicos Christofides N0014 - 75 - C - 0621 NR 047 - 048 MCS76 - 12026 A02 ? SarO4 * tfNG ORGANIZATION NAMC AMQ Graduate School of Industrial Administration Carnegie - Mellon University Pittsburgh , PA 15213 10 . PffOGMAM £L£ftlCMT . VOJ2CT AUKA ft WO * H UMIT NUMBERS TA $ X ' ti . P - v . - c - r 3ATS J Personnel and Training Research Programs Office of Naval Research ( Code 434 ) Arlington , VA 22217 MONITORING AGSNCY NAMf ft AOGACSSf " < * * * •— * * QtHwm ) 41 ii . sccumrv Unclassified SCMCOULc Approved for public release ; distribution unlimited * ? . QlST ^ jauTJON STATCirfCNT o / ; . * • • * •««« * « •4 im 3U€M 20 . tt 4»timm * i NOTES ; 13 . K£Y WQROS ? traveling salesman problem , Hamiltonian circuits , directed graphs , I Lagrangean , penalty methods , branch and bound : 20 . ABSTRACT < I We describe an algorithm for the asymn«tric _ traveling salesman problem ( TSP ) j I using a new , restricted Lagrangean relaxation based on the assignment ; 4 problem ( AP ) . The Lagrange multipliers are constrained so as to guarantee [ j the continued optimality of the initial AP solution , thus eliminating the I i need for repeatedly solving AP in the process of computing multipliers . We + 1 give several polynomially bounded procedures for generating valid inequalities ! and taking them into the Lagrangean function with a positive multiplier withouf T JAN n 1473 COITIOM or » NOV «s i S / M 0 102 - 014 - 6 * 01 Unclassified ( over ) SKCUfttTY O ' T > 4i $ •m Omm £»«• * • * ) violating the constraints , so as to strengthen the current lower bound . Upper bounds are generated by a fast heuristic whenever possible . When the bound * strengthening techniques are exhausted without matching the upper with the lower bound , we branch by using two different rules , according to the situation : the usual subtour breaking disjunction , and a new disjunction based on conditional bounds . We discuss computational experience on 120 randomly generated asymmetric TSP ' s with up to 325 cities , the maximum time used for any single problem being 82 seconds . Though the algorithm discussed here is for the asymmetric TSP , the approach can be extended to the symmetric TSP by using the 2 - matching problem instead of AP . TTr