Supporting Daily Scrum Meetings with Change Structure Jessica Rubart arvato services 1 Gütersloh , Germany info @ jessicarubart . de Frank Freykamp Freykamp IT Consulting Dinslaken , Germany frank @ freykamp . com ABSTRACT A flexible cooperative task board for supporting daily scrum meetings is described as an application of different hypermedia domains . In addition , change structure is introduced as a means to explicitly model changes in task management . It helps the scrum development team in a sprint retrospective to improve their planning . Categories and Subject Descriptors H . 5 . 3 [ Information Interfaces and Presentation ] : Group and Organization Interfaces— Computer - supported cooperative work . H . 5 . 4 [ Information Interfaces and Presentation ] : Hypertext / Hypermedia— Architectures , User Issues . General Terms Management , Design , Experimentation , Human Factors . Keywords Scrum , Daily Scrum Meeting , Task Board , Task Management , Spatial Hypertext , Cooperative Hypermedia , Change Link , Change Structure , Knowledge Management . 1 . INTRODUCTION Agile software engineering approaches primarily focus on supporting changing and evolving requirements . Scrum is a change management approach targeting the best possible software with respect to given time , budget , functionality , and quality [ 9 ] . Scrum uses short iterations , i . e . sprints , during which the team develops an increment of functionality . The team works self organized , and for each sprint it reviews , discusses , selects , and commits the functionality the team thinks it can deliver after the respective sprint . The functionality is managed with a product backlog . It contains a list of prioritized product backlog items describing the required functionality for a system . The team estimates the efforts for each backlog item . A selected product backlog is addressed in a sprint . In addition to the team there are the roles product owner and scrum master . The product owner is responsible for the vision , the budget , and prioritizing the product backlog items . He is working closely together with the team . The scrum master is not part of the team , but supporting the team achieving its goals and eliminating impediments . He makes sure that the scrum framework is practiced correctly . After each sprint the team , the scrum master , and optionally the product owner are participating in a retrospective to reflect on and learn from the last sprint . The team aims at optimizing their working processes . They can add impediments related to the work environment to the impediment backlog and add new product backlog items , which deem important to the team , such as specific refactorings , to the product backlog . 1 . 1 Daily Scrum Meetings Daily scrum meetings support the team in organizing itself . They take place once per day during a sprint , at the same time , and they are time - boxed to 15 minutes . Team members meet in front of a task board and update their status of work . The task board captures what is called the sprint backlog . Figure 1 shows an example task board . The left column shows the selected backlog items for the current sprint . To the right , the current tasks the team has identified are grouped according to their status , which is Tasks To Do , Work in progress or Done . Figure 1 . An Example Scrum Task Board Each task belongs to one backlog item . A task is a small unit of work that has been identified and estimated by the team . A task should not take longer than 8 hours . In a daily scrum meeting tasks are moved between the status columns and taken by team members . In addition , new tasks can be identified or an existing task can be split or removed . _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 The views and conclusions contained in this document are those of the author and should not be interpreted as representing official policies of arvato services . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . HT’09 , June 29 – July 1 , 2009 , Torino , Italy . Copyright 2009 ACM 978 - 1 - 60558 - 486 - 7 / 09 / 06 . . . $ 5 . 00 . 57 The team also talks about impediments because of which tasks cannot be completed and updates the impediment backlog . Finally , the team updates the so - called sprint burn down chart to visualize whether the work gets done in the necessary time . In a setting , which is ideal for scrum , the team is co - located . However , this is not always possible . A distributed team needs electronic tool support for daily scrum meetings . Such tool support should focus on simplicity to keep with the agile manifesto [ 1 ] . A common problem with scrum sprints is that at their end not all tasks are completely done . An electronic tool , which supports change management and special reporting , can help to identify the reasons for this problem in a scrum retrospective . The remainder of this paper is organized as follows . Section 2 describes a problem analysis to identify important technical requirements , which need to be addressed . Then , the approach utilizing hypermedia domains and introducing change structure is presented , followed by a description of the current prototype implementation . Section 4 compares the approach to related work . Finally , section 5 concludes the paper and discusses future work . 2 . PROBLEM ANALYSIS An electronic task board tool for daily scrum meetings needs to be able to create , delete , and update virtual task boards and assign those to sprints . In addition , it should be able to manage users who are participating in sprints and require accessing a virtual task board . As those users are potentially distributed , the electronic task board has to be a distributed system . To support a sprint completely the electronic task board should be able to assign sprints to releases . In addition , an electronic task board always needs to be combined with or needs to provide a communication channel for distributed team members to discuss their current sprint backlog . Besides these general tool management capabilities , i . e . planning , updating , and storing virtual task boards for sprints and releases , and a communication channel we state a couple of particular requirements . These requirements aim at supporting retrospectives and providing tool support for a cooperative environment keeping with the agile manifesto . According to the agile manifesto individuals and interactions are more important than processes and tools . Therefore , as stated in the introduction , in an ideal setting for scrum the team is co - located and uses a physical whiteboard . As this is not possible in a distributed setting our first particular requirement is the following : R1 . The task board needs to be very easy to use . Its use shall not be much more complicated than the use of a physical whiteboard . Different teams working on diverse projects often use special platforms and technologies . In addition , distributed team members sometimes use different technologies and devices when participating in a virtual meeting . As team members require easy access to a virtual task board and the virtual task board needs to have a sophisticated user interface the following is our next particular requirement : R2 . The shared task board shall be available on a Web 2 . 0 platform to provide easy access to it from diverse technologies and devices and to provide a sophisticated user interface . Distributed team members need to share information on virtual task boards , update those with respect to their working progress , agree on tasks and take their tasks . Therefore , a virtual task board needs to support cooperative access to and manipulation of the board as stated in out next requirement : R3 . A virtual task board needs to present and work on shared information , i . e . the sprint backlog , and support team members to view and manipulate it cooperatively providing awareness about the participants and their actions . In daily scrum meetings impediments are identified , because of which tasks sometimes cannot be completed . In addition , some tasks get split . To support the knowledge management life cycle of scrum retrospectives the following requirement is important : R4 . To support scrum retrospectives it shall be possible to manage and evaluate the life cycle of tasks , e . g . whether they have been split or blocked by an impediment . This supports the evaluation of estimations . In daily scrum meetings the sprint burn down chart is usually updated to see whether the work gets done fast enough . There are also other charts scrum teams work with , such as the sprint product burn down chart showing how many product backlog items have been done . An electronic task board tool is able to create such charts ( or reports ) automatically based on a given sprint backlog , i . e . a virtual task board at a particular point in time . R5 . Reports shall be available through the task board , such as the sprint burn down chart . These reports shall be generated based on the current sprint backlog and shall be made available as separate views . 3 . CHANGE STRUCTURE FOR TASK MANAGEMENT To address the requirements stated in section 2 we have developed an approach that can be outlined as follows : • Combining different hypermedia domains for supporting a flexible and easy to use user interface • Supporting synchronous and asynchronous cooperation over the web • Introducing change structure • Generating special report views Figure 2 shows the cooperative task board for our approach . It is divided in 5 columns . The first column contains the backlog items for the sprint . The other four columns contain the current tasks and represent their states . We have added one additional task column to the standard scrum ones . This is the column named “Split” , which is important for the change structure . The following sections provide more details on our approach . 58 Figure 2 : Cooperative Task Board View 3 . 1 Combining Hypermedia Domains The user interface design of the cooperative task board is following the Natural Scene Paradigm [ 7 ] . It is derived from paper - based notes on a physical board . The advantage of this approach is that the user can interpret and understand the information given in the natural scene , i . e . the task board , easily by using his natural scene - analyzing capabilities and experiences from the real world . From our point of view this design approach is well aligned with the manifest of agile development as it focuses on simplicity ( cf . R1 ) . The backlog items are chosen from the product backlog for the current sprint and simply listed in the first column . In order to assign a task to a backlog item its vertical position ( y - coordinate ) needs to be aligned with the backlog item ' s position . The horizontal position ( x - coordinate ) determines the task ' s state , i . e . To Do , In Progress , Done , Split . Dragging a task up or down changes the task ' s association with the backlog items , dragging it from one column to another changes its state . This is very much in line with the spatial hypertext domain [ 5 ] , where spatial proximity and visual attributes are used to derive semantics . Within one column we do not enforce a special layout as the manually given positions can be of importance for the team members . A task can be split by moving it to the Split column . New tasks associated with the split one appear in the split task’s original state column . Several icons are located in the lower side of the task board . These icons are used for special operations , e . g . create a task , delete a task , associate a task with a scrum team member , show a special report , or open impediments . Impediments can be listed in a special dialog and tasks can be associated with impediments . Navigational hypermedia is used to go back and forth between views or to navigate from a task to its current impediments . In order to associate tasks with team members who will realize the task a visual tagging mechanism is provided . By selecting a team member ' s icon and then selecting a task the task gets associated with the team member . Visual tagging is also used to associate a task with a split task . The task in the Split column needs to be selected in order to initiate a tagging process . This kind of tagging provides an implicit predefined visual vocabulary . It helps to categorize tasks so that it can be seen as an application of the taxonomic domain [ 12 ] . 3 . 2 Flexible Cooperation Support In order to address requirement R3 we handle task boards like shared workspaces and backlog items , tasks , user representations , etc . like shared objects . Shared workspaces provide users with a virtual space in which information can be shared . They aim at supporting cooperative tasks and are used for long - term synchronous and asynchronous cooperation [ 4 ] . Synchronous cooperation is required in the typical daily scrum meeting scenario . It means cooperation happening at the same time with typically fine - grained notifications giving immediate feedback about the activities of other users , e . g . moving or creating tasks . Asynchronous cooperation can happen at different times . It is not required in the typical daily scrum meeting scenario which is a face - to - face situation , but physical boards can also be updated outside scrum meetings . Therefore , asynchronous cooperation should be supported as well . In the cooperative task board view presence awareness is provided through the user icons . Shared objects have unique identifiers and shared attributes . In addition , they can be made persistent . Team members access shared objects , either synchronously or asynchronously , and interact with them through the virtual task board . By using suitable concurrency control and change propagation mechanisms this enables a cooperation - aware electronic task board application since shared data is explicitly modeled . Using change propagation mechanisms from a web server to browsers is challenging as the original World Wide Web was not designed for synchronous cooperation . But in the context of the Web 2 . 0 platform technologies became available , which better support synchronous cooperation over the web , such as AJAX ( cf . section 3 . 5 , R2 ) . 3 . 3 Explicitly Model Change To address the change management challenges and support scrum retrospectives ( cf . R4 ) we propose to explicitly model change using change structure . Figure 3 shows a metamodel provided as a UML ( Unified Modeling Language ) profile introducing change links . Nodes and links are modeled as stereotypes for UML classifiers . This is quite general as classes and associations , for instance , both are UML classifiers . Metamodel «metaclass»Classifier user : String timestamp : Date «Stereotype»ChangeLink «Stereotype»Link «Stereotype»Node Figure 3 : Metamodel : Change Link In this way , UML classes can be used as links , which is interesting for including attributes that UML associations do not have . This metamodel can be extended to include other important 59 abstractions of navigational hypermedia models , such as anchors . In this way a navigational hypermedia model can be moved to the metamodel , and a domain model just marks its respective model elements with navigational hypermedia types , such as in Figure 4 . A change link is modeled as a specific link providing information about the user and the time when the change was done . The task domain model in Figure 4 uses several change links to state explicitly that for those links changes need to be managed . The model needs to express , for example , to which tasks a task has been split . The system then is able to select all relevant tasks at a specific point in time . In addition , the system can calculate the final sum of estimations for one task ( and all its split ones ) and compare it to the original one . Taskmodel pos : Position column : State row : BacklogItem «ChangeLink» SpatialStructure text : String person : String estimation : Integer «Node» Task text : String «Node» BacklogItem text : String «Node» Impediment «ChangeLink» n 1 1 «ChangeLink»split 1 n m 1 1 Figure 4 : Task Domain Model with Change Links The spatial structure change link enables reconstructing state changes and backlog assignments over time . Through its spatial structure a task is associated with a backlog item and its current state . In addition , modeling the spatial structure as a separate class separates structure from data and supports design for change as proposed in [ 8 ] . A task can be linked to one or more impediments in order to express that it is blocked or hindered by these impediments . In order to manage these links over time this association is also modeled as change link . This enables the system to prepare special reports regarding impeded and split tasks to improve scrum retrospectives ( cf . R4 ) . 3 . 4 Special Views Based on a current sprint backlog particular reports can be generated and provided as special views ( cf . R5 ) . Besides the typical scrum reports , such as the sprint burn down chart or the sprint product burn down chart , our approach provides a . o . the following special views utilizing change structure : • Split task view : This view shows a path for each initial task that has been split . It shows when the task has been split and when a split task has been split again . In addition , it presents the sum of estimations compared to the initial estimation . • Impediment task view : This view shows a timeline for each task that has been associated with an impediment at some point in time during the sprint . It presents the task’s state , the associated impediments , and its estimation . These views are very useful to improve scrum retrospectives ( cf . R4 ) as the impact of an impediment gets even more explicit and estimations can be improved . 3 . 5 Implementation The current software prototype is based on the open source web framework Echo [ 3 ] . Echo provides a Java and a Java Script API for developing rich web applications ( cf . R2 ) . Java code on the server side is translated to Java Script on the client side and client side requests are mapped to Java code on the server side . Figure 5 shows the architecture of the cooperative task board application . On the client side there are two web browser instances showing an AJAX ( asynchronous Java Script and XML ) based graphical user interface ( GUI ) for the cooperative task board . In addition , they illustrate the use of the system by two concurrent users . This user interface is generated at run time by the Echo framework . On the server side the cooperative task board application is running as a Java servlet in a servlet container . A servlet container is a Java servlet - aware web server . Servlet Container AJAX - based Task board GUI Web Browser AJAX - based Task board GUI Web Browser «HTTP» «HTTP» SharedPersistentModel Database View Controller Model SharedModel View Controller Model Echo - based Task board servlet «JDBC» Figure 5 : Cooperative Task board Architecture The servlet uses the GUI classes of the Echo framework to implement the user interface and manages a shared task board model for all users to enable flexible cooperation support . In this way different users can make use of different views while operating on the same shared model . The Model / View / Controller ( MVC ) architectural pattern is used in an extended way that each user - specific model instance has a shared model instance assigned . This describes the shared state of the different user - specific models and separates data from structure modeling [ 8 ] . The server push mechanism of the Echo web framework is used for enabling synchronous cooperation over the web , i . e . to update a client based on changes to the shared model done by another client . Finally , the shared model is made persistent in a database using JDBC ( Java Database Connectivity ) . 4 . RELATED WORK Spatial hypertext [ 4 ] focuses on the creation of structure , such as categories and relationships , by means of visual attributes and spatial proximity . This supports expressing emerging structure . In our approach we are using spatial hypertext concepts for supporting a flexible and easy to use user interface , which is based on the metaphor of paper - based notes on physical boards . 60 The history mechanism in the visual knowledge builder ( VKB ) supports recording and playing back events in the spatial hypertext [ 11 ] . This supports learning from the evolving spatial hypertext . While events depend on a particular view and can only be interpreted by such a specific view , our proposed change structure focuses on an explicit structure model , which is on a semantically higher level than GUI events . It can be interpreted by different views and can focus on specific semantic changes in structure rather than recording all events and leaving the interpretation to the user . Thus , change structure has a different focus than an event - based history mechanism . In addition , change structure focuses on cooperation support . While in a distributed setting an approach using GUI event multiplexing is only applicable for strict WYSIWIS ( What You See Is What I See ) situations , sharing and coupling change structure can be done on a different granularity . Different functionality and views can be supported on shared objects . In a synchronous session latecomers can simply retrieve the current state of the shared objects and do not need to play back all missed events . Also , in an asynchronous setting the current state of the workspace can be described by states of objects . Hypermedia domains are particular structural abstractions solving an organization problem [ 12 ] . We are utilizing hypermedia domains to support structuring tasks in daily scrum meetings in an easy to use and flexible way . On the one hand our concept of change structure can be seen as a separate hypermedia domain as a change link is a particular structural abstraction that requires special views and solves the organization problem of managing change . On the other hand change structure can be seen as an addition to existing domains , such as the navigational domain , to provide additional semantics to explicitly model changes . ASAP is a planning tool for agile software development [ 6 ] . It is a specialized spatial hypertext system focusing on supporting the crystal clear agile software development methodology . A separator concept is proposed as a structuring mechanism . ASAP does not focus on scrum , cooperation support , and managing changes in structure . Existing tools for supporting daily scrum meetings , such as the Team System Task Board [ 10 ] , do not address splitting tasks and explicit modeling of changes to support retrospectives . In addition , cooperation support focuses on integrating version control rather than on the requirements we have stated . Version control is complementary to change structure . By comparing different versions of a task board one could try to guess change structure , e . g . split tasks . A version of a task board using change structure does know about all explicitly modeled changes and its semantics , and can generate specific views . 5 . CONCLUSIONS AND FUTURE WORK We have presented an approach for a flexible cooperative task board supporting daily scrum meetings . Our current work has two main contributions for the hypermedia community : • Applying and combining different hypermedia domains to supporting daily scrum meetings , and • Introducing change structure as a means to explicitly model change in a flexible way In our future work we plan to make the cooperative task board available as a Web 2 . 0 platform so that distributed scrum teams can register themselves and use the software for scrum meetings . This platform will provide a test bed and valuable feedback for our approach . This feedback will also support us in developing further effective report views and visualizations , which will help to improve scrum retrospectives and scrum sprint planning . One additional feature of the platform could be the possibility to associate tasks with change sets of a versioning system . This supports traceability from backlog items to software artifacts . Such traceability can be used to satisfy the requirements of certifiable software [ 2 ] . On the one hand , this enables scrum to be used in projects , where typically more heavyweight software engineering methodologies are applied . But on the other hand there is a risk of violating the agile manifesto as micro management could get introduced . Finally , we would like to apply our concept of change structure to other application domains in order to get a better understanding of dynamic characteristics in these domains . As a result , a reusable framework for change links or respective services can be developed . 6 . REFERENCES [ 1 ] Agile Manifesto : http : / / agilemanifesto . org / , 2001 . [ 2 ] Common Criteria : http : / / www . commoncriteriaportal . org / . [ 3 ] Echo Web Framework , http : / / echo . nextapp . com / site / , 2008 . [ 4 ] Haake , J . M . Facilitating Orientation in Shared Hypermedia Workspaces . In : Proceedings of Group’99 , ACM Press , Phoenix , Arizona , 1999 . [ 5 ] Marshall , C . C . , and Shipman , F . M . Searching for the Missing Link : Discovering Implicit Structure in Spatial Hypertext . In : Proceedings of Hypertext’93 , ACM Press , 1993 , 217 - 230 . [ 6 ] Petersen , R . R . , and Wiil , U . K . ASAP : A Planning Tool for Agile Software Development . In : Proceedings of Hypertext’08 , ACM Press , 2008 , 27 - 31 . [ 7 ] Robertson , P . K . A Methodology for Scientific Data Visualization : Choosing Representations Based on a Natural Scene Paradigm . In : Proceedings of Visualization’90 , IEEE Press , 1990 , 114 - 123 . [ 8 ] Rubart , J . Architecting Structure - Aware Applications – The Structure Model . In : Proceedings of Hypertext’07 , ACM Press , 2007 . [ 9 ] Schwaber , K . Agile Project Management with Scrum . Microsoft Press , 2004 , ISBN 0 - 735 - 61993 - X . [ 10 ] Scrum for Team System , Task Board , http : / / www . scrumforteamsystem . com / en / TaskBoard / , 2008 . [ 11 ] Shipman , F . M . , Hsieh , H . , Maloor , P . , and Moore , J . M . The Visual Knowledge Builder : A Second Generation Spatial Hypertext . In : Proceedings of Hypertext’01 , ACM Press , 2001 , 113 - 122 . [ 12 ] Tzagarakis , M . et al . Structuring primitives in the Callimachus component - based open hypermedia system . In : Journal of Network and Computer Applications , Academic Press , 26 ( 1 ) , 2003 , 139 – 162 . 61