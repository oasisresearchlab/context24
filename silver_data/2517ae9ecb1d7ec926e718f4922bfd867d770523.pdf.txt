16 A Meta - Analysis of Pair - Programming in Computer Programming Courses : Implications for Educational Practice KARTHIKEYAN UMAPATHY , University of North Florida ALBERT D . RITZHAUPT , University of Florida Several experiments on the effects of pair programming versus solo programming in the context of education have been reported in the research literature . We present a meta - analysis of these studies that accounted for 18 manuscripts with 28 independent effect sizes in the domains of programming assignments , exams , passing rates , and affective measures . In total , our sample accounts for N = 3 , 308 students either using pair programming as a treatment variable or using traditional solo programming in the context of a computing course . Our findings suggest positive results in favor of pair programming in three of four domains with exception to affective measures . We provide a comprehensive review of our results and discuss our findings . CCS Concepts : • Social and professional topics → Computing education ; • Software and its engineer - ing → Pair programming ; Additional Key Words and Phrases : Programming courses , meta - analysis , effect sizes , exams , assignments , affective measures , passing rates ACM Reference format : Karthikeyan Umapathy and Albert D . Ritzhaupt . 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses : Implications for Educational Practice . ACM Trans . Comput . Educ . 17 , 4 , Article 16 ( August 2017 ) , 13 pages . https : / / doi . org / 10 . 1145 / 2996201 1 INTRODUCTION The United States Department of Labor’s Bureau of Labor Statistics Occupational Outlook Hand - book reports that in 2012 alone , computer programmers held approximately 343 , 700 jobs in the United States . The Bureau of Labor Statistics also reports that “job prospects will be best for pro - grammers who have a bachelor’s degree or higher and knowledge of a variety of programming languages” ( BLS 2014 ) . Computer programmers ( also known as software developers ) are expected to keep up with their craft by constantly learning new languages / technologies and overcoming associated learning impediments ( Ford and Parnin 2015 ) . Research confirms that students in introductory computer programming curriculum often strug - gle with one or more of the concepts required for success . As mentioned by Woszczynski , Guthrie , and Shade ( 2005 ) , the most disturbing statistics are from the introductory programming courses , where failure and withdrawal rates exceed 50 % . Beise , Myers , VanBrackle , and Chevli - Saroq ( 2003 ) Authors’ addresses : K . Umapathy , 1 UNF Drive , 15 / 3214 Mathews Building , School of Computing , University of North Florida , Jacksonville , FL - 32224 ; email : k . umapathy @ unf . edu ; A . D . Ritzhaupt , University of Florida , 2423 Norman Hall , PO BOX 117048 , Gainesville , FL 32611 ; email : aritzhaupt @ coe . ufl . edu . Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation . Copyrights for components of this work owned by others than ACM must be honored . Abstracting with credit is permitted . To copy otherwise , to republish , to post on servers , to redistribute to lists , or to use any component of this work in other works requires prior specific permission and / or a fee . Permissions may be requested from Publications Dept . , ACM , Inc . , 2 Penn Plaza , Suite 701 , New York , NY 10121 - 0701 USA , fax + 1 ( 212 ) 869 - 0481 , or permissions @ acm . org . © 2017 ACM 1946 - 6226 / 2017 / 08 - ART16 $ 15 . 00 https : / / doi . org / 10 . 1145 / 2996201 ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 2 K . Umapathy and A . D . Ritzhaupt found that the overall probability of passing a first introductory programming course ( CS1 ) the first time was 40 % across all majors , with an initial failure rate of 19 . 5 % and a withdrawal rate of 40 . 5 % . Watson and Li ( 2014 ) reported in their most recent comprehensive review , the world - wide average pass rate of an introductory computer programming course ( e . g . , CS1 ) is approximately 67 . 7 % . Their study included 161 outcomes in introductory computer programming courses across 15 countries in 51 different academic institutions . These statistics are ongoing concerns for com - puting faculty worldwide . Teaching introductory programming classes is listed as one of the seven challenges in computer science education ( Koulouri et al . 2015 ) . Learning programming is a multifaceted process that in - volves gaining knowledge of the syntax and semantics of a language as well as developing general problem - solving skills ( Linn and Dalbey 1989 ) . Thus , most introductory programming courses uti - lize individual programming assignments to ensure students are learning to master programming skills ( Hundhausen et al . 2015 ) . However , in the real - world , software development is rarely a soli - tary activity . Software development is similar to a team sport , where working alone will affect project’s quality , team’s morale , and ability to overcome project’s complexity and associated risks ( Fitzpatrick and Collins - Sussman 2012 ) . Typically , undergraduate introductory programming courses require students to individually complete content - specific assignments . This approach is employed to seamlessly trace learning objective to programming assignments and to prevent students from falling behind if they miss one assignment . Yet , software development is an incremental and iterative activity . A software project may endure many iterations before completion . In the academic world of computer programming , little real - world modeling is taking place . Both characteristics , solitary programming and non - incremental development , are not representative of software development in the real - world . This poses a serious problem for computing educators . Designing instructions that both models real - world activities and meets the needs of a learning population is a difficult task—one that is often overlooked in the academy . In the past decade , numerous research studies have been conducted on a practice known as pair programming ( Williams and Kessler 2002 ) , where two individuals work side - by - side , design - ing , implementing , and testing a programming solution in the computer science curriculum . This practice stems from an increasingly popular agile software development methodology known as eXtreme Programming ( Beck 2000 ) . Some research results have found pair programming to have positive effects on measures of interest , such as performance , source code quality , development time , and attitudes ( Hannay et al . 2009 ) . This practice , however , is contrary to conventional com - puter programming instructions . Consequently , many computing educators remain skeptical of the results in the context of educational circles . Thus , this article aims at addressing this issue by conducting a systematic meta - analysis on the studies conducted on pair programming in educational settings . Specifically , we look at four dependent measures that have been reported in the research base : programming assignments , exams , passing rates , and affective measures . By programming assignments , we mean the scores students earn on their programming assignments . By exams , we mean the score students earn on their exams in a computer programming course . By passing rates , we mean the proportion of students that successfully pass a computer programming course . Finally , by affective measures , we mean the attitudes and dispositions students hold toward computer programming as a result of their experience . It is our goal to shed light on this practice and determine its true effects on these dependent measures according to the research literature . Few studies have conducted systematic meta - analysis on the studies that empirically investi - gated effectiveness of pair programming technique . Hannay et al . ( 2009 ) conducted meta - analysis on 18 studies comparing solo and pair programming with both students and practitioners as ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 3 subjects . This study extends intermediate analysis reported in Dyba et al . ( 2007 ) . They reviewed articles published during the period from 1998 through 2007 . They were interested in studies that investigated pair programming effectiveness in terms of quality ( number of test cases passed or correct solutions ) , duration ( total time to complete programming tasks ) , and effort ( combined total time spent on the task ) . Their meta - analysis indicated a general agreement among studies that pair programming positively affected quality and duration aspects while negatively affecting effort . It should be noted that our article differs from Hannay et al . ’s study , as we are specifically focus - ing on empirical investigations that were conducted in education settings and those that reported student performance data . Salleh et al . ( 2011 ) conducted meta - analysis on 74 studies to identify factors that make pairs in pair programming highly compatible . They reviewed articles published during the period of 1999 to 2007 . They were interested in studies that focused on pair programming effectiveness on four broad categories of academic performance , technical productivity , quality , and satisfaction . Their study revealed that a student’s skill level affected pair programming effectiveness the most ; that the common measure used to gauge pair programming effectiveness is duration ( time spent on programming tasks ) ; and that students’ satisfaction is higher when working in pairs than when working solo . Their meta - analysis also indicated that pair programming was effective in improving students’ grades on assignments . Our article differs from the Salleh , Mendes , and Grundy study on several fronts . First , our study focuses on literature published from 2000 to 2014 ; thus , our study can be considered as an update to their findings . Second , while their study primarily focused on factors influencing pair compatibility , including academic performance , we are primarily interested in pair programming effectiveness on students’ academic performances . Finally , in the meta - analysis , they included all studies that empirically investigated pair programming in higher education setting regardless of whether comparison of pair programming to solo programming was reported . We included only studies that reported comparison of pair programming and solo programming . Kalaian and Kasim ( 2014 ) conducted meta - analysis to examine impacts of small - group learning pedagogies on academic performance among undergraduate computer science students . They con - ducted meta - analysis on cooperative , collaborative , problem - based , and pair programming peda - gogies . Their results indicated that small - group active learning pedagogies positively influence students’ performance . Their study differs from our article , as they did not focus solely on pair programming . With considerable interest in using pair programming technique by higher education insti - tutions , it is important to determine scientifically whether pairing two students is beneficial in terms of students’ achievement and affective measures . In the past two decades , several empir - ical investigations have been conducted on effectiveness of pair programming on students’ aca - demic performance . In this article , we systematically gather literature relevant to the context of our study and perform meta - analysis on the empirical data reported in the gathered literature . The findings reported in this article can be used by educators when considering the use of pair programming techniques in their classrooms . The remainder of the article is organized as fol - lows . Section 2 provides an overview of pair programming . Section 3 presents the method used to gather relevant literature and describes how the meta - analysis has been performed . Section 4 presents the results of meta - analysis . Section 5 discusses implications of our findings and future work . 2 EXTREME PROGRAMMING AND PAIR PROGRAMMING Pair programming is a critical practice of an agile software development methodology known as eXtreme Programming . eXtreme Programming is a method or approach to software development and one of the most popular agile software development methodologies ( Beck 2000 ; Beck and ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 4 K . Umapathy and A . D . Ritzhaupt Andres 2004 ) . Although the practice of pair programming has been used prior to 2000 , it gained widespread popularity after Kent Beck included pair programming as one of the fundamental prac - tices of eXtreme Programming ( Salge and Berente 2016 ) . Thus , our systematic review covers the studies conducted during the period from 2000 to 2014 . eXtreme programming , in comparison to traditional development methods , such as the Wa - terfall model ( Royce 1970 ) , attempts to minimize risk by developing software in short intervals , called iterations . eXtreme programming is a light - weight software development methodology for small - to medium - sized teams facing rapidly changing requirements . eXtreme programming dif - fers from other methodologies by embracing short iterations with feedback , incremental plans , flexible implementation schedule to manage changing needs , automated tests , oral communica - tion , evolutionary design process , and reliance on practices such as pair programming . ( Beck 2000 ; Beck and Andres 2004 ) . A discussion on each of the practices is outside the scope of this article . There have been several attempts to integrate the coding - level practices of eXtreme pro - gramming into software development education , especially the practice of pair programming ( Noble et al . 2004 ) . “Pair programming is a style of programming in which two programmers work side - by - side at one computer , continuously collaborating on the same design , algorithm , code , or test” ( Williams et al . 2002 ) . Each of the members in the pair serves a specific role related to the software devel - opment process . The member who is controlling the keyboard and mouse is known as driver , and the other member is called navigator . While some prior works have described that driver and nav - igator roles are performed at different levels of abstractions , the study due to Freudenberg et al . ( 2007 ) shows that the driver and the navigator work at the same level of abstraction . Paired mem - bers tend to switch driver and navigator roles regularly in a fluidic fashion to alleviate physical and cognitive load of typing and providing a running commentary , both of which are borne by the driver ( Freudenberg et al . 2007 ) . Most paired members tend to maintain a continuous flow of communication during the whole session ( Plonka et al . 2011 ) . 3 METHOD 3 . 1 Inclusion and Exclusion Criteria For the meta - analysis , we included articles that studied pair programming between pairs and indi - viduals and if they conducted quantitative analysis . Meta - analysis does not account for qualitative studies that do not report quantitative outcomes comparing the two conditions : pair programming versus solo - programming . We considered articles that primarily focused on learning outcomes , passing rates , and affective measures . We also only considered articles that used students as the study subjects and reported findings in English . 3 . 2 Data Sources and Search Strategy The data sources we considered for the search of pair programming articles were the following : ACM Digital Library , IEEE Xplore , ProQuest , Science Direct , and Association of Information Sys - tems ( AIS ) eLibrary . We used the basic search string ‘‘pair programming” to conduct the searches . For each digital library , we used the advanced search functionality and searched for articles that included the term “pair programming” either in the title or in the abstract of the document and were published during the period from 2000 through 2014 . We retrieved a total of 369 articles . Numbers of articles retrieved from each digital library are shown in Table 1 in the column entitled “Result Set . ” ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 5 Table 1 . Summary of Number of Articles at Different Stages of Study Selection Digital Library Result Set First Stage Second Stage Final stage ACM 97 29 10 8 IEEE 173 28 9 6 ProQuest 63 11 5 4 ScienceDirect 22 3 1 0 AIS 14 0 0 0 Total 369 71 25 18 3 . 3 Identification and Selection Articles retrieved from the digital libraries were filtered in three stages to identify those that fit the needs of our research . In the first stage , we read the title and abstract of the retrieved articles to see whether their focus was on pair programming and whether they performed quantitative analysis on learning outcomes , passing rates , and affective measures . We also searched the articles for the following terms : pair programming , learning , outcome , assignment , exam , test , scores , completion , passing rate , confidence , and satisfaction . Sentences with the above terms were carefully read further to ensure fitness of the articles for our research . Based on the review of the articles , those that stud - ied pair programming and performed quantitative analysis were selected for the second stage of review . At the conclusion of the first stage , 71 articles were found to be potentially relevant to our research . A breakdown of these 71 articles among the digital libraries is presented in Table 1 in the column entitled “First Stage . ” In the second stage , we read each article identified from the first stage carefully to extract in - formation regarding : the population studied ( K - 12 , undergraduate , or post - graduate ) , sample size , outcome variables of the study ( learning measures , affective measures , or passing rates ) , program - ming language , integrated development environment ( IDE ) , data table reporting mean and stan - dardization , and details of statistical analysis performed . Those articles that did not conduct ex - periments comparing pair versus solo programming or those that did not present data gathered were excluded from further consideration . The second stage review revealed that 25 articles are relevant to our research needs . A breakdown of these 25 articles among the digital libraries is also presented in Table 1 under the column entitled “Second Stage . ” In the third stage , we extracted data for performing meta - analysis from the articles identified in the second stage . We extracted the mean , standard deviation , sample size , and completion values for both treatment and control groups . We also extracted dependent measures , such as program - ming assignment , exam , passing rate , and affective measure scores ; p - value ; and moderators such as programming language and IDE . Seven articles from the second stage were eliminated from further consideration , as they did not provide data separately for pair programming , report data that was used in another article that is included in analysis , were about pair designing , did not re - port sample size and standard deviations , or did not provide data on learning outcomes or passing rates . Thus , the search and filter process for pair programming articles revealed that 18 manuscripts are relevant to the focus of our study . A summarized listing of the data collected on the treatment and control groups from the 18 studies is provided in Appendix A , and Appendix B provides a reference listing for these 18 manuscripts . Of these 18 manuscripts , 12 were conference articles and the rest were journal articles . There were three articles from the SIGCSE conference on Inno - vation and Technology in Computer Science Education , two articles from the SIGCSE Technical ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 6 K . Umapathy and A . D . Ritzhaupt Symposium on Computer Science Education , and two articles from the International Conference on Software Engineering . 3 . 4 Data Analysis We used Comprehensive Meta - Analysis version 3 . 0 to conduct our study and estimate the effect sizes for the 18 manuscripts identified through our systematic procedures . As with any meta - analysis , effect sizes must be standardized before running the analysis . We chose to use Hedges’ g as the standardized measure of effect size for continuous variables and the risk difference for the estimate of passing rates as a dichotomous variable . Analogous to Cohen’s d , Hedges’ g is the difference between outcome means with respect to the pooled standard deviations ; see Equation ( 1 ) below : Hedges’ д = x 1 − x 2 s p . ( 1 ) The pooled standard deviation is calculated based on the standard deviations in both groups , s 1 , s 2 , as shown in Equation ( 2 ) : s p = (cid:2) ( n 1 − 1 ) s 21 + ( n 2 − 1 ) s 22 ( n 1 − 1 ) + ( n 2 − 1 ) . ( 2 ) Hedges’ g and Cohen’s d operate similarly with large sample sizes , but Hedges’ g has the best properties for small samples when multiplied by a correction factor that adjusts for small sample bias ; see Equation ( 3 ) below : Correction factor for Hedges’ д = 1 − 3 4 ( N − 2 ) − 1 , ( 3 ) where N is the sample size . All data were assumed under a random - effects model . An effect size of 0 . 2 is considered small , 0 . 5 is considered medium , and 0 . 8 is considered large ( Cohen 1992 ) . 4 RESULTS We performed meta - analysis on 18 manuscripts identified through our search and filtering process . The resulting sample of pair programming studies were published in a wide range of journals and conference proceedings . These articles accounted for 48 separate dependent effect size outcomes in the domains of programming assignments , exams , passing rates , and affective measures . We took the average of the effect sizes for each study that reported multiple outcomes on the same student population ( e . g . , Midterm and Final Exam ) . The total sample size was N = 3 , 308 students that either experienced pair programming as a treatment variable ( n = 1 , 759 ) or experienced business as usual as a control variable ( n = 1 , 549 ) . We should note that we dropped one effect size outcome from Gehringer ( 2003 ) , because the effect size was calculated at greater than 4 . 0 , which is likely an error in reporting the effect size information in the article . Appendix A shows the data on which of the four domains were reported by each of the 18 manuscripts along with details of data collected in relation to the treatment and control groups from the 18 studies . 4 . 1 Pair Programming on Programming Assignments The analysis of the effect of pair programming on programming assignments was executed with nine independent effect sizes from nine separate studies of pair programming . The effect size is computed using Hedges’ g for these data . Figure 1 illustrates the forest plot for these 9 separate effect sizes in relation to the author of the study and year , Hedges’ g , the standard error , variance , confidence interval , Z - value , and p - value . The small boxes indicate the point estimates of effect size in each single study , whereas the horizontal line that crosses each box represents the confidence ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 7 Fig . 1 . Forest plot for the effects of pair programming on programming assignments . interval for a study’s estimate . The diamond at the bottom of the plot represents the average effect size after pooling all studies together along with a confidence interval . As can be gleaned , all had positive effects on programming assignments . The overall effect size using a random - effects model is 0 . 642 , which is a medium to large effect size ( Cohen 1992 ) . This overall effect size was statistically significant at Z - value = 5 . 234 , p < . 001 with a 95 % confidence interval of 0 . 401 to 0 . 882 . The observed effect size varies somewhat from study to study , but a certain amount of variation is expected due to sampling error . The Q - statistic provides a test of the null hypothesis that all studies in the analysis share a common effect size ( Borenstein et al . 2009 ) . The Q - value is 33 . 216 with 8 degrees of freedom and a p - value of p < . 001 . Thus , we can reject the null hypothesis that the true effect size is identical in all the studies . The I 2 is 75 . 915 , which informs us that the proportion of the observed variance reflects differences in the true effects sizes rather than sampling error ( Borenstein , et al . 2009 ) . 4 . 2 Pair Programming on Exams The analysis of the effect of pair programming on exams was executed with 10 independent effect sizes from 10 separate studies of pair programming . The effect size is computed using Hedges’ g for these data . Figure 2 illustrates the forest plot for these 10 separate effect sizes in relation to the author of the study and year , Hedges’ g , the standard error , variance , confidence interval , Z - value , and p - value . As can be gleaned , all but one study ( McDowell , 2002 a2 ) had positive effects on exams . The overall effect size using a random - effects model is 0 . 414 , which is a small to medium effect size ( Cohen 1992 ) . This overall effect size was statistically significant at Z - value = 3 . 159 , p = . 002 with a 95 % confidence interval of 0 . 157 to 0 . 671 . Again , the observed effect size varies somewhat from study to study , but a certain amount of variation is expected due to sampling error . The Q - statistic provides a test of the null hypothesis that all studies in the analysis share a common effect size ( Borenstein et al . 2009 ) . The Q - value is 51 . 576 with 9 degrees of freedom and a p - value of p < . 001 . Thus , we can reject the null hypothesis that the true effect size is identical in all the studies . The I 2 is 82 . 55 , which informs us that the proportion of the observed variance reflects differences in the true effect sizes rather than sampling error ( Borenstein et al . 2009 ) . ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 8 K . Umapathy and A . D . Ritzhaupt Fig . 2 . Forest plot for the effects of pair programming on programming exams . Fig . 3 . Forest plot for the effects of pair programming on affective measures . 4 . 3 Pair Programming on Affective Measures The analysis of the effect of pair programming on affective measures was executed with three inde - pendent effect sizes from three separate studies of pair programming . The effect size is computed using Hedges’ g for these data . Figure 3 illustrates the forest plot for these seven separate effect sizes in relation to the author of the study and year , Hedges’ g , the standard error , variance , confi - dence interval , Z - value , and p - value . As can be gleaned , all studies had positive effects on affective measures . The overall effect size using a random - effects model is 0 . 593 , which is a medium to large effect size ( Cohen 1992 ) . However , this overall effect size was not statistically significant at Z - value = 1 . 931 , p = . 053 with a 95 % confidence interval of − 0 . 009 to 1 . 195 . Again , the observed effect size varies somewhat from study to study , but a certain amount of variation is expected due to sampling error . The Q - statistic provides a test of the null hypothesis that all studies in the analysis share a common effect size ( Borenstein et al . 2009 ) . The Q - value is 28 . 396 with two degrees of freedom and a p - value of p < . 001 . Thus , we can reject the null hypothesis that the true effect size is identical in all the studies . The I 2 is 92 . 957 , which informs us that the proportion of the observed variance reflects differences in the true effect sizes rather than sampling error ( Borenstein et al . 2009 ) . We use caution in interpreting this model given the small number of independent effect sizes available in the affective domain . ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 9 Fig . 4 . Forest plot for the effects of pair programming on passing rates . 4 . 4 Pair Programming on Passing Rates The analysis of the effect of pair programming on passing rates was executed with six separate effects sizes from five separate studies of pair programming . The effect size is computed using relative difference for these data . Figure 4 illustrates the forest plot for these seven separate effect sizes in relation to the author of the study and year , Hedges’ g , the standard error , variance , confi - dence interval , Z - value , and p - value . As can be gleaned , all studies had positive effects on passing rates . The overall effect size using a random - effects model is 0 . 083 , which means that overall , stu - dents in the paired programming condition had an 8 . 3 % higher chance of passing the course . This overall effect size was statistically significant at Z - value = 5 . 332 , p < 0 . 001 with a 95 % confidence interval of 0 . 052 to 0 . 113 . Again , the observed effect size varies somewhat from study to study , but a certain amount of variation is expected due to sampling error . The Q - statistic provides a test of the null hypothesis that all studies in the analysis share a common effect size ( Borenstein et al . 2009 ) . The Q - value is 1 . 879 with five degrees of freedom and a p - value of p = . 866 . Thus , we cannot reject the null hypothesis that the true effect size is identical in all the studies . The I 2 is 0 . 0 , which informs us that the proportion of the observed variance reflects differences in the true effects sizes rather than sampling error ( Borenstein et al . 2009 ) . 5 PUBLICATION BIAS Publication bias assumes that the studies that will be published are more likely to report relatively high effect sizes and are more likely to be published than studies that report lower effect sizes ( Borenstein et al . 2009 ) . Although there is not one test that can detect the existence of publication bias , there are subjective methods of inferring whether it exists within a meta - analysis through the observation of funnel plots . Figures 5 through 8 report the funnel plots for programming assign - ments , exams , affective measures , and passing rates , respectively . These graphs plot each study according to a measure of study size called precision ( which is related to the standard error ) on the vertical axis and according to effect size ( either Hedges’ g or relative difference ) on the horizontal axis . In absence of publication bias , studies should distribute symmetrically around the meta - analytic effect size . Larger studies appear toward the top of the diagram , whereas smaller studies distribute toward the bottom . As can be gleaned in our funnel plots , there is indeed some evidence of pub - lication bias in our studies . Notably , eight of our studies , approximately 44 % , were retrieved from ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 10 K . Umapathy and A . D . Ritzhaupt Fig . 5 . Funnel plot of standard error by Hedges’ g for programming assignments . Fig . 6 . Funnel plot of standard error by Hedges’ g for exams . Fig . 7 . Funnel plot of standard error by Hedges’ g for affective measures . the ACM digital library . The remaining articles were retrieved from IEEE and Proquest . None of the studies from ScienceDirect or AIS qualified for our study . These publication venues may have an appetite for robust findings with larger effect sizes , which presents some bias in our working sample of studies and associated effect sizes . ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 11 Fig . 8 . Funnel plot of standard error by relative difference for passing rates . 6 DISCUSSION What can we conclude from this meta - analysis on the effects of pair programming on educational outcomes ? The results provide compelling evidence that pair programing , if implemented prop - erly , can have a positive impact on students’ programming assignment grades , exam scores , and persistence in computer programming courses . However , we qualify this claim with an important consideration . Students will need support and guidance in understanding the pair programming practice and must work together on programming activities at the same time with a driver and navigator as prescribed by the eXtreme programming paradigm . Further , the driver and navigator should alternate roles after a given duration to ensure equitable learning experiences ( Govender and Govender 2014 ) . Educators should be careful to implement the pair programming practice with fidelity as opposed to simply pairing students together on assignments . We recommend educators to follow the guidelines provided by Williams et al . ( 2008 ) for implementing pair programming in the classroom . Our study should be interpreted within the limitations of the studies used for meta - analysis . We did not consider any moderating variables ( e . g . , computer programming language used within course ) within the studies . In several instances , this was because of inconsistent reporting prac - tices across the primary studies . To effectively document the outcomes of moderating variables , the primary studies must report a sufficient amount of details about the learning environment . We hope that future researchers will address this concern so these moderating variables can be included in future meta - analytic studies . Also , there is some clear evidence of publication bias when examining our funnel plots and considering that 44 % of our studies were retrieved from the ACM digital library . The evidence presented in this study is only as valid and reliable as the pri - mary studies on which we base our results . The primary studies did not make use of standardized measures for the final exams . None of the studies provided grading rubrics or assignment specifi - cations for examination . Since many of the grading practices and instruments for the final exams were “home - grown , ” this is another source of potential bias within our study . Finally , the sam - ple sizes for the individual tests in the affective measures and passing rates domains were small . Caution should be exercised in generalizing the results . With these considerations in mind , our study has resulted in some important findings . Com - puter programming assignments are the cornerstone of a computer programming course . Several computing educators build meticulous computer programming assignments that span the cur - riculum to ensure that students can retain knowledge and skills and that learning objectives are achieved . Our findings suggest that pair programming had a significant and positive effect on ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . 16 : 12 K . Umapathy and A . D . Ritzhaupt students’ grades on programming assignments when compared to solo programming . The overall effect size can be classified as medium to large at 0 . 642 . We contrast this finding with the findings of Salleh et al . ( 2011 ) with an estimated average effect size of 0 . 67 for programming assignments . Both our study and the study by Salleh et al . ( 2011 ) suggest that pair programming , if implemented properly , can have a significant and positive effect on students’ programming assignment grades . While programming assignments are an extremely important aspect of a computer program - ming course , scores from programming exams are also important to measure whether students are individually achieving the course objectives without the support of their peers during a pair programming cycle . Our study suggests the overall effect size using a random - effects model is 0 . 414 , which is a small to medium effect size . This suggests that students engaged in effective pair programming practices achieved significantly higher scores on the exams within a computer pro - gramming course when compared to solo programming . Again , we can contrast our findings with that of Salleh et al . ( 2011 ) who found an overall average effect size of 0 . 16 for programming exams , again , in favor of pair programming . However , students’ scores on programming assignment and exams are not the whole story . We must also consider the persistence of the students in completing their computer programming courses . As noted by Watson and Li ( 2014 ) , the world - wide average pass rate of an introductory computer programming course is approximately 67 . 7 % . This overall passing rate suggests there is room for improvement in retaining students in computer programming courses world - wide . Our study found the overall effect size using a random - effects model is 0 . 083 , which means that overall , students in the paired programming condition had an 8 . 3 % higher chance of passing the course . This relative difference was statistically significant in the model . Thus , it would appear students engaged in effective pair programming practice persist more than those students only engaged in solo programming in a typical computer programming course . A final consideration from our study was a student’s attitude toward the learning experience in general . Pair programming may be an effective practice , but if the students do not enjoy the learning experience , it is much less likely to be adopted in institutions of higher education . The overall average effect size using a random - effects model is 0 . 593 , which is a medium to large effect size ( Cohen 1992 ) . However , the model was not statistically significant and only included three studies . Though students in the pair programming condition had a more positive attitude toward the learning experience than did the students in the solo programming conditions , this finding needs more evidence from primary studies . From an academic achievement standpoint ( e . g . , passing rates , programming assignment scores , and exam scores ) , it would appear using the pair programming practice in institutions of higher education has desirable outcomes for the students . In summation , we think we have formulated an answer to the age - old question , “Is pair programming better than solo programming in computer programming courses ? ” Our findings , which are based on the current pool of literature surround - ing pair programming , suggest that pair programming is an effective pedagogical tool for student outcomes in computer programming courses taught at institutions of higher education . REFERENCES Kent Beck . 2000 . Extreme Programming Explained : Embrace Change . Addison - Wesley Professional , Boston , MA . Kent Beck and Cynthia Andres . 2004 . Extreme Programming Explained : Embrace Change . Addison - Wesley , Boston , MA . Catherine Beise , Lewis Vanbrackle , Martha Myers , and Neela Chevli - Saroq . 2003 . An examination of age , race , and sex as predictors of success in the first programming course . J . Informat . Edu . Res . 5 , 51 – 64 . Bls . 2014 . Occupational Outlook Handbook , 2014 – 15 Edition , Computer Programmers . Bureau of Labor Statistics , U . S . Department of Labor . Retrieved from http : / / www . bls . gov / ooh / computer - and - information - technology / computer - programmers . htm . ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 . A Meta - Analysis of Pair - Programming in Computer Programming Courses 16 : 13 Michael Borenstein , Larry V . Hedges , Julian P . T . Higgins , and Hannah R . Rothstein . 2009 . Introduction to Meta - Analysis . JohnWiley & Sons , Ltd , West Sussex , UK . Jacob Cohen . 1992 . A power primer . Psychol . Bull . 112 , 155 – 116 . Tore Dybå , Erik Arisholm , Dag I . K . Sjøberg , Jo E . Hannay , and Forrest Shull . 2007 . Are two heads better than one ? on the effectiveness of pair programming . IEEE Softw . 24 , 12 – 15 . Brian W . Fitzpatrick and Ben Collins - Sussman . 2012 . Team Geek : A Software Developer’s Guide to Working Well with Others . O’Reilly Media , Sebastopol , CA . Denae Ford and Chris Parnin . 2015 . Exploring causes of frustration for software developers . In Proceedings of the IEEE / ACM 8thInternationalWorkshoponCooperativeandHumanAspectsofSoftwareEngineering ( CHASE’15 ) , AndrewBegel , Rafael Prikladnicki , Yvonne Dittrich , Cleidson De Souza , Anita Sarma and Sandeep Athavale , Eds . IEEE , 115 – 116 . Sallyann Freudenberg , Pablo Romero , and Benedict Du Boulay . 2007 . “Talking the talk” : Is intermediate - level conversation the key to the pair programming success story ? In Proceedings of the Agile Conference ( AGILE’07 ) , Washington , DC , Jutta Eckstein and Frank Maurer , Eds . IEEE Computer Society , 84 – 91 . Edward F . Gehringer . 2003 . A pair - programming experiment in a non - programming course . In Proceedings of the ACM SIGPLANConferenceonObject - OrientedProgramming , Systems , Languages , andApplications , Anaheim , CA , RonCrocker , Jr . Guy L . Steele and Richard P . Gabriel , Eds . ACM , 949397 , 187 – 190 . Desmond W . Govender and T . P . Govender . 2014 . Using a collaborative learning technique as a pedagogic intervention for the effective teaching and learning of a programming course . Mediterran . J . Soc . Sci . 5 , 1077 – 1086 . Jo E . Hannay , Tore Dybå , Erik Arisholm , and Dag I . K . Sjøberg . 2009 . The effectiveness of pair programming : A meta - analysis . Info . Softw . Technol . 51 , 1110 – 1122 . Christopher D . Hundhausen , Adam S . Carter , and Olusola Adesope . 2015 . Supporting programming assignments with activity streams : An empirical study . In Proceedings of the ACM Technical Symposium on Computer Science Education , Kansas City , MO , Adrienne Decker and Kurt Eiselt , Eds . ACM , 2677276 , 320 – 325 . Sema A . Kalaian and Rafa M . Kasim . 2014 . Small - group vs . competitive learning in computer science classrooms : a meta - analytic review . In Innovative Teaching Strategies and New Learning Paradigms in Computer Programming , Ricardo Queirós , Ed . IGI Global , Hershey , PA , 46 – 64 . Theodora Koulouri , Stanislao Lauria , and Robert D . Macredie . 2015 . Teaching introductory programming : A quantitative evaluation of different approaches . ACM Transactions on Computing Education ( TOCE’15 ) , 14 , 1 – 28 . Marcia C . Linn and John Dalbey . 1989 . Cognitive consequences of programming instruction . In Studying the Novice Pro - grammer , Elliot Soloway and James C . Spohrer , Eds . Psychology Press , East Sussex , NJ . James Noble , Stuart Marshall , Stephen Marshall , and Robert Biddle . 2004 . Less extreme programming . In Proceedings of the Australasian Conference on Computing Education , Dunedin , New Zealand , Raymond Lister and Alison Young , Eds . Australian Computer Society , Inc . , 979997 , 217 – 226 . Laura Plonka , Judith Segal , Helen Sharp , and Janet Van Der Linden . 2011 . Collaboration in pair programming : Driving and switching . In Proceedings of the 12th International Conference on Agile Processes in Software Engineering and Extreme Programming ( XP’11 ) , Alberto Sillitti , Orit Hazzan , Emily Bache , and Xavier Albaladejo , Eds . Springer , Berlin , 43 – 59 . Winston W . Royce . 1970 . Managing the development of large software systems . In Proceedings of the IEEE WESCON , Los Alamitos , CA , IEEE , 1 – 9 . Carolina Alves De Lima Salge and Nicholas Berente . 2016 . Pair programming vs . solo programming : What do we know after 15 years of research ? In Proceedings of the Hawaii International Conference on System Sciences ( HICSS’16 ) , Tung X . Bui and Ralph H . Sprague , Eds . IEEE , 5398 – 5406 . Norsaremah Salleh , Emilia Mendes , and John Grundy . 2011 . Empirical studies of pair programming for CS / SE teaching in higher education : A systematic literature review . IEEE Trans . Softw . Eng . 37 , 509 – 525 . Christopher Watson and Frederick W . B . Li . 2014 . Failure rates in introductory programming revisited . In Proceedings of the Conference on Innovation & Technology in Computer Science Education , Asa Cajander , Mats Daniels , Tony Clear , and Arnold Pears , Eds . ACM , 2591749 , 39 – 44 . Laurie Williams and Robert Kessler . 2002 . Pair Programming Illuminated . Addison - Wesley Longman Publishing Co . , Inc . , Boston , MA . Laurie Williams , D . Scott Mccrickard , Lucas Layman , and Khaled Hussein . 2008 . Eleven guidelines for implementing pair programming in the classroom . In Proceedings of the Agile Conference , Grigori Melnik and Mary Poppendieck , Eds . IEEE , 445 – 452 . Laurie Williams , Eric Wiebe , Kai Yang , Miriam Ferzli , and Carol Miller . 2002 . In support of pair programming in the intro - ductory computer science course . Comput . Sci . Edu . 12 , 197 – 212 . AmyB . Woszczynski , TracyC . Guthrie , andSherriShade . 2005 . Personalityandprogramming . J . Info . Syst . Edu . 16 , 293 – 299 . Received December 2015 ; revised September 2016 ; accepted October 2017 ACM Transactions on Computing Education , Vol . 17 , No . 4 , Article 16 . Publication date : August 2017 .