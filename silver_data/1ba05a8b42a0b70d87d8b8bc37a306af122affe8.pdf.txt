Co - evolution of End - User Developers and Systems in Multi - tiered Proxy Design Problems Daniela Fogli 1 , Antonio Piccinno 2 1 Dipartimento di Ingegneria dell’Informazione , Università degli Studi di Brescia , Brescia , Italy fogli @ ing . unibs . it 2 Dipartimento di Informatica , Università degli Studi di Bari , Bari , Italy antonio . piccinno @ uniba . it Abstract . This paper aims at analyzing the category of multi - tiered proxy de - sign problems , where end - user developers do not necessarily coincide with the actual end users of the system , but can be considered as end users’ proxies . This situation can be found in a variety of application domains , from home automa - tion , where electricians defining home automation systems for energy saving are different from house occupants , to e - government , where administrative em - ployees creating e - government services are different from citizens using those services . The analysis leads to the definition of a new interaction and co - evolution model , called ICE 2 , which , on the basis of the model discussed in a previous work , considers not only the case of end users that directly make their system evolve by means of end - user development activities , but also the case where a proxy figure is present , namely an expert in the application domain that creates and modifies software artifacts for others ( the actual end users ) . Finally , a design approach is proposed , which aims at generalizing the solutions sug - gested in different application domains , and at sustaining the interaction and co - evolution processes that involve end users , end - user developers , and systems . Keywords : interaction model , co - evolution , end - user developer , meta - design , meta - model , multi - tiered proxy design problem 1 Introduction The communication gap often existing between users and developers usually leads to developing interactive systems that are difficult to use and to learn . To cope with this problem , since the eighties , the human - computer interaction ( HCI ) community is promoting design approaches that give users a voice , such as user - centered design [ 1 ] and participatory design [ 2 ] , just to mention the most widespread approaches . Another phenomenon has however been observed around HCI : users evolve by us - ing software systems , and , to satisfy new users’ needs , designers must make systems evolve . Carroll and Rosson describe this phenomenon as the task - artifact cycle [ 3 ] ; while , subsequently , others ( see [ 4 ] , [ 5 ] ) characterize this phenomenon as the co - evolution of users , systems , and organization , highlighting that also a technology - organization cycle occurs , beyond the task - artifact one . 2 To synthesize the communication gap and co - evolution phenomena , the Interaction and Co - Evolution ( ICE ) model has been defined in [ 6 ] ; then , on the basis of this mod - el , End - User Development ( EUD ) has been suggested as the most suitable solution to cope with co - evolution [ 5 ] . Actually , EUD encompasses techniques and applications that empower end users to develop and adapt systems themselves , by carrying out activities that are traditionally performed by software developers [ 7 ] . Moreover , ac - cording to [ 8 ] , enabling end users to act as designers and contribute to the evolution of their systems requires to conceive design as a meta - design activity . Indeed , “meta - design extends existing design methodologies focused on the development of a sys - tem at design time by allowing users to become co - designers at use time” [ 9 ] . This view on EUD and meta - design is usually focused on those situations where end users create or adapt software artifacts for personal rather than public use , thus distinguishing it from professional programming , which has the goal of developing code for others to use [ 10 ] . For instance , in [ 11 ] , the situation of a geoscientist is de - scribed : he decided to spend three months in acquiring programming knowledge , in order to be able to develop software for himself to analyze the data he collected ; even though the geoscientist declares that software development is now an essential task for his research , he is aware that he is not a software developer , but just an end - user developer . As in many other application domains ( e . g . , medical diagnosis [ 12 ] , me - chanical engineering [ 5 ] , business intelligence [ 13 ] , CAD [ 14 ] ) , the end - user develop - er is a domain expert that , to cope with her / his specific problems , needs to adapt or create software artifacts . With reference to workgroups , Gantt and Nardi call this domain expert a local developer or gardener [ 14 ] , namely a person who customizes a software environment and creates programmatic extensions of applications for her / his purpose that , possibly , will be made available to other users working in the same group with a shared objective . However , there are also several situations , in different application domains , where the communities of end users and end - user developers remain separated : on the one hand , there are the actual end users that cannot be required to carry out EUD activities because of their specific goals , interests , and abilities ; on the other hand , there are domain experts , not knowledgeable in information technology , who are called to play the role of end - user developers and create and / or adapt programs for end users by means of EUD environments and tools . A typical example is the case of e - government ( discussed in detail in Section 3 . 4 ) , where citizens using e - government services constitute the community of end users , whilst administrative employees de - veloping services for citizens belong to the community of experts in government is - sues . Obviously , an administrative employee is a citizen as well , and it may happen that s / he will use at some point an e - government service s / he has created ( for instance , to enroll her / his children at the municipality school through a proper online service ) ; in this case s / he is changing role from end - user developer to end user . This paper analyzes a variety of such cases by framing them in the category of mul - ti - tiered proxy design problems [ 15 ] . We argue that this kind of problems deserves additional reflection in the EUD field , in order to : 3 1 . characterize the role , competencies , and objectives of end - user developers , with re - spect to software developers and actual end users ; 2 . generalize EUD techniques and meta - design activities to face multi - tiered proxy design problems . As to point ( 1 ) , we propose ICE 2 ( ICE square ) model , an extension of the ICE model ; as to point ( 2 ) , we provide a design approach that aims at generalizing the different experiences discussed as case studies . Furthermore , we would like to provide a reflection on the role played by meta - designers in multi - tiered design problems with respect to the role they play in ‘stand - ard’ EUD situations , also with reference to the co - evolution cycles . The paper is organized as follows . Section 2 analyses existing work and presents the starting point of the research ; Section 3 describes different multi - tiered proxy design cases ; Section 4 presents the model of co - evolution of end users , end - user developers and system ( ICE 2 ) ; Section 5 discusses the design approach proposed for multi - tiered proxy design problems ; Section 6 provides an additional discussion on the themes presented in the paper ; Section 7 concludes the paper . 2 Background and related work The Interaction and Co - Evolution ( ICE ) model discussed in [ 6 ] is at the basis of a model - based approach to the design of usable and easy - to - tailor interactive systems . This model provides a synthesis of the interaction and co - evolution models proposed in HCI literature . Interaction models aim to identify the causes of interaction difficulties affecting software systems , namely usability issues . For example , the seminal model proposed by Hutchins , Hollan and Norman focuses on the human side of the interaction process and identifies the existence of evaluation and execution gulfs as the primary sources of usability difficulties [ 16 ] . The model proposed by Abowd and Beale highlights , on the other hand , the problems arising on the computer side , i . e . capturing and interpret - ing the events generated by the user [ 17 ] . Finally , the model proposed in [ 18 ] aims at balancing the roles that both human and system play in the interaction . Here , HCI is described as a cyclic process , in which the user and the system communicate by mate - rializing and interpreting a sequence of messages ( e . g . , the images on the screen in visual interaction ) at successive points in time . Materialization and interpretation are performed by the user , depending on her / his role in the task , as well as on her / his culture , experience , and cognitive and physical skills ; whilst , on the other side , inter - pretation occur internally to the system , which associates the message with a compu - tational meaning , as determined by the programs implemented in the system , and reacts to user events accordingly by materializing a new message . This last model gives emphasis to the two different interpretation processes occur - ring inside the human and the machine . These interpretation processes are considered as the main source of usability problems and are related to the communication gap existing between users and designers [ 5 ] . Indeed , users need to perform their tasks by reasoning in accordance to their mental models , and to express this reasoning in nota - 4 tions familiar to them ; whilst , designers usually develop the systems by focusing pri - marily on the computational and management aspects ; therefore , the message inter - pretation performed by the system reflects the designers’ understanding of the task at hand , rather than the users’ point of view . User - centered and participatory design approaches are being promoted by the HCI community for more than twenty - five years [ 1 ] , [ 2 ] , with the purpose to cope with the communication gap phenomenon and favor the development of systems that end users find easy to use and to learn . A further important phenomenon observed in HCI is the co - evolution of users and systems , namely the possibility that the users evolve by using the systems and that the systems evolve - through designers’ work - to satisfy the new users’ needs . Specifical - ly , Carroll and Rosson describe this phenomenon as the task - artifact cycle [ 3 ] , which highlights how the software artifacts created to support some user’s tasks usually suggest new possible tasks ; to support these new tasks , new artifacts must be created . Other HCI scholars provide a wider view of the co - evolution phenomenon : since technology advances give computer scientists new possibilities of improving interac - tive systems once they are already in use , new interaction possibilities occur that might change users’ working habits , thus making their social and work organization evolve itself with technology [ 4 ] , [ 5 ] . The three cycles – interaction cycle , task - artifact co - evolution cycle and organiza - tion - technology co - evolution cycle – are illustrated in Figure 1 ( adapted from [ 6 ] ) . Fig . 1 . Interaction and Co - evolution cycles ( adapted from [ 6 ] ) . Both co - evolution cycles can be sustained and favored by EUD techniques , which empower end users to develop and adapt systems themselves [ 7 ] . In this way , when - ever end users would like to carry out new or different tasks , they can directly modify the artifact by means of EUD activities , ranging from simple selection among alterna - tive behaviors already available in the artifact ( customization ) , to actual program 5 creation carried out through programming - by - example , incremental programming , model - based development , and extended annotation . Due to the task - artifact co - evolution cycle , end users also improve their knowledge , update their procedures in the real world , and modify their working organization , possibly requiring the adoption of more advanced technologies . The organization - technology co - evolution is thus itself a long - term side effect of end - user development . The ICE model is able to describe the several proposals that can be found in EUD and End - User Software Engineering ( EUSE ) [ 10 ] literature . For example , component - based techniques allow end users tailoring their own systems , thus making them evolve [ 19 ] . More recently , scholars studying tools for mash - up creation adopt com - ponent - based approaches as well [ 13 ] , [ 20 ] . Another technique widely used in EUD is extended annotation [ 12 ] : a number of EUD tools based on this technique have been recently proposed ( e . g . , [ 21 ] , [ 22 ] ) . As far as EUSE is concerned , a methodology is presented for instance in [ 23 ] , which supports end - user programmers to carry out testing and debugging in spread - sheet environments . Many other proposals in this field are discussed in [ 10 ] . In all these works , emphasis is given to end users developing software per se and not for third or public use ; indeed , EUD activities are usually distinguished from pro - fessional programming , which has the goal of developing code for others to use . In this paper we would like to analyze case studies that can be framed in the category of multi - tiered proxy design problems [ 15 ] , where end users and end - user developers may form different communities , with different goals , skills , and competences . As we will discuss in Section 6 , considering this kind of problems pushes further in the di - rection of adopting a meta - design approach : indeed , meta - design aims at creating the socio - technical conditions that empowers end users to behave as end - user developers [ 8 ] ; in multi - tiered proxy design problems , meta - design should have a wider perspec - tive by providing all stakeholders ( including domain experts ) with suitable languages and tools to foster their personal and common reasoning about the development of software systems that support end users [ 5 ] . The following section discusses multi - tiered proxy design problems and some lit - erature case studies . 3 Multi - tiered proxy design problems The main purpose of EUD is to support new needs at use time , by taking into account changing tasks . In many application domains , however , end users cannot act as devel - opers , but a third figure must accept this role . This is the case of the so - called multi - tiered proxy design problems [ 15 ] . They can be characterized by the identification of the following figures :  end users , who are usually not able to completely describe their needs and design requirements ;  end - user developers , who are able to articulate what should be developed , even if they have no software programming competencies ; 6  software developers , who know how to develop the required system , but are unable to completely satisfy end users’ needs without the help of end - user developers , since they are not expert in the domain as end - user developers are . In the following , several case studies in very different domains , which can be framed in this problem category , are presented . 3 . 1 Cognitive disability support Memory Aiding Prompting System ( MAPS ) [ 15 ] , [ 24 ] aims at supporting the inde - pendence and safety of people with cognitive disabilities in their daily activities , such as going to the grocery or taking a bus . MAPS is a platform that provides a simple , wireless prompting system for individuals with cognitive disabilities ( end users ) , along with an editing tool that allows caregivers to customize the prompting system for the end users . This is a typical case in which the adoption of a multi - tiered proxy design approach has to be adopted , since the end users cannot act as end - user devel - opers and caregivers are called to play this role . More precisely , the system comprises the following components :  MAPS - Design - Environment ( MAPS - DE ) : a PC - based interface that enables the caregiver ( usually a family member ) to edit , store , and reuse multimedia scripts that prompt instructions for task support ( i . e . , sequences of video and verbal in - structions ) ; this environment is designed according to the needs and capabilities of caregivers ;  MAPS - Database : an information storage space that is accessible both at the level of the local PC where the MAPS - DE is installed and via the Internet . It stores script images and sounds , user and task modeling metadata , and a repository of tested scripts to be used as templates by caregivers using their MAPS - DE ;  MAPS - Prompter : a PDA - based device that prompts instructions supporting the person with cognitive disabilities in the accomplishment of her / his daily tasks . Software developers have created the infrastructure to make these three components work together and to allow end - user developers , i . e . , caregivers , to create instances of the PDA - based application for specific end users . 3 . 2 Cultural heritage In [ 25 ] , the authors present an approach to the design of interactive art guides , where cultural domain experts are provided with a proper design environment to organize and tailor multimedia content of heterogeneous nature by instantiating a set of prede - fined templates on actual visit paths for a wide range of end users . The role of visitors of interactive exhibitions ( end users ) is obviously distinguished from that of cultural domain experts ( end - user developers ) , since the latter are the persons in charge of developing guides for the former people . In this approach , the development of the structure for multimedia art guides is based on an abstract model , represented by a directed graph specification , which ex - 7 ploits the notions of “topic” and “visit” . Each topic is in turn specified as a finite state automaton , whilst the visit is the sequence of automaton states experienced by the visitor . Each art guide page will thus correspond to a node of the graph : the cultural domain expert can act on node data and external multimedia files to create content that will be applied to the pre - existing templates , in order to generate new node in - stances . S / he can also compose data files to insert new nodes and , by defining rela - tionships between them , create new thematic , spatial , or logical organizations of art - works in the guide . Cultural domain experts work with interface designers and pro - grammers to design the guide conceptual structure ; instead , they are more independ - ent in the organization of the multimedia material , by using a customized Content Management System ( CMS ) . In the traditional development of interactive guides , knowledge about art exhibi - tions possessed by cultural domain experts is usually transferred , with many ambigui - ties and misunderstandings , to software programmers ; the adoption of a multi - tiered proxy design approach allows overcoming this problem , by transforming cultural domain experts into end - user developers . 3 . 3 Home automation The paper [ 26 ] presents an approach and a tool ( Pantagruel ) , which supports the de - velopment of home automation environments dedicated to helping house occupants ( end users ) in their everyday life , e . g . for home security , energy consumption , or as - sisted living . A domain expert , for example a caregiver expert in assisted living or an electrician expert in energy consumption , who knows end users’ needs , plays the role of end - user developer : s / he provides an environment description , which consists of a declaration of entity classes along with their attributes and methods ; this description is then used to define a concrete environment by instantiating entity classes . A visual language is provided in the Pantagruel tool to create orchestration rules , which are based on the environment description and foster environment composition . More precisely , the development process starts when the end user expresses her / his requirements to the domain expert . On the basis of requirements analysis , the domain expert defines the application goals and entities . The latter are then further specified into a Pantagruel taxonomy by the entity expert , based on the needs expressed by the domain expert . Once specified , the entities are used as the building blocks to be or - chestrated by Pantagruel . The domain expert , using the Pantagruel visual develop - ment editor , ensures application development . 3 . 4 E - government A novel approach to the development of e - government services has been presented in [ 27 ] . In this approach , administrative employees ( end - user developers ) first collabo - rated with software engineers and HCI specialists to define the characteristics of online services to be made available to citizens ( end users ) . In particular , the design team examined the class of services for reserving appointments at the different coun - ters of a government agency , in order to speed up identity card release , deal with for - 8 eign people permits , and so on . Such services have been characterized by a form - based , step - by - step interaction style , thus recalling the traditional way of communica - tion between citizens and government agencies . The design activity led to define a meta - model representing the considered class of services , which was then represented by software engineers through an XML schema [ 28 ] . In addition , the team designed an EUD environment able to support administrative employees in creating instances of the XML schema , namely XML documents describing the steps of specific ap - pointment reservation services . The EUD environment does not require end - user de - velopers to write any XML code , neither to know the underlying meta - model : they only have to fill in some forms that define the requests for citizens in each step of the service . A form generator exploits XML documents created through the EUD envi - ronment to generate the actual service pages for citizens . Also in this case , the need for a multi - tiered proxy design approach emerged from existing work practice : the idea of transferring to administrative employees the re - sponsibility of developing e - government services allows avoiding misunderstandings with software engineers and better satisfying citizens’ needs [ 27 ] . 3 . 5 Electronic Patient Record The case study discussed in [ 29 ] about the development of the Electronic Patient Rec - ord ( EPR ) can be regarded as a multi - tiered proxy design problem as well . Patient records are of ﬁ cial artifacts that practitioners write to preserve the memory or knowledge of facts and events that occurred in the hospital ward [ 30 ] . The patient record is a many - sided document : it is read by very different people , not only physi - cians and nurses , but also the patients themselves , their relatives , etc . , thus it must have the ability to speak different “voices” to convey different meanings according to people using it [ 31 ] . The patient records are actually composed of modules , each one containing speci ﬁ c ﬁ elds for collecting patient data . Various hospital employees are only interested in a subset of such modules , and use them to accomplish different tasks , i . e . the nurse records the patient’s measurements , the reception staff records the patient’s personal data , the physician examines the record to formulate a diagnosis , and so on . The following main stakeholders who are involved in the EPR manage - ment were identi ﬁ ed : ( 1 ) practice manager ; ( 2 ) head physicians ; ( 3 ) physicians ; ( 4 ) nurses ; and ( 5 ) administrative staff . In particular , the head physician has the right and the responsibility of the EPR to be adopted by physicians and nurses of her / his ward . EPR project has been managed by applying the software shaping workshop meth - odology [ 5 ] , [ 32 ] . A team composed of software engineers , HCI experts and physi - cians designed the software environments ( software shaping workshops ) for the dif - ferent stakeholders , as well as the data modules , which are the basic component of the EPR , and the application template to allow each head physician to design the EPR for her / his ward by directly manipulating data modules in her / his software environment . In this case study , end users are physicians and nurses of a specific ward , while the head physician is the end - user developer in charge of creating the EPR for them . The adoption of a multi - tiered proxy design approach is here required because the head physician is the only stakeholder responsible for the EPR adopted in the ward . 9 4 The ICE 2 model As already mentioned in Section 2 , EUSE and EUD are usually intended as design techniques that aim to support the development of systems enabling people to create , modify and adapt software artifacts per se . However , as observed in multi - tiered de - sign problems , end - user developers are often called to develop for others ; therefore , since they are not professional developers , they should be able to interact easily with a software environment to create , modify or adapt software systems devoted to end users . The ICE 2 model presented in Fig . 2 encompasses this second type of end user . As in the ICE model , the three cycles model the mutual influence that systems and tech - nology have with end users , end - user developers , and respective organizations . Fig . 2 . The ICE 2 model . The co - evolution process involving end users ( left - hand side of the figure ) is the same as in the ICE model ; this process is sustained by the other co - evolution process , described by the right - hand side of the figure and involving end - user developers . The artifact is the boundary object [ 33 ] between the two co - evolution processes , which can be regarded as composed of two parts : 1 ) the software system devoted to the end user , and 2 ) the EUD tools ( including the EUD environment and / or software compo - nents as building blocks of the software system being developed ) that are used by the end - user developer to generate and / or adapt the software system for end users . Interesting interactions between the two co - evolution processes occur at use time ; they are discussed in the following with reference to the case studies illustrated in sections 3 . 4 and 3 . 5 , where authors of this paper have been personally involved . Requests for system evolution coming from end users reach end - user developers , who may directly operate on the system through EUD tools or , if necessary , may in turn ask software developers for the evolution of their own tools . In this way , the left task - artifact cycle of Fig . 2 ( involving end users ) affects the right task - artifact cycle of end - user developers . For example , when citizens ask for an additional e - government service , administrative employees may create it , if their EUD environment already 10 includes that type of service ( e . g . , appointment reservation ) ; otherwise , administrative employees will ask software developers to extend the EUD environment to include the new type of service ( for example , paying local taxes ) . In the EPR case , ward phy - sicians can get aware that new data are needed ( for example , in case of specific pa - thologies ) , but they cannot find the related module in the EPR . Thus , they have to ask for a new specific module to the head physician , who , using EUD tools , will evolve the current EPR accordingly or make a request to software developers for creating the new type of module . The external cycle in the right - hand side of Fig . 2 may influence the organization - technology cycle that involves the end - user community . Indeed , technology advances give new possibilities for improving systems during their use , bringing to new interac - tion possibilities that might change working habits and organization of end users , and possibly lead to include new end users in the end - user community . For example , in the e - government case , new online services may be devoted to further categories of citizens formerly not encompassed ( e . g . , healthcare services for old people ) , or differ - ent versions of services ( e . g . , mobile versions of existing services ) may make citizen community evolve in number and in the user classes . In addition , each internal cycle of a co - evolution process affects the external one and vice versa . For example , the task - artifact cycle involving end - user developers may in turn affect the organization - technology cycle , in that it may call for the exten - sion of the end - user developer community with further members , and possibly require the introduction of new technologies for supporting them . In the e - government case study , the request for additional e - government services that current administrative employees cannot provide may require that new administrative employees ( from dif - ferent agency departments ) be engaged in service design and creation ; in this way , the organization of the end - user developer community will change in terms of composi - tion , power , and relationships ; the artifact may change in turn , as a consequence of a possible extension of the EUD environment to cope with the new end - user develop - ers’ needs . The task - artifact cycle also means the end - user developers may evolve during their interaction with the EUD environment , since they may acquire new skills related to software technology and discover new possibilities for enhancing end users’ tasks . For example , in the EPR case , it has been observed that the head physician involved in the project has been strongly affected by the technology advances : whilst in the beginning he was almost scared by the EPR system , he is now using regularly advanced mobile devices and asks to adapt EPR tools to be used in mobility . Finally , the organization - technology co - evolution cycle can have an impact on the task - artifact one , since rules and guidelines may change over time , especially as a consequence of a consolidation or other types of re - organization . For example , in the EPR case , rules about data visualization in the EPR changed after the recent consoli - dation of ‘‘Giovanni XXIII’’ Children Hospital of Bari with the Polyclinic of Bari . Beside the communication , mediated by the system , between end users and end - user developers , a further communication channel always exists ( see arrows at the bottom of Fig . 2 ) that is outside the system . In fact , end users and end - user developers usually exchange information also through traditional means , e . g . , face - to - face , phone , email , etc . 11 5 Addressing multi - tiered proxy design problems In [ 9 ] , the authors discuss an approach to the meta - design of socio - technical systems . In particular , the conceptual framework for meta - design is described through a three - level model including : 1 ) a meta - level , which contains the beliefs and concepts of meta - design ; 2 ) an intermediate level , which refers to a framework to be meta - designed in accordance with the higher level and that serves as an environment within which socio - technical systems are developed ; 3 ) a basic level , including socio - technical systems developed within the framework in the intermediate level . In order to cope with the co - evolution processes represented in the ICE 2 model , we deepen the three - level model in the case of multi - tiered proxy design problems , by generalizing the solutions encountered in the case studies described in section 3 ( and in many others ) and making the above three levels more concrete in terms of design activities . The resulting design approach here proposed develops along three main phases : 1 . the meta - design phase : in this phase , a multidisciplinary team carry out meta - design activities to create an environment for end - user development able to gener - ate software systems for end users ; 2 . the design phase : in this phase , end - user developers carry out design activities in a creative but guided way , by using the EUD environment ; 3 . the use phase : in this phase , the system generated through EUD is used by end us - ers , who possibly personalize it by setting some parameters , in order to choose among alternative behaviors ( or presentations or interaction mechanisms ) already available in the system [ 12 ] . At a beginning , these phases are carried out sequentially ; whilst , along the system lifecycle , they are more entwined : for example , new needs emerging at the use phase may ask for new design activities , which in turn , in some cases , may require further meta - design activities . In order words , the three phases influence each other and allow responding to co - evolution requests . These phases are illustrated in the following . 5 . 1 The Meta - Design Phase In the meta - design phase , a multidisciplinary team , including at least software engi - neers , HCI specialists and domain experts , defines at first the conceptual model of the software systems devoted to end users . This activity could be carried out through participatory design techniques , for example by means of scenario - based analysis or mock - up development . The metaphor and interaction style of the systems for end users are thus defined ; they will strongly depend on domain characteristics and users’ habits . For example , different conceptual models have been defined in the case stud - ies discussed in Section 3 : video help in MAPS , guide tour in cultural heritage , com - position of virtual sensors and actuators in home automation , form - based interaction in e - government and EPR systems . 12 After the conceptual model definition , the design team defines a meta - model that describes and generalizes the structure and properties of the software systems for end users . This meta - model can be formally represented as a UML class diagram , an on - tology , an XML schema , a finite state automaton , etc . , or informally , as a natural language description of the application domain . For example , in MAPS , script tem - plates and script rules constitutes the meta - model ; in the cultural heritage case study , the meta - model is composed of the graph and the finite state automaton ; class dia - grams are used in Pantagruel ( home automation ) ; an XML schema is adopted in the e - government case ; the conceptual schema of the underlying database is the meta - model in the EPR case . Then , members of the design team will collaborate to the development of the EUD environment that supports the creation of instances of the meta - model , namely of models that will play the role of specification for the software systems devoted to end users . For example , in the e - government case study , the EUD environment created for administrative employees allows them to generate instances of the meta - model , name - ly XML documents , which specify form - based web applications for citizens ; whilst in the culture heritage case , cultural domain experts collaborate to design the guide con - ceptual structure , which will be then instantiated with multimedia material ; in the MAPS project , MAPS - DE supports caregivers in creating multimedia scripts through the instantiation and composition of available templates . Finally , software engineers must create an interpreter of the meta - model instances , capable of generating the actual software systems described by such instances . This interpreter must generate systems that satisfy the conceptual model previously defined by the design team . 5 . 2 The Design Phase In the second phase of the approach , end - user developers use the EUD environment developed during the meta - design phase to create the software systems for end users . As end - user developers , they should be able to easily interact with the EUD environ - ment , possibly by following their traditional way of reasoning and operating when a similar service was supplied to end users without the help of information technology ( e . g . paper - based forms in e - government , human tourist guide in art exhibitions , pa - per - based patient record in an hospital ) . For example , MAPS - DE allows caregivers to easily generate scripts that are instances of the meta - model , from which videos for disabled persons are automatically generated . In a similar way , in the cultural heritage domain , end - user developers may use the CMS to create a guide for visitors , which is actually an instance of the graph , namely the meta - model previously defined . In the home automation case , the visual development editor allows domain experts to create a taxonomy that models a specific domain and is used to generate the application for end users . In the EPR case , the software shaping workshop devoted to the head physi - cian of a specific ward allows her / him to create EPRs customized to the different stakeholders of the ward . 13 5 . 3 The Use Phase Finally , in the third phase , end users use the software systems designed for them by end - user developers . Thanks to meta - design and meta - modeling , such systems may have some flexibility degrees , and thus be personalized by end users . For example , in the e - government case , citizens can change service forms on the basis of their input ; in the cultural heritage case , visitors can provide their profile , and the tourist guide adapts itself accordingly ; in the EPR case , ward nurses , who primarily input data about patients , can modify the layout of the EPR modules by moving , for example , the parts they are interested in to the top , in order to find them quickly . Mechanisms for providing feedback to end - user developers at use time should be integrated in the systems for end users , in order to foster more rapidly the co - evolution processes modeled by the ICE 2 model . These mechanisms could be based for example on annotation tools , as reported in [ 6 ] . 6 Discussion End - User Software Engineering proposes a variety of methods to adequately manage the code quality of software artifacts created by end - user developers [ 10 ] . However , usability of such software artifacts is usually considered an immaterial issue , since the underlying assumption is that end users carry out development activities to adapt or develop software artifacts for their personal use . In few words , end users who develop per se may create unusable systems . However , in multi - tiered proxy design problems this is not true anymore : end - user developers who develop software artifacts for oth - ers must develop usable systems [ 34 ] . These different needs lead to a reflection on the meta - design activity and the role of meta - designers . In the former case , meta - designers work for end users and must sustain the interaction and co - evolution cycles encompassed by the ICE model ( Fig - ure 1 ) . To this aim , many meta - design guidelines have been proposed [ 9 ] , [ 11 ] ; among them , it is interesting to remember that meta - designers must i ) provide end users with building blocks to be composed freely and in unexpected manners , ii ) un - derdesign for emergent behavior during use , ii ) establish cultures of participation , so that end users should be encouraged to make their contributions , and iv ) reward and recognize contributions , in order to motivate end users to participate in system evolu - tion . In multi - tiered proxy design problems , meta - designers work for people having dif - ferent characteristics , needs and objectives with respect to the actual end users . In - deed , meta - designers are called to provide end - user developers with domain - oriented design tools that allow them , not only to co - evolve with such tools , but also to support the co - evolution cycles involving end users ( Figure 2 ) . In the design approach proposed in this paper the meta - design phase plays a crucial role to guarantee the usability and modifiability of the software artifacts to be created by end - user developers . Here , the meta - design team has the responsibility to define the conceptual model and the meta - model of a class of systems for end users . The team is then called to develop an EUD environment suitable to the knowledge and 14 capabilities of end - user developers , as well as a generator of software systems for end users that reflect the defined conceptual model . In this way , EUD is not conceived as a mere code creation or adaptation , but as the “instantiation of a meta - model” , carried out by end - user developers through an easy and natural interaction with the EUD environment . We argue that the multi - tiered structure of the described problems , due to the di - versity of the involved communities and the specific nature of EUD activities pro - posed in the design approach , should lead to additional reflections on the meta - design guidelines . 7 Conclusion The contribution of this paper is three - fold . First , we have analyzed a set of case stud - ies in different application domains that can be classified as multi - tiered proxy design problems , which , in our opinion , deserve a special attention within the EUD commu - nity . Second , we have proposed a novel interaction and co - evolution model for this kind of problems . Beyond the interaction and co - evolution cycles referred to the end - user community , the ICE 2 model also encompasses the co - evolution cycles that ex - plicitly involve end - user developers . Indeed , in multi - tiered proxy design problems , end - user developers form a separated community , whose activity supports the co - evolution of end users and systems , and who may in turn co - evolve with EUD tools and the technology used to develop them . Third , we have presented a design ap - proach , structured in three phases , to address multi - tiered proxy design problems . The design approach is based on a deep understanding of the domain of end users and end - user developers , which can be accomplished by adopting traditional user - centered and participatory design during the meta - design phase . However , suitable software tools to support meta - designers in carrying out their activities are still lack - ing . We are planning to study and develop in the near future a proper meta - design environment that supports the definition of the conceptual model of artifacts to be created , the specification of meta - models , and the development of domain - dependent EUD environments . Acknowledgments . The authors wish to thank Maria Francesca Costabile and Ger - hard Fischer for their insightful comments and suggestions to an earlier version of this paper . References 1 . Norman , D . A . , Draper , S . W . : User Centered System Design ; New Perspectives on Human - Computer Interaction . L . Erlbaum Associates Inc . , Hillsdale , NJ , USA ( 1986 ) 2 . Schuler , D . , Namioka , A . : Participatory Design : Principles and Practices . Lawrence Erlbaum Associates , Inc . ( 1993 ) 3 . Carroll , J . M . , Rosson , M . B . : Getting around the Task - Artifact Cycle : How to Make Claims and Design by Scenario . ACM Trans . Inf . Syst . 10 ( 2 ) , 181 - 212 ( 1992 ) 15 4 . Bourguin , G . , Derycke , A . , Tarby , J . C . : Beyond the Interface : Co - Evolution inside Interactive Systems - a Proposal Founded on Activity Theory . In : IHM - HCI , pp . 297 - 310 . Springer Verlag ( 2001 ) 5 . Costabile , M . F . , Fogli , D . , Mussio , P . , Piccinno , A . : Visual Interactive Systems for End - User Development : A Model - Based Design Methodology . IEEE T . Syst . Man Cy . A 37 ( 6 ) , 1029 - 1046 ( 2007 ) 6 . Costabile , M . F . , Fogli , D . , Marcante , A . , Piccinno , A . : Supporting Interaction and Co - Evolution of Users and Systems . In : International Conference on Advanced Visual Interface , pp . 143 - 150 . ACM Press ( 2006 ) 7 . Lieberman , H . , Paternò , F . , Wulf , V . ( eds . ) : End User Development . Springer , Dordrecht , The Netherlands ( 2006 ) 8 . Fischer , G . , Giaccardi , E . : Meta - Design : A Framework for the Future of End User Development . In : Lieberman , H . , Paternò , F . , Wulf , V . ( eds . ) End User Development , pp . 427 - 457 . Springer , Dordrecht , The Netherlands ( 2006 ) 9 . Fischer , G . , Herrmann , T . : Socio - Technical Systems : A Meta - Design Perspective . IGI Global ( 2011 ) 1 - 33 10 . Ko , A . J . , Abraham , R . , Beckwith , L . , Blackwell , A . , Burnett , M . , Erwig , M . , Scaffidi , C . , Lawrance , J . , Lieberman , H . , Myers , B . , Rosson , M . B . , Rothermel , G . , Shaw , M . , Wiedenbeck , S . : The State of the Art in End - User Software Engineering . ACM Comput . Surv . 43 ( 3 ) , 1 - 44 ( 2011 ) 11 . Fischer , G . , Nakakoji , K . , Ye , Y . : Metadesign : Guidelines for Supporting Domain Experts in Software Development . IEEE Software 26 ( 5 ) , 37 - 44 ( 2009 ) 12 . Costabile , M . F . , Fogli , D . , Mussio , P . , Piccinno , A . : End - User Development : The Software Shaping Workshop Approach . In : Lieberman , H . , Paternò , F . , Wulf , V . ( eds . ) End User Development , pp . 183 - 205 . Springer , Dordrecht , The Netherlands ( 2006 ) 13 . Cappiello , C . , Matera , M . , Picozzi , M . , Sprega , G . , Barbagallo , D . , Francalanci , C . : Dashmash : A Mashup Environment for End User Development . In : Auer , S . , Díaz , O . , Papadopoulos , G . ( eds . ) Web Engineering . LNCS , vol . 6757 , pp . 152 - 166 . Springer , Berlin Heidelberg ( 2011 ) 14 . Gantt , M . , Nardi , B . A . : Gardeners and Gurus : Patterns of Cooperation among Cad Users . In : CHI 1992 , pp . 107 - 117 . ACM , New York , NY , USA ( 1992 ) 15 . Carmien , S . , Dawe , M . , Fischer , G . , Gorman , A . , Kintsch , A . , James F . Sullivan , J . : Socio - Technical Environments Supporting People with Cognitive Disabilities Using Public Transportation . ACM T Comput - Hum Int 12 ( 2 ) , 233 - 262 ( 2005 ) 16 . Hutchins , E . L . , Hollan , J . D . , Norman , D . A . : Direct Manipulation Interfaces . In : Norman , D . A . , Draper , S . W . ( eds . ) User Centered System Design : New Perspectives on Human - Computer Interaction , pp . 87 - 124 . Lawrence Erlbaum , Hillsdale , NJ ( 1986 ) 17 . Abowd , G . , Beale , R . : Users , Systems and Interfaces : A Unifying Framework for Interaction . In : VI Conference of the British Computer Society Human Computer Interaction Specialist Group - People and Computers ( HCI ' 91 ) , pp . 73 - 87 . Cambridge University Press , Cambridge ( 1991 ) 18 . Bottoni , P . , Costabile , M . F . , Mussio , P . : Specification and Dialogue Control of Visual Interaction through Visual Rewriting Systems . ACM T Progr Lang Sys 21 ( 6 ) , 1077 - 1136 ( 1999 ) 16 19 . Mørch , A . I . , Stevens , G . , Won , M . , Klann , M . , Dittrich , Y . , Wulf , V . : Component - Based Technologies for End - User Development . Commun . ACM 47 ( 9 ) , 59 - 62 ( 2004 ) 20 . Ghiani , G . , Paternò , F . , Spano , L . D . : Creating Mashups by Direct Manipulation of Existing Web Applications . In : Costabile , M . F . , Dittrich , Y . , Fischer , G . , Piccinno , A . ( eds . ) End - User Development . LNCS , vol . 6654 , pp . 42 - 52 . Springer Berlin Heidelberg ( 2011 ) 21 . Avola , D . , Bottoni , P . , Genzone , R . : Light - Weight Composition of Personal Documents from Distributed Information . In : Costabile , M . F . , Dittrich , Y . , Fischer , G . , Piccinno , A . ( eds . ) End - User Development . LNCS , vol . 6654 , pp . 221 - 226 . Springer Berlin ( 2011 ) 22 . Dittrich , Y . , Madsen , P . , Rasmussen , R . : Really Simple Mash - Ups . In : Costabile , M . F . , Dittrich , Y . , Fischer , G . , Piccinno , A . ( eds . ) End - User Development . LNCS , vol . 6654 , pp . 227 - 232 . Springer Berlin Heidelberg ( 2011 ) 23 . Burnett , M . , Rothermel , G . , Cook , C . : An Integrated Software Engineering Approach for End - User Programmers . In : Lieberman , H . , Paternò , F . , Wulf , V . ( eds . ) End User Development , pp . 87 - 113 . Springer Netherlands ( 2006 ) 24 . Carmien , S . P . , Fischer , G . : Design , Adoption , and Assessment of a Socio - Technical Environment Supporting Independence for Persons with Cognitive Disabilities . In : CHI 2008 , pp . 597 - 607 . ACM ( 2008 ) 25 . Celentano , A . , Maurizio , M . : An End - User Oriented Building Pattern for Interactive Art Guides . In : Costabile , M . F . , Dittrich , Y . , Fischer , G . , Piccinno , A . ( eds . ) End - User Development . LNCS , vol . 6654 , pp . 187 - 202 . Springer Berlin Heidelberg ( 2011 ) 26 . Drey , Z . , Consel , C . : Taxonomy - Driven Prototyping of Home Automation Applications : A Novice - Programmer Visual Language and Its Evaluation . J . Vis . Lang . Comput . 23 ( 6 ) , 311 - 326 ( 2012 ) 27 . Fogli , D . , Parasiliti Provenza , L . : A Meta - Design Approach to the Development of E - Government Services . J . Vis . Lang . Comput . 23 ( 2 ) , 47 - 62 ( 2012 ) 28 . Fogli , D . , Parasiliti Provenza , L . : End - User Development of E - Government Services through Meta - Modeling . In : Costabile , M . F . , Dittrich , Y . , Fischer , G . , Piccinno , A . ( eds . ) End - User Development . LNCS , vol . 6654 , pp . 107 - 122 . Springer , Berlin Heidelberg ( 2011 ) 29 . Ardito , C . , Buono , P . , Costabile , M . F . , Lanzilotti , R . , Piccinno , A . : End Users as Co - Designers of Their Own Tools and Products . J . Vis . Lang . Comput . 23 ( 2 ) , 78 - 90 ( 2012 ) 30 . Berg , M . : Accumulating and Coordinating : Occasions for Information Technologies in Medical Work . Comp . Support . Coop W 8 ( 4 ) , 373 - 401 ( 1999 ) 31 . Cabitza , F . , Simone , C . : LWOAD : A Specification Language to Enable the End - User Develoment of Coordinative Functionalities . In : Pipek , V . , Rosson , M . B . , de Ruyter , B . , Wulf , V . ( eds . ) End - User Development . LNCS , vol . 5435 , pp . 146 - 165 . Springer , Berlin Heidelberg ( 2009 ) 32 . Costabile , M . F . , Fogli , D . , Marcante , A . , Mussio , P . , Parasiliti Provenza , L . , Piccinno , A . : Designing Customized and Tailorable Visual Interactive Systems . Int J Softw Eng Know 18 ( 3 ) , 305 - 325 ( 2008 ) 33 . Star , S . L . : The Structure of Ill - Structured Solutions : Boundary Objects and Heterogeneous Distributed Problem Solving . In : Gasser , L . , Huhns , M . N . ( eds . ) Distributed Artificial Intelligence , vol . II , pp . 37 - 54 . Morgan Kaufmann Publishers Inc . , San Mateo , CA ( 1989 ) 34 . Fogli , D . , Piccinno , A . : Enabling Domain Experts to Develop Usable Software Artifacts . In : Organization Change and Information Systems Springer , Heidelberg ( 2013 )