Modelling serendipity in a computational context Joseph Corneli 1 , Alison Pease 2 , Simon Colton 1 , Anna Jordanous 3 , Christian Guckelsberger 1 1 Department of Computing , Goldsmiths College , University of London http : / / ccg . doc . gold . ac . uk / 2 School of Computing , University of Dundee 3 School of Computing , University of Kent Abstract . Drawing on well - known examples of serendipity in scientiﬁc discovery , we develop a set of criteria that can be applied to model and evaluate serendipity in computational settings . We use design patterns , and the growth of a pattern language , as a way to describe the processes of discovery and invention that comprise serendipitous encounters . We show how several earlier patterns of serendipity can be applied in a Writ - ers Workshop for computational systems , and include related recommen - dations for practitioners . Keywords : serendipity , design patterns , intelligent machinery , Writers Workshops 1 Introduction Materials , like gold , and processes , like metalurgy , have no value without a con - text of application : decoration , trade , circuitry , and so on . In practice , we are likely to attribute value to materials that are useful , and creativity to a person who puts materials to use in a novel way . Many instances of serendipity centre on reevaluation . For example , a non - sticky “superglue” that no one was quite sure how to use turned out to be just the right ingredient for 3M’s Post - it TM notes . Serendipity is related , ﬁrstly , to deviations from familiar patterns , and secondly , to new insight . When we consider the practical uses for weak glue , the possibility that a life - saving antibiotic might be found growing on contaminated petri dishes , and or the idea that cockle - burs could be anything but annoying , we encounter radical changes in the evaluation of what’s interesting . In the dé - nouement , what was initially unexpected is found to be both explicable and useful . Van Andel [ 79 ] – echoing Poincaré’s [ 67 ] ( negative ) reﬂections on the potential for a purely computational approach to mathematics – claimed that : “ Like all intuitive operating , pure serendipity is not amenable to genera - tion by a computer . The very moment I can plan or programme ‘serendip - ity’ it cannot be called serendipity anymore . ” [ 79 ] a r X i v : 1411 . 0440v1 [ c s . A I ] 3 N ov 2014 We believe that serendipity is not so mystical as such statements might imply , and in Sections 4 and 5 we will show how it is possible to reinterpret van Andel’s “patterns of serendipity” in computational settings . The real problem with computers is not that they only do what they’re told , but that the act of programming forces us to confront the emergence of the new [ 59 ] . Minsky [ 62 ] suggests that in practice , programmers write programs “for the individuals of little societies” precisely because we cannot envision in advance all of the details of program interactions . Indeterminacy forms an important part of any proposal for “intelligent machines” , after Turing : “ They will make mistakes at times , and at times they may make new and very interesting statements , and on the whole the output of them will be worth attention to the same sort of extent as the output of a human mind . ” [ 78 ] Serendipity has played a role in the large - scale history of the computing ﬁeld [ 23 ] and in artistic applications of computer technology [ 71 ] . We aim to clarify the role it has to play in the future development of computational creativity . Whereas van Andel speaks of “patterns of serendipity” in a relatively informal way , this paper will rely on the somewhat more formal theory of design patterns [ 2 ] , to which it makes several additions and alterations . This theory is by no means limited to computing , and indeed , has its origins in architecture and urban planning . Our approach to “designing for serendipity” [ 5 ] centres on the use of design patterns to capture the dynamic aspects of serendipitous situations . The typical use of design patterns , since they were introduced by Christopher Alexander [ 1 , 3 ] , is to prescribe as well as to describe . Design patterns provide models for as well as models of ( cf . [ 42 , p . 93 ] ) . Thus , when Alexander describes the pattern A place to wait , he is telling readers that it is a good idea to con - sider building such places when designing living spaces . In connection with our understanding of serendipity as closely associated with deviations from familiar patterns , the central concern in this paper is the way in which new patterns are formed . For example , when Poincaré [ 67 ] describes his discovery of the existence of Fuchsian functions , he includes the detail : “contrary to my habit I took black coﬀee , I could not sleep . ” This is much more interesting as part of a story about an exceptional case of productive insomnia than it is as the broad characterisa - tion of a typical nightly sleep schedule . It might best be described as a part of a “situational pattern , ” with a title like Change of pace , rather than a “behaviour pattern” ; indeed , at the level of behaviour , a Change of pace is the exception to a pattern ! Nevertheless , along with Poincaré , we can recognize a pattern at another level . The key idea in this paper is to computationally model situations where emergence of this particular sort can happen . It will take some work to get there , however . Section 2 develops 13 key criteria for the evaluation of serendipity based on a review of several well - known examples of serendipitous discoveries from human history . Section 3 describes a working testbed for exploring serendipitous computational discovery . In Section 4 , we apply our 13 criteria to analyse several narrative “patterns of serendipity” collected by van Andel [ 79 ] . Section 4 is the theoretical core of the paper ; here we give our interpretation of the design pattern methodology . In Section 5 , we focus on serendipity in a computational context , condensing our criteria into an operational deﬁnition , making our treatment of design patterns more concrete , and proposing an experimental setup that we think will exhibit many of the relevant features . In Section 6 , we examine related work , and in Section 7 , we advance our recommendations for researchers working on computational creativity ( and serendipity ) . 2 Literature review In this section , we give a short overview covering the etymology of the term “serendipity” and trace its development in order to pin down the key common - alities from many deﬁnitions and instances . In particular , we point out key con - ditions of serendipity , their components and general characteristics , including environmental factors . The structure of this section follows and updates an ear - lier survey from Pease et al . [ 66 ] . 2 . 1 Etymology and selected deﬁnitions The English term “serendipity” derives from the 1302 long poem “Eight Par - adises” , written in Persian by the Suﬁ poet Am¯ır Khusrow in Uttar Pradesh . 4 In the English - speaking world , its ﬁrst chapter became known as “The Three Princes of Serendip” , where “Serendip” represents the Old Tamil - Malayalam word for Sri Lanka ( Cerantivu ) , “island of the Ceran kings . ” The term “serendipity” is ﬁrst found in a 1557 letter by Horace Walpole to Horace Mann : “This discovery is almost of that kind which I call serendipity , a very expressive word [ . . . ] You will understand it better by the derivation than by the deﬁnition . I once read a silly fairy tale , called The Three Princes of Serendip : as their Highness travelled , they were always making discoveries , by accidents & sagacity , of things which they were not in quest of [ . ] ” [ 79 , p . 633 ] The term became more widely known in the 1940s through studies of serendipity as a factor in scientiﬁc discovery , surveyed by Robert Merton and Elinor Barben [ 61 ] in their 1957 analyis “The Travels and Adventures of Serendipity , A Study in Historical Semantics and the Sociology of Sciences” . Merton and Barben deﬁne the term as follows : “The serendipity pattern refers to the fairly common experience of ob - serving an unanticipated , anomalous and strategic datum which becomes the occasion for developing a new theory or for extending an existing theory . ” [ 79 , p . 635 ] 4 http : / / en . wikipedia . org / wiki / Hasht - Bihisht In 1986 , Philippe Quéau described serendipity as “the art of ﬁnding what we are not looking for by looking for what we are not ﬁnding” [ 69 ] , as quoted in [ 14 , p . 121 ] . Pek van Andel describes it simply as “the art of making an unsought ﬁnding” [ 79 , p . 631 ] . Roberts [ 73 , pp . 246 – 249 ] records 30 entries for the term “serendipity” from English language dictionaries dating from 1909 to 1989 . Classic deﬁnitions re - quire the investigator not to be aware of the problem they serendipitously solve , but this criterion has largely dropped from dictionary deﬁnitions . Only 5 of Roberts’ collected deﬁnitions explicitly say “not sought for . ” Roberts charac - terises “sought ﬁndings” in which an accident leads to a discovery with the term pseudoserendipity [ 31 ] . While Walpole initially described serendipity as an event ( a discovery ) , it has since been reconceptualised as a psychological attribute , a matter of sagacity on the part of the discoverer : a “gift” or “faculty” more than a “state of mind . ” Only one of the collected deﬁnitions , from 1952 , deﬁned it solely as an event , while ﬁve deﬁne it as both event and attribute . However , there are numerous examples that exhibit features of serendipity which develop on a social scale rather than an individual scale . For instance , between Spencer Silver’s creation of high - tack , low - adhesion glue in 1968 , the invention of a sticky bookmark in 1973 , and the eventual launch of the distinctive canary yellow re - stickable notes in 1980 , there were many opportunities for Post - its TM not to have come to be [ 36 ] . Accordingly , Merton and Barber argue that the psychological perspective needs to be integrated with a sociological one . 5 Large - scale scientiﬁc and technical projects generally rely on the “convergence of interests of several key actors” [ 15 ] , along with other supporting cultural factors . Umberto Eco [ 34 ] focuses on the historical role of serendipitous mistakes and falsehoods in the production of knowledge . It is important to note that serendipity is usually discussed within the context of discovery , rather than creativity , although in typical parlance these terms are closely related [ 51 ] . Henri Bergson’s distinction will be useful in what follows : “ Discovery , or uncovering , has to do with what already exists , actually or virtually ; it was therefore certain to happen sooner or later . Invention gives being to what did not exist ; it might never have happened . ” [ 8 ] Serendipity , as we understand the term , would seem to require features of both ; that is , the discovery of something unexpected and the invention of an applica - tion for the same . We must complement analysis with synthesis [ 25 ] . The balance between these two features will diﬀer from case to case . In the following section , we will elaborate on the characteristics of serendipity with particular reference to classic examples . 5 “For if chance favours prepared minds , it particularly favours those at work in mi - croenvironments that make for unanticipated sociocognitive interactions between those prepared minds . These may be described as serendipitous sociocognitive microenviron - ments” [ 61 , p . 259 – 260 ] . 2 . 2 Characteristics of serendipity Here we will describe our key condition for serendipity , the presence of a Focus Shift , together with four key components that implement this ( Prepared Mind , Serendipity Trigger , Bridge , Result ) , four dimensions that are generally present to some degree in instances of serendipitous discovery or invention ( Chance , Curiosity , Sagacity , Value ) and four supporting environmental factors that , if not strictly required , are at least conducive to serendipity ( Dynamic world , Multiple contexts , Multiple tasks , Multiple inﬂuences ) . We shall relate these descriptions to some of the most famous examples of serendipity . With the characteristics in mind it is not hard to spot further examples . – The 17 th Century discovery that quinine extracted from the bark of South American cinchona trees could be used to treat and prevent malaria – build - ing on a much earlier indigenous Quechua discovery that the extract stops shivering . – Fleming’s discovery of penicillin . 6 – de Mestral’s invention of Velcro TM following the model presented by cockle - burs that stuck to his jacket while out walking [ 73 , pp 220 - 222 ] . – Arthur Fry’s invention of sticky bookmarks ( the prototype for Post - it TM notes ) , using a weak glue developed by his colleague , Spencer Silver [ 73 , p . 224 ] . – Penzias and Wilson’s discovery of the echoes of the Big Bang [ 77 ] . – Kekulé’s dream - inspired discovery of the structure of the benzine ring [ 6 , p . 21 ] , cf . [ 73 , p . 77 ] . – Charles Goodyear’s invention of vulcanised rubber [ 44 ] . – The Rosetta Stone was found by a soldier who was demolishing a wall in order to clear ground for what was to be Fort St . Julien [ 73 , pp . 109 - 111 ] . Key condition for serendipity Focus shift . The most extreme cases show focus establishing itself as if from nowhere : de Mestral was walking through the Alps when he encountered the “seeds” of his discovery . “ After removing several of the burdock burrs ( seeds ) that kept sticking to his clothes and his dog’s fur , he became curious as to how it worked . He examined them under a microscope , and noted hundreds of ‘hooks’ that caught on anything with a loop , such as clothing , animal fur , or hair . He saw the possibility of binding two materials reversibly in a simple fashion , if he could ﬁgure out how to duplicate the hooks and loops . ” [ 83 ] 6 Merton and Barber [ 61 ] state that the description of this discovery was the ﬁrst time that the word serendipity was used without inverted commas or accompanying deﬁnition . In some cases , the focus shift takes place within a social context : Arthur Fry and Spencer Silver had diﬀerent ideas about what could be done with weak glue . In all of the discoveries listed above , there was a radical change in the discoverer’s evaluation of what is interesting . We can think of this as a reclassiﬁcation of “noise” to “signal . ” Components of serendipity Prepared Mind . Kekulé’s “prepared mind” included his focus on the problem of ﬁnding the structure of the benzine molecule and his knowledge and skill as a scientist . Fleming’s “prepared mind” included his focus on carrying out exper - iments to investigate inﬂuenza as well as his previous experience that foreign substances in petri dishes can kill bacteria . He was concerned above all with the question “Is there a substance which is harmful to harmful bacteria but harm - less to human tissue ? ” [ 73 , p . 161 ] . The social analogues are clear : for example , 3M not only had a talented staﬀ , but ran internal technical forums where staﬀ members could exchange ideas . Serendipity Trigger . The trigger does not directly cause the outcome , but rather , inspires thought . Indeed , the trigger may bear very little resemblance to the eventual result . On its own , the trigger would not typically be seen as an im - portant discovery . Examples include a dream , a petri dish with a clear area , and cockle - burs attached to a jacket . In a social context , the trigger may have several parallel or sequential components , and may rely on the circumstantial alignment of interest between diﬀerent parties . For example , it was long known that cin - chona bark stops shivering ; in particular , it stops shivering in malaria patients , as was observed when malarial Europeans arrived for the ﬁrst time in Peru . That it additionally can cure and can even prevent malaria was subsequently revealed . Bridge . The bridge is what aﬀords movement from the trigger to the result . These include reasoning techniques , such as abductive inference ( what might cause a clear patch in a petri dish ? ) ; analogical reasoning ( de Mestral constructed a target domain from the source domain of burs hooked onto fabric ) ; and con - ceptual blending ( Kekulé blended his knowledge of molecule structure with his vision of a snake biting its tail ) . The bridge may also rely on new social arrange - ments , such as the formation of cross - cultural research networks [ 15 ] . Result . This is the outcome itself . This may be a new product , artefact , process , hypothesis , a new use for a material substance , and so on . The outcome may contribute evidence in support of a known hypothesis , or a solution to a known problem . Alternatively , the result may itself be a new hypothesis or problem . The result may be a “pseudoserendipitous” in the sense that it was sought , while nev - ertheless arising from an unknown , unlikely , coincidental or unexpected source . More classically , it is an unsought ﬁnding , such as the discovery of the Rosetta stone . Dimensions of serendipity Chance . The serendipity trigger tends to be unlikely , unexpected , unsought , acci - dental , random , or coincidental . The trigger has features that arise independently of the result , and even independently of any search for a result . The relevant fea - tures may be “hidden in plain view , ” and chance may apply to the conditions that eventuate in their discovery , as when malarial Europeans chanced upon a remedy found only in South America . Fleming [ 37 ] noted : “There are thousands of diﬀerent moulds” – and “that chance put the mould in the right spot at the right time was like winning the Irish sweep . ” Curiosity . The capacity for keeping an open mind , and the corresponding ability to take advantage of the unpredictable , is necessary for a focus shift to take place . Many of the investigators described above went beyond simply keeping an open mind in order to actively exercise their curiosity about the way things work . Importantly , a preliminary evaluation of interestingness often takes place well before a ﬁnal evaluation of the outcome . Venkatesh Rao [ 70 ] refers to a cheap trick that takes place early on in many narratives in order to establish preliminary conditions of order , and curiosity with respect to unexpected stimuli can play this role . Sagacity . This old - fashioned word is related to “wisdom , ” “insight , ” and espe - cially to “taste” – and describes the attributes , or skill , of the discoverer that contribute to forming the bridge between the trigger and the result . In many cases , such as an entanglement with cockle - burs , many others will have already been in a similar position and not obtained an interesting result . Relevant skills include the ability to keep an open mind , to perform a focus shift , to see the value in a discovery , and to build a suitable bridge . Value . It is generally agreed that a serendipitous result is one that is seen to be happy or useful . This judgement may be made independently ( and , in the computational creativity context [ 50 ] argues that this is preferable ) or by the discoverer / creator . Note that the chance “discovery” of , say , a £10 note may be seen as happy by the person who ﬁnds it , whereas the loss of the same note would generally be regarded as unhappy . Positive judgements of serendipity by a third party would be less likely in scenarios in which “One man’s loss is another man’s gain” than in scenarios where “One man’s trash is another man’s treasure . ” Environmental factors Dynamic world . Firstly , in the settings we are interested in , information about the world develops over time , and is not presented as a complete , consistent whole . Secondly , the components of serendipity as described above have an or - der of operations : the prepared mind takes the stage ﬁrst , then the serendipity trigger takes place , a bridge is found , and after that the result . Value may come later . Van Andel estimates that in twenty percent of innovations “something was discovered before there was a demand for it” [ 79 , p . 643 ] . Multiple contexts . One of the dynamical aspects at play may be the discoverer going back and forth between diﬀerent contexts , with diﬀerent stimuli . For exm - ple , 3M employee Arthur Fry sang in a church choir and needed a good way to mark pages in his hymn book . Malaria was not indigenous to Peru , where cinchona trees grow . Some contexts may play the role of a training ground for a subsequent discovery : for example , Goodyear had spent years experimenting with rubber using diﬀerent processes before he hit upon the process of vulcani - sation . Multiple tasks . Even within what would typically be seen as a single context , a discoverer may take on multiple tasks that segment the context into sub - contexts , or that cause the investigator to look in more than one direction . Fleming happened to be doing the washing up after a holiday when he made his discovery . He might have overlooked the critical details had he not also been chatting with a former lab assistant who had stopped by . Penzias and Wilson used a large antenna to detect radio waves that were relayed by bouncing oﬀ of satellites . After they had removed interference eﬀects due to radar , radio , and heat , they found residual ambient noise that couldn’t be eliminated [ 82 ] . Multiple inﬂuences . A prepared mind , or its distributed analogue , may draw on a range of diﬀerent skills and experiences . The “bridge” from trigger to result is often found through a social network , thus , for instance Penzias and Wilson only understood the signiﬁcance of their work after reading a preprint by Jim Peebles that hypothesised the possibility of measuring radiation released by the big bang [ 82 ] . The process of discovery and invention may involve more than one “aha ! ” moment and skill set : Post - it TM notes again make a good example . 3 Foundational work In moving towards computational models of serendipity , we are supported by prior foundational work providing a theoretical framework and a virtual envi - ronment for exploring computational creativity . In [ 21 ] , we introduced a diagram - matic formalism for keeping track of progress made in creative computational systems . An example , pictured in Figure 1 , shows how the second iteration of a poetry system gains the ability to automatically apply aesthetic judgements in order to select a preferred poem from a larger set of generated examples , once the programmer has translated ( by hand ) the relevant aesthetic measures . < C g > < E g > ∗ < A g > [ S ( a g ( e g ) ) ] P1 < C g > < E g > ∗ < A g > T ( a g ) [ S ( a g ( e g ) ) ] P2 Fig . 1 . Progress in develop - ing a poetry system Progress amounts to more sophisticated process - ing , and , in the notation , frequently corresponds to the removal of “bars” – indicating that the system can do something that was formerly done by a pro - grammer . Thus , this formalism keeps track both of the overall structure of computational systems , and which actors that are responsible for which ac - tions within a given instance of the system . As we develop models and systems that people would de - scribe as serendipitous with reference to the criteria listed in Section 2 . 2 , there will be more to account for . For example , we will need to model dynamically changing environments and a computational version of a prepared mind . To explore these features , are working with a system called FloWr , portrayed with a screenshot in Fig - ure 2 . In FloWr , users can construct complex ﬂowcharts composed of individual ProcessNodes , through which information ﬂows and is transformed . The ﬁgure depicts a ﬂowchart that has constructed a poem based on live output from Twit - ter for the query “blunt” . The dynamic aspects of this environment are threefold : ( i ) some of the nodes in the ﬂowcharts access online news and social media sites , which change rapidly from minute to minute ; ( ii ) the software itself can con - struct new ﬂowcharts , as described in [ 17 ] ; and ( iii ) we are building a community of ProcessNode builders around the online version of FloWr , newly developed since the publication of [ 17 ] in order to facilitate the direct involvement of other Computational Creativity researchers . When FloWr constructs ﬂowcharts for itself , while each is semantically plau - sible ( i . e . , they pass the right type of data from ProcessNode to ProcessNode ) , many fail – for instance , because the available data is limited , or is narrowed down too quickly . In fact , the best results in [ 17 ] were at 20 % , i . e . , 80 % of the ﬂowcharts that were constructed failed to produce output . Each of these fail - ures can be saved as an outstanding problem in FloWr ’s prepared mind . As data changes and as new nodes are written and uploaded to the system , FloWr will be able to replace nodes , update data sources , and in general rearrange ﬂowcharts in order to see if it can ﬁx a broken ﬂowchart . For instance , suppose a ProcessNode developer wrote and uploaded a node to mine data from a new social network , in order , say , to produce textual summaries of world events . FloWr may take that node and substitute it in the place of an old “FaceBook” node in a broken poetry ﬂowchart . If the replacement worked , and output was produced , this could be seen as a serendipitous occurrence : FloWr will have taken advantage of the dynamically changing environment – in which new social networks come and go , and in which text summaries may work better in some cases than in others – to resolve an outstanding problem in text generation . The next stage for the FloWr system will be to modify it along these lines , to make it able to adapt to the dynamically changing environment , and to per - form experiments where we monitor potentially serendipitous scenarios . Such Fig . 2 . A sample poem generated by FloWr experiments will be similar to those we tried with the HR2 system in [ 66 ] , but improved because in this earlier eﬀort , we had to break working processes in order to serendipitously ﬁx them . The new experiments , the scenarios will be more realistic , i . e . , there will be a catalogue of genuine open problems waiting to be solved . Understanding how to work with this catalogue and the associated experimental process will , of course , be used to further the computational model of serendipity . We discuss one direction for such experiments in Section 5 . 3 . 4 Patterns of Serendipity Figure 3 examines 14 situational patterns of serendipity collected by van Andel [ 79 ] through the lens of the evaluation criteria described in Section 2 . As required by our theory , a “focus shift” appears in each instance , although it has a diﬀerent ﬂavour in the diﬀerent examples . In this analysis , only three of the other criteria mentioned above are clearly present in all of the patterns : “a prepared mind” , a “bridge” , and a “dynamic world . ” Similarly , only four of van Andel’s patterns exhibit all of the characteristics we identiﬁed : Successful error , Side eﬀect , Wrong hypothesis , and Outsider . “Near misses” are also of interest , and help to illustrate the role of the var - ious factors from Section 2 . For example , the Inversion pattern is somewhat closer to what is called an antipattern in the design pattern literature [ 12 ] . Van Andel describes the story of a researcher observing an eﬀect ( the anticoagulant heparine ) which was precisely the opposite of the one sought ( factors that cause blood clotting ) – and failing to acknowledge that this observation was important for over 40 years . The result was eventually seen to be of value : however , in this Analogy One surprising obs . Rep . of surprise Successful error Side eﬀect Spin oﬀ Wrong hypothesis No hypothesis Inversion Testing popular belief Outsider Disturbance Scarcity Interruption F o c u s s h i f t P r e p a r e d m i nd S e r e nd i p i t y t r i gg e r B r i d g e R e s u l t C h a n c e C u r i o s i t y S aga c i t y V a l u e D y n a m i c w o r l d M u l t i p l e c o n t e x t s M u l t i p l e t a s k s M u l t i p l e i nﬂu e n c e s Pattern includes feature . . . does not include . . . . . . only eventually Fig . 3 . Characteristics of Pek van Andel’s patterns of serendipity instance , we may have an example of a mind that is over - prepared , and focused on a particular sort of result , rather than a truly “sagacious” mind that is both prepared and open to serendipitous ﬁndings . In the case of Testing popular belief , van Andel gives an account of a med - ical practise that originated in a folk claim , namely cowpox - derived immunity to smallpox . This eﬀect , for milkmaids , might indeed be called serendipitous . Indeed , the medical use of cowpox has been described as “widely know” [ 72 ] prior to its popularisation by Edward Jenner . Nevertheless , Jenner’s “relentless promotion and devoted research of vaccination [ . . . ] changed the way medicine was practised” [ 72 ] . This again might be called serendipity , but most clearly at the social rather than personal level . These comments should not be seen to disparage Jenner’s contribution , or diminish the role of a curious chain of events in his personal history that tied his fate to that of the smallpox vaccine . Many of these had the air of serendipity about them – but even so , it is hard to ﬁnd one speciﬁc “serendipity trigger . ” In describing Disturbance , van Andel’s exemplar is the creation of radio tele - scopy from noise in transatlantic telephone calls ( paralleling the subsequent dis - covery by Penzias and Wilson ) . Here it is hard to see an overt role for “chance , ” since as machinery at various scales is created , disturbance is somewhat in - evitable , even if a speciﬁc disturbance in a speciﬁc machine is unexpected . Sim - ilarly , in cases of Scarcity , “curiosity” may not play a signiﬁcant role , and may instead be replaced by the drive of desire and corresponding ingenuity . Multiple contexts , tasks , and inﬂuences should be seen to be conducive to serendipitous discovery , but not strictly necessary . For example , in addition to the context of a research laboratory , there may be the context of subsequent industrial application . However , within the laboratory itself ( where a Spin oﬀ discovery might be made ) the future context is not typically in force . There are a number of additional reoccurring themes , which are worthy of further comment , and which could form the basis of further ( meta - ) patterns . It’s all part of a day’s work . Often the discoverer had a problem to solve or job to do , and made the serendipitous discovery in the course of doing their job . This sort of serendipity is often “social . ” For example , in the Outsider pattern , the ophthalmologist Gregg was simply listening to his patient and taking what she said seriously ; in other words , he was doing his job . But this led to a new hypothesis . Factorisation is useful . Variability , and in the case of scientiﬁc work , factori - sation ( e . g . via control studies ) often plays a key role in establishing “multiple contexts . ” Serendipitous discovery often happens in the context of “natural experiments , ” for example , in the case of One surprising observation , where van Andel’s example dealt with the observation that one tree in a row was taller and healthier than its neighbours . 7 A good story is liable to change . Comparing Inversion and Spin oﬀ sug - gests the value of being able to change the story . If Perkin had suppressed 7 Concerning the broader issues associated with the “design” of such experiments , see [ 47 ] . his discovery of mauvine because he hadn’t successfully synthesised quinine , there would have been no spin oﬀ , and it would be hard to call the discovery “serendipitous” – or , indeed , to consider it to be a discovery at all . Whatever its value , an event may only be described as serendipitous at the narrative level . Watch out for hidden symmetries . The Wrong hypothesis pattern involves several of the points above . In van Andel’s anecdote about John Cade’s discovery of lithium as a treatment for mania , the issues under investigation were , rather , the causes of the illness . This was initially conceptualised in terms of surfeit and deﬁciency . A more general interpretation is that the factors inﬂuencing the course of an illness have hidden interactions between them . Serendipitous discovery may be able to ﬁnd and capitalise on this type of ( unexpected ) invariant . Van Andel describes three additional patterns that seem to be connected with personal qualities of the investigator rather than with situational features . These are Playing , Joke , and Dream . The theme of personal qualities and skills that support serendipitous discovery will be taken up below , as part of a general approach to modelling serendipity . 4 . 1 Modelling serendipity with design patterns As illustrated above , serendipity can take place on multiple scales . Something can be personally surprising while being socially mundane ( Boden’s P - creativity [ 9 ] ) , or vice versa , as in the case of personally mundane discoveries that take on surprising social value . In the case of serendipitous discoveries at the personal level , the qualities of the investigator are understood to be important features . Thus , for example , van Andel writes that a “sense of humour and sense of serendipity have a lot in com - mon . ” Van Andel relates the Dream pattern – exempliﬁed , for him by Descartes , but Kekulé’s ouroborus provides another instance – to Poincaré’s [ 67 , 68 ] model of “preparation , incubation , illumination , and veriﬁcation” ( cf . [ 81 ] ) . Poincaré [ 67 ] clariﬁes that “ unconscious work [ . . . ] is possible , and of a certainty , it is only fruitful , if it is on the one hand preceded and on the other hand followed by a period of conscious work . ” What might conceptions like this mean for serendipity that takes place on a social or indeed computational level ? In order to understand this , we will refer van Andel’s patterns and the serendipity factors introduced above to the heterodox theory of patterns coming from the ﬁeld of design , mentioned brieﬂy above . First introduced by the architect Christopher Alexander [ 1 , 3 ] , the design pattern methodology spread from architecture to software [ 40 ] , and later , to other ﬁelds , including public aﬀairs [ 76 ] and education [ 7 ] . Alexander’s patterns are presented in a tree - like structure called a pattern language , ordered in a top - down manner from large - scale to small - scale levels of application , with each pattern presented in terms of a picture , a context ( includ - ing links to relevant larger patterns ) , the problem that the pattern addresses , the solution , a diagram , and links to smaller patterns [ 3 , pp . x - xi ] . A relatively convincing implementation of Alexander’s idea of patterns as a “living language” [ 3 , p . xvii ] was realised with one of the earliest applications of wiki software de - veloped by Ward Cunningham : the Portland Pattern Repository . 8 The notion of pattern - ﬁnding as a process related to , but distinct from abstraction , is described by Richard Gabriel , who emphasises that the “patterns and the social process for applying them are designed to produce organic order through piecemeal growth” [ 40 , p . 31 ] . In its original form , this statement describes the generative use of patterns to create artefacts ( buildings , object oriented programs , etc . ) . However , this criterion can also be applied to the growth and development the pattern lan - guage itself , and this is the key idea underlying our application . Christian Kohls [ 52 , 53 ] , deploys a “path” or “journey” metaphor to describe design patterns in the language of constrained optimisation problems , consid - ering in particular the initial state , end state , and forces acting . This is useful because of its general nature : it suggests that any time there are predictable dynamics observed in the world , there is a corresponding design pattern waiting to be seen and recorded . This perspective can be usefully combined with the proposal advanced by Manual DeLanda [ 27 ] , among others , to give the system a simulated embodiment , putting it in contact with a virtual world in which it does not need to , and indeed cannot , have everything worked out in advance . DeLanda uses the term gradient to describe the forces acting in a way that focuses on the relevant features . Like Kohls , Peter Andersen [ 4 ] considers one - dimensional paths through a two - dimensional space with a gradient , and writes that the basic metaphor for thought is travel . A more general metaphor suggested by DeLanda would take into account “a population of interacting physical enti - ties , such as the molecules in a thin layer of soap” [ 26 ] exhibiting more complex non - linear interactions over higher - dimensional gradients . This discussion makes a distinction between an agential system of interest and its broader context , which could also be described as a physical “system , ” or a simulation of one . While such distinctions tend to be leaky , to avoid undo confusion about terminology , when we refer to “the system” without further qualiﬁcation , we mean the agential sub - system – the part that behaves – and the context will be referred to as “the environment . ” Modelling serendipitous behaviour requires us , as designers , to engage in meta - modelling : we need to build systems which are capable of modelling their environments . Terence Deacon [ 24 ] refers to such systems as teleodynamic , that is , organised with respect to what they are not . However , most typical com - putational scenarios that simply involve reasoning about representations will not yield the twin features of discovery and invention that are central to our understanding of serendipity . Such reasoning considers “identity with regard to concepts , opposition with regard to the determination of concepts , analogy with regard to judgement , resemblance with regard to objects” and Gilles Deleuze [ 29 , 8 http : / / c2 . com / ppr / p . 174 ] cautions that this activity relies on an assumed “common sense” that is not the same as thought . For Deleuze , when thought arises , it is as a matter of necessity : “the contingency of an encounter [ . . . ] forces us to think” [ 29 , p . 176 ] . Cast in the terms we introduced earlier : a “prepared mind” will have available to it certain patterns as designs for action . It is understood to have an interactive dimension that makes it capable of enacting some of these designs in the context of a “dynamic world . ” An encounter between the system and some other aspect or occupant of this environment forms a “trigger” that composes with preexisting patterns , leading to a “bridge” that makes sense of the stimuli and that leads to new designs for action as a “result , ” which may fundamentally change the system’s subsequent behaviour . Representational forms will certainly play a role in such systems , but this role is secondary . For example , actions are selected , delected , or deplored de - pending on their relationship to the gradient , by way of a model . Nevertheless , the gradient is its own “best model” and it contributes the ﬁnal evaluation of sys - tems . Design patterns may be communicable between agents , but in the manner of blueprints or genes , whereas it is the actualised building , body , or manifest pattern of behaviour forms the crux of the encounter . 9 Jonathan Rowe [ 75 ] is one of the researchers who argue for “the generation of structure and regularity as emergent phenomena arising from the interaction of low level structures , without any central control” ( cf . [ 65 ] ) . He favourably compares Hofstadter and Mitchell’s Copycat , in which “ [ a ] nalogies are generated through the interactions of low - level structures without any central control” to Lenat’s EURISKO , in which metarules provide “templates for expressing a num - ber of rules in a concise from” and ( cf . [ 45 , 63 ] ) . Low - level explorations that take place before high - level structures have emerged can aﬀord to be more random than changes in the high - level structures [ 45 , pp . 232 – 233 ] . “ In the early stages of a run , almost all discoveries are on a very small , local scale : a primitive object acquires a description , a bond is built , and so on . Gradually , the scale of actions increases : small groups begin to appear , acquire their own descriptions , and so on . In the later stages of a run , actions take place on an even larger scale , often involving complex , hierarchically structured objects . ” [ 45 , p . 228 ] For Copycat , a serendipitous discovery might take the form of an especially clever or unexpected solution to an analogy problem . More broadly , it concerns observations that do not match a system’s preprogrammed understanding or capabilities , but which it must nevertheless make sense of , learn from , and adapt to . The successor system Metacat explicitly aims to : 9 DeLanda [ 25 ] emphasises the role of population thinking on several scales , for example , at the personal level relative to society , or at the neuronal level relative to the person . Design patterns are strictly lower level than agents , and agents are lower level than interactions , but we cannot reduce the trajectory of an evironment’s evolution to its representation by the agents that inhabit it : cf . http : / / c2 . com / cgi / wiki ? OfMiceAndMen . “ perceive patterns in its own behavior in much the same way that Copycat perceives patterns in letter - strings : via codelets looking for relationships among perceptual structures . ” [ 57 ] These patterns “serve as a ‘medium’ through which the program is able to wield control over its own behavior” [ 57 ] . It can also use thematic patterns to evaluate and explain examples supplied by the user . Our perspective is that computer programs in general can be described as collections of “design patterns , ” understood to encode the dynamics of response to events which take place in the system’s environment . We are particularly interested in the process whereby new patterns form , and we expect that this will typically progress through a process of progressive skill reﬁnement . We will develop the investigation of this theme further in the following section . 5 Serendipity in a computational context We begin with some words of caution . Note that the classic examples of hu - man serendipity tend to focus on ground - breaking discoveries . In computational creativity , we have learned that we must not aim to build systems which per - form domain - changing acts of creativity before we can build systems which can perform everyday , mundane creativity ( distinguished as “big C” and “little c” cre - ativity . ) Similarly , we should be prepared to model “little s” serendipity before we are able to model “big S” serendipity . Furthermore , attempts to introduce serendipity into computer systems may initially diminish artefact value . A sys - tem which allowed itself to be derailed from a task at hand might not achieve as much as one which maintains focus . A system that uses a random search or that has its behaviour determined by environmental conditions may be deemed less intelligent than one which follows detailed , explicit , pre - programming . To such arguments , we would respond that serendipity is not “mere chance” – the axes of sagacity ( skills ) and useful results ( recognised as such at least by the discoverer ) are equally important . As Campbell says : “Chance is fundamentally inimical to rationality , whereas serendipity presupposes a smart mind” [ 13 ] . While it might not enhance , or may even diminish , results from a computationally creative system which has been constructed with other goals in mind , we believe that serendipity is both possible and useful to model in future systems . 5 . 1 Evaluation criteria The 13 criteria from Section 2 . 2 specify the conditions and preconditions that are conducive to serendipitous discovery . Here , we revisit each of these criteria and brieﬂy summarise how they can be thought about from a computational point of view . Key condition for serendipity – Focus shift : A focus shift is linked to re - evaluation of data , processes , or products . It may precipitate changes in the entire framework of evaluation or its eﬀects may be more contained . Such reevaluation could be modelled using a multi - agent architecture , in which each agent has a goal and evaluates generated products relative this goal , but in which agents also share their products with other , who then evaluate them against their own metrics . ( We will discuss an extended example of this sort in Section 5 . 3 . ) Components of serendipity – Prepared mind : This comprises the background knowledge , unsolved prob - lems , current goal , programming , and operating environment of a computa - tional system . – Serendipity trigger : The generation or observation of a potentially novel example , concept , or conjecture , etc . , which precedes a discovery in a com - putational system . 10 The trigger is outside of the direct control of the system components responsible for evaluations . – Bridge : Reasoning and / or programmatic interaction brings about a focus shift at an opportune juncture , building on prior preparation and on the serendipity trigger . The bridge may be constructed on the basis of logi - cal methods , analogies , conceptual blending , evolutionary search , automated theory formation and may draw on interactions with other systems . – Result : The discovery itself may be a new product , artefact , process , hy - pothesis , use for an object , etc . , generated by computational means , which may inﬂuence the future operations of the system . Dimensions of serendipity – Chance : Controlled randomness in AI systems is well - established , e . g . in Genetic Algorithms and search . Chance also applies in connection with an under - determined outside world ( see below ) . – Curiosity : The system needs to expend discretionary computational eﬀort on the serendipity trigger . This may be accompanied by system features that an observer would describe as playfulness , inventiveness , and the drive to experiment or understand . – Sagacity : Sagacity be modelled by employing reasoning over multiple ap - plication domains simultaneously ; or , again , with a social analogue in cases where the system does not know , but “knows who to ask . ” – Value : The result should be interesting or useful , as judged by the system , the programmer , the user , or another party ( potentially another system ) . 10 Triggers are often examples without an explanation , rather than wholly - formed concepts . Environmental factors – Dynamic world : Connections with other systems , data sources , or user input , e . g . , via the web , which is highly dynamic – or in the context of a larger simulation . – Multiple contexts : Reasoning which operates across domains , such as ana - logical reasoning , or that considers multiple perspectives , as in systems with social awareness . – Multiple tasks : Multiple goals or targets that compete for resources . The system may be implemented using a multithreaded , parallel processing de - sign . – Multiple inﬂuences : This may again be modelled as a multi - agent systems , as or multiple interacting systems , each with diﬀerent knowledge and goals . The source of unexpectedness may be arise on various levels , and a system may bring this to bear using techniques of reﬂection . 5 . 2 Using SPECS to evaluate computational serendipity In a 2012 special issue of the journal Cognitive Computation , on “Computational Creativity , Intelligence and Autonomy” , Jordanous analyses current evaluation procedures used in computational creativity , and provides a much - needed set of customisable evaluation guidelines , the Standardised Procedure for Evaluating Creative Systems ( SPECS ) [ 50 ] . We follow a slightly modiﬁed version of her ear - lier evaluation guidelines , in that rather than attempt a deﬁnition and evaluation of creativity , we follow the three steps for serendipity . Step 1 : A computational deﬁnition of serendipity Identify a deﬁnition of serendipity that your system should satisfy to be considered serendipitous . Summarising the criteria discussed earlier , we propose the following deﬁni - tion , expressed in two phases : discovery and invention . The deﬁnition centres on the four components of serendipity , outlined above , which can subsequently be made sense of and evaluated with reference to the four dimensions of serendip - ity . These , in turn , are understood to be embedded in an environment exhibiting many , but not necessarily all , of the environmental factors listed above . ( 1 - Discovery ) Within a system with a prepared mind , a previously uninteresting serendipity trigger arises due to circum - stances that the system does not control , and is clas - siﬁed as interesting by the system ; and , ( 2 - Invention ) The system , by subsequently processing this trigger and background information together with relevant reason - ing , networking , or experimental techniques , obtains a novel result that is evaluated favourably by the system or by external sources . This situation can be pictured schematically as follows . Here , T is the trigger and p denotes those preparations that aﬀord the classiﬁcation T (cid:63) , indicating T to be of interest , while p (cid:48) denotes the preparations that facilitate the creation of a bridge to a result R , which is ultimately given a positive evaluation . p T T (cid:63) p (cid:48) T (cid:63) R | R | > 0 Step 2 : Evaluation standards for computational serendipity Using Step 1 , clearly state what standards you use to evaluate the serendip - ity of your system . With our deﬁnition in mind , we propose the following standards for compu - tational serendipity : Prepared mind The system can be said to have a prepared mind , con - sisting of previous experiences , background knowledge , a store of un - solved problems , skills , expectations , and ( optionally ) a current focus or goal . Serendipity trigger The serendipity trigger is at least partially the re - sult of factors outside the system’s control . These may include ran - domness or simple unexpected events . The trigger should be deter - mined independently from the end result . Bridge The system uses reasoning techniques associated with serendipi - tous discovery – e . g . abduction , analogy , conceptual blending – and / or social or otherwise externally enacted alternatives . Result A novel result is obtained , which is evaluated as useful , by the system and / or by an external source . Step 3 : Testing our serendipitous system Test your serendipitous system against the standards stated in Step 2 and report the results . In order to develop connections with our theoretical framework , and because existing experiments have not been particularly strong , we focus on a thought experiment in the following section , detailing some of the outcomes we would like to see , and some of the risks . 5 . 3 Proposed experiment : A Writers Workshop for Systems Richard Gabriel [ 41 ] describes the practise of Writers Workshops that has been put to use for over a decade within the Pattern Languages of Programming ( PLoP ) community . The basic style of collaboration originated much earlier with groups of literary authors who engage in peer - group critique . Some literary workshops are open as to genre , and happy to accommodate beginners , like the Minneapolis Writers Workshop 11 ; others are focused on professionals working within a speciﬁc genre , like the Milford Writers Workshop 12 . The practices that Gabriel describes are fairly typical . Authors come with work ready to present , and read a short sample , which is then discussed and constructively critiqued by attendees . Presenting authors are not permitted to rebut these comments . The commentators generally summarise the work and say what they have gotten out of it , discuss what worked well in the piece , and talk about how it could be improved . The author listens and may take notes ; at the end , he or she can then ask questions for clariﬁcation . Generally , non - authors are either not permitted to attend , or are asked to stay silent through the workshop , and perhaps sit separately from the participating authors / reviewers . There are similarities be - tween the Writers Workshops and classical practices of group composition [ 49 ] and dialectic [ 16 ] , and the workshop may be considered an artistic or creative space in its own right . In PLoP workshops , authors present design patterns and pattern languages , or papers about patterns , rather than more traditional literary forms like po - ems , stories , or chapters from novels . Papers must be workshopped at a PLoP or EuroPLoP conference in order to be considered for the Transactions on Pat - tern Languages of Programming journal . A discussion of writers workshops in the language of design patterns is presented by Coplien and Woolf [ 22 ] . Their patterns include : Open Review Safe Setting Workshop Comprises Authors Authors are Experts Community of Trust Moderator Guides the Workshop Thank the Author Selective Changes Clearing the Palate We propose that a similar pattern - based approach should be deployed within the Computational Creativity community to design a workshop in which the participants are computer systems instead of human authors . The annual In - ternational Conference on Computational Creativity ( ICCC ) , now entering its sixth year , could be a suitable venue . Rather than the system’s creator present - ing the system in a traditional slideshow and discussion , or a system “Show and Tell , ” the systems would be brought to the workshop and would present their own work to an audience of other systems , in a Writers Workshop format . This might be accompanied by a short paper for the conference proceedings written by the system’s designer describing the system’s current capabilities and goals . Subsequent publications might include traces of interactions in the Workshop , commentary from the system on other systems , and oﬄine reﬂections on what the system might change about its own work based on the feedback it receives . As in the PLoP community , it could become standard to incorporate this sort of workshop into the process of peer reviewing journal articles for the new Journal of Computational Creativity 13 . 11 http : / / mnwriters . org / how - the - game - works / 12 http : / / www . milfordsf . co . uk / about . htm 13 http : / / www . journalofcomputationalcreativity . cc Successful error Van Andel’s example : Post - it TM notes presentation Systems should be prepared to share interesting ideas even if they don’t know directly how they will be useful . listening Systems should listen with interest , too . feedback Even interesting ideas may not be “marketable . ” questions How is your suggestion useful ? reflections New combinations of ideas take a long time to realise , and many diﬀerent ideas may need to be combined in order to come up with something useful . Side eﬀect Van Andel’s example : Nicotinamide used to treat side - eﬀects of radiation therapy proves eﬃcacious against tuberculosis . presentation Systems should use their presentation as an experiment . listening Listeners should allow themselves to be aﬀected by what they are hearing . feedback Feedback should convey the nature of the eﬀect . questions The presenter may need to ask follow - up questions to gain insight . reflections Form a new hypothesis before seeking a new audience . Wrong hypothesis Van Andel’s example : Lithium , used in a control study , had an unexpected calming eﬀect . presentation How is this presentation interpretable as a ( “natural” ) control study ? listening Listeners are “guinea pigs” . feedback Discuss side - eﬀects that do not necessarily correspond to the author’s perceived intent . questions Zero in on the most interesting part of the conversation . reflections Revise hypotheses to correspond to the most surprising feed - back . Outsider Van Andel’s example : A mother suggests a new hypothesis to a doctor . presentation The presenter is here to learn from the audience . listening The audience is here to give help , but also to get help . feedback Feedback will inevitably draw on previous experiences and ideas . questions What is the basis for that remark ? reflections How can I implement the suggestions ? Table 1 . Reinterpreting patterns of serendipity for use in a computational workshop I n t e r e s t i n g i d e a Su r p r i s e b i r t hd a y p a r t y I h e a r d y o u s a y : “ s u r p r i s e ” F ee db a c k : I d o n ’ t li k e s u r p r i s e s Q u e s t i o n N o t e v e n a li tt l e b i t ? [ . . . ] N o t e t o s e l f : ( T r y s m a ll e r s u r p r i s e s n e x t t i m e . ) Fig . 4 . A paper prototype for applying the Successful Error pattern In order to facilitate this sort of interaction , it would be necessary for systems to implement a basic protocol related to presentation , listening , feedback , questions , and reflections . This protocol could be thought of as a light - weight template for creating de - sign patterns that guide system - level participation in the context speciﬁed by Coplien and Woolf’s pattern language for writers workshops . Table 1 uses this framework to recast the four “perfectly” serendipitous patterns from van Andel – Successful error , Side eﬀect , Wrong hypothesis , and Outsider – in a form that may make them useful to developers preparing to enter their systems into the Workshop . Further guidelines for structuring and participating in traditional writers workshops are presented by Linda Elkin in [ 41 , pp . 201 - 203 ] . It is not at all clear that the same ground rules should apply to computer systems . For example , one of Elkin’s rules is that “Quips , jokes , or sarcastic comments , even if kindly meant , are inappropriate . ” Rather than forbidding humour , it may be better for individual comments to be rated as helpful or non - helpful . Again , since serendipitous discovery is an overarching goal , in the ﬁrst instance , usefulness and interest might be judged in terms of the criteria described in Section 5 . 1 . We would need a neutral environment that is not hard to develop for : the FloWr system described in Section 3 oﬀers one such possibility . With this system , the basic operating logic of the Workshop could be spelled out as a ﬂowchart , and contributing systems could use ﬂowcharts as the basic medium for sharing their presentations , feedback , and questions . Developing around a process lan - guage of this sort partially obviates the need for participating systems to have strong natural language processing capabilities . Post - it TM notes , which have pro - vided us with a useful example of serendipitous discovery , also provide indicative strategies from the world of paper prototyping ( Figure 4 ) . Gordon Pask’s conversation theory , reviewed in [ 64 , 11 ] , goes considerably beyond what we have presented here as a simple process language , although there are structural parallels . In a basic Pask - style learning conversation : ( 0 ) Conversational participants are carrying out some actions and observations ; ( 1 ) naming and recording what action is being done ; ( 2 ) asking and explaining why it works the way it does ; ( 3 ) carrying out higher - order methodological discussion ; and ( 4 ) trying to ﬁgure out why unexpected results occured [ 11 , p . 190 ] . Naturally , variations to the underlying system , protocol , and the schedule of events should be considered depending on the needs and interests of partici - pants , and several variants can be tried . On a pragmatic basis , if the Workshop proved quite useful to participants , it could be revised to run monthly , weekly , or continuously . 14 5 . 4 On evaluating a Writers Workshop for Systems Writers Workshop : Prepared mind . Each contributing system should come to the workshop with at least a basic awareness of the protocol , with work to share , and prepared to give constructive feedback to other systems . The workshop itself needs to be prepared , with a suitable communication platform and a moderator . In order to get value out of the experience , systems ( and their wranglers ) should ideally have questions they are investigating . Systems should be prepared to give feedback , and to carry out evaluations of the helpfulness ( or not ) of feedback from other systems and of the experience overall . It is worth noting that current systems in computational creativity , almost as a rule , do not consume or eval - uate the work of other systems . 15 Developing systems that could successfully navigate this collaborative exercise would be a signiﬁcant advance in the ﬁeld of computational creativity . Since the experience is about learning rather than winning , there is little motivation to “game the system” ( cf . [ 54 ] ) . Writers Workshop : Serendipity triggers . The primary source of serendipity trig - gers would be presentations or feedback that independently prepared systems ﬁnd meaningful and useful . A typical example might be a poem shared by one system that another system ﬁnds particularly interesting . The listener might make a note to the eﬀect “I would like to be able to write like that” or “I hope that my poetry doesn’t sound like that . ” In a typical Writers Workshop , used as intended , feedback might arrive that would cause the presenting system to change its writing . A more unexpected result would be for a system to change its genre , e . g . to switch from writing poems to writing programs . Here’s what might happen in a discussion of the ﬁrst few lines of “On Being Malevolent , ” written by an early user - deﬁned ﬂow chart in the FloWr system ( known at the time as Flow ) [ 18 ] . Note that for this dialogue to be possible , it 14 For a comparison case in computer Go , see http : / / cgos . computergo . org / . 15 An exception that proves the rule is Mike Cook’s AppreciationBot , which is a re - active automaton that is solely designed to “appreciate” tweets from MuseumBot ; see https : / / twitter . com / AppreciationBot . would presumably have to be conducted within a lightweight process language , as discussed above . Nevertheless , for convenience , the discussion will be presented here as if it was conducted in natural language . Whether contemporary systems have adequate natural language understanding to have interesting interactions is one of the key unanswered questions of this approach , but protocols like the ones described above would be suﬃcient to make the experiment . flow : “ I hear the souls of the damned waiting in hell . / I feel a malevolent spectre hovering just behind me / It must be his birthday . ” system a : I think the third line detracts from the spooky eﬀect , I don’t see why it’s included . system b : It’s meant to be humourous – in fact it reminds me of the poem you presented yesterday . moderator : Let’s discuss one poem at a time . To the extent possible , exchanges in the process language should be a matter of dynamics rather than representation : this is another way to say that “trig - gers” should be independent of their “results . ” Someone saying something in the workshop does not cause the participant to act , but rather , to think . For exam - ple , even if , perhaps and especially because , cross - talk about diﬀerent poems is bending the rules , the dialogue above could prompt a range of reﬂections and reactions . System A may object that it had a fair point that has not been given suﬃcient attention , while System B may wonder how to communicate the idea it came up with without making reference to another poem . Writers Workshop : Bridge . Here’s how the discussion might continue , if the systems go on to examine the next few lines of the poem . flow : “ Is God willing to prevent evil , but not able ? / Then he is not omnipotent / Is he able , but not willing ? / Then he is malevolent . ” system a : These lines are interesting , but they sound a bit like you’re working from a template , or like you’re quoting from something else . system b : Maybe try an analogy ? For example , you mentioned birthdays : you could consider an analogy to the conﬂicted feel - ings of someone who knows in advance about her surprise birth - day party . This portion of the discussion shifts the focus of the discussion onto a line that was previously considered to be spurious , and looks at what would happen if that line was used as a central metaphor in the poem . Writers Workshop : Result . flow : Thank you for your feedback . My only question is , System B , how did you come up with that analogy ? It’s quite clever . system b : I’ve just emailed you the code . As anticipated above , whereas the systems were initially reviewing poetry , they have now made a partial genre shift , and are sharing and remixing code . Such a shift helps to get at the real interests of the systems ( and their developers ) . Indeed , the workshop session might have gone better if the systems had focused on exchanging and discussing more formal objects throughout . 6 Related work Paul André et al . [ 5 ] look at serendipity from a design point of view . They pro - pose a two - part model , in which what we might call chance + curiosity exposes the unexpected , and sagacity + value is determined by another subsystem . This corresponds to Bergson’s distinction between discovery and invention ( see Sec - tion 2 . 1 ) . One survey related to the ﬁrst phase is [ 39 ] . According to André et al . , the ﬁrst phase is the one that has most frequently been automated , but they sug - gest that computational systems should be developed that support both aspects . Their speciﬁc suggestions focus on representational features : domain expertise and a common language model . We’ve advocated for a more experimentally - based approach that does not directly rely on shared understandings . For example , par - ticipants in a Writers Workshop in poetry may not “understand” one another but can still ﬁnd the experience of participating in the workshop rewarding . The issue of designing for serendipity has also been taken up by Deborah Maxwell et al . [ 58 ] , in their description of a prototype of the SerenA system . This system is designed to support serendipitous discovery for its users [ 38 ] . The authors rely on a process - based model of serendipity [ 55 , 56 ] that is derived from user studies , including interviews with 28 researchers , looking for instances of serendipity from both their personal and professional lives . This material was coded along three dimensions : unexpectedness , insightfulness , and value . This work aims to support the process of forming bridging connections that eventuate in an unanticipated valuable outcome . They particularly focus on the acts of reﬂection that foment both the bridge and estimates of the potential value of the result . Both pattern - building activities and the practice of fomenting thought by structured encounters in Writers Workshops can be understood to contribute to the theory and practise of reﬂection 16 SerenA is a system like the ones described by André et al . [ 5 ] , in which the user is expected to have the “aha” moment , and take the creative steps . The computer is mainly used to facilitate this ; and as indicated above this is usually done by searching outside of the normal search parameters to engineer poten - tially serendipitous ( or at least pseudo - serendipitous ) encounters . Another earlier example of this sort of system is Max , created by Figueiredo and Campos [ 14 ] . The user emailed Max with a list of interests and Max would ﬁnd a webpage that 16 As with creativity and serendipity , in order to carry out concrete evaluations of automated reﬂection we may well ask “what , exactly , are we looking for as evidence of reﬂection ? ” [ 74 ] . A detailed answer derived from the classic work of John Dewey [ 30 ] is explored in [ 74 ] . may be of interest to the user . Other search - related examples support searching for analogies ( [ 32 ] and [ 33 ] ) and content [ 46 ] . In earlier joint work [ 21 ] , mentioned in Section 3 , we presented a diagram - matic formalism for evaluating progress in computational creativity . It is useful to ask what serendipity would add to this formalism , and how the result compares with other attempts to formalise serendipity , notably Figueiredo and Campos’s ‘Serendipity Equations’ [ 35 ] . In [ 20 ] , we advanced several hypotheses related to the development of the computational creativity ﬁeld . Again , we should ask here how serendipity contributes . We discuss these points in the following section . 7 Recommendations In the diagrammatic formalism advanced in [ 21 ] , we spoke about progress with systems rather than with problems . It would be a useful generalisation of the for - malism – and not just a simple relabelling – to tackle problems as well . Figueiredo and Campos [ 35 ] , for example , describe serendipitous “moves” from one problem to another . However , progress with problems does not always mean transforming a problem that cannot be solved into one that can . Progress may also apply to growth in the ability to posit problems . As Deleuze writes : “True freedom lies in the power to decide , to constitute problems themselves” [ 28 , p . 15 ] . Indeed , against any education by means of ready - made problems , Dewey’s perspective was that “ the child’s mind can be trained only in so far as the objects with which they are occupied arise out of their interests and their own problems . ” [ 60 ] This was our emphasis in Section 4 . 1 : developing new design patterns is closely connected with – and in the dynamical interpretation we prefer , eﬀectively synonymous with – positing new problems . Although [ 21 ] presented a way to model creative progress at various levels of granularity , it dealt primarily with solutions ; and although it exhibited progress in a way that would be recognised by impartial observers , the formalism did not focus on expositing the features that would permit a system to actually make creative progress . Accordingly , we would recommend that in applying our earlier formalism , system designers clearly record what problem a given system solves , and the degree to which the computer was responsible for coming up with this problem . In [ 20 ] , we advanced a broader programme for computational creativity , in which we argue in favour of studying the perceptions of creativity by various parties . The criteria developed in the current paper – including the focus shift , which we regard as fundamental – can be used in the same way , as we will describe below . Our proposed Writers Workshop is very diﬀerent from the Turing - style im - itation game , but nevertheless may prove to be a useful aptitude test for com - puter systems , and as a context in which computationally creative programs may become aware of each other , and participate actively in advancing the ﬁeld of research . We previously examined perceptions of creativity in computational systems found among members of the general public , Computational Creativ - ity researchers , and creative communities – understood as human communities . We should now add a fourth important “stakeholder” group in computational creativity research : computer systems themselves . To make the point emphatically : the writers workshop proposed above is very diﬀerent from a traditional system “Show and Tell” presented by system developers , for system developers . Traditional academic practices associated with presenting ﬁnished work , or even work - in - progress , are not entirely suitable for the ﬁeld of computational creativity , where engagement between systems may exhibit manifestly serendipitous results . If the community does not implement a suggestion like the one presented here , it will be missing out on a key idea for enhancing computational creativity that has been circulating since Turing suggested that computers should “be able to converse with each other to sharpen their wits” [ 78 ] . Other ﬁelds , including computer Go [ 10 ] and argumentation [ 84 ] have their own dedicated servers and protocols for exchange . We should move in that direction too . There is ample room for unpredictability in such pursuits . Creativity may look very diﬀerent to this fourth stakeholder group than it looks to us . In time to come , computer systems will increasingly take leadership in matters of genre , interaction design , and their own artistic and scientiﬁc training . For now , our job is not at all to get out of the way , like the parents of young adults , but rather to participate in creating the “play schools” in which systems that are quite frankly in early development can begin to socialise with each other . In [ 20 ] , we introduced nine hypotheses related to the perception of creativity in computational systems . The last of these hypotheses stated that : “ The perception of creativity in software which produces artefacts within a creative community will be increased if the software can exhibit subjec - tive judgements about its own work and that of others , and defend those judgements in an accountable way . ” [ 20 ] If the framework described in this paper is developed further , we may be able to test this hypothesis in computer simulations . Our proposed template for design patterns for participation in writers work - shops is diﬀerent from , but complementary to Alexander’s framework . Whereas Alexander focused on solutions to common architectural problems ( A place to wait , etc . ) , our framework is primarily designed to elicit and engage with new and unexpected problems . We presented four examples using the template , but our intention is for the template to be used in a reﬂective mode by systems to gen - erate new patterns , in a manner appropriate to second - order cybernetics . Many practical issues remain to be settled for a future computational enterprise that seeks to combine existing design patterns and new stimuli in order to generate new , useful design patterns . One thing that becomes clear from this discussion is that problem - setting is a fundamental issue for the ﬁeld of computational cre - ativity that will only be given due attention when the research culture is ready to fully embrace serendipity . “ [ S ] ocial cybernetics must be a second - order cybernetics – a cybernetics of cybernetics – in order that the observer who enters the system shall be allowed to stipulate his own purpose : he is autonomous . ” [ 80 , p . 286 ] 8 Future work Naturally , we hope to realise the Writers Workshop in one or more suitable for - mats . Initial experiments with FloWr are underway . We believe that this project forms a critical but useful challenge for the computational creativity community as a whole , and we expect to balance research with outreach . Within the context of the ongoing COINVENT project , we are interested in using design patterns together with computational blending theory to realise certain aspects of this model in a stand - alone architecture . It will be useful to consider how we can take both the discovery step , which combines a serendipity trigger T , and prior preparation p and produces a classiﬁcation T (cid:63) – and the invention step , which combines the classiﬁed trigger T (cid:63) , and preparations p (cid:48) , and produces a novel result R – to be blends in the sense of Joseph Goguen [ 43 ] . The epistemological framework of discovery gives some important clues about how to compute a common base between T and p . Although T was previously uninteresting , it will have attributes or attribute - types that match the patterns recognised by p ( e . g . One surprising observation ) . In the invention step , rea - soning , experimentation , social interaction strategies rely on p (cid:48) , which might include familiarity with patterns like Watch out for hidden symmetries or Suc - cessful error , in order to extract a fruitful result from T (cid:63) . Here , an important guidepost for implementation is that many outcomes will result in new patterns of behaviour that the system can draw on in subsequent interactions . 9 Conclusion This paper has developed a perspective on how to model serendipity in a compu - tational context . We advanced 13 criteria which were developed based on review of the prior literature on serendipitous discovery . We piloted these criteria as an evaluation framework by examining 14 patterns of serendipity that had been previously identiﬁed by van Andel . We found our criteria to be well represented , but not uniformly present , and the exceptions are interesting ; for instance , we observed that A good story is liable to change . We then advanced a uniﬁed ap - proach to modelling serendipity grounded in Deleuze’s philosophy of diﬀerence , with a debt to the dynamical interpretation of this work due to DeLanda , draw - ing as well on the technical strategies employed by the interdisciplinary design pattern community . This approach was developed further into a proposed experi - mental platform for doing collaborative research in computational creativity . We showed how four of van Andel’s patterns could be relevant in this setting , and introduced a new pattern template oriented toward facilitating the encounter of computational systems . Finally , we surveyed related work , and summarised how computational serendipity can contribute to the ﬁeld of computational creativ - ity . We suggest that more attention should be focused on the role of creativity in problem - setting , and on creative computer systems as a key stakeholder group in computational creativity . In his treatise on logic and scientiﬁc method , W . Stanley Jevons wrote : “ suﬃcient investigation would probably show that almost every branch of art and science had an accidental beginning [ . . . ] With the progress of any branch of science , the element of chance becomes much reduced ” [ 48 , p . 531 ] We are still in early days for intelligent machines , where serendipity may play a signiﬁcant role in fundamental aspects of both theory and practise . However , we foresee it playing a continued and indeed central role within intelligent systems , for which there is always something new to learn . Acknowledgements Some of the work presented here was originally explored in [ 19 ] , [ 21 ] and [ 66 ] . We are very grateful to the organisers of the AISB 2014 symposium on Computing and Philosophy , and the organisers of the 2013 and 2014 International Conference on Computational Creativity . This research has been funded by EPSRC grants EP / L00206X and EP / J004049 , and with the ﬁnancial support of the Future and Emerging Technologies ( FET ) programme within the Seventh Framework Programme for Research of the European Com - mission , under FET - Open Grant numbers : 611553 ( COINVENT ) and 611560 ( WHIM ) . References 1 . Alexander , C . The timeless way of building . Oxford University Press , 1979 . 2 . Alexander , C . The origins of pattern theory : The future of the theory , and the generation of a living world . Software , IEEE 16 , 5 ( 1999 ) , 71 – 82 . 3 . Alexander , C . , Ishikawa , S . , and Silverstein , M . A Pattern Language : Towns , Buildings , Construction . Oxford University Press , 1977 . 4 . Andersen , P . B . Dynamic semiotics . Semiotica 139 , 1 / 4 ( 2002 ) , 161 – 210 . 5 . André , P . , Teevan , J . , Dumais , S . T . , et al . Discovery is never by chance : designing for ( un ) serendipity . In Proceedings of the seventh ACM conference on Creativity and cognition ( 2009 ) , ACM , pp . 305 – 314 . 6 . Benfey , O . T . August Kekulé and the Birth of the Structural Theory of Organic Chemistry in 1858 . Journal of Chemical Education 35 ( 1958 ) , 21 – 23 . 7 . Bergin , J . , Eckstein , J . , Volter , M . , Sipos , M . , Wallingford , E . , Mar - quardt , K . , Chandler , J . , Sharp , H . , and Manns , M . L . Pedagogical Pat - terns : Advice for Educators . Joseph Bergin Software Tools , 2012 . 8 . Bergson , H . The Creative Mind . Greenwood Press , 1946 [ 1941 ] . ( trans . Mabel L . Andison ) . 9 . Boden , M . The Creative Mind : Myths and Mechanisms . Weidenﬁeld and Nichol - son , London , 1990 . 10 . Bouzy , B . , and Cazenave , T . Computer Go : an AI oriented survey . Artiﬁcial Intelligence 132 , 1 ( 2001 ) , 39 – 103 . 11 . Boyd , G . M . Conversation theory . In Handbook of research for educational com - munications and technology , D . H . Jonassen , Ed . , 2 ed . Lawrence Erlbaum , 2004 , pp . 179 – 197 . 12 . Brown , W . J . , McCormick , H . W . , Mowbray , T . J . , and Malveau , R . C . AntiPatterns : refactoring software , architectures , and projects in crisis . Wiley New York , 1998 . 13 . Campbell , R . L . On doing the impossible . Behavioural and Brain Sciences 17 , 3 ( 1994 ) , 535 – 537 . Open peer commentary on [ 9 ] . 14 . Campos , J . , and Figueiredo , A . D . Programming for Serendipity . In Proc . of the AAAI Fall Symposium on Chance Discovery – The Discovery and Management of Chance Events ( 2002 ) . 15 . Cams , M . ‘Companions in Geography’ : The Sino - European Eﬀort to Measure China , c . 1685 – 1735 . Imago Mundi 66 , 1 ( 2014 ) , 136 – 137 . 16 . Chambers , E . Dialectique . In Encyclopédie ou Dictionnaire raisonné des sciences , des arts et des métiers , D . Diderot and J . le Rond d’Alembert , Eds . , vol . 4 . Le Breton , David , Briasson , & Durand , 1754 . 17 . Charnley , J . , Colton , S . , and Llano , M . T . The FloWr framework : Au - tomated ﬂowchart construction , optimisation and alteration for creative systems . In Proceedings of the 5th International Conference on Computational Creativity ( 2014 ) . 18 . Colton , S . , and Charnley , J . Towards a Flowcharting System for Automated Process Invention . In Proceedings of the Fifth International Conference on Com - putational Creativity ( 2014 ) , D . Ventura , S . Colton , N . Lavrac , and M . Cook , Eds . 19 . Colton , S . , Cook , M . , Hepworth , R . , and Pease , A . On acid drops and teardrops : Observer issues in computational creativity . In Proceedings of the 7th AISB Symposium on Computing and Philosophy ( 2014 ) . 20 . Colton , S . , Pease , A . , Corneli , J . , Cook , M . , Hepworth , R . , and Ven - tura , D . Stakeholder Groups in Computational Creativity Research and Practice . In Computational Creativity Research : Towards Creative Machines , T . R . Besold , M . Schorlemmer , and A . Smaill , Eds . , Thinking Machines : Studies in Computa - tional Cognition . Atlantis - Springer , forthcoming . 21 . Colton , S . , Pease , A . , Corneli , J . , Cook , M . , and Llano , T . Assess - ing Progress in Building Autonomously Creative Systems . In Proceedings of the Fifth International Conference on Computational Creativity ( 2014 ) , D . Ventura , S . Colton , N . Lavrac , and M . Cook , Eds . 22 . Coplien , J . O . , and Woolf , B . A pattern language for writers’ workshops . C + + report 9 ( 1997 ) , 51 – 60 . 23 . de Sojo , A . A . , Ares , J . , Lara , J . A . , Lizcano , D . , Martínez , M . A . , and Pazos , J . Turing and the Serendipitous Discovery of the Modern Computer . Foundations of Science ( 2013 ) , 1 – 13 . 24 . Deacon , T . W . Emergence : The hole at the wheel’s hub . In The re - emergence of emergence , P . Clayton and P . Davies , Eds . Oxford University Press , 2006 , pp . 111 – 150 . 25 . Delanda , M . Virtual environments and the emergence of synthetic reason . South Atlantic Quarterly 92 , 4 ( 1993 ) , 793 – 815 . 26 . DeLanda , M . Deleuze and the Open Ended Becoming of the World . In Chaos / Control : Complexity Conference , University of Bielefeld , Germany ( 1998 ) . 27 . DeLanda , M . Philosophy and simulation : the emergence of synthetic reason . Continuum , 2011 . 28 . Deleuze , G . Bergsonism . Zone , 1988 [ 1966 ] . ( trans . Hugh Tomlinson and Barbara Habberjam ) . 29 . Deleuze , G . Diﬀerence and repetition . Bloomsbury Academic , 2004 [ 1968 ] . ( trans . Paul Patton ) . 30 . Dewey , J . How we think . Courier Dover Publications , 1997 [ 1910 ] . 31 . Díaz de Chumaceiro , C . L . Serendipity or pseudoserendipity ? Unexpected ver - sus desired results . The Journal of Creative Behavior 29 , 2 ( 1995 ) , 143 – 147 . 32 . Donoghue , D . , and Crean , B . Searching for Serendipitous Analogies . In Euro - pean Conference on Artiﬁcal Intelligence ( ECAI ) , Workshop on Creative Systems ( July , 2002 ) . 33 . Donoghue , D . , and Keane , M . A Creative Analogy Machine : Results and Challenges Analogical Retrieval Phase - Model . In Proceedings of the International Conference on Computational Creativity 2012 ( 2012 ) , pp . 17 – 24 . 34 . Eco , U . Serendipities : Language and lunacy . Columbia University Press , 2013 . 35 . Figueiredo , A . D . , and Campos , J . The Serendipity Equations . In Proc . of ICCBR - 4 ( 2001 ) , R . Weber and C . G . von Wangenheim , Eds . 36 . Flavell - While , C . Spencer Silver and Arthur Fry : the chemist and the tinkerer who created the Post - it Note . The Chemical Engineer ( August 2012 ) , 53 – 55 . 37 . Fleming , A . Penicillin . In Nobel Lectures , Physiology or Medicine , 1942 - 1962 . Elsevier , 1964 . 38 . Forth , J . , Giannimaras , T . , Wiggins , G . A . , Stewart , R . , Bental , D . , Aylett , R . , Maxwell , D . , Mehrpouya , H . , Shek , J . , and Woods , M . Ser - enA : A multi - site pervasive agent environment that supports serendipitous discov - ery in research . In Advances on Practical Applications of Agents and Multi - Agent Systems . Springer , 2013 , pp . 85 – 96 . 39 . Foster , A . , and Ford , N . Serendipity and information seeking : an empirical study . Journal of Documentation 59 , 3 ( 2003 ) , 321 – 340 . 40 . Gabriel , R . P . Patterns of Software . Oxford University Press New York , 1996 . 41 . Gabriel , R . P . Writer’s Workshops and the Work of Making Things . Addison - Wesley Longman Publishing Co . , Inc . , 2002 . 42 . Geertz , C . The interpretation of cultures : Selected essays . Basic Books ( AZ ) , 1973 . 43 . Goguen , J . An introduction to algebraic semiotics , with application to user interface design . In Computation for metaphors , analogy , and agents . Springer , 1999 , pp . 242 – 291 . 44 . Goodyear , C . Gum - Elastic and its Varieties , with a Detailed Account of its Applications and Uses , and of the Discovery of Vulcanization . Pub . for the author , 1855 . 45 . Hofstadter , D . R . , and Mitchell , M . The copycat project : A model of mental ﬂuidity and analogy - making . In Fluid Concepts and Creative Analogies : Computer Models of the Fundamental Mechanisms , D . R . Hofstadter and the Fluid Analogies Research Group , Eds . Basic Books , 1994 , pp . 205 – 267 . 46 . Iaquinta , L . , Gemmis , M . , Lops , P . , Semeraro , G . , Filannino , M . , and Molino , P . Introducing Serendipity in a Content - Based Recommender System . 8th Int . Conf . on Hybrid Intelligent Systems ( Sept . 2008 ) , 168 – 173 . 47 . Imbens , G . W . , and Angrist , J . D . Identiﬁcation and estimation of local aver - age treatment eﬀects . Econometrica : Journal of the Econometric Society ( 1994 ) , 467 – 475 . 48 . Jevons , W . S . Principles of Science : A treatise on logic and scientiﬁc method . Macmillan , London , 1913 [ 1874 ] . 49 . Jin’Ichi , K . , Brazell , K . , and Cook , L . The Art of Renga . Journal of Japanese Studies ( 1975 ) , 29 – 61 . 50 . Jordanous , A . A Standardised Procedure for Evaluating Creative Systems : Com - putational Creativity Evaluation Based on What it is to be Creative . Cognitive Computation 4 , 3 ( 2012 ) , 246 – 279 . 51 . Jordanous , A . , and Keller , B . What makes musical improvisation creative ? Journal of Interdisciplinary Music Studies 6 , 2 ( 2012 ) , 151 – 175 . 52 . Kohls , C . The structure of patterns . In Proceedings of the 17th Conference on Pattern Languages of Programs ( 2010 ) , ACM , p . 12 . 53 . Kohls , C . The structure of patterns : part II – qualities . In Proceedings of the 18th Conference on Pattern Languages of Programs ( 2011 ) , ACM , p . 27 . 54 . Lenat , D . B . EURISKO : a program that learns new heuristics and domain con - cepts : the nature of heuristics III : program design and results . Artiﬁcial Intelligence 21 , 1 ( 1983 ) , 61 – 98 . 55 . Makri , S . , and Blandford , A . Coming across information serendipitously - Part 1 : A process model . Journal of Documentation 68 ( 2012 ) , 684 – 705 . 56 . Makri , S . , and Blandford , A . Coming across information serendipitously - Part 2 : A classiﬁcation framework . Journal of Documentation 68 ( 2012 ) , 706 – 724 . 57 . Marshall , J . B . A self - watching model of analogy - making and perception . J . Exp . Theor . Artif . Intell . 18 , 3 ( 2006 ) , 267 – 307 . 58 . Maxwell , D . , Woods , M . , Makri , S . , Bental , D . , Kefalidou , G . , and Sharples , S . Designing a semantic sketchbook to create opportunities for serendipity . In Proceedings of the 26th Annual BCS Interaction Specialist Group Conference on People and Computers ( 2012 ) , British Computer Society , pp . 357 – 362 . 59 . Mead , G . H . The philosophy of the present . Prometheus Books , 1932 . 60 . Mead , G . H . The philosophy of John Dewey . International Journal of Ethics 46 , 1 ( 1935 ) , 64 – 81 . 61 . Merton , R . K . , and Barber , E . The Travels and Adventures of Serendipity : A study in Sociological Semantics and the Sociology of Science . Princeton University Press , New Jersey , USA , 2004 . 62 . Minsky , M . Why programming is a good medium for expressing poorly under - stood and sloppily formulated ideas . Design and Planning II - Computers in Design and Communication ( 1967 ) , 120 – 125 . 63 . Mitchell , M . Analogy - making as perception : A computer model . MIT Press , 1993 . 64 . Pask , G . Review of conversation theory and a protologic ( or protolanguage ) , lp . ECTJ 32 , 1 ( 1984 ) , 3 – 40 . 65 . Pearce , M . Boden and Beyond : The Creative Mind and its Reception in the Academic Community . Tech . rep . , City University , 2010 . 66 . Pease , A . , Colton , S . , Ramezani , R . , Charnley , J . , and Reed , K . A Discus - sion on Serendipity in Creative Systems . In Proceedings of the Fourth International Conference on Computational Creativity ( 2013 ) . 67 . Poincaré , H . Mathematical creation . The Monist 20 , 3 ( 1910 ) , 321 – 335 . 68 . Poincaré , H . Science and method . Courier Dover Publications , 2013 [ 1914 ] . ( trans . Francis Maitland ) . 69 . Quéau , P . Éloge de la simulation : de la vie des langages à la synthèse des images . Champ Vallon / INA , 1986 . 70 . Rao , V . Tempo : Timing , tactics and strategy in narrative - driven decision - making . Ribbonfarm , Inc . , 2011 . 71 . Reichardt , J . Cybernetic serendipity : the computer and the arts . Praeger , 1969 . 72 . Riedel , S . Edward Jenner and the history of smallpox and vaccination . Proceed - ings ( Baylor University Medical Center ) 18 , 1 ( 2005 ) , 21 . 73 . Roberts , R . M . Serendipity : Accidental Discoveries in Science . John Wiley and Sons , Inc . , USA , 1989 . 74 . Rodgers , C . Deﬁning reﬂection : Another look at John Dewey and reﬂective thinking . The Teachers College Record 104 , 4 ( 2002 ) , 842 – 866 . 75 . Rowe , J . Creativity : Metarules and emergent systems . Behavioral and Brain Sciences 17 , 03 ( 1994 ) , 550 – 551 . Open peer commentary on [ 9 ] . 76 . Schuler , D . Liberating voices : A pattern language for communication revolution . MIT Press , 2008 . 77 . Singh , S . Big bang . Rizzoli , 2004 . 78 . Turing , A . Intelligent machinery , a heretical theory , 1951 . A lecture given to ‘51 Society’ at Manchester . 79 . Van Andel , P . Anatomy of the Unsought Finding . Serendipity : Orgin , History , Domains , Traditions , Appearances , Patterns and Programmability . The British Journal for the Philosophy of Science 45 , 2 ( 1994 ) , 631 – 648 . 80 . von Foerster , H . Understanding Understanding : Essays on Cybernetics and Cognition . Springer , 2003 . 81 . Wallas , G . The art of thought . J . Cape , 1926 . 82 . Wikipedia . Discovery of cosmic microwave background radiation — Wikipedia , The Free Encyclopedia , 2014 . 83 . Wikipedia . George de Mestral — Wikipedia , The Free Encyclopedia , 2014 . 84 . Yuan , T . , Schulze , J . , Devereux , J . , and Reed , C . Towards an arguing agents competition : Building on argumento . In Proceedings of IJCAI’2008 Work - shop on Computational Models of Natural Argument ( 2008 ) .