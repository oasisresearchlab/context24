A University of Sussex PhD thesis Available online via Sussex Research Online : http : / / sro . sussex . ac . uk / This thesis is protected by copyright which belongs to the author . This thesis cannot be reproduced or quoted extensively from without first obtaining permission in writing from the Author The content must not be changed in any way or sold commercially in any format or medium without the formal permission of the Author When referring to this work , full bibliographic details including the author , title , awarding institution and date of the thesis must be given Please visit Sussex Research Online for more information and further details Higher - order structure in networks : Construction and its impact on dynamics Martin Ritchie A thesis submitted for the degree of Doctor of Philosophy University of Sussex Department of Mathematics April 2016 ii Declaration I hereby declare that this thesis has not been , and will not be , submitted in whole or in part to another University for any other academic award . Except where indicated by speciﬁc stated in the text , this thesis was composed by myself and the work contained therein in my own . signature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Martin Ritchie iii University of Sussex MARTIN RITCHIE THESIS SUBMITTED FOR THE DEGREE OF DOCTOR OF PHILOSOPHY HIGHER - ORDER STRUCTURE IN NETWORKS : CONSTRUCTION AND IMPACT ON DYNAMICS SUMMARY Networks are often characterised in terms of their degree distribution and global cluster - ing coeﬃcient . It is assumed that these provide a suﬃcient parametrisation of networks . However , since the global clustering coeﬃcient is only sensitive to the total number of triangles found in the network , it is evident that two networks could have the same number of triangles but signiﬁcantly diﬀerent higher - order structure , i . e . , the topolo - gies that result from the placement of closed subgraphs around nodes . The two main objectives of my work are : ( 1 ) developing network generating algorithms and network - based epidemic models with controllable higher - order structure and ( 2 ) investigating the impact of higher - order structure on dynamics on networks . This thesis is based on three papers , corresonding to Chapters . 3 , 4 and 5 . Chapter 3 presents a novel higher - order structure based network generating algorithm and sub - graph counting algorithm . Chapter . 4 , generalises a previously proposed ODE model that accurately captures the time evolution of the susceptible - infected - recovered ( SIR ) dynamics on networks constructed using arbitrary subgraphs . Chapter . 5 , improves , extends and generalises the network generating algorithms proposed in the previous two papers . All three chapters demonstrate that for a ﬁxed degree distribution and global clustering , diverse higher - order structure is still possible and that this structure will impact signiﬁcantly on dynamics unfolding on networks . Hence , we suggest that higher - order structure should receive more attention when analysing network - based systems and dynamics . iv Acknowledgements Istvan and Luc , you have both taught me so much and so well . Knowing what I know now , starting over again and given any choice of supervisors I would pick you both again . I am eternally grateful to the Engineering and Physical Sciences Research Council ( EPSRC ) and the University of Sussex for fully funding my PhD . And , again my supervisors for securing my funding . This has been a life changing opportunity . I would also like to thank Thomas House whom I was lucky enough to collaborate with on my ﬁrst paper . I am truly fortunate to have been blessed with an incredible family : Mum , Dad , the cows ( my sisters for the uninitiated ) , Ben and John . I worry immensely about writing a list of friends ( which would run into the hundreds , literally ) and accidentally leaving some one oﬀ , getting the order wrong or otherwise cocking it up in some other spectacular way . You know that I love you all , immeasurably . v List of publications and author contributions • Higher - order structure and epidemic dynamics in clustered networks . M . Ritchie , L . Berthouze , T . House , and I . Z . Kiss . Journal of Theoretical Biology , 348 : 21 – 32 , 2014 . – M . Ritchie conceived the overall goals of the study and the analysis , devel - oped and implemented the bespoke clustered conﬁguration model network generating algorithm , provided the majority of the calculations , generated the majority of the data , data visualisation , wrote the ﬁrst draft and subse - quent revisions . – L . Berthouze conceived the overall goals of the study and the analysis , de - veloped and implemented the motif counting algorithm , provided data using the motif counting algorithm , contributed to writing / revising the paper , and closely supervised the work of M . Ritchie – T . House developed and implemented the motif decomposition algorithm and associated theoretical calculations and contributed to writing / revising the paper . – I . Z . Kiss conceived the overall goals of the study and the analysis , contributed to writing / revising the paper and closely supervised the work of M . Ritchie • Beyond clustering : mean - ﬁeld dynamics on networks with arbitrary subgraph composition . M . Ritchie , L . Berthouze , and I . Z . Kiss . Journal of Mathematical Biology , 72 ( 1 - 2 ) : 255 – 281 , 2016 . – M . Ritchie conceived the overall goals of the study and the analysis , devel - oped and implemented the hyperstub conﬁguration model associated network generating algorithm and code generating algorithm , provided all theoretical calculations , generated the majority of the data , provided all data visualisa - tions , wrote the ﬁrst draft and subsequent revisions of the manuscript . vi – L . Berthouze conceived the overall goals of the study and the analysis , con - tributed to writing / revising the paper , provided data using the motif count - ing algorithm and closely supervised the work of M . Ritchie . – I . Z . Kiss conceived the overall goals of the study and the analysis , contributed to writing / revising the paper and closely supervised the work of M . Ritchie . • Generation and analysis of networks with a prescribed degree sequence and subgraph family : Higher - order structure matters . M . Ritchie , L . Berthouze , and I . Z . Kiss . Journal of Complex Networks ( in press , 2016 ) . Also available at : http : / / arxiv . org / abs / 1512 . 01435 – M . Ritchie conceived the overall goals of the study and the analysis , devel - oped and implemented the underdetermined sampling algorithm and cardi - nality matching algorithm , provided the majority of the computational ev - idence , theoretical calculations , provided all data visualisations , wrote the ﬁrst draft and subsequent revisions of the manuscript . – L . Berthouze conceived the overall goals of the study and the analysis , pro - vided data using both the motif counting algorithm and complex contagion dynamics , contributed to writing / revising the paper and closely supervised the work of M . Ritchie . – I . Z . Kiss conceived the overall goals of the study and the analysis , developed and implemented the underdetermined sampling algorithm , contributed to writing / revising the paper and closely supervised the work of M . Ritchie . vii Contents Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . iii Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . iv List of publications and author contributions . . . . . . . . . . . . . . . . . . v 1 Motivation and thesis overview 1 1 . 1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 . 2 Thesis overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2 Introduction 12 2 . 1 Network characterisation . . . . . . . . . . . . . . . . . . . . . . . . . . 12 2 . 1 . 1 Degree sequence and distribution . . . . . . . . . . . . . . . . . 12 2 . 1 . 2 Degree correlations . . . . . . . . . . . . . . . . . . . . . . . . . 13 2 . 1 . 3 Transitivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2 . 1 . 4 Motifs , subgraphs and higher - order structure . . . . . . . . . . . 16 2 . 2 Network models and generation . . . . . . . . . . . . . . . . . . . . . . 19 2 . 2 . 1 Erd˝os - R´enyi Random graphs . . . . . . . . . . . . . . . . . . . . 19 2 . 2 . 2 The conﬁguration model . . . . . . . . . . . . . . . . . . . . . . 20 2 . 2 . 3 Lattice and bipartite rewiring . . . . . . . . . . . . . . . . . . . 24 2 . 2 . 4 Clustered random networks . . . . . . . . . . . . . . . . . . . . 24 2 . 2 . 5 Rewiring algorithms . . . . . . . . . . . . . . . . . . . . . . . . 27 2 . 2 . 6 Isolating higher - order structure . . . . . . . . . . . . . . . . . . 28 2 . 3 Epidemic models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2 . 3 . 1 Compartmental models . . . . . . . . . . . . . . . . . . . . . . . 28 2 . 3 . 2 Epidemics on networks . . . . . . . . . . . . . . . . . . . . . . . 30 viii 3 Paper I : Higher - order structure and epidemic dynamics in clustered networks 34 3 . 1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3 . 2 Material and methods . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3 . 2 . 1 Network construction . . . . . . . . . . . . . . . . . . . . . . . . 35 3 . 2 . 2 Network metrics : Third and higher - order network structure . . . 41 3 . 2 . 3 Dynamics on networks . . . . . . . . . . . . . . . . . . . . . . . 45 3 . 3 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 3 . 3 . 1 Overall feature and structure of the network . . . . . . . . . . . 46 3 . 3 . 2 Distribution of clustering and centrality . . . . . . . . . . . . . 46 3 . 3 . 3 Connected component analysis . . . . . . . . . . . . . . . . . . . 49 3 . 3 . 4 Motif statistics for all network types . . . . . . . . . . . . . . . 50 3 . 3 . 5 Dynamics on the networks : evaluation and comparison . . . . . 51 3 . 4 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 3 . 5 Appendices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 3 . 5 . 1 Motif decomposition , analysis . . . . . . . . . . . . . . . . . . . 57 3 . 5 . 2 Motif counting algorithm . . . . . . . . . . . . . . . . . . . . . . 59 3 . 5 . 3 Motif counting : unique vs multiplicative . . . . . . . . . . . . . 61 4 Paper II : Beyond clustering : Mean - ﬁeld dynamics on networks with arbitrary subgraph composition 63 4 . 1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 4 . 2 Materials and Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 4 . 2 . 1 SIR epidemics on random graphs . . . . . . . . . . . . . . . . . 66 4 . 2 . 2 Hyperstub conﬁguration model . . . . . . . . . . . . . . . . . . 69 4 . 2 . 3 SIR epidemics on hyperstub conﬁguration model networks . . . 73 4 . 2 . 4 Initial conditions . . . . . . . . . . . . . . . . . . . . . . . . . . 78 4 . 3 Automated code - generation of the mean - ﬁeld model . . . . . . . . . . . 78 4 . 4 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 ix 4 . 5 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 4 . 6 Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 4 . 7 Appendix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 4 . 7 . 1 Excess degree . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 4 . 7 . 2 ODEs for an example network . . . . . . . . . . . . . . . . . . . 89 4 . 7 . 3 Equivalence to previous model for complete subgraphs . . . . . 91 4 . 7 . 4 State transition matrix . . . . . . . . . . . . . . . . . . . . . . . 93 4 . 7 . 5 Algorithm 1 - Hyperstub CM algorithm . . . . . . . . . . . . . . 94 4 . 7 . 6 Algorithm 2 - Transition matrix algorithm . . . . . . . . . . . . 96 4 . 7 . 7 Null case for Fig . 4 . 5 . . . . . . . . . . . . . . . . . . . . . . . . 98 5 Paper III : Generation and analysis of networks with a prescribed degree sequence and subgraph family : Higher - order structure matters 99 5 . 1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 5 . 2 Materials and methods . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 5 . 2 . 1 The underdetermined sampling algorithm – UDA . . . . . . . . 104 5 . 2 . 2 Cardinality matching – CMA . . . . . . . . . . . . . . . . . . . 108 5 . 2 . 3 Connection process . . . . . . . . . . . . . . . . . . . . . . . . . 110 5 . 2 . 4 Models of contagion . . . . . . . . . . . . . . . . . . . . . . . . 118 5 . 3 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 5 . 3 . 1 Algorithm validation . . . . . . . . . . . . . . . . . . . . . . . . 119 5 . 3 . 2 Sampling from a diﬀerent area of the network state space . . . . 124 5 . 3 . 3 Diversity within the newly proposed algorithms . . . . . . . . . 125 5 . 3 . 4 Does higher - order structure matter ? . . . . . . . . . . . . . . . . 131 5 . 4 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137 5 . 5 Appendix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141 5 . 5 . 1 Integer partitions . . . . . . . . . . . . . . . . . . . . . . . . . . 141 5 . 5 . 2 Pseudocode for UDA . . . . . . . . . . . . . . . . . . . . . . . . 143 5 . 5 . 3 Pseudocode for CMA . . . . . . . . . . . . . . . . . . . . . . . . 143 x 6 Discussion 147 Bibliography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151 1 Chapter 1 Motivation and thesis overview 1 . 1 Motivation Networks represent elements of a system by nodes and interactions between elements as edges . Figure 1 . 1 shows a small portion of the internet , a physical network where servers and routers form the nodes and the copper wires or ﬁbre optic cables that connect them form the edges . The internet hosts the world wide web , itself a network but digitally abstracted . In this case web pages form nodes and hyper - links are the edges that connect nodes . When a network is used to represent a population people are represented by nodes and their contact between individuals is represented with edges . Nodes may also represent more than one type of element of a system . Figure 1 . 2 shows a network of diﬀerent languages spoken in a small community . This type of network is known as a bipartite graph where the nodes form two disjoint sets : people and languages . Aside from their eloquent visualisation of complex systems networks are highly adept at quantitatively and qualitatively characterising the structure of complex envi - ronments . The importance of this cannot be understated since a network’s structure will signiﬁcantly aﬀect its function [ 72 ] . It is well known that degree heterogeneity has a major impact on the epidemic threshold [ 51 ] , and that highly connected nodes can be preferentially targeted in order to limit spread [ 2 , 12 ] . Networks that are assortatively mixed by degree will signiﬁcantly reduce the ﬁnal size of an epidemic compared to dis - 2 Figure 1 . 1 : A small fraction of the internet , data taken from the Route Views project , see [ 1 ] . This ﬁgure , and all other network visualisations in the thesis , have been pro - duced using Gephi , see [ 8 ] . The nodes are coloured so that lower - and higher - degree nodes appear towards the red and violet ends of the colour spectrum respectively . In this ﬁgure there are : N = 22 , 963 nodes , on average each node is incident to 4 . 2 edges and the maximum degree is 2390 3 Figure 1 . 2 : The network of languages spoken in the department of Mathematics at the University of Sussex . Green and pink nodes represent languages and people respectively . English forms the most central node . Similarly , French and Spanish form the second and third most central nodes in the network . 4 assortative networks [ 52 ] . Clustering will also inhibit the spread of an epidemic relative to non - clustered networks [ 20 ] . All of these aforementioned properties also impact on the epidemic threshold deﬁned loosely as the number of new infections produced by a typical infectious individual introduced in a fully susceptible population [ 33 , 52 ] . In brain networks , the growth of the network and dynamics are intimately coupled [ 11 ] . In some cases the dynamics that the network host are a direct result of network archi - tecture [ 19 , 59 ] . Causal links have been found between network structure and mental illness with great implications for the individual concerned [ 42 ] . The most basic structural description is edge / link density , the ratio of the number of edges to all potential edges . However , between having no connections or all pos - sible connections there is an extremely large number of possibilities , see Figure 1 . 3 . A network’s degree distribution , a discrete probability distribution that describes the probability p k of ﬁnding a node incident to k edges , better describes this spectrum . The degree distribution is probably the most important descriptor of a network and plays a major role in determining the behaviour of dynamics that run on networks . Complete Homogeneous Heterogeneous Figure 1 . 3 : The complete network , left , has every possible connection realised , this network has unit density , see Deﬁnition . 3 . Each node in the homogeneous network is connected to exactly four other nodes and the heterogeneous networks have an average degree of four , that are relatively sparse in comparison . As can be seen from the homogeneous and heterogeneous networks with equal density , density alone is a poor determinant of network structure . 5 Low Medium High Figure 1 . 4 : These three networks share the same degree distribution but exhibit in - creasing levels of clustering . The network has been coloured so that nodes incident to few triangles are coloured towards the blue end of the spectrum and nodes incident to many triangles are nuanced towards the red end of the spectrum . The geometrical embedding of these networks has been selected only for aesthetic purposes . Figure 1 . 4 shows three networks that share the same degree distribution but exhibit signiﬁcant structural diﬀerences . This has been achieved by increasing the networks’ global clustering coeﬃcient , the probability of ﬁnding two connected nodes that share a common neighbour . By increasing a network’s global clustering coeﬃcient , nodes are obliged to connect to other nodes that already reside within their close neighbourhood . This eﬀect has been commonly observed in real world networks , see [ 11 , 56 , 72 , 78 ] , and is known to signiﬁcantly impact dynamics that run on the network [ 20 , 55 ] . Therefore when making comparisons between networks it is essential that one correctly accounts for both their degree distributions and global clustering coeﬃcient . But how accurately does the degree distribution and global clustering coeﬃcient alone describe network structure ? Figure 1 . 5 shows three networks that share the same degree distribution and global clustering coeﬃcient . This ﬁgure demonstrates how the degree distribution and cluster - ing alone may not suﬃciently constrain network structure . Obviously , this observation has already been made in previous studies , see [ 6 , 20 , 24 ] , for example . Clustering yields only information about the total number of triangles in a network . Consequently , this 6 C = 0 . 202 . C = 0 . 203 . C = 0 . 206 . Figure 1 . 5 : Each of the above networks has been constructed using 600 nodes such that every node is incident to 6 edges , the networks share the same global clustering coeﬃcient ( denoted by C ) but have been constructed using diﬀerent subgraphs . Read - ing from left to right the networks are constructed with non - overlapping to densely overlapping triangles . Due to the number of triangles being constant between them the networks have become increasingly modular with relatively isolated clumps of over - lapping triangles being weakly connected to the main component . The geometrical embedding of these networks has been selected only for aesthetic purposes . 7 measure omits two key pieces of information : ( A ) how triangles are distributed amongst and around nodes and ( B ) how triangles are arranged , e . g . , sharing edges resulting in compound structures . In this thesis , we shall refer to such compounds , i . e . , cycle based subgraphs of four nodes or more , as higher - order structure . Currently few models of network - based dynamics and network generating algorithms exists that can control higher - order structure . So , little is understood about its function or how it impacts on dynamics that run on networks . Creating such algorithms and network models , and subsequently investigating the impact of higher - order structure is the central theme of this thesis . 8 1 . 2 Thesis overview For my PhD I wrote and published three papers that form the backbone of this thesis and are presented in chronological order in the following . Common to all three papers is the notion of using subgraphs as building blocks in a networks’ construction in a conﬁguration model type algorithm . The types of networks the algorithms are able to produce become increasingly sophisticated as the thesis progresses . Essentially , all three papers use their respective algorithms and models to investigate diversity in network structure , under the constraints of equal degree distribution and global clustering coef - ﬁcient , and the impact of such diversity on network based dynamics . Before I present my published work Chapter . 2 introduces the topic more thoroughly and also contains my literature review . Please note that the , list of publications and author contributions , at the start of this thesis details the original contributions found in this document . Chapter . 3 , based on my ﬁrst paper , presents two novel network generation algorithms and compares these to existing methods . By parametrising the ensemble of algorithms in the same way , targeting the same degree distribution and global clustering coeﬃcient , I show that the resulting networks are quantitatively and qualitatively diﬀerent . In addition to the new algorithms , my results indicate that when network structure is constrained by degree distribution and clustering alone structural diversity is still possible and that this diversity will manifest in dynamics that run on the networks . The original abstract for this paper reads as follows : Clustering is typically measured by the ratio of triangles to all triples regardless of whether open or closed . Generating clustered networks , and how clustering aﬀects dynamics on networks , is reasonably well understood for certain classes of networks [ 32 , 76 ] , e . g . , networks composed of lines and non - overlapping triangles . In this paper we present two novel network generation algorithms : the clustered conﬁguration model and the motif decomposition algorithm , the former being my own original contribution . Using these models , alongside existing methods , we generate networks which , despite having the same degree distribution and equal clustering , exhibit 9 diﬀerent higher - order structure , speciﬁcally , overlapping triangles and other order - four ( a closed network motif composed of four nodes ) structures . To distinguish and quantify these additional structural features , we develop a new network metric capable of measuring order - four structure which , when used alongside traditional network metrics , allows us to more accurately describe a network’s topology . Then using SIS ( Susceptible - Infected - Susceptible ) and SIR ( Susceptible - Infected - Recovered ) dynamics we investigate computationally how diﬀerences in higher - order structure impact on epidemic threshold , ﬁnal epidemic or prevalence levels and time evolution of epidemics . Our results suggest that characterising and measuring higher - order network structure is needed to advance our understanding of the impact of network topology on dynamics unfolding on the networks . Chapter . 4 , based on my second paper , generalises a previously proposed ordinary diﬀerential equation ( ODE ) model that captures the time evolution of susceptible - infected - recovered ( SIR ) dynamics on networks constructed using line and triangle subgraphs . The original model was capable of predicting dynamics on networks constructed using only complete subgraphs . I develop the necessary framework to include subgraphs of arbitrary connectivity . This framework is presented alongside a bespoke code generating algorithm that generates and solves the ODEs for a speciﬁc set of subgraphs . Using this model I ﬁnd that SIR dynamics are sensitive to network structure beyond that speciﬁed by the degree distribution and global clustering coeﬃcient , so called higher - order structure . The original abstract for this paper reads as follows : Clustering is the propensity of nodes that share a common neighbour to be connected . It is ubiquitous in many networks but poses many modelling chal - lenges . Clustering typically manifests itself by a higher than expected frequency of triangles , and this has led to the principle of constructing networks from such building blocks . This approach has been generalised to networks being constructed from a set of more exotic subgraphs . As long as these are fully 10 connected , it is then possible to derive mean - ﬁeld models that approximate epidemic dynamics well . However , there are virtually no results for non - fully connected subgraphs . In this paper , we provide a general and automated ap - proach to deriving a set of ordinary diﬀerential equations , or mean - ﬁeld model , that describes , to a high degree of accuracy , the expected values of system - level quantities , such as the prevalence of infection . Our approach oﬀers a previ - ously unattainable degree of control over the arrangement of subgraphs and network characteristics such as classical node degree , variance and clustering . The combination of these features makes it possible to generate families of networks with diﬀerent subgraph compositions while keeping classical network metrics constant . Using our approach , we show that higher - order structure realised either through the introduction of loops of diﬀerent sizes or by generating clustered networks based on diﬀerent subgraphs , leads to signiﬁcant diﬀerences in epidemic dynamics despite controlling for basic network metrics . Chapter . 5 , based on my third and ﬁnal paper , presents two network generation algorithms based on the clustered conﬁguration model ( presented in Chapter . 3 ) and the hyperstub conﬁguration model ( presented in Chapter . 4 ) . Improvements on Chap - ter . 3 : The clustered conﬁguration model operates by selecting a random conﬁguration of subgraphs to be allocated to nodes depending on their degree , but lacked generality in respect to choices in the degree distribution and subgraph choices . Chapter . 5 shows how to relax both of these constraints . Improvements on Chapter . 4 : The hyperstub conﬁguration model allows for sequences of subgraphs to be speciﬁed a priori but at the loss of control of the degree distribution . Chapter . 5 constructs networks using sequences of subgraphs but in such a way that the degree sequence is preserved . Using these algorithms to construct networks and traditional metrics to analyse the resulting networks I show that diversity is still possible between networks of equal degree distributions and global clustering coeﬃcients . Furthermore , I go on show that this diversity impacts on the behaviour of susceptible - infected - secovered ( SIS ) , SIR and complex contagion dynamics and therefore matters . The original abstract for this paper reads as follows : 11 Designing algorithms that generate networks with a given degree sequence while varying both subgraph composition and distribution of subgraphs around nodes is an important but challenging research problem . Current algorithms lack control of key network parameters , the ability to specify to what subgraphs a node belongs to , come at a considerable complexity cost or , critically , sample from a limited ensemble of networks . To enable controlled investigations of the impact and role of subgraphs , especially for epidemics , neuronal activity or complex contagion , it is essential that the generation process be versatile and the generated networks as diverse as possible . In this paper , we present two network generation algorithms that use subgraphs as building blocks to construct networks preserving a given degree sequence . Additionally , these algorithms provide control over clustering both at node and global level . In both cases , we show that , despite being constrained by a degree sequence and global clustering , generated networks have markedly diﬀerent topologies as evidenced by both subgraph prevalence and distribution around nodes , and large - scale network structure metrics such as path length and betweenness measures . Simulations of standard epidemic and complex contagion models on those networks reveal that degree distribution and global clustering do not always accurately predict the outcome of dynamical processes taking place on them . We conclude by discussing the beneﬁts and limitations of both methods . Chapter . 6 , the discussion , compares and consolidates my contributions and ﬁndings as well as discusses potential future work relating to my research . 12 Chapter 2 Introduction 2 . 1 Network characterisation Networks are composed of nodes and edges . Node represent elements of a system and edges connecting nodes represent interactions between elements , for example , people and friendships , respectively . Networks can be directed , i . e . , each edge is a one - way street , or undirected . This thesis considers only the latter . In this thesis networks are encoded by an adjacency matrix , A ∈ { 0 , 1 } N × N , where N denotes the number of nodes . Two nodes , i and j share an edge if A ( i , j ) = A ( j , i ) = 1 , or more generally , A = A T ( as the network is undirected ) . In addition to networks being undirected we also require them to be simple . In a simple network multiple connections between nodes and self - loops , A ( i , j ) > 1 and A ( i , i ) = 1 respectively , are not permitted . 2 . 1 . 1 Degree sequence and distribution The number of edges incident to a node is referred to as the degree of a node . Deﬁnition 1 . The degree sequence of a network is a sequence of natural numbers , that may include zero , which speciﬁes how many edges originate from each node . More speciﬁcally D = ( d 1 , d 2 , . . . , d N ) where d i and N denote the degree of node i and number of nodes in the network respectively . In undirected networks the degree sequence may be obtained by adding the adjacency matrix row - or column - wise . 13 The sum of the degree sequence gives the number of edges in the network doubly counted , since each edge is counted from both nodes that connect ; this value is denoted by 2 m = (cid:80) Ni , j = 1 A ij . The degree sequence is a single realisation of a network’s degree distribution . Deﬁnition 2 . The degree distribution of a network is a discrete probability distribution , p k , which denotes the probability of ﬁnding a node incident to k edges . The total number of unique edges is denoted by m , and can be computed from the adjacency matrix as above or from the degree distribution , i . e . , m = (cid:104) k (cid:105) N / 2 , where (cid:104) k (cid:105) denotes the ﬁrst moment of the distribution . The total number of possible edges between N nodes is (cid:0) N 2 (cid:1) . Deﬁnition 3 . The density of a network is the ratio of its edges to the total number of possible edges , i . e . , d ∗ = m (cid:0) N 2 (cid:1) , where 0 ≤ d ∗ ≤ 1 . A network with d ∗ = 1 is said to be complete . In between having no edges or being complete there is considerable scope for vari - ation , even at the same edge density , and it is therefore the degree distribution which better describes this spectrum . Necessarily this feature has been exhaustively investi - gated and is well understood , see [ 7 , 9 , 54 , 56 ] for example . However , even with a ﬁxed degree sequence there are numerous ways in which the nodes may connect . 2 . 1 . 2 Degree correlations Another important feature of network topology is how nodes of diﬀerent degrees mix . For example , do high - degree nodes preferentially connect to other high - degree nodes , so called assortative mixing ? Or do their edges tend to terminate at low - degree nodes , disassortative mixing ? The extent of this mixing is measured by the assortativity coef - ﬁcient [ 53 ] . To compute the assortativity coeﬃcient ﬁrst I shall use the excess degree distribution to calculate degree - degree covariance . The intuition behind this distribution is the 14 following : select an edge at random and follow this edge to one of the nodes that it connects . The distribution that describes the degree of this node , not counting the one by which the node was selected , is the excess degree distribution . q k , denotes the probability of ﬁnding a node with excess degree k at the end of a randomly selected edge . Using this distribution , next deﬁne the joint distribution of ﬁnding nodes with degree k and j at the end of a randomly selected edge as e kj that follows the following summation rules m (cid:88) j = 1 m (cid:88) k = 1 e jk = 1 , m (cid:88) j = 1 e j = q k , ( 2 . 1 ) where m denotes the number of edges . Note that the calculations in this subsection count over edges and not nodes . In a network where there is no covariance between nodes this distribution takes the value q k q j . Otherwise degree - degree covariance may be computed by (cid:104) jk (cid:105) − (cid:104) j (cid:105)(cid:104) k (cid:105) = m (cid:88) j = 1 m (cid:88) k = 1 jk ( e jk − q j q k ) ( 2 . 2 ) This has maximum value for networks where nodes only connect to other nodes of identical degree , i . e . , e kj = q k δ kj , where δ kj denotes the Kronecker delta . This value is the variance of q k denotes σ 2 q and dividing Equation . ( 2 . 2 ) by this value yields the Pearson correlation coeﬃcient . Deﬁnition 4 . The assortativity coeﬃcient is denoted by r : 1 ≤ r ≤ 1 . Networks with values of : 0 ≤ r ≤ 1 or − 1 ≤ r ≤ 0 are said to be assortatively or disassortatively mixed respectively and can be computed directly from the adjacency matrix by the following r = m − 1 (cid:80) mi = 1 j i k i − (cid:2) m − 1 (cid:80) mi = 1 12 ( j i + k i ) (cid:3) 2 m − 1 (cid:80) mi = 1 12 ( j 2 i + k 2 i ) − (cid:2) m − 1 (cid:80) mi = 1 12 ( j i + k i ) (cid:3) 2 . Figure 2 . 1 shows three networks of varying assortativity coeﬃcient . The great ma - jority of networks that are studied in this thesis have a neutral assortativity coeﬃcient ; nevertheless , assortativity is relevant and shall be referred to in subsequent sections . 15 − 1 ≤ r (cid:28) 0 r = 0 0 (cid:28) r ≤ 1 Figure 2 . 1 : These three networks share the same degree sequence but diﬀerent assorta - tivity coeﬃcients . The nodes are coloured so that low - and high - degree nodes correspond to the red and blue ends of the spectrum respectively . However , the networks on the left and right have been re - wired so that nodes of similar degree avoid one another or preferentially connect respectively . 2 . 1 . 3 Transitivity The analysis of real world networks has revealed that many of them have a relatively large prevalence of triangles , three nodes that share every possible connection [ 11 , 55 , 56 , 72 , 78 ] . Analogous to edge density , the global clustering coeﬃcient is a measure of triangle density , and is the broadest possible measure of transitivity . Deﬁnition 5 . The global clustering coeﬃcient is a measure of network transitivity . It is the probability of ﬁnding two neighbours of a given node that also share an edge forming a triangle and shall be denoted by C and can be computed directly from the adjacency matrix by the following formula [ 33 , 77 ] C = trace ( A 3 ) (cid:107) A 2 (cid:107) − trace ( A 3 ) , where 0 ≤ C ≤ 1 and (cid:107) A 2 (cid:107) denotes the sum of all elements of A 2 . The numerator of this expression gives the number of triangles , three nodes that share every possible connection between them . The denominator gives the number of 16 triangles plus the number of triples of nodes connected by two edges . A network with a global clustering coeﬃcient of C = 0 will not contain any triangles . Related to the global clustering coeﬃcient is the local clustering coeﬃcient , that measures clustering around a speciﬁc node . Deﬁnition 6 . The local clustering coeﬃcient , denoted C l , is the number of triangles incident to a node divided by the number of potential triangles incident to that node . For a node of degree k , it is given by : C l = (cid:52) (cid:0) k 2 (cid:1) where (cid:52) denotes the number of uniquely counted triangles incident to the node . The local clustering coeﬃcient is only deﬁned for nodes with degree k ≥ 2 . Clustering is known to improve the local eﬃciency of networks , in particular , it may enhance signal propagation , synchronizability and computational eﬃciency , which is highly advantageous to many network based dynamics [ 70 , 72 , 78 ] . Clustering is also present is social networks and , thus it is important to incorporate it into network - based models of spreading , be it epidemics , information or rumours . However , developing such models that can accurately capture clustering , as well as obey other constraints such as control of the degree distribution , has proven to be a challenging problem . 2 . 1 . 4 Motifs , subgraphs and higher - order structure The edge density , assortativity coeﬃcient and global clustering coeﬃcient all provide macroscopic descriptions of network structure . The degree distribution and local clus - tering coeﬃcient are common examples of local network properties . Where local clus - tering is a metric speciﬁc to only triangles , motifs provide a relatively general way of describing the local structure around nodes using motifs that they deﬁne to be as : are patterns of interconnections occurring in complex networks at numbers that are signif - icantly higher than those in equivalent randomised , using degree - preserving rewiring , networks [ 49 , 69 ] . Milo et al . and Shen - Orr et al . found that certain arrangements of nodes , such as those shown in Figure 2 . 2 , appeared in biological and technologi - cal networks with greater frequency than what one would expect at random [ 49 , 69 ] . 17 To randomise the networks edges have been swapped following a degree - distribution preserving rewiring algorithm . Such a process will destroy network clustering , there - fore , this deﬁnition depends on the type of rewiring procedure used to generate the null model . This work suggests that ( 1 ) the motif composition varies depending on the network function and ( 2 ) motifs may arise due to speciﬁc constraints placed on networks as they evolve , dictated by the dynamics which they host . Since clustering Figure 2 . 2 : The family of three node connected subgraphs studied by Milo et al . in their seminal work on network motifs [ 49 ] . Note that these motifs are directed . measures only triangles , the research community has looked at characterising networks by their motif or subgraph composition , and this approach has gained signiﬁcant trac - tion [ 11 , 19 , 28 , 29 , 62 , 63 ] . Deﬁnition 7 . A subgraph is a subset of nodes and edges found in a network . Figure 2 . 3 displays a few example subgraphs that are commonly studied in this thesis . It is important to consider that the deﬁnition of a motif will exclude subgraphs that appear with average frequency , or that are otherwise infrequent , even though they could serve an important function . Additionally , what will be deﬁned as a motif also depends on the type of re - wiring scheme used to generate the null model . To remedy this it was suggested that networks could be characterised , and subsequently compared , using their graphlet degree distributions [ 62 ] . The graphlet degree distribution is a generalisation of the degree distribution which speciﬁes the frequency with which graphlets appear around nodes . Knowing many of these distributions for a network will deﬁne much of the network structure . 18 G 0 G (cid:52) G (cid:31) G (cid:27) G (cid:2) G (cid:68) G (cid:55) Figure 2 . 3 : A few example subgraphs with their symbolic labels . These subgraphs are undirected and are those focused on in this work . Deﬁnition 8 . A graphlet is an induced subgraph , a subset of nodes and edges that contains all edges between the nodes that are found in a network . Consequently , subgraphs and their distributions have started to be more commonly incorporated into network construction algorithms and predictive models of dynamics on networks [ 19 , 24 , 28 , 32 , 58 ] . But , knowing the distributions of all subgraphs in a net - works is not plausible for networks of realistic size . Accordingly , it is more pragmatic to approximate network structure using smaller families of subgraph distributions . Where this has been investigated there is a consensus that a relatively modest number of sub - graph distributions is enough to accurately reproduce many network metrics [ 30 , 62 ] . However since this method is an approximation the exact topologies around nodes will still be unknown . For example , when placing many subgraphs around nodes a natu - ral side - eﬀect may be the compounding of subgraphs into more complex topologies , in addition to what is speciﬁed by the subgraph distribution . Deﬁnition 9 . Higher - order structure : topologies that result from the placement and compounding of subgraphs around nodes that is often not captured by classical network metrics . For example , compound triangles forming hexagons . Higher - order structure has received very little attention to date . However , previous work has suggested that ﬁxing degree distribution and clustering still allows to generate 19 distinct and diverse networks [ 6 , 20 ] , whilst others suggest that knowing much about the arrangement of triangles , without going beyond triples , is enough to determine much of the network structure [ 30 ] . A central premise of this work is that higher - order structure is both interesting and important , and it is our goal to present evidence to back this statement . Currently , there are few network generating algorithms and models that have the necessary features to isolate the eﬀects of higher - order structure , and these must ﬁrst be developed . In the following , we review the current arsenal of network generating algorithms and models that have provided the foundations for this work . 2 . 2 Network models and generation 2 . 2 . 1 Erd˝os - R´enyi Random graphs The most simple algorithm for the generation of simple undirected networks is that of Erd˝os - R´enyi Random graphs [ 15 ] , henceforth referred to as ER random graphs . It could be argued that this pioneering work in graph theory is the forefather of the contemporary study of random graphs , networks and complex networks , networks with structure more sophisticated than that found in ER random graphs . To create a network following this method , ﬁrst a network of N nodes is initiated . Then each pairing of nodes is considered in turn , and a connection is formed with probability p , or with probability 1 − p the nodes are left unconnected . In a network of N nodes there are (cid:0) N 2 (cid:1) potential pairings of which an average of p (cid:0) N 2 (cid:1) will be realised . From this information it is possible to compute the resulting degree distribution . Each node in the network is connected to any other of the N − 1 nodes with probability p . Therefore the probability of a node being connected to exactly k other vertices is p k ( 1 − p ) n − 1 − k . There are (cid:0) N − 1 k (cid:1) ways to choose k other nodes , so the probability of a node having degree k is p k = (cid:18) N − 1 k (cid:19) p k ( 1 − p ) N − 1 − k , which is the probability mass function of the Binomial distribution . However , since not all networks exhibit a binomial distribution of edges , this model is limited in application . 20 2 . 2 . 2 The conﬁguration model The conﬁguration model builds on the idea of ER random graphs but in this model one can ﬁx the degree sequence a priori . This model was originally presented by Bollob´as in [ 10 ] and later popularised by Newman in [ 56 ] . The conﬁguration model features heavily in this work and therefore a relatively thorough review of this method is presented . To construct a conﬁguration model network for a given degree sequence , D = ( d 1 , d 2 , . . . , d N ) , perform the following steps : 1 . initialise a network of N nodes , 2 . allocate each node with a number of half - edges or stubs speciﬁed by D so that node i is incident to d i stubs , 3 . select a stub uniformly at random , 4 . select a second stub uniformly at random from all remaining stubs , 5 . join the two stubs to form an edge , 6 . return to step 3 until all stubs are paired , Figure 2 . 4 shows this process for a small example network . For this process to suc - cessfully complete , it is necessary that the input degree sequence must sum to an even number , otherwise the connection process would terminate with a single unconnected stub . Furthermore , the conﬁguration model will naturally produce a multi - graph : it is possible when selecting pairs of stubs that two stubs incident to the same node are selected , forming a self - edge , or that the stubs incident to a pair of nodes that already share an edge are selected , forming a multi - edge . If one wishes to construct a simple graph , that is A ( i , i ) = 0 and max { A ( i , j ) } = 1 for every i , j ∈ ( 1 , 2 , . . . , N ) there are three possible courses of action : 1 . The matching algorithm : if a pair of stubs is selected that would result in a multi - or self - edge disregard them and make a new selection [ 50 ] . This method will result in a simple graph that preserves the input sequence but is known to produce biased 21 Initialisation Step 1 Step 2 Step 3 . . . Step 11 Figure 2 . 4 : An example of the conﬁguration model procedure on a small network of 8 nodes . A network is initialised with a number of nodes and each node is incident to a number of stubs that is speciﬁed by the input degree sequence . The algorithm proceeds to pair stubs at random to form edges . The process is complete once there are no remaining stubs . 22 results , i . e . , does not sample uniformly from the space of all possible conﬁguration model networks of given degree sequence [ 39 ] . 2 . The refusal algorithm : if a pair of stubs is selected that would result in a multi - or self - edge start the entire connection process from anew . This method yields no bias , will result in a simple graph and preserves the input sequence . However it will result in prohibitive running times for networks with higher average degree [ 39 ] . 3 . The deleted conﬁguration model : at the end of the procedure delete any self - edge and collapse multi - edges down to a single edge . However , this will result in a network with a distribution of edges that does not precisely reﬂect the input degree sequence . One of the great strengths of the conﬁguration model is its tractability ; it is relatively straightforward to estimate the probability of problematic edges occurring and show that they form a minuscule proportion of all edges for large networks . This result is essential when mitigating against the conﬁguration model generating multi - graphs . To estimate the number of multi - edges consider node i with degree k i . One may assume without loss of generality that k i > 0 since degree zero nodes can be disregarded from the network . In a network of 2 m stubs the probability of a single stub from node i connecting to another stub incident node j with degree k j > 0 is k j 2 m − 1 . However , node i is incident to k i stubs so the probability of node i being connected to node j is k i k j 2 m − 1 . Using this information it is straightforward to estimate the probability that two edges connect the same pair of nodes , namely P ( A ( i , j ) > 1 ) = k i k j ( k i − 1 ) ( k j − 1 ) ( 2 m − 1 ) ( 2 m − 2 ) . Adding this quantity over all pairs of nodes in the limit of a large conﬁguration model network yields the following lim N →∞ 1 2 N (cid:88) i = 1 N (cid:88) j = 1 j (cid:54) = i k i ( k i − 1 ) k j ( k j − 1 ) ( 2 m − 1 ) ( 2 m − 2 ) ( 2 . 3 ) 23 = lim N →∞ 1 2 N (cid:88) i = 1 N (cid:88) j = 1 j (cid:54) = i k i ( k i − 1 ) k j ( k j − 1 ) ( 2 m ) 2 = lim N →∞ 1 2 N (cid:88) i = 1 N (cid:88) j = 1 j (cid:54) = i k i ( k i − 1 ) k j ( k j − 1 ) ( N (cid:104) k (cid:105) ) 2 = lim N →∞ 1 2 N (cid:88) i = 1 k i ( k i − 1 ) N (cid:104) k (cid:105) N (cid:88) j = 1 k j ( k j − 1 ) N (cid:104) k (cid:105) = 1 2 (cid:18) (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) (cid:104) k (cid:105) (cid:19) 2 , where the additional coeﬃcient of 2 in the denominator is used to cancel the double count and the following were used 2 m = N (cid:104) k (cid:105) , (cid:104) k (cid:105) = 1 N N (cid:88) i = 1 k i , (cid:104) k 2 (cid:105) = 1 N N (cid:88) i = 1 k 2 i . ( 2 . 4 ) Therefore the number of multi - edges is constant with respect to network size . There is a similar calculation for self - edges . A node of degree k i has a total of k i ( k i − 1 ) / 2 unique stub pairings . Upon selecting a single stub from this node the probability of selecting a second stub also incident to this node is P ( A ( i , i ) = 1 ) = k i ( k i − 1 ) 2 ( 2 m − 1 ) ⇒ lim N →∞ k i ( k i − 1 ) 2 ( 2 m − 1 ) = lim N →∞ k i ( k i − 1 ) 4 m . Adding this quantity over all pairs of nodes in the limit of a large conﬁguration model network yields the following lim N →∞ N (cid:88) i = 1 k i ( k i − 1 ) 4 m = (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) 2 (cid:104) k (cid:105) . ( 2 . 5 ) Equations ( 2 . 3 ) and ( 2 . 5 ) both show that the number of self - and multi - edges in the network does not depend on network size but only on the ﬁrst and second moments of the degree distribution . This result is important when one wishes to mitigate against the eﬀects of self - and multi - edges using the matching algorithm or the deleted conﬁguration model . With increasing network size , and therefore increasing number of total edges , the number of problematic edges vanishes proportionally compared to all edges . 24 2 . 2 . 3 Lattice and bipartite rewiring Watts & Strogatz provided a pioneering approach to generating complex networks by noticing that certain lattices were highly clustered and that by rewiring only a few edges at random the average path length of the network drastically dropped , so called lattice rewiring [ 78 ] . Their model characterises networks that have a relatively small average path length , the average number of steps in all shortest paths between all possible pairs of nodes , with relatively high clustering . Such networks are referred to as small - world networks . This elegant model is far from anecdotal ; the unique combination of traits of small - world networks results in networks that are both globally and locally eﬃcient , as is observed in many biological and technological networks [ 40 , 70 , 78 ] . It is possible to perform a similar process but initialised with a bipartite network as opposed to a lattice . A bipartite network , such as that shown in the top of Figure 2 . 5 , is a network where two types of nodes form two disjoint groups . With populations often divided into groups , a bipartite network can be an appropriate choice of model , with one node class representing people and the other representing a group to which people belong [ 21 , 55 ] . By representing each group with a complete subgraph , a larger network with non - zero clustering will form , as shown in Figure 2 . 5 . To control the average degree , edges can be deleted from groups at random . These models represent some of the ﬁrst network models based on realistic construction procedures . This work was the ﬁrst to uncover that an increase in clustering corresponds to a network that becomes locally insular in structure . Using this model it was also subsequently shown that an increase in the global clustering coeﬃcient corresponds to an increase in epidemic threshold , see [ 36 ] , due to the increased local eﬃciency of the clustering [ 40 ] . However , whist the models can target a speciﬁc mean degree (cid:104) k (cid:105) , they do not preserve the degree distribution in general [ 36 ] . 2 . 2 . 4 Clustered random networks Just as the conﬁguration model represents a generalisation of the ER model , clustered random graphs may be considered a generalisation of the conﬁguration model . It is characteristic of these methods to require as input a desired global clustering coeﬃcient 25 a b c d 1 2 3 4 5 6 7 8 9 2 4 5 3 6 7 8 9 1 Figure 2 . 5 : Creating a clustered network from a bipartite network . The four groups , { a , b , c , d } are represented by the four subgraphs { { 1 , 2 , 3 } , { 2 , 3 , 4 , 5 } , { 5 , 6 , 7 } , { 7 , 8 , 9 } } respectively . 26 and / or a input degree distribution . The algorithm will then yield a network with the desired properties . Whilst some of the ﬁrst and subsequent attempts targeted only the global clustering coeﬃcient at the cost of the degree distribution they still provided valuable insight into the impact of clustering on network structure and function [ 14 , 21 , 55 , 58 , 76 ] . It was again found that an increase in clustering corresponds to a network that becomes locally insular in structure . Nodes with higher local clustering were using edges to connect to ‘friends - of - friends’ rather than looking beyond their immediate neighbourhood , see Figure 2 . 6 . This naturally impacts the size of the giant component [ 58 ] and , in turn , results in epidemics on clustered networks yielding fewer cumulative infected relative to networks with lower clustering [ 33 ] . a ? ? a No clustering Increased clustering Figure 2 . 6 : As the local clustering about node a increases , edges that would connect to the wider network must instead be used to connect to nodes that a is already relatively close to . Models that target a given degree sequence and global clustering coeﬃcient are fewer but do exist , see [ 68 , 74 ] for examples . These models showed that increasing clustering may result in the network decomposing into small satellite sub - networks . This class of models was further enhanced by being able to specify how clustering aggregated 27 around nodes of a certain degree [ 68 ] , uncovering the interplay between clustering and degree - degree correlations , i . e . , positive and negative assortativity coeﬃcients allow - ing for higher clustering and putting a tight bound on the highest possible clustering respectively . 2 . 2 . 5 Rewiring algorithms Rewiring algorithms operate by selecting edges severing them , resulting in stubs , and reconnecting the stubs in a diﬀerent conﬁguration , so called edge swapping . This process is then repeated until a desired network property has been reached . These algorithms are applied to pre - constructed networks . At the most basic level one could select a random edge for deletion then select a random pair of nodes and form a new edge . However , this process would destroy the degree distribution . Instead , if two randomly selected edges are cut and the resulting stubs rewired to form two new edge pairs , the degree distribution will be preserved . However , this process process will resolve assortativity , or associativity , and clustering back to zero . Another consideration is the running time of such a process . For example , randomly swapping edges to greatly increase clustering network may take a considerable amount of time . This can be remedied with a Metropolis approach whereby the edges are rewired only if it results in an increase of the global clustering coeﬃcient [ 35 ] . This algorithm has subsequently been improved by selecting certain arrangements of nodes and rewiring only speciﬁc edges so that : ( 1 ) the degrees were preserved and ( 2 ) a triangle would be more likely to be introduced [ 6 , 24 ] . Such approaches are heavily relied upon and often form the basis for comparisons of clustered networks [ 20 , 65 – 67 ] . More recently , a rewiring scheme has been proposed that preserves not only assor - tativity but also correlations between subgraphs of three or more nodes [ 43 ] . If one selects two edges , A − B and C − D so that two of the four nodes , A and D , belong to the same degree class then the following rewiring , A − C and B − C preserves the degree correlation . The above scheme is referred to as 2 K - preserving rewiring and is motivated by the dK - series , a series of families of distributions that specify the preponderance of non - isomorphic subgraphs of size d . For example , the 0 K / 1 K / 2 K - distributions cap - 28 ture average degree , degree distribution and assortativity respectively . Jamakovic et al . show how the above rewiring scheme is extended to 3 K - preserving rewiring [ 30 ] . These rewiring schemes are then applied to real - world networks to randomise the networks’ structure beyond that of triangles . The authors also provide dK - targeting algorithms , that re - wire networks to increase a given property rather than anneal it . The authors make the important ﬁnding that the family of 3 K - distributions is suﬃcient to not only capture many of the classical network metrics but also determine much of the motif structure for motifs composed of 4 nodes . A number of open questions remain , such as : ( i ) do 3 K - distributions reveal any information regarding motifs of 5 nodes or more , ( ii ) what is the impact of 3 K - distributions on subgraphs that are not classiﬁed as motifs and ( iii ) what is the impact of all of this on network function . 2 . 2 . 6 Isolating higher - order structure A network’s degree distribution and clustering are key descriptions of network struc - ture . Therefore for any network generation algorithm to support an investigation into higher - order structure , it must allow to vary the higher - order structure whilst keeping these canonical descriptions ﬁxed . The work described in this thesis achieves this by building networks using the same degree distribution and global clustering coeﬃcient but constructed using diﬀerent subgraphs as building blocks . This style of building net - works is not new [ 32 , 58 , 76 ] , however , it is still not clear to what extent such diﬀerences impact on network function . In this work , impact of higher - order structure on network function will be tested using epidemiological models such as contagion processes . 2 . 3 Epidemic models 2 . 3 . 1 Compartmental models Mathematical epidemiology is the study of infectious diseases in populations using mathematical modelling . Mathematical expressions are derived to , at least partially , capture the behaviour of an epidemic spreading through a population , such as the number of infected at a given time . Compartmental modelling , introduced by Kermack 29 and McKendrick in 1927 , represents one of the ﬁrst of such models [ 34 ] . More than this , it provides the blueprint for much of the contemporary work on this subject . The problem may be stated thus : a single infected / contagious individual is intro - duced into a population of entirely susceptible individuals . When the infected individual meets a susceptible individual the pathogen has a chance to spread . If a susceptible individual catches the illness they become infected and so , in turn , can spread the disease . After a certain amount of time infected individuals recover , they no longer are contagious and are removed from the population [ 34 ] . Kermack and McKendrick proposed that a population may be compartmentalised to help characterise this phe - nomenon , i . e . , divide the population into three classes : Susceptible ( S ) , infected ( I ) and recovered ( R ) . The idea is to form equations for S ( t ) , I ( t ) and R ( t ) , the number of individuals in each compartment at time t . However , some simplifying assumptions are needed : 1 . The time scale of infection is considerably smaller than the life - span of the indi - viduals in the population . We therefore assume that N = S ( t ) + I ( t ) + R ( t ) , i . e . , the population is closed . 2 . Infected individuals transmit infection at a rate β . 3 . Infected individuals recover independently at rate γ . 4 . Each individual is equally likely to meet any other individual . These assumptions allow one to write dS dt = − β S ( t ) I ( t ) N , ( 2 . 6 ) dI dt = β S ( t ) I ( t ) N − γI ( t ) , dR dt = γI ( t ) . Many variations of this system exist . Most commonly used are susceptible - infected susceptible ( SIS ) and susceptible - infected SI models where infected individual recover back into the susceptible state or remain perpetually infected respectively . In this thesis both SIS and SIR dynamics are used extensively . 30 Whilst compartmental modelling is generally very powerful , this ﬁrst incarnation is limited in application due to the 4 th assumption listed above . The network equivalent of this assumption is to model the population’s structure by a complete network . This may be plausible for modelling animal populations that are contained in pens but it is clearly an unrealistic assumption for populations in general . However , networks provide a highly malleable approach to modelling population structure in the context of epidemics . 2 . 3 . 2 Epidemics on networks Theoretical approaches There are two ways in which compartmental modelling may be implemented alongside a network model . Theoretically , the equations are somehow modiﬁed to account for network structure . Computationally , Sections 2 . 1 and 2 . 2 have described how to char - acterise and generate networks . All that remains is to select an appropriate method to simulating epidemic dynamics on the networks . This shall be addressed in the subse - quent section . For any given network there is a theoretical and exact way of describing the evolution of the epidemic . This is achieved by writing out the exact Kolmogorov or master equations that describe the probability of the system being any one of all of its possible states . Whilst this sounds ideal it requires 2 N and 3 N , where N denotes population size , equations for SIS and SIR epidemics respectively . Hence , this is unsuitable for realistic population sizes and a diﬀerent approach is required . Fortunately this problem has received much attention and there is a large arsenal of theoretical approaches , including : moment closure approximations [ 24 , 28 , 33 , 37 , 73 ] , eﬀective degree [ 41 , 44 ] , heterogeneous mixing [ 22 , 51 ] and probability generating function ( PGF ) based approaches [ 45 , 54 , 75 , 76 ] . The PGF based approach to this problem , ﬁrst introduced by Newman [ 54 ] , and further developed by Volz , see [ 75 ] , is particularly relevant to Chapter 4 of this thesis . Using the PGF of the degree distribution it is possible to describe both the connectivity of a randomly selected node and that of its neighbours . The connectivity of a randomly 31 selected nodes’ neighbour may be derived from the PGF and is referred to as the ex - cess degree distribution . For an example of this , please refer to Chapter 4 . Using this approach , Karrer and Newman later showed how it may be generalised to include arbi - trary subgraphs [ 32 ] . This result is critical to the third chapter of this thesis where we show that it is possible to derive an approximate ordinary diﬀerential equation ( ODE ) for epidemics that run on networks composed of arbitrary distributions of subgraphs . Validation of the model is typically done by developing a network generation algo - rithm followed by simulating epidemics on the generated networks and by comparing these to results from the ODE model which needs to be able to incorporate and reﬂect the structure of the network . This is a critical property of the ODE model and the more complex the structure of the network the higher dimensional the ODE model . Simulation of epidemics Throughout this thesis , the Gillespie algorithm is used to simulate epidemic dynamics [ 17 , 18 ] . To simulate an SIR epidemic following this algorithm perform the following steps : 1 . Determine the parameters ; set values for the per - link rate of infection , τ , and the rate of recovery γ . 2 . Initialization ; initialise the population as susceptible and from this population selected an initial infectious seed , i . e . , S ( 0 ) = N − I ( 0 ) , I ( 0 ) = I 0 : 0 < I 0 (cid:28) N , R ( 0 ) = 0 , T ( 0 ) = 0 . 3 . Create a list of all possible infectious events ; refer to the adjacency matrix to de - termine the number of edges that connect a susceptible node to an infectious node . Represent each element in this list by the associated per - link rate of infection , τ . 4 . Create a list all possible recovery events ; each infected node appears once in this list and is represented by the associated recovery rate γ . 5 . Determine the time until the next event ; sum all rates associated with all events into a single rate and then use this rate as the parameter in an exponential 32 distribution to determine the time until the next event , t . Update : T ( n + 1 ) = T ( n ) + t . 6 . Monte Carlo step , determination of the next event ; select an event at random but proportional to the total rate associated with that event if the next event is : ( a ) an infection ; update S ( n + 1 ) = S ( n ) − 1 , I ( n + 1 ) = I ( n ) + 1 . Then update the number of susceptible - infected links and corresponding rates , ( b ) recovery : update I ( t + 1 ) = I ( t ) − 1 and R ( t + 1 ) = R ( t ) + 1 . Then update the list of rates of infectious as well as recovery events . 7 . Return to step 5 and repeat this process until there are no remaining infected individuals . This algorithm can be easily modiﬁed to simulate an SIS epidemic by modiﬁed steps 6 . b to I ( t + 1 ) = I ( t ) − 1 and S ( t + 1 ) = S ( t ) + 1 . The above algorithm will yield 4 vectors : S , I , R and T that denote population level counts for the susceptible , infected and recovered populations as well a vector that marks the time at which event took place . Note that this algorithm is : ( 1 ) asynchronous , i . e . , non - uniform time steps ( 2 ) continuous in time and ( 3 ) fully stochastic . In this thesis , to eliminate the eﬀects of stochasticity , the average population counts of many simulations is taken . However , because the time steps are non - uniform the raw output must be further processed into uniform times steps before averages can be taken . Figure 2 . 7 shows example output from the Gillespie algorithm . The merit of being able to capture the average of many stochastic simulations of an epidemic on networks with tractable ODE or other models is that it allows us to develop some deeper analytical understanding of the relationship between network characteristics and disease parameters . This is particularly revealing when looking at epidemic threshold , ﬁnal epidemic size and endemic equilibrium . Epidemic models have been used widely to unravel the impact of diﬀerent network characteristics . Such models continue to play an important role in understanding the impact of ﬁner network structure by simply comparing epidemics simulated on what are believed to be similar , 33 Time 10 - 2 10 - 1 I n f e c t ed 0 5 10 15 20 25 30 Time 0 1 2 3 4 5 6 I n f e c t ed 0 100 200 300 400 500 600 700 Raw output Cloud plot Figure 2 . 7 : Two plots displaying output based on the Gillespie algorithms . The left hand ﬁgure shows the raw output of the Gillespie algorithm with its irregular time intervals . The right hand ﬁgure shows many individual simulations and their average , plotted in blue and red respectively . or otherwise , networks . We use this method throughout the thesis to investigate the role and impact of higher - order structure on dynamics unfolding on networks . 34 Chapter 3 Paper I : Higher - order structure and epidemic dynamics in clustered networks Martin Ritchie 1 , Luc Berthouze 2 , 3 , Thomas House 4 & Istvan Z . Kiss 1 1 School of Mathematical and Physical Sciences , Department of Mathematics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 2 Centre for Computational Neuroscience and Robotics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 3 Institute of Child Health , London , University College London , London WC1E 6BT , UK 4 Warwick Mathematics Institute , University of Warwick , Gibbet Hill Road , Coventry , CV4 7AL , UK Journal of Theoretical Biology - 2014 35 3 . 1 Introduction In this chapter I aim to go beyond the traditional approach to clustering , open and closed triples , and give a more comprehensive description of networks in terms of higher - order structure frequency ( speciﬁcally order - four structures ) and their distribu - tion around nodes . In particular , I will examine existing clustered network generating algorithms with respect to their ability , or otherwise , to control higher - order network structure which sometimes may be regarded as a by - product of generating low - order structure that can preclude a correct interpretation of the impact of clustering . The chapter is structured as follows . We ﬁrst introduce and describe a set of clustered network generating algorithms . I follow with a presentation of the network metrics ( including a description of the motif identifying / counting algorithm ) that I propose to quantify similarities and diﬀerences between the generated networks . I then analyse and discuss the impact of higher - order structural diﬀerences , at identical degree dis - tribution and equal clustering , on SIS and SIR epidemics . Finally , I discuss how we motif - counting results and newly proposed measure for higher - order structures could be used to parametrise pairwise - like models with closure at the level of quadruples . 3 . 2 Material and methods 3 . 2 . 1 Network construction A signiﬁcant part of network research relies on networks with arbitrary degree distri - butions built using the conﬁguration model [ 58 ] . This algorithm generates networks where nodes mix at random and where the probability that two nodes are connected is simply proportional to the product of their degree . Such networks coupled with stochas - tic node dynamics such as SIS , SIR or neural dynamics , are amenable to developing macroscopic low - dimensional ODE models that are in excellent agreement with values obtained from stochastic simulations . By construction , these networks are cycle free in the limit of large network size . While such networks can be considered in many cases as realistic or plausible models of some real - world networks , there are many instances 36 where networks have a high degree of structure that typically involves clusters of well connected nodes . Classic examples come from household models used in epidemiology [ 3 , 5 ] , and networks of social interactions in general . Motivated by this , there are a series of theoretical or synthetic network models that can be tuned to display increased levels of clustering [ 6 , 14 , 32 , 58 , 64 , 76 ] , where clustering denotes the ratio of closed loops of length three with respect to all possible open triple , irrespective of whether they are closed or not . The classic algorithms to generate networks with tunable clustering include : ( a ) the spatial algorithm by Reed et al . [ 64 ] , ( b ) an iterative method proposed by Eames [ 14 ] , ( c ) a conﬁguration model that includes clustering [ 32 ] and ( d ) the Big - V rewiring algorithm [ 6 , 26 ] . In a recent study , Green et al . [ 20 ] showed that even under identical degree distributions and equal levels of clustering , networks built based on diﬀerent algorithms can display a markedly diﬀerent ‘higher - order structure’ . While their anal - ysis identiﬁed large scale structural diﬀerences amongst networks with identical degree distribution and clustering , it did not consider extending the concept of clustering in - volving three nodes to higher - order structures with four or more nodes . The concept of motifs is not new [ 27 , 32 , 33 , 71 , 76 ] and understanding network structure through higher - order motifs is going to provide a level of detail which cannot be articulated by open or connected triples alone . Below I provide a brief description of the clustered network construction algorithms used in this chapter . Big - V rewiring The ‘Big - V’ is an iterative rewiring algorithm that can introduce clustering into any given network and is commonly used by network scientists [ 6 , 20 , 26 ] . At each iterative step , a chain of 5 distinct nodes ( u - v - w - x - y ) is selected at random and a clone network is generated where the links ( u - v ) and ( x - y ) are broken and the edges ( u - y ) and ( v - x ) are created . This leads to a single chain of 5 nodes being broken into a triangle and a disconnected pair , see Fig . 3 . 1 . Local clustering for each node in the chain , as well as all of its neighbours , is computed in both the original and cloned networks and the new conﬁguration is kept only if the level of clustering has increased . This process is repeated until the global clustering coeﬃcient has reached the desired level . 37 u v w x y u v w x y Figure 3 . 1 : A single Big - V rewiring . ( a ) Identify a chain of 5 nodes with 4 edges and ( b ) if edges ( u - v ) or ( x - y ) are already part of a triangle the cuts will not be made , otherwise rewiring is performed , and ( c ) independently of the outcome of ( b ) the algorithm will proceed to ﬁnd a new chain . Motif decomposition rewiring MD ( Motif Decomposition ) , contributed by Thomas House , is an iterative rewiring algorithm that starts with a collection of complete subgraphs that are disconnected from one another and rewires edges randomly to reduce the clustering from its maximal value of 1 to the desired level . The following steps are performed : i . initialise a network that is composed of m complete graphs each with n members so that : N = nm and (cid:104) k (cid:105) = n − 1 , ii . categorize every edge as ‘local’ , iii . for the ﬁrst step only , select at random two local edges , cut them , and swap the stubs to form new edges . Mark the pair of new edges as global , iv . select a local and a global edge , cut them , and swap the stubs to form new edges . Mark the pair of new edges as global , v . check the global clustering , if the desired level has not been achieved repeat step ( iv ) . Fig . 3 . 2 illustrates this process being performed on a complete motif with 4 members . It should be noted that this method may work with a heterogeneous degree distribution in which case the network would need to be initialised with motifs of k + 1 nodes for each diﬀerent degree k . MD has the signiﬁcant advantage that it is computationally 38 cheap and that , in the limit of large networks , network properties can be calculated analytically ( see appendix 3 . 5 . 1 ) . Figure 3 . 2 : MD hyper - node conﬁgurations . The diﬀerent possible hypernode conﬁgu - rations starting with a complete square . The process transitions between hypernode conﬁgurations at rate λ , which is included for clarity and may be set to one without loss of generality . Clustered Conﬁguration Model ( CCM ) It is possible to modify the conﬁguration model so that it constructs networks using speciﬁed motifs . Karrer et al . [ 32 ] and Volz et al . [ 76 ] have shown how to build networks using a conﬁguration model that includes triangle motifs . This idea may be easily extended to allow for larger and more exotic motifs to be included in the networks’ construction . Rather than just lines , the number of lines and corners of motifs that originate from a node can be varied . In any given motif a node can be considered as a corner and the number of stubs originating from this node that join it to the motif 39 deﬁnes its corner type , essential in describing corners of asymmetric structures . To generate a network using this method , the following steps are performed : 1 . allocate to a node a number of stubs following a given degree distribution , 2 . multinomially determine the conﬁguration of subgraphs around nodes , 3 . create lists for each corner type where a node that is allocated κ corners of a certain type , will appear κ times in the corresponding corner list , 4 . draw corners at random and without replacement from the appropriate lists and connect with other corners to form motifs , 5 . repeat until all lists are empty . Fig . 3 . 3 illustrates corner allocation for an example node . Due to the nature of the conﬁguration model self loops and double loops may be formed . The expected number of such occurrences depends only on degree , becoming negligibly small in the limit of large networks [ 57 ] . ( p 1 ) ( p 2 ) ( p 3 ) ( p 4 ) Figure 3 . 3 : Corner / edge allocation . A node is initially allocated a quintuple of stubs . With probability p 1 , p 2 , p 3 and p 4 the node will be part of a number of diﬀerent structures as shown above . In this work homogeneous networks where each node is incident to ﬁve edges have been used . If a diﬀerent degree or degree distribution is required then the conﬁguration of motifs will need to be adjusted accordingly . 40 Lines Triangles Complete squares φ = 0 . 2 2 . 5 0 . 5 0 . 5 φ = 0 . 4 0 1 1 Table 3 . 1 : The expected number of lines , triangles and complete squares per node for each level of clustering used . In this chapter homogeneous , where each node is incident ﬁve edges , CCM networks are used with clustering of φ = 0 . 2 and φ = 0 . 4 . The stub conﬁgurations to generate such networks are as follows : 1 . φ = 0 . 2 : with probability p 1 = 0 . 5 the quintuple of stubs is maintained as inde - pendent links , and with probability p 2 = 1 − p 1 the quintuple is arranged into one complete square corner and one triangle corner , 2 . φ = 0 . 4 : every node is allocated one complete square corner and one triangle corner , 3 . φ = 0 . 8 : as this algorithm does not allow overlaps between motifs , this value of clustering cannot be achieved . Table 3 . 1 shows the expected motif allocation per node . The conﬁguration model allow us to analytically determine some of the networks structural properties , more speciﬁcally the PGF ( Probability Generating Function ) of the degree / motif distribution . The CCM algorithm for this work was conﬁgured as follows . First , initialise each node with ﬁve stubs . Then let p 1 denote the probability that the ﬁve stubs form lines , p 2 two triangles and one line , p 3 one complete square and one triangle and p 4 two empty squares and one line . The probabilities are chosen such that (cid:80) i p i = 1 . Let x i denote the dummy variables of the PGF that corresponds to corner types : x 1 ( simple stubs ) , x 2 ( two triangles and a simple stub ) , x 3 ( a complete square and a triangle ) , x 4 ( two empty squares and a simple stub ) . The PGF of the networks degree / corner distribution may now be written as : Ψ ( x 1 , x 2 , x 3 , x 4 ) = x 51 p 1 + x 1 x 22 p 2 + x 2 x 3 p 3 + x 1 x 24 p 4 , ( 3 . 1 ) 41 and the original stub distribution may be recovered by substituting each x i with x n 1 where n is the corner - stub cardinality : ψ ( x 1 ) = x 51 p 1 + x 1 ( x 21 ) 2 p 2 + x 21 x 31 p 3 + x 1 ( x 21 ) 2 p 4 ( 3 . 2 ) = x 51 ( p 1 + p 2 + p 3 + p 4 ) = x 51 . ( 3 . 3 ) ψ (cid:48) ( 1 ) yields the expected degree , and Nψ (cid:48)(cid:48) ( 1 ) / 2 yields the number of paths of length three in the network [ 76 ] . The number of unique triangles in the network can be determined by Ψ : [ (cid:52) ] = N (cid:18) Ψ x 2 ( 1 , 1 , 1 , 1 ) 3 + 4 · Ψ x 3 ( 1 , 1 , 1 , 1 ) 4 (cid:19) , ( 3 . 4 ) since each square is quadruply counted and contains four separate triangles . Clustering is measured as the ratio of three times the number of triangles to all closed and unclosed triples : φ global = 3 N (cid:16) Ψ x 2 ( 1 , 1 , 1 , 1 ) 3 + Ψ x 3 ( 1 , 1 , 1 , 1 ) (cid:17) Nψ (cid:48)(cid:48) ( 1 ) ( 3 . 5 ) = Ψ x 2 ( 1 , 1 , 1 , 1 ) + 3Ψ x 3 ( 1 , 1 , 1 , 1 ) ψ (cid:48)(cid:48) ( 1 ) ( 3 . 6 ) = p 2 + 2 p 3 5 ( 3 . 7 ) For the two types of CCM networks used in this study : p 1 = 0 . 5 , p 3 = 0 . 5 yields φ = 0 . 2 and p 3 = 1 yields φ = 0 . 4 ( see table 3 . 1 ) . 3 . 2 . 2 Network metrics : Third and higher - order network struc - ture Here I give a succinct summary of the classic and newly proposed network metrics that will be used to compare and contrast the networks resulting from the diﬀerent algorithms . Although the novelty of the chapter is around order - four structure , I will ﬁrst consider classic ( or third - order ) network measures , such as clustering in the global sense as well as distribution of clustering at node level , nodal betweenness centrality , and connected component analysis via percolation . I then augment the classic network 42 descriptions with an analysis of the distribution of motifs of order higher than closed and open triples both globally and on a per node basis . A network of N individuals is represented with an adjacency matrix , A ∈ { 0 , 1 } N 2 . A pair of individuals ( i , j ) share a connection if A i , j = 1 . The networks are undirected , A = A T , and self loops are not allowed A i , i = 0 , ∀ i ∈ N . Clustering Clustering may be deﬁned in two ways [ 78 ] : Local ( node level ) and global ( network level ) . The local clustering of a node n , of degree n k , is the ratio of connections between neighbours of n and potential connections of neighbours of n . Let N denote the sub - adjacency matrix of the neighbourhood of n then : φ local = (cid:80) i , j N i , j / 2 n k ( n k − 1 ) / 2 . ( 3 . 8 ) Global clustering is deﬁned as the ratio of the total number of closed triples to the total number of connected structures with 3 nodes . This may be computed from the adjacency matrix as [ 33 ] : φ global = trace ( A 3 ) (cid:107) A 2 (cid:107) − trace ( A 2 ) , ( 3 . 9 ) where (cid:107) A 2 (cid:107) denotes the sum of all elements of A 2 . Manipulating the adjacency matrix in this way yields multiplicative counts . An alternative method to obtain the equivalent counts is as follows : [ ∨ + (cid:52) ] = (cid:88) i , j , k , i (cid:54) = j (cid:54) = k a i , j a j , k , ( 3 . 10 ) yielding all connected structures of 3 nodes ( closed and unclosed ) , similarly [ (cid:52) ] = (cid:88) i , j , k , i (cid:54) = j (cid:54) = k a i , j a i , k a j , k , ( 3 . 11 ) yielding six times the number of unique triangles . A more complete description of this approach is provided in Appendix 3 . 5 . 3 , along with a conjecture of a possible mapping between unique and multiplicative counts . 43 Nodal betweenness centrality Nodal betweenness centrality measures how often a node appears in the set of shortest paths ( which I shall denote s ) , geodesics , of the network [ 16 ] . Nodes with high between - ness centrality will more frequently appear in shortest paths than low ranked nodes . The betweenness centrality of a node n can be computed by : B bc ( n ) = (cid:80) i (cid:54) = j (cid:54) = n s i , j ( n ) | s i , j | , ( 3 . 12 ) where s i , j ( n ) denotes the number of shortest paths from i to j that contain node n . The removal of nodes with high betweenness centrality can signiﬁcantly aﬀect the ﬂow of dynamical processes on the network [ 57 ] . Connected component analysis CCs ( Connected components ) are sets of nodes where any node may be reached from any other node that is a member of the set . CCs are used to describe the macroscopic structure of a network , as opposed to clustering which describes the local structure of the network . Highly clustered networks contain many components that are weakly connected to , or disconnected from , one another . It has previously been shown [ 20 ] that the GCCs ( Giant Connected Component ) of highly clustered networks are composed of many CCs of varying size and that removing a low proportion of edges can be enough to isolate parts of the network . To perform the analysis : I generate a list of all edges in a network , cycle through each edge in the list and remove it with probability p r , compute the size and frequency of all components remaining , and plot the cumulative distribution of component size . Motif frequency and distribution Clustering ( local or global ) essentially measures the occurrence of triangles in a net - work . It does not distinguish two separate triangles from two triangles that share an edge , neither can it describe cycles of order - four or larger . From the perspective of characterising higher - order structure it is a very coarse measurement . In this chapter 44 all cycles of order - four i . e . empty squares , diagonal squares , and complete squares mo - tifs , see Fig . 2 . 3 are considered at both network and node levels . It is possible to deﬁne new clustering type metrics using structures larger than triangles . Proceeding in a way similar to classic ( third - order ) clustering and limiting ourselves to 4 - node structures connected in a loop , it is possible to deﬁne four new structural measurements : the ratio of unclosed quadruples ( 1 − φ 14 ) , ‘empty’ squares ( φ 24 ) , squares with a single diagonal ( φ 34 ) , and complete squares ( φ 44 ) to all connected structures of 4 nodes . I present we re - sults in two formats : ( i ) global ratios of unique order - four structure counts to all unique paths counts , closed and unclosed . ( ii ) probability distribution of ﬁnding x structures of a certain type associated with a given node . These measurements alongside cluster - ing will provide a higher resolution analysis of network architecture . A brief synopsis of how to compute non - trivial paths of length l + 1 is as follows ( see appendix 3 . 5 . 2 for the full pseudo - code , all path lengths refer to the number of edges and A ( · , · ) is the adjacency matrix ) : 1 . consider a path P of length l , and identify a head H ( P ) ( 1 st node of the path ) and a tail T ( P ) ( the last node ) . 2 . For each neighbour n of T ( P ) , if ( i ) A ( H ( P ) , n ) = 1 , ( ii ) it has not already been counted as a closed path , and ( iii ) its reverse has not been counted as a closed path then count a closed path of length l + 1 , 3 . for each neighbour n of T ( P ) , if ( i ) A ( H ( P ) , n ) = 0 , ( ii ) it has not already been counted as an open path , and ( iii ) its reverse has not been counted as an open path then count an open path of length l + 1 , 4 . for all closed paths of length l + 1 remove circular and reverse circular permuta - tions , 5 . categorize each closed path by its completeness , i . e . , the number ( if any ) of diag - onals in a square . 45 3 . 2 . 3 Dynamics on networks To establish the overall impact of higher - order network structure , simulations of various dynamics are performed on the generated networks . First , I use the Markovian SIR ( susceptible - infected - recovered ) model with a per - contact infection rate τ and recovery rate γ . All simulations are performed using the Gillespie algorithm [ 17 ] ( see Chapter . 2 . To assess the impact of loops and cycles , I also simulate the SIS epidemic which is more likely to highlight diﬀerences in the cycle / motif composition . I shall see that structural diﬀerences between networks with the same degree distribution and clustering manifest in epidemiological diﬀerences with regard to dynamics on the networks . Previous work [ 24 ] used Kirkwood’s superposition approximation to predict the eﬀect of order - four structure on epidemic dynamics . For SIS dynamics it was concluded that the presence of empty square structures reduces the endemic state for all levels of φ , complete squares may increase or decrease the endemic state , and that diagonal squares had very little eﬀect on the endemic state . In the following I make comparisons between networks that use diﬀerent distributions of order - four motifs . Networks with markedly diﬀerent order - four motif distributions have been previously noted to produce diﬀerent epidemiological behaviour , see [ 6 , 24 , 28 ] . 3 . 3 Results Using the various construction algorithms , I give an overarching analysis of structural diﬀerences between networks with the same degree distribution and same levels of classic clustering . All networks used are homogeneous with (cid:104) k (cid:105) = 5 , allowing for the formation of structures / loops while keeping the complexity to a manageable level . I carry out we analysis on a range of clustering values ( i . e . φ = 0 . 2 , 0 . 4 , 0 . 8 ) to measure and evaluate the extent to which clustering can emerge from , or determine , diﬀerent conﬁgurations of order - four structures . The CCM is currently unable to produce networks with φ = 0 . 8 for this particular degree distribution , so it is not represented for these parameters . 46 3 . 3 . 1 Overall feature and structure of the network Gephi [ 8 ] was used to visualize sample networks generated by the proposed algorithms , see Fig . 3 . 4 . In these ﬁgures nodes are colour coded according to their degree of clus - tering , with un - clustered nodes coloured with nuances closer to the red end of the spectrum , and more highly clustered nodes coloured with shades closer to the blue end of the spectrum . The ﬁgure clearly illustrates that the CCM algorithm gives rise to networks with an extremely homogeneous structure , whilst the rewiring algorithms ( i . e . Big - V and MD ) construct networks with more heterogeneity in clustering at node level . It is also evident that this diﬀerence translates into a more modular structure for the rewired networks . The CCM networks stand out as being structurally diﬀerent from the networks generated by the other algorithms ; as well as being homogeneous in degree , they are also homogeneous in structure . CCM MD Big - V Figure 3 . 4 : Example networks . Homogeneous networks with all parameters held equal , N = 400 , k = 5 and φ = 0 . 4 . The nodes are coloured so those at the red end of the spectrum have low local clustering , and those at the blue end of the spectrum have high local clustering . 3 . 3 . 2 Distribution of clustering and centrality The almost homogeneous distribution of the local clustering ( see Fig . 3 . 5 ) and between - ness centrality ( see Fig . 3 . 6 ) of the CCM networks is expected since by construction 47 every node has the same local structure . For φ = 0 . 2 I know that each node has a quin - tuple of stubs with probability p 1 or a complete square and a triangle with probability p 2 = 1 − p 1 . When φ = 0 . 4 every node is a member of one triangle and one complete square . 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 CCM MD Big−V Lo c a l c l u s t e r i ng c oe ff i c i en t φ = 0 . 2 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 CCM MD Big−V Lo c a l c l u s t e r i ng c oe ff i c i en t φ = 0 . 4 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 MD Big−V Lo c a l c l u s t e r i ng c oe ff i c i en t φ = 0 . 8 Figure 3 . 5 : Distribution of local clustering . Boxplots of local clustering measured from 20 homogeneous networks , N = 1998 , (cid:104) k (cid:105) = 5 . The size of the network was chosen to be divisible by 6 due to the MD algorithm starting with disjointed fully - connected hexagons . Local clustering is a measure of interconnectivity between neighbours of a given node . CCM shows an extremely tight distribution of clustering for φ = 0 . 4 , as I would expect given that each node is allocated the same number and type of structure . MD provides the largest variance in local clustering . The CCM is currently unable to produce networks with φ = 0 . 8 for this particular degree distribution . The Big - V algorithm introduces clustering in more heterogeneous manner , with half of the nodes having clustering in the range 0 . 3 ≤ φ ≤ 0 . 5 . The MD algorithm provides the largest spread of clustering with half of the nodes having clustering in the range 0 . 2 ≤ φ ≤ 0 . 6 . The box - plot ( Fig . 3 . 5 ) of local clustering shows the tendency of the MD algorithm to leave motifs unchanged . These complete motifs must be compensated with other parts of the network being decomposed into a much more random graph - type structure . The MD algorithm relies on random edge swapping to decompose the network into a more random structure . This will tend to result in at least a few leftover fully - connected motifs which are only destroyed at very low levels of clustering . Hence , when the frequency of such motifs is still large but the overall , desired , clustering is 48 0 0 . 5 1 1 . 5 2 2 . 5x 10 4 CCM MD Big−V B e t w eene ss c en t r a li t y φ = 0 . 2 0 1 2 3 4 5 x 10 4 CCM MD Big−V φ = 0 . 4 0 0 . 5 1 1 . 5 2 x 10 5 MD Big−V φ = 0 . 8 Figure 3 . 6 : Distribution of betweenness centrality . Box - plots of nodal betweenness centrality measured from 20 homogeneous networks , N = 1998 , (cid:104) k (cid:105) = 5 . Betweenness centrality ranks nodes on how often they appear in paths between other nodes . As clus - tering is tuned higher , the CCM and Big - V rewiring algorithms isolate fully - connected clustered components of (cid:104) k (cid:105) + 1 nodes away from the GCC . At this level of cluster - ing highly - connected sets of nodes are still weakly attached to the GCC , yielding the large number of outliers observed in the plot , and hence , a high spread of betweenness centrality values . 49 moderate , the connected parts of the network have to be left weakly clustered . The plot of betweenness centrality ( Fig . 3 . 6 ) illustrates this description in a more subtle way . Nodes embedded in a motif will have a low betweenness centrality whilst those that act as bridges between structures and the rest of the network will be more highly ranked . I observe that the betweenness centrality plot shows a slightly higher spread for MD networks . The removal of nodes ( with a high betweenness centrality rank ) is more likely to have a bigger impact on dynamics ﬂowing on the network con - structed by the MD algorithm . 3 . 3 . 3 Connected component analysis Fig . 3 . 7 show that the resulting networks from the three diﬀerent algorithms all exhibit signiﬁcantly diﬀerent behaviour in the connected components as edges are removed . For a well connected network with low clustering , low values of p r leave the macroscopic structure of the networks unchanged , i . e . , the entire network is contained within a single GCC . Networks with low clustering are resilient to the removal of a relatively small number of edges , this behaviour has been previously noted [ 20 ] . However , for p r = 0 . 4 the network shows the CCM networks are the most resilient to edges being removed followed by the MD and Big - V . Component size 10 0 10 1 10 2 C u m u l a t i v e f r equen cy 0 . 82 0 . 84 0 . 86 0 . 88 0 . 9 0 . 92 0 . 94 0 . 96 0 . 98 1 φ = 0 . 2 , p r = 0 . 4 Component size 10 0 10 1 10 2 C u m u l a t i v e f r equen cy 10 - 3 10 - 2 10 - 1 10 0 φ = 0 . 4 , p r = 0 . 1 Component size 10 0 10 1 10 2 C u m u l a t i v e f r equen cy 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 80 . 9 φ = 0 . 8 , p r = 0 . 4 Figure 3 . 7 : Frequency of component sizes as edges are removed from the network with probability p r . CMM , Big - V and MD networks are denotes with a solid line , stars and circles respectively . Results are taken from homogeneous networks with (cid:104) k (cid:105) = 5 and N = 1998 . CCM networks are not represented when φ = 0 . 8 . 50 φ 14 φ 24 (cid:31) φ 34 (cid:27) φ 44 (cid:2) CCM , φ = 0 . 2 0 . 0053 0 . 0007 0 . 0001 0 . 0045 Big - V , φ = 0 . 2 0 . 0117 0 . 0004 0 . 0104 0 . 0009 MD , φ = 0 . 2 0 . 0239 0 . 0057 0 . 0149 0 . 0034 CCM , φ = 0 . 4 0 . 0169 0 . 0003 0 . 0002 0 . 0164 Big - V , φ = 0 . 4 0 . 0570 0 . 0010 0 . 0400 0 . 0160 MD , φ = 0 . 4 0 . 0731 0 . 0083 0 . 0444 0 . 0204 Big - V , φ = 0 . 8 0 . 3150 0 . 0013 0 . 0900 0 . 2237 MD , φ = 0 . 8 0 . 3405 0 . 0044 0 . 1062 0 . 2299 Table 3 . 2 : For each level of clustering the table has been sorted in ascending φ then ascending φ 14 , where φ 14 gives the proportion of all closed quadruples . The above table is computed using unique counts . Fig . 3 . 7 shows that for φ = 0 . 4 removing a relatively few number of edges results in markedly diﬀerent network topologies : the CCM networks result in many isolated single nodes compared to the Big - V and MD networks that result in isolated 6 node components . The MD networks yield the most isolated components as it is will likely preserve a more modular structure . As clustering is pushed higher , and despite this level of clustering tightly constraining network structure , the Big - V networks still show a appreciable diﬀerences to the MD networks upon the removal of edges . 3 . 3 . 4 Motif statistics for all network types Table 3 . 2 shows that third - order clustering conveys little information about order - four motifs . The proportion of closed quadruples to all connected structures of 4 nodes increases with clustering , and for high levels of clustering there is a strong dependence on complete squares . However , the algorithms’ lack of control of order - four structure is apparent at moderate levels of clustering ( φ = 0 . 2 , 0 . 4 ) where there is no consistent presence of closed order - four structures across networks of equal clustering . The diﬀer - ence in φ 14 is due to triangles which do not share an edge ; indeed these triangles are not 51 measured by this metric . The distribution of triangles is important at higher levels of clustering where they often share edges or overlap to form order - four structures . Reading column - wise down Fig . 3 . 8 , I see a more particular dependence on squares with diagonals as clustering increases . For φ = 0 . 4 there is the greatest heterogeneity in the distribution of diagonal squares . When φ = 0 . 8 I observe that diagonals can only appear in certain combinations about a node , following an almost tri - modal distribution . Again reading column - wise down , for complete squares I see a general trend of increasing complete square prevalence with increased clustering . Nodes may have a count of ten complete squares associated with them when they are members of a complete , and isolated , six - node structure . At all levels of clustering the probability of ﬁnding an empty square associated with a node is rare . This is because , despite being a structure of order - four , squares do not contribute to clustering . Finally , Fig . 3 . 8 also reveals that networks generated by the Big - V algorithm contain empty square motifs with very low frequency . The algorithm searches for unclosed triples contained within strings of ﬁve nodes and closes them . Only motifs that may be constructed out of triangles can be expected in Big - V networks in any signiﬁcant quantity . The MD algorithm also generates few empty square motifs and the CCM algorithm will only include them by speciﬁcation . 3 . 3 . 5 Dynamics on the networks : evaluation and comparison The eﬀect of higher - order structure on epidemics is not obvious . For triangles it is observed that when an initially infected individual infects a second , the two infected nodes then compete for the same remaining susceptible . For empty squares and longer loops the eﬀect is similar but less dramatic . Fig . 3 . 9 shows that the initial epidemic spread is slower for networks which exhibit loops . By opening a closed motif whilst preserving degree , two new individuals must be added so the eﬀect of competition is inversely proportional to the motif size . Connectivity within the motif may also negate the eﬀect of competition . When simulating epidemics on networks with φ = 0 . 2 , the CCM networks show a slower spread of infection ( Fig . 3 . 10 ) . At this level of clustering the CCM algorithm 52 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Empty 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Diagonals 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Complete 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Count 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Count 0 1 2 3 4 5 6 7 8 9 10 0 0 . 2 0 . 4 0 . 6 0 . 8 1 Count CCM(cid:9) MD Big−V φ = 0 . 2 φ = 0 . 4 φ = 0 . 8 Figure 3 . 8 : Order - four motif distribution . The per - node distribution of the number of unique counts of order - four motifs , for all previously used networks . See Appendix 3 . 5 . 2 which details how motifs are counted . 53 0 2 4 6 8 10 0 200 400 600 800 1000 1200 1400 1600 Time P opu l a t i on 0 2 4 6 8 10 0 100 200 300 400 500 600 700 Time P opu l a t i on Lines Squares SIS SIR Figure 3 . 9 : Random vs square comparison . 20 homogeneous networks were generated with : N = 1998 , (cid:104) k (cid:105) = 5 and φ = 0 . 0018 . The plots correspond to averaging Gillespie simulations on each of the networks with parameters τ = γ = 1 , and 5 initially infectious nodes . The networks marked ‘square’ were constructed by allowing two squares to be formed out of a nodes 5 stubs , compared against a random network . The plots show comparisons between the prevalence of infection for SIS and SIR dynamics . 54 breaks a quintuple of stubs into all lines with p = 1 / 2 , or a complete square corner and a triangle corner with p = 1 / 2 . Thus , the CCM networks exhibit areas of high clustering in which the disease will spread more slowly than in areas of low clustering . At φ = 0 . 2 the CCM networks exhibit a slower spread of infection for both SIS and SIR epidemics . Reading row - wise from left to right it is clear that higher levels of clustering slows the epidemic , see the diﬀerence between φ = 0 . 2 and φ = 0 . 4 , with a less dramatic eﬀect for SIS epidemics . Tuning clustering to an even higher level leads to the network breaking down into many disjointed components , such that connectivity within these is excellent . This means that the initial spread could be very fast , but this is quickly curtailed by limited or no connectivity between the highly connected components . 0 1 2 3 4 5 6 7 8 9 0 100 200 300 400 500 600 Time I n f e c t ed popu l a t i on MDCCMBig−V 0 1 2 3 4 5 6 7 8 9 0 100 200 300 400 500 600 Time 0 1 2 3 4 5 6 7 8 9 0 10 20 30 40 50 60 70 80 90 100 Time 0 1 2 3 4 5 6 7 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time P opu l a t i on 0 1 2 3 4 5 6 7 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time 0 5 10 15 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time φ = 0 . 2 φ = 0 . 4 φ = 0 . 8 Figure 3 . 10 : SIR and SIS dynamics . 20 homogeneous networks were generated with : N = 1998 , and (cid:104) k (cid:105) = 5 , and the results show the average of 100 Gillespie epidemics on each network realisation . The epidemics were run with parameters τ = γ = 1 , and were seeded with 5 infectious nodes . The top and bottom rows show the prevalence levels for a SIR and SIS epidemics , respectively . There are no results for the CCM networks when clustering is set to φ = 0 . 88 The rewiring algorithms tend to produce networks that contain clustered motifs 55 that are poorly connected to the rest of the networks . Nodes with high betweenness centrality are important in SIR - type processes , which when recovered signiﬁcantly hin - der the propagation of the epidemic . All of the rewiring algorithms produce nodes with high betweenness centrality when compared to the CCM algorithm . It has previ - ously been noted that the MD networks are particularly dependent on isolated motifs ; this is reﬂected in consistently smaller ﬁnal epidemic size . The CCM networks have a more consistent connectivity throughout the network yielding a greater ﬁnal size ( see Fig . 3 . 11 ) . 0 0 . 5 1 1 . 5 2 2 . 5 3 0 200 400 600 800 1000 1200 1400 1600 1800 2000 τ F i na l s i z e φ = 0 . 2 MDCCMBig−V 0 0 . 5 1 1 . 5 2 2 . 5 3 0 200 400 600 800 1000 1200 1400 1600 1800 2000 τ φ = 0 . 4 0 0 . 5 1 1 . 5 2 2 . 5 3 0 200 400 600 800 1000 1200 1400 1600 1800 2000 τ φ = 0 . 8 0 0 . 5 1 1 . 5 2 2 . 5 3 0 200 400 600 800 1000 1200 1400 1600 1800 φ = 0 . 2 F i na l s i z e τ 0 0 . 5 1 1 . 5 2 2 . 5 3 0 200 400 600 800 1000 1200 1400 1600 1800 φ = 0 . 4 F i na l s i z e τ 0 0 . 5 1 1 . 5 2 2 . 5 3 0 100 200 300 400 500 600 700 800 900 1000 φ = 0 . 8 τ φ = 0 . 2 φ = 0 . 4 φ = 0 . 8 Figure 3 . 11 : Plots of ﬁnal epidemic size ( top row ) and endemic equilibrium ( bottom row ) for values of τ increasing from τ = 0 . 1 to τ = 3 in increments of 0 . 15 . Twenty networks were generated , ten Gillespie simulations were performed for each value of τ . The networks were homogeneous with (cid:104) k (cid:105) = 5 and N = 1998 . 3 . 4 Discussion Many network models operate on and use synthetic networks designed to be able to control and tune properties such as degree distribution , mixing , and global clustering . 56 However , as shown in this chapter , controlling only lower - order properties ( speciﬁcally the degree distribution and global clustering ) leaves the potential for diversity in the networks’ higher - order structure and this must be taken into consideration when ac - curacy is required . This is demonstrated by the diﬀerences in structural metrics and resulting behaviour of dynamics across networks with equal degree distribution and global clustering coeﬃcient . Moreover , diﬀerences were observed between the motif de - composition and Big - V networks despite them being sharing equal parametrised and , importantly , sharing very similar network construction philosophies . In this study , I highlighted that synthetic algorithms that generate networks with tunable clustering do lead to diﬀerent higher - order structures , such that networks with the same degree distribution and level of clustering can yield diﬀerent dynamics on the networks . To help illustrate this point this chapter provides a motif counting algorithm that measures the number of motifs found in the networks . I found that all algorithms have their own unique order - four motif signatures for a given degree distribution and global clustering coeﬃcient . I have also attempted to characterise such motifs with order - four transitivity ratios . The measures I have proposed are ratios of the uniquely counted , closed motifs of order - four to the unique count of all connected structures of four nodes . This is con - ceptually convenient but these values may not be suitable for use in low - dimensional ODE approximations , such as the pairwise model . Global clustering is not deﬁned using purely unique counts ( see appendix 3 . 5 . 3 ) and yields a diﬀerent value when the unique counts are used . In appendix 3 . 5 . 3 , I hypothesise the correct counts of motifs and paths for use in clustering - type ratios . Whilst counting uniquely signiﬁcantly re - duces computational complexity , it has the slight disadvantage that it does not provide the multiplicative type of counting used in pairwise models . In the Appendix , I con - jecture that this can be easily overcome by simply multiplying unique counts with the cardinality of the automorphism group corresponding to the motif . In general , I expect that Big - V rewiring will be the most random way to introduce clustering without model - speciﬁc artefacts . However , this comes at what is occasionally prohibitive computational cost when high global clustering is desired . The clustered conﬁguration model ( CCM ) is computationally cheap , and analytically tractable , but is 57 a long way from randomly introduced clustering . In this context , MD can be viewed as a computationally cheap and ( given suﬃcient eﬀort ) analytically tractable alternative to Big - V that produces very similar network phenomenology . It has been demonstrated that care needs to be taken when trying to extend mod - elling to clustered networks . While models for simple clustered networks composed of exclusively non - overlapping triangles and edges have been developed , it is going to be more challenging to extend to networks with more complex structures and motifs . Motifs such as a square with a diagonal or a fully connected square may fulﬁl some function depending on the area of application ( e . g . genetic regulatory networks , corti - cal networks ) , and thus measuring and quantifying this correctly is crucial for further model development . Many natural extensions for this work exist which include con - siderations around higher - order structure , algorithm eﬃciency in measuring these and development of synthetic network models that allow robust and transparent control of not only lower , but also higher - order structures . Acknowledgements Martin Ritchie acknowledges funding for his PhD studies from EPSRC ( Engineering and Physical Sciences Research Council ) and the University of Sussex . Thomas House is supported by the EPSRC , and would like to thank Charo I . Del Genio for discussions on the Motif Decomposition algorithm . 3 . 5 Appendices 3 . 5 . 1 Motif decomposition , analysis It is possible to write down the dynamics for this process in the limit of large networks by decomposing motifs into hyper nodes ( considering each motif at a higher level as a node ) and considering the links between them . By identifying a hyper - node with n edges as Q n , it is possible to write equations for the normalised count of each hyper - node : 58 d dtQ 5 = − 6 λQ 5 , ( 3 . 13 ) d dtQ 4 = 6 λQ 5 − 5 λQ 4 , ( 3 . 14 ) d dtQ 3 = λQ 4 − 4 λQ 3 , ( 3 . 15 ) d dtQ 2 = 4 λQ 3 − 3 λQ 2 , ( 3 . 16 ) d dtQ 1 = 4 λQ 4 + 16 λQ 3 + 9 λQ 2 . ( 3 . 17 ) These equations can be solved for initial condition Q ( 0 ) = ( 0 , 0 , 0 , 0 , 1 / 4 ) and evolve towards Q ( ∞ ) = ( 1 , 0 , 0 , 0 , 0 ) . The rate λ is just included for clarity and can be set to 1 with no loss of generality . The process stops at a ‘time’ t ∗ when the desired level of clustering has been achieved : 1 6 (cid:88) i T i Q i ( t ∗ ) = φ , ( 3 . 18 ) where T i denotes the number of triangles associated with each hyper - node type . The above equation may be solved for t ∗ , and inserted into the equations ( 1 ) - ( 5 ) to obtain a prediction for motif structure . Such hyper - graph counting can be done for any n but quickly becomes too tedious . It is also possible to use the quantities in Table 1 to derive epidemic ﬁnal sizes and other attributes . i 1 2 3 4 5 n i 1 3 4 4 4 l i 0 6 8 10 12 σ i 3 3 4 2 0 T i 0 6 0 12 24 Table 1 : Table of hyper nodes indexed by i with : the number of nodes involved n i , the number of local links l i , the number of global stubs σ i , and the number of triangles T i . 59 3 . 5 . 2 Motif counting algorithm Below I introduce some notation in order to describe correctly and un - ambiguously the counting algorithm . Path A path P is an ordered tuple ( i , . . . , j ) . P n The n th node of path P . H n The head operator such that H n ( P ) returns the n ﬁrst nodes of the path P . T n The tail operator such that T n ( P ) returns the n last nodes of the path P . R The reverse operator such that R ( ( i , . . . , k , . . . , j ) ) = ( j , . . . , k , . . . , i ) . CP ( P ) The set of circular permutations of path P . RCP ( P ) The set of all reverse circular permutations of path P ( NB : RCP ( P ) (cid:54) = CP ( P ) ) . A The adjacency matrix , A = A T and with T r ( A ) = 0 . { · } A set . P Ll The set of non - trivial paths of length l ( l = number of edges ) . 60 / * The following process is applied iteratively to determine non - trivial paths ( open paths or closed paths ) of length l + 1 given non - trivial ( non - loop ) paths of length l . The description below is not speciﬁc to a single length but assumes l ≥ 2 . Data : The uniquely counted set of paths of length 2 is : P L 2 = { ( i , j , k ) } : A [ i , k ] · A [ k , j ] > 0 and j > i . initialization ; LL l + 1 = ∅ ; / * Closed paths of length l + 1 P L l + 1 = ∅ ; / * Open paths of length l + 1 for All paths P in P L l do for All nodes n : A [ T 1 ( P ) , n ] > 0 & / ∈ T 1 ( P ) do nP = ( P , n ) ; / * new path if n = H 1 ( L ) & nP / ∈ LL l + 1 & R ( nP ) / ∈ LL l + 1 then LL l + 1 ← nP ; end if n (cid:54) = H 1 ( L ) & nP / ∈ LL l + 1 & R ( nP ) / ∈ LL l + 1 then P L l + 1 ← nP ; end / * These exclude symmetric paths but not circular permutations . end if P ∗ ∈ { CP ( LL l + 1 ) , CP ( P L l + 1 ) } then { LL l + 1 } = { LL l + 1 } \ P ∗ ; { P L l + 1 } = { LL l + 1 } \ P ∗ ; end / * Removes circular permutations . end for All paths P ∈ CLL l + 1 do if P ∗ ∈ CLL l + 2 & P ∗ / ∈ CRP ( CLL l + 1 ) then LL l + 1 ← P ; end end for All paths P ∈ CP L l + 1 do if P ∗ ∈ CP L l + 2 & P ∗ / ∈ CRP ( CP L l + 1 ) then P L l + 1 ← P ; end end / * Removes reverse circular permutations . Algorithm 1 : Pseudo code for the motif counting algorithm . 61 3 . 5 . 3 Motif counting : unique vs multiplicative In this chapter all order - four clustering - type ratios use unique counts . Ratios based on unique counts will give diﬀerent values to ratios based on multiplicative counts . As an example of multiplicative counting , classic clustering is deﬁned as : φ = 6 × [ (cid:52) ] [ (cid:52) + ∨ ] , ( 3 . 19 ) where [ (cid:52) ] denotes the number of triangles , and [ (cid:52) + ∨ ] the number of length three paths closed and unclosed ( doubly counted ) in the network . If unique counts are used then I have φ unique = φ / 3 . I have computed the unique order - four counts in order to improve the computational performance of we algorithm . However , if I wish to normalise or scale - up the unique counts to correspond to the multiplicative equivalent , correct multiplying factors need to be determined . This appears to be the number of automorphisms associated with each motif type or path length : a triangle has six and a path of length three has two automorphisms . Let A = ( a i , j ) , i , j ∈ { 1 , . . . N } , be the adjacency matrix of an undirected network with no self loops i . e . A = A T and A i , i = 0 for any i = 1 , 2 , . . . , N . It is possible to obtain the multiplicative counts from the adjacency matrix A . Adding over all nodes : [ − ] = N (cid:88) i , j = 1 , i (cid:54) = j a i , j . ( 3 . 20 ) This counts twice the number of real or uniquely counted edges in the network . It is possible to count more complex paths as well : [ ∨ + (cid:52) ] = N (cid:88) q ∈ Q 3 a i , j a j , k , ( 3 . 21 ) yielding all connected structures of 3 nodes ( closed and unclosed ) , similarly [ (cid:52) ] = N (cid:88) q ∈ Q 3 a i , j a i , k a j , k , ( 3 . 22 ) 62 where Q 3 denotes the set of all distinct triples of nodes yielding six times the number of unique triangles . It is also possible to count six diﬀerent closed paths of length three contained within a triangle : for each node I count clockwise and counter - clockwise about the triangle . This by - directional counting is important so that the method is consistent when considering directed networks . Following the same counting methodology it is possible to count order - four structures : [ (cid:116) + (cid:31) + (cid:27) + (cid:2) ] = (cid:88) q ∈ Q 4 a ij a jk a kl , ( 3 . 23 ) where Q 4 denotes the set of all distinct quadruples of nodes . In this form I see that it is possible to compute the individual counts using the following identities : [ (cid:2) ] = (cid:88) q ∈ Q 4 a ij a ik a il a jk a jl a kl , ( 3 . 24 ) [ (cid:27) ] = (cid:88) q ∈ Q 4 a ij a ik ( 1 − a il ) a jk a jl a kl , ( 3 . 25 ) [ (cid:31) ] = (cid:88) q ∈ Q 4 a ij a ik ( 1 − a il ) ( 1 − a jk ) a jl a kl , ( 3 . 26 ) Counting this way a single [ (cid:2) ] is counted 24 times , [ (cid:27) ] is counted 4 times and [ (cid:31) ] is counted 8 times , equal to the number of automorphisms associated with each motif type . Currently , based on we intuition and numerical tests , I conjecture that this is the correct way to scale - up from unique to multiplicative motif counts . This method of counting is thorough but not practical for networks of reasonable size since it has complexity O ( N n ) for order - n structures . 63 Chapter 4 Paper II : Beyond clustering : Mean - ﬁeld dynamics on networks with arbitrary subgraph composition Martin Ritchie 1 , Luc Berthouze 2 , 3 & Istvan Z . Kiss 1 1 School of Mathematical and Physical Sciences , Department of Mathematics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 2 Centre for Computational Neuroscience and Robotics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 3 Institute of Child Health , London , University College London , London WC1E 6BT , UK Journal of Mathematical Biology - 2015 64 4 . 1 Introduction In this chapter , I provide a general and automated approach to deriving a set of ordinary diﬀerential equations ( ODEs ) that describe , to a high degree of accuracy , the expected values of prevalence or number of recovered individuals for networks that are generated based on an arbitrary set of subgraphs . This is achieved by a rigorous separation of the role of nodes within the subgraphs and by using the probability generating function ( PGF ) formalism to correctly track : ( a ) the distribution of subgraphs to which nodes belong and ( b ) the excess degree that is generalised from the classical notion of a stub of a single edge to diﬀerent corner types given by subgraphs . This is a signiﬁcant step forward as it allows us to : ( a ) accurately model and analyse dynamical processes on networks with higher - order structure , thus increasing model realism , ( b ) map out the impact of clustering in the classic sense , and more importantly , its impact at a higher level involving four or more nodes , see Chapter . 3 , and ( c ) provide much needed insights into the role of small subgraphs or network motifs / units in epidemiology and systems biology . The chapter is organised as follows . I ﬁrst review how the probability generating function ( PGF ) can be used to derive ODEs that capture epidemic dynamics on conﬁg - uration model ( CM ) networks . Such PGF - based models operate by using the versatile properties of the PGF whereby it allows us to keep track of the fraction of susceptible individuals , their degree and excess degree . Next , I generalise the CM to the hyperstub conﬁguration model ( HCM ) . The HCM is a network construction algorithm that allo - cates hyperstubs to nodes following a given distribution or sequence . The algorithm then selects and connects tuples of hyperstubs as prescribed by the building blocks or subgraphs of the network , rather than at random . Compared against the clustered conﬁguration model of Chapter . 3 this is signiﬁcantly more sophisticated in allowing for distributions of arbitrary subgraphs . With a basic understanding of both the network and epidemic models , I then gener - alise the PGF formalism to HCM networks . This section includes a step - by - step expla - nation of the model derivation with examples for a particular network and a detailed presentation of the code - generating algorithm . A key component of the generalised 65 model is to label and track the position of each and every node in all subgraphs in order to avoid any ambiguity as to the role of nodes in non - fully - connected subgraphs . I then compare my approach to state - of - the - art models that can , in principle , capture the system’s expected behaviour . Where fair comparisons are possible I show that my model displays excellent agreement with existing models , otherwise I show my model to either outperform existing models or to produce accurate results where other models fail . Finally , I use the generalised model to investigate the eﬀect of cycles as well as the impact of higher - order structure , where global clustering is kept constant , on epidemic dynamics . 4 . 2 Materials and Methods In this section I consolidate and generalise existing work centred around deriving low dimensional , deterministic and approximate ODEs that capture the time evolution of epidemic dynamics on conﬁguration model networks . First , I re - introduce the ba - sic susceptible - infected - recovered ( SIR ) epidemic model on random graphs following Volz’s original PGF - based derivation [ 75 ] . This is followed by a rigorous formalisation of the hyperstub conﬁguration model that was ﬁrst presented by Karrer & Newman [ 32 ] . I then demonstrate how this model may be used to generate networks of diﬀer - ing subgraph compositions whilst keeping traditional network metrics such as ﬁrst and second moments of the degree distribution , clustering and where possible the entire degree distribution , equal . Sec . 4 . 2 . 3 provides a derivation of the PGF - based approx - imate ODE model that accurately captures SIR dynamics on hyperstub conﬁguration networks . This derivation is similar to Volz et al . ’s PGF - based extension from con - ﬁguration and unclustered to clustered networks [ 76 ] , but generalised to incorporate arbitrary subgraphs . Finally , sec . 4 . 3 provides an algorithm that automatically gener - ates and solves ODEs presented in sec . 4 . 2 . 3 for SIR epidemics on networks constructed using a user - speciﬁed set of subgraphs . 66 4 . 2 . 1 SIR epidemics on random graphs The SIR compartmental model involves a population with three types of individuals – susceptible , infected or recovered – whose interactions are modelled by a network . Infection travels across edges at a per - edge rate of τ and individuals recover , indepen - dently , at rate γ . To account for the heterogeneous contact patterns , the model is centred around the PGF induced by the network’s degree distribution , ψ ( x ) = ∞ (cid:88) k = 0 p ( k ) x k , where p ( k ) is the probability that a randomly chosen node has k links . Before I can demonstrate the usefulness of storing the network in this compact way , I need to discuss the survivor function , θ ( t ) , as originally presented by Volz in [ 75 ] . First , deﬁne infectious contact to be the event whereby an infected node v transmits to its neighbour u , regardless of the state of u , i . e . , u may receive and infectious contact if it is infected or recovered , in addition to being susceptible . Next , consider an edge that has been selected uniformly at random , label its nodes u and v , and deﬁne a direction from node v to node u . The survivor function , denoted θ ( t ) , is the probability that there has never been infectious contact from node v to node u by time t . It is at this point in the derivation that Volz proposes the following simplifying assumption , “disallow infectious contact from node u to node v ” . Otherwise , u may be infected by some other source , and in turn , infect v , thus increasing the probability of infectious contact from v to u , so transmission along diﬀerent edges to the same target would not be independent . Disallowing infection from the test node will not aﬀect that probability that it becomes infected and this may be used to calculate the probability that the node is still susceptible , that in turn , can be used to calculated the size of the outbreak [ 46 ] . A formal exploration of this assumption requires strong probabilistic arguments and is beyond the scope of this thesis , nonetheless Janson et al . and Decreusefond et al . have analytically shown its validity in [ 13 , 31 ] . For example the probability that a degree two node is susceptible at time t is given 67 by θ ( t ) 2 , or more generally ψ ( θ ( t ) ) = ∞ (cid:88) k = 0 p ( k ) θ ( t ) k = : S ( t ) , where S ( t ) is the fraction of susceptibles at time t . To analytically describe θ ( t ) , I need to consider the rate at which a node with degree one becomes infected . This yields d dt ( 1 − θ ( t ) ) = τθ ( t ) M SI ( t ) M S ( t ) ⇒ dθ ( t ) dt = − τθ ( t ) M SI ( t ) M S ( t ) , where M S ( t ) and M SI ( t ) denote the expected degree of a susceptible node and the expected number of SI edges per node at time t . Hence , M SI ( t ) / M S ( t ) denotes the probability that a susceptible and infected node are connected at time t . In other words , a node which up to time t is susceptible will , on average , become infected at rate τM SI ( t ) / M S ( t ) . It turns out that M S ( t ) can be computed using the PGF and is given by θ ( t ) dψ ( x ) dx (cid:12)(cid:12)(cid:12)(cid:12) θ ( t ) = ∞ (cid:88) k = 0 kp ( k ) θ ( t ) k , which can be interpreted as the expected degree conditional on nodes being susceptible . To compute M SI ( t ) additional information from the PGF must be extracted , namely the excess degree . This involves selecting an edge at random and following it to its originating node . The observed degree of this node , excluding the edge by which it was selected , is known as the excess degree and has a distribution that is generated by g ( z ) = 1 (cid:104) k (cid:105) ∞ (cid:88) k = 0 ( k + 1 ) p ( k + 1 ) z k . As before it is possible to condition this on susceptible nodes and thus to compute the expected excess degree of susceptible nodes θ ( t ) dg ( z ) dz (cid:12)(cid:12)(cid:12)(cid:12) θ ( t ) = 1 (cid:104) k (cid:105) ∞ (cid:88) k = 0 k ( k + 1 ) p ( k + 1 ) θ ( t ) k = : δ S ( t ) . By assuming that the expected degree of a newly infected node is equal to the expected degree of a susceptible node , Volz uses the above , multiplied by τ , to model the expected 68 number of edges the disease can spread across upon infection of a susceptible node . This can be used to derive the equations that describe the ﬂux between edges in diﬀerent states . Namely , these are given by dM SS ( t ) dt = − 2 δ S M SS ( t ) , dM SI ( t ) dt = − M SI ( t ) ( τ + γ ) + 2 δ S ( t ) M SS ( t ) − δ S ( t ) M SI ( t ) , where M SI ( t ) ( τ + γ ) , 2 δ S ( t ) M SS ( t ) and δ S ( t ) M SI ( t ) denote the I infecting the S or the I recovering , M SI being created by a node in a SS edge being infected by an external source to that SS edge and , ﬁnally , the susceptible in a SI edge being infected by an external source , respectively . Summarising all the above yields the complete system of equations , dS ( t ) dt = dθ ( t ) dt ψ ( θ ( t ) ) , dI ( t ) dt = − dθ ( t ) dt ψ ( θ ( t ) ) − γI ( t ) , dM SS ( t ) dt = − 2 δ S ( t ) M SS ( t ) , dM SI ( t ) dt = − M SI ( t ) ( τ + γ ) + 2 δ S M SS ( t ) − δ S ( t ) M SI ( t ) , dθ ( t ) dt = − τθ ( t ) M SI ( t ) M S ( t ) , R ( t ) = 1 − S ( t ) − I ( t ) . This concludes the derivation for PGF - based epidemic dynamics on random networks . Volz et al . extended this methodology to clustered networks by deﬁning a joint prob - ability distribution which describes the typical number of lines and triangles allocated to nodes [ 76 ] . This particular derivation has been omitted from this chapter . However , in the following section , I will outline a further generalisation of this whereby the joint probability speciﬁes the distribution of subgraphs of various types around nodes . This then leads to more complex PGFs . In App . 4 . 7 . 3 , I show how the PGF used in the main result of this chapter can be made equivalent to the PGF resulting from Volz et al . ’s original edge - triangle model . 69 4 . 2 . 2 Hyperstub conﬁguration model In this chapter I generalise the conﬁguration model [ 10 ] to the hyperstub conﬁguration model . Before I specify the model I need to establish how to classify hyperstubs , the set of stubs that connect a node to a subgraph , depending on their parent subgraph and their role within that subgraph . To generate a hyperstub conﬁguration network model one needs to ﬁrst decide on a set of subgraphs or building blocks that will form the network . This is then followed by the identiﬁcation of the number of diﬀerent hyperstubs induced by the subgraphs : hyperstubs must be uniquely associated with both their parent subgraph and the orbit of their incident nodes [ 32 ] . Deﬁnition 10 . The orbit of a node is the set nodes with which it may be permuted such that no edges are created or destroyed . For example , in Fig . 4 . 1 , subgraph G (cid:27) contains two distinct orbits { x 14 , x 17 } and { x 15 , x 16 } . x 2 x 1 x 5 x 3 x 4 x 9 x 6 x 7 x 8 x 10 x 13 x 11 x 12 x 14 x 16 x 15 x 17 G 0 G △ G ⊠ G (cid:31) G (cid:27) Figure 4 . 1 : Subgraph notation and position labelling . Subgraphs are labelled by G followed by a symbolic subscript for ease of reference . Once all hyperstubs have been identiﬁed it is possible to deﬁne a joint probability distribution that speciﬁes the probability of a node having a certain combination of these . For example f ( x , y ) = p x , y may denote the probability of a node having x × G 0 and y × G (cid:52) . Using this distribution it is possible to generate hyperstub degree sequences . For network generation these sequences will be subject to cardinality constraints . For example , the sum of the degree sequence of G (cid:52) must be divisible by three . Otherwise , the sequence needs to be re - generated . For asymmetric subgraphs , e . g . , G (cid:27) , the sum of the degree sequences of both types of hyperedge must also be equal . In practice , this 70 can be achieved by generating a suitable degree sequence for one type of hyperedge and then randomly permute it to obtain a second sequence for the second hyperstub . G (cid:27) has two degree sequences , one for each hyperstub , and both must be even since I select pairs of nodes from each to form the subgraph . The network generating algorithm will then form a dynamic list for each hyperstub , where a node with hyperstub degree k i appears k i times . This is followed by selecting nodes from the lists , at random and without replacement , and by following the sub - graphs’ hyperstub composition in order to construct subgraphs and the network . It is possible that self or multi - edges form in which case the selection is discarded and new samples chosen until a valid selection is obtained . This is repeated until all lists are empty . In this chapter I wish to both computationally generate networks and theoretically describe dynamics on such networks . The PGF of the hyperstub degree distribution provides the link between theory and simulation . The construction of the PGF induced by the hyperstub distribution can be achieved by encoding diﬀerent levels of detail . At the simplest level nodes may belong to a number of subgraphs without further specifying their orbit or position within the subgraph [ 76 ] . The PGF could be constructed at the level of hyperstubs but would not diﬀerentiate between topologically equivalent positions in the subgraph , and this is what I use in my network generating algorithm ( nodes may now be allocated asymmetric subgraphs ) [ 32 ] . Finally , the PGF can be speciﬁed by accounting for all details described above with the addition of the precise position of nodes within the subgraph ( used in the ODE derivation , sec . 4 . 2 . 3 ) . For network generation the PGF takes the general form , ψ ( ˆ z ) = ∞ (cid:88) ˆ h = 0 p ˆ h m (cid:89) i = 1 z h i i , where ˆ z = ( z 1 , z 2 , . . . , z m ) is a placeholder and ˆ h = ( h 1 , h 2 , . . . , h m ) denotes the number of h i hyperstubs assigned to a node . The symbolic form of the PGF provides more ﬂexibility for computation . Let us consider subgraphs distributed as follows : G 0 ∼ P ois ( λ 1 ) , G (cid:52) ∼ P ois ( λ 2 ) and G (cid:27) ∼ P ois ( λ 3 ) ( both hyperstubs of G (cid:27) are Poisson 71 distributed with parameter λ 3 ) . The PGF of such a network is ψ ( z 1 , z 2 , z 3 ) = exp ( λ 1 ( z 1 − 1 ) + λ 2 ( z 2 − 1 ) + λ 3 ( z 3 − 1 ) ) . From this PGF , the average number of subgraphs a node belongs to may be computed ∂ψ ( ˆ z ) ∂z 1 (cid:12)(cid:12)(cid:12)(cid:12) ˆ z = 1 = λ 1 = : (cid:104) G 0 (cid:105) . By replacing z i with z a , where a is the number of stubs contained within the hyperstub h i , the PGF of the classical degree distribution can be recovered ψ ( z ) : = exp (cid:0) ( λ 1 ( z − 1 ) + λ 2 ( z 2 − 1 ) + λ 3 ( z 5 / 2 − 1 ) (cid:1) . The z 5 / 2 term accounts for the fact that G (cid:27) is counted twice , once for each of its hyper - stubs . The ﬁrst and second moments of the degree distribution are directly computed using the linearity of expectation and the fact that V ar ( aX ) = a 2 X . As well as re - covering the degree distribution , it is possible to determine the expected number of triangles per node : (cid:104)(cid:52)(cid:105) = λ 2 + 3 / 2 λ 3 , since on average each node in G (cid:27) is incident to 3 / 2 triangles . To summarise , I have (cid:104) k (cid:105) = λ 1 + 2 λ 2 + 5 2 λ 3 , V ar ( k ) = λ 1 + 4 λ 2 + 25 / 4 λ 3 , ( 4 . 1 ) (cid:104)(cid:52)(cid:105) = λ 2 + 3 / 2 λ 3 . By including a fourth subgraph in the above example , the equivalent of system Eq . ( 4 . 1 ) will be underdetermined with 3 equations and 4 unknowns . This allows the ﬁrst and second moments and the expected number of triangles ( and therefore clustering ) to be ﬁxed whilst varying the subgraph composition . For example , ﬁxing (cid:104) k (cid:105) = 4 , V ar ( k ) = 8 and (cid:104)(cid:52)(cid:105) = 2 , I can form the underdetermined system ,     1 2 2 5 1 4 4 25 0 1 0 10         G 0 G (cid:52) G (cid:31) G 6 c     =     4 8 2     , 72 where the columns of the LHS matrix correspond to contributions to (cid:104) k (cid:105) , V ar ( k ) and (cid:104)(cid:52)(cid:105) respectively and G ic denotes a complete subgraph of i nodes . From this system it is possible to obtain two valid solutions : ( 1 ) G (cid:52) ∼ P ois ( 2 ) and ( 2 ) G 0 ∼ P ois ( 9 / 2 ) , G 6 c ∼ P ois ( 3 / 10 ) . Moreover , by replacing G 6 c with other types of subgraph and updating the L . H . S matrix , several diﬀering network models with the same ﬁrst and second moments and clustering may be obtained . A selection of such networks used in the results section is listed below : Model 1 : G (cid:52) ∼ P ois ( 2 ) , Model 2 : G 0 ∼ P ois ( 2 ) , G (cid:2) ∼ P ois ( 2 / 3 ) , Model 3 : G 0 ∼ P ois ( 8 / 3 ) , G 5 c ∼ P ois ( 1 / 3 ) , Model 4 : G 0 ∼ P ois ( 3 ) , G 6 c ∼ P ois ( 1 / 5 ) . While the most basic network metrics : the average degree and global clustering coeﬃcient , are identical their degree distributions are not . However , it is also possible to generate classes of networks where the degree distribution is equal between networks but the subgraph composition is not . Let us consider networks constructed purely out of cycles , where , regardless of the length of the cycle , cycle hyperstubs are composed of only pairs of stubs . It is then possible to increase the size of cycles whilst maintaining identical classical degree distributions between diﬀerent networks . This is implemented in the following way : ﬁrst , allocate to each node , on average , a pair of cycle hyperstubs , then for each type of network allow the hyperstubs to form increasingly large cycles , starting with G (cid:52) then G (cid:31) and so on . If the hyperstubs are distributed such that h i ∼ P ois ( 2 ) then the classical degree distribution for each network will be such that only even degrees are possible , i . e . , P ( degree = 2 k ) = P ( degree = k | P ois ( 2 ) ) denoted G 0 ∼ 2 P ois ( 2 ) for convenience . It is also possible to include a null , random , model for comparison , i . e . , a network with degree distribution given by G 0 ∼ 2 P ois ( 2 ) but connected at random . In my investigation I shall be using the following cycle - based networks : Null Model : G 0 ∼ 2 P ois ( 2 ) , Model C1 : G (cid:52) ∼ P ois ( 2 ) , 73 Model C2 : G (cid:31) ∼ P ois ( 2 ) , Model C3 : G (cid:68) ∼ P ois ( 2 ) , Model C4 : G (cid:55) ∼ P ois ( 2 ) , where G (cid:68) and G (cid:55) denote cycles of 5 and 6 nodes ( pentagons and hexagons ) , respec - tively . Having thus created two classes of networks , the former will be used to show how conventional network metrics may not entirely capture the structure of the network as far as dynamics are concerned ; the latter to investigate the eﬀect of cycles of increasing length on dynamics . 4 . 2 . 3 SIR epidemics on hyperstub conﬁguration model net - works This section presents the derivation of a general SIR epidemic model for a network built from an arbitrary number of subgraph types . Conceptually , this model uses the node labelling approach of [ 32 ] and generalises the PGF - type framework of Volz et al . [ 75 , 76 ] . By taking this approach it is possible to derive ODEs that accurately predict the epidemic prevalence on networks that exhibit a variety of exotic subgraphs , both fully - and non - fully connected . The ﬁrst step is to choose the set of subgraphs to be included in the network . Let an arbitrary set of subgraphs be labelled by { G 1 , G 2 , . . . , G M } . For example , Fig . 4 . 1 shows M = 5 diﬀerent subgraphs , which result in m = 17 distinct node positions , where m stands for the total number of nodes over all subgraphs . For clarity , I recall that a hyperstub is the set of half - links connecting a node to a subgraph . This example highlights the key component of the model , namely to distinguish between all nodes of a subgraph even those that are topologically equivalent . This distinction makes it possible to deal with the added complexity of having to account for labelled subgraphs . Each node / position of a subgraph is labelled . This is reﬂected in a PGF that accounts for each and every node in each and every subgraph . This gives rise to a PGF of the 74 following form : ψ ( ˆ α ) = ∞ (cid:88) ˆ y = 0 p ˆ y m (cid:89) i = 1 α y i i , where ˆ α = ( α 1 , α 2 , . . . , α m ) is a placeholder and ˆ y = ( y 1 , y 2 , . . . , y m ) is such that y i is the number of times a node appears in position x i , i = 1 , . . . , m . For each subgraph its state at time t is denoted by G x ( S , I , . . . , R ) . This not only describes a subgraph and its state but also the expected number of the given subgraph in the given state at time t , i . e . , when appended with a state this notation has numerical meaning . Since G x ( S , I , . . . , R ) accounts for the state of node , it will always explicitly depends on t . To describe the ﬂux between diﬀerent subgraph states , infectious events within and between subgraphs need to be considered . This requires a generalisation of θ ( t ) which was ﬁrst given in sec . 4 . 2 . 1 . Accordingly , I now ﬁrst select a hyperstub at random and then deﬁne a direction , from its parent subgraph to its incident node . An infectious contact is now the event that u , regardless of its state , becomes infected by one of its adjacent nodes within that subgraph . θ ( t ) now needs to reﬂect a node’s position in the subgraph . Hence , I deﬁne deﬁne θ i ( t ) to be the probability that the group of edges connecting a node u in position x i to the parent subgraph have not allowed for infectious contact from any infectious node in the subgraph to u by time t . Again , I impose that u cannot transmit infection to the subgraph in question . Under these assumptions , the infectious contact through hyperstubs to position x i is now independent . A node that appears only k times in position x i remains susceptible with probability θ ki ( t ) . By geometrically compounding all θ i ( t ) into a PGF , it is possible compute the fraction of the susceptible population . This is given by S ( t ) = ψ ( ˆ θ ( t ) ) = ∞ (cid:88) ˆ y = 0 p ˆ y m (cid:89) i = 1 θ i ( t ) y i . ( 4 . 2 ) This probability is equal to the fraction of susceptible nodes in the population at time t [ 75 ] . θ ( t ) is referred to as a survivor function . It is dependant on time and may by computed from ﬁrst principles using the deﬁnition of the Poisson process . However , in my formulation , it is computed from variables that denote the expected rate , T i , at which infection is transmitted to a node in position x i through the corresponding 75 subgraph . I note that while T is commonly used to denote the cumulative probability that infection may occur , I keep it as deﬁned above to be consistent with the current literature on such models [ 76 ] . Each position label x i has a T i variable associated with it . The following examples show these rates for positions x 1 , x 2 and x 3 , see Fig . 4 . 1 : T 1 = τ [ G 0 ( SI ) ] , ( 4 . 3 ) T 2 = τ [ G 0 ( IS ) ] , ( 4 . 4 ) T 3 = τ [ G (cid:52) ( SSI ) + G (cid:52) ( SIS ) + 2 G (cid:52) ( SII ) + G (cid:52) ( SRI ) + G (cid:52) ( SIR ) ] . ( 4 . 5 ) To generate the above identities , I consider a susceptible node in position x i and list all possible corresponding subgraph states that allow this node to be exposed to infection . T = ( T 1 , T 2 , . . . , T m ) can now be used to determine the probability that a susceptible node has an infectious neighbour within a certain subgraph type . This is done by dividing T i τ − 1 by the number of states that involve a susceptible at position x i : T i τ (cid:80) A , B , C , D G ( · ) ( x i = S , . . . , A , B , C , D ) . The expected degree of a susceptible node at position x i is given by (cid:104) k i (cid:105) = ∞ (cid:88) ˆ y = 0 y i p ˆ y m (cid:89) i = 1 θ y i i = θ i ∂ψ ∂α i (cid:12)(cid:12)(cid:12)(cid:12) α = ˆ θ , where ˆ θ = ( θ 1 , θ 2 , . . . , θ m ) . To compute the expected degree for every position of every subgraph , one can take the Jacobian of ψ evaluated at x = ˆ θ , J ( ψ ) | α = ˆ θ . The i th entry of this vector evaluated at α = ˆ θ shall be denoted J i . A susceptible node in position x i will have remained susceptible up to time t , with probability θ i after which infection may be transmitted at rate T i / J i . This information may be used to form the following equation : d dt ( 1 − θ i ( t ) ) = θ i ( t ) T i J i ⇒ dθ i ( t ) dt = − θ i ( t ) T i J i . ( 4 . 6 ) 76 ˙ θ i ( t ) decays at the rate at which a subgraph transmits infection to its node in position x i , conditional on that node being susceptible . Once a node is newly infected it is important to determine what , if any , subgraph states are created or destroyed . To do this , I use the susceptible nodes’s excess degree prior to the infection . For the full derivation of susceptibles’ excess degree refer to App . 4 . 7 . 1 . In this derivation , the excess degree must be generalised to account for the degree of the diﬀerent positions a node may be in , i . e . , (cid:104) k i (cid:105) , i = 1 , 2 , . . . , m . The expected excess degree for susceptible nodes is given by ∆ i , j = θ j H i , j ( ψ ) J i ( ψ ) (cid:12)(cid:12) (cid:12) (cid:12) α = ˆ θ , where H ( ψ ) is the Hessian of the PGF . ∆ i , j denotes the expected number of x j positions associated with a node that has been selected at random , but proportionally to the number of x i positions associated with that node . It is now possible to formulate ODEs describing the evolution subgraph states . I denote the time derivative of a subgraph’s state by ˙ G ( · ) . This quantity is dimensionless but not normalised . For example , the number of unique ( SI ) links in a network of size N is given by [ SI ] = NG 0 ( SI ) . To form the ODE for the subgraph state G 0 ( SI ) , I consider all possible ways in which this state may be created or destroyed , namely ˙ G 0 ( SI ) = − ( τ + γ ) G 0 ( SI ) − ( T ∆ ) 1 G 0 ( SI ) + ( T ∆ ) 2 G 0 ( SS ) , ( 4 . 7 ) where ( T ∆ ) 1 denotes the ﬁrst entry of the vector that is the product of the matrix ∆ multiplied from the left by vector T . Conceptually ( T ∆ ) i denotes the expected number of nodes in position x i an infection will encounter upon infecting a susceptible node through any possible route , see Fig . 4 . 2 . The ﬁrst term on the RHS of Eq . ( 4 . 7 ) describes this state being destroyed by the I infecting the S or the I recovering . The second term stands for this state being destroyed by the S being infected by an outside source . Finally , the last term corresponds to this state being created by the second node of G 0 ( SS ) being infected by a source external to the subgraph . To further illustrate this , the equations for G 0 ( SS ) and G 0 ( IS ) are given , ˙ G 0 ( SS ) = − [ ( T ∆ ) 2 + ( T ∆ ) 1 ] G 0 ( SS ) , 77 ˙ G 0 ( IS ) = − ( τ + γ ) G 0 ( II ) − ( T ∆ ) 2 G 0 ( IS ) + ( T ∆ ) 1 G 0 ( SS ) . Figure 4 . 2 : Graphical representation of ( T ∆ ) i . ∆ and T denote the excess degree of a susceptible node and rate of infection , respectively . I note that newly infected nodes are modelled as previously susceptible nodes so the product ( T ∆ ) i is being used to model the expected number of x i edges infection will be able to spread along upon infecting a susceptible node . This product implicitly considers all possible routes of infection into the node . The left hand side of the ﬁgure shows example subgraphs that are the source of infection for the red node . The right hand side of the ﬁgure graphically represents the expected excess degree of G (cid:52) subgraphs for the red node . Equations for every state of every subgraph must be derived . In general , I ﬁrst describe any infection and recovery events of nodes within a subgraph . Next I list all possibilities for susceptible nodes to be infected from sources external to that subgraph using the appropriate ( T ∆ ) terms . To compute network - level prevalences , I recall that S ( t ) can be computed at any time by Eq . ( 4 . 2 ) . ˙ I ( t ) is computed directly by diﬀerentiating S ( t ) . Namely , since susceptibles become infected and and infected nodes recover at rate γ , I have ˙ I ( t ) = m (cid:88) i = 1 ˙ θ i ( t ) ∂ψ ( t ) ∂θ i − γI ( t ) , ( 4 . 8 ) 78 ˙ R ( t ) = γI ( t ) . ( 4 . 9 ) The total number of equations is given by 2 + m + (cid:80) Mi = 1 3 | G i | , where | · | denotes the number of nodes in a subgraph . In App . 4 . 7 . 2 I give or more example ODEs and in App . 4 . 7 . 3 I show how my model is equivalent to previous systems developed for complete subgraphs [ 76 ] . 4 . 2 . 4 Initial conditions Let (cid:15) be the fraction of initially infected nodes . Hence , (cid:15) = I 0 / N , where I 0 is the number of initially infected nodes and N is the network size . Initial conditions for the I and R populations are given by I ( 0 ) = (cid:15) , R ( 0 ) = 0 . At time t = 0 no hyperstub has transmitted infection , therefore , θ i ( t = 0 ) = 1 . For a subgraph that contains a single infected node , G ( t = 0 ) = (cid:15) (cid:104) k (cid:105) i where (cid:104) k (cid:105) i is the expected hyperstub degree . For the subgraph with every node susceptible I set G ( t = 0 ) = ( 1 − (cid:15) ) (cid:104) k (cid:105) i . By assuming that only a small fraction of the population , i . e . , a single node , is initially infected , I do not allow non - zero initial conditions for subgraphs with more than one infectious node . 4 . 3 Automated code - generation of the mean - ﬁeld model I now present my methodology for computationally generating a complete system of equations for a network constructed from subgraphs following a conﬁguration model . This procedure requires the PGF of a hyperstub degree distribution ( HDD ) , the adja - cency matrices of corresponding subgraphs , and epidemiological parameters as inputs . The algorithm will output the system of ODEs that will predict the network - level preva - lence . Table 4 . 1 gives a brief summary of the variables that need to be generated , listed in the order they are generated in this section . 79 Variable Description Generation ψ PGF of the HDD given as a function , not as a se - ries . A symbolic software package can be used to compute the Jacobian and Hessian . θ i ( t ) Survivor functions with their evolution equations given by ODEs . These ODEs can be de - ﬁned within a single for loop , see Eq . ( 4 . 6 ) . ( S , I , R ) The prevalences of S , I and R , with the latter two given by numerical solutions of ODEs From Eq . ( 4 . 8 ) , it follows that S = ψ ( θ ) . T i Total rate of infection ex - perienced by an S in po - sition x i . For a subgraph with m nodes , T i may be gen - erated by m nested for loops cycling through the possible states that a subgraph can be in , see Eq . ( 4 . 3 ) . G x ( S , I , . . . , R ) Expected prevalence of a subgraph in a given state . The equation for this is computed based on the rate matrix , Z , see Eq . ( 4 . 10 ) . Table 4 . 1 : Summary of the key system variables and their generation . 80 Let (cid:126)G denote the vector of states of a subgraph G with (cid:126)G i denoting a speciﬁc state of G . For the SIR model , (cid:126)G has 3 | G | elements . To generate T i from (cid:126)G , the following steps are needed : ( 1 ) cycle through (cid:126)G , ( 2 ) for each infectious contact to node i in state (cid:126)G j , update T i to T i = T i + (cid:126)G . Using T the survivor functions can be computed , see Eq . ( 4 . 6 ) , which are then used to compute the fraction of the population which is susceptible , infected or recovered , see Eq . ( 4 . 8 ) . The ODEs corresponding to subgraphs need to be represented with a rate matrix , Z . This matrix encodes all information relating to the given subgraph , namely the excess degrees , rates of infection over subgraphs T , epidemiological parameters τ and γ , and implicitly encodes the subgraph’s adjacency matrix g . To compute ∆ , I use Eq . ( 4 . 2 ) and a symbolic software package to calculate the Jacobian and Hessian of the PGF . For each subgraph , I initialise the matrix Z as a square matrix with all entries set to zero . The i th column and row of Z correspond to state (cid:126)G i . Once populated , the entry Z i , j contains the rate at which state i transitions to state j . To illustrate how to generate Z , I consider the G 0 subgraph , see Fig . 4 . 1 , with states (cid:126)G = ( SS , SI , SR , IS , II , IR , RS , RI , RR ) . I associate the state G 0 ( SS ) with the ﬁrst row and column of Z . Moving along the top row , when a column index is reached that corresponds to a state that G 0 ( SS ) may transition to , I update the entry with the appropriate rate . The ﬁrst row of Z is all zero except for Z 1 , 2 = ( T ∆ ) 2 and Z 1 , 4 = ( T ∆ ) 1 . The second row , corresponding to state G 0 ( SI ) , has entries Z 2 , 3 = γ and Z 2 , 5 = τ + ( T ∆ ) 1 , see Eq . ( 4 . 7 ) . Fill every row of the matrix Z in this way , refer to App . 4 . 7 . 4 the full matrix corresponding to G 0 . The algorithm for this process is given for an arbitrary subgraph in App . 4 . 7 . 6 , and the corresponding Matlab code is provided as supplemental material . Using the rate matrix , the ODE for the subgraph state (cid:126)G i yields d (cid:126)G i dt = −   3 | G | (cid:88) j = 1 Z i , j   (cid:126)G i +   3 | G | (cid:88) k = 1 Z k , i   (cid:126)G k . ( 4 . 10 ) where | G | and (cid:126)G i denote the number of states the subgraph G may take and a speciﬁc state of G respectively . The ﬁnal step to generating the full system is to set the initial conditions . Only the initial conditions for subgraph states need computing as I ( 0 ) , R ( 0 ) 81 and θ i ( 0 ) are ﬁxed as per the previous section . This can be done by cycling through each element of (cid:126)G . If ( a ) (cid:126)G i is a purely susceptible state then I set (cid:126)G i 0 = J i ( 1 − (cid:15) ) , and if ( b ) (cid:126)G i contains a single infectious individual and is otherwise susceptible , I set (cid:126)G i 0 = J i (cid:15) . All other states are set to zero , as I assume that with a suﬃciently small infectious seed , the probability of having two infectious individuals in a subgraph is zero . 4 . 4 Results To validate the proposed mean - ﬁeld model and to assess the goodness of the approxima - tion , I compare results from the ODEs to output from stochastic simulations . Networks were generated following the conﬁguration algorithm , please refer to App . 4 . 7 . 5 . Typi - cally I generated 500 networks of size N = 15000 and computed a single realisation of the epidemic , according to the Gillespie algorithm with the per link rate of infection τ = 1 and a recovery rate of γ = 1 . Simulations which died out before an outbreak occurred were removed . The simulations were seeded with a single infectious individual and an outbreak was said to occur if 5 % infectious prevalence was achieved . In all plots simulation results and the solution of ODEs are plotted in solid lines and discrete points , respectively . To start , I test the performance of my model against existing or state of the art models . To do this , in Fig . ( 4 . 3 ) , I show results for two degree distributions that are homogeneous in the classical sense . Their PGFs are given by ψ 1 ( ˆ α ) = 1 2 ( α 14 + α 17 ) 1 2 ( α 15 + α 16 ) , ψ 2 ( ˆ α ) = 1 2 ( α 1 + α 2 ) 1 4 2 ( α 10 + α 11 + α 12 + α 13 ) 2 , where the variables α i correspond to subgraphs given in Fig . 4 . 1 . Figure 4 . 3 shows results from a pairwise model with closures at the level of quadruples [ 26 , 28 ] . While the classical clustering is easy to compute , the order - four clustering / transitivity ratios were measured following a recently developed subgraph counting algorithm , see Chapter . 3 . These are deﬁned as the ratio of a given subgraph count to all open and closed paths of 82 length four , both counted uniquely . Currently , this model operates using an average or homogenous degree and stores no information about the degree distribution , but does assume random mixing of subgraphs . All models perform well in capturing the epidemic dynamics on networks generated using the PGF given by ψ 1 , see Fig . ( 4 . 3 ) with higher epidemic peak . However , when networks are created using the PGF given by ψ 2 , see lower peak in Fig . ( 4 . 3 ) , the pairwise model struggles to accurately capture the dynamics , both anticipating and compressing the epidemic’s time scale or duration , but predicting correctly the peak prevalence . The pairwise model does not encode any information relating to degree or subgraph distribution and hence a homogeneous random set - up , as used here , would be an appropriate choice . The key advantage of my algorithm over existing ones is that it can handle non - fully connected subgraphs . To test this , in Fig . 4 . 4 , I utilise networks models C1 - C4 as speciﬁed in sec . 4 . 2 . 2 . Fig . 4 . 4 shows plots of simulation average compared to the ODE’s solution for the four network types . I observe that the epidemic behaviour of networks composed of increasingly large cycles quickly converge to that of the random null case . It has previously been observed that for networks with the same degree distribution , an increasing level of clustering slows the epidemic transmission and requires a higher transmission rate in order to observe a successfully spreading epidemic [ 20 , 33 ] . This occurs for two reasons : ( 1 ) subgraphs that are densely connected share fewer connec - tions to the rest of the network so an initial seed will be restricted to one part of the network and ( 2 ) this same eﬀect leads to infectious nodes competing for susceptible nodes . While this may make transmission more eﬃcient locally , it does limit further seeding in fully susceptible parts of the network . Fig . 4 . 4 shows that the eﬀect of G (cid:31) is similar to that of the clustered network , but less pronounced ; both the time and size of peak infectious prevalence is delayed and reduced when compared to the null case . For cycles larger than four nodes this behaviour is less pronounced and the epidemics for larger cycles converge to the null case , as observed with G (cid:68) . To highlight the ﬂexibility of my model and its wide - ranging applicability to sys - tematically investigating the impact of higher - order network structure , in Fig . ( 4 . 5 ) , I 83 0 . 05 0 . 10 0 . 15 0 . 20 0 . 25 0 . 30 0 1 2 3 4 5 6 I n f e c t ed popu l a t i on Time Figure 4 . 3 : Performance of other models . Lines , circles and squares correspond to sim - ulation average , ODE solution and pairwise ODE solution , respectively . All networks are homogeneous with k = 5 . The lower peaks correspond to networks generated with each node allocated one of each corner type of a G (cid:27) with clustering φ = 0 . 3 . Data with higher peak correspond to networks generated with a single G 0 and two G (cid:31) subgraphs yielding φ ≈ 0 . 84 l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l 0 . 00 0 . 05 0 . 10 0 . 15 0 . 20 0 . 25 0 1 2 3 4 5 6 I n f e c t ed popu l a t i on Time Figure 4 . 4 : Clustering and cycles . Solid lines and markers correspond to simulation average and ODE solution , respectively . From darkest to lightest , the solid lines cor - respond to : k ∼ 2 P ois ( 2 ) , G (cid:68) ∼ P ois ( 2 ) , G (cid:31) ∼ P ois ( 2 ) and G (cid:52) ∼ P ois ( 2 ) , i . e . , each network used has an identical degree distribution given by P ( degree = 2 k ) = P ( degree = k | P ois ( 2 ) ) . Clustering is φ = 0 . 2 and φ ≈ 0 for the G (cid:52) and other net - works , respectively . For clarity , ODE solutions for only the two extreme cases , the null and triangle network , have been included . Epidemics corresponding to cycles of length six have been computed but omitted due to their close similarity to the null case . Only two ODE solutions have been included for upper and lower cases . 85 consider four networks with the same ﬁrst and second moments , and the same classical clustering but generated using diﬀerent families of subgraphs , see models 1 - 4 sec . 4 . 2 . 2 . Figure 4 . 5 shows simulation average for all four networks and the solution of ODEs for the upper and lower cases , models 1 and 4 respectively . Figure 4 . 5 shows a clear trend whereby larger subgraphs lead to epidemics with smaller peak prevalence . A second more subtle trend shows a delay in time until peak prevalence . Subgraphs of larger size lead to a signiﬁcant diﬀerence in the behaviour of epidemics and echo what was observed for increasing levels in clustering . This could be explained by considering a subgraph with average degree (cid:104) k s (cid:105) . When (cid:104) k (cid:105) < (cid:104) k s (cid:105) the network will exhibit extreme clustering , where isolated structures are increasingly densely connected at the cost of becoming isolated . This eﬀect is more subtle than clus - tering but it can be signiﬁcant . This suggests that the accuracy of future models would improve if they can correctly account for networks’ subgraph composition , particularly subgraphs beyond that of triangles . Finally , the data in Fig . 4 . 5 has been produced using networks that do not have the same degree distribution but do have equal ﬁrst and second moments , and clustering . To better understand how the non - equal higher moments may have aﬀected the results , I have simulated epidemics on the corresponding random networks , Model 1 (cid:48) : G 0 ∼ 2 P ois ( 2 ) and Model 4 (cid:48) : G 0 ∼ P ois ( 3 ) + 5 P ois ( 1 / 5 ) , see App . 4 . 7 . 7 . This plot shows that the diﬀerences observed in Fig . 4 . 5 cannot be explained by the diﬀerence in the degree distribution alone . Thus , generating identical clustering but using diﬀerent subgraphs can lead to non - negligible diﬀerences in epidemic dynamics . 4 . 5 Discussion Higher - order structures , captured for example as diﬀerent subgraph compositions and arrangements in a network , have been identiﬁed as features of real networks . Examples include households , social interactions and biological networks . These building blocks of networks have been shown to play a key role in deﬁning a network’s topology and can have signiﬁcant impact on the functions of the network or on the dynamical pro - cesses unfolding on the network . Despite this , the modelling toolset in this direction 86 l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l 0 . 00 0 . 05 0 . 10 0 . 15 0 . 20 0 . 25 0 1 2 3 4 5 6 7 I n f e c t ed popu l a t i on Time Figure 4 . 5 : Clustering via diﬀering subgraphs . Solid lines and markers correspond to simulation average and ODE solution , respectively . From darkest to lightest the solid lines correspond to : G (cid:52) ∼ P ois ( 2 ) ; G 0 ∼ P ois ( 2 ) , G (cid:2) ∼ P ois ( 2 / 3 ) ; G 0 ∼ P ois ( 8 / 3 ) , G cp , ∼ P ois ( 1 / 3 ) and G 0 ∼ P ois ( 3 ) , G ch , ∼ P ois ( 1 / 5 ) , where cp and ch denote complete pentagon and hexagon subgraphs , respectively . The networks were generated so that (cid:104) k (cid:105) = 4 , var ( k ) = 8 and φ = 0 . 2 . The downward trend of peak prevalence corresponds to networks composed of complete subgraphs of increasing size . The larger subgraphs lead to more connections within the group rather than to the rest of the network . 87 is underdeveloped . Here , I provided an approach that considerably extends the scope of the current modelling framework by enabling us to consider arbitrary sets of exotic subgraphs as building blocks for the network . My approach also oﬀers control over the arrangements of subgraphs and , more importantly and uniquely , an automated way of generating a system of ODEs that accurately capture the prevalence proﬁle for a wide range of subgraph sets , as shown in the results section . The previous section has shown how higher - order structures may be investigated us - ing this model . Moreover , I provided the ﬁrst example of generating classes of networks constructed using diﬀerent subgraph sets while keeping degree , variance and clustering , all in the classic sense , ﬁxed . For example , I showed that epidemics on networks with no clustering , but exhibiting cycles , display features which are signiﬁcantly diﬀerent to those observed in classical random networks with eﬀectively no clustering . Equally , I have shown that diﬀerent subgraph combinations or arrangements can create higher - order structure that may signiﬁcantly aﬀect the epidemic dynamics . My work opens the possibility to carry out a wide - ranging and systematic investigation of the impact of subgraphs and higher - order structure on dynamics on networks . When presented with real world network data whose structure can be explained by a set of subgraphs , all that will be needed in order to apply my framework is to extract the subgraphs and their distribution around nodes . A possible limitation to the widest applicability is the number of nodes in the largest subgraph . However , as shown by my results when going from squares to pentagons , it is likely that the eﬀect of higher - order structures will decay , or be less marked , as their size increases . There are two key ways in which this work may be extended : ( a ) generalisation to SIS dynamics . Due to the deﬁnition of θ ( t ) it is currently not possible to apply this model to SIS dynamics . However , all the framework relating to network structure is independent from this variable and may therefore still be appropriate . ( b ) The subgraph approach is highly suitable for adaptation to household models . Household models typically specify a distribution of household sizes overlaid on a contact network to produce a well - connected network [ 4 , 25 ] . A successful incorporation of such network in my framework could lead to a highly relevant set of household models . 88 4 . 6 Acknowledgements Martin Ritchie acknowledges funding for his PhD studies from EPSRC ( Engineering and Physical Sciences Research Council ) and the University of Sussex . 4 . 7 Appendix In this Appendix I ( a ) give a more detailed explanation of the excess degree , ( b ) provide ODEs for an example network , ( c ) show how my generalised model reduces to a previous model under certain conditions , ( d ) provide an example state transition matrix , ( e ) give pseudocode for both the subgraph - based conﬁguration model and the algorithm used to generate the state transition matrix and , ﬁnally , ( f ) compare epidemic dynamics on two conﬁguration model networks with their degree distributions being diﬀerent but with the same mean and variance . 4 . 7 . 1 Excess degree Recall the probability generating function ( PGF ) of a network’s hyperstub degree dis - tribution with m nodal positions : ψ ( ˆ α ) = ∞ (cid:88) ˆ y = 0 p ˆ y m (cid:89) i = 1 α y i i , ( 4 . 11 ) where ˆ α = ( α 1 , α 2 , . . . , α m ) is a placeholder , and ˆ y = ( y 1 , y 2 , . . . , y m ) is such that y i denotes the number of times a node appears in position x i , i = 1 , 2 , . . . , m . The PGF of the excess degree distribution is a critical component in my derivation and it is illustrative to see how it is computed . To see this , I ﬁrst compute the expected excess degree , select a node at random but proportional to its number of x i hyperstubs , y i p ˆ y . Next , to obtain the expected x i degree , sum this product over all nodes (cid:104) x i (cid:105) = ∞ (cid:88) ˆ y = 0 y i p ˆ y = : ∂ψ ( ˆ α ) ∂α i (cid:12)(cid:12)(cid:12)(cid:12) ˆ α = 1 . ( 4 . 12 ) The above sum considers each and every node from which an x i hyperstub originates . However , in hyperstub conﬁguration model networks there is usually more than one 89 type of hyperstub and this adds an additional level of detail to the excess degree . The excess degree now may incorporate two diﬀerent hyperstubs into its calculations . It is now possible to describe a nodes x i degree but conditional on it being selected through ones of its x j hyperstubs . More formally I can compute the expected excess degree using conditional expectation , E ( x j | x i = y i ) , which yields δ x j , x i = (cid:80) ∞ ˆ y = 0 y j y i p ˆ y (cid:80) ∞ ˆ y = 0 y i p ˆ y , ( 4 . 13 ) where δ x j , x i denotes the expected x i hyperstub degree observed from a node selected proportionally to its x j hyperstub degree . The denominator is given by Eq . ( 4 . 11 ) , and the numerator is speciﬁed by ∞ (cid:88) ˆ y ∗ = 0 y i y j p ˆ y ∗ = ∂ 2 ψ ∂α i α j (cid:12)(cid:12)(cid:12)(cid:12) α = 1 . 4 . 7 . 2 ODEs for an example network The following provides ODEs for a simple example network composed of only G 0 and G (cid:52) . When deriving ODEs by hand listing out equations for T i is a good starting point as they include many of the subgraph states , i . e . G 0 ( SI ) , and can be used as the start of a check list when listing state equations T 1 = τ [ G 0 ( SI ) ] , T 2 = τ [ G 0 ( IS ) ] , T 3 = τ [ G (cid:52) ( SSI ) + G (cid:52) ( SIS ) + 2 G (cid:52) ( SII ) + G (cid:52) ( SRI ) + G (cid:52) ( SIR ) ] , T 4 = τ [ G (cid:52) ( SSI ) + G (cid:52) ( ISS ) + 2 G (cid:52) ( ISI ) + G (cid:52) ( RSI ) + G (cid:52) ( ISR ) ] , T 5 = τ [ G (cid:52) ( ISS ) + G (cid:52) ( SIS ) + 2 G (cid:52) ( IIS ) + G (cid:52) ( IRS ) + G (cid:52) ( RIS ) ] . 90 It is important to node the above equations will not list every subgraph state and that for a subgraph composed of n will have 3 n state equations . For example , the ﬁrst few state equation for G 0 are given by ˙ G 0 ( SS ) = − [ ( T ∆ ) 2 + ( T ∆ ) 1 ] G 0 ( SS ) , ˙ G 0 ( SI ) = − ( τ + γ ) G 0 ( SI ) − ( T ∆ ) 1 G 0 ( SI ) + ( T ∆ ) 2 G 0 ( SS ) , ˙ G 0 ( IS ) = − ( τ + γ ) G 0 ( IS ) − ( T ∆ ) 2 G 0 ( IS ) + ( T ∆ ) 1 G 0 ( SS ) , with equations for the following being omitted { ˙ G 0 ( SR ) , ˙ G 0 ( II ) , ˙ G 0 ( IR ) , ˙ G 0 ( RS ) , ˙ G 0 ( RI ) , ˙ G 0 ( RR ) } , Similarly , sample ODEs for the G (cid:52) subgraph , taken from a system of 27 ODEs , are : ˙ G (cid:52) ( SSS ) = − [ ( T ∆ ) 5 + ( T ∆ ) 4 + ( T ∆ ) 3 ] G (cid:52) ( SSS ) , ˙ G (cid:52) ( SSI ) = − [ 2 τ + γ + ( T ∆ ) 4 + ( T ∆ ) 3 ] G (cid:52) ( SSI ) + ( T ∆ ) 5 G (cid:52) ( SSS ) , ˙ G (cid:52) ( SIS ) = − [ 2 τ + γ + ( T ∆ ) 5 + ( T ∆ ) 3 ] G (cid:52) ( SIS ) + ( T ∆ ) 4 G (cid:52) ( SSS ) , ˙ G (cid:52) ( ISS ) = − [ 2 τ + γ + ( T ∆ ) 5 + ( T ∆ ) 4 ] G (cid:52) ( ISS ) + ( T ∆ ) 3 G (cid:52) ( SSS ) , with equations for the following being omitted { ˙ G 0 ( SSR ) , ˙ G 0 ( SII ) , ˙ G 0 ( SIR ) , ˙ G 0 ( SRS ) , ˙ G 0 ( SRI ) , ˙ G 0 ( SRR ) , ˙ G 0 ( ISI ) , ˙ G 0 ( ISR ) , ˙ G 0 ( IIS ) , ˙ G 0 ( III ) , ˙ G 0 ( IIR ) , ˙ G 0 ( IRS ) , ˙ G 0 ( IRI ) , ˙ G 0 ( IRR ) , ˙ G 0 ( RSS ) , ˙ G 0 ( RSI ) , ˙ G 0 ( RSR ) , ˙ G 0 ( RIS ) , ˙ G 0 ( RII ) , ˙ G 0 ( RIR ) , ˙ G 0 ( RRS ) , ˙ G 0 ( RRI ) , ˙ G 0 ( RRR ) } , Each hyperstub will have a survivor function and a corresponding ODE describing its evolution , as follows : ˙ θ 1 = − θ 1 T 1 M 1 , 91 ˙ θ 2 = − θ 2 T 2 M 2 , ˙ θ 3 = − θ 3 T 3 M 3 , ˙ θ 4 = − θ 4 T 4 M 4 , ˙ θ 5 = − θ 5 T 5 M 5 . The fraction of the population that is susceptible or infected is computed by compound - ing θ i into the PGF . Symbolically , this is computed by the following ˙ S = d dtψ ( ˆ θ ) , ˙ I = − d dtψ ( ˆ θ ) − γI , R = γI , where ψ is the probability generating function that generates the hyperstub degree distribution and ˆ θ = ( θ 1 , θ 2 , θ 3 , θ 4 , θ 5 ) is the probability that infection via subgraphs of types one to ﬁve has not been transmitted . The total system size for this example network is given by 3 2 + 3 3 + 5 + 2 = 43 , with each term in the above corresponding to G 0 , G (cid:52) , survivor functions and epidemic prevalence , respectively . In general , the total number of equations is given by : M (cid:88) i = 1 3 | G i | + | G i | + 2 , where G i denotes a subgraph , | G i | is the number of nodes in a subgraph , and m is the total number of subgraphs . 4 . 7 . 3 Equivalence to previous model for complete subgraphs The PGF formulation originally proposed by Volz et al . [ 76 ] is equivalent to my pro - posed model in the case of complete subgraphs . Consider an arbitrary complete sub - graph composed of l nodes and a network that is composed only of this subgraph . If 92 positions within the subgraph are labelled distinctly , { x 1 , x 2 , . . . x l } , as I have done in my approach , then the PGF of such a network is given by ψ p ( ˆ α ) = ∞ (cid:88) ˆ y = 0 p ˆ y l (cid:89) i = 1 α y i i , ( 4 . 14 ) where ˆ y = ( y 1 , y 2 , . . . , y l ) . Volz et al . ’s framework treats all topologically equivalent positions as one single position . Thus , in this case , the subgraph has a single label , x , that corresponds to a single count , y , and the PGF takes the following form ψ v ( ˆ α ) = ∞ (cid:88) y = 0 p y α y . ( 4 . 15 ) I now show how one may obtain Eq . ( 4 . 15 ) from Eq . ( 4 . 14 ) . Since both PGFs describe the same network , the rate at which my formulation allocates position x i must be 1 / l the rate at which Volz et al . ’s formulation allocates x . If I replace the unique position labels of Eq . ( 4 . 14 ) with a single position marker ( such as in Volz et al . ’s model ) , the following expression is obtained ψ p ( ˆ α ) = ∞ (cid:88) ˆ y = 0 p ˆ y l (cid:89) i = 1 α y / l , ( 4 . 16 ) where the following substitutions , y i = y / l and α i = α , were made so that α y is the result of the above product . Now , every time an x i is allocated , I allocate an x instead . Finally , since p ˆ y is a joint distribution of l identically distributed independent random variables , i . e . , ˆ y = ( y / l , y / l , . . . , y / l ) , I get : ψ p ( ˆ α = α ) = ∞ (cid:88) y = 0 p y α y . It is also possible to translate between the two models elsewhere in the derivation . As an example , in my approach , infection over lines is given by T 1 and T 2 , as per Eq . ( 4 . 3 ) . By adding these values , the equivalent values used in Volz et al . ’s formulation may be recovered . Following my derivation , ﬁrst let G 0 ( SI ) ≡ G 0 ( IS ) and : T 1 + T 2 = τG 0 ( SI ) + τG 0 ( IS ) = 2 τG 0 ( SI ) . 93 Since each G 0 is generated from a PGF that allocates positions at rate 1 / 2 that of Volz et al . ’s PGF , the 2 will cancel yielding τG 0 ( SI ) . However , it is only necessary to show equivalence between the two PGFs since all other variables follow from this . 4 . 7 . 4 State transition matrix The state transition matrix for G 0 ( lines ) is given by : Z =    ( SS ) ( SI ) ( SR ) ( IS ) ( II ) ( IR ) ( RS ) ( RI ) ( RR ) ( SS ) 0 ( T ∆ ) 2 0 ( T ∆ ) 1 0 0 0 0 0 ( SI ) 0 0 γ 0 τ + ( T ∆ ) 1 0 0 0 0 ( SR ) 0 0 0 0 0 ( T ∆ ) 1 0 0 0 ( IS ) 0 0 0 0 τ + ( T ∆ ) 2 0 γ 0 0 ( II ) 0 0 0 0 0 γ 0 γ 0 ( IR ) 0 0 0 0 0 0 0 0 γ ( RS ) 0 0 0 0 0 0 0 ( T ∆ ) 2 0 ( RI ) 0 0 0 0 0 0 0 0 γ ( RR ) 0 0 0 0 0 0 0 0 0    . 94 4 . 7 . 5 Algorithm 1 - Hyperstub CM algorithm input : N , K , output : A . Variables / initialisation N : the number of nodes , % Each row of K corresponds to single node’s hyperstub sequence . K : the hyperstub degree sequence , a non - square matrix K ∈ N N × H 0 , H : the number of hyperstub types , A : the adjacency matrix of the network , A ∈ { 0 , 1 } N × N , M : the number of subgraphs , H i : the degree of a speciﬁc hyperstub , h i : a dynamic list of nodes that are incident to H i hyperstubs , g i : the adjacency matrix of a subgraph , g ∈ { 0 , 1 } n i × n i , n i : the number of nodes in g i . Procedure % The following creates dynamic lists the , ‘hyperstub bins’ . for every node i do for each H j do append K i , j multiples of node ( i ) to the hyperstub bin ( h j ) end end . . . 95 . . . for For each subgraph g i do for For each hyperstub of g i do % Select unfiformly at random and without % replacement a node incident to each desired hyperstub . n 1 = rand - sample ( h i 1 ) n 2 = rand - sample ( h i 2 ) . . . n g i = rand - sample ( h i 2 ) end % The following compares pairs of the selected nodes % to determine their connectivity in A . for k = ( 1 , 2 , . . . , n i ) do for l = ( 1 , 2 , . . . , n i ) do if g ( n k , n l ) = = 1 then A ( n k , n l ) = 1 end end end end Algorithm 2 : The hyperstub conﬁguration model . In this implementation , multiple - edges are over written but self - edges are permitted . To prevent this , if nodes already share an edge or a node has been selected twice ( self - edge ) the current selection of nodes is disregarded and a new selection is made , this is repeated until a valid selection is made . This reselection step has been omitted below for readability . 96 4 . 7 . 6 Algorithm 2 - Transition matrix algorithm input : g , output : Z . Variables / initialisation g : the adjacency matrix of a subgraph G , % Z ∈ R 3 n × 3 n . Z : matrix corresponding rate of transition between states of G , n : node count of G , % # » G contains 3 n elements . # » G : the vector of states of G , τ : per link infection rate , γ : recovery rate , T ∆ : the expected force of infection a node within G experiences from outside G . . . . 97 . . . Procedure for every state # » G i do for every state # » G j do % Compare each and every possible state transition of G : switch # » G i → # » G j do case A single infection occurs do if the new I is connected to another I within G then % Check the connectivity of the new I using g . Z i , j = τ + T ∆ else % the infection was from only an external source . Z i , j = T ∆ end end case A single recovery occurs do Z i , j = γ end case otherwise do Z i , j = 0 end end end end Algorithm 3 : Generating the state transition matrix . The switch comparison needs to check : ( 1 ) that only a single node has changed state and ( 2 ) only state changes S → I and I → R are valid . 98 4 . 7 . 7 Null case for Fig . 4 . 5 0 . 00 0 . 05 0 . 10 0 . 15 0 . 20 0 . 25 0 1 2 3 4 5 6 7 I n f e c t ed popu l a t i on Time Figure 4 . 6 : The eﬀect of higher moments . The solid and discrete plots correspond to the null networks G 0 ∼ 2 P ois ( 2 ) and G 0 ∼ P ois ( 3 ) + 5 P ois ( 1 / 5 ) respectively , i . e . the null cases for the triangle and hexagon networks . Both plots have equal ﬁrst and second moments and clustering equal to that of a random network . The diﬀerence observed is a result of non - equal higher moments and is not enough to explain the diﬀerence observed in Fig . 4 . 5 . 99 Chapter 5 Paper III : Generation and analysis of networks with a prescribed degree sequence and subgraph family : Higher - order structure matters Martin Ritchie 1 , Luc Berthouze 2 , 3 & Istvan Z . Kiss 1 1 School of Mathematical and Physical Sciences , Department of Mathematics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 2 Centre for Computational Neuroscience and Robotics , University of Sussex , Falmer , Brighton BN1 9QH , UK . 3 Institute of Child Health , London , University College London , London WC1E 6BT , UK Journal of Complex networks - in press 100 5 . 1 Introduction In the standard conﬁguration model , triangle subgraphs appear infrequently as a by - product of working with ﬁnite size networks [ 10 ] . But what if one wants triangle subgraphs to appear in a network , in particular , if one wants to model a complex network with clustering ? An extension of the conﬁguration model to this case exists [ 45 , 58 ] . In this extension a node is allocated a number of stubs , that may go on to form standard edges , as well as a number of triangle ‘corners’ or hyperstubs , pairs of stubs that will form triangles . While edges are formed in the usual way , triangles are formed by selecting three triangle hyperstubs at random and connecting their pairs of constituent stubs . As for edges the number of all stubs must be divisible by two , the total number of triangle hyperstubs must be divisible by three is a necessary condition for the triangle hyperstub sequence to be graphical . Another similarity this model shares with the standard conﬁguration model is that the probability that any two triangles will share an edge , thus forming a G (cid:27) subgraph ( see Figure 5 . 1 ) , vanishes in the limit of large network size [ 32 ] . Just as a network composed of lines only is limited in recreating real - world networks , so is a model that can only include edges and triangles . Obviously , this may depend on properties and structure of the real networks , but in many cases edges and triangles are not enough to produce an accurate enough artiﬁcial replica of the real network . The conﬁguration model has since received further attention to address this [ 32 ] . Building on the edge - triangle model a more general subgraph - based approach is taken where one may specify distributions of edges alongside distributions of arbitrary sub - graphs . In the case of complete subgraphs it is obvious how to do this . For example , G (cid:2) subgraphs can be formed by allocating to nodes hyperstubs composed of three stubs . Then , four of these hyperstubs can be selected at random to form a G (cid:2) sub - graph . However , it is not clear how this may work for subgraphs that are composed of more than one type of hyperstubs . For example , in a G (cid:27) , there are two diﬀerent types of hyperstubs and it is necessary for any network model or construction algorithm to be able to make this distinction . Karrer and Newman proposed that it is possible to 101 G 0 u 3 G (cid:52) / t 3 u 4 s 4 i 4 G (cid:31) / e 4 G (cid:27) / d 4 G (cid:2) / c 4 G (cid:68) G (cid:55) Figure 5 . 1 : The set of subgraphs that have been used in this paper . The subgraphs denoted by : { G 0 , G (cid:52) , G (cid:31) , G (cid:27) , G (cid:2) , G (cid:68) , G (cid:55) } , are those that have been used as input for the proposed network construction algorithms . I use : { u 3 , t 3 , u 4 , s 4 , i 4 , e 4 , d 4 , c 4 } , to denote the total number of uniquely counted subgraphs given by the subgraph counting algorithm , see Chapter . 3 . 102 identify a node’s role within a subgraph using orbits . To ﬁnd the orbits of a subgraph one must ﬁrst list all possible automorphisms of the subgraph , that is , permutations of nodes that do not create or destroy edges . The orbit of a node is a set of other nodes with which it may be permuted so that no edges are created or destroyed . Of course , computing the automorphism group of subgraphs is computationally challenging but so long as subgraphs with few nodes are used , this is not a problem [ 32 ] . Network models are rarely used independently of other processes . Instead , they typically provide the substrate for dynamical processes to operate upon . For example , the compartmental Susceptible - Infected - Recovered ( SIR ) model of contagion is often embedded into a network to help better understand how the network and its properties aﬀect the epidemic . Chapter 4 successfully incorporated the Karrer and Newman ap - proach into an approximate ODE or mean - ﬁeld model for SIR epidemics on networks displaying higher - order structure , and this mean - ﬁeld model showed excellent agree - ment with simulation results . In order to achieve this , Ritchie et al . bypassed the need to classify a node’s role in a subgraph via the automorphism group . Instead , nodes within arbitrary subgraphs were uniquely enumerated , even if they were topologically equivalent to one another , and this enumeration deﬁned their role . The motivation for this adaptation was to simplify the derivation of the ODE model . Using the orbit ap - proach or the full enumeration are diﬀerent ways of satisfying diﬀerent modelling needs , and these are not the only possible approaches . In fact , when modelling networks and nodes within subgraphs one can instead classify nodes by the stub cardinality of their hyperstubs . A common method across all of the above models , i . e . , edge - triangle , the more gen - eral Karrer - Newman model , and that proposed by Ritchie et al . ( see [ 66 ] ) , is that sequences of hyperstubs must be speciﬁed for each and every subgraph that is to be included . From these sequences it is possible to recover the network’s degree sequence by multiplying them by the stub cardinality of the hyperstub which they represent , and then adding the resulting sequences . Therefore the degree sequence of the network is a result of the construction of the network rather than a quantity that is controlled for . However , given that the degree sequence of the network is probably the single most important characteristic of a network , there is a need for methods that can generate 103 networks with a particular subgraph family and distribution yet preserve a given de - gree sequence . In [ 66 ] , I recently showed that it is possible to constrain the hyperstub sequences so that the 1 st and 2 nd moments of the resulting degree sequence are con - trolled . In this paper , I go beyond this work and propose two generation algorithms that provide full control over the degree sequence and clustering . The chapter is organised as follows . In Section 5 . 2 , I describe in detail the two generation algorithms , including tuning of clustering . In Section 5 . 3 , I validate the algorithms and I explore the diversity of the generated networks by comparing them to the widely used Big - V rewiring scheme , see Chapter . 3 . I further analyse networks generated by using diﬀerent subgraph families or distributions . Epidemic and complex contagion models are simulated on these networks and I show that degree distribution and global clustering alone are not suﬃcient to predict the outcome of these processes . Finally , I discuss extensions and further research questions relating to my work . 5 . 2 Materials and methods In this section I propose two new algorithms , both of which are parametrised by a degree sequence and a set of subgraphs . The algorithms construct hyperstub degree sequences ( from which the input degree sequence may be recovered exactly ) that can be used in a modiﬁed conﬁguration model style connection procedure to realise a network . There are some caveats regarding the preservation of the input degree sequence that are common to all conﬁguration - like models . Firstly it is necessary for a degree sequence to add to an even number to be graphical . If it does not , a stub must be created or destroyed to satisfy this constraint . In general , hyperstub degree sequences must add with multiplicity equal to the number of times they appear in their parent subgraphs , i . e . , a triangle hyperstub sequence must be divisible by 3 . When selecting stubs or hyperstubs at random to form subgraphs it is possible that self or multi - edges may form . The number of these events happening depends only on the average degree (cid:104) k (cid:105) and thus remains constant with network size . It is possible to simply delete self - edges or collapse multi - edges down to a single edge . If this approach is taken then the guiding degree sequence will be violated . Instead I disallow such connections by reselecting 104 nodes in the connection procedure until no self or multi - edges will be created by forming the subgraph . This is known as the matching algorithm [ 50 ] . Finally , it is possible for the process to be left with no option other than to add subgraphs over existing links or selecting multiple instances of the same node . In this case I completely reset the algorithm , regenerating hyperstub sequences and forming subsequent connections until a network is formed . 5 . 2 . 1 The underdetermined sampling algorithm – UDA The concept underpinning this algorithm is that for each node there are combinations of hyperstubs that will satisfy its degree . For example , a node with k = 3 classical edges could form 3 single G 0 edges or 1 G 0 edge and 1 G (cid:52) hyperstub . The number of possible arrangements will depend on the degree of the node and number of input subgraphs . From these arrangements a single one is selected at random . For a given degree k this problem is equivalent to solving an underdetermined linear Diophantine equation equal to k subject to positivity constraints . The coeﬃcients are given by the edge counts of the hyperstubs , that are induced by the input subgraphs , and the solution will give the number of each hyperstub so that the degree of the node is matched exactly . To generate a network using this algorithm , let us assume that a degree sequence , D = { d 1 , d 2 , . . . , d N } ∈ N 1 × N 0 , and the set of subgraphs to be included in the network’s construction , G = { G 1 , G 2 , . . . , G l } , is given . Then , for each subgraph I classify its hyperstubs by their edge cardinality . It is now possible to form a vector that has elements specifying the number of edges in each hyperstub . From this vector I take the unique elements . For example , the G (cid:27) subgraph will have a corresponding hyperstub vector of α = ( 2 , 3 ) . For a given degree k I must consider all possible hyperstubs and hyperstub combinations that yield a classical degree equal to k . To systematically list all such combinations , I ﬁrst concatenate all the hyperstub vectors into a single vector , α , to be used as coeﬃcients for the following linear underdetermined Diophantine equation k = α 1 x 1 + α 2 x 2 + · · · + α r x r , ( 5 . 1 ) where k = k min , k min + 1 , . . . , k max and r denotes the number of eligible hyperstubs – a node with degree k = 3 can only go on to form subgraphs where the hyperstubs contain 105 no more than three edges – , for the given degree k and which is solved subject to the constraint x ∈ N r 0 . A solution x of this equation corresponds to the number of each type of hyperstubs required to result in a node of degree k . For example , if α 1 and α 2 take values 1 and 2 corresponding to hyperstubs of G 0 and G (cid:52) respectively and the degree of the node is k = 5 , the Diophantine equation would take the form 5 = x 1 + 2 x 2 and the solution space of this equation is given by the pairs ( x 1 , x 2 ) = { ( 5 , 0 ) , ( 3 , 1 ) , ( 1 , 2 ) } . In general these equations may be solved recursively by ﬁxing a trial value x i = j and reducing the dimensionality of the equation by absorbing this term . This is repeated until the equation becomes of the standard form : k (cid:48) = α 1 x 1 + α 2 x 2 , which can be solved explicitly . A solution obtained this way will form a single solution of the original equation . This process is then repeated for a diﬀerent starting trial solution , and since I seek only positive solutions and k is ﬁnite , the corresponding solution space has a ﬁnite number of elements . Matlab code for this process is available at https : / / github . com / martinritchie / Network - generation - algorithms . Once the entire solution space for each degree has been found it is possible to start forming the hyperstub degree sequences . To proceed , the algorithm works se - quentially through the degree sequence D = { d 1 , d 2 , . . . , d N } of the N nodes , where d i ∈ { k min , k min + 1 , . . . , k max } . By selecting at random a solution from the solution space that corresponds to k = d i , that speciﬁes the hyperstub conﬁguration , and by concatenating all the selected solutions for all the nodes a hyperstub degree sequence of dimension h × N , where h denotes the total number of hyperstubs induced by the input subgraphs , is formed . For incomplete subgraphs it is not possible to select solutions of the Diophantine equations’ solution spaces at random . The reason for this is two - fold : ( 1 ) not all incomplete subgraphs are composed of equal quantities of each of their constituent hyperstubs , and ( 2 ) hyperstubs with lower stub cardinality will appear more frequently than hyperstubs of higher stub cardinality because hyperstubs with fewer edges can be more readily accommodated into the degree of a node . Problem ( 1 ) may be addressed by representing every hyperstub induced by a subgraph in the vector of coeﬃcients opposed to grouping hyperstubs by their stub cardinality . Problem ( 2 ) may be addressed by decomposing hyperstubs generated in excess into simple / classical edges . It should be 106 noted that both of these methods will bias the resulting sequences but that this bias is only present when incomplete subgraphs are speciﬁed as input for the UDA . One advantage of the method I use is that it is possible to calculate the number of hyperstubs that will be decomposed back into stubs using integer partitions , and this is detailed in the Appendix 5 . 5 . 1 . In particular the following result holds , p ( k , α ) = (cid:98) kα (cid:99) (cid:88) m = 1 m (cid:2) p ( k − αm ) ) − p ( k − α ( m + 1 ) ) (cid:3) , where p ( k , α ) is the number of times that α appears in the partitions of k , with α ≤ k . This may be used to compute the number of times certain hyperstubs appear . Re - turning to the example of the homogeneous networks with k = 5 , generated with G 0 and G (cid:27) there will be 4 counts of the double hyperstub generated for every 2 counts of the triple corner in the partition space , since 5 can be partitioned as { { 1 , 1 , 1 , 1 , 1 } , { 2 , 1 , 1 , 1 } , { 3 , 1 , 1 } , { 4 , 1 } , { 2 , 2 , 1 } , { 2 , 3 } , { 5 } } , and p ( 5 , 2 ) = 4 and p ( 5 , 3 ) = 2 . It should be noted that p ( k , α ) will count how many times α appears in all possible partitions of k . However , since it is not possible for either a double or triple corner to appear with a degree 4 or 5 hyperstub this will not aﬀect the result . This simple number theoretic consideration shows a viable way in which bias can be quantiﬁed or measured . Pseudo - code for the UDA algorithm is given in Appendix 5 . 5 . 2 , and the Matlab code is available from https : / / github . com / martinritchie / Network - generation - algorithms . A priori clustering calculation The global clustering coeﬃcient is deﬁned as the ratio between the total number of triangles and the total number of connected triples of nodes (cid:52) + ∨ , since each triangle contains 3 triples of nodes : C = (cid:52)(cid:52) + ∨ . It should be noted that each unique triangle is counted 6 times and each unique triple is counted twice . The number of triples incident to a node of degree k is given by (cid:52) + ∨ = k ( k − 1 ) since a node will form a triple with every pair of its neighbours and each triple is counted twice . The expected number of 107 triples for a node of degree k is therefore obtained by adding P ( K = k ) × k ( k − 1 ) over all degrees , where P ( K = k ) is the probability of ﬁnding a node of degree k . The expected number of triangles incident to a node of degree k , (cid:104)(cid:52) k (cid:105) , may be obtained from the Diophantine equations’ solution space associated with that degree . To do this , one needs to add all occurrences of triangle corners , regardless of which subgraph they belong to , from that solution space and divide by the number of solutions in that particular solution space , since solutions are selected uniformly at random . Finally I are in a position to compute the expected global clustering coeﬃcient as C = k max (cid:88) k = 2 (cid:104)(cid:52) k (cid:105) P ( K = k ) × k ( k − 1 ) . ( 5 . 2 ) For example , let us consider the homogeneous network with k = 5 and the input subgraphs G 0 and G (cid:27) . These subgraphs induce the vector of coeﬃcients α = ( 1 , 2 , 3 ) that , for k = 5 , has the following solution space G 0 : 5 3 2 1 0 , g 2 : 0 1 0 2 1 , g 3 : 0 0 1 0 1 , where the rows give the number of each hyperstub , the columns give an individual solution and g 2 and g 3 denote the double and triple hyperstub of G (cid:27) respectively . From this I may calculate the expected number of triangles (cid:104)(cid:52) 5 (cid:105) . In this example I can see that on average for every g 3 corner the UDA algorithm will generate two g 2 corners . Since the excess g 2 corners will be decomposed into edges , one observes that g 2 and g 3 will be generated in equal quantities . So the expected number of g 2 is given by the expected number of g 3 , e . g . , 2 / 5 per node . Since g 2 denotes a triangle corner , the number of g 2 corners also gives the total number of triangles , that is uniquely counted and per node . So the expected number of triangle per node is 12 / 5 , each triangle being counted 6 times , and this network will have a theoretical global clustering of C = 0 . 12 . Computationally , I verify this by generating such networks with N = 5000 , and ﬁnd that the number of open triples and triangles is exactly | ∨ | = 100000 and | (cid:52) | = 12120 , resulting in a global clustering of 0 . 1212 , as expected . 108 5 . 2 . 2 Cardinality matching – CMA The cardinality matching algorithm ( CMA ) requires as input a degree sequence , a set of subgraphs and corresponding subgraph sequences , i . e . , multiple sequences specifying to which and how many subgraphs nodes belong to . Note that these sequences are not yet allocated to nodes . The algorithm proceeds to allocate hyperstubs of subgraphs to nodes that have a suﬃcient number of stubs to accommodate the hyperstub degree . The algorithm outputs hyperstub degree sequences , from which the input degree sequence may be recovered exactly . This then can be used to realise a network based on a modiﬁcation of the conﬁguration model . To generate a CMA network one needs to ﬁrst decide on a degree sequence D , a sub - graph set G = { G 1 , G 2 , . . . , G l } and a set of subgraph sequences S = { S 1 , S 2 , . . . , S l } , where S j ( k ) , with j = 1 , 2 , . . . , l and k = 1 , 2 , . . . , N , gives the number of times a node will be part of a G j subgraph without specifying the precise hyperstubs that connect the node to a G j subgraph . My goal is to map the subgraph sequences into hyperstub sequences which can then be allocated to nodes that can accommodate them . From the hyperstub sequence , it is possible to work out the lower bound on the degree of nodes that can accommodate a speciﬁc hyperstub sequence . To complete this mapping one needs to diﬀerentiate between complete and incomplete subgraphs . For complete subgraphs the subgraph sequence is identical to its hyperstub sequence since there is only one way or hyperstub by which a node can connect to such a subgraph . Thus , multiplying the hyperstub degree by the number of edges in the hyperstub will give us the lower bound on the degree of nodes that can accommodate the hyperstub sequence . For incomplete subgraphs the subgraph sequence does not specify how the node connects to the subgraph . Hence , I need to determine how the various hyperstubs are allocated to nodes . To see how to do this let us consider an arbitrary subgraph G with subgraph sequence S . Given that the subgraph has m distinct hyperstubs , let p = ( p 1 , p 2 , . . . , p m ) be the vector of probabilities of picking diﬀerent hyperstubs . I note that the values of p reﬂects the proportion of each hyperstub found in the subgraph . For example , G (cid:27) has two distinct hyperstubs that both appear with multiplicity two , in this case p = ( 1 / 2 , 1 / 2 ) . This will ensure that their numbers are balanced and subgraphs 109 can be formed . Next , using the multinomial distribution corresponding to subgraph G , M G ( s Gi , P ) where s Gi denotes the subgraph sequence of index i ( this is not yet a node label ) , I pick hyperstub types to transform the subgraph sequence into hyperstub degree . For each s Gi this will result in a vector of length m specifying the exact number of each hyperstub . It is possible to concatenate all the resulting choices from all multinomial distributions M G ( s Gi , p ) , where i = 1 , 2 , . . . , N to form the following matrix   s G 1 s G 2 . . . s GN h G 1 h G 1 ( 1 ) h G 1 ( 2 ) . . . h G 1 ( N ) h G 2 h G 2 ( 1 ) h G 2 ( 2 ) . . . h G 2 ( N ) . . . . . . . . . . . . . . . h Gm h Gm ( 1 ) h Gm ( 2 ) . . . h Gm ( N )   = H G , where h Gi ( j ) denotes the number of h i hyperstubs contributing to the subgraph degree s Gj . I now need to compute the total number of edges speciﬁed by each column of the above matrix or by the hyperstub degree . This is given by H G ( i ) = (cid:80) mj = 1 | h Gj | h Gj ( i ) that denotes the total number of edges required by the subgraph degree s Gi , and where | h Gj | represents the number of edges needed to form hyperstub j in subgraph G and i = ( 1 , 2 , . . . , N ) . This process needs to be repeated for each subgraph to be included in the networks construction , i . e . , for each subgraph G i with subgraph sequence S G i = ( s G i 1 , s G i 2 , . . . , s G i N ) there is a corresponding H G i with elements that the algorithm will use as the lower bound on the degree of the nodes that can accept such a selection of hyperstubs . The algorithm then proceeds by choosing the largest values , H max , from all H G i matrices , and this is used as the lower bound on the degree of nodes that can accept the hyperstub conﬁguration associated with H max , i . e . , have enough edges of the classical type . From this list of all nodes with degree equal to or larger than H max , a node is selected uniformly at random . The degree of the selected node is reduced accordingly , and the index of the node is now associated with the hyperstub degree to H max . This node is then removed from the pool of eligible nodes for that particular subgraph , as otherwise it may be selected twice for the same subgraph thus violating the subgraph 110 degree sequence . Similarly , the element H max is also removed from the pool of subgraph degree sequences that have yet to be allocated to nodes . This needs to be repeated until all elements of each subgraph degree sequence are allocated to nodes . Any edges that are not allocated to a particular hyperstub or subgraph are left to form edges . In some cases it may be necessary to impose some cardinality constraints on the subgraph sequences . Obviously , if the network is homogeneous with k = 3 I cannot include complete pentagon subgraphs or allocate two G (cid:52) subgraphs to each node . More generally , it may be necessary to constrain the moments of the subgraph sequences . Let (cid:104) k (cid:105) denote the mean degree of the given degree sequence and let G i be a subgraph composed of a single hyperstub with cardinality α and having subgraph degree sequence with mean (cid:104) s (cid:105) then : (cid:104) αs (cid:105) = α (cid:104) s (cid:105) ≤ (cid:104) k (cid:105) is a necessary condition for the two sequences to be graphical . In the case of more than one hyperstub , this is extended to (cid:80) mi = 1 α i (cid:104) s i (cid:105) ≤ (cid:104) k (cid:105) , where m , α i and s i denote the number of hyperstubs , hyperstub cardinality and associated subgraph sequence respectively . For the networks generated in this paper , the degree sequence and subgraph sequences were measured from networks previously generated by the UDA such that prior knowledge about the sequences being graphical was available without the need to impose any such constraints . Clustering calculations for this algorithm are trivial since the subgraph degree se - quences are known . One simply sums a sequence and then multiplies this ﬁgure by the number of triangles induced by that subgraph , being careful not to double count across multiple sequences for the same subgraph . The number of triples of connected nodes can be calculated following the method given for the UDA given in Section 5 . 2 . 1 . Pseudo - code for the CMA is given in Appendix 5 . 5 . 3 , with the corresponding Matlab code avail - able from https : / / github . com / martinritchie / Network - generation - algorithms . 5 . 2 . 3 Connection process I describe this process for a single incomplete subgraph . The case of the complete subgraph is trivial and has already been described ( see Section 5 . 1 ) . This process was ﬁrst presented by Karrer & Newman [ 32 ] . Consider a subgraph composed of three diﬀerent hyperstub types , h 1 , h 2 and h 3 that occur with a multiplicity of 1 , 2 and 3 111 respectively , i . e . , the subgraph is composed of 6 nodes . I require the following necessary conditions for the hyperstub sequences to be graphical N (cid:88) i = 1 | h 1 | i = 1 2 N (cid:88) i = 1 | h 2 | i = 1 3 N (cid:88) i = 1 | h 3 | i , ( 5 . 3 ) where | h i | j speciﬁes the h i hyperstub degree of node j . If these conditions are not met , one needs to decompose any surplus hyperstubs into stubs that may form classical edges in order to preserve the degree sequence . Using the hyperstub sequences , one can create three dynamic lists for the three hyperstub types where a node appears with multiplicity equal to its hyperstub degree . Once the dynamic lists are fully populated , the connections process can start . This is done by selecting the following : 1 node from the h 1 bin , 2 from the h 2 bin and 3 from the h 3 bin , and all the selection processes done uniformly at random and without replacement . Before forming the connections between these 6 nodes , one must ensure that : ( 1 ) the selection contains no duplicates ( that will form self - edges ) and ( 2 ) that no single pair of nodes are already connected . If a connection already exists , a multi - edge may form and / or subgraphs will share edges . If neither of these conditions are violated then the connections may be formed . Otherwise all nodes are returned to their bins and a new selection is made . It is possible that after many selections no valid combinations of nodes remain . For example , all bins may contain the same node . In this and other non - viable cases , all bins are re - populated and the connection process is started anew . As previously discussed , it is possible to delete self and multi - edges but this will destroy the degree sequence . The method of reselecting nodes has been previously introduced and is known as the matching algorithm see [ 50 ] . However , it has previously been shown that the matching algorithm introduces a bias when constructing networks [ 39 ] . Ideally , when a self or multi - edge is formed one would start the whole connection process from scratch , the so - called refusing algorithm . This results in an unbiased sampling [ 39 ] . For the conﬁguration model the number of such self and multi - edges depends on the ﬁrst and second moments of the degree distribution [ 56 ] . As such , an unbiased conﬁguration model approach may result in prohibitive running times as (cid:104) k (cid:105) increases . 112 0 100 200 300 400 500 0 25 50 75 Input number of triangles A tt e m p t s ( a ) Attempts 0 5 10 15 0 25 50 75 Input number of triangles A v e r age t r i ang l e b y p r odu c t s Degree 2 3 4 5 ( b ) Triangle by - products Figure 5 . 2 : ( a ) The average number of refusal attempts to realise a network and ( b ) the average number of triangle by - products found per networks . In both cases the CMA was parametrised with only G 0 and G (cid:52) subgraphs . As more G (cid:52) are speciﬁed as input both the number of average number of attempts and triangle by - products decreases . Triangle by - products are computed by subtracting the input from the measured number of triangles . 113 Currently , there are no analytical results regarding the probability of self or multi - edges as well as bias for the subgraph connection process . To help develop some under - standing I set up the following experiment : using the CMA and the refusing algorithm I generate a series of homogeneous networks . Initially the CMA is parametrised with no G (cid:52) subgraphs and only G 0 , reverting to the conﬁguration model . For increasing degree of k = 2 , 3 , 4 , 5 I then determine the average number of attempts required before a network is produced as well as the average number of G (cid:52) by - products . I then repeat this but with the CMA parametrised with an increasing number of G (cid:52) subgraphs , dis - tributed so that a node is incident to at most one G (cid:52) subgraphs , and so on . Figure 5 . 2 illustrates that both the number of attempts and that of G (cid:52) by - products per network increase with degree , as one would expect . It also reveals that these quantities decrease when the CMA is parametrised with increasing numbers of G (cid:52) subgraphs , regardless of degree . Since the number of attempts per networks is a function of the number of self and multi - edges , these results also imply that the number of self and multi - edges reduce as the number of G (cid:52) increase . I believe the following to be an intuition behind this surprising result : consider a node incident to two G (cid:52) stubs . For a self loop to be created about this node there is a single opportunity : both hyperstubs must be simultaneously selected during the connection procedure . Now , if I consider a node with the same degree , but with each of its of stubs being used to form only lines , then there are k ( k − 1 ) / 2 = 6 diﬀerent ways in which pairs of stubs may be selected that result in a self edge . Thus , in general , hyperstubs will reduce the number of ways in which tuples of nodes may be connected , compared to stubs , and this will impact both the self and multi - edge probabilities . Edge probability : With the subgraph connection process it is possible to replicate some of the estimates for the number of self and multi - edges that exist for the standard conﬁguration model , as shown in [ 56 ] . The following calculations are intended to further develop intuition and by no means form a rigorous argument . Let us consider a network model composed of only G (cid:52) subgraphs , referred to henceforth as the G (cid:52) model . Let 3 m t denote the total number of G (cid:52) hyperstubs , i . e , this network has a total of m t G (cid:52) subgraphs and 6 m t = 2 m stubs , since each G (cid:52) hyperstub is composed of two stubs . I ﬁrst consider the probability of two nodes sharing a single edge in the G (cid:52) model . 114 Let nodes i and j have G (cid:52) degrees of t i and t j respectively . A single hyperstub of i may connect to any of the t j hyperstubs originating from j . The probability of selecting one of j ’s hyperstubs is t j / ( 3 m t − 1 ) , since I can no longer select the initial hyperstub incident to i . However , any one of i ’s hyperstubs could connect to any one of j ’s hyperstubs , and t i t j / ( 3 m t − 1 ) correctly accounts for this . A third hyperstub must now be selected , incident to a third distinct node , i . e . , any one of the 3 m t − t i − t j hyperstubs that are not incident to either i or j . If a hyperstub incident to i or j were to be selected this would result in both a self and multi - edge . Therefore , the probability of i and j sharing a single edge is given by p i , j = t i t j 3 m t − 1 (cid:18) 3 m t − t i − t j 3 m t − 2 (cid:19) ( 5 . 4 ) Since the degree distribution is ﬁxed and I are interested in the limit as N → ∞ ⇒ m t → ∞ , lim N →∞ p i , j = t i t j 3 m t . ( 5 . 5 ) Let us now consider that in the G (cid:52) model each node is incident to 2 t i = k i stubs in a network composed of a total of 2 ( 3 m t ) = 2 m stubs . By making these substitutions into equation 5 . 5 the edge probability of the G (cid:52) model can be compared to its equivalent conﬁguration model k i 2 k j 2 6 m t = k i k j 4 m < k i k j 2 m , where the r . h . s . represents the edge probability in the conﬁguration model . This counter - intuitive result for the G (cid:52) model is due to half of a node’s stubs being obliged to connect to a third distinct node , excluding possibilities of i and j connecting which would otherwise be possible in the conﬁguration model . Multi - edge expectation : As in the standard conﬁguration model I can use equa - tion ( 5 . 5 ) to estimate the number of multi edges which may happen in two ways when selecting a triplet of nodes : ( a ) atleast one of the constituent pairs already being con - nected or ( b ) all three of nodes already being connected . I ﬁrst consider ( a ) , the more likely scenario . i and j will share an edge with the probability given in equation ( 5 . 5 ) . 115 To compute the probability of ﬁnding a second edge between nodes i and j in the G (cid:52) model one must compound ( t i − 1 ) ( t j − 1 ) / ( 3 m t − 1 ) with equation ( 5 . 5 ) P ( A ( i , j ) > 1 ) = t i t j ( t i − 1 ) ( t j − 1 ) ( 3 m t ) 2 , adding this probability over all pairings of nodes and dividing by 2 to remove the double count , yielding lim N →∞ 1 2 N (cid:88) i = 1 N (cid:88) j = 1 p ( A ( i , j ) > 1 ) = lim N →∞ 1 2 N (cid:88) i = 1 N (cid:88) j = 1 t i t j ( t i − 1 ) ( t j − 1 ) ( 3 m t ) 2 ( 5 . 6 ) = lim N →∞ 1 2 N (cid:88) j = 1 t j ( t j − 1 ) 3 m t N (cid:88) i = 1 t i ( t i − 1 ) 3 m t = 1 2 (cid:18) (cid:104) G 2 (cid:52) (cid:105) − (cid:104) G (cid:52) (cid:105) (cid:104) G (cid:52) (cid:105) (cid:19) 2 , where I have used : 3 m t = (cid:104) G (cid:52) (cid:105) N , (cid:104) G (cid:52) (cid:105) = 1 N N (cid:88) i = 1 t i , (cid:104) G 2 (cid:52) (cid:105) = 1 N N (cid:88) i = 1 t 2 i . ( 5 . 7 ) Again , compare this value to that of the standard conﬁguration model with the substi - tutions 2 t i = k i and 2 ( 3 m t ) = 2 m yielding 1 2 (cid:18) 12 (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) (cid:104) k (cid:105) (cid:19) 2 < 1 2 (cid:18) (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) (cid:104) k (cid:105) (cid:19) 2 , where the r . h . s . represents Newman’s original estimate for multi - edges in the conﬁgu - ration model [ 56 ] . Now consider scenario ( b ) , selecting the same triplet of nodes twice resulting in 3 multi edges . Consider the nodes i , j and l with G (cid:52) degrees of t i , t j and t l . In the limit of large networks this triple of nodes are connected with probability lim N →∞ p i , j , l = lim N →∞ t i t j t l 3 m t ( 3 m t − 1 ) = lim N →∞ t i t j t l 9 m 2 t , the probability of this triple being selected twice is approximately lim N →∞ t i t j t l ( t i − 1 ) ( t j − 1 ) ( t l − 1 ) ( 3 m t ) 4 . 116 This probability can be added over all triplets of nodes yielding lim N →∞ 1 3 N (cid:88) i = 1 N (cid:88) j = 1 N (cid:88) l = 1 t i t j t l ( t i − 1 ) ( t j − 1 ) ( t l − 1 ) ( 3 m t ) 4 = lim N →∞ 1 3 ( 3 m t ) N (cid:88) i = 1 t i ( t i − 1 ) 3 m t N (cid:88) j = 1 t j ( t j − 1 ) 3 m t N (cid:88) l = 1 t l ( t l − 1 ) 3 m t = lim N →∞ 1 3 N (cid:104) G (cid:52) (cid:105) (cid:18) (cid:104) G 2 (cid:52) (cid:105) − (cid:104) G (cid:52) (cid:105) (cid:104) G (cid:52) (cid:105) (cid:19) 3 , ( 5 . 8 ) where I have again used equations ( 5 . 7 ) . The expected number of multi - edges created by two G (cid:52) subgraphs connected on the same triplet of nodes is not constant with network size but instead tends to zero with increasing network size . This result , alongside equation ( 5 . 6 ) , suggests that the number multi - edges in the G (cid:52) model will be less than what is found in the equivalent conﬁguration model network . I next consider the probability of a self edge in the G (cid:52) model . The number of self - edges : During the connection process of the conﬁguration model self edges are created when two stubs that are incident to the same node are connected . The analogue of this in the G (cid:52) model is selecting three hyperstubs incident to the same node , resulting in three self - edges . I shall denote this event { i , i , i } p ( { i , i , i } ∧ { i , i , i } ) = (cid:0) t i 3 (cid:1) ( 3 m t ) ( 3 m t − 1 ) , lim N →∞ p ( { i , i , i } ∧ { i , i , i } ) = lim N →∞ t i ( t i − 1 ) ( t i − 2 ) 6 ( 3 m t ) 2 , this value can be added over all nodes to estimate the expected number of self - edges in the network lim N →∞ N (cid:88) i = 1 t i ( t i − 1 ) ( t i − 2 ) 6 ( 3 m t ) 2 = (cid:104) G 3 (cid:52) (cid:105) − 3 (cid:104) G 2 (cid:52) (cid:105) + 2 (cid:104) G (cid:52) (cid:105) 6 N (cid:104) G (cid:52) (cid:105) 2 , ( 5 . 9 ) where I have used equations ( 5 . 7 ) . This value , like equation ( 5 . 8 ) is not ﬁxed with network size and instead tends to zero as N becomes large . Node duplicates : In the G (cid:52) model it is possible to select a pair of hyperstubs incident to the same node alongside a distinct third node , resulting in a self and multi - edge . I 117 shall denote this event { i , i , j } . Then lim N →∞ p ( { i , i , j } ) = lim N →∞ (cid:32) (cid:0) t i 2 (cid:1) 3 m t (cid:18) 3 m t − t i 3 m t − 2 (cid:19)(cid:33) ( 5 . 10 ) = lim N →∞ t i ( t i − 1 ) 2 ( 3 m t ) , which , after adding over all nodes , yields lim N →∞ N (cid:88) i = 1 t i ( t i − 1 ) 3 m t = (cid:104) G 2 (cid:52) (cid:105) − (cid:104) G (cid:52) (cid:105) 2 (cid:104) G (cid:52) (cid:105) ( 5 . 11 ) Since the determining factor of this expectation is the selection of a pair of hyper - stubs incident to the same node I shall compare it to the self - edge probability for the equivalent conﬁguration model network (cid:104) G 2 (cid:52) (cid:105) − (cid:104) G (cid:52) (cid:105) 2 (cid:104) G (cid:52) (cid:105) = (cid:104) ( k / 2 ) 2 (cid:105) − (cid:104) k / 2 (cid:105) 2 (cid:104) k / 2 (cid:105) ( 5 . 12 ) = 14 (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) (cid:104) k (cid:105) < (cid:104) k 2 (cid:105) − (cid:104) k (cid:105) 2 (cid:104) k (cid:105) , i . e . , as N → ∞ I expect that the number of duplicate node selections resulting from G (cid:52) placement will be strictly less than the number of self - edges in the equivalent conﬁguration model network . By - products : It is possible for previously created subgraphs to become connected into a set of subgraphs with overlap , see Figure 5 . 3 for an illustration . The expected number of multi - edges above demonstrates the possibility for one such occurrence , here , two G (cid:52) subgraphs sharing an edge . In this case if the multi - edge was collapsed down to a single edge the process would yield a G (cid:27) subgraph . The expected number of these events was shown to be bounded by the number of multi - edges in the equivalent conﬁguration model network . However , this type of connection was not permitted in my implementation . Currently , I are unable to oﬀer estimates regarding the frequency of erroneous G (cid:52) subgraphs , that is , G (cid:52) subgraphs that appear beyond that which were controlled for . 118 This type of connection is permitted in my implementation and would result in the subgraph by - products as shown in Figure 5 . 3 . However , Figure 5 . 2 indicates that the number of erroneous G (cid:52) subgraphs decreases as the number of intended subgraphs increases . A B D E C F G A B D E C F G Figure 5 . 3 : Unintended generation of subgraphs with overlap . Despite satisfying the generation constraints given in Section 5 . 2 . 3 , the addition of triangle ( C , G , F ) to toast ( A , B , C , D ) and triangle ( D , F , E ) results in 3 unintended distinct toasts { ( B , C , F , D ) in red , ( D , C , F , E ) in green , and ( D , C , G , F ) in blue } overlapping on one unintended triangle ( C , F , D ) , in gray . 5 . 2 . 4 Models of contagion In order to illustrate the impact of network structure – and higher - order struc - ture particularly – diﬀerent epidemic dynamics were simulated on the generated net - works . Three diﬀerent models were chosen : Susceptible - Infected - Susceptible ( SIS ) , Susceptible - Infected - Recovered ( SIR ) and complex contagion [ 47 , 60 ] . To simulate SIS and SIR dynamics , the fully susceptible network of nodes is perturbed by in - fecting a small number of nodes . Infected nodes spread the infection to susceptible 119 neighbours at a per - link rate of infection τ . Infected individuals recover independently of the network at rate γ and become susceptible again ( for SIS dynamics ) or become removed ( for SIR epidemics ) . In contrast to the infection process in the previous two dynamics , the complex contagion process requires that susceptible nodes are exposed to multiple infectious events before becoming infected . These events must be from dif - ferent infectious neighbours as only the ﬁrst infection attempt from an infectious node counts . This critical infection threshold for each node is set in advance and is usually bounded from above by the degree of the node . To simulate the complex contagion dynamics , nodes are allocated infection thresholds r i ∈ N , where i = 1 , 2 . . . , N , and the fully susceptible population of nodes is perturbed by infecting an initial number of nodes chosen at random . In this model a susceptible node i becomes infected as soon as it has received atleast r i infectious contacts from r i distinct infectious neighbours . There is no recovery in this model and infected individuals remain infected for the duration of the epidemic . 5 . 3 Results 5 . 3 . 1 Algorithm validation To validate my algorithms , I generated a number of networks with pre - speciﬁed degree distribution and subgraph set , as well as a multinomial distribution of subgraph corners or hyperstubs around nodes . I veriﬁed that the networks generated were as expected given the input . As described in Section 5 . 2 the algorithms preserve the degree sequence , permitting at most a single edge to be deleted if the degree sequence sums to an odd number . The ability to exercise control over the networks’ subgraph topology is illustrated by Figure 5 . 4 . Note that Figure 5 . 4a shows a random network that includes G (cid:52) subgraphs . When constructing networks using the conﬁguration model it is possible to create G (cid:52) subgraphs with non - zero probability and this is to be expected [ 57 ] . However , this is a function of mean degree not network size , and this probability goes to zero with network size going to inﬁnity . 120 ( a ) Random ( b ) Big - V , C = 0 . 22 ( c ) UDA , C = 0 . 22 ( d ) CMA , C = 0 . 22 Figure 5 . 4 : Small networks generated by the Big - V , UDA and CMA algorithms . All networks have the same homogeneous degree sequence with k = 5 . The Big - V algorithm re - wired the random network , Figure 5 . 4a . The UDA was parametrised with subgraphs G 0 G (cid:27) and G (cid:2) . The CMA was parametrised so that every node was incident to 2 G (cid:52) . The Big - V , UDA , and CMA networks all have a global clustering coeﬃcient of C = 0 . 22 . The network nodes are coloured so that green / orange / pink denotes nodes of low / medium / high clustering , respectively . 121 c4 d4 e4 i4 s4 t3 u3 u4 Random 0 0 42 17 446 6 482 1706 Big - V 1 23 10 10 212 7 386 1220 UDA 7 10 22 5 243 1 389 1239 CMA 0 9 10 40 185 24 389 1201 Table 5 . 1 : Subgraph counts for the networks of Figure 5 . 4 . Note : if one adds a single G (cid:52) so that it shares a single edge with a G (cid:27) and this edge is not the diagonal edge of G (cid:27) , then d 4 increases by one but t 3 will have only increased by one , not two . I note that 2 · d 3 yields the maximum number of possible G (cid:52) induced by G (cid:27) . In general , calculating the number of G (cid:52) in this way will always yield the maximum possible count but not necessarily the true count because a single G (cid:52) could be shared by more than one G (cid:27) . To properly demonstrate the proposed algorithms’ control over the building blocks in the network , I shall use the subgraph counting algorithm , presented in Chapter . 3 , to count the number of subgraphs a posteriori . In this implementation I counted sub - graphs composed of 4 nodes or less – see the top two rows of Figure 5 . 1 , as well as 5 - and 6 - cycles . Table 5 . 1 provides the subgraph counts for the networks displayed in Figure 5 . 4 . It conﬁrms that the random network given in Figure 5 . 4a contains 6 G (cid:52) , counted uniquely , as observed above . The table also reveals that , through increasing the frequency of G (cid:52) , the Big - V algorithm also introduced G (cid:27) and G (cid:2) subgraphs . The UDA was parametrised with { G 0 , G (cid:27) , G (cid:2) } and the table conﬁrms a signiﬁcant presence of these subgraphs when compared to the random network . Although the CMA was parametrised solely with G (cid:52) subgraphs distributed so that each node was incident to 2 G (cid:52) subgraphs , the subgraph counts reveal that this network contains 9 G (cid:27) subgraphs . This is a consequence of attempting to generate small networks with such a high preva - lence of triangles : it is highly likely that the algorithms will select nodes that already share one other common neighbour later in the connection process . One expects the proportion of these events to become increasingly negligible with greater network size . Next , I used the above motif counting algorithm to evaluate the extent to which 122 the proposed algorithms can exert control over the prevalence of subgraphs in the generated networks . Figure 5 . 5 compares measured counts of subgraphs in UDA and CMA networks with expected counts . Here , an important observation must be made at the outset . Even in random networks , cycles ( G (cid:31) , G (cid:68) and G (cid:55) ) appear in signiﬁcant quantities : 33 , 100 and 333 times respectively , and regardless of network size . They are a natural consequence of the fact that the probability of selecting two nodes in diﬀerent branches of a ﬁnite tree - like network is non - zero . Therefore , my expected counts are the sum of the counts expected by construction and those measured in the random networks . For example , since the CMA networks were generated with each node being incident to a single G (cid:55) subgraph , a total of 833 uniquely counted G (cid:55) subgraphs were expected by construction in networks of size N = 5000 . However , because an average of 344 G (cid:55) subgraphs were counted in random networks of size N = 5000 , my expected count was 833 + 344 = 1177 . The measured count was found to be 1165 . More generally , I found the expected counts to match well with the measured counts , indicating that the generating algorithms did not create by - products in addition to those observed at random 1 . However , these results also suggest that the level of control exerted by the algorithms over subgraph prevalence depends on how often those subgraphs appear naturally as by - products . Control is strongest for subgraphs that do not appear naturally as by - products . When considering subgraphs that appear naturally with high frequency , e . g . , G (cid:68) , real control over their prevalence can only be achieved if an even higher frequency is imposed , which may not always be possible for a given degree sequence and global clustering . In what follows , I set out to highlight diﬀerences between the new algorithms com - pared to classic ones and also to emphasise the diversity within networks generated by the same algorithms . 1 Although I will show in Section 5 . 3 . 3 that for speciﬁc parameterisations of CMA , by - products are possible . 123 10 100 500 250 1000 2500 5000 Network size A v e r age c oun t Subgraph e4 h6 p5 t3 ( a ) UDA 100 500 1000 250 1000 2500 5000 Network size A v e r age c oun t Subgraph h6 p5 ( b ) CMA Figure 5 . 5 : A comparison of subgraphs found in the UDA and CMA networks to their random network analogues and expected counts plotted with thick lines , thin lines and discrete markers respectively . p 5 and h 6 denote the counts of G (cid:68) and G (cid:55) respec - tively . All networks have the same homogeneous degree sequence with k = 5 but with increasing size : N = 250 , 500 , 1000 , 2500 , 5000 , where 100 of each size was generated . ( a ) The UDA algorithm was parametrised with subgraphs { G (cid:52) , G (cid:31) , G (cid:68) , G (cid:55) } , and the resulting average subgraph counts are shown on the left . ( b ) The CMA algorithm was parametrised so that each node was incident to a single G (cid:68) and G (cid:55) subgraph , and the resulting average subgraph counts are shown on the right . The expected values were calculated by adding the total counts from the subgraph sequences , dividing them by the subgraphs’ node cardinality , and adding these ﬁgures to the number of subgraphs found as by - products in the random networks . 124 5 . 3 . 2 Sampling from a diﬀerent area of the network state space In this section , I seek to highlight the versatility of the proposed generation mechanisms by showing that , given a degree distribution and a global clustering , they sample dif - ferent areas of the network state space than existing methods such as Big - V . I begin by reminding the reader that the Big - V algorithm searches for paths of 5 nodes and rewires such paths so that additional triangles are created . In other words , the principal build - ing block of this algorithm is the G (cid:52) subgraph and subgraphs that may be constructed by overlapping G (cid:52) subgraphs . It follows that this algorithm is unlikely to give rise to a higher than expected at random number of G (cid:31) or other ‘empty’ cycles . The UDA algorithm was therefore parametrised with subgraph family { G 0 , G (cid:52) , G (cid:31) , G (cid:68) , G (cid:55) } . In order to eliminate the eﬀect of degree heterogeneity , a homogeneous degree sequence with k = 5 was used . The resulting networks had a global clustering coeﬃcient of C = 0 . 04 , induced by 666 ( uniquely counted ) G (cid:52) subgraphs . I then used the Big - V algorithm to rewire random networks constructed using the same degree sequence until the desired level of clustering , C = 0 . 04 , was achieved . Signiﬁcant diﬀerences between generated networks would conﬁrm that the Big - V and UDA generated networks are sampled from diﬀerent areas of the state space of networks satisfying that degree se - quence and global clustering . As a further point of reference , data taken from a random network realisation , generated using the conﬁguration model , of the degree sequence was included in all of my analyses . Henceforth I shall refer to these three types of networks as network family A . In Figure 5 . 6 , the distributions of the average path length , average betweenness centrality and maximum betweenness centrality for the above networks are given . In general , an increase in clustering results in a higher value of the average path length – see the average path length of random and Big - V networks in Figure 5 . 6a . This is a known result [ 6 ] . Surprisingly , a similar magnitude of diﬀerence in average path length and average and maximum betweenness centrality is observed between the Big - V and UDA networks despite them having the same global clustering , see Figure 5 . 6a , 5 . 6b and 5 . 6c , respectively . Output from the subgraph counting algorithm ( Figure 5 . 7 ) conﬁrms that , as expected , the Big - V algorithm does not generate more G (cid:31) subgraphs 125 5 . 85 5 . 90 5 . 95 6 . 00 6 . 05 Random Big−V UDA Network type A v e r age pa t h l eng t h ( a ) Average path length 24250 24500 24750 25000 25250 Random Big−V UDA Network type R an k ( b ) Average betweenness 28000 30000 32000 34000 Random Big−V UDA Network type R an k ( c ) Maximum betweenness Figure 5 . 6 : Plots of the average path length and diameter for homogeneous networks ( N = 5000 and k = 5 ) for network family A . The Big - V algorithm was parametrised solely by clustering , in this case C = 0 . 04 , to best suit the networks produced by the UDA . The diﬀerences in average path length , average betweenness centrality and maximum betweenness centrality between the random network and its Big - V analogue were of similar magnitude as the diﬀerences between the Big - V network and the cycle - based UDA networks , and these were signiﬁcant . than are observed in the random network . More generally , the results show that the Big - V and UDA networks exhibit markedly diﬀerent subgraph topologies with the Big - V networks relying heavily on G (cid:27) to cluster the networks unlike UDA networks that rely almost exclusively on G (cid:52) not appearing as part of any other subgraph . It may be that such variation was facilitated by the low level of clustering considered , and that with higher clustering , eliciting such diﬀerences might be more challenging . However , these results provide evidence that the UDA algorithm can sample from a diﬀerent part of the state space than the Big - V algorithm . 5 . 3 . 3 Diversity within the newly proposed algorithms In this section , I illustrate the diversity of networks generated with UDA and CMA by exploring the impact of subgraph distribution over nodes ( for identical degree distribu - tion and global clustering ) and how it may change network characteristics . To do this I ﬁrst parametrised the UDA with subgraph family { G 0 , G (cid:52) , G (cid:31) , G (cid:27) , G (cid:2) } ( chosen due to its frequent use in the literature , e . g . , [ 6 , 23 , 28 , 32 , 65 , 66 ] ) , and a 126 c4 d4 e4 t3 0 . 00 0 . 25 0 . 50 0 . 75 1 . 00 0 . 00 0 . 25 0 . 50 0 . 75 1 . 00 0 1 2 3 0 25 50 75 0 200 400 600 0 200 400 600 800 Count P r obab ili t y Network Random Big−V UDA Figure 5 . 7 : Distributions of total number of subgraphs in network family A ( N = 5000 , k = 5 ) . The Big - V and UDA networks have a global clustering coeﬃcient of C = 0 . 04 . All given counts are unique . The t 3 counts denote the number of G (cid:52) subgraphs that are not involved in any subgraphs of four nodes ( i . e . , G (cid:27) and G (cid:2) ) . However , the c 4 and d 4 counts may include G (cid:52) subgraphs shared by G (cid:27) and G (cid:2) . The number of G (cid:31) subgraphs generated by the Big - V algorithm is very close to the counts found in random networks . 127 heterogeneous degree sequence generated using the Poisson distribution with λ = 5 . Since it is diﬃcult to control for the number of subgraphs that appear in a network generated using the UDA I counted the total number of each subgraph , from UDA - produced subgraph sequences , and used these counts to create alternative subgraph sequences as input to the CMA , see Section 5 . 2 . 2 , rather than drawing such sequences from a theoretical distribution . The resulting networks were therefore expected to have identical degree sequence , global clustering of 0 . 13 and subgraph counts . Since the CMA allows us to choose arbitrary sequences of subgraphs , I opted to push the clustered subgraphs , { G (cid:52) , G (cid:27) , G (cid:2) } , onto the higher - degree nodes to accentuate the eﬀect of clustering . I did this by specifying that these subgraphs had to appear with multiplicity greater than one . For example , a degree - three G (cid:2) hyperstub required a minimum k = 9 - degree node . As previously , I included a random network realisation of the heterogeneous degree sequence for comparison . Henceforth , I shall refer to these three types of networks as network family B . The heterogeneity in degree distribution allows us to use additional degree - dependent metrics : degree - degree correlations and degree - dependent clustering [ 53 , 68 ] . These have been plotted in Figure 5 . 8 . The plot for the degree - degree correlation co - eﬃcient shows that by aggregating clustered subgraphs around high - degree nodes , the CMA - constructed networks yield a higher assortativity than that of UDA and random networks , see Figure 5 . 8a . This is an important property of the methodology since the clustering potential of a network is bounded by the degree - degree correlation coeﬃ - cient [ 68 ] . Moreover , if one wishes to maximise clustering in heterogeneous networks , it is necessary for nodes of similar degree to mix preferentially . Figure 5 . 8b shows that the CMA networks yield a negatively skewed distribution of degree - dependent clustering , with nodes of degree k ≥ 9 contributing most to clustering . The ability to manipulate the degree and clustering relationship as well as assortativity clearly demonstrates the broader scope of the CMA when sampling from the ensemble of networks with same degree distribution and global clustering . As with network family A , an increase in average path length , diameter , average and maximum betweenness centrality of UDA and CMA networks over random networks will be attributable to the increased global clustering coeﬃcient , C = 0 . 13 , see Figures 5 . 9 128 0 . 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 Random UDA CMA Network type A ss o r t a t i v i t y ( a ) Assortativity 0 . 001 0 . 010 0 . 100 2 4 6 8 10 14 Degree Lo c a l c l u s t e r i n g Network CMAUDA1 / k ( b ) Degree - dependent clustering Figure 5 . 8 : Plots of assortativity and degree - dependent average local clustering for network family B with k ∼ P ois ( 5 ) . The UDA and CMA networks have a global clustering coeﬃcient of C = 0 . 13 . The distribution of subgraphs in CMA networks was manipulated so that the clustered subgraphs { G (cid:52) , G (cid:27) , G (cid:2) } appeared around nodes with multiplicity greater than one . In order to preserve the subgraph degree sequence these aggregated subgraphs were allocated to the higher degree nodes , resulting in higher assortativity and a more positively skewed distribution of degree - dependent clustering . 129 5 . 6 5 . 8 6 . 0 6 . 2 Random UDA CMA Network type A v e r age pa t h l eng t h ( a ) Average path length 10 12 14 16 Random UDA CMA Network type D i a m e t e r ( b ) Diameter Figure 5 . 9 : Plots of average path length and diameter for network family B with k ∼ P ois ( 5 ) . The UDA and CMA networks have a global clustering coeﬃcient of C = 0 . 13 . The increased average path length and diameter between the UDA and random networks is attributable to the higher clustering . The similar increase between UDA and CMA networks is a reﬂection of the higher assortativity of the CMA networks . 0 500 1000 1500 Random UDA CMA Network type M i n i m u m r an k ( a ) Minimum 22000 23000 24000 25000 Random UDA CMA Network type A v e r age r an k ( b ) Average 150000 200000 250000 300000 350000 Random UDA CMA Network type M a x m i m u m r an k ( c ) Maximum Figure 5 . 10 : Plots of betweenness centrality for network family B with k ∼ P ois ( 5 ) . The UDA and CMA networks have a global clustering coeﬃcient of C = 0 . 13 . A trend of increasing average and maximum betweenness centrality is observed between random , UDA and CMA networks , respectively . 130 and 5 . 10 . However , since UDA and CMA networks share the same degree sequence and global clustering coeﬃcient diﬀerences in these metrics between UDA and CMA can only be due to increased degree - degree correlation and negatively skewed distribution of degree - dependent clustering . It has previously been noted that increased assortativity corresponds to an increase in average path length [ 79 ] and this will be compounded by the higher - degree nodes ( which inevitably serve as central hubs ) being more clustered . Similarly , an increase in diameter ( a function of path length ) will be due to these highly clustered high - degree nodes . Finally , Figures 5 . 10b and 5 . 10c show a signiﬁcant increase in average and maximum betweenness centrality between UDA and CMA networks . This is yet another manifestation of the presence of these highly - clustered high - degree nodes . Table 5 . 2 presents a comparison between measured and expected average subgraph counts for the networks in family B . Whereas there is good agreement for UDA net - works , it is observed that CMA networks have produced by - products other than what was expected at random , e . g . , an additional 50 % G (cid:27) have appeared as by - products . The eﬀects of ﬁnite size have been exacerbated by aggregating clustered subgraphs around higher degree nodes , eﬀectively excluding lower to medium degree nodes during this part of the connection process . Within this densely connected component it is easy to envisage a situation where adding only a single edge may create additional ( unwanted ) subgraphs . This highlights the fact that whilst the total number of G (cid:52) is preserved ( as evidenced by identical global clustering ) , the way these subgraphs contribute to higher - order structure can vary signiﬁcantly . This Section has highlighted that control over the choice of subgraph families and their distributions makes it possible to ﬂexibly explore the solution space of networks with the same degree distribution and global clustering . This in turn provides us with the means to investigate speciﬁc areas of this solution space as well as further my understanding of how network metrics deal with such diversity . 131 c4 d4 e4 t3 Random 0 0 79 21 UDA 243 504 587 718 CMA 232 743 772 691 Expected 243 504 619 741 Table 5 . 2 : Subgraph counts for network B ( N = 5000 , k ∼ P ois ( 5 ) and C = 0 . 13 ) . The counts are unique . The expected counts are computed by adding the total counts from the subgraph sequences , dividing them by the subgraphs’ node cardinality , and adding these ﬁgures to the number of subgraphs found as by - products in the random network . The counts for t 3 are for G (cid:52) subgraphs that do not appear in any other subgraphs . 5 . 3 . 4 Does higher - order structure matter ? In order to answer this question I make use of the network families A and B detailed above and test the impact of higher - order structure by considering the outcome and evolution of widely used dynamics on networks , namely , SIS , SIR and the complex contagion model . For each network type in families A and B a series of networks were generated . For each network I performed a single Gillespie realisation of the SIS , SIR and complex contagion epidemics . The mean time evolution of infectious prevalence was then cal - culated , plotted and compared between network types . Complex contagion dynamics was simulated in a similar way but without recovery and remembering that a single infectious contact was usually not suﬃcient to result in an infected node . Diﬀerent thresholds of infection and infectious seeds were used and these are speciﬁed in ﬁgure captions . Matlab code for the SIS and SIR Gillespie algorithms is available from https : / / github . com / martinritchie / Dynamics . I know by construction that members of network family A were generated using diﬀerent subgraphs and Section 5 . 3 . 3 has shown that observable diﬀerences were found between networks in terms of average path length , betweenness centrality and subgraph composition . Despite this , Figure 5 . 11 , which show the time evolution for SIS and SIR dynamics respectively , illustrate that these dynamics can display a certain degree 132 0 1000 2000 3000 4000 0 1 2 3 4 5 Time I n f e c t i on ( a ) SIS 0 500 1000 1500 0 2 4 6 8 Time I n f e c t i on ( b ) SIR Figure 5 . 11 : SIS and SIR epidemic dynamics for network family A . The random , Big - V and UDA data has been plotted with a solid line , circle and triangle markers respec - tively . The SIS and SIR epidemics represent the average of single Gillespie simulations on each of the 1000 network realisations from each network generation algorithm . The SIS and SIR epidemics were seeded with an initial infectious seed of I 0 = 10 and had a per link rate of infection of τ = 1 and recovered independently at rate γ = 1 . 133 Time Finalsize 0 . 00 0 . 05 0 . 10 0 . 15 0 . 00 0 . 25 0 . 50 0 . 75 1 . 00 10 20 30 40 50 0 1000 2000 3000 4000 5000 value P r obab ili t y Random Big−V UDA Figure 5 . 12 : Complex contagion dynamics for network family A . The complex contagion epidemics I parametrised an initial infectious seed of I 0 = 250 and a ﬁxed threshold of infection of r = 2 . 134 0 1000 2000 3000 0 1 2 3 4 5 Time I n f e c t i on ( a ) SIS 0 500 1000 1500 0 2 4 6 Time I n f e c t i on ( b ) SIR Figure 5 . 13 : SIS and SIR epidemic dynamics for network family B . The random , UDA and CMA data has been plotted with a solid line , triangle and cross markers respec - tively . The SIS and SIR epidemics represent the average of single Gillespie simulations on each of the 1000 network realisations from each network generation algorithm . The SIS and SIR epidemics were seeded with an initial infectious seed of I 0 = 10 and had a per link rate of infection of τ = 1 and recovered independently at rate γ = 1 . 135 Time Finalsize 0 . 00 0 . 05 0 . 10 0 . 15 0 . 0 0 . 2 0 . 4 0 . 6 20 30 40 50 2500 3000 3500 4000 value P r obab ili t y Random UDA CMA Figure 5 . 14 : Complex contagion dynamics for network family B . The complex contagion epidemics had an initial infectious seed of I 0 = 1000 and a ﬁxed threshold of infection of r = 3 . 136 of insensitivity to these diﬀerences in structure . In this case , it is the SIR dynamics that show the greatest diﬀerence , in peak infectious prevalence ( Figure 5 . 11b ) albeit quite marginal . In contrast , complex contagion dynamics do show sensitivity to structural diﬀerences found between Big - V and UDA networks . Figure 5 . 12 reveals that for UDA networks the epidemic fully percolates in almost 100 % of the simulations instead of only 80 % of the cases for Big - V networks and that epidemics on UDA networks achieve this steady state in less time . This indicates that whilst UDA networks operate in the super critical regime , Big - V networks are closer to the transition point . Locating this transition is possible but is beyond the scope of this paper . When network family A is used , the networks’ degree distribution and clustering appear to be the main determinants of the time evolution and outcome of the SIS and SIR epidemics . In contrast , when network family B is used , Figures 5 . 13 and 5 . 14 shows that all dynamics considered are impacted by diﬀerences in network topology . For Figures 5 . 13a and 5 . 13b , a trend of inhibited spread of infection is observed from the random to UDA to CMA networks . It has already been shown that clustering slows the spread of infection [ 20 , 33 ] , and I see that this eﬀect dominates over higher assortativity , which usually leads to faster initial spread of the epidemic [ 38 ] . Similarly , Figure 5 . 14 which shows the distribution of the ﬁnal epidemic size for the complex con - tagion dynamics reveals that : ( a ) the higher clustering observed in the UDA networks fails to have a signiﬁcant impact when compared to the random network equivalent and ( b ) the CMA networks signiﬁcantly slow the pace of the epidemic as well as reduce its ﬁnal size compared to both random and UDA networks . Hence , for the UDA and CMA networks where both degree distribution and global clustering are identical the observed diﬀerences are explained by the combined eﬀect of varying distributions of subgraph around nodes and varying prevalence of subgraphs ( both of which are related to one another to some extent ) as shown by Table 5 . 2 . Taken together , my simulation data shows that even though the proposed algorithms construct networks with identical degree sequence and global clustering , these networks can give rise to measurable diﬀerences in resulting epidemics , be it in time evolution or ﬁnal outcome . With the exception of SIS and SIR epidemics on network family A 137 ( still with some small diﬀerences ) I found signiﬁcant diﬀerences in all other instances . A more systematic investigation of more network models and wider parameter range for the dynamics is needed but left to future work . 5 . 4 Discussion In this paper , I have described two novel network generating algorithms that strictly preserve a given degree sequence whilst permitting control over the building blocks of the network and enabling the tuning of global clustering . I have compared these algorithms to one another as well as to the widely used Big - V rewiring algorithm . Using my algorithms I have empirically demonstrated that it is possible to create networks that are identical with respect to degree sequence and global clustering , yet elicit signiﬁcant diﬀerences in network metrics and in the outcome of dynamical processes unfolding on them . I have presented evidence to suggest that the methods sample from diﬀerent areas of the network state space and that these sampling variations do matter . Of the two algorithms proposed , UDA is the simplest to use . I believe that this algorithm , when parametrised with complete subgraphs , would be more likely to yield analytical results . Note that whilst varying levels of clustering can be achieved and estimated before network construction it is not possible to target a speciﬁc level of clustering , due to the emergent nature of the distribution of subgraphs around nodes . When constructing networks with incomplete subgraphs the UDA must decompose a certain number of hyperstubs back into stubs when generating sequences associated with incomplete subgraphs , which will introduce some bias . However , this source of bias is removed when using only complete subgraphs . The CMA algorithm is more complex but also more versatile . Being able to build networks based on pre - speciﬁed distributions of subgraphs alongside a given degree sequence , and preserve both , is highly novel . However this algorithm also contains a source of bias . In this case , when ﬁnding a node to accommodate a certain number of hyperstubs the algorithm only considers nodes of suitably high degree . I conjecture that the algorithm should consider all nodes , regardless of degree , uniformly and if an invalid selection is made the algorithm should restart the process anew . However , 138 this may result in prohibitive running times , especially when the total number of stubs contained within hyperstubs is close to the total number of stubs speciﬁed by the degree sequence . The proposed connection procedure for subgraph based networks has revealed some surprising results . I found evidence that the number of self , multi - edges and erroneous G (cid:52) subgraphs in these networks is less than what is found in the equivalent conﬁgu - ration model networks . I should also point out that the connection procedure is not without its source of bias , namely , my reliance on the repetition procedure whereby if a hyperstub selection results in self or multi - edges I return the hyperstubs to their re - spective bins and make a new selection . The alternative would be the refusal method , whereby an incompatible selection of hyperstubs requires the whole process to start anew . However , such approach leads to prohibitive running times . Note that the bias of the implemented connection process method may be oﬀset by the overall reduction in self and multi - edges when connecting subgraphs . However , all these points ideally warrant supporting analytical results or , atleast , further computational evidence . The proposed models are unique and although the methods I implemented do suﬀer from biases , they were critical to being able to generate the desired networks . Im - portantly , there is currently no way to assess or measure the extent of these biases . This is because for a given degree distribution and given global clustering coeﬃcient , there is currently no ground truth model nor is the entire state - space of such networks known in full . In light of this I have taken the pragmatic step to focus on characterising the network structure in terms of diversity . Being able to obtain diversity within net - works sampled from the same part of the state space of such networks will be a critical component of constructing suitable null models . In this respect , I have shown that signiﬁcant diversity in networks with identical degree distribution and global clustering can be elicited . This has occurred in two ways : ( 1 ) by construction , i . e . changing subgraph families or redistributing the same number of subgraphs , and ( 2 ) unexpectedly , through the emergence of by - products . I conjecture that any controlled – or believed to be controlled – network generation algorithm will yield by - products , unless heuristic constraints are introduced to reduce the likelihood of subgraphs sharing lower - order subgraph components for example . As witnessed in my 139 results , even conﬁguration model networks lead to a large number of loops with 4 , 5 , and 6 nodes ( longer cycles were not measured ) . This problem can only be exacerbated when control of more sophisticated structures is implemented . As such , care has to be taken when parametrising algorithms . For example , one would need to specify a relatively large number G (cid:55) subgraphs in a network’s construction to impact the subgraph count beyond what one would observe by chance in a random network . More surprisingly , as I witnessed with G (cid:27) subgraphs in the CMA networks from network family B , signiﬁcant numbers of subgraph by - products can appear in addition to what was observed in the random networks depending on how one wishes to place the subgraphs around nodes . I have seen that by using a very modest selection of subgraphs , I have been able to substantially inﬂuence dynamics running on the network , particularly complex conta - gion dynamics . All results relating to this model indicate that constraining a network by degree sequence and clustering is not suﬃcient to accurately predict the course of the epidemic . More importantly , the results appear to suggest that the location of the critical regime depends on the higher - order structure of the network ( above and beyond clustering ) . Being able to generate networks with diﬀerent structural properties or higher - order structure is a key feature of any network construction algorithm . However , if such structural details do not impact on dynamics unfolding on the network , then models for such dynamics can rely with high conﬁdence on a limited set of network descriptors . Although degree sequence , degree - degree correlations and global clustering coeﬃcient were observed to be the main drivers of disease transmission in models such as SIS and SIR , I found it not to be true in general . This is an important ﬁnding because one should remember that the dynamics simulated here are modest in complexity , when compared to models of neuronal dynamics for example , and yet , I were able to elicit signiﬁcant diﬀerences by simply tuning the network structure above and beyond triangles . This implies that determining the role and impact of higher - order structure may yet hold and reveal many important and surprising results . Acknowledgements : Martin Ritchie gratefully acknowledges EPSRC ( Engineering and Physical Sciences Research Council ) and the University of Sussex for funding for 140 his PhD . I would also like to thank Dr J . C . Miller for useful discussions on the complex contagion model [ 47 ] , and for sharing his code for simulating the complex contagion model on networks [ 48 ] . 141 5 . 5 Appendix 5 . 5 . 1 Integer partitions The set of partitions of a positive integer , k , lists all possible ways of writing k as the sum of other positive integers . For example , the partition space of 3 is : { { 3 } , { 2 , 1 } , { 1 , 1 , 1 } } . The number of ways to partition an integer is given by the partition function . For this derivation p ( k ) is used to denote the partition function eval - uated at k , i . e . , the number of partitions of the integer k . In the case above , p ( 3 ) = 3 . For k = 1 , 2 , 3 , 4 , 5 , 6 . . . the partition function returns p ( k ) = 1 , 2 , 3 , 5 , 7 , 11 , . . . respec - tively and by convention p ( 0 ) = 1 and p ( − k ) = 0 . This function can be used to calculate the number of times an integer α < k appears in the partitions of k . First compute the number of partitions in which α will appear atleast once : write k as a partition in the following way { k − α , α } and now list all remaining partitions of k − α , { k − ( α + 0 ) , α } , ( 5 . 13 ) { k − ( α + 1 ) , α , 1 } , { k − ( α + 2 ) , α , 2 } , { k − ( α + 2 ) , α , 1 , 1 } , { k − ( α + 3 ) , α , 3 } , { k − ( α + 3 ) , α , 2 , 1 } , { k − ( α + 3 ) , α , 1 , 1 , 1 } , . . . , This forms a bijection between the partitions of ( k − α ) and partitions of k where α appears atleast once . Similarly it is possible form a bijection between ( k − mα ) and partitions of k where α appears atleast m times , of which there will be p ( k − mα ) partitions . Using the cumulative property of this expression it is possible to compute the number of partitions in which α appears exactly m times p ( k − α ( m − 1 ) ) − p ( k − αm ) multiplying this by m and adding over all multiples of α , m : mα ≤ k will give the 142 number of times that α appears in the partitions of k p ( k , α ) = (cid:98) kα (cid:99) (cid:88) m = 1 m (cid:2) p ( k − αm ) ) − p ( k − α ( m + 1 ) ) (cid:3) . 143 5 . 5 . 2 Pseudocode for UDA input : D = ( d 1 , d 2 , . . . , d N ) , G = { G 1 , G 2 , . . . , G l } output : H ∈ N l × N 0 . Variables D : degree sequence , N : number of nodes , G : set of subgraphs , l : number of subgraphs , g i : subgraph adjacency matrix , X k : solution space for degree k , H : hyperstub degree sequence Procedure for Each subgraph , G i do % Identify the degree sequences of the subgraphs . s i = (cid:80) g i % Take the unique elements . s i = unique ( s i ) end % Concatenate into a single vector . S = ( s 1 , s 2 , . . . s l ) for k = 1 , 2 , . . . k max do % X k ( i , : ) denotes a hyperstub arrangement for a degree k node . X k = diorecur ( S , k ) end . . . 5 . 5 . 3 Pseudocode for CMA 144 . . . for n = 1 , 2 , . . . , N do % Take random element from the solution space . r = rand ; h n = X D ( n ) ( r , · ) end % Concatenate into a single matrix . H = ( h 1 , h 2 , . . . , h l ) 1 return Algorithm 4 : Pseudocode for the underdetermined network generation algorithm ( UDA ) . This pseudocode focuses on the salient points of the UDA , namely , how the algorithm draws solutions from the solution space of an underdetermined Dio - phantine equation to determine the arrangement of hyperstubs around a particular node . Other steps , such as ensuring the handshake lemma is satisﬁed for both lines and subgraphs , are detailed in Section 5 . 2 . 1 and can be viewed in the source code . The output hyperstub degree sequence H must be used as input for a modiﬁed conﬁguration model connection process to realise a network , see Section 5 . 2 . 3 . 145 input : D = ( d 1 , d 2 , . . . , d N ) , G = { G 1 , G 2 , . . . , G l } , S = { S 1 , S 2 , . . . , S l } . output : H ∈ N | s | × N 0 . Variables D : degree sequence , N : number of nodes , G : set of subgraphs , l : number of subgraphs , S : subgraph sequence , g i : subgraph adjacency matrix , | s | : number of unique corners in a subgraph , H : hyperstub degree sequence Procedure for Each subgraph , G i do % Identify the degree sequence , s , of the subgraph . s i = (cid:80) g i , s i = unique ( s i ) , m = length ( s i ) % p reﬂects the proportions of hyperstubs p i = ( p 1 , p 2 , . . . , p m ) for j = 1 , 2 , . . . , N do % The subgraph sequence is decomposed into a hyperstub % sequence using the multinomial distribution , M , % so that H i ∈ N m × N 0 H i ( j ) = M ( S i ( j ) , p i ) , end % H (cid:48) i is a sequence of the true stub count H (cid:48) i = H i · s i % Sum so that H (cid:48) i ∈ N 1 × N 0 H (cid:48) i ( j ) = (cid:80) mα = 1 H (cid:48) i ( α , j ) end . . . 146 . . . while elements of each H i are non - zero do % Find the largest subgraph degree , h i ( j ) = max { max { H (cid:48) 1 } , max { H (cid:48) 2 } , · · · , max { H (cid:48) l } } % i . e . , the j th element of H i . % Find all elements of the degree sequence atleast this large and % select an element from d (cid:48) at random d (cid:48) = { d ∈ D : d ≥ m } , δ = d (cid:48) ( random ) % pair H i ( j ) to δ and update % δ ’s available degree and H i δ = δ − H i ( j ) , H i ( j ) = 0 end Algorithm 5 : Pseudocode for the cardinality matching algorithm ( CMA ) . Other steps , such as ensuring the handshake lemma is satisﬁed for both lines and sub - graphs , are identical to what is used for the UDA and are detailed in Section 5 . 2 . 1 and can be viewed in the Matlab source code . The output hyperstub degree se - quence H must be used as input for a modiﬁed conﬁguration model connection process to realise a network , see Section 5 . 2 . 3 . 147 Chapter 6 Discussion It is possible to consider certain network measures or metrics , such as density of links , degree distribution , degree correlation , clustering etc , in a hierarchical sense . Starting with the most basic and with increasing sophistication such a list could be : edge density , distribution of edges , assortativity and clustering . These canonical descriptors are indeed powerful but they only capture part of the entire network state space . Therefore , the awareness and development of additional network measures and descriptors , such as higher - order structure , to be used alongside these classical measures is an essential next step in our understanding of complex networks . This thesis has demonstrated that networks with equal degree distribution , assortativity and global clustering may still exhibit diverse structure and function , attributable to diﬀerences in higher - order structure . One of the greatest diﬃculties I have found in generating networks and network - based models of dynamics with controllable higher - order structure is preserving basic network metrics , particularly the degree distribution . In Chapter . 3 the networks were homogeneous and the family of subgraphs ﬁxed . In Chapter . 4 the generality of the ODE SIR model was juxtaposed against its inability to control all moments of the de - gree distribution . However , it was possible to constrain the ﬁrst and second moments in addition to clustering . In the third paper both algorithms succeeded in preserving the degree distribution with the CMA achieving generality in respect to both subgraph families and subgraph distributions , see Chapter . 5 . In addition to this none of the 148 proposed algorithms permitted strict control over assortativity . But due to the conﬁgu - ration model - like random connection procedure all networks , with the exception of one in Chapter . 5 , were created with an assortativity coeﬃcient of r ≈ 0 . In all work we found that the global clustering coeﬃcient was relatively simple to control . Underpinning all of the proposed network generating algorithms is the connection process . This , like for the conﬁguration model , will naturally produce multi - graphs . Consequently steps must be taken to mitigate against this when a simple graph is de - sired . For the conﬁguration model this may be achieved by deleting self edges and collapsing multi - edges down to a single edge ( the deleted conﬁguration model ) . Alter - natively , when selecting pairs of nodes for connection if the resulting pair results in a self or multi - edge then either : ( a ) make a new selection ( the matching algorithm ) or ( b ) disregard the current network and start the process from scratch ( the refusal algo - rithm ) . These same steps may be taken to mitigate against the formation multi - graphs following the subgraph based conﬁguration model connection procedure . But , as in the standard conﬁguration model these processed each have their own advantages and disadvantages as discussed in Chapter . 2 . In our implementation we opted to use the refusal algorithm , to ( 1 ) preserve the degree sequence and ( 2 ) maintain manageable computational times , but at the cost of biasing how we sample from the state space of networks . The question of bias is important , however , in the absence of a ground truth or a feasible unbiased method of sampling we instead have focused on a more pragmatic characterisation of network structure , diversity . By constructing networks in a random conﬁguration model - like way using fami - lies of subgraphs as building blocks , as opposed to only edges , yields multiple ways to construct networks that share the same degree distribution and global clustering coeﬃcient . These networks have been shown to be diﬀerent using classical structural metrics / measures such as betweenness centrality , average path length , diameter and the distribution of the local clustering coeﬃcient . This analysis has been complemented by counting subgraphs . These counts showed signiﬁcant diﬀerences , beyond those which were expected due to how the networks were constructed . This is important due to the interdependence between network structure and the way dynamics unfold on networks . This thesis has predominantly studied the impact of higher - order structure on SIS 149 and SIR dynamics . The results across all three papers consistently show that diﬀerent higher - order structure manifests in diﬀerent behaviour of dynamics on the networks . This strongly aligns with the principle of network function being deﬁned by network structure . How generalisable is this result ? There can be no claim that we have fully explored the parameter space for the network generating algorithms and dynamics . For example , relatively small average degrees and subgraph sizes were used throughout . A larger average degree would allow for considerably larger and more complex subgraph families to be used in the network construction . Consequently , it can be hypothesised that the eﬀects observed in this work do not represent the full impact potential of higher - order structure on epidemic dynamics . One possible way of more eﬃciently exploring such a complex parameter space is marrying the network generating models with the type of genetic algorithms proposed by Overbury and Berthouze in [ 61 ] . It has also been previously noted that a networks’ motif or subgraph topology deﬁnes the function that the network serves [ 49 , 69 , 70 ] . In certain cases the behaviour of dynamics is directly dictated by the networks’ subgraph topology [ 19 ] . These dynamics are typically more sophisticated than the ‘free - fall’ epidemics used in this work . On the other hand , the Cardinality Matching Algorithm ( CMA ) , see Chapter . 5 , represents a more sophisticated network construction algorithm than many of the current cutting - edge approaches . Combining these two approaches has considerable research potential but may require further development of the network generating algorithms to include direct and / or weighted subgraphs . Chapter . 4 presented the hyperstub conﬁguration model , a deterministic ODE net - work based model of SIR dynamics . This model is highly general in respect to the subgraphs that it can incorporate . However , by specifying distribution of subgraphs with no constraints the resulting degree distribution cannot be controlled for . This can be partially mitigated against by constraining the ﬁrst and second moments of the de - gree distribution but constraining higher moments will quickly become intractable . Of all network generation algorithms proposed in Chapter . 5 the Underdetermined Sam - pling Algorithm ( UDA ) is the most likely to yield a corresponding system of ODEs that capture network based SIR dynamics . This is evidenced in Chapter . 3 where the proposed network generation algorithm is a speciﬁc case of the UDA and where 150 the PGF of the degree distribution for these networks can be written . The hyperstub conﬁguration model currently can only capture SIR dynamics . This is due to the sim - plifying assumption , the test node may not transmit infection back to its original source of infection , this rules out the inclusion SIS dynamics . Developing a paradigm that does not rely on this assumption is needed to extend the model in this regard . Whilst the main thrust of this investigation has been computational , analytical results always provide an eloquent and alternative perspective when setting out under - stand network structure and behaviour of subsequent dynamics . PGFs have already been written for the network generating algorithm in Chapter . 3 , and the SIR model from Chapter . 4 is similarly PGF based . Currently , analytical results do exists for networks with a known PGF , see [ 32 , 58 ] , including subgraph counts , size of the giant component and percolation results . Similarly , for PGF based SIR dynamics results exist for ﬁnal epidemic size , see [ 76 ] . Further inroads could be made by applying more of such approaches to the network models developed in the thesis . Moreover , I believe that strong probabilistic and combinatorial arguments could be used to derive more rigorous mathematical results and understand limiting cases of the proposed models better . I would very much enjoy such an approach , and I feel that this could also be a next natural step to strengthen my work further . Whilst it is clear that the degree distribution , assortativity and global clustering coeﬃcient are key determinants of network structure and function , we have shown that higher - order structure also plays an important role in this regard . Much remains to be revealed regarding the full extent of its role , speciﬁcally : ( 1 ) a more thorough exploration of the state space of networks with a given degree distribution and global clustering coeﬃcient and ( 2 ) using more exotic models of network based dynamics to investigate the function of higher - order structure . I strongly believe that as our understanding of complex systems increases , higher - order network structure will take on an increasingly important role in complexity science . 151 Bibliography [ 1 ] Route views project . URL http : / / routeviews . org / . Accessed : 12 - 01 - 2016 . [ 2 ] R . Albert , H . Jeong , and A - L Barab´asi . Error and attack tolerance of complex networks . Nature , 406 ( 6794 ) : 378 – 382 , 2000 . [ 3 ] F . Ball and O . D . Lyne . Stochastic multi - type SIR epidemics among a population partitioned into households . Advances in Applied Probability , 33 ( 1 ) : 99 – 123 , 2001 . [ 4 ] F . Ball and D . Sirl . An SIR epidemic model on a population with random network and household structure , and several types of individuals . Advances in Applied Probability , 44 ( 1 ) : 63 – 86 , 2012 . [ 5 ] F . Ball , D . Sirl , and P . Trapman . Analysis of a stochastic SIRe epidemic on a random network incorporating household structure . Mathematical Biosciences , 224 ( 2 ) : 53 – 73 , 2010 . [ 6 ] S . Bansal , S . Khandelwal , and L . A . Meyers . Exploring biological network structure with clustered random networks . BMC Bioinformatics , 10 ( 1 ) : 1 – 15 , 2009 . [ 7 ] A - L . Barab´asi and R . Albert . Emergence of scaling in random networks . Science , 286 ( 5439 ) : 509 – 512 , 1999 . [ 8 ] M . Bastian , S . Heymann , and M . Jacomy . Gephi : An open source software for exploring and manipulating networks . 2009 . URL http : / / www . aaai . org / ocs / index . php / ICWSM / 09 / paper / view / 154 . 152 [ 9 ] S . Boccaletti , V . Latora , Y . Moreno , M . Chavez , and D . U . Hwang . Complex networks : Structure and dynamics . Physics Reports , 424 ( 45 ) : 175 – 308 , 2006 . [ 10 ] B . Bollob´as . A probabilistic proof of an asymptotic formula for the number of labelled regular graphs . European Journal of Combinatorics , 1 ( 4 ) : 311 – 316 , 1980 . [ 11 ] E . Bullmore and O . Sporns . Complex brain networks : graph theoretical analysis of structural and functional systems . Nature Reviews Neuroscience , 10 ( 3 ) : 186 – 198 , 2009 . [ 12 ] R . Cohen , S . Havlin , and D . Ben - Avraham . Eﬃcient immunization strategies for computer networks and populations . Physical Review Letters , 91 ( 24 ) : 247901 , 2003 . [ 13 ] L . Decreusefond , J - S . Dhersin , P . Moyal , and V . C . Tran . Large graph limit for an sir process in random network with heterogeneous connectivity . The Annals of Applied Probability , 22 ( 2 ) : 541 – 575 , 2012 . URL http : / / www . jstor . org / stable / 41713336 . [ 14 ] K . T . D . Eames . Modelling disease spread through random and regular contacts in clustered populations . Theoretical Population Biology , 73 ( 1 ) : 104 – 111 , 2008 . [ 15 ] P . Erd˝os and A . R´enyi . On the evolution of random graphs . Publications of the Mathematical Institute of the Hungarian Academy of Sciences , 5 : 17 – 61 , 1960 . [ 16 ] L . C . Freeman . A set of measures of centrality based on betweenness . Sociometry , pages 35 – 41 , 1977 . [ 17 ] D . T . Gillespie . A general method for numerically simulating the stochastic time evolution of coupled chemical reactions . Journal of Computational Physics , 22 ( 4 ) : 403 – 434 , 1976 . [ 18 ] D . T . Gillespie . Exact stochastic simulation of coupled chemical reactions . The Journal of Physical Chemistry , 81 ( 25 ) : 2340 – 2361 , 1977 . [ 19 ] L . L . Gollo , C . Mirasso , O . Sporns , and M . Breakspear . Mechanisms of zero - lag synchronization in cortical motifs . PLoS Computational Biology , 10 ( 4 ) : 1 – 17 , 04 2014 . 153 [ 20 ] D . M . Green and I . Z . Kiss . Large - scale properties of clustered networks : implica - tions for disease dynamics . Journal of Biological Dynamics , 4 ( 5 ) : 431 – 445 , 2010 . [ 21 ] J . L . Guillaume and M . Latapy . A realistic model for complex networks . arXiv preprint cond - mat / 0307095 , 2003 . [ 22 ] J . A . P . Heesterbeek . Mathematical epidemiology of infectious diseases : model building , analysis and interpretation , volume 5 . John Wiley & Sons , 2000 . [ 23 ] T . House . Generalised network clustering and its dynamical implications . Advances in Complex Systems , Vol . 13 ( No . 3 ) : 281 – 291 , 2010 . [ 24 ] T . House . Generalized network clustering and its dynamical implications . Advances in Complex Systems , 13 ( 03 ) : 281 – 291 , 2010 . [ 25 ] T . House and M . J . Keeling . Household structure and infectious disease transmis - sion . Epidemiology and infection , 137 ( 05 ) : 654 – 661 , 2009 . [ 26 ] T . House and M . J . Keeling . The impact of contact tracing in clustered populations . PLoS Computational Biology , 6 ( 3 ) : e1000721 , 2010 . [ 27 ] T . House and M . J . Keeling . Insights from unifying modern approximations to infections on networks . Journal of the Royal Society Interface , 8 ( 54 ) : 67 – 73 , 2011 . [ 28 ] T . House , G . Davies , L . Danon , and M . J . Keeling . A motif - based approach to network epidemics . Bulletin of Mathematical Biology , 71 ( 7 ) : 1693 – 1706 , 2009 . [ 29 ] S . Itzkovitz , R . Milo , N . Kashtan , G . Ziv , and U . Alon . Subgraphs in random networks . Physical Review E , 68 : 026127 , 2003 . [ 30 ] A . Jamakovic , P . Mahadevan , A . Vahdat , M . Bogun´a , and D . Krioukov . How small are building blocks of complex networks . arXiv preprint arXiv : 0908 . 1143 , 2009 . [ 31 ] S . Janson , M . Luczak , and P . Windridge . Law of large numbers for the sir epidemic on a random graph with given degrees . Random Structures & Algorithms , 45 ( 4 ) : 726 – 763 , 2014 . 154 [ 32 ] B . Karrer and M . E . J . Newman . Random graphs containing arbitrary distributions of subgraphs . Physical Review E , 82 : 066118 , 2010 . [ 33 ] M . J . Keeling . The eﬀects of local spatial structure on epidemiological invasions . Proceedings of the Royal Society of London B : Biological Sciences , 266 ( 1421 ) : 859 – 867 , 1999 . [ 34 ] W . O . Kermack and A . G . McKendrick . A contribution to the mathematical theory of epidemics . 115 ( 772 ) : 700 – 721 , 1927 . [ 35 ] B . J . Kim . Performance of networks of artiﬁcial neurons : The role of clustering . Physical Review E , 69 ( 4 ) : 045101 , 2004 . [ 36 ] I . Z . Kiss and D . M . Green . Comment on “properties of highly clustered networks” . Physical Review E , 78 : 048101 , 2008 . [ 37 ] I . Z . Kiss and P . L . Simon . New moment closures based on a priori distributions with applications to epidemic dynamics . Bulletin of mathematical biology , 74 ( 7 ) : 1501 – 1515 , 2012 . [ 38 ] I . Z . Kiss , D . M . Green , and R . R . Kao . The eﬀect of network mixing patterns on epidemic dynamics and the eﬃcacy of disease contact tracing . Journal of The Royal Society Interface , 5 ( 24 ) : 791 – 799 , 2008 . [ 39 ] H . Klein - Hennig and A . K . Hartmann . Bias in generation of random graphs . Physical Review E , 85 : 026101 , 2012 . [ 40 ] V . Latora and M . Marchiori . Eﬃcient behavior of small - world networks . Physical Review Letters , 87 : 198701 , Oct 2001 . [ 41 ] J . Lindquist , J . Ma , P . Driessche , and F . H . Willeboordse . Eﬀective degree network disease models . Journal of Mathematical Biology , 62 ( 2 ) : 143 – 164 , 2010 . [ 42 ] C . Z . Lo , T . Su , C . Huang , C . Hung , W . Chen , T . Lan , C . Lin , and E . T . Bull - more . Randomization and resilience of brain functional networks as systems - level 155 endophenotypes of schizophrenia . Proceedings of the National Academy of Sciences , 112 ( 29 ) : 9123 – 9128 , 2015 . [ 43 ] P . Mahadevan , D . Krioukov , K . Fall , and A . Vahdat . Systematic topology analysis and generation using degree correlations . SIGCOMM Computer Communication Review , 36 ( 4 ) : 135 – 146 , 2006 . [ 44 ] V . Marceau , P . No¨el , L . H´ebert - Dufresne , A . Allard , and L . J . Dub´e . Adaptive networks : Coevolution of disease and topology . Physical Review E , 82 : 036116 , 2010 . [ 45 ] J . C . Miller . Percolation and epidemics in random clustered networks . Physical Review E , 80 : 020901 , Aug 2009 . [ 46 ] J . C . Miller . A note on a paper by Erik Volz : Sir dynamics in random networks . Journal of mathematical biology , 62 ( 3 ) : 349 – 358 , 2011 . [ 47 ] J . C . Miller . Complex contagions and hybrid phase transitions . Journal of Complex Networks , page cnv021 , 2015 . [ 48 ] J . C . Miller . Personal communication . 2015 . [ 49 ] R . Milo , S . Shen - Orr , S . Itzkovitz , N . Kashtan , D . Chklovskii , and U . Alon . Net - work motifs : Simple building blocks of complex networks . Science , 298 ( 5594 ) : 824 – 827 , 2002 . ISSN 0036 - 8075 . [ 50 ] R . Milo , N . Kashtan , S . Itzkovitz , M . E . J . Newman , and U . Alon . On the uniform generation of random graphs with prescribed degree sequences . arXiv preprint cond - mat / 0312028 , 2003 . [ 51 ] Y . Moreno , R . Pastor - Satorras , and A . Vespignani . Epidemic outbreaks in complex heterogeneous networks . The European Physical Journal B - Condensed Matter and Complex Systems , 26 ( 4 ) : 521 – 529 , 2002 . [ 52 ] Y . Moreno , J . B . G´omez , and A . F . Pacheco . Epidemic incidence in correlated complex networks . Physical Review E , 68 ( 3 ) : 035103 , 2003 . 156 [ 53 ] M . E . J . Newman . Assortative mixing in networks . Physical Review Letters , 89 : 208701 , 2002 . [ 54 ] M . E . J . Newman . Spread of epidemic disease on networks . Physical Review E , 66 : 016128 , 2002 . [ 55 ] M . E . J . Newman . Properties of highly clustered networks . Physical Review E , 68 : 026121 , 2003 . [ 56 ] M . E . J . Newman . The structure and function of complex networks . SIAM Review , 45 ( 2 ) : 167 – 256 , 2003 . [ 57 ] M . E . J . Newman . Networks : an introduction . Oxford University Press , 2009 . [ 58 ] M . E . J . Newman . Random graphs with clustering . Physical Review Letters , 103 : 058701 , 2009 . [ 59 ] V . Nicosia , M . Valencia , M . Chavez , A . D´ıaz - Guilera , and V . Latora . Remote synchronization reveals network symmetries and functional modules . Phys . Rev . Lett . , 110 : 174102 , Apr 2013 . doi : 10 . 1103 / PhysRevLett . 110 . 174102 . URL http : / / link . aps . org / doi / 10 . 1103 / PhysRevLett . 110 . 174102 . [ 60 ] D . J . P . O’sullivan , G . J . O’Keeﬀe , P . G . Fennell , and J . P . Gleeson . Mathematical modelling of complex contagion on clustered networks . Frontiers in Physics , 3 : 71 , 2015 . [ 61 ] P . Overbury and L . Berthouze . Using novelty - biased GA to sample diversity in graphs satisfying constraints . In Proceedings of the Companion Publication of the 2015 Annual Conference on Genetic and Evolutionary Computation , pages 1445 – 1446 . ACM , 2015 . [ 62 ] N . Prˇzulj . Biological network comparison using graphlet degree distribution . Bioin - formatics , 23 ( 2 ) : e177 – e183 , 2007 . [ 63 ] N . Prˇzulj , D . G . Corneil , and I . Jurisica . Modeling interactome : scale - free or geometric ? Bioinformatics , 20 ( 18 ) : 3508 – 3515 , 2004 . 157 [ 64 ] J . M . Read and M . J . Keeling . Disease evolution on networks : the role of con - tact structure . Proceedings of the Royal Society of London . Series B : Biological Sciences , 270 ( 1516 ) : 699 – 708 , 2003 . [ 65 ] M . Ritchie , L . Berthouze , T . House , and I . Z . Kiss . Higher - order structure and epidemic dynamics in clustered networks . Journal of Theoretical Biology , 348 : 21 – 32 , 2014 . [ 66 ] M . Ritchie , L . Berthouze , and I . Z Kiss . Beyond clustering : mean - ﬁeld dynamics on networks with arbitrary subgraph composition . Journal of Mathematical Biology , 72 ( 1 - 2 ) : 255 – 281 , 2016 . [ 67 ] M . Ritchie , L . Berthouze , and I . Z Kiss . Generation and analysis of networks with a prescribed degree sequence and subgraph family : Higher - order structure matters . Journal of complex networks ( in press ) , 2016 . [ 68 ] M . ´A . Serrano and M . Bogu˜n´a . Tuning clustering in random networks with arbi - trary degree distributions . Physical Review E , 72 : 036133 , Sep 2005 . [ 69 ] S . S . Shen - Orr , R . Milo , S . Mangan , and U . Alon . Network motifs in the tran - scriptional regulation network of escherichia coli . Nature genetics , 31 ( 1 ) : 64 – 68 , 2002 . [ 70 ] O . Sporns and R . Ktter . Motifs in brain networks . PLoS Biology , 2 ( 11 ) , 10 2004 . [ 71 ] O . Sporns , G . Tononi , and R . K¨otter . The human connectome : a structural de - scription of the human brain . PLoS Computational Biology , 1 ( 4 ) : e42 , 2005 . [ 72 ] S . H . Strogatz . Exploring complex networks . Nature , 410 ( 6825 ) : 268 – 276 , 2001 . [ 73 ] M . Taylor , P . L . Simon , D . M . Green , T . House , and I . Z . Kiss . From markovian to pairwise epidemic models and the performance of moment closure approximations . Journal of Mathematical Biology , 64 ( 6 ) : 1021 – 1042 , 2011 . [ 74 ] E . Volz . Random networks with tunable degree distribution and clustering . Phys - ical Review E , 70 : 056115 , Nov 2004 . 158 [ 75 ] E . M . Volz . SIR dynamics in random networks with heterogeneous connectivity . Journal of Mathematical Biology , 56 ( 3 ) : 293 – 310 , 2007 . [ 76 ] E . M . Volz , J . C . Miller , A . Galvani , and L . A . Meyers . Eﬀects of heterogeneous and clustered contact patterns on infectious disease dynamics . PLoS Computational Biology , 7 ( 6 ) : 1 – 13 , 06 2011 . [ 77 ] S . Wasserman and K . Faust . Social network analysis : Methods and applications , volume 8 . Cambridge university press , 1994 . [ 78 ] D . J . Watts and S . H . Strogatz . Collective dynamics of ‘small - world’ networks . nature , 393 ( 6684 ) : 440 – 442 , 1998 . [ 79 ] R . Xulvi - Brunet and I . M . Sokolov . Reshuﬄing scale - free networks : From random to assortative . Physical Review E , 70 ( 6 ) : 066102 , 2004 .