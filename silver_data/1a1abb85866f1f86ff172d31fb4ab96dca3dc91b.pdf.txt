! % ? ! ConferenceCompanion * CHI’94 * Boston , MassachusettsUSA * April24 - 2S , 1994 Papers ( Abstracts ) Programmable Design Environments : Integrating End - User Programming with Domain - Oriented Assistance Michael Eisenberg Gerhard Fischer Department of Computer Scienee Department of Computer Science and Institute of Cognitive Science and Institute c ~ fCognitive Science Campus Box 430 Campus Box 430 University of Colorado , Boulder CO 80309 University of Colorado , Boulder CC ) 80309 USA USA + 1 - 303 - 492 - 8091 gerhurd @ es . colorado . edu duck @ cs . colorado . edu Keywords : Programmable design environments , end - user programming , programmable applications , domain - oriented design environments , critics . Programmable design environments ( PDEs ) are computational environments that integrate the conceptual frameworks and components of ( a ) design environments and ( b ) programmable applications . The integration of these two approaches provides elements ( such as software “critics” and “query - able objects” ) that assist users in learning both The application and its domain ; in addition , an interactive “application - enriched” end - user programming environment stresses the values of expressiveness and modifiability . By way of illustration , we present a newly - developed progmmmable design environment , SchemeChart , for the domain of charting and information displays . “Why is a Raven Like a Writing Desk ? ” Lessons in InterFace Consistency and Analogical Reasoning from Two Cognitive Architectures John Rieman Clayton Lewis Institute of Cognitive Science Institute of Cognitive Science University of Colorado , Boulder , CO 80309 - 0344 University of Colorado , Boulder , CO 80309 - 0344 USA USA rieman ( @ cs . colorado . edu Richard M . Young Pet ( ? rG . Poison MRC Applied Psychology Unit Institute of Cognitive Science 15 Chaucer Road , CambridgeCB22EF University of Colorado , Boulder , CO 80309 - 0344 UK USA Keywords : User models , consistency , exploratory learning , analogy , metaphor . Users who have worked with just a few pieees of application software on a computer system are often faced with the need to use anew program on the same system . Consistency between program interfaces is intended to make new software easier to learn , but how “consistency” should be defined is not clear . We present a model of analogical reasoning that deseribes how users rely on interface consistency to induce correct actions in a new situation . Versions of the model are implemented in ACT - R and Soar . The model yields a more principled understanding of design guidelines that recommend consistency . 231