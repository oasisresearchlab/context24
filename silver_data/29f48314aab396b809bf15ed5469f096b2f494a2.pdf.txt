Solving the maximum edge - weight clique problem in sparse graphs with compact formulations Luis Gouveia and Pedro Martins CIO − Working Paper 3 / 2013 1 Solving the maximum edge - weight clique problem in sparse graphs with compact formulations Luis Gouveia 1 , 2 and Pedro Martins 2 , 3 * 1 DEIO , Faculty of Sciences , University of Lisbon , Lisbon , Portugal 2 Operations research Center ( CIO ) , Faculty of Sciences , University of Lisbon , Lisbon , Portugal 3 ISCAC , Polytechnic Institute of Coimbra , Coimbra , Portugal Abstract This paper proposes compact formulations for the maximum edge - weight clique ( MEWC ) problem on sparse graphs . The MEWC problem has long been discussed in the literature , but mostly addressing complete graphs , with or without a cardinality constraint on the clique . Yet , several real - world applications are defined on sparse graphs , where the missing edges are due to some thresholding process or because they are not supposed to be in the graph , at all . Such situations often arise on cell’s metabolic networks , where the amount of metabolites shared among reactions is an important issue to understand the cell’s prevalent elements . We propose new node - discretized formulations for the problem , that are more compact than other models known from the literature , and showing a strong advantage when used for solving large size sparse graphs . Computational experiments on benchmark and real - world instances are conducted for discussing and comparing the different models . Additionally , we also address a new variant of the MEWC problem where the objective to be maximized includes the neighboring edges of the clique . Keywords : Networks , maximum edge - weight clique problem , clique’s edge neighborhood , integer formulations , sparse graphs . 1 . Introduction Let G = ( V , E ) be an undirected graph with V = { 1 , … , n } the set of nodes and E ⊂ V 2 the set of edges , with edge weights c ij ∈ IR , for all ( i , j ) ∈ E . * Corresponding author . Address : ISCAC – Quinta Agrícola – Bencanta , 3040 - 316 Coimbra , Portugal . Tel . : + 351 239 802 000 ; fax : + 351 239 445 445 . E - mail addresses : legouveia @ fc . ul . pt ( Luis Gouveia ) , pmartins @ iscac . pt ( Pedro Martins ) . 2 A clique of G is a subset of nodes C ⊂ V inducing a complete subgraph . For a given clique C of G , its weight is defined by ∑ ∈ C j i ij c , , that is , the sum of the weights of all edges with both nodes in C . The maximum edge - weight clique ( MEWC ) problem is to find a clique in G with maximum weight . This problem is known to be NP - hard ( see , Dijkhuizen and Faigle ( 1993 ) ) . In fact , when c ij = 1 for all edges of E , it reduces to the well - known maximum clique problem , which belongs to the NP - hard class ( see , Karp , 1972 ) . As usual , ω ( G ) stands for the clique number of G and we denote by q max a given upper bound for ω ( G ) . When G is complete and c ij ≥ 0 for all ( i , j ) ∈ E , then the set V is a maximum weight clique , while any single node set is a maximum weight clique whenever c ij ≤ 0 . Thus , from a combinatorial optimization stand point , the problem becomes interesting when G is complete if and only if c ij takes both negative and positive values . Alternatively , and in order to avoid the trivial cases , most authors study the problem with an additional cardinality constraint on the size ( number of nodes ) of the clique . A natural formulation for modeling the MEWC uses only binary variables for each edge of G , while an extended model includes an additional set of variables besides the natural edge variables previously considered . Dijkhuizen and Faigle ( 1993 ) proposes a natural formulation for the cardinality constrained version of the problem that requires an O ( | V | 4 ) set of constraints . Using an additional set of binary variables associated to the nodes of G , we get an alternative extended model for the same problem , with a constraints set of O ( | V | 2 ) . This model was discussed in Park , Lee and Park ( 1996 ) , in Macambira and de Souza ( 2000 ) , in Hunting , Faigle and Kern ( 2001 ) and in Sørensen ( 2004 ) . Park , Lee and Park ( 1996 ) provided a comparison of the linear programming relaxation of the two models concluding that the linear programming relaxation of the extended formulation is stronger than the linear programming relaxation of the natural model . The extended model polyhedron without the cardinality constraint was previously discussed in Padberg ( 1989 ) . Many practical problems are defined on sparse graphs , e . g . , networks of interacting proteins ( where nodes are proteins ) or in networks of interacting pathways ( where nodes are pathways ) . In such networks , if two proteins are assumed not to interact , then , in the graph , the two nodes corresponding to the two proteins cannot be linked to each other . The same happens if two pathways are not sharing any metabolites and the nodes of the graph 3 correspond to the pathways . Sparsity is also obtained due to a given threshold edge - pruning criterion . This often arises in gene co - expression networks . In fact , if we allow the inclusion of the pruned connections it may happen that the final clique solution will not satisfy one of the following two properties : the clique topology or the settled threshold limit for linkage . Some authors propose the inclusion of dummy edges , with sufficiently negative costs , for turning a sparse graph into a complete graph ( see , e . g . , Padberg ( 1989 ) , De Amorim et al . ( 1992 ) and Mehrotra and Trick ( 1998 ) ) and then solve the problem using the models from the literature . Our study is motivated by analyzing and creating models that are tailored for sparse graphs . As we shall show in the next section , adding dummy edges , increase , unnecessarily , the size of the model . The following two observations are relevant for the MEWC problem on a sparse graph , with weights c ij ∈ IR and no given preliminary upper limit on clique’s cardinality : a ) Even if c ij ≥ 0 for all ( i , j ) ∈ E , the problem is still hard to solve . In fact , it is at least as hard as the version with c ij = 1 for all ( i , j ) ∈ E , that is , the classical maximum clique problem . b ) A maximum edge - weight clique in G may not correspond to the largest cardinality clique in the graph , even if c ij ≥ 0 for all ( i , j ) ∈ E . Heuristic methodologies for the MEWC problem were discussed in Alidaee et al . ( 2007 ) , in Pullan ( 2008 ) and in Mascia et al . ( 2010 ) . Applications of the MEWC problem can be found in protein threading and alignment problems ( see , e . g . , Akutsu et al . ( 2004 ) , Dukka Bahadur et al . ( 2005 ) ) , side chain packing and protein structure prediction ( see , e . g . , Brown et al . ( 2006 ) and Mascia et al . ( 2010 ) ) , and in market basket analysis ( see , Cavique ( 2007 ) ) . The present paper also considers instances taken from a few other practical applications , using newspapers data and cell’s metabolic networks from the Saccharomyces cerevisiae yeast . In the first case , newspapers data can generate a words network , whose links relate pairs of words in the same text unit . A MEWC solution in this network should reveal a strongly prevalent subset of words in the news . In the second case , involving cell’s metabolic networks , we discuss the relationship among metabolites by looking for a prevalent subset of those elements , commonly sharing a large number of metabolic reactions . We also discuss and analyze metabolic networks whose nodes represent metabolic reactions and the edges relate reactions sharing common metabolites . In this case , a MEWC solution should identify a strongly related subset of metabolic reactions that can represent a large metabolic pathway system . 4 The compact formulations that will be discussed are very attractive to use within an integer linear programming package , as an alternative to other more sophisticated methods . This paper focuses on such formulations , providing methodological means for finding heavier clique components in real world weighted sparse graphs , which may help researchers from related areas in their own work . In the next section we start considering formulations for the MEWC problem known from studies with complete graphs , and adapt them for sparse graphs . Then , in Section 3 , new formulations are proposed for the same version of the problem . Strengthening strategies are also discussed in both sections . The version of the problem that includes the edges in the neighborhood of the clique is discussed in Section 4 . Computational tests with all models proposed for both MEWC and for the neighborhood version are conducted in Section 5 . The paper is closed with a conclusions section . 2 . Known compact formulations for the MEWC problem One of the most well known formulations in the MEWC problem literature is described in Park , Lee and Park ( 1996 ) . Its success and popularity is based on the following two reasons : i ) its compact form , and ii ) its linear programming relaxation strength . This formulation uses two sets of variables , the necessary edge variables as well as node variables . As showed in the mentioned papers , the extra set of node variables allows to generate an extended model that implies all the constraints in natural formulation proposed in Dijkhuizen and Faigle ( 1993 ) , involving a larger set of constraints . As mentioned in the previous section , and in contrast to previous works in the literature , the present paper studies the MEWC problem under two assumptions : i ) graph G is sparse , and ii ) there is no given upper limit on clique’s cardinality . The formulation described in Park , Lee and Park ( 1996 ) uses the two sets of variables  = otherwise 0 clique in the is node if 1 i x i , i ∈ V  = otherwise 0 clique in the both are and nodes if 1 j i y ij , ( i , j ) ∈ E and the adapted formulation for the MEWC problem becomes ( we denote it by F1 ) maximize ∑ ∈ E j i ij ij y c ) , ( 5 subject to i ij x y ≤ , j ij x y ≤ , ( i , j ) ∈ E ( 1 ) ( F1 ) 1 + ≤ + ij j i y x x , ( i , j ) ∈ E ( 2 ) 1 ≤ + j i x x , ( i , j ) ∉ E ( 3 ) x i ∈ { 0 , 1 } , i ∈ V ( 4 ) y ij ∈ { 0 , 1 } , ( i , j ) ∈ E ( 5 ) Constraints ( 2 ) are required only for edges ( i , j ) ∈ E such that c ij < 0 , in order to force variable y ij to be equal to 1 in the solution ( the redundancy of constraints ( 2 ) for c ij ≥ 0 has also been pointed out in Park , Lee and Park ( 1996 ) ) . In fact , for each edge ( i , j ) ∈ E with c ij ≥ 0 , the maximum value of the variable y ij can be set as equal to } , min { max j i ij x x y = due to constraints ( 1 ) and the objective function . . Then , the associated inequality ( 2 ) is satisfied . This observation also applies in the linear programming relaxation , allowing us to remove constraints ( 2 ) for all ( i , j ) ∈ E with c ij ≥ 0 , whenever the corresponding inequalities ( 1 ) are in the model . However , even in the case of G being sparse , formulation F1 requires the same number of constraints as the similar model defined on a complete graph , because it requires constraints for the edges in E ( inequalities ( 1 ) - ( 2 ) ) and also constraints for the edges not in E ( inequalities ( 4 ) ) , leading to an O ( | V | 2 ) constraint model . As in the papers by Park , Lee and Park ( 1996 ) , Macambira and de Souza ( 2000 ) and Sørensen ( 2004 ) , we can also consider the following polynomial set of valid inequalities for strengthening the linear programming relaxation of formulation F1 : star inequalities i max i j i ij x q y ) 1 ( ) ( ) , ( − ≤ ∑ ∈ δ , i ∈ V ( 6 ) with δ ( i ) indicating the set of edges in E that are incident to i ∈ V . These inequalities were adapted for the version of problem conducted in the present paper , which ignores the upper limit on the clique’s cardinality . Here , we use an upper bound on the clique number of the graph , denoted by q max ≥ ω ( G ) which can be calculated using one of the various methods in the literature ( see , e . g , Gendron , Hertz and St - Louis ( 2008 ) ) . We denote by F11 model F1 augmented with constraints ( 6 ) . A more compact version of formulation F1 , but with a weaker linear programming relaxation , can be obtained by substituting inequalities ( 3 ) by ) 1 ) ( 1 ) ( ( ) ( ) , ( i i j i j x i V x − − − ≤ ∑ ∉ δ δ , i ∈ V ( 7 ) 6 Constraints ( 7 ) are easily seen to be an aggregated version of constraints ( 3 ) . In fact , for each i ∈ V , the corresponding constraint ( 7 ) can be obtained by summing in j all inequalities ( 3 ) such that ( i , j ) ∉ E . This aggregated version was proposed in Della Croce and Tadei ( 1994 ) , being used as an alternative compact description of the set of incidence vectors that characterize cliques in the { x } variables subspace . If we substitute constraints ( 3 ) by ( 7 ) in F1 we obtain a different model for the MEWC problem , denoted by F2 . We also denote by F21 model F2 augmented with the additional constraints ( 6 ) . Formulation F2 is more compact than F1 , involving O ( | E | ) inequalities . We note that when defining the linear programming relaxation of all F1 based models , we need not impose upper bounding constraints on variables x i , since these are implied by constraints ( 3 ) . In the case of the F2and F21 models we need to impose explicitly such constraints by setting x i ≤ 1 for all i ∈ V . Constraints ( 3 ) belong to a larger set of inequalities defined on the subspace of the natural variables { x } . Consider the inequalities 1 ≤ ∑ ∈ S i i x for all S ∈ Γ ( with Γ defined as the set of all maximal independent sets of G ) ( see , e . g . , Bomze et al . ( 1999 ) ) , . Constraints ( 3 ) either are particular cases corresponding to independent sets of size 2 , or are dominated by the mentioned constraints for larger independent sets . In our study we have decided not to consider this larger set of inequalities in order to keep the discussion focused on compact formulations . An additional polynomial set of constraints also reported in Park , Lee and Park ( 1996 ) , in Macambira and de Souza ( 2000 ) and in Sørensen ( 2004 ) , are the so called clique inequalities 2 ) 1 ( ) , ( + ≤ − ∑ ∑ ∈ ∈ αα α E j i ij V i i y x , α = 1 , … , q max − 2 ( 8 ) However , we have decided not to include them in the tests reported in Section 5 because their contribution for strengthening the linear programming relaxations of formulations F1 and F2 is almost nil . 3 . New formulations for the MEWC problem In this section we present new formulations for the MEWC problem . The previous formulation F1 does not take advantage of the fact that the underlying graph may be sparse since we need constraints ( 2 ) for edges in the graph as well as constraints ( 3 ) for edges not in the graph . We start by presenting a formulation by Martins ( 2010 ) showing how to use “reformulation by discretization” to obtain another model whose constraints set is 7 independent of the sparsity of the graph . This is described in subsection 3 . 1 . Model enhancements are described in the same subsection . In Subsection 3 . 2 we describe an adaptation of a formulation proposed in Gouveia and Moura ( 2012 ) based on the view that a clique is an intersection of starts in a graph . 3 . 1 Representing Cliques by discretized formulations In the model proposed in Martins ( 2010 ) , the set of node variables is discretized , by including an extra index that identifies the size of the clique that the node belongs to . An additional set of binary variables identifying the cardinality of the final solution clique is also considered . The new sets of variables are  = otherwise 0 size of clique a in is node if 1 q i v qi , i ∈ V , q ∈ Q  = otherwise 0 size has clique the if 1 q w q , q ∈ Q with Q = { 2 , … , q max } a range of variation for clique’s cardinality , thus , 2 ≤ ω ( G ) ≤ q max . We assume that the optimal clique has more than one node . Parameter q max is an upper bound for the clique number of G , being previously calculated by using known method in the literature ( see , e . g , Gendron , Hertz and St - Louis ( 2008 ) ) . This upper bound is the same that has been considered in inequalities ( 6 ) . Thus , we have the following discretized formulation for the MEWC problem ( denoted by F3 ) maximize ∑ ∈ E j i ij ij y c ) , ( subject to ∑ ∈ ≤ Q q qi ij v y , ∑ ∈ ≤ Q q qj ij v y , ( i , j ) ∈ E ( 9 ) ( F3 ) 1 + ≤ + ∑ ∑ ∈ ∈ ij Q q qj Q q qi y v v , ( i , j ) ∈ E and c ij < 0 ( 10 ) qi i j i qj v q v ) 1 ( ) ( ) , ( − ≥ ∑ ∈ δ , i ∈ V , q ∈ Q ( 11 ) q V i qi qw v = ∑ ∈ , q ∈ Q ( 12 ) 1 = ∑ ∈ Q q q w ( 13 ) } 1 , 0 { ∈ qi v , i ∈ V , q ∈ Q ( 14 ) } 1 , 0 { ∈ q w , q ∈ Q ( 15 ) } 1 , 0 { ∈ ij y , ( i , j ) ∈ E ( 5 ) 8 Formulation F3 can be obtained from F1 by substituting the nodes variables , according to ∑ ∈ = Q q qi i v x for all i ∈ V ( 16 ) and substituting inequalities ( 3 ) by the discretized representation of cliques characterized by ( 11 ) - ( 15 ) . The reader is referred to Martins ( 2010 ) for a detailed explanation for these constraints . The new F3 formulation involves O ( | E | ) variables and O ( | E | ) constraints , like model F2 . Using ( 16 ) , the previously considered additional set of inequalities ( 6 ) can be represented as the following so - called star merging equalities ∑ ∑ ∈ ∈ − = Q q qi i j i ij v q y ) 1 ( ) ( ) , ( δ , i ∈ V ( 17 ) Contrarily to ( 6 ) , constraints ( 17 ) can be set as equalities , due to the fact that the new variables have more information , that is , they indicate the cardinality of the clique associated to variables y ij equal to 1 . That is , each node i in a clique with cardinality q requires ( q − 1 ) edges incident to it ; otherwise ( if node i is not in any clique in the whole range Q ) , then no edges are incident to i and all the associated y ij variables must be equal to zero . Equations ( 17 ) are related to equalities presented by Gouveia and Moura ( 2012 ) for characterizing cliques in directed graphs . The undirected version of this formulation ( which uses ( 17 ) ) will be described in subsection 3 . 3 We can use the discretized variables to add new valid inequalities to model F3 . We start by considering a disaggregated and discretized version of inequalities ( 3 ) ( used in F1 ) for strengthening the linear programming relaxation version of model F3 q qj qi w v v ≤ + , ( i , j ) ∉ E , q ∈ Q ( 18 ) If we sum in q all constraints ( 18 ) and use ( 13 ) we obtain 1 ≤ + ∑ ∑ ∈ ∈ Q q qj Q q qi v v . By using ( 16 ) we obtain inequalities ( 3 ) on the { v } - variables space , indicating that constraints ( 18 ) imply ( 3 ) . Furthermore , if we substitute variable w q in ( 18 ) using the equality ( 12 ) , and multiplying the resulting constraint by q , we obtain ∑ ∈ ≤ + V k qk qj qi v qv qv , leading to the following alternative representation of ( 18 ) , ( ) qj qi j i V k qk v v q v + − ≥ ∑ ∈ ) 1 ( } , \ { , ( i , j ) ∉ E , q ∈ Q ( 19 ) This alternative representation shows that ( 18 ) can be seen as an extension of constraints ( 11 ) . In effect , if we sum two inequalities ( 11 ) for a pair i , j ∈ V such that ( i , j ) ∉ E , we obtain inequality 9 ( ) qj qi j j k qk i i k qk v v q v v + − ≥ + ∑ ∑ ∈ ∈ ) 1 ( ) ( ) , ( ) ( ) , ( δ δ , that can be rewritten as , ( ) qj qi j j k i i k k qk j j k i i k k qk v v q v v + − ≥ + ∑ ∑ ∈ ∧ ∈ ∈ ∨ ∈ ) 1 ( ) } ( ) , ( ) ( ) , { ( : ) } ( ) , ( ) ( ) , { ( : δ δ δ δ ( 20 ) The second summation in ( 20 ) involves nodes ( k : { ( k , i ) ∈ δ ( i ) ∧ ( k , j ) ∈ δ ( j ) } ) that were counted twice in both neighborhoods δ ( i ) and δ ( j ) . It is easy to see that we still obtain a valid inequality by omitting that summation , leading to the following lifted version of ( 19 ) ( ) qj qi j j k i i k k qk v v q v + − ≥ ∑ ∈ ∨ ∈ ) 1 ( ) } ( ) , ( ) ( ) , { ( : δ δ , ( i , j ) ∉ E , q ∈ Q ( 21 ) As V \ { i , j } contains the set of nodes adjacent to i or j in G ( represented by k : { ( k , i ) ∈ δ ( i ) ∨ ( k , j ) ∈ δ ( j ) } ) , then inequalities ( 21 ) imply ( 19 ) . We can also start with constraints ( 18 ) for deriving a different set of discretized valid inequalities , using the same aggregation strategy that has been used to transform constraints ( 3 ) into inequalities ( 7 ) , as proposed in Della Croce and Tadei ( 1994 ) . Thus , for each i ∈ V , if we sum constraints ( 18 ) for all ( i , j ) ∈ δ ( i ) we obtain ) ) ( 1 ) ( ( ) ( ) , ( qi q i j i qj v w i V v − − − ≤ ∑ ∉ δ δ , i ∈ V , q ∈ Q ( 22 ) Similar to constraints ( 17 ) , inequalities ( 18 ) , ( 21 ) and ( 22 ) can also be shown not be redundant in the feasible set of the linear programming relaxation of model F3 , even after ( 17 ) have been included in the model , as will be shown in Section 5 . It is also easy to show that ( 22 ) combined with ( 16 ) imply inequalities ( 7 ) that have been considered in the context of formulation F2 . In the context of this study we are going to consider two strengthening versions of model F3 : F31 as formulation F3 augmented with ( 17 ) ; and model F32 as F3 augmented with ( 17 ) and ( 22 ) . Constraints ( 18 ) and ( 21 ) are not considered because they generate extremely large formulations , especially when the graph is sparse . In Section 5 we will show the results from a few computational experiments using these two sets of constraints , showing their effectiveness in the proposed solution approaches . We conclude this subsection by noting that the linear programming relaxation of all F3 based models require explicit upper bounding constraints on variables qi v , by setting 1 ≤ qi v for all those variables . 10 3 . 2 Representing Cliques by Intersecting Stars Equalities ( 17 ) were proposed in Gouveia and Moura ( 2012 ) for characterizing cliques in a directed graph . More precisely , if we substitute each edge in a clique by two directed arcs ( with opposite directions ) , then each node and its outward arcs represent a directed star . A clique can then be viewed as an adequate intersection of directed stars . In Gouveia and Moura ( 2012 ) , the authors use this characterization to propose a new formulation for describing cliques with edge variables . The undirected version of this formulation ( which uses ( 17 ) ) is considered in this subsection ( and denoted by F4 ) . maximize ∑ ∈ E j i ij ij y c ) , ( subject to ∑ ∑ ∈ ∈ − = Q q qi i j i ij v q y ) 1 ( ) ( ) , ( δ , i ∈ V ( 17 ) ( F4 ) q V i qi qw v = ∑ ∈ , q ∈ Q ( 12 ) 1 = ∑ ∈ Q q q w ( 13 ) } 1 , 0 { ∈ qi v , i ∈ V , q ∈ Q ( 14 ) } 1 , 0 { ∈ q w , q ∈ Q ( 15 ) } 1 , 0 { ∈ ij y , ( i , j ) ∈ E ( 5 ) This model is substantially more compact than formulation F3 , involving O ( | E | ) variables and only O ( | V | ) constraints . Strengthened versions of the linear programming relaxation of F4 that are considered here are : with the addition of inequalities ( 11 ) , we obtain model F41 ; with the addition of constraints ( 9 ) , we obtain model F42 ; and with the addition of inequalities ( 9 ) and ( 22 ) , we obtain model F43 . Model F41 increase the order of magnitude of the original model F4 to an O ( ( q max − 1 ) | V | ) constraints formulation , while F42 and F43 increase it to an O ( | E | ) constraints model . The linear programming relaxation of models F4 , F41 , F42 and F43 require explicit upper bounding constraints on variables qi v and y ij , by setting 1 ≤ qi v and y ij ≤ 1 for all those variables . We conclude this section by making two final observation concerning formulations F3 and F4 : 11 1 ) Following Martins ( 2010 ) , we can eliminate all variables qi v such that the degree of node i in G is smaller than q , that is , to eliminate variables qi v such that | δ ( i ) | < q . The same holds for all constraints ( 11 ) whose pair ( i , q ) verifies the same condition . 2 ) We can eliminate variables { w } from the models , by substituting equalities ( 12 ) and ( 13 ) by the single constraint 1 1 = ∑ ∑ ∈ ∈ Q q V i qi q v . We have decided to keep the models the way they have been introduced , for two reasons : i ) because they are easier to explain and motivate ; and ii ) because whenever the coefficient ( 1 / q ) is a rational number with a repeating decimal , the equality requires a tolerance range due to the rounding of those coefficients . 4 . The MEWC problem with the neighboring edges A recent approach related to the classical maximum clique problem is the maximum edge - neighborhood clique problem proposed in Martins ( 2012 ) . It involves finding a clique S ⊂ V in G with maximum number of edges in the cutset E ( S , V \ S ) = { ( i , j ) ∈ E : i ∈ S and j ∈ V \ S } . The weighted version involves finding a clique S ⊂ V such that that sum of the weights of the edges in the cutset E ( S , V \ S ) is maximized . We call it the maximum edge - weight neighborhood clique ( MEWNC ) problem . This problem can be modeled with any formulation described in Sections 2 and 3 , with a slight modification in the objective function . In fact , for a given clique S , the total weight of the edges in the cutset E ( S , V \ S ) is represented by ∑ ∈ ) \ , ( ) , ( S V S E j i ij c , which is equal to ∑ ∑ ∈ ∈ − ) ( ) , ( 2 S E j i ij S i i c a , with E ( S ) denoting the set of edges within the clique and ∑ ∈ = ) ( ) , ( i j i ij i c a δ for all i ∈ V , that is , the sum of the weights of all edges incident to i . In the alternative representation , by summing the weights of all edges incident to the nodes of the clique we are including both neighboring edges and interior edges , which requires the elimination of those in the interior ( that were summed twice ) . So , we simply need to substitute the objective function in F1 and F2 based models by the function ∑ ∑ ∈ ∈ − E j i ij ij V i i i y c x a ) , ( 2 , and by ∑ ∑ ∑ ∈ ∈ ∈ − E j i ij ij V i Q q qi i y c v a ) , ( 2 in each of the F3 and F4 based models . Yet , however , constraints ( 2 ) are required in models F1 and F2 , and constraints ( 10 ) in F3 ( whenever c ij > 0 ) , due to the negative coefficients associated to the y ij variables in the 12 objective function . In the same way , and under the same conditions , constraints ( 1 ) can be omitted from F1 and F2 , and ( 9 ) can be omitted from F3 . All applications considered for the version that ignores the weights on the edges , described in Martins ( 2012 ) , can motivate this new weighted version . In particular , we refer to applications involve mining words in news press publications and to applications in biological networks . Some of these applications will be discussed in Section 5 for showing the practical relevancy of the MEWNC problem . Another alternative version of this neighboring variant is to maximize the weights of the edges in the neighborhood as well of those within the clique . In this case , the adaptation is also straightforward , requiring the elimination of the coefficient 2 in the second term of the objective functions . 5 . Computational results In this section we perform computational tests using a number of benchmark instances in the literature for evaluating the models described in Sections 2 and 3 . Figure 1 summarizes all those models and the linear programming relaxation domination among them . In the figure , an arrow linking models A and B ( A → B ) means that A is stronger than B in linear programming relaxation ( transitivity connections were omitted ) . The label O ( a , b ) below each model indicates the order of magnitude of : a – number of variables , and b – number of constraints , excluding variable bounding constraints required in the linear programming relaxation versions . Figure 1 : Scheme relating all models under discussion , on linear programming relaxation . All strengthen formulations under discussion can be summarized as F11 ≡ F1 ⊕ ( 6 ) ; F21 ≡ F2 ⊕ ( 6 ) ; F31 ≡ F3 ⊕ ( 17 ) ; F32 ≡ F3 ⊕ ( 17 ) , ( 22 ) ; F41 ≡ F4 ⊕ ( 11 ) ; F42 ≡ F4 ⊕ ( 9 ) ; F43 ≡ F4 ⊕ ( 9 ) , ( 22 ) F1 F2 O ( | E | , | V | 2 ) O ( | E | , | E | ) F11 F21 O ( | E | , | V | 2 ) O ( | E | , | E | ) variables : ( y ij , x i ) F3 F4 O ( | E | , | E | ) O ( | E | , | V | ) F31 F32 O ( | E | , | E | ) O ( | E | , | E | ) variables : ( y ij , v iq , w q ) F41 O ( | E | , | Q | | V | ) F42 O ( | E | , | E | ) F43 O ( | E | , | E | ) 13 ( A ≡ B ⊕ C denotes that model A is obtained from B with the additional constraints C ) . The models were solved using the ILOG / CPLEX 11 . 2 package , and all the experiments were performed under Microsoft Windows 7 operating system on an Intel Core i7 - 2600 with 3 . 40 GHz and 8 GB RAM . When running the mixed integer programming ( MIP ) algorithm of CPLEX we used most default settings , which involve an automatic procedure that uses the best rule for variable selection and the best - bound search strategy for node selection in the branch - and - bound tree . The automatic generation of additional global cuts was closed , because in most cases it revealed to be too time demanding . We have set an upper time limit of 10800 seconds in all tests conducted . Times are reported in seconds . Parameter q max ( that bounds ω ( G ) is calculated using the sequential elimination algorithm described in Gendron , Hertz , St - Louis ( 2008 ) . Given a function that provides an upper bound on the clique number of any induced subgraph G ´ of G , the sequential elimination algorithm is based on computing this upper bound for a series of subgraphs G ´ of G . As described in Gendron , Hertz , St - Louis ( 2008 ) , the algorithm can reduce significantly the gap between the initial upper bound value and the clique number of G . In Gendron , Hertz , St - Louis ( 2008 ) , the authors provide extensive computational experiences with a number of upper bounding functions on ω ( G ) . In our tests , we chose to use the DSATUR greedy procedure ( proposed by Brélaz ( 1979 ) ) that computes an upper bound on the chromatic number of a graph , which is a well - known upper bound for the clique number . Our choice is based on the quality of the bounds produced and the execution times required by the sequential elimination algorithm combined with the DSATUR procedure . These results are reported in Table A2 in the Appendix . The execution times reported in Tables A4 and A5 ( in the Appendix ) do not include the time for calculating the q max parameter value . As usual , ( ) ( ) 1 ) ( − = V V E G d stands for the density of graph G . In all tables , “ < 10800” means that the time limit was exceeded and “o . m . ” means out of memory . In TableA4 , addressing the continuous models resolution times , the out of memory occurred during the construction or when reading the model . In Table A5 , “o . m . ” indicates that the branch - and - bound tree becomes so large that insufficient memory remains for running any further continuous subproblem . We also denote by F L the linear programming relaxation of model F . 14 Percent gaps are calculated as 100 ( ( UB − LB ) / LB ) , with LB the best known lower bound for the optimum or the optimum when available ( values W e ( G ) in Table A1 in the Appendix ) , and UB the upper bound produced by the linear programming ( LP ) relaxation of the models under discussion . Due to the range of variation of index q associated to variables } { qi v that impose limits on the cardinality of the nodes variables , we add the following set of inequalities into models F1 and F2 , in order to remove the mentioned implicit advantage when discussing the models in linear relaxation max q x V i i ≤ ∑ ∈ ( 23 ) 5 . 1 Instances The selected instances from the DIMACS benchmark database were taken from the c - fat , p _ hat , MANN , brock , keller , hamming , johnson and C families , excluding those with | V | > 500 . We also include two strongly sparse graphs addressing real - world problems , namely the Reuters terror news ( RTN ) network , and networks of interacting pathways and interacting metabolites found in the bio - informatics literature . All instances information ( | V | , | E | and d ( G ) ) is reported in Table A1 in the Appendix . In the same table , we indicate the best heuristic solution values reported in Pullan ( 2008 ) for the DIMACS instances . The solution values for the RTN and SC classes were taken from the branch - and - bound execution . The original DIMACS instances do not include weights on the edges . However , we followed the weighting strategy proposed in Pullan ( 2008 ) , setting c ij = ( i + j ) mod 200 + 1 . The Reuters terror news ( RTN ) graph is an undirected temporal network based on all stories released during 66 consecutive days by the news agency Reuters , concerning the September 11 attack on the U . S . , beginning at 9 : 00 AM EST 9 / 11 / 01 . The combined network for all 66 days involves the union of all time points . Their nodes are words ( terms in the news ) and an edge links two words if they appear in the same text unit ( sentence ) . It was proposed in Corman et al . ( 2002 ) and made available in Pajek’s data base ( Batagelj and Mrvar ( 2009 ) ) . As in Martins ( 2012 ) , we consider six subgraphs , addressing the observations collected during 1 , 3 , 7 , 15 , 30 and the 66 consecutive days , being denoted by d1 - RTN , d3 - RTN , d7 - RTN , d15 - RTN , d30 - RTN and d66 - RTN , respectively . Weights on the edges of the RTN class instances represent the number of times the two words appear in the same text unit , during the whole 66 days’ time period . 15 We also consider two biological networks involving metabolic reactions interactions and metabolite’s interactions , for focusing on another application for discussing the proposed models . These are Saccharomyces cerevisiae metabolic networks , taken from Förster et al . ( 2003 ) . The data involves 1394 metabolic reactions ( we substituted reciprocal ( bidirectional ) reactions into two single - direction reactions ) that use 991 metabolites . Each metabolic reaction is a chemical pathway that uses reactants to generate products . Both reactants and products are metabolites , being shared among reactions . For instance , we can characterize a reaction as : A + B - - > C + D , meaning that metabolites A and B are reactants producing metabolites C and D ( as products ) . We than can have another reaction characterized by : A + C + E - - > B + F . The two reactions share three different metabolites : A , B and C . Using the whole set of metabolic reactions from the Saccharomyces cerevisiae data , described in the mention paper , we built the following network structures : - SC - NIP - m - t1 : the set of nodes V represents all metabolites and the set of edges E represents pairs of metabolites sharing at least one reaction , thus ( i , j ) ∈ E if there is at least one reaction that includes both metabolites i and j ( no matter the side : reactant or product ) . The weight c ij represents the number of reactions sharing the two metabolites i and j . In this case , we have | V | = 991 and | E | = 4161 . - SC - NIP - r - t k ( for k = 1 , 2 ) : the set of nodes V represents all reactions ( excluding isolated ones ) and the set of edges E represents pairs of reactions sharing at least k metabolites , thus ( i , j ) ∈ E if there is at least one common metabolite among the two reactions i and j ( no matter the side the metabolite appears in ) . The weight c ij represents the number of metabolites sharing the two reactions i and j . When we set the threshold value k = 1 , leading to instance SC - NIP - r - t1 , we have | V | = 1393 and | E | = 56276 . When the threshold is set to k = 2 , we have instance SC - NIP - r - t2 , with | V | = 1183 and | E | = 17776 . In instance SC - NIP - r - t2 there are 211 ( = 1394 - 1183 ) reactions sharing no more than a single metabolite with any other reaction in the data . Isolated nodes were removed from the original data , in all instances under discussion . These sparse graphs , namely , the Saccharomyces cerevisiae instances , can exemplify the relevance for handling sparse graphs , instead of adding edges to complete them . In fact , if we take instance SC - NIP - m - t1 , a missing edge between nodes i and j means that there are no reactions sharing those two metabolites . To add such an edge and consequently find metabolites i and j in the same clique , would deceive conclusions . 16 5 . 2 Tests on the MEWC problem The linear programming relaxation versions of the models under discussion produce , in general , very large gaps , and they still remain large even after the strengthened processes . These gaps are reported in Table A3 and the times produced by CPLEX to reach them are reported in table A4 , in the Appendix . The initial models F1 L , F2 L and F3 L produce the same upper bound among all DIMACS instances , while model F4 L is much stronger for all but the c - fat class instances . However , for the very sparse graphs ( RTN and NIP classes ) , things behave quite differently . In this case , model F4 L produces very poor gaps , while the other initial formulations behave better , with strong advantage for model F3 L . Also interestingly , differences among models F1 L and F2 L were only observed on the sparser graphs . These tied results for the denser graphs can be justified by the presence of constraints ( 23 ) over these models . As the q max parameter is fairly close to the cardinality of the optimum solution , it may hide original differences in the polyhedral structures of constraints ( 3 ) and ( 7 ) that characterize models F1 and F2 , respectively . Furthermore , formulation F4 L is much faster than all others , as expected ; with F3 L being the slowest , for all DIMACS instances . The disadvantage of F1 L over F2 L on the gaps was expectable , and the advantage of F1 L over F3 L on the reported times can be explained due to the density of the DIMACS graphs . On the other hand , when looking for the sparser instances ( RTN and NIP ) , model F3 L is much faster than F1 L and F2 L ( when succeeded ) . All models were solved using the dual simplex algorithm , even models F4 L and F41 L that could suggest the use of the primal method due to the lower number of constraints compared with the number of variables . Anyway , we have solved them with both methodologies – primal and dual versions , and obtained faster the optimums with the dual approach . Considering the strengthen versions , there are significant reductions , in general . However , they lead to similar gaps for most instances , at the end . Once again , model F11 L produces slightly smaller gaps for the densest instances , while model F31 L generates smaller gaps for the sparser graphs . Furthermore , constraints ( 17 ) provide interesting improvements on model F3 L gaps , with extra execution time , while constraints ( 11 ) perform poorly than inequalities ( 9 ) , over model F4 L , shown by comparing the gaps from models F41 L and F42 L ( see , Table A3 in the Appendix ) . However , we should also notice that inequalities ( 11 ) can still improve over the model that includes constraints ( 9 ) and ( 17 ) , as shown by comparing the gaps from model F31 L with those from F42 L , for the very sparse RTN class instances ( see , Table A3 in the Appendix ) . This difference still remains after the inclusion of 17 inequalities ( 22 ) , shown by comparing the gaps among F32 L and F43 L for instances d1 - RTN and SC - NIP - m - t1 , in the same table . Anyway , the gaps to close are still very large , in general , forcing the branch - and - bound to a hard work , for most instances , as will be shown next . We have also conducted a few experiments for testing the strengthen capability of constraints ( 18 ) and ( 21 ) over models F31 L and F42 L , using instance SC - NIP - m - t1 . The inclusion of inequalities ( 18 ) produced a significant reduction on the gap and a huge increase on the execution time ; while the formulations that included constraints ( 21 ) went out - of - memory . Considering the previously discussed results on the linear programming relaxation versions of the models , we have solved the associated integer versions for all formulations but F32 and F43 . The execution times ( in seconds ) of the branch - and - bound to reach the optimums are reported in Table A5 in the Appendix . As mentioned earlier , we used the default settings to run the MIP solver of CPLEX and closed the automatic generation of additional cuts into the root node of the branch - and - bound tree . For the DIMACS instances , tests were only conducted for the graphs having no more than 300 nodes , and at most 10000 nodes for the RTN class instances . Figure 2 plots the best strategies for solving each type of instance through the branch - and - bound . The two axes represent : the number of nodes ( log 10 | V | , for scaling purposes ) and the density ( d ) , for the horizontal and vertical axes , respectively . Each point in the graphic represents an instance and its label indicates the fastest model to reach the optimum . Label “ > 10800” indicates that the branch - and - bound was not able to attain the optimum within the 10800 seconds time limit , for all models ; and “o . m . ” indicates that no model could be handled due to out - of - memory . In general terms , this graphic shows that instances with density higher than 0 . 25 should be solved using the F1 based models . For the densest ones and when the graph has more than 50 nodes , the fastest model was F11 , while no model was able to solve graphs with density higher than 0 . 6 and more than 120 nodes . On the other hand , when density ranges between 0 . 25 and 0 . 15 , the fastest model was F2 , being able to solve instances with up to 300 nodes . However , when the graphs become sparser , ranging between 0 . 1 and 0 . 003 , the best strategy is to use the F4 based models , being able to solve instances with almost 2500 nodes ; while the very sparse graphs , with density lower than 0 . 003 should be handled by model F3 , being able to solve instances with up to 6511 nodes . For larger sized graphs we couldn’t even build the formulations . 18 Furthermore , and according to the results attained , the strengthen versions can usually go a bit further when the size of the instances increase . Figure 2 : Best models for each type ( number of nodes / density ) of instance , using the branch - and - bound . It is also important to stress that the very sparse RTN class graphs can hardly be solved using the F1 and F2 models , even in linear programming relaxation . For those instances , model F3 seems to be the best model to solve them . However , for the slightly denser and large NIP instances , the F4 models seem to be the best choice , especially due to the speed to solve the linear programming relaxation versions , regardless of the initial large gaps . In addition , model F4 generates a very large branch - and - bound tree , which overloads memory limits at early stages of the MIP solver scheme . In order to analyze other solving strategies , we tried a number of alternative methodologies within the branch - and - bound framework , including different node and / or variable selection strategies , the permission to use hard disk memory for storing the branch - and - bound tree , the automatic generation of additional global cuts at the root node of the branch - and - bound tree , the chance to label some constraints as “Lazy Cuts” and / or “User Cuts” ( see , Klotz and Newman ( 2013 ) ) . 19 Among all these experiments , the only competing results to those conducted in the tests reported in Table A5 involved : a different strategy for variable selection considering the so call “Strong branching” provided by the MIP solver of CPLEX ( see , Klotz and Newman ( 2013 ) ) ; and the permission for the automatic generation of additional global cuts at the root node . The results attained are reported in Table A6 in the Appendix and they simply address the very sparse RTN and NIP classes . For the DIMACS class instances , improvements were seldom observed . Comparing the results in Tables A5 and A6 , we can conclude that there are interesting improvements on the sparser RTN instances , and soundless results for the NIP class graphs . Concerning the RTN and NIP real - world instances , we can state the following brief observations : • The words brought by the three succeeded instances in the RTN class appear to be quite assertive . In fact , the first day news optimum solution ( instance d1 - RTN ) selects 8 words that were strongly found in common text units ( in pairs ) along the whole period of data collection . Then , the network linking the words released until the third day ( d3 - RTN ) brought three additional words : “Official” , “People” and “Thousand” ; and another three words stood out from the news released during the first 7 days ( d7 - RTN ) , namely : “Hijack” , Miss” and “Tower” . • Considering the NIP class instances : - SC - NIP - m - t1 : the optimum solution identifies the following eight metabolites : “ADP” , “AMP” , “ATP” , “L = Aspartate” , “L = Glutamate” , “L = Glutamine” , “NH3” , “Orthophosphate” . All pair combinations of these metabolites are sharing 343 reactions . Some of these reactions are repeated in more than an edge in the clique . In fact , the 8 metabolites clique share 191 distinct reactions . - SC - NIP - r - t1 and SC - NIP - r - t2 : the optimums identify 174 and 121 reactions , respectively ( some of them can be reversals ) . Curiously , “ATP” is a common metabolite in all 174 reactions in the first solution , while metabolites “ATP” and “ADP” can be found in all 121 reactions in the second solution . The 174 nodes clique involves pairs of reactions sharing 25290 metabolites , while de 121 clique solution involves pairs of reactions sharing 15188 metabolites . Some of these metabolites are being shared in more than a pair at the same time . In fact , there are only 86 distinct metabolites among the whole 25290 counted reactants / products in the SC - NIP - r - t1 optimum clique ; while in the SC - NIP - r - t2 optimum solution , the whole counted metabolites ( 15188 ) comprise just 68 distinct elements . 20 5 . 3 Tests on the MEWNC problem We have also conducted some computational tests addressing the MEWNC problem proposed in Section 4 . Instead of optimizing the sum of the weights of the edges in the clique , the MEWNC problem looks for a clique with maximum weight on the edges that run between the clique and it’s complementary . The tests were only conducted on the RTN and NIP classes , in order to show its practical relevancy . Table 1 displays some features related with the solutions brought by the two problems : MEWC and MEWNC , using the two classes RTN and NIP . We use the following notation for describing the relevant aspects of the solutions : | C | indicates the cardinality of clique C ; W C represents the sum of the weights of the edges in clique C ; E ( C ) represents the set of edges with one node in the clique ( C ) and the other node in its complementary ( C c ) , that is , the neighboring edges of C , and | E ( C ) | is its cardinality ; W C represents the sum of the weights of the edges in E ( C ) ; N ( C ) represents the number of nodes incident to the neighboring edges E ( C ) ( excluding those in the clique C ) . MEWC problem MEWNC problem Instances | C | W C | E ( C ) | W C N ( C ) | C | W C | E ( C ) | W C N ( C ) d1 - RTN 8 4524 1203 15567 742 8 2802 1271 17151 807 d3 - RTN 11 5859 3286 27391 1604 11 2465 3266 28254 1679 d7 - RTN 14 7424 5164 34604 2259 13 4138 5209 37771 2353 SC - NIP - m - t1 8 343 853 1472 369 9 230 1092 2022 529 SC - NIP - r - t1 174 25290 9725 10309 853 97 8260 15745 20843 904 SC - NIP - r - t2 121 15188 482 994 130 61 3884 4076 8516 187 Table 1 : Optimum / best solutions of the two problems MEWC and MEWNC , and additional information , for the RTN and NIP classes . The shaded column associated to each problem – MEWC and MEWNC – indicates the factor being maximized . These are the optimum values for both problems , except those underlined that represent the best lower bounds found during the branch - and - bound execution , for the cases where the optimums were not attained . The information retrieved by the optimum / best solutions for the RTN class instances can be found in Tables A7 and A8 in the Appendix . The best strategies for handling problem MEWC were discussed in Subsection 5 . 2 . For the neighboring version – MEWNC problem – the smaller instances d1 - RTN and SC - NIP - m - t1 were solved faster by model F3 , requiring 55 . 82 and 0 . 17 seconds , respectively . The formulation was solved using the default settings and no automatic generation of additional 21 cuts by CPLEX . For the other instances , we were unable to reach the optimums within the 10800 seconds time limit , and the best solutions were attained using the following strategies : - d3 - RTN and d7 - RTN : model F3 using the default settings and no automatic generation of additional cuts by CPLEX ; - SC - NIP - r - t1 : model F1 using the default settings and no automatic generation of additional cuts by CPLEX ; - SC - NIP - r - t2 : model F4 using strong branching for variable selection and allowing the automatic generation of additional global cuts by CPLEX . Considering these experiments , problem MEWNC seems to require even more computational effort to reach the optimums than problem MEWC , at least for the sparser practical problems discussed . Some observations associated to the solutions in the RTN class instances : - The words in the clique returned by problem MEWNC were found together less times in the same text unit than those retrieved by the MEWC problem . However , the expressions coming from problem MEWNC are more related to the remaining words than those coming from MEWC . - Considering the solutions in Tables A7 and A8 in the Appendix , if we compare the non - common words from the first day news ( d1 - RTN ) we get “New - York” and “World _ Trade _ Ctr” from the MEWC solution and get the words “People” and “Pres - Bush” from the MEWNC solution . This shows two different focus of the news . - Then , the non - common words from the three days news ( d3 - RTN ) are “New _ York” , “Plane” , “Washington” , “World _ Trade _ Ctr” , “Official” and “Thousand” from problem MEWC solution ; while the non - common words brought by problem MEWNC are “Pres _ Bush” , “City” , “Office” , “Security” , “Wednesday” and “World” . - The non - common words from the seven days news ( d7 - RTN ) are “New _ York” , “Pentagon” , “Plane” , “World _ Trade _ Ctr” , “Thousand” , “Hijack” , “Miss” and “Tower” from the MEWC solution ; while the MEWNC solution includes the non - common words “Pres - Bush” , “Afghanistan” , “American” , “Country” , “Day” , “State” and “War” . - In fact , the solution where the weight in the clique is maximized ( from problem MEWC ) seems to deal with internal and operational subjects , while the solution where the maximum weight is in the neighborhood ( taken from problem MEWNC ) seems to handle with external and political concerns . Some observations associated to the solutions in the NIP class instances : 22 - The weight in the clique and in its neighborhood is more unbalanced for the solutions of the two problems . - Concerning instance SC - NIP - m - t1 , the metabolites in the MEWNC solution ( “ATP” , “CO2” , “L = Glutamate” , “NAD + ” , “NADH” , “NADP + ” , “NH3” , “Orthophosphate” , “Pyrophosphate” ) are more engaged with other metabolites in the network than those in the clique retrieved by problem MEWC ( “ADP” , “AMP” , “ATP” , “L = Aspartate” , “L = Glutamate” , “L = Glutamine” , “NH3” , “Orthophosphate” ) . Furthermore , there are only 191 different reactions among the whole 343 counted in the clique returned by problem MEWC , and 541 different reactions among the whole 2022 counted in the neighborhood of the clique brought by problem MEWNC . - For the metabolic networks relating reactions ( instances SC - NIP - r - t1 and SC - NIP - r - t2 ) , the weight inside the optimum cliques is stronger than in the neighborhoods . Apparently , these solutions relate a large number of reactions sharing many metabolites with each other . However , the real number of different metabolites being shared is not that huge . In fact , there are only 86 different metabolites among the whole 25290 counted in the MEWC solution on instance SC - NIP - r - t1 , and only 68 different metabolites in the same problem solution on instance SC - NIP - r - t2 . However in the neighborhoods of problem’s MEWNC solutions , although they appeared to be less rich , they include more different metabolites than in the previous cases , comprising 133 and 89 distinct metabolites among the 20843 and 8516 counted in the two instances solutions SC - NIP - r - t1 and SC - NIP - r - t2 , respectively . It is also important to state that “ATP” is a common metabolite to all reactions involved in both problems cliques for instance SC - NIP - r - t1 , while the reactions involved in the optimum cliques addressing instance SC - NIP - r - t2 are all sharing metabolites “ATP” and “ADP” . - To conclude , we also observe that the reactions in the cliques returned by problem MEWNC are all contained in the set of reactions in the optimum cliques from problem MEWC , for the two instances SC - NIP - r - t1 and SC - NIP - r - t2 . In this case , we can admit that the MEWNC solutions hold back in the MEWC best cliques , in order to gain additional weight in their neighborhoods . 6 . Conclusions This paper discusses compact formulations for the maximum edge - weight clique problem ( MEWC ) on sparse graphs . We have adapted known formulations from the literature and 23 proposed new models . The new models use node - discretized variables , allowing the construction of very compact formulations for the problem . Additional valid constraints were also proposed in order to strengthen the linear programming relaxations of the models discussed . The computational experiments conducted over a set of benchmark and real - world instances showed that the models behave differently according to the density of the underlying graphs . In fact , when embedded into the branch - and - bound , and in general terms , F1 based models are the best strategy when the graph has density higher than 0 . 25 , being able to solve instances with up to 120 nodes . However , when the density ranges between 0 . 25 and 0 . 15 , the best strategy is model F2 , being able to solve instances with up to 300 nodes . On the other hand , when the graphs become sparser , ranging between 0 . 1 and 0 . 003 , the best strategy is to use the F4 based models , being able to solve instances with almost 2500 nodes ; while the very sparse graphs , with density lower than 0 . 003 should be handled by model F3 , being able to solve instances with up to 6511 nodes . For larger sized graphs we couldn’t even build the formulations . Thus , the known adapted models ( F1 and F2 ) can handle a wider density range of instances , while the node - discretized models ( F3 and F4 ) are the best for the sparser graphs . Nevertheless , models F3 and F4 can also solve some dense instances , as well , although being more time demanding ; while models F1 and F2 can hardly handle the very sparse and large graphs , with density lower than 0 . 003 . Some of the best strengthening schemes were hindered due to the number of additional constraints involved . This suggests that using cutting plane methodologies or branch - and - cut specific approaches may possibly improve most of the results attained , and maybe increase the size of the graphs being solved . Anyway , it is worth saying that the compact formulations here discussed are very attractive to use within an integer linear programming package , as an alternative to other more sophisticated methods , also being easily used by anyone that simply wants to solve these problems on their own graphs , including researcher from other related areas . The formulations were also used for discussing a closely related problem , where the objective function involves the maximization of the total weight of the edges in the neighborhood of the clique , denoted by maximum edge - weight neighborhood clique ( MEWNC ) problem . The practical relevancy of the two problems was also discussed using the so called “Reuters terror news” network and biological metabolic networks of the Saccharomyces cerevisiae yeast . In each of these networks , the MEWC problem solution revealed a strongly related 24 and prevalent subset of elements , while the MEWNC solution identified a strongly related subset of elements with heavy prevalence within the whole network environment . We emphasize that solving real world applications by using compact formulations is worth studying and analyzing , allowing to reach the optimums in large sized graphs . Acknowledgments This work has been partially supported by Portuguese National Funding by FCT ( project PEst - OE / MAT / UI0152 ) . Appendix Table A1 summarizes general information related with the instances used in Section 5 . It indicates the number of nodes , number of edges and the density of each graph . It also includes heuristic solution values for the MEWC problem ( denoted by W e ( G ) ) , reported in Pullan ( 2008 ) . The solutions for the RTN and SC classes instances were taken from the branch - and - bound executions . The W e ( G ) values are lower bounds for the MEWC optimums . Instances | V | | E | d ( G ) W e ( G ) Instances | V | | E | d ( G ) W e ( G ) brock200 _ 1 200 14834 0 . 754 21230 johnson8 - 2 - 4 28 210 0 . 556 192 brock200 _ 2 200 9876 0 . 496 6542 johnson8 - 4 - 4 70 1855 0 . 768 6552 brock200 _ 3 200 12048 0 . 605 10303 johnson16 - 2 - 4 120 5460 0 . 765 3808 brock200 _ 4 200 13089 0 . 658 13967 johnson32 - 2 - 4 496 107880 0 . 879 16205 brock400 _ 1 400 59723 0 . 748 35257 keller4 171 9435 0 . 649 6745 brock400 _ 2 400 59786 0 . 749 40738 MANN _ a9 45 918 0 . 927 5460 brock400 _ 3 400 59681 0 . 748 46785 MANN _ a27 378 70551 0 . 990 799525 brock400 _ 4 400 59765 0 . 749 54304 p _ hat300 - 1 300 10933 0 . 244 3321 c - fat200 - 1 200 1534 0 . 077 7734 p _ hat300 - 2 300 21928 0 . 489 31564 c - fat200 - 2 200 3235 0 . 163 26389 p _ hat300 - 3 300 33390 0 . 744 63390 c - fat200 - 5 200 8473 0 . 426 168200 p _ hat500 - 1 500 31569 0 . 253 4764 c - fat500 - 1 500 4459 0 . 036 10738 p _ hat500 - 2 500 62946 0 . 505 63870 c - fat500 - 2 500 9139 0 . 073 38350 p _ hat500 - 3 500 93800 0 . 752 122302 c - fat500 - 5 500 23191 0 . 186 205864 d1 - RTN 2418 9317 0 . 00319 4524 c - fat500 - 10 500 46627 0 . 374 804000 d3 - RTN 4755 26943 0 . 00238 5859 C125 . 9 125 6963 0 . 898 66248 d7 - RTN 6511 44615 0 . 00211 7424 C250 . 9 250 27984 0 . 899 96692 d15 - RTN 7965 62136 0 . 00196 7424 C500 . 9 500 112332 0 . 900 164953 d30 - RTN 10101 91803 0 . 00180 8147 hamming6 - 2 64 1824 0 . 905 32736 d66 - RTN 13308 148035 0 . 00167 10913 hamming6 - 4 64 704 0 . 349 396 SC - NIP - m - t1 991 4161 0 . 00848 343 hamming8 - 2 256 31616 0 . 969 800624 SC - NIP - r - t1 1393 56276 0 . 05804 25290 hamming8 - 4 256 20864 0 . 639 12360 SC - NIP - r - t2 1183 17776 0 . 02543 15188 Table A1 : Instances characteristics and lower bounds for the optimums , reported in Pullan ( 2008 ) . 25 Results for setting parameter q max , defining an upper bound for ω ( G ) . These upper bounds were calculated using the sequential elimination algorithm described in Gendron , Hertz , St - Louis ( 2008 ) with the DSATUR greedy procedure ( proposed by Brélaz ( 1979 ) ) that computes an upper bound on the chromatic number . These bounds were used in the tests conducted in Section 5 . The clique number ( ω ( G ) ) of the graph is also shown . Times are reported in seconds . Instances ω ( G ) q max times ( s ) Instances ω ( G ) q max times ( s ) brock200 _ 1 21 38 0 . 19 johnson8 - 2 - 4 4 5 0 . 00 brock200 _ 2 12 17 0 . 11 johnson8 - 4 - 4 14 14 0 . 00 brock200 _ 3 15 25 0 . 14 johnson16 - 2 - 4 8 13 0 . 02 brock200 _ 4 17 30 0 . 25 johnson32 - 2 - 4 16 31 2 . 23 brock400 _ 1 27 68 1 . 65 keller4 11 18 0 . 08 brock400 _ 2 29 69 1 . 72 MANN _ a9 16 18 0 . 01 brock400 _ 3 31 68 1 . 70 MANN _ a27 126 138 2 . 40 brock400 _ 4 33 70 1 . 75 p _ hat300 - 1 8 9 0 . 09 c - fat200 - 1 12 12 0 . 00 p _ hat300 - 2 25 30 0 . 33 c - fat200 - 2 24 24 0 . 01 p _ hat300 - 3 36 53 0 . 59 c - fat200 - 5 58 58 0 . 04 p _ hat500 - 1 9 14 0 . 37 c - fat500 - 1 14 14 0 . 01 p _ hat500 - 2 36 48 1 . 87 c - fat500 - 2 26 26 0 . 03 p _ hat500 - 3 50 80 3 . 88 c - fat500 - 5 64 64 0 . 12 d1 - RTN 10 10 0 . 34 c - fat500 - 10 126 126 0 . 46 d3 - RTN 18 18 1 . 95 C125 . 9 34 46 0 . 05 d7 - RTN 18 18 4 . 08 C250 . 9 44 79 0 . 43 d15 - RTN 18 22 6 . 51 C500 . 9 ≥ 57 147 5 . 77 d30 - RTN 21 27 11 . 85 hamming6 - 2 32 32 0 . 01 d66 - RTN 28 36 23 . 48 hamming6 - 4 4 5 0 . 00 SC - NIP - m - t1 9 9 0 . 08 hamming8 - 2 128 128 0 . 24 SC - NIP - r - t1 174 174 0 . 76 hamming8 - 4 16 17 0 . 28 SC - NIP - r - t2 121 121 0 . 17 Table A2 : Upper bounds for ω ( G ) , generated by the sequential elimination algorithm with the DSATUR procedure , described in Gendron , Hertz , St - Louis ( 2008 ) . The linear programming relaxation percent gaps are described in Table A3 . It reports the results taken over the DIMACS , RTN and SC class’s instances , using the models described in Sections 2 and 3 , and discussed in Section 5 . Lowest gaps are shaded in gray . ( % ) F1 based models F2 based models F3 based models F4 based models Instances F1 F11 F2 F21 F3 F31 F32 F4 F41 F42 F43 brock200 _ 1 1233 . 98 478 . 80 1233 . 98 478 . 80 1233 . 98 478 . 80 478 . 80 548 . 15 548 . 15 478 . 80 478 . 80 brock200 _ 2 1186 . 22 280 . 37 1186 . 22 280 . 37 1186 . 22 280 . 37 280 . 37 313 . 60 313 . 60 280 . 37 280 . 37 brock200 _ 3 1367 . 06 422 . 54 1367 . 06 422 . 54 1367 . 06 422 . 54 422 . 54 476 . 69 476 . 69 422 . 54 422 . 54 brock200 _ 4 1313 . 28 453 . 74 1313 . 28 453 . 74 1313 . 28 453 . 74 453 . 74 514 . 48 514 . 48 453 . 74 453 . 74 brock400 _ 1 2791 . 54 1048 . 67 2791 . 54 1048 . 67 2791 . 54 1048 . 67 - - - 1170 . 91 1170 . 91 1048 . 67 1048 . 67 brock400 _ 2 2439 . 39 921 . 44 2439 . 39 921 . 44 2439 . 39 921 . 44 921 . 44 1032 . 20 1032 . 20 921 . 44 921 . 44 brock400 _ 3 2078 . 21 766 . 24 2078 . 21 766 . 24 2078 . 21 766 . 24 766 . 24 858 . 28 858 . 28 766 . 24 766 . 24 brock400 _ 4 1837 . 76 688 . 03 1837 . 76 688 . 03 1837 . 76 688 . 03 688 . 03 773 . 56 773 . 56 688 . 03 688 . 03 c - fat200 - 1 32 . 53 15 . 57 32 . 53 15 . 57 32 . 53 15 . 36 15 . 36 67 . 80 67 . 50 15 . 36 15 . 36 26 c - fat200 - 2 48 . 00 34 . 68 48 . 00 34 . 68 48 . 00 34 . 65 34 . 65 100 . 93 100 . 93 34 . 65 34 . 65 c - fat200 - 5 46 . 82 30 . 59 46 . 82 30 . 59 46 . 82 30 . 58 30 . 58 77 . 89 77 . 89 30 . 58 30 . 58 c - fat500 - 1 34 . 31 16 . 25 34 . 31 16 . 25 34 . 31 16 . 18 16 . 18 68 . 32 67 . 36 16 . 18 16 . 18 c - fat500 - 2 32 . 84 15 . 35 32 . 84 15 . 35 32 . 84 15 . 33 15 . 33 66 . 97 66 . 75 15 . 33 15 . 33 c - fat500 - 5 45 . 24 27 . 10 45 . 24 27 . 10 45 . 24 27 . 05 27 . 05 87 . 71 87 . 70 27 . 05 - - - c - fat500 - 10 47 . 20 27 . 95 47 . 20 27 . 95 47 . 20 27 . 92 - - - 79 . 49 79 . 49 27 . 92 - - - C125 . 9 325 . 69 146 . 55 325 . 69 153 . 08 325 . 69 155 . 14 153 . 07 184 . 58 184 . 58 155 . 14 153 . 07 C250 . 9 800 . 94 410 . 13 800 . 94 410 . 13 800 . 94 410 . 13 410 . 13 502 . 58 502 . 58 410 . 13 410 . 13 C500 . 9 1913 . 36 - - - 1913 . 36 973 . 65 - - - - - - - - - 1139 . 76 1139 . 76 973 . 65 - - - hamming6 - 2 83 . 87 0 . 00 83 . 87 0 . 37 83 . 87 39 . 72 0 . 00 46 . 68 40 . 55 39 . 72 0 . 00 hamming6 - 4 816 . 67 157 . 53 816 . 67 157 . 53 816 . 67 157 . 53 157 . 53 183 . 84 161 . 43 157 . 53 157 . 53 hamming8 - 2 94 . 66 37 . 62 94 . 66 37 . 62 94 . 66 43 . 90 36 . 15 76 . 26 76 . 26 43 . 90 - - - hamming8 - 4 997 . 16 109 . 74 997 . 16 109 . 74 997 . 16 109 . 74 109 . 74 119 . 87 119 . 87 109 . 74 109 . 74 johnson8 - 2 - 4 485 . 94 134 . 38 485 . 94 134 . 38 485 . 94 134 . 38 134 . 38 141 . 67 134 . 38 134 . 38 134 . 38 johnson8 - 4 - 4 307 . 69 58 . 33 307 . 69 61 . 87 307 . 69 61 . 87 61 . 87 70 . 71 64 . 07 61 . 87 61 . 87 johnson16 - 2 - 4 1657 . 34 289 . 38 1657 . 34 289 . 38 1657 . 34 289 . 38 289 . 38 304 . 65 304 . 57 289 . 38 289 . 38 johnson32 - 2 - 4 4068 . 25 452 . 49 4068 . 25 452 . 49 4068 . 25 452 . 49 452 . 49 473 . 90 473 . 90 452 . 49 452 . 49 keller4 1409 . 41 321 . 66 1409 . 41 321 . 66 1409 . 41 321 . 66 321 . 66 351 . 07 351 . 07 321 . 66 321 . 66 MANN _ a9 217 . 27 56 . 92 217 . 27 73 . 78 217 . 27 101 . 46 73 . 78 106 . 08 101 . 77 101 . 46 73 . 78 MANN _ a27 224 . 56 93 . 33 224 . 56 93 . 33 - - - - - - - - - 121 . 41 121 . 41 93 . 33 93 . 33 p _ hat300 - 1 900 . 88 105 . 29 900 . 88 105 . 29 900 . 88 105 . 29 105 . 29 116 . 80 116 . 80 105 . 29 105 . 29 p _ hat300 - 2 603 . 28 144 . 55 603 . 28 144 . 55 603 . 28 144 . 55 144 . 55 173 . 15 173 . 15 144 . 55 144 . 55 p _ hat300 - 3 837 . 32 276 . 64 837 . 32 276 . 84 837 . 32 276 . 84 276 . 84 325 . 71 325 . 71 276 . 84 276 . 84 p _ hat500 - 1 1779 . 90 262 . 52 1779 . 90 262 . 52 1779 . 90 262 . 52 262 . 52 282 . 03 282 . 03 262 . 52 262 . 52 p _ hat500 - 2 855 . 02 216 . 85 855 . 02 216 . 85 855 . 02 216 . 85 216 . 85 250 . 71 250 . 71 216 . 85 216 . 85 p _ hat500 - 3 1135 . 01 357 . 55 1135 . 01 357 . 55 1135 . 01 357 . 55 - - - 408 . 96 408 . 96 357 . 55 - - - d1 - RTN 52 . 28 27 . 59 87 . 07 63 . 32 24 . 26 15 . 91 15 . 91 148 . 08 132 . 32 18 . 52 16 . 81 d3 - RTN - - - - - - 176 . 50 142 . 86 45 . 31 28 . 94 - - - 252 . 81 237 . 67 33 . 90 - - - d7 - RTN - - - - - - - - - - - - 26 . 22 17 . 17 - - - 190 . 67 178 . 19 19 . 60 - - - d15 - RTN - - - - - - - - - - - - 49 . 63 40 . 11 - - - 256 . 64 247 . 77 43 . 04 - - - d30 - RTN - - - - - - - - - - - - 67 . 23 58 . 02 - - - 299 . 49 288 . 16 61 . 23 - - - d66 - RTN - - - - - - - - - - - - 61 . 49 52 . 77 - - - 297 . 01 288 . 53 56 . 67 - - - SC - NIP - m - t1 21 . 57 13 . 09 49 . 90 49 . 89 41 . 60 36 . 20 36 . 20 148 . 40 138 . 68 41 . 31 36 . 30 SC - NIP - r - t1 0 . 00 0 . 00 0 . 67 0 . 03 0 . 62 0 . 00 - - - 2 . 42 0 . 86 0 . 00 - - - SC - NIP - r - t2 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 09 0 . 00 0 . 00 - - - Table A3 : Linear programming relaxation percent gaps using the models under discussion . Table A4 indicates the execution times ( in seconds ) for running the linear programming relaxation tests reported in Table A3 . Lowest times are shaded in gray . ( seconds ) F1 based models F2 based models F3 based models F4 based models Instances F1 F11 F2 F21 F3 F31 F32 F4 F41 F42 F43 brock200 _ 1 2 . 70 20 . 47 1 . 89 18 . 55 9 . 22 52 . 60 90 . 90 0 . 05 0 . 37 18 . 75 183 . 68 brock200 _ 2 1 . 95 9 . 02 1 . 61 7 . 47 2 . 99 6 . 94 17 . 64 0 . 03 0 . 09 3 . 84 18 . 67 brock200 _ 3 3 . 62 10 . 69 1 . 39 8 . 64 7 . 50 11 . 15 69 . 48 0 . 05 0 . 20 9 . 34 27 . 92 brock200 _ 4 3 . 31 17 . 19 1 . 50 12 . 17 7 . 94 34 . 04 106 . 78 0 . 06 0 . 31 14 . 70 67 . 02 brock400 _ 1 144 . 08 3986 . 33 20 . 25 1235 . 14 761 . 53 328 . 74 > 10800 0 . 19 2 . 28 617 . 83 10701 . 59 brock400 _ 2 46 . 68 544 . 88 20 . 76 584 . 58 592 . 10 770 . 47 3684 . 28 0 . 17 2 . 61 687 . 92 6903 . 89 brock400 _ 3 117 . 98 529 . 75 24 . 20 490 . 41 342 . 87 1424 . 43 7184 . 53 0 . 16 2 . 29 634 . 92 4481 . 72 brock400 _ 4 81 . 04 4694 . 13 21 . 78 525 . 22 126 . 14 482 . 32 2988 . 96 0 . 16 2 . 50 732 . 82 6316 . 07 c - fat200 - 1 0 . 11 0 . 33 0 . 06 0 . 17 0 . 19 1 . 48 14 . 07 0 . 01 0 . 01 0 . 50 3 . 71 c - fat200 - 2 0 . 44 4 . 46 0 . 25 6 . 58 3 . 29 7 . 44 45 . 35 0 . 01 0 . 06 2 . 20 10 . 06 c - fat200 - 5 1 . 22 20 . 16 1 . 70 14 . 62 8 . 08 92 . 29 390 . 25 0 . 30 0 . 30 43 . 70 680 . 34 c - fat500 - 1 1 . 83 4 . 51 0 . 56 1 . 73 0 . 73 3 . 53 81 . 95 0 . 05 0 . 09 1 . 09 60 . 56 27 c - fat500 - 2 6 . 13 35 . 65 2 . 14 10 . 38 3 . 85 60 . 78 594 . 60 0 . 19 0 . 20 13 . 20 335 . 20 c - fat500 - 5 17 . 02 336 . 60 5 . 69 213 . 71 255 . 59 1110 . 93 3068 . 42 1 . 76 0 . 90 385 . 99 > 10800 c - fat500 - 10 53 . 45 8335 . 41 15 . 13 5795 . 73 125 . 52 7988 . 94 o . m . 6 . 83 3 . 59 4624 . 35 > 10800 C125 . 9 0 . 70 4 . 96 0 . 92 5 . 99 2 . 56 11 . 25 45 . 51 0 . 03 0 . 20 6 . 72 78 . 97 C250 . 9 31 . 01 165 . 95 32 . 37 225 . 72 32 . 09 318 . 15 785 . 87 0 . 09 1 . 40 132 . 57 3650 . 70 C500 . 9 875 . 10 > 10800 110 . 56 6850 . 00 o . m . o . m . o . m . 0 . 59 13 . 29 3152 . 02 o . m . hamming6 - 2 0 . 03 0 . 92 0 . 02 0 . 50 0 . 19 0 . 41 16 . 90 0 . 01 0 . 08 0 . 23 7 . 40 hamming6 - 4 0 . 03 0 . 03 0 . 03 0 . 03 0 . 03 0 . 01 0 . 01 0 . 00 0 . 00 0 . 00 0 . 02 hamming8 - 2 1 . 03 174 . 61 215 . 17 532 . 17 69 . 03 1064 . 07 7021 . 40 0 . 13 2 . 00 300 . 82 > 10800 hamming8 - 4 10 . 40 43 . 91 5 . 55 22 . 03 23 . 21 18 . 24 35 . 69 0 . 05 0 . 22 9 . 91 25 . 21 johnson8 - 2 - 4 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 0 . 00 johnson8 - 4 - 4 0 . 12 0 . 14 0 . 08 0 . 14 0 . 23 0 . 20 0 . 41 0 . 01 0 . 05 0 . 13 0 . 42 johnson16 - 2 - 4 0 . 56 0 . 81 0 . 42 0 . 47 1 . 37 0 . 70 0 . 64 0 . 01 0 . 11 0 . 83 1 . 01 johnson32 - 2 - 4 488 . 20 566 . 91 74 . 86 503 . 67 1045 . 71 1389 . 19 4414 . 89 0 . 92 3 . 13 1108 . 61 3082 . 47 keller4 3 . 07 5 . 55 4 . 56 5 . 60 3 . 43 4 . 37 24 . 94 0 . 02 0 . 09 4 . 59 17 . 74 MANN _ a9 0 . 05 0 . 06 0 . 05 0 . 06 0 . 06 0 . 06 0 . 69 0 . 00 0 . 02 0 . 03 0 . 23 MANN _ a27 106 . 42 10420 . 95 538 . 47 5040 . 16 o . m . o . m . o . m . 0 . 39 6 . 04 1515 . 19 9043 . 16 p _ hat300 - 1 6 . 18 20 . 64 3 . 28 7 . 49 6 . 79 3 . 29 28 . 98 0 . 01 0 . 05 2 . 67 18 . 10 p _ hat300 - 2 11 . 22 135 . 52 9 . 42 55 . 15 29 . 33 105 . 02 528 . 09 0 . 11 0 . 48 58 . 20 495 . 46 p _ hat300 - 3 15 . 29 188 . 06 10 . 05 206 . 76 189 . 88 498 . 21 1808 . 05 1 . 50 1 . 04 184 . 70 2834 . 72 p _ hat500 - 1 46 . 61 1264 . 04 27 . 24 120 . 87 68 . 09 95 . 58 1153 . 28 0 . 19 0 . 52 98 . 23 285 . 01 p _ hat500 - 2 77 . 91 3380 . 70 37 . 81 961 . 25 544 . 63 2144 . 83 4565 . 31 0 . 30 2 . 17 740 . 44 6870 . 27 p _ hat500 - 3 144 . 44 6612 . 63 59 . 05 3515 . 62 783 . 53 2624 . 58 o . m . 0 . 34 5 . 38 1418 . 31 > 10800 d1 - RTN 16 . 54 46 . 50 18 . 55 11 . 11 0 . 47 5 . 07 84 . 66 0 . 05 0 . 22 1 . 72 37 . 10 d3 - RTN o . m . o . m . 261 . 10 115 . 47 5 . 38 67 . 38 o . m . 0 . 17 2 . 75 24 . 37 o . m . d7 - RTN o . m . o . m . o . m . o . m . 15 . 23 135 . 60 o . m . 0 . 31 2 . 59 46 . 54 o . m . d15 - RTN o . m . o . m . o . m . o . m . 63 . 52 341 . 56 o . m . 0 . 50 5 . 62 1142 . 29 o . m . d30 - RTN o . m . o . m . o . m . o . m . 238 . 81 564 . 02 o . m . 1 . 06 10 . 78 1365 . 63 o . m . d66 - RTN o . m . o . m . o . m . o . m . 1015 . 68 2631 . 75 o . m . 1 . 61 73 . 37 2186 . 73 o . m . SC - NIP - m - t1 5 . 23 8 . 46 0 . 83 0 . 39 0 . 28 0 . 78 11 . 75 0 . 03 0 . 09 0 . 44 4 . 35 SC - NIP - r - t1 16 . 29 34 . 99 79 . 56 365 . 15 36 . 32 3621 . 17 > 10800 0 . 64 268 . 66 778 . 37 o . m SC - NIP - r - t2 3 . 82 1 . 98 9 . 02 12 . 93 7 . 72 13 . 56 132 . 98 0 . 17 2 . 75 10 . 34 > 10800 Table A4 : CPU times ( in seconds ) associated to the linear programming relaxation tests reported in Table A3 . Table A5 reports the execution times ( in seconds ) for running the branch - and - bound using the models under discussion . Column with heading “Opt . ” represents the optimum solution value returned by the branch - and - bound . For the DIMACS instances , tests were only conducted for the graphs having no more than 300 nodes , and at most 10000 nodes for the RTN class instances . Lowest times are shaded in gray . ( seconds ) F1 based models F2 based models F3 based models F4 based models Instances Opt . F1 F11 F2 F21 F3 F31 F4 F41 F42 brock200 _ 1 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 brock200 _ 2 6542 9464 . 24 9489 . 00 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 brock200 _ 3 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 brock200 _ 4 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 c - fat200 - 1 7734 25 . 23 47 . 85 9 . 14 15 . 10 23 . 67 30 . 93 4 . 37 3 . 87 15 . 23 c - fat200 - 2 26389 46 . 92 190 . 31 33 . 26 186 . 50 537 . 95 1340 . 41 o . m . 601 . 10 239 , 80 c - fat200 - 5 168200 155 . 30 717 . 99 3507 . 56 3960 . 35 > 10800 > 10800 o . m . > 10800 > 10800 C125 . 9 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 C250 . 9 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 28 hamming6 - 2 32736 1 . 33 0 . 30 16 . 96 0 . 72 > 10800 1103 . 26 o . m . 24 . 63 2381 . 12 hamming6 - 4 396 1 . 97 2 . 96 5 . 80 7 . 96 14 . 20 17 . 43 6 . 30 2 . 40 6 . 18 hamming8 - 2 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . o . m . > 10800 hamming8 - 4 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . o . m . > 10800 johnson8 - 2 - 4 192 0 . 16 0 . 31 0 . 20 0 . 32 1 . 22 0 . 81 0 . 33 0 . 14 0 . 47 johnson8 - 4 - 4 6552 20 . 84 2 . 34 47 . 49 65 . 86 > 10800 474 . 87 o . m . 42 . 49 175 . 80 johnson16 - 2 - 4 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 keller4 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 MANN _ a9 5460 9 . 39 18 . 56 19 . 22 28 . 24 o . m . > 10800 o . m . 1852 . 50 8586 . 90 p _ hat300 - 1 3321 1678 . 99 > 10800 1273 . 05 > 10800 > 10800 > 10800 o . m . 1309 . 30 > 10800 p _ hat300 - 2 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . o . m . > 10800 p _ hat300 - 3 - - - > 10800 > 10800 > 10800 > 10800 > 10800 > 10800 o . m . > 10800 > 10800 d1 - RTN 4524 o . m . o . m . o . m . o . m . 118 . 95 58 . 09 79 . 48 47 . 45 14 . 68 d3 - RTN 5859 o . m . o . m . o . m . o . m . 5357 . 32 > 10800 o . m . > 10800 > 10800 d7 - RTN 7424 o . m . o . m . o . m . o . m . 1216 . 25 > 10800 o . m . > 10800 o . m . d15 - RTN - - - o . m . o . m . o . m . o . m . o . m . o . m . o . m . o . m . o . m . SC - NIP - m - t1 343 144 . 78 331 . 84 17 . 36 30 . 86 10 . 86 13 . 49 9 . 80 48 . 98 12 . 34 SC - NIP - r - t1 25290 63 . 26 80 . 51 > 10800 154 . 78 159 . 06 > 10800 22 . 87 212 . 77 3724 . 35 SC - NIP - r - t2 15188 9 . 39 13 . 82 6 . 33 7 . 30 147 . 20 100 . 81 0 . 95 4 . 15 11 . 73 Table A5 : Execution times ( in seconds ) of the branch - and - bound using the models under discussion . Table A6 provides the same information as in Table 5 but considering a different strategy for variable selection within the branch - and - bound , and the automatic generation of global cuts provided by CPLEX for strengthening the root node of the branch - and - bound tree . The new strategy for variable selection involves the so called “Strong branching” , provided by the MIP solver of CPLEX . The table only focuses on the RTN and NIP classes , to which improvements were observed . ( seconds ) F1 based models F2 based models F3 based models F4 based models Instances Opt . F1 F11 F2 F21 F3 F31 F4 F41 F42 d1 - RTN 4524 586 . 69 376 . 09 > 10800 > 10800 17 . 47 21 . 95 37 . 13 42 . 31 36 . 04 d3 - RTN 5859 o . m . o . m . > 10800 o . m . 2119 . 37 > 10800 8786 . 74 3125 . 81 1565 . 55 d7 - RTN 7424 o . m . o . m . o . m . o . m . 799 . 36 > 10800 6464 . 20 5716 . 41 2243 . 51 d15 - RTN - - - o . m . o . m . o . m . o . m . o . m . o . m . > 10800 > 10800 > 10800 SC - NIP - m - t1 343 33 . 31 40 . 34 1729 . 58 1784 . 31 7 . 88 12 . 09 21 . 87 12 . 01 5 . 77 SC - NIP - r - t1 25290 63 . 29 81 . 46 6832 . 22 7388 . 88 161 . 32 > 10800 8 . 16 195 . 14 3743 . 04 SC - NIP - r - t2 15188 9 . 19 13 . 98 6 . 25 7 . 52 142 . 54 101 . 02 0 . 70 4 . 07 11 . 81 Table A6 : Branch - and - bound execution times ( in seconds ) using branch on variable with maximum infeasibility strategy and the automatic generation of global cuts , for the RTN and NIP classes . Table A7 presents MEWC problem optimum solutions attained for the RTN class instances . d1 - RTN Attack New _ York Pentagon Plane Tuesday United _ States Washington World _ Trade _ Ctr d3 - RTN Attack New _ York Pentagon Plane Tuesday United _ States Washington World _ Trade _ Ctr Official People Thousand d7 - RTN Attack New _ York Pentagon Plane Tuesday United _ States Washington World _ Trade _ Ctr Official People Thousand Hijack Miss Tower Table A7 : MEWC problem optimum solutions for the RTN class instances . 29 Table A8 presents MEWNC problem optimum solutions attained for the RTN class instances . d1 - RTN Attack People Pres _ Bush Tuesday United _ States Pentagon Plane Washington d3 - RTN Attack People Pres _ Bush Tuesday United _ States Pentagon City Office Security Wednesday World d7 - RTN Attack People Pres _ Bush Tuesday United _ States Afghanistan American Country Day Official State War Washington Table A8 : MEWNC problem optimum solutions for the RTN class instances . References - Akutsu , T . , Hayashida , M . , Tomita , E . , Suzuki , J . I . , & Harimoto , K . , 2004 . Protein threading with profiles and constraints . Proceedings of the Fourth IEEE Symposium on Bioinformatics and Bioengineering ( BIBE 2004 ) , pp . 537 - 544 . - Alidaee B . , Glover , F . , Kochenberger , G . , & Wang , H . , 2007 . Solving the maximum edge weight clique problem via unconstrained quadratic programming . European Journal of Operational Research 181 , 592 - 597 . - Batagelj V . , & Mrvar A . / http : / / vlado . fmf . uni - lj . si / pub / networks / pajek / S , August 2009 . - Bomze , I . M . , Budinich , M . , Pardalos , P . M . , & Pelillo , M . , 1999 . The maximum clique problem . In : Du , D . Z . , Pardalos , P . M . ( Eds . ) , Handbook of combinatorial optimization ( suppl . Vol . A ) . Kluwer , Dordrecht , pp . 1 - 74 . - Brélaz , D . , 1979 . New methods to color the vertices of a graph . Communications of the ACM 22 ( 4 ) , 251 - 256 . - Brown , J . B . , Dukka Bahadur , K . C . , Tomita , E . , & Akutsu , T . , 2006 . Multiple methods for protein side chain packing using maximum weight cliques . Genome Informatics Series 17 ( 1 ) , 3 - 12 . - Cavique , L . , 2007 . A scalable algorithm for the market basket analysis . Journal of Retailing and Consumer Services 14 , 400 - 407 . - Corman , S . , Kuhn , T . , McPhee , & R . , Dooney , K . , 2002 . Studying complex discursive systems : centering resonance analysis of organizational communication . Human Communication Research 28 ( 2 ) , 157 – 206 . - De Amorim , S . G . , Barthélemy , J . P . , & Ribeiro , C . C . , 1992 . Clustering and clique partitioning : simulated annealing and tabu search approaches . Journal of Classification 9 ( 1 ) , 17 - 41 . - Della Croce , F . , and Tadei , R . , 1994 . A multi - KP modeling for the maximum - clique problem . European Journal of Operational Research 73 , 555 - 561 . - Dijkhuizen , G . , & Faigle , U . , 1993 . A cutting - plane to the edge - weighted maximal clique problem . European Journal of Operational Research 69 , 121 - 130 . 30 - Dukka Bahadur , K . C . , Tomita , E . , Suzuki , J . I . , Horimoto , K . , & Akutsu , T . , 2005 . Clique based algorithms for protein threading with profiles and constraints . Proceeding of the 3rd Asia Pacific Bioinformatics Conference ( APBC2005 ) , pp . 51 - 64 . - Förster , J . , Famili , I . , Fu , P . , Palsson , B . Ø . , & Nielsen , J . , 2003 . Genome - scale reconstruction of the Saccharomyces cerevisiae metabolic network . Genome Research ( 13 ) , 244 - 253 . - Gendron , B . , Hertz , A . , & St - Louis , P . , 2008 . A sequential elimination algorithm for computing bounds on the clique number of a graph . Discrete Optimization 5 ( 3 ) , 615 - 628 . - Hunting , M . , Faigle , U . , & Kern , W . , 2001 . A Lagrangian relaxation approach to the edge - weighted clique problem . European Journal of Operational Research 131 ( 1 ) , 119 - 131 . - Johnson , D . , & Trick , M . ( Eds . ) , 1996 . Cliques , coloring , and satisfiability : Second DIMACS Implementation Challenge . DIMACS Series in Discrete Mathematics and Theoretical Computer Science , Vol . 26 . American Mathematical Society , Providence , RI . - Karp , R . M . , 1972 . Reducibility among combinatorial problems . In : Miller , R . E . , Thatcher , J . W . ( Eds . ) , Complexity of computer computations . Plenum Press , New York , pp . 85 - 103 . - Klotz , E . , & Newman , M . , 2013 . Practical guidelines for solving difficult mixed integer linear programs . Surveys in Operations Research and Management Science 18 , 18 - 32 . - Macambira , E . M . , & de Souza , C . C . , 2000 . The edge - weighted clique problem : valid inequalities , facets and polyhedral computations . European Journal of Operational Research 123 ( 2 ) , 346 - 371 . - Martins P . , 2010 . Extended and discretized formulations for the maximum clique problem . Computers & Operations Research 37 , 1348 - 1358 . - Martins , P . , 2012 . Cliques with maximum / minimum edge neighborhood and neighborhood density . Computers & Operations Research 39 , 594 - 608 . - Mascia , F . , Cilia , E . , Brunato , M . , & Passerini , A . , 2010 . Predicting structural and functional sites in proteins by searching for maximum - weight cliques . Proceedings of the Twenty - Fourth AAAI Conference on Artificial Intelligence ( AAAI - 10 ) , pp . 1274 - 1279 . - Mehrotra , A . , & Trick , M . A . , 1998 . Cliques and clustering : A combinatorial approach . Operations Research Letters 22 ( 1 ) , 1 - 12 . - Padberg , M . , 1989 . The Boolean quadric polytope : some characteristics , facets and relatives . Mathematical Programming 45 ( 1 ) , 139 - 172 . - Park K . , Lee , K . , & Park , S . , 1996 . An extended formulation approach to the edge - weighted maximal clique problem . European Journal of Operational Research 95 , 671 - 682 . - Pullan , W . , 2008 . Approximating the maximum vertex / edge weighted clique using local search . Journal of Heuristics 14 ( 2 ) , 117 - 134 . - Sørensen , M . M . , 2004 . New facets and a branch - and - cut algorithm for the weighted clique problem . European Journal of Operational Research 154 ( 1 ) , 57 - 70 .