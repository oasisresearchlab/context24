NoteCards in a Nutshell CHI + GI 1987 Frank G . Halasz Thomas P . Moran Randall H . Trigg Intelligent Systems Laboratory Xerox Palo Alto Research Center 3333 Coyote Hill Rd . Palo Alto , CA 94304 USA Abstract NoteCards is an extensible environment designed to help people formulate , structure , compare , and manage ideas . NoteCards provides the user with a " semantic network " of electronic notecards interconnected by typed links . The system provides tools to organize , manage , and display the structure of the network , as well as a set of methods and protocols for creating programs to manipulate the information in the network . NoteCards is currently being used by more than 50 people engaged in idea processing tasks ranging from writing research papers through designing parts for photocopiers . In this paper we briefly describe NoteCards and the conceptualization of idea processing tasks that underlies its design . We then describe the NoteCards user community and several prototypical NoteCards applications . Finally , we discuss what we have learned about the system ' s strengths and weaknesses from our observations of the NoteCards user community . 1 . Introduction NoteCards is a computer environment designed to help people work with ideas . Its users are authors , , ' ~ searchers , designers , and other intellectual laborers engaged in analyzing information , constructing models , formulating arguments , designing artifacts , and generally processing ideas . The system provides these users with a variety of tools for collecting , representing , managing , interrelating , and communicating ideas . NoteCards is based on the notion that creative intellectual work is a hand - craft , a uniquely human skill that cannot be easily automated . Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish , requires a fee and / or specific permission . @ 1987 ACM - 0 - 89791 - 213 - 6 / 87 / 0004 / 0045 $ 00 . 75 NoteCards provides the user with a " semantic network " of electronic notecards interconnected by typed links . This network serves as a medium in which the user can represent collections of related ideas . It also functions as a structure for organizing , storing , and retrieving information . The system provides the user with tools for displaying , modifying , manipulating , and navigating through this network . It also includes a set of methods and protocols for creating programs to manipulate the information in the network . NoteCards is similar to hypertext systems such as Intermedia ( Yankelovitch , Meyrowitz & van Dam , 1985 ) and Neptune ( Delisle & Schwartz , 1986 ) . These systems focus on education and software management applications , respectively . In contrast , NoteCards is designed as a general purpose idea processing environment . Augment ( Engelbart , 1984 ) has a broadly similar goal , but differs significantly from NoteCards in being outline - based rather than network - based . 2 . The Nature of Idea Processing The goal of all idea processing tasks is to move from a chaotic collection of unrelated ideas to an integrated , orderly interpretation of the ideas and their interconnections . Analyzing one ' s business competitors is a prototypical example . The task begins with the analyst extracting scraps of information about competitors from available sources . The collected information must be organized and filed away for subsequent use . More importantly , the collected information needs to be analyzed . The relationships between the various ideas have to be discovered and represented . Multiple analyses should be developed in order to understand the significance of the collected information . Once these analyses are complete , the analyst composes and writes a document or presentation that communicates the discovered information and its significance . Idea processing is a convolution of several different activities that can be roughly divided into three phases : acquisition , analysis , and exposition . Acquisition involves the capture or extraction of ideas 4S CHI + GI 1 987 and information from sources of various sorts , e . g . , taking notes from a document or recording the ideas produced during brainstorming . Analysis involves discovering the significance of ideas , in particular discovering the connections and relationships among ideas . Developing legal arguments based on case research is an example . Exposition involves communicating ideas and analyses in the form of reports , talks , etc . The design of NoteCards was determined by three critical characteristics common to all idea processing tasks . First , all idea processing is based on the reification of ideas . Idea processing in NoteCards progresses through the manipulation of tangible objects that represent or embody ideas and their interconnections . Second , real - world idea processing tasks require manipulating moderately large amounts of information . Support for idea processing presupposes support for the task of managing this information . Thus , NoteCards provides storage and retrieval of idea structures as well as tools to organize , maintain , and exsmine the structure of the stored information . Third , idea processing is an inherently variable activity . Each specific idea processing task requires specialized representations and tools for manipulating and analyzing idea structures . Moreover as a user progresses through a given task , the character and requirements of the task often change . Thus , NoteCards is a tailorable system that includes an extensive set of protocols and methods which can be used to make modifications to the system . 3 . Basic Concepts The basic construct in NoteCards is a semantic network composed of notecards connected by typed links . Each notecard contains an arbitrary amount of information embodied in text , graphics , images , or some other editable substance . Links are used to represent binary connections between cards . NoteCards provides two specialized types of cards , Browsers and FileBoxes , that help the user to manage networks of cards and links . NoteCards is implemented within the Xerox Lisp programming environment . 3 . 1 Four basic objects A notecard is an electronic generalization of the 3x5 paper notecard . Each notecard contains an arbitrary amount of some editable " substance " such as a piece of text , a structured drawing , or a bitmap image . Each card also has a title . Although the intent is that each card should contain about the same amount of information as a typical 3x5 card , the system imposes no constraints on the size of a notecard . On the screen , cards are displayed using standard Xerox Lisp windows as shown in Figure 1 . Every notecard can be " edited " , i . e . , retrieved from the database and displayed on the screen in an editor window that provides the user with an opportunity to modify the card ' s substance . There are various types of notecards , differentiated ( in part ) by the nature of the substance ( e . g . , text or graphics ) that they contain . In addition to a set of standard card , _ ; apaDilil les ol New U ~ ss ~ leo : ~ : ~ : ~ . , . ~ , ~ : ! : . . : . : ~ + . . ; : , : ~ . : , , . i ! ~ Map : U iss i le Ran qes : ' . : il : ~ i ) i ii : i : : ! i : . i : i : ~ ii . : . : : . ~ ~ : / : ; : . Even though the weapons in question replace older weapons ( the Pershing IA and the Vulcan bomber ) , both are capable of more . destruction faster than their predecessors . This is the result of new radar guidance systems , wilh new levels of accuracy . Also have sufficient range to rrJake vulnerable installations and cities in tE ~ e ' ~ A / e : 3tern US : : 3R , in the case of the P 2 , within a matter of minutes . ( p , 371 ) See I G " k ' " ~ " of Pershing , , hmv ' * The new American Pershing il missile , fitted with a radar - heming warhead , is designed to be even more accurate . . As it falls back to earth this compares a radar image of the target with an image stored in i ! ! i its c : on - lpuler memory . It : 3houlld then be able to sdjust its flight path so as to hit ils target with pin - point accuracy after : 9 journey of 1 , 600 kilometers . " ( p . 13 ) See . ( _ U ~ ecified ) Tomahawk Characteristics I Figure 1 : Example notecards with embedded link icons . 46 types , NoteOards includes a facility for adding new types of cards , ranging from small modifications to existing card types ( e . g . , Text - based forms ) to cams based on entirely different substances ( e . g . , animation cards ) . Links are used to interconnect individual notecards into networks or structures of related cards . Each link is a typed , directional connection between a source card and a destination card . The type of a link is a user - chosen label specifying the nature of the relationship being represented . In general , it is up to each user to decide how to take advantage of these link types to help organize a network ofnotecards . The links are anchored at a particular location in the substance of their source card by a link icon but point to their destination card as a whole . Link icons optionally display the type / title of their destination card and / or the type of the link . Clicking in the link icon with the left mouse button traverses the link , i . e . , retrieves the destination card of the link and displays it on the screen ready to be read or edited . Figure 1 shows two cards , each containing two link icons . A browser is a notecard that contains a CHI + GI structural diagram of a network of notecards . Figure 2 shows a Browser card for a network composed of 8 cards and 8 links . The cards from this network are represented in the Browser by their title displayed in a box . The links in the network are represented by edges between the boxed titles . Different dashing styles distinguish different types of links . The diagrams in Browser cards are computed for the user by the system . Once created , Browsers function like standard notecards . The boxed titles representing cards in the Browser are in fact link icons representing a link between the Browser and the referenced card . By traversing this link , the user can easily retrieve the referenced card . Browsers support two levels of editing . First , the user can edit the underlying structure of a network of notecards by carrying out operations on the nodes and edges in the Browser . Second , the user can add and delete nodes and edges in the Browser diagram without making corresponding changes to the underlying NoteCards structures in order to experiment with and compare potential network organizations . 1987 Capabilities of New Missiles ) I Guidance of Pershing il I I Smith , " Missile Deployments " I Tomahawk Char ~ r ~ stgs - } " - - Turocr , Arms Race I Cruise Guidance System I I Treverton , Nuclear Weapons in Europe I Support - - SoMrce . . . . . . Create Card & Node Create Lint < & Edge ~ Delete ( Card & Node Delete Link & Edge Add Label Add Node Add Edge Remove Node Remove Edge Move Node Label Smaller Label Larger < - ) Shade FILE BOXES r I I I ~ l FILE BO . . k ' ES I US TNF Missiles I I Soviet TNF Missiles I I Third - Country Nuclear NOTE CARDS US & Soviet TNF ' s I Map : Missile Ranges I FILE BOXES & I Pershing II characteristics I I GLCM characteristics I NOTE CARDS I Capabilities of New Missiles I US Controls New Missiles I I Missile Numbers NOTE CARDS Guidance of Pershing II J Pershing II Speed Accuracy of Pershing II I Origins of Pershing II I Range Increases on Pershing I Pershing 2 Basing in BRO I Pershing Capabilities I USSR Pershing Range Claim Figure 2 : Example Browser card ( top ) and FileBox Cards . 47 CHI - t - GI 1 9 8 7 FileBoxes are specialized cards that can be used to organize or categorize large collections of notecards . A FileBox is a card in which other cards , including other FileBoxes , can be filed . Figure 2 shows three FileBoxes in addition to the Browser . NoteCards requires that every notecard ( including FileBoxes ) must be filed in one or more FileBoxes and that the FileBox structure form a true hierarchy ( i . e . , a directed acyclic graph ) . Filing is implemented using two system - supported link types . FileBoxes were designed to help users manage large networks of interlinked notecards by encouraging them to use hierarchical category structures for efficient storage and retrieval of cards independently of their network interconnections . 3 . 2 Interacting with NoteCards Navigation is the primary means for accessing information in NoteCards . The user moves through the network by following links from card to card , deciding at each step which link ( s ) to traverse next based on the information localized in the link icons ( destination titles , link types , etc . ) as well as in the cards displayed on the screen . Alternatively , the user can create an overview Browser for some subnetwork and traverse the links from the Browser to the referenced cards . NoteCards also provides a limited search facility that can locate all cards matching some user - supplied specification ( e . g . , a particular string in the card ' s title or text ) . All of the information relevant to a network of cards and links is stored in a structured file called a NoteFile , the details of which are transparently managed for the user by the system . A single user may simultaneously access any number of NoteFiles , but links cannot be made across NoteFiles . The NoteCards user interface is mouse - and menu - based . Operations are initiated either by direct manipulation or by choosing commands from menus associated with the various icons and windows on the screen . Whenever possible specification of objects is done deictically , with the user pointing to the referent on the screen with the mouse . Beyond these generalities , the NoteCards user interface incorporates a diversity of specific interaction styles . NoteCards was implemented on top of a variety of existing Xerox Lisp packages , each of which incorporates its own unique style of user interaction and presentation graphics . Although NoteCards attempts to minimize the differences , it has inherited much of the diversity of these underlying Lisp packages . 3 . 3 Tailoring NoteCards NoteCards is fully integrated into the Xerox Lisp programming environment . It includes a widely used programmer ' s interface consisting of over 100 Lisp functions that allow the user to create new types of notecards , develop programs that monitor or process a network of notecards , integrate Lisp programs ( e . g . , an animation editor ) into the NoteCards environment , and / or integrate NoteCards into another Lisp - based environment ( e . g . , an expert system ) . The progrAn ~ rner°s interface is designed to accommodate both small modifications such as changing the way a card is displayed and large system developments such as integrating NoteCards as a front - end to an expert system . There is some degree of ( non - programming ) user tailorability in NoteCards as well . The system includes a large set of parameters that users can set to tune the exact behavior of the system ( e . g . , how links are displayed or the default size of notecards ) . In addition , users often create template cards or structures of cards that can be copied to create instances of the template . Extending user tailorability is a current focus of NoteCards research . 4 . NoteCards in Use From its inception , the design and development of NoteCards has been driven by the needs of its user community . As of this writing , there are over 70 " registered " NoteCards users within Xerox . At least 25 of these are serious NoteCards users , doing real work in their NoteFiles at least once a week . There are , in addition , an undetermined number of users at various university , government , and industrial sites outside Xerox . This user community has provided invaluable feedback on the strengths and weaknesses of NoteCards as applied to a variety of tasks including document authoring , legal , scientific , and public - policy argumentation , design and development of instructional materials , design and analysis of copier parts , and competitive market analysis . Perhaps the most common use of NoteCards is as a database for storing personal information such as as notes to oneself , clippings from electronic mail messages , quick ideas " jotted down " , sections of a paper in progress , etc . The following sections describe a few typical NoteCards applications in order to illustrate how the system can be used to support idea structuring and generic authoring . These examples cannot capture the diversity of existing NoteCards uses , but they do demonstrate how the system can be used to support interesting real - world tasks . 4 . 1 Authoring a public policy paper A key participant in the early development of NoteCards was a history graduate student who used the system to research and write a 25 - page paper critically examining NATO ' s recent decision to place missiles in Europe . Many of NoteCards ' s features were developed and refined in response to the feedback derived from his project . Figure 3 shows a Browser of the FileBox hierarchy from the NoteFile created during this project . The author made a habit of keeping this Browser on his screen at all times ( albeit often " shrunk " to an icon ) as a way of speeding up the 48 process of filing and accessing cards . This hierarchy was made up of 40 FileBoxes and contained 268 ( non - FileBox ) cards . The cards in Figure 1 are taken from this hierarchy . In general , cards stored in the hierarchy contain a short ( average of about 100 words ) quote or paraphrase taken from an article or book . Every card has a Source link to a bibliography card describing its source . About half of the cards have additional links embedded in their substance . As a rule , these were See or Unspecified links and were placed at the end of the card ' s text preceded by the word " See " . There are also a few dozen Support , Argument , and Comment links between cards , although these links do not appear to function any differently than the See and Unspecified links . The author used this FileBox hierarchy primarily as a filing structure that insured easy access to information as it was needed . The structure of the paper he wrote only vaguely reflected the structure of his FileBox hierarchy , suggesting that he organized the paper outside the context of NoteCards . Although he created links between the non - FileBox cards , he did not appear to use these links while outlining and writing the paper ( Monty & Moran , 1986 ) . 4 . 2 Using links in competitive argumentation The writing project described above involved relatively little analysis of the information that was being organized using NoteCards . In contrast , Kurt CHI + GI VanLehn has been using NoteCards as a workbench for continuing his competitive argumentation analysis of the study of human skill acquisition ( VanLehn , 1986 ) . VanLehn encoded the contents of his PhD thesis ( VanLehn , 1983 ) into NoteCards . The sections of the thesis document were already structured as a breadth - first traversal of a four - level argument tree whose constituents were twenty major issues , three to seven competing hypotheses for each issue , a number of support / rebuttal arguments for each hypothesis , and a set of supporting facts for each argument . VanLehn ' s main goal was to compare the competing hypotheses for each major issue by examining their underlying arguments . For his task , VanLehn invented the matrix summary card as shown in Figure 4 . The summary card is a matrix of links providing an overview of the information relevant to the evaluation of a set of competing hypotheses . Each column in the matrix represents a fact or feature about the world , e . g . , the result of an experimental study . At the top of each column is a link to a card describing the fact or feature . Each row in the matrix represents one of the competing hypotheses . On the right end the row is a link to a card describing the hypothesis . In each cell of the matrix is a + ( or - - or 0 ) link to an argument card containing a short explanation of how the fact represented by the cell ' s column supports ( or rebuts , or is irrelevant to ) the hypothesis represented by the cell ' s row . Using a matrix card , 1987 : : . ' : ' ~ 6 . . ~ . = " - ' ~ # ~ % = ~ " . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ~ ~ ~ l . . . . . ~ . ~ . . . . . . . . . . ; : . : . ~ : . : . : . : . : . : . . . . . . . . . . . . . . . . : . . ~ . ~ . ~ . ~ . ~ . ~ . ~ . ~ . ~ . . . . ~ . ~ . ~ . ~ . ~ . ~ . ~ . ~ . : . ~ . . . ~ . . . . ~ . . . . . . . . . . : . : . . . . . . . . . . . . . . . . . . . . . . : . . . . : . . . . . . . . . . . . . . . . : . : . . . . : . . . . . . . : . . . . ~ . . . . . . . . . . . . : . : . . . . ~ . . . : . . . . . . . : . ~ . . . . : : ~ : . = : : : ~ : = = : : ~ . . . . . . . . . , : . . . . ~ . . . : ~ : . : ~ . . . . ~ . . ~ . . . . . ~ . . . . . , . . . . . ~ . . . ~ . : ~ . . . . . . . . . . . . . . . ~ ' ; i ~ / ~ / ~ / ~ / " ' / ! ~ ii ~ . . . . . . . . . . ~ { { l ~ - ~ . N . O _ F . r . ~ Use Prnposi , ) { Cr | tidsms of ' No First Use J . { ProoosAIs rer TNF Chanoe I ~ " r - - - - ' " ~ ' - ' - " - ' ~ - { Nucle4r Free Zone Propos41 { / / { Ortgies of NATO Doctrir ~ e { / I TNF Doctrine i ~ _ I ~ . T ~ _ ~ _ . ~ ~ _ _ _ _ ~ ~ P ~ a ~ f ~ C0 . . . . ~ | onal Strengthenl ~ 9 { \ ~ k ' ' ~ ' ~ ' " ~ ' ~ " ~ " " ~ " ~ ~ . ~ \ , . . . . . . . . . . . . . . , " ~ Soviet TNE Ooctrioe { { Ori ~ es of Soviet Doctrine { Re ~ cticn to Deployment Decision in NAIO Countries ~ 1 Federal Republic of Germany { ~ Cd . . CM character sties UIS TNF M { ssies - - - - ' - ' ~ ' ' ' - ' - ' - - i Pershing li ch . raczerlszics ~ : ! SiS ! : ! : : : ! : ! ~ ! ; ! : ! : ! : ! : ! : ! : ! ~ ! ; i ~ i : ! : ! ~ ! ~ i : ! ~ i : i : ! : i : ! : ! : ! : ! : ! : ! : ! ~ ! : ! : ! : ! : ! : ! : ! * ~ ! : i : ! : ! ~ ! ~ ! : i ; i ; i : i : i ~ ! : ! : ! : ! : ! : ! : ! : i : ! : ! ~ : ~ ! ~ ! ; i : ! ~ i : ! ~ i ~ ! : ! : i ~ i : ~ ! : ! : ! : ! ~ ! : ! : ! : ! : ! : ! : ! ~ ! : ! ~ ! : ! : i : ! : i : i ~ i ~ i : ! : ! ~ ! ~ i : ! ~ ! : ! : ! ~ ! : ! : ! : ! : ! Figure 3 : Browser of the FileBox hierarchy from the public policy ( Nato - missiles ) NoteFiie . 49 CHI + GI 1987 YanLehn can make a cursory evaluation of competing hypotheses by comparing the ratios of supporting ( + ' s ) to rebutting ( - - ' s ) facts across the hypotheses ( i . e . , rows ) in the matrix . If more detailed information is needed , the links provide quick access to the detailed arguments as well as to statements of the relevant facts and hypotheses . 4 . 3 Specializing NoteCards for instructional design NoteCards has been used as the foundation of a computer - based tutoring environment for training copier technicians . This project is noteworthy in that it required extensive tailoring of NoteCards to create three interrelated environments , collectively called the Instructional Design Environment ( IDE ) . Three different sorts of tailoring of the basic NoteCards system were required : Screen management : The IDE developers used the programmer ' s interface to extend NoteCards to manage screen layout . For example , by " stacking " cards of the same type in selected areas of the screen , users were freed from having to manually position card windows as they are brought up . Figure 5 shows a typical IDE screen . New card types : IDE includes several new card types ranging from simple specializations of Text cards ( e . g . Decision and Principle cards ) to novel card types that perform actions when brought up ( e . g . Animation and Video cards ) . ' ~ ' at " links : IDE developers encountered the need to connect a single source card to multiple destination cards in such a way that the set of links could be annotated as a group . They did this by creating a new card type to serve as the nexus of a multi - tailed link as well as to contain annotative text . 5 . Assessment NoteCards is an experimental system whose design is constantly evolving in response to feedback from its Assumir ~ 9 the topological hypothesis , there are just two kinds of test patterns to consider , msg and mgg , and two kinds of matching , They interact , so they must be disc : ussed together . The cornbination of rng 9 with closest matching won ' t work . 4feature ) Discrimination examples I 4Feat _ ure ) Overspecific test bugs I I 4 r e a t ~ I I L 4Feature ) Ambiguous fetch b u g . . . . ~ j I l I I 4Feature > Backup bugs t l I I I i < + eature > Learning never en . s I 4 + > II < + > II 4 + > II 4 + ) II < 0 ) I I - ~ - I < + > I1 < - > II < + > II ~ ql - ~ ll ~ q 4° > II 4 ~ > II 4° > I1 - ~ - I I - + ~ - I t - ~ q 4 . ) II ' ° > I1 ~ - 114° ) II 4° ) II ~ q " ) II 40 ) II ~ - II - ~ ql ~ I1 - ~ 1 " > I I 4° > I I - ~ - I1 - ~ - I I - ~ q I - ~ q 4Competitor ) Test patterns : one 9 from rngg I 4Competitor ) Test patterns : MS I I 4Competitor ) Test patterns : mgg & exact I I < Competitor ) Test patterns : ms 9 & exact I 4Competitor ) Test patterns : msg & closest I 4Winner ) Test patterns : any in VS I 4Remark ) Oerivation via fetch impasses I SFI _ Vv ' henBF is generated just after 3clb . Borrow ' s test pattern has DIGIT for top in it ( which is always true until 3c2b problems are exhemplified ) , in addition to LessThan ~ omehow ( e . g . ) exact match . B msg ) this causes an impasse , which generated SFL when Force repaired . If kid has Max - of - diff - and - zero then Force yields ; < i - N = OAB , Another repair ( unknown ) yields b < - N = NAB . These usually co - occur with BFZ ; if the zero is scratched , then that ' wilt trigger the impasse in that column ( thus , ctebuggy ' s implementation of X - N = 0AB uses touched predic ; ate to simulate zero - over - scratched - zero ) . The learners contrast positive and negative instances of the teat pattern in order to induce a maximally general pattern that desciminates the two . The hyp . assumes that To do 3FLWBF as a test pattern impasse , must have ( DIGIT T ) in the test pattern of borrow . But the only way to get this in the mgg is to hav ~ a negative instance where ( DIGIT T ) is false , So neg inst must have acrossed out column . Actually , this is exactly what the neg inst will be on a 2C1B problem , provided r . he SublCol goal is invoked on both columns ( which requires a foreach loop ) . But , any Figure 4 : Matrix summary card with supporting Fact , Hypothesis , and Argument cards from VanLehn ' s competitive argumentation NoteFile . 50 users . The following sections discuss what we have learned about the system ' s strengths and weaknesses from observing its utilization in the NoteCards user community . 5 . 1 Information management Information management is a significant component of most existing NoteCards applications . The system provides an ideal environment for storing , organizing , and managing large heterogeneous collections of textual and graphical information of the sort found in typical personal and project information bases . Several characteristics appear to be responsible for this success : The NoteCards interface for accessing and managing information is uniform across all possible kinds of information . Accessing and organizing graphics , images , and even animations is done in exactly the same manner as accessing and organizing text , i . e . , by manipulating cards and links . NoteCards provides an object - oriented , spatial , direct manipulation , navigational interface not only to information stored in the network , but also to the organizational structure of that information . NoteCards is specifically designed to allow users the opportunity to organize their information into arbitrary ( e . g . , non - hierarchical ) network structures tailored to their specific applications . CHI + GI The NoteCards programmer ' s interface and other aspects of NoteCards ' extensible nature have allowed the system to be tailored to each user ' s specific task requirements . NoteCards is optimized to handle relatively small chunks of information on the order of a sentence to a paragraph making it ideally suited to personal information bases that typically consist of small " scraps " such as notes to oneself , clippings from electronic mail , papers in progress , etc . 5 . 2 Idea processing NoteCards was designed first and foremost to be a tool for capturing , representing , and processing ideas . Unfortunately , many users have found the task of structuring and processing their ideas in NoteCards to be relatively difficult . Representing and manipulating ideas in NoteCards is a task that requires considerable strategic planning . Most users start with an unorganized and poorly understood collection of ideas . Their first task is to design and construct a network structure that represents and / or organizes these ideas . They find this task to be problematic . They aren ' t quite sure how to segment their ideas and information into notecards ; e . g . , whether to put each paragraph or ench section or each whole document in a separate 1987 IDE1 li i ~ $ tructionol Context i oomain Knowled @ e 5tud ~ zts i2re - - l ) not hiah ver & zl ( 85 % ) 2 ) minor technical training ( AA in electronics or lezz ) 3 ) wide age spread ( 21 - 60 yrs ) _ Rationale Decisions runction . lity is useful J - - - - - , \ ( Xl . . . . . hy i . . . . . . . tructable ~ \ % Is . . . . stow I ~ _ ~ / / IFu . ctlon . t uoco . ~ , osltion I • , ~ ® i I ^ dv ' ' ~ ' u °W " iz° ~ I ' ~ , ~ \ I Fiult prod ~ tions ~ - Knowledge structures that tie together a collection of knowledge elements should be presented prior to tile km : lwledse elements thetnselve ~ . , Rationale for Functional decomposition I < ~ t | tm4 ~ ) Adv4t , llc : ed OrgilHt ~ Zell " J , ( for ) Seven Stops Start with basic function of copying and decomposes it into subfunctioos until the ~ vtm Steps are reached . I < , . pl . . ~ . . . > No . n = vi , - ©d Useful knowledge ; Teach ~ ~ al tree first . ( Ra t ion , ale ) Advanced The functional decomposition is essentially a goal structure . _ I ( Im ~ loment = > Functior ~ tl decomposition R : Oeskln goad tree I Figure 5 : Typical IDE screen layout with columns for Principle , Rationale , and Decision cards . 51 CHI - k GI 1987 notecard . They find it difficult to decide whether to use the existing FileBox structure or to create their own classification mechanism . They don ' t quite know how to use links to build relational structures or even whether such relational networks would be appropriate for their task . The NoteCards user community senses a need for help . One of the most frequent requests made by NoteCards users is for a " strategy manual " outlining the issues involved in designing a NoteCards network and suggesting possible design strategies and implementation tactics suitable for a range of specific tasks . 5 . 3 Collaboration One of the biggest limitations of NoteCards is the lack of support for collaborative work . Our experience suggests that most idea processing tasks are inherently collaborative , with groups of varying from two to ten people working in a single area or on a single project . Moreover , collaboration frequently involves sharing a common information space ( e . g . , a NoteFile ) . Unfortunately , NoteCards does not adequately support NoteFile sharing . Extending NoteCards to support collaborative work involves improvements in two interrelated areas : supporting the mechanics of sharing NoteCards networks and supporting the social interactions inherent in collaborative activity . We are currently working on NoteCards ' deficiencies in both of these areas ( Trigg , Suchman , & Halasz , 1986 ) . 5 . 4 Information displays NoteCards lacks tools for displaying and manipulating very large or complex information structures such as Browser graphs . It is not unusual for Browser graphs to occupy twenty 8xll sheets if hardcopied and to depict a complex web with many different types of links between nodes . Browsers lack the facility for moving quickly around such large structures . Moreover , they provide only a minimal amount of information regarding the properties of the cards and links shown . Browsers could benefit from an increase in the amount and perspicuity of the information displayed about the cards and links being represented . The development of better tools for displaying large and complex information structures is one current focus of the NoteCards project . 6 . Concluding Remarks This paper has presented a very brief overview of the NoteCards project . More detailed discussion of the system and its extensible nature can be found in Halasz , Moran , and Trigg ( in preparation ) . More extensive description of the NoteCards user community and the lessons to be drawn from observing the system in use can be found in Halasz , Trigg , and Moran ( in preparation ) . 7 . References Delisle , N . & Schwartz , M . ( 1986 ) Neptune : a hypertext system for CAD applications . Proceedings of ACM SIGMOD ~ 6 , Washington , D . C . , May 28 - 30 , 1986 , 132 - 142 . Engelbart , D . C . ( 1984 ) Authorship Provisions in Augment . IEEE 1984 COMPCOM Proceedings , Spring 1984 , 465 - 472 . Halasz , F . G . , Moran , T . P . , & Trigg , R . H . ( in preparation ) NoteCards : An extensible environment for information management and idea processing . Xerox Palo Alto Research Center Technical Report . I - Ialasz , F . G . , Trigg , R . H . , & Moran , T . P . ( in preparation ) Experience with the NoteCards idea processing system . Xerox Palo Alto Research Center Technical Report . Monty , M . L . & Moran , T . P . ( 1986 ) A longitudinal study of authoring using NoteCards . Poster presented at CHr86 Human Factors in Computing Systems conference ( Boston , April 13 - 17 , 1986 ) . Trigg , R . , Suchman , L . and Halasz , F . ( 1986 ) Supporting collaboration in NoteCards . Proceedings of the Conference on Computer Supported Cooperative Work , Austin , Texas , December 3 - 5 , 1986 . Yankelovic , N . , Meyrowitz , N , & van Dam , A . ( 1985 ) Reading and writing the electronic book . Computer , October 1985 , 15 - 30 . VanLehn , K ( 1983 ) Felicity conditions for human skill acquisition : Validating an AI - based theory . Xerox Palo Alto Research Center Technical Report , CIS - 21 . VanLehn , K ( 1985 ) Theory reform caused by an a1 " gumentation tool . Xerox Palo Alto Research Center Technical Report , ISL - 11 . 52