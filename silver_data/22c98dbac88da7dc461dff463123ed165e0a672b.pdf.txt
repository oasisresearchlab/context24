Growing an Accessible and Inclusive Systems Design Course with PlantUML Sarah Carruthers Vancouver Island University Nanaimo , BC , Canada carruthes2 @ viu . ca Amber Thomas Athabasca University Athabasca , AB , Canada amber93thomas @ gmail . com Liam Kaufman - Willis Vancouver Island University Nanaimo , BC , Canada lkwillis @ shaw . ca Aaron Wang Vancouver Island University Nanaimo , BC , Canada arwang350 @ gmail . com ABSTRACT Unified Modelling Language ( UML ) diagrams are commonly used in Systems Analysis and Design ( SAaD ) courses to communicate complex ideas , designs , and processes . While tools exist to accom - modate blind and visually impaired users to work with UML di - agrams , many tools fall short in terms of enabling these users to independently create and edit diagrams . This , in turn , limits the extent to which blind users can work in team and peer - feedback ac - tivities that use visual diagrams . Adapting visual design activities to be accessible and inclusive benefits not only blind users but sighted users , as well . Being inclusive can lead to more diverse perspectives and ideas , which is invaluable to the creative process of iterative design . In this experience report we describe how a SAaD course was adapted , using off - the - shelf tools , to be not only accessible to a student who uses a screen reader but also inclusive , enabling all students to equally participate in team and peer - feedback activities . We report the successes and challenges of this experience from the perspective of the instructor , the blind student , and their sighted teammates . CCS CONCEPTS • Human - centered computing → Accessibility systems and tools ; • Social and professional topics → People with dis - abilities ; • Software and its engineering → Unified Modeling Language ( UML ) . KEYWORDS Blind and Visually Impaired , Accessibility , Inclusive Design , Sys - tems Analysis , UML ACM Reference Format : Sarah Carruthers , Amber Thomas , Liam Kaufman - Willis , and Aaron Wang . 2023 . Growing an Accessible and Inclusive Systems Design Course with PlantUML . In Proceedings of the 54th ACM Technical Symposium on Computer Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than ACM mustbehonored . Abstractingwithcreditispermitted . Tocopyotherwise , orrepublish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from permissions @ acm . org . SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada © 2023 Association for Computing Machinery . ACM ISBN 978 - 1 - 4503 - 9431 - 4 / 23 / 03 . . . $ 15 . 00 https : / / doi . org / 10 . 1145 / 3545945 . 3569786 Science Education V . 1 ( SIGCSE 2023 ) , March 15 – 18 , 2023 , Toronto , ON , Canada . ACM , New York , NY , USA , 7 pages . https : / / doi . org / 10 . 1145 / 3545945 . 3569786 1 INTRODUCTION The equal right to education is embedded in Canadian law , and Canadian post - secondary institutions have a duty to accommodate students with disabilities , short of undue hardship . Despite this legal responsibility , students with disabilities remain underrepresented in STEM ( Science , Technology , Mathematics , and Engineering ) dis - ciplines because of barriers they face in accessing resources and educational supports [ 20 ] . While post - secondary institutions have resources in place to support students with disabilities , these aids can fall short in disciplines that rely on specialized tools that are outside the expertise of accommodations experts . This is the case in computer science courses that use Integrated Development Envi - ronments ( IDE ) and Computer Aided Software Engineering ( CASE ) tools ; it falls on the shoulders of instructors and students to re - search and implement accommodations for students . This added work to accommodate a small proportion of students in a course may leave some students with disabilities behind if instructors lack the resources or confidence to undertake it effectively . Program and course designers now recognize the importance of creating inclusive computer science education [ 22 ] , especially to improve access for underrepresented groups . However , it remains challenging to accommodate blind and visually impaired students in some computer science courses . The challenge of creating accessible curriculum and resources varies based on the tools used . The task can be relatively easy for activities that use tools with built - in and mature accessibility features . Many Microsoft Office products now support the addition of alternate text to images [ 15 ] ; video tools like Zoom facilitate generating or adding descriptive text for videos [ 23 ] ; and Learning Management Systems ( LMS ) have many built - in accessibility supports . These tools are all relatively accessible to screen readers [ 3 , 16 ] . However , in more specialized domains like software development , this support can be less readily available or less effective . Tools used to create , edit , and share Unified Modelling Language ( UML ) diagrams in Software Engineering and SAaD often offer limited accessibility , in part due to their reliance on using a mouse to interact with the diagrams . To be fully accessible and inclusive , diagramming tools need to not only allow blind users to create and read diagrams , but they also need to enable blind users to work on diagrams both independently and with others [ 18 ] . 249 SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada Sarah Carruthers , Amber Thomas , Liam Kaufman - Willis , and Aaron Wang A blind computer science student , who relies primarily on a screen reader for accessing digital tools , encountered difficulty find - ing an accommodation for a SAaD course which included activities involving UML diagrams . The primary roadblock the student faced was finding a way to independently work with UML diagrams using their screen reader . Despite the student providing a text - based UML diagramming tool that was compatible with their screen reader , the course instructor was unable to accommodate its use given the constraints of the course delivery method and materials . Attempts to get support from accessibility services staff failed as they were not familiar with the domain or tools . The student sought special permission to take an equivalent course as transfer credit with a professor who had previously ac - commodated them in a highly visual undergraduate computer sci - ence course . We describe the challenges and successes of adapting a SAaD course to be accessible to a screen reader from the perspective of the instructor , the blind student , and their sighted teammates . 2 RELATED WORK Blind and visually impaired students face many challenges when studying computer science . The hierarchical structures of programs in many IDEs can be difficult to navigate non - visually [ 21 ] , viewing technical diagrams can be difficult or not supported at all [ 1 ] , access to accessible teaching and laboratory spaces can be limited [ 20 ] , instructions may rely on visual cues [ 22 ] , and not all accessibility tools ( like tactile displays ) support independently creating and col - laborating on diagrams [ 11 ] . Various strategies have been proposed and implemented over the years to improve the accessibility of computer science courses and curriculum for students who rely on screen readers . One such effort includes a diagram description language to enable a blind student to engage independently with UML diagramming processes common in SAaD [ 18 ] . Diagramming poses significant barriers to accessibility for peo - ple who use screen readers [ 11 , 13 , 18 ] . In SAaD processes , it is common to use diagrams to explore , design , and communicate complex processes and designs . Object - oriented programs are rep - resented using Class Diagrams , user requirements are captured in Use Case Diagrams , processes can be represented in Activity Diagrams , and database structures can be communicated with En - tity Relationship ( ER ) diagrams , to name only a few . Diagramming is a dynamic and collaborative process . It provides an important mechanism for sharing complex concepts between project team members , to stakeholders , and for long - term documentation pur - poses . Most diagramming tools for creating UML diagrams are not fully accessible to blind users , e . g . , many rely on inaccessible in - teractions like " drag and drop " and using a mouse [ 13 ] . To be fully accessible , diagramming tools must not only allow blind users to “read” diagrams ( which can be achieved through descriptive text or tactile interfaces ) but must also allow them to independently create and edit diagrams . It should also permit them to collaborate with other team members in the diagramming process . This challenge was partially addressed in [ 18 ] , with the creation of a description language for blind programmers to enable them to easily create and read UML diagrams using a screen reader . However , Parson et al . do not directly address the need for collaborating with team members and stakeholders in the diagramming process . 3 COURSE TO BE ADAPTED Parson et al . describe a low - barrier mechanism for blind students to independently work with UML diagrams using a screen reader ; however , most post - secondary instructors working under the con - straints of typical workload and teaching schedules must rely on existing tools to incorporate all students in a course . Furthermore , in a conventional classroom environment students may be expected to collaborate on diagrams in projects and provide peer feedback . The use of an existing tool to accommodate creating and collaborat - ing on diagramming tasks is more desirable , as it provides students with experience using a tool that they may use in future projects . In this paper , we describe how a standard SAaD course was adapted to be accessible to a blind student who uses a screen reader , using an existing freely - available tool . We describe adapting an existing course to not only be accessible , but to also be inclusive , enabling all students in the course to meaningfully collaborate and provide peer feedback on diagrams throughout the course . 3 . 1 Course Delivery The course in question uses a Team - Based Learning ( TBL ) approach [ 14 ] and includes a team project that spans the duration of the term . Teams of 4 - 6 students work on a project that covers all stages of the systems development lifecycle ( SDLC ) : Project Proposal , Feasibility Analysis , Requirements Analysis , Analysis Models , Design Models , Implementation , and Testing . Project deliverables include diagrams at almost all stages of the project . In keeping with the TBL philoso - phy , teams share preliminary work with the class , give feedback to other teams , and incorporate peer and instructor feedback in their project deliverables throughout the design process . In order to be inclusive , all class members are encouraged to engage actively in all stages of the project , in class , and in the peer feedback mechanisms . To ensure user - feedback exercises are ac - cessible to all students given their course - load and extra - curricular schedules , the course uses asynchronous discussion board posts for peer feedback activities . Feedback activities frequently include simple frameworks or guidelines for providing feedback to permit all levels of student to meaningfully engage in giving feedback even when their understanding of the content is nascent . 3 . 2 Course Tools In previous offerings of this course , students could use any tools they wished to create , view , edit , and share diagrams . Open - source or freely available diagramming tools were suggested to students , but not required [ 4 , 6 ] . In preparation for adapting the course for a screen reader , both previously suggested tools were identified as having shortcomings in terms of their accessibility , as they relied on drag - and - drop with a mouse to create and edit diagrams . In keeping with the TBL approach , teams and individuals were asked to share preliminary work to get peer feedback throughout the design process and incorporate that feedback into their work . These feedback mechanisms give students access to a diversity of ideas and approaches , which is important in any creative pro - cess [ 2 , 5 ] . The feedback process was facilitated through D2L’s ( the course’s Learning Management System ) discussion boards [ 3 ] . Like many modern LMS systems , D2L includes many acces - sibility features : the web interface is accessible to screen readers 250 Growing an Accessible and Inclusive Systems Design Course with PlantUML SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada and permits the addition of descriptive text for images . To accom - modate students’ busy schedules , teams often collaborate both synchronously and asynchronously on project deliverables , typ - ically through Google Docs [ 10 ] . Previous experience indicated that Google’s online products are accessible to screen readers [ 9 ] , however Dropbox was more consistently accessible for the student in question [ 7 ] . 4 ADAPTING THE COURSE FOR A SCREEN READER Based on previous experience adapting a course for this particular student , the instructor and student collaborated to find suitable ac - commodations that aligned with the course pedagogy and learning outcomes . To support the diagramming processes , an open - source text - based diagramming tool was identified that was accessible to the student’s screen reader . The TBL and project - based nature of the course provided an additional challenge in its adaptation . The student was initially reluctant to participate in the team project based on previous experience working on a team . However , the instructor explained that the learning opportunities that the team project offered contributed significantly to the course learning out - comes . After some discussion , the student chose to engage in a team project with the understanding that if at any point it proved a barrier to their learning that they would be able to work on their own , instead . To maximize chances of the team project being a success , the instructor carefully selected students for the team who , based on past team - based course engagement , could be trusted to be inclusive and adaptable . 4 . 1 Accessible UML Diagramming When initially posed with the challenge of finding a UML diagram - ming tool that was accessible to a screen reader , the instructor did what many people might do : conduct internet research on accessi - ble diagramming tools . However , this search failed to identify any tools that were deemed acceptable by the student . The instructor observed that many UML diagrams are composed of text descriptions connected into a graph - like structure using shapes and lines or arrows . Many of these diagrams are then trans - lated into text - based programming languages and processes . For example , Class Diagrams can be translated into classes in an object - oriented language like C + + or Java . This observation led to the realization that UML diagrams should be able to be represented using text , and so the instructor searched for a “text - based UML di - agramming tool” . This search result yielded PlantUML [ 19 ] , which the student assessed as being fully accessible for their needs ; it permitted the student to read , create , and edit UML diagrams using their screen reader . PlantUML’s syntax supports the creation of many UML , as well as non - UML , diagrams . Diagrams are defined , saved , and shared as plaintext files . The text descriptions can be compiled into image files either using an online server , or on the command line . Both methods are fully accessible to screen readers . 4 . 2 Inclusive UML Diagramming When adapting the course , special consideration was also given to ensuring the course was inclusive . This had two main facets : • Ensuring all students were able to engage in all team dia - gramming activities for the team project deliverables • Ensuring all students were able to engage in the discussion board feedback activities In order for the team project to be inclusive , the team that in - cluded the student using a screen reader was asked to use the PlantUML diagramming tool for their project’s diagramming needs . This ensured that all three team members could equally contribute to all diagramming processes . Six diagramming feedback activities were included in the course , covering Activity Diagrams , Domain Class Diagrams , Data Flow Diagrams ( DFD ) [ 12 ] , Entity Relationship ( ER ) Diagrams , and De - sign Class Diagrams . In these activities , teams were asked to post a preliminary version of a diagram from their project to a discus - sion post . Classmates were asked to critique one or more diagrams given specific criteria , and then teams were asked to incorporate this feedback into their final diagram design . In previous iterations of the course , diagrams were posted as images . In order for the class feedback activities to be inclusive , all students in the course needed to be able to read all other teams’ diagrams . To facilitate this , all teams were asked to include in their discussion post a description of their diagrams alongside the uploaded image . Acknowledging that asking everyone to learn PlantUML syntax could put an undue burden on students who already had an established tool they pre - ferred , teams were asked to either include a PlantUML definition of their posted diagram or a plaintext description of the diagram that captured its meaning . To ensure that the adaptations worked as expected , the instructor frequently checked in with the student who was using a screen reader to ensure that they were able to understand the other teams’ diagrams . The instructor also elicited feedback from students in other teams to assess the impact that this adaptation had on sighted students’ workloads . 4 . 3 Other Diagramming Considerations The blind student , who has the experience of being previously sighted , identified that one of the biggest differences between read - ing a diagram with vision versus without , is that a visual user “sees” the diagram in a top - down manner . Sighted users perceive the whole diagram , and can then narrow in on the pieces they are inter - ested in for details . O n the other hand , hen using a screen reader , a blind user must look at each individual detail of a diagram and build an overall image , bottom - up . This bottom - up process is mentally in - tensive , especially as a diagram’s complexity increases . One way to facilitate this bottom - up process is to include enrichment features in a diagram like the position , shape , colour , connections , and text annotation of elements in the diagram . These features contribute to how easily the diagram can be interpreted in a bottom - up manner by providing the structural cues that sighted users benefit from in their top - down process . A mechanism to enrich diagrams is there - fore crucial for success in true diagram accessibility , by supporting the user in building a mental representation that is closer to the intended visual layout . A diagramming tool that is both accessible and inclusive should take this into consideration and enable all users to include the struc - tural and layout cues needed to support this bottom - up approach . 251 SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada Sarah Carruthers , Amber Thomas , Liam Kaufman - Willis , and Aaron Wang This will ensure that the tool is both accessible and inclusive by allowing all users to independently create and perceive a diagram’s content and layout . 5 LESSONS LEARNED The adaptation of this course impacted all stakeholders : the blind student , the instructor , and the other students in the course . All three of these perspectives are considered when reflecting on the success of this adaptation . 5 . 1 Lessons Learned for Instructors We begin with the perspective of the instructor who worked with the blind student to adapt this diagram - intensive course . Having done this kind of adaptation in the past , the instructor was prepared for some of the challenges this work would present , but was still surprised by some challenges and successes . Adapting a course that includes visual content for blind or visu - ally impaired students can add a significant amount of workload . However , compared to past experiences making a visually - intensive course accessible , adapting this course took less effort than expected . The course did not use a required textbook and so the instructor did not need to create accessible versions of the text’s diagrams . Course content was delivered as pre - recorded videos which the student was able to listen to successfully . Course assessments in - cluded diagrams that were adapted by including PlantUML syntax for the diagrams ; however , this did not significantly contribute to the instructor’s workload and provided them a chance to gain expe - rience with PlantUML . For instructors whose courses rely on many external resources , the effort required to adapt might be higher . The choice to adapt the course in a way that was inclusive , rather than focusing on its accessibility in isolation , might have made the adaptation of the course easier . By focusing on how to include all students equally in the course rather than focusing on adapting resources to be accessible , the bulk of the adaptation was achieved using PlantUML for diagram creation and sharing between students and teams . This choice likely shifted some of the work onto the students in the course , but this added cost might arguably be balanced against providing students the opportunity to learn to be inclusive in the development environment . Any first attempt to make a course accessible to a technology the instructor is unfamiliar with ( like a screen reader ) comes with risks . There is always a risk that an adaptation fails to fully meet the needs of the student or course learning outcomes . It is therefore important to have a backup plan to mitigate this risk . In this case , the student and instructor agreed ahead of time to shift to individual study should the need arise . But perhaps the most important way to mitigate this risk is to treat the adaptation as a co - design process with clear and frequent two - way communication . Ultimately , the student is in the best position to judge the effectiveness of an adap - tation , and frequent feedback from the student and a willingness from the instructor to adapt if needed , is vital . From the perspective of the instructor , the adaptation of the course to be accessible and inclusive was successful . The blind stu - dent successfully completed the course and project . They were able to be included in all team project and peer feedback activities , but more importantly this was reciprocated with all classmates being able to engage fully with the student’s work . This was quantified by the use of PlantUML in the discussion posts , as shown in Table 1 . Percentages show the proportion of submissions that used the PlantUML text or PlantUML - generated image for the submission . After the first discussion post that included a diagram ( Activity Diagram ) , all teams’ posts included PlantUML syntax for describing their diagram . This seems to indicate that the PlantUML syntax was preferred over a less defined description of their own choosing . Another unexpected outcome was the use of PlantUML for gener - ating the visual version of teams’ diagrams . Overall , half ( 50 % ) of the posted diagrams were generated using PlantUML . Table 1 : Usage of PlantUML vs . other means of sharing dia - grams on peer - feedback discussion board posts . Date Diagram PlantUML text PlantUML image Feb 2 Activity 20 % 20 % Feb 17 Domain Class 100 % 60 % Feb 22 Level - 0 DFD 100 % 40 % Feb 25 Level - 1 DFD 100 % 40 % Mar 2 ER 100 % 80 % Mar 7 Design Class 100 % 60 % Feedback from students in the course varied , but was positive overall . There were complaints voiced early in the course about the extra work involved to both create a diagram and a text description for the discussion posts . The instructor addressed this by explaining that only one student needed to do this extra work per team and by identifying the value of all students having equal access to all learning opportunities . This perception of extra work may explain the higher use of PlantUML to create diagrams . Some teams may have chosen to reduce their workload by using PlantUML alone rather than two different means to generate diagrams . However , as the course progressed , more than one student com - mented on their preference for using PlantUML for creating dia - grams over tools they had used previously . Some of the reasons for this included it eliminating the “janky” way that drag and drop diagramming tools move elements around in large diagrams , and that the text version of the diagrams was more compatible with version control tools like git [ 8 ] . Adapting this course to be inclusive and accessible improved the course for both current and future students . Current students benefited from being inclusive , which is recognized as an important workplace practice . While the purpose of this adaptation was to address the needs of a single student with a permanent need for accessibility , future students can benefit from the course’s improved accessibility , whether or not they are disabled . Annotating images benefits individuals who face temporary visual impairments , or people whose vision changes with age . The program these students were enrolled in is taught in a Linux [ 17 ] environment , and students work primarily on the command line for programming tasks until third year . Because of their famil - iarity with working on the command line , students in this course were perhaps more comfortable using text - based and declarative tools than students whose development experience relies more heavily on graphical user interface ( GUI ) development tools . This 252 Growing an Accessible and Inclusive Systems Design Course with PlantUML SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada difference has the potential to impact how receptive students might be to this kind of accommodation at other institutions . 5 . 2 Lessons Learned for Blind Students Central to this report is the experience of the blind student who is uniquely positioned to reflect on the impacts of the adaptation process . Access to visual information such as graphs and diagrams in a computer science program is one of the most difficult accessi - bility challenges for blind and visually impaired users . Previous techniques for making graphs and diagrams accessible included making them physically raised on paper using tactile interfaces . However , this technique is very limited in terms of allowing blind and visually impaired users produce their own diagrams . In previous courses taken without an accessible diagramming tool , the blind student found it extremely frustrating to commu - nicate diagrams to their professors , especially when just learning how to create and understand new diagram types . In contrast , the experience of working with a professor who was understanding of the requirements for accessibility was a great experience for the student , and enabled them to fully engage with all aspects of the learning process for the course , including learning multiple new diagram types . PlantUML allowed the student to work effec - tively with a team in a course that was heavily diagram - based . PlantUML’s text - based syntax provided the flexibility to commu - nicate diagrams that it did not fully support , as well as diagrams that were incomplete or incorrect . Interestingly , the blind student found that PlantUML’s syntax was very similar to the syntax they had been using to try to convey diagrams to their instructors in the past . The main difference was that PlantUML allowed for this text syntax to also build a visual representation for sighted users to view . The adoption of PlantUML by other teams in the course allowed the student to “see” the other teams’ diagrams , and the student was pleasantly surprised by how much the rest of the class embraced using PlantUML once they were introduced to it . Not only did they use the basic syntax for describing diagrams , but many teams also added features that the blind student had not even realized were an option , such as colours , styles , and different formatting . Using PlantUML did present challenges from the perspective of a blind user . When a diagram’s description contains syntax errors , the tool produces an image of an error message instead of the actual diagram intended . The student was able to resolve this issue with the use of visual aid applications and photo recognition , however this extra work might dissuade other users . Another challenge was the use of labels for elements of the diagram . Screen readers use labels on mathematical symbols like 𝜋 ( 𝑝𝑖 ) and ⌊⌋ ( 𝑓𝑙𝑜𝑜𝑟 ) to help blind users know what symbol they are encountering . For a diagram - based course where students are collaborating , however , it is important to be able to recognize elements of a diagram by what they “look like” . This need is often overlooked by sighted users who can both see a symbol and interpret it in a way not available to people using a screen reader . This can make it hard for a blind student to discuss a diagram with sighted users . A sighted user might refer to a “dashed arrow line” in a diagram , where the blind user’s screen reader says “dependency” . Even if the meaning of the symbol is equivalent to its representation , the use of different terms for the same element in the diagram can introduce a barrier to communication . A UML - based diagramming language should not “label” in a way that inhibits the blind user from " seeing " what symbol is being used so that a visual conversation can be meaningful and understood by all involved . Finally , being able to control the layout of a diagram is important for creating diagrams for both sighted and blind users . PlantUML’s syntax supports directional and layout indicators , which made it uniquely suited for creating a physical layout that is accessible to everyone . For example , PlantUML allows elements of a diagram to be placed relative to each other using arrows with directional keywords . To illustrate , a simple class diagram ( based on one created by the team for the project ) is defined using PlantUML syntax , and then rendered with and without arrows in Figure 1 . @ startumlskinparam monochrome true skinparam linetype ortho skinparam classAttributeIconSize 0 class User { - name : text - icon : img } class Request { - titleOfBoard : text - descriptionOfBoard : text - creationDate : date } class Board { - title : text - description : text - creationDate : date - status : toggle - boardAdminList : list } class Post { - heading : text - likeCount : number - creationDate : date - status : toggle } class Content { - text : text - image : img - altText : text } ' arrow code inserted here @ enduml In this example , the two diagrams shown in Figure 1 are created using the same PlantUML code shown above , but the layout is explicitly defined in the right image and not in the left diagram using the syntax shown in the respective subfigures’ captions . Using this directionality to define a diagram with the same layout in both its image and textual representation benefits both blind and visually impaired users . It allows for more effective collaboration since all users can perceive and discuss the layout of the diagram . When 253 SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada Sarah Carruthers , Amber Thomas , Liam Kaufman - Willis , and Aaron Wang ( a ) arrow definitions with no directional keywords : User – > Request User . . > Post Post < – Board Content < – Post ( b ) arrow definitions with directional keywords : User - right - > Request User . down . > Post Post < - up - Board Content < - left - Post Figure 1 : Two versions of the same Class Diagram rendered using PlantUML a sighted student refers to " a Class on the right " , a blind student can determine which classes meet that criteria and focus in on that subset of the diagram , and vice versa . It also enables a blind student to generate an internal representation of the diagram that is equivalent to the visual layout that sighted students can see . PlantUML’s support for positioning , shapes , colours , connections , and annotations enable blind users to independently create rich diagrams , making it a fully accessible diagramming solution . 5 . 3 Lessons Learned for Classmates In this section , we present the perspective of the two sighted stu - dents who worked in a team with the blind student . Having never worked with a visually impaired teammate before , both sighted students assumed it would be more challenging than working in a team had been in the past . However , it presented different , not more , challenges than those which usually accompany a team project . Additionally , it presented some clear and unexpected benefits . Early on in the course , the three team members encountered some difficulties communicating their designs with each other us - ing diagrams . When first using PlantUML to create diagrams , the visually impaired student was not able to “see” certain aspects of the diagram that the sighted students could , like the physical lay - out of a diagram . The basic PlantUML syntax used by the team at the start of the term did not convey the same layout information that was visible in the image PlantUML generated . However , while exploring PlantUML’s capabilities , one of the sighted students dis - covered syntax which enabled customizing the diagram’s layout and appearance . This allowed encoding the structural information in a way that the visually impaired student could also understand , as seen in Figure 1 earlier . The collaboration between sighted and blind students enabled the blind student to teach the sighted students to design diagrams that some sighted students struggled to understand . The team was required to create a data flow diagram ( DFD ) for their system , and one of the sighted group members struggled with these diagrams . It was only after the visually impaired student had created a level - 0 and level - 1 DFD for the project that the sighted student understood what they were supposed to represent for their system . As an unexpected benefit , one of the sighted students realized that the declarative nature of the PlantUML markup was a better cognitive fit for them than the visual diagramming tool that had served them well in the past . The student found that PlantUML enabled simpler editing and faster iteration , in part thanks to the plaintext format . 6 CONCLUSIONS This work extends previous efforts to make diagraming accessible for blind students in an undergraduate course , by finding an adap - tation that fully included a blind student in a team project and peer feedback activities that relied heavily on diagramming . This inclu - sive experience successfully enriched the learning opportunities for all involved and modelled how to be inclusive in a development team . While this work addresses a specific accessibility challenge , the lessons learned can be extended to other applications within the discipline through the co - design and inclusive approach used . The benefits of this work extend to the instructor , the blind student , and their sighted classmates . The instructor learned to better understand the needs of a partic - ular student while working to simultaneously improve the learning experience for all students . The lessons learned can be further transferred to other accommodation needs , and to creating more inclusive classroom experiences , in general . Valuing the blind student’s lived experience using adaptive tech - nologies helped to ensure the success of the process . In this case , listening to the student’s needs allowed the instructor to identify that the text - based nature of screen readers was the bottleneck , rather than the more general issue of finding an accessible dia - gramming tool . As a result , they were able to find a fully accessible diagramming tool , where other attempts had failed . Collaborating and co - designing with the blind student when adapting the course not only ensured the adaptation met their needs , it also empowered the student by giving them a voice in the process . When adapting a course for a specific student’s accessibility needs it can be easy to overlook the benefit to other students , both present and future . By choosing an adaptation that was inclusive , the instructor was forced to take into consideration what equal access meant in the context of the learning outcomes of the course . As a result , all students were enabled to meet the learning outcomes , and future students , permanently disabled or not , will continue to benefit from the more accessible course design . Approaching accessibility in an inclusive and transparent man - ner benefits all stakeholders . In the case of this course , it helped model how to be accessible and inclusive in the design process and in a team environment . This mirrors the responsibility students will have as professionals to design systems that are accessible and inclusive for all users , and prepares them for success in an inclusive and accessible work environment . REFERENCES [ 1 ] ChristopherBaillie , OliverKBurmeister , andJamesHHamlyn - Harris . 2003 . Web - based teaching : communicating technical diagrams with the vision impaired . In Presentation at the Australian Web Accessibility Conference , OZeWAI . [ 2 ] David Bayles and Ted Orland . 2001 . Art & fear : Observations on the perils ( and rewards ) of artmaking . Image Continuum Press . 254 Growing an Accessible and Inclusive Systems Design Course with PlantUML SIGCSE 2023 , March 15 – 18 , 2023 , Toronto , ON , Canada [ 3 ] Brightspace . 2022 . D2L Brightspace . D2L Corporation , Kitchener ON , Canada . https : / / www . d2l . com / brightspace / [ 4 ] DIA . 2022 . DIA . DIA . http : / / dia - installer . de / [ 5 ] StevenPDow , AlanaGlassco , JonathanKass , MelissaSchwarz , DanielLSchwartz , and Scott R Klemmer . 2010 . Parallel prototyping leads to better design results , more divergence , and increased self - efficacy . ACM Transactions on Computer - Human Interaction ( TOCHI ) 17 , 4 ( 2010 ) , 1 – 24 . [ 6 ] draw . io . 2022 . draw . io . JGraph Ltd . https : / / app . diagrams . net / [ 7 ] Dropbox . 2022 . Accessibility - Dropbox . Dropbox Inc . Retrieved August 7 , 2022 from https : / / www . dropbox . com / accessibility [ 8 ] Git . 2022 . Git . Git . https : / / git - scm . com / [ 9 ] Google . 2022 . Google Accessibility . Google . Retrieved August 7 , 2022 from https : / / www . google . com / accessibility / [ 10 ] Google . 2022 . Google Docs . Google . https : / / docs . google . com / [ 11 ] Alex Hadwen - Bennett , Sue Sentance , and Cecily Morrison . 2018 . Making pro - gramming accessible to learners with visual impairments : a literature review . International Journal of Computer Science Education in Schools 2 , 2 ( 2018 ) , 3 – 13 . [ 12 ] Donald S Le Vie and S Donald . 2000 . Understanding data flow diagrams . In Annual Conference - Society for Technical Communication , Vol . 47 . 396 – 401 . [ 13 ] L Luque , E d S Veriscimo , G d C Pereira , and LVL Filgueiras . 2014 . Can we work together ? on the inclusion of blind people in uml model - based tasks . In Inclusive Designing . Springer , 223 – 233 . [ 14 ] Larry K Michaelsen . 2002 . Getting started with team - based learning . Team - based learning : A transformative use of small groups ( 2002 ) , 27 – 51 . [ 15 ] Microsoft . 2022 . Accessibility Technology and Tools : Microsoft Accessibility . Mi - crosoft , Inc . Retrieved August 7 , 2022 from https : / / www . microsoft . com / en - us / accessibility / [ 16 ] Moodle . 2022 . Moodle . Moodle . https : / / moodle . org / [ 17 ] Linux Kernel Organization . 2022 . Linux . Linux Kernel Organization . https : / / www . kernel . org / [ 18 ] Dale E Parson , Genevieve Smith , and Andrew Wernicki . 2017 . A Graph Descrip - tion Language for Blind Programmers . ( 2017 ) . [ 19 ] PlantUML . 2022 . PlantUML . https : / / plantuml . com / . https : / / plantuml . com / [ 20 ] Dipesh Prema and Ruby Dhand . 2019 . Inclusion and accessibility in STEM education : Navigating the duty to accommodate and disability rights . Canadian Journal of Disability Studies 8 , 3 ( 2019 ) , 121 – 141 . [ 21 ] Ann C Smith , Justin S Cook , Joan M Francioni , Asif Hossain , Mohd Anwar , and M Fayezur Rahman . 2003 . Nonvisual tool for navigating hierarchical structures . ACM SIGACCESS Accessibility and Computing 77 - 78 ( 2003 ) , 133 – 139 . [ 22 ] Andreas Stefik , Richard E Ladner , William Allee , and Sean Mealin . 2019 . Com - puter science principles for teachers of blind and visually impaired students . In Proceedings of the 50th ACM Technical Symposium on Computer Science Education . 766 – 772 . [ 23 ] Zoom . 2022 . Accessibility : Zoom . Zoom , Inc . Retrieved August 7 , 2022 from https : / / explore . zoom . us / en / accessibility / 255