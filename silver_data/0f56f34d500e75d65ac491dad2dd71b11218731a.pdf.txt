Facilitators and Inhibitors of End - User Development by Teachers in a School Environment Susan Wiedenbeck College of IST , Drexel University susan . wiedenbeck @ cis . drexel . edu Abstract This paper describes the perceptions and attitudes of teachers who are end - user developers . A semi - structured interview of 22 teachers was carried out . It revealed motivational , situational , knowledge , and tool factors that affect their programming efforts . Five of the survey participants also carried out several program maintenance tasks in order to identify additional challenges in performing end - user programming tasks . The contribution of the study is an understanding of the facilitators and inhibitors of end - user development in a particular professional setting . 1 . Introduction Nardi’s classic book on end - user programming , A Small Matter of Programming [ 13 ] , lays out the aspirations and challenges of end - user developers . On the one hand , many professionals who are not trained programmers need to create and use programs in the course of their own work . On the other hand , they often have difficulty in comprehending , writing , debugging , and maintaining their programs . Teachers are one such group that faces this dilemma . While there are many resources that teachers can use in their classrooms , it is sometimes desirable to provide students with special - purpose simulations , animations , or other computational objects . Teachers are domain specialists in their own academic subject and in teaching techniques . However , they are not domain specialists in programming . Since the 1990s , several programming systems have been developed that teachers and students can use to create interactive simulations [ 9 , 15 , 18 ] . The use of these systems has been studied with students and teachers yielding some promising results [ 5 , 14 , 17 ] . However , these programming systems are not readily available to teachers . Instead , teachers use development environments that are commercially available and aimed at end - user developers , for example , Visual Basic and SuperCard . The goal of this study is to discover the facilitators and inhibitors to end - user development by teachers in their work environment . To this end , a group of teachers was interviewed about their programming activities in the school context . The interviews were followed by a contextual inquiry of a subset of the teachers who carried out a set of program maintenance tasks . Studies of end - user programmers usually focus on user performance while carrying out a programming task in a given development environment . However , for end users the influences of situational factors and the end users’ own perceptions and attitudes have a huge impact on their actual programming activities . As Nardi [ 13 ] points out , every end - user group has its own specific needs in its own context . While there may be general similarities , there is no “typical” end user . The contribution of this work is to represent one group of end - user developers in their broad context , thus providing a basis for researchers to devise effective strategies to aid these end users in their development efforts . 2 . The Interviews and Contextual Inquiry Twenty - two teachers who were users of various programming environments were interviewed to identify the facilitators and inhibitors to end - user development by teachers . The participants were volunteers . They came from 14 suburban schools and were referred to the researchers by other teachers . Teachers whose responsibilities included teaching computer technologies or programming were not included in the study . The participants were interviewed individually in their schools with interviews lasting about one hour . The actual interview time varied from approximately 45 minutes to 65 minutes . The interviews were semi - structured . The interviewer came with a set of questions to cover , but allowed the participant to elaborate and to introduce new relevant topics . The interviews were organized around four general themes : ( 1 ) who are teacher - programmers ( 2 ) what brought them to programming , ( 3 ) situational factors that help or hinder their Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE programming efforts , and ( 4 ) programming factors that help or hinder their programming efforts . To supplement the interviews a contextual inquiry was carried out in order to watch and talk to teacher - programmers at work on a program . The goal was to elicit more about their programming activities by placing the users in the context of an end - user programming task . Twelve teachers who had participated in the interviews subsequently volunteered for the contextual inquiry and 5 were randomly selected . They carried out a 75 minute maintenance task on a gradebook program written in Visual Basic ( VB ) . The program was designed for entering student information , recording grades , calculating averages , and generating reports . It was similar to a program used in a prior study on end - user development [ 6 ] . The teachers carried out 12 modifications to the scripts and forms ( VB’s terminology for the user interface windows ) . Contextual inquiry [ 1 ] is a method of interviewing in the work context . In a contextual inquiry the interviewer sits beside the user while work is being done . The interviewer is a quiet observer , but when the interviewer has questions about the work , he or she intervenes with a probe ( e . g . , what the user is doing , how , why ) . The user responds to the question , which may lead to follow - up questions , then resumes the work . In this study , an investigator silently watched the teacher work , but probed the teacher with questions to clarify what the user was doing and thinking . The teacher responded , then resumed the task . The verbalizations and image of the computer screen were recorded on videotape . The videotapes were transcribed and topics arising in the data were categorized . In the following sections qualitative results are presented about the facilitators and inhibitors to end - user development , as identified by teachers , in the interviews or the contextual inquiry . It should be clearly noted that the observations reported are based on the participants’ self - reported attitudes and perceptions of their programming activities . 3 . Who Are Teacher - Programmers The demographics of the teachers were quite varied . They ranged in age from 24 to 52 years old with a mean of 36 . Sixteen were male and 6 were female . The teachers had been programming ( usually in several languages ) between 1 and 23 years . The mean was 11 years . Eight participants taught in elementary school ( grades 1 - 5 ) , 6 in middle school ( grades 6 - 8 ) , and 7 in high school ( grades 9 - 12 ) . In addition , there was one teacher who currently had administrative responsibilities but had formerly been a classroom teacher . The elementary school teachers were generalists who taught a wide range of subjects . The middle school and high school teachers were subject specialists who taught in a specific subject area . Thirteen teachers , over half the total , had trained in science or mathematics . The rest ranged from physical education to history . There was a wide spread of teachers’ amount of programming activity . Participants reported carrying out programming activities in the prior year from a few times a week to once in two months . The mean was between one and two times a month . 4 . What Brought Them to Programming The discussion of this theme centered on how teachers got started programming , why they persisted in programming , and what programming languages and environments they used . The data in this section come from the interviews . Results are summarized in Table 1 . Most participants began programming as undergraduate students training for teaching . Eleven of them took a semester course in a traditional programming language , Pascal , C , C + + , or Java , but only 2 took a follow - on course . The language learned corresponded to the “era” in which the teacher studied programming , e . g . , the older teachers were most likely to have learned Pascal . As part of their teacher training , 8 participants took short courses ( 3 - 8 weeks ) to learn to program in HyperCard or Visual Basic . Finally , 3 individuals were self - taught programmers . As the average age of the teachers suggests , over half the teachers received their formal programming education more than 10 years ago . These teachers agreed that their initial training in programming helped them to understand concepts , but they noted that the training was a long time ago and programming had changed from those days . In particular , seven teachers cited complex programming environments , such as Visual Studio , as a change . All of the teachers expressed a need for more training either to update their general skills or to learn new skills on specific topics , but they found that short , continuing education training workshops were rarely available . Most teacher - programmers ( 18 of 22 ) described their training in programming as a voluntary choice . The point was made that only computer teachers need to know how to program and that other teachers learn to program because they see a personal value in it . Not surprisingly , the personal value that led them to program differed among teachers . In 12 cases , the individuals chose to learn programming because it had Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE a strong appeal to them . Two of these teachers said that they could imagine themselves as professional programmers and rather regretted not having pursued programming as a career . The other 10 enjoyed programming in an amateur way and found it useful in teaching to be able to write simple programs . A second group of 8 teacher - programmers was less intrinsically interested in programming but was motivated by keeping up with technology and being literate in areas where their technically adept students excelled . The remaining two teachers were vague about their motivations . Facilitators Formal programming courses Short programming courses for teachers in training Professional motivation to create instructional materials for students and keep up with technology Personal interest and satisfaction in programming Inhibitors Not enough formal training and training too long ago Few opportunities for continuing education workshops for working teachers Some programming systems no longer available , need to change to new systems Newer systems are more complex School technology policies can affect teachers’ development choices Table 1 : Facilitators and inhibitors to teachers’ decisions to program . In the interview teachers described some of their applications . They fell into two general categories : applications for teaching students and administrative applications . Examples of applications for teaching included such things as multimedia lessons in history , interactive story - telling , math practice with computer feedback on correctness , design and execution of science experiments , and interactive health modules . Administrative applications included grading applications , activity scheduling , and lesson planning . The teachers discussed what programming tools they use and why they chose them . Sixteen teachers used VB as their main programming language , and 5 used SuperCard . One teacher did not specify a primary language . Eleven of the teachers had previously programmed using HyperCard . In the late - 1990s when HyperCard began to disappear from the programming landscape they moved on to other tools , according to most of these teachers , with regret , because of the familiarity they had with it and the stock of applications that some had created . VB was available and conceptually similar enough that 6 of these teachers made the transition . Five teachers migrated to SuperCard , which is quite similar to HyperCard and had the advantage for some teachers that it runs on the Macintosh platform . Three teachers also mentioned having considered using MetaCard , another product similar to HyperCard , but it cost too much . When asked about other development activities , 6 participants said they were interested in web development and had toyed with it , but did not have the time to master it . Four of them went on to say that their schools were slow in developing web resources , even static ones , and policies about using the web also evolved slowly . In addition , they observed that they or their administrators had security concerns about educational materials or applications on the web . Generally , the teachers were not familiar with programming systems targeted specifically for developing animations and interactive simulations . Only one individual knew of such a system , Stagecast Creator , but this teacher had no experience with it . Three teachers noted that HyperStudio can be used for multimedia presentations and animations by teachers and students . However , as one teacher said , “it doesn’t involve much real programming . ” 5 . Situational Factors Situational facilitators are settings , people , and resources that promote end - user development . Inhibitors are mostly constraints on teachers that reduce their ability to engage in end - user development . The data in this section come from the interviews and , to a lesser extent , the contextual inquiry . See Table 2 for a summary of results . A strong facilitator for teachers is their own domain knowledge . Teachers expressed repeatedly in their interviews and during the contextual inquiry that their knowledge of their subject and their pedagogical experience are the foundation of the applications they create for students . They know what the learning goals of a lesson are , what materials are available , and how they can use them to design a lesson that will meet the goals . One teacher contrasted this with a professional developer who creates software without “being the owner” of it . Teachers , by contrast , have the advantage of knowing what works in a face - to - face setting and can translate that into a virtual setting . People in the environment are also facilitators . All the teachers interviewed talked of difficulties implementing their vision of a program . However , 15 teachers tempered this by explaining that they could generally get help from colleagues . They acknowledged that they did not have very many programming peers in their school , but for these 15 Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE there were teachers with whom they could discuss a program . An extension of this practice , reported by 6 teachers , was true collaborative programming . This usually began by sharing programs , for example , an interactive lesson that was created by one teacher was passed to a colleague for that person’s use . In one scenario described in our interviews , the interviewee and another teacher - programmer had an interest in the same program and agreed to modify it . The two of them scheduled time to work on it together , discussing and critiquing the design and implementation of the modifications as they worked at the computer . The teachers who experienced this kind of collaborative work were positive about it . They perceived that they got the work done faster and , more importantly , with less frustration . This collaborative programming is somewhat similar to pair programming , which has proved to be a support for students learning to program [ 20 ] . Another form of human facilitation was provided by gurus [ 4 , 7 ] . As reported by 4 teacher - programmers , in some middle schools and high schools there were fellow teachers who had greater programming expertise . Typically , this person was a teacher who taught programming and who liked to share his or her expertise with others ; however , in one case the guru was simply an end user who had developed strong programming skills . The guru was described as having the role of “coach” or “fixer , ” depending on how the teacher perceived the guru’s behavior . Teachers acknowledged the enthusiastic help that they got from their local expert . One teacher recounted a unique situation in which she went to the computer teacher in his capacity of guru , and the computer teacher threw the problem out to his students to solve . The students loved to fix a real world problem and the teacher got her problem solved within two class periods . All teachers reported using some form of help provided within their programming environment or on the web , as well as relying on published books . With respect to help systems the teachers generally agreed that they could find help on carrying out new procedures step - by - step . However , a lack of examples was mentioned by 13 teachers . These teachers spent time scanning books and looking on the web for examples that corresponded to their situation . Two teachers also reported posing questions about programming problems online . They reported very mixed results from all these methods . Sometimes they did find examples , but the examples did not correspond exactly to their situation and they had difficulty customizing the example code to fit into their program . This is regarded as one of the frustrating parts of programming by teachers . On the other hand , they said that tutorials are easy to find in books and on the web , but again they sometimes failed to meet the specific needs of the teachers , which were usually quite targeted on a specific issue . As a final note on facilitators in the environment , 10 teachers acknowledged that they valued the appreciation that they got from students or colleagues when they developed an effective application . They felt satisfaction when students liked a program , and that became a motivational facilitator for the teachers . Facilitators Teachers’ subject domain knowledge Advice and help from colleagues Sharing programs Collaborative programming Local gurus Tutorials , books , VB help system Appreciation of students and other teachers Inhibitors Not enough time to program Programming takes a lot of time Lack of concrete examples to guide programmers Programming is an intermittent activity Difficult to find time to work with other programmers Teachers in a constant state of learning Little encouragement by school administration No “culture of programming” in schools Table 2 : Facilitators and inhibitors to programming in the school environment . Inhibitors to end - user programming were numerous in the school environment . The universal complaint of the interviewees was not having enough time to spend on programming . As described by the informants , teachers are with students in the classroom almost the whole work day . They may have 45 - 90 minutes during the day when they are not scheduled in the classroom , but that time is used for meetings , course preparation , grading , and administrative duties . Some programming can be done in this “free” time , but programming necessarily comes after all the on - going duties that teachers are required to do . According to the teachers , this places a strong limitation on programming time . As a result , almost all teachers we interviewed ( 19 out of 22 ) do programming outside work hours or in summer . Furthermore , the supporters that teachers rely on in programming ( colleagues , gurus ) have the same constraints . As reported previously , all the teachers acknowledged that their limited training in programming was a constraint . They knew what they wanted to achieve and how the interaction should unfold from a student’s viewpoint . However , their knowledge gaps about programming made it hard for Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE them to achieve their goals . Programming took a great deal of time because they were constantly learning as they programmed . The teachers clearly expressed the paradox of the active user [ 3 ] . As one teacher said , “I don’t have much time [ to program ] to start with , and I end up spending half of it paging through books . ” Not being able to program fluidly was a major frustration of teachers . A related point was that programming is an intermittent activity for teachers . It is done as needed and as time permits . That usually means that there are relatively long breaks between programming sessions . All teachers reported that they forget things they once had mastered and have to relearn them on the fly . Finally , there was much discussion in the interviews of the culture of schools and schoolteachers . Programming is not a widespread activity in schools . Only a small number of teachers who have some background in programming and motivation to do it choose to program . Most teachers have “no understanding and no interest” in programming , as stated by one of our interviewees . According to this informant , non - programming teachers are not a source of support , nor are they an obstacle . More importantly perhaps , 17 teachers agreed that their school administration does not encourage or facilitate programming efforts . With no tangible rewards for programming , our informants programmed because of their personal motivations . 6 . Programming Factors This section reports on the facilitators and inhibitors in the programming tasks , language , and environment , as perceived by teachers . Much of the data come from the contextual inquiry , as well as some data from the interviews . Results are summarized in Table 3 . In the interviews teachers discussed programming tasks . Teachers ( 20 out of 22 ) reported that the biggest facilitator to programming was working on an existing program . Program maintenance tasks were described as much easier to achieve than creating a new program . As one teacher explained , he felt daunted by the prospect of writing a new program because the whole design had to be planned . On the other hand , if he modified a program he usually could keep the overall structure of the program and make changes to some local parts or modify the structure in minimal ways . Not surprisingly , the informants all tried to take advantage of reuse . In developing a new program , all teachers reported that they usually tried to base the design on an existing one . They also widely reported code reuse from existing programs . A very common observation of teachers ( 18 of 22 individuals ) was that they relied as much as possible on cut - and - paste of code in reuse . This made their tasks easier because they did not have to retype the code . Extensive use of cut - and - paste has been observed in several studies of programming , e . g . , Ko , et al . [ 10 ] . Along with reuse by cut - and - paste , 17 teachers found that a large set of built - in functions eased their job in a major way . Often it meant that they avoided error - prone logical comparisons and looping [ 6 ] . Fourteen teachers agreed that creating the user interface of a program was easy . They were familiar with many concepts and conventions from their experience using desktop applications , including direct manipulation , menu - based interaction , toolboxes , and standard widgets . In the contextual inquiry 3 of 5 participants said that designing the interface was the most satisfying part of programming in VB . Interestingly , 2 of the teachers in the contextual inquiry reported sketching user interface windows on paper before mocking them up in VB . When queried they said that they had not been taught to do this but that it seemed a natural way to start ; thus on their own they adopted paper prototyping practices prominent in HCI design . Using VB , teachers said that it was fairly easy to design forms and specify properties of objects because there was no code to write . As one participant in the contextual inquiry said , this made her feel that she were making progress up front and that it gave her motivation to go on to the hard part of coding . On the other hand , she did realize that the interface options were complex and she only knew the basics : “I only know about a few properties , but it’s usually enough for what I need . ” By the account of 3 of the 5 participants in the contextual inquiry , changes that teachers made in programs tended to be small and incremental , and this was an aid to programming . For example , a teacher might add a new set of practice problems for students . This affected one part of the program and was simply a substitution of one set of problems for another . Updating material without substantially changing the program scope or structure was the most common kind of maintenance mentioned . The need to make changes and quickly run the program to test them was identified in the contextual inquiry . Four of the 5 teachers said that they made quick iterations on a single change until it was correct . They tended not to make batches of changes because they wanted to be sure that the change was correct before going on to another modification in the program . This isolation strategy was seen as a way of keeping their focus simple . It helped them to concentrate on one thing at a time . In addition , if an error occurred they could assume that the problem must be with the change they just made . Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE Facilitators Maintenance of an existing program Designing the interface windows Reuse of design and code Cut - and - paste Small changes Incremental coding and testing Built - in functions Inhibitors Designing and implementing a new program Comprehending and modifying a program of another teacher , disjunct knowledge Lack of documentation Frequent syntax errors Understanding and using built - in functions Code interactions Too many features of the IDE Understanding error messages , debugging Table 3 : Facilitators and inhibitors to programming in the programming language , environment , and tasks . To some degree , the inhibitors in the programming environment were the inverse of the facilitators . As mentioned previously , designing and writing a new program was considered an inhibitor by teachers . In creating programs , teachers tried to the largest extent possible to follow a strategy of analogy and reuse . While maintenance tasks were perceived as easier then designing and writing code , there were inhibitors to maintenance activities too . All of the informants in the contextual inquiry observed that modifying a program of one’s own was easier then modifying a program of another teacher . They learned things from seeing the code of another programmer but spent much time trying to comprehend it . As teachers worked on the maintenance task in the contextual inquiry , questions arose such as , “what does this variable name stand for , ” “where does the sorting happen , ” “when does the program write to the file , ” and “how do I know if the average has been updated . ” Teachers who worked on programs of others also experienced problems because of the conventions of other programmers and the disjunct knowledge of end - user programmers . Programmers sometimes developed programming conventions that were confusing to other readers of the program , for example , the ways they displayed information on a form . The problem of disjunct knowledge occurred when an original programmer used objects , properties , and language constructs in the program that were unknown to others who reused it later . This happened because teacher - programmers had their own limited subsets of programming knowledge and were not broadly familiar with alternative ways to achieve the same results . All 5 participants in the contextual inquiry found that comprehension was also slow and tedious because of the lack of documentation . It was often the case that the original programmer had not provided much internal program documentation . Therefore , a later programmer handling the code had few clues about the program . Generally , the variable names were meaningful , but the shorthand for naming made it difficult for a reader to decipher it without help . Two teachers in the contextual inquiry said that they had the same problem of understanding the code , given poor commenting , when they revisited code of their own that they had not touched for a long time . Where to find code was identified as a problem by 3 teachers in the contextual inquiry . The scripts were associated with different events , e . g . , clicking a button . This meant that the code was distributed . These teachers had problems determining where to look for certain code because it was not always clear to them what event initiated an action . Other research has identified this problem for novice programmers in event - driven programming [ 19 ] . Syntax was sometimes an inhibitor to programming . As stated by one teacher , “it’s just a set of rules . ” However , with their intermittent use of the language , teachers often made syntax errors . There was a high cost of finding and correcting the errors because they failed to notice that a syntax error occurred or could not easily identify the error in a statement and its solution . The built - in functions were definitely a facilitator that helped users avoid logic and looping errors . However , they were also inhibitors because teachers sometimes could not determine which built - in function would accomplish the job at hand . Three types of problems were observed among 4 of the teachers in the contextual inquiry . First , a programmer simply was unable to find a function that seemed appropriate , after searching for a long time . In this case , the programmer did not know what to do and tried to write a function using language primitives . In the second case , the description of the function was similar to another function and the differences were not clear to the programmer . Finally , there were 2 cases where programmers found a single function that seemed relevant to the problem at hand , but the description did not make it clear whether the function would do exactly what the programmer wanted . A further problem was determining the correct parameters of functions . Teachers wanted to see concrete examples to resolve these problems . Cut - and - paste was an important and much relied upon facilitator , as described above . However , teachers Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE made errors in identifying the code segment to copy and in copying the precise range of code to be used . In the contextual inquiry we observed 6 errors ( among the 5 teachers ) of having failed to copy the full segment needed or having copied extra code , as well as failures in modifying the pasted code to fit with its new context , results also reported in Ko , et al . [ 11 ] . During the contextual inquiry , 4 of 5 teachers reported that it was difficult to coordinate all of the related parts of a program to make it work properly . Their concern was identifying how one part of the code interacted with other parts . In the contextual inquiry they were observed to make changes inconsistently and fail to identify parts of the program that were affected by a change elsewhere . This problem occurs when a programmer makes local changes without having a systematic understanding of the whole program [ 12 ] . In a global sense , an inhibitor in programming was the size and complexity of the IDE [ 11 ] . The number of features available was overwhelming , according to 11 teachers in the interview . Teachers explained that they learned a basic set they were familiar with and could handle . However , when they were faced with doing something they had never done before , they had difficulty in determining how to go about it . A complaint of 12 teachers was that they spent too much time searching for information and reading it to determine whether the information fit their need . Two teachers said that when they had to use new features they were always uncertain about its correctness . In the interviews teachers agreed strongly that correctness of their programs was essential . One teacher in the interview posed an example of the problems that could arise if a gradebook application was incorrect , or if an interactive simulation gave wrong results . According to the teacher , these were “not life - and - death matters . ” However , such errors could lead to difficulties with students and parents . One example that another teacher gave was that an angry parent had come to his classroom , complaining ( correctly ) that he had found several fundamental errors in a textbook . The teacher imagined similar reactions to errors in software , not to mention confusion of the students themselves and embarrassment to the teacher . Although teachers recognized the importance of quality of software , they were not clear about how to achieve it , a result also found in Rosson , et al . [ 16 ] . First , the meaning of error messages was often not clear to teachers . More generally , there was no error message , simply unexpected output of the program at run - time [ 10 , 11 ] . In the interviews , only half the teachers reported having used the debugging facilities of their preferred environment . Teachers relied on their own unaided ability to locate bugs . Most often they simulated suspect areas of code ; sometimes they inserted print statements , as observed by Gugerty and Olson [ 8 ] . 7 . Discussion and Conclusion Teachers face many obstacles to end - user development . The obstacles come from multiple sources – situational , knowledge and programming factors . The most serious seem to be the lack of time to program and low programming knowledge . These obstacles cannot realistically be removed because of fundamental constraints of the school situation . Because teachers do not have time to program it is hard for them to gain more skill . As a result , teachers are always learning as they program . This makes their programming slow and leads to frustrating challenges . Nevertheless , there are significant facilitators : their motivation for programming , their subject domain knowledge , other teacher - programmers in their environment , and the programming tasks that they choose to undertake . Given the constraints on teachers , what kinds of support might realistically help them beyond the supports they currently use ? Below two types of support are outlined , both of which involve improving programmers’ knowledge . First , teachers may benefit from minimalist training at key points in programming . Teachers already report that they have to stop and learn while programming . Minimalist learning [ 2 ] is well suited for this setting . Minimalist learning materials are task focused and designed to deal with the user’s current concern . The materials strive to involve the user actively and to make the actions that need to be taken clear without being too directive . This encourages the user to think while acting , rather than following instructions by rote . The interviews as well as Ko , et al . ’s work on barriers to programming [ 11 ] indicate that end users have difficulty knowing which tools in the environment are useful at a certain moment . One could envision a system that directs a user to a minimalist tutorial based on the individual’s activity in the environment . For example , a good use of minimalism for teachers might be debugging . If a user made unsuccessful attempts to run a program , the user could be invited to click on a debugging tutorial designed in a minimalist style . The user would learn about the debugger by actively using the main debugging features , supported by minimal instructions , hints to help reason about the debugging situation , and questions leading the user to notice important aspects of the debugger . After finishing the minimalist tutorial , the user would be ready to return to debugging his or her program . Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE Second , extrapolating from initiatives in computer - supported collaborative learning , particularly the Math Forum ( http : / / mathforum . org ) , it might be useful for teachers to have the opportunity to participate in continuing education via virtual workshops . These workshops would allow teachers to learn from any location . Each virtual workshop could target a particular programming topic . Although it might be most favorable pedagogically for the workshop to be synchronous , the evidence from teachers suggests that virtual workshops would be used more if asynchronous . Users could log into an online learning environment at any time . Learning materials , including instructional text , multimedia materials , FAQs , and programming exercises would be posted , and users could view the materials and work on the exercises at their convenience . In addition , teachers might optionally participate in an asynchronous online forum , where they could ask questions and respond to other participants . The instructor would participate in the online forum giving advice and expertise . This approach , as well as minimalist learning , could allow teachers to continue building their programming skills in a convenient way over time , in spite of constraints . . 8 . Acknowledgments This work was supported in part by the EUSES Consortium via NSF grant CCR - 0324844 . 9 . References [ 1 ] Beyer , H . and Holtzblatt , K . Contextual Design : Defining Customer - Centered Systems . Morgan Kaufmann , San Francisco , CA , 1998 . [ 2 ] Carroll , J . M . Minimalism Beyond the Nurnberg Funnel . MIT Press , Cambridge , MA , 1998 . [ 3 ] Carroll , J . M . and Rosson , M . B . Paradox of the active user , Interfacing Thought . MIT Press , Cambridge , MA , 1987 , 80 - 111 . [ 4 ] Curtis , B . , Karsner , H . , and Iscoe , N . A field study of the software design process for large systems . CACM , 31 ( 11 ) , 1988 , 1268 - 1287 . [ 5 ] Cypher , A . and Smith , D . KidSim : End user programming of simulations . Proc . CHI’95 , ACM , NY , 27 - 34 . [ 6 ] Engebretson , A . and Wiedenbeck , S . Novice comprehension of programs using task - specific and non - task - specific constructs . Proc . IEEE Symposia on Human - Centric Computing and Environments , 2002 , IEEE Press , 11 - 18 . [ 7 ] Gantt , M . and Nardi , B . A . Gardeners and gurus : Patterns of cooperation among CAD users . Proc . CHI’92 , 1992 , ACM , NY , 107 - 117 . [ 8 ] Gugerty , L . and Olson , G . M . Comprehension differences in debugging by skilled and novice programmers . In Soloway , E . and Iyengar , S . ( Eds . ) , Empirical Studies of Programmers . Ablex , Norwood , NJ , 1986 , 13 - 27 . [ 9 ] Kahn , K . Generalizing by removing details . CACM , 43 ( 3 ) , 2000 , 104 - 106 . [ 10 ] Ko , A . J . Preserving non - programmers ' motivation with error - prevention and debugging support tools . Proc . IEEE Symposia on Visual Languages and Human - Centric Computing , 2003 , IEEE Press , 271 - 272 . [ 11 ] Ko , A . J . , Myers , B . A . , and Aung , H . H . , Six Learning Barriers in End - User Programming Systems , Proc . IEEE Symposia on Visual Languages and Human - Centric Computing , 2004 , IEEE Press , 199 - 206 . [ 12 ] Littman , D . C . , Pinto , J . , Letovsky , S . , and Soloway , E . Mental models and software maintenance . In Soloway , E . and Iyengar , S . ( Eds . ) , Empirical Studies of Programmers . Ablex , Norwood , NJ , 1986 , 80 - 98 . [ 13 ] Nardi , B . A Small Matter of Programming . MIT Press , Cambridge , MA , 1993 . [ 14 ] Rader , C . , Brand , C . and Lewis , C . Degrees of comprehension : Children’s understanding of a visual programming environment . Proc . CHI’98 , 1998 , ACM , NY , 351 - 358 . [ 15 ] Repenning , A . and Perrone , C . Programming by analogous examples . CACM , 43 ( 3 ) , 2000 , 90 - 97 . [ 16 ] Rosson , M . B . , Ballin , J . , and Nash , H . Everyday programming : Challenges and opportunities for informal web development . Proc . IEEE Symposia on Visual Languages and Human - Centric Computing , 2004 , IEEE Press , 123 - 130 . [ 17 ] Rosson , M . B . and Seals , C . D . Teachers as simulation programmers : minimalist learning and reuse . Proc . CHI2001 , 2001 , ACM , NY , 237 - 244 . [ 18 ] Smith , D . C . , Cypher , A . , and Tesler , L . Novice programming comes of age . CACM , 43 ( 3 ) , 2000 , 75 - 81 . [ 19 ] Wiedenbeck , S . and Engebretson , A . Comprehension strategies of end - user programmers in an event driven application . Proc . IEEE Symposia on Visual Languages and Human - Centric Computing , 2004 , IEEE Press , 207 - 214 . [ 20 ] Williams , L . A . and Kessler , R . R . All I really need to know about pair programming I learned in kindergarten . CACM , 43 ( 5 ) , 2000 , 108 - 114 . Proceedings of the 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) 0 - 7695 - 2443 - 5 / 05 $ 20 . 00 © 2005 IEEE