a r X i v : 2403 . 09409v1 [ c s . H C ] 14 M a r 2024 “Like a Nesting Doll” : Analyzing Recursion Analogies Generated by CS Students using Large Language Models Seth Bernstein Temple University Philadelphia , PA , United States seth . bernstein @ temple . edu Paul Denny University of Auckland Auckland , New Zealand paul @ cs . auckland . ac . nz Juho Leinonen University of Auckland Auckland , New Zealand juho . leinonen @ auckland . ac . nz Lauren Kan Temple University Philadelphia , PA , US lauren . kan @ temple . edu Arto Hellas Aalto University Espoo , Finland arto . hellas @ aalto . ﬁ Matt Littleﬁeld Temple University Philadelphia , PA , US matt . littleﬁeld @ temple . edu Sami Sarsa Aalto University Espoo , Finland sami . sarsa @ aalto . ﬁ Stephen MacNeil Temple University Philadelphia , PA , US stephen . macneil @ temple . edu ABSTRACT Grasping complex computing concepts often poses a challenge for students who struggle to anchor these new ideas to familiar ex - periences and understandings . To help with this , a good analogy can bridge the gap between unfamiliar concepts and familiar ones , providing an engaging way to aid understanding . However , creat - ing eﬀective educational analogies is diﬃcult even for experienced instructors . We investigate to what extent large language models ( LLMs ) , speciﬁcally ChatGPT , can provide access to personally rel - evant analogies on demand . Focusing on recursion , a challenging threshold concept , we analyzed the analogies generated by 385 ﬁrst - year computing students . They were provided with a code snippet and tasked to generate their own recursion - based analo - gies using ChatGPT , optionally including personally relevant top - ics in their prompts . We observed a great deal of diversity in the analogies produced with student - prescribed topics , in contrast to the otherwise generic analogies , highlighting the value of student creativity when working with LLMs . Not only did students enjoy the activity and report an improved understanding of recursion , but they described more easily remembering analogies that were personally and culturally relevant . CCS CONCEPTS • Social and professional topics → Computing education . KEYWORDS analogies , large language models , computing education Permission to make digital or hard copies of all or part of this work for personal or classroomuseisgranted without fee provided that copiesarenot made ordistributed for proﬁt or commercial advantage and that copies bear this notice and the full cita - tion on the ﬁrst page . Copyrights for components of this work owned by others than ACMmustbehonored . Abstractingwith credit ispermitted . Tocopy otherwise , orre - publish , topost on serversortoredistributeto lists , requirespriorspeciﬁcpermission and / or a fee . Request permissions from permissions @ acm . org . ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy © 2024 Association for Computing Machinery . ACM ISBN 978 - 1 - 4503 - XXXX - X / 18 / 06 . . . $ 15 . 00 https : / / doi . org / XXXXXXX . XXXXXXX ACM Reference Format : Seth Bernstein , Paul Denny , Juho Leinonen , Lauren Kan , Arto Hellas , Matt Littleﬁeld , Sami Sarsa , and Stephen MacNeil . 2024 . “Like a Nesting Doll” : Analyzing Recursion Analogies GeneratedbyCS Studentsusing LargeLan - guage Models . In Proceedings of Proceedings of the 2024 ACM Conference on Innovation and Technology in Computer Science Education ( ITiCSE ’24 ) . ACM , New York , NY , USA , 7 pages . https : / / doi . org / XXXXXXX . XXXXXXX 1 INTRODUCTION Learning to program is challenging because students may strug - gle to connect unfamiliar terms and concepts to existing knowl - edge and to their everyday lived experiences . Especially for dif - ﬁcult threshold concepts [ 4 , 37 ] , like recursion , students beneﬁt from high - quality explanations or visual representations such as visualizations and conceptmaps [ 37 ] . Analogies and metaphorsare another useful pedagogical technique which connect unfamiliar concepts to ideas that students already intuitively understand [ 8 , 14 , 21 , 39 ] . Analogies and metaphors have been previously studied in computing education contexts [ 1 – 3 , 7 , 11 , 13 , 16 , 24 ] . However , it has been shown that students struggle to craft high - quality analo - gies and that they could beneﬁt from additional scaﬀolding [ 17 ] . Large language models ( LLMs ) have recently been shown to generate high - quality explanations [ 25 , 28 ] . Students even prefer explanations generated by an LLMto ones generated bytheir peers [ 25 ] . Consequently , LLMs may be useful tools for scaﬀolding students trying tocraftanalogies . However , althoughthere is someevidence that LLMs can generate analogies [ 9 , 30 ] , there has not yet been any systematic investigation into how students might use LLMs to generate their own analogies . Given this gap in the literature , we investigated the following research questions : RQ1 What types of analogies do students generate to explain re - cursion when given access to an LLM ? RQ2 What do students think about using LLMs to generate their own analogies ? In this paper , we conducted a study with a sample size of over 350 students at a large public research university . As part of their lab on recursion , a well - known threshold concept that is challenging for many students [ 4 , 37 ] , students were asked to use ChatGPT to ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy Anon , et al . craft their own analogies to explain recursion using any personally relevant topic as a theme . We collectedstudent responses to survey questions and analyzed their generated analogies and correspond - ing prompts . Our results show that when students explicitly spec - iﬁed the topic of the analogy in their prompt , the resulting analo - gies were more diverse , featuring a diﬀerent distribution of topics compared to those produced by the LLM when topics were not pre - scribed . This suggests that involving students in crafting analogies with ChatGPT leads to more creative and relevant analogies com - pared to relying solely on the model . Students expressed positive sentiments about the activity , noting instances where the model - generated analogies aided their understanding and retentionPrevi - ous studies have established the eﬀectiveness of analogies in com - puting education [ 1 – 3 , 7 , 13 , 16 ] , which is not the focus of this paper . Instead , this study focuses on what analogies students pro - duce and their potential for engagement . Future work will focus on systematically investigating the impact on student learning . 2 RELATED WORK 2 . 1 Analogies to Explain Computing Concepts Explanations are critical for helping students understand complex topics . Over twodecades ofcomputingeducationresearch has demon - strated how practicing ‘explain in plain English’ questions [ 43 ] and self - explanations [ 33 , 41 , 42 ] can provide students with short - term and long - term beneﬁts . More recently , computing education re - searchers have begun investigating the use of analogies to make unfamiliar concepts more approachable for students . Often , analo - gies are carefully developed by instructors to convey complex con - cepts such as parallel programming [ 2 , 3 , 13 ] , introductory com - puting [ 7 , 17 , 19 ] , and algorithms and data structures [ 11 ] . Analogies are a pedagogical toolthat equates two disparate con - cepts based on their similarities in at least one aspect . In comput - ing education , where many unfamiliar terms and concepts may seem completely disconnected from previously learned concepts and lived experiences , analogies have the ability to connect these complex concepts to ones that are more familiar to the learner . For example , an algorithm is like a recipe , a bitwise operator is like a light switch , and a memory address is like a house num - ber . Analogies do not need to perfectly describe the concept to be useful . Analogies help to provide an intuition for the concept which may help students get passed an initial hurdle in under - standing . In recent work , Harper et al . investigated the potential of student - generated analogies in computing education , particu - larly in fostering comprehension of abstract computing concepts like variable scope [ 17 ] . Their work showed that students faced challenges in achieving complete and precise structural alignment , along with maintaining an appropriate level of abstraction across their analogy mappings . Bettin et al . showed that when provid - ing students with analogies , preferences aboutthe analogies varied across students and students did not always use a given analogy in the same way [ 2 , 3 ] . These prior studies suggest that students beneﬁt from analogies but that analogies are ideally personalized based on each students needs and experiences . Additionally , stu - dents could greatly beneﬁt from targeted scaﬀolding to address these challenges and enhance their ability to generate eﬀective analogies . 2 . 2 Generating Learning Materials with LLMs Large language models ( LLMs ) provide opportunitiesfor educators to generate many high - quality learning materials at scale [ 10 , 25 , 28 – 30 ] . Finnie - Ansley et al . demonstrated that Codex could pro - duce programming assignments that were useful as a ﬁrst draft for educators [ 10 ] . Since then , LLMs have been used to generate expla - nations [ 25 – 28 , 30 ] , programming assignments [ 38 , 40 ] , and to re - spondtostudents’ help requests [ 20 , 22 ] . More recent workhas pro - vided empirical evidence that students are legitimately relying on Generative AI as a source of help when they get stuck [ 22 , 34 , 44 ] . Several papers have recently explored the potential of LLMs to enhance code comprehension , with a particular focus on their abil - ity explain codetostudents . In an initial studyby MacNeil et al . , the researchers demonstrated that LLMs were able to trace code execu - tion , articulate the high - level purpose , and oﬀer analogies for pro - gramming concepts [ 30 ] . This initial investigation focused on the capabilities but not on the associated quality of the explanations and analogies . MacNeil et al . later extended their investigating by studying students’ preferences and engagement with explanations generated by LLMs , considering variations in the types of expla - nation provided [ 28 ] . Leinonen et al . demonstrated that the expla - nations produced by LLMs were preferred by students when com - pared to explanations generated by their peers [ 25 ] . Despite the considerable attention LLM - generated explanations have received , there remains a gap in the literature regarding a systematic study of analogies generated by students with the assistance of LLMs . 3 METHOD 3 . 1 Study Context The data for this study were collected from an introductory pro - gramming course taught in Spring 2023 at the University of Auck - land , a large public research University in New Zealand . The 12 - week course used C as the programming language and is a required course for students in the ﬁrst year of the Engineering program . These students specialize in their second year based on GPA , and thus students in the course have an incentive to perform well in all of their ﬁrst - year courses , even if they do not intend to specialize in computing topics . When our data were collected , 889 students were enrolled in the course and we collected 841 responses ( 95 % of enrolled students ) . The course featured weekly lab sessions that generally included programming exercises that are automatically graded . Ethics ap - proval was granted by the institution ( UAHPEC25279 ) . 3 . 1 . 1 Recursion : The topic of recursion is introduced in the penul - timate week of the course , and is the focus of the ﬁnal lab in Week 12 . As a threshold concept [ 37 ] , recursion is considered a diﬃcult topic for many students . This is supportedby the literature [ 15 , 35 ] , as well as comments submitted by students on the end - of - semester teaching evaluations ( examples from 2022 included : “spend some more time on recursion because I feel like it’s quite a diﬃcult topic to get on top of” and “I found the visual representation of recursion and memory quite hard to get my head around” ) . Furthermore , un - derstanding recursion goes beyond memorizing deﬁnitions ; it en - compasses the ability to apply , test , and utilize the concept in real - world scenarios , thereby opening up new avenues for mental mod - els and program design . The intricacies of recursion include both “Like a Nesting Doll” : Analyzing Recursion Analogies Generated by CS Students using Large Language Models ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy theoretical signiﬁcance and substantial practical application , mak - ing it a transformative element of computing education [ 23 ] . 3 . 2 Materials In addition to the standard lecture materials used in the course for teaching recursion , which included recursive images ( i . e . the Droste eﬀect 1 ) , visualizations ofstack frames during recursive calls , and common but simplistic text - book examples ( such as factorial and Fibonacci ) , students were also provided with an example of an analogy as part of the preparation materials for the Week 12 lab . This example was prefaced by the statement : “Analogies can be use - ful for teachingdiﬃcult concepts becausethey relate unfamiliar ideas to something already known , making the new information easier to understand . For instance , an analogy often used in physics textbooks compares electrical circuits to hydraulic circuits” , and then demon - strated the output from ChatGPT when asked to “use an analogy to explain how electrical circuits work” . The output compared electri - cal circuits to a plumbing system , drawing comparisons between voltage / pressure , current / ﬂow rate , and resistance / constriction . The ﬁrst exercise in the lab asked students to generate an anal - ogy using ChatGPT to explain a recursive function that appeared in the course textbook . The function prints a string in reverse , and is shown in Figure 1 . The instructions given to students for this exercise are shown in Figure 2 . We assumed that many ( but not all ) students had OpenAI accounts for ChatGPT access . To ensure all students had access , we also provided a clone that we had built which served as an interface to ChatGPT but did not require a lo - gin . void PrintReverse ( char * word ) { if ( * word = = ' \ 0 ' ) { return ; } else { PrintReverse ( word + 1 ) ; printf ( " % c " , * word ) ; } } Figure 1 : Function to print a string in reverse , for which stu - dents were asked to generate an analogy . 3 . 3 Data Collection and Analysis The analogies that students created could connect to any topic or theme of their choosing ( see the relevant instructions under ‘Themes’ in Figure 2 ) . Based on the 841 responses , we observed 456 instances ( 54 . 2 % ) where students did not include the prompt they used to generate the analogy , even though they were instructed to do so . That data was discarded from this analysis . 3 . 3 . 1 Stratifying the Analogies by Prompt Topic . Using the remain - ing 385 analogies which contained an analogy and a prompt , we stratiﬁed the data based on whether the prompt explicitly speciﬁed a topic . This sample sized was used for all analysis , for example , one student used the prompt : “Can you make an analogy to do with 1 https : / / en . wikipedia . org / wiki / Droste _ eﬀect Try using ChatGPT to create a few analogies to help explain how the PrintReverse ( ) function uses recursion to print a string in reverse . Your ﬁrst one might not be that good so try diﬀerent prompts . Here are some tips : Clarity . The prompt should clearly deﬁne what you want the model to do . Avoid ambiguity . For instance , instead of " Tell me about dogs , " use " Provide a detailed description of the characteristics , behavior , and care required for domestic dogs . " Context . ChatGPT responds to the immediate context of the prompt . So , establishinga clearcontextis crucial . For example , theprompt " Translate thefollowingEnglishtexttoFrench : ’Hello , howareyou ? ’ " providesclear context and instructions . Themes . Analogies are most eﬀective when they use themes that you are familiar with or interested in . Consider choosing a theme ( like sport , books , or anything else you are interested in ) to help generate an inter - esting analogy . Precision . Precise prompts yield precise responses . For example , if you want a list , speciﬁcally ask forit : " Listthetop 10most populous countries in the world . " Choose your favorite analogy and submit it in the space below , along with the prompt ( you provided to ChatGPT ) used to create it . Please also describewhat you like about the analogy you created and why you think it would be helpful to understand the provided code . Figure 2 : Instructions provided to students for Exercise 1 . Pokemon for this code : < code > ” . The student explicitly speciﬁed the topic ( Student - Selected ) to be ‘Pokemon’ . An example where the student did not include a topic in their prompt is “provide me with a detailed and concise analogy of the code provided below to explain how the function uses recursion to print a string in reverse” . In the absence of a student - prescribed topic , ChatGPT will produce an analogy using a topic it selects ( GPT - Selected ) , which in this case of this example , was about a labyrinth . 3 . 3 . 2 Identifying the Topics and Themes of the Analogies . Each of the385analogies were codedbasedon theirtopic , with theprompts hidden to avoid bias . Each analogy could only be coded with one topic . Next , these topics were grouped thematically into 29 themes , with researchers mediating disagreements as needed . To enhance reliability , the researchers independently recoded all analogies us - ing these themes . A subset of 150 randomly selected rows was used to compute inter - rater reliability using Cohen’s Kappa , resulting in 0 . 83 for GPT - generated topics and 0 . 84 for student - generated analogies . Subsequent sections refer to these topics and themes . 3 . 3 . 3 Assessing the Diversity of the Analogy Topics . We measured the diversity of analogy topics generated by ChatGPT by comput - ing the number of distinct topics for the Student - Selected and GPT - Selected analogies . This number of distinct topics was divided by the number of total topics . This calculation resulted in a value be - tween 0 and 1 where a higher number indicates greater diversity of topics across the set . 3 . 3 . 4 ExemplarAnalogies . Toexemplify the types ofanalogies pro - duced by ChatGPT , we chose three exemplar analogies . Our selec - tion process was subjective with the goal to identify analogies that are particularly engaging and insightful . This process involved re - viewing a large randomly sampled subset of the analogies . We only ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy Anon , et al . reviewed analogies with associated student comments to report on students’ perspectives about the chosen analogies . 3 . 3 . 5 Thematic Analysis of Students’ Survey Responses . We ana - lyzed students’ open - responses using a reﬂexive thematic analysis method [ 5 , 6 ] . This process is ‘reﬂexive’ because it acknowledges that the researcher plays an active role in identifying the themes . We followed the six phases which include familiarizing yourself with the data , generating initial codes , searching for themes , re - viewing themes , and deﬁning and naming the themes . At each phase , team members discussed the themes to mitigate interpre - tation biases . 4 RESULTS 4 . 1 RQ1 : Analyzing the Generated Analogies We found that only 226 prompts ( 63 . 1 % ) contained an explicitly speciﬁed analogy topic ( Student - Selected ) . The average word count for analogies where the topic was not speciﬁed ( GPT - Selected ) was 179 . 2 words . When students speciﬁed the topic , the average word countincreased to235 . 5 ( a 31 . 4 % increase ) . Thissuggests thatstudent - speciﬁed topics may yield more detailed analogies . In this section , we present examples ofanalogies generated by students along with their reﬂections on the analogies . We also compare and contrast analogies in terms of the topic distribution and diversity . Imagine you’re a Pokémon Trainer on an adventure , and you’ve encountered a special ability called ’Reverse . ’ You have a friendly Pikachu by your side . Now , you come across a series of Poké Balls with letters inside them instead of Pokémon . As you walk through the tall grass , you ﬁnd these letter - ﬁlled Poké Balls one by one . You pick up each Poké Ball , and Pikachu helps you examine its content . Instead of revealing the letters immediately , Pikachu tells you to keep it in your backpack for now . You continue to explore , collecting more letter - ﬁlled Poké Balls as you go . After a while , you decide to take a break , and Pikachu suggests you start from the last Poké Ball you picked up . You retrieve the last Poké Ball from your backpack and examine it . Inside , you ﬁnd a letter . You show it to Pikachu , and Pikachu says , ’This letter comes from the last Poké Ball we picked up . Let’s keep it . ’ You repeat this process , one Poké Ball at a time , starting from the last one you picked up and working your way back through your collection . Pikachu helps you revealand remember the letters from each Poké Ball . In the code , your ’PrintReverse’ function is like Pikachu’s assistance . It pro - cesses each character in the string ( each Poké Ball ) , keeps it in memory , and then starts revealing the characters in reverse order , just like you go through your collection of Poké Balls in reverse order , revealing and remembering the letters one by one . " = = = = PROMPT 2 : Can you summarisethat into steps ? • STEP 1 : You are a Pokémon Trainer on an adventure with your Pikachu , and you come acrossletter - ﬁlled Poké Balls . • STEP 2 : You collect these Poké Balls one by one and store them in your backpack without revealingthe letters inside . • STEP 3 : As you continue collecting , Pikachu suggests you start from the last Poké Ball you picked up . • STEP 4 : You retrievethe last Poké Ball from your backpack , reveala letter , and Pikachu notes that this letter comes from the last Poké Ball collected . • STEP 5 : You repeat this process for each Poké Ball , always starting from the last one and working your way back through your collection . • STEP6 : PikachuhelpsyourevealandrememberthelettersfromeachPoké Ball . Inthecode , your’PrintReverse’functionfollows asimilarpattern . Itprocesseseach characterinthe string , keepsit inmemory , and then startsrevealingthe characters in reverse order . Just like in the Pokémon analogy , you work your way backward through your collection of letters , revealing and remembering them one by one . Figure 3 : An Example Analogy Generated by P242 4 . 1 . 1 Example Analogies . In this section , we present three person - alized analogies generated by ChatGPT in response to prompts that speciﬁed a topic . Each analogy aligned with the student’s in - terests and is accompanied by comments from the respective stu - dent . Pokémon Trainer . In this analogy , shown in Figure 3 , the student imagines themselves as a Pokémon Trainer with a Pikachu , col - lecting letter - ﬁlled Poké Balls . The analogy provides a step - by - step process for ‘collecting’ all of the letters and then printing them in reverse order . This scenario is analogous to manipulating a string array where each Poké Ball corresponds to a character variable in a string array . The student ( P242 ) who generated this analogy com - mented about how LLMs give students the freedom to personalize the analogy topic , which increased their engagement : “I like itbecause its simple , andalso ﬁts withinthe Poke - mon world ( apart from the talking Pikachu part ) . Even thoughits not themost detailed , itgives you a goodgen - eral idea of what it is . The freedom of what theme of analogy you can ask . . . greatly increases the en - gagement / interest . ” ( P242 ) Harry Potter and the Chamber of Secrets . This analogy focused on the journey of Harry Potter through the Chamber of Secrets as an analogy for the traversing character pointers in code . The re - cursive exploration and revelation in the story are analogous to processing and reversing characters in a string . This student com - mented on the cultural relevance of this topic for them and other Gen Z students : “Using Harry Potter as an example for the analogy for Recursion ﬁts well because Harry Potter has a cult following and is widely popular amongst Gen Z . . . it allows students to understand how recursion works given a familiar context . . . associating the code with a story like the Chamber of Secrets , the concept of recur - sion can provide a sense of engagement , which makes the recursion ; a diﬃcult concept can be grasped easier than other potential analogies . ” ( P277 ) Russian Nesting Dolls . This last analogy was one of the most pop - ular analogy topics . It uses the analogy of Russian nesting dolls to illustrate recursion . The base case is compared to the smallest doll , with each recursive call opening a larger doll , ultimately leading to the reversal of the order as the process completes . This student talked about how this connected to fond memories as a child and their personal connection to the topic : “The reason why I love this analogy so much is it use the concept of unwrapping Russian Doll , which was one of my favourite toys and cartoon when I was young . In fact that when I heard { Anonymized Instructor } talked about recursion , I immediately remember the Russian Dolls . The AI successfully utilise that concept and clearly explain how the code use recursion to work which make me understand it without much problem . ” ( P163 ) 4 . 1 . 2 ComparingtheDiversity andDistributionofTopics . Asshown in Table1 , when students provideda speciﬁctopicfortheir prompts , the resulting analogies covered a much broader range of topics “Like a Nesting Doll” : Analyzing Recursion Analogies Generated by CS Students using Large Language Models ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy Table 1 : The top ten analogy themes and diversity of topics for analogies where the topic was speciﬁed in the analogy ( student - generated ) or not speciﬁed ( GPT - generated ) . Student - Generated GPT - Generated Count Theme Count Theme 27 Food / Cooking 53 Russian Nesting Dolls 23 Russian Nesting Dolls 37 Food / Cooking 14 Books 31 Books 13 Sports 22 Cards 9 Miscellaneous 9 Miscellaneous 6 Animals 5 Dominoes 4 Blocks / Legos 4 Mazes 3 Video Games 3 Transportation 3 Dominoes 2 Sports 3 Board games 2 Animals Distinct Topics : 169 Distinct Topics : 48 Total Topics : 226 Total Topics : 169 Diversity of Topics : 0 . 747 Diversity of Topics : 0 . 284 ( 0 . 747 ) than when no prompt topic was provided ( 0 . 284 ) . Addition - ally , there were diﬀerences in theme popularity based on the pres - ence or absence of a speciﬁed topic in the prompt . This suggests that the default topics that ChatGPT generates when not explicitly directed , do not fully align with the types of topics that students generate . This misalignment in interests suggests that there might be a disconnect between the natural inclinations of ChatGPT and the speciﬁc preferences or expectations of students . It raises ques - tions about the eﬀectiveness of default topic generation in meeting user needs , particularly in educational contexts where alignment with students’ preferences aids meaningful engagement . Examples of particularly creative topics speciﬁed within students’ prompts included these from P27 , P136 , P229 , P511 , and P18 : • “modern - day NSSL phase two launch vehicles” • “a magic worm that eats the words” • “Detective Recursive Rex” • “A grand book that contains the entire history of everything” • “Conveyor belt of sandwiches” 4 . 2 RQ2 : Analyzing Student Reﬂections To understand students’ experiences with the analogy generation activity , we conducted a thematic analysis of post - lab survey re - sponses about the learning activity along with comments about the analogies that students generated . The analysis revealed key themes related to educational value and personal relevance . 4 . 2 . 1 Educational Value . When learning complex concepts like re - cursion , students can often encounter a signiﬁcant barrier . Despite lectures and coding assignments designed to aid comprehension , many students described a crucial turning point in their under - standing frequently emerged through the use of analogies . As P705 describes it , they did not get a ‘real’ understanding of recursion un - til after the analogies : “It was initiallydiﬃcult to wrap my head around recur - sive functions , and initially , the code I submitted was actually not recursive . It was mostly afterthe analo - gies that I got a real understanding of what re - cursive functions were . I feel , that the concepts could be explained a bit more in the lectures . ” This feedback is further exempliﬁed by another student’s reﬂec - tion where they detailed the limited eﬀectiveness of coding tasks alone in grasping complex concepts like recursion . In their expe - rience , simply following procedural instructions was not enough to foster a deep understanding . The student’s revelation occurred while engaging with a multiple analogies : “I did the coding tasks ﬁrst , and I didn’t really under - stand recursion . I was just simply following the prepa - ration document ( which was very helpful for this lab ) . However , doing the analogy section helped me under - stand recursion a lot betterafter readingso many analogies lol . ” ( P584 ) The emphasis on ‘so many’ analogies reﬂects the extensive ex - ploration required to grasp a challenging concept , like recursion , and it also implies that it may be valuable to engage with multiple analogies . These responses highlighted the role that analogies can play in complementing traditional teaching methods . They suggest that the analogies ﬁlledstudents’ knowledge gaps which might not have been fully addressed through conventional teaching methods . 4 . 2 . 2 PersonalRelevance . Many studentsdescribed iterating toﬁnd the right analogy . For example , 515 tried creating multiple : “I tried creating few analogies based on diﬀerent top - ics ( eg . photo and school ) before creating this analogy about dogs . However , I think this analogy based on dogswas most interestingcomparedtoother analo - gies and if this analogy is provided to a person who is interested in pets , this analogy will be a very eﬀective analogy for them to understand how the ‘PrintReverse’ function works . Moreover , this analogy thoroughly ex - plains how recursion works in this function as well . ” Other students shared this opinion . For example , P310 described struggling withan initial analogy becausethey didnothave enough familiarity , but later found an analogy that resonated with them : “I found this particular response from [ ChatGPT ] to be the most eﬀective at helping me visualise the recursion process . I initially askedit to providea responseon the topic of sports but its analogy , based around relay running , wasfairlyconfusing . Hence , Iasked [ ChatGPT ] to providearesponsebasedonthe theme of history . I found this response to be more engag - ing as the reference to scrolls helped me further under - stand how recursion ’unravels’ itself once the base case is reached . ” ( P310 ) This ability to rapidly create and engage with analogies is a promising beneﬁt of LLMs . Many students described generating multiple analogies and talked about how some made sense to them while others did not . ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy Anon , et al . 4 . 2 . 3 OverallStudentSentiment . Overall , students were extremely positive about the activity . Based on manually coding the senti - ment of 150 randomly selected student reﬂections about the analo - gies , we observed only 8 instances ( 5 . 3 % ) contained a negative sen - timent , with 7 of those instances also containing positive senti - ments . P24 is the only instance that contained purely negative sen - timent : “This response took quite a number of attempts to pro - duce , because to start the responses were much too long . This one seems to have enough detail to get an understanding of the topic , but not too much that it becomes boring . ” However , with over 90 % of the responses containing positive sentiments , it is clear that the analogies were useful for students . In fact , students even described wanting to continue to use ChatGPT to generate analogies in the future . For example , P57 said : “Very nice lab on recursion , also the idea of being able to use chatGPT to create analogies is quite a nice thing to think about and I’ll deﬁnitely will be using this analogy part of chat in the future . ” 5 DISCUSSION In this study , over 800 students were asked to generate their own analogies as part of an introductory programming lab focusing on recursion . We observed that only 63 . 1 % of the students explic - itly speciﬁed a topic when prompting ChatGPT . This provided us with the opportunity to stratify the data by the analogies where the topic was explicitly chosen by students and analogies with a topic chosen implicitly by ChatGPT . Without stratifying the data , it would be unclear if students chose the topic . We observed that students tended to come up with more diverse analogy topics on average and the prevalence of topics also varied between the two groups . This disconnect in topical prevalence and diversity sug - gests that students may beneﬁt from being ‘in - the - loop’ when gen - erating analogies . This aligns with prior work [ 1 , 18 ] ; speciﬁcally that analogies should be ‘dialectic , not didactic’ where “analogy use and creation should be guided and discussed , not simply ‘given’ ” [ 1 ] . So while LLMs can easily generate bespoke analogies at any time on - demand , the interests , creativity , and culture of students is necessary to guide the process . In this way , LLMs may provide new opportunitiesforstudents toengage with computingconcepts in ways that are culturally relevant [ 12 , 31 , 32 ] . Multiple students commented on how the analogies could be relevant for their gen - eration , culture , or lived experiences . This new capability for stu - dents to generate personalized analogies with very little eﬀort un - dermines debates about which analogy is ‘best’ for teaching a spe - ciﬁc concept [ 1 ] . Theoretically , studentscouldcontinue togenerate analogies until they ﬁnd one that resonates with them and facili - tates their understanding . However , this may add fuel to debates about whether a weak analogy can be misleading or confusing for students . Prior work has shown that even poor analogies do not do “more damage” than not having an analogy [ 1 , 36 ] . Despite overwhelming positivecomments and the consistent ad - vantages highlighted by students , the analysis revealed a surpris - ing trend . Contrary to our initial expectations , a non - negligible number of the analogies provided by students were rather con - ventional , centering around familiar concepts like books and food . This raises intriguing questions about the prevalence of certain ar - chetypal analogies in educational settings . One surprising aspect was the limited incorporation of analogies related to individual - ized interests or niche hobbies , such as a speciﬁc musician’s lyrical style or references to movies . Further investigation is warranted to understand this trend better . Potential explanations include stu - dents’ reluctance to share personally relevant analogies , the per - ception that niche topics may be more engaging but less informa - tive , or the possibility that their best analogies , which may not have been the ﬁrst or the most “personally relevant” , were not initially shared . Additionally , analogies are memorable , which is great , but if they’re inaccurate , this may lead to memorable mis - conceptions . Future research should assess analogy accuracy , fo - cusing on its impact on student trust and the retention of knowl - edge andmisconceptions . These ﬁndings raise questionsabouthow muchscaﬀolding students shouldhave in crafting analogies . Should teachers encourage students to generate personally relevant analo - gies or provide ready - made prompts that allow students to insert a topic . 5 . 1 Limitations This studyencountered several limitations . Firstly , a large subset of students did not include their prompts along with their analogies , resulting in some data that was not able to be analyzed . While the large sample size helps mitigate these eﬀects , it remains uncertain whether some students faced challenges in generating analogies , and this aspect cannot be examined without the complete dataset . Another limitation is the absence of information on how many analogies students produced before selecting their ﬁnal one . Multi - ple students explicitly shared in their reﬂections that they created analogies for multiple topics . Therefore , the chosen analogy may not fully represent this diversity . Additionally , since students per - formed this activity as part of a class assignment , the nature of the topics selected might diﬀer if students were generating analogies spontaneously for immediate learning support . Lastly , to stream - line the study , we provided students with a single programming problem . It is unclear whether these ﬁndings would be replicated with a diﬀerent problem , as topic representation may vary . 6 CONCLUSION Our exploratory study investigated the types of analogies that stu - dents generated when using large language models ( LLMs ) . Over 350 students generated analogies for a recursive code snippet and provided the corresponding prompt . One consistent ﬁnding was that students were largely positive about the learning activity . Stu - dents described the value they received regarding the ability to per - sonalize the analogies . Participants described being able to easily remember analogies that were personally and culturally relevant . They also talked about how seeing multiple analogies provided ad - ditional value . Despite these beneﬁts , we observed that only half of the students in this study took advantage of being able to per - sonalize the analogies by providing an explicit topic in the prompt . It is possible that some students found suﬃcient value associated with generic analogies , but more work is need to understand why so many students failed to specify the analogy topic . “Like a Nesting Doll” : Analyzing Recursion Analogies Generated by CS Students using Large Language Models ITiCSE ’24 , July 8 – 10 , 2024 , Milan , Lombardy , Italy REFERENCES [ 1 ] BrianaBettinandLindaOtt . 2021 . FrozeninthePast : WhenitComestoAnalogy Fears , It’s Time For Us to " Let it Go " . In Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education V . 1 . 359 – 365 . [ 2 ] Briana Bettin , Linda Ott , and Julia Hiebel . 2022 . Semaphore or Metaphor ? Ex - ploring Concurrent Students’ Conceptions of and with Analogy . In Proceedings ofthe27thACMConferenceononInnovation and TechnologyinComputerScience Education Vol . 1 . 200 – 206 . [ 3 ] Briana Bettin , Linda Ott , and Julia Hiebel . 2023 . More ( Sema | Meta ) phors : Ad - ditional Perspectives on Analogy Use from Concurrent Programming Students . In Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V . 1 . 166 – 172 . [ 4 ] JonasBoustedt , Anna Eckerdal , RobertMcCartney , JanErikMoström , MarkRat - cliﬀe , Kate Sanders , and Carol Zander . 2007 . Threshold concepts in computer science : do they exist and are they useful ? ACM Sigcse Bulletin 39 , 1 ( 2007 ) . [ 5 ] VirginiaBraunandVictoriaClarke . 2006 . Usingthematicanalysisinpsychology . Qualitative research in psychology 3 , 2 ( 2006 ) , 77 – 101 . [ 6 ] VirginiaBraun and VictoriaClarke . 2021 . One sizeﬁts all ? What counts as qual - ity practice in ( reﬂexive ) thematic analysis ? Qualitative research in psychology 18 , 3 ( 2021 ) , 328 – 352 . [ 7 ] Yingjun Cao , Leo Porter , and Daniel Zingaro . 2016 . Examining the value of analogiesin introductory computing . In Proceedings of the 2016ACMConference on International computing education research . 231 – 239 . [ 8 ] Richard K Coll , Bev France , and Ian Taylor . 2005 . The role of models / and analo - gies in science education : implications from research . International Journal of Science Education 27 , 2 ( 2005 ) , 183 – 198 . [ 9 ] Zijian Ding , Arvind Srinivasan , Stephen MacNeil , and Joel Chan . 2023 . Fluid transformersand creativeanalogies : Exploring large language models’ capacity for augmenting cross - domain analogical creativity . In Proceedings of the 15th Conference on Creativity and Cognition . 489 – 505 . [ 10 ] James Finnie - Ansley , Paul Denny , Brett A Becker , Andrew Luxton - Reilly , and James Prather . 2022 . The Robots Are Coming : Exploring the Implications of OpenAI Codex on Introductory Programming . In Australasian Computing Edu - cation Conf . 10 – 19 . [ 11 ] Michal Forišek and Monika Steinová . 2012 . Metaphors and analogies for teach - ingalgorithms . In Proceedingsofthe43rdACMtechnicalsymposiumonComputer Science Education . 15 – 20 . [ 12 ] DianaFranklin , DavidWeintrop , JenniferPalmer , MerijkeCoenraad , MelissaCo - bian , Kristan Beck , Andrew Rasmussen , Sue Krause , Max White , Marco Anaya , et al . 2020 . Scratch Encore : The design and pilot of a culturally - relevant inter - mediate Scratchcurriculum . In Proceedings of the51stACMtechnical symposium on computer science education . 794 – 800 . [ 13 ] Nasser Giacaman . 2012 . Teaching by example : using analogies and live coding demonstrationstoteachparallelcomputingconceptstoundergraduatestudents . In 2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops & PhD Forum . IEEE , 1295 – 1298 . [ 14 ] John K Gilbert and Rosária Justi . 2016 . Analogies in modelling - based teaching and learning . Modelling - based teaching in science education ( 2016 ) , 149 – 169 . [ 15 ] TinaGötschi , Ian Sanders , andVashtiGalpin . 2003 . Mental Models ofRecursion . In Proceedingsofthe34thSIGCSETechnicalSymposium onComputerScience Edu - cation ( SIGCSE ’03 ) . Association for Computing Machinery , NewYork , NY , USA , 346 – 350 . [ 16 ] Colton Harper . 2022 . Developing and Evaluating Scaﬀolding for Student - Generated Analogies in CS1 . In Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol . 2 . 656 – 657 . [ 17 ] ColtonHarper , RyanBockmon , andStephenCooper . 2023 . InvestigatingThemes ofStudent - Generated Analogies . In ProceedingsoftheACMConferenceonGlobal Computing Education Vol 1 ( CompEd 2023 ) . Association for Computing Machin - ery , 64 – 70 . [ 18 ] Allan GHarrisonandDavidFTreagust . 2006 . Teachingand learningwithanalo - gies : Friend or foe ? Metaphor and analogy in science education ( 2006 ) . [ 19 ] Ava Heinonen and Arto Hellas . 2020 . Exploring the instructional eﬃciency of representationand engagement inonline learning materials . In United Kingdom & Ireland Computing Education Research conference . 38 – 44 . [ 20 ] ArtoHellas , JuhoLeinonen , SamiSarsa , CharlesKoutcheme , LiljaKujanpää , and Juha Sorva . 2023 . Exploring the Responses of Large Language Models to Begin - ner Programmers’Help Requests . In Proceedings of the 2023 ACM Conference on International Computing Education Research V . 1 . ACM . [ 21 ] Dave Heywood . 2002 . The place of analogies in science education . Cambridge Journal of Education 32 , 2 ( 2002 ) , 233 – 247 . [ 22 ] Irene Hou , Sophia Mettille , Owen Man , Zhuo Li , Cynthia Zastudil , and Stephen MacNeil . 2024 . The Eﬀects of Generative AI on Computing Students’ Help - Seeking Preferences . In Proceedings of the 26th Australasian Computing Educa - tionConference ( ACE’24 ) . Association forComputingMachinery , NewYork , NY , USA , 39 – 48 . https : / / doi - org . libproxy . temple . edu / 10 . 1145 / 3636243 . 3636248 [ 23 ] Anthony Robins Janet Rountree and Nathan Rountree . 2013 . Elaborating on threshold concepts . Computer Science Education 23 , 3 ( 2013 ) , 265 – 289 . [ 24 ] Andreas Larsson . 2023 . Metaphors and Gesturesin Programming Education . In Programmingand Computational Thinking in Technology Education . Brill . [ 25 ] Juho Leinonen , Paul Denny , Stephen MacNeil , Sami Sarsa , Seth Bernstein , Joanne Kim , Andrew Tran , and Arto Hellas . 2023 . Comparing Code Expla - nations Created by Students and Large Language Models . arXiv preprint arXiv : 2304 . 03938 ( 2023 ) . [ 26 ] Juho Leinonen , Arto Hellas , Sami Sarsa , Brent Reeves , Paul Denny , James Prather , and Brett A Becker . 2023 . Using large language models to enhance pro - gramming error messages . In Proceedings of the 54th ACM Technical Symposium on Computer Science Education V . 1 . 563 – 569 . [ 27 ] Stephen MacNeil , Paul Denny , Andrew Tran , Juho Leinonen , Seth Bernstein , Arto Hellas , Sami Sarsa , and Joanne Kim . 2023 . Decoding Logic Errors : A Com - parativeStudyonBugDetectionbyStudents andLargeLanguageModels . arXiv preprint arXiv : 2311 . 16017 ( 2023 ) . [ 28 ] Stephen MacNeil , Andrew Tran , Arto Hellas , Joanne Kim , Sami Sarsa , Paul Denny , Seth Bernstein , and Juho Leinonen . 2023 . Experiences from Using Code Explanations Generated by LargeLanguageModels in aWeb Software Develop - ment E - Book . In Proc . SIGCSE’23 . ACM , 6 pages . [ 29 ] Stephen MacNeil , Andrew Tran , Juho Leinonen , Paul Denny , Joanne Kim , Arto Hellas , Seth Bernstein , and Sami Sarsa . 2022 . Automatically Generating CS LearningMaterialswithLargeLanguageModels . arXivpreprintarXiv : 2212 . 05113 ( 2022 ) . [ 30 ] Stephen MacNeil , Andrew Tran , Dan Mogil , Seth Bernstein , Erin Ross , and Zi - heng Huang . 2022 . Generating Diverse Code Explanations Using the GPT - 3 Large Language Model . In Proc . of the 2022 ACM Conf . on Int . Computing Educa - tion Research - Volume 2 . ACM , 37 – 39 . [ 31 ] Tia CMadkins , Alexis Martin , Jean Ryoo , Kimberly A Scott , Joanna Goode , Alli - son Scott , and Frieda McAlear . 2019 . Culturally relevant computer science ped - agogy : From theory to practice . In 2019 research on equity and sustained partici - pation in engineering , computing , and technology ( RESPECT ) . IEEE , 1 – 4 . [ 32 ] Jessica Morales - Chicas , Mauricio Castillo , Ireri Bernal , Paloma Ramos , and BiancaLGuzman . 2019 . Computingwithrelevanceandpurpose : Areviewofcul - turally relevant education in computing . International Journal of Multicultural Education 21 , 1 ( 2019 ) , 125 – 155 . [ 33 ] LaurieMurphy , SueFitzgerald , RaymondLister , andRenéeMcCauley . 2012 . Abil - ity to ’explain in Plain English’ Linked to Proﬁciency in Computer - Based Pro - gramming . In Proc . of the Ninth Annual Int . Conf . on Int . Computing Education Research . ACM , 111 – 118 . [ 34 ] James Prather , Paul Denny , Juho Leinonen , Brett A Becker , Ibrahim Albluwi , Michelle Craig , Hieke Keuning , Natalie Kiesler , Tobias Kohn , Andrew Luxton - Reilly , et al . 2023 . The robots are here : Navigating the generative ai revolution in computing education . In Proceedings of the 2023 Working Group Reports on Innovation and Technology in Computer Science Education . 108 – 159 . [ 35 ] Anthony Robins , Janet Rountree , and Nathan Rountree . 2003 . Learning and teaching programming : A review and discussion . Computer science education 13 , 2 ( 2003 ) , 137 – 172 . [ 36 ] Yam San Chee . 1993 . Applying Gentner’s theory of analogy to the teaching of computer programming . International journal of man - machine studies 38 , 3 ( 1993 ) , 347 – 368 . [ 37 ] Kate Sanders and Robert McCartney . 2016 . Threshold concepts in computing : past , present , and future . In Proceedings of the 16th Koli Calling international conference on computing education research . 91 – 100 . [ 38 ] SamiSarsa , PaulDenny , ArtoHellas , andJuhoLeinonen . 2022 . AutomaticGener - ation of Programming Exercises and Code Explanations Using Large Language Models . In Proc . of the 2022 ACM Conf . on Int . Computing Education Research - Volume 1 . ACM , 27 – 43 . [ 39 ] NorbertMSeel . 2017 . Model - based learning : Asynthesisof theory andresearch . Educational Technology Research and Development 65 ( 2017 ) , 931 – 966 . [ 40 ] Andrew Tran , Linxuan Li , Egi Rama , Kenneth Angelikas , and Stephen Mac - Neil . 2023 . Using Large Language Models to Automatically Identify Pro - gramming Concepts in Code Snippets . In Proc . of the 2023 ACM Conf . on Int . Computing Education Research - Volume 2 , Vol . 1 . ACM , 563 – 569 . https : / / doi . org / 10 . 1145 / 3568812 . 3603482 [ 41 ] Camilo Vieira , Alejandra J Magana , Michael L Falk , and R Edwin Garcia . 2017 . Writing in - code comments to self - explain in computational science and engi - neering education . ACM Transactions on Computing Education 17 , 4 ( 2017 ) . [ 42 ] Arto Vihavainen , Craig S Miller , and Amber Settle . 2015 . Beneﬁts of self - explanation in introductory programming . In Proc . of the 46th ACM Technical Symposium on Computer Science Education . 284 – 289 . [ 43 ] Jacqueline L . Whalley , Raymond Lister , Errol Thompson , Tony Clear , Phil Rob - bins , P . K . Ajith Kumar , and Christine Prasad . 2006 . An Australasian Study of Reading and Comprehension Skills in Novice Programmers , Using the Bloom and SOLO Taxonomies . In Proc . of the 8th Australasian Conf . on Computing Edu - cation - Volume 52 . Australian Computer Society , Inc . , AUS , 243 – 252 . [ 44 ] Cynthia Zastudil , Magdalena Rogalska , Christine Kapp , Jennifer Vaughn , and Stephen MacNeil . 2023 . Generative AI in Computing Education : Perspectives of Students and Instructors . In 2023 IEEE Frontiersin Education Conference ( FIE ) . 1 – 9 . https : / / doi . org / 10 . 1109 / FIE58773 . 2023 . 10343467