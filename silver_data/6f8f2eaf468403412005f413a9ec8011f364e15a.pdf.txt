A I I N D E S I G N Design , Analogy , and Creativity Ashok K . Goel , Georgia Institute of Technology T HAT DESIGN CAN BE ROUTINE , innovative , or creative , has become a stan - dard cliche among researchers building AI theories of design . Whether or not this is an especially productive classification of design processing , the cliche indicates that innovation and creativity in design are important research topics . That analogy plays a central role in innovation and cre - ativity is another common premise among AI in design researchers . Whether or not cur - rent theories of analogical reasoning lead to creative design , this premise has drawn increased attention in recent AI research on creative design . In briefly reviewing recent research on analogy - based creative design , this article first examines characterizations of creative design and then analyzes theories of analog - ical design in terms of four questions : why , what , how , and when . After briefly describ - ing recent AI theories of analogy - based cre - ative design , the article focuses on three the - ories instantiated in operational computer programs : Syn , 1 Dssua , 2 and Ideal . 3 From this emerges a set of research issues in anal - ogy - based creative design . The main goal here is to sketch the core issues , themes , and directions in building such theories . Creative design AI characterizations of creative design tend to be of two kinds . The first begins with a gen - eral theory of information processing and then delimits routine , innovative , and creative design in the terms of the theory . Allen Newell and Herbert Simon’s theory of problem - space search is a very general theory of human infor - mation processing . 4 In this approach , design - ers solve problems by searching in problem spaces , where a problem space is abstractly defined by the reasoning goal and by domain knowledge in the form of operators that enable space search . This theory can , and has , served for modeling design processing . It specifies the reasoning goals as part of the design requirements that express design variables and specific ranges of values they can take ; the operators are specific to the particular design domain . Several investigators have classified design processing in terms of problem - space search in this way : 5 • if the design variables and the ranges of values they can take remain fixed during design processing , the design is routine ; • if the design variables remain fixed but the ranges of values change , the design is innovative ; and • if the design variables and the range of values both change , the design is creative . The second kind of characterization arises from specific AI theories of design . The AI in design theorist posits a computational pro - cess for a kind of design activity , and then delimits routine , innovative , and creative design in the terms of the theory . For exam - ple , David Brown and B . Chandrasekaran A NALOGICAL REASONING APPEARS TO PLAY A KEY ROLE IN CREATIVE DESIGN . T HIS ARTICLE BRIEFLY REVIEWS RECENT AI RESEARCH ON ANALOGY - BASED CREATIVE DESIGN BEFORE ENUMERATING A RELATED SET OF RESEARCH ISSUES . 62 0885 - 9000 / 97 / $ 10 . 00 © 1997 IEEE IEEE EXPERT . describe a computational theory of routine design based on the notion of design plans . 6 This theory uses a structure - substructure hierarchy to organize skeletal design plans for the object to be designed . Designing a particular instance of the object—a particu - lar air pump with specific dimensions , for example—involves selecting , instantiating , and expanding the design plans . Brown fur - ther proposes a classification of design pro - cessing based on this theory : 7 • if the designer knows both the structure of the design space ( the structure - substructure hierarchy of the object ) and procedures for systematically searching the space ( the skeletal design plans ) , the design is routine ; • if the designer knows only the structure of the design space , the design is innov - ative ; and • if the designer knows neither , the design is creative . Three implications follow from these char - acterizations . The first characterization sug - gests that problem formulation and reformu - lation are integral parts of creative design . A designer’s understanding of a problem typi - cally evolves during creative design process - ing . This evolution of problem understand - ing can lead to ( possibly radical ) changes in the problem and solution representations . The second characterization suggests that in creative design , knowledge needed to ad - dress a problem typically is not available in a form directly applicable to the problem . Instead , at least some of the needed knowl - edge must be acquired from other knowledge sources , by analogical transfer from a dif - ferent problem , for example . Both characterizations indicate that cre - ativity in design lies on a continuum . That is , creativity in design can occur in degrees , where the degree of creativity depends on the extent of problem and solution reformulation and the transfer of knowledge from different knowledge sources to the design problem . Analogical design Recent AI research on creative design has explored the use of analogies in proposing solutions to design problems in the design process’s conceptual phase . This focus on the use of analogies in proposing candidate de - signs appears to be a result of the traditional characterization of analogical reasoning in the AI in design research community : ana - logical design involves reminding and trans - fer of elements of a solution for one design problem to the solution for another design problem , where the selected design elements can be components , relations between com - ponents , or configurations of components and relations . That is , given a problem P new and a ( partial , possibly null ) solution S new for P new , analogical reasoning involves retrieval of a familiar problem P old from memory with a solution S old , and transfer of selected ele - ments from S old to S new . Let’s examine this characterization from the perspective of analogy - based creative design . It is productive to ask four questions in analyzing AI characterizations and theo - ries of information - processing phenomena : why , what , how , and when . In the context of analogical design , the why question pertains to the task ( or the goal ) for which analogy is used—for example , the task of proposing a candidate design . The what question pertains to the content of knowledge that is trans - ferred—for example , transfer of knowledge of the heat - flow process from one design sit - uation to another . The how question pertains to the methods for reminding and transfer , where a method uses specific kinds of knowl - edge representations , inference mechanisms , and control strategies . Finally , the when question pertains to strategic control of pro - cessing . Clearly , the four questions are close - ly interrelated . If we ask these questions about the tradi - tional characterization of analogical design , the characterization appears too narrow , both in terms of what can be transferred and why it can be transferred . ( This characterization also implies that P old and P new are different design problems . But , in general , P old and P new can be subproblems of the same design problem . This is the familiar distinction between cross - problem and within - problem analogies sometimes made in the literature on analogical reasoning . 14 ) Why ? This characterization implies that ana - logical reminding and transfer occurs in ser - vice of generating the solution S new to the design problem P new —that is , in service of proposing a candidate design , modifying an initial design , and completing a partial design . But there is no principled reason to limit analogies to these design tasks . Design , especially creative design , involves a vari - ety of other design tasks , such as interpret - ing and elaborating the design problem , decomposing the problem , anticipating po - tential difficulties with a candidate solution , refining a candidate design , evaluating a can - didate design , interpreting the evaluation information , and reformulating the problem . Analogies , in general , can help address any of these design tasks . ( The KA system , for example , uses past cases for the task of inter - preting a design problem . 8 ) What ? The answer depends in part on the design task being addressed . The earlier char - acterization of analogical design implies that the content of knowledge transfer is in the form of design elements—for example , com - ponents and relations between components . This kind of knowledge transfer seems appro - priate for the tasks of design proposition , mod - ification , and completion . For other design tasks , however , analogies can result in the transfer of different kinds of knowledge—for example , the transfer of knowledge of famil - iar design problems for the tasks of interpret - ing and reinterpreting a new problem , and knowledge of criteria and methods of evalu - ating familiar designs for the task of evaluat - ing a candidate solution to a new problem . In addition , for any of these design tasks , the transfer can take the form of strategic knowl - edge instead of domain knowledge . The trans - fer of a method for problem decomposition is but one example of this kind of analogy . The transfer of a design strategy in the form of a task structure is a more general example . For all these reasons , we can generalize the traditional characterization of analogical design into an initial characterization like this : analogical design involves reminding and transfer of knowledge about one design situation to another , where the transfer can occur in the service of any design task in the MAY / JUNE 1997 63 A NALOGICAL DESIGN IN - VOLVES REMINDING AND TRANSFER OF KNOWLEDGE ABOUT ONE DESIGN SITUATION TO ANOTHER , WHERE THE TRANSFER CAN OCCUR IN THE SERVICE OF ANY DESIGN TASK IN THE NEW SITUATION . . new situation , and the content of the transfer can be knowledge of a design problem , solu - tion , domain , or strategy . How ? This question concerns methods for reminding and transfer . The answer , in gen - eral , depends on the answers to the why and what questions about a design situation . The method for analogical transfer in design , for example , might depend both on the design task and the transfer’s knowledge content . Case - based reasoning provides one gen - eral answer to the how question . Given a prob - lem P new , the designer is first reminded of a familiar problem P old with a solution S old , where P old and P new are so similar that S old is an approximate solution for P new . Then , the designer modifies selected components in S old to obtain a candidate solution S new for P new . Thus , in case - based design , the entire solution S old is transferred to S new and modified to fit the specifications of P new . Case - based rea - soning , therefore , appears to be a limiting case of analogical reasoning in which the question of what to transfer degenerates into the ques - tion of what to modify . The case - based strat - egy , nevertheless , fits many tasks in variant design and some tasks in adaptive design . ( Pahl and Beitz provide characterizations and examples of variant and adaptive design . 9 ) The case - based reasoning literature often distinguishes between transformational and derivational analogy . 10 In transformational case - based reasoning , the solution S old for P old is modified to obtain the solution S new for P new . The modification knowledge typically is associative , and often is based on domain - specific heuristics . In derivational case - based reasoning , the trace of problem - space search that led to the solution S old for P old guides the adaptation of S old . Although both methods have been tried in design , they have met only limited success . Associative methods for design modification appear adequate at best only for variant design in weakly interacting domains , and processing traces of design gen - eration by space search typically are not avail - able in practical design . Instead , AI in design research appears to have led to a third frame - work for case - based design that uses model - based methods for design modification and other subtasks spawned by the case - based strategy . The model - based methods use “deeper” design knowledge—for example , knowledge of the topology and teleology of S old . ( The article by Mary Lou Maher and Andrés Gomez in this special double issue presents an overview of case - based design . 11 Elsewhere , I sketch an early theory of using model - based methods for design modifica - tion in case - based design . 12 Linda Wills and Janet Kolodner discuss some issues in push - ing traditional case - based reasoning towards innovative design . 13 ) The literature on analogical reasoning sometimes distinguishes between within - domain and cross - domain analogies . 14 A domain can be characterized by the objects , relations , and processes that occur in it . Design domains such as engineering , archi - tecture , software , and interface design clearly involve different kinds of objects , relations , and processes . But from the viewpoint of building AI theories , whether two design domains are very different , quite similar , or identical depends on the language for repre - senting the objects , relations , and processes . From this viewpoint , the design domains of mechanical and electrical engineering are very different if one uses different represen - tational languages for them , or similar if one uses the same language . Whether an AI the - ory of design can use the same representa - tional language for two ( apparently different ) domains depends on the level of design detail . Again , the answer to the how question pro - vided by case - based reasoning seems limited to design situations in which P old and P new are so similar that all of S old can be trans - ferred to S new and selectively modified to fit P new . What happens when P old and P new are not quite so similar ? For example , what hap - pens if P old and P new are problems from two different design domains in that not all the objects , relations , and processes in the two domains are identical ? This question relates directly to the issue of creativity in design : if P old and P new are almost identical prob - lems , S old is unlikely to suggest changes to the variables characterizing P new . In general , analogical transfer requires the use of generic abstractions , where the ab - stractions typically express the structure of relationships between generic types of ob - jects and processes . The analogical reason - ing literature in AI , 15 cognitive psychology , 16 and cognitive science 17 suggests that the generic abstractions are not merely abstrac - tions over features of objects , but that they capture the relational structure among objects and processes . In the context of design , generic abstractions might specify , for exam - ple , the structure of geometric , topological , temporal , causal , and functional relations among design elements . Generic design abstractions might also specify the structure of goals and methods in a design strategy . This implies that the learning of generic design abstractions is another important process in analogical design . For this reason , we can specialize the ini - tial characterization of analogical design like this : analogical design involves learning and transfer of generic design abstractions from one design situation to another , where the generic design abstractions specify the struc - ture of relations among the elements of a design problem , solution , domain , or strategy , and where the transfer can occur in the service of any design task in the new situation . When ? This question pertains to the strate - gic control of processing . The learning of generic design abstractions provides a good illustration of this issue . Generic design ab - stractions can be learned at storage time , when the designer stores a new design in the design memory . This is an example of “eager” learning in which abstractions over known designs are learned as soon as new design knowledge becomes available . Alternatively , learning might occur at retrieval time , when the designer is reminded of a known design . As yet another alterna - tive , learning might occur at problem - solving time , when the designer transfers knowledge from one design situation to another . The lat - ter two are examples of “lazy” learning , in which abstractions are generated when needed . Clearly , different answers to the when question about this learning result in different AI theories of analogy - based cre - ative design . In addition , the different an - swers to this question might imply different answers to the questions of what gets abstracted and transferred and how . 64 IEEE EXPERT A NALOGICAL TRANSFER REQUIRES THE USE OF GENERIC ABSTRACTIONS , WHERE THE ABSTRACTIONS TYPICALLY EXPRESS THE STRUCTURE OF RELATIONSHIPS BETWEEN GENERIC TYPES OF OBJECTS AND PROCESSES . . Three theories of analogy - based creative design I have selected three theories to focus on that exemplify recent work on analogy - based creative design . The three theories are instan - tiated in operational computer systems called Dssua , 10 Ideal , 3 , 18 , 19 and Syn . 1 Dssua was developed in the early 1990s in Australia , Ideal in the early to mid - 1990s in the US , and Syn in the mid - 1990s in Germany . All three address the conceptual phase of the design process and use model - based methods for analogical transfer . However , they illustrate three kinds of generic abstractions useful in analogy - based creative design : design pro - totypes in the case of Dssua , design patterns in Ideal , and design concepts in Syn . Design concepts as generic abstractions . Katy Börner , Eberhard Pippig , Elisabeth Tammer , and Carl Coulon describe a mod - ule called Syn within the Fabel system that enables Fabel to support analogy - based cre - ative design . 1 Fabel is a case - based CAD environment intended to assist human archi - tects in designing spatial layouts of build - ings . Syn addresses the problem of design - ing air - circulation systems within the context of spatial layout design . A design problem presented to Syn specifies the main access to the air - circulation system , the required air outlets , and possibly some pipes connecting them . Initial problem specification takes the form of attributes and values that express the coordinates of the access , outlets , and pipes in a fixed grid , together with other features . Syn generates candidate designs that specify all the air - circulation pipes that connect the access and the outlets . Syn also represents the candidate designs in the form of coordi - nates of the main access , outlets , pipes , and interconnections in a fixed grid . Familiar air - circulation designs in Syn are represented as graph - based topological mod - els . In the graph - based representation , the main access , the outlets , and the pipe inter - connections are the nodes , and the air - circu - lation pipes are the links . The graph - based design representations are organized in a tree of design concepts , where a design concept corresponds to a ( named ) maximal common subgraph between the designs under the con - cept . Using Ideal’s terminology , one might view SYN’s design concepts as topological design patterns . Syn uses a compile operator for convert - ing a problem specification from an attribute - value feature representation to a graph - based topological representation . In addition , it uses an inverse recompile operator for converting a graph - based representation for a candidate design to the attribute - value representation . When the task specifies a design problem ( and its partial solution ) , Syn first uses the compile operator to generate a graph - based representation for it . Then , the system classi - fies the problem into its design concepts and retrieves the designs under it . The classifica - tion process is based on structural similarity between the problem and the concepts , and results in the most refined match possible . To transfer knowledge from a retrieved design to the given design problem , Syn instantiates the maximal common subgraph ( or topological pattern ) for the retrieved de - sign in the context of the design problem . This step adds air - circulation pipes and inter - connections to the partial solution specified as part of the design problem . Finally , Syn uses the recompile operator to convert the graph - based representation of the new design solution into the attribute - value representa - tion . At this stage , the system can change the dimensions of the pipes in the candidate design to meet the specifications of the design problem . Syn is a very simple theory of analogical design . Its innovation appears to be quite mundane . The basic process classifies the given design problem into a library of stored design concepts that express topological pat - terns , retrieves the best matching concept , and instantiates the concept in the context of the problem to generate a candidate solution . Syn does not abstract any concept from spe - cific designs ; instead , it assumes the library of design concepts as given . In addition , it leaves the tasks of evaluating a candidate design and assimilating the evaluation infor - mation entirely to the human designer . Much of the power of the system apparently arises from its organization of the library of design concepts and its ability to transform a prob - lem specification from its initial representa - tion to a representation that enables remind - ing and instantiation of design concepts . Design prototypes as generic abstractions . Lena Qian and John S . Gero describe an inter - active analogy - based creative design system called Dssua ( Design Support System Using Analogy ) , which actually predates Syn by a few years . 2 Dssua addresses mechanical design problems within the context of archi - tectural design—for example , designing a door to a house . Figure 1 illustrates Dssua’s design for a sliding door that is based in part on analogy to the design of window curtains . Dssua stores knowledge of familiar de - signs ( such as window curtains ) in the form of design prototypes , where a design proto - type is an abstraction over specific design instances . It represents a design prototype in the form of a function - behavior - structure model . The system represents the structure in an FBS model of a design prototype in the form of an undirected structure graph that abstractly specifies the components and rela - tions among them , but not the specific val - ues of the variables characterizing the com - ponents and relations in a particular design instance . As an example , the structure graph for the design prototype of window curtains might specify components such as window , rod , rings , and curtain ; and relations such as “the rod is screwed to the window , ” “rings slide along the rod , ” and “the curtain is linked to the rings . ” Dssua represents the behavior as a directed behavior graph that , in addition to the structure , also specifies the direction of causal influence among the variables char - acterizing the components . The bottom half of Figure 2 illustrates the behavior graph for the window curtain . It specifies , for exam - ple , that the area covered by the curtain is directly proportional to the distance between the sliding rings on the rod . In the terminol - ogy of Ideal , one might view Dssua’s design prototypes as design patterns with physical structure . A design problem for Dssua is specified in terms of a structure graph . The structure graph for the problem of designing a door , for example , might specify the components ( door frame , hinge , and door ) and the com - ponent relations ( hinges screwed to the MAY / JUNE 1997 65 Figure 1 . Analogical design of a sliding door in Dssua . . frame , door screwed to the hinges ) of an ordi - nary door . Thus , the problem representation specifies both the problem ( design of a door ) and an abstract solution for it ( the ordinary hinged door ) . Given the structure graph of a design problem and the initial solution for it , Dssua uses the structure graph as a probe into its library of design prototypes and retrieves a structurally similar design prototype . In the door design example , it retrieves the design prototype for the window curtain based on the similarity between the structure graphs of the initial door design and the curtain design prototype . Next , Dssua uses domain - specific heuris - tics for constructing a behavior graph from the structure graph of a given design prob - lem and its initial solution . For the initial door design , for example , it derives the be - havior graph illustrated in the top half of Fig - ure 2 . This behavior graph includes the addi - tional knowledge that the angle by which a hinged door is open is directly proportional to its rotation relative to the hinge fixed to the frame . The system then compares the behavior graphs of the design problem and the retrieved design prototype . If the two behavior graphs are isomorphic , the mapping between the design elements in the retrieved prototype and the given problem directly enables the system to transfer specific ele - ments from the design prototype to the ini - tial solution specified as part of the design problem . If the two behavior graphs are not iso - morphic , Dssua abstracts qualitative causal dependencies from the two behavior graphs . The behavior graphs for the initial door design and the curtain design prototype illus - trated in Figure 2 , for example , are not iso - morphic . Therefore , the system abstracts directed dependency graphs that represent causal dependencies among the design vari - ables but do not specify particular structural components or relations among them . In the case of our running example , Dssua abstracts a dependency graph from the behavior graph for the door design , which specifies that the angle of openness is directly proportional to the degree of rotation . Similarly , it abstracts a dependency graph from the behavior graph for the curtain design prototype , which spec - ifies that the area covered is directly propor - tional to the sliding distance . Thus , abstrac - tion in Dssua occurs at transfer time . Next , the system compares the structures of the dependency graphs abstracted from the design prototype and the design problem along with its initial solution . If it finds sim - ilar structures between the two dependency graphs , it conjectures a transfer of the corre - sponding design elements from the design prototype to the initial solution for the given design problem . In our running example , Dssua hypothesizes a similarity between the causal relations in dependency graphs for the design prototype and the design problem . This enables it to generate a new candidate solution for the problem of door design in the form of a sliding door . Thus , transfer in Dssua is based on a similarity between the structures of the dependency graphs abstracted from the design prototypes and the initial solutions specified as part of design problems . Finally , the human designer can evaluate a candidate solution generated by Dssua for both local and global consistency . Dssua’s theory of analogy - based creative design illustrates the use of structure of rep - resentations for cross - domain analogical transfer . The representational structure itself depends on the representational vocabulary . The system represents design prototypes in the language of FBS models , and the struc - ture of the representation of a prototype thus depends on the FBS vocabulary . Therefore , much of the power of the system apparently arises from its uses of generic abstractions in the form of design prototypes , its represen - tation of design prototypes in the form of FBS models , and its ability to abstract causal dependency graphs from FBS models at transfer time . This kind of analogical transfer introduces new variables into the initial solution for the given design problem . For example , in the case of initial door design , transfer of knowl - edge from the window - curtain prototype introduces the variable of sliding motion in the design of the door . Thus , given our char - acterization of creative design , Dssua is a creative design system . Design patterns as generic abstractions . In my research group , Sambasiva Bhatta has developed a computational theory of anal - ogy - based creative design called model - based analogy . He has also developed the Ideal system , which instantiates and evalu - ates the theory for conceptual design of engi - neering devices such as automatic coffee makers , electronic amplifiers , and gyro - scopes . Ideal is a multistrategy system , capa - ble of both case - based and analogical design . It contains several kinds of domain knowl - edge : design analogs ( or cases ) , design pat - terns , design concepts , generic design com - ponents , and generic domain substances . Design analogs take the form of structure - behavior - function models . The SBF model of a device is based on a general ontology of flow of substances through device components . This ontology gives rise to a set of design concepts in the form of structural connections and behav - ioral interactions among the components and substances of devices , behavioral states and state transitions in devices , and functions of devices and device components . These de - sign concepts provide an SBF vocabulary for representing how devices work . The SBF model of a specific device explicitly repre - sents the structural elements and topology of the device , the functions of the device and its components , and the internal causal pro - cesses ( called behaviors ) that explain the workings of the device . The design analogs are indexed by their functions and organized 66 IEEE EXPERT d : area change motion q : open _ angle ( + ) Door Screwed d : rotation motion q : angle ( + ) Hinge Screwed d : fixed position Door frame d : area change motion q : cover _ angle ( + ) Curtain Link d : sliding motion q : dist _ bet _ rings ( + ) Rings Move _ along d : fixed position Window d : fixed position Rod imposed Screwed Figure 2 . Mapping between behavior graphs in Dssua . . around design concepts that specify the prim - itive functions of devices . The design patterns in Ideal are generic ( analog - independent ) abstractions of design that the system has encountered in past design episodes . Ideal learns ( and thus knows of ) two kinds of design patterns : general physical principles and generic teleological mechanisms . A GPP expresses a pattern of causal relations—for example , the causal relations that characterize the principle of heat flow from a hot body to a cold one . A GTM expresses a pattern of functional and causal relations—for example , the functional and causal relations that characterize feed - back in control systems . Neither kind of design pattern in Ideal specifies information about the physical structure of devices . Both kinds are expressed in a BF ( behavior func - tion ) subset of the SBF language . Also , both kinds are indexed by the design goals they can help to accomplish . Figure 3 illustrates a portion of Ideal’s computational process that pertains to the learning , reminding , and use of GTMs in ana - logical design . A design problem in Ideal specifies the functional requirements of the desired device along with behavioral and structural constraints ( if any ) . For example , one design problem presented to Ideal spec - ified the function of an electronic amplifier as the desired function , with the additional requirement that the fluctuations in the out - put voltage be small . When a design problem is presented to Ideal , in the problem interpre - tation step , it first uses its conceptual knowl - edge of generic components and substances to elaborate on the problem specification . In the reminding step , it classifies the elaborated problem specification into its conceptually organized memory of design analogs and retrieves the best - matching analog . This classification relies on the functional similarity between the design problem and the stored analogs . In the example of the amplifier , if Ideal knows of an amplifier design that allows large voltage fluctuations , it retrieves this design because of its func - tional similarity with the desired design . Next , in the design adaptation phase , Ideal com - pares the function of the desired design and the function delivered by the retrieved design , and spawns adaptation goals in the form of differences between the desired function and the function delivered by the retrieved design . In the amplifier example , Ideal forms the adaptation goal of reducing the voltage fluc - tuations in the retrieved design . The left side of Figure 4 schematically depicts the amplifier design retrieved by Ideal . It also illustrates a small fraction of its SBF model for the design . In particular , it illustrates the top level of its understanding of the causal behavior of the design that results in the achievement of its function . Briefly , a causal behavior is expressed as a directed graph of behavioral states and state transitions . It expresses each state as a sche - ma that specifies a substance flowing be - tween components , its properties at a specific component , and the property values . The sys - tem also expresses each state transition as a schema that specifies the causes for the tran - sition ( for example , the function of a com - ponent ) and relations between the property values in the preceding and succeeding states . To understand the use of analogies in Ideal , consider what happens if the system does not initially know about control mech - anisms such as feedback and feedforward . In this knowledge condition , the system searches the SBF model of the retrieved design but fails to localize the cause of large fluctuations in the output voltage . Suppose that at this stage an ( external ) ora - cle provides Ideal with the design for the desired amplifier along with its SBF model . The right side of Figure 4 illustrates this design and a fraction of a causal behavior in its SBF model . The system stores the new design and its model in its analog memory . But it also compares the SBF models of the old design ( that allows large voltage fluctuations ) and the new design ( that regulates the voltage fluctu - ations ) . In particular , it inspects the structure of the causal behaviors in the SBF models of the two designs , notes both the similarity and the differences , and abstracts a causal pattern corresponding to the difference in the two causal structures . In addition , it abstracts the adaptation goal ( in the form of reducing a functional difference ) that it had earlier failed to achieve , uses this functional abstraction as an index to the abstracted causal pattern , and stores the new functional and causal pattern in its memory of GTMs . Figure 5 illustrates the GTM learned by Ideal from the amplifier example . In particular , Figure 5a illustrates the specification of the generic functional dif - ference of reducing large fluctuations in the output of a device , and Figure 5b illustrates the specification of the abstract causal pattern that reduces this kind of generic functional difference . The system expresses the generic func - tional difference as a schema that specifies a desired function ( F2 ) , and a known function ( F1 ) , and relations between F1 and F2 . It expresses each function in terms of the behavioral state it takes as input ( Given ) and gives as output ( Makes ) , and expresses each state in terms of a substance ( ? SUB1 ) , its properties ( for example , ? prop1 ) , and their values ( for example , val21 and val22 ) . The Condition slot specifies the MAY / JUNE 1997 67 Design analogs ( SBF models ) Newmodel Storage of new model and SBF model of GTM SBF models of GTMs Retrieval of analog New design problem Abstraction over analog and new model Spawning of adaptation goals Adaptationstrategy 1 SBF model of GTM Adaptationstrategy n Adaptation goal GTM Evaluation of new model Retrieval of GTMs Instantiation of GTMs Composition of behaviors Analog Analogical transfer New model Newmodel GTM Figure 3 . Model - based analogy in Ideal . . relationship between F1 and F2 . It specifies , for example , that val21 fluctuates by a small amount ( little delta ) whereas val22 fluctuates by a different and larger amount ( big delta ) . It also specifies that F2 is related to F1 through some hypothetical function f , where f is a map to an intermediate value ( ? val11’ ) . The system expresses the abstract causal pattern as a directed graph of behavioral states and state transitions that specifies that the behavior B2 for accom - plishing F2 can be achieved by a particular combination of the behavior B1 for accom - plishing F1 and a behavior B22 that accom - plishes the function f . Behavior B22 is con - strained by a specific relationship between the states in B22 and B1 , and B2 combines B1 and B22 in a specific pattern of causal interaction . What happens when Ideal is given a new problem in a different domain ? For example , one design problem actually given to the sys - tem at this stage specified the function of a gyroscope with the requirement that the fluc - tuations in the output angular momentum be below a specified limit . As discussed , the sys - tem first elaborates the problem specification , next classifies it into the primitive device functions , and then retrieves the best match - ing analog . In the gyroscope example , it retrieves the design of a gyroscope that allows large fluctuations in the output angular mo - mentum . As discussed earlier , the system compares the functions of the desired and the retrieved designs , and spawns adaptation goals . Again , it searches the SBF model of the retrieved design of the gyroscope , and again it fails to localize the cause for the func - tional difference . But then Ideal abstracts the adaptation goal and uses this abstraction as a probe into its memory of GTMs . It accesses the GTM it had learned in the previous design episode ( and illustrated in Figure 5 ) . Next , it instantiates the retrieved GTM in the context of the retrieved gyroscope design to generate an SBF model of a candidate design for the desired gyroscope . At this processing stage , the candidate solution is only an initial conceptual design . Ideal further refines , evaluates , and completes the conceptual design . For example , it eval - uates the candidate design for the gyroscope by tracing through the causal behaviors in the SBF model of the design , ensuring that the behaviors are internally consistent and lead to the achievement of the function desired of it . In this way , Ideal succeeds in generating a candidate design for the new design problem through analogical transfer of design patterns acquired from earlier design episodes . This short description of Ideal does not cover many aspects of its processing . For example , Ideal also uses design patterns for assimilating information on a design failure and reinterpreting the design problem . 19 In addition , it refines the abstracted design pat - terns in subsequent design episodes . Ideal uses generic design patterns for cross - domain analogical transfer , which introduces new variables into a design problem space— for example , control variables in the design of the gyroscope . Thus , given our character - ization of creative design , Ideal , like Dssua , can be viewed as an analogy - based creative design system . A I RESEARCH ON ANALOGY - BASED creative design is still in its early stages . The three theories I’ve just described illustrate the current state of the art . They also indicate some issues , themes , and directions for AI in design research . We can again organize the research issues around the four questions we raised earlier . • Why ? Syn , Dssua , and Ideal all use analo - gies for completing a partial solution to a design problem ; in Ideal , the partial solu - tion might be null . Ideal also uses analo - gies for interpreting the evaluation of a design . For what other design tasks might analogical reasoning be especially useful ? It seems analogies are useful for most any conceptual design task , including inter - preting the design problem , decomposing the problem , generating a solution to a problem or subproblem , composing sub - problem solutions into a candidate design , anticipating potential difficulties with a 68 IEEE EXPERT ( a ) ( b ) i / p Electricity Location : i / p Voltage : V in volts – + R in V in o / p V out – + R in V in V´ out Given : state 1 Using function Allow electricity of R in Parameter relations V – o = f + ( V in ) ( c ) ( d ) Electricity Location : V – Voltage : V – o volts State 2 Using function Allow electricity of Op - Amp Parameter relations V out = f + ( V – o ) . . . Electricity Location : o / p Voltage : V out volts Makes : state 3 Electricity Location : i / p Voltage : V in volts Given : state 1 Using function Allow electricity of R in Parameter relations V – o = f + ( V in ) Electricity Location : V – Voltage : V – o volts State 2 Using function Allow electricity of Op - Amp Parameter relations V ' out = f + ( V – o ) . . . Electricity Location : o / p Voltage : V out volts Makes : state 3 Using function Allow electricity of R f Parameter relations V – o = f + ( V ' ) . . . R f V – V – o / p i / p out Figure 4 . Mapping between behavioral models in Ideal : ( a ) a simple amplifier ; ( b ) an inverting amplifier with op - amp ; ( c ) behavior “amplify electricity” of the simple amplifier ; and ( d ) behavior “controlled amplify signal” of the inverting amplifier with op - amp . . candidate design , evaluating a candidate design , interpreting the evaluation infor - mation , and reformulating the design prob - lem . Would Syn , Dssua , and Ideal’s theo - ries also work for these design tasks—for example , evaluating a candidate design ? If not , why not ? What additional issues arise as we build AI theories about the use of analogies for a range of design tasks in a variety of design domains ? • What ? Analogical transfer in Syn , Dssua , and Ideal is mediated by generic design abstractions in the form of design pat - terns , although the descriptions of the three systems use different terms for design patterns . Syn uses topological pat - terns , Dssua uses behavioral patterns that retain information about design topolo - gies , and Ideal uses functional and causal patterns with no topological information . In part , these differences reflect the de - sign domains in which the three systems operate . What other kinds of design pat - terns might be productive for use in ana - logical transfer ? What is the relationship between design domains and design pat - terns ? Other than design patterns , what kinds of generic design abstractions might be productive for analogical trans - fer ? What is the relationship between design tasks and different kinds of generic design abstractions ? • How ? Syn , Dssua , and Ideal use model - based methods for analogical transfer . Syn uses topological models exclusively , while Dssua and Ideal’s models also spec - ify functional , behavioral , and causal knowledge . This difference again reflects the different design domains in which the systems operate . In Dssua’s FBS models , the behavior graphs differ from the struc - ture graphs only in that the former also specify the direction of causal influence . In Ideal’s SBF models , the representation of causal behaviors , although related to the representation of the device structure , is very different . What are the appropri - ate knowledge representations for en - abling the learning , reminding and trans - fer of generic design abstractions ? What is the relationship between the knowledge representations , the inference they en - able , and the design tasks they address ? What other methods might enable ana - logical transfer for different design tasks and domains ? In the reminding phase , Syn relies exclusively on structural sim - ilarity between the design problem and stored design cases to retrieve a best - matching case . Dssua , too , focuses on structural similarity ( although it also seems capable of using functional simi - larity ) . In contrast , Ideal uses functional similarity between the design problem and the stored analogs as the primary cri - terion for retrieval ( although it , too , uses structural similarity as a secondary crite - rion for analog selection ) . Once again , these differences in part reflect the design domains of the different systems . What are the trade - offs in using functional and structural notions of similarity ? What other measures of similarity might be use - ful in analogical design ? What is the rela - tionship between similarity measures , design domains , and design tasks ? • When ? While Syn assumes the topologi - cal patterns as given , both Ideal and Dssua learn their respective design pat - terns . In Ideal , design patterns are gener - ated at storage time , while in Dssua they are created at problem - solving time . Ideal is an example of an eager learner , while Dssua is an example of a lazy learner . In general , design abstractions can also be learned at retrieval time , which would also make for a lazy learner . What are the trade - offs between eager and lazy learn - ing in analogical design ? How do these trade - offs change with the design task , the design domain , and the content of design abstractions ? What other kinds of strategic control might be productive for analogy - based creative design ? This list of issues , of course , is only illus - trative , not exhaustive , but even this partial list makes for an ambitious and exciting research agenda . Acknowledgments This work has benefited from many discussions with members of the Intelligence and Design Research Group at Georgia Tech , especially with Sambasiva Bhatta . Bhatta , William Murdock , and Todd Griffith helped prepare this article . The arti - cle has benefited from constructive critiques by David Brown , William Birmingham , and four anonymous reviewers . I adapted Figures 1 and 2 in this article from “ADesign Support System Using Analogy ; ” 2 Figures 3 , 4 , and 5 have been adapted from “From Design Expereinces to Generic Mech - anisms : Model - Based Learning in Analogical Design . ” 17 During the writing of this article , design - related research grants from NSF ( DMI - 94 - 20405 ) and DARPA ( F33615 - 93 - 1 - 1338 ) sup - ported my work . MAY / JUNE 1997 69 ? SUB ? prop1 : ? val12 Function F2 Given : Makes : By - behavior : ( a ) By - behavior B22 ? SUB1 ? prop1 : ? val22 Behavior B2 ? SUB ? prop1 : ? val11 ? SUB ? prop1 : ? val21 Behavior B1 Condition : ? val22 „ ? val12 ; ? val21 = ? val – D ? val22 = ? val – ¶ F2 = f : ( ? val11 , ? val21 ) ? val11 ' + F1 : ( ? val11 ) ? val21 ? SUB ? prop1 : ? val11 ( b ) By - behavior B22 ? val11 ' = f + ( ? val11 ) ? val11 ' = f – ( ? val21 ) ? SUB ? prop1 : ? val11 ? SUB1 ? prop1 : ? val21 B2 = B1 + B22 where B22 achieves function f The relationship between B1 and B22 are such that : Final state ( B1 ) ˛ initial states ( B22 ) Final state ( B22 ) ˛ states ( B1 ) By - behavior B1 B y - b e h av i o r B 2 Desired design : Known design : Function F1 Given : Makes By - behavior Figure 5 . The generic abstraction of feedback in Ideal : ( a ) functional difference that the feedback mechanism reduces ; ( b ) behavior modification that the feedback mechanism suggests . . References 1 . K . Börner et al . , “Structural Similarity and Adaptation , ” Proc . Third European Workshop Case - Based Reasoning , Springer - Verlag , New York , pp . 58 – 75 . 2 . L . Qian and J . Gero , “ADesign Support System Using Analogy , ” Proc . Second Int’l Conf . AI in Design , Kluwer Academic Publishers , Dor - drecht , The Netherlands , 1992 , pp . 795 – 813 . 3 . S . Bhatta , Model - Based Analogy in Innova - tive Device Design , doctoral dissertation , Georgia Inst . of Tech . , College of Comput - ing , Atlanta , 1995 . 4 . A . Newell and H . Simon , Human Problem Solving , Prentice - Hall , Upper Saddle River , N . J . , 1972 . 5 . J . Gero , “Design Prototypes : A Knowledge Representation Schema for Design , ” AI Mag - azine , Vol . 11 , No . 4 , 1990 , pp . 26 – 36 . 6 . D . C . Brown and B . Chandrasekaran , Design Problem Solving : Knowledge Structures and Control Strategies , Pitman , London , 1989 . 7 . D . C . Brown , “Routineness Revisited , ” in Mechanical Design : Theory and Methodol - ogy , M . Waldron and K . Waldron eds . , Springer - Verlag , 1996 , pp . 195 – 208 . 8 . J . Peterson , K . Makesh , and A . Goel , “Situat - ing Natural Language Understanding in Expe - rience - Based Design , ” Human - Computer Studies , Vol . 41 , 1994 , pp . 881 – 913 . 9 . G . Pahl and W . Beitz . Engineering Design , Springer - Verlag , 1984 . 10 . J . Carbonell , “Learning by Analogy : Formu - lating and Generalizing Plans from Past Expe - rience , ” in Machine Learning : An Artificial Intelligence Approach , R . Michalski , J . Car - bonell , and T . Mitchell , eds . , Tioga , Palo Alto , Calif . , 1983 . 11 . M . L . Maher and A . Gomez de Silva Garza , “Case - Based Reasoning in Design , ” IEEE Expert , Vol . 12 , No . 2 , Mar . / Apr . 1997 , pp . 34 – 42 . 12 . A . Goel , “Integrating Case - Based and Model - Based Reasoning : AComputational Model of Design Problem Solving , ” AI Magazine , Vol . 13 , No . 2 , Summer 1992 , pp . 50 – 54 . 13 . L . Wills and J . Kolodner , “Towards More Cre - ative Case - Based Design Systems , ” in Case - Based Reasoning : Experiences , Lessons , and Future Directions , D . Leake , ed . , AAAI / MIT Press , Menlo Park , Calif . , 1996 , pp . 81 – 91 . 14 . S . Vosniadou and A . Ortony , Similarity and Analogical Reasoning , Cambridge Univ . Press , Cambridge , UK , 1989 . 15 . P . Winston , “Learning and Reasoning by Analogy , ” Comm . ACM , Vol . 23 , No . 12 , Dec . 1980 , pp . 689 – 703 . 16 . M . Gick and K . Holyoak , “Schema Induction and Analogical Transfer , ” Cognitive Psy - chology , Vol . 15 , 1983 , pp . 1 – 38 . 17 . B . Falkenhainer , K . Forbus , and D . Gentner , “The Structure - Mapping Engine : Algorithms and Examples , ” Artificial Intelligence , Vol . 41 , 1989 , pp . 1 – 63 . 18 . S . Bhatta and A . Goel , “From Design Expe - riences to Generic Mechanisms : Model - Based Learning in Analogical Design , ” Arti - ficial Intelligence in Engineering Design , Analysis , and Manufacturing , special issue on machine learning in design , Vol . 10 , 1996 , pp . 131 – 136 . 19 . S . Bhatta , A . Goel , and S . Prabhakar , “Inno - vation in Analogical Design : AModel - Based Approach , ” Proc . Third Int’l Conf . AI in Design , Kluwer , 1994 , pp . 57 – 74 . Ashok K . Goel is as an associate professor of com - puter and cognitive sciences with the College of Computing at the Georgia Institute of Technology . His current research investigates adaptive design , functional representations and reasoning , analogi - cal reasoning and learning , creative design , and model - based reflection and self - adaptation . He received his PhD in computer and information sci - ence from Ohio State University . Since 1990 , Goel has chaired the IEEE SMC Technical Committee on AI . This year , he is a vice - chair of the Fourth International Conference on AI in Design and a member of the Program Committee of the National Conference on AI . Contact him at the College of Computing , Georgia Inst . of Tech . , Atlanta , GA 30332 - 0280 ; goel @ cc . gatech . edu ; http : / / www . cc . gatech . edu / aimosaic / faculty / goel . html . 70 IEEE EXPERT Reader Service Number 1 .