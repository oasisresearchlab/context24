VisTrails : Visualization meets Data Management Steven P . Callahan Juliana Freire Emanuele Santos Carlos E . Scheidegger Cl´audio T . Silva Huy T . Vo SCI Institute and School of Computing – University of Utah 1 . INTRODUCTION Scientists are now faced with an incredible volume of data to analyze . To successfully analyze and validate various hypothesis , it is necessary to pose several queries , correlate disparate data , and create insightful visualizations of both the simulated processes and observed phenomena . Data exploration and visualization requires scientists to go through several steps . They need to select data sets and design complex dataﬂows that apply series of operations to the data to create appropriate visual representations , before they can ﬁ - nally view and analyze the results . Often , insight comes from com - paring the results of multiple visualizations . Unfortunately , today this process contains many error - prone and time - consuming tasks . In addition , once a data product , e . g . , an image , is generated , all the scientist is left with is the bitmap ; if a detailed caption is not created , it may not even be possible to reproduce that image at a later time . As a result , the generation and maintenance of visual - izations is a major bottleneck in the scientiﬁc process , hindering both the ability to mine and use scientiﬁc data . The VisTrails system [ 2 , 3 ] represents our initial attempt to stream - line the visualization process . Our long - term goal is to provide the necessary infrastructure to improve the scientiﬁc discovery process and reduce the time to insight . In VisTrails , we address the prob - lem of visualization from a data management perspective : Vis - Trails manages the data and metadata of visualization products . By capturing the provenance of both the visualization processes and data they manipulate , VisTrails enables reproducibility and simpli - ﬁes the complex problem of creating and maintaining visualiza - tions . It also allows scientists to efﬁciently and effectively explore data through visualization : they can explore their visualizations by returning to previous versions of a dataﬂow ( or visualization pipeline ) ; apply a dataﬂow instance to different data ; explore the parameter space of the dataﬂow ; query the visualization history ; and comparatively visualize different results . Data management techniques used in many different components of the system are key to providing these functionalities , which have been absent in previous visualization systems . Outline . The rest of this paper is outlined as follows . In Section 2 , we describe an application scenario that motivated us to build Vis - Trails . We discuss the limitations of existing visualization systems Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . SIGMOD 2006 , June 27 – 29 , 2006 , Chicago , Illinois , USA . Copyright 2006 ACM 1 - 59593 - 256 - 9 / 06 / 0006 . . . $ 5 . 00 . in Section 3 and describe the architecture of VisTrails in Section 4 . Finally , we provide an overview of our demonstration in Section 5 . 2 . MOTIVATING EXAMPLE : EOFS Paradigms for modeling and visualization of complex ecosys - tems are changing quickly , creating enormous opportunities for scientists and society . For instance , powerful and integrative mod - eling and visualization systems are at the core of Environmental Observation and Forecasting Systems ( EOFS ) , which seek to gen - erate and deliver quantiﬁably reliable information about the envi - ronment at the right time and in the right form to the right users . As they mature , EOFS are revolutionizing the way scientists share information about the environment and represent an unprecedented opportunity to break traditional information barriers between sci - entists and society at large [ 1 ] . However , the shift in modeling paradigms is placing EOFS modelers in an extremely challeng - ing position , and at the risk of losing control of the quality of op - erational simulations . The problem results from the breaking of traditional modeling cycles : tight production schedules , dictated by real - time forecasts and multi - decade simulation databases , lead even today to tens of complex runs being produced on a daily basis , resulting in thousands to tens of thousands of associated visualiza - tion products . As an example , Professor Ant´onio Baptista , the lead investigator of the CORIE 1 project prepares ﬁgures for presentations showing results of simulations that he has designed , but that are executed by a research scientist in his group . The component elements of his ﬁgures are generated over a few hours by a sequence of scripts , activated by a different staff member in Baptista’s group who is a visualization specialist . Once he receives the images , Baptista draws the composite ﬁgure for a particular run in PowerPoint us - ing cut - and - paste . This process is repeated for similar and comple - mentary runs . Because element components are visually optimized for each run , cross - run synthesis often have scale mismatches that make interpretation difﬁcult . The process followed by Baptista is both time consuming and error prone . Each of these visualizations is produced by custom - built scripts ( or programs ) manually constructed and maintained by several members of Baptista’s staff . For instance , a CORIE visual - ization is often produced by running a sequence of VTK [ 5 ] and custom visualization scripts over data produced by simulations . Since there is no infrastructure to manage these scripts ( and as - sociated data ) , often , ﬁnding and running them are tasks that can only be performed by their creators . This is one of main reasons Baptista is not able to easily produce the visualizations he needs in the course of his explorations . Even for their creators , it is hard to keep track of the correct versions of scripts and data . Since 1 http : / / www . ccalmr . ogi . edu / CORIE Figure 1 : VisTrails Architecture . these visualization products are generated in an ad - hoc manner , data provenance is not captured in a persistent way . Usually , the ﬁgure caption and legends are all the metadata available for this composite visualization in the PowerPoint slide . 3 . EXISTING VISUALIZATION SYSTEMS Visualization systems such as VTK [ 5 ] and SCIRun [ 6 ] allow the interactive creation and efﬁcient manipulation of complex vi - sualizations . These systems are based on the notion of dataﬂows , where a visualization is produced by assembling visualization pipe - lines out of modules that are connected in a network . However , these systems lack basic data management capabilities and as a result , they have important limitations . An important limitation of existing visualization tools is that they do not provide mechanisms for capturing provenance . Manu - ally created captions and ﬁlenames are often the only provenance information available for an image . They also lack history man - agement —since a single instance of a dataﬂow is maintained , any changes to a dataﬂow are destructive . In particular , because there is no separation between the dataﬂow speciﬁcation and its param - eters , as the parameters are modiﬁed , the previous values are for - gotten . This places the burden on the scientist to ﬁrst construct the visualization and then to remember what values led to a particular image . As the dataﬂow evolves ( i . e . , operations are added , deleted or modiﬁed ) no information is kept about previous versions . An - other limitation of existing tools is that they do not provide support for comparative visualization . In particular , they lack the neces - sary infrastructure for properly supporting exploratory multi - view visualizations . The process required to create and compare a large number of visualizations is way too cumbersome . For example , ex - ecuting the same dataﬂow with different parameters ( e . g . , different input data sets ) requires users to manually specify all the parame - ters using a Graphical User Interface ( GUI ) . Clearly , this mecha - nism is not scalable for generating more than a few visualizations . Finally , existing systems lack an optimization infrastructure . In particular , these systems may perform unnecessary and redundant computations while executing dataﬂows . VisTrails addresses these limitations providing infrastructure to support the interaction of the scientist with the visualization pro - cess . Our objective is to give scientists a dramatically improved and simpliﬁed process to analyze and visualize large ensembles of simulations and observed phenomena . 4 . THE VISTRAILS SYSTEM The high - level architecture of VisTrails is shown in Figure 1 . We only sketch the main features of the system here , for further details see [ 2 , 3 ] . Users create and edit dataﬂows using the Vistrail Builder user interface . The vistrail speciﬁcations are saved in the Vistrail Repository . Users may also interact with saved vistrails by invok - ing them through the Vistrail Server ( e . g . , through a Web - based interface ) or by importing them into the Visualization Spreadsheet . Figure 2 : A snapshot of the VisTrails history management interface . Each node in the history is a separate dataﬂow that differs from its parent by changes to the parameters or modules . Each cell in the spreadsheet represents a view that corresponds to a dataﬂow instance ; users can modify the parameters of a dataﬂow as well as synchronize parameters across different cells . Dataﬂow ex - ecution is controlled by the Vistrail Cache Manager , which keeps track of operations that are invoked and their respective param - eters . Only new combinations of operations and parameters are requested from the Vistrail Player , which executes the operations by invoking the appropriate functions from the Visualization and Script APIs . The Player also interacts with the Optimizer module , which analyzes and optimizes the dataﬂow speciﬁcations . A log of the dataﬂow execution is kept in the Vistrail Log . The different components of the system are described below . Vistrail Speciﬁcation . A dataﬂow is a sequence of operations used to generate a visualization . A vistrail captures the notion of an evolving dataﬂow —it consists of several versions of a dataﬂow . The information in a vistrail serves both as a log of the steps fol - lowed to generate a series of visualizations , a record of the visual - ization provenance , and as a recipe to automatically re - generate the visualizations at a later time . The steps can be replayed exactly as they were ﬁrst executed , and they can also be used as templates— they can be parameterized . In order to handle the variability in the structure of operations , and to easily support the addition of new operations , we represent vistrails using XML ( for more detail , see [ 3 ] ) . An important beneﬁt of using an open , self - describing , speciﬁcation is the ability to query , share , and publish vistrails . This allows a scientist to locate dataﬂows suitable for a particular task or data products generated by a given sequence of operations , as well as to publish an image along with its associated vistrail so that others can easily reproduce the results . History Management . As discussed above , a vistrail captures in - formation about the evolution of a dataﬂow or collection of related dataﬂows—it behaves as a versioning system for dataﬂows . A vis - trail consists of a tree where each node corresponds to a dataﬂow ( see Figure 2 ) . But instead of storing the dataﬂows themselves , we store the operations that take one dataﬂow to another . An edge be - tween a parent and child nodes in a vistrail tree represents a set of change actions applied to the parent to obtain the dataﬂow for the child node . The action - based provenance mechanism of VisTrails is reminiscent of DARCS 2 . This structure it allows scientists to easily navigate through the space of dataﬂows created for a given exploration task . In particular , they have the ability to return to previous versions of a dataﬂow and compare their results . At any point in time , the scientist can choose to view the entire history of changes , or only the dataﬂows important enough to be given a name ( i . e . , annotated changes ) . Caching , Analysis and Optimization . Having a high - level spec - iﬁcation allows the system to analyze and optimize dataﬂows . Ex - 2 http : / / abridgegame . org / darcs ( a ) ( b ) Figure 3 : The Vistrail Builder ( a ) and Vistrail Spreadsheet ( b ) showing the dataﬂow and visualization products of the CORIE data . ecuting a vistrail can take a long time , especially if large data sets and complex visualization operations are used . It is thus important to be able to analyze the speciﬁcation and identify optimization op - portunities . In the current VisTrails prototype , we leverage the vis - trail speciﬁcation to identify and avoid redundant operations . The Vistrail Cache Manager ( VCM ) is responsible for scheduling the execution of modules in vistrails by identifying previously com - puted subnetworks and performing constant - time cache lookups . Playing a Vistrail . The Vistrail Player ( VP ) receives as input an XML ﬁle for a dataﬂow instance and executes it using the underly - ing Visualization or Script APIs . The semantics of each particular execution are deﬁned by the underlying API . Currently , the VP supports VTK classes with a very simple interpreter . Creating and Interacting with Vistrails . The Vistrail Builder ( VB ) provides a graphical user interface for creating and editing dataﬂows ( see Figure 3 ( a ) ) . It writes ( and also reads ) dataﬂows in the same XML format as the other components of the system . It shares the familiar nodes - and - connections paradigm with dataﬂow systems . To allow users to compare the results of multiple dataﬂows , we built a Visualization Spreadsheet ( VS ) . The VS provides the user a set of separate visualization windows arranged in a tabu - lar view . This layout makes efﬁcient use of screen space , and the row / column groupings can conceptually help the user explore the visualization parameter space [ 4 ] . The cells may execute different vistrails and they may also use different parameters for the same vistrail speciﬁcation ( see Figure 3 ( b ) ) . To ensure efﬁcient execu - tion , all cells share the same cache . Users can also synchronize different cells using the VS interface . 5 . DEMONSTRATION OVERVIEW In this demonstration , we show the power and ﬂexibility of Vis - Trails by presenting actual scenarios in which scientiﬁc visualiza - tion is used and showing how our system improves usability , en - ables reproducibility , and greatly reduces the time required to cre - ate scientiﬁc visualizations . In particular , we show how dataﬂows are created and modiﬁed using the Vistrail Builder and Vistrail Spreadsheet . Our examples also demonstrate the usefulness of the history management , caching capabilities , and comparative visual - ization tools in VisTrails . CORIE . We demonstrate , through speciﬁc examples , how Vis - Trails can be used to improve the current visualization process that Professor Baptista employs . This part of the demonstration includes queries to published visualizations and the use of the his - tory to modify existing visualizations . Medical Imaging . Acquiring useful information from the results of medical imaging devices has been a subject of much research in the ﬁeld of scientiﬁc computing . We show how VisTrails can be used to explore the parameter space using multi - view visual - ization and how caching substantially improves the interactivity of the process . Uncertainty Visualization . A difﬁcult problem in scientiﬁc sim - ulation is to represent the uncertainty of the modeling systems due to measured or computed error . We demonstrate how VisTrails can be used to effectively visualize uncertainty through the use of evolving dataﬂows and comparative visualization . An alpha release of VisTrails ( available upon request ) is cur - rently being tested by a select group of domain scientists . More information about the system is available at http : / / www . sci . utah . edu / ˜ vgc / vistrails Acknowledgments . Ant´onio Baptista ( Oregon Health & Science University ) and Patricia Crossno ( Sandia ) have provided us valu - able input for the system design . This work is partially supported by the National Science Foundation , the Department of Energy , Army Research Ofﬁce , and IBM . 6 . REFERENCES [ 1 ] A . Baptista . Encyclopedia of Physical Science and Technology , chapter Environmental Observation and Forecasting Systems . Academic Press , 2002 . [ 2 ] L . Bavoil , S . Callahan , P . Crossno , J . Freire , C . Scheidegger , C . Silva , and H . Vo . Vistrails : Enabling interactive multiple - view visualizations . In IEEE Visualization 2005 , pages 135 – 142 , 2005 . [ 3 ] S . Callahan , J . Freire , E . Santos , C . Scheidegger , C . Silva , and H . Vo . Managing the evolution of dataﬂows with vistrails . In IEEE Workshop on Workﬂow and Data Flow for Scientiﬁc Applications ( SciFlow 2006 ) , 2006 . To appear . [ 4 ] E . H . Chi , P . Barry , J . Riedl , and J . Konstan . A spreadsheet approach to information visualization . In IEEE Information Visualization Symposium , pages 17 – 24 , 1997 . [ 5 ] Kitware . The Visualization Toolkit ( VTK ) and Paraview . http : / / www . kitware . com . [ 6 ] S . G . Parker and C . R . Johnson . SCIRun : a scientiﬁc programming environment for computational steering . In Supercomputing , 1995 .