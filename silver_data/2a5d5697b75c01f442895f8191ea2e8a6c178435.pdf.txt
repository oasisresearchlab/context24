S UPER NOVA : Design Strategies and Opportunities for Interactive Visualization in Computational Notebooks Zijie J . Wang (cid:66) David Munechika Seongmin Lee Duen Horng Chau Georgia Institute of Technology A BSTRACT Computational notebooks such as Jupyter Notebook have become data scientists’ de facto programming environments . Many visu - alization researchers and practitioners have developed interactive visualization tools that support notebooks . However , little is known about the appropriate design of visual analytics ( VA ) tools in note - books . To bridge this critical research gap , we investigate the de - sign strategies in this space by analyzing 161 notebook VA tools and their users’ feedback . Our analysis encompasses 64 systems from academic papers and 103 systems sourced from a pool of 55k notebooks containing interactive visualizations that we obtain via scraping 8 . 6 million notebooks on GitHub . We also examine ﬁnd - ings from 15 user studies and user feedback in 379 GitHub issues . Through this work , we identify unique design opportunities and considerations for future notebook VA tools , such as using and ma - nipulating multimodal data in notebooks as well as balancing the degree of visualization - notebook integration . Finally , we develop S UPER NOVA , an open - source interactive tool to help researchers explore existing notebook VA tools and search for related work . Index Terms : Human - centered computing—Visualization 1 I NTRODUCTION Computational notebooks , such as Jupyter Notebook [ 78 ] and Colab have become the most popular programming environments among data scientists [ 69 ] . These notebooks seamlessly combine text , code , and visual outputs in a document that consists of an arbitrary number of cells —small text and code editors . Users can execute a code cell , and its output ( e . g . , text and visualizations ) will be displayed below the cell . By providing a literate programming environment , note - books enable users to perform exploratory data analysis , document their work , and share insights with collaborators [ 131 ] . To create easy - to - adopt tools , there is a trend in the VIS commu - nity to develop visual analytics ( VA ) systems that can be used in notebooks [ e . g . , 109 , 162 , 170 ] . Designing visualizations for note - book environments presents unique opportunities and considerations . On the one hand , in - notebook VA tools allow direct modiﬁcation of data through user interactions [ 148 ] , and users can mix - and - match VA tools to create dashboards [ 159 ] . However , notebook users of - ten write fragmentary code and execute it in a nonlinear order [ 72 ] , which differs from traditional workﬂows for using VA tools . Therefore , if researchers do not consider notebooks’ unique char - acteristics , their notebook VA tools may not fully realize the potential of notebooks and , at worst , may impede the ability of notebook users to effectively use these tools . To shed light on the existing landscape of notebook VA tools and help VA researchers and practitioners harness the potential of notebook environments , we contribute : • The ﬁrst systematic review of 161 notebook VA tools includ - ing 64 systems introduced in academic papers and 103 tools sourced from a pool of 55k notebooks containing interactive vi - sualizations that we obtain via scraping 8 . 6 million notebooks on (cid:66) { jayw , david . munechika , seongmin , polo } @ gatech . edu Fig . 1 : Through a large - scale review of 161 notebook VA tools , we propose an organizational framework to characterize them based on their design motivations and strategies . Moreover , we examine the user experience of these tools and discuss future design opportunities . GitHub ( Fig . 1 ) . Additionally , we examine ﬁndings from 15 user studies and online community feedback in 84 GitHub issues ( § 3 ) . Based on the review , we discuss the unique design opportunities and considerations for future notebook VA tools ( O1 – O10 ) . • Organizational framework to characterize notebook VA tools in terms of their motivation for supporting notebooks ( § 4 ) , tar - geted users ( § 4 . 1 ) , and a four - dimensional design space based on user needs ( § 5 ) . This framework facilitates a more comprehensive understanding of the landscape of notebook VA tools . • S UPER NOVA , an interactive tool to help researchers explore existing notebook VA tools and search for design inspiration and implementation references . Anyone can easily add new notebook VA tools to this open - source explorer ( Fig . 2 ) . S UPER NOVA is available at https : / / poloclub . github . io / supernova . 2 R ELATED W ORK Our work joins the research body of studying interactive tools for notebooks . To understand notebook users’ behaviors , researchers conduct interview studies [ 72 ] and analyze 1 million notebooks scraped from GitHub [ 131 ] . Researchers also present methods to help researchers develop notebook - compatible VA tools [ 116 , 161 ] . More recently , a design space analysis is conducted for AI - powered code assistants for notebooks [ 99 ] . In contrast , our work focuses on the design of VA tools for notebooks by analyzing 161 tools identiﬁed from academic papers and 8 . 6 million notebooks . Addi - tionally , inspired by text visualization browsers [ 82 ] , we develop S UPER NOVA , the ﬁrst interactive explorer of notebook VA tools . 3 O RGANIZATIONAL F RAMEWORK VIA S YSTEMATIC R EVIEW Systematic Review . To study how researchers and practitioners design notebook VA tools , we collected and analyzed 64 academic papers and 103 tools in the wild . In this study , we deﬁne notebook VA tools as systems that can display interactive visualizations in Python computational notebooks . ( 1 ) Literature collection : we searched Google Scholar for notebook VA tools and performed for - ward and backward reference searches to snowball the results . ( 2 ) In - 1 a r X i v : 2305 . 03039v1 [ c s . H C ] 4 M a y 2023 Fig . 2 : S UPER NOVA is an interactive browser to help researchers explore existing 161 notebook VA tools . It allows for easy sorting , ﬁltering , and searching for tools with desired properties ( left panel ) . Clicking a tool shows more details , including its paper metadata and GitHub repository link . the - wild tool collection : we scraped 8 . 6 million notebooks from GitHub and ﬁltered 55k ones containing interactive visualizations by matching notebook cell output types . We extracted 984 potential VA packages by matching variable names and imported modules using abstract syntax trees , and manually examined each package to keep 103 ones were indeed notebook VA tools ( see ‡ A for details ) . ( 3 ) Online feedback collection : we scraped 379 GitHub issues that contain notebook - related keywords in titles or descriptions from 103 open - source VA tools . ( 4 ) Analysis : we conducted an induc - tive qualitative analysis of collected papers , documentation , demo notebooks , and issue descriptions using iterative open coding . Organizational Framework . Our large - scale systematic review resulted in an organizational framework characterizing notebook VA tools in terms of motivations for supporting notebooks ( § 4 ) , targeted users ( § 4 . 1 ) , and design patterns based on user needs ( § 5 ) . Using this framework , we develop S UPER NOVA ( Fig . 2 ) , an interactive explorer that allows for easy ﬁltering and searching for notebook VA tools with desired properties . Finally , based on our review and framework , we distill 10 design opportunities and considerations ( O1 – O10 ) to help future researchers design notebook VA tools . 4 W HY D EVELOP N OTEBOOK V ISUAL A NALYTICS T OOLS This section discusses the motivation for designing and developing interactive visualization tools for computational notebooks . We organize these motivations into four non - mutually exclusive groups . 4 . 1 Seamless Integration with Existing Workﬂows Most of our surveyed visualization tools support computational notebooks as a means of aligning with the workﬂows of end - users . We identify three user groups with distinct workﬂow characteristics . Data Scientists . As notebooks have become the most popular programming environment for data scientists [ 69 ] , many researchers develop VA tools that support notebooks for easy adoption . These tools have covered almost every stage of data scientists’ workﬂow , from annotating data [ 173 ] and exploring data [ 92 ] , to develop - ing ML models [ 109 ] , documenting models [ 16 ] , evaluating mod - els [ 103 ] , and communicating ﬁndings to stakeholders [ 157 ] . Scientists . Notebooks are also popular among scientists , in - cluding biologists and physicists . Many scientists use them as a cloud - computing interface for accessing remote clusters [ 135 ] , and publishing notebooks with academic papers is considered good prac - tice for reproducible research [ 64 ] . Thus , many notebook VA tools are developed to facilitate scientiﬁc research workﬂows , such as designing experiments [ 58 ] , simulating physical environments [ 46 ] , and analyzing molecules [ 106 ] and astronomical data [ 8 ] . Educators and Students . Notebooks are increasingly used as interactive textbooks in computing education , as notebooks can help students interact with code and test their ideas [ 143 ] . Some notebook VA tools are developed speciﬁcally for educators and students . For example , GILP [ 125 ] visualizes simplex algorithms in notebooks , allowing educators to design interactive textbooks and assignments . V IZ P ROG [ 172 ] helps instructors monitor students’ coding progress during in - class exercises through interactive visualization . O1 : If the targeted users of a VA tool regularly use notebooks in their workﬂows , it can be beneﬁcial to add notebook support to the VA tool . In addition to data scientists , common notebook users also include scientists , educators , and students . 4 . 2 Access to Artifacts ( Code , Raw Data , and Models ) In addition to the ease of adoption , notebook VA tools ( especially in data science domains ) beneﬁt from having access to programming artifacts , such as code , raw data , and models . Below we categorize tools that exploit artifacts into two groups . Artifacts → Visualization Generation . To create visualizations in non - notebook environments , data scientists often need to manually specify chart types and input data . However , in - notebook tools have access to all artifacts needed to create visualizations . For example , B2 [ 169 ] uses dataframes and code queries in notebooks to auto - matically synthesize interactive visualizations . Similarly , L UX [ 89 ] and S OLAS [ 39 ] provide automatic visualization recommendations based on a user’s dataframe and analysis history . Through accessing ML models that are being trained in notebooks , T ENSOR B OARD [ 3 ] can visualize the model’s performance in real time . Visualizations → Artifact Reﬁnement . After gaining insights from VA tools , data scientists often manually reﬁne their code , data , and models in non - notebook environments . Notebooks can accelerate this process by directly updating artifacts . For example , M AGE [ 73 ] automatically generates code to reﬂect the change caused by a user’s interaction with visualizations ( e . g . , deleting a column from a ta - ble ) . Similarly , GAM C HANGER [ 160 ] enables users to modify ML model weights by direct manipulation on visualizations . 2 O2 : Direct access to notebook artifacts can help users quickly set up VA tools and operationalize insights , especially for expert users and tasks involving data - wrangling and model - tinkering . 4 . 3 Portability and Shareability The notebook community has created a vibrant ecosystem to convert notebooks into a wide range of mediums . This includes the ability for users to easily publish their notebooks containing interactive visual - izations as slides [ 157 ] , interactive books [ 29 ] , and dashboards [ 12 ] . Therefore , given the portability of notebooks , notebook VA tools have the potential to reach a more diverse audience . For instance , I NTERPRET ML [ 107 ] leverages Jupyter Book [ 29 ] to incorporate in - notebook visualizations into its documentation , providing readers with an engaging way to learn about ML model explanations . O3 : The notebook ecosystem offers various options for distribut - ing and sharing notebook VA tools with diverse stakeholders . 4 . 4 Ease of Implementation There exist multiple methods , varying in difﬁculty , for implementing notebook VA tools . Some methods are simple and attract researchers to add notebook support for existing visualizations . For example , the ML library C AT B OOST [ 120 ] uses Jupyter Notebook’s native ipywidgets to add checkboxes and sliders to help users customize simple loss function plots . Several tools [ e . g . , 103 , 160 , 162 ] apply the NOVA workﬂow [ 161 ] to easily convert web - based VA apps into notebook widgets . Additionally , some developers use notebooks as a platform to quickly prototype and deploy GUI applications . For instance , P IGEON [ 51 ] leverages ipywidgets to implement a simple visualization tool that allows annotators to label text and image data . O4 : Creating simple interactive visualizations in notebooks is relatively easy . There are straightforward methods to integrate existing web - based VA tools into notebook environments . 5 H OW TO D ESIGN N OTEBOOK V ISUAL A NALYTICS T OOLS This section discusses the design and implementation patterns of existing notebook VA tools . To organize these patterns , we construct a four - dimensional design space based on the VA users’ needs . 5 . 1 VA - Notebook Integration and Data Communication To meet user needs , the level of integration between VA tools and notebook environments can vary widely . We characterize this in - tegration continuum by the data communication channels between these two parties , where loosely integrated VA tools have fewer communication channels than more tightly integrated tools . No Direct Communication . A small subset of notebook VA tools does not directly receive data from the notebook environment . For example , A RGO L ITE [ 91 ] allows notebook users to view graph visualizations that are created from a separate website . Some tools take indirect input : T ENSOR B OARD reads log ﬁles from a directory , and S TAT C AST [ 86 ] reads data from a separate database server . One - way Communication . Most notebook VA tools have one - way communication with the notebook environment : they receive input from the notebook environment but do not send it back to the environment . ( 1 ) Users can explicitly specify the input . For example , users can write code to feed a dataframe into YDATA - PROFILING [ 24 ] , which generates interactive visualizations for ex - ploratory data analysis of the given data . ( 2 ) Some tools also leverage implicit input . For instance , S OLAS provides situated visualization recommendations by analyzing a user’s historical analysis code on a dataframe . With a one - way communication , users can follow the familiar input - output notebook pattern [ 78 ] to customize VA tools . Bidirectional Communication . VA tools with a higher level of notebook integration not only receive input from the notebook but also update the notebook content . ( 1 ) These tools can add new code or text to the notebook based on user interactions . For example , B2 adds a user’s interaction history to the notebook cells , and M AGE generates code that can lead to the same consequence as user in - teractions . ( 2 ) Some tools directly modify the runtime states in a notebook . For instance , PYDECK [ 148 ] , a spatial visualization tool , stores the user’s selected data from the visualization in a runtime variable , which users can access in other code cells . Bidirectional communication in notebooks is a powerful and unique feature that can help users operationalize visualization insights . However , devel - opers should be careful about modifying notebook runtime states , as state management is a pain point among notebook users [ 25 ] . Implementation Patterns . If a VA tool does not require a backend server , there are multiple implementation methods with varying difﬁculties depending on the VA - notebook communication channels . For example , one can simply use the notebook’s HTML display to show a VA tool if it does not require direct communication . For one - way communication , one can use the Web standard method postMessage to send data from the notebook to the VA tool . For bidirectional communication , ipywidget can be used to synchronize data , although it is only compatible with certain notebook platforms . Refer to ‡ B for details on implementation strategies . O5 : Researchers need to decide how the data is transferred be - tween the VA tool and the notebook . The more integrated the tool is into the notebook environment , the more powerful it can be , but this also increases its dependence on a speciﬁc notebook platform . 5 . 2 Data Source and Type Notebook environments offer rich and multimodal data sources that a VA tool can use to meet user needs . Runtime Artifacts . The most common visualization data source is a notebook’s runtime artifacts . Visualization tools have access to any data speciﬁed by notebook users ; existing notebook VA tools support many data modalities , such as tables [ 24 ] , spatial data [ 148 ] , and 3D images [ 4 ] . Some tools also leverage ML models in a notebook runtime , helping users interpret transformers [ 153 ] , curate decision trees [ 162 ] , and calibrate generalized additive models [ 170 ] . Code and Text . As notebooks contain user’s code and text documentation , some VA tools take advantage of them to enhance visualizations . For example , A NTEATER [ 42 ] leverages trace - based visualization to help notebook users debug their analysis code . J IG - SAW [ 78 ] uses variable names in a notebook to validate and correct code generated by AI models . More recently , researchers also use code and text in notebooks to create interactive slides to commu - nicate data insights [ 90 , 157 ] . Moreover , to help users write high - quality ML model documentation , D OC ML [ 16 ] links a model card visualization to both code and text cells in a notebook . External Data . Moreover , notebook VA tools can access data beyond the notebook environment , such as the ﬁle system , networks , and hardware information . For example , T ENSOR B OARD and S TAT - C AST visualize data from a local directory and a database server , respectively . NVD ASHBOARD [ 108 ] provides notebook users with an interactive dashboard to monitor real - time GPU usage . O6 : Notebooks provide easy access to multimodal data , including runtime artifacts , code , and text . Researchers can take advantage of unique data available in notebooks to enhance VA tools . 5 . 3 Sensemaking Context VA tools’ display styles can vary based on the user’s sensemaking context . On - demand displays can be used for situational contexts , while always - on displays are suitable for continuous contexts . 3 On - demand display . Most VA tools show interactive visualiza - tions below a code cell [ e . g . , 160 , 165 , 170 ] . These visualizations are part of the cell ﬂow—they move vertically with the cells when a user scrolls through the notebook . With this layout , users can easily create multiple instances of the same VA tool with differ - ent input data . For example , users can create multiple instances of T IMBER T REK [ 162 ] in different cells with different collections of decision trees and compare across these collections . Always - on display . VA tools can also display visualizations outside of notebook cells , leading to an always - on display detached from the cell ﬂow . For instance , B2 [ 169 ] shows all visualizations in a resizable dashboard pane to the right of the notebook UI , allowing users to view persistent visualizations while exploring other aspects of a dataset . Similarly , NVD ASHBOARD [ 108 ] displays multiple charts outside of the notebook UI so that users can monitor their GPU usage in real time while interacting with the notebook . O7 : Depending on the users’ needs , researchers need to consider where to display VA tools in a notebook . On - demand displays can assist with situational sense - making and comparison , while persistent displays can help ongoing monitoring and analysis tasks . 5 . 4 Modularity The modularity of notebook VA tools is a critical consideration when catering to different analysis needs , such as exploratory and exploita - tive , and users’ programming proﬁciency . This helps maintain a balance between the code and the graphical user interface ( GUI ) . Monolithic System . Most notebook VA tools are monolithic , presenting the entire system all at once . For example , when a user calls YDATA - PROFILLING [ 24 ] in a notebook cell , the tool displays a panel beneath the cell that contains all exploratory data analysis visualizations . These visualizations are organized into multiple tabs based on their tasks , such as variable interactions , correlations , and missing values . Monolithic VA tools are suitable for exploratory analysis , guiding users to uncover data patterns and insights . Modular Components . Modular VA tools accommodate the fragmentary nature of notebook code and allow users to easily cus - tomize and compose visualizations . For example , A EQUITAS [ 132 ] , an ML fairness auditing toolkit , provides different interactive visu - alizations for different fairness metrics . These visualizations are modularized into separate functions , enabling users to write code to generate and compose visualizations that meet speciﬁc needs . For instance , a user can create and inspect a fairness overview in a cell and delve into speciﬁc fairness metrics in other separate cells . A modular design is suitable for exploitative analysis , as it allows users to test their hypotheses in a more targeted and customizable manner . O8 : Modularity is an important consideration in notebook VA design . Similar to the tradeoff between code and GUI , a modular VA tool can be more ﬂexible and composable in notebooks , but it also requires a higher level of programming and analysis expertise . 6 U SER E XPERIENCE OF N OTEBOOK VA T OOLS In addition to examining the design of existing notebook VA tools , we also investigate their user experience by analyzing user feedback . 6 . 1 User Studies Out of the 64 notebook VA papers collected , 15 include user studies where participants use VA tools within a notebook environment . We conduct a meta - analysis of the ﬁndings of these user studies . Smooth Integration into Workﬂows . The majority of data scientist participants ﬁnd it convenient to use VA tools directly within their notebooks , which are also their day - to - day work environments [ e . g . , 34 , 103 , 160 ] . Additionally , notebooks can be a helpful medium for disseminating VA insights to other stakeholders [ 170 ] . However , par - ticipants who are not used to notebooks may need extra effort to get familiar with notebook environments before using VA tools [ 136 ] . Mixed Results on Updating Notebook Content . User studies on VA tools that update notebook content have yielded mixed results . Some participants appreciate a notebook VA tool can generate code based on their interactions , as it eliminates the need to remember function names [ 73 ] and search for solutions online [ 34 ] . However , other participants have complained that automatically populating notebook content from a VA tool can be “annoying” [ 169 ] and more experienced users tend to hide or reject generated code [ 73 ] . O9 : Notebook VA tools can be easily adopted by regular notebook users . However , it is crucial to exercise caution when designing VA tools that modify notebook content and states , as intrusive modiﬁcations can lead to potential usability issues . 6 . 2 Online Community Feedback In addition to reviewing lab experiments , we study user feedback in the wild by collecting 379 GitHub issues containing notebook - related keywords from 103 open - source notebook VA tools ( § 3 ) . The collected feedback includes bug reports and feature requests . Challenges in Compatibility and Sharing . The most common bug reports are related to notebook compatibility . Besides Jupyter Note - book , there are an increasing number of notebook platforms , such as Colab , VSCode , and Kaggle . The implementation of some VA tools depends on a speciﬁc platform , making them incompatible with other platforms . Also , tools using ipywidget for notebook in - tegration face maintenance challenges due to version incompatibility issues with different versions of Jupyter Notebook . Additionally , we observe a growing interest in saving and sharing notebook VA through alternative mediums , such as web - based reports . Notebook Design Constraints . Another common theme observed in bug reports is related to notebook - speciﬁc design constraints . For example , some notebook platforms have a small ﬁxed width , pos - ing usability issues for wider VA tools . Similarly , some notebooks automatically switch between light and dark modes , leading to acces - sibility issues when VA tools have a transparent background . Finally , we observe that users request developers to provide modular APIs so that they can apply data transformation and analysis functionalities themselves in notebook code before instantiating the VA tools . O10 : There are a growing number of notebook platforms . Re - searchers need to consider the compatibility of their notebook VA tools by testing them on different platforms . Tools that are closely integrated into a particular platform may face challenges to support other platforms and require more maintenance effort . 7 D ISCUSSION & C ONCLUSION Based on a review of 161 notebook VA tools and user feedback , we introduce a framework for characterizing these tools in terms of their motivation for supporting notebooks , targeted users , and de - sign patterns . We further discuss design considerations and research opportunities for notebook VA . To keep our review manageable and focused , we only consider computational notebooks designed for Python , the most commonly used programming language among data scientists [ 69 ] . Future work could explore notebooks designed for other languages , such as R Markdown for R and Observable for JavaScript . We hope that our work contributes to a more compre - hensive understanding of notebook VA tools and help researchers design and develop VA tools that are easy to use and adopt . A CKNOWLEDGMENTS This work was supported by a J . P . Morgan PhD Fellowship , Apple Scholars in AI / ML PhD fellowship , gifts from Bosch and Cisco . 4 ‡ C HARACTERIZING N OTEBOOK VA T OOLS Below we characterize 161 collected notebook VA tools using our organizational framework ( targeted users and a four - dimensional design space described in § 3 ) , as well as their supported notebook platforms and implementation methods . See S UPER NOVA for an interactive version with more details about each entry . Table 1 : This tables’ columns include notebook VA tools’ names , intended users ( data scientists , scientist , educators and stu - dents ) ; VA - notebook communication styles ( no direct communica - tion , one - way , bidirectional ) ; data source ( runtime , text and code , external ) ; sensemaking contexts ( on - demand , always - on ) ; modularity ( monolithic , modular ) . The table also includes each tool’s supported notebook platforms ( Jupyter Notebook only , JupyterLab only , Jupyter Notebook + JupyterLab , all popular platforms ) and its implementation method ( NOVA , HTML display , ipywidget , Lab Extension , custom servers ) . Notebook VA Tool User Com . Data Ctx . Mod . Plat . Impl . Aequitas [ 132 ] Altair [ 150 ] Anteater [ 42 ] Apache Beam [ 7 ] Argo Lite [ 91 ] Atria [ 166 ] AutoProﬁler [ 38 ] AutoViz [ 11 ] Ax [ 40 ] B2 [ 169 ] Bacata [ 152 ] Bamboolib [ 80 ] BERTopic [ 57 ] BertViz [ 153 ] Bokeh [ 18 ] bqplot [ 22 ] Brax [ 54 ] Calibrate [ 170 ] Calling Context Tree [ 136 ] CatBoost [ 120 ] CausalVis [ 59 ] ChartPy [ 31 ] Clustergrammar [ 44 ] Cyberhubs [ 64 ] Cytoscapejs [ 45 ] CZML3 [ 119 ] d3fdgraph [ 102 ] Data + Shift [ 111 ] Data - Puriﬁer [ 60 ] datapane [ 32 ] DataPrep [ 113 ] DEA Tools [ 81 ] DocML [ 16 ] EDAssistant [ 92 ] ELI5 [ 79 ] Emblaze [ 142 ] Errudite [ 168 ] Escher [ 75 ] Evidently [ 5 ] FiftyOne [ 155 ] Fireﬂy [ 61 ] Flexx [ 77 ] Folium [ 43 ] GAM Changer [ 160 ] GateNLP [ 115 ] GeoPandas [ 68 ] GeoViews [ 129 ] GILP [ 125 ] Notebook VA Tool User Com . Data Ctx . Mod . Plat . Impl . Graphistry [ 55 ] gravis [ 62 ] Gwaihir [ 140 ] HCIplot [ 52 ] HiPlot [ 41 ] igv [ 126 ] imolecule [ 48 ] Intake [ 36 ] Interpret - Community [ 100 ] InterpretML [ 107 ] ipyannotate [ 83 ] ipydatagrid [ 17 ] ipysheet [ 122 ] IPython Vega [ 134 ] ipytree [ 123 ] ipyvizzu [ 154 ] itables [ 167 ] itkwidgets [ 98 ] ivpy [ 30 ] jgraph [ 49 ] Jigsaw [ 67 ] Jupyter Dash [ 112 ] JupyterPiDAQ [ 85 ] jyquickhelper [ 35 ] Kaleidoscope [ 124 ] KeplerGL [ 71 ] Keras [ 28 ] LightGBM [ 70 ] Lightkurve [ 93 ] LIT Tool [ 146 ] Lux [ 89 ] mage [ 73 ] Matplotlib [ 66 ] Mayavi [ 37 ] MEGAnno [ 173 ] MLProvLab [ 74 ] ModelSketchBook [ 87 ] mols2grid [ 21 ] Moving Pandas [ 56 ] NaaVRE [ 174 ] nbinteract [ 88 ] Nbtutor [ 94 ] Nengo [ 105 ] neo4jupyter [ 96 ] Networkit [ 6 ] NGLview [ 106 ] Nilearn [ 4 ] NL4DV [ 104 ] NoLiES [ 144 ] NOMAD [ 135 ] Notable [ 90 ] NVDashboard [ 108 ] Open3d [ 110 ] Pandas - Bokeh [ 65 ] PandasGUI [ 127 ] Panel [ 130 ] Pathpy [ 63 ] Perspective [ 145 ] PI2 [ 27 ] Pigeon [ 51 ] PipelineProﬁler [ 109 ] PixieDust [ 118 ] Plotly [ 138 ] Plotly - Resampler [ 149 ] Plotting Agent [ 158 ] Py2cytoscape [ 20 ] py3Dmol [ 10 ] PyCaret [ 13 ] pydeck [ 148 ] pydgrid [ 97 ] 5 Notebook VA Tool User Com . Data Ctx . Mod . Plat . Impl . PyGeoHydro [ 26 ] pyLDAvis [ 139 ] PyMove [ 133 ] PyPathway [ 121 ] PyPotree [ 19 ] Pytket [ 141 ] Pyvis [ 114 ] PyZX [ 76 ] Qgrid [ 137 ] Quantstats [ 9 ] Quick - EDA [ 151 ] RAI Widgets [ 101 ] SHAP [ 95 ] Slide4N [ 157 ] Smoothy [ 8 ] Solas [ 39 ] Spatialtis [ 2 ] ST - VISIONS [ 147 ] StatCast Dashboard [ 86 ] SweetViz [ 15 ] Symphony [ 12 ] Taggle [ 50 ] TensorBoard [ 3 ] TF Model Analysis [ 53 ] TimberTrek [ 162 ] TissUUmaps [ 117 ] Toyplot [ 1 ] Trimesh [ 33 ] ULCA [ 47 ] VAEX [ 23 ] VAINE [ 58 ] visJS2jupyter [ 128 ] Visual Auditor [ 103 ] Vizic [ 171 ] VizProg [ 172 ] VizSeq [ 156 ] VizSmith [ 14 ] Wandb [ 164 ] Weedle [ 84 ] What - if Tool [ 165 ] Whatlies [ 163 ] Wrex [ 34 ] ydata - proﬁling [ 24 ] R EFERENCES [ 1 ] Toyplot : Interactive plotting for Python . Sandia National Laboratories , 2022 . [ 2 ] AaltoGIS . Spatial Data Science for Sustainable Development . Aalto - GIS , 2020 . [ 3 ] M . Abadi , P . Barham , J . Chen , Z . Chen , A . Davis , J . Dean , M . Devin , S . Ghemawat , G . Irving , M . Isard , M . Kudlur , J . Levenberg , R . Monga , S . Moore , D . G . Murray , B . Steiner , P . Tucker , V . Vasudevan , P . War - den , M . Wicke , Y . Yu , and X . Zheng . TensorFlow : A system for large - scale machine learning . In OSDI , 2016 . [ 4 ] A . Abraham , F . Pedregosa , M . Eickenberg , P . Gervais , A . Mueller , J . Kossaiﬁ , A . Gramfort , B . Thirion , and G . Varoquaux . Machine learning for neuroimaging with scikit - learn . Front . Neuroinform , 2014 . [ 5 ] E . AI . Evidently : Evaluate and monitor ML models from validation to production . Evidently AI , 2022 . [ 6 ] E . Angriman , F . Brandt - Tumescheit , L . Franke , A . van der Grinten , and H . Meyerhenke . Interactive Visualization of Protein RINs using NetworKit in the Cloud . In 2022 IEEE International Parallel and Distributed Processing Symposium Workshops ( IPDPSW ) , 2022 . [ 7 ] Apache . Apache Beam : Uniﬁed programming model for Batch and Streaming data processing . The Apache Software Foundation , 2019 . [ 8 ] M . Araya , M . Osorio , M . D ´ ıaz , C . Ponce , M . Villanueva , C . Valen - zuela , and M . Solar . JOVIAL : Notebook - based astronomical data analysis in the cloud . Astronomy and Computing , 25 , 2018 . [ 9 ] R . Aroussi . Quantstats : Portfolio analytics for quants , written in Python , 2019 . [ 10 ] Autodesk . Notebook Molecular Visualization , 2016 . [ 11 ] AutoViML . AutoViz : Automatically Visualize any dataset , any size with a single line of code , 2020 . [ 12 ] A . B¨auerle , ´A . A . Cabrera , F . Hohman , M . Maher , D . Koski , X . Suau , T . Barik , and D . Moritz . Symphony : Composing Interactive Interfaces for Machine Learning . In CHI , 2022 . [ 13 ] A . Baum . PyCaret : An open - source , low - code machine learning library in Python . PyCaret , 2020 . [ 14 ] R . Bavishi , S . Laddad , H . Yoshida , M . R . Prasad , and K . Sen . Viz - Smith : Automated Visualization Synthesis by Mining Data - Science Notebooks . In 2021 36th IEEE / ACM International Conference on Automated Software Engineering ( ASE ) , 2021 . [ 15 ] F . Bertrand . SweetViz : In - depth EDA in two lines of code , 2020 . [ 16 ] A . Bhat , A . Coursey , G . Hu , S . Li , N . Nahar , S . Zhou , C . K¨astner , and J . L . C . Guo . Aspirations and Practice of Model Documentation : Moving the Needle with Nudging and Traceability . In CHI , 2023 . [ 17 ] Bloomberg . Ipydatagrid : Fast Datagrid widget for the Jupyter Note - book and JupyterLab . Bloomberg , 2019 . [ 18 ] Bokeh Development Team . Bokeh : Python library for interactive visualization , 2014 . [ 19 ] C . Borelli . Pypotree : Potree for jupyter notebooks and colab , 2019 . [ 20 ] J . Boucas . Py2cytoscape : Python utilities for Cytoscape and Cy - toscape . js . Cytoscape Consortium , 2015 . [ 21 ] C . Bouysset . Mols2grid - Interactive molecule viewer for 2D struc - tures , 2021 . [ 22 ] Bqplot . Bqplot : Plotting library for IPython / Jupyter notebooks , 2016 . [ 23 ] M . A . Breddels . Interactive ( statistical ) visualisation and exploration of a billion objects with vaex . Proceedings of the International Astronomical Union , 12 , 2016 . [ 24 ] S . Brugman . Pandas - proﬁling : Exploratory data analysis , 2019 . [ 25 ] S . Chattopadhyay , I . Prasad , A . Z . Henley , A . Sarma , and T . Barik . What’s Wrong with Computational Notebooks ? Pain Points , Needs , and Design Opportunities . In CHI , 2020 . [ 26 ] T . Chegini , H . - Y . Li , and L . R . Leung . HyRiver : Hydroclimate data retriever . Journal of Open Source Software , 6 , 2021 . [ 27 ] Y . Chen and E . Wu . PI2 : End - to - end Interactive Visualization Inter - face Generation from Queries . In Proceedings of the 2022 Interna - tional Conference on Management of Data , 2022 . [ 28 ] F . Chollet . Keras . 2015 . [ 29 ] E . B . Community . Jupyter Book . Zenodo , 2020 . [ 30 ] D . Crockett . Ivpy : Iconographic Visualization Inside Computational Notebooks . International Journal for Digital Art History , 2021 . [ 31 ] Cuemacro . Chartpy : Easy to use Python API wrapper to plot charts with matplotlib , plotly , bokeh and more , 2016 . [ 32 ] Datapane . Datapane : Build full - stack data apps in 100 % Python . Datapane , 2023 . [ 33 ] Dawson - Haggerty et al . Trimesh , 2019 . [ 34 ] I . Drosos , T . Barik , P . J . Guo , R . DeLine , and S . Gulwani . Wrex : A Uniﬁed Programming - by - Example Interaction for Synthesizing Readable Code for Data Scientists . In CHI , 2020 . [ 35 ] x . dupr´e . Jyquickhelper : Helpers for Jupyter notebooks around javascript , 2016 . [ 36 ] M . Durant . Intake : A general interface for loading data . Intake , 2018 . [ 37 ] Enthought . Mayavi : 3D visualization of scientiﬁc data in Python . Enthought , Inc . , 2015 . [ 38 ] W . Epperson . AutoProﬁler : Automatically proﬁle dataframes in the Jupyter sidebar , 2022 . [ 39 ] W . Epperson , D . Jung - Lin Lee , L . Wang , K . Agarwal , A . G . Parameswaran , D . Moritz , and A . Perer . Leveraging Analysis His - tory for Improved In Situ Visualization Recommendation . Computer Graphics Forum , 41 , 2022 . [ 40 ] Facebook . Ax : Adaptive Experimentation Platform . Meta , 2019 . [ 41 ] Facebook . HiPlot makes understanding high dimensional data easy , 2020 . [ 42 ] R . Faust , C . Scheidegger , K . Isaacs , W . Z . Bernstein , M . Sharp , and C . North . Interactive Visualization for Data Science Scripts . In 2022 IEEE Visualization in Data Science ( VDS ) , 2022 . 6 [ 43 ] F . Fernandes . Folium : Python Data . Leaﬂet . js Maps , 2019 . [ 44 ] N . F . Fernandez , G . W . Gundersen , A . Rahman , M . L . Grimes , K . Rikova , P . Hornbeck , and A . Ma’ayan . Clustergrammer , a web - based heatmap visualization and analysis tool for high - dimensional biological data . Scientiﬁc Data , 4 , 2017 . [ 45 ] M . Franz , M . Cheung , O . Sumer , G . Huck , D . Fong , R - Ba , J . Mart´ınez , J . ˇZ´ak , T . Mullen , B . Chadkin , Ayhun , Metincansiper , Chris , J . Hart - mann , J . Stahl , P . Parlapiano , E . Sherer , M . Gauthier , R . Trott , Y . Sidlovsky , Bumbu , A . Li , C . Lopes , TexKiller , M . Beynon , G . Meira , J . Mehta , and M . Dias . Cytoscape / cytoscape . js . Zenodo , 2022 . [ 46 ] C . D . Freeman , E . Frey , A . Raichuk , S . Girgin , I . Mordatch , and O . Bachem . Brax : A differentiable physics engine , 2021 . [ 47 ] T . Fujiwara , X . Wei , J . Zhao , and K . - L . Ma . Interactive Dimension - ality Reduction for Comparative Analysis . IEEE Transactions on Visualization and Computer Graphics , 28 , 2022 . [ 48 ] P . Fuller . Imolecule : An embeddable webGL molecule viewer and ﬁle format converter , 2013 . [ 49 ] P . Fuller . Jgraph : An embeddable webGL graph visualization library , 2013 . [ 50 ] K . Furmanova , S . Gratzl , H . Stitz , T . Zichner , M . Jaresova , A . Lex , and M . Streit . Taggle : Combining overview and details in tabular data visualizations . Information Visualization , 19 , 2020 . [ 51 ] A . Germanidis . Pigeon : Quickly annotate data on Jupyter , 2017 . [ 52 ] C . Gonzalez . Hciplot : Library for visualizing high - contrast imaging multidimensional datacubes on JupyterLab , 2019 . [ 53 ] Google . TensorFlow Model Analysis , 2018 . [ 54 ] Google . Brax : Massively parallel rigidbody physics simulation on accelerator hardware . , 2021 . [ 55 ] Graphistry . PyGraphistry : Explore Relationships , 2016 . [ 56 ] A . Graser and M . Dragaschnig . Exploring movement data in note - book environments . In IEEE VIS 2020 Workshop on Information Visualization of Geospatial Networks , Flows and Movement ( MoVis ) , 2020 . [ 57 ] M . Grootendorst . BERTopic : Neural topic modeling with a class - based TF - IDF procedure . arXiv preprint arXiv : 2203 . 05794 , 2022 . [ 58 ] G . Guo , M . Glenski , Z . Shaw , E . Saldanha , A . Endert , S . Volkova , and D . Arendt . VAINE : Visualization and AI for Natural Experiments . In 2021 IEEE Visualization Conference ( VIS ) , 2021 . [ 59 ] G . Guo , E . Karavani , A . Endert , and B . C . Kwon . Causalvis : Vi - sualizations for Causal Inference . In Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems , 2023 . [ 60 ] A . Gupta . Data - Puriﬁer : A Python library for Automated Exploratory Data Analysis , 2021 . [ 61 ] A . B . Gurvich and A . M . Geller . Fireﬂy : A Browser - based Inter - active 3D Data Visualization Tool for Millions of Data Points . The Astrophysical Journal Supplement Series , 265 , 2023 . [ 62 ] R . Haas . Gravis : Interactive graph visualizations with Python and HTML / CSS / JS , 2021 . [ 63 ] J . Hackl . Pathpy : An OpenSource python package for the analysis of time series data on networks using higher - order and multi - order graphical models . , 2019 . [ 64 ] F . Herwig , R . Andrassy , N . Annau , O . Clarkson , B . Cˆot´e , A . D’Sa , S . Jones , B . Moa , J . O’Connell , D . Porter , C . Ritter , and P . Woodward . Cyberhubs : Virtual Research Environments for Astronomy . The Astrophysical Journal Supplement Series , 236 , 2018 . [ 65 ] P . Hlobil . Pandas - Bokeh : Bokeh Plotting Backend for Pandas and GeoPandas , 2018 . [ 66 ] J . D . Hunter . Matplotlib : A 2D graphics environment . Computing in Science & Engineering , 9 , 2007 . [ 67 ] N . Jain , S . Vaidyanath , A . Iyer , N . Natarajan , S . Parthasarathy , S . Ra - jamani , and R . Sharma . Jigsaw : Large language models meet program synthesis . In Proceedings of the 44th International Conference on Software Engineering , 2022 . [ 68 ] K . Jordahl , J . Van Den Bossche , M . Fleischmann , J . McBride , J . Wasserman , M . Richards , A . G . Badaracco , A . D . Snow , J . Gerard , J . Tratner , M . Perry , B . Ward , C . Farmer , G . A . Hjelle , M . Taves , E . T . Hoeven , M . Cochran , Rraymondgh , S . Gillies , G . Caria , L . Culbert - son , M . Bartos , N . Eubank , R . Bell , Sangarshanan , J . Flavin , S . Rey , Maxalbert , A . Bilogur , and C . Ren . Geopandas / geopandas : V0 . 12 . 2 . Zenodo , 2022 . [ 69 ] Kaggle . State of Machine Learning and Data Science 2022 , 2022 . [ 70 ] G . Ke , Q . Meng , T . Finely , T . Wang , W . Chen , W . Ma , Q . Ye , and T . - Y . Liu . LightGBM : A highly efﬁcient gradient boosting decision tree . In Advances in Neural Information Processing Systems 30 ( NIP 2017 ) , 2017 . [ 71 ] Keplergl . Kepler . gl : A powerful open source geospatial analysis tool for large - scale data sets . , 2019 . [ 72 ] M . B . Kery , M . Radensky , M . Arya , B . E . John , and B . A . Myers . The Story in the Notebook : Exploratory Data Science using a Literate Programming Tool . In CHI , 2018 . [ 73 ] M . B . Kery , D . Ren , F . Hohman , D . Moritz , K . Wongsuphasawat , and K . Patel . Mage : Fluid Moves Between Code and Graphical Work in Computational Notebooks . In CHI , 2020 . [ 74 ] D . Kerzel , B . K¨onig - Ries , and S . Sheeba . MLProvLab : Provenance Management for Data Science Notebooks . 2023 . [ 75 ] Z . King . Escher : Build , share , and embed visualizations of metabolic pathways , 2016 . [ 76 ] A . Kissinger and J . van de Wetering . PyZX : Large scale automated diagrammatic reasoning . In Proceedings 16th International Confer - ence on Quantum Physics and Logic , Chapman University , Orange , CA , USA . , 10 - 14 June 2019 , vol . 318 of Electronic Proceedings in Theoretical Computer Science , 2020 . [ 77 ] A . Klein . Flexx : Write desktop and web apps in pure Python , 2016 . [ 78 ] T . Kluyver and others . Jupyter Notebooks - a Publishing Format for Reproducible Computational Workﬂows . ELPUB , 2016 . [ 79 ] M . Korobov . ELI5 : A library for debugging / inspecting machine learning classiﬁers and explaining their predictions . eli5 - org , 2016 . [ 80 ] T . Krabel . Bamboolib : GUI for Pandas DataFrames , 2019 . [ 81 ] C . Krause , B . Dunn , R . Bishop - Taylor , C . Adams , C . Burton , M . Al - ger , S . Chua , C . Phillips , V . Newey , K . Kouzoubov , A . Leith , D . Ayers , A . Hicks , and D . N . contributors . Digital Earth Australia notebooks and tools repository , 2021 . [ 82 ] K . Kucher and A . Kerren . Text visualization techniques : Taxonomy , visual survey , and community insights . In PaciﬁcVis , 2015 . [ 83 ] A . Kukushkin . Ipyannotate : Jupyter Widget for data annotation , 2018 . [ 84 ] N . Kwon , H . Kim , S . Rahman , D . Zhang , and E . Hruschka . Wee - dle : Composable Dashboard for Data - Centric NLP in Computational Notebooks . In Companion Proceedings of the ACM Web Conference 2023 , 2023 . [ 85 ] J . P . S . Lab . JupyterPiDAQ : Interactive analog data acquisition and analysis within Jupyter notebooks using GUI tools . Jupyter Physical Science Lab , 2020 . [ 86 ] M . Lage , J . P . Ono , D . Cervone , J . Chiang , C . Dietrich , and C . T . Silva . StatCast Dashboard : Exploration of Spatiotemporal Baseball Data . IEEE Computer Graphics and Applications , 36 , 2016 . [ 87 ] M . S . Lam , Z . Ma , A . Li , I . Freitas , D . Wang , J . A . Landay , and M . S . Bernstein . Model Sketching : Centering Concepts in Early - Stage Machine Learning Model Design . arXiv 2303 . 02884 , 2023 . [ 88 ] S . Lau and J . Hug . Nbinteract : Generate interactive web pages from Jupyter notebooks . Master’s thesis , University of California at Berkeley , 2018 . [ 89 ] D . J . - L . Lee , D . Tang , K . Agarwal , T . Boonmark , C . Chen , J . Kang , U . Mukhopadhyay , J . Song , M . Yong , M . A . Hearst , and A . G . Parameswaran . Lux : Always - on visualization recommendations for exploratory dataframe workﬂows . VLDB Endowment , 15 , 2021 . [ 90 ] H . Li , L . Ying , H . Zhang , Y . Wu , H . Qu , and Y . Wang . Notable : On - the - ﬂy Assistant for Data Storytelling in Computational Notebooks . In CHI , 2023 . [ 91 ] S . Li , Z . Zhou , A . Upadhayay , O . Shaikh , S . Freitas , H . Park , Z . J . Wang , S . Routray , M . Hull , and D . H . Chau . Argo Lite : Open - Source Interactive Graph Exploration and Visualization in Browsers . In CIKM , 2020 . [ 92 ] X . Li , Y . Zhang , J . Leung , C . Sun , and J . Zhao . EDAssistant : Sup - porting Exploratory Data Analysis in Computational Notebooks with In Situ Code Search and Recommendation . ACM TiiS , 13 , 2023 . 7 [ 93 ] Lightkurve Collaboration , J . V . d . M . Cardoso , C . Hedges , M . Gully - Santiago , N . Saunders , A . M . Cody , T . Barclay , O . Hall , S . Sagear , E . Turtelboom , J . Zhang , A . Tzanidakis , K . Mighell , J . Coughlin , K . Bell , Z . Berta - Thompson , P . Williams , J . Dotson , and G . Bar - entsen . Lightkurve : Kepler and TESS time series analysis in Python . Astrophysics Source Code Library , 2018 . [ 94 ] Logan . Nbtutor : Visualize Python code execution ( line - by - line ) in Jupyter Notebook cells , 2023 . [ 95 ] S . M . Lundberg and S . - I . Lee . A uniﬁed approach to interpreting model predictions . In Proceedings of the 31st International Confer - ence on Neural Information Processing Systems , NIPS’17 , 2017 . [ 96 ] G . Maeztu . Neo4jupyter : A quick visualization tool for Jupyter and Neo4J , 2016 . [ 97 ] J . M . Mauricio . Pydgrid : Python Distribution Grid Simulator , 2017 . [ 98 ] M . McCormick , B . Major , L . Abdala , P . Elliott , and S . R . Aylward . InsightSoftwareConsortium / itkwidgets : Itkwidgets 0 . 32 . 5 . Zenodo , 2022 . [ 99 ] A . M . Mcnutt , C . Wang , R . A . Deline , and S . M . Drucker . On the Design of AI - powered Code Assistants for Notebooks . In CHI , 2023 . [ 100 ] Microsoft . Interpret Community SDK , 2019 . [ 101 ] Microsoft . Responsible AI Toolbox . Microsoft , 2020 . [ 102 ] I . T . Mining . D3fdgraph : D3 interactive animated force - directed graphs in a jupyter notebook , 2019 . [ 103 ] D . Munechika , Z . J . Wang , J . Reidy , J . Rubin , K . Gade , K . Kentha - padi , and D . H . Chau . Visual Auditor : Interactive Visualization for Detection and Summarization of Model Biases . In VIS , 2022 . [ 104 ] A . Narechania , A . Srinivasan , and J . Stasko . NL4DV : A Toolkit for Generating Analytic Speciﬁcations for Data Visualization from Natural Language Queries . IEEE Transactions on Visualization and Computer Graphics , 27 , 2021 . [ 105 ] Nengo . Nengo : A Python library for creating and simulating large - scale brain models . Nengo , 2019 . [ 106 ] H . Nguyen , D . A . Case , and A . S . Rose . NGLview – interactive molec - ular graphics for Jupyter notebooks . Bioinformatics , 34 , 2018 . [ 107 ] H . Nori , S . Jenkins , P . Koch , and R . Caruana . InterpretML : A Uniﬁed Framework for Machine Learning Interpretability . arXiv , 2019 . [ 108 ] NVIDIA . NVDashboard : A JupyterLab extension for displaying dashboards of GPU usage . RAPIDS , 2021 . [ 109 ] J . P . Ono , S . Castelo , R . Lopez , E . Bertini , J . Freire , and C . Silva . PipelineProﬁler : A Visual Analytics Tool for the Exploration of Au - toML Pipelines . TVCG , 27 , 2021 . [ 110 ] I . S . L . Org . Open3D : Open3D : A Modern Library for 3D Data Processing , 2019 . [ 111 ] J . Palmeiro , B . Malveiro , R . Costa , D . Polido , R . Moreira , and P . Bizarro . Data + Shift : Supporting Visual Investigation of Data Distribution Shifts by Data Scientists . 2022 . [ 112 ] C . Parmer . Dash : Data Apps & Dashboards for Python . Plotly , 2020 . [ 113 ] J . Peng , W . Wu , B . Lockhart , S . Bian , J . N . Yan , L . Xu , Z . Chi , J . M . Rzeszotarski , and J . Wang . DataPrep . EDA : Task - Centric Exploratory Data Analysis for Statistical Modeling in Python . In Proceedings of the 2021 International Conference on Management of Data , 2021 . [ 114 ] G . Perrone , J . Unpingco , and H . - m . Lu . Network visualizations with Pyvis and VisJS . arXiv 2006 . 04951 , 2020 . [ 115 ] J . Petrak . Python - gatenlp : Python text processing , pattern matching , and NLP framework . GateNLP , 2020 . [ 116 ] J . Piazentin Ono , J . Freire , and C . T . Silva . Interactive Data Visualiza - tion in Jupyter Notebooks . Comput Sci Eng , 23 , 2021 . [ 117 ] N . Pielawski , A . Andersson , C . Avenel , A . Behanova , E . Chelebian , A . Klemm , F . Nysj¨o , L . Solorzano , and C . W¨ahlby . TissUUmaps 3 : Improvements in interactive visualization , exploration , and quality assessment of large - scale spatial omics data . Preprint , Bioinformatics , 2022 . [ 118 ] PixieDust . PixieDust : Python Helper library for Jupyter Notebooks . Pixiedust development , 2016 . [ 119 ] Poliastro . Czml3 : Python 3 library to write CZML , 2019 . [ 120 ] L . Prokhorenkova , G . Gusev , A . Vorobev , A . V . Dorogush , and A . Gulin . CatBoost : Unbiased boosting with categorical features . arXiv , 2019 . [ 121 ] PyPathway . PyPathway : A python package for pathway visualization , 2022 . [ 122 ] QuantStack . Ipysheet : Jupyter handsontable integration . QuantStack , 2017 . [ 123 ] QuantStack . Ipytree : A Tree Widget using Jupyter - widgets protocol and jsTree . QuantStack , 2022 . [ 124 ] QuSTaR . Kaleidoscope : Visualizations for quantum computing . , 2019 . [ 125 ] H . W . Robbins , S . C . Gutekunst , D . B . Shmoys , and D . P . Williamson . GILP : An Interactive Tool for Visualizing the Simplex Algorithm . In SIGCSE , 2023 . [ 126 ] J . Robinson . Module for embedding igv . js in an IPython notebook , 2022 . [ 127 ] A . Rose . PandasGUI : A GUI for Pandas DataFrames , 2020 . [ 128 ] S . B . Rosenthal , J . Len , M . Webster , A . Gary , A . Birmingham , and K . M . Fisch . Interactive network visualization in Jupyter notebooks : visJS2jupyter . Bioinformatics , 34 , 2018 . [ 129 ] P . Rudiger . Geoviews : Simple , concise geographical visualization in Python . HoloViz , 2016 . [ 130 ] P . Rudiger . Panel : A high - level app and dashboarding solution for Python . HoloViz , 2021 . [ 131 ] A . Rule , A . Tabard , and J . D . Hollan . Exploration and Explanation in Computational Notebooks . In CHI , 2018 . [ 132 ] P . Saleiro , B . Kuester , L . Hinkson , J . London , A . Stevens , A . Anisfeld , K . T . Rodolfa , and R . Ghani . Aequitas : A Bias and Fairness Audit Toolkit . arXiv 1811 . 05577 , 2019 . [ 133 ] M . X . Sampaio . PyMove : Python library to simplify queries and visualization of trajectories and other spatial - temporal data . Insight Data Science Lab , 2018 . [ 134 ] A . Satyanarayan , D . Moritz , K . Wongsuphasawat , and J . Heer . Vega - lite : A grammar of interactive graphics . IEEE Transactions on Visual - ization & Computer Graphics ( Proc . InfoVis ) , 2017 . [ 135 ] L . Sbail ` o , ´A . Fekete , L . M . Ghiringhelli , and M . Schefﬂer . The NOMAD Artiﬁcial - Intelligence Toolkit : Turning materials - science data into knowledge and understanding . Computational Materials , 2022 . [ 136 ] C . Scully - Allison , I . Lumsden , K . Williams , J . Bartels , M . Taufer , S . Brink , A . Bhatele , O . Pearce , and K . E . Isaacs . Designing an Interactive , Notebook - Embedded , Tree Visualization to Support Ex - ploratory Performance Analysis . arXiv 2205 . 04557 , 2022 . [ 137 ] T . Shawver . Qgrid : An interactive grid for sorting , ﬁltering , and editing DataFrames in Jupyter notebooks , 2017 . [ 138 ] C . Sievert , C . Parmer , T . Hocking , S . Chamberlain , K . Ram , M . Corvellec , and P . Despouy . Plotly : Create interactive web graphics via ‘plotly . js’ . 4 , 2017 . [ 139 ] C . Sievert and K . Shirley . LDAvis : A method for visualizing and interpreting topics . In Proceedings of the Workshop on Interactive Language Learning , Visualization , and Interfaces , 2014 . [ 140 ] D . Simonne , J . Carnis , C . Atlan , C . Chatelier , V . Favre - Nicolin , M . Dupraz , S . J . Leake , E . Zatterin , A . Resta , A . Coati , and M . - I . Richard . Gwaihir : Jupyter Notebook graphical user interface for Bragg coherent diffraction imaging . Journal of Applied Crystallogra - phy , 55 , 2022 . [ 141 ] S . Sivarajah , S . Dilkes , A . Cowtan , W . Simmons , A . Edgington , and R . Duncan . TKET : A retargetable compiler for NISQ devices . Quantum Science and Technology , 6 , 2020 . [ 142 ] V . Sivaraman , Y . Wu , and A . Perer . Emblaze : Illuminating Machine Learning Representations through Interactive Comparison of Embed - ding Spaces . In 27th International Conference on Intelligent User Interfaces , 2022 . [ 143 ] D . H . Smith , Q . Hao , C . D . Hundhausen , F . Jagodzinski , J . Myers - Dean , and K . Jaeger . Towards Modeling Student Engagement with Interactive Computing Textbooks : An Empirical Study . In SIGCSE , 2021 . [ 144 ] J . - T . Sohns , M . Schmitt , F . Jirasek , H . Hasse , and H . Leitte . Attribute - based Explanation of Non - Linear Embeddings of High - Dimensional Data . IEEE Transactions on Visualization and Computer Graphics , 28 , 2022 . 8 [ 145 ] A . Stein . Perspective : Interactive analytics and data visualization component , 2022 . [ 146 ] I . Tenney , J . Wexler , J . Bastings , T . Bolukbasi , A . Coenen , S . Gehrmann , E . Jiang , M . Pushkarna , C . Radebaugh , E . Reif , and A . Yuan . The language interpretability tool : Extensible , interactive visualizations and analysis for NLP models . In EMNLP Demo , 2020 . [ 147 ] A . Tritsarolis , C . Doulkeridis , N . Pelekis , and Y . Theodoridis . ST VISIONS : A Python Library for Interactive Visualization of Spatio - temporal Data . In 2021 22nd IEEE International Conference on Mobile Data Management ( MDM ) , 2021 . [ 148 ] Uber . Deck . gl : WebGL2 powered geospatial visualization layers , 2016 . [ 149 ] J . Van Der Donckt , J . Van der Donckt , E . Deprost , and S . Van Hoecke . Plotly - Resampler : Effective Visual Analytics for Large Time Series . In 2022 IEEE Visualization and Visual Analytics ( VIS ) , 2022 . [ 150 ] J . VanderPlas , B . Granger , J . Heer , D . Moritz , K . Wongsuphasawat , A . Satyanarayan , E . Lees , I . Timofeev , B . Welsh , and S . Sievert . Altair : Interactive Statistical Visualizations for Python . Journal of Open Source Software , 3 , 2018 . [ 151 ] S . Venkatachalapathi . Quick - EDA : Simple & Easy - to - use python modules to perform Quick Exploratory Data Analysis for any struc - tured dataset , 2020 . [ 152 ] M . Verano Merino , J . Vinju , and T . van der Storm . Bacat´a : Notebooks for DSLs , Almost for Free . The Art , Science , and Engineering of Programming , 4 , 2020 . [ 153 ] J . Vig . A multiscale visualization of attention in the transformer model . In ACL : System Demonstrations , 2019 . [ 154 ] Vizzu . Ipyvizzu : Build animated charts in Jupyter Notebook and similar environments with a simple Python syntax . Vizzu , 2022 . [ 155 ] Voxel51 . Fiftyone : Building high - quality datasets and computer vision models . Voxel51 , 2020 . [ 156 ] C . Wang , A . Jain , D . Chen , and J . Gu . VizSeq : A visual analysis toolkit for text generation tasks . In Proceedings of the 2019 Confer - ence on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing ( EMNLP - IJCNLP ) : System Demonstrations , 2019 . [ 157 ] F . Wang , X . Liu , O . Liu , A . Neshati , T . Ma , M . Zhu , and J . Zhao . Slide4N : Creating Presentation Slides from Computational Notebooks with Human - AI Collaboration . In CHI , 2023 . [ 158 ] Y . Wang , Y . Shao , and N . Nakashole . Interactive Plot Manipulation using Natural Language . In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics : Human Language Technologies : Demonstrations , 2021 . [ 159 ] Z . J . Wang , K . Dai , and W . K . Edwards . StickyLand : Breaking the Linear Presentation of Computational Notebooks . CHI EA , 2022 . [ 160 ] Z . J . Wang , A . Kale , H . Nori , P . Stella , M . E . Nunnally , D . H . Chau , M . Vorvoreanu , J . Wortman Vaughan , and R . Caruana . Interpretability , Then What ? Editing Machine Learning Models to Reﬂect Human Knowledge and Values . In KDD , 2022 . [ 161 ] Z . J . Wang , D . Munechika , S . Lee , and D . H . Chau . NOVA : A Practical Method for Creating Notebook - Ready Visual Analytics . arXiv , 2022 . [ 162 ] Z . J . Wang , C . Zhong , R . Xin , T . Takagi , Z . Chen , D . H . Chau , C . Rudin , and M . Seltzer . TimberTrek : Exploring and Curating Trustworthy Decision Trees with Interactive Visualization . In VIS , 2022 . [ 163 ] V . Warmerdam , T . Kober , and R . Tatman . Going beyond T - SNE : Exposing whatlies in text embeddings . In Proceedings of Second Workshop for NLP Open Source Software ( NLP - OSS ) , 2020 . [ 164 ] Weights and Biases . Weights & Biases : A tool for visualizing and tracking your machine learning experiments . Weights & Biases , 2021 . [ 165 ] J . Wexler , M . Pushkarna , T . Bolukbasi , M . Wattenberg , F . Viegas , and J . Wilson . The What - If Tool : Interactive Probing of Machine Learning Models . TVCG , 26 , 2019 . [ 166 ] K . Williams , A . Bigelow , and K . Isaacs . Visualizing a Moving Tar - get : A Design Study on Task Parallel Programs in the Presence of Evolving Data and Concerns . IEEE Transactions on Visualization and Computer Graphics , 2019 . [ 167 ] M . Wouts . Itables : Pandas DataFrames as Interactive DataTables , 2019 . [ 168 ] T . Wu , M . T . Ribeiro , J . Heer , and D . Weld . Errudite : Scalable , Reproducible , and Testable Error Analysis . In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics , 2019 . [ 169 ] Y . Wu , J . M . Hellerstein , and A . Satyanarayan . B2 : Bridging Code and Interactive Visualization in Computational Notebooks . In UIST , 2020 . [ 170 ] P . Xenopoulos , J . Rulff , L . G . Nonato , B . Barr , and C . Silva . Calibrate : Interactive Analysis of Probabilistic Model Output . TVCG , 29 , 2023 . [ 171 ] W . Yu , M . Carrasco Kind , and R . Brunner . Vizic : A Jupyter - based interactive visualization tool for astronomical catalogs . Astronomy and Computing , 20 , 2017 . [ 172 ] A . Zhang , Y . Chen , and S . Oney . VizProg : Identifying Misunderstand - ings By Visualizing Students’ Coding Progress . In CHI , 2023 . [ 173 ] D . Zhang , H . Kim , R . L . Chen , E . Kandogan , and E . Hruschka . MEGAnno : Exploratory Labeling for NLP in Computational Note - books . arXiv 2301 . 03095 , 2023 . [ 174 ] Z . Zhao , S . Koulouzis , R . Bianchi , S . Farshidi , Z . Shi , R . Xin , Y . Wang , N . Li , Y . Shi , J . Timmermans , and W . D . Kissling . Notebook - as - a - VRE ( NaaVRE ) : From private notebooks to a collaborative cloud virtual research environment . Software : Practice and Experience , 52 , 2022 . 9 A PPENDIX A D ATA C OLLECTION D ETAILS To study how researchers and practitioners design interactive visual - ization tools for computational notebooks , we collected and analyzed 64 academic papers and 103 systems in the wild . In this study , we deﬁne notebook VA tools as systems that can display interactive visualizations in Python computational notebooks . Literature Collection . We searched Google Scholar for notebook VA tools and performed forward and backward reference searches to snowball the results . The venues of collected papers range from sci - entiﬁc journals ( e . g . , Bioinformatics , Frontiers in Neuroinformatics , and npj Computational Materials ) to human - computer interaction and machine learning conferences ( e . g . , VIS , CHI , and NeurIPS ) . Visualization Package Collection . We ﬁrst scraped 8 . 6 million notebooks with . ipynb extension from GitHub . Each notebook ﬁle is a JSON ﬁle containing metadata about the notebook and the notebook cells . The notebook cells contain information about the cell type , the source code or text of the cell , and any output generated by the cell . We pruned the scraped notebooks to only those containing interactive components by searching for script tags in cell outputs of type text / html . If a cell was deemed a potential candidate , we extracted the associated source code for that cell . Next , for each candidate interactive notebook , we identiﬁed all modules in the notebook by parsing it as an abstract syntax tree and looking for import statements . Finally , we spliced the last line of the source code for the candidate cell into its individual variable components and checked if these matched any of the modules ( or their aliases ) . Automating this procedure across 8 . 6 million notebooks , we were able to build a comprehensive list of 984 Python packages that were potential VA tools . Since this list of packages contained false positives ( not all identiﬁed packages were interactive VA tools ) , we manually examined each package to verify if it was an interactive visualization tool by looking at the source code and documentation for the package and its usage in notebooks . In total , we identiﬁed 103 packages that were also interactive VA tools . Online feedback collection . From 103 collected open - source VA tools , we scraped 379 GitHub issues whose title or description con - tains any of the keywords : “ notebook ” , “ jupyter ” , and “ colab ” . The collected issues cover 84 unique notebook VA tools . Finally , all collected issues , scraping code , and our codebook can be found in the S UPER NOVA’s GitHub repository . Analysis . Finally , we conducted an inductive qualitative analysis of collected papers , package documentation , demo notebooks , and issue descriptions through iterative open coding . The ﬁnal code - book and labeled notebook VA tools are accessible through S UPER - NOVA at https : / / poloclub . github . io / supernova . All of our data collection code and annotated notebook VA tool metadata is open - source at https : / / github . com / poloclub / supernova . B N OTEBOOK VA T OOL I MPLEMENTATION D ETAILS Depending on the need for a backend server , VA - notebook commu - nication , needed data types , and display styles , there are multiple methods with varying difﬁculties to implement notebook VA tools . Note that some methods are only compatible with speciﬁc notebook platforms ( e . g . , JupyterLab , Colab , VSCode , and Kaggle Notebook ) . B . 1 With Backend Servers To implement notebook VA tools that require a backend server , the developer needs to conﬁgure the server to support notebooks and establish callback functions to share states with the notebook . The server can either be run directly from the notebook environment or externally . The front - end of the tool can then be displayed in the notebook using the notebook’s native HTML display . It is important to separate the server from the main thread if it is run directly from the notebook to avoid blocking the Python kernel . For example , J UPYTER - D ASH [ 112 ] and LIT [ 146 ] use this method with a Flask backend server and a direct WSGI server , respectively . B . 2 Without Backend Servers If the tool does not require a server , there are methods with different complexities depending on the VA - notebook communication type . No Direct Communication . If a web - based VA tool does not com - municate with the notebook environment , the developer can simply use the notebook’s native HTML display to show the tool a notebook cell . The HTML display internally uses iframe to embed any web documents . For example , A RGO L ITE [ 91 ] uses this approach to display an external VA web app in notebooks . One - way Communication . To pass data from the notebook Python kernel to the VA tool , one can use the postMessage method from the Web standard to send serialized Python objects as JSON text to the VA tool’s iframe . See NOVA [ 161 ] for more details and examples about this approach . Some VA tools using this method include GAM C HANGER [ 160 ] and T IMBER T REK [ 162 ] . Alternatively , developers can use existing interactive visualization packages such as P LOTLY [ 138 ] , B OKEH [ 18 ] , A LTAIR [ 150 ] , and P ANEL [ 130 ] as building blocks to implement their VA tools . Then , the developer can use these packages’ APIs to pass data from note - books to the VA tools . However , this approach is less customizable , and it is best suited for simpler tools . Some examples using this approach include I NTERPRET ML [ 107 ] and N ILEARN [ 4 ] . Bidirectional Communication . To send data back from the VA tool to the Python kernel , the developer needs to use platform - speciﬁc solutions , which vary across platforms because notebook platforms have different security protocols . For Jupyter Notebook and Jupyter - Lab , one can use ipywidget with the comm protocol to synchronize states between the VA tool and the notebook . Some examples using this method include M AGE [ 73 ] and PYDEC [ 148 ] . B . 3 Access and Modify Code and Text To access and modify notebook content outside of the Python kernel , such as raw code and text ( § 5 . 2 ) , VA tool developers need to use platform - speciﬁc APIs . For Jupyter notebooks , the developer can use Jupyter Notebook extension and JupyterLab extension APIs to read and write the notebook content . VA tools using this method include B2 [ 169 ] , EDA SSISTANT [ 92 ] and W REX [ 34 ] . B . 4 Always - on Display If a developer intends to implement an always - on display ( § 5 . 3 ) for their notebook VA tool , they can use platform - speciﬁc APIs . For JupyterLab , the developer can implement the tool as a JupyterLab extension , which enables the display on persistent panels outside of the notebook’s main UI . Examples of such implementations include NVD ASHBOARD [ 108 ] and A UTO P ROFILER [ 38 ] . If the VA tool does not require extensive visualization customiza - tion , the developer can also use existing visualization packages that support persistent display ( e . g . , J UPYTER - D ASH [ 112 ] ) to imple - ment the tool . Alternatively , the developer can develop their VA tool using a traditional on - demand display and instruct users to use S TICKY L AND [ 159 ] to enable persistent display . S TICKY L AND allows users to easily create persistent “sticky” cells and dashboards by dragging any notebook cell to the edge of the notebook’s UI . 10