The Benefits of Collaboration for Student Programmers Judith D . Wilson , Nathan Hoskin , John T . Nosek Computer and Information Sciences Department Temple University , Philadelphia PA 19122 Abstract Au experiment is described which supports the proposi - tion that collaborative work can benefit problem - solving performance required in progr amming tasks typical of first year university level computing courses . The experimental results suggest that it may be worthwhile to find ways to integrate collaborative activities early into the computing curriculum . Production During the past 25 years in the United States , there has been much interest in what should be covered in academic computing curricula [ 1 ] . Recently , there has been increas - ing interest in how the computing disciplines should be taught , For example , there has been growing interest in laboratory - based computing curricula [ 2 ] , as well as in developing formal reasoning skills and in the effective use of computing tools in the early courses [ 12 , 6 ] . So far , however , little attention has been paid in these discussions to the role of social skills and of metacognitive skills ( skills for monitoring and controlling one’s own mental processes ) in the development and use of computing skills . Researchers have found that collaboration and verbal - ization of goals and plans seems to improve problem - solving skills and motivation in children [ 3 , 5 , 8 , 13 ] . Some have suggested that social interaction may develop metacognitive skills used in problem solving including selection of problem representation , strategies for problem decomposition , and solution monitoring [ 3 , 10 ] . Some also suggest that peer interaction motivates the problem solver to modify claims that are not supportable , resulting in a solution that is often superior to what collaborating individuals could manage alone [ 3 ] . Evidence of the importance of metacognitive skills to problem - solving success has been reported by Swanson who found that metacognitive development in fourth and fifth graders was a more important factor than ability in problem - solving success [ 11 ] . It has also been noted that cooperation among children in problem - solving tasks is associated with increased moti - vation to solve problems [ 8 ] . The display of pleasure in Permission to copy without fee all or part of thie material is granted provided that the copies are not made or distributed for direct commercial advantage , tha ACM copyright notice and the title of tha publication and its date appear , and notice is givan that copying is by permission of the Association for Computing Machinery . To copy otharwise , or to rapublish , requirea . sfea and / or specific parmisaion . ACM - 24 thCSE - 2 / 934N , USA @ 1993 ACM 0 - S9791 - 566 - 6 / 93 / 0002 / 01 60 . . . $ 1 . 50 160 successftd performance is one indication of such motiva - tion , and successfid preformance , in turn , increases the sense of competence as measured by more positive at - titudes about one’s performance . We expect that benefits similar to those measured in children will also be found for adults involved in novel problem - solving tasks with the predicted consequence that those who collaborate in solving a problem will be more successful and will have more positive attitudes about the problem - solving process than will those who work alone . We describe an experiment designed to test the proposition that collaboration on solving computing problems will lead to better solutions and to more positive attitudes about the problem - solving process among novice programmers . The experimental results suggest that collaborative learning may benefit students early in the computing curriculum . Experimental Variables and Hypotheses Definitions of variables used in the experiment are summarized in Figure 1 . The bases for these variable defi - nitions are now considered . Variable Value Variable Interpretation Interpretation Post treatment aatiafastiosx CONPID 1 . . 1 1 = 1OW , 7 = high Cattldence in the solution ENJOY 1 . . 7 l - low , 7 = high Enjoyed working on the problem , Problem - solving scores READABLE 0 . . 4O = low Readability of the problem solution . PUNCITON O . . ~ O = low Degree to which the eolution solved the problem . SCORE O . . qO = ] ( XV The aum of READABLE and FUNCTION . Demographiea and treatment group GRADE O . . 1Q O = ‘F , 10 = ’A’ Grade earned in the course GROUP O = Individuals Treatment group I = Pails Figure 1 . Variables used in the study . “Effective problem - solving performance” is defined in terms of ( a ) the readability of the proposed solution , that is , the degree to which the problem - solving strategy could be determined from the subject’s work , and ( b ) the @ na - tionality of the proposed solution , that is , the degree to which the strategy accomplishes the objectives stated in the problem description . The variables READABLE and FUNCTION were defined accordingly . It was decided to include readability as a component of overall score since it is possible for a subject to use a reasonable strategy and to use programming language structures appropriately and yet fail to solve the problem ( in the sense of generating the correct output ) . In such cases , the subject may have misinterpreted the problem description or overlooked a critical component . Overall success on the problem - solving effort was measured by a variable SCORE which is a simple sum of component variables READABLE and FUNCTION . Thus the first hypothesis was expressed as : HI : Student programmers working in pairs will produce more readable atifinctional solutions to a programming problem , as measured by higher values for SCORE = READABLE + FUNC170N , than will those working alone . Positive feelings about the problem - solving process include both enjoyment of the process and confidence that the proposed solution is adequate . These feelings were assessed immediately following the problem - solving session by a two - item questionnaire . Answers to questionnaire items were assigned to variables ENJOY and CONFID respectively . The second hypothesis was defined in terms of these variables : H2 : Student programmers working in pairs will express higher levels of confidence about their work ( CONFID ) and enjoyment of the process ( ENJOY ) immediately following the problem - solving session than will those working alone . Programming ability is generally assumed to influence problem - solving success for programmers . Consequently , we also expect that student programming teams which include members with high progr amming ability will perform better than will teams without such individuals . Ability can be measured in a number of ways . One reasonably good measure of ability at a given time is the grade earned in the current course , where course content is closely related to the type of problem used and to the skills required to solve it . The student subjects were all enrolled in a database course which presupposed programming skill and taught computer problem - solving skills . Thus the third hypothesis was defnxxl in terms of course grade ( GRADE ) . H3 : Student teams including individuals who earn a high grade in the course will perjlorm better than will those without such individual . Method The experiment was designed to compare the perfor - mances of programmers working in pairs on a program - ming problem with those of a control group of program - mers working individually on the same problem . Since the focus of the experiment was on whether collaboration enhances the use of learned skills to solve new problems rather than on learning new skills , experienced computing students were selected as subjects . Aside from the pairing , conditions and materials used in the experiment were the same for both experimental and control groups . Subiects The subjects for this experiment were 34 upper division undergraduate students enrolled in two sections of a database course at a large urban university . The subjects have had a minimum of three programming courses ( in Pascal and C ) and a course in Computer Architecture and Operating Systems . Twenty students in one course section were paired randomly to produce ten pairs . The second course section provided 14 students who worked individually on the problem ( the control group ) . Students were motivated to attend the experimental session and perform well on the problem through the offer of extra - credit for the course they were taking . In fact , participation in the experiment and not success on the problem - solving exercise earned extra course credit , Thus all subjects received the same increment in course grade . i % e Problem The problem chosen for this experiment was used by Ratcliffe and Siddiqi [ 9 ] in a study of decomposition strategies used by novice computer science students with one half to three years of academic programming experi - ence . It was chosen because it is simple enough for novice programmers to solve within 60 minutes and because it is sufficiently challenging to benefit from collaborative effort . A description of the problem is given in the Appendix . Subjects were instructed to write a program in Pascal , C , dBaae III command language , or pseudocode to solve the traffic signal problem . They were asked to submit copies of all preliminary work , to clarify all assumptions made , and to make the final version of their solution as presentable as possible . Procedure Subjects in the treatment group were assigned to pairs using a set of randomly generated number pairs . All subjects were given 60 minutes to solve the problem . During the problem - solving phase , subjects in the treatment group were allowed to communicate freely within pairs ; while subjects in the control group were instructed to work alone without communication . The post - treatment question - naire was given to each subject after he or she had handed 161 in all problem - solving materials . - Experimental materials were evaluated by two graders and were presented so that the graders would not know whether they had been produced by experimental or control group subjects . Each set of materials was evaluated on the degree to which it solved the problem ( FUNCTION ) and on the readability of the solution ( READABLE ) . The func - tionality score was obtained as a sum of three parts corre - sponding to the three output requirements stipulated in the problem description . The readability and functionrdity subpart scores were in the range O to 2 . Readability was assigned O for an entirely unreadable solution , 2 for an entirely readable solution , and 1 otherwise . Functionality subpart scores were O if the solution did not achieve the goal at all , 2 if the solution achieved the goal entirely , and 1 otherwise . An overall score ( SCORE ) was obtained by summing the readability and functionality scores . Scorings for the two graders were averaged to obtain scores for each subject . Inter - grader reliability was close to 90 % ( r = . 941 ) . Results The significance level for all tests has been set at alpha < . 1 . Miller [ 7 ] emphasizes that a finding with alpha = . 1 for a small sample may be far more striking than a result with a lower alpha value for a larger sample size . Two - sided t tests were performed to test for differences between experimental and control groups on score and satisfaction variables and on grade ( Table 1 ) . The groups were judged sufficiently comparable to test the effects of the experimental treatment on problem - solving scores and satisfaction measures since no differences between the groups were found for the independent variable GRADE . A significant difference in the predicted direction was found between groups for READABLE and a marginal dif - ference ( p = . 13 ) was found for SCORE . These results provide some support for hypothesis H1 . Primary support comes in the readability component of SCORE , with subjects working in pairs achieving significantly higher values for READABLE . Significant positive correlations were found between the satisfaction variables , CONFID and ENJOY , and the problem - solving scores for both groups ( see Figure 2 ) . Moreover , significant differences in the predicted direction were found between experimental and control groups for CONFID and ENJOY . T’hese results clearly support hypothesis H2 . Hypothesis H3 was tested by examining the association of the independent variable GRADE with score variables for teams within the experimental group and for individuals within the control group . Average GRADE was defined for teams as the average of these values for team members . Assuming that high or low ability may have influenced the problem - solving process for teams , the associations of these with team scores were examined . Although GRADE is significantly correlated with scores for individuals within the control group , no significant correlation was found between GRADE and scores for teams within the experi - mental group ( Figure 2 ) . Thus , hypotheses supported . Table 1 . Comparison of individuals and teams . H3 i ; not Experimental Group Control GIOUp Variable ( Teams ) ( Individuals ) mean ( st . dev . ) mean ( at . dev . ) n = 20 n = 14 GRADE 6 . 1053 ( 2 . 7467 ) 6 . 1429 ( 2 . 7416 ) Comnl 6 . 2000 ( 1 . 3992 ) 4 . 4286 ( 1 . 5046 ) ’”” ENJOY 6 . 0000 ( 1 . 3377 ) 4 . 9286 ( 1 . s590 ) ’ n = 10 n = 14 READABLE 1 . 7500 ( 0 . 28S7 ) 1 . 2S57 ( 0 . 6712 ) ” FUNCIION 4 . 2000 ( 1 . 92S5 ) 3 . 0357 ( 2 . 2055 ) SCORE 5 . 9500 ( 1 . 9958 ) 4 . 3214 ( 2 . 8053 ) “Pc . 1 “pc . o $ * * * p < . ol ( a ) GRADE 05195 * 0 . 4253 0 . 45878 CONFID 0 . 6311”’ 0 . 5746” * 0 . 6027” 0 . 5062” ENJOY 0 . 2950 0 . 3853 0 . 3735 0 . 6662”’” READABLE ( b ) GRADE 0 . 1572 CONFID 0 . 0000 ENJOY 0 . 1050 FUNCTION SCORE 0 . 2500 0 . 2648 0 . 6402”” 0 . 61S6””” 0 . 4140” 0 . 4152 * GMDE 0 . 2020 0 . 3522 READABLE FUNCTION SCORE GRADE Figure 2 . Correlations for the control ( a ) and experimental ( b ) qOUpS . ( * P < . l ; * * P < . 05 ; * * * P < . ol ) 162 Discussion The experimental results reported here are consistent with the results of experiments involving young children which have found a positive affect of social interaction on cognitive growth and skill acquisition and transfer . Although the sample size in this experiment is not large , the experiment has been replicated for graduate students and for professional programmers with similar results [ 14 ] . There is some support for the proposition that collabo - rative work benefits problem - solving efforts , even for relatively non - complex and small problems ( Hi ) . The results also provide evidence that collaborative work enhances confidence in the solution and enjoyment of the process ( H2 ) . The primary difference in problem - solving performance is in the readability of the solution . This is not a trivial result . Readability indicates the degree to which problem solvers can articulate proposed solutions . Ability to articulate proposed solutions may reflect under - standing of those solutions , and may facilitate correction of solutions that fail or are suboptirnrd . Finally , there is evidence that ability has little effect on team performance ( H3 ) . High grade is significantly associ - ated with better performance for individuals , but not for teams . One explanation for this difference might be that collaborative effort tends to cancel the effect of ability while it improves performance . These results , together with Swanson’s work [ 11 ] , suggests that monitoring the problem - solving process , whether by peer interaction or by internal control , is conducive to successful performance , and that it may compensate for lower ability . Although these results support the proposition that collaboration can enhance problem - solving preformance for novice programmers working in teams , questions remain about the benefits of collaboration for individuals , including possible differences in benefits for individuals of different abilities and motivational levels . The experimental literature on learning in children indicates that high ability individuals benefit somewhat from self - explanation and monitoring ( metacognitive ) verbalization , while low ability individuals benefit both from verbalizing and from observing the problem - solving behavior of higher - aptitude teammates [ 3 , 4 , 5 ] . Thus , although research is needed to determine the long term effects of collaborative activities for adult programming students , it seems reasonable to conclude that they will benefit to some degree . It is also likely that benefits to individuals can be maximized by monitoring collaborating units for possible dysfunctional interactions due to conflicts in personality or style . The findings reported here suggest that novice program - mers may benefit from collaboration even when working on small - scale design and programming problems of the kind normally assigned to individuals in early computing courses . In particular , collaboration appears to help students apply algorithmic problem - solving techniques to solve problems that are described informally . In such cases , rote memory is less useful than is the ability to understand the problem and to model it more formally . Collaborative interactions appear to help students analyze and model problems , and may also help students master the analytical skills required by such tasks . 1 2 3 4 5 6 7 8 9 10 11 12 References ACM Curriculum Committee on Computer Science ( 1979 ) , Curriculum ’78 : Recommendations for the Un - dergraduate Program in Computer Science - - A Report of the ACM Curriculum Committee cm Computer Science . Communications of the AC ! , Q ( 3 ) , 147 - 166 . ACM / IEEE - CS Joint Curriculum Task I ? orce ( 1991 ) , Computing Curricula 1991 . New York ACM Press & IEEE Press . Brown , A . L . , & Palincsar , A . S . ( 1989 ) . Guided , Cooperative Learning and Individual Knowledge Acquisition . In Resuick , L . B . , ( Ed . ) , Kuowin ~ Learning , and Instruction ( 393 - 45 1 ) . New Jersey : Lawrence Erlbaum . Chi , M . T . H . , Bassok , M . , Lewis , M . W . , Reimann , P . , & Glaser , R . ( 1989 ) . Self - Explanations : How Students Study and Use Examples in Learning to Solve Problems . Cognitive Science , 13 , 145 - 182 . Collins , A . , Brown , J . S . , & Newman , S . E . ( 1989 ) . Cognitive Apprenticeship : Teaching tlhe Crafts of Reading , Writing , and Mathematics . In Resnick , L . B . , ( Ed . ) , Knowing , Learning , and Instructi ~ ( 453 - 494 ) . New Jersey : Lawrence Erlbaum Associates . Gries , D . ( 1991 ) , Teaching Calculation and Discrirnina - tiom A More Effective Curriculum . Qmmnunications of the ACM , ~ ( 3 ) , 45 - 55 . Miller , Jr . , R . G . ( 1986 ) . Bevond Anova , Basics of Amdied Statistics . John Wiley & Sons , Inc . Nastasi , B . K . , Clements , D . H . , & 13attista , M . T , ( 1990 ) . Social - Cognitive Interactions , Motivation , and Cognitive Growth in Logo Programming and CAI Problem - Solving Environments . Journal of Educational Psvcholo f ! y , Q ( l ) , 150 - 158 . Ratcliff , B . , & Siddiqi , J . I . A . ( 1985 ) . An Empirical Investigation into Problem Decomposition Strategies Used in Program Design . Int . J . Man - Machine Studies , a , 77 - 90 . Sternberg , R . J . ( 1985 ) . Bevond IO : A tliarchic theory of human intelligence . New York : Cambridge Universi - ty Press . Swanson , H . L . ( 1990 ) . Influence of Metacognitive Knowledge and Aptitude on Problem - solving . Journal of Educational Psvcholo ~ v , ~ ( 2 ) , 306 - 314 . Tucker , A . B . , & Garnick , D . K . ( 1991 ) , A Breadth - First Introductory Curriculum in Computing . June 7 , 1991 draft document . 163 13 Webb , N . M . , & Lewis , S . ( 1988 ) . The Social Context of Learning Computer Programming g . In Mayer , R . E . , ( Ed . ) , Trainimz and Learning Conumter Programmimz : Multiple Research Perspectives ( 179 - 206 ) . New Jersey : Lawrence Erlbaum Associates . 14 Wilson , J . D . , Nosek , J . T . , Hoskin , N . , & Lieu , L . L . ( 1992 ) . The Effect of Collaboration on Problem - Solv - ing Performance Among Programmers . IFIP Congress ’92 , Madrid , Spain , September 1992 . Appendix Description of the Experimental Problem A traffic survey is conducted automatically by placing a detector at the roadside , connected by data - links to a com - puter . Whenever a vehicle passes the detector , it transmits a signal consisting of the number 1 . A clock in the detector is started at the beginning of the survey , and at one second intervals thereafter it transmits a signal consist - ing of the number 2 . At the end of the survey , the detector transmits a O . Each signal is received by the computer as a single number ( that is , it is impossible for two signals to arrive at the same time ) . Design a program which reads such a set of signals and outputs the following : ( 1 ) the length of the survey period . ( 2 ) the number of vehicles recorded . ( 3 ) the length of the longest waiting period without a vehicle . 164