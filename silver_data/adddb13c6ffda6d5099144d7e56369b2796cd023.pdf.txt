Architecting Structure - Aware Applications The Structure Model Jessica Rubart arvato direct services 1 Gütersloh , Germany info @ jessicarubart . de ABSTRACT An extension to the well - known MVC architectural pattern is proposed to include an explicit structure model . The proposed conceptual model is further extended to address requirements from the research fields CSCW and ubiquitous computing . Furthermore , data , structure , and behavior descriptions have been identified as basic abstractions . In summary , the proposed model addresses reuse as well as design for change on different levels of abstraction . Categories and Subject Descriptors H . 5 . 4 [ Information Interfaces and Presentation ] : Hypertext / Hypermedia— Architectures , User Issues . H . 5 . 3 [ Information Interfaces and Presentation ] : Group and Organization Interfaces— Computer - supported cooperative work , Synchronous Interaction . D . 2 . 11 [ Software Engineering ] : Software Architectures— Data abstraction , Domain - specific architectures , Patterns . General Terms Design , Human Factors , Theory Keywords Structural model , structural computing , architectural pattern , cooperative hypermedia 1 . INTRODUCTION Software architecture is concerned with the structure of a system ' s significant components interacting through interfaces [ 8 ] . A number of architectural patterns are available for supporting the design of interactive systems , such as Model / View / Controller ( MVC ) [ 9 ] or Presentation / Abstraction / Control ( PAC ) [ 3 ] . While those patterns successfully separate the presentation and interaction modeling from the domain model in general , they do not consider further structuring of the domain model . In particular , data and structure modeling are not presented as separate concerns . The hypermedia community has been focusing on structure – structure that might be viewed as an interaction paradigm , an organization paradigm , or even as a computing paradigm [ 12 ] . Many models have been proposed that focus on supporting information navigation , such as the Dexter hypertext reference model [ 6 ] or the Open Hypermedia model [ 14 ] . Research related to structural computing [ 11 ] is concerned with many different structural abstractions . In addition to the navigational domain structures like argumentation , spatial , metadata , and taxonomic ones have been supported . Hypertext patterns [ 1 ] have been identified that provide a shared vocabulary of structures in actual hypertexts . Those patterns do not only support discussions about hypertexts , but also designing appropriate tools . Thus , in the hypermedia community it is well - known that structure is a separate concern . But not only “typical” hypermedia applications – if there are any like these – benefit from handling structure independently from other application concerns . Consider , for example , gathering requirements for a software component that is responsible for managing members of a club or community . The upper part of Figure 1 shows one way of making notes about important functional requirements , such as to register , update , delete , and identify a member . The functionality of identifying a member , i . e . checking whether a specific member already exists in the system and , if available , retrieving it , has been moved to the second line . Additionally , it is differently colored . This is one way of noting down that it is a secondary function , which is usually called by one of the primary ones . Actually , it is a spatial hypertext [ 10 ] as spatial proximity of the text elements is used as a fluid means for structuring . The bottom part of Figure 1 shows another way of expressing the relationships between primary and secondary functions . It models functional requirements as use cases and uses explicit include relationships between primary and secondary use cases . The middle part of Figure 1 shows a third way of structuring requirements . It uses groupings to structure requirements according to their types , e . g . functional , non - functional , or general ones . To support different structures like these in one application it is wise to separate structure from data , e . g . to separate information about the position of a piece of text from the text itself . This enables to visualize and persist the text with different structural information at the same time , e . g . at different positions or in different groupings . Thus , structure should not only be a separate concern in “typical” hypermedia applications ( ones that have been designed for hypermedia ) , but also in any application that needs to be “structure - aware” . In the following , an extension to the well - _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 1 The views and conclusions contained in this document are those of the author and should not be interpreted as representing official policies of arvato direct services . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . HT’07 , September 10 – 12 , 2007 , Manchester , England , United Kingdom . Copyright 2007 ACM 978 - 1 - 59593 - 820 - 6 / 07 / 0009 . . . $ 5 . 00 . known MVC architectural pattern is proposed to include an explicit structure model . In addition , requirements from the research fields CSCW ( Computer Supported Cooperative Work ) and ubiquitous computing are taken into account as work in the areas of cooperative hypermedia and ubiquitous hypermedia have shown their impact on interaction and architecture . Furthermore , data , structure , and behavior descriptions are included and discussed as basic abstractions . Finally , the paper compares the proposed model to related work and ends with conclusions . «»«» registerMember «»«» updateMember «»«» deleteMember «»«» identifyMember < < include > > < < include > > < < include > > Figure 1 . Example Structures for Functional Requirements 2 . THE STRUCTURE MODEL The MVC architectural pattern [ 9 ] is well - known and widely accepted . It considers three types of objects : model , view , and controller objects . Model objects represent special domain knowledge . They refer to application objects , e . g . data and logic manipulating the data . View objects present ( parts of ) the model to the user . And controller objects are mediators between view and model objects . They define how the user interface reacts to user input . As shown in the upper part of Figure 2 there is usually one controller instance associated with a specific view instance while there may be a number of view instances visualizing a specific model instance . The referring controller object usually also refers to the model instance to be able to react appropriately on user inputs . Alternatively , it could get a reference to the model object through the view instance . In addition , a controller objects might need to get notified on model changes so that a model instance can reference a number of controller objects . The main design patterns used by MVC are the Observer , Composite , and Strategy one [ 5 ] . The observer pattern is used to notify dependent objects about changes . The composite pattern enables to treat individual objects and compositions uniformly , such as views and composite views . The strategy pattern makes algorithms interchangeable , e . g . the controller class can be configured with one of many behaviors . In general the MVC architectural pattern and its design patterns address design for change . Related objects are not tightly coupled , but loosely . This maximizes reuse of components , classes , and objects and , thus , supports a system to change . The PAC model [ 3 ] is similar to the MVC model by distinguishing presentation ( which is similar to view ) , control , and abstraction ( which is similar to model ) . So - called PAC agents are software components with separated “facets” for presentation , abstraction , and control . Each agent is responsible for a specific part of the system . The control facet is in charge of handling the communication between the presentation and abstraction facets as well as the communication with other agents . PAC agents are organized in a hierarchy . This supports a modular organization in a system . MVC can also be seen as an agent based model using the facets model , view , and controller [ 2 ] . In contrast to PAC , MVC distinguishes the output presentation from the inputs . MVC has been adopted by numerous web frameworks . The Web - tier technology in the J2EE [ 16 ] platform , for example , uses Java Servlets as controllers , Java Server Pages as the view , and ( Enterprise ) JavaBeans as the model . In the following , the MVC model is used as the basis to present the contributions of this paper . In MVC , the model part is not further structured . In particular , data and structure modeling are not presented as separate concerns . The model includes whatever kind of business information and logic . The first contribution of this paper is to make explicit a structure model when using MVC , as presented in Figure 2 . Both , data and structure model , represent business information and logic , in which the structure model separates structural concerns from the data model . The logic in a structure model relates to behavior “within” structures , as discussed in [ 19 ] in the context of structural computing . It controls structure transformations . A separate structure model supports loosely coupling of data to structure and , thus , reuse and design for change . Model View Controller 1 1 n 1 m 1 0 . . 1 o StructureModel < < shared > > SharedStructureModel 0 . . 1 < < shared > > SharedDataModel p DataModel Figure 2 . Cooperative MVC with Explicit Structure Model In recent years we can observe that online communities , collaboration services , and information sharing between users is becoming increasingly important , e . g . the Web 2 . 0 discussions . According to Engelbart groupware plays an important role in supporting knowledge capabilities [ 4 ] . More and more work needs to be done concurrently in teams and across organizational boundaries . Work in the area of cooperative hypermedia has shown how a classical node - link based hypermedia model can be extended to shared hypermedia objects [ 15 ] . In this paper , a cooperative MVC approach is suggested so that each local model instance can have a shared model instance assigned – for both data and structure models ( cf . Figure 2 ) . A shared model instance describes the shared state of the respective local model instance , e . g . which structures of requirements should be shared and thus be kept consistent among a group of users . A shared model notifies all associated local models about changes in its state . Here again , the observer design pattern is useful . Encapsulating a shared state for each model instance supports reuse and design for change again . In [ 7 ] , the dimensions information , behavior , and presentation are distinguished within object - oriented analysis . Along these dimensions our data and structure models refer to the information dimension . The behavior dimension addresses the application behavior , e . g . when and how the system will change state or how to replicate shared state . To be able to use different behavior models for the same structure or data models , again a loosely coupled way is beneficial . That is why a behavior model should be another type of domain model as presented in Figure 3 . A controller instance might use a behavior instance to react appropriately on user inputs . In turn , a behavior model instance can notify a controller instance about changes . In addition , a behavior model instance might have aspects that should be visualized , e . g . the name of the used algorithm . Model User InterfaceModel EnvironmentModel BehaviorModel StructureModel DataModel Figure 3 . Different Types of Domain Models The presentation dimension of [ 7 ] refers to the details for presenting the system . It is related to the view in MVC . In [ 17 ] it is proposed to separate a user interface model from the interaction . The interaction relates to the view and controller part of MVC . The user interface model describes the available components in the user interface , but not how they are presented and how one can interact with them . Keeping this user interface information separate from the other models again supports reuse and design for change . A separate user interface model is particularly interesting in a ubiquitous environment , e . g . to provide different presentations for logically the same user interfaces on different devices . Finally , the environment model addresses tangible user interfaces [ 18 ] and describes the physical environment so that the user interface can adapt to different devices . In addition , location awareness can be an aspect of the environment model . To describe structural relationships between physical objects it is wise to encapsulate this information in structure model instances . 2 . 1 Basic Abstractions Each presented model of Figure 3 uses basic abstractions to express the respective domain , e . g . object - oriented mechanisms can be used . In fact , each of those models has elements that are related to data , structure , or behavior . Consider , for example , the user interface model that describes the basic data and structure of the available user interface components . Behavior descriptions can be used to express influences on the availability of components . In addition to the presented models the view and controller parts of MVC also can be described by utilizing data , structure , and behavior expressions as basic abstractions . The controller mainly includes behavioral descriptions , but might also need data and structure elements to execute the behavior . The view describes the presentation and referring algorithms by utilizing the basic abstractions . In Figure 4 the term Concept is used to refer to the different domain models as well as view and controller . Not only model objects , but also view and controller objects might have a shared object assigned representing shared state . A shared state of a controller instance , for example , can express user inputs that should get propagated to all sites . A shared state of a view object can be used to directly propagate changes on the presentation . A conceptual model defines the high - level structure of an application , such as the model presented in this paper . It is associated with a number of concepts . To describe concepts and shared concepts the basic abstractions data , structure , and behavior are used . This is a lower level usage of data , structure , and behavior compared to Figure 3 . Basic Abstractions ConceptualModel Behavior Structure Data < < import > > n m Concept o 0 . . 1 SharedConcept < < import > > Figure 4 . Basic Abstractions Utilized by all Models / Concepts In [ 13 ] a proposal is made to synthesize data , structure , and behavior abstractions into a synthetic atom . In this way data , structure , and behavior can be unified and just the viewpoint distinguishes them . This is a more flexible approach compared to the object - oriented paradigm as data , structure , and behavior are all first - class entities . 3 . COMPARISON TO RELATED WORK Several models extend the MVC model , e . g . the MCRpd interaction model for tangible user interfaces [ 18 ] . This paper proposes an explicit structure model as extension to MVC . Furthermore , data , structure , and behavior have been identified as basic abstractions that can be used by all domain models as well as views and controllers . PAC * [ 2 ] extends PAC [ 3 ] to a groupware system . For this a functional decomposition of a PAC * agent is proposed according to production , coordination , and communication . Sharing is modeled through the abstraction facet , which is similar to our shared model . However , sharing is not modeled as a separate concern . In [ 21 ] it is pointed out that a development methodology is needed for structural computing environments . In [ 20 ] a development process model is proposed that is especially designed for component - based open hypermedia systems . It includes structure specification as explicit activity . In both cases structural computing has been approached from a software engineering point of view . This paper mainly acts the other way round , i . e . applying lessons learned from the hypermedia community to a well - established architectural application model . 4 . CONCLUSIONS In this paper an extension to the well - known MVC architectural pattern is proposed to include an explicit structure model . This applies lessons learned from the hypermedia community to a well - established architectural model . The proposed model is further extended to address requirements from the research fields CSCW and ubiquitous computing as work in the areas of cooperative hypermedia and ubiquitous hypermedia have shown their impact on interaction and architecture . Furthermore , data , structure , and behavior descriptions have been identified as basic abstractions to be able to describe domain models , views , and controllers in a flexible way . In summary , the proposed model addresses reuse as well as design for change on different levels of abstraction . The presented model should be seen as a conceptual model and as dimensions for an analysis model [ 7 ] focusing on the logical structure of a system and thus abstracting from the actual implementation environment . 5 . REFERENCES [ 1 ] Bernstein , M . Patterns of Hypertext . In : Proceedings of Hypertext’98 , ACM Press , 1998 , 21 - 29 . [ 2 ] Calvary , G . , Coutaz , J . , and Nigay , L . From Single - User Architectural Design to PAC * : a Generic Software Architecture Model for CSCW . In : Proceedings of CHI’97 , ACM Press , 1997 , 242 - 249 . [ 3 ] Coutaz , J . PAC : an Object Oriented Model for Dialog Design . In : Proceedings of Interact’87 , North Holland , 1987 , 431 - 436 . [ 4 ] Engelbart , D . C . Toward high - performance organizations : a strategic role for groupware . In : Proceedings of the GroupWare’92 Conference , Morgan Kaufmann . [ 5 ] Gamma , E . , Helm , R . , Johnson , R . , and Vlissides , J . Design Patterns : Elements of Reusable Object - Oriented Software . Addison - Wesley , 1995 . [ 6 ] Halasz , F . and Schwartz , M . The Dexter hypertext reference model . In : Communications of the ACM , 37 , 2 , 1994 , 30 - 39 . [ 7 ] Jacobson , I . Object - Oriented Software Engineering : A Use Case Driven Approach . ACM Press , Addison - Wesley , 1992 . [ 8 ] Jacobson , I . , Booch , G . , and Rumbaugh , J . The Unified Software Development Process . Addison - Wesley , 1999 . [ 9 ] Krasner , G . E . and Pope , S . T . A cookbook for using the model - view - controller user interface paradigm in Smalltalk - 80 . In : Journal of Object - Oriented Programming , Vol . 1 , No . 3 , 1988 , 26 - 48 . [ 10 ] Marshall , C . C . , and Shipman , F . M . Searching for the Missing Link : Discovering Implicit Structure in Spatial Hypertext . In : Proceedings of Hypertext’93 , ACM Press , 1993 , 217 - 230 . [ 11 ] Nürnberg , P . J . , Leggett , J . J . , and Schneider , E . R . As We Should Have Thought . In : Proceedings of Hypertext’97 , ACM Press , 1997 , 96 - 101 [ 12 ] Nürnberg , P . What is Hypertext ? In : Proceedings of Hypertext’03 , ACM Press , 2003 , 220 - 221 . [ 13 ] Nürnberg , P . , Wiil , U . K . , Hicks , D . L . A Grand Unified Theory for Structural Computing . In : Proceedings of the 2 nd Metainformatics Symposium , LNCS 3002 , Springer - Verlag , 2003 , 1 - 16 . [ 14 ] Reich , S . , Wiil , U . K . , Nürnberg , P . J . , Davis , H . C . , Grønbæk , K . , Anderson , K . M . , Millard , D . E . , and Haake , J . M . Addressing interoperability in open hypermedia : the design of the open hypermedia protocol . In : The New Review of Hypermedia and Multimedia , Vol . 5 , Taylor Graham , 1999 . [ 15 ] Rubart , J . , Haake , J . M . , Tietze , D . A . , and Wang , W . Organizing Shared Enterprise Workspaces Using Component - Based Cooperative Hypermedia . In : Proceedings of Hypertext’01 , ACM Press , 2001 , 73 - 82 . [ 16 ] Sun . Java 2 Platform Enterprise Edition , http : / / java . sun . com / javaee / . [ 17 ] Tandler , P . The BEACH application model and software framework for synchronous collaboration and ubiquitous computing environments . In : The Journal of Systems and Software , 69 , 2004 , 267 - 296 . [ 18 ] Ullmer , B . , Ishii , H . Emerging frameworks for tangible user interfaces . In : IBM Systems Journal , ( 3 - 4 ) , 2000 , 915 - 931 . [ 19 ] Vaitis , M . , Tzagarakis , M . , Grivas , K . , and Chrysochoos , E . Some Notes on Behavior in Structural Computing . In : Proceedings of the 2 nd Metainformatics Symposium , LNCS 3002 , Springer - Verlag , 2003 , 143 - 149 . [ 20 ] Vaitis , M . , Tzagarakis , M . , Gkotsis , G . , and Blachogeorgakopoulos , P . Structural Engineering : Processes and Tools for Developing Component - Based Open Hypermedia Systems . In : Proceedings of the 3 rd Metainformatics Symposium , LNCS 3511 , Springer - Verlag , 2004 , 113 - 128 . [ 21 ] Wiil , U . K . , Hick , D . L . , and Nürnberg , P . An Agenda for Structural Computing Research . In : Proceedings of the 3 rd Metainformatics Symposium , LNCS 3511 , Springer - Verlag , 2004 , 94 - 107 .