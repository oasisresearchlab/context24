• Seek - Whence : A Model of Pattern Perception by Marsha J . Ekstrom Meredith Computer Science Department Indiana University Bloomington , Indiana 47405 TECHNICAL REPORT NO . 214 Seek - Whence : A Model of Pattern Perception by Marsha J . Ekstrom Meredith September , 1986 • Copyright © 1986 by Marsha J . Ekstrom Meredith • Accepted by the Graduate Faculty , Indiana University , in partial fulfillment of the degree of Doctor of Philosophy . ¥ ' £ ~ Douglas R . Hofstadter : Ph : o : : c : air Daniel P . Friedman , Ph . D . Mitchell Wand , Ph . D . William C . Perkins , D . B . A . August 20 , 1936 iv DEDICATION To Sam . for all the hours end ell the encouragement . • • • v ACKNOVLEDGMENTS The vork presented here has benefitted from years of support and critique bye . number of people . First and foremost is Professor Douglas R . Hofstadter , vithout vhose inspiration , encouragement , patience , and friendship over the years none of this voUld have been possible . Professor Daniel Friedman hes been e . constant source of encouragement . and e . lvays gave generously of his time . Professor Mitchell Vand ' s careful reading e . r > . d clear thinking have helped me enormous ! y , and Professor Villiem . Perkins hes consisten t1 y gone out of his vay to be helpful . I voUld also like to thank two Systems Managers - David Plaisier at Indiana and Barbe . re . Zimany at Blackburn - - and their staffs for their help in getting my program on its feet . Thanks also to PaUl Reynolds and Audrey Vehking for their vork on human pattern perception , and to Dr . Ivan Liss and his CSllO class at Blackburn for serving es guinea pigs in our experiment . Finally , I voUld like to thank severe . ! people vho have helped me on a personal level over the years . Thanks : to Jill Porter for her mighty efforts to keep e . 11 my records in order ; to ! Caty , ICen , and Regina Ratcliff for their hospitality and friendship ; to Ivan Liss for the pep talks ; to my parents , Fred and Margaret Ekstrom . for encouragement and understanding ; tom y sister Meggie for all those summers of help and support ; to Kirsten and Kelsey for being more understanding than could be expected of children ; and to Sam , for everything . Of course , in spite of the efforts of all these people , there may be errors of formulation or execution in this vork . For these . I take full responsibility . • • vi PREFACE In an era vhen programs have been written to perform medical diagnoses . find oil , analyze soybean diseases . and even rediscover 19th - century chemistry . I have written aprogre . m - and one of some size - - that seemingly does almost nothing . The program . celled Seek - Vhence , is designed to discover . model . and reformulate patterns presented as sequences of nonnegative integers . The patterns are not mathematically complicated ones - - they are based on little more than the successorship and sameness relations betveen pairs of integers - yet they can become arbitrarily complex . chellenging even for humans . Our ' I / Ork on Seek - Vhence represents only the barest begihnings in exploring this domain space ; the program can handle only a fev types of problems of moderate complexity . Nonetheless . ve believe that our goals and approach are sufficiently important to varrant further wrk and much concentrated study . But sequence extrapolation is a solved problem . handled by Pi var and Finkelstein [ Pi var 64 ] tventy years ago - - is it not ? Not in its full generality . The Pi var - Finkelstein system concentrated on extrapolating sequences vith underlying mathematical formulas . Hence . these sequences could often be solved by applying a battery of mathematical techniques until an explanatory formula ( or collection of formulas ) vas found . Their domain and approach are quite distant conceptuell y from ours . • • • vii Those vho have vorked on the formUl . ation and implementation of Seek - Vhence are interested in modeling the human ability to discover patterns and to find mUl . tiple and / or changing patterns in an evolving situation . Integer sequences happen to be an . excellent domain for our purposes for several reasons . First . ve can strip avayenough complicating detail to get at core issues . For example , by eliminating knovl . e < lge of mathematical operations ( such as addition . mUl . tiplication . squaring , etc . ) . ve can divest the nonnegative integers of all but their most fundamental properties . They can then serve as atomic units - structures tjthout internal pattern - - in our pattern domain . In addition . by presenting sequence terms one at a time . ve can explore the vays in vhich perceptions about a pattern change as it evolves . Humans are able to move from one plausible pattern characterizaton to another tjthout entertaining a host of unrelated and implausible characterizations along the vay . Ve vant to model this ability . Finally , ve can test the adequacy of the system ' s pattern perception by asking for : 1 ) a characterization of the pattern ; 2 ) an extrapolation of the sequence according to that characterization . In summary , although Pi var and Finkelstein explored mathematical sequence extrapolation , their vork - - and that of their successors - has left the important and < lifficUl . t problem of pattern perception in the domain of integer sequences unexplored . The follotjng claim tjll emphasize the importance ve viii attach to this problem : Finding patterns in sequences . developing a model to describe the perceived pattern . e . nd reformulating the model on the be . sis of nevevidence is nothing less the . n scientific induction in microcosm . This dissertation is organized into five chapters . In the first chapter . ve discuss the foundations of our vork . including both underlying questions e . nd extant systems that influenced our idee . s e . nd approach . The subsequent tvo chapters document the current implementatioa of the Seek - Vhence pr ~ gram . In chapter four . ve compare the Seek - Vhence approach e . nd program to several related systems . Finally . in chapter five ve present implementation details , reviev some shortcomings of the system . and set some directions for fUture research . • ix ABSTRACT Seek - Vhence is an inductive leerning progre . m that serves as e . model of e . neve . pproe . ch to the programming of " intelligent " systems . This approach is cheracterized by : structural representation of concepts ; the ability to reformulate concepts into nev . related concepts ; a probabilistic . biologically - inspired approach to processing ; levels of abstraction in both representation and processing . The program ' s goals ere to discover patterns . describe them as structural pattern concepts . and reformulate those concepts . vhen appropriate . The system should model human performance as closely as possible . especially in the sense of generating plausi ! > le descriptions and ignoring implausible ones . Description development should be strongly de . ta - driven . Small . special - purpose tasks vorking at different levels of abstraction vith no overseeing agent to impose an ordering eventually guide the system toverd e . correct and concise pattern description . The chosen dome . in is that of non - mathematically - sophisticated patterns expressed es sequences of nonnegative integers . A user presents a patterned number sequence to the system . one term at a time . Seek - Vhence then either ventures e . guess at the pattern . quits . or asks for another term . Should the system guess e . pattern structure different from the one the user has in mind , the system vill attempt to reformulate its faulty perception . Processing occurs in tvo stages . An initial formulation must first evolve ; this is the vork of stage one , culminating in the creation of e . hypothesis for the sequence pattern . During stage tvo , the hypothesis is either verified or refUted by nev evidence . Consistent verification vill tend to confirm the hypothesis , and the system vill present the user vith its hypothesis . An incorrect guess or refUte . tion of the hypothesis by nev evidence vill cause the system to reformulate or abandon the hypothesis . Reformulation of the hypothesis causes related changes throughout the several levels of Seek - Vhence structures . These changes can in turn cause the noticing of nev perceptions about the sequence , creating an important interplay e . mong the processing levels . • x TABU OF CONTENTS CHAPTER . ONE : FOUNDATIONS A . Introduction B . The Seek - Vhence Approach C . Representation Isrues D . Seek - Vhence Diagrams E . Modeling Sequence Patterns F . System Organization G . The Hofstadter Connection H . Conclusion 2 7 9 1 ' 3 18 25 27 33 CHAPTER . TWO : SEEK - WHENCE : STAGE ONE - - HYPOTHESIS CREATION A . Introduction 36 B . Overviev of the Seek - Vhence System 1 . Domain e . nd Goals 2 . The Tvo Stages of Processing 3 . Processing e . nd Tasks 4 . Structures e . nd the " Plasms " 5 . Summery C . Seek - Whence in Detail 36 38 41 42 47 1 . The Platoplasm - Abstract Notions 48 2 . The Hypothesis 59 3 . The Cytoplasm - - the Base 60 4 . Plato - cyto Relations 68 5 . Reviev e . nd Previev 70 6 . Template Creation - One Mold to Fit All 73 7 . The Socratoplasm - In the Middle 76 8 . Hypotheses - Encapsulating Patterns 79 D . The End Of Stage One 85 • xi CHAPTER THREE : SEEIC - VHENCE : ST . AGE ! VO - REFORMULATION A . Introduction 88 B . Background 88 1 . The Human . Approach 89 2 . Platonic Relations 90 3 . freeze - dried Hypotheses 91 C . Changing a Hypothesis 92 1 . Cosmetic Reform 93 2 . Medical Reform 97 3 . Reconsideration 99 a . Determination of the Reigning Type 99 ! > . Reformulator 105 4 . The Gnoth Operations 109 5 . Ce . rr ' Ying Out Reforms 124 D . failure and Slip - scouts 126 CH . APTER FOUR : COMPARISONS VITH OTHER VORK A . Introduction 128 B . Comparison vi . th Pi var and Finkelstein 128 c . Relation to Simon - Kotovsky 130 D . Comparison vi . th Persson 132 E . Dietterich and Michalski 134 f . Some Related Systems 138 1 . Evans and ANALOGY 138 2 . Lenat and Heuristics 140 CH . APTER FIVE : PERFORMANCE , PROBLEMS , . AND FUTURE DIRECTIONS A . Implementation and Performance 145 1 . System Performance 2 . Human Performance B . Problems 1 . Implementation faux Pas 2 . Unconquered Sequences 145 147 148 149 150 • xii 3 . Lov - level Myopia 4 . High - level Haughtiness 5 . Coordination Problems 6 . Herky - jerky C . The Future 151 151 152 153 154 1 . Minor Deteils 154 2 . Major Goals 156 D . Conclusion 158 APPENDIX 159 Bongerd Problems 160 Box Implementations 161 Program Runs The Sequence " 3 7 3 7 3 7 . . : · 164 The Sequence " 3 7 3 3 7 3 . . . " 167 The Sequence " 1 2 1 2 3 1234 . . . " 170 GLOSSARY 180 BIBLIOGRAPHY 183 xiii LIST O . F . FIGURES CHAPTER ONE . . Figure 1 The major primitives 16 . Figure 2 Seek - Vhence diagrams vith some shered structures 17 . Figure ' . 3 Some parses of " 1 1 2 " 20 . Figure 4 Tvo different representations of a single parse 21 . . Figure 5 More parses of " 1 1 2 " 22 . Figure 6 The doubler and Clossman ' s " marching doubler " 23 CHAPTER TVO . Figure 1 The Seek - Vhence vorld 44 . Figure 2 Some links l > etveen plasms 45 . Figure ' . 3 A ! > ox tree for the form ( C - group ( S - group 2 J ) 2 ) BJ CHAPTER THREE . Figure 1 Measuring gnoth stability 102 . Figure 2 Neighboring gnoths 106 CHAPTER ONE : E ' OUNDATIONS 2 J . . . INTRODUCTION Hwnens are excellent pattern perceivers . . From . the tiny be . by learning to recognize its mother ' s face to the scientist vhose perspiration is revarded by a sudden inspiration . ve spend m . uch or our lives noticing patterns . Although ve find nothing amazing about being able to recognize e . friend ate . distance or three blocks - e . common ability - ve do prize the pattern - discovery ability or those vho are especially good at it in some dome . in . . For example . vhen Larry Bird has one of those special games or vhich he is capable . ve ve . tch in amazement . trying to capture the experience vith such phrases es " seing the vhole court " or " playing out or his mind " . Ve can feel that he " understands " the court . that he kno ~ vhere ever - yone is . vhere they vill be . end vhe . t they vill be doing . He hes e . sense or system • or hov things fit together . that escapes almost ever - yone else . " Playing out or his mind ' " is litere . lly true . in the sense that he need only follov the mental structure he hes created to be successfUl . . The besketbe . 11 situation outlined above strikes us es very similar to that of the scientist having e . " breakthrough " . vhen things simply " come together " or " fe . 11 into place " - that is . vhen important connections are me . de . Ve feel that both of these situations . along vi th e . multitude of the more common . everyday kind . are at the core of hum . en creativity . To be precise . the core or creativity is the ability to find unexpected relationships and to discover previously - unnoticed patterns . BONGJ . . RD PROBUMS Bongard problems let us experience the " natural ' " hwn . an ability to create and reformulate pattern characterizations . The problems . first posed by Mikhail Bongard [ Bongard 70 ] . present the solver vi th tvelve dre . vings . six on 3 either side of e . dividing line . The object is to che . racteriZe the difference betveen the figures on the left end those on the right - in essence . to exple . in vhythe dividing line " makes sense " . Severe . 1 Bongard problems are reproduced in the Appendix . In solving Bongard problems . ve move from one he . tr - formed and t ~ nuowly - held idea to another . can feel notions bubbling up from somevhere in our minds . and arrive e . t unexpected but immediately e . ccepted chare . cterize . tions . for exe . mple . e . ! ler a group of people vorlced fore . moment or tvo on problem " ' 21 - shovn in the Appen ~ ix - one person sUddenly called out " puppies are alloved ! " . and the group immedie . tely e . greed . Such ideas crystallize sUddenly . and feel right . This certe . inty is note . result of dealing vi th overly simplistic or common notions . In re . ct , the re . vored che . re . cterize . tion is often a phre . se rather thane . simple term . and different people vill come up vith different but accepte . l > le characterizations the . t she . re an underlying notion . the one " concepttiel skeleton " ( to use Dougle . s Hofste . dter ' s term ) the . t fi ~ . My first encounters vi th Bonge . rd problems vere in tvo cle . sses given l > y Dougle . s Hofstadter e . t Indiana University - one , e . seminar on his book GOdel Escher Be . ch· an Eterne . 1 Golden Bee . id 1Hofste . dter 79 ] . and the other e . class in artificie . 1 intelligence . During the seminar . ve vere me . de e . ve . re of the potential e . trorded by these problems e . s a vehicle for exploring human intelligence . and . in avider sense . vere made e . ve . re of the unexplored territory opened by such dome . ins e . s opposed to those typically stUdied in A . I . - the knovtedge - intensive . the " difficult " . the rele . tion - entangled . The discussion of Bongard problems given in W . and the problems themselves - in Bongard ' s ovn book . Pe . nern Recognition 1Bongard 70 I - are Ve . lue . l > le ree . ding for an yane interested in the meche . nisms and structural depth of human intelligence . 4 In our artificial - intelligence class . ve began to explore the Bongard problems them . selves a bit more deeply . Ve tried to ve . tch ourselves solve the problems . tried to verbalize Vhe . t ve . s going on as our minds seemed to ' 1eave us behind " on some of the problems and come up ~ th solutions . On other problems , ve consciously tried different characterizations . our attempts often being colored by our experience ~ th previous problems . Hofstadter has round or created many terms to describe Vhat goes on in our minds as ve attempt to solve these problems . Such terms as " reformulate " , " focus and filter " , " deform . " , " structural similarity " , " sameness detector " , " levels or description " , " slipping " , " meta - description " , " tem . ple . te " . and " flexibility " achieve special meaning in this context . Perhaps most important or all : " One can think of the Bongard - problem . vorld as a tiny place Vhere ' science ' is done - that is . Vhere the purpose is to discern patterns in the vorld . " [ Hofstadter 79 , p . 659 ] . BIRTH OF SEEK - VHENCE The intriguing perspective on intelligence presented in the Hofstadter courses me . de a strong case for the importance of exploring this nev uni verse of the non - verbe . liZal : > le . the mental undercurrent . the " subcognitive " . All that ve . s required ves a suitable dome . in . one that captured the essence of the problem . ~ thout being tied to too many extraneous and complicating variables . A fully general Bongard - problem - solver ve . s clearly beyond reach because of the limits of visue . 1 processing systems and the overhead they vould entail . Ve needed quicker access to the centre ! issues or perception and reformulation . It ve . s then that a previous project in sequence extrapolation lee . pt to the fore . As have many students in artificial intelligence classes . I vrote e . 5 program to extrapolate integer sequences . Typically enough , the program could recognize smallish primes end Fibonacci numbers . and could untangle interleaved sequen ~ es of fixed - or patterned - length period . such as : 1133311333 . . . • or 102203330 . . . . It could finite - difference its vay to solutions of many pathological problems humans vould never solve ( except by finite - differences . and only under duress ) - for example : 1 z 5 15 42 98 ( e . sequence " ' hose second differences are every third prime ) . Although pleased that the program coUld solve so many intricate sequences . I ve . s disturbed in particular by its total le . ck of " intelligence " . The program ve . s " mechanistic " . blindly recursive . and not at e . 11 sensitive to pattern . as vould bee . human . The same solution me . chineryve . s applied to all sequences . regardless of their form or content . The j uxte . posi tion of the tvo projects - - e . Bonge . rd - like pattern - discovery end reformulation program vi . th en overly mechanistic . pattern - insensitive sequence - extre . pole . tor - - me . de for an obvious conclusion . and so the Seek - Vhence project ve . s born . Sequence terms have simple descriptions . By ignoring " mathematical " sequences ve could concentrate on " the processes of recognizing patterns " [ Hofstadter 1982c . p . 10 ] - the essence of both Bongard problems end science - vi . thout becoming mired do ' nl in ' 1e . rge amounts of specialized knovtedge e . t > out me . thematics end arithmetic " ( p . 10 ) . The project ' s name reflects both our dome . in interest - - ve can " seek wence " terms arise in e . patterned " seq - uence " - - end the muttiple perspectives one must often have ofe . single object - in this cese . the project ' s name - - in order to understand it fUlly . 6 SOME TYPICAL PROBLEMS In Seek - Vhence , terms of a sequence are presented one by one to the solver by the presenter . The solver ' s goal is to guess the pattern the presenter has in mind . Clearly , for enygiven initial segment there are multitudes of possible patterns ; hovever , the solver usually finds the correct solution to a reasonable pattern after seeing relatively rev patterned groups of terms . In order to give a sense of vhat ve mean by " correct " solutions end " reasonable " patterns , ve list belov a dozen sequences . These sequences vere actually presented in the menner described above to each of twenty - five students at Blackburn College , in en experiment to determine the types of complications most troublesome to human pattern perceivers [ Meredith 83 I . Their experience cen be approximated by sampling the sequences one term at a time . mel < : ing hypotheses es one goes along . The " parsed " sequences follov . THE BLACKBURN DOZEN 1 ) 1 12123123412345 . . . 2 ) 1234567 . . . 3 ) 2 1 2 2 2 2 2 3 2 2 4 2 2 5 2 . . . 4 ) 1 2 2 3 3 3 4 4 4 4 . . . 5 ) 185818581858 . . . 6 ) 2 1 2 2 2 3 2 4 2 5 . . . 7 ) 231232223333234444 . . . 8 ) 1223344556 . . . 9 ) 123344555666 . . . 10 ) 9 1 9 2 9 3 9 4 . . . 11 ) 181218123218123 . . . 12 ) 185581185581 . . . 7 THE PARSED DOZEN 1 ) 1 * 12 * 123 * 1234 * 12345 * 2 ) 1 * 2 * ' 3 * 4 * 5 * 6 * 7 . . . ' 3 ) 2 1 2 * 2 2 2 * 2 3 2 * 2 4 2 * 2 5 2 . . . 4 ) 1 * 2 2 * 3 3 3 * 4 4 4 4 * . . . 5 ) 1 8 5 8 * 1 8 5 8 * 1 8 5 8 * . . . 6 ) 2 1 * 2 2 * 2 3 * 2 4 * 2 5 . . . 7 ) 2 3 ( 1 ) * 2 ' 3 ( 2 2 ) * 2 ' 3 ( 3 3 3 ) * 2 3 ( 4 4 4 4 ) * . . . 8 ) 1 2 * 2 ' 3 * ' 3 4 * 4 5 * 5 6 . . . 9 ) 1 * 2 * ' 3 3 * 4 4 * 5 5 5 * 6 6 6 . . . 10 ) 9 1 * 9 2 * 9 3 * 9 4 . . . 11 ) 1 8 1 * ( 2 1 ) 8 ( 1 2 ) * ( ' 3 2 1 ) B ( 1 2 3 ) * 12 ) 1 B 5 5 8 1 * 1 B 5 5 B 1 * . . . Ve cell a run of terms t > etveen asterisks ( • ) in the parsed versions a " ' template . . . In order to demonstrate an understanding of the pattern . the solver must complete the current template e . nd fill out the next one - vhich is vhat people usually do anyve . y vhen presented these problems . B . THE SEEK : - VHENCE APPROACH The Seek - Vhence system . like any human problem - solver . is presented sequence terms one at a time by the user ( presenter ) . As each term is presented . the system tries to come up vi th a hycothesis • or characterization of the sequence pattern . If subsequent terms confirm the hypothesis . the system vill venture a guess - not simply by supplying the next template ( el . though it does this ) . but by shoving the user a synopsis of its model . On the other hand . should subsequent terms refute its model . the system attempts to reformulate 8 the model to conform to the nev de . ta as vell as to the old . If successful e . t this reformulation effort , the system has anevvorlcing hypothesis , open for confirmation or ret \ lte . tion GETTING AT THE ESSENCE To be sure , there are some differences betveen Seek - Vhence and a full - l > lovn Bonge . rd - type progrem . Most obvious is that ve chose to deal Tlith one sequence , not a set of tvelve dravings . This requires w to predict successive terms , rather than to come up Tlith e . verbal che . r ~ cterization . Hovever , the fact that ve require construction of a predictive model mitigates this difference somevhe . t . in that ve are attempting to characterize the sequence in some explicit vay . Another difference is that ve chose to present the sequence to the system . one term at e . time , rather than as a vhole , as is the case Tlith Bonge . rd problems . This models the scientific method by forcing Seek - Vhence to react to nev evidence , to reformUlate its model of the sequence in the light of nev terms . Ve believe that our choices have me . de the sequence problem e . n appropriate dome . in for the study of the phenomena in vhich ve are interested . EXTRAPOLATOR LESSONS One lesson learned in vriting the sequence extrapolation progrem for our artificial - intelligence class ve . s that one must be careful not to build in too many clever devices . The success of that progrem ve . s direct ! y proportional to the number of tricks and special sequences the progremmer could devise . In reaction to that . ve have not permitted Seelc - Vhence to vork on derived sequences ( e . g . , first differences , first ratios , even - numbered terms , etc . ) of e . n y kind . Such manipUle . tions as separating interleaved subsequences , pUlling out 9 group lengths , and the like ere " high - level " actions the . t can only be employed efler the initiel . noticing of patterns has taken place . To introduce such operations too soon vould be to run the risk of overly directing the program ' s actions , and so of doing its vork for it . Vhen the programmer does get to the point of supplying e . " beg of tricks " such as noticing interleaving . . or vhe . tever . the progt ' . am should be able to select tricks from that beg by itself . based on its perceptions at the time - as people do - - and not based on some " canned " , pre - determined hierarchy of techniques . ~ is pointed out in e . le . ter chapter , the Seek - Vhence system is just nov becoming ready to employ top - dovn approaches such es these . C . REPRESENTATION ISSUES The centrel . concern of the Seek - Vhence project is to explore the ability to discover patterns , an e . l > ility the . t requires the development and reformulation of pattern ( concept ) descriptions . Th & representation of concepts is criticel . to the success of the system . because the concept descriptions must express salient information - - vhere salience is not predefined - and so must be amenable to fluid and continual modification . In the folloving sections , ve vill outline our approach to concept representation and processing in Seek - Vhence , beginning vith e . discussion of our distinction betveen " complex " and " complicated " systems . COMPUX VS . COMPLICATED Consider this interchange betveen e . college Dean and a faculty member , vhich occurred in the middle of e . discussion about replacing e . just - resigned 1 0 member of the facUlty : Prof : " I guess ve shoUld advertise as soon as possible nov that it ' s official . Aehh - looks like I lost a button off this shirt . · Dean : " It ' s alve . ys se . d vhen afe . cUltymember loses his buttons . " Prof : " Yes , but not as se . d as a Dean vho loses his faculties . " This conversation , similar to many that occur each day , is nothing spectacUlar , special , or difficult to understand . Those same actors could elso have engaged in a complicated discussion or international lav or faculty politics - a discussion too complicated for many non - specielists or outsiders to understand . The exchange or ( sad ) puns is , hovever , a prime example or vhat ve consider to be a complex ( as opposed to complicated ) interchange . Fev elements are being related or discussed , no vet > of tangled linkages is involved , and no technical terms are used . Rather , the cleverness comes from finding and using unexpected relationships among the elements . Here is another complex but everyday discussion , this time betveen a three - year - old and her mother at 9 A . M . : Child : I vant to go visit Toby . Mom : · OK : ; but You ' ll have to vait until after lunch . Child : May I have a peanut butter sandvich nov ? Again , ve have a situation vhere nothing difficult is being discussed , but there are obvious important rumblings going on beneath the surface . One can almost see - - cartoonlike - - a little bump appear in the ground and travel from one place to the next . simply disturbing the surface as it passes along belov . Something subtle has gone on in the child " s mind , but it is unexpected , and it takes us a little vhile to " catch on " . The terms ve vill be using - " complex " and " complicated " - may not be the best to capture the tvo underlying notions , the implementation or vhich 1 1 may map quite vell onto Michalski ' s " structural - vs . attribute - based " descriptions [ Dietterich 83 . p . 42 ] . Nonetheless . they vill serve as pegs on vhich ve can perhaps hang meanings . By " complicated " . ve mean e . big . " busy " . tangled system . of linlcages . vi th much date . involved - e . " tropical jungle " of concepts . Complicated systems include murder - mystery plots , automobile engine diagrams . and typicel expert - system dome . ins . In computer applications . the concept representations involved tend to be frame - besed , vi . th fixed slots to go vith the predefined linkages . The focus is on folloving the , Proper links to get from one concept to another . In contrast , e . " complex " dome . in is deep rather than broad - more like an iceberg field than ajungle . There maybe some clear linlce . ges , but some apparent ! y separate bergs are actually connected t > elov the surface of the ve . ter . The concept space is relatively uncluttered and the linkages often subtle . Complex domains include puns , some poems . and patterns . In computer applications . the focus vould be in finding interesting relationships among the fev concepts , vhich vould tend to have structural descriptions . ( Vinston [ Vinston 75 ] and Ronald Brachman , vi th his KL - ONE system [ Brachman 77 ; 85 ) have me . de some progress in the area of structural description of concepts . ) Ve find a helpful metaphor for our distinction between " complicated " and " complex " in the comparison betveen unraveling a murder - mystery end understanding e . short but ellusive poem . There are certainly some dome . ins - - speech recognition and the vriting and understanding of stories come immediate ! y to mind - that are both complex and complicated . In fact . there are probably elements of both in almost every problem . Vhe . t is of note , though , is that the complex dimension seems to have been virtUelly ignored so far in most AI research . 12 SEEK - VHENCE CONCEPT REPRESENTATION In Seek - Vhence . ve attempt to begin opening the " can ofvorms " outlined in the previous section . Seek - Vhence compound concepts are represented as netvorks or primitive concepts . The primitives are fixed . as are most base - level relations . That is . ve describe a compoi , md concept in terms or primitive concepts and links . so that a concept ' s structure holds much information about it . This " complex " , structural representation of concepts vill permit the use of structural similarities as " virtual links " in the system . That is , ve c ~ relate tvo concepts by noting similarities in their structures and / or structural building blocks . rather than simply looking at their lists of attributes . Moreover . a concept ' s representation is not unique - it can be " rephrased " or . as ve say , reformUlated . In fact . as nevsequence terms are presented to it . the system is constrained to change its pattern description in the light or the nev evidence . In addition . hovever . the representation can be changed even though the current model is accurate . simply to see if a different representation " looks better " . These miniature paradigm - shifts are termed " slipping " , and are crucial if the system is to model fluid movement from one concept to another . VINSTON AND STRUCTURAL DESCRIPTIONS The idea of using structural descriptions in a computer system is certainly not nev . Patrick Vinston . in his important structure - learning program [ Vinston 75 ] . vas keenly interested in employing such descriptions in order to capture notions such as " table " , ··tent " , and " arch " . Moreover . in . ' 1earning " these notions from a succession· of examples and near - misses . his program first created a concept description and then modified it to conform to 13 nev evidence . In addition . once the progrem . had learned several concepts . one of its goals ves : ' ' To com . pare some scene vi th a list of models and report the most acceptable match " [ Vinston 75 . p . 2001 The use of positive and negative evi < lence . the construction of structural models . end the use of these models to categorize nev block figures all have e . Bongard - like flavor the . t ve find very interesting end appealing . Hovever , ve have had to fe . ce some additional representationel issues . vhich ve vill discuss after first describing our approach to structure ! representation . D . SEEK - VHENCE DIAGRAMS Ase . first major step in Wlderstanding vhe . t ve vere about . our group ( Hofste . dter , Clossmen . end Meredith ) devised a set of primitives end a structural representation technique the . t ve called " Seek - Vhence die . grem . s " . These expressive visuel . die . grems . vhich to some extent have been implemented in the current Sf ' $ tem . give a sense ofhovve envision reformulation to teke place end hov verious distinct concepts cen be seen to be related through " closeness " of their structural representations . THE PRIMITIVES There are eight primitive notions in Seek - Vhence die . grams , each of vhich is represented by a node that tekes at leost one input Value . The ! Unction of each primitive is to return e . Value vhen queried - or bil . os ve say . A primitive returns no Value vhen en input lies outside of the appropriate dome . in or vhen the processing vould produce e . result out of the range of nested groups of nonnegative integers . A returned Value me . yin turn be used e . s input to 14 another primitive or maybe returned 8S a final result . The primitives are : Constant ( k ) - - returns the value k . a nonnegative integer - : Example : ( Constant 4 ) - - > 4 ; Countup ( lc ) - returns k . then k + l . then k + 2 • . . . on successive hits - Example : ( Countup 4 ) - > 4 , 5 . 6 . . . , ( on successive hits ) ; C - group ( vetn ) - a " copy - group " : returns n copies of vet , grouped in a pair ofperentheses - Example : ( C - group 5 3 ) - - > ( 5 5 5 ) ; S - group ( k , n ) - a " successorship group " : returns the grouped terms ( k . k + l . k + 2 . . . . . k + n - 1 ) - - Exomple : ( S - group 6 4 ) - - > ( 6 7 B 9 ) ; P - group ( k , n ) - a " predecessorship group " : returns the grouped terms . ( k . k - 1 , k - 2 , . . . , k - n + l ) - Exem , ple : ( P - group 7 3 ) - - > ( 7 6 5 ) ; Y - group ( first , mid , 18St ) - a " symmetry group " : returns the grouped elements ( first . mid , 111St ) , vbere " 18St " is a mirror image of " first " . If " mid " is simply the vord " nil " , Y - group returns ( first , last ) - Examples : ( Y - group ( 5 2 ) 3 mirror ) - - > ( 5 2 3 2 5 ) ( Y - group ( 6 3 ) nil mirror ) - > ( 6 3 3 6 ) ; Tuple ( ergl . ist ) - returns a group of its arguments ' values , evaluated in the order given in " arglist " - Exem , ple : ( Tuple ( 5 3 9 ) ) - - - > ( 5 3 9 ) ; Cycle ( arglist ) - - returns the value of successive members in " arglist " on successive hits , in a cyclic fashion - - Exem , ple : ( Cycle ( 5 3 9 ) ) - - - > 5 , 3 . 9 , 5 . . . . on successive hits . figure 1 shovs our diagrammatic representation of all but the tvo 15 simplest primitives . In figures 1and2 , ee . ch line represents one hit or query of the given structure . ·The primitives can be compounded , vi . th the output of one structure serving as input to another . A hit on the topmost structure causes the propagation ( ) f hits throughout the netvork . The bottommost structures return their V8lues to their c8lling structures . vhich then use the returned V8lues to calculate their ovn V8lues , and so on upvards . A simple example of this is shovn in the first die . gram of figure 2 . The top - level Y - group req \ lires a V8lue from the Tuple , and so hits it receiving " ( l 4 ) " from the . t structure . It then uses this V8lue to compute its ovn - " ' ( 1 4 4 1 ) " . More examples of compounding are shovn in later figures . Seek - Vhence netvorks can e . lso employ shared structures . e . s shovn in the second and third die . grams in Figure 2 . In the first of these , e . " Countup " structure is shared l > y tvo inputs to the Tuple . Vhen the Countup is hit by the first input , its value - 3 - is fed to both inputs , giving the Tuple a V8lue of " ( 3 1 3 ) " . Similarly , the next hit of Tuple returns e . " ' ( 4 1 4 ) " , and so on . An analogous shared structure is shovn in the le . st diagram of Figure 2 . This time , hovever . the sharers are tvo inputs to a Cycle , and so ve get a different sort of result . The first hit of Cycle causes its first input to be hit so Coun tup is hit in turn and feeds ~ she . ring structures - the first and third inputs to Cycle . The Cycle then returns a 3 . On the second hit of Cycle , the middle input is hit . and returns a 1 . Then , on the third hit of Cycle , the third input is hit causing it to hit the Countup age . in . Countup then returns e . 4 to the first and third inputs of Cycle , over - witing both " 3 ' " s e . t once vith " ' 4 ' " s , e . nd consequently the third input returns a V8lue of 4 to Cycle . vhich reports it . Tuple 0 16 ( 2 2 2 ) ( 2 3 4 ) ( 8 7 6 5 ) ( 1 4 1 ) ( 8 0 3 ) 8 0 3 Figure 1 - - The major primitives 17 mirror ( 1 4 4 1 ) ( 3 1 3 ) 3 1 ( 4 1 4 ) ( 5 1 5 ) 4 5 1 6 Figure 2 - - Seek - Vhence diagrams vi . th some shared structures 18 Note the . t if the Cycle e . bove he . d tvo different Countups under its inputs instead of e . single she . red structure . the resUlts returned woUld he . ve been different . . Then it " l ' IOUld have returned 3 . L 3 . 4 , 1 . 4 • . . . on successive hits . E . MODELING SEQUENCE PATTERNS People presented Vi . th the flrst rev terms or a sequence have a strong tendency to rormUle . te a hypothesis e . l > out the underlying pattern . One of our goals in creating Seek - Vhence diagrams ves to be e . l > le to model such hypotheses in e . n underste . nde . l > le . expressive . e . nd flexible ( both modifie . l > le e . nd extensible ) pictorial form . Given belov ere severe . 1 possible hypotheses based on the initie . 1 segment " 1 1 2 " : ( 1 ) 1 * 1 2 * 1 2 3 * 1 2 3 4 * . . . ( 2 ) 1 1 * 2 2 * 3 3 * 4 4 * ( 3 ) 1 1 * 2 2 * 1 1 * 2 2 * ( 4 ) 1 1 * 2 * 1 1 * 2 * ( 5 ) 1 * I 2 * 1 * I 2 * ( 6 ) 1 1 * 2 I * 3 1 * 4 1 * ( 7 ) 1 1 * 2 2 2 * 3 3 3 3 * 4 4 4 4 4 * ( 8 ) I 1 2 * 1 2 2 * 1 3 2 * 1 4 2 * 1 5 2 * . . ( 9 ) 1 ( 1 2 ) * 2 ( I 2 ) * 3 ( I 2 ) * 4 ( 1 2 ) . . . ( 10 ) 1 1 2 * 2 1 3 * 3 1 4 * 4 1 5 * ( 11 ) 1 1 2 * 3 1 4 * 5 1 6 * 7 1 8 * ( 12 ) 1 * 1 2 1 * 1 2 3 2 1 * 1 2 3 4 3 2 I * ( 13 ) ( I I ) * 2 * 3 * * ( 1 I ) * 2 * 3 * * ( I I ) * 2 * 3 * * ( 14 ) ( 1 I ) * 2 * 3 * * I * ( 2 2 ) * 3 * * I * 2 * ( 3 3 ) * * ( I I ) . . . 19 These are e . 11 reesonal > le extensions of the initial segment . although some are more l . ilcel y then others to come to mind immediately . The lest of these . the " marching doubler " . is Gre . y Clossman ' s invention . It poses some interesting representational problems . es shovn in Figure 6 . The other pe . rses are given as die . grams in Figures 3 - 5 . In diagram ( 1 } of Figure 3 . ve have en S - group ( " successorship " group } structure . Its first input - the start velue - - is e . constant . 1 . This means that each hit of the top - level structure vill be e . successorship group counting up from 1 . The second input - vhich tells us the group iength - is here the result of hitting e . Countup structure . Thus . the S - group leniths vi . 11 vary . increasing by one on each successive hit . The first length vi . 11 be 1 . Therefore . the first hit on the die . gram vi . 11 return en S - group starting at 1 end of length 1 - Le . • " 1 " . The second hit ' s rerult again begins e . t 1 . but vill be of length 2 - Le . . " l 2 " . Successive hits give us successively longer successorship runs ( vi . th success } . In die . gram ( 2 } of Figure 3 . ve see e . top - level c - iroup ( " copy " group } , vhose first input - the velue to be copied - changes . but vhose second input - the length or number of copies - remains constant at 2 . Because the first input is fed by e . Countup structure , the velue to be copied vi . 11 be successive integers starting at the Countup ' s start - velue - 1 . in this cese . In diagram ( 6 } . there is e . top - level Cycle . Vhen hit . it vi . 11 return the velue of a hit to one of its inputs . Thus . the first hit of the Cycle results in " l " being returned - - the result of e . first hit to the Countup . The next hit of Cycle causes it to return " l " , but this time thanks to a hit of its second input . A third hit of Cycle brings us be . ck to the Countup . so e . " 2 " is returned . Successive hits vill then generate the indicated pattern . 20 ( 1 ) ( 2 ) ( 1 ) ( 1 2 ) ( 1 2 3 ) . . . ( 1 1 ) ( 2 2 ) ( 3 3 ) . . . ( 3 ) - ( 1 1 ) ( 2 2 ) ( 1 1 ) ( 2 2 ) " . • . ( 1 1 ) ( 2 ) ( 1 1 ) ( 2 ) . . . ( 5 ) ( 6 ) ( 1 ) ( 1 2 ) ( 1 ) ( 1 2 ) ( 1 ) ( 1 2 ) . . . 11213141 . . . Figure 3 - Some parses of " 1 1 2 " 21 ( 7b ) ( 1 1 ) ( 2 2 2 ) ( 3 3 3 3 ) . Figure 4 - Tvo different representations ore . single parse In Figure 4 , ve see e . n exemple of tvo different representations of the same pattern concept . In this particular ease . the representations e . re not apparently very different . since both use " ' C - group ·as the basic organizing notion . The only ree . 1 difference is that in ( b ) the successorship relationship betveen the content e . nd length of ee . eh group is made explicit by means of the rectangular " " e . ddl " box . vhereas in ( e . ) it is not . This small difference can result in very different genere ! izations of the pattern . however . For exemple , if asked to generalize from " l " to " 2 " , e . program holding representation ( a ) vould give us the sequence : 2 2 3 3 3 4 4 4 4 5 5 5 5 5 . . . vhereas a program holding representation ( b ) vould generalize to : 222333344444555555 . . . . No one can say vhieh is the " correct " generalization - it depends upon the presenter ' s pattern concept . Vhat ve ~ say is that both e . re " reasonable·· . 22 ( Bb ) 112122132142 . . . ( 9 ) ( 10 ) 1 ( 1 2 ) 2 ( 1 2 ) 3 ( 1 2 ) . ( 1 1 2 ) ( 2 i 3 ) ( 3 1 4 ) . ( 11 ) ( 12 ) Countup 1 1 2 3 1 4 5 1 6 . . . ( 1 ) ( 1 2 1 ) ( 1 2 3 2 1 ) ( 1 2 3 4 3 2 1 ) . . . Figure 5 - - More parses of . . 1 1 2 . . Cycle 2 replace by - replace by 23 ( 1 1 ) 2 3 ( 1 1 ) 2 3 . . . jump to next sib ( 1 1 ) 2 3 1 ( 2 2 ) 3 1 2 ( 3 3 ) ( 1 1 ) 2 3 . . . figure 6 - The doubler e . nd Clossrc . e . n ' s " ' re . arching doubler " ' In figure 6 , ~ again encounter rectangular " ' instruction " ' boxes . indicating modifications to be done on the fly . In the first diagre . rc . . the ··1 . . vill 24 be replaced by a C - group of length 2 vhose value is te . ken es the " 1 " . In the second diegram . . the same sort of replacement is done . but vhen the " jump " box is encountered ( after each hit of the " 3 " ) . the entire replace - box structure . moves over to the next sibling belovthe Cycle . Here . it moves cyclically from . " 1 " to " 2 " to " 3 " to " 1 " , and so on . COMP i . RISON VITH VINSTON J . . s ve noted earlier , Vinston ' s vork on structural descriptions colored our thinking on Seei : : - Vhence . But vherees his program . had tQ find discrete objects and then describe the physical relationships among them . , our program . is given the discrete objects and must describe patterns formed by neighboring groups of them . . Vinston·s program did use grouping es e . ve . y of simplifying descriptions . Hovever , block groups vere defined in a strict , algorithmic vay on the be . sis of shared properties . Once formed , e . group became a perm . anent unit in the scene description . Our grouping mechanism . is more fundamental to our system . . in that groups are continUallybeing created and destroyed es the system . attempts to form . Ulate a pattern description . Grouping goes on simultaneously vi th description . Our difficUlties . then , lie in finding structures sim . Ultaneouslyvith com . paring those structures in the " correct " vay . For example , in the sequence : 2 1 2 2 2 2 2 3 2 2 4 2 . . . ve can eesilytell exe . ctlyvhe . t the terms are and vho is next to vhom . . Ve can even note that there is e . group of five " 2 " ·s . starting " With the third term . - e . Seek - Vhence " ( C - group 2 5 ) " . None of this is relevant . hovever . Vhe . t ve must notice in order to analyze the pattern is that the aforementioned C - group must not be vieved es such . It hes to be torn apart . and its pieces recombined vith other sequence fregm . ents in order to make a parse of the sequence 25 reflecting its underlying rUle . Vinston ' s diagrams e . lm . ost look like the object they describe . Ve can see the three elements of en arch , and the re . ct that the supports serve symmetric 1 \ lnctions in the vhole . In contrast . in Seek - Vhence . " e . pattern hes not been fully understood if the diagram representing it itself contains e . pattern . For that means either that some aspect or the pattern ves missed or that the notation lacks the pover to characterize that aspect and therefore had to copy it verbatim . " [ Hofstadter B2a . Appendix 1 . p . B ] . The implementations of the two systems bring out additional distinctions betveen them . The structures created byVinston ' s program vere essentially static . designed to be vieved and modified . In contrast . the Seek - Vhence structures have an active racet - they " e . ct " es veil es " are " . They need to compute and return V8lues . a process that often requires some sort of memory in each node - or vhe . t ves hit last . of vhat V8lue ves lest computed . and so on . In summary . ve eve much to Vinston and his notion of modifiable structural descriptions . Hovever . our dome . in and interests involve us in a vorld vhere the objects to t > e related must t > e discovered end described simultaneously . and vhere the physical relationships betveen inputs are only fragments or the information needed to describe an underlying pattern . His domain is more like Bongard ' s in the use or positive and negative evidence to determine membership in a set - be it " arch " or ' 1eft - hand - side " . Ours is more like Bongard ' s in the requirement of coming up vi th a characterization of perceived pattern rather thane . description or physical reality . F . SYSTEM ORGANIZATION Representation issues es discussed above are closelyintertvined " Vith processing and organization in Seek - Vhence . The system em . ploys simulated 26 parallel processing ' Iii . th non - cooperating processes vorking independently and under no overseeing a & ent . " Triga ; ered " processes - those avekened by recent events - are chosen at random . to perform . their duties . the choice being affected ( but not determined ) by the weights or " urgencies • ot the candidate processes . HEAR . SAY II The HU . RSA Y II speech - understanding system . [ Reddy 76 ] contributed much to our conception ot Seek - Vhence . Eirst . it used level - based concept representation . vherein the utterance under consideration vas represented ditteren tl y at different levels . in a lenguege appropriate to the level . Lover levels provide·d evidence tor a higher - level hypothesis . end vhenever a support ves veakened . the higher - level notion ve . s also veakened . Similarly . whenever a high - level construct ves called questionable by some higher - level criterion . the lover - level supports tor it vere also veakened . This interplay emong levels of representation· is . ve believe . one of the most important contributions of HEARSAY II . Certainly . the " ' knoVledge source " ' approach to processing ve . s another contribution . Self - activated . independently - acting processes operated in parallel . communicating only by the process trace they left behind . The trace of a process consisted of the structures it created or modified on the " ' blackboard " - a global . three - dimensional date . structure - - and the triggered ( or " e . vakened " ) processes left in its vake . This approach . taken to its logical conclusion es in Minsky ' s " society of mind " notion [ Minsky 86 ] . seems to us to be the ve . ve of the future . 27 COMPARISON VI ! H HEARSAY II Our system organization is similar in some ve . ys to that of HEARS . A Y II . but our processes ere smaller and less poverf \ Jl than its ' ' knovl . edge sources " and our rloba1 de . ta structure is much simpler than its blackboard . Seek - Vhence does not physically maintain e . collection of alternative hypotheses as did HEARSAY II . Rather . it mainteins one " reigning " hypothesis and the ability to reformulate that hypothesis into an alternative one as the " evidence " - the pressure to change - mounts . The success of this approach in general wl depend upon the system ' s ability to reformulate easily and reasonably - e . tall order . E . THE HOEST ADTER CONNECTION Certainly , Douglas Hofstadter has deeply influenced myvork on Seek - Vhence , from conception through representation and organization to 4nplemente . tion . Notions he has developed and those that ve have developed in innumerable discussions together and ~ th Gray Clossman have become inextricably intertwined . and their realizations have begun to emerge ( ve hope ) in Seek - Vhence . These inclUde such notions as active symbols that are composed of groupings of lover - level units . vhich are in turn groupings of even lover - level units . . . , reformulation and the importance of " natural " human abilities . conceptual skeletons , slipping , fluid concepts , focusing and filtering . the " terraced scan " approach to processing , the elusive quality of salience , roles and the importance and difficulty of recognizing similarity , the simultaneous creation and use of categories made " on the fly " as needed , the importance of non - cooperating processes and randomness in lieu of an overseeing all - poverf \ Jl agent designed to make " important decisions " , recognition of the complexity and subtlety of perception and its central place in human • 28 intelligence , the importe . nce of " toy vorlds " end the frictionless universe in getting to the heart of a problem . A . clear end direct exposition of some of the central notions underlying Hofstadter ' s vorlc is & : iven in the paper " J . rtificial . Intellla : ence : Subcognition es Computation· [ Hofstadter 82b ] . This is important readin & : for en ycne deeply interested in exploring intelligence rather then chesin & : its shadovs . The paper , end some subsequent thoughts , are reprinted in the book , Metomagice1 Themos [ Hofstadter 85a ] ( es Chapter 26 ) . SEEIC - VHENCE . A . ND ITS F . A . MILY The Seek - Vhence project presented here is only one of a family of Hofstadter - inspired vorlcs designed to address the issues of perception , reformulation . end similarity . Other members of the fe . milyere jumbo - e . n e . ne . gre . m - solver ; Copycat - a pattern ene . logyproa : re . m ; end Letter Spirit - a styie - extrapolation system operating in the dome . in of Virue . 1 letterforms " a " - > " z " . The Fluid . A . nal . ogies Research Group ( F . A . RG ) e . t the University of Michigan is currently vorking on or hos completed vork on each of these projects [ Hofstadter 85 b ] . JUMBO The eldest member of the Hofstadter - inspired family is Jumbo [ Hofstadter 8 ' 3 l This system explored the dome . in of vord " jumbles " ( e . ne . gre . ms ) . . A . s the ge . me is usue . ll . y played , the ene . gre . m solver is given a vord vhose letters have been scrambled - - ruc : h es " toonin " . The solver ' s object is to unscramble the letters to reveal the unique vord that ce . n be formed from them . Jumbo strays from this norm in that it does not actue . Uyhave to come up vith ree . 1 vords - it hes no dictionary of the English le . ngue . ge . Rather . its object is to 29 create vord - lilce entities - things that ~ be English vor < ls - - from the given letters . This modification goes to the heart of the matter - hov people go e . bout solving jumbles - vhile bypassing the side issue of dictionary lookup . The system must " judge its progress on purely internal criteria of coherency at several levels of structure at once . " [ Hofste . < lter 84 . p . 11 ] jumbo hes knovledge ofhovconsonants and vovels " lilce " to be grouped into clusters . hov clusters cen be me . de into reasonable syllables . end hov syllables can be combined into vor < ls . The system . knoving only these affinities and using a probabilistic . simulated - pare . llel control structure similer to Seek - Vhence ' s , consistently comes up vi . th good vord - like objects from its input letters . Macro - level order emerges from micro - level chaos . chaos of processing as vell as of input . In Jumbo . Hofstadter al . so began exploring the ideas of terraced scan . temperature and self - ntchjng . A " terraced scan " is a technique for progressively deepening the exploration of several di . ! ! erent path vays in parallel . The most fruitful or interesting pathve . ys tend to be explored more deeply , vhile less plausible pathve . ys are seldom visited . Briefly summarized , the . . temperature . . of a system both describes and emerges from the activity level in the system . Vhen the temperature is high . even unlike ! y path ve . ys may be explored . Conversely , in lov temperatures only very plausible pathve . ys are explored . In jumbo . the system ' s temperature is controlled by the " happiness " of the structures it hes created . Initially , vhen single letters ( " unhappy " because they " vent " to be combined vi . th other letters ) ere introduced . the temperature is high , encouraging the letters to mingle and combine . Later . vhen a suitable vord - like entity has been created and all letters are included in it . temperature falls off to the freezing point . inhibiting eny further activity . 30 Self - vatching is an important notion in any system le . eking overseers that check for loopiness of behavior . In a . system such e . s Jumbo or Seek - Vhence . $ tructures are continuelly being created and demoyed . It is certain ! y possible that such e . system vil1 recreate e . $ tructure time and a . gain . This sort or loopiness is note . problem unless it takes over the system - that is , unless it takes place e . t a . high enough level that it inhibits other processing . jumbo he . d no effective controls for such behavior . relying on externally - imposed temperature changes to de $ troyrecurring $ tructures . Seek - Vhence goes e . $ tep further by remembering encapsulations or previously - generated hypotheses in order to prevent their re - use . More sophisticated self - vatching is being incorporated into the Copycat system . the third member of the : E ' J . RG family . COPYCJ . T Copycat [ Hofstadter 84 ; 85 . ch . 24 ] is the principal current focus or attention e . t : E ' J . RG . Like Seek - Vhence . it involves noticing patterns . but this time in a slightly different " idealized domain " and vi . th explicit attention to one of Hofstadter ' s major interests - - e . nelogies . The Copycat system is given three strings or letters . each string being one element in a four - part analogy problem . The system is to complete the analogy by discovering the fourth string . For example . if given the input : J . BC •• > J . BD ; PQR sa > ? the system should respond vi . th another alphabetic string e . s its ansver . ( ' ' PQS " vould be good . " PQD " vould be defensible , and " ABS " vould be strange . ) Like Bonge . rd problems and Seek - Vhence problems . Copycat analogies require a good dee . 1 or thought and ingenuity to solve in all generality . Attention mU $ t be given both to the " face - value " , the e . ctue . 1 letters involved - - 31 their " exteruionel " or " syntactic " identities - and to the t21tt those letters play in the strings in vhich they are seen - their " interuionel " or " semantic " identities . The depth of difficulty in defining roles and eV8luating their meaning is explored in [ Hofstadter 80 ; 85 , ch . 24 ] . Not surprisingly , the notion of salience pops up in Copycat as it did in Seek - Vhence . In our exemple above , is it important that " J . . " is the first letter of the elphe . bet , or is that fact just " noise " , interfering vi th our ability to find a good solution 7 Do the lengths of the strings matter or not ? Hov dove identify the important facets of the first half of the anelogy and then translate those accurately to the second half ? These questions are not easy to ans " 1t ' er in generel . FAR . CT might have tried to create a letter - analogy " expert " ' , but instead opted for the usual Hofstadter system organization - simulated parallelism among small tasks . The tasks are non - cooperating , vi th no overseeing agent to direct system activity . Rather than constrU ( ; t alternative high - level hypotheses , a terraced scan [ Hofstadter 84 , pp . 13 - 14 ] is used to explore me { ly lov - level pathvays simultaneously . The most SU ( ; cessful and appealing paths vill tend to be pursued most actively . J . . s in Seek - Vhence , a current hypothesis vill be reformulated vhen the veight of evidence turns against it . Thus , the process of discovery that the Copycat system must go through is very similar to that required of Seek - Vhence . The explicit use of analogy makes the connection to Bongard problems clear . In developing Copycat , the members of FJ . . RCT have begun implementing a " Slipnet " similar to but more sophisticated than the one used in Seek - Vhence . The Slipnet strU ( ; ture , absent from Jumbo , is a repository of information about the Platonic concepts knovn to the system . Its nodes and links " form a storehouse of conceptual proximities ( slippability links ) and semanticities ( centrality V8lues ) " [ Hofstadter 84 , p . 20 ] . The Slipnet is crU ( ; ial in supporting 32 fluid yet controlled passage of activation from a concept to its neighbors . This " spreading activation " causes some of the concepts to be more " interested " in the ongoing problem - solving activity than others . Those that are most interested vill tend to come forth as potential organizing notions . " popping to mind " as it vere . > . . ve11 - deve1oped and fluid Slipnet is necessary for the complete exploration or relationships among the atomic entities or the system - - be they letters or numbers - and among any perceived groupings or those entities . It is also difficult to implement . There must be enough activity so that l ) ev ideas keep coming as needed . On the other hand , a " hyperactivated " Slipnet . vherein nearly all the concepts are active most of the time , is too confusing to be helpful . GrayClossm . an has become very interested in taming the Slipnet as veil as in creating uniform . structures ror all levels or abstraction in the system . [ Clossm . an 85 ] . Both Seek - Vhence and Copycat are charged vi . th finding a useful description of their input - - a description that " wrks " in solving the problem posed . In Copycat . the first tw letter strings must be contrasted to shov a clean distinction . The first and third must provide rodder for translation . including the translation or the difference betveen the first tw ! David Rogers at FA . RG has begun to attack these problems in a unique 178 . y - - bycreating potentially schizophrenic structures [ Rogers 86 ) . For example . in the string " A . BD " , the " D " vill feel a little uncertain about its identity , becawe the " B " and the string " A . B " vould like to be folloved by a " C " , and vill continually ask the " D " if it is , in fact . a " C " . Thus . the unusual elements or a string may be pointed out by the system ' s structures them . selves . Seek - Vhence does not have as many distinct elements as Copycat to wrk vi th , since it operates on a single sequence or integers . This is a boon in 33 al . loving the system to focus its attention in one ple . ce , but a be . ne in imposing fever constraints - - the help it could get in pe . rsing the sequence by looking at ~ structures that e . re knovn to be simile . r . Nonetheless . the tvo systems obviously she . re a conceptual skeleton e . nd ere deeply concerned vith perceptual mechanisms as the foundation for even the highest levels or cognition . LETTER SPIRIT The " youngest " m ~ mber or our project re . mil y - Letter Spirit - - involves vhat may be the purest domain for the exploration of perception . The task of this system is to extrapolate the sty1e of a given letterrorm to other letters of the alphabet . Some wrkers at FARG have begun to attack this problem . but ihe challenge is great . Perhaps the best indicator of the difficulty of this undertaking is to note that the final Bonge . rd problem - problem 100 - consisted or six " a " ' s on one side of the dividing Une e . nd six " b " ' s on the other . H . CONCLUSION In the Preface to this dissertation . ve claimed that pattern perception is scientific induction in microcosm . To be sure , ve recognize that scientists rely on a great deal of factual knov1edge e . nd that the scientific method requires careful . experimentation e . nd eval . uation of evidence . In this respect . ve e . re exploring only a sme . 11 region of a vast territory . Hovever . the creative essence or science is the inductive pe . rt . the ability to find connections vhere none vere previously lcnovn . Ve believe ve ce . n explore this essential region through programs such as Juml > o . Seek - Vhence , Copycat . and Letter Spirit . In a topology vhere complexity is the metric , our sme . 11 domains for the study of discovery and perception maybe of the same size as highly complicated scientific 34 dome . ins . Ve ere . at lee . st . certain that our problem - the perception of patterns - is , e . s el . most everyone notes vhen first entering Dr . Vho ' s Terdi : s : . ' ' bigger on the inside than on the outside " . CHAPTER rvo SEEIC - VHENCE : STAGE ONE - HYPOTHESIS CREATION 36 A . INTRODUCTION In the previous chapter . ve presented our central problem - - finding patterns in sequences of nonnegative integers . Ve also developed " Seek - Vhence diagrams " , a structural representation system for describing such patterns . In this chapter and the next , ve go on to describe the Seek - Vhence system and to document those features that have been implemented in the current version of the program . The program ree . lizes most of the features of Seek - Vhence diagrams in its str . ucture . 1 representations of patterns - - called hYPotheses . The most important omission is of the rectangular instruction boxes seen in Figures 5 and 6 of the last chapter . For many ( but certainly not all ) sequences , the program can create a hypothesis as it is presented the terms of a sequence , thereby building its ovn model of an unfolding pattern . Moreover . the system can often reformUlate its hypothesis to form a nev one vhen subsequent sequence terms prove the current hypothesis incorrect . B . OVERVIIV OF THE SEEK - VHENCE SYSTEM 1 . DOMAIN AND GOALS As vas mentioned in the Preface . the domain of Seek - Vhence lends itself to the stUdy of pattern perception . By eliminating kno ' Vledge of mathematical operations . ve can avoid such problems as vhether " ' 4 " should be interpreted as 2 * 2 . 5 - 1 . or 100 / 25 . This permits us to concentrate on ··4·· as an atomic element in a pattern . The Value of the element may or may not have other significance . but it cannot be seen as having any internal pattern . For example , " 4 " is an element in the segment " 2 3 4 5 " . and it also represents the length of that segment ; it can also be vieved as the successor of " 3 " or as the predecessor of ' " 5 " . Beyond that , it has very little structure . 37 Vhydid ve choose such a " simple " domain ? Ve vented to study pattern perception , not finite differences or number theory . Ve can come up vi th some very difficult patterns in our little universe , yet the components are simple . This is just vhat ve " ' lrere after - a domain vherein problem - solving difficulties clear ! y arise from the vay in vhich the elements are combined and not from the elements themselves . The patterns studied . therefore . are non - mathematically - sophisticated rules that generate sequences of nonnegative integers . In response to a prompt . a user presents to the system numbers vhich presumably follov some pattern the user has in mind . The system receives these terms one by one and . after each one , either ventures a guess at the underlying pattern . quits , or asks for more information ( another term ) . Should the system guess incorrect ! y that is . guess an underlying rule different from the one the user has in mind - the user vill so indicate and the system vill continue . probably by asking for more terms . and then using those as a basis for reformulating its faulty perception . The patterns presented can l > e very rubtle or very simple . but in every case the system·s guessed rules should be " reasonal > le " , acceptable as possible solutions to a human observer ; they should elegant ! y and economical ! y explain the portion of the sequence already seen . as vell as predict an infinite continuation . 38 Some " typical " pattern problems might start out as follo ~ : 222 . . . 112233 . . . 122333 . . . 121231234 . . . 1010010001 . . . 128 3 4 B 5 6 8 . . . 1 2 8 3 4 5 8 6 7 8 9 8 . . . 373737 . . . 8 0 8 8 0 8 8 0 8 . . . 1 1 2 1 2 2 1 3 2 . . . Some non - domain problems are : 2 3 5 7 11 . . . - - - - - - - - - " primes " is too mathematically sophisticated a notion ; - 3 - 2 - 1 . . . - - - - - - - - negative integers are " unknovn " ; 1 7 9 15 18 . . . - - - - - - - - ··get bigger " is too amorphous ; there is no canonical " next term " . In essence . ve can assume the system is like a small child vho is able to count and notice samenesses but vho cannot do arithmetic . count by tvos . recite primes . etc . . It is critical to emphasize that ve are after pattern rather than me . theme . tics here . 2 . THE rvo STAGES Of PROCESSING There are tvo stages of processing in Seek - Vhence . An initial formUlation must first evolve ; this is the vork of stage one . cUlminating in the creation of a hypothesis for the underlying rUle . This ' " preliminary ' " stage is ree . 11 y quite complicated and very important . The structures created during stage one play a critical role in later processing . since all high - level actions 39 inevitably affect them and are effected by them . As did the HEARSAY II system [ Reddy76 ] . Seek - Vhence operates simu1taneouslyat several levels . from the most concrete - the integers input at the terminal - through the descriptive - the hypothesis end its supporting concept descriptions - to the most abstract - the " ideal " primitive concepts . Lov - level structures support the creation of higher - level ones . and indirectly even determine the course of high - level processing . Vhen changed by high - level actions . as they inevitably are . the lover - level structures may have en unexpected effect on the higher - level ones . These reverberations . modeled on the " ripplings " among levels in HEARSAY II . are at the heart of SEEK - VHENCE ' s processing . and are necessary to cause the interplay of bottom - up and top - dovn activity required for Seek - Vhence to vork properly . During stage tvo . the hypothesis is either supported or refUted by nev evidence . Consistent verification , in the form of terms vhich support the hypothesis . vill lead the system to a confirmation of the hypothesis and the venturing of a public guess . An incorrect guess ( one that is rejected by the user ) or refUtation of the hypothesis by nev evidence vill cause the system to reformu1ate or . in rare instances . abandon the hypothesis . Hypothesis abandonment or " scrapping " . vhich is analogous to ahuman ' s " let ' s start all over again " . takes system processing back to the lover levels . This is not a total restart vi th a clean slate as though the sequence terms had never been seen . but rather a return to the term level . vi th all perceived groupings eradicated but vith accumu1ated knovledge of term samenesses and other primitive relations maintained . The major distinction betveen the tvo stages of processing is the existence of the hypothesis in stage tvo . Vithout it . the system has no model of the sequence and so cannot predict the next term to be encountered . Once a 40 hypothesis is in place , all nev evidence is " filtered " through it ( checked for agreement vi th it ) . Confirming data - nev terms that fit the hypothesis - - are handled rapidly , essentially just being " svatloved " by the system . In contrast . entry of an unexpected term makes the system " sit back and look things over " . REFORMULATION AND THE SLIPNET Changing a hypothesis is done by reformulation - - modification of the form of the hypothesis . Reformulation is accomplished by " slipping " from one Seek - Vhence concept to another . The direction of change vi . 11 be suggested by system processes , based upon the evidence gathered from that portion of the sequence already seen and guided by the " slipping knovtedge " possessed by the system . A structure called the Slipnet vhich maintains relationships among the primitive Seek - Vhence concepts - the " ideals " - - as vell as pointers to salient structures at various levels of representation . contains much of the information needed in the reformulation process and thus serves es an important reference source for the system . ReformUlation of the hypothesis causes related changes throughout the several levels of Seek - Vhence structures . changes made so that all levels of the system operate vith the same pattern structure " in mind " . These changes can in turn cause the bubbling - up or noticing of nev perceptions about the sequence , creating an important interplay among the levels . Moreover . reformUlation permits changes in the representation of concepts in order to facilitate the discovery of " structural " similarities ( similarities of form ) betveen them . Seek - Vhence cannot as yet make such discoveries . In Seek - Vhence , concept descriptions are not necessarily atomic entities ; they can be compound structures created by combining the primitive . atomic concept descriptions in simple or complicated va . ys . Thus , concepts can 41 be rele . ted because their descriptions share the same or related structural building blocks . an important feature reflecting asimilar human a . l : > ility . Ear example . ve can sense that there are similarities among : 171181191 . . . 232 242 252 . . . 10012002 3003 . . . even though the ' " face value ' " content . the actual numbers used . differs . Seek - Vhence ' s facility for making such structural similarities manifest in its concept descriptions could prove veryusefUl in the fUture for discovering analogies betveen sequence pattern concepts . 3 . PROCESSING - AND TASKS A vord a . bout processing technique is in order . In Seek - Vhence . all opere . tioru : are carried out in task series . vhich run in simule . ted parallel . The tasks comprising various series are chosen at random for processing . so no assumptions can t > e made about vhich of tvo competing tasks . vill run first . In fa . ct . the tasks in e . given series me . y vary . because any task me . y alter the environment . A particular task may create . access . or modify some data structure . me . y request information from the user . or me . y set out other tasks - place them on the taskrack vhere they vill stay until chosen and run . A biological metaphor - - thanks to Douglas Hofstadter - - is the model for this type of processing . Vi thin a cell . various enzymes are present . One of these may act upon a molecule . causing it to change in some vay . This action vill make the molecule more e . ttractive to some enzymes and less attractive to others . thus affecting the course of later ' " processing ' " in the cell . The gloms in Seek - Vhence ' s cytoplasm serve e . s molecules and the tasks as enzymes in our version of this biological model . 42 At certain times some cleaning is done ( removing old tasks of certain types ) but it is perfectly possible for an old task finally to be chosen and , vhen it runs . for it to find the Seek - Vhence vorld quite different than vhen it vas created . Such a task vill probably do nothing , because the structures on vhich it ves designed to operate no longer exist or are inaccessible to it . All tasks have " urgencies " ( integer veights ) . and more urgent tasks vill have a greater chance of being chosen than less urgent ones do . Seek - Vhence , then , depends upon order to emerge from Chaos . Small special - purpose tasks , vorking at different levels of abstraction vith no overseeing agent eventually guide the system tovard convergence upon a vorking hypothesis . 4 . STRUCTURES AND THE " " PLASMS " Like most other computer systems . Seek - Vhence relies heavily on an assortment of data structures . Already mentioned vas the hypothesis , an active formulation of the system·s current viev of the evolving patt ~ rn . Its ! over - level counterpart , the template . is a transitory . veaker . less expressive . and less nexible structure used as a first rough statement of an emerging formulation . Belov the template level are the central vorking structures of the system . namely , the glints . the gloms . and the gnoths ( pronounced " knots " . since they are used to " tie things together " ) . Briefly , glints are Seek - Vhence representations of input terms , members of the class " Glints " . The Glints form a distinguished subclass of the " G ! oms·· class . vi . th glint structures being atomic and undissolvable . Gloms are structures representing collections of adjacent glints . hierarchically grouped for a variety of reasons . " Glomming " is the process byvhich tvo or more existing gloms combine to form a nev g ! om . All g ! oms reside in the cvto1 > lasm . 43 Ve viev the Seek - Vhence vorld as consisting of three levels , vith tvo potential intermediating structures - - the hypothesis and the template . Our level . $ correspond to the Socratic vision of a " real vorld " , a Platonic " ideal vorld " . and a " perceived vorld " betveen them . At the lovest level is the ~ cytoplasm , vhich represents our " real vorld " - - representations of the input integers and relations among them . The " purest " notions , corresponding to the Seek - Vhence diagram " primitives " , are housed in ( of course ) the platoplasm _ finally . the intermediate level - our socratoplasm - houses the system·s representation of its parse of the sequence . In order to represent its parse of a target sequence . the system needed structures vi . th some permanence . so that a parse vould remain intact , yet vith the ability to interact vith each other . so that the parse could be changed at the request of higher - level processes . Gloms could not perform this parse - representation function for several reasons . first . they vere designed to combine readily vi . th each other , the combination occurring only because of " bottom - up " pressures . Secondly , vhen glomming occurs . the participants do not survive the operation . Rather , they are destroyed and a nev glom is created from their subgloms . Therefore . the system cannot attach information to gloms and rely on its being available at any fUture time . Finally , gloms cannot change their basic structure in any vay from the moment of their creation - - they cannot absorb other gloms or give avay or recombine any of their subgloms vithout themselves being destroyed . Thus . gloms are too ephemeral and unpredictable to represent a sequence parse . Our solution to the parse - representation problem vas to create a vhole nevlevel in the Seek - Vhence vorld - - the socratoplasm . or " perceived vorld " . and to populate it vith more stable structures than gloms . called " gnoths " . amenable to " top - dovn " change . Gnoths , like gloms . represent groupings of 44 gloms , but they ere more permanent and a . single gnoth can represent different glom clusters e . t different times . A gnoth can pass gloms to its neighbors , can vi . thstand reformulation of its rubgloms , and can even become e . representative of concepts different from those associated vi . th it e . t the time of its creation . The entire nature of e . gnoth may change several times during its lifetime . A gnoth ceases to exist only vhen its subglom collection is empty . ( for e . n interesting discussion of intensionality and the " meaning " of e . representation structure , see [ Hofstadter 80 ) . ) Gnoths , then , ere vhe . t the system uses to represent and restructure its current viev of the sequence . They live in the socratoplasm , the middle level of Seek - Vhence structures , and serve as bridges among the gloms , the hypothesis , and the " ideal notions " of the ple . toplasm [ see figure 1 ) . I HYPOTHESIS Gnalhs Boxes Printstructures PLATOPLASM TEMPLATE CYTOPLASM Ideal - repeaters Ideal - groups Ideals - seen GI oms GI ints Sparks Bonds figure 1 - The Seek - Vhence vorld THE PLATOPLASM AND IDEALS As noted above . the platoplasm is the home of the " pure Platonic notions " or " ideals " of the Seek - Vhence system . These include idealized versions ( " types " . if you vill ) of the input integers ( " tokens " represented in the cytoplasm ) . the grouping structures knovn a priori , and some relations among them . Ideals are connected to the " real vorld " or cytoplasm through manifestation links and to the " perceived vorld " or socratoplasm through actualization links . For example , if the system groups three 2 ' s , the glom representing this grouping in the cytoplasm becomes a " manifestation " of the ideal sameness notion ( called " C - group " ) . If the glom is also crucial to the system ' s hypothesis for the sequence and so has a gnoth devoted to it . that gnoth becomes an " actualization " of the ideal [ see Figure 2 ] . HYPOTHESIS PLATOPLASM I SOCRATOPLASM Ideal - groups C - group Gnolh·s : . . , ~ ~ - - - - ~ \ : : : : : ; ; : : : ~ ~ - - ~ ~ . actu . alization . . . . . . . . . . " . TEMPLATE . , ·· . . pseudo - ·· . . . . . . glom · . . . . . , CYTOPLASM figure 2 - - Some links l > etveen plasms 46 THE SOCR . ATOPL . ASM AND PERCEPTIONS The socratoplasm is a vorking area end sometime battleground betveen the cytoplasm end the ple . toplasm . Its most important structures are the gnoths ( from " gnothi see . uton " , the motto - " knov thyself ' " - or the Socratic school or philosophy ) , roughly the socrato - level equivalents of the cytoplasm ' s gloms . Hovever , vhereas the hellmark or gloms is their ephemerel nature , their proclivity to combine and split , the main fUnction of gnoths is to capture the current " viev " - parse or parenthesization - of the sequence . The first gnoths are created contemporaneously vith the first hypothesis and reflect its pattern description . Erom then on . gnoths must elvays be in agreement vith the hypothesis ( as described later in our sections on gnoth - hypothesis equivalence ) . Thus , gnoths are not as free as gloms to rim . ply combine at vill . They feel the " top - dovn " pressure of the hypothesis as vell es the " bottom - up " pressure coming from lover - level activities . Conflicts betveen these pressures must be resolved through the gnoths . Each gnoth hes a collection of subgloms from vhich it derives its structure . its viev of the sequence . . Any change to the gnoth ' s structure is realized by changing the subglom collection . Much bubbling and pushing - up of groupings goes on in the cytoplasm . The requirement of conforming to the current hypothesis , vith the related subsequent dovnvard pushing and glom destruction . is added in the socratoplasm . ReformUlation is imi ; > lemented . el . so to be reflected in cyto - level activity . Mindlessness ceases here . THE CYTOPLASM AND GLIMMERINGS The cytoi ; > lasm is the bottom level of the Seek - Vhence system . All changes to higher - level structures filter dovn here , are reflected here , and cause reactions vhich may " bubble U ! ? . . nev structures . All processing here is 47 automatic and myopic - no global Vievs of the sequence are maintained . Any nev structures , such as a neVl y - formed glom . or the glint made vhen e . nev term is entered , are immedie . tel y made centers of interest called active foci end heightened actiVity takes place around them . The main goal of this level is to hit upon a pattern of gloms vhich can l > e taken as e . template for the sequence . Once a template is in place , a " cap " is , in effect placed over the the top - level gloms to prevent their disappearance . This cap is in the form of a pseudo - glom a glom that has subgloms but that is inert unable to interact vi th other gloms . Vhen such a cap is in place , nev terms ' glints still l > ond and even glom vith other gloms but no changes that contradict the template can l > e me . de . Should a nev term not fit the template , a reviev is begun vhich may lead to template modification or destruction . If , meanvhile , the template has caused the formation of a hypothesis , . nev terms are filtered through the hypothesis rather than the template , and ·the template is Virtually al > andoned in deference to the more malleable , more expressive structure . The filtering process , l > y vhich nev terms are checked for consistency vith the hypothesis . can question the hypothesis ' validity . This . in turn . can cause gnoth changes vhich may precipitate glom - . template - . and even hypothesis - modification or rejection . 5 . SUMMARY In summary , Seek - Vhence is a program vhich attempts to discover and represent rules underlying nonme . thematicel sequences of nonnegative integers . It is not e . lve . ys successfUl . Vhen it is successfUl , the complex l > ut subliminal first stage of processing develops e . hypothesis , e . n encapsutation of the perceived underlying pattern . The hypothesis is represented in such a ve . y as to me . ke the reformUlation often found necessary in the second stage of 48 processing not only possible but also simple to carry out in many cases . Processing occurs in simUlated parallel on several levels of abstraction at once . . At the lovest level of the Seek - Vhence vorld . the cytoplasm . glimmerings of grouping - ideas ( glom . s ) derived from comparisons among the system ' s representation of the input terms ( glints ) are " pushed up· to l > e recognized es perceptions ( gnoths ) in the socratoplesm . the middle level . Recognition of usefUl cyto - groupings is aided by reference to the ideal notions of the platoplesm . the most abstract level . Suggestions continually l > ul > l > le up , either to l > e pushed up f \ lrther or to l > e rejected , sent ! > ~ ck dovn . The interplay of bottom - up and top - dovn processing is central to the system ' s fUnctioning . C . SEEK - VHENCE IN DETAIL 1 . THE PL . A TOP USM - ABSTRACT NOT IONS Currently , the platoplesm houses the ideal types - the primitive . l > Uilt - in notions available to the system for use in constructing its viev of a sequence . These can be seen es its vocabulary for the veil - structured " phrases " it constructs . Nev notions . the nevty - constructed phrases . may eventually come to l > e housed in the platoplesm es first - class citizens . Ve are developing a netvork of relations among the ideal types to aid the system ' s reformUlation efforts . ATOMIC IDEAL TYPES The ideol - atoms are Seek - Vhence analogues to the integers entered at the keyboard . An ideal - atom hes predecessor and successor Vol . ues . its ovn Velue . and manifestations in the cytoplasm . for example . the " idea15 " hes predecessor " ideol . 4 " and successor " ideal6 " , vhile " idealO " hes no predecessor 49 t > ut has " idee . 11 " as successor . Glints ere certainly manifestations ( cytoplasm - level instances ) of these ideals , because they are the system ' s representations of the terms of the sequence . For example , in the sequence fragment " 5 O 5 " , the first and last terms are manifestations of idee . 15 . vhile the middle term is a manifestation of idealO . Certain other integer - valued quantities . such es group length , may also be important to the development of a good representation of a given sequence pattern . and so should also be vieved as manifestations . For example . the length of the group " ( 4 4 4 4 4 ) " might prove to be an important manifestation of ideal5 . In the current version of the system . hovever . only glints are referenced as manifestations of ideal atoms - a simplifying ( and vee . kening ) design decision . In the f \ lture , ve hope to address the problem of vhat other quantities should be vieved as manifestations and under vhat circumstances they become important . NON - ATOMIC IDEAL TYPES There ere eight non - atomic ideal types . each of vhich is associated vi th a format having one or more active parameters : ( typenam . e start - value length actual - value ) . In our descriptions , optional parameters vhich have been inclUded ' Vill be given in brackets ( " [ ] ' ' ) . In each of the examples belov , ve shov a fQrm . an instantiation of the given format . When such a form is queried - - or " hit " , as ve say - it returns a value . The results of successive hits are shovn on separate lines . Note that these types and their formats correspond quite closely ( but not exactly ) to the Seek - Whence diagram primitives introduced in Chapter One . 50 Constant - - - a structure that always returns one value , its argument , vhen queried . format : ( Constant arg ) examples : ( Constant 3 ) - - - > 3 - - - > 3 - - - > 3 etc . Countup - - - a structure that returns nonnegative integers in succession , starting vi . th its argument , vhen queried . format : ( Countup n ) examples : ( Countup 3 ) - - - > 3 - - - > 4 - - - > 5 etc . ( Countup 8 ) - - - > 8 - - - > 9 - - - > 10 etc . 51 C - group ( Copy - group ) - - - a structure that returns anuml : > er of copies of a given argument . format : ( C - group start length ) examples : ( C - group 2 3 ) - > ( 2 2 2 ) - > ( 2 2 2 ) etc . ( C - group ( Countup l ) 2 ) - > ( l l ) - > ( 2 2 ) - - > ( 3 3 ) etc . S - group ( Successor - group ) - - - a structure that returns a given - length run of successive integers , starting ~ th a given value . format : ( S - group start length ) examples : ( S - group 2 3 ) - - > ( 2 3 4 ) - > ( 2 3 4 ) etc . ( S - group 5 4 ) - - > ( 5 6 7 8 ) - - > ( 5678 ) etc . ( S - group ( Countup l ) 2 ) - > ( l 2 ) - > ( 2 3 ) - - > ( 3 4 ) etc . 52 P - group ( Predecessor group ) - - e . structure that returns a given - length dovn " " ' 8rd progression of nonnegative integers . starting vi . the . given value . format : examples : ( P - group start length ) ( P - group 8 4 ) - > ( 8 7 6 5 ) - - > ( 8 7 6 5 ) etc . ( P - group 2 4 ) - - > undefined ( ' Wuld run to negative numbers ) . Y - grow ( Symmetry group ) - - - a structure that returns a given group of nonnegative integers , symmetric about the center . format : ( Y - group [ start ] [ length ] actual ) examples : ( Y - group 1 5 ( 1 8 3 8 l ) ) - - > ( 1 8 3 8 1 ) - - > ( 1 8 3 8 1 ) etc . ( Y - group ( ( Countup 1 ) 8 ( Countup 1 ) ) ) - - > ( 1 8 1 ) - - > ( 2 8 2 ) - - > ( 3 8 3 ) etc . 53 ~ a structure that cycles through its actual parem . eter ' s value . returning one top - level element each time queried . format : ( Cycle actual ) exem . ples : ( Cycle ( 2 1 8 ) ) - - > 2 - > 1 - > 8 - - > 2 - - > 1 etc . ( Cycle ( 3 ( Countup 1 ) ) ) - - > 3 - - > 1 - - > 3 - - > 2 - - > 3 - - > 3 - - > 3 - - > 4 etc . ~ - a structure that returns its actual parameter ' s value each time queried . format : ( Tuple actual ) examples : ( Tuple ( 184 ) ) - - > ( 184 ) - - > ( 1 8 4 ) etc . 54 ( Tuple ( 2 2 ) ) - - - > ( 2 2 ) - - - > ( 2 2 ) etc . THE HIERARCHY OF IDEAL TYPES These non - atomic ideal - types ( or Platonic classes ) fall into a hierarchy of categories . each of vhich captures an important organizing notion for the Seek - Vhence 17tlrld . The realizatio . ns of the types at different levels of the system have differing attributes but alvays reflect this basic organization . Briefly , the categories can be distinguished es follovs : repeater type - These are one - parameter generate types ; given the single parameter ( and the state ) . the next value can be generated . memt > ers : Constant . Countup generate type - Given a typename and the start and length parameters ( e . g . . ( C - group 1 3 ) ) . the actual value ( e . g . • ( 1 11 ) ) can be generated by the associated " ' generating ! Unction " ' . . Any generate type possesses a process es described belov . members : C - group . S - group . P - group process type - - Possesses a " process " , a method of determining vhether or not some actual group is a representative of the class vithout reference to any information external to the group and the class in question . member : Y - group fence type - - Has no generator . no process ; Virtually any collection of neighboring terms can be called a group by Virtue of these types . Typically , such groups exist because of external pressure from neighboring terms or groups rather than internal 55 cohesion . In effect . the terms are " " fenced off . . into e . group by their neighbors . members : Cycle , Tuple At the bottom of the hierarchy are the fence types . the least restrictive types . The ne . me derives from the fact that groups are usually identified as being of this type vhen the system : 1 ) cannot classify them as being higher - level types and 2 ) can set up e . " fence " , identifying the group as e . group . For example , in the parsed sequence 1 5 8 3 2 5 8 3 3 5 8 3 4 5 8 3 . . . , the terms " 5 8 3· are grouped , not because of any mutue . 1 attraction or shared characteristic , but simply because of the interleaved 1 , 2 . 3 • . . . and the re . ct that the group repeats . It is important to note that in order to see the repetition of the group , it is necessary to identify it as a group , and such recognition of repetition in effect confirms the budding notion the . t e . group is there to be found . The group vould probably be represented as " ( Tuple ( 5 8 3 ) ) " . An entire sequence can have a fence - type representation : 4 7 4 7 . . . can be represented as ( Cycle ( 4 7 ) ) . vith an understood repetition . At the next - highest level of the hi er arch y are the process types . The only entry here is Y - group , a symmetry group . The characteristic of this class is the . tit possesses e . " process " , a method for identifying representatives of the class , if not for generating them . The form " CY - group 1 5 ) " , e . Y - group of length 5 starting vith a 1 ( ve have given this form the optional start and length pare . meters ) . is not sufficient to generate a unique symmetry group , but is sufficient to determine that ( 1 7 4 7 1 ) is such a Y - group vhereas ( 1 8 2 5 1 ) . ( 1 7 1 ) . and ( 2 O O O 1 ) are not . The generate types , the next - highest in our hierarchy , can use tvo 56 parameters . the starting value and length . to generate e . particuJ . ar grouping representative of the given type . Eor example . ( C - group 1 5 ) < - > ( 11111 ) . e . constant group of five 1 ' s ; ( S - group 2 ' 3 ) < - > ( 2 ' 3 4 ) . e . successorship group of length three . starting vith 2 ; ( P - group 9 4 ) < - > ( 9 8 7 6 ) . e . predecessorship group of length four starting e . t 9 . Ee . ch repeater type takes one parameter . The form " ( Constant Z ) " represents e . structure that e . lvays returns Z e . s its value . vhile " ( Countup ' . 3 ) " represents e . structure the . t e . l vays returns a ' . 3 upon first request . then a 4 . a 5 . and so on . COMBINING IDEALS Ideal types can l > e combined to create structures vhich ence . psuJ . ate fairlyintrice . te patterns . In the examples l > elov , ee . ch line again represents one hit of the given form . Shared structures e . re indicated l > y the \ i ' Ord " shared " . vi . th an e . rrov pointing to the first instance of the structure to l > e shared . ( S - group 1 ( Countup 2 ) ) - - > 1 Z - - > 1 z J - - > 1 z J 4 etc . . thus giving the sequence : 1212 ' 312 ' 34 . . . ( C - group ( S - group 1 ( Countup 1 ) ; 2 ) - - > ( 11 ) - > ( ( 1 2 ) ( 1 2 ) ) - - > ( ( 1 2 ' 3 ) ( 1 2 ' 3 ) ) etc . • giving : 11121212 ' 312 ' 3 . . . ~ ( Cycle ( 8 ( Countup 1 ) shared ) ) - - > 8 - - > 1 - - > 2 giving : 8128 ' 34856 . . . ( Tuple ( 2 ( Countup 1 ) 2 ) ) - - > 2 I 2 - - > 2 2 2 - - > 2 . , 2 etc . . giving : 212222232242252 . . . - - > 8 - - > . , - > 4 etc . • 58 ~ ( Tuple ( 2 ( Countup 1 ) shared ) ) - - > 2 I 2 - - > 2 2 2 - - > 2 3 2 etc . • giving : 212222232242252 . . . The difference l > etveen the latter tvo representations is subtle but can be important . In the lest one . the sameness of the " bracketing " 2 ' s is made explicit . Notice hov this can effect generalizations of the sequence : ( Tuple ( 5 ( Countup 1 ) 2 ) ) is a possible generalization of the first representation because the ! > racketing integers are seen es distinct . having no necessary sameness . Querying it three times vill give us : - - > 5 1 2 - - > 5 2 2 - - > 5 3 2 etc . . In the second form . ve generalize to 5 as follovs : - - - - - - - - ( Tuple ( 5 ( Countup 1 ) shared ) ) - - > 51 5 - - > 5 2 5 - - > 5 3 5 etc . . The ability to combine the Platonic notions as demonstrated gives the system the flexibility and expressive paver needed to model sequence patterns and create a hypothesis . 59 2 . THE HYPOTHESIS The major goal of the Seek - Vhence system is to formulate a hypothesis - a strUCture that descrit > es e . nd can extrapolate the perceived pattern . The hypothesis . vhich is derived from the information at hand - the sequence terms seen and any relationships the program he . s t > een able to establish among them - is expressed in terms of the Platonic classes descrit > ed above . for example , 1 1 2 1 2 3 1 2 3 4 can t > e expressed e . s the form : ( S - group 1 ( Countup 1 ) ) , vhile 2 1 2 2 2 3 2 4 . . . can t > e expressed e . s the form : ( Cycle ( 2 ( Countup 1 ) ) ) . Should ah ypothesis fail to predict properly , the tendency of Seek - Vhence vill t > e : a ) to generalize pare . meters , maintaining the Platonic class structure ; t > ) to slip to a less strict class ( " vertical " slippage ) or to a related class ( " lateral " slippage ) . In the fUture , the system vill have an implicit imperative to modify the hypothesis so that in all instances the strictest appropriate class is used in the representation . For example , vhile ··1 1 1 " can t > e vieved e . s a Tuple , it is also a C - group e . nd should generally t > e so characterized . There are of course times vhen " 1 1 1 " should t > e vieved e . s a Tuple ; for this reason there vill t > e no prohit > ition age . inst doing so , but it is very unlikely to be the first vievadopted . Both generalization and specification are required in Seek - Vhence and both require knoVledge of the grouping types described above and any relations among the Platonic types . Such relations vi11 t > e stored in the platoplasm e . s " Ideal - relations " and vi11 include lateral . links ( t > etveen C - group 60 and S - group . say . for " groups " of length one ) as veil as vertical ones ( as l > etveen Countup end S - group ) in the plato - class hiere . rchy . 3 . THE CYTOPLASM - THE BASE The cytoplasm has the role or " reel vorld " in our ' ' Socratic model· . in vhich the platoplesm houses the ane ! ogues of Plato ' s Ideals and the socratoplasm is the analogue or Socrates ' " perceived vorld " . It houses the lovest - level structures in the system - - the sparks . l > onds . glints and gloms - and is the site of much upverd - thrusting . rele . tivelyuncritical activity . Suggestions for pattern formulation t > ul > l > le up from cytoplasm - level ( hereinafter shortened to " cyto - level " ) activity to l > e tested at higher . more " cognitive " levels . Ve believe that the prol > al > ilistic . undirected cyto - 1eve1 activity mimics lov - 1eve1 human perception processes to some extent . Groupings e . re continUally l > eing generated and regenerated at this level . Just as people cannot prevent themselves from reinventing an idea . reperceiving e . pattern . or reperforming an action . l > ut compensate for such repetition l > y an ability to notice that they e . re cycling or looping in their behavior . ve vi1l leave it to higher - level processes to notice e . nd handle eny unproductive looping in cyto - level activity . The cyto - level shoUld l > oml > ard the upper levels ' Vith suggestions . noted simile . rities . and groupings or terms . It is up to the processes al > ove to curl > this enthusiasm and to consider the suggestions more carefUllyand critice ! ly . CYTO - LEVEL STRUCTURES The four date . types residing in the cytoplasm are Spe . rks . Bonds . Glints . and Gloms . The former tvo classes e . re for finding . proposing . and later eve ! uating glom groupings . The latter tvo classes . the Glints and Gloms . are 61 used for representing the sequence terms and any term groupings of current interest . GLINTS AND GLOMS In Seek - Vhence , glints ere the cyto - level representations of the integers entered e . t the keyboerd . Ee . ch glint is e . structure vi . th severe . l fields : cle . ss , ne . me , print - velue , position , span , pred ( or left - nbr ) , succ ( or right - nbr ) , and bonds - in , the le . st one being optional . Eor example , if the terms . . l z 2 r had been entered , the second 2 might be represented e . s follovs : cle . ss : Glints ne . me : glint3 print - velue : 2 position : 3 span : l left - nbr : glintZ right - nbr : glint4 The . . span . . field is really unnecessary in glints . but is a consequence of the fact that the Glints cle . ss is a subclass of the Gloms . It indicates that this glom . is of length l . This glinfs left - nbr . its neighbor to the left , vould be the glint representing the preceding 2 . called . . glintZ . . here . Similarly , its right - nbr . its neighbor to the ria ; ht . vould be the glint representing the succeeding 3 . The other fields ere self - explanatory . Vhen e . sequence term is entered . the system creates e . glint for it and then lists that glint e . s e . manifestation , or cyto - level analogue , of the appropriate ideal - atom . in the platoplasm . In our example , glint ) vould become a manifestation of idealZ because its value is 2 and it represents an input integer . 62 The glint is then examined by cyto - level tasks as described belov to determine hov it is related to other cyto - level structures . The class " Glints " is e . distinguished subclass of the class " Gloms " . Ee . ch glint is indestructible - an " atomic " glom . Non - glint gloms are cohesive units , me . de of adjacent atoms bound by " bonds " of one type or another . It should be noted that chains of atoms linked by bonds e . re not necess ~ ily converted to gloms ; some bond types ( e . g . , one indicating the . t gloms ( 8 1 4 ) and ( 1 2 3 ) e . re of the same length ) e . re generally not considered strong enough to cause glomming , but e . re facts of note preserved for use by higher - level processes . Non - glint gloms he . ve es fields : class , name , type , print - ve . lue , start - position , span , positions - covered , sut > gloms . structure . and bonds - in . The lest tvo e . re optional , and are filled in vhen appropriate by cyto - level processes . For example . in the sequence segment " 8 2 2 2 8 " , the three 2 ' s might be represented jointlye . s e . glom , as follo ~ : class : Glom : name : glom7 type : ( Se . me print - value group ) print - value : ( 2 2 2 ) start - position : 2 span : 3 positions - covered : ( 2 4 ) subgloms : ( glint2 glint3 glint4 ) Such gloms e . re ephemeral and can disappear e . t any time . Disappearance by dissolVing ( being destroyed e . s a unit . but vith e . 11 rubgloms surviving intact ) , burstjng : ( being destroyed e . s e . unit and having e . 11 non - glint subgloms burst e . s vell - - leaving only the underlying glints ) , or glomming ( being combined vith another glom ) is fluid and continUe . 1 . The cytoplasm might be vieved e . s a soup 63 bubbling vith gloms , the bubbles vhich rise to the top being the system ' s current viev of the sequence . If neighboring bubbles have enough mutual attraction ( strong enough bonds ) theyvill combine ; othervise theyvill either exist independently or burst to permit nev bubbles to take their place . BONDmG AND GLOMMING The identification end creation of usefUl gloms is the primary fUnction of the tasks operating at the cytoplasm level . To see hov this is done , ve mi . 1st stert at the bottom end follov the process of " pushing up " gloms . SPARKS AND BONDS Sperks e . nd Bonds , tvo more cyto - level classes ( the others being the Glints end Gloms discussed above ) , are used during the eerly stages of group discovery . A spark is created betveen tvo gloms vhen a Sparkler task pulls those gloms at re . ndom from the cytoplasm end determines in a very cursory vay that the tvo structures might be amenable to bonding . The Sparkler simply looks for gloms that ere not subgloms of each other . It does not look for en y common features - - this is the vork of other tasks . For example . the glints " l " e . nd " 1 ··might very vell be bondable , since they have the same print - value . Gloms " ( l 2 ) " and " ( 1 2 ) " might be bondable for the same reason , or because they have the same ··span " ( length in sequence terms covered ) . The glint " l " might be bonded to the glom " ( 2 ' 3 ) " by reason of adjacent successorship - - 2 is the successor of l , and the structures in question are adjacent . Hovever . no glom cen be bonded to one of its O " { ( l ' l . subgloms , so the glom " ( 1 ( 1 1 ) ) " cannot be bonded to the subglom " ( l I ) " in any vay . 64 BEYOND SPARKLING Vhen a spark is created betveen two glow , a horde of ' " Testers " is placed on the taskrack . Vhen invoked ( chosen to run ) at some later time . each Tester chooses some spark : , not necessarily the one vhose creation cawed the tester ' s creation . The spark ' s members ( the tvo gloms betveen vhich the spark is flying ) are tested to ascertain if ' they are currently in existence ( recel . 1 that gloms are ephemeral ) . If ' both glow exist . their bond - fields - the characteristics such as print - Value or spen vhich e . re important enough to be used as a rationale for l : > onding - - are intersected , and these fields ' Values are tested for similarities . The system uses several types of ' bonds - sameness . successorship , predecessorship , adjacency , end meeting ( e . g . , " ( 8 1 4 ) " end " ( 4 7 ) " " meet " at 4 ) - grouped into families . to link : gloms . The most important of ' these e . re . not surprising ! y , sameness end successor - predecessorship . If ' a bonding test is passed , a " Bonder " task is created vi th the intent of ' performing the actUe . 1 bonding . One Bonder task vill be created for each bon ~ ng test passed by the tvo gloms . so several Bonders might actUe . lly be created for any given glom pair . For example . gloms " ( 1 2 ) " " and " ( 1 2 ) " might engender l : > oth " same print - Value " end " same span " Bonders . BONDING Vhen invoked , a Bonder 1 ) checks to see that both glow still exist . and 2 ) checks to see that they are not already bonded in this vay . If ' these conditions e . re satisfied . then the Bonder creates a Bond - class structure . vhich ve refer to simply as a ~ . This bond . vhich exists in the cytoplasm . links the tvo glow end has a strength associated vi th it . Bond strength is derived from the l : > ond type ( e . g . , " sameness " ) , enybond modifiers ( adjacent 65 terms are more strongly bonded than non - adjacent ones . for example ) and the glom characteristic ( e . g . , " print - value " ) that is the subject of the bond . Creation of a bond causes the release of more Sparklers . stimUlating the system to carry out more lov - level search and bond creation . and causes the release of some Glom - scouts - tasks designed to look for and push up glom groupings . GLOMMING Bonds are created in order to provide some basis for the grouping of sequence terms ( glints ) and term groups ( gloms ) . The act of bonding simply reflects the fact that tvo gloms are related in some ve . y . Glomming , hovever . is performed only vhen the bonds among tvo or more gloms are sufficiently strong that the system shoUld viev the items comprising the bond - chain as a unit . The system distinguishes betveen the " bond - fields " of a glom and its " glom - fields " . Bond - field $ are those characteristics ofgloms that are to be compared - for the purpose of bonding . Typically , the print - value and span are usefUl bond - fields . Thus . tvo gloms such as " ' ( l 2 3 ) " and " ( 7 8 9 ) " or " ( 1 2 3 ) " and " ( 8 1 4 ) " vill genere . lly be bonded . But . although knoVledge of the fact that tvo gloms have the same span is " interesting " , it is generally not compelling enough to varrant glomming them in and of itself . In an early version of this system . ve did auov such gloms . The resUlt vas a plethora of uninteresting gloms that seemed to get in the vay of the system ' s real vork . In fact . this vas one of the main reasons for introducing the ' ' bond - field " / " glom field " distinction . Glom - fields are the glom characteristics that are important enough to use for glomming purposes . Only print - value is used as a glom - field in the current system . The system can make chosen glom characteristics more salient by designating them as bond - qelds or glom - fields , or less salient by removing these designations ; in practice this ability is not yet used . 66 As vas noted earlier . l > ond creation causes the release ofGlom - scouts onto the taskrack . These tasks look for glommable bond - chains . They also serve to introduce e . good example of a terraced scan in Seek - Vhence . The tasks introduced betveen this point in the dissertation and our discussion of ' " Plato - evaluator ' " tasks perform . increasingly extensive tests on target gloms . screening the gloms as potential representatives of various Platonic classes . If a glom . passes one test . it is targeted for fUrther eve . luatiop . Should a glom fail a test . it may be re - evaluated by other tasks . Glom . s that are not discerne . l > ly Platonic are either ignored or destroyed . Vhen invoked . a Glom - scout chooses a cyto - elem . ent ( a glint or glom vhich is not a subglom of any other glom ) and attempts to group it vi . th its neighbors . Actually , three auicktests tests are made for anybond - femilyin vhich the glom . is involved : 1 ) is it group able ? ( bonded to any neighbors in this ve . y ? ) 2 ) is it coverable ? ( bonded into asymmetry group ? ) J ) is it fenceable ? ( are there remote gloms to vhich it is bonded ? ) Note that these tests are the precursors of the plato - level notions of generate . process . and fence classes . Any tests passed cause creation of aGlomtester task to make a more extensive test of the glom . The Glomtester ' s veight ( urgency ) is dependent on the test ( ' " groupable ' " being strongest ) and the bond - type involved ( sameness being stronger than successorship . and so on ) . For example . if the terms " l 6 6 5 2 " have been entered . the system may notice several relationships among various terms . The tw neighboring e·s might be seen as a budding " sameness group " because of their adjacent sameness . Hovever . the remote successorship betveen the 1 and the 2 might also be noted and used to propose a ' " successorship fence ' " group . one that wu1d separate the given segment into gloms " ( 166 5 ) ' " and " ( 2 ) " . Such groupings are potentially very important 67 especiell y if the sequence is : 1885 2885 3885 or the like . but are not as immediate ! y compelling as such groupings es the pair of S ' s . Therefore . aGlomtester for a sameness group is given a higher veight then a predecessor fence Glomtester . The system is thus biased tove . rd noticing certain similarities first . yet it is not compelled to do so . Vhen invoked . a Glomtester task must first l > e certain that the glom it is supposed to test is still in the cytoplasm . If so . it must then determine the extent of the evolving glom . The thrust here is to get maximally - sized gloms . for example . 1 ) in " 2 1 1 l r . vi . th the second " l " targeted and " sameness " the bond - type , the Glomtester voUld suggest that " 1 11 " be grouped . 2 ) in " 9 l 2 5 9 " , vi . th the first " 9 " targeted end " fence " the reason . " 9 1 2 5 " voUld be suggested . 3 ) in " 5 3 1 6 1 3 4 " . vi th " 6 " ·targeted and " symmetry " the reason . " 3 1 6 1 3 " voUld be suggested . 4 ) in " 123 2 3 " . vi . th the first " 2 " the target and the " pred - succ " bond family the reason . " l 2 3 2 3 " vould be suggested . The Glomtester either rejects the group as a glom or creates a Glommer task to refine the group and perform the final glomming . Vhen invoked . the Glommer vi . 11 do a bit of " bookkeeping " . It creates the nev glom and makes it an active focus - - a site of increased system activity . It also creates aGlom - inspector task to continue pushing the glom up to higher levels . 68 4 . PLATO - CYTO RELATIONS The Seek - Vhence system has an imperative to find analogues of its plato - classes . At the lov levels of processing discussed thus far in this dissertation . that drive has been realized . in a procedural and uncritical vay . by the nature of the system ' s tasks . Above these levels . some declarative ! cnoVledge is used ; some manifest reference is made directly to the ideal - types to begin . if not rejecting gloms . then favoring those that seem the purest analogues of the ideals . Vhen found . these special gloms vill be " dubbed " . All others vill be put on a track tovards destruction . Plato - scouts perform the first step in this process . A Glom - inspector determines vhich . if any . plato - classes might find the given glom " interesting " - vhich classes might possibly consider . it a " manifestation " of themselves . If there are any such classes . the Glom - inspector then creates a Plato - scout task . giving it the a ; lom in question and the names of the " interested " ( candidate ) plato - classes . If the glom still exists vhen the Plato - scout is invoked , the scout begins its vork . During the glomming stage . maxim . ally - sized groups of gloms - all " chains " that consist of gloms related to their neighbors by some element of a bond family - are collected . Eor example . " 1 Z J Z J " could be a " pred - succ - family " glom . The Plato - scout stage vill novfocus on " purifying " these groups . Recall that all but the fence - type plato - classes ( Tuple and Cycle ) possess a " process " - - afUnction vhich . vhen given anumber string . determines vhether or not the string is an instantiation of the class . A Plato - scout is given a glom and a list of candidate plate - classes . It applies the process ! ' Unction for each candidate class to the glom ' s print - value . If the glom passes the test then the glom is pure and vi . 11 be dubbed a manifestation of the candidate class . A 69 glom can be dubbed more than once . The glom " ( 1 1 1 ) " . for example , might be dubbed as both e . C - group ( " copy - group " ) and a Y - group ( " $ ' flll . ! D . etry - group " ) . If the plate - class is e . fence type ( and so has no process ) . and if the glom is " fiat " - - has only glints as subgloms - - a " pass by default " occurs . This permits flat potential Tuple and Cycle gloms to be dubbed as such . Any glom that does not pass even one of its process tests is cause for the creation of e . Plato - eVe . lue . tor task . Vhen invoked . the Ple . to - eVe . lue . torexemines the glom e . bit further , looking for dubbable gloms of secondary purity ( non - flat ) and for pure subcollections cf gloms within the proposed target glom . Thus " 12 3 2 3 " might " Wll be sent to aPlato - eVe . lue . tor . vhich might break it into the tvo pure successorship groups " 1 2 T and ' ' 2 3 " , e . nd send on the gloms for these tvo groups to be dubbed . If the Plato - eVe . lue . tor has no success and the glom has not already been dubbed as a manifestation of some other platotype , the scene is set for its destruction . A Burster task is created to destroy the glom and all its non - glint subgloms . DUBBING THE PURE If some glom is deemed " pure . . by a Plato - scout , the Plato - scout calls for the glom to be " dubbed " . This is a tvo - step process : 1 ) the glom ' s structure field is modified to indicate e . ) nev structure : ( platotype [ start - val ] [ length ] [ value ] ) e g . . ( C - group 1 3 ) or ( Cycle ( 2 9 8 1 ) ) b ) purity : pure < - > an exact manifestation ; flat ; e . g . , ( 1 1 1 ) secondary < - - > not flat ; e . g . , ( ( 1 5 ) ( 1 5 ) ( 1 5 ) ) 2 ) the Platonic ideal has this glom added to its list of manifestations . Dubbing causes creation of a Template - scout process , indicating that the glom is strong enough to verrant a check to determine vhether or not its 70 structure , as described in the structure field added during dubbing , might yield a pattern for the entire sequence . Those gloms the . t do not pass e . ny of the tests lee . ding to dubbing are targeted for destruction by a Burster or a Dissolver task . . A . Dissolver is a task that destroys a glom . lee . ving its highest - level rubgloms to noe . t independently in the cytoplasm . For exemple . if the glom . " ( ( l 1 ) ( 2 2 ) ) " vere to l > e dissolved . the underlying gloms " ( l 1 ) " e . nd " ( 2 2 ) " vould survive . but vould . of course . no longer l > e glommed vith each other . . A . Burster task is even more destructive of glom structure . If a Burster vere set on the glom " ( ( 1 1 ) ( 2 2 ) ) " , e . 11 levels of glomming vould be destroyed , leaving only the glints " l " , " l • . " 2 " , " 2 " in the cytoplasm . Once a Burster or Dissolver has been created on aglom . the 1tlom ' s only escape route is to become invisible in the cytoplasm by glomming vith another glom . Thus . after reaching the point of peruse . 1 by a Ple . to - evalue . tor . a glom vill either e . ) be dubbed ; b ) be destroyed e . nd have some sut > gloms dubbed ; or c ) be targeted for destruction . The Plato - evaluator cree . tes no other tasks . Our terraced scan has come to e . n end . 5 . REVIEV AND PREVIEV Thus far in this thesis ve he . ve discussed e . 11 the major cyto - level tasks e . nd structures . Before moving on toe . discussion of other levels . it might be vell to get an overviev of vhe . t remains e . nd hov it relates to vhe . t ve he . ve already done . Vhen people vork on sequence or Bonge . rd problems . they usue . 11 y progress through severe . 1 stages . At first . they see and recognize nev terms as the terms are revee . led . Then they me . ke linkages betveen nev e . nd previously - encountered terms . and begin to me . ke tentative groupings of terms 71 in an effort to " come up vi th something " . This essentielly data - driven activity is modeled in the cyto - 1eve1 processing that ve have just discussed . Actual . terms and reel , undispute . 1 > 1e relationships ( e . g . . " adjacent successor " ) are used as the basis for creating , rather haphazardly and nondeterm . inisticelly . the ephemeral structures . " held tremblingly in the hand " , knovn to See . k - Vhence as " g1om . s " . The next step in human sequence - solution activity is to answer the question . " Vhat is it I ' ve seen ? " , or better still . " Vhat is it I t1tink I ' ve seen ? " . The corresponding processing level of Seek - Vhence , the template level makes a similar attempt to realize or identify vhat the system . " perceives " that it has seen . In the process of doing this , it tries to create a " template " for the sequence - a first rough approximation of the developing sequence pattern - description . This is a stage vhere ve try " to get a handle " on the pattern for internel processing purposes . People operating at this stage vil1 often say something like , " Ve . it - I think I ' ve got it . . . no . maybe not . " The description is a tentative one , not believed too firm1 y , but nonetheless a sort of crystallization of current perception . The happiest possible outcome from . this stage is a parenthesization of the sequence in accord vi th the developing and nov more firm1 y held and more explicit pattern description . In Seek : - Vhence , this happy outcome means the creation of a hypothesis - the m . ore - firm1y - he1d description - and the creation of gnoths - the parenthesization . A Seek - Vhence hypothesis is the closest analogue the system has to a verbalization of the sequence pattern . A hum . an sequence solver . perhaps after one or more false starts , vil1 eventually announce triumphantly , " I think I ' ve got it ! " . At this point , or certainly by the time the description is verbalized , the subject ' s pattern description has probe . 1 > 1ycrysta11ized completely . This description is ( usually ) firmly held , is predictive , and can be communicated clearly to others - either by some encapsulation method ( e . g . , " three 1 ' sand a 72 2 " ) or by reciting the terms in a patterned or sing - song manner . Seek - Vhence hypotheses ( vhich are described in detail later in this paper ) have similar features : the system has not yet l > egun to sing them . though . As mentioned earlier . w vievthe gnoths - collectively . our parenthesization or the sequence - as existing in a place " f / ' e ce . 11 the " socratople . sm " . somevhere betwen the " reel vorld " of the cytoplasm and the " ideal vorld " of the platoplasm . If w viev the cytoplasm as data - driven and its structures as " real " . and the platople . sm as theory - driven vith " ideal " structures , then the socratoplasm is vhat w vill call " perception - driven - and its structures " perceived " . In the socratople . sm . Seek - Vhence must reconcile theory vith reality . and thus must in effect ansver the question . " Does vhat I think I ' ve seen me . lee sense ? " . The gnoths vill e . lvays egree vith the hypothesis to some extent . but may fail to be f \ Jllyconsistent vith it . Similarly . there may also be some temporary disegreement betveen the gnoths and the gloms that they in effect " represent " . This rather unplee . sant•sounding state of affairs is a consequence of the necessary state ornux at this level . If the hypothesis is changed - - if , for example , the system nov van ts the segment " 1 2 2 " parenthesized as " 1 ( 2 2 ) " , vheree . s it used to be parenthesized as " ( 1 2 ) 2 " - the system vill have to propegate that change dovn through the various processing levels . The socrato - level is the level possessing the vocat > Ulary in vhich to express those necessary changes . It is the level at vhich reformUlation begins to be brought e . bout . Nov that ve have some foreshadoving of future developments , it is time to return to our more systematic discussion ofSeek - Vhence processing . Ve left off at the point vhen template - level processing ve . s about to begin , the stage of " casting around " for an appropriate formUlation of the sequence pattern description . 73 6 . TEMPLATE CREATION - ONE MOLD TO fIT All Vhenever a glom is dubbed as a manifestation of some plato - type . a Template - scout process is placed on the taskraclc . It and other processes involved in template creation and eveJ . ue . tion operate at an intermediate level betveen the " " rear· . data - driven cyto - level and the " perceived " " . perception - driven socrato - level . The hum . an analogue is the stage during vhich a person ·s eyes move back end forth across the terms . as the person vai . ts for en idea to emerge . This is a stage in vhich people cen literally observe themselves vork . yet be unable to explain verbally vhat is happening . vhat they are ' " thinking " " . People vorking on Bongard problems experience this stage in en especially clear and forcefUl ve . y . In Seek - Vhence . the template - level processes attempt to come up vith a template or descriptor of the sequence . This is a preliminary step to devising a hypothesis - - that is . a predictive model of the sequence . en encapsulation of its structure . Templates end hypotheses have similar forms , but templates are far less complete and exact . lacking the predictive ability and expressive pover of hypotheses . A good , vorking template vill eventually give rise to a hypothesis . A template is formed vhen the structure of some particular dubbed glom is found to explain . at least roughly . all the sequence terms seen thus far . Eor example . the template form ' " ( S - group 1 n ) " " suffices to explain " " l 1 2 1 2 ; since it ' " fits ' " all the term groupings . even though there is no built - in notion or even any recognition that ··n·· means " " countup ' " here . The same template vould suffice equally veu for ' " 1 2 1 2 3 4 5 1 1 2 J " . The ability to notice ' " cross - glom ··properties . such as n < - - > countup . is left to higher - level processes . Once a template is created , it puts a pseudo - glom called the template glom over the highest - level gloms in the cytoplasm ( those that are not rubgloms of any other glom ) to prevent the disappearance of the gloms that engendered end 74 nov reflect it . A pseudo - glom cannot combine vith reel gloms . e . nd it prevents its subgloms from glomming activity e . s veil . Some cyto - level activity ce . n still continue - bonding being done e . s freely e . s ever . for example - but no nev templates ere considered for the lifetime of the given template . The template vil1 be checked by a Template - ew . luator te . sk e . nd either be passed . or rejected e . nd al > e . ndoned . If tt is pe . ssed . it vill probably be the be . sis for hypothesis e . nd gnoth creation . This means that until a . hypothesis exists . ell nevterms vil1 be " filtered " pe . st the template . checked for agreement vi . th it . Should e . term not fit the template . e . reviev is set up . vi . th reNlting modification or rejection of the template . The filtering process is the first major top - dovn action performed by the system ; the template level he . s taken control . This is not to say that cyto - level activity ceases or slovs ; the cyto - level processes continue in their accustomed ve . y . Vhat is added is direction from al > ove : instructions to make or di . ssol ve gloms . to create units of a particular form . TEMPI . ATE DIH ' ICULTIES The process of devising a template is not e . s easy e . s it might first appear . Eor example , suppose that the sequence terms " 1121 2 3 " vere entered e . nd the first " 1 2 " vere glommed . dubbed e . s " ( S - group 1 2 ) " . e . nd targeted bye . Template - scout . Vhen invoked . the scout vould set out e . Template - applier task to determine if the entire sequence seen is of that form . The applier vould attempt to vievthe sequence e . s a repetition of " ( S - group 12 ) " e . nd vould . of course . fail because of the initial " 1 " and the trailing ' " 3 " . The applier does not give up immediately , but rather checks to see if loosening e . parameter or tvo in its representat ~ on vould help . In this case . changing the form from the original " ( S - group 1 2 ) " to " ( S - group 1 n ) " - - vhere " n " means " any nonnegative integer " - vill do the trick . The accepted template vill then be " ( S - group 1 n ) " . 75 If the Template - applier fails , it creates a Template - resolver task for one final attempt . Vhen invoked , the resolver looks at glints rather than gloms to determine vhether or not the sequence can be re - vie ' Ved to fit into the given mold . for example . if the segment " 11 2 l 2 3 " ' Vere glommed as ( 11 ) 2 ( 1 2 3 ) . the Template - applier voUld fail because of the first glom . . A Template - resolver vorking vi . th the template " ( S - group 1 n ) " , ho ' Ve . ver , might be able to find the appropriate S - groups by looking at the sequence terms rather than the gloms . If the Template - resolver is successfU1 , it " blasts " ( does an immediate burst of ) all gloms and has the glints reglommed to fit the template . This is a fairly radical action in that it ignores ell the cyto - generated glom units , but it does provide some potential for destroying ' 1ocked - in " gloms , ones the system created and can never seem to burst . If the proposed template does not vork : at term level , it is forgotten and the engendering glom dissolved . In practice , the Template - resolver is seldom invoked because the system can usually devise a template early on vhich is good enough to push up a hypothesis . Once that has happened . the higher levels take over the job of resolving problems . It is in the spirit of Seek - Vhence processing to give each level a little more capability than it should need to use - the ability to handle , albeit lamely , situations that voUld be better handled by higher - level processes . The Template - reviever process is in this category . It is invoked after a template has been created ( but no hypothesis exists ) and vhen nev terms fail ta fit the template . It can try some very simple fixes and can either : 1 ) cell for modification of the template and restart the creation and evaluation processes ; 2 ) leave the template alone ; 3 ) target it for abandoning . The creation and acceptance of a template causes increased activity in 76 the system , in effect " reising the temperature " in the system . Most importantly , it sets of ' ftvo tasks . aGnoth - maker and a Hypothesizer . This action pushes processing up into the next level . the socrato - level . vhere more considered operations are performed on the fluid but less ephemeral structures of the socratoplasm . 7 . THE SOCR . ATOPU . SM - IN THE MIDDU The socratoplesm is the " perceived vorld " of Seek - Vhence . the place vhere perceptions developed at the cyto - level are noticed , cateJ . ogued , and dealt " 1i . th . It can be vieved es a battleground betveen the " ideal " plate - notions and the " reel " cyto - glimmerings - that is . betveen the semantic and the syntactic - or - to put it one last ve . y - - betveen the cognitive and the subcognitive . In any cese , it is the system ' s playground . vhere perceptions can be modified and manipulated ; in short , it is vhere slipping occurs . For emphasis . ve should note once agein that operations carried out at the socrato - level inevite . l > ly cause cyto - level activity . This is very desire . I > le . Such lov - level activity may result in the noticing of a special bond or the creation of anevglom vhich might eventueJ . lyengender a better parse . . A single cyto - level tesk : is too lov - level to control its ovn or the system ' s processing directly ( although in aggregate these tasks are very influential ) . In contrast . the socrato - level can and does support tasks vhich say , in essence . " Enough ! I have a hypothesis . Let ' s have the next term to check it our· . or better still . " I think the ansver is . . . . Tell me if I ' m vrong . " As " N ' aS previously noted , the acceptance of a template signals the system ' s readiness to consider creation of a hypothesis - an encapsulation of the sequence ' s structure . Although this goal . may not yet be e . tteine . ble , a correct hypothesis not forthcoming . . the highest - level processes should nov be 77 introduced into the fray . At this point , malleable , manipulable , relatively non - ephemeral . structures are needed so that any necessary slipping can l > e noticed e . nd carried out . Moreover , e . reformulation vocabulary must l > e developed so that the system ce . n express clearly e . nd succinctly the actions it needs to teke . Thus , the structures ve call ·gnoths " are created . vays : GNOTHS Ee . ch gnoth , a member of the class Gnoths , is vieved in three different 1 ) it is e . n actualization of a Platonic class ; 2 ) it hes an underlying glom collection from vhich it derives its structure ; 3 ) it represents one " hit " of the current hypothesis ( if there is one ) . Vhen a Gnoth - meker task , set off by the system after template creation . is invoked , it creates one gnoth for each sUl > glom of the template - glom e . nd notifies the associated plato - clesses of their existence . Eor example , in the sequence " 1 1 2 1 2 3 " . vhere ve might have gloms : glom2 : ( 1 ) glom7 : ( 1 2 ) glom4 : ( 123 ) 78 and template " ( S - group 1 n ) " , the Gnoth - maker vould create three gnoths : gnothl class : Gnoths name : gnothl frame : 1 plate - class : S - group this gnoth holds the first hypothesis " hit - glom : glomlO ( vhere glomlO has g1om2 as subglom ) the gnoth ' s " pseudo - glom - range : ( 1 1 ) gnoth2 class : Gnoths name : gnoth2 frame : 2 plate - class : S - group the sequence terms it " covers " glom : glomll ( vhere gloml 1 has glom7 as subglom ) range : ( 2 3 ) gnoth3 class : Gnoths name : gnoth3 frame : 3 plate - class : S - group glom : glom12 ( vhere glom12 has glom4 as subglom ) range : ( 4 6 ) Ee . ch gnoth places apseudo - glom ( called a " gnoth - glom " ) over its glom collection ( vhich contains just one glom initially ) . A gnoth - glom , like e . 79 · tem . plate - glom . . cennot glom . vi . th other cyto - elem . ents end serves to prevent the haphezerd dise . ppeerence of glom . structures important to the system . . In this case . since the underlying g1om . collection gives the gnoth its chere . cter . that collection m . wt be preserved until the gnoth itself must change . Cyto - level bonding activitycen continue but novthe gnoth oversees the fate of its glom . s . Cyto - level tasks ere som . evhat m . yopic , e . ble to vi . ev the sequence only in a restricted . localized vay . They have no oyeryiey of the sequence . The structures - the glom . s - - created at the cyto - level reflect this myopic viev . In contrast , the hypothesis end platonic - level processes can be said to have no " underyiey " of the sequence . no direct contact vith reality as it exists in the cytoplasm . Gnoths ere designed to bridge the gap betveen these levels . to provide a place vhere inconsistencies l > etveen the high - level end lov - level vievs cen be vorked out . 8 . HYPOTHESES - ENCAPSULATING PATTERNS The overall purpose of the system is to develop a reasonable hypothesjs : a cleen . predictive model of the rule underlying the sequence . Vhen a template is accepted . a Hypothesizer task is set off along vi . th a Gnoth - m . aker . described e . t > ove . Vhen invoked . the Hypothesizer is responsible for devising a hypothesis for the sequence . based on the template and the existing gnoths ( if any ) and glom . s . If . for some reason . there is a faulty template ( or none at all ) . the Hypothesizer can take the fe . 11 - back position of declering the sequence to be a Tuple . the veakest of e . 11 plato - classes . Because the Hypothesizer ' s model . like those developed by hum . ans . · ' may turn out . as more terms . errive . to fail to be predictive . or maybe judged " clumsy " or " ugly " , it must also be easy to change . Thus . hypotheses must be not only predictive end cleen . but also om . enable to reformulation - " slippal > le • . 80 Naturally , Seek - Vhence must be e . l > le to notice vhen reformuJ . ation is ce . lled for . to knovVhyit shoUld be done . to knovvhat changes to make . and to knovhov to carryout these changes . It becomes obvious , then , that hypothesis structure is critice . 1 . in that it can make or break the syitem ' s e . l > ility to carry out these te . sks . The predictive nature ofahVPOthesis is asemantic rather than a syntactic requirement . and so poses fev constraints on hypothesis form . The other tvo goals - clean representation and slippable form - do give us something to vork to . ve . rds . Ji . hypothesis must have sufficient expressive pover to represent the observed regUle . rity accurately . It shoUld have a clean virua ! appearance so that it can be understood by humans - vho Vill . after e . 11 . be investigating its velidity . It shoUld be modUlar , so that the reformUlation so fluidly and nature . 11 y done by humans can be carried out equally smoothly by the system . HYPOTHESIS : CORM The form ve have chosen for hypotheses is , not surprisingly . closely tied to the ideals in the platoplasm . - a natural and direct consequence of having the syitem vievits vorld in terms of those concepts . It also closely resembles S - e - Vhence die . grams . The fre . gment " l 11 " , for example . may veil be vieved e . s aC - group ( Constant group ) . Ji . hVPOthesis voUld express this in the form " ( C - group 1 3 ) " . a list consisting of the Platonic cle . ss name . the ste . rt - ve . lue and the ( top - level ) length of the grouping . The sequence segment " 4 5 6 4 5 6 " coUld be expressed : ( C - group ( S - group 4 3 ) 2 ) . indicating a C - group of length 2 , each of Vhose entries is the S - group ( successor - group ) starting vi th 4 and of length 3 . 81 The segment " 4 5 6 5 6 7 " could be : ( S - group ( Countup 4 ) 3 ) . Each " hit " or evaluation of this form vould yield e . length - 3 successor group . The first group vould start vi th 4 . the next vith 5 . etc . . The segment " l 5 e 4 z 5 e 4 3 5 e 4 " might be expressed : ( Cycle ( ( Countup 1 ) ( Tuple ( 5 8 4 ) ) ) ) . The segment " l 1 Z l " ' could be : ( Cycle ( ( Counrup 1 ) 1 ) ) < - - > ( 1 1 ) ( Z 1 ) ( 3 1 ) . . . OR ( Cycle ( 1 ( S - group 1 Z ) ) ) < - - - > ( 1 ( 1 Z ) ) ( 1 ( 1 Z ) ) . . . . The segment " l Z l " might be : ( S - group 1 Z ) < - - > ( 1 Z ) ( 1 Z ) . . . OR ( Y - group [ l ) [ 3 ) ( 1Z1 ) ) < - - > ( 1 Z l ) ( 1Z1 ) . . . These forms ere constructed by the system es it attempts to build a hypothesis for the pattern presented . The Hypothesizer process vill take such a form and from it construct a Seek - Vhence hypothesis - a de . ta structure vi th severe ! fields . capabilities . and f \ lnctioru . HYPOTHESIS FEATURES First and apparently simplest . the hypothesis can display its form . much es ' V8S sho - wn in the lest section . It can elso predict the next term to be expected folloving that form . In addition . it hes e . yal . idityessocie . ted vith it - a number that gro " VS es nev . correctly - predicted terms ere encountered . The most crucial field , hovever . and the one that supports the others . is simply c8lled the hypothesis ' ~ - The box is the structure vhich , vhen " hit " . produces the next run of terms predicted by the hypothesis . The box can be reset to start again . • • • 82 asked to list a number of terms . or asked to predict the next term . given the sequence ' s currentlyknovn terms . The hypothesis ' box is amember of the class " Boxes " and e . s such lives in the socratoplesm , the middle level of the Seek - Vhence ' t ! Orld , along " rith members of the < : lesses " Printstructures " and ' ' Gnoths " . Gnoths . es ve have seen earlier . are the central representative structures in the socratoplesm ; boxes and the closely - related printstructures are not as visible . serving e . more private purpose . The next section details the operation of boxes and is not central to the flov of our discussion . BOXES . AND PRINTSTRUCTUR . ES Ee . ch box is a repository of information e . bout an underlying printstructure and through the . t printstructure branches out . tree - like . to represent in an active ~ ystructures " rith such forms as : ( C - groUp 1 3 ) or ( C - group ( S - group 2 3 ) 2 ) [ see Figure 3 ] . Boxes can be " hit " . prodded for their next value . Vhen implementing box hits . I ve . nted to be sure the . t hit propea ; e . tion dovn the box tree coUld be done in e . fUlly parallel manner . " rith no reliance on the return of any particUle . r ve . lue before any other . The follo " ring implementation ' rill vork in this fashion . although the current version of the program tree . ts box hits es indiVisible operations . rather than es a task series . Vhen a box is hit . it calls upon its underlying printstructure to feed it a value . Ee . ch printstructure has e . collection of fire - boxes , sUbboxes vhich must be hit to give it e . value . Vhen the printstructure " fires " - the . tis , hits its fire - boxes . ee . ch box must return e . value . Thus . e . hit iin e . top - level box propege . tes dovn through the tree ofprintstructures and boxes belovit until the most deeply - nested structures return their values . These are pessed up and the upV8rds - bubbling proceeds until the top - level e . nsver appears in the top box ' s " pstruc - val " field . Box1 printstruc : pstruc - val : ready : 83 Pstruc1 type : C - group boxes : ( box1 ) ~ B ~ o ~ x ~ 2 : _ _ ~ . . o = = = ~ ~ ~ ~ ~ - - - - ~ - y - 2n ~ - v ~ a ~ . ~ k - val : printstruc : - - - ! - - . pstruc - val : ready : Pstruc2 ' - - ~ . . - - - _ , / printstruc : - - + - . pstruc - val : ready : type : S - group boxes : ( box2 ) Pstruc5 Box3 printstruc : - - . i - . 1 pstruc - val : ready : I Pstruc3 type : Constant boxes : ( box3 ) value : 2 Box4 printstruc : - - - 1 . pstruc - val : ready : ' Pstruc4 type : Constant boxes : ( box4 ) value : 3 ' type : boxes : value : figure 3 - - A box tree for the form ( C - group ( S - group 2 3 ) 2 ) Constant ( boxS ) 2 In Figure 3 , for example , the " fire - boxes " for Pstrucl - - aC - group printstructure - - are its " n - val " and " k - val " boxes , namely Box2 and BoxS . In order for Box2 to fire , though , it must in turn receive a value from its subordinate printstructure , Pstruc2 - - an S - group printstructure . Vhen Box2 is • • 84 duly filled , its " ready " field Will be set to " true " , end it vi . 11 report the value in its " pstruc - val " field to Pstrucl . It is possible for tvo or more boxes to shere the sem . e underlYfng print . structure . This happens , for example , in the sequence : " 8 1 2 8 ' 3 4 8 5 6 . . . " , vhich cen be described by the form " ( Cycle ( 8 ( Coun ~ ed ) ) " . Modeling this form requires the creation or three boxes : one for the ' ' Corute . nt 8 " , one for the first " Countup l " , end one for the second " Countup l " ( referred to es " she . red " in the given form ) . The " she . red " distinguishes this situation from the one implied by the form " ( Cyc1e ( 8 ( Coun . tup 1 ) ( Countup l ) ) ) " . vhich e . lso requires three boxes , end vhich corresponds to the sequence " 8118228 ' 3 - ' 3 . . . " . In our first form , on1yone Countup printstrueture is created . Vhen that printstrUcture fires in response to ahit on the first Countup box , it feeds both Countup boxes , malcing both boxes " ree . dy " . Later on , vhen the second Countup box is hit the am § . printstructure Will fire , age . in reeding both boxes , but this time ~ th the nm value in sequence . In contrast , the second form causes creation or different printstructures ror the tw Countup boxes . Those print . structures e . re hit independently , once ee . ch in a turn e . round the Cycle . A simpler example or the same phenomenon can be seen using Fig \ lre ' 3 . , , , . - - . . _ Ir the form modeled had been " ( C - group ( S - group 2 3 ) she . red ) " - rather the . n " ( C - group ( S - group ( 2 ' 3 ) ) 2 ) " - so that the sameness of the Z ' s were to be modeled explicitly , our diagram in Fig \ lre 3 wUld have been slicht1ydifl ' erent . P ~ ' 3 voUld have " ( box ' ) box5 ) " in its " boxes " field , and there voUld be no need for Pstruc5 . Box5 vo \ . lld point to Pstruc3 es its " printstruc " . In order to handle the details of firing end box - filling . each print . structure type ( C - group , S - group , etc . ) hes afint associated ~ th it . a 85 process which knovs hov to fire the releV8nt fireboxes of the printstructure and vhat to do vith the results . Vhen aprintstructure is shered bytvo or more boxes . each box must be filled vhenever the printstructure fires . Those boxes must then record the fact that they already have a value - set their " ready " fields to " true " - so that they can report this ve . J . ue until the next time they ere hit . Boxes can also be reset to stert from the beginning of the pattern described . or asked to shov a number of terms . One proposed project for refinement of Seelc - Vhence is to create a box - tree editor . Ve or the system could then change the box tree associated vith a form . This vould me . lee hypothesis modification cleaner and more sophisticated than the current technique , vhich is to scrap the old box tree and make a nev one . Ve feel that the chosen implementation of hypotheses goes along ve : y tove . rd meeting our gee . ls . It gives us an active structure cape . l > le of realizing any . . . . - ell - formed hypothesis form . It accurately represents pattern structures . and she . red substructures can be represented explicitly in the box tree . Thus it is expressive . It is modular so that slipping - reformulation - is supported . D . THE END OE ST . lCiE ONE Once the hypothesis is in place and the gnoths corresponding to it are " up " ( created by the Cinoth - m . alcer ) . the system has reached the culmination of its stege - one processing . Erom nov on . activity vill te . lce place at e . 11 levels of the system simultaneously . The nev goel vill be confirmation of a predictive model for the sequence . Virtually e . 11 the structures created before the gnoths and hypothesis operate at a level that . . . . - e reel is generellyignored by most Al systems . Ve have developed a set or gnoth operations . a language in which . . . . - e can express 86 several vays for gnoths to coml > ine and split . to share terms , and generally to interact vi . th each other . This is the level that . AI programs tend to take as a starting point . Ve have attempted to implement a rich " subcognitive " level to illustrate our belief that such a substrate is critically important to truly intelligent systems , merldng a step up from formal symbol manipulation . Many Al programs have been created to do very sophisticated things , but rev if any ~ e able to do simple , childlike things . Both abilities ere important . A program able to com . l > ine fluidly re ! ormulate . l > le , structural concepts such as ours vi . th · the kno ~ edge of a sophisticated domain vould be an achievement indeed , both kno ~ edgeal > le and flexible . CHAPTER THREE SEEK - VHENCE STAGE TVO - - REFORMULATION • 88 A . INTRODUCTION The current version of Seek - Whence ves designed as en illustration of the plausibility of our approach . so I spent much time developing the paradigm and implementing the lower levels of the system described in the previous chapter . The highest levels ere not as completely implemented , but do serve to illustrate the potential of our approach . Several sequence problems have been solved by the system . These include 1 1 1 . . . 1234 . . . 111222333 . . . 343434 . . . 373737 . . . 373373373 . . . 16 15 14 17 16 15 18 17 16 . . . 16 15 141514 13 14 13 12 . . . ( as well as possible . given e . non - in { inite pattern ) 121231234 . . . Ve vi . 11 use the last of these in a running example of Seek - Vhence processing throughout the remainder of this dissertation . A discussion ofvhat the current version of the system cannot do is given in Chapter Eive . along vi th some speculations as to why and some goals for the t ' Uture . B . BACKGROUND The defining characteristic of stage two is the looming presence of the hypothesis . Vithout it . the system surfers from a " blind men end elephants " problem - - trying to meke global sense from multiple local perspectives . Vith the hypothesis . the system has a " point of view " . e . predictive model of the sequence to vhich it can cling until contradictory evidence is encountered . 89 1 . THE HUMAN APPROACH Ve have presented sequence panerns to people singly and in groups . Almost inverial > ly , and juslifiably , once they have developed a hypothesis they insist on its correctness until it is proved incorrect l > y the production of a term that simply vill not fit . for example , vhen shovn : 1223 many people hypothesize : ( 1 ) ( 2 2 ) ( 3 3 3 ) ( 4 4 4 4 ) or , in Seek - Vhence terminology : ~ ( C - group ( Countup 1 ) shared ) . If ve say , " Nope , not it " and then present another 3 . the usual reaction is " Yeah 7 " , uttered vi th an innection of challenge and the hint of a suggestion that the presenter he . s actually forgotten the pattern . It is only vhen the next term is presented , a 4 , making the initial sequence : 122334 that they really l > elieve another formulation is required . Then follovs a varie . l > le - length period of reviev and reorganization . vhich is in turn folloved t > y the generation of a nev firmly - held hypothesis ( or , in difficult cases , resignation ) . This " shov me " attitude and the l > elief in a favorite hypothesis ere modeled in Seek - Vhence . The system maintains one hypothesis at any given time , rather than a list of possibilities . It is al > le to do this e . nd still function reasonably veil because of its ability to " slip " from an old hypothesis to a nev one . The hypothesis is , in effect . surrounded l > y cloud of potential hypotheses , close variants into vhich it can be transformed vhenever appropriate . Underlying this e . l > ility are links among the Platonic concepts and information about the cyto - level environment favored l > y each Platonic concept . 90 2 . PLATONIC RELATIONS ( no pun intended ) The Platonic concepts of Seek - Vhence . C - group , Tuple . Countup . and the like . are to l > e connected l > y a variety of links reflecting the concepts ' interrelationships . This network of connections . in conjunction ' 7ith a philosophy for their use , constitutes the " Slipnet " vhich is so essential to the system ' s reformulation ability . In the current version . ve have implemented a small numl > er of undifferentiated slipping links , called s - link ~ . for this purpose . The system ' s slipping network - - vhich is ell vi thin the platoplasm - is supplemented l > y another . " level - spanning " , nerwrk vhich relates each concept to its ovn lover - level realizations . This network inclUdes the lists each Platonic concept me . inte . ins of its manifestations and actualizations . As descril > ed earlier . the manifestations of a concept are cyto - level structures vhich have l > een dubbed e . s representatives of the concept , vhich model it up to the expressive ability of that level . The actue . lize . tioru e . re socrato - level structures vhich have similarly l > een identified as representatives of the concept at that level . . Also included in the level - spanning netvork are lists of pulling and pushing bonds , bonds vhich the concept ce . n use to group or separate sequence terms . Level - spanning links are little used as yet . S - LINKS As currently implemented , the s - links have direction end " slipperiness " . For example , S - group he . s s - links to Countup . C - group , Y - group , Cycle , end Tuple . . Associated ' 7ith each s - link is a numl > er l > etween O ( non - slippery ) and 1 ( perfectly slippery ) , vhich indicates my estimate of the system ' s proclivity to move from the given concept to the neighbor . The s - link from S - group to Countup has slipperiness 0 . 1 , reflecting the fact that it is difficult to slip to a stricter class . Slipperiness from . S - group to Tuple is 0 . 4 , since Tuple can serve as 91 a generic grouping mechanism if no satisfactory stricter class is appropriate . The slipperiness values can be changed during processing , elthough the current system does not do so . A richer collection of linkage types end e . fUller description of the Slip net notion is given in [ Hofstadter 84 ] . PULL - PUSH BONDS In addition to the s - links , each concept preserves information about the types of bonds it finds most usefUl in grouping sequence terms . Ear example , the C - group concept , because it involves copy or sameness groups , favors adjacent sameness bonds most strongly , but also likes to see gloms having the same span ( number of sequence terms covered ) . Bonds vhich a . Platonic class might use to hold groups together are listed as " pull - bonds " ; those it tends to use to separate groups are listed as " push - bonds " . Each so - designated bond type is given a strength from 1to10 , strengths vhich agein could be , but in practice are not . changed by the system . 3 . EREEZE - DRIED HYPOTHESES Vhen a hypothesis has been deemed inadequate , it is " freeze - dried " - - its form is extracted and is kept on a list of old hypotheses , elong vith the number of terms of the sequence it explained . The old hypotheses serve as e . check against cycling in the system . Vhen Seek - Vhence has trouble coming up vith a hypothesis , it , like most humans , keeps coming be . ck to the same incorrect hypotheses again end again . This , ve feel , is note . be . d feature , since people are guilty of the same " foolish " behavior . It would be disastrous , hovever , should it go unnoticed . Gray Clossme . n and others in the Eluid Anelogies Research Group ( FARG ) at Michigan have thought quite deeply about the importance of " self - noticing " or " self - vatching " [ Hofstadter 85 ] . No doubt the Copycat project 92 in progress there vill have a more sophisticated approach to the problem than the small effort presented here . In any case , freeze - dried hypotheses e . t least flag cyclic behavior at this level of granularity . On the other hand , ve do not ' Vent to prevent cycles at lov levels for several reasons . People experience them . . Although ve may find them quite annoying at times , they are often quite useful . in forcing us to consider once age . in a correct notion vhich ve he . d rejected for some " high - level " but incorrect reason . Seek - Vhence has thrashed about more than once , clinging to some Platonic class or glom , vhile underlying layers push up another , correct , notion over e . nd over age . in . Knoving vhen to permit these notions to take over and vhen to squelch them is e . most difficult problem . Our current solution has been . vhen no progress has l > een made for quite some time , to ! > last avay all gnoths e . nd gloms , leaving only the glints and their bonds to push up an inspiration . . A mathematics student and friend ves the inspiration for this approach . . After struggling unsuccessfully for hours vi th a problem set , she wUld toss all her papers avay , va1k around the room , confront the problem sheet and say . in a very cheerful voice , " Oh . look - - aprol > lem set ! I wnder vhat the questions are . Shall ve try some ? I bet they ' ll be . o , m : · Sometimes it wrked and sometimes . . . . C . CH . ANG ING J . . HYPOTHESIS There are actue . 11 y tw reasons for changing a hypothesis : l ) it fails to predict ; 2 ) it is predictive but its form is less than satisfactory . Ve term hypothesis changes made for the former reason " medicel reformulations " to distinguish them from the " cosmetic reformulations " made in response to the latter . The current version of Seek - Vhence supports the more criticel medicel reformulations l > ut has only made a beginning at handling the 93 cosmetic ones . Because our discussion of medical reformulation vi . 11 of necessity be rather lengthy , ve vi . ll cover the cosmetic reforms first . 1 . COSMETIC REFORM Once e . hypothesis he . s been formulated . it becomes important to refine it . An " ugly " , though correct , parse can be very dissatisfying to humans ; there is generally strong agreement on vhich of several candidate parses is " best " in this heuristic sense . For example . given the sequence 2 1 2 2 2 2 2 ' 3 2 2 4 2 2 5 2 . . . most successf \ . 11 solvers vi . ll come up vi th the parse : ( 212 ) ( 222 ) ( 2 ' 32 ) " " More than one person he . s parsed it e . s : 2 ( 1 2 2 ) ( 2 2 2 ) ( ' 3 2 2 ) . . . , becoming annoyed at the presenter for posing a problem vi . th such a tricky , ugly parse , " vi . th that 2 sticking out in front . " In some instances . alternative parses are equally acceptable . but vi . 11 generalize differently . For example . such sequences e . s : ( 5 1 5 ) ( 5 2 5 ) ( 5 ' 3 5 ) . . . and ( 5 16 ) ( 52 6 ) ( 5 ' 3 6 ) . . . e . re both considered generalizations of the sequence ( 4 1 5 ) ( 4 2 5 ) ( 4 ' 3 5 ) . . . . The difference is that in the first generalization the countup betveen the bracketing 4 and 5 in the original ( le . st - listed ) sequence is either not noticed or not considered salient . vhile in the second generalization it is maintained . For an interesting study of the problems of analogy and generalization . see [ Hofstadter 82c ! Hypothesis refinement is e . s yet only minimally supported in 94 Seek - Vhence . It is to be carried out by internal gnoth reformers , processes that modify the internal structure of the gnoths . Such modification ' tli . 11 be done for either of t ' Wtl reasons : 1 ) to relieve internal pressure vi thin a gnoth , pressure deriving from those bonds ' tli . thin the gnoth that " WOuld push it e . pert ; 2 ) to me . ke the gnoth ' s structure conform more closely to the reigning hypothesis . The first of these describes " bottom - up " pressures , such e . s e . n un ' tli . eldy structure or poor perenthesization . An example of this vould be the 2 1 2 2 2 2 2 3 2 . . . case cited e . t > ove . vhere the first structure - - holding e . lone 2 - vould seem rather out of place . The second is e . " top - dovn " e . ttempt to insure the . t the gnoths model the reigning hypothesis as closely e . s possible . The driving force behind this attempt is the goal of structural equivalence betveen each gnoth e . nd the hypothesis . GNOTH - HYPOTHESIS EQUIVALENCE Ve he . ve stated that each gnoth is to represent one hit of the hypothesis . But is it sufficient that the gnoth give the same terms e . s a hypothesis hit ? Or do ve ve . nt the same terms ' tli . th the same perenthesize . tion ? Or might ve also ve . nt the gnoth to obey the same underlying f2 . tm . ( the . tis , have the same peren thesize . tion for the same reason ) ? In the folloving sections ve ' tli . 11 describe these three levels of representation , vhich ve cell " term . equivalence·· , " parse equivalence " , and " structural equivalence " . Ve use the term frame of e . hypothesis to m . ee . n e . n abstractly - vieved hit of the hypothesis : the collection of Seek - Vhence forms that vould produce the given hit . 95 TERM EQUIVALENCE Term equivalence , the veakest of the three types of representation , requires that each gnoth govern precisely the same terms as one frame of the hypothesis . for example , ifthe hypothesis is : ( S - group 1 ' 3 ) , then ' oath gnoths shovn in the follovi . ng diagram are term - equi ' V8lent to it . gnoth2 gnoth3 Vhen asked for its V8lue , gnoth2 produces ( ( 1 Z ) ' 3 ) . vhile gnoth3 yields ( 1 2 3 ) . Both gnoths produce the three terms 1 , Z , 3 in that order , so both satisfy the requirement for term - equivalence . PAR . SE EQUIVALENCE Parse equivelence , the next level , requires that the gnoth print its value vi . th the same pe . renthesization e . s the corresponding hypothesis frame . In the above example , gnoth ' 3 is parse - equivalent to the given hypothesis vhile gnoth2 is not . STRUCTURAL EQUIV AUNCE The third and strongest level of equivalence is structure ! equivalence . In order to display structure ! equivalence vi . th the hypothesis , a gnoth must be parse - equivalent to it and the gnoth ' s form must ' oe the same e . s the 96 corresponding frame of the hypothesis . But vhat form shoUld a gnoth assume if it is to reflect the hypothesis accurately ? There are tvo distinguishe . l > le possil > ilities . vhich ve call deep structure and shallov structure . For example . suppose that ' We have a fairly complicated hypothesis such as " ( C - group ( S - group ( Countup 1 ) 3 ) 2 ) " . derived from input terms : 1 2 3 1 2 J 2 J 4 2 J 4 J 4 5 3 4 5 . and parsed as : 123 123 234 234 345 345 . Vie ' Wed at the term level . the first hit of this hypothesis generates " l 2 3 1 2 3 " . The shaUov - structure ( or deeply - hit ) form of the first frame of our hypothesis voutd l > e : ( C - group ( 1 2 3 ) 2 ) . The corresponding deep - structure ( or shallo ~ y - hit ) form is : ( C - group ( S - group 1J ) 2 ) . More structural detail is retained in the deep - structure form . vi th only the lo ' West - level structures replaced l > yconstants or tuns . In the shallov - structure form . all but the top - level structures are so replaced . DEEP VS . SH . ALLOV STRUCTURE For comparison , the first three deep - structure and shaUov - structure frames of our hyt > Othesis " ( C - group ( S - group ( Countup 1 ) 3 ) 2 ) " are : sbolloy ( C - group ( 1 2 3 ) 2 ) ( C - group ( 2 3 4 ) 2 ) ( C - group ( J 4 5 ) 2 ) ~ ( C - group ( S - group 1 J ) 2 ) ( C - group ( S - group 2 J ) 2 ) ( C - group ( S - group J J ) 2 ) Because the deep - structure form presents more structural detail and represents a " one - step - dovn " vievofthe hypothesis . ft chose it as our goal . Once a hypothesis is made . the system gives each gnoth its target form , the 97 deep - structure equivalent of the hypothesis frame to vhich it corresponds . Vhen the gnoth ' s form matches this given one . the gnoth is said to exhibit structural equivalence vith the hypothesis . At that time . the gnoth should be completely " happy " , having no further goals . FORM POLISHING In summary . all gnoths must alvays maintain ~ equivalence vith the hypothesis . Their goal vill be to achieve structure . 1 equivalence by reforming into the deep - structure form of one hypothesis frame . . Along the vay they vill achieve the middle state of parse equivalence . indicated by the re . ct that the gnoth ' s " parse - print " . the parenthesized printing of its value . matches that of the hypothesis frame . IMPORTANCE TO GENERALIZATION The form polishing described above vill be essential to en ability to generalize sequences in reasonable vays and make analogies bet ~ en sequence descriptions . Also required vill be the ability to notice structural samenesses • . such es the ( Countup l ) in the hypothesis " ( C - group ( Countup 1 ) ( Countup l ) ) " . vhich yields the terms : l z z 3 3 3 . These are among the f \ lture high - level goals of the Seek - Vhence project . unimplemented as yet . 2 . MEDICAL REFORM Medical reformulation . vhich is supported in the current version of Seek - Vhence . is done vhen the hypothesis hes been demonstrated to be invalid . It involves a reviev of the old hypothesis and the underlying structures 98 supporting it . a decision as to vhich Platonic type should hold sve . y , a re - evaluation of the bonds noticed by the system . the use of bonds in the environment of the chosen Platonic type to engender gnoth reformulations . and finally ( it is hoped ) the construction of anev , predictive hypothesis . GNOTH - SETTER The system stores hypothesis - confirming terms in a catchall gnoth a special gnoth that simply serves as a repository for non - troublesome terms . \ Then an unexpected term is encountered , the system immediately sets the hypothesis ' velidityto O . releases sparks to encourage lov - level activity , and places e . Gnoth - setter task on the taskrack . Vhen invoked . the CTnoth - setter caref \ llly fills out gnoths in accordance vi th the old hypothesis and calls for the system to reconsider its parse . For example . if the old hypothesis vere " ( S - group 1 3 ) " , and tvo gnoths . each holding ··123 " . vere elreadyin existence . the catchall gnoth might be holding " 1 2 3 4 " . The first three terms in the segment " l 2 3 4 " are in the catchall because theyvere predicted by the hypothesis ; the " 4 " is the lest term entered - - the troublesome one . The crnoth - setter vould therefore create tvo nev gnoths . one to hold the initial " 1 2 3 " from the catchall and the other to hold the trailing 4 . Ee . ch gnoth is marked vi . th the frame end equivalence type ( term or parse . depending on agreement vith the hypothesis " parenthesization ) appropriate for it . Any non - fitting terms are collected together in a final gnoth and the catchall is destroyed . In the example above , the tvo pre - existing gnoths and the first of the nev1 y - created ones wuld be marked as parse - equivalent to the old hypothesis . In our running example ( " l 2 1 2 3 " ) , entry of the first tvo terms - " 1 2 • - causes the system to hypothesize ( Countup 1 ) . Vhen the next term 99 entered is " l " , a Gnoth - setter puts out three gnoths . one for each term . The first two are in accord with the discredited hypothesis and are in fact parse - equivalent to it . The last one simply holds the non - fitting term . Nov . vith " all the cards on the table " . the Gnoth - setter calls for reconsideration to begin . 3 . RECONSIDERATION The goal of reconsideration is the construction of a nev and valid hiJ > Othesis . This is not a mechanical . program - directed reconstruction . hovever , but rather a " homing in " on anevformulation from a tightening spiral of possibilities generated by independent but interacting processes . a . DETERMIN . ATION O : E ' THE REIGNING TYPE The first step te . ken during reconsideration iS a bookkeeping measure . saving the form of the old hypothesis and destroying its : box . the home of its active representation . This leaves the system vith no active structure to govern or filter processing , only a " freeze - dried " form to remind it of its most recent perspective . The system then decides vhether to stay ~ th the reigning class - the Platonic class at the highest level of the ( former ) hypothesis - - or to slip to a nev one . This decision is made on several considerations . : E ' irst . if a reigning class - - such as Constant - iS very strict in the sense that it iS difficUlt to generalize vithout moving to a nev class altogether . slipping is chosen immediately . Otherwise , some deeper investigation is made . The old hypotheses are checked to determine the number of recent hypotheses of this class - - hov many " tries . . the class has had since it seized paver . . All bonds are assessed in the environment of this class - - assigned a strength vhich depends on the class in question as vell as on the type of the bond . ( Bond 100 assessment is described in some detail in the next section . ) The result of this assessment is a rough measurement of the existing " bond tension " , the strength of the bonds favoring modification of the current gnoths . Strong bond tension implies strong pressure to change some aspect of the current parse - - either to abandon the current reigning class or to modify the gnoths ' structure vi . thin the framevork of that class . ASSESSING BOND PULLS Bond assessment is a rel a ti vel y straigh tforV8rd procedure designed to assign strengths to ell existing bonds under the assumption that aperticular Platonic class holds svay . If , for example , S - group is the reigning class , adjacent successor bonds ere given large positive values to indicate that they ere strong pulling bonds vhile sameness l > onds are given negative values to indicate that they tend to push gloms apart . Should C - group 1 > e in ascendancy , sameness bonds become strong vhereas successorship l > onds are made negative . The information required for the system to assign these values is in the platoplasm , vi . th each Platonic concept listing both pulling and pushing bond types and their strengths . Procedurally , each gnoth is processed in turn . Its interne . l l > onds , those among the gloms it covers , are noted , and their stren & fus in the current environment - - that of the reigning class - are assigned . Its external bonds , those betveen its elements and those of other gnoths , are similarly assessed . These values become instrumente . 1 in determining the ' ' happiness " of the gnoth - its inclination to stand pat . The collective happiness of all the gnoths is used as a measure of the success of the reigning class in organizing the system ' s perception of the sequence . 1 01 SLIPOR STAY The pressure to stay vith the reigning class is the sum of vhat is termed " gnoth - stabilities " , a less anthropomorphic and more f ' Unctionall y defined term for the " happiness " mentioned above . The stability of e . gnoth is the difference betveen the bond forces holding it together and those acting to tear it ape . rt . ' ' Holding " bonds are internal pulls and external pushes . ' ' Tee . ring " bonds are external pulls and internal pushes . In our " l 2 1 2 ' 3 " example , just after the ' 3 is introduced , ve should have ( S - group 1 2 ) es the nov - discredited hypothesis and three gnoths as shovn in Figure l . · In figure 1 , the adjacent - successor bond betveen glint ! and glint2 has strength + 10 because S - group is the reigning Platonic type e . nd S - group favors such bonds . This particular bond f ' Unctions as an " internal pull " for gnothl since it has a positive value and both members . glintl e . nd & ' . lint2 , are vithin that gnoth . In contrast , the adjacent successor bond l > etveen glint4 and glint5 also has value + 10 , but f ' Unctions es an " external pull " betveen gnoth2 and gnothJ . Thus , the former bond tends to uphold the status quo , tends to make gnothl " happy " , vhile the latter bond causes some unhappiness for both gnoth2 and gnothJ . The remote sameness bond ( vi th strength - 5 ) l > etveen glint2 and glint4 f ' Unctions es e . n " external push " , tending to keep the parent gnoths . gnothl and gnoth2 , apart . Therefore , it contributes to the ste . l > ility or " happiness " of both gnoths involved . In this particular example , there are no " internal push " bonds . STABILITY To calculate e . gnoth ' s stability , ve first e . dd the strengths of the bonds holding it together . For gnothl in Figure 1 . vith S - group reigning . this sum 102 would be + 10 + 2 . S + 2 . S : lS . The + 10 comes from the internel pull applied by the adjacent successor bond betveen glintl and glint2 . The 2 . Ys represent half the strength of the tvo externel push bonds under gnothl . These are the remote sameness bond betveen glintl and glint ) . and the remote sameness bond bet - veen glint2 and glint4 . Strength - halving is done so that external bond values are not counted t ' Vice . once for each gnoth involved . gnoth1 gnoth2 + 10 - - adjacent successor value bond - 5 - remote same value bond gnoth3 Figure l - - Measuring gnoth stability Once the holding strength is calculated , ve subtract the sum of the tearing - bond strengths acting on the gnoth to come up with its stability . Gnothl has no tearing bonds ( no internal pushes or external pulls ) . and so its stability is : ( + 10 + Z . S + 2 . 5 ) - ( 0 ) : 15 . 1 03 Similarly , With S - group reigning , gnoth2 hes three " holding " t > onds - the internal pUll t > etveen glint ) end glint4 from their " adjacent successor " t > ond , the external push betveen glintl and glint ) ( " remote same " ) , and the externel push betveen glint2 end glint4 ( again , " remote same " ) . In addition , gnoth2 has one " tearing " bond - - the external pull betveen glint4 and glintS ( " adjacent successor " ) , of strength 10 . Thus , ve he . ve gnoth2 stal > ility : ( + 10 + 2 . 5 + 2 . 5 ) - ( 5 ) • 10 . fine . Uy , since gnoth ' 3 has only one bond - - a " tearing " external pull of strength 10 , its stability is : ( 0 ) - ( 5 ) . - 5 . Ve then e . dd the individual gnoth stabilities to find a total system stability , in this case , of 15 + 10 - 5 = + 20 . Ve note that some of the . tearing pressure is due to unresolved bond pUlls favoring the reigning type - - if not its specific realization in the current hypothesis - - end so may be considered inappropriate for our purposes . Nevertheless , ve are tapping a measure of internal consistency . That is , if ve assume en environment of this class and still find much bond tension ( much gnoth unhappiness ) , ve mayquicklyal > endon the type , at least for a vhile . In order fore . reigning class to t > e abandoned , hovever . some other class hes to demonStrate strength in its ovn right . Those classes that " neighbor " the current reigning class - - those connected to it bys - links in the platoplasm - are the primary " pretenders to the throne " . If one of them can shov sufficient strength ( sufficient " slipping pressure " , as described belov ) , it may supplant the current " monarch " . by : 104 The slipping pressure from the reigning class to a neighbor is evaluated 1 ) adding tvo quantities - the sum of all pulling - bond strengths . and the e . l > solute value of the sum of e . 11 pushing - bond strengths - taken over e . 11 existing bonds . and assessed in the environment of the neighboring class . and then 2 ) multiplying the sum by the slipperiness of the link l > etveen the monarch and the neighbor - - the proclivity to slip in that direction . In effect . the system tries to estimate the gnoth stability in e . n " alternative universe " - - the environment dominated by the neighboring class - es veil as the likelihood of moving from the current universe to the alternative one . A very " close " neigh ! > or of the current monarch vho presents fair ! y strong prospects for ste . l > ilityvould l > e a strong candidate for ascendancy to the throne . vhereas a " diitant " neighbor - - one connected to the reigning class by a non - slippery s - link - vhose - stal > ility prospects are lov vou ! d l > e a veak candidate . Slipping - pressure estimates are calculated for each class that is an s - link neighbor of the reigning class . If the largest of these values is greater than the " staying pressure " - the current stability - - then a slip to the corresponding class vill l > e made and the system vill have a nev reigning cless . for example . in our " 1 2 1 2 3 ·· case , the slipping pressure from S - group to Y - group ( " symmetry " group - - for , say , a parse : 121 2 3 2 ) is : O . i [ the s - link slipperiness l + ( 10 + 10 ) = 8 , vhere the ! O ' s are the strengths , in a Y - group environment , of the " remote same " bonds betveen glint ! and g1int3 and betveen glint2 and glinti . Thus Y - group , vith a slipping pressure of8 , cannot seize the throne from . the reigning S - group , vhose staying pressure is 20 . 105 A similar value is calculated for each neighboring class . and if the largest of these values is greater than the staying pressure . a slip to that class vill be made . b . REFORMUUTOR At this point , a reigning class has been este . l : > lished - or reconfirmed - and so e . Reformulator process is placed on the taskrack . Vhen invoked , this process vill attempt to find salient bonds and vill set out Gnoth - operator tasks designed to act upon the bond pulls or pushes in order to change the gnoths . The Reformulator ' s first act is to determine a threshold bond strength . Bonds or bond groups exerting pressures belov this threshold vill be ignored . Currently , the nev threshold is set to either 1 more than the existini threshold value or . if none exists , 80 . , . of the strongest pull - bond strength for the reigning type . ( This value vas chosen arbitrarily , vith some vague remembrance ofVinston ' s grouping algorithm in his " l > locks - vorld " program [ Vinston 75 l It has remained because it seems to have done no harm as yet . ) Because nev bonds may have been established since the Reformulator ' s creation time , its next act is to assess all bond pulls in the environment of the reigning class , e . s described above . Then begins the process of finding strong pulls end / or pushes , and turning them into gnoth operations - actions the . t modify gnoths . If the Reformule . tor finds no actions to be taken or if it he . s completed its recommendations , it hangs a Bond - assessor task on the taskrack ( to determine system " happiness " ) and terminates . 106 SELECTION OF NEIGHBOR - PULLS All inter - gnoth moves involve the rightmost ( at some level ) glom of some gnoth end the leftmost ( age . in , at some level ) glom of the gnoth ' s neighbor to the right . This is a consequence of the sequential nature of our dome . in . Ve obviously cannot reerrange the order of sequence terms ( even though such an operation might make a " more interesting " sequence ) ; ve can only readjust our groupings . ( Ear a study of a less restricted pulling environment , see [ Hofstadter 83 ) . ) For example , given neighboring gnoths as shovn in Eigure 2 belov , our system vill be interested in the 1asts " of gnoth3 : ( glom15 glomlO g1om7 glint4 ) , and the " firsts " of gnoth4 : ( g1om8 g1om 3 glom 1 glin t5 ) . gnoth3 gnoth4° Figure 2 - Neighboring gnoths 107 The first moves considered are those at the highest level , under the theory that if a glom van ts to move , its subgloms should follov . It is also possible that some glom feels relatively content but one of its subgloms is attracted to a glom in the neighbor gnoth . In such a case . the subglom should be popped out and over to the neighbor . Should both glom and subglom feel a pull . the glom move shoUld take . precedence since it is structurally more important . Subsequently , internal gnoth operations - actions vhich modify the internal structure of a gnoth - - could be used to move the subglom if it still feels the need to leave its parent glom . SELECTION ORDER In our Eigure 2 example , neighbor - driven reformulation vould be explored in the folloving order : level 1 : gloml5 < - - > glomB lE ! Vel 2 : glomlO < - - > glomB glom15 < - - > glomJ glom ! O < - - > glomJ ( Assess the pull betveen the topmost gloms , then betveen level t1i ' O gloms and those at levels one and t1i ' O . ) level 3 : glom7 < - - > ( glomB glom ' 3 ) ( assess pull vith each in the list ) ( gloml5 glomlO ) < - - > gloml glom7 < - - > gloml level 4 : glint4 < - - > ( glomB glomJ gloml ) ( gloml5 glomlO glom7 ) < - - > glint5 glin t4 < - - > glin t5 As soon es some reformUlation is strong enough - the bond pulls and pushes supporting it exceed the threshold - - the Reformulator creates an appropriate gnoth operation or program of operations and sets a & noth - operator on the taskrack to carry it out . The Reformulator vill not 108 suggest any further moves . since any others T / ' Ould occur at a lover structural . level and therefore vould be less important to the system . Should any lover - level moves be important , they vill eventually be discovered by some fUture Reformulator . CONVERSION OF BOND - PULLS INTO GNOTH OPERATIONS Vhen there is sUfficient strength of pull betveen tw gloms from neighboring gnoths , agnoth operation must be devised to bring the tvo gloms together . Simply shifting one glom into the other ' s gnoth may not be sUfficient , because the decisive pull on it maybe coming from a deeply - nested glom . one several levels dovn from the top . In Figure 2 for example , glint4 may be pulled toverd glom3 . In our " 12123 " example , at the time described in Figure 1 , the last term - - the " 3 " - - is pulled by its predecessor - - a " 2 " - - vhich is nested vithin aglom vhose print - value is " ( 12 ) " . The system must decide vhich of the tT / ' O attracting gloms is to move and vhich is to stay put . This is determined by an analysis of the bonds holding the gloms in their respective gnoths . Single gloms are the most likely to move , leaving an empty gnoth behind , a shell vhich the system destroys . Once the direction of the move is determined , the total move must be constructed . J . s vill be discussed belov , gnoth operations can be quite destructive of a gnoth ' s in tern al structure , bursting gloms until the target gloms belov are reached . Vhen a gnoth operation is performed , at least some of this structural damage must be repaired : ve do not vent the destruction of important nesting structures to be a side - effect of reformulation . Finally , the strength of the operation is calculated . This strength - the difference betveen the gloms ' mutual attraction and the pull exerted by other gloms to hold them in place - must exceed the system - determined threshold , or 109 else the move " ( , IQU [ d not have been generated . The strength is used by Seek - Vhence to weight competing alternatives vhen necessary . 4 . THE GNOTH OPERATIONS Gnoth operations fall into tvo categories : external or inter - gnoth operations , and internal or intre . - gnoth operations . The external operations are : SHIFT - LEFT , SHIFT - RIGHT , and SPLIT . The internel operations are : CAPTURE , ENCLOSE . FRACTURE . MERGE , and NO - OP . All of these operations require e . bit of careful me . nipule . tion . As vas described earlier . each gnoth has an associated " pseudo - glom " . e . glom that cannot interact vith others , serving as e . ce . p to prevent the disappearance , through nature ! glomm . ing . of useful gloms and glom groups . The pseudo - gloms of any gnoths involved in gnoth operations must l > e destroyed to permit the true gloms belov to interact vi th each other . Similarly . if a very deeply nested glom is to 1 > e involved in e . n operation , all gloms containing it must be destroyed so that it ce . n rise to the top of the cytoplasm e . nd l > ecome available . Naturally , all this glom - bursting destroys the encasing gnoth ' s structure . This is permitted because neither ve nor the system can knov vhether the destruction is the primary purpose of the operation or just e . side - effect of its real intent . Any proposer of gnoth operations that vis hes to preserve some of the original structure must m . e . ke the effort to do so . The burst gloms cannot , of course . be brought be . ck . but f \ lnctione . Uy similar ( not identicel . because the gnoth operation did change something ) ones can be created . Vhen a gnoth operation is completed , e . capping procedure puts e . nev pseudo - glom in place above the gnoth ' s glom . s . Often . Plato - scout tasks are placed on the taskrack to peruse the gnoth ' s nevly - created gloms , searching 11 0 among them for any nev manifestations of the Platonic concepts . EXTERNALS The formats for the external operations are : ( SHIFT - LEFT < left - gnoth > < right - gnoth > < glomlist > ) , where glomlist is a list of the gloms ( which must l > e neighbors in order ) to l > e transferred from right - gnoth to left - gnoth ; ( SH ! FT - RIG HT < left - gnoth > < righ t - gnoth > < glomlist > ) , where glomlist serves an analogous purpose , this time from left - gnoth to right - gnoth ; ( SPLIT < gnoth > < Splitlist > ) , where splitlist is a list ofgloms currently under the given gnoth . A newgnoth is to l > e formed using the splitlist gloms es its top level . SHIFT EXAMPU initial state : gnoth2 : [ ( 1 1 ) ( 2 2 ) I glom3 glom5 operation : gnoth3 : [ ( 3 3 ) ( 4 4 ) ( 4 4 ) I glom7 glomlO glom15 ( SHIFT - WT gnoth2 gnoth ' 3 ( glom7 glomlO ) ) final state : gnoth2 : [ ( 11 ) ( 2 2 ) ( 3 3 ) ( 4 4 ) I gnoth } [ ( 4 4 ) I glom3 glom5 glom7 glomlO glom15 1 11 SH ! fT DIAGRAM gnoth2 gnoth3 gnoth3 ( SHift - urr gnoth2 gnoth3 ( glom7 glom ! O ) ) SPLIT EXAMPU initial state : gnoth2 : [ ( 1 2 ) ( 2 3 ) ( 2 3 ) ] glom2 glom6 glomlO operation : ( SPLIT gnoth2 ( glom6 glom ! O ) ) final state : gnoth2 : [ ( 1 2 ) 1 gnoth ( ney ) : [ ( 2 3 ) ( 2 3 ) ] 11 2 SPLIT DIAGRAM gnoth2 gnoth2 gnoth ( SPLIT gnoth2 ( glom6 glomlO ) ) INTERNALS The formats for the internal gnoth operations are : ( CAPTURE - Un < gnoth > < glom > < captive > ) . vhere the given glom vithin the given gnoth is to sve . llov its neighbor . captive . vhole . Actually . the glom is destroyed and a nev one created vi th the captive as its leftmost subglom and also containing ell the original glom·s subgloms . ( C . APTURE - RIGHT < gnoth > < glom > < captive > ) . analogow to the operation above ; ( ENCLOSE < gnoth > < encloselist > ) . vhere encloselist is a list of neigh boring gloms vi thin the gnoth to be covered by anev glom . dubbed to be of type ··enclose " ' ; 11 3 ( FRACTURE < gnothname > ) . vhere the given gnoth is to have all of its top - level gloms ( the direct subgloms of its pseu4o - glom ) dissolved . bringing their subgloms to the top - level ; ( MERGE < gnoth > < glomlist > ) , vhere glomlist is a list of neighbor gloms in order vi thin the given gnoth . The listed gloms are all . uncovered and their subgloms glommed into a " merge " - type glom . vhich becomes a top - level glom in the gnoth ; ( NO - OP < gnoth > ) . vhich causes the gnoth to be " uncapped " - - have its pseu4o - glom suspended - and remain that vayuntil the Capper task it sets out is invoked and recaps the gnoth . This " slov - recap " permits natural glomming to occur vithin the gnoth . and betveen gnoths shoUld tvo neighboring gnoths 1 > e uncapped simUltaneously . The Capper finds all current gloms vhose ranges overlap vith the original range of the gnoth ( before it vas uncapped ) and claims them for the gnoth . Should tvo different gnoths claim the same glom - - one formed . perhaps . t > y combining gloms from the tvo gnoths - - the gnoth that recaps first vill get the glom and the extended range . CAPTURE EXAMPLES initial state : gnoth I : [ ( 1 2 ) 31 gloml glint ) operation : 114 ( CAPTURE - RIGHT gnoth ! gloml glint ) ) final state : gnothl : [ ( l 2 3 ) ] glom2 initial state : gnothl : [ ( ( I 2 ) ( 2 3 ) ( ( 2 3 ) ( 2 3 ) ) ) ( 1 2 ) 1 glom5 glom7 glom8 glom9 glom18 < - - glomlO - > < - - - - - - glom15 - - - - - - > operation : ( CAPTURE - UfT gnothl glomlO glom7 ) final state : gnothl : [ ( 1 2 ) ( ( 2 3 ) ( 2 3 ) ( 2 3 ) ) ( 1 2 ) ] glom5 glom7 gloma glom9 glom18 < - - - - glom20 - - - - - - > CAPTURE DIAGRAM The operation : 11 5 ( CAPTURE - LEET gnothl glomlO glom7 ) vill cause glom 10 to " s ~ lov " its neighbor to the left , glom ? , vi thin gnothl . gnoth1 gnoth1 ( CAPTURE - LEFT gnothl glomlO glom ? ) ENCLOSE EXAMPLES initial ste . te : gnotht : [ 12 ' 31 ) glints 1 , 2 . ' 3 . 4 operation : ( ENCLOSE gnothl ( glint ! glintZ glint ) ) ) final state : gnothl : [ ( 1 2 ' 3 ) 1 I gloml glint4 116 initial state : gnoth ' 3 : [ ( 2 2 ) ( 0 ) ( ( 3 3 ) ( 4 4 ) ) ) ( ( 4 4 ) ( 5 5 ) ) l operation : gloml g ! om4 glom6 glom5 < - glomlO - > < - - - - - - glom 12 - - - - - - > ( ENCLOSE gnothJ ( glom5 glom7 ) ) final state : glom7 glom8 < - - - glom9 - > gnoth3 : [ ( 2 2 ) ( 3 ) ( 3 3 ) ( ( 4 4 ) ( 4 4 ) ) ( 5 5 ) ] g ! oml glom4 g ! om6 g ! om5 glom7 glom8 < - - g ! om20 - - > ENCLOSE DIAGRAM gnoth3 gnoth3 ( ENCLOSE gnothJ ( glom5 glom7 ) ) FRACTURE EX . AMPLE initial state : 1 1 7 gnoth2 : [ ( 1 2 ) ( ( 3 3 ) ( 4 4 ) ) l gloml glom4 glom3 < - - - - glomS - - - - > operation : ( FRACTURE gnoth2 ) finel state : gnoth2 : [ 1 2 ( 3 3 ) ( 4 4 ) l glom4 glom3 FRACTURE DI . AGRAM gnoth2 ( FRACTURE gnoth2 ) gnoth2 MERGE EXAMPLES initial state : gnothl : [ ( 1 1 ) ( 1 1 1 ) ] glom 1 glom2 operation : 1 1 8 ( MERGE gnothl ( gloml glom . 2 ) ) final state : gnothl : [ ( 1 1 1 1 1 ) ] glom3 initial state : i ' OOthl : [ ( ( 12 3 ) ( J 4 ) ) ( ( ( 5 6 ) ( 4 5 ) ) ( 6 7 6 ) ) I opera ~ on : glom 1 gloli : l . 2 < - - - glom 4 - - - > glom5 glom6 glomlO < - - glom7 - - > < - - - - - - - - - - gloml 9 - - - - - - > ( MERGE gnothl ( glom4 glom7 ) ) fine . l state : gnotbl : [ ( ( 1 2 3 ) ( 3 4 ) ( 5 6 ) ( 4 5 ) ) ( 6 7 6 ) ] gloml glom2 glom5 glom6 glomlO < - - - - - - glom . 20 - - - - - - - > 1 1 9 MERGE DIAGRAM gnoth 1 gnoth1 ( MERGE gnothl ( glom4 g1om7 ) ) OPERATIONS IN SERIES The gnoth operations described above ce . n be used to reformulate the gnoth - t > ased parse of the sequence ( as opposed to the hypothesis - based parse ) vhen applied in series . Tvo examples follov . In our " firit example , ve start out vi . th three gnoths vhich parenthesize the sequence segment " 12JJ4J4 5 " as shovn initially . After several operations , a more " reasonable " fine . 1 parenthesi . zation emerges . Initial state : gnoth ! 1 ( 12 ) ) ] g ! om ! 120 gnoth2 [ ( ( 3 4 ) ( 3 4 ) ) l g ! om2 g ! om3 < - - - g ! om 4 - - - > ( SHIFT - LEFT gnoth2 gnoth3 glintB ) [ ( 12 ) ) ] [ ( ( 34 ) ( 34 ) ) 5 ] ( C . A . PTURE - RIGHT gnoth2 glom3 glint8 ) [ ( 12 ) ) ] [ ( 34 ) ( 345 ) ] glom2 glom5 ( FRACTURE gnothl ) [ 1 2 Jl [ ( 34 ) ( ) 45 ) ] ( ENCLOSE gnothl ( glint ! glint2 ) ) [ ( 12 ) ) ] [ ( 34 ) ( ) 45 ) ] ( SPLIT gnoth2 ( glomS ) ) [ ( 12 ) ) ] [ ( ) 4 ) l ( SHIFT - LEFT gnoth2 gnoth3 ( glint6 ) ) [ ( 12 ) ) ] [ ( 34 ) ) ] ( ENCLOSE gnoth ) ( gllnt7 g ! intB ) ) [ ( 1 2 ) ) l [ ( 3 4 ) ) l gnoth3 [ 5 l glintB [ ] ( disappears ) [ ( ) 4 5 ) ] ( emerges ) [ 4 5 l [ ( 4 5 ) l 1 21 In our second example , ve once egain have three gnoths vhich exchange gloms and are reformulated internally to come up vi th a nev , more coherent parenthesization - - this time of the sequence segment " l 2 3 3 4 5 6 4 5 6 7 8 " . Initiel state : gnothl 1 ( 123 ) ] gnoth2 [ ( 3 4 ) ( 5 6 ) ( 4 5 ) ] gloml glom2 glom3 glom4 ( SHIFT - RIGHT gnoth2 gnoth3 ( glom4 ) ) [ ( 123 ) ) [ ( 34 ) ( 56 ) ) ( MERGE gnoth3 ( glom4 glom5 ) ) [ ( 12 3 ) ] [ ( 3 4 ) ( 5 6 ) ) ( FRACTURE gnoth2 ) [ ( 12 3 ) ) [ 3456 ] ( ENCLOSE gnoth2 ( glint4 glint5 glint6 glint ? ) ) [ ( 123 ) ) [ ( 3456 ) ] glom7 BONDS INTO GNOTH OPERATIONS gnoth3 [ ( 6 7 8 ) ] glom5 [ ( 4 5 ) ( 6 7 8 ) ) [ ( 45678 ) ] glom6 [ ( 45678 ) ] [ ( 45678 ) ] The conversion of bond pulls and pushes into gnoth operations simply requires that care be taken e . l : > out vho is attracting vhom and hov deeply nested each of the participants is in its originel gnoth . Vhen more than astre . ightforvard top - level move is to be required , a Reformulator must create a PROGRAM or series of moves designed to put the proper glom in its proper place and repair as much resulting gnoth - tearing as possible . Some examples may help explain exactlyvhat is done . 122 HIGH - UVEL MOVES In Figure 2 ( p . 106 ) . if glom8 is to be pulled e : nyfrom gnoth4 by gloml5 . this high - level e . ttre . ction is tre . nslated into the move : ( SHIFT - UFT gnoth ) gnoth4 ( glom8 ) ) . If . ho ' flever . gloml is to be pulled e . vay by glom7 . ' fie have e . more complicated situation . DEEPER MOVES In the case of such deeper moves . a PROGRA . M must be genere . ted . In the glom7 - gloml example . e . tre . nslation of the result is : ( PROGRAM ( ( SHIFT - U : ET gnoth ) gnoth4 ( gloml ) ) [ move gloml over ] ( CA . PTURE - RIGHT gnoth ) glomlO gloml ) [ svallovit ] ( ENCLOSE gnoth4 siblings - of - gloml ) [ reple . ce glomJl ( ENCLOSE gnoth4 nevglomJ & sibs - of - glomJ ) [ reple . ce glom8 ] ( ENCLOSE gnoth ) sibs - of - glomlO & nevglomlO ) [ replace gloml5 ] ) ) AREAL MOVE In most cases . such deep nesting is not encountered . In the case of " l 2 1 z ) " [ Figure 1 ] . the 2 < - > J pull is resolved vie . : ( PROGRAM ( ( ( 1 2 ) ) ( ( 1 Z ) ) ( ) ) ( SHI : E ' T - UFT gnothZ gnoth ) ( glint5 ) ) - > ( ( 1 2 ) ) ( ( 1Z ) 3 ) ( CAPTURE - RIGHT gnothZ glomZ glint5 ) - - > ( ( 1 Z ) ) ( ( 1Z3 ) ) ( ENCLOSE gnothZ nil ) [ no repair necessary ] ( ENCLOSE gnoth ) nil ) [ no repair necessary ] ) ) Reformulator processes are responsible for creating ru . : : h " PROGRAM " s 1 23 es described above . For the most part , once the initial move or tvo have been supplied . the remainder of the PROGRAM is designed simply and mechanically to repair any concomitant structural damage . Such damage is usually caused t > y the need to t > urst a glom in order to get at one of its subgloms . perhaps even one nested several levels t > elov it . The damage is repaired by re - enclosing the remaining gloms at each intermediate level - - those not directly involved in the operation - - and setting out Plato - scouts on the neviy - enclosed gloms . This last step is taken to determine vhether any " interesting " nev structures have been created . It should be emphasized that PROGRAM construction is a mechanical action . performed by a task that exists at a high enough level to possess the necessary vocabulary . The Reformulator ' s activity in vriting a PROGRAM is no more intelligent than a Glommer ' s or a Bon < : ler·s . or that of any other Seek - Vhence task . Vhatever " intelligence " the Seek - Vhence system possesses is an emergent phenomenon arising from the performance of all of these mechanical tasks in p ~ allel . DIVESTING PUSHES In addition to neighbor pulls . there is a second potentially strong agent for reformulation - - vhat ve call a " divesting push " . There may be no real pull betveen one a : lom in agnoth and the neighboring gnoth . but the glom ' s current home may not vant it . This sort of unilateral decision to push out a glom and either foist it off on the neighbor or create anev gnoth to hold it could t > e the foundation for much useful reformulation . Divesting pushes are not implemented in the current system . causing some veakness in its performance vhen handling Tuples . for exemple . More vi11 t > e said about this in the " Problems " chapter . 124 5 . CARRYING OUT REFORMS A Gnoth - operator task is charged vith carrying out the operation or PROGRAM given it by aReformulator at the time of its creation . It must first check to see that all the structures relevant to its operation e . re still in existence . having survived the system ' s activityVhile the Gnoth - operator vas hanging on the te . skrack . If the relevant structures do still exist . the Gnoth - eperator carries out the operations ; if not . it vill simply terminate . Vhen a Gnoth - opere . tor does in fact operate , its lest action is to decrease the system ' s bond - strength threshold by 1 . The effect of this threshold reduction is to encourage the system to make more reformulations by e . lloving veaker bonds to be considered . in effect " heating up " the environment . Reformulators . by adding 1 to the threshold . have the opposite effect . cooling things dovn . Eventually , the system vill settle e . s the Reformulators find fever and fever relevant operations to suggest to Gnoth - operators . reflecting the fact that the gnoths are stabilizing . BOND - ASSESSOR A Bond - assessor task is created each time aReformulator decides that it has finished finding interesting gnoth operations at some particular level . The Bond - assessor ' s job is to look at all current bonds and determine vhether or not there is reason to continue reformulation . If there are sUfficiently strong bonds to verrant f ' Urther reforms . the Bond - assessor places a Reformulator on the te . skrack . If not . it creates a Gnoth - ce . ster task instead and terminates . C . ASTING GNOTHS Vhen invoked , aGnoth - caster attempts to describe each gnoth in terms of the reigning class . In more sophisticated versions of the program , there vill be provision for casting gnoths in terms of more complicated but still 125 incomplete forms - - such es . . ( C - group ( S - group m n ) ( Cycle ( 1 4 ) ) ) " or " ( Y - groui ; > [ 3 ] ( ( C - group m n ) B she . red ) ) " , vhere " m " and " n " have no numerical value . This vill be necessaryvhen more comi ; > licated Seek - Vhence descrii ; > tioru are required to parse target sequences . Since each gnoth is supposed to represent one frame of the hypothesis . such casting must be possible if the class is right and the gnoths are correctly formed . If e . 11 the gnoths can be cast . or if e . 11 but the lest can and it shows promise , the Gnoth - caster then attempts to cree . te e . more general form common to all the castings . for exe . mi ; > le . if the term groui ; > ings generated by the gnoths are : ( 3 4 ) ( 3 4Y ( 3 ) . then the form " ( S - group 3 2 ) " vould be generated . In our slightly more complicated running example . given ( 1 2 ) ( 1 2 3 ) . the form " ( S - group 1 ( Countup 2 ) ) " is generated . The casting process is quite meche . nice . 1 , es currently implemented . and so errors or poor castings e . re possible . A final . test - - to veed out any surviving bad casts - is me . de of e . cast vhen it becomes e . hypothesis candidate . TESTING HYPOTHESIS CANDIDATES The casting form returned , if any , nov becomes e . hypothesis candidate . A " t > ox " , or predictive model . is me . de for it and is tested to see vhether it can accurately " i ; > ostdict " the knovn terms of the sequence . If so . the candidate is instantiated es the nevhypothesis for the system . vhich ce . n novsit be . ck in the " certainty " the . tits nevmodel is the correct one for the given sequence . At this point . the system typice . 11 y cells for the next term in order to test its nev hypothesis . 1 26 D . FAILURE AND SLIP - SCOUTS If the Gnoth - caster is unable to cast ell the gnoths in terms of the reigning class . or if it cannot generalize the casts to come up vi . the . candidate . or if the candidate fails to postdict the sequence properly , the reformulation effort has failed . In each such case . a " Slip - scout " process is placed on the taskrack . Slip - scouts e . re only skeletally implemented in the current system . e . partial explanation for its floundering in many cases vhen initiel reformulation fails . Vhen invoked , a Slip - scout vi . 11 me . ke e . more detailed study of the potential for slipping to another reigning class . e . nd the probability of a class change vi . 11 increase . The Slip - scout vi . 11 look at ell existing bonds to find frequently - occurring types and vi . 11 be especie1ly sensitive to the possibility of an interlee . ving of tvo or more independent subsequences . It vil1 use the knovtedge of vhich classes favor vhat bonds to help suggest e . nev reigning class . or perhaps a subclass vi thin a reigning Cycle or Tuple . This seems to be the point vhere Simon e . nd ICotovsky [ Simon 63 ] begen their program - looking for e . cycle . If so . ve he . ve nov e . lmost completed the substre . te necessary for a system to support heuristics of their sort in e . fluid . non - meche . nistic ve . y . CHAPTER FOUR COMPARISONS VITH OTHER VORK : 128 A . INTRODUCTION Inevitably , because the domain ve he . ve chosen is that of integer sequences end because ve are interested in exploring the process of induction . our vork must be compared vi th that of several predecessors . These include Pi var end Finkelstein . Sim . on end ICotovsky , Persson . and Dietterich . There are also comparisons and contrasts to be me . de vi th vork by Evans and by Lene . t . B . COMPARISON VITH PIV AR & FINICELSTEIN Pi var and Finkelstein [ Piver 64 ] vere interested in " the problem of programming a computer to perform induction on certain general kinds of data in a manner superior to the majority ofhumen beings " ( p . 125 ) . Their program ve . s capable of building models of certain rypes of sequences and of extrapolatin & from these models more quickly and more accure . tel y than most people . The program coUld recognize certain vell - knovn sequences . such as the prim . es . e . nd coQJ . d devise models vith exceptions for non - fitting terms . The target sequence types . . . - ere cyclic . constant skip . or an intertvining of the tvo . Thus . the program . could " solve " ( represent as e . LISP fUnction ) such sequences as : 246 8 . . . 2 1 ' . 3 2 5 ' . 3 7 4 11 5 . . . ( primes and positive integers intertvined ) 1 4 9 16 25 . . . ( squares of positive integers ) Hovever . the process of induction . as done by people . vas not explored . Their program . relied heavily on finite - differencing methods to model polynomial end other highly mathematice . l sequences . in effect substituting the " l > lack box " of differencing for that of induction . 129 In fact . they note a difference in thrust l > et " fleen their program and that of Sim . on and Kotovsky : " The program vas vritten as a result of seeing a previous program developed by Simon . Simon ' s program vas developed for the purpose of simulating the observed behavior of people vhen trying to solve problems of predicting letter sequences from an intelligence test . The program PERTEST . on the other he . nd , vas oriented tovards the automation of inductive thinking rather than the simulation of hum . an beings ; therefore . " fie developed somevhat simpler though perhaps more mathematical vays of dealing vi . th the problem . " ( p . 131 ) . Ve feel that in trying to " automate " the process , they " flere , in fact , looking for a shortcut , a vayofobte . ining the result of inductive thought - - in this case , a model of the sequence - vithout having to go through or understand the inductive process itself . In contrast , our me . jor interest is in the process of induction . Sequences of interest to us tend to represent patterns . such as : 121231234 . . . . or 1123122312331123 . . . . rather than n ~ egree polynomials or every third Fibonacci number . Ve vant to explore inductive processes that might be similar to those used by hum . ans as they notice e . nd represent patterns ; ve do not simply van t to extrapolate sequences . To pare . phrase the me . thematicien Atiyah ( on the NOV A program " Mathematical Mystery Tour " ) , " ve are not simply in the business of getting e . nsvers ; " fie vant to understand " . This . then , " TIOuld seem to put us in the company of Simon end Kotovsky , but there are distinctions to be dre . " " Vn here as veil . 130 C . REL . AT ION TO SIMON - KOTOVSKY In their 1963 paper ( Simon 63 ] . Simon and Kotovsky presented convincing eVidence to support their theory that : 1 ) people build a mental model of a sequence from the terms they have seen , and 2 ) they use this model to extrapolate the sequence . to generate successive terms . In addition . they demonstrated that the most salient features noticed before and during model - construction vere sameness and successorship - predecessorship . Ve heertil y agree vi th all these points . Our differences vi th Simon and Kotovsky ere matters of direction and emphasis and can be described along several dimensions . Simon and Kotovsky vere primarily interested in demonstrating that people do build and use mental models Vhich are developed through a process of induction . In contrast to their ' t / Ork , ve simply assume that this is the case . Hovever . ve believe that it is important to explore model construction fer more deeply . The Simon - ICotovsky program vas presented several terms of a target sequence in a list and proceeded by looking first for periodicity in the data [ Simon 6 31 . Then . once a period vas discovered . equal and successor relations betveen neighboring terms of a period vere explored , to finalize the pattern description . In fact , all fifteen of their target sequences vere cyclical vi th fixed - length period . For example . problem 9 vss the sequence : urtustuttu _ The resUlting formUlation vas judged either correct or incorrect . Our approach differs in asut > tle but important ve . y ; the Seek - Whence system is presented terms of a sequence one at a time . This apparently small 131 difference is the visit > le tip of a verite . t > le icel > erg of processing differences l > etveen the t ~ systems . In Seek - Vhence . each nevterm not only inspires e . good deal of noticing of samenesses . successorships , and the like t > ut also drives the system to revise its model of the sequence . That is , the processes of model construction e . nd revision go on in parallel vi . th those of noticing . In contrast , to quote Simon end ICotovsky [ ICotov : sky 73 ] : ' ' The Ss ' [ human sul > jects ' ] l > ehe . vior departs in one respect from the model . Periodicity is determined t > y noticing I e . nd N [ identity and next - same and successor ] relations . In the computer program , information e . t > out relations that a . re noticed at this stage is not retained , l > ut is regenerated during the second ste . ge , ' Vb . en the pattern description is l > eing l > uilt up . Ss clee . rlyr ~ tein much or e . 11 of this information , and use it Vhile building the pattern description . Thus , the current program separates the tvo phases of problem - solving activity - detection of periodicity e . nd pattern description - - more she . rpl y the . n do the Ss . " ( p . 410 ) . Because of the ve . y in ' Vh . ich Seek - Vhence goes e . t > out its modeling job , it is very likely to come up vi . th ee . rlyformUlations of the sequence that e . re " vrong " in that they vi . 11 l > e contra . dieted by fUture terms . Vhen this happens . vhen e . contradictory term is entered , the system must react to the failure of its model . It does so by attempting to reformUle . te the model on the l > esis of the nev evidence ( the nevterm ) . Thus , Seek - Vhence ' s formUlation changes during the course of processing , based upon the " evidence " - sequence terms - it has seen so far . Ve feel that this approach more accurately models hum an induction . a viev supported by the ICotovsky quote e . l > ove . Einally , the requirements imposed on the system by its use of reformUle . tion include the need fore . different type of model . The Simon - ICotovskymodel had to express e . ccure . telye . description of the sequence . 132 But . because the description vas developed only once and then simply checked for correctness . it could be essentially static in nature . Our model , or hypothesis , as ve call it , must be modifiable end reactive to failure . The system . does not simply go be . ck end apply a machine to the " nev ' ' sequence consisting of the old one ' rith one more term at the end in order to generate a nev hypothesis . Rather . it ene . lyzes the current hypothesis in the light of the nev term ' s evidence end attempts to change the hypothesis ' form to encompass the nevterm . In summary , Seek - Vhence is directly concerned ' rith the inductive . model - bUilding aspect of the extrapolation of patterned ( e . s opposed to mathematical ) sequences . This reqUires the noticing of relationships among terms end term groupings sim . ulteneously ' rith model creation . Our system , then . needs a different sort of model then did Sim . on end ICotovsky ' s . Our model is not simply en end - product defining en extrapolation . but a structure ' rith expressive fluidity , one that is reformule . te . t > le on the basis ofnevevi . dence . one that evolves as the sequence terms are presented one by one . D . COMPA . RISON VITHPERSSON In 1966 , Staffen Persson vrote a series of programs - " machines " , as he called them - to solve sequence - extrapolation pcot > lems [ Persson 66 ] . His main interest appears to have been in extrapolating end identifying " noisy " sequences ' rith underlying generating polynomials . me . king his domain much like that of Piver end Finkelstein . This similarity of domain ve . s pare . llelled by a similarity of approach . Persson . like Piver end Finkelstein . relied hee . vi . 1 yon differencing . He also devised a special me . chine to extrapolate intert ' rined sequences . Here age . in . though , the cycles in vestige . ted vere e . lvays of fixed length . 133 Persson ·s interest in error - correction vas realized by having the program interpolate correct terms based on the values of the surrounding ones . For example , given as input the segment : 9 16 21 24 blank 24 21 16 9 Persson ' s program attempts to come up " fli . th an explanatory polynomial . Its result is : - x2 + lOx + 0 , vhich it then finds venting because of the " blank " at the fi ~ h term . It rechecks the polynomial and , finding it explanatory in ell other cases ( and having been forevarned that there might be one error in the input data ) , uses the polynomial to interpolate the missing term . a 25 . end then extrapolate the sequence [ Persson 66 , p . 126 ] Persson recognized that computers solving sequence - extrapolation problems by SU ( : h methods might 1 > e seen as having more capability than they actual ! y possess : " . A . t first glance . sequence - extrapolation vil1 seem to - require application of genUine induction , i . e . . to start out from a pattern . represented by an input - sequence , and eventU8llyarrive at a more general representation from vhich the input - sequence maybe deduced . Hovever . true inductive reasoning is not necessarily required . In many cases . apparent inductive behavior should rather 1 > e described as ' deduction disguised as induction ' . · ( sec . 4 . ) " . . . the risk of contusing ' inductive pover ' " fli . th efficient algorithms for exploring very narrov domains must also be realized . " ( p . 66 ) In fact , Persson mentions [ Persson 66 . pp . 66 - 7 ] both Piver and Finkelstein [ Pivar 641 and Sim . on end ICotovsky [ Simon 63 ] as having claimed inductive behavior in programs vhich are actu ! l . ly purely deductive in design . Ve agree vi th this criticism . and believe that none of the systems thus far discussed addressed the central issue of modeling inductive reasoning . 134 E . DIEIIERICH . AND MICHALSKI " Given a sequence of events ( or objects ) . each characterized bye . set of attributes . the problem considered is to discover e . rUle che . re . cterizing the sequence e . nd able to predict e . ple . usible continuation . " [ Dietterich as . . Abstract ] Clearly , given the e . t > ove quote e . nd the preceding discussion of Seek - Vhence , our interests lie very close to those of Thomas Dietterich and Ryszard Michalski . The questions they ask . the domein explored . and even some of the terminology they use - - e . g . . " structural descriptions " , " conceptual clUstering " , " constructive induction " - bee . re . striking resemblance to our ovn . They , too . obviously reject the idea that sequence pattern induction is a solved problem . Hovever . ve e . nd theyte . ke e . very different approach to processing . They rely on a logic - based formUlation e . nd an algorithmic solution technique . Ve employ structural pattern descriptions and e . " terraced scan " [ Hofstadter aJ ; a4 ] in order to approximate the actual processes of induction . " SP . ARC / E " , the program discussed in [ Dietterich as ] . is e . n advisor to a hume . n vho is playing the card game " Eleusis " . In this game the dealer . " With a card - pattern - generating le . vin mind . puts dovn ace . rd . In turn . each player places on the table e . card they believe to be in the class of possible next terms . If e . player is correct the card is left on the " mein line " ; it incorrect . the card is ple . ced on the " side line " t > elov the le . st correct ( main line ) card . The positive evidence on the mein line in conjunction " With the negative evidence on the side lines is used by players in their formUle . tion of e . description of the underlying rUle . The player vho ce . n first formUle . te the dealer ' s rule is the vinner . 135 for example , the dealer might put dovn the Ace of Spades , vi th the pattern " alternate black and red cards " in mind . If the first player puts dovn the deuce of Spades ( thinking " sequential spades " ) , the dealer vill put the deuce on the side line belov the Ace . Should the next player put dovn the Ace of Clubs , it too vill be placed on the side line . If , finally , a player puts dovn the ' • Ace of Hearts , it vil . 1 be placed on the me . in line next to the Ace of Spades . Play vill continue until one of the participants guesses the " correct " rule . The Eleusis advisor program vill eventually be called in by its user to analyze a given situation and to try to come up vi th the " best " generating rule for that situation . Given the board ve have described , it might guess " alternating red and t > lack Aces " , for instance . The descriptors for playing cards are initially just suit end rank . Other descriptors , such e . s color or primeness of rank . ce . n be added later by the user and employed by the system in its analysis . This addition of attributes is one of the four vays in vhich a game situation , can be transformed " in order to facilitate the discovery of sequence - generating rules " [ Dietterich 85 , p . ZOO 1 The others e . re : segmenting - dividing the sequence into non - overlapping segments . each of vhich ce . n be described separately ; splitting - - dividing the original into separate subsequences ( seeing the original es ' Vhat ve have been calling " interleaved " sequences ) ; blocking - - creating overlapping segments , called ' ' blocks " , and giving attributes to each separately . In order to devise its rule , the program uses the card descriptions given it as positive and negative evidence in parametrizing each of three different potential models of the sequence ( decomposition , periodic , and disjunctive normal form ) . This model construction is done in stages , using five " rings " or 136 processing levels . Each model is then tidied up as it is passed back up through the rings . assessed for plausibility , and the vinning rule or rules are presented to the user as potential organizing notions [ Dietterich BS . p . 22 ' 3 ] SPARC / E can solve some fairly intricate problems . situations vith rules such e . s : " strings of the same color . . . strings mUst alve . ys have odd length ' ' [ Dietterich BS , p . 22S l . or " a higher - rank card in the next ' higher ' suit ( recell that the suits are cyclicel . ly ordered ) or a lover - rank card in the next ' lover ' suit " [ Dietterich BS . p227 l In spite of the impressive performance ofSPARC / E in vhe . t is , to us . a very appropriate domain . ve have some serious differences of opinion vi th Dietterich and Michalski on the structure of computer systems designed to perform in inductive domains . The underlying structures and processing techniques in SPAR . C / E ere logic - besed . For example . ~ the case of the DNF ( disjunctive normel . form ) model . a logical description of the cards on the te . l > le is constructed in disjunctive normal form and is fed into the A q algorithm . This el . gorithm constructs a " cover " - a logical description that includes ell positive instances and excludes all negative ones - - having the fevest conjunctive terms . The result is pessed be . ck up through the processing rings to be presented e . s a candidate rule . This process has more of a " black box " flavor than ve vould like ; it skirts the centre ! issue ( to us ) of the process of induction . Moreover , in SPAR . C / E processing , ell three potential models are alve . ys used to construct pattern descriptions ; virtually the entire processing structure is brought to bear on each problem . regardless of its " difficulty " . Ve vould prefer a system that uses the evidence presented to select a model and to vork vith that model until it proves fruitless or another seems more appropriate . Notice that in SPARC / E , an entire situation is given to the system . 137 vhereas Seek - Vhence continually react . s : to nev evidence . In SPARC / E , the entire sy . s : tem voUld have to t > e restarted for a nev game situation ; there is no sense of ftov or continuity . This means that another central i . s : sue , that of reformUlation . does not enter into SPARC / E processing . A game analysis . a rUle or collection of potential rUles . is either " right " or " vrong " ; there is no reaction to nev data . no response if the generated rUles are iii . correct . In spite of these criticisms - or , more accurately , differences of opinion on vhat is important - " IN ' e have a great deal of respect for Michalski and his group . They have had some real success in cons ~ ructing useful programs . such as Michalski ' s so ~ ean - < lisease classifier , vhile still maintaining an interest in the core issues of learning and induction . Ve attempt to concentrate on the " core " , but have so far built only a toy . Dietterich and Michalski have developed some very appealing notions . These include the distinction bet " IN ' een " attribute descriptions ' ' - - those vhich " specify only global properties of an object " - - and " structural descriptions " - those vhich " portray objects as composite structures consisting of various components " [ Dietterich BJ , p . 42 ] . Certainly , as they note , Pe . trick Vinston ' s " blocks - vorld " program [ Vinston 75 ] vas a ground - breaker in the use of muctural . descriptions . The pattern descriptions constructed by Seek - Vhence are also structural descriptions . In addition , they can t > e summarized neatly in their " freeze - dried " form . and so can become part of an attribute - based description . That is . once a concept has been formUle . ted . it can t > e . . captured " in an attribute - < ! escription fre . mevork . The freeze - dried summary of the concept ' s structure could be recorded as one of many attributes . and the enclosing frame used in a pure ! y syntactic ve . y . Hoftver . anytime the concept ve . s used in a semantic vay , its underlying structure coUld be " reconstituted " so that it could have its very 138 critical structural component . Another appealing Dietterich - Michalski notion . e . nd one that ve believe Seek - Vhence addresses directly . is that of " constructive induction " . " Constructive induction is e . n y form of induction that generates nev descriptors not present in the input date . . It is important for learning programs to be e . l > le to perform constructive induction . since it is veU knovn that me . ny AI problems ce . nnot be solved vithout a che . nge of representation . " [ Dietterich 83 . p . 47 ] Certe . inlyin Seek - Vhence ve at lee . st me . ke a velie . nt attempt to employ a form of constructive induction to come up vi . th a structural description of the input sequence pattern . Eventue . Uy , ve hope to keep these descriptions ( or at lee . st their " freeze - dried " summaries ) around to help in the solution of nevpattern problems . thus supporting a pattern - remembering system . F . SOME REU . TED SYSTEMS In addition to the vork described above , there have been other programs related to Seek - Vhence in spirit . if not in dome . in . These include Thomas Evens ' ANALOGY program [ Eve . ns 68 ] e . nd Douglas Lenat ' s AM and EURISKO [ Lenat 82 ; 83 a . b . c ; 84 l 1 . EV ANS AND AN J . LOG Y Evans ' ANALOGY programve . s designed to solve pictorial analogy problems . me . nyof vhich vere te . ken from examinations given to college - bound high - school students by the American Council on Education . They are of the form " A is to B e . s C is to vhich of ( •t - z . • 3 . • 4 . • 5 ) ? " . vhere •1 . . . •5 are five . candidate pictures . The testee is to choose the candidate that . in its relation to picture c . is most like B ' s relation to A . 139 The program ve . s vritten int ~ major pieces ( primarily bees . use the vhole system could not fit into the availe . l > le computer ) . Data structures describing the figures in each picture e . nd their positions vere fed to the first pa . rt of the program . This information vas used to form relationships betveen pictures A and ~ · as vell as betveen picture C and each of the five candidate pictures . The vocabulary used in describing the relationships consisted of some fixed notions ( e . g . • " above " , ' 1eft - of " ) along vith any descriptors the user might decide to e . dd for e . pe . rticule . r run ( e . g . • " shaded " , " overlap " ) . Once the descriptions vere me . de , the system he . d to choose the " C t ~ candidate " description the . t ve . s most like the " A to B " description . This vas accomplished by assigning veights ( importance ) to the vuious types of tre . nsforme . tions and formulating " rules " to describe hovpicture A could be transformed into B , and hov C could be transformed into each of the candidates . The A : B rule set ves then comps . red to each C : candidate set . Ee . ch A : B rule vas " reduced " . if possible . to fit a given C : candidate rule . Then the rules vere assigned veights based on the transformations they used , the veights vere assessed , and the vinning candidate - the one vi th the highest score - vas chosen . The program accomplished its task vi th wrying degrees of success . dependent to a great extent on the adequacy of the supplied descriptors to capture the salient relationships in e . given problem . The ANALOGY program ve . s an impressive piece of ~ rk . but ve believe that it is a misteke to attribute to the program . povers of " induction " and " theory formation " . Here . e . s in the Pi vu and Finkel . stein sequence program . . ve again have a program . the . t can do very vell - probably better than humans - - in a veil - defined domain that is really smaller than it vould e . ppee . r at first glance . Although Evans claimed that the program could probably handle fifteen out of the thirty problems typically given on an ACE exam . ve e . re not given 140 systematic eVidence to support that claim . All the problems solved by the system . vere numbered 12 or lover . It coUld not handle the only " problem 20 " given it . Moreover , the problems vere ta . ken from different exams , rather than systematicell y from one exam . This in itself might simply meen that the program has the inductive paver of a sixth - grader rather then that of a high - schooler . Hovever , there are very simple analogy problems from the same ACE exams that the system cannot do [ Evans 68 , p . 325 l indicating perhaps a less then human inductive ability , or at lee . st one very different from humans· . In summary , ·then , ve do not believe that the Evans program cen be credited vi . th e . chieVing inductive " concept formation " [ Lenat 83a . pJS l becaus : e the " concepts " formUlated are too brittle . too " attribute - based " ( to us : _ e the Michalski terminology ) . Ve echo the Persson comment ( me . de about Pi var end Finkelstein ' s sequence - extrapolation program ) that the processing technique employed here is reelly " deduction disguised e . s induction " . Nonetheless , the ANALOGY program is remarkable for its ability to operate in a " core " domain . one that has potential for lee . ding us to central issues in intelligence . It voUld bee . treat to see the program redone in the light of recent thinking about induction , concept formation , end analogy . The domain is one to vhich artificial intelligence researchers shoUld return " until ve get it right " . 2 . UNAT AND HEURISTICS Douglas Lenat is deeply concerned vi . th inductive thought . He has explored vhe . t he calls " theory formation " in several domains through his programs AM and EURISICO . In particUlar , he is interested in the development - end use of heuristics in discovering end exploring nev concepts . Certainly , both AM end EURISICO have been enormouslysuccessfUl programs . AM is famous for its rediscovery of arithmetic operations , prime 1 41 numbers , and some important conjectures in number theory . Next to this , vhe . t does Seek - Vhence have to offer ? The ansver : roots . The " accretion model of theory formation " , developed by Lenat for the EURISKO system [ Lenat 8 ' 3al . is a program of seven steps to be folloved by the system in forming theories about : s : ome underlying domain . The model maps out broad sveeps of territory for the system to cover . for example , step 2 of the seven is " to try to notice regularities , patterns , e . nd exceptions to patterns , in the de . ta " [ Lenat 8 ' 3e . p . ' 37 l Lenat himself recognizes that his program , being concerned vi . th the " big picture " , can only approximate a solution to the problems posed in ! \ illy implementing step2 : " Step 2 in the model innocuouslyre < ltJ ! S ' tS the leerner to be observant for recognizable patterns . That a : s : rum . e : s : that he / she / it ha : s : a large store of known patterns to recognize , or i : s : vorking in a vorld vnere an adequate set ce . n be learned very quickly . " . . . the process of ' recognizing ' ! > lends continuously into ' analogizing ' . " ( p . 38 ) Domains in vhich Lenat can best employ his heuristics methods have : s : uch characteristics a : s : : many objects and operators and many types of both ; several types of rele . tion : s : among objects and among operators ; lots of heuriS ' tics l > ut rev algorithms to follov in exploring the domain . These domains shoUld he . ve been little explored preViously , and shoUld proVide a vay to conduct or : s : imUle . te experiments [ Lenat 8 ' 3b , pp . 91 - 941 He advocates studying diff ' icUlt or complicated domains , ones that are ' 1ush vi . th structure " [ Lenat 8 ' 3c , p . 2851 In contrast , the Seek - Vhence domain ha : s : fevol > jects and is simple in structure . Nonethele : s : : s : , it represents a complex . if not complicated ( to use our terminology from Chapter One ) . domain in the sense that the central problems of indUt : tive thought can be encountered here . It m . e . y be that the broad sveeps and structurally rich domains Lenat favors ce . n be served e . dequatel y by e . n ' 142 attribute - based representation system . because the concepts grov te . 11 rather than deep . Vi th the accretion model . nev ideas a . re built upon old ones . giving a tover - like effect as the system explores " " interesting " " ideas to the fU ! lest . Rich underlying structures are not necessary to the type of upve . rd - thrusting concept generation that goes on in these programs ; the approximations offered by attribute - based representations are good enough to P . ermit good upve . rd progress . Vhen . hovever . ve stop to explore deeply the small portions - - the nooks and crannies - - of the broe . dly - svept territory . ve need to capture underlying structure ! . descriptions . It may very veil t > e that there is . at present . not enough computing pover in a single system to be both broad and deep . But AM developed its ideas from first principles . from very primitive roots . Hov can it nor t > e deep as vell as broad ? The ansver to this is that AM ve . s accretive . It formulated many ideas . some good and some less fruitfUl . In e . sense . it is akin to a story - generating program as opposed to a story - understander . It could construct vhatever ideas it liked ; someone - in fact . Lene . t himself - ve . s bound to notice the " " vinners " " . An anel . ogous understander vould have to find a ve . y to represent concepts vith vhich it ve . s presented vithout losing any important facets . The difference betveen programs of these tvo types is like the difference betveen the charges : " Find something interesting . . . . and " Here is an interesting idea . Do you get it ? " " . Neither problem is particularly easy ; they are just different . each vith its ovn difficulties . Fine . Uy . one problem ve attempted to address in Seek - Vhence ve . s identified very clearly in [ Lenat 8Jc ) : " " The carrying el . ong of multiple representations simultaneously . and the concomitant need to shift from one to another . has not t > een much studied . or attempted . in AI to date . . . . . . ( p . 283 ) Ve 143 hope that our efforts to implement a system that supports reformulation vi . 11 be the first step in attacking this problem . CHAPTER FIVE PERIORMANCE . PROBLEMS . AND EUTURE DIRECTIONS • 145 J . . . IMPU : MENTJ . . TION J . . ND PERFORMANCE The Seek - Vhence program currently consists of approximately 5400 lines of Franz Lisp code . Because it is still under development . the program . is running interpreted rather than compiled . This , comt > ined vith the fact that it runs on a V J . . X 11 / ? SO vhich also serves an entire sme . 11 - college computing operation , slo - vs Seek - Vhence dovn a bit . Nonetheless , successfUl runs are gener ! lly completed in under ten minutes of reel time . UnsuccessfUl runs take a bit longer ( potentially forever ) , as the progre . m threshes at > out for a solution . 1 . SYSTEM PER . FORMJ . . NCE In order to get some perspective on the current program ' s streng ~ hs and weaknesses , let us go through the " Blackburn dozen " - - the tvelve sequences ve presented to tventy - five college students - and enaJ : yze the system ' s performance on those problems . ( 1 ) 1 1 2 1 2 3 1 2 3 4 The program threshes hopeless ! yon this one , although it readily solves " 1 2 1 2 3 l · 2 3 · 4 . . . " [ see J . . ppendix I . The problem seems to be that the initi ! l C - group interferes vith the system ' s ability to find the lengthening S - groups . Vhen it does find them , it seems unable to push the correct notion beyond the template level . Lingering high - level interest in C - groups and lov - level rediscovery of C - groups combine to cause this unhappy state of at ' fairs . ( 2 ) 1 2 3 4 . . . Fortunately , the program can solve this one - end quite readily , in just under one minute . ( 3 ) 2 1 2 2 2 2 2 3 2 2 4 2 . . . This is hopeless as yet ; ve have not even attempted it . There is far too 146 much interference - - terms having multiple potential roles . ( for example , in the segment " l 2 2 " , the middle 2 could be part of a C - group or part of a Countup . ) This particular sequence is one of our favorite examples . It has been , end continues to be , a distant goal . ( 4 ) l 2 2 3 3 3 4 4 4 4 Turnabout is fair play . Here , the initial S - groups - - ( 1 2 ) and ( 2 3 ) - interfere vi . th the bUdding C - group notion . The central problem here is analogous to that in sequence ( 1 ) - the correct notion is discovered , but cannot seem to break through into a hypothesis . Not surprisingly , in vievof the sequence ( l ) commentary , the system ~ solve the sequence problems " 2 2 3 3 3 4 4 4 4 . . . " and " 1 1 2 2 2 3 3 3 3 ( 5 ) 1 8 5 8 1 8 5 8 . . . In this sequence , the program finds the Y - group " 1 8 5 8 1 " and· doggedly clings to it . Ve stopped it after a fifteen - minute attempt , since it seemed to make little progress . Note that it can , hovever , solve the sequence " 1 8 5 8 1 1 8 5 8 1 . . . . ( 6 ) 2 l 2 2 2 3 2 4 2 5 Age . in . there is too much interference here , combined vi . th an alternation or terms . This is beyond the current system . ( 7 ) 2 3 1 2 3 2 2 2 3 3 3 3 2 3 4 4 4 4 . . . This is fer beyond the current system . It combines interference . interleaving , and graving group lengths - all features that meke a sequence problem more difficult . ( 8 ) 1 2 2 3 3 4 4 5 The system solves this vi . thin three minutes . ( 9 ) 1 2 3 3 4 4 5 5 5 6 6 6 . . . This wl prove difficult for a vhile yet . The sUbtle pattern ofgrovth in • 1 47 group lengths vill tex the system ' s representation scheme . ( 10 ) 9 1 9 2 9 ' 3 9 4 ' . . The only problem here is the elternation of terms of vhich at lee . st one is non - constant . This vill probably be the next sequence solved by the system . ( 11 ) 1 8 1 2 1 8 1 2 ' 3 2 1 8 1 2 ' 3 4 ' 3 2 1 8 1 2 ' 3 4 . . . This sequence is he . rd . There is interference betveen the groups , vhich grov at both ends . The expressive pover is available , but the system gets bogged dovn in spurious relationships . ( 12 ) 1 8 5 5 8 1 1 8 5 5 8 1 The system solves this , but can take up to tventy minutes to do so . It finds a Y - group , but often it is the Y - group " ( l 8 ( 5 ( 5 8 1 1 8 5 ) 5 ) 8 1 ) " , rather than the one ve vould like . The need for " cosmetic reform " becomes evident in cases such e . s this . In summary , then , the current Seek - Vhence program . can solve only three of the Blackburn dozen - problems 2 , B . and 12 . Vi th slight extension , it should solve problem 10 e . s vell . It vill have to cling less forcefully to its original formulation in order for it to solve problems 1 . 4 . 5 . and 6 . The system ' s interference handling vill need improvement before it can handle problems ' 3 . 7 . and 11 . The solution of problem 9 vill probably require that group lengths be used e . s manifestations ( they are not , currently ) . In addition . the system vill need the e . bilityto use its representational pover more effectively . 2 . HUMAN PERIORM . ANCE Vhen ve presented these sequence problems to our human subjects [ Meredith 83 ] . ve permitted them to take e . s much time e . s theyve . nted on each sequence . A subject could " pass " on a particular sequence if it proved insoluble . The subject could not return to a passed sequence . 148 Ve kept a record of the number of people vho passed on each of the sequences . Ve also timed the subjects , in order to determine vhich sequences took the longest time to parse . Ve assume that these vill tend to be the most difficUlt for human solvers . Problem ( 7 ) vas definitely the most difficult for our subjects . Seven people passed on it ( no more than t ' li ' O people passed on any other sequence ) , and those vho did solve it took far ·more time on it than on any other sequence . Problem ( 11 ) vas also clearly more time - consuming than most others . The . " easiest " problems vere ( 2 ) and ( 10 ) , folloved by ( 8 ) , then ( 4 ) and ( 5 ) . then ( 6 ) and ( 12 ) . and then ( 1 ) , ( 3 ) , and ( 9 ) . Ve find it heartening that the problems Seek - Vhence has been able to solve , and those vhich ve feel it is closest to soiving , are among the easier problems for humans , vhile those our system finds difficult are also difficult for humans . B . PROBUMS The original goals set for the Seek - Vhence program vere and still are : 1 ) to discover non - mathematically - sophisticated patterns in sequences of nonnegative integers ; 2 ) to represent those patterns as concepts constructed from eight " primitive " concepts - - Constant , Countup , C - group , S - group , P - group , Y - group , Cycle , and Tuple ; J ) to be able to reformUlate the pattern descriptions fluidly , by the technique of " slipping " , vhen the description is non - predictive or non - optimal . Each of these goals has been met to some extent , but more " VOrk vill be required to implement a system that realizes them in full . From our discussion above , it 149 becomes clear that the Seek - Vhence program 1 ) fails to notice interleaved sequences of any complexity ; 2 ) is unable to handle interference vell ; 3 ) clings too tenaciously to its first organizing notion . In the folloving sections . ve " Ifill discuss these and other problems e . nd " Ifill present our current though ts as to hov to solve them . 1 . IMPLEMENTATION FAUX PAS As in e . nyfairlysubste . ntial system vritten over a period of years . there are no doubt some inconsistencies and quirks in the current implementation of Seek - Vhence . The present system vas programmed by one person . and so reflects the veaknesses and idiosyncracies of a particular style . These include a fairly conservative . but readable . expr - based approach to Lisp programming and some disregard for " neatness " in cleaning up old . unve . nted structures . Seek - Vhence is unabashedly " ad hoc " . There has been no focus on separating domain - dependent from domain - independent processing , structures . or approaches . The only excuse for this is that the program is aproto - effort in the development of a generic processing structure and approach . People " lfi . th similar ideas have been programming and continue to program systems for Jumbo ( vord unscrambling ) . Letter Spirit ( style extrapolation ) . and Copycat ( letter - sequence analogies ) . Vhen all the systems are completed . ve vill hopefully be able to abstract out common . domain - independent features vhich vill be generally useful . This is a " high - risk . high - gain " strategy . Ve hope it vorks . If all of our problems vere ones of programming style . ve vould be delighted . Unfortunately , there are some more fundamental vorries . not the 150 leest of which is that there are some non - difficult sequences that the system cannot parse . 2 . UNCONQUERED SEQUENCES . Although Seek - Vhence does a good job in e . ne . lyzi . ng the simplest of sequences and can do some medium - difficulty ones . it fails on some not - very - he . rd ones . It is unable to handle independent interleaved sequences vhen the components are anymore complicated than constants . That is , it can do ' " 37 : 37 : 37 . . . " butitcannotesyetdo " 1210 : 34105610 . . . " . J . me . jar reeson for this problem is the ve . y bonds are used by the system . Currently , bonds are used only in a bottom - up feshion , to push up gloms . Hovever . there is knowledge in the platoplesm of the bond types favored by the various Platonic classes . For example , the existence of many " adjacent sameness " bonds might be a clue that C - group is astroni candidate es an organizing notion . because C - groups are closely associated vi th such bonds . . As yet , the system makes no direct use of this information . It is important to note that such information must be used cautiously , since it may lead to false conclusions . In the sequence " 2 1 2 2 2 2 2 J 2 2 1 2 . . . - . for example , there e . re many adjacent se . messes betveen 2 ' s , but the ·c - , roup " notion is not involved in the correct parse . ICnovl . edge about manifestations and actue . lizations . vhich could be useful in suggesting e . lternati ve organizing notions or in indicating the existence of interleaved sequences . is virtually unused by the current system . Slip - scouts , described later . vi . 11 begin to make some use of this information . The Seek - Vhence system cannot analyze sequences that display a good dee . 1 of interference - such es " 2 1 2 2 2 2 2 J 2 2 1 2 . . . " or " 111 121 I J 1 . . . " . People seem to overcome interference by looking for a 1 51 place in the sequence vhere there is little conf \ lsion - - a place vhere the interference is minim . al . Seek - Vhence may need to look more closely at terms that have rev bonds and use these a guideposts for organizing the sequence . This strategy . like looking for interleaved sequences . is a relatively high - level one . suitable at the Slip - scout level and beyond . The system ' s inclination to cling to early organizing notions is related to the other tvo problems . and probe . bl y stems from the same root causes . In addition . ve may have to tinker vith our slipping mechanisms . to see if ve can get a bit more movement avayfrom failed ideas . 3 . LOV - LEVEL MYOPIA The lov - level processes of Seek - Vhence operate vi th a micro - level vocat > Ulary . dealing vith localized stru . : : tures and providing no overvievofthe· sequence pattern as a vhole . This naturally leads to the phenomenon that ve ce . 11 " lov - level mycpia " . There can be some micro - level rigidity as aresUlt . vi . th the lover - level processes clinging to certain favorite groupings ( usuallygloms formed early in the processing ) . This can get in the vayofpushingup neatly balanced structures - - ve can get " ( ( 1 2 ) 3 ) " handed up instead of a preferred " ( 1 2 3 ) " - but it is not a devastating problem . Its effects vi11 be mitigated vhen divesting pushes . cosmetic reform . and " form - polishing " are implemented . 4 . HIGH - UVEL HAUGHTINESS The higher levels of Seek - Vhence seem to suffer as ~ U from some basic rigidity . Once the high levels teke over . the imposition of top - dovn . model - driven processing does not appear to leave quite enough room for lover - level coercion of change . This leads the system to stick vi th a formUlation type or platonic class longer than it shoUld . to be optimally 152 effective . It becomes too difficUlt for lover - level processes to push up a notion vi th sufficient force to stage a " coup " . Ve have often " Vatched in frustration as a good notion has come up repeatedly to become a template , and then to disappear . never to reach hypothesis status . Ve plan to investigate this unfortunate phenomenon . vhich ve call the " Little Prince Problem " : Lovlevels : " See my pretty bond - chain ? " High levels : ' ' Not nov - - I ' m trying to parse this sequence . " DIVESTING - PUSHES A " divesting push " wl occur vhen a gnoth contains a glom that causes it " unhappiness " in the sense of deereesing its stability , but the neighboring gnoth does not have any particUlar attraction for the glom either . In this ease , the parent gnoth may push the glom out to the neighbor or may simply call for the creation of an intervening gnoth to hold the unve . nted glom . These pushes wl permit gnoths to vork on conforming to the hypothesis , or suggesting veaknesses in it . Implementation of divesting pushes vill be aflrst step in giving more credence to lov - level suggestions , thereby decree . sing the degree of ' ' high - level haughtiness " . They vill also serve es a safety V8l ve for the current reigning class . by increasing gnoth stability vithout calling for a nev monarch . S . COORDINATION PROBUMS Although Seek - Vhenee relies on independent , parallel processes to carry out its vork , there is nonetheless some need for coordination of resUlts . For instance . the hypothesis and the gnoths must be in agreement ( at lee . st to some extent ) on the current viev or parse of the sequence . Devising a 1 53 technique for insuring this coordination has been a major problem . and one vhich ve are not certain is solved at present . ! he levels of h ypothesis - gnoth equivalence give us something of a handle on the problem , but it voU ! d be nice not to he . veto vorry al : > out it at all . ! hat is . it voU ! d be nice simply to change either the gnoths or the hypothesis and be certain that the other voUld automatice . llyfe . 11 into agreement . Ve he . ve not . yet devised such a mechanism . nor are ve sure that one exists . 6 . HER . KY - JERKY One goal of Seek - Vhence vas fluid reformU ! ation . the e . l > ility to move easily from one concept representation to another . ! he current system is only pe . rtie . lly succeS $ f \ . ll in meeting this goal . Its reforms . at the highest level . can seem a little rough . Instead of the smooth transition ve vent , ve get something more e . kin to the jerky motion felt vhen one rides to the top of the Gateve . y . Arch in St . Louis - - one g ~ ts there . but the ride is not as continuous as one voU ! d like it to be . ! his me . y point to the need for another or level or tvo of processing to ease the transitions . or it may simply require more ce . re in programming . Belov . ve suggest the possibility that a richer system of linkages in the platoplasm might help mitigate this problem . DIFFERENTIATING PLATO - LINKS ! he platoplasm ·s link system current ! y consists of undifferentiated " slipping links " - the s - links . It is very likely that in using differentiated links , ve voU ! d be e . l > le to give the system a more rational collection of slipping alternatives e . nd the e . l > ility to e . ppl y more constraints on slippage possibilities in pe . rticU ! e . r situations . ! hat is , instead of having to consider slippage possibilities on the relative ! y gross grounds of s - llnk slipperiness in 154 conjunction " ' N ' i . th " absolute bond pulls " , the system may be able to use e . finer - grained decision strategy . Ve therefore need to investigate more deeply vhat types of links belong in the ple . toplasm and hov best to incorporate them in to the system ' s processing . This is a very t > ig question in e . n abstract sense , ' cut implementation in Seek - Vhence shoUld not t > e too difficUlt , e . nd may go a long ve . ytovard conquering the " herky - jerky " problem . C . THEEUTURE Ve plan to revise and extend the Seek - Vhence system in several vays in the f \ lture , and at many levels of e . t > straction . There are some relatively minor details that need to t > e addressed , some major additions to be me . de , and Ultimately ve " ' N ' i . 11 have to redo the system in e . more structured , dome . in - independent fashion . 1 . MINOR DETAILS Some of the minor reforms " l ' lill t > e feirl y simple to include , ' cut one or tvo " ' N ' i . 11 require some ce . refUl thought before implementation can t > e considered . GREASING PLATO - LINKS As vas previously mentioned , it is possible that various platonic classes vill t > e " closer " toe . given class at different times . This means that the s - links between concepts should have different slipperiness values at different times . The current system does not provide any mechanism for changing s - link slipperiness . nor does it explore the notion of " relative closeness " in anyvay . It voUld be interesting to investigate this question e . bit further in later versions of the program . This is an example of an addition that vill be fairly easy to ' 155 implement once we decide exactly what we want to do . CHANGING PLATONIC BOND STRENGTHS Simile . rl y , the degree to which a given platonic class favors certain types of bonds may change during the course of processing . Changing the bond strengths would not be he . rd to implement . but the central question - - not a · particularly easy one - - would be hovto have the system decide vhen it should be done and hov much to change the strengths . ADDING AND REMOVING BOND - EIELDS An interesting problem is the central one of " salience " . Vhe . t features of a sequence are of central importance ? Vhe . t should be used to describe it ? Ve have built into Seelc - Vhence the cape . city to use any field of e . glom for bonding or glomming purposes . but as ve . s mentioned earlier . " Ve currently use only " value " for glomming and " value " or " span " for bonding . BUilding in areal cape . city to add to or subtract from these fields is critical in e . ccure . telype . rsing some sequences - such as " 1 2 2 3 J 3 4 4 4 4 . . . • - vhere the length ore . group and its content or position in the sequence are intimately connected . Ve certainly hope to bUild this cape . city into f \ Jture versions of the system . BOX STRUCTURE EDITOR A nice little project associated vi . th Seek - Vhence , but outside or the mainstream of its processing . is the construction ore . " box - tree· editor . The system coUld use this to model its ovn reformulation actions by editing e . hypothesis ' box to reflect e . nev modification of the hypothesis . The current ( heavy - handed ) technique is to completely scrap and replace the box . 156 2 . MAJOR GOALS Ve have some major plans for future revisions of Seek - Vhence , in addition to the " fix - ups " mentioned above . These deal vith broader issues vi thin the dome . in of our project , issues vi th perhaps more " global " significance . FORM POLISHING " Form polishing " is the term ve use to cover the notions of cosmetic reform - reformulation done to improve the look of a hypothesis - and interne . 1 gnoth reformulation in order to achieve structural equivalence vi th the hypothesis . A gnoth displays structural equivalence vi . th the hypothesis vhen its e . ctue . 1 , glom - be . sed form agrees vith the deep - structure form given it e . s e . model . The deep - structure form is that of one frame of the hypothesis - - the frame corresponding to the gnoth . These reforms vill probably not be easy to carry out , because they are not central to having a " correct " parse of the sequehce , but rather the " best " parse , and for the " right " reason . That is . form - polishing is more heuristic than is pe . renthesization of the sequence , end so its implementation vill probably be even less deterministic than normal Seek - Vhence processing . USING MANIFESTATIONS - SLIP - SCOUTS One of our major goals for the future vi1l be to implement " Slip - scouts " , processes that vi . 11 begin to use information that the system has gathered about the sequence , but has e . s yet not used . Slip - scouts vi1l be looking at bonds , manifestations , and actualizations , in order to suggest vays in vhich the sequence could be parsed . They vill l > e especial ! y sensitive to interleaved independent sequences , such as " 1210 ' 3 4 10 5 6 10 . . . " , and vill suggest parses vith deeper nesting of structures than is required for the simpler types of , • 157 sequences . The e . ddition of Slip - scouts is extremely important if the system is going to move on to parse more difficUlt sequences , e . nd so vill be one of the first gee . ls ve e . tte . ck . FINIR - GR . AINED REFORMS Vhen reform uJ . ation is required , ve nov use a rather heavy - handed approach - - reform at the top . Vhat the s ~ tem nov needs is the ability to perform finer - greined reformUlations . perhaps retaining the reigning class as monarch , but e . dding some " epicycles " to the hypothesis . The reigning class may be the right one , but because there are deeply - nested structures vhich the s ~ tem does not perceive e . s such , there may l : > e a good deal of " unhappiness " in the s ~ tem - the ste . l > ility me . y t > e lov . Rather than toss the monarch out , the s ~ tem shoUld sometimes investigate other reforms , reforms geared tove . rd finding a deeper exple . ne . tory structure . LE . ARNING There are tvo essential requirements for a successful " inductive learning " progre . m . First , it must discover that vhich it is to learn . Second , it must remember vhe . t it has discovered . The Seek - Vhence program has made some progress in the area of discovery . Unfortunately , as currently structured . Seek - Vhence does not " remember " a parsed sequence in order to aid in parsing another , or for purposes of comparison . Ve vould like to build upon our idea of " freeze - dried " hypotheses to implement a facility vhereby old , remembered hypotheses could , in essence , offer themselves up e . s models for parsing nev sequences . That is , the old hypotheses coUld be loosely " plugged in " at various . levels of the sy : stem , and vhen asimilar structure is created coUld interrupt the proceedings to present 158 themselves as potential models . This , and the ability to do Bongard - like analogy and generelize . tion problems ' With collections of sequences , ere more removed , but potential goals for fUture research . D . CONCLUSION Seek - Vhence is not a perfect program . It sutrers from problems at several levels and of several types . Nonetheless , it does serve as an example of a nev approach to the programming of " intelligent " systems , a sample of a nev paradigm . The hallmarks of this e . pproach ere : concepts ' With underlying levels of rep re sen te . tion ; e . representation scheme the . t encourages n uid reformule . tion ; the e . l > ility to accept e . nd react to evidence ; e . nd a nondeterministic , pe . re . llel system orge . ni . ze . tion . Ve believe that these ere important notions . ones the . t should be explored fUrther e . nd in many domains . They may prove useful - - and even critical - - in the development of systems that possess " common sen ~ e " and the ability to relate concepts in unexpected and novel vays . • APPENDIX ' . ' " " - - - - - - - - - _ , , , ~ 11 ~ - JI r· - - - ~ i ' : > ' - 01 / " ' - . . . . 1 I ! ~ ' . i \ . . . / ! r - - i I . , . ' · - ; i . . . . . . I I . · - , 1 r . . , I L . . _ . . I r - - ~ 1 , - - I ' " r ' ' / ' - ' . I ! I " ' - - - - ' ' . I I , _ _ _ _ 160 - - · - , ~ , - - - - - " I , - , I•• , - - - ' ! : l ~ I ' ' - i " . , I ' . ' , _ _ _ _ , . - ~ " - - • 1 ' ' ; ! ' . . . . . . . • ' ' ' · • \ . ! I \ l : ' 1 ' • , , . . . . · . . . _ ' I < . . - f ' ~ I ' ' I I : I . • . . . . , , , - I _ _ _ . . , ; . . L - - - - - - - - ' - - - - - ' ; . ! \ - - - - ~ ·1 ' ~ - . . . . . _ 1 _ . • J ; , . _ _ ; J , - - - - i ( ' " ' " ' i . , _ _ . . . . · : i ~ - ' ; \ ~ ~ ~ - - · ; c - - . ~ • . . . . . . _ . . . , t ' ' I . I , . . - · - , I II • f f . . . _ _ _ , ! ' - - - - - ' ' _ , . _ I ; - , , \ I I ~ , , , . I ' . I · - 1 . ' ! I· . \ \ . . . , J ~ _ j I r - - ·1 i - : : : - - - , , 1 1 . ' , , · - · - . . , - I ' ' , . ' - " ~ ' : : : • \ / : ! r . . . ' t j ~ ~ _ ) f I 1 \ ~ ' ! . . . . . - - · I I ~ - - I L : ' ~ - _ _ J - r : : : = = - 1 I ' \ ' j ' I . I I _ ! I ! - - I I : > C I _ , - _ _ J r - ~ ; , ~ . . . . . - . ~ . . \ I 1 , • • . J i j ~ , , . . . ' I ' i ' · ' ( " i · - · , j ' r . i Cl I , ~ . . I " I : > 1 L ' : - - " ' 1 61 The program ' s equivalent of the form ~ ( C - group ( Count up I ) shared ) : - > ( build - box ' ( C - group ( same pstruc I ) ( same pstruc I ) ) ' ( ( pstrucl ( Countup 1 ) ) ) ) boxS - > ( show - box ' boxS ) ( 1 ) - ) ( show - box ' boxSl ( 2 2 ) - ) ( show - box ' boxSJ ( 3 3 3 ) - ) ( show - box ' boxS ) ( 4 4 4 4 ) ' 162 The program ' s equivalent of che form - - - - - - - - - ( Tuple I 3 I ( Count up I ) 8 shared I ) ) : - > ( build - box ' ( Tuple I 3 ( ( same ' ( I pstruc2 boxl 2 - ) ( show - box ' box12 ) ( I 8 I ) - ) ( show - box ' box I 2 ) I 2 8 2 ) - ) ( show - box ' box12 ) I 3 8 3 ) - ) ( show - box ' box12 ) ( 4 8 4 ) pstruc2 ) 8 ( same pstruc2 ) ) ) I Count up I I I ) ) 163 The program ' s equivalent of the form - - - - - - - - - . . . ( Cycle 1 3 ( ( Count up I ) 8 shared ) ) : - > ( build - box ' ( Cycle I 3 ( ( same ' ( ( pstr : uc3 boxl9 - > ( show - box ' box19 ) 1 - > ( show - box ' boxl9l 8 - > ( show - box ' boxl9 ) 2 - > ( show - box ' boxl9 ) 3 - > ( show - box ' boxl9 ) 8 - ) ( show - box ' boxl9 ) 4 - ) ( show - box ' boxl9 ) 5 - ) ( show - box ' box19 ) 8 - > ( " show - box ' boxl9 ) 6 pstruc3 ) 8 ( same pstruc3 ) ) ) ( Count up I ) ) ) ) 164 The Sequence 3 7 3 7 3 7 - > ( startup ) please enter a term : 3 doing task Sparkler - plus on ( glint ! glint ! 2 ) doing task Dissolver please enter a term : 7 doing task Sparkler sparkl - - - between glintlglint2 doing task Tester doing task Dissolver on ( glintl ) doing task Sparkler spark2 - - - between glintlglint2 doing task Sparkler - plus on ( glint2 glintl 10 ) spark3 - - - between glint2glint1 doing task Sparkler - plus on ( glint2 glint2 2 ) doing task Sparkler - plus on ( glint2 glintl 10 ) spark4 - - - between glint2glintl doing task Tester doing task Tester doing task Sparkler - plus on ( glint2 glintl 2 ) sparks - - - between glint2glintl doing task Tester doing task Tester please enter a term : 3 doing task Sparkler - plus on ( glint3 glintl 2 ) spark6 - - - between glint3glint1 doing task Dissolver on ( glint2 ) doing task Sparkler doing task Sparkler - plus on ( glint3 glint2 10 ) spark ? - - - between glint3glint2 doing task Sparkler - plus on ( glint3 glint3 2 ) doing task Sparkler - plus on ( glint3 glint2 2 ) sparks - - - between glint3glint2 doing task Tester doing task Tester doing task Sparkler doing task Sparkler - plus on ( glint3 glint2 10 ) spark9 - - - between glint3glint2 doing task Tester doing task Tester doing task Bonder on ( Sarne print - value ( remote ) glintl glint3 ) bondl - - - between glint1glint3 doing task Sparkler doing task Sparkler spark10 - - - between glint3glint1 doing task Glorn - scout 165 Sarne - cover proposed - - > glint1 Sarne - fence proposed - - > glint1 doing task Glomtester on ( Same cover glint 1 ) doing task Glomtester on ( Same fence glint1 ) The system now gloms the first two terms , givingaparseof ( 37 ) 3 . doing task Glommer on ( Same print - value fence ( glintl glint2ll Glommer for Same print - value fence members : ( glint1 glint2 ) doing task Sparkler - plus on ( glom1 glom1 10 ) doing task Glom - inspector on ( glom1 ) doing task Glommer on ( Same print - value cover ( glintl glint2 glint3 ) ) failed to glom ( glint1 glint2 glint3 ) doing task Plato - scout on ( Cycle gloml J doing task Tester doing task Sparkler doing task Bonder on . ( Same print - value ( remote ) glint1 glint3 ) doing task Template - scout on ( glorn1 J doing task Template - applier on ( gloml ( Cycle 3 2 ( 3 7 ) ) ) create - ternplate - glom ( Cycle 3 2 ( 3 7 ) ) ( glom1 ) top - down glom glom2 A template is made . · template made : ( form ( Cycle 3 2 ( 3 7 ) ) doing task Template - evaluator check - cycle template ( Cycle 3 2 ( ( 3 7 ) ) ) A hypothesis is created . doing task Hypothesizer ( Cycle 3 2 ( 3 7 ) ) doing task Glom - scout doing task Sparkler sparkl1 - - - between glint1glint2 doing task Sparkler - plus on ( glorn1 glint3 10 ) sparkl2 - - - between glom1glint3 doing task Sparkler doing task Gnoth - maker top - down glom glorn3 gnoths constructed doing task Tester doing task Tester doing task Call - term 166 please enter a term : show - hypothesis ( Cycle 3 2 ( 3 7 ) ) The next term will confirm the hypothesis . please enter a term : 7 doing task Hfilter new term being hypothesis - filtered through ( Cycle 3 2 ( 3 7 ) ) top - down glom glom4 I have a guess ! The system ventures a guess . hypothesis : ( Cycle 3 2 ( 3 7 ) ) 3 7 3 7 It is correct - - this time . enter no if wrong , ok if right ok bye 167 The Sequence 3 7 3 3 7 3 please enter a term : 3 please sparkl spark2 spark3 spark4 sparks enter a term : 7 between glintlglint2 between glintlglint2 between glint2glint1 between glint2glint1 between glint2glint1 please enter a term : 3 spark6 between glint3glint1 spark ? - - - between glint3glint2 sparks - - - between glint3glint2 spark9 - - - between glint3glint2 bondl - - - between glintlglint3 sparklO - - - between glint3glint1 Same - cover proposed - - > glintl Same - fence proposed - - > glintl Glommer for Same print - value fence members : ( glintl glint2 ) failed to glom ( glintl glint2 glint3 ) create - template - glom ( Cycle 3 2 ( 3 7 ) ) ( glom1 ) top - down glom glom2 A template is created after three terms , template made : ( form ( Cycle 3 2 ( 3 7 ) ) state working coverage ( 1 2 ) glom glom2 ) check - cycle template ( Cycle 3 2 ( ( 3 7 ) ) ) sparkll - - - between glintlglint2 spark12 - - - between glomlglint ~ top - down glom glom3 gnoths constructed We ask the system to " show " us its structures . please enter a term : show terms of the sequence : 3 7 3 bonds : bondl Same print - value ( remote ) gloms : ( glintl glint3 ) gloml ( Same print - value fence ) - - > ( 3 7 ) terms 1 to 2 glom3 pseudo - - > ( ( 3 7 ) ) terms 1 to 2 gnoths : class : Gnoths name : gnoth 1 frame : O plato - class : Cycle glom : glom3 notes : nil 168 form : ( ( ( Cycle 3 2 ( 3 7 ) ) pure ) ) state : stable range : ( 1 2 ) A hypothesis was made . We ask to see it please enter a term : show - hypothesis ( Cycle 3 2 ( 3 7 ) ) The next term will deny the hypothesis . please enter a term : 3 new term being hypothesis - filtered through ( Cycle 3 2 ( 3 7 ) ) spark13 between glint4glint2 spark14 between glint4glint3 spark15 between glint4glint3 spark16 between glint4glintl spark17 between glint4glint3 set - out - - validity : 0 top - down glom glom4 groups : ( ( glintl glint2 ) ) glom : ( glintl glint2 ) top - down glom glomS top - down glom glom6 top - down glom glom71 top - down glom glom8 gnoths : ( gnothl gnoth2 gnoth3 ) The system will continue to ) et ' ' Cycle " reign . slip - check : stayval : o . o best : nil spark18 - - - between glint3glint4 bond2 - - - between glint3glint4 spark19 - - - between glint3glint4 spark20 - - - between glint4glint3 bond3 - - - between glintlglint4 spark21 - - - between glint4glint1 casts : ( ( Cycle 3 1 ( 3 ) ) ( Cycle 7 1 ( 7 ) J ( Cycle 3 1 ( 3 ) ) ) ( Cycle 3 3 ( 3 7 3 ) ) 169 A new hypothesis is made . new hypoth candidate ( Cycle 3 3 ( 3 7 3 ) ) spark22 - - - between glintlglint2 please enter a term : show - seq 3 7 3 3 The next term will confirm the new hypothesis . please enter a term : 7 spark23 - - - between glintSglintl new term being hypothesis - filtered through ( Cycle 3 3 ( 3 7 3 ) ) top - down glom glom9 I have a guess ! hypothesis : ( Cycle 3 3 ( 3 7 3 ) ) 3 7 3 3 7 The hypothesis is correct . enter no if wrong , ok if right ok bye 170 The Sequence 1 2 I 2 3 1 2 3 4 - > ( startup ) please enter a term : 1 doing task Sparkler - plus on ( glint ! glint1 2 ) doing task Dissolver doing task empty - task please enter a term : 2 doing task Sparkler spark1 - - - between glint1glint2 doing task Tester doing task Sparkler - plus on ( glint2 glint 1 1 O ) spark2 - - - between glint2glint1 doing task Sparkler - plus on ( glint2 glint I 1 0 J spark3 - - - between glint2glint1 doing task Dissolver on ( glint1 ) doing task Bonder on ( Succ print - value ( adjacent ) glint1 glint2 ) bond1 - - - between glint1glint2 doing task Tester doing task Glorn - scout Fred - group proposed - - > glint2 doing task Glom - scout Fred - group proposed - - > glint2 doing task Glomtester on ( Fred group glint2 ) doing task Tester doing task Glomrner on ( Fred print - value group ( glint1 glint2 ) ) Glomrner for Fred print - value group members : ( glint 1 glint2 ) doing task Glomtester on ( Fred group glint2 ) Glomtester failed glint2 doing task Sparkler doing task Bonder on ( Succ print - value ( adjacent ) glint ! glint2 ) doing task Bonder on ( Succ print - value ( ad ~ acent ) glint ! glint2 ) doing task Glorn - inspector on ( glom1 ) doing task Sparkler - plus on ( glint2 glint1 2 ) spark4 - - - between glint2glint1 doing task Tester doing task Plato - scout on ( ( S - group F - group ) glom1 ) doing task Bonder on ( Succ print - value ( adjacent ) glint1 glint2 ) doing task Plato - evaluator on ( F - group glom1 ) doing task Sparkler - plus on ( glint2 glint2 2 ) doing task Sparkler doing task Template - scout on ( glorn1 J create - ternplate - glom ( S - group 1 2 ) ( gloml ) top - down glom glom2 1 71 A template is made . template : ( form ( S - group 1 2 ) doing task Sparkler spark5 - - - between glintlglint2 doing task Template - evaluator on nil doing task Sparkler - plus on ( gloml gloml l 0 ) doing task Gnoth - maker top - down glom glom3 gnoths constructed doing task Sparkler Now comes the first hypothesis . doing task Hypothesizer ( Countup l ) doing task Tester doing task Call - term please enter a term : show - hypothesis ( Countup 1 l please enter a term : show terms of the sequence : l 2 bonds : bondl Succ print - value ( adjacent ) - - ( glintl glint2 ) gloms : gloml ( Pred print - value group ) - - > ( 1 2 ) terms l to 2 glom3 pseudo - - > ( ( 1 2 ) ) terms l to 2 gnoths : class : Gnoths name : gnothl frame : 0 plato - class : S - group glom : glom3 notes : nil form : ( ( ( S - group l 2 ) pure ) ) state : stable range : ( 1 2 ) The next term denies the hypothesis please enter a term : 1 doing task Hfilter new term being hypothesis - filtered through ( Countup l ) • 172 doing task Bonder on ( Succ print - value ( adjacent ) glintl glint2 ) doing task Sparkler - plus on ( glint3 glintl 10 ) spark6 - - - between glint3glint1 doing task Sparkler - plus on ( glint3 glint2 10 ) spark7 - - - between glint3glint2 doing task Sparkler - plus on ( glint3 glom3 2 ) doing task Sparkler - plus on ( gloml glint3 10 ) sparks - - - between glomlglint3 doing task Sparkler - plus on ( glint3 glint2 10 ) spark9 - - - between glint3glint2 doing task Tester doing task Sparkler - plus on ( glint3 glom3 10 ) doing task Bonder on ( Pred print - value ( adjacent ) glint2 glint3 ) bond2 - - - between glint2glint3 doing task Sparkler - plus on ( glint3 glint3 2 ) doing task Sparkler - plus on ( glint3 glomJ 2 ) doing task Tester doing task Dissolver on ( glomJ ) glom3 is not in cytoplasm doing task Tester doing task Sparkler - plus on ( glint3 glintl 10 ) sparklO - - - between glint3glintl doing task Sparkler - plus on ( glint3 glint2 10 ) sparkll - - - between glint3glint2 doing task Tester doing task Tester doing task Sparkler - plus on ( gloml glintl 10 ) doing task Sparkler - plus on ( glint3 glint3 2 ) doing task Bonder on ( Pred print - value ( adjacent ) glint2 glint3 ) doing task Bonder on • ( Same print - value ( remote ) glintl glint3 ) bond3 - - - between glintlglint3 doing task Bonder on ( Sarne print - value ( remote ) glintl glint3 ) doing task Glom - scout doing task Glorn - scout doing task Bonder on ( Pred print - value ( adjacent ) glint2 glint3 ) doing task Sparkler spark12 - - - between glintlglint3 doing task Sparkler doing task Glorn - scout Same - cover proposed - - > glint3 Sarne - fence proposed - - > glint3 doing task Sparkler spark13 - - - between glintlglint2 173 doing task Tester doing task Glomtester on ( Same cover glint3 ) doing task Tester doing task Glomtester on ( Same fence glint31 doing task Sparkler doing task Tester doing task Bonder on ( Succ print - value ( adjacent ) glintl glint2 ) doing task Bonder on ( Same print - value ( remote ) glintl glint3 ) doing task Sparkler doing task Sparkler spark14 - - - between glintlglint3 doing task Sparkler - plus on ( gloml gloml 101 doing task Sparkler doing task Bonder on ( Pred print - value ( adjacent ) gloml glint3 ) bond4 - - - between glomlglint3 doing task Sparkler sparklS - - - between glint2glintl doing task Glom - scout Same - cover proposed - - > glint3 Same - fence proposed - - > glint3 doing task Glomtester on ( Same fence glint3 ) doing task Tester doing task Bonder on ( Same print - value ( remote ) glintl glint3 ) doing task Glomtester on ( Same cover glint3 ) doing task Sparkler doing task Gnoth - setter top - down glom glom4 top - down glom glomS top - down glorn glorn6 top - down glorn glom7 top - down glom glom8 gnoths : ( gnothl gnoth2 gnoth3 ) doing task Glom - scout doing task Tester doing task Bonder on ( Succ print - value ( adjacent ) glintl glint2 ) doing task Plat0 - scout on ( ( C - group S - group P - group Y - group Cycle Tuple ) glom6 ) doing task Template - scout on ( glom6 ) doing task Template - scout on ( glom6 ) doing task Sparkler doing task Template - scout on ( glom6 ) doing task Sparkler doing task Template - scout on ( glom6 ) doing task Sparkler spark16 - - - between glintlglint2 doing task Template - scout on ( glom6 ) • 174 doing task Template - scout on ( glom6 ) doing task Sparkler doing task Reformulator Changing to a new reigning class . Countup - - > S - group doing task Bond - assessor on ( S - group 8 . 0 ) Reformulation is performed . doing task Gnoth - operator ( ( PROGRAM ( ( SHIFT - RIGHT gnothl gnoth2 ( glint I ) ) ( ENCLOSE gnothl nil ) ) ) ) top - down glom glom9 doing task Glom - scout doing task Ref ormulator doing task Tester doing task Bonder on ( Succ print - value ( adjacent ) glintl glint2 ) doing task Sparkler doing task Sparkler doing task Bond - assessor on ( S - group 8 . 0 ) doing task Reformulator doing task Bond - assessor on ( S - group 9 . 0 ) doing task Reformulator doing task Bond - assessor on ( S - group 10 . 0 ) doing task Gnoth - caster casts : ( ( S - group 1 2 ) ( S - group I 1 ) ) ( S - group 1 2 ) new hypoth candidate ( S - group 1 2 ) doing task Call - term A second hypothesis has been devised . please enter a term : show - hypothesis ( S - group 1 2 ) please enter a term : show - parse ( ( 1 2 ) ( 1 ) ) please enter a term : show terms of the sequence : 1 2 1 bonds : bondl Succ print - value ( adjacent ) - - ( glintl glint2l bond2 Fred print - value ( adjacent ) - - ( glint2 glint3 ) bond3 Same print - value ( remote ) - - ( glintl glint3 ) 175 gloms : glom8 pseudo - - > ( 1 ) terms 3 to 3 glom9 pseudo - - > ( 1 2 ) terms 1 to 2 gnoths : external - bonds : ( ( bond2 O ) ( bond3 - 5 ) ) internal - bonds : ( ( bond1 10 ) ) equivalence - type : parse groups : nil class : Gnoths name : gnoth2 frame : 1 plato ~ class : S - group glom : glom9 notes : nil form : ( S - group 1 2 ) state : stable range : ( 1 2 ) external - bonds : ( ( bond2 O ) ( bond3 - 5 ) ) internal - bonds : nil class : Gnoths name : gnoth3 frame : 2 plato - class : S - group g lorn : g lorn8 notes : nil form : ( S - group 1 1 ) state : stable range : ( 3 3 ) ; The next term confirms the hypothesis , ; although it is incorrect . please enter a term : 2 doing task Hfilter new term being hypothesis - filtered through ( S - group 1 2 ) top - down glorn glorn10 The system ventures a guess . I have a guess ! hypothesis : ( S - group 1 2 ) ( 1 2 ) ( 1 2 ) ( 1 2 ) It is wrong this time . enter no if wrong , ok if right nope • • 176 please enter a term : show - seq 1 2 1 2 A new term is entered . please enter a term : 3 doing task Hfilter new . term being hypothesis - filtered through ( 1 2 ) 1 doing task Sparkler - plus on ( glints glint4 10 ) spark17 - - - between glintSglint4 doing task Sparkler - plus on ( glints glom8 2 ) doing task Sparkler - plus on ( glint4 glint 1 1 0 ) doing task Sparkler - plus on ( glint4 glint3 10 ) spark18 - - - between glint4glint3 doing task Dissolver on ( glom8l glom8 is not in cytoplasm doing task Sparkler - plus on ( glint4 spark19 - - - between glint4glint3 doing task Sparkler - plus on ( glints spark20 - - - between glintSglint1 doing task Sparkler - plus on ( glints doing task Sparkler - plus on ( glints spark21 - - - between glintSglint3 doing task Sparkler - plus on ( glints doing task Sparkler - plus on ( glints spark22 - - - between glintSglint2 doing task Dissolver on ( glomlO ) glom10 is not in cytoplasm glint3 1 0 ) glint1 1 0 ) glom10 2 ) glint3 1 0 ) glints 2 ) glint2 1 0 ) doing task Sparkler - plus on ( glint4 glint2 10 ) spark23 - - - between glint4glint2 doing task Sparkler - plus on ( glint4 glom8 2 ) doing task Sparkler - plus on ( g ~ intS glint2 10 ) spark24 - - - between glintSglint2 doing task Gnoth - setter top - down glom glom11 top - down glom glom12 top - down glom glom13 gnoths : ( gnoth2 gnoth3 gnothS ) ; We will stay with the reigning class - - S - group . slip - check : stayval : 1s . o best : ( Y - group 4 . 0 ) doing task Tester doing task Bonder on ( Same print - value ( remote ) glint2 glint4 ) bonds - - - between glint2glint4 doing task Tester doing task Tester doing task Sparkler - plus on ( glints glint3 10 ) spark25 - - - between glintSglint3 doing task Tester 177 doing task Bonder on ( Succ print - value ( remote ) glint2 glintS ) bond6 - - - between glint2glintS doing task Sparkler doing task Bonder on ( Succ print - value ( adjacent ) glintJ glint4 ) bond ? - - - between glint3glint4 doing task Sparkler doing task Sparkler - plus on ( glints glom10 10 ) doing task Sparkler - plus on ( glints glom10 2 ) doing task Tester doing task Sparkler - plus on ( glints glomB 2 ) doing task Reformulator doing task Sparkler - plus on ( glints glint4 10 ) spark26 - - - between glintSglint4 ; More reformulation is performed . doing task Gnoth - operator on ( ( SHIFT - RIGHT gnothJ gnothS ( glintJ ) ) ) top - down glom glom14 doing task Tester doing task Bond - assessor on ( S - group 8 . 0 ) doing task Sparkler - plus on ( glints glint4 10 ) spark27 - - - between glintSglint4 doing task Sparkler doing task Tester doing task Sparkler spark28 - - - between glint4glintS doing task Bonder on ( Succ print - value ( adjacent ) glint4 glints ) bondB - - - between·glint4glintS doing task Sparkler - plus on ( glints glint1 10 ) spark29 - - - between glintSglint1 doing task Tester doing task Tester doing task Sparkler doing task Sparkler - plus on ( glint4 glint4 2 ) doing task Bonder on ( Succ print - value ( adjacent ) glintJ glint4 ) doing task Sparkler - plus on ( glints glints 2 ) doing task Sparkler - plus on ( glint4 glom9 2 ) doing task Bonder on ( Succ print - value ( adjacent ) glint4 glints ) doing task Sparkler - plus on ( glint4 glomB 10 ) doing task Bonder on ( Succ print - value ( remote ) glint2 glintS ) doing task Sparkler - plus on ( glints glom9 2 ) doing task Reformulator doing task Tester doing task Sparkler r • • 178 doing task Bonder on ( Succ print - value ( adjacent ) glint4 glintS ) doing task Sparkler doing task Tester doing task Sparkler - plus on ( glints glom9 2 ) doing task Tester doing task Bonder on ( Succ print - value ( adjacent ) glint4 glintS ) doing task Bond - assessor on ( S - group 8 . 0 ) doing task Reformulator doing task Tester doing task Sparkler spark30 - - - between glintSglintl doing task Bond - assessor on ( S - group 9 . 0 ) doing task Tester doing task Reformulator doing task Bond - assessor on ( S - group 10 . 0 ) doing task Gnoth - caster casts : ( ( S - group 1 2 ) ( S - _ group 1 3 ) ) ( S - group 1 ( Countup 2 ) ) new hypoth candidate ( S - group 1 ( Countup 2 ) ) doing task Call - term ; A third hypothesis is formulated . please enter a term : show - hypothesis ( S - group 1 ( Countup 2 ) ) please enter a term : show - parse ( ( 1 2 ) ( 1 2 3 ) ) please enter a term : show terms of the sequence : 1 2 1 2 3 bonds : bondl Succ print - value ( adjacent ) - - ( glintl glint2 ) bond2 Pred print - value ( adjacent ) - - ( glint2 glint3 ) bond3 Same print - value ( remote ) - - ( glintl glint3 ) bonds Same print - value ( remote ) - - ( glint2 glint4 ) bond6 Succ print - value ( remote ) - - ( glint2 glints ) bond7 Succ print - value ( adjacent ) ( glint3 glint4 ) bond8 Succ print - value ( adjacent ) - - ( glint4 glintS ) gloms : glom9 pseudo - - > ( 1 2 ) glom14 pseudo - - > ( 1 2 terms 1 to 2 3 ) terms 3 to S 179 gnoths : external - bonds : ( ( bond2 O ) ( bonds - 5 ) ( bond6 0 ) ( bond3 - 5 ) 1 internal - bonds : ( ( bondl 10 ) ) equivalence - type : parse groups : nil class : Gnoths name : gnoth2 frame : 1 plato - class : S - group glom : glom9 notes : nil form : ( S - group 1 21 state : stable range : ( 1 2 ) external - bonds : ( ( bond6 0 ) ( bonds - 51 ( bond2 O ) ( bond3 - 511 internal - bonds : ( ( bond8 10 ) ( bond7 10 ) ) groups : nil class : Gnoths name : gnothS frame : 2 plato - class : S - group glom : glom14 notes : nil form : ( S - group 1 3 ) state : stable range : ( 3 51 The next term confirms the ~ ypothesis . please enter a term : show - seq 1 2 1 2 3 please enter a term : 1 doing task Hfilter new term being hypothesis - filtered through ( S - group 1 ( Count up 2 ) ) top - down glom glom15 I have a guess ! hypothesis : ( S - group 1 ( Countup 2 ) ) ( 1 2 ) ( 1 2 3 ) ( 1 2 3 4 ) This time the guess is correct . enter no if wrong , ok if right ok bye • 180 GLOSSARY actualization - A . gnoth that exhibits the properties of some Platonic class is e . n e . ctue . Hze . tion of the . t class e . t the socre . toplasm level . attribute - based description - - a concept representation scheme the . t vie " C ' $ e . concept e . s a unit " 1th only globe . 1 properties . rather the . n as e . structure ( see " structure . 1 description " ) . bond - e . cytoplasm - level structure that defines e . relationship ( e . g . . sameness . successorship ) betveen tvo gloms ( or glints ) . box - the active portion of the structure . 1 representation of e . Seek - Vhence concept . e . nd e . repository of information e . bout the value of the . t structure . bursting - e . n operation the . t destroys a glom e . nd its subgloms . leaving only underlying glints behind . ce . tche . 11 gnoth - a rightmost or " tre . iler " gnoth the . t simply holds input terms the . t agree ' With the hypothesis ' Without pe . renthesizin ' them . cosmetic reform - the reformulation of a predictive h ' Yl > Othesis for aesthetic reasons - to ' ive it e . clee . ner form - or to make its strueture conform . more closely to that dictated by the reigning hypothesis . cytoplasm - - the lovest level of the Seek - Vhence wrld : home of bonds . glints . e . nd gloms . dissolving - - e . n operation the . t destroys e . glom . freeing its top - level subgloms into the cytoplasm . divesting push - - a unile . tere . 1 move bye . gnoth to rid itself of e . n interne . 1 glom that decreases its ste . l > llity . Vhether or not a neighboring gnoth he . s e . ny e . ttre . ction for the glom . dut > bing - the marking of a glom e . s a manifestation of a particular Pie . tonic class . : For example , Vhen the system recognizes the . t the glom ( 1 11 ) he . s the properties of a C - group , it will be " dubbed " e . s a C - group manifestation . frame - e . n e . bstre . ctly - vieved hit of a hypothesis : the collection of Seek - Vhence forms the . t vould produce the given hit . freeze - dried hypothesis - the form of ah ypothesis Vi th out its e . cti ve . structural description . 1 81 glint - - Seek - Vhence ' s cytoplasm - level representation of an input - sequence term . glom - - a cytoplasm - level structure representing a plausibly groupe . ble collection of neighboring glints ( and / or gloms ) . gnoth - - asocratople . sm - level structure representing alogice . 1 grouping of terms in the system ' s parenthesization or parse of a sequence . gnoth operation - one of severe . I veil - defined actions - SHIET - UET . SHIET - RIGHT . SPLIT . CAPTURE , ENCLOSE . . FRACTURE , MERGE . NO - OP - - for modifying agnoth or neighboring gnoths . gnoth - hypothesis equivalence - - the representation by a gnoth of one frame of a hypothesis . There are three levels of equivalence - - term , parse . and structure . I ( see pp . 94 - 97 ) . hit - - a query of aSeek - Vhence die . gram or of a box for its next value - - a term or grouping of terms . hypothesis - areformulate . ble structure that models and can extrapolate a sequence pattern , and is constructed from one or more of the eight primitive Platonic concepts . hypothesis filtering - - a process vhere by nev input terms are checked for conformity . vith the reigning hypothesis . Should anevterm not conform to the hypothesis , reformulation begins . ideal types - - the Platonic concepts - - ideal atoms and ideal groups . manifestation - A glom that exhibits the properties of some Platonic class is a menifestati < > n of that class at the cytoplasm level . medical reform - the reformulation . using the evidence presented l > y a nev term or terms , of a hypothesis because it fells to l > e predictive . parenthesization - an expression of a perceived sequence parse . made by putting gnoths over certain gloms and glom collections . . E ' or example . the parenthesization ( 1 2 ) ( I 2 " 3 ) is achieved by putting the first tvo terms into one gnoth and the last three into another . parse - a patterned viev of a sequence . Platonic class ( concept ) - an idealized version of an integer . or one of the eight primitives ( Constant , Countup . C - group . S - group , P - group , Y - group , Cycle , Tuple ) from vhich Seek - Vhence concepts are constructed . i 182 platople . sm - the highest level of the Seek - Vhence vorld . vhich houses the Platonic concepts and information about them . PROGRAM - a series of gnoth operations proposed by a Reformulator tesk in order to modify the system ' s perenthesization of a sequence . pseudo - glom - an inert glom . in that it cannot combine vith other gloms . generally used e . s a cap to prevent the disappearance of a given glom cluster ( one glom or a collection of neighboring gloms ) . reformulation - - the conversion of one concept into another . related . concept in a " reasonable " vay ; a synonym for slippage . s - link - A " slipping link " bet - veen tw Platonic classes . The slipperiness of such a link indicates the system ' s procliVityto slip from one class to another . Seek - Vhence diagram . - a set of prim . i ti ve node types and a structural representation technique wed to give a Visual sense of our concept representation scheme and of the effects of reformulation . Slipnet - - a repository of the information about the Platonic concepts and their interrelationships needed for reformUlation . slipperiness - - ( see " s - link " ) socre . toplesm . . : _ the middle level of the Seek - Vhence vorld . vhicn howes the gnoths . structural description - a concept representation that portrays a concept as haVing separately - describable components , rather than es a single entity vi th only global attributes ( see " attribute - based description " ) . task - an uninterruptible ( and generally small ) segment of a computational process . Te . sks are capable of creating or modifying structures . setting off other te . sks . or querying the wer . template - - a " proto - hypothesis " , developed e . s the first rough statement of an emerging formulation . terraced scan - a technique for progressively deepening the exploration of several pathways in parallel . vhereby the most plausible pathvays are explored more extensively than the less plausible ones . " BIBLIOGRAPHY 184 1 . Anderson . James A . . end Hinton , Geoffrey E . . Models of information processing in the brain . in : G . E . Hinton and J Anderson ( Eds . ) Parallel Models or Associative Memory ( La " M " ence Erlbaum Associates . Hillsdale . NJ . 1981 ) 9 - 48 . 2 . Anderson . John R . . Cognitive Skills and Their Acquisition ( La " Vrence Erlbaum . Hillsdale NJ . 1981 ) . 3 . Anderson . John R . . Acquisition of proof skills in geometry , in : R . S . Michalski . JG . Carbonell . end T . M . Mitchell ( Eds . ) . M4Chine Learning : An Artit " ide . 1 Intelligence Approach ( Tioga Publishing Company , Palo Alto . CA . 1983 ) 191 - 219 . 4 . . A . nzei . Y . , end Sim . on . H . . The theory of learning by doing , Psychologice . 1 Review 36 ( 2 ) ( 1979 ) 124 - 140 . 5 . Berkeley , E . C . end Bobrov . D . ( Eds . ) , The Programming Language LISP : Its Operation and Applications ( Information International . Inc . Cambridge MA . 1964 ) . . 6 . Bierre . Pierre . The professor ' s challenge , The AI Magezine 5 ( 4 ) ( Vinter . 1985 ) 60 - 70 . 7 . Bobrov , Daniel CT . , and Collins , . A . . ( Eds . ) . Representation and Understanding ( . Academic Press , Nev York . 1975 ) . 8 . Bongard , Mikhail . Pattern Recognition ( Spartan Books . Nev York . 1970 ) . 9 . Brachman , Ronald J . Vhat ' s in a concept : structural foundations for semen tic ne ~ rks . International journal ol ' Man - Mac _ hine Studies 9 ( 1977 ) 127 - 152 . 10 . . On the epistemological status of semantic nenrorks . in : N . v . Findler ( Ed . ) , . . A # ociative Ne ~ ks : Representation and Use ol ' Knovtedge byCompurers ( Academic Press . NevYork , 1979 ) 3 - 50 . 11 . end Schmolze . James . An overviev of the KL - ONE kno ~ edge representation system . , Cognitive Science 9 ( 2 ) ( 1985 ) . 12 . Buchanan . Bruce G . • end Mitchell . T . M . . Model - directed learning of production rules . in : D . . A . . Ve . term . an and F : . Haves - Roth ( Eds . ) , Pattern - directed InrerenceSynems ( Academic Press . NevYork : . 1978 ) . 13 . Carbonell , JCT . • Learning l > y analogy : formulating and generalizing plans from past experience , in : R . S . Michalski , JCT . Carbonell . end T . M . Mitchell ( Eds . ) . Machine Learning : An Artil ' icial Intelligence Approach ( Tioga Publishing Company . Palo . Alto . CA . , 1983 ) 137 - 161 . 14 . Clossman . CTray A . • A model of the encoding of perceptuel features according to the concepts implicit in a set of essociatioru . internal memo . Fluid . Analogies Research CTroup . University of Michigan , Ann Arbor . 1985 . 15 . Darden . Lindley , Reasoning by analogy in scientific theory construction . in : R . S . Michalski ( Ed . ) , Proceedings o . fthe Inrernatione . 1 Machine Leartµng Vor . kshop • . A . llerton House . University of Illinois at Urbana - Champeign ( June , 1983 ) 32 - 40 . 185 16 . De . vis . Philip J . . e . nd Hersh . R . . The Mathematical Experience ( Houghton Mifflin . Boston . 1981 ) . 17 . Dejong , Gere . id , An e . pproe . ch to learning from . observation . in : R . S . Michalski ( Ed . ) . Proceedings of the International Machine Learning Workshop , Allerton House . University of Illinois at Urbana - Champaign ( June . 1983 ) 171 - 176 . 18 . Dennett . Daniel C . . Brainstorms ( Bradford Books . Montgomery VT , 1978 ) . 19 . Dietterich . Thom . as G . . M . S . Thesis . Depe . rtm . ent of Computer Science . University of Illinois e . t U rbe . na - Champaign . 1979 . 20 . e . nd Miche . 1ski . R . S . . A compe . re . tive reviev of selected methods for learning from . examples . in : R . S . Michalski . JG . Carbonell . end T . M . Mitchell ( Eds . ) . Machine Learning : An Artificial Intelligence Approach ( Tioge . Publishing Company , Pe . lo Alto . CA . 1983 ) 41 - 81 . 21 . e . nd Miche . 1ski . R . . S . . Discovering patterns in sequences of events . Arfificial Intelligence 25 ( 2 ) ( 1985 ) 187 - 232 . 22 . Evans . Thom . as G . . A program . for the solution of e . class of geom . etric - e . ne . 1ogy intelligence - test questions . in : M . Minsky ( Ed . ) . Semantic Information Processing ( MIT Press . Cam . bridge , MA . 1968 ) 271 - 353 . 23 . Eeigenbe . um . . E . A . and Eeldmen . ] . ( Eds . ) . Computers and Thought ( McGre . v - Hill . NevYork . 1963 ) . 24 . Eredkin . Edvard . Techniques using LISP for e . utom . e . tice . 11ydiscovering · interesting relations in de . ta . in : E . C . Berkeley and D . Bobrov ( Eds . ) . The Programming Languege LISP : Its Operation and . Applications . ( Information Interne . tione . 1 . Inc . Cambridge MA . 1964 ) 108 - 124 . 25 . Gentner . Dedre . Structure - m . e . pfing : e . theoretical fre . m . evork for e . ne . 1ogy , Cognitive Science 7 ( 1983 155 - 170 . 26 . Gregg . L . V . ( Ed . ) . Knovtedge and Cognition ( Le . vrence Erlbaum . . Nev York . 1974 ) . 27 . Groner . R . • Groner . M . • end Bischof . V . ( Eds . ) Methods of Heuristics ( Lavrence Erlbe . um . . Hillsdale NJ . 1983 ) . 28 . Hinton . GeoffreyE . • e . nd Anderson . ] . ( Eds . ) . Parallel Models of Associative Memory ( Lavrence Erlbaum . . Hillsdale NJ . 1981 ) . 29 . Hofstadter . Douglas R . . • GOdel . Escher . Bach : an Eternal Golden Braid ( Be . sic Books . NevYork . 1979 ) . 30 . • Clossm . e . n . G . A . e . nd Meredith . M . J . • Shekespee . re ' s plays veren·t vritten by him . but by someone else of the se . m . e ne . m . e . Technice . 1 R . epQrt No . 96 . Depertm . ent of Computer Science . Indiana University . Bloomington . JU1y , 1980 . 31 . Hofstadter . D . R . e . nd Dennett . D . C . . The Mind ' s I ( Basic Books . Nev York . 1981 ) . • 186 32 . Hofstadter . D . R . . Clossman . G . A . and Meredith . M . J . . SV : A computer model of perception . abstraction . and induction . internal memo . Department of Computer Science . Indiana University , Bloomington . 1982a . 33 . Hofstadter . D . R : . Artificial intelligence : subcognition es computation , Technical Report No . 132 . Department of Computer Science . Indiana University , Bloomington . November . 1982b . 34 . • On Seeking Vhence . unpublished manuscript , 1982c . 35 . • The architecture of . ] uml > o , in : R . S . Michalski ( Ed . ) . Proceedings of the International Macllb1e Learning Vorkshop . Allerton House , University of Illinois at Urbana - Champaign ( June . 1983 ' ) 161 - 170 . 36 . • The Copycat project : an experiment in nondeterminism and creative analogies , A . I . Memo 755 . Massachusetts Institute of Technology , The Artificial Intelligence Laboratory , January , 1984 . 37 . • Metamagical Themas : Questing for the Essence of Mmd and Pattern ( Besic Books . NevYorlc . 1985a ) . 38 . . Clossman . G . • Rorers . D . , Mitchell . M . . HUl > er . G . and Leban , R . • Research on fluid analogies . Fluid J . nalogies Research Group Charter . Department of Psycholoey . University of Michigan , Ann Arbor , April . 1985b . 39 . Holland . John H . • Escaping brittleness . in : R . S . Michalski ( Ed . ) . Proceedi . ngs of the International Machine Learning Vork . rhop • . Allerton House . University of Illinois at Urbana - Champaign ( June . 1983 ) 92 - 95 . 40 . Kotovstcv . Kenneth , and Simon . H . A . . Empirical tests of a theory of hum . an acquisition of concepts for sequential patterns . Cognitive Psychology 4 ( 1973 ) 399 - 424 . 41 . Kuhn . T . • The Structure ofScient1 ! 1c Revolutions . ( University of Chicago Press . 1962 ) . 42 . Langley , Pat . Bre . dshav . G . L . • and Simon . H . . Rediscovering chemistry ~ th the BACON system , in : R . S . Michalski , JG . Carbonell and T . M . Mitchell ( £ds . ) . Mac . bille Lttarnin ~ : An Artincial Inte11igence . Approach ( Tioga Publishing Company , Palo Alto , CA , 1983 ) 307 - 329 . 43 . • Lee . ming to search : from weak methods to dome . in - specific heuriSti . cs . ~ nitiveScience 9 ( 1985 ) 217 - 260 . 44 . Lenat . Douglas B . • The nature of heuristics . . Artificial IntelJigence 19 ( 2 ) ( 1982 ) 189 - 249 . 45 . . Theory formation by heuristic search : the nature of heuristics II : background and examples . Artificial Intelligence 21 ( 1 , 2 ) ( 1983a ) 31 - 59 . 46 . • EURISKO : a program that learns nevheuristics and dome . in concepts : the nature of heuristics III : program design and results . . Artificial Intelligence 21 ( 1 . 2 ) ( 19831 > ) 61 - 98 . 187 47 . Lene . t . Douglas B . . The role of heuristics in learning by discovery : three case studies . in : R . S . Michwki . JG . Carbonell and T . M . Mitchell ( Eds . ) . Ma . chine Learning : An . Anificiel Inrelligence . Approach ( Tioge . Publishing Company , Pe . lo . Al to . · CA . . 198 ' 3c ) 24 ' 3 - ' 306 . 48 . _ _ _ _ _ _ and Brovn . John Seely . Vhy . AM end EURISKO e . ppeer to vork . Artificial Intelligence 2 ' 3 ( ' 3 ) ( 1984 ) . 269 - 294 . 49 . Meredith , MarshaJ . Reynolds . Paul end Vehking , A . udrey . Pattern perception experiment . presentation to the Illinois State A . cademyof Sciences . Computer Science Section . A . pri1 . 198 ' 3 . 50 . Meredith , Marsha J . . The code for Seek - Vhence . Technical Report . Department or Computer Science . Indiana University ( forthcoming ) , 1986 . 51 . Michalski . Ryszard s . . Carbonell , J . G . end Mitchell . T . M . ( Eds . ) . Machine Learning : An Artificial Intelligence . Approach ( Tioga Publishing Company , Pe . lo . Alto . CA . . l 983a ) . 52 . Michalski . Rysze . rd S . ( Ed . ) . Procee < li . ngs of the In terna . tional Machine Learning Vor . lc " shop . A . llerton House . University of Illinis at Urbane . - Chempe . ign ( June . 1983b ) . 5 ' 3 . - - - - - - · A theory and methodology of inductive learning . Artificial Intelligence 20 ( 2 ) ( 1983 < : ) 111 - 161 . 54 . _ _ _ _ _ _ and Stepp , R . . E . • Lee . ming from observation : conceptual clustering , in : RS . Michelsld , j . G . Carbonell and T . M . Mitchell ( Eds . ) . Machine Learning ; . An . Artificial Intelligence . Approach ( Tioga Publishing Company , Pe . lo Alto . CA , 1983d ) 331 - 363 . 55 . Minsky , Marvin ( Ed . ) , Se . man Uc Information Processing ( MIT Press , Cambridge , MJ . . 1968 ) . 56 . . A . fre . m . e " VDrlc for representing knovl . edge , in : P . H . Viruton ( Ed . ) , ThePsycbo1ogyot ' Co . mputer Vision ( McGrav - Hill . Nev York . 1975 ) 211 - 277 . 57 . • Jokes and the logic of the cognitive unconscious . in : R . Groner . M . Groner end V . £ . Bischoff ( Eds . ) , Methods of Heuristics ( Lavrence Erlbaum . Associe , tes , HillSde . le , NJ , 1983 ) 171 - 193 . 58 . . The society of mind , lecture presented at Southern Illinois University at Edvardnille , April . 1986 . 59 . Mitchell . Thomas M . • Uta : off . Paul end Banerji . Renan . Learning by experimentation : acquiring end refining problem - solving heuristics . in : R . S . Michalski . j . G . terbonell e . nd T . M . Mitchell ( Eds . ) . Machine Learning : An Artificial Intelligence . Approach ( Tioga Publishing Company , Pe . lo . Alto . C . A . . 1983 ) 16 ' 3 - 190 . 60 . Moore . J . e . nd Neveu . A . • Hovcan Merlin understand ? . in : L . Gregg ( Ed . ) . Knovtedge and Cognition ( Lavrence Erlbaum . Potomac . MA . 1973 ) . r 188 61 . Norman . Donald J . . . ( Ed . ) . Perspectives on Cognitive Science ( J . . blex . Norvood NJ . 1981 ) . 62 . Peerl . Judea ( Ed . ) . ~ arch and Heuristics ( North - Holland , J . . m . sterde . m . 1983 ) . 63 . Persson . Sta ! fan . Some sequence extrapolating programs : a study of representation and modeling in inquiring systems . Report No . STJ . . N - CS - 66 - 050 . Department of Computer Science . Stanford University , Stanford . CA . 1966 . 64 . Pi var . M . and : Finkelstein . M . • . Automation . using LISP . of inductive inference on sequences . in : E . C . Berkeley end D . Bobrov ( Eds . ) . The Program . ming LIJtlguage LISP : Its Operation and . Applications , ( Information International . Inc . Ce . mbridge MA . 1964 ) 125 - 136 . 65 . Reddy , Raj . Ermen . L . , Hayes - Roth . E ' . . Lesser . V . end Shockey , L . • Vorking papers in speech recognition - - IV - the HEARS . A Y II system . Cernegie - Mellon University Computer Science Department Technical Report . : February , 1976 . 66 . Rogers . DaVid . personel memorandum . 1986 . 67 . Schenk . Roger c . . end Colby , IC . M . ( Eds . ) . Computer Models of Thought and LIJtlguage ( : Freemen . San E ' rencisco . 1973 ) . 68 . Schenk . Roger C . . Language end memory , Cognitive Science 4 ( 3 ) ( 1980 ) 243 - 284 . 69 . Dynamfo Memory : . A theoryofrem . inding and learning in comp uteri and people ( Ce . mbridge University Press . Cambridge . 1982 ) . 70 . The Cognitive Computer ( Addison - Vesley , Ree . ding MA . 1984 ) . 71 . Searle . John . Minds . breins . end programs . The BehaVioral and Brain Sciences 3 . ( September . 1980 ) 417 - 457 . 72 . Simon . Herbert A . and ICotovsky , J : . • Hum . en acquisition or concepts for sequential patterns . Psychological Reviev 70 ( 6 ) ( 1963 ) 534 - 546 . 73 . Simon . Herbert A . • Complexity end the representation or patterned sequences of symbols . Psychological Revtev 79 ( 5 ) ( 1972 ) 369 - 382 . 74 . _ _ _ _ _ , ModeJsof ' Discovery ( Reidel . Dordrecht . 1977 ) . 75 . Stepp , R . E . • end Michalski . R . s . . Conceptual Clustering or Structured Objects : A Goal - Oriented . Approach . Artificial Intelligence , 28 ( 1 ) ( 1986 ) , 43 - 69 . 76 . Ulam . Stenislav • . Adven tut " & ' of a Mathematician ( Charles Scribner ' s , Nev York . 1976 ) . 77 . Ve . term . en . D . A . . end Hayes - Roth . E ' . ( Eds . ) . Pattern - directed Inference Systems ( Academic Press . Nev York . 1978 ) . 78 . Vickelgren . Vavne A . . Hovto Solve Problems ( V . H . : Freemen end Company . San E ' rencisco , 1974 ) . 189 79 . Vinston , Patrick H . , Learning structural descriptions from examples , in : P . H . Vinston ( Ed . ) , The Psychology of ' Computer Vision ( McGre . v - Hill , Nev York , 1975 ) 157 - 209 . 80 . , Learning end reasoning by analogy , Commutlications of ' the Association tor Computing Machinery , 23 ( 12 ) ( December , 1980 ) . 81 . Vinston , P . H . , Learning by augmenting rules and accumulating censors , in : R . S . Michalski ( Ed . ) , Proceedings of ' the International Machine Learning Vorkshop , . A . llerton House , University of Illinois at Urbana - Champaign ( June , 1983 ) 2 - 11 . l