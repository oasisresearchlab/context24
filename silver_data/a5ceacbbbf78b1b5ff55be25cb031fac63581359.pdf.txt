AHD 159 036 HOR TIT INSTITUTION - OoNs AyNCY REPORT NO PJJB DATE CONTRACT NOTE EDRS PRICE ' DESCRIPTORS IDENTIFIERS DOCUMENT RESUNE 41 - " V 024 854 Brown , John Seely ; Burton , Richard R . Diagnostic Models for Procedural Bugs in Basic Mathematics Skills . Bolt , Beranek and Newmai , Inc . , Cambridge , Mass . Advanced Research Projects Agency ( DOD ) , Washington , D . C . ; Navy Personnel Research and Developmen , Center , San Diego , Calif . BBN - 3669 ; ICAIT8 Dec 77 MDA - 903 - 76 - C - 108 66p . MF - $ 0 . 83 HC - $ 3 . 55 Plus Postage . dip ' Arithmetic ; Bas c Skills ; * Calculation ; tComputer Assisted Instrdction ; Diagnostic Tests ; * Educationa Diagnosis ; Educational games ; * Error Patterns ; Learning ; * Mathematics Education ; * Remedial Mathematics ; Teacher Education ; Testing Computation ; . DiagnostAc Models LI ABSTRA1 A new diagnostic modeling system for automatically synthesizing a deep structure model of a student ' s misconceptions or bugs in his / her basic mathematics skills Trovides a medhanism for explaining why a student is making a mistake as opposed to simply identifying the mistake . This report consists of four sections . The first provides examples of the problems that must be handled by a diagnostic model . It then introduces procedural networks as a general framework for replesentinAbbe . knowledge underlying a skill . The second section discuSSes soilie of the pedagogical issues that have emerged from the use of diagnostic models within an instructional system . This discussion is framed in the context of a computer - based tutoring / gaming system developed to teach students and student teachers how to diagnose bugs stra egically as well as how to provide a better understanding of the under ing st ucture of arithmetic stills . The third section our nses of an executable network as a tool for automatically diag ing student behavior , for automatically generating " diagnostic " tests , and forejudging the diagnostic quality of ' a given exam . Included in this section is a ' ' discussion of the success of this system in diagnosing 1300 school students from a data base of 20 , 000e - test items . The last - section discusses some future research directions . ( Autbor / MN ) . / 1 , - . 4 * * * * * * * 4 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * + * * * , Reproductions supplied - by EDRS are the best that can be made * * . from the original document . / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 1 Bolt Beranek and Newman Inc . t = 3 U Report No . 3669 IC ) V Report No . 8 Diagnostic Models for Procedural Bugs in Basic Mathematical Skills John Seely Brawn and Richard R . Burton December 1977 U . S . DEPARTMENT OF HEALTH , EDUCATION & WELFARE NATIONAL INSTITUTE OF ODDCATION THIS 0C / tit ENT HAS BEEN REPRO - OUCED EXAcTLY RECEIVEO FROM THE PERSON OR 0 ANIZAT ION ORIGIN ATiNG IT POINTS F VIEW OR OPINIONS STATED 00 NOT NECESSARILY REPRE SENT OFFICIAL NATIONAL INSTITUTE OF ' EOUCAT ION position , OR POLICY e - DtAGNOSTIC MODELS FOR PROCEDURAL BUGS IN BASIC MATHEMATICAL SKILLS * , John Seely Brown and Richard . R . Burton r ' N k Bolt Beranek and Newman Inc . 50 Moulton Street Cambridge ; Massachusetts 02138 December 1977 " e _ , imailr ' i AcknolWaedgmentp e are - , especially indebted 4 Kathy ( M . Larkin for ter extensive assistance on this project and in partiOular for her contribution in refining the BUGGY activit and in discovering - many new arithmetic . " bugs . " Development of t underlies this nes Research Projects Ag cy , Research Institute for Personnel Research and MDA903 - 76 - C - 0108 . eneral framework of Diagn6stic Models which was supported , ' - 44 - 1 part , by . the , Advanced Air Force Human Resources Laboratory , Army Behavibral and Social - . Sciences , and Navy Development . Cwater under Contract No . * This paper is a substant4ally expanded version of a paper written with Kathy M . Larkin entitled " Representing and Using Procedural Bugs w for Educational Purposes , " which appears in Procee0Anas of the ACM , National gonference , ACM 7 ' , October 1977 . SECURITY CLASSIFICATION OF THIS PAGE ( When Del Entered ) REPORT DOCUMENTATIONRAGE READ INSTRUCTIONS BEFORE COMPLETING FORM I . REPORT NUMBER BBN Report No . 3669 2 . GOVT ACCESSION NO . 3 . RECIPIENT ' S CATALOG NUMBER . . ) 4 . . 4 , TITLE ( and Subtitle ) , Diagnostic Models for Procedural Bugs in Mathematics , . , 5 . TYPE OF REPORT 6 PERIOD COVERED Technical Report . 6 . PERFORMING ORG . REPORT NUMBEfl ' i 7 . AUTHOR ( 4 ) John Seely Brown and Richard R . Burton . , - . 0 8 . CONTRACT ODRANT NUMBER ( a ) MDA903 - 76 - C - 0108 . 9 . PERFORMING ORGANIZATION NAME AND ADDRESS Bolt Beranek and Newman , Inc . . 50 Moulton ' Street , Cambridge , Massachusetts 02138 . 10 , PROGRAM . ELEMENT . P OJECT , TASK AREA 6 WORK UNIT NUMBERS 11 . CONTROLLING OFFICE NAME AND ADDRESS . Defense Advanced Research Projects Agency 1400 Wilson Boulevard . Arlington , Virginia 22209 . 12 . REPORT DATE . 4 . , - . 13 . NUMBER OF PAGES . 00 . 14 . MONITORING AGENCY NAME 6 ADDRESS ( II from Controlling Office ) Navy Personnel , Research and Development Center . . N - 57 . San Diego , CA 92136 ' 15 . SECURITY CLASS . ( ol this report ) Y Unclassified , ' DECLASSIFICATION / DOWNGRADING SCHEDULE 16 . DISTRIBUTION . STATEMENT ( of this Report ) . r I - - , . . 17 DISTRIBUTION STATEMENT ( ol the abstract entered In Block 20 , If different from Report ) vil Approved for public release ; distributiOn unlimited . L - k 18 . SUPPLEMENTARY NOTES N This research was supported in part by the ' Defense Advanced Research Projects Agency , Air Force Human Resources Labora ory , Army R Search Institute for the Behavioral and Sbcial Sciences , Navy Persllff , , nnel Re9a ch and Development Center , and the Office of Naval Research . . 19 . KEY WORDS ( Continue onrererffe aide If necessary and Identify by block number ) Illi Diagnostic Models , ProcedUral Network ' s , CAL : Automatic diagnosis , BUGGY , . Student bugs , , Cognitive Modelling , - Teacher training , Remediation , Educational Game , Procedural skills , testing , executable models , deep structure model , 7 learning , , . 20 . ABSTRACT ( Continue on reverse aide If n ceseery ' on0 A pew diagnostic modelling stem structure . tbdel of a student ' s misconceptions skills prov . ides a mechanism for explaining as opposed to simply identifying the sections : Thefirst provides examples by a diagnostic , model . - It then introduces framework for representing the knowledge Identify by block number ) for automatically or why a synthesizing a deep bugs in his basic mathematic student is - making a mistake report consists of ' . three that must be handrea . networks as a general mistake . This of the problems procedural underlying a skill . Th challenge DD I JAN M FOR3 . " 1A 3 EDITION OF I NOV 6S IS OBSOLETE 73 SECURITY CLASSIFICATION OF THIS PAGE ( When Vale Entered ) SEC T C FICATION OF THIS PAGE ( Whon Dada Rneereal ) in , . ' 4 , - . . is representation is to find one that facilitates the i - . . . . - di " : * , , , , sconceptions , or bugs existing in a particular student ' s enc ng this knowledge . 4The second section discussesysoMe of the pedagogicseissues . that have emerged from the use of diagnostic models within . an insttuctional system . This discussion is framed in the context ocoMputer - based tutoring / gaming yysteth developedjto teach students and student ' te ers how to diagnose bugs . strategically as ' well as how to provide a better understanding of the underlying stracture $ i arithemetic e ' skills . e third seciton described Oufuses ' of an ' executable . network as a tool for automatically diagnosing studcipt - behavior , ' for automatically generating , " diagAqstic " tests ' , and for judging the Oagnostic . 4uality of . , a given exam . Included in this section is a discussion of the success of this system is diagnosing 1300 school students from a data base : of 20 , 000 test items . c ' t . , . - e ' e 1 r O SECURITY CLAkSIFJCATION F THIS PAGE ( Whon Data Entered ) 5 ABSTRACT Anew diagnostic modelingsystem ftor automatically synthesizing a deep structure model of a studentlemiscondeOtious orbugs in his basic mathematic 44 - skills provides a mechanism for explaining why a ' Student is making a mistake as opposed to sii P ratifying the mistake . . This report consists of three sections : Th irst prov des examples of the problems that must be handled by a diagno : is model . then introduces procedural networks as a general framework f r represe g ibe ' knoWledge underlying a skill . the challenge in designi this re esentation is to find one that facilitates the discovery : of misconcep ion o bugs existing in a particular student ? encoding of this knowledg e nd se tion discusses some of the pedagogical issues ' . that have emer ed from the use o diagnostic models within an instrucitional , system . This iscussion is framed in the context of a computer - based tutoring / gami g system developed ti teach students and student teachers how to diagnose b gs strategicall as ell as how to provide a better understanding of the underl ing structure or rithmetic skills . The 4 third section describes our , uses of anl . executable netw rk as a tool for automatically diagnosing Stnd , eint ehavior , for automatically gen Alii . ng " gnostic " tests , and fdrAudking the . ! diagnostic quality of a given exa Incl ed in this section is - a discussion ilow . of the success of this system in di osing 1300 school studentslrom a data base of 20 , 000 test items . a O O Preface ( 1 , In our ICAI Report No . 4 entitled " Aspects of a Theory for Automated Student Modelling " we discussed the use of a procedural , network for modelling both the correct and incorrect encodings of a given procedural skill . We also alluded to hoW thip modelling 4 scheme could be used to create diattnastic mode - lj of a student ' s \ ( \ misconceptions r . but . did not describe ' , how these models could be inferred from a student ' s behavior . This . report provides description of the Process and decision rules usiato Automatically infer ( or construct ) a diagnostic model of i student from his . observed correct and incorreyt . answers on a given test . This report also describesothe result of an experiment that used this diagnostic modelling system to automatically construct a diagnostic , procedural , model for each of 1300 students . from their answers on an ari4etic . screening exam . The first two sections are expanded valesions of What appeared in chapter one . of the ICAI Report . Nas . , 4 , , , . - They are . included , here in 4 - . order to provide a framework for understanding the more technical details . of the diagnostic modelling " process as described in the ? - - latter part of this report . 5 LY ito / TABLE OF ' CONTENTS Abstract Preface INTRODUCTION , / Page i iv 1 4 SECTION 1 - DIAGNOSTIC MODELS OF BASIC SKILLS 3 A First Approximatrion ' to Representing Procedural Skills ' 5 Inferring a Diagnostic Model of the Student 8 A Procedural Network for Subtraction 8 , The Power of Simulating Bugs in the Network t . 11 ) ' SECTION 2 PEDAGOGICAL ISSUES 13 . _ BUGGY - An Instructional Game for : Training Student Teachers and Others . . , - ' y ' t 13 Protocol of a Team Using BUGGY 14 Pedagogical Issues for Teachers 16 An Experiment Using BUGGY with Student Teachers 20 ' Pedagogical Issues More Specific to Middle School Students 22 Some Results - on Using BUGGY ' with 7th and 8th Graders 23 SECTION 3 - AN . AU . TOMATED ' DIAGNOSTIC MODELING SYSTEM , - 24 A Deep Structure Data Analysis Tool 24 The Process of Organizing th " p Data 26 Analysis of a Bug Comparison Table 27 Multiple BugsQand Their ( Nun - Obvious ) Interactions 28 Judging Diagnostic Credibility 29 ' Classification Algorithm i r 32 Diagnostic Results for the Nicaraguan Data Base ; What Does as Test Score Mean ? . % 33 4 A Methodological Tool for Judging the lagnostic Quality of aoTest 35 . - SECTION 4 - FUTURE RESEARCH . Relationshi stic Models tor , Other Kinds of ' Structural , . . . , Models - . ? - . 37 EXtensions o the Gaming vironment , t ) 38 Extensions o ' the Diagnostic System 40 41 42 Generalization - to Strategic Knowledge Psychologicfil Validity REFERENCES APPENDIX 1 : Sample Diagnostic Test APPENDIX 2 : Student Responses t4 . What Was Learned APPENDIX 3 : APPENDIX 4 : - AC , APPENDDr5 : Student Reactions to BUGGY Descriptions and Examples of Subtraction Bugs Bug FrequenCy Table 44 46 / 48 50 52 / 56 I LDIAGNOSTIC MODgLS FOR PROCEDURAL BUGS IN . BASU MATHE ! ATICAL SKILLS C , . / " If you can botp listen to children and accept their answers ' not as - things to ' just be / / judged right or wrong but as pieces of - ' : information which may reveal what the child 4s . thinking - you will have taken is - giant stePUtoward becoming a master teacher rather than merely a ' disseminatOr of information . " Easley , Jr . & Russell E . Zwoyer In , troduetioli One of the g . reatestal df . teachers is their , ability to . synthesize an accurate ' " p ' icture ' s , icture . or . model , of _ a student ' s misconceptions froethlmeagiir eVidence inherent in . his errors . . 4 . . . . detailed model of a student ' is knowledge , including his misconceptions , 1 . 1 eis a prerequisite to succeeisful xemediation . " The structure , use , and . inference , of such models fo procedural skills in mathem ' tics " is - the < topic . of othis . . paPtr . f I ' , particular we shall describe some initial ' efforts in the developMent and use of a representational " techylique , - called . " procedural networks " \ as , ' the framework for constructimg . - 1 - - - i . e . modelsx that capture a student ' s common 1 , misconceptions or fault behavi , dr t as dimple changes o ( or mistakes in ) . h a cor ect model of ' t e underlying knowledge base . By ' . being able . to - synth e such deep Structure diagnostic models - af4vaticallv , ' We move a step clOser to b hgable to provide both ' a teacher and an 4 instructional system w not only supplying an identification of h mistakes d , scuden4 is making , but also an explanation of why those ffistpkes a4 ' e being : jma . ' Such a system also as profound implications , / " forAesti . g , since a student need no longer be evaluated solely bn they . number of ors ap earing on his test , but rather on the funaameneal - number , mieconceptions ' whi he harbors . , - - ' - - . This paper consists of tour sections . The first provides , , \ . . , examples of t ' he p oblems that must be handled by a diagnostic ode . : . . . . It then , introdu es procedural networks as a general frlmewo k for representing . the ; 14162w & dge underlying askill . ' ' The ) challenge here " is to design a epresentation that facilitates the discov y of 4 misconceptions bugs existing in a particular _ studenes en ) ding of . . - . . 4 thisOnowl . e4ge . , - , h1 seconfi seclondiscusses some of the , p , ddgogiael ' - - - - ' - iseues tha5hav emerged from our use of diagnostic models within an . i - - instructional system . , , This syAtem : isoompuA ter - ba4d tutoring game . . deyelooped to teach 06th , , studejlt ' s and student teachers about the strategic diagnosis of ' ' bugAH The third section describes our uses of Pr ' OcedurAl network as tool for autcimatibal y diagnosing , student behavior , . . . for automatically ' neratTng ' diagnoAtic " - tests , and for judgfng the diagnOstic A rity of a ' given exam . Included in this s ' potilon is a disa4ASio ' nof the Auccess ' Of tblA system in diagnosing 1300 , g ade - sehool StudeOtA froM : a data base of 20 , 000 test items . The , 4 last s ction AisOussome future research directions . le J 1 " 1 de - ) N - 2 O d Jh T Section I . DIAWO5TIC 1 . 10DELS ' W BASIG _ SiiILL ' S The isaueA4dresseak - in : this paper . arose from an investigation of . t e ' proce ural , , pkills necessary to perfOr high Olio ' ol . algebra . These skills include . not : only the ' generally recognized rules of aigeb but also such normally implicit skilrils . asH , 411 , g \ reading of / . 4 \ formulap , . the parsing of el " pressione and the ' : determfnetion oit . which , o , . - , . . rules to apply next . ( Brown and Burton , ' , 1975A : ? . BrowhCol ) , . ins and , Harri , N - 1977 ; Matz ; . 1978 ) . ' For this . . PaPeihoweVer , . we limit ourw . , . diacussion to examples encompassing arithmetic : akille so that . , we can cOnO . Trate on the . critical ideas of diaghoais without the heed for large number of algebraic - rules . . ' Lli . Vihg olir : ' exiipl6s to arl . 6hmetic also provides a . , bompellihg . demongtrationofthe . difficulty ` of the diagnostic task ; ' it - cleanly ' , dem nstrateehbw uch more difficult it is to . ' diagnose what is : uvrong With studemtmethod . oi : - . perforMing a task form as diagnostic . model ` ' - - therici ' tis to perform the task itself : : In is ' no great Challenge tC5 add - ar subtact _ . two numbers , ' but , as we : ahalr ' ssee , diagnosing misconceptions in these . same skills " can be quite subtle . : Let . : us consider : diagnosing ' what - - \ Is - wrong wilth the arithmeie : . skills eproeeduree ) _ Pff . . a couple of studenta We shal start , with a case : study in Which We . 6 " . ehcamihe ; five " snap " ots ' ' : ' of h ' : student ' s ' q _ perform . . doing - - addition as mi t - be seen o homeworkd assignment . Before proceedi ng , look = at the gp shots and tr ' s , to . , digcovar the student ' s bug . Sample o " " 4 . 41 the stu . d , ebt s work : 4 ' 989 , 66 , 4141 - 1053 have Once you discovered the try es . t . i - ng your byPnt , s by " simulating " the - buggy student so as _ to ' predict . ) his results ' i ' ollot , iiii ) 3 two test problems . - or 446 a01 % 1 . . . a + 815 " - / + 399 ' Y O on the Tbo , bug is really quite simple . ' In , computer terms . the stude * nt , - - after determining . the narry , i . gets to reset the " carry . register " . to _ A zero and hence the , amount carried is ' accumulated . across ; the ' , columns . For example , - . 2in the - stUdent ' s second p . roblem , ( e . g . 328 + , 9 , 17tecluals . 13 ' 45 ) he proceeds as follows 84 , 7 . 15 so : he writes 5 and ' . narries 24 . 1 . 1 plus the - one carry : is4 , lastly 3 + 9 = 12 but that : one carry . from . the first cpumn is still there : - - it hasn ' t been reset - - 4 so adding it in to this ' column gives 13 . this is : the bug , then to the test , prnblems , will be 361 and 700 . This bug is noblp ; , absurd . when one considers that a child might use his fingerAO remember the . . . . carrj , and forget to . blendA5 ck ht44ngers , counters , , after - each % : carry , . ip added . A . . comaon assutliptiari prACedures , ; very ' well , ' and among teachers is that siudents , donot - falloW : : : " - k - - - : . that grratic . behavior is the primarycaUdV of . . StUdent ' p ' inabilitt . to , perform - ea , oh step correctly . . Our experie ' mce - - , , . . - been that students are eemPrkabiy competent procedure : followers , , . . . . . , # but that ' he _ often follow ' the . . wrorm nrocgd One . case ' ennoUnteredll st , ye4r is oT special interest . ' - rhe ' . stu - 7proceeded & ' , _ . through that ' he wps eksh , ibytingrandom , behavior ' in bis arithmetic performance , , As far as the / teacher wave . coacerned there was no systematic , explanation for his errors . Here is a sample of his work : 9 8 8 - . ) 9 17 1 87 + . 8 TET . . 25 good : Tpnrtionof the school year With , hiS t oher thinking . . + 794 + 4 , 44 : 97 \ 679 41 3 , 27 , 93 v . 7777 is a clues " to : the nature of his bug in the number of ones in his answers . Every time * the addition of a . column involves a carry , a one mysteViousli pppearp in°that column ; ' he is , simply writing down the carry digit and foPgetting about the . units digit ! One might . be miled - by 17 + 8 Which nOrmally involVes a carry is added correctly : It would stem that he Sbleto dO simple additiOne by a goMplet y different pracedure , possibly by cou5 ! timg larger nuthber . pn his fingers . from the C . The \ manifestation cf this student ' simple bug carries over , to , ) other types of - probliems which involve addition as a subskill . What I . . answer Would . he give for the iarloliing ? - 4 1Z A family hAs traveled 2975 mileg on a tour of the U . S . They hive 1828 miles . to go . How many mileA , will they have traveled at the - end of their tour ? He ccorrectl , y . soiVed the _ word pr4rblem to obtain the , addition problem 29 . 75 . - + 1 $ 7 _ 5 _ , _ to _ which he answered 3191 . . Since his work was done on a Acratch sheet , _ , t444 . - . - - . teaCter only saw the answer which is , of _ course , wrong . . AS . . . a . . . result , the teacher assumed _ that he had trouble with word pr . oblemg . as well as with arithmetic . When we studied this same student ' s work i , n other arithmetic procedures , we discovered a recurrence of the . same bug . ' Here is a said - pli - Of his work in multiplication : 68 734 758 2764 x46 Alg x51 - - 2T - - - - 1 i 2731 . . . tk , Several bug _ s _ _ = - are manifested here , the most severe . one being that his , . . . multiplicatioh - algorithm mimics the column behavior of his addition 1 , - , 5i . . dthm : But notice that the bug in , his addition algorithm is also present in his multiplication procedure . ' The : " determine - unit . . . and - carry , subprocedure bug shows up . in both his - . , . . - - . . . _ . Multiplication and addition . For ' e4ample , to do 68 _ 34 : in - the first . . , column he performs 8x6 , gets 48 aryl then ' writes down / the " carry " , in this - . case - 4 , _ ignoring the units digit . . then , multiplies 6x4 to get 2 ' for the second column . All along he has a complete gnd 4 consistent procedure . for doing arithmetic . His answers throughout all of his arithmetic , work are far . from random ; in fact , they display _ _ . near perfection with respect to his way of doing it . A First " Anoroxfniation to lienresenting Procedural 8kills ' For a computer system to be capable ' of diagn sing dberrant behavior such as the above , the procedural skill being taught must be represented in a form amenable , to modeling incorrect as well as Correct o ' subprocedures of : that skill . , Furthermore , the representation must - allow the intermixing of both the correct and incorrect subskills , so that the model can capture ebose parts of a - skill that are . cOrrect ' aswell as those that are wrong . - The of the skill into : shared subskills can also account for the recurrence of . similar errors in different skills . . We introduce the term diagnostic model to mean a representation of a student ' s pr4 obedural ' cnowledge ' or skill that depicts his internalization of a skill as a variant of a correct version of that skill . In addition to satisfactory representatibnal , techniques , the diagnostic modeling task requires that the repre4ntation of a particular correct skill ' make explicit much of the tacit knowledge , underlyipg the skill . In particular , the correct model must . contain all of , the knowledge that can possibly be misunderstood by the student or else , some student ' misconceptiops will be beyond the ' diagnostic modelihg capabilities of the system . For example , ' if the model of ' / addition doesn ' t include the transcription of the problem ; the system would never be able to diagnose a - student whose bug is to write 9 ' s tha he later misreads as The technique we use to represent diagnostic models . ( 1 ) A . procedural network consists of a collect with annotations i which the ' calling relationships of procedures between procedures are made explicit by appropriate links . ' - Each - . . procedure node has two main > parts : a conceptual part representing the intent of the , procedure , and an o - peratibnal part consisting of methods for carrying out that intent . The methods ( also - called . ' implementations ) . are programs that define how the results of other procedures are combined . to satisfy the ' intent ot a particular ' procedure . ( 2 ) Any procedure can have more . than one ' implementation , - thus providing a way to model different methods fore performing the same skill . For most skills , the network representation ' takes the form of a lattice . Figure 1 presents a partial . breakdown of . : a portion - , of the addition process into a procedural network . Conceptual procedure nodes are . enclosed in ellipses . The top , Procedure in the . 51 ( 1 ) This term has been used by Earl Sacerdoti ( 1975 ) to describe an interesting modeling technique for a partially ordered sequence oT annotated steps in a problem solving " plan " as well . as ' for specifying control information . Our use of procedural nets coincides with his on this latter feature but differs from and is Less developed than jlis with regards to " plans " . ( 2 ) The language we have used to define these programs is LISP . ' The par lar programming language is unimportant from a theoretical s ndpo ' nt because an implementation is non - introspectable . . The modelin : aspects of the network must occur at the conceptual procedure level . xample , the implementation of the > subtraction facts table ; look - up procedure in the computer is necessarily different from that in the student . However , the conceptual properties of the procedure are the same in both . hose aspects which are the same , the invoking ci f O T Other procedures , the values retur ' ned , ' the relevant side effects , are included in the network , whilethe implementation details that may differ are " swept under the rug " into the program . This is not a . limitation , as any " implementational issue " can be elevated to the conceptual level by creating a new conceptual procedure in between the existing . ones . The distinction between conceptual and implementation details also allows skills to be modelled efficiently at different . levels . FIGUFIE 1 CARRY , ! INTO THE TOP OPERAND 1 - 6a - I I - L ) lattice is addition . ( 3 ) Two of the possible algorithms for doing addition are prsented as alternative methods under ' the conceptual 6od for addition . In method 1 , the standard algorithm , the columns are added from right to left with any carries , being written above and included in the column sum of the next column to the left . In method . 01 ) 2 , the columns are . added from left to right with any carries being written belo % 4 the answer in thenext column to the left . If there are any carries , they must be added in a secqnd addition . Notice . that the ' se Olio methods share the common procedures for calculating a col , umn ' sum and wrting - a digit , in the answer , \ b4t . differ in the . procedure . they use when carryingsis ' necessary . . One structleal aspect - of the netWorkis to make & xplicit ' any subprocedures that can be potentially ihaFed byseveral , tigher level procedures . . , . the decomposition of a complex skill into all - - , ofita - conceptual , Ocedutres terminates in some set of . primitives that reflect , assumed el . adents of an - - underlying . computational ability . For addition , typical assumed primitives are recognizing a digit , - writing a ' ' digit , and knowing the concepts of right , left , etc . The complete procedure . network explicitly ' specifies all the subprocedures of a skill and ' , can ' be evaluated or " executed " , the , teby ' simulating the skill for any ven set of \ lnputs . - By itself , this , network . merely provides . a computational machine that performs the skill and is not of particular import . However , the possible , misconceptions in this skill are represented in the network by incorrect implementations Associated with procedures in the decompositibn called " bugs . " ( 4 ) Each buggy version contains incorrect actions taken in place of the correct ones . - An extension to the network evaluator enables the switching in of a buggy version of a procedure ' that allows the network to simulate the behavior of that buggy subskill . 2 This feature provides computational method for determining the external behavior of the underlying bugs . s s up e representat on emonstrates on y t ose eatares of the procedural network particularly relevant to the diagnostic task . The actual breakdown into subprocedures may be different in a particular network and will be considerably more detailed . ( 4 ) The term " bug " . is borrowed from computer , science where it refers to a mistake in a computer program . Inferring a Diagnostic Model - of the Student . The ' problem of iagnosing fdeeD structure failure in a student ' s knowledge of a procedural , skill can now be accomplished , at least theoretically , in a straightforward manner . Suppose , as in the examples on page 5 , u . e . are provided With - several surface ' manifestations of a deep structure misconneption , or , bug , in the 0 ; ' student ' s addition procedd4e . To uncover . which possible subpron . edures are at fault , we use the network to simulate the " behavior of - buggy subprocedures over til % set of problems and note those which generate the same : 15 - ahavior as exhibited - by the sfirudent . ' To catch a student ' s 0 , iieconceptions that involve more than one faulty subprocedure , we ' , musti , be . able to simulate various combinations of . bugs . A - student may ha . a . . . bug in his . : carrying : pron ' edure as well , ' as believing that 8 + 7 + is : 17 , ( a bug in . his addition facts table ) . To Model hie behavior , both - buggy versions Must be \ used together . of the student ' s errors is a bet of bUggY , subprocedUres that , . when invoked replicates those errors . Each buggy version has a sociated information . such as What the underlying causes , of the bu have been , as well as specific - , remediations , explanationS , - interactions , and examplesof the bug - - all . of which may be used by d , tutoring system to help correct . the ' , student ' s problem . ( 5 ) Many technical questions are raised by _ the above , brief overview of hoW to " infer " a diagnostic mode ] : . We have deferred a more , detailed discussion of these questiOns until Section 3 , 4 , n favor of a more general discussian of pedagogical . ramifications ofthe procedural , network - model of procedural skilia . We begin this discUssion with a . description of the procedural . network for a . simple , skille subtraction . . 90t _ dural network for Subtraction . ' As an example of the surprising amount ' of procedural knowledge . , needed to ' perform a " simple Skill , let us consider a . mare complete 5 West , 1971 has roken own the iagnostig teaching task into . our steps : - . i ) distinguish between . conceptual an - Ocarelpss errors ; ( ii ) identify ' the exact nature of the conceptual errbr ( bug ) - ; ( iii ) determine the conceptual basis ( cause ) of the bUg ; and ' . ( iv ) perform the appropriate remediation , The syitem we describe has been directed towards ; iproblems ( i ) , and ( i : i ) . The buggy implementation nodes in ' the networkprovide the proper places to att ' ach inforthation relevant to problems . ( iii ) and . ( iv ) . 8 2 network . representation of the subtraction of two humpers . ( 0 Figure 2 shows the links of the procedural network for subtraction that indicate whichSubprocedUres a procedure may use : The topmost _ node represents - the subtractiom of two n - digits number ' s . It may use the procedures for ' , setting up the problem , transforging it if the bottom number is ' greater ; than ` \ the top , and sequenC , lpg through each column per ' forming the column _ subt ction , ' The , , imp mentation of the , column subtradtion procedure has to ' Count for cases where borrowirig is . necessary and may call upon m ny other subprocedures , , including ' taking the borrow from tile correct , place ; scatching0 and writing9 if that place contains $ ' a zero , aid So on . An important su6procedure is the facts table look - up whiO ( h ' llows . any of o the simple . arithmetiC facts : to be ' wrong . The ' facts ' ' table subprocedure called during the addition of 10 to a column , digit , during the subtraction of 1 from A : COluMn ' digit in a borrowing ' operation , as well as during tne . SubtrSction of the bottom from the . . top , digit in ' a column . In princirile , eack9 f tbeselpubprOcedures couhave many buggy , 1 versions associated with : it . ( 7 ) , An sxampfs of a . common bug is to calculate the column difference . by subtrcting the smaller digit from the larger regardless of which is on top . In another . bug , the set - up : / rocedure left - justifies " Abe to ' p and bottom numbers so that when the studentji told to subtract 13 from 18 . 5 , he gets 55 . An ' interesting aspect of ; he ; Left justification bug is that when the student is faced with seemingly , impoSsible problems ( 185 - 75 ) he may be inclined to change the direction in which ' he ' subtr - , 6ts , borrowing ' from right to left instead of from left to right , or o change his colwan difference proCedure to larger minus smaller , thereby ' erimihating the need to borrOw . . Thus , there can ' eocist , relationships betwean , nugs ; : such that one bug ' suggests others . A major challenge icd n ' identifying the . procedural breakdown or description of a skill is to - have the network a ' handle such ramifications and interactions of , multiple bugs . 4 To provide a feeling for the : mange of " answers " . that can come from simple underlying bugs , ' we have included in figure ' 3 the ( 6 ) We have chosen justone of the several subtr ctiop algorithms Cthe so - called ' " standard " algorithm ) , but the idea ' s presented here apply * , equally to others and can handle multiple metho s as well . . ( 7 ) Inour current subtraction network , many sub rocedures have only . one baggy version , but some have as many as fi teen . The average is three or four . COLON SEQUENCE Figure 2 AdPralural Network for Subtraction 10 - APo " answers " to a subtraction problem ( 15300 - 9522 ) using some of the bugsl in the procedural network for subtractfon . For exa6ple , ' ttie ansWer . - 14222 was generated by the bug that subtracts \ ' , ttie smaller digit . in each column from - the lar ' ger . Appendix 4 gives brief explanations ' of bugs that woul ' d ' Ienerate each of the answers in Figure . 3 . d - Figure 3 Manifestations of Some ' Subtra ion ' Bugs Eacl ? of these answers with a single bug . 15300 - 04 * 15300 15300 - 15300 . , . 4 / 5300 / 15 ' . 300 1 - 11 - 24t 22 o - is ' the result of using a subtractlon , _ procedure . 15300 15300 15300 15 ' 1100 . 1Ni - - f - girer , 5300 15300 15300 . 15300 . , - , 5300 * Si . - 9522 10000 ' - . 911 * . ' / 15300 1 - 22 15309 15300 15300 1 . - 153a0 , - 22 - ' 22 : - 9522 9522 15300 15300 - 153t0 15300 = 9122 4622 ' . As can can have 15300 be seen in Appendix . 4 , a particular answer to a given , problem more than one explanation since several distinct bugs can generate the same answer . A special case is that a student may harbor many misconceptions : and still get the correct answer to a particular . , problem ' The Power of Simulaing - . Bugs in tbelletwork Given a ' procedural network liethe . one 1 alway6 obvious how bugs in any perticular subprocedure or - set of . 0 subprocedures will be manif , te4 on the Ia answer . Some . of the c mplicating can be used by ) Figure it is not subprocedure computi other . surface , that is , in the factior6 are that a single buggy several - higher - order procedures in an answer that two bugs Can have interactions with each These , factors - are fUrtherocomplicated by the fact that not all sample problems will manifest all ofthe ppssible symptoms . If asked , . 4 to make predictions about the symptoms Of a given bug , people often determine the symptoms * by Consideping only the Icills . , or subproceddries used . - ih solving one particular sample problem . As a result ; . tki - y _ often miss symptoms generated i by , other procedures . that can , in . . 0 - , . . principle , use the given buggy Aubprocedure but which , because ) of the , characteristics of the " " \ articular problem , weren ! t . called ' o . Iffa4 - - 4 different ( sample ' problem id been ' chosenit might hav ' e taused the particdlar fau blirocedure , . to have been used for a . different purposes therebythereby . genfrating different symptoms . ; These obsery . atil v , irirst led us to conidsr the - Ilralile . o . c - simUlatioin . to systemal4paily verify a conjectured bug . o , V I - X12 . 4 BUGGY - An Instructional Game fo Tr iniugStudent Teachers and Others Section 2 PEDAGOG3C & L , , , - As we eaw in the first ' section , it is ' often difficult to . infer a is , , , _ . 1 , : . . student ' s bug from hi & answers . It was the need for teachers - to e ' ppreciate this prdblem and to . develop straregiet orpoping , with the 1 , . : - passible . range Of student bugs thet led us . to cons ruct a game . called , . t * ID - * BUGGf . - , AUGGY is . , a oomplIterized ' game based onj the - dOwnostic int ' eeactions offa tutor and a student . The . computer plays the pa t of J - , an err - ant etdent who - se malady must be identified by the aiagnostici n - 7 , kA , ( a role ( either : played : by an : individual or hky . a ' team ) : ' Th , ' ' diagnostio4B - ispmeserited : With an I4nithmetic homework , , problem , that the " studentf has done inc46rreetly . The " student ' s " behavior i . . P sefieratecrusing the Wrocec64nal nefwork and , shows the eymptots of an underlying . bug in one of ' , . theL . . . 2ariththetiosubprocedures . The ' ' diagnostician ' s job is to dischlier exactly - what is the underlying . misconception ' : - He does this by providing strategic test or9blemS , - for : tile - " Stpclent " to solve . . The problems given by the diagnostician : , ar ' fe r answered - by the . computer acting as the , procedure . The computer apo acts as arbiter in ' diagnostician ' s theory . When the diagnostician discovered the t , he is - asked to describe it . that he . really ha found the bug , he is given student usi the evaluation bugged of the indica / es that he has Then , to make . certain a five - problem test . _ . dUring which he must answerSthe problems in the same errant way that the tudent liOul In other words , ' he must simulate the ' . " student ' s " . . . bug . . When the di gnostician ' s concept of thg bug is sufficiently well formulated that he is Able to predict ' the huggy - answer on all five problems , he is considered to . . ' . 7511ave diagnosed the student and ' he - , ptdceeds to a new bug . We have found it beneficial to allccw teechere . to teeen up while playing the diagnostician ' s role in BUGGY . The . interaction ' between team Members encourages verbalilation o ' f the decipion - making proo . esses Anvolved : in the game . , ) The ' following 4s a prothcol of a team of - teachereusing BUGGY . f . . The - dialogue is interspersed ' with commentary , , alloo4 , t : the ( important - 1 . 3 issue * . Those lines typed by the team are marked ' with a vertical 4 line , . in the ' left margin . Protocol of a Team Usin BUGGY WELCOME TO BUGGY / . HAVE ' CHOSEN A ' BUG . HERE ' IS AN EXAMPLE : OF THE BUG . . . A A \ i P I The system ' presents an example in which the stwden doesn ' t get the right answer . At present these initial examples are stored in the network linked to the _ buggy implementation . / - . . . NOW . YOU CAN GIVE ' ME PROBLEMS TO DETERMINE THE BUG . 0 18 43 I + 6 + 79 777 . 23 The - team , generates problems that are answered by the " student " . Notice that the team ' s test problems are similar to the initial example ' generated by BUGGY . This is usually a poordiagnostic strategy as it may ' leave other symptoms of , a bug undiscovered . I Got ' the bug ! The team f rms , an initial hypothesis and tells the system 0 , , they , have discovered the bug . The system now asks the team to , / describe the bug and then tests them on their understanding . Asking for a description forces the team to verbalize their sometimes fuzzy idea of what the bug is and often makes them realize how ill - defined or vague their idea actually is . In the presentsystem , " Nthe descriptions are saved but no attempt is made bye the system to understand them . 4 i PLEASE DESCRIBE THE BUG . 1 . . r , adds , , t . Student adds the numler ' to be carried into y - 0 last , column . worked ' in . . / - . , - - / This cryptic description is ' : typical of ' those . we have - observed . , Describing . . bugs in English is surprisingly ' difficillmit . . . - What the team is trying to say is that if a column addsto more . than 9 , he units digit ' and the ' carry digit ' are . added - together and - the result is written as the . answer : For example , in 4th - first column of the example probed ' i when T and 5t ar - added , 1 ( the carry ) and 2 ( the units , digit ) are added to et 3 . The same with - 8 + 6 , 2 . + 9 , and 3 + 9 . , ( This bug ooul ' easily arise if e student were using , method , 2 from figure 1 and mistakenly w to the carry under ' the - same column . ) . The hypothesis does ac ount for the observed behavior . Unfortunately , it is not the ' student ' s bug . Notice the - t possibly humorous , probably disastrous results that would have transpired if the t am had ; Istopped . at this point / 6hd tried to tutor the student on the basis of their initial belief ! . . - - HERE ARE SOME PROBLEMS TO TEST YOUR THEORY ABOUT THE ' 1UG . 1 WHAT ( _ 21 , . Y To ensure - that the . te ' a has found the correct ' bug , the . system . prodqces . several problems - for the team to solve . At , 1 4 il 0 ' - - ) - 14 present , BUGGY has . a heuristic problem , genegtion , program . that giye8 a broad " - . range Apf " different " problems . ( For Y - examples in which the bug is very localized , such as - requiring a 0 in the top number , a special problem generator ctn ' 1 . . . 41 , e linked to _ the bug and will - be used instead - ) These pr6Wlems are then filtered to try to get three ' problems - which cause symptoms and two thatsive . cor eat answers . This - simple - routine . does surprisingly ' well . ' producing critical " Troblems . well , - in . fact , ' that a more " inteIligent " . routine which determined , the ' consistent set of . bugs and then filtered ttie test problems to split the set was discarded . - as unne6essarily time - consuming . However , this more - intelligent technique . - - based on techniques discussed - insection 3 , - - might be - reverted to as our ' theory of procedural bugs becomes progressiyely More ' subtle , . The team ' s hypothesis is revkajled _ as incorrect - by the fifst of , the fiVe test problems . - Buy preerilts , its ansVer then allows the teeth to . 9nter Tom re problems . , 7t , e e . et 4 ' t A U THAT ' S NOT THE BUG ' ' HAVE . USING MY BUGI : . 7 °404 , 21 TRY IvING : , 4q SOME MORE EXAMPLE1 . I 51 + 170TI . 21 68 a + 23 L \ . : . , . ) , . : - . . After failing the t st , ' theN . eam - giveS a gatater range of . , . prohlems , specifically those oteihg , biggernumbeps . cHow is it that . ' 51 + 17 . 0 - 7 ' can add Up . . toA21 . ? - Byj4goa ' dedknA the sco pe ' of ekampLk phobreMs , they are ' . able ' . ; tO reevaluare . - their - 3 . , , initial hyObtidlesis , i dismiss At , , . and . . - develop alhOthtr ont : tbat : is ' complete . and . tonfalstent , Wit . h respect tb the new . errors ' ' N ' 4 PLEASE DESCRIBE THE - BUG YOUi , TBINK I HAVE . % The student is \ adlling all the , digiti together . HERE ARE SOME PROBLEMS TO TEST YOUR THEORY ABOUT THE BUG . WHAT IS : . 33 109 . 1 8 , 28 . . 9o JER + 6 This time given the network . . the team ' s hypothesis passes the test and they ape descripti of the bug stored in the . ' procedUral VERY * , GOOD . MY DESCRIPTION OF ' THE G IS : , 1 THE STUDENT . ALWAYIS _ SUMS ' - . 10 ALL THE DIGITS WITH NO REGARD TO COLUMNS ' . - A A - variant of this game assigns a cost to each problem the user / k poses in the process ' of trying to discover the qpug . At the same time , a much higher _ cost is assighed for . claiming to have " dispovered " , the bug but - then failing to - peas criterion o ' the , computer - generated ' test . iirdblems . A correctly structgred cost algorithm encourages the user to t , hink . carefully abo ' ut the diagnostic ' value of each - - prpblem he ' creates an ' mot toh _ juMp to a donblusion Aoo quickly or too . slowly . _ I pedagogical Issues fbr ' Teachers , , . One application of BUGGY and the " diagnostirc model " yiew of procedural skills lies in the ' domain of teacher training . The realization that errors that appear " random " are aftn the : surface manifes . tationb of a systematic underlying bug - , , , is a major conbdptual breakthrough for many student teachers : All toooftebeimairiOrHthat appears to The random . hap a simple , intelligent , and coMplete , underlying . explanation . . . By proper Aiagnosia , . remediation for . - stuaeht can b - directed tawards ' i . his . ' epecific weaknesses ithe 2 . 1impartan6Rofsimply admitting , thatith6re may _ exist underlying bugs can not - be overstressed . ' Without appreciation of this fact , a teacher must view faiiure on a particular probleM as either carelessness or total algorithm : failure . , In the , ftrst : ' , case , - the ' pnedicated remeaiation giving more . problethatwhile in the - second , it is ' Ioing , . - oiler the . entire alg9riehm . ( 8 ) student ' s bug ( which may ; only A manifest itself Occasionally ) is not recognized - by the teacher , ` , teacher ' - 4apkains the arrant behavior as carelessneas , laziness , or worsethereby ofteminAitakenly lowering , his Opinions of : the . students , P Fir om the student ' s Niewrioint , , the situation is much Worse . . _ He , - - ' fallowingv what , he believes to be algorithm and , - seemingly . at randpm . gets v , piarked wrong , This situation can be : exacerbatedbY . improper diagnoeia , - F64 . example , JohPilit subtracts ` 284 from 437 anA ' ' ' ' , . ( gets 253 as an answer . " Of course " , says the teacher " you fOrgat to subtract : tram . . 4 - in _ tile hundreds place when you borrowed . " . . Unfortunately - Johnnie ' s , - : algorithm is to subtract the smaller digit in each column from the larger . doesn ' t haye anyidea what the teacher is . talking about ( he never . bo rowea " ! ) - and feels that he must be very stupid indeed not - to unders a d . The teacher : agrees with this assessment ea none of his remediat on has had any effect on , . Johnnie ' s perforMance , , BUGGY , in its present _ form , resents teachers with examples ' af buggybehaviorand proVides : practic , in diagnosing - the underlying . causes of , errors . Using , BUGGY , teachers gain experience in forming ' . theories about the relationship : bet een . the . symptoms of . a bug and the underly , bug This p perience can beyoultivated to make . teachers a are that there are metho s Or strategiesthat - th ' ey can use . . to Aiagn a ' bugs proPerly , - , jact , ' there care a lithirger of srateN bug3 that teachers may have in forming ' hypo6eses abOui a ' studePtIs . 16i6conceptions . : That . 7is , : the task of diagnOsing . a stUdent . isla , prooleaural skill and as such As , . . ( 8 ) In computer programming metaphors , thit . approach corresponds to the debugging activities of resubmitting the program - because , the computer . must haye made - a ' mistake and of throwing the whole program away : and starting O e ' over aorateh . and writing a new program . - . 17 - 4t - ) , susceptible to misAearning by the teachers . A common strategy bug is zi . , to jump too quickly to one hypothesis . Prematurely focusing on one hypothesis can . cause a teacher to be unaware that there may by other 1 ` competing hypotheses that are possibly more likely . A , common psychological effect of this approach is that , the _ teacher generates problems for the student that confirm his hypothesis ! In some cases , . _ , ) teachers , may believe their hypotheses so ' strongly thkt they will tiii ignore contrary evidence or decide that i ie , merely randm noise . One . general diagnostic strategy that a ads this pitfall is - the . technique of differential diagnosis ( Rubin , 1975 ) in which one always generates at least two hypotheses and , then chooses test problems that separate them . S Another common strategy bug 4s to lOck onto only ' one type of symptom . For example , one student _ teacher was given the initial example ( A ) , after which he . proceeded to generate example problems ( B ) and ( C ) : 0k1 19 81 ' 19 ' 818 At this point , ha concluded that the bug was " writes the bottom ligit after the top number . " But his hypothesis failedi when he wag given the first test problem : 8 + 12 . to . which he responded 812 , The bug is that single t git operands - are linked on t , o the end of the other operand , . o that the , correct buggy answer is 1 . 28 . By presenting examples only with a shorter bottom digit , i , , he had obtained what seemed to be confirming evidenae of his hypothesis . ; A general rule which could be emplOyed to avoid this ' fixation is that whenever an example of incorrect behavior has an asymme ry ( length of top and bottom n . umbers ) , then try an example ' with r the a ymmetry reversed . . U & ing this rule , the teacher would also generate problems with larger top numbers before ht . reached a conalusioh . BUGGY provides an environment in which teachers can experience the ramificatibns of not employing rules and strategies l ' , . during diagnosis . ( 9 ) ( 9 ) One job for an " intelligent " tutor for BUGGY is to recognize and - 18 . - 0 , 1 ' ' Another important issue _ concerne the relationship between the language used to describe a student ' s errors . and its effect on what a 4 . teacher should do to remediate it . ' , Is the language able to convey to the student what he is doing wrong ? Should we expect teachers to be able to use language as the tool for correcting , the buggy , Nrgerithms of students ? Or should we expect teachers only to be able to understand what the bug is and attempt remediation with the student with things like manipulative math - tools ? The following descriptions of hypotheses given b3i student teachers , taken from protocols of BUGGY , give a good idea of how difficult ' it is to express procedural ideas in ' , English . The de , scriptions in parentheses are BUGGY ' s prestored explanations of the bugs . " Random errors in carryover . " ( Carries only when the next column in the top number is blank . ) " If there are less digits on the top than - on the bottom she adds columns diagenally . " ( When the top number has fewer digits ' than the bottom number , the numbers are left - , justified and then added . ) " Does not like zero in the bottom . " ( Zero subtracted from any , number is zero . ) " Child adds first two numbers correctly then when you need to carry in the second set of digits child adde \ oumbers carried to bottom row then adds . third set of digits diagonal , ly finally carrying over extra - digtts . " ( The carry is written in the ' top number to the left of the column being carried from and is mistaketor another digit in the top ' number . ) " Sum and carry all columns correctly until get to last column . Then takes furthest left digit in both columns and adds with digit of last carried amount . This is in the sum . " , ( When there are an unequal number of digits in the two ' numbers , the columns that have a blank are ' ' filled with the left - most digit of that number . ) Even when one knows what the but is in terms of being able to mimic it , how is one going to explain it t6 the student having problems ? Considering the above examples , it is clear that anyone asked ' to solve a set of problems using these explanations would , no - doubt , , have real trouble . One ' can imagine . . a studettis frustration when the teacher offers an explanation of why he is getting problems o . marked wrong , and the explanation is as . confused and unclear as these are . For - that matter , when , the correct procedure is described for the first time , Could it , too , be Coming across so unclearlyl 1 The problem of adequately describing bugs is fdrther . complicated ' by another surprising , fact : Fundamentally different bugs can cause point out ' places where instances of general rulee and strategies should be used , This possibility is discussed in Section 4 , 19 - 4 - - ) identical behavior ! In other words , there can be several distinct ways of incorrectly ferforming a skill , that always generate the same ) Hatswers " . For example , here is a set of problems : A 186 298 89 ' W31 One possible bug which accounts for these results is : the columns : are added without ` carries and the left - most digit in the answer is the total number of - carries required in the problemx _ this case , the student views the carries as tallies to be counted and added to the left of the answer . But another equally pladsible bug also exists ; the student plades the carry - to the left of the next digit in the top number ; then when adding that column instead of adding the carry to the digit , he mistakes it as a tens column of the top digit - - so that when adding 298 and 169 , in the secondcoltmn he adds 19 to ' 6 instead of 10 to 6 . This , generates the same symptoms . So even when the teacher is able to describe clearly what he believes is the underlying bug , he may be addreasingthe wrong one . The student may actually hays either one of these bugs . ( 10 ) V An Experiment uping BUGGY . \ with Student Teachers To determine BUGGY ' s impact on . stUdent . teachers , we had a group , play . the game deaeribed in the beginning of this section . The ' goal of the experiment was to explore 14116ther exposure to BUGgY significantly improves the student teacher ' s ability to detect regular patterns cif errors in simple arithmetic problems . ( 11 ) The . subjects were undergraduate , education majors from Lesley College - in Cambridge . Their exposure to BUGGY lasted approximately one and a half hours , during which time both addition and subtraction bugs were presented , . The effec ' ts of their exposure to BUGGY were Measured by comparing each . subject ' s performance on the pre - and post - exposure debugging test , an _ example of which is given in Appendix 1 . The detailed analysis and . discussion of the experiment is beyond the scope of this paper but has been ' described in . a technical report ( Brown et al , ' 1977 ) . Briefly , thodgh , . the ' results of the experiment showed that exposure to BUGGY ( 101 This Possibility leads to an interesting question concerning how one can ' prove " t at two - - different bugs entail , logically the same surface manifest at ns . ( 11 ) We would - 1 ( ke o thank . Dr . Mark Spikell of Lesley College for his assistance in t is ndeavor . ' - 20 - slgniticantly improved their aWliti _ ty to detect regular patterns of , errors . We also investigated the qualitative issue of what the student teachers felt they gained from their exposure to BUGGY . To assess their impressions , we convened the , entire group , after they had finished using BUGGY . At that gathering , we first asked them to , I write their responses to two questions ( discussed below ) , and then we taped . a final group discussion in which we sought their reactions to using ' BUGGY and their suggestions for its deploymeit with school - aged students . The following week , their professor , whi ) also participated in the initial experiment , held ' a second group discussion and reported - . . tows the consensus , which was consistent with what they had written . Appendix 2 lists all the written responses to the question " What do you think yaU learned from this experience ? " . All 24 responded that they came away with something valuable . Many stated that they now _ appreciated the " complex - and logical thought process " , that children often use whendoing an , arithmetic problem incorrectly . . " It makes me aware of problems , that children have and they sometimes think logically , not carelessly as sometimes teachers think they do . " " I never . realized the many diff ent ways a child could devise his own system . to do a problem . " They al o stated tha ' t they learned * better procedOres for discovering the nderlying bug . ur learned that it is necessary to try many differen types of examples to be spre that a child r , ealiy understands . Different types of - difficulties arise with ' analysis ' quiiiit6 : 1 * . - thesame . Perhaps the computer motivated ' different , problems . " types / debug ' , student errCIrson , , , , the test ( papey and pencil ) seem . more . ( Pihtault . than , 4thA211 , ' _ cpmputer But - , thit : doesn ' t make any - sense . my analytioal . aW $ . analyses ' necessarylto Appendix 3 . 11 Tt . ; , 8 1 w . written responses to the queston " What 0 is yourreactidM - 161402° . Many ' felt that " BUGGY could be used to sharpen a teacher ' s awareness of differentAifficultiesidith additiqn and , subtraction . " They felt that it might be of use in grade schodl , high school , or with special needs , students , or even as a " great experience in beginning to play with computers . " fl - N 21 0 Pedagogical Issues More Specific to - Middle School Students We feel that all of the issues discussed ' above are as important for soboOl - level students / as they are for teachers . There is great value in introducing young students to procedural notions . The BUGGY system provides controlled envirbp - spent for such an introduction , as ' well as one that can be easily . . integrated , into a standard ourriculk . . . 4 : 0Also - note - that for a r5kddle , school student to play the diagnostician ' s - role requires his studying - the procedural skill per se ( i . e . , its structure ) ' ' - as opposed to merely performing it . , This experience can be especially important * as . students begin gebra , . which is their first exposure Io , procedure " schem By prese ing procedures as objects , of study ; BUGGY can thus be used . to explore the powerful - ideas of hypothesis formation , debugging , debugging strategies , - and ' so on : Of course , such a use requires more than just the BUGGY game . AnCther . . reason for having ' students develop a > language fon talking about procedures , processes , bugs , and so forth is that such a language enables Ahem to talk , about , - = and , . . think about , the underlying causes of their own errors . This facility is important in its own Xight , but it also gives a student the motivation and the apparatus for stepping back and critiquing his own thinking as wellres saying something interesting and . useful about his errors . The difficulty in getting students to , test the plausibility of their own - answer ( such as by estimating , . it ) may be due to the lack of any appropriate , introspective skills that the , student could fuse sonde he knew his - answer was wrong . An . important , ancillary , ndn - mathematic . al benefit of a Student ' s involvement with BUGGY is exposure to the idea of . . role , neversal . ( 12 ) To , - communicate . effectively with others , children must learn not only , language , ' but also the use of " social speech " speech that takes * into account _ the knowledge and perspective of another , person ( Krauss and Gludksbergot977 ) . Piaget uses the . term ' " childhood egodentrism " to describe ' the child ' s inability to detach ' hiMself from his own point . of view ' and to take into consideration Another ' s perspective . ) Although Krauss and Gludksberg - agree that egocentrdsm plays° a large part . fn very young , children ' s eech , they believe that even in older . / t - - , ( 12 ) This idea is att * ibutabl to . Tim . Barclay , " at the Cambridge Friends School , who has ' been experimenting with various uses of Buggy with sixth through eighth graders . ( 1 - , Oi 4 22 - * children the ability breaks down when they° , are faced with a demanding cognitive task . We believe that taking on the viewpoint , . of the errant student by analyzing another ' s mistakes can provide ' aluable practice in role - playing in a demand beneficial to the development of " social ' speech " . situation and Can . be ; Some Results on Ulm , 5 . . P9GY with 7th and 8th : qraders To explore the effect of the BUGGY game on 7th and 13th graders and to discover whit type of additional ' instructional material and activities . Must - back up the use of5this computer - based system ' , we Aio played a terminal running BUGGY , in aclassrOom . The teafbher Provided a short introduction to the game and the notion of bugs and then the ' , . . Student0 ( 13 ) were free to use the system during the term . During this experience , we noticed the . followinglphenomena . When the students 0011rst started trying to discover the underlying ' bugs . in _ BUGGY , their . most common reaction was that upon seeing the mistakes of the simulated buggy stuAnt was to exclaim , " Wow , how dumb and stupid this kid must be . " However ' , after a week or so of exposure to BUGGY , the students ' reactions changed from ibelie ing that the , simulated student was dumb toone of appreciating C ' that here was , in fact , a systematic , / explanation for what this student was doing . They began4to see that he : 0t ) had fundamental misconceptions . as opposed to being just . stupid . ThiA result is particularly exciting , sinoe . paves paves the way for students ' to see their own faulty behavior , not / as being a sign of their Stupidity taut - as a sotrde of data from which thpy can f / 2 understand theirNor , errors . - Unfortuna : tely , we have as . yet mo , - data concerning the , transferability orthis awareness , and whether or notit will lead to students ' - being more capable , and Ni / ling to look over their - own work for errors . . A sl at . ( 13 ) All of the ' students participating in this activity , had already mastered the procedural skills being " bugged " . In fact , we have . - severe reservations about the advisability of younger students using this particular game tspedially if . they haven ' t mastered thecorrect versions of the skills ' cOmprising the network . I However , ' there . are extensions ' - to BUGGY ( discusaed in the last section ) However , , , make it appropriate for school children in ' the process , of learning the ' given procedural skills . Section 3 _ _ _ ( - - kLIT9NATOHilAGNOST , 16 MODELING SYSTEM a C \ fin this section " , we describe a diagnbstic system that is based on our arithmetic procedural network , recently completed by Burton . The potion of , modeling procedural skills as execdtabl , e . networks and then expressing all potential . ' misconceptions as buggy ' versions of subprocedures in lite network provides a technique for . efficiently determining the cqnsequences or symptoms of a given collection of bugs on a set of problems , It therefore has the pbtential of diagnosing and explaining allof . the procedurally incorrect answers rot any given problem . For example , aa we . indicated in Section 1 , given a procedural neslork for addition and an addition problem ' ( like 35 + 782 ) 9 . all the buggyV subprocedures as well as . combinations of buggy ( - H . subprocedures , lc - an be inserted and than executed in the addition procedure one by one . a that all the possible buggy answers Vo the problem . are \ generated . Those answers can then ( be compared to a student ' s work to de7rmine possible explanations of - - the , student ' s 4 particular misconceptions . In this way , pne Might use the procedural network to diagnose a student ' s basic misconceptions , over an entire lhOmework assignment or an arithmetic test - , There a e , however , ' several complications . with this simple paradigm for diagnosing a student . One is that the student who has developed a novel singleton bug ( as ' op ' poSed to one that arose out of a combinatiOn of " primitive " bugs ) will not be diagnosed . Another ' is that students ga . make " random " mistakes ( presumably as ' many while following an inoorrect - procedure hs : correct on ) f ' hat could erroneously lead , to the , exclusion of , his bug or . the , inclusion of . another bug that happened to coincide with his urandomness ' i . Finally , blindlr considering all possible combinations of bugs can lead to a 4t . combinatOrial . ekplosion of possibilities . In what follows , we shall discuss some solutions to these - problems . A I ) eb , StrUoture " Data Analvais Tool e I , AAs a first step in developing techniques fop automatically nosing a student ' s errors , we sought a large data base of ' student answers on some arithmetic test . We started out this wayfor two reasons : First , . . . an analysis of the student errors not already explained by the ' existing network suggests - extensions - to the network - - 214 - . 40 that . may have been overlooked . Obviously , if the BUGGY system is - going to be useful . a0 . a diagnostic tool , its arsenal of bugs must be very extensive ! Second , . . oncef a " compete " network of bugs hlas been constructed , , analyzing a large data base , rovides some evidence of how many student errors , are procedural rather than " careless " errors . Suet ' an analysis also indicates how consistently students apply buggy procedures . ' 1 ) 4 : 3 they use the buggy procedure - , every time ' it - is appropriate ? Wien ' theyget a correct answer does that contradict the use of - their bliggy procedure , or is it just that the buggy procedure for this problemApes produce . the correct answer ? Th Analysis . also , . reveals which procedural errors occur most of en , and Ap what combinations . Answers to these questions not only influence the design , of the diagnostic system ( as we ' will see later ) . but also have an impact on how that system could be used . We we ' re fortunate to be able to obtain a large collection of pertinent data ( 114 ) already in computer readable form . This data stemidrfrom an achievement test administered in Nicaragua to 4th , ' 5th , aticF6th graders , Tkere were 11 . 0 diffecent test versions , each consisting of 30 problems combining both simple , and complex addition and subtraction problems . One version of the test is , given in Figure 4 . The makeup of each test followed , , a complex prObeduee discussed ' by Friend ( 1976 ) . . b . + 2 7 Figure 4 A . Sample Test 9 - 9 43 . 353 - . 213 - 4113 521 81 - 79 + 41 342 21 - 221 123 \ 4769 9 - 257 13 - 0 . 91 , 161 + & ! 12 \ 565 M39 743 12 + 35 597 6523 _ Zilg + 75 . 128A + 311 + 9 . 77 , ' 705 917 1 . 0038 864 10060 m579g 70a 18 - 9 639 , - 4319 - 98 + 47 + 5 + . 3 . p3 43 . 1 e ata use n t is stuywere ma e avaiae ytednstitute for Mathematical Studies in the Social ScIences at Stanford University . The dagaswere ' collected in Nicaragua as part of the e Nicaragua Radio Mathematics Project supported , by Contract A10 / CMta - C - ' 73 - 40 ' from . U . S . Agency of International Development . - - We ' are grateful . to Barbara Searle for , allowing . us access to the data . See Searae et al 1976 ) for a description of the , NRM project . - - 25 - ` " ) ; . or i , j . . k . Admittedly , these data , have theJlimitation that the particular . . / results derived from them are not necessarily generalizable to American schools . Although the procedures taugo . : Yfor addition and I . , subtractio re similar , ti e environmental and culstural - experiences - , of , the tudents are quite different . Nevertheless , tti - 8 - data base I i provi es a convenient starting ' point for this research as well as ' a , . . . . _ . . gene al ' idea - of the pereentagl ? ' of students making procedural as oppose to " random " errors . In addition , the methods we devised to analyze these data would apply equally 1411 to data collected Under dot i ' her ci cumstances . glo0 . r7 The data base available , for this ' study was large problems 1 . 9 , 500 performed by 13c0 students . We limited ' ourselvelp to conbideration of ' just the sObtactioirspoblems ' on the . test because the addition problems . included some in , which three or . more number ' S were to be added , a condition that can produceerrors not modeled in the present addition network . e As a first step ; we extended the BUGGY systeM . to produce " bug comparison " tables for students as showh in Table These - tables summarize how , well the student ' s behavior can be explained - or _ predicted bifLa simple bug . in the . network . The format of a table kq as follows : The problems with the ' correct answers appear at the top ofp . each table . , . ' The student ' s answers appear on the neit line using the . e convention ' that " - " indiCates a correct student answer . Each of the remaining lines provides the name of a bug and the answers produced by the ' assumption that the student had this and only th bug . ( 15 ) ' For each Of these lines a " * * * " means that the bug predicted the student ' s , \ incorrect answer . A " * " means that the . bug . in that row would . give the correct answer and also that the student got the correct answer . Thus " * " and 11 * * * indicate places of agreement between - t4e student ' s behayior and the simulated . behavior of the bug . kn " ! " means that . the bug would give the correct answer , but that the . student gave an - incorrect pne . ( 16 ) - A number which : appeara in a bug row is the , answer c15 ) Descriptions of the bugs appear in Appendix 4 . , ( 16 ) In both the " * " and , the " ! " cases , the bug has not manit ' ested , itself in the . answer - as an error . For , exac ile , lf ' a bug is 0 - N = 0 , it - r 26 - - i ) Table , 1 An Initial Bilg Comparison able a , 3 . 6 4 79 32 221 1 99 353 33 81 7 4769 257 6523103 . 7g12 . 1039 7o5 10038 10060 7001 o 161 1280 64 6 44 9 4319 98 94 - 5 20 11 ' 412 64 4769 96 5243 Student answers : - - 98 - 418 - 1041ET / BOHROW / OVER / BLANKS : * * 1 * * ftOPS / BORROWATtZERO : * . * * 1 * 49 * DIFF / 0 % - N = N : . 4 # . * * * * 1 ' 1 839 . * * 4 9978 I * 39 7 ' 995 . 696 5719 9962 6907 169 7 8 . 1095 706 14 . 319 10078 7 , 097 . " - , 139 ' . * * * 15719 , 10062 7007 1 * * * * * * 671 ' 9 10062 7017 ADD / INSTEADOF / SUB : ' 11 178 695 . 854 * * * * * . * * 7803 1 . 67 1 . , that the bug would give : when it ism different from both the student ' s answer . amd the correct answer . ( 17 ) . . . , - . . 0 Initially , any , 74 bug that expia ' ined any of the student ' s ' behavior at ( i . e . , generated at least one . . . ' " * * * ) wab ' - included in the table . , 51 . 1083 41t14 1435 , 7 . 10158 70 . 95 However , : thewe tables proved to be too large to conveniently , read so a routine Wa ` added to delete any bug if there was another bug that accounted for the same set of answers as wellas some others . Analvsis of a zug . coppArisdm Table 19 When we are determining whether not student has a particular bug , " * " / and " * * * " : are confirming . evidence that the student ' has the bug while both " 1 " - anA , numbers thebug row are disconfirming evidence We ' refer to the resultsH in , a bug comparison . 4 . . as " ieVidenee " because . there may be several possible explanations for . any , particular answer to ' one problem . The student , may have ( made ' a Careless ' errorwhile fllowing his bugged procedure , iherefore leading to a number in that bug rows instead of a " * * * " . He may have . an unmodeled coMbinatiori ' Cf bdgs , only one of which manifested itself and resulted in an " I " in the row of the other bug . . Or he may have . been following a totAlly . different procedure or ' no ' procedure at all , thSt . just happened to give him the same answer as a bug leading to a a * * * would no show itsel in a problem unless - there is a in the problem ' s top number ( or 0 ks generated during solutien ' by borrowing from a coluien with a 1 ) , ( 17 ) An additiddal case ' arises when the student does not ' answer . a : problem . Although none ' of our exaMple " tables . will include this case , it is marked with a _ . " # " . " # " is also used in a bug ' row to indicate that the bug couldn ' t do the problem . We saw very little evidence of students not doing a problem possibly because the students were given as much time as they wanted to complete the : tests . - 27 - Jo in a bug row . The final decision on whether or not the student is using a buggy subprocedure must be made by considering - of the evidence from the test . But - how should co . nflioir1 A . evidence be weighted and summed ? . . . , Let us consid ' er an analysis of the bug comparison table far a partiFular , . . 10tudent , Zable 1 . ' _ Both ' 1 * FORGET / BORBOW / OVER4BLANkS ' and , . AISTOPS / BORROW / ATkZERO produoe the same answer in problems 1i ( 1039 - 44 ) and 12 ( ' T05 - ' 9 ) 7 - ' the errant student answers . But ; neither has particularly good agreement across the rest . of the table . Which , if either ; misconception was the student operating under ? . Our inclination is tp believe that either bug satisfactorily explains the behavior , but / how ' does one , ' decide - in general ? To answer these questions , we analyzed , by , hand , several hundred student ' s tables like , the one . in . Tabe 1 . $ . ' During these formatiye analyses , the " tables were examined : to fe ret out students whose behavior was not capture & by any existing bugs . The work of these students was closely scrutinized for any underly ng computational pattern . a pattern , could / be . . dAscerned , t e incorrect subprocedure was defined and . this news " bug - " Was added . ti the network . During . this formulation period our list of bugs grew T om 18 o 60 . BUltjp ; e BURS and Their ( Bonohvidus ) Interact , iOns Most of the 60 subtraction bugs ' discovered during this period were pri itive ; in , the sense . ttlat each redefined : only one A 3 : 8U6 . . proced re in : thefsubtraction , nel , wo Wab " itpossibaethae some of the itu ents ' . bejevior was dueto ' iniatiple bugs that We had railed : to notice ? To explore this possibility , we - programmed the BUGGY diagnos is system to try all hairs - of : bugs . . That is , buggy definit ons of two subprocedures were systematically inserted and then execut d . ( 18 ) This process . turned up . 270 bug combinations who e symptoms were different from any of the primitiVeApugs and f Other in one test . of 15 problems . ( 18 ) During this process , bugs which were alternative . definitions of . the same conceptual procedure , of course , could , not be paired . There tt ' 6 - were also cases where one bug would . preclu another . For example , SMA , LER / FROM / LARGER precludes any of e bins : " in the 4 , orrowing pre ons ' of the network from ever being executed add pro edures as borrowing is , never required . In these cases , a bug can re ent iother ' port he ce " switching in " bugs in the unused portion - would - be useless as lo g as : the higher bug remained in effect . ' Rather than an extensive an : lytis ' of the potential . inte ! a . ctions of - . bugs , we opted - for . the si . pl T solution of comparing the bugs via , their symptoms over a , fixed s t of problems , f - . In order to : , illUstr ) ate the - diagnostic power ` of this generative technique , consider the example of the student whose work is shown in Table , 1 . From Table , 1 , no . dtscernihleT . pattelis evident . The - Amdentis ' work does however ' admit to a beautifully simple i Charecterization which is the Composite of , two primitive bugs . . . - Table . - , 2 hows the new ' bug . , comparison table that was generated for this - student from , comparisons using multiple bugs . ( ' 19 ) Notice that the - , - , comparison line which resulted from thercgmbination of . t wo bugs is . I substantially different from either of the sinkle bug lines or even from a linear - combination of the two cOmparisons . Thii is due to the . 0 q nonobvious interactions of the two buks , , particully where the 1 , - - , intermediate products of one of the ! bugs enables or disables , the other bug . For example , in problem 9 , C1o3 - 64 ) , the " 0 - n = n " I ' lut . alone will not manifest itsIlf because the , . borrow / from the , Tirst column will . have changed the . - 0 in the second column to , 9 . , HOwever , . the " staps - borrow - at - zero " bug ( 2 . 0 ) has the side effectof Dot changing the 0 to 9 , . and hence enable6 the " 0 - n = 0 " bug . ' In - generai , the Interactions between bugs can be arbitrarily complex . This can make a teacher ' s diagnostic sk very difficult . , . - ' 77 - 3 . Table 2 Multiple Bug Comparison Table 3 79 B3 4768 lei M8 1N NR 10a 7 , 03 14310039 8 10098 7001 94 - - - - - - 5 20 11 412 ' 64 4769 96 5243 39 779 995 6 , 96s 5719 9962 6777 Student answers : - - - gt 169 738 1095 706 1431910078 7097 ( : 15IF1 / 01 = N 4 * STOPS / BORROATZERO : ! * ! * * * 839 * * * * * * * * * * * * * * * * AD04 , INSTEADOF / SUB : 1V 178 695 854 * * * 0 * * * 7803 167 13851 1083 714 14357 10158 7095 Using the multip e bug comparison tables generated for about one . , - hUndred students , a identified which of the students , in Our - . , 4 _ judgment , were m ki g procedura , as oppose to careless or , . random . erroirs . During this , hand - done classification process , we articulated 19 n the , tables , g p multiple , bugs are shown as the names the g primitive bugs enCl sed in arentheses . ( 20 ) In the " stops - borrow - at - zero " bug , the student doesn ' t know hoW to . ' borrow from a column which has a0 in the minuend so he doesn ' t do anything to lit . ' He does however pdd 10 to the column he is . processing . - 29 - and refined ' our intuitive use of the evidence from a student ' s entire . test : in . order to make . that Eventually , our understanding and description of the process beoame . precise enough to be compuerized . sb that it could be run on all 130 ) students . OUr hand - done study ' suggested six intuitive groupings studenti : . O T . Those studenteyhd got , all the problems correct . " 2 . Those students who erig on : any number of prOblems but whose errors were explained one bug or one bug pair . 3 . Those students who clearly exhibited t e presence of a bug b who also exhibited some behavior that s not - explained by tug . 4 . Those - - , students who missed ' only one or two ( of . fifteen problems ) and in a way not oonsistent ' w th any bug . 5 . . Those students who exhibited some bug y behaVior but not consistently . 6 . Those ' students whose , behavior appeared r ndomrelative to the , known bugs . SS A . Tables 3 , 4 and . 5 show representative student fr m . groups 2 , ' 3 , and 5 . - The intuitive justification for theee group No , emmed from tye possible tutorial approaches teacher mig t tala to remediate a ' studfint The classes of studints and the obsible very ' general tutorial approaches w saw , are : \ i . those students . who are . Orreet ' : ' or very , , nearly correct and probably just , need More ' pract ce if anything - , ( Groups 1 and . 4 ) 1 ii . ' hose students , who : are . e biting consistently IncOrract ehavior and , th refore , w ose remediation mayprofitably , be algorithm ( Groups 2 and ` - and . yiewa & as a process of " debugging " the . _ student ' s . - present a ° . - 111 . those students for whom a thorough re - teaching of the . entire algorithm appears to he essential ( Groups5 , and 6 ) . h are . definitely pot saying that for all students in Groups 2 and 3 that the onlq or even the best pedagogy is ' to focus on ; student ' s buggy procedure . Instead , we are trying to identify those students who are consistently making the same mistake and for whom ' obugging of - . his procedure mav be useful . 4C10 45 30 . 1 " Tahle3 b , Example of k Student Whose Behavior , is Well Explained by One ' Bug . , . The hug - , ' * BORROM / FROM / ZERO , is that . when borrowing ft : cm - a column An whiph - the 4416p number , is 0 , the student wri . tes ' 9 but does not continue horrOVIng frbm the next column to . the ' left . - . , , , . , 8 99 353 633 81 4769 257 6523101 . 7315 ' 1DM 705 10038 10060 7001 ' 3 79 342 221 17 0 16 ! 12110 64 - 6538 44 . 9 4319 98 94 5 20 Student ( 5 9 . . 0 * * . 11 412 64 answers : * o ' * 4769 * ' 96 : 5243 . 139 . / r * 39 - . . * * * 779 1 * ' 995 - - - 896 5719 1995 ' 76 ' 15719 * * * . . - 796 it * 9962 - ' 6907 - ' 109 ' 62 17007 * * * . iliffr ) Best guesa : , 16BORROW / FROM / ZERO GROUP : 2 - Tahle . 4 Example of a Student Who ' Exhibits Oons ' iet _ ent . BUg Zut , Also Has Other Problems . . . . 8 99 353 83381 4769 257 65gg 14 zm lon 70v104M lo0W034 3 79 342 221 1 , 7 , 0 161 12 . . . . _ . 5 20 11 412 64 4769 96 5243 39 . 779 - 995 696 5719 9962 - 690J ' . . . . . . . RE . . . . . . . IP . . . . . . . . ravmms _ _ _ _ _ _ Student answers : - , - * - - - . 74 - 9 1203 * 95 704 10019 70 60 ' 07 ) I5 7 1 0 2 ) ) DIFF / 0 - = 0 * MOVE / OVER / ZERO / BORROW ) ; > - . g . . , , * , * * * i * . 16 - , . 0 . 0 , 0 * 809 * * 0 606 * * * * * * * 0 * - ABORROWYRROSS / SMALLER / ADDING / TEN / EXCEPT / ZERO * DIFF / O = N = 0 ) . ' * * ft , * I 11 * " " $ 89 * * * 606 0 * * * * i * * * liSBOUMI / SPECIAL i ; SMALLER / FROM / LARGER & O - N ; 0 ) : . * * , * * I * : 116 5363 I . * * * 1015 I ili4 10042 ( 2 4 . 3 6 ) , 11 ' ( * BORROW / NOVDECREMENZ * QUTT / WHEN / BOTTOM / BUANK ) : 4 * * * * * * a 196 5343 49 ' 1889 y * 6 6729 72 17 illORROW3N63DECREMENT * * * * * * * - - % - ii ( 1 5 0 2 . 7 ) . _ SMALLER / FROM / LARGER : ' * , * * ) IF ' 76 . * 116 , 5363 161 1221 1015 * * * 14321 1003 & , 7093 Best guess : ( * DIFF / O - N = 0 * MOILE / OVER / ZEROYBORROW ) GROUP = 3 - ( 196 5343 - 149 1889 1095 706 16729 10072 7017 - 31 - 4p Table 5 Example of a Student Who Exhibits Some Buggy Consistently . 8 99 353 3 79 342 - 5 20 11 633 . 221 81 17 64 4769 0 412 4769 257 . 6523 103 7315 1039 t61 . A280 . 64 . 6536 4 9 . 6 5243 39 . 779 - 995 Student answers : I . I I 1 70 I 98 h . 109 ' 839 ' , 1095 ' P4I IFF / 8 - ! 1 ! N * STOPS / BORROW / AT / ZER0 ) : * * * ! . * ! * 169 * * * * * PIDIFF / 8 - i ! N * FORGET / OORROW / OVEa / BLAN . K ' S ) : Behavior But Not 705 T003i 10060 . 7001 9 431 98 94 696 5719 . ' 9962 6907 706 14319 700 001 * * * * * * 16078 7097 - * * * * I * ! * 139 . c * * * * * * * * 11 . 1 ) 1F11 / 8 - 1N : - . 0 & 1 - N = 1 * : STOPS / BORROW / AT / ZER0 ) - : * * * 7 . 1 11 ; 16 . 1078 7007 * . - - * * * - - 869 * * * 10 ( 09 lom ( 1 5 . 0 1 8 ) . * * : * * * * * * 1 . D6 5303 100 1000 1005 700 101 10000 7000 * ZEBO / INSTEADOF / BORROW : GROUP = 5 ClasSifioation Algorithm The algorithm that we eventually converged on for assigning a student to one of the six major categories defined on p . 28 is , rather involved , so some reade ' ns may prefer to skim the following ' displission . If tIe student erred on at Least ' one problem , each bug was rated according to how well it accounted for this behavior . rating , ' . results ' in a group number for each bug . ( 21 ) The rating of each ( bug depends on the number of answers falling into each of five groups : i . those student answers for which the bug predicts the student ' s incorrect answer ( the nuinber . of " * * * usappearing in the bueS . line referred to as N * * * ) ; - ii . those student . answers for ; hich the bug _ predicts the student ' s , correct answer ( the number pf " * Hs Nt4 ; iii . those student answers for which the bug predicts the correct answer but which the student answered incorrectly ( the number of " 1 " s N ! ) ; iv . those student answers for which the bug predicts an incorrect - answer but which the student answered correctly ( Nr ) ; v . those student answers for which the bug predke - ts an incorrect answer different from the student ' s incorrect answer ( Nw ) . * * * ( 21 ) In the act , ual implementation , the bugs are ordered by the number of symptoms accounted for and are ranked from the most promising bug until the group number increases . 41 - 32 - This analysis gives a symptom vector of five numbers ( N * * * , N * , N ! , . - Nr , NW ) , examples of which are given , iin Tables 3 , * 4 and 5 ' on the lines above the bug names : From the symptom vector , a , group number corresponding ' to the ' six - major categories ' of student behavior . given on p - 28 is calculated for each bug using the following procedure : ( 22 ) A bug indicates Group 2 student behavior if it agrees with all of the student ' s answers ( N ! + Nr + Nw = 0 ) or ifit agrees more than 75 % of the time on problems in which it predicts a ' wrong answer [ N * 114 . > 3 x ( N ! + Nr + Nw ) ] . A bug . " ' - indicatekL : : o _ up4 behavior ' . , if it - explains two or more student errors . ad prredicts , . more correct than incorrect answers ( N * * * > . 1 + . Nw + . N ! / 2 ) . In this formula , those problems in which the bug did not exhibit a - symptom are weighted by half - - the ' intuition - is that , on ' these problems , the student may be exhibiting other bugs as well . A . , bug . also rated as indicating Group3 behavior if it is a primate e bug ( not multiple ) ' that - , predicts more than half of the student ' s errors , and that predicts erroneous behavior more times than it fails to do so ( N * * * > N ! + Nw and N * * * > Nr ) . - A bug indicates Group 5 behavior ' if it predicts at least 2 ' incorrect answers ( N * * * > 2 ) . _ Otherwise a bug is rated Group 6 . The student is . assigned the grCup number of the loWest rated bug . If the lowest rated bug is note - Group 2 or 3 and the student has missed only 1 or 2 problems , he is put in Group If the student is put in ' Group 2 or 3 , the bug with the lowest group rating ( and which accounts ) for the most symptoms in cases of ties ) is chosen as the most likely - hyptthetical student bug . : Examkples of this result can be seen in the , fast fine of Tables 3 and 4 , _ Diagnostic Results for the Nicaraguan Data Base The above classification procedure . was used to analyze the _ set of test responses for 1325 4th ; 5th , and 6th graders . ( 33 ) A summary of the diagnostic classification by grade is given in Table 6 . As can be , nearly 40 % of the students exhibited consistently buggy 4 behavior : This " , figure agrees With a similar result report : dd by Cox ( 1974 ) : Addition and subtraction are not presented again ter the 4th grade . ' ! 1 ( 22 ) As we . have said , the classification scheme was based primarily on empirical studies ' . There are intuitive justifications ( rationalizations ) for each of the decisions ; however , in the final analysis , this algorithm ' was used because it clOsified students in close accordance with our hand - d . one . analysis . _ _ ( , 23 ) An , implementation note : The entire data analysis program including - the BUGGY subtraction models is written ' in INTERLISP . , The analysis of all 1325 students against the 330 bugs required - on the orderof 90 - minutes of CPU time on , a PDP - XL10 . Thesimilarity across grade level may be due to the fact that Table 6 Totals a srcentages of Student Classifications Groups 2 - and " 3 are consistmtlY following an incorrect procedure ( See text for further explanation , Grade 1 . - - - ' No . ( % ) , I , , . . _ G \ eo u p ' 4 ' 4 5 ' . Totals 4 10 101 93 ' 31 197 72 504 2 . 4 0 . 5 18 . 9 t . 6 39 . 5 14 . 7 160 . 0 . 10 3 . 0 86 2 . 0 , 73 18 . 7 38 10 . 0 132 33 . 5 60 15 . 5 399 00 . 0 6 17 88 64 47 131 75 422 \ 4 . 5 21 . 3 15 . 6 11 . 6 31 . 5 18 . 2 100 . 0 , Tota13 37 275 230 116 460 207 3 . 2 21 . 2 17 . 8 9 . 2 35 . 2 16 . 1 . . . / It is interesting to note that the most common bug was " when - . . . . . borrowing is required from a column in which , the ' t6p digit . is , 0 , . change the - 0 to a 9 . but don ' t continue borrowing from the next c lubn to the left " ; it occurred 107 times in . the 1325 , student tests ' . Appendix 5 gives the frequency of the 20 most common bugs . What Does a Test Scor . , e Mean ? One of the ramifications of this fully automatic diagnostic " _ 4chniciue - ' concerns its ability to score tests based on - what a student knowi Or doesn ' t know as opposed to scoring it . baSed solely , on the number of right and wrong answers on his test . Even with the advances . in criterion referenced testing , it remains true that a test is simply scored by what problems a student gets right or wrong . BeCause of the embedded nature of most procedural skills , a student can get many . . problems wrongg4imply by having one fundamental underlying bug in a primitive subprocedure that he / is using to solve different problems on the test . In such a situation , the score that a student gets can bear little relationship to the misconceptions that he actuallY , harbors ! A student can receive a low score either because he has many misconceptionseach one of which is more . or less , Ane top of , the procedural network ' of skills he is using , or he may possess a few , or 34 - 4 3 even / just one , misconception that is deep down inside _ . the internal workings of the procedural network and which is constantly being used to compute intermediate results Vied by higher - up subprocedures . Current techniques for correcting tests do not offer easy and reliable methods of ' separating these two situations . The diagnostic modeling technique - - discussed above cah take the answers - that a student gives on a test and , through its modeling syStem , show not only which . questions were answered incorrectly but why ' they were incorrectly answered . It is interesting to note that 10 / 7 of . he 1325 ' - ' ' students - , tested . had a bug in their borrow - from - zero subproce ure and , likisseb 6 ' . out of the 15 probrems ' on the test because orthis one underlying bug . The characterization given by BUGGY is a much fairer evaluation than scoring these students 60 % correct . f . d 1 I - I tlfe - The , procedural , network apparatus also provides a methodological ` tool for judging the quality or diagnostic capabilities of a given , test . . . This allows one to talk aboutAlowwell the test can discover and delineate commoj misconceptions . Given a test , each bug in the network can be used to answer all of the problems . The resulting " buggy " responses are - then used to partition the bugs : two bugs are put , in the same partition 41 - they produce the same answers to all of the test . problems . . Those bugi , in the same equivalence class or group are undifferentiated by . the test . " Diagnosticity " of \ the test can nbw be defined in terms , of the size of the - resultant equivalence clasSes . Also , any bugs in : - . t . i7e7eme group as the correct aners are not , being tested for at Taking the test - in Figure 4 , this system discovered that a student can have either of two bugs ( BORROW / ACROSS / SAME or N - NL - OAFTER / BORROW ) and still get 100 % correct answers . Such a sy ' tem could ' provide professional test designers with a formal tool for establishing , the diagnostic quality of a proposed test . Howe r , , our belief is ' that professional test designers have ' gobd intuit bns about : diagnostictests . This belief was confirme by running wo standardized national tests through the 330 subtraction - . bugs , . One of the tests left only one bug ? unexposed - - Tif - - TTproblems while the other left 4 bugs unexposed in 10 prob ems . The uneirosed , 2 ' 35 - bugs were rare for they were , knot even found in / the Nicaraguan data . There ' la a difference , however , ' between exposing a bug and diagnosing , , . it . Exposing a bug amounts - , to haVing at least one problem on - the test r in ' which the bug _ is manifested ; diagnosing a . bug reOres having test problem $ 6 * hyb differentiate between it and every Other bug . Using the Artificial Intelligenceparadiga of generate - and - test , it would , bp straightforward to . use BUGGY as a di4gnoetic test generator . The problem . generator , must produc4 e " interestingly " different problems . This generation can be done + using important . ' features of . probleMs such as the ' number of times borro ng J ' s necessary , or whether or not a zero apvears ' in the top numbe . Sets - . of generated problems can then be filtered using the procedural \ , network Vo identify bugs which are not diagnosed . From the bugs left undiagnosed , features can , be retrieved whid . h direct the generation of alternative problems to be added to the test . In this way , a highly , . diagnostic test can - be delieloped . Furthermore , ' ' since the answers that would be generated by using the . bugs are known , the test dould - , be a multiple ` choice test and still maintain its total diagnostic propertyl - Similarly , a real - time adaptive . testing ' system could be created based - - / on these tools . aiev . 1L ) Section IV , FUTIZRE , RESEARCH ` Thfp paper has , presented some of the problemg - that must be faced in diagnosing failures in procedural skills , ' and has described ' some . ideas about the formulation And implementation of diagnostic modeling " techniques , , that addreSstheSe rl , hlems . It has also - presented some , . , . ' , novel uses of diagnostic models as . a gaming / instructional device , as a deep - structure test grader , and as a t judge to - ' the : diagnostic ' quality of a test or a set of problems . The central idea underlying . , this research is the use of a D * - edurAl , network as a means of representing diagnostic ' models . he ' critical properties of this . representation scheme are its . abilities to represent An appropriately , structured breakdown of . a skill into sulskills , to make explicit the . control structures underlying a collection of skills , . and to make the knowledge encoded this way directly executable . Such a representation gnables a * . particurar subskill to be ea8ilymodified and then Simula ed or executed so that the ramifications of the modifiCation can be quickly : ascertained _ The structure of the networks becomes impor ant not only because it allows efficient - modlfioation ) put . also becaus the . represeriation of the modification can be used to contain explanatory or remedial material . ( 24 ) In addition , the structure allows certain types ' of control Structure failures to be directly represented in the - ` network and hence articulated ' - - if necessary . 11elati _ onskir - of - Diagnostic Models to Other Kinds of St qptural Models . We now turn to a ' brief look at the past and urrent work on structural models of students a - nd hOw they relateto diagnostic models based on procedural networks . . ost of the past and current research on this subject has . been focused on the intuitively appealing , notion that if one has an explicit , , well formulated model : of the knowledge base of an expert for a givenset of - skills or problem dothain , then one can model a particular student ' s , , knowledge asta simplification of the rules comprising the expert ' s prodedures ( Brown and Burton , 1974 ; ' Collins , Warnock and Passafiume , 1975 ; Burton and Brown , 1976 ; ' Carr 2 Contrast t is with t e - ( admittedly strawman ) technique of randomly switching - ihstructions . . in a machine language program which carries Out a skill ' . ' Even if a student ' s behavior could be ' duplicated , the resulting " modeln ' would be worthless as an explanatory device or as an aid to remediation . - 37 - and . : Goldsteinv . 1977 ) . Recently , Goldstein has expanded this concept in his Computer Coach research and has coined the term : noverlay model " for capturing how a student ' s , manifested knowledge of skills relates to an expeWs knowledge base ( Goldstein , 1977 ) . The work reportgd in this paper differs - in that the baaic modeling technique is based _ on viewing a structural model of the student not as a simplification of the expert ' s rules bet - rather as a set of semanttoally mvaningful deviations from an expert ' s knowledge ' base . ( 25 ) . Each subskill of the expert is explicitly encoded , along ' with a set of potential misconceptions of that subakill . The task of infering a Aiagnostic model then becomes one of discovering which set of variations or deviations best , explains the surface kehavior of the student . This view is in concert witt4 , although more structured than , the approach taker - 11 ) y Self ( 1974 ) in which he models the student as a set of modified procedures takeh ) from a procedural expert problem - solWer . Another cloaely " related approach to modeling a studefit ' a knowledge . base ' uses a production rule encoding scheme ( Young ( 19417 ) . an - d Smith and Sleeman ( 1977 ) ) HoweVer , procedural both theoretically and computationally from - these e ' rts in that they are designed to make . explicit the representati of ' the . control - structure . knowledge underlying a macro skill so that it can be effice4tly diagnosed and , explicitly tutored . networks - differ , . I 1 In ' the remainder or this section , we present our view of the more promising directions / for research relating to diagnostic models . Extensions ' the Gaming Environment . In the second section , we described the BUGGY game which was designed , to introduce the nOt4em of " buggy " behavior and provide . . ) . practice in diagnosing it . . Although this activity ' was initially designed for training student teachers : in diaghosing and articulating . A procedural bugs , it haa . also been used as an - activity to et kids to _ S . r , . introspect , on their ! ' already ' known procedUres s well as encounter 25 Because these eviations are ase on °tr . the stu ent ' s in . tene goals and the underlying telealogy of the subskills , we have no Automatic way to generate them k . , 4 & opposed to what could be done if the deviations - w - ere based on the ' surface syntax . of - the rules ) . However , ongoing work by theeauthor ' s ap well aS . Goldstein and Miller ' 11976 ) , arid Rich nd Schrobe ( . 1976 ) iset directed " toward helping to vercome this liei , atation . \ _ _ _ _ _ . , , i . - 38 - f . 4 thecondept of bugs . and debugging ) sfrategi6es an easily grasped context . - A limitation , of - the current gaming environment is that most of ghat the players learn while using the game they learn or discover on - ' their own . the . moment , BUGGY does , no ' explicit . tutOring ; it simply pro ides An . environment % that challenges their theories and encourages them to . articulate . their thoughts : ( 26 ) The rest of the . earning experience occurs either through the sociology of team Jearning or from what a person abstractsnon hii own : . The next step in realizing ' the educational potential of the BUGGY game is to ' implement an intelligent tutor which can ' recognize and point out weakness ( or interesting facet6 ) in a student ' s . debugging strategieS . ( 27 ) Our experiencds indicate that such a . tutor would be very helpful for middle sdhoOf and ' remedial . students who often get caught in Unproductive ruts . The tutOrIcould also help focus the student ' s attention o the structure of the arithmetic procedures themselves . It ' s , worth ' noting th , at some of the tools for _ constructing : an ittelligegt tutor for the BUGGY game already exist in ; thee : Nrm of the test . validation techniques described in the previous section . Nevertheless , these . : techniques do not provide the right kind of information for ' sxplaining to a student " why the probldm he just generated had little or no diagnostic value . We are currently explorimg , tbe kinl , of reasoning required to ans r " why " . An intelligent tutor designed apecifigoallyto help teachers will profit from a - theory of what makes an underlying bug easy or difficurt to diagnose . Simple conjectures cdncerning the depth of the bug from the surface . don ' t seem to work , but more sophisticated mbasures ' might . ' 4 ' \ It ' s hard to see how to predict , , - the degree of difficulty in diagnosing a particular bvit without a precise information - proceeSing or cognitive , theory of how people actually formulate conjectur - es abput ' the underlying ' bug or cause of aperror . For example , one such theory is that people walk through their Own a gorithm , looking . for places where a part . of . the incorrect answer is dif rent from their own Land then " 2 s a s orica oo no e , Y was - origina y eve ope . , to . explore the psychological validity fithe procedural network model for complex procedural skills . Durin that investigatioh we reali / e6 the pedagogical potential oTilev - en 1 . 1 / 1 simple verbion of BUGGY as an Instructional medium , ( 27 ) - or examples of he types of * Ctutoring see Brown and Burton , 1975 / 97 , 7 ; Carr and oldstein , 1977 ; Goldstein , 1974 : . / . . - " 39 - - 1 L . ) es try to imagine local modifications to their algorithm that . could - account for the error . Under this theory one would expect bugs that involve major modification , , , Or the procedureo such as changing the Airection in which columns are processed , to be diffie ' ult to diagnose . Sidilarly one would expect difficulty if a student ' s algorithm differs from ; the - idiagnostician ' s , Given an adequate theory , theAifficult situations ; - can be watched for and corrected through appropriate tutorial comments ddring diagnostic training . Arpther extension , to the BUGGY environment to encourage fu = rther lorgtion of - the ideas of hypothesis formation anddebnggig . is the , development of - a Spediaiized programming language for writing simple . arithmetic procedures . Actually ' hgving , students . ' write procedures provides immediate focus on debugging strategies - - a topic usually left until the end in most secondary school programming courses . In this limited environment ' , it should be possible to C . Onstruct an . 7 intelligent programming assistant as well as a - computer - based tutorial helper that can aid . ' a studene when the gets stuck . Providing students with a language in which they can write their own prOcedures also allows use of a game developed in the SOPHIE environment ( Brown , ' Rubinstein , and Burton , . T976 ) , where one student writes . a - pr ` akedure introducing a bug , and another student tries to discover it by presenting test problems . Bxten $ ions to . the - Diagnostic System Concerning the use of procedural networks , as a ' tool for diagnosing real students , we reiterate that the capabilips of the preselt systed are sol4T . 2diagnostic : no tutoring is gttempte0 . - - : The 4 e . issue of what tutorial strategy to use , even when it is known exactly what a student is doing wrong , is still gnipen que8tion . - One possible strategy is that the " expert " portion f the . procedural network could be made articulate in the sense of b ng - able to explain and justify the subprocedures it uses . Since t e system would know thes , tudent ' s bug , spedial problems can be ch sen and special , care can ' be taken while presenting the steps re the student ' s hug is . This feature could also be used to allow s ud nt8 , to pose their own problems , to the system and obtain a running account ' of the relevant procedures as the " expert " ' solves ' J . - he problem . A userul . notion for , the , artioulate expert may be ' to have additional 40 jj explanation or justification of each ymbolicprocedure in the network expressed in terms of a " physical " procedure using manipulative tools such as Dienes " block ' s . In this way , atthe execit ' tion of each symbolic procedure could . . " cause its analogous physical procedure whose execution 6 . - could be displayed on a graphics device , thereby letting the student see the numeric or abstract computation unfold in conjunction with a physical model , of . the computation . This approach directly attacks the problem of ' getting procedures to take on " [ keening " for a student : the acquisition of meaning is , we believe , accomplished by recognizing mappings or relations betwlen the new procedures and existing / procedures cor experiences . ` , . . / While ' we cOnsider the - articulation of the expert to ' haveNgreat . , , promise as e corrective tutorial strategy , it is by no means the only possiqleA such . strategy . It is pOpsible that with certain . . bugs ( and 4 cettairi stude , nts ) . , a clear description . of what is . going wrong may be su , fficieht to allow the studeht " to corpect his prob ' em . Or it pay be possible to formulate a sereies of problems " ( possibly in conDrInction a with physical models ) ' , : which enable the student to discover hip own k error . Or it may be , . best to , abandon his algorithm ICrather - than tr \ yini4 , to debug it ) and start over with a different , simpler . algorithm bUild the student ' s confidence . Genera ? Azatton to Strategic Knowledge Caution , should be - exercised ' in generalizing the procedural network model to other ' procedural skills . particular , the aspects ° of . knowl + edBe discuSbed here . are almost totally algorithmic in nature . containing - little heuristic or strategic knowledge ' in selecting or guiding the ' execution ' of the . primitives ( procedures ) . Many mathematical skills involve an interplay : between , , strategic . and algorithmic knowledge . For example , when - adding two fractions , one doesn ' t necessarily compute a common mUltiple4by multiplying together the two denominators . Instead , ' an examination is made of - the relationships between the tiro denominators such as identity , obv us , divis bility of - one by the other , i . elative . primeness and sc ) on ! On the basis of such relationships specialized ptrocedures . aresen . for . adding the given fractions . The rules unclerlyingth se decisions can have their own bugs and therefore , , these rules mutt e modelled within some representation scheme . Although . procedural network schemes cah - 41 5 _ ' . 1 . represent such , , decisiOn ' rules , webelieve that , other scheMes , based . perhaps more on annotated production rules ( Goldstein & Grimson , 1977 ) , deserve serious consideration . We are currently investigating 1 a hybrid approach for modelling fractions ' ( and their bugs ) which involves merging annotated production rules with procedural networks . r " - 24501915MIMLIAILLILLY . An important area for exploration , concerns the psychological validity of the \ skill decomposition and buggy , variant ' s in the network . Thit is , how well do , the data structures and procedure calls in the ' network correpond to the structures and skills that we expect people _ - , - , - - to learn ? From the network designer ' s po = int _ of views - the . psychological validity can be or , denigrated * by choorsing . one structural decomposition instead of another . Determining psyehologi9ally f neorneet " functional breakdown of a skill into its subskills is critical to the behavior of gaming , ancrdiagnostie systems using it . If the breakdown of ' the skill is not correct , common bugs may be difficult to model wh , ile thibse suggested . by ' the e - Amodel Tay be judged by , p ople to be " unrealistic " . . For people playing BUGGY based ; on a nonvali network , the relationship pits ts bugs and he behavior they observe , in people trill often be obscure . Measuring the - " correctness " of a particular network is a problematic issue as there are no clear tests of validity . However , issues - such as the easeor inaturalneas " of inclusion of newly discovered bugs and the appearance , , of combinations of bugs within a 47 ) breakdown can be investigated . ea Finally , we have left open the entire issue of a , semantic theory of how procedures are understood ( and learned ) by a person an ' d why , , bugs arise in the first place . . The . need for a theory of hoWk procedures are learned correctly or incorrectly is important - for at least two reasons . First , an interesting theoretical framework that accounts for , the entire collection of empirically arrived at bUgs will undoubtedly provide insight into how to correct the teaching procedure . that produced - the bugs , in the first place . Second , such a theory would beiithe next step in a semantidallybas4d generative theory of - , - student modeling . As we have stated " earlier , bugs ' have to be hand - coded ine the - network , , now . . Qne earl . . imagine generatively , producing bugs by a set of syntactic tranaformations ( additions , deletions , transpoaitiens , etc . ) bated on some appropriate 4 - 42 AL representation language . While some bugs can be naturally accounted for as " syntactic " bugs , others , such as ' inappropriate - analogy - fr6m I other , operations or incorrect generalization from examples , are best e . explained outside of the . represeniation itself - and hence require a " ' semantic " theory . One of the by - products of the diagnosis of the student . . data mentioned in the previous section has been a thorough and precise catalogue of bugs arising in one particular skill , - subtraction . : This network can now be used to apggest and evaluate theories about the origin ofbugs . . V . Referencep , . Barr , A . A rationale and desCription of ' the basic ' , instructional program . Psychology and Education , Series , Stanford UniVersity , Technical Report 226 April 1974 . 4 , ' . . - ! A ' Br - own J . S . ' Structural models of a student ' s knowledge and an lerential ' pr6cesses . BBN Proposal No . : P . 74 - CSC , - 101 Bolt Beranek Newman Inc . , Cambridge , Massachusetts , April 1974 . Brown , J . S . & Burton R . R . 8ystematic understanding , ' Synthesis , - - analysis , and contingent knowledge in atlecialized utderstanding systems . In D . Bobl ' ow and A . Collins ( Eds . ) , Repretvitation aup Uhderstandi . pg : Studies in Cognitive _ Science , New York : Academic Press , 1975 . . . . . # , . , Brown , J . S . & Burton , R . R . A paradigmatic exampleof an artificial ' intelli : ent instructional : r - r s stem . f , - 1 r - c - n 4 . 10 . - - r - AMTLIMMINIMMItrAlob I - Lei - . - : g am on , ew ork , August 1 7 . Brown - , . . J . . , f ` Collins , A . . & Harris , , G . Artificial intelligence and learnin strategies . - - To appear in H . F . O ' Neil ( Ed - . : ) , LearnincC . atcategig es . New York : . Academic Press , 1978 , in press . . , ' Brown , J . S . , Rubinstein ; R . & Burton , R . R . Reactive . learnipg environment for . computer assisted electronics instruction , , BBN ' Report No . 3314 , A . I . Report - No . 1 , . Bolt Beranek and Newman Inc . , Cambridge , Massachusetts , October 1976 , . . Hurton , , R . R . & Brown , J . S . Semantic Grammar : A technique - for , constructing ngtural language interfaces to instructional systems . BBN Heport No . 1 , 587 , ICAI Report No . 5 Bolt Beranek and Newman , , Inc . , Cambridge - , Massachuse . qs , May 1977 . - . . Burton , R . R . & Brown , J . S . A tutoring and student modeling ' paradigm . for gaming environments . In Proceedings fort the Symposium on Computer Science and Education , - - Anaheim , California , February 1976 . Carbonell J . & Collins , - A . Natural semantics in artificial intelligence . ln Proceediftga of the Tbird International Joint : - Conftrence on Artificial Intelligence , Stanror University , 1973 . Carr . B . & doldstein , I . Overlays : A theory of modeling for computer aided instruction . Massachusetts Institute of TeChnology , AI Memo 406 . , February 1977 . ' Collins , , A . , Warnock , E . & Pa safiume , J . . Analysis and , Aynthesis . ot tutorial dialogues . 1 . , K1 G . . Bower ( Ed . ) ' , kdvancesin _ Learning . and Mottyktion , Vol . 9 , 1975 . Cox , , L . S . Systematic errors in the four vertical algorithms in rior al and handicapped populations . . o rn°1 for Re earc n waah at cs ducation , November 1975 , 2s2 - 220 , Easley , J . A . , Jr . & Zwoyer , R . E . LTeaching ty listening - - toward a ew day - in ' math classes ' . Contemporary Education , Fall t97 , 5 , 47 ( 19 - 25 . ' . . Friend , ' J . Detcription of Items ' IO ' Be Used in Addit , ion / SubtraCt on TelPfitsi . . IrfternalD Mempi Institute fOr MathematicaL ' Studies in the ' SocialSciences , Stanford University , 1976 . ' , The computer as . coach : An - athletic . - - paradiga for intellectual education . Massachusetts Institqte of Technology , AI MeMo 389 , _ January 1977 . . , Goldstein , I , Understanding simple ' picture programs . Massachusetts - - Institute of Technology , AI Laboratory , - Technical Report . 294 , September - 1974 . GoALai . eini I . & GriMson , : Annot - ated - . Prooruction Systems . A Model . * on - Skill Acquisition , IJCAI . # 7 , August , 1977 . , r . 44 , - 53 , Kratiss , R . M . & Glubkserg , S . Socia , t6 . 5 and . nonsocial speech . . 5cienWicAmerigan , ' 19 ` 775 , 236 ( 2x ) , - 100 - s - 1 ' 05 . . . . k , / c . , Matz , ' 11 . Some issues . . on ' blinding amArticulate Expert for high algebra . ' BBN Report , . . , ICAL 10 . ( in , preparation ) . . 0 . . . . r Miller , . M . & GolOstein - - ' I . Overview of a linguistic theory o design . Massachusetts " . Inbtitute of ; Techhology , AI Memo 383 , December 1976 . Rich , , C . & Shk ) be , . H . E . Initial report on a - LISP programmer ' s apprentice . Massachusett ' s Institpte of Technology , AI - TR = 3514 , December 1976 . ' - ' ' , , Rubin , A . Hyp6thesis formation and evaluation in _ medical diagnosis . Massachusetts . Institute of Te hnology , Artificial . Intelligence Laboratory ; AI - TR - 316 , Januar4 1 75 . , , . , . . _ , Sacerdoti , E - . A struCturq for DI aria° behavior . The Artificial Intelligence Series , . . New York . : Elsevier North - Holland Inc : , 1977 . . Searle B . , Friend , J . & Supp , est P . 1 - . i . . . w . . 1 - ut Institute - or ' athematica - . : . - oc a c ences ' 9 anford University , 1976 . - J . A . & tudent models in computer - aided instruction . ' Ban - Maghlne . St - u ` d . , 19714 , 261 - 276 . es i - n the ' e Smith ' M . J . . & Sleeman ' , D . H . . APRIL : , flexible production rule interpreter . ' SIGART Newsletter No . Jun 1977 . ` . . - . . West , T . Diagnosing . pupil . errors : looking for patterns . The , ithmetiic Teagliert . November 1 ; 971 . rounge R . M . . Mixtures of strategies in structurally adaptive production systems : . Examples from seriation and . . sub , tra tion . . SLGART Newsletter No . 63 , J - ut p 1977 . APPENDIX I Sample Diagnostic Test Which of the following students are making . tonsistent procedural mistakes and what are their mistakes ? Student 1 : 83 330 i 89 . 354 + 106 _ + 187 + 132 1 . 69 ' 189 417 111 313d Explanation : Student 2 : ' 1 - . . . 94 498 77 + 115 + 215 . . . . , + 26 : 119 , 611 ' 91 Explanation . : Student 3 : * 34 / + 139 476 Explanation : 48 + 41 89 758 ' , + 296 944 437 . + 284 601 923 + 481 T . Col Student 4 : 109 4452 501 Explanation : 98 + 105 98 a , . 35 + 111 + 64 209 99 I Student 5 : 352 + 18 360 Explanation : . 784 + 3080 6364 46 1784 43080 , 7364 8 + 35 . 63 v Student 6r 8372 ' ' * 6527 ' 893 63 - 657 - 2394 - 195 - 47 6725 3233 608 16 Explanation : Student 7 : 13 5394 477 - 893 - 76 - 797 , - 284 - 195 777 4497 1 101 718 Explanation : Student 8 : IN , 394 77 935 126 - 166 - 53 r - 361 - 117 248 24 774 29 Explanation : Student 9 : A 48 394 57 439 - 15 - 166 - 23 - 95 43 340 617 124 Explanation : - - - ) Student 10 : 305 987 340 9280 - 320 - 56 - 6090 - , 107 - 667 290 3090 Explanation : - 147 - , 5 r Appendix 2 st . atddent Wesoonses to What Was Learned In An experiment deicribed in section 2 , a group Of student ' teachers were exposed to the BUGGY , game ' . This appendix provides a list of all thely responses to the question , " What , de you think you learned fral this , experience ? " I see from this system that you learn from your mistake * s . In a certain operation there Sre so many Mistakes that you can make . When you learn what \ the mistakes are you learn - to , do . the operation correctly . , That ch , ildrents errors can be a ' way . of diagnosing the way the child 1 : earns material . Also it raises , questions about the way a child * is tested both standardized and informally . A Student ' s errors and / or misunderstanding of * a concept , Im4y have not ' , been due ' to ' carelessness but rather involved . a complex * a 4 . logical thought process . I learned that it is necessary to try many . different typeS ; of examples . . to . be sure that a child really understands . Different types . of difficulties arise with different problems . _ - Trying to beat the machine can be challenging . Feedback is extremely important in trying to determine the error . It ' s difficult for me to describe the error but the machine do , esn , ' t care as long as I can pf ' o . mypoint through examples . / Although it ' s hard to tell from these ( pre and - posttiita in the ' . middle is learned a great deal about , and complexity of - stadent ' S errors . I know that yodhg students ' can get . these preconceived notions . a ut how to do things and it ' s very hard to find a ' pattern to their er but there is and , I believe that BUGGY convinced me of , [ it ] : . . , That if you study the errors long enough ybu earl . eveualli ' come up with a reasonable ' Splution asto why the [ error ] is occurring . 4 - . . , . Through looking carefully at children ' s math errors it is sometimes area or a concept the child does not under tand . possible to ' discover a pattern to them . T ; is patterh will , tell ' . you an / : . I learned that there could be more to a child ' s - mistakes Other than carelessness : . Working with children with special needs I have encountered any such problems yet _ never stopped to analyze what could be a sy tematic problem - - or this . . 1 . thank you . , , , . . Children ' do ha . e problems and they are . very difficult to spot especially when . number of " different operations are used to come to N an answer . I ' ve le ed to be more aware bf ' how these children reach these " answers " ' and to help them to correct them ; first by knowing how they arrived at the answer . . Although many arithmetic errors may be careless , there may alsb be a pattern that the kid is locked into . If you pick up on a pattern . you can test the child to see if he / she conforms to it and work on it from theke . . % ; The types of analysis necessary . to " debug " student errors on the test . . ( paper / pencil ) seems more difficult than with the computer . But that doesn ' t make any sense . The " analysiamjought to be the same . Perhaps the . computer motivated my analytical ability . I found that I have looked closer at the problems , roblems , looking for a ' relationship between the - set after working with BUGGY . How to perceive prbblems , that don ' t look too consistent , a little easier . - How to have a gooA . time with - a computer . ( I ' ve only played ' tic - tac - top at the Science Auseum ; and have . always wanted to do ' more ) , Machines " can be temperamental ( when . pestered . by a large number of students ? ) . learned and was exposed to the many different types orTrotlems \ children might have . I never realized the many different ways a child ; could devise his own , system to do a problem . am now aware of problems that could arise and I ' m sure this will help me [ in ] my future career as a teacher . How to ' more effectprely detect " problems " students haVe with place value . That yoU cam find causes of a child ' s problem without the child ' s ' work in front of you . In looking for thei " bug " * Up and down aren ' t the only possibilities , also diagonally . . I suppose horizontally also . How specific the problem might be - - only works in one situation . . I have learned several new possible errors students may make in computation . I have also learned somewhat how to diagnose these errors , i . e . what to look for , and how specific errors can - be . , \ , . , , I . think I learned more about computers and how to use them , Also I . learned about diagnosing math . difficulties . It makes me aware of ' problems that children have and they ' sometimes think logically , not , carelessly as sometimes teachers think they do . , I learned ' that computers are very complicated pieces of machinery . If one isn ' t experienced with the mechanisms , then problem ' s could result . That computers can be ' an asset to the classroom is nOtcdoubted , but I think many problems & an result . They can - add much to a classroom until they start breaking down . . . . . . That there are many problems that you - can diagnose abopt a : child by lookibg at his Homework . L . . IT . . . a child has repeatedly ' made . [ the ] same mistakesf it ' is = ii le easily identified if theAeachem has ah opportunity to try . and m , e - . [ thej same mistakes . This method - can be solved at least quicker than . . . . ' . . . , . . . Computers are Concise , . Information . can be gathered and stored for reference . . ' Tuned in to picking up malfunctions _ , in Simple addition and subtraction which seemed to be realistic 1 problems . ' ' - 1 - 19 Th ez r APpendix ' 3 S . . t10 . eltliti4rtions to DUNGY ' List of all responses to the question : What is your reactionIto BUGGY ? ft I think it would bye a fantastic resource for a ' school with a lot money to spemd . 2 ) . . Too early to tell . But the potential . seems stupendods . I ' enjoyed it and see it . as a pqwerful future , tool . I like it . 1 Working with a partner is good for being forced to explain ( defend ) your theory [ as long as partner requires that ] . Useful tool - for those with pretty good number ability . What about those who ' don ' t have good feeling for numbers ? . . Good Fl ! ( Forces one to get very specific answer - dto the problem . You , can - be slightly wrong and then , rather moving way off base in your second theory as to the problem , you pinpoint / modify your first ( assuming it ' s almost right ) . Bad . ' It ' s too much fun and I wasn ' t b ing very professional in mu usage ( though under different situation I ) might ) . . ; I think this system is fantastic . - It ' s - a wonderful way to expose people ( who arei . nvolved with children ) to the problems children will probably have , It might , beespecially , useful with . special learning needs children . It ' s great ! When will it be in my " price " . range ? AS for the game itself , it would have been continued for another 3 or ' 1 . 1 hors . I Ihink it ' s an excellent device for trying to diagnose some of the difficulties found in mathematics . For a teacher . the time element - - having the machine diagnosis would be more practical . It ' s a nice . toy . The : Bug ' is ; great . Makes you stop and think . I enjoyed the BUGG7G : a4perience extensively . Solving or determining . errors was _ d _ ph ' eee4 , ar , - Oh and fun I enjoyed workiMgh " ffilGGY : ; . tui ' * 4hen it ' breaks , . down J . 4is very frustrating . This might ' be diffic , ult for children to nderstand that problems with computers do arise . Also it may be complicated for : younger children to understand how to use it . High ochooT students may enjoy it . thOugh , I think . BUGGY would be a definite " plus " in the classroom but right now I feel there are too many " bugs " with BUGGY . Too many times did - BUGGY . go crazy . / I - find it amazing though that a machine can help - one - detect probleds . It sure is aibetter way than the present . . 1 . BUGGY makes one ldbk At eachl ' problem carefully and detect exactly what a child cannot do or cahmiatood ' prehend without formal testing . As far as BUGG is comcerneC . I had . aPvery good time - " playing " . Witk BUGGY . It . . ( as quicker / and \ somehOw easier than pencil and paper . - It took less concentratioW and - was definitely more - efficient . Can - ts . be used as a strictIY ' diagnostic - tool ? If so , I think that BUGGY " is great . . He ' s a trip ! ' Seribusly , he ' s . fine . if you can master him in case decides to break / doWn . . I think BUGGY ' AS a . good idea and would like to hear more about it . tApe a program that should be further ' researched . and has excellent potential . Great e4erience ih beginnin to play with computers ' - - exercised problem focussing . without frustrating a child wi . , th inadequate paeparatiori . I think that BVGGY could be used to sharpen a teacher ' s awareness of different difficulties ; with addition and subtraction . It might be fun for the kids - , to play such a gam % together . % ft . Appendk % 4 11gagzikt4 , g . . ag . . . . . . . . wlyAmpi . p . . . § . . . . gfauktracAlsnjug § . This appendix - . presents descriptions an , d examples for the 55 . . simple subtraction " bugs which are modeled in the current network . Many tof , , , , , these hugs were ' discovered while we wer ploriqg data from 1300 4th 5th and 6th . grade Students . For each bug e listed : ( i ) the anaWer At ' generates for the problem 15300 - 9522 ; ( Ai ) the bug ' s name ; , ( iii ) an additional Example where it fails ; ' ( iv ) and its , description . Many of these bugs can , be Combilleci to produce . different symptoms . , - 105 ' 778 : * BORROW / FRO $ YONE / TS / TEN , 913 - 78 . = 935 ' * The student writes 10 when s / he borrows from a column with a 1 in the \ top . digit . . ) 95778 : * BORROW / FROM / ONE / IS / NINE , 113 - 58 = 145 When borrowing from ' a column which has a 1 on top , the 1 as if it were a 10 . * 2 ' 1998 : ' * ADD / BORROW / DBCREMENT , 143 - 28 = 135 4 ` When borrowing is necessary , ln ' stead of . subtracting 1 from the top digit : of the next column , the student adds 1 to it . the student treats 7 24822 : * ADD / INSTEADOF / SUB , . 118 - 5 . = . 123 . The student adds instead of subtracts . 168 ' 88 : * BORROW / NOZDECREMENT , 143 - 28 = 125 . When the student needs to borr w , he adds 10 to the top digit of the clfrrent column without subtracting 1 from the top digit df the next . . column . , 41t 16878 : * BORROW / ONCE / WITVOUT / RECURSE , 1250 - 1088 = 262 . - The student will Only borrow once per problem . After that s / he will add ten tg _ the top number if it is smaller but will - not borrow one ' from the next cdlumn to , the left . ' , 1 " 6778 : * B0RROWVONLY / NCE , 1250 ) 088 = 262 The student will onl borrow once per larbblem . After that s / he will add ten to the top nUmbe if it is smaller but will not borrow one from the next column to the 1 ft . ) 5778 : : _ * FORGETYBOR OW / OVER / BLANKS , ' 1 . 43 - 88 , = 155 The , student borrow correctly except ' he doesn ' t take . 1 from the top digits that are co , r blanks . 14822 : * ADD / NdCAR Y / INSTEADOT / SUB . 253 - 108 = 351 The student adds . without carrying instead of subtracting : 14222 : * SMALLER / FR M / LARGER , ' 253 - 118 ' = 145 The student subtrac s the smaller digit in a column from the larger digit regardless , of which is on top . 14222 : * SMALLER / F OM / LARGER & LEFT / TEN / OK , 1083 - 768 = 325 - - The student subtra ta the smaller digit in each column from the larger regardless of whic is . on top . The exception is - that when 10 ' is in the . left - most columns , of the top number 10 it is treated as a single digit . 14200 : * SMALL / FROM / LIARGER & 0 - N = 0 203 - 98 = 205 ' The students tracts the smaller ' git in each column from . the ' larger digit regardl ss o - which is on top The exceptioncla that when the top digit is 0 , = 0 is written as the a werfor that column , i . e . , 14 0 : MALLER / FROM / LARGER & 0 , N = 0 - 0 = 0 , , 903 - ' 418 = 105 l ' . The . s udent takes the ' smaller digi An each column from the larger rgardleSs of which As on top . , If either digit is a ' 0 , s / he writes 0 in . the answer for that col mn . . . ir 10022 : * BORROW / DIFF / O - = N & SMALL - LA E = 0 , 204 - 119 = 110 The student doesn ' t ) kno how to borr w . If . - the top Aigit in a column - 52 - al . 0 , thek \ student writes thq bottom digit in the answer ( p - N = N ) . If the top digit . is smaller than the bottom digit , " then 0 is writtqn in the answer . 10000 : . , 41zERO / INSTEADO ' F / BORROW , 140 - 28 = 120 The student writes a 0 in any . coAmm that revires borrowing . 8748 : * 1 . 11 . . DWP / SIX / AND / NINE , 356 - 239 = 123 The student gets 6 - and 9 mixed up when reading the digits in the problem , thisre ding 6 for 9 , and 9 for 6 . 7998 , : * BORROW / FROWL RGER , 143 - 58 = 105 . When ' - borrowing frilm column , the . student ' borrows from the larger digit disregarding whether it is , the top or the bottom digit . 6888 : * BORROW / ACROSS / SM - ALLER / ADDING / TEN / UNTIL / BLINK / EGTTOM , 713 - 388 = 335 The student borrows from the next column to the left that hap a larger Aos ) digit . . Any intervening columns have 10 added to their top digit . ' 6888 : * BORROW / ACROSS / SMALLEVADDING / Uk , 563 - 388 = 185 The student will only borrow from a coTtmn in which the top digit is larger than the bottom digit . In the columns he skips ( where the top digit is smaller ) he automatically adds 10 to the top digit . ; 6822 : * BORROW / AGROSS / SMALLIER / ADDING / TEN / EXCERT / M0 , 204 = 159 = 55 The Ntudent borrows from Whe next column tothe left which has a larger top digit . Any intervening columns have 10 added to their top digit . The exception is that . When 0 islpn top he writes the bottom - number in the answer - A . . e . , . 0 - N = N . , 5878 : . * BORROW9FROMYZERO & LEFTiTEN / OK , 803 - 508 = 395 t The student changes 0 to 9 without fdrther borrowing unless the . 0 is part of . a°10 in the left part of the top number . 5878 : ) iBORTOW / FROM / ZERO , 103 - 45 = 158 \ - _ - _ , : When harrowing from a column whose top dig4 - t is 0 , the student writes 9 , - but does not continue borrowing from the column to the left of the 0 5878 : * BipRROW / FROWALL / ZERO , 203 - 98 = 205 When borrowing from Q the student writes 9 , but does not continue borrowing from the column to the left of the 0 If there ' are two 0 ' s a row in the top number , both are changed to 9 ' s . 5878 : 41 . BORROW / F , ROM / ZERO & LEFT / OK , 305 - 296 = 1 ' 09 . When borrowing from 0 the student writes 9 but does not borrow from the t column to the _ left like s / he should . The exception . is that when the 0 s in the 2nd column from the - left and the top number has one more digit than , the bottom ; then . he sees both of the left digits as a single number and sUbtracts one from ' it correctly . 5822 : * DIFFJO - N = N 140 - 21 = 121 Whenever the top digit in a column is 0 , the studyt writes the bottom digit in the answer ; i . e . , 0 - N = N . , i 5822 : * DIFF / O - N = N & LEFT / TEN / OK , 908 - 39 . 5 = 693 . When there is a 0 on top . ' - the student writes the bottom ' digit in the answer . The exception is when the 0 is part of 10 in the left columnsof , the top , number . 5822 : * DIFF / O - N = N & N - ( 1 = 0 , 302 - 192 = 290 - , , . , The student gets 0 when subtracting 0 . from anything and also gets taken from 0 is N . 5800 : : * DIPF / O - N = 0 140 - 21 = 120 , - Whenever the top digit ' in - a column : is the answer ; i . e . , 0 - N = 0 . , 0 ( . . - . 5 / 800 : IDIFF / O - N = 0 & 1 - N = 1 , 323 - 138 = 215 - When there is , . 0 or 1 on top , thestudent writes it in the answer . 5800 : * DIFF / 10 - N = O & N - CY = 0 , 308 - 293 = 105 , . The student writes 0 in he answer when either the top ' or the bottom . digit ' is 0 . student writes - 0 b , 53 - 6 v 5798 : B4ORROW / FROM / BOTTOM / INS ADOF / ZERO , . 203 - 158 = , 65 When borrowing from a column wi h 0 on top , the student borrows from the bottom digit instead of the 0 o all other cases the student borrows correctly . 5788 : DON ' T / DECREMENT / ZERO , 603 - 138 = 475 When borrowing from a column where the top digit Is 0 , the student rewrites the 0 as 10 by borrowing from the next column to the left ' but forgets to change 10 to 9 when s / he adds 10 to the column ' which orifinajly needed . the borrow . . , 5788 : DON ' T / DECREMENT / ZERO / EXCEPT / LAST , 10905 - 8916 = 1999 When borrowing from a ' Column in which the Xopjdigit ' is 0 , - the student rewrites the 0 as 10 by borrowing from the ' nekt column to the left bUt ' forgets to change 10 to 9 when s / he adds 10 to the ' column which originally needed the ' borrow . The exception is that when 10 is in the , ' left - most columns of the top digit s / he decrements by 1 correctly whenhorrowing ( changing the 10 to a 9 ) . 5788 : bOK ' T / DECREMENT / ZERO / UNTIL / BOTTOM / BLA , NK , 304 - 259 = 55 the student forgets to change 10 to . 9 after borrowing from a column which had a 0 on tbp . The exception is that when 0 is part of th left - most . part of the top number 1 is decrementeb correctly . 578 - 6 : STOPS / BORROW / AT / ZEO ; 203 - 178 = 35 The student borrows from zero incorrectly . _ He doesn " t subtract 1 from the 0 , \ although he , adds 10 correctly t6 the topvdigit of the current column V 5780 : DIFF / O - N = N / WHEN / BORROW / FROM / ZERO , 10034892 = 201 The student writes n in the answer when subtracting n from 0 if s / he 1 . 401ft would have to borrow from a column that ) contains a 0 in top . - 5778 : * BORROW / ACROSS / SAME , 603 - 108 = 405 The student will not borrow from the top digit of any ' columns where . the top and bottom digits are the same number . Instead , s / he will borrow from the top digit of the next column . 5778 : BORROW / ONLY / FROM / TOP / SMALLER , 295 - 87 = 118 ' The student will , , try to borrow only from those columns where the Lidk digit is smaller3than the bottom digit . If he can ' t find one , them borrowing is done , properly . 5778 : BORROW / INTO / ONE = TEN , 321 - 89 = 221 When borrowing into a colupn whose top digit is 1 , ' the , student gets 10 instead of 11 . 5778 : DIFF / N - 00 , 403 - 208 = 105 Whenever the - bottom digit in a column is 0 , the student writes 0 in the answer ( N - 0 = 0 . ) 5775 : DIFF / N - N = N 235 - 134 = 131 ' , Whenever the . top digit in a column is the same as the tOttom digit , the student writes that digit as the answer for that column , i . e . , N - N = N . 57 / P8 : * N - N = 1 / AFTER / BORROW , 354 - 159 = 215 The student gets 1 when Subtracting n from n in a column that has been i ' borrowed from . ' That is , the student knows that he doesn ' t need to borrow to subtract n from n , but , he feels he , must do something with the borrow , so s / he writes it in - the answer . ' " t ) , \ - 57n : QUIT / WHEN / BOTTOM / LANK , 178 - 59 = 19 The student , stops working the problem as soon as the bottom number - runs out . a 5778 : STOPS / BORROW / AT / MULTIPLE / ZERO , 1003 - 358 = 655 - The student doesn ' t borrow from two zeros in a row . , Slhe will just add ' ten to the ' column that needs it without decrementing , anything . 5688 : MOVE / OVER / ZERO / BORROW , 304 , p75 = 139 When the student needs to borrow from a column whose ' top digit is 0 , - he skips that column and borrows from the next one . 5678 : ONCE / BORROW / ALWAYS / BORROW , 662 - 357 = 205 Once the student needs to borrow from a column , he continues to borrow . - 54 into every - column Whether be needs to or not . 5372 : * SMALLER / . 60M / LARGER / WITH / BORROW , 143 - 24 = 111 When faded withboorroying , the student deCrements the next correcotly , but instead 6f adding ten to the t1etp , digit ' column , s / he simply subtracts the smaller digit ftom even though the Smaller digit lb on top : o , lumn urrent ger digit . 4222 : . ORROW / ACROSS / SMALLER & SMALLER / FROM / LARGER , 543 - 358 = 115 . In each column where the smaller digit is on top , the student subtracts the smaller digit from , the larger after first - borrowing one ( unpecessarily in this case ) fromwthe first column to the left in which the top digit is larger . Hey then feels that he doeSn ' t . haVe to do any borrowing in the intervening columns - , Can ' t : ' BORROW / FROM / BOTTOM , 19668 = 148 , When the . student needs , to borrow ; ' he borrows from ' the bottom digit of the next column . instead - of the top digit of the net column . Can ' t : BOROW / TREAT / ONE / AS / ZEHO , 313 - 158 = 145 _ When borrowing - . from a column that has 1 on top , the stUdent ' writes 9 and cqntinues to borrow . That ' is s / he treats 1 as if it were 0 - - , . ' because ' s / he doesn ' t like to make more 0 ' s in the top number . , \ , . Can ' t : BORBOW4UNIT / DIFF , 196 - 68 = 110 When . the student - ` needs to borrow , he borrows the difference betWeen the bottom digit and the top digit of the current column . e Can ' t : ALWAYS / BORROW / LEFT 602 - 137 = 375 The student always subtract all borrows froth : the left - mor digit in the tup ' number . . Can ' t : * BORROW - tWONT / RECURSE , 108 - 99 = Can ' t When forced to borrow from a c umn whose top digit is 0 , the studer4t gives up and says he cannot do he problem . Can ' t : WRITE / BOTTOM / LEFT / ALWAYS , 4305 - 88 = Can ' t When writing down the problem , the student left justifies the bottom number . Can ' t : * DOESN ' T / BORRO - W , 143 - 138 = Can ' t The student can ' t do a problem - that requires bdrrowing . v I f ; - , Appendix 50 jajaEmeCuency Table The . 20 mostjrequentlybourring bugs in : a grou of 1325 students 57 students Used the prgcedure : * BORROW / FROM / ZERO - When borrowing from a column whbse top digit is 0 , the student writes . 9 , but does not continue ' borrowing from4the column ' to ' the left of the 0 . 54 - students used the procedure : * SMALLER / FROM / LARGER , The student subtracts the smaller 041 , a ' column from the larger digit . regardless of which one is on top . 50 setdelits used the . procedures * BQRROW / FROM / ZERO & LEFT / TEN / OK ' The student ' changes 0 to 9 without further ' borrowing unless the 0 - is part of . a 10 in the left , . pat of the top - number . ' 34 students used the cedure : ( * Dl # F / 041 = N , MOVE / OVER / ZERO / BORROW ) ) Whenever the top digit in a column is 0 , the student writes the bottom digit in the - Answer ; i . e . , 0 - N = N . When the student needs to borrow from a column whose top digit is 0 , he skips that column and borroWs from the next one . - 6 14 students used the procedure : ( * DIFF / O - N = N ' * STOVSABORROWYAT / ZERO ) Whenever the top digit in a column is 0 , the student writes the bottom digit . in the answer ; 0 - N = N . . The student borrows from zero incorrectly , He doesn ' t subtract 1 from the 0 although he adds 10 correctly to the t p digit of the current column . 13 " students used the procedure : * SMiLLER / FROM / LARGER & 9 - N = 0 The student subtracts the smaller digit in each column from the larger digit regardless of which one is on top . The exception is that when the top digit is 0 a 0 is written as the answer for tat column ; i . e . , O - N = 0 . 12 students used the procedure : ( * DIFF / O - N = 0 * MOVE / OVER / ZERO / BORROW ) Whenever the top digit in a ' column is Q , the student writes - 0 in the answer . ; i . e . , 0 - N = 0 . When the student needs ' to borrow from a column whose top ' digit is 0 , he skips - that ccilumn and borrows from the next one . . 11students used the procedure : O ' BORRO / PROMn ' ERO * DIFF / N - 0 = 0 ) ' When borrowing from a column whose top digit is 0 , , the student writes 9 , ' . but doesnQt " continue borrowingfrom the . column to the left of - the 0 . - , Whenever the bottom digit in a column is 0 , the student ' writes 0 in the answer ; i . e . , - N - 0 = 0 . 104students used the procedure : * DIFF / O - N = O & NO ( = 0 The student writes Odin the answer when either the top or the bottom digit is 0 \ \ . 10 stiLdents used the rocedure : ( * BORROW / FROM / ZERO * Dfi 11 R / 0 - = N ) N When borrowing Agora colum6 - 14hose top digit , is 0 , the student writes 9 but . . does n t continue borrowiw Trom the column to the left of the ' O N , Whenever the top digit in a column is 0 , the stupent writes the bottom . digit in the answer ; i . e . , 0 - N = M . 10 students used ' the procedure : * MOVE / OVER / 70 / BORROW When , the student needs to borrow from A column whose top digit is - 0 , . he skips that column and borrows from the next gtei . 10 * students u3ed the procedure : * OIFF / N - 0 = 0 Whenever the bottom digit in a column is 0 , the student writes 0 in the answer ; ' . 10 students used the procedure : * D1FF / O - N = N { Whenever the top digit in a column is 0 , the stu ent rites . the , bottom digit in the answer ; i . e . , 0 - N = N . 9 , students used the procedure : * DIFF / O - N = N & LEFT / TEU / OK When there is a 0 on top , the student writes ' tlie . tottom digit i the . answer . The exception ' is when the iltart of 10 in the le columns of the top number . 8 students used the procedure : * BORROW / FROM / ALL / ZERO , When borrowing from 0 the student writes 9 but does not continue borrowing from the column to the left of the 0 . If ' there are two 0 ' s in a ' row in the top number , both are changed to ' 9 ' s ; 1 - 57