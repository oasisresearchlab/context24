Making Sense of Enterprise Apps in Everyday Work Practices Christine T . Wolf * & Jeanette L . Blomberg * IBM Research – Almaden , 650 Harry Road , San Jose , CA , 95120 , USA ( Email : ctwolf @ us . ibm . com ) Abstract . This paper draws attention to the growing adoption of web and mobile apps in the enterprise , typically supported by digital storage in the cloud . While these developments offer several advantages , they also pose challenges for workers who must make sense of increasingly complex software con ﬁ gurations – with apps accessible from multiple devices ( typically supporting different features or capabilities ) and used alongside legacy enterprise software . We investigate how workers navigate these environments through a qualitative study of the work practices of employees in an app - enhanced organization . Our ﬁ ndings focus on two sets of practices . The ﬁ rst involves appraising what software programs and software / device combos offer what features , what we refer to as software calculus . The second involves orienting towards data formats and database structures that underlie speci ﬁ c software programs and their interactions with speci ﬁ c devices , what we label data thinking . Building on prior work on the role of materiality in CSCW , our ﬁ ndings set out a call for further attention to the material and lively dimensions of software and the emergent challenges they pose for contem - porary work practices . Keywords : Enterprise apps , Artifact ecologies , Mobile devices , Work practices , Materiality , Software calculus , Data thinking , Software analytics 1 . Introduction From early laptops and pagers , to cell phones , Blackberries , and now to smart phones , tablets , wearables and the broader Internet of Things , it is undeniable that mobile devices have changed the way we work . The growing proliferation and embeddedness of these devices in everyday aspects of work presents ongoing challenges for contemporary organizations to understand the range and depth of their transformative potential ( Sørensen 2011 ) . Mobile devices have been a promi - nent topic in the CSCW community for a number of years , yet recent technological advances in the form of software ( i . e . web and mobile apps ) and storage ( i . e . the cloud ) con ﬁ gurations challenge us to examine if and how these changes call into question our understanding of contemporary work practices . In this article , we engage centrally with these topics and set out to investigate how workers make sense of software as they navigate app - enhanced IT environments . Our qualitative interview study delves into workers ’ accounts of their experiences with everyday use of workplace IT artifacts , providing not only empirical but also conceptual insights Computer Supported Cooperative Work ( CSCW ) DOI 10 . 1007 / s10606 - 019 - 09363 - y © Springer Nature B . V . 2019 ( 2020 ) 29 : 1 – 27 into the dynamic nature of software in the speci ﬁ c , material situations of everyday work practices . Why is software an important site of inquiry for CSCW ? Paradigm - shifting advances in recent years challenge our current understanding of how people make sense of and encounter software . Initially developed in the consumer space and either co - opted in work settings ( i . e . , in processes of IT consumerization ( Harris et al . 2012 ) ) or intentionally deployed in organizations ( e . g . , the increasing prevalence of Google Apps in higher education ( Voida et al . 2013 ) ) the growing maturity of the app / cloud model of software delivery sees organizations increasingly developing B enterprise apps . ^ 1 Apps can be either B native ^ ( self - contained software programs installed on a computing device ) or B web - based ^ ( accessed through web browsers ) . Two distinctive features are paradigmatic of apps as a type or genre of software ( Divine et al . 2011 ) – one is a narrow and focused scope ( an app is typically designed to support only one or two use cases or user tasks ) . Another is their coupling with pooled digital storage known commonly as the cloud . This app / cloud model of software design and delivery presents several opportu - nities for both organizations and workers . Apps hold the promise of enhancing user experience ( UX ) along several dimensions . For example , apps ( which typically follow aesthetic conventions ﬁ rst introduced by Apple Inc . ) present a more modern B look and feel , ^ key in refreshing enterprise systems often considered old - fashioned and bulky . Apps also hold the promise for increased ease of communication , collaboration , and productivity among workers through the heightened ﬂ exibility they offer – both in the perceived ability of the cloud to offer accessibility to digital content B anytime , anywhere , ^ as well as the capability for apps to be used on personal devices in the B bring your own device ^ ( BYOD ) context ( allowing for customizable integration of personal / work resources ) . The app / cloud model of software also represents several strategic opportunities for organizational management . For example , software development is supported by the cloud ’ s centralized storage model which allows development teams to monitor and analyze software usage , creating a type of continuous engagement with users that is often called B software - as - a - service . ^ 2 Furthermore , data gleaned from usage can then be put to use in guiding future development meant to re ﬁ ne and evolve the software program as needed , a process described as B software analytics . ^ 3 There are several factors , though , that complicate this vision for enterprise apps and we draw attention to two here : app sprawl and multi - program integration . Apps are not encountered singularly : users ’ interactions with a given app are always in relation to other apps . We know that technologies are framed in relation to other technologies ( Orlikowski and Gash 1994 ) and in the context of apps , these other apps 1 Enterprise apps are designed speci ﬁ cally with organizational needs in mind , often developed B in house ^ to support and transform speci ﬁ c work ﬂ ows . 2 https : / / www . bettercloud . com / monitor / state - of - the - saas - powered - workplace - report / 3 http : / / www . ibmbigdatahub . com / blog / how - big - data - analytics - are - reinventing - it - application - management Wolf Christine T . and Blomberg Jeanette L . 2 can take several forms . They might be the assortment a person has that is unique to their particular device at a given time ( Bødker and Christiansen 2012 ) . In the context of enterprise apps , though , these other apps might be part of suites – a set of apps that are designed to support a handful of related work ﬂ ows , each sliced to ﬁ t within the small scope of the app model . For example , an app suite designed to support business travel might have one app to search for and book ﬂ ights and hotel reservations , another to manage itineraries and travel documents , and another to submit travel expenses . While arguably more ef ﬁ cient and tailored , this increased software spe - cialization presents the risk of app sprawl , a state of IT bloat that poses a key challenge for sustained app adoption and use . Some have described app sprawl as B a gnarly web of unused , sometimes even unrecognizable programs that continues to be supported by your network and IT department . ^ 4 Another factor that complicates enterprise app use is that new apps are often used together with existing or B legacy ^ IT systems . Rather than replacing old software programs , workers often use apps alongside them and questions arise as to how workers experience enterprise apps B in place ^ – that is , how they are used in tandem with legacy software programs and devices such as laptops and how workers move in between them . These are concerns we take up in this paper . The challenges of B moving around ^ at work have long been a concern for CSCW scholars , from studies of mobility within traditional of ﬁ ce settings ( Bellotti and Bly 1996 ) to the emergent forms of B mobile work ^ enabled by the widespread availabil - ity of mobile devices ( e . g . , Sørensen 2011 ) . People move around physical spaces , but they also move around digital spaces – digital movements that have been examined under the monikers B multi - device ^ or B multi - artifact ^ ( e . g . , Bødker and Klokmose 2012 ; Jung et al . 2008 ; Santosa and Wigdor 2013 ; Vasiliou et al . 2015 ) or B multi - infrastructure ^ ( Erickson and Jarrahi 2016 ; Vertesi 2014 ) use . The units of analysis in these bodies of work , though , are typically conceptualized at the level of B devices , ^ B artifacts , ^ B systems , ^ or B infrastructures ^ – software is often treated implicitly as synonymous with these different terms . In this paper , we argue that it is fruitful to treat software as a unit of analysis in its own right . By investigating software as a situated , material encounter , we are able to then examine how workers experience and grapple with these encounters and their repercussions on contemporary organi - zational life . Our attention to software is inspired by its growing attention in media and communication ﬁ elds , commonly called B software studies ^ ( Fuller 2008 ) . Software , and in particular software appropriation , has long been a concern within the CSCW community ( e . g . , Balka and Wagner 2006 ; Draxler et al . 2011 ; Gantt and Nardi 1992 ; Mackay 1990 ) and recent work has renewed attention to the role of software in everyday work practices ( Nouwens and Klokmose 2018 ; Paine and Lee 2017 ) . We contribute to these discourses by adding a fuller , more materialist account 4 https : / / www . convergetechmedia . com / getting - a - hold - on - app - sprawl / Making Sense of Enterprise Apps in Everyday Work Practices 3 of software , considering the variety of ways that software programs interact with computing devices and how these interactions might change the contours of the software program ( e . g . , Photoshop on a desktop computer versus that same program on a laptop or tablet ) . Our inquiry here takes software as an important ﬁ gure in everyday work practices – but does not pre - suppose its contours . We are interested in understanding how software itself is a phenomena which workers make sense of in the speci ﬁ c , material situations of their everyday work . How might the contours of a software program change depending on the device it is accessed through ? How do workers cope with such dynamism ? Our focus on the materialities of software echo ongoing discussions around the material dimensions of collaborative work occurring within CSCWand HCI communities ( Gillespie et al . 2014 ; Rosner 2012 ; Gross et al . 2014 ; Dourish and Mazmanian 2013 ; Dourish 2017 ) , as well as organization studies ( Cecez - Kecmanovic et al . 2014 ; Leonardi 2013 ; Orlikowski and Scott 2015 ; Scott and Orlikowski 2012 ) in recent years . In this paper , we ask : RQ : How do workers make sense of software as they navigate app - enhanced IT environments ? We investigate this research question through a qualitative study of employees at a large , international technology and consulting corporation . At the time of the study , the organization offered a number of mobile and web - based enterprise apps , in addition to their legacy software programs . Through inductive analysis of in - depth , semi - structured interviews , we trace how workers navigate the complex , multi - program , multi - device landscapes of their everyday work practices . We articulate these into two types of practices – the work of software calculus and data thinking . By software calculus we mean practices of appraisal through which participants take note of what software programs and software / device combos offer what features . By data thinking we mean an orientation towards the underlying data formats and database structures embedded within software programs , as well as their interactions with speci ﬁ c devices . We contribute to prior work in several ways . By turning our gaze towards software , we outline its contours as a situated , material encounter that workers face in everyday practice – one that is entangled with , though analytically unique from encounters with artifacts , devices , or infrastructures . Rather than objectifying software as stable or sin - gular , our focus reveals software as a dynamic and lively artifact that workers continually engage . Conceptualizing interactions with software as lively en - counters challenges us not only to consider the material dimensions of digital experiences , but also how those experiences are ongoing and improvisational dialogues between people and the things they use to get work done . We conclude the paper with a discussion of these ﬁ ndings ’ implications , noting how interactions with software represent growing though invisible competen - cies mandated by contemporary work and the effects of this invisibility on the promise of organizational analytics . Wolf Christine T . and Blomberg Jeanette L . 4 2 . Related work : thinking about B mobility ^ and B software ^ Mobility — the movement of humans across geographic space — has long been a concern in anthropological and sociological discourses . Moving around is an integral aspect of human experience ( e . g . , Cresswell 2006 ; Ingold 2011 ) and mobility , as a facet of contemporary work , has been a concern in the CSCW community for many years . Stepping away from the desk is a common part of everyday work , for the simple fact that meeting with others face - to - face requires you to move around ( Bellotti and Bly 1996 ) . While moving around outside the of ﬁ ce has historically been a de ﬁ ning characteristic of certain professions ( e . g . , traveling sales or repair technicians ) , the widespread availability and adoption of mobile technologies dra - matically expands our notions of mobile work and an extensive body of CSCW literature has examined its impact on knowledge work . Mobile work can impact the experience of work in a number of regards ( for example , its relationship with professional identity ( Symon and Pritchard 2015 ) ) – we , though , draw our attention to its relationship with materiality . Mobile work expands the physical locations where work can take place ( in places as dynamic as moving cars ( Laurier 2004 ) and aboard trains ( Axtell et al . 2008 ) ) . This physical dynamism changes our expe - riences of geo - spatial environments , as well as our experience of the work itself , often requiring additional labor and care to turn these mobile spaces into work places ( Ciol ﬁ et al . 2012 ; Liegl 2014 ) . But as we move around , so do our work things – B mobility ^ connotes not only the movement of people , but also artifacts ( Luff and Heath 1998 ) . Workers must expend effort to attend to these dynamic forces , what researchers have described as B alignments ^ ( Bardram and Bossen 2005 ) , B technological constellations ^ ( Rossitto et al . 2014 ) or device / artifact B ecologies ^ ( e . g . , Bødker and Klokmose 2012 ; Jung et al . 2008 ; Turner et al . 2010 ; Vasiliou et al . 2015 ) . Alongside these developments in the CSCW and HCI ﬁ eld , the sociological study of mobility has similarly noted the impact of information technologies on contemporary experiences of movement – what Sheller and Urry ( 2006 ) have labelled the B new mobilities paradigm . ^ Such an approach seeks to account not only for the increasingly ﬂ uid movements of people and artifacts in contemporary globalized networks , but also how rapid advances in computational connectivity create a number of virtual patterns of circulation as well . As these forms of connectivity become more pervasive – ever present with the smart phones and connected IoT devices at hand – people must attend to both digital and in situ environments simultaneously , a type of hybridity that can blend ( and at times fragment ) interactions ( Crabtree and Rodden 2008 ; Dourish et al . 1996 ; Palen et al . 2000 ) . In addition to moving between digital / physical spaces , workers also move be - tween artifacts and these multi - device experiences have been investigated under several different lenses ( for example , B product ecologies ^ ( Forlizzi 2008 ) , B artifact ecologies ^ ( Bødker and Klokmose 2012 ; Jung et al . 2008 ; Vasiliou et al . 2015 ) , Making Sense of Enterprise Apps in Everyday Work Practices 5 B communication ecologies ^ ( Turner et al . 2010 ) , B media spaces ^ ( Dourish et al . 1996 ) , B communication media repertories ^ ( Watson - Manheim and Bélanger 2007 ) , B device landscapes , ^ ( Stolterman et al . 2013 ) , B distributed interactions ^ ( Sørensen and Kjeldskov 2014 ) and B multi - device management ^ ( Oulasvirta and Sumari 2007 ) ) . Designing for multi - device environments is challenging because the rela - tionships between devices are dynamic ( Jung et al . 2008 ) and in ﬂ uenced by factors like the particular activity or work ﬂ ow at hand ( Houben et al . 2014 ) or the collab - orative or team aspects of those activities ( Coughlan et al . 2012 ) . Vasiliou et al . ( 2015 ) have conceptualized artifact ecologies as forms of distributed cognition , emphasizing ( as the B ecology ^ metaphor provokes ) the beyond - the - sum - of - its - parts quality of multi - device experiences . The units of analysis in these literatures , though , are often operationalized at the B device ^ or B tool ^ level . While others have conceptualized moving around digital spaces from the vantage of infrastructure ( describing the bridging work that ensues as B seam work ^ or B infrastructuring ^ ( Erickson and Jarrahi 2016 ; Karasti and Syrjänen 2004 ; Vertesi 2014 ) ) , the central unit of analysis is often still at the device level . In these analyses software is often treated implicitly , written about as if synonymous with or analytically indistinct from devices or infrastructures . Bødker and Klokmose ( 2012 ) note the need for analytical attention to our conceptualizations of B artifacts ^ – as individuals sometimes experience them at the device level , but increasingly at the software or app level in the case of smartphones . The ability to access an app from different devices ( with each device offering different sets of capabilities or functions ) means that people must make sense of and keep track of these software / device couplings – and the different actions they might enable or constrain . A growing call within organizational studies urges more nuanced conceptualizations of the B IT artifact ^ ( Orlikowski and Iacono 2001 ) and we argue that a fruitful way to address these calls is by adopting an explicit focus on software , examining it as a central unit of analysis that is analytically distinct from ( though entangled with ) devices . In the growing ﬁ eld of software studies , we see how software has captured the attention of critical media scholars as a site of social and cultural production ( Fuller 2008 ) . Whereas software studies often analyze software programs at a programming code level ( reading code as a B text ^ in the media studies tradition ) , we take a social computing perspective and in particular , one that focuses on work practices , inves - tigating how people make sense of software in everyday work . Within the CSCW community , software has been examined as a site of appropriation and self - expression through customization ( e . g . , Balka and Wagner 2006 ; Draxler et al . 2011 ; Gantt and Nardi 1992 ; Mackay 1990 ) . Software programs are integrally enmeshed in workplace knowledge practices – a status Kaplan ( 2010 ) has described as being part of a profession ’ s B epistemic machinery ^ ( her study , for example , examined the role of Microsoft PowerPoint in shaping how the ﬁ eld of strategic management goes about and conceives of B strategy work ^ ) . Similarly , Jarrahi and Sawyer ( 2015 ) examined how social media applications in ﬂ uence information behavior among consultants , Paine and Lee ( 2017 ) found that practices of using Wolf Christine T . and Blomberg Jeanette L . 6 and re ﬁ ning plotting software shaped scienti ﬁ c knowledge , and Nouwens and Klokmose ( 2018 ) show how freelancers leverage their skills with particular software programs as value - adds ( e . g . , branding their Powerpoint skills or Photoshop skills , etc ) . These works tell us that software programs matter in work practice , not only as B tools ^ that people use , but as material encounters through which people make sense of their professional practice as they go about accomplishing it . But how might these considerations change given the recent technological advances in the form of software ( i . e . , web and mobile apps ) and storage ( i . e . , the cloud ) con ﬁ gurations ? These are questions we take up in this paper . Our focus is timely given the dramatic transformations to contemporary comput - ing we are witnessing in the midst of B the cloud . ^ Prior work has examined early interactions with cloud computing , noting how its emergent properties require individuals to become familiar with the language of cloud capabilities ( e . g . , Capra et al . 2014 ; Marshall and Tang 2012 ; Tang et al . 2013 ) , as well as managing accounts and accessibility across different cloud services , particularly as Google Apps ( orig - inally a consumer platform ) became prevalent in work settings like higher education ( Voida et al . 2013 ) . Despite the cloud ’ s centralized model of digital storage , individuals ’ engagements with its stores are situated in a software encounter – while we might say a document is B in the cloud , ^ we go to access it through a speci ﬁ c app . Here an analytical distinction between software programs and computing devices is important , as interaction with a speci ﬁ c app is situated in the speci ﬁ cs of its material encounter . While prior work has identi ﬁ ed the bridging work needed to make consumer cloud services workable ( Santosa and Wigdor 2013 ) , these services are conceptualized at the platform or provider level ( e . g . , B Dropbox , ^ compared to B iCloud ^ or B Box ^ ) . Platforms , though , are experienced through speci ﬁ c apps on speci ﬁ c devices ; just like a Mac version of a software program is different than its Windows version ( Dearman and Pierce 2008 ) so too a platform ’ s smart phone app is different than its tablet instantiation , and different still from the same platform accessed from a Web browser . Software programs are digital resources through which our actions and interactions are organized ( Dourish and Mazmanian 2013 ; Dourish 2017 ; Leonardi 2010 ) . Paying attention , then , to how the particular features of a software program might differ across its speci ﬁ c device instantiations – and accordingly , the import of those differences on peoples ’ actions – can help us more fully understand the role of software in everyday interaction . Looking at software as a central element in these encounters highlights the seemingly paradoxical qualities of cloud storage . As long as one has an Internet connection , cloud content takes on a feeling of being B anywhere ^ – yet accessibility is very much grounded in speci ﬁ c digital gateway locations ( the apps we must use to get to cloud content ) . Here we can see similarities to the dynamism of accessibility in the notions of B close ^ and B distant ^ resources Churchill and Wakeford ( 2002 ) identi ﬁ ed in their study of early mobile devices . Although pagers could receive URL links as text , the information on the webpage was not accessible because the Making Sense of Enterprise Apps in Everyday Work Practices 7 devices did not have the appropriate software ( i . e . , Web browser ) . Similarly , Kane et al . ( 2009 ) examined web browsing practices on early smart phones before the widespread occurrence of responsive web design ( which scales webpages to device screen sizes ) and found that poorly formatted webpages rendered in mobile browsers diminished users ’ ability to read the content . While the content was technically accessible , the speci ﬁ cs of it as a material encounter ( formatting in mobile browsers ) rendered the content inaccessible . These examples tell us that software matters a great deal when encountering digital content , but devices do as well – and it is through situated interactions between the two that we come to experience notions of access and accessibility . These dynamics challenge our understanding of software as a stable technological artifact – asking us instead to consider how its contours are drawn and redrawn in practice , which we set out to do in this paper . 3 . Case , setting , and methods This paper draws on an exploratory , qualitative study that examined the role of mobile enterprise apps in contemporary work . The study focused on the case of a large , global technology and consulting corporation ( referred to throughout this paper by the pseudonym B GloTechCo , ^ or simply B the Company . ^ ) . At the time of the study , the Company had a global workforce of more than 375 , 000 employees with a large proportion of daily work taking place outside the traditional B of ﬁ ce setting ^ of a brick - and - mortar corporate of ﬁ ce . These B remote workers ^ worked from home of ﬁ ces , client sites , or while traveling for work . Although many Company employees had been working outside the traditional of ﬁ ce setting for many years , mobile enablement at the Company ( i . e . , deployment and support of mobile devices and apps ) was more recent . These enablement efforts in - volved creating mobile app versions of many of the company ’ s traditional desktop software programs and more recently focused on expanding these products by creating B born mobile ^ apps , A portion of the Company ’ s employees were provided mobile devices by the organization , as needed for their job role . Otherwise , employees B opt in ^ to the Company ’ s mobile services – this means that if employees wish to use mobile devices for work purposes ( in addition to their primary work - provided machine , typically a laptop ) they use their personal mobile devices under the Company ’ s BYOD policy . Given our interest in understanding the role of mobile enterprise apps , we purposefully recruited employees who self - identi ﬁ ed as B mobile workers ^ in these two groups ( Company - provided or BYOD workers ) , which in this organiza - tional context means they use mobile devices in the course of their everyday work practices – and not necessarily that they work while physically B on the go . ^ Purposefully selecting participants who use the Company ’ s mobile services during their everyday work was important , given our interest in understanding mobility in the sense of digital interactions that move across IT artifacts . Many Company employees use only their Company - provided laptop ( i . e . , do not opt into the Wolf Christine T . and Blomberg Jeanette L . 8 Company ’ s mobile services ) and thus their work practices would not necessary provide insight into the ways in which their interactions move across IT artifacts . The primary source of empirical data for this paper were in - depth , semi - structured interviews with 14 workers conducted by the ﬁ rst author during July and August 2015 . These interviews were collected as part of ongoing enterprise app research and development ( R & D ) projects at the Company , of which both authors were involved in as researchers employed at the Company . These semi - structured interviews took place via telephone and lasted approximately one hour . The interviews focused broadly on everyday work practices , work locations , and the devices and software programs employees used in these everyday activities . The interviews were audio - recorded and transcribed verbatim . Notes were also taken during the interviews . In addition to the interviews , participants were also asked to keep a B photo diary ^ over the course of two days following the interview , taking photos of work locations and providing short descriptions of work activities when prompted by the researcher . Although not the focus of our analysis here , the photo diaries provided contextual data as to the range of participants ’ work locations and how they B set up ^ their physical work environments ( i . e . , using tablets alongside a laptop , etc . ) . During the analysis and writing of this paper , participants were contacted for follow up or clarifying questions during March and April 2016 . Participant details , including general job role and length of time at the Company , are included in Table 1 . To ensure con ﬁ dentiality , we refer to participants by pseudonym and number ( e . g . , B Ellis , P1 ^ denoting Participant 1 and so on ) and have replaced app names with pseudonyms ( e . g . , in place of brand name , an app is referred to by a color , for example B Corn ﬂ ower App ^ and so on ) . Table 1 . Participant details ( pseudonym , participant code , job role , and years of service at the company ) . Pseudonym , Participant Code Job Role Years at Company Ellis , P1 Consultant 15 years Angela , P2 Delivery Team 3 years Fred , P3 Technical Architect 15 years Rick , P4 Technical Architect 5 years Tricia , P5 Sales > 30 years * David , P6 Sales 8 years Bradley , P7 Software Developer 20 years Mort , P8 Delivery Executive > 30 years * Elizabeth , P9 Sales 5 years Edgar , P10 Security Executive 10 years Nathan , P11 Technical Architect 33 years Clif , P12 Technical Architect 13 years Abigail , P13 Consultant 14 years Victor , P14 Engineer 18 years * Some participants provided an estimate of years of service Making Sense of Enterprise Apps in Everyday Work Practices 9 3 . 1 . Data Analysis and Conceptual Framework Interview transcripts , along with notes were analyzed following an inductive , constructivist grounded theory analytic approach ( Charmaz 2014 ) . Themes as they emerged during data collection were discussed in weekly meetings , focus - ing future interviews to reach theoretical saturation . Interviews focused broadly on how participants got their everyday work done . A semi - structured approach was used , allowing participants to shape the conversation and describe their everyday work practices at the level of granularity they chose spontaneously – questions about software were not speci ﬁ cally asked , but instead as participants mentioned software programs they used follow - up and probing questions were asked . After an introductory question about their job role and how long they had been in that role , participants were asked to walk through a typical day . From this , participants described their work activities and the various IT tools involved in carrying out those work activities . The focus on software emerged from our analysis – in participants ’ accounts we saw substantial efforts made to keep track of the various software applications and computing devices they used in a typical day . Our initial analysis focused on themes around practices of navigating and pathmaking across these complex IT environments , charting the various factors and dimensions that shaped participants ’ practices ( e . g . , client engagements , collaborative team projects , etc . ) . We deepened these initial themes by incorporating relevant concepts from CSCW literature , and in particular considering the literature on artifact ecologies . These themes were then expanded through direct and axial coding ( Strauss and Corbin 1997 ) and further developed by writing analytical memos that considered relevant litera - ture in conversation with our inductive themes . Through this conceptual dia - logue , the central role of software became apparent . Thinking about software was important in participants ’ accounts – not in an abstract sense but instead as a rather practical concern . A cloud - based enterprise application can be accessed from different devices ( e . g . , desktop / web browser , mobile app , etc . ) – and depending on these access points , the application itself can have different features . The application is dynamic in its speci ﬁ c encounter , with workers talking about their efforts to keep track of these software differences and the ways they impact their everyday work actions . From this process , we arrived at two inductive categories , which we label software calculus and data thinking . We set out our empirical ﬁ ndings below . 4 . Findings Participants made sense of software through two sets of practices of ongoing calculation and B sussing out ^ of technical capabilities . We label these soft - ware calculus and data thinking and elaborate on each of these in the following sections . Wolf Christine T . and Blomberg Jeanette L . 10 4 . 1 . Practices of software calculus Participants talked often of a careful inventory or catalog of a software program ’ s speci ﬁ c features , calculating if ( and how ) these features aligned with work practices , a process we label software calculus . To lay out this process empirically and analyze its contours , we turn to examples from our interviews that focused on practices of calendaring . Calendaring is a complex and integral ( though mundane ) aspect of everyday organizational life , one that is particularly challenging for consultants and technical architects who worked closely with clients or external stakeholders . Some projects might last only a few weeks , while for others a project can have a long life , spanning months and even years . In these long lived projects , GloTechCo workers often have desks or workspaces at client sites , complete with an email address and calendar on the client ’ s system , and access to the client ’ s intranet . This second email address and calendar makes it easier to coordinate with clients on their own systems , but also creates a B double calendar ^ problem , as workers must align the client calendar with their home calendar at GloTechCo . Like many corporate environ - ments , GloTechCo has a calendar culture where workers are expected to earnestly keep their calendars up - to - date . To meet this expectation , the calendars must be aligned — an appointment on the client calendar must also be mirrored on a worker ’ s GloTechCo calendar and vice versa to reduce scheduling issues . Nathan ( P11 ) , a technical architect , described having to get creative and ﬁ gure out how to get these calendars to B talk ^ to each other and share appointments . Doing so required a careful understanding of the functionality of each calendar program and how to utilize speci ﬁ c functions to bridge the two . The client ’ s email program was B actually a little bit easier because you can do things - like you can forward meeting invites , ^ Nathan explained . B So if somebody happens to invite me to a meeting on the [ client ] system , I can just forward the actual invite over to [ GloTechCo ] , and it shows up on my calendar , ^ a feature the GloTechCo calendar software didn ’ t afford : B You can forward it , but it shows up as an email , not as a meeting notice . ^ ( Nathan , P11 ) . Through trial - and - error , Nathan took stock of each calendaring software pro - gram ’ s particular features , creating a software inventory that ﬁ gured into his calendaring work . These types of bridging challenges exist in any multi - system environments and the reader may ask : what is new here ? Software environments that include app / cloud services reveal a more dynamic and complex form of software ﬁ guring . Workers must not only consider the features of different software programs – software calculus also involves an inventory of software versions and what versions have what features . We use the term B calculus ^ here to signal the multi - dimensional character of participants ’ software inventories . What might seem like a straight - forward determination of the overarching corporate software system ( GloTechCo calendar or client calendar ) , in environments with mobile devices and apps quickly necessitates more ﬁ ne - grained analyses , which we discuss in depth in the following section . Making Sense of Enterprise Apps in Everyday Work Practices 11 4 . 1 . 1 . Making note of mobile app features Mobile apps are often designed to be B small ^ – that is , they are meant to support one or two speci ﬁ c tasks . This small focus is in stark contrast to existing enterprise software programs – mobile app versions of desktop programs often only contain a subset of the legacy features . This means that workers must take into account not only whether there is a mobile app version of the legacy program ( and whether they have it installed on the device ) , but also what functionalities are supported in the mobile app and what functionalities can only be found in the legacy program . If we return to Nathan ’ s double calendar problem , we can see how this software inventory plays out across app and legacy versions even within the B same ^ software platform . The Company ’ s legacy calendar program , Cobalt , had a B free time ﬁ nder ^ functionality that enabled users to B browse ^ potential invitees ’ schedules before actually sending a calendar invite . This helped increase scheduling ef ﬁ ciency , by allowing the inviter to propose a mutually available time slot the ﬁ rst time ( avoiding ongoing invite volley ) . The mobile version , though , focused on discrete tasks of B sending , ^ B accepting , ^ or B declining ^ invitations . B If I want to schedule a meeting [ from my mobile device ] I can ’ t because I can ’ t check people ’ s free time , ^ Nathan said . B I ’ m liable if I just send out a meeting notice blindly and have everybody tell me that they can ’ t make it at that time , ^ but said : B I don ’ t typically do that . I ’ ll typically wait until I get back [ to my laptop ] because I think it ’ s that much more work for everybody . ^ ( Nathan , P11 ) . In Nathan ’ s account we are able to see why an analytical attention to software is important to understand everyday work practices . While he is interacting with what may be seen as the B same ^ software platform ( the Company ’ s calendar program ) , his encounters with it are fundamentally shaped by their materiality – the mobile app version offers only a subset of its legacy counterpart and he must adjust his calendaring practices accordingly . In these practices , we are able to see how the Company ’ s calendar program is not a singular or stable artifact , but rather one whose shape is redrawn through interaction . Annotating software in this way ( of keeping track of a program ’ s features in its desktop version versus its mobile version , etc . ) was common in participants ’ accounts . Other examples included programs like the Company ’ s chat client ( i . e . , the way it saves messages differs in the mobile version ) , and the Company ’ s intranet ( i . e . , when accessed from a browser , several features could be reached with a few clicks , whereas their mobile app versions split many functions into individual apps ) . But this is not to say that mobile app versions were always B coming up short ^ in comparison to the expanded scope of their legacy counterparts . Many participants talked of bene ﬁ ts they found from the mobile app version of their Company calendar – for example , it was incorporated with their smartphone ’ s native calendar app , allowing them to simultaneously see their work calendars alongside their personal calendars . Viewing these calendars together was particularly helpful for participants who worked on global teams , as they would often have to schedule conference calls during odd hours . Getting a B quick glance ^ at the family calendar overlaid with their work calendar helped them make sure they could Wolf Christine T . and Blomberg Jeanette L . 12 take a call but wouldn ’ t miss a family event , like a child ’ s softball game or dinner with friends from out of town . The side - by - side viewing of calendars on the mobile app did not actually involve inter - mingling the two calendars . This was important for participants , as it meant there was no added effort in actually bridging the multiple calendars and that their personal appointments were not actually re ﬂ ected in their Company calendar ( helping maintain privacy ) . The side - by - side viewing possible in the mobile app , though , enabled a sense of continuity and ﬂ ow between calendaring at work and calendaring at home . Yet , at the same time the mobile app enabled unique capabilities like this , it also presented certain constraints . For example , until recently mobile apps could not be B sized ^ within a screen to give a customized view for parallel use , the way desktop programs typically could . Some apps still do not enable this functionality , which means users must toggle between apps because more than one app cannot be B in view ^ at a time . This constraint caused some participants to rule out using the mobile versions of some programs altogether for some tasks that required visibility of multiple programs on the screen at once . In the case of calendaring , several partic - ipants talked of the need to track their various client contact in a sales - tracking program called Sage . On the web - based app , computer screen real estate could be tactically arranged to have the Sage program pulled up side - by - side with one ’ s calendar . B I usually end up doing it all with like one giant splurge , ^ Tricia ( P5 ) said of her Sage recordkeeping . B I look at my calendar to remind myself who I was talking to on a given date , and then I go through the whole month and ﬁ ll in everybody at the end of the month , ^ she said . B It would be a little bit more cumbersome on an iPad , just because I ’ d have to switch between apps and whatnot , ^ she explained , B whereas on the laptop I can just look at my calendar in part of the screen and then type in a new event , and then look back at my calendar and type in a new event , so it ’ s a little bit easier that way . ^ ( Tricia , P5 ) . Other participants talked of tactical workarounds to overcome the parallel use limitation of mobile apps , such as having the calendar app B in view ^ on a smartphone while inputting data in Sage on the tablet . Although similar to multi - device practices of B peripheral awareness ^ ( Grudin 2001 ) , our focus on software draws out how workers must consider software instantiations ( calculating the different capabilities across them ) and adjust their work practices accordingly . Just as we saw legacy / app comparisons in Nathan ’ s ( P11 ) experiences earlier , here we see how Tricia ( P5 ) and others working to document calendar events in the sales program must consider how the speci ﬁ c device shapes the software version ’ s capabilities ; a software program is not the B same ^ across devices and this dynamism must be accounted for . 4 . 1 . 2 . Software ’ s dynamic contours While software calculus begins with comparing the features of different software programs ( for example , in Nathan ’ s inventory of GloTechCo ’ s c alendar program compared to his client ’ s program ) , it quickly becomes more involved in environ - ments where apps are also included , as workers must compare the features of Making Sense of Enterprise Apps in Everyday Work Practices 13 different versions of a given software program ( Cobalt legacy to Cobalt app ) . In app - enhanced IT environments , software programs are no longer singular – instead , taking on new and variated capabilities depending on both the software version ( legacy or app ) but also what device is used to access them ( mobile or web ) . As we see in the participant accounts here , the GloTechCo calendar platform is not B one ^ software program . Instead , it is encountered as a calendaring system with multiple instantiations and points of entry as workers interact with its different versions on different devices ( Fig . 1 ) . B Software ^ becomes relationally de ﬁ ned in practice , a dynamic and multiple artifact whose contours must continually be drawn and redrawn . Revealing software ’ s dynamic constitution extends our knowledge of the challenges of working with the cloud by showing how gaps are encountered not only across different platforms ( Santosa and Wigdor 2013 ) but can also be encountered across software programs even within a singular platform . 4 . 2 . Practices of B data thinking ^ Next we talk about another aspect of participants ’ software sensemaking practices which we call data thinking . These are practices of orienting towards the data formats and structures embedded within software programs . Data thinking can be conceived of as a type of B data work ^ ( Gregg 2015 ) , those mundane and often invisible efforts through which our worlds are gradually shaped in the database ’ s image ( Bowker 2000 ) . Making sense of a software program involves thinking about ( and in line with ) its underlying data structures . Consider how Bradley ( P7 ) , a software devel - oper , kept track of his coding work – ﬁ rst by jotting down coding tasks and their B clock time ^ in his notebook ( i . e . , started coding at 9 : 45 , ended at 12 : 15 ) , and then converting that into hour time ( i . e . , 2 . 5 h ) as he entered it into Juniper , the Company ’ s Figure 1 . Outlines how the Company ’ s calendar system is dynamic , changing based on speci ﬁ c software encounters . Wolf Christine T . and Blomberg Jeanette L . 14 software development task management program . While this micro - conversion work may seem like a small consideration in the broader portrait of work , it highlights how working with software involves these seemingly minor and mundane forms of data thinking . Corresponding though distinct representations , in this case , the B clock time ^ experienced while working and B hour time ^ format as mandated by Juniper ’ s database structure , requires workers like Bradley to create congruence between situated practice and a software program ’ s underlying data structures — if not for his accurate and timely conversions , his team would not be able to utilize Juniper data for collective planning and re ﬂ ection during Agile coding cycles . The signi ﬁ cance of Bradley ’ s clock time example is not only that this micro - conversion causes him more work , but also that it involves a level of conceptual entanglement with a software program ’ s underlying database structures – he must think about Juniper ’ s data format and orient his time - keeping practices accordingly . These acts of data thinking become more complex when an app ’ s small scope supports a particular work task , but is unable to accommodate the task ’ s broader work ﬂ ow . Consider , for example , practices of documenting sales work . The Company ’ s sales customer relationship management ( CRM ) program , Sage , orga - nized entries into B call reports , ^ customer - contact events that documented every time a sales rep had contact with a customer . But speci ﬁ c episodes of customer contact comprised only part of sales work practices . Wanting more ﬂ exibility , David ( P6 ) , for example , sought out another software program that had a more sandbox style data structure . He talked of detailed notes on his customers that he maintained in Orchid , a widget app on the Company ’ s intranet ( Orchid could also be accessed from a stand - alone , mobile app ) . Orchid was designed to be a short - term , project - based document - sharing space . This intent could be seen in the app ’ s format : each project or activity is given a name and due date , when the activity space will become inactive ( the space is still accessible after this date , but no longer displayed on a user ’ s B active ^ dash - board ) . Orchid ’ s largely freeform sandbox layout enabled David to develop his own organizational scheme , which included sorting materials based on the particular client , point of contact , region , and the month and year of a particular communication or document . Although Orchid ’ s focus was designed to organize documents for short , project - based activities , David used it as part of his ongoing personal recordkeeping routines , documenting months and even years of client materials . Cultivating this personal space was integral in organizing his day - to - day recordkeeping , yet he talked of tensions that surfaced from using Orchid in this B off book ^ way : B I ﬁ nd myself putting things in my spot , ^ he explained , B because that ’ s what I ’ m used to doing . And then people will come back to me and say : ‘ You don ’ t have any notes out in [ Sage ] …’ I go back and do it again … a modi ﬁ ed version out there [ on Sage ] just so I have it logged . ^ ( David , P6 ) . At the same time this redundancy was frustrating , he found keeping his more extensive client notes in Orchid bene ﬁ cial – not only in helping him stay on top of his customers but also in transferring institutional knowledge to other sales reps as assignments changed . Thus , while we can see a frustration in David ’ s account over the redundant Making Sense of Enterprise Apps in Everyday Work Practices 15 recordkeeping , there is also a resolution in maintaining the personal space he created within the Company ’ s complex software environment — his B spot ^ allowed him to make sense of his daily sales activities ( through contextual documentation that more fully captures his sales work ) , a ﬂ exibility that stood in contrast to the structured , task - based focus of Sage . This example of a homebrew CRM highlights how workers must carefully consider not only the speci ﬁ c features of software programs ( the software calculus we described earlier ) but also the underlying data structures embedded within software programs , orienting towards those structures in efforts to align software with work practice . 4 . 2 . 1 . Accounting for data / device interactions Mobile apps enable interaction with data in ways that can leverage the device ’ s unique hardware functionalities and data thinking also involves a consideration of how an app ’ s data format might interact with device speci ﬁ cs . These app / device couplings were often leveraged by workers to create shortcuts for themselves . One example was with the Indigo app , a social directory to facilitate expertise and knowledge - sharing , where Company employees could create pro ﬁ les and B tag ^ their pro ﬁ les with various areas of expertise . While the intended purpose of the app was to facilitate social browsing between individuals unfamiliar with one another ( to foster skill , knowledge , and expertise transfer ) Elizabeth ( P9 ) came to rely on the contact information she could access easily via Indigo and the convenient interface that allowed for one - touch dialing . She described searching for people in Indigo either by name ( if she could remember it ) , or , if she couldn ’ t , by searching for the tagged expertise labels she knew the desired contact had listed ( for example , by a particular product line and geographic sales region ) . Although this may not be the new contact discovery envisioned in Indigo ’ s design , she had developed routines that took advantage of the app ’ s speci ﬁ c data / device coupling ( e . g . , the easy dialing it enabled ) . The Company had at least two other apps that could also be used as employee directories ( one was Iris , a widget app on the intranet that follows a social business model with social media - style pro ﬁ les ; another was Emerald , a more formal directory of employees , with roles , management lines , etc . ) The availability of other apps for employee directory information highlights the situated nature of software use and the multiplicity of ways to access particular content . This can increase fragmentation , but it can also increase ﬂ exibility , as Elizabeth ’ s ( P9 ) adapted use of the Indigo app demonstrates . While she used the expertise ﬁ nder ( Indigo ) to ﬁ nd known contacts ( instead of searching the traditional directory , Emerald ) , she could also use Indigo in line with its intended use ( browsing expertise for contact discovery ) . By developing this tactical use , she B expands ^ the scope of Indigo to also encompass that of Emerald , helping to combat app sprawl . Why use a second app if you can get one to do both ? Her use shows us how software boundaries can be drawn ( and redrawn ) in practice . By thinking about its underlying data structures – Wolf Christine T . and Blomberg Jeanette L . 16 and how data / device interactions could be leveraged to provide capabilities like one touch dialing – Elizabeth ( P9 ) stretched the Indigo app , allowing her to interact with its cloud data in ways advantageous for her work practice . While the rapid proliferation of unique apps creates increasingly dense and complicated IT ecosystems , workers came to rely on common aspects of apps ( i . e . , typical iOS design patterns of interaction ) as a means of assistance and distributed awareness . An example of this is the push noti ﬁ cation system , a feature that apps utilize to push alerts to the device ’ s screen , even if the app is not currently open and running . Many workers talked of relying heavily on these noti ﬁ cations to remind them of calendar appointments . These descriptions often arose in the context of the new mail and calendaring app Corn ﬂ ower , whose beta version only pushed noti ﬁ cations for email or calendar invitations from frequent contacts . The reasoning behind this feature was an attempt by designers to decrease alert fatigue , though this logic was not made explicit to users . Participants expressed frustration and confusion over missed alerts , as they had come to rely on calendar noti ﬁ cations , a tactic that was abruptly disrupted when this feature was absent in Corn ﬂ ower beta . The selective noti ﬁ cation feature in Corn ﬂ ower was such a deviation from typical push experiences that many Company employees interpreted it as a bug and not a feature at all . B There ’ s no option that comes up that says , you know , do you want to get reminded ﬁ ve minutes before the meeting ? , ^ Abigail ( P13 ) re ﬂ ected , B It ’ s just sort of missing … I don ’ t know what they ’ re thinking there . ^ ( Abigail , P13 ) . Many turned to intranet forums to post questions and complaints over this feature , where designers explained the rationale behind it . Although appreciative of the motive to decrease alert overload , many lamented that the consequence of missed noti ﬁ cations was missed appointments , an embarrassing outcome . Victor ( P14 ) explained this in an interview : B I ’ ve had somebody ping me or text me and say ‘ How come you ’ re not in this meeting ? ’ ^ he said , B and I go ‘ Well I ’ m looking at my phone and it ’ s not on my phone . ’ ^ Victor had not gotten a push noti ﬁ cation , because of Corn ﬂ ower novel alert logic : B It ’ s embarrassing . It ’ s de ﬁ nitely not good especially in front of a customer if you ’ re late to a meeting and , you know , it looks like you ’ re not putting them ﬁ rst . ^ ( Victor , P14 ) . These examples show how even though expectations around app ’ s feature can become routinized for workers , an app ’ s data / device interactions are not ﬁ nal or stable – different features can be turned on and off , with alternative design logics released in each update cycle . A part of data thinking , then , is also adjusting to this dynamism and keeping tabs on current data / device interactions and how those might change over time . While the insights from the previous ﬁ ndings sections ( software calculus ) show us that the contours of software are dynamic and can change across devices , here we see how the speci ﬁ c interactions within software programs ( be - tween a program ’ s underlying data structures and the device used to access it ) can also be sites of change . Making Sense of Enterprise Apps in Everyday Work Practices 17 4 . 2 . 2 . Orienting towards data structures In the ﬁ rst ﬁ ndings section we outlined practices that we label software calculus , workers ’ careful inventorying of a software program ’ s capabilities – noting how those features varied across versions of the program ( e . g . , the calendaring program as accessed through a mobile app , versus the desktop client , etc . ) . Here , we examine the attention workers give to the data structures that underlie software programs . We can see practices of what we label data thinking in many mundane forms of everyday work – like the clock time and hour time alignments we saw in Bradley ’ s daily recordkeeping . In complex , app - enhanced IT environments , though , data thinking takes many forms . Workers not only take note of a software ’ s data formats , but also ﬁ gure out if and how they support ( or might be leveraged to align with ) their work practices . As we saw in David ’ s home brew CRM example , or Elizabeth ’ s one - touch dialing hack , data thinking forms ingenuity and creative practice – forms of technical knowledge and literacy leveraged by workers to put various software capabilities B to work . ^ The re - ordered design logics we saw around push noti ﬁ cations , though , remind us of the dynamism that workers face in app - enhanced IT environments . While data thinking involves workers ’ investigation of software programs ’ underly - ing data structures ( and those structures ’ interactions with devices ) , orienting towards data structures also involves a watchful notation of how these dynamics might evolve and change in rapidly updated software landscapes . Just as software calculus reveals the multiplicity of the software workers encounter in their everyday work , data thinking reveals workers ’ awareness of and orientation towards the underlying structures of these programs – and the mutable characteristics of interaction . 5 . Discussion and conclusions We set out to explore the introduction of web and mobile apps in the enterprise , interested in understanding workers ’ experiences with these emergent forms of software in place – that is , how their use takes shape in the messiness of everyday work practices . While enterprise apps hold the promise to improve workplace processes ( both in terms of UX and collaborative work , as well as software man - agement ) , questions remain on how these visions play out in complex workplace environments where workers use apps together with other apps and alongside legacy software . We have taken software as our central phenomena of interest – yet not pre - de ﬁ ned its constitution . In doing so , we have been able to investigate how our participants grappled with software , making sense of it as they go about their everyday work . We articulate two practices emergent in our participants ’ accounts , which we have labeled software calculus ( appraising what software programs and software / device combos offer what features ) and data thinking ( orienting towards data formats and database structures that underlie speci ﬁ c software programs , as well as their interactions with speci ﬁ c devices ) . In this section , we discuss how our inquiry contributes to conceptual understandings of the dynamic qualities of software and the emergent challenges such dynamism poses for contemporary work practices . Wolf Christine T . and Blomberg Jeanette L . 18 5 . 1 . Dynamic materialities – conceptualizing B lively ^ artifacts Artifact ecologies have been investigated from a number of vantage points . But little attention has been paid to the particular role software plays in individuals ’ experi - ences moving between artifacts . Often conceptualized instead at the device ( e . g . , Bødker and Klokmose 2012 ; Jung et al . 2008 ; Santosa and Wigdor 2013 ; Vasiliou et al . 2015 ) or infrastructure ( Erickson and Jarrahi 2016 ; Vertesi 2014 ) level , we set out to understand how workers make sense of software in the increasingly complex ITenvironments of the enterprise , which incorporate web and mobile apps , alongside legacy software systems . We wanted to understand how participants ’ encounters with software as part of their everyday work practices were situated in – and de ﬁ ned through – speci ﬁ c , material practices . Doing so allows us to approach it in situ , focusing on its dimensions as a situated , material encounter rather than a stable or singular artifact . Our ﬁ ndings have revealed the contours of software to be dynamic and shifting – a lively encounter that workers make sense of as they move around their everyday work practices . What does it mean to say that software is B lively ^ ? In using this language , we ﬁ nd inspiration in the work of science and technology studies ( STS ) scholar Jane Bennett ( 2004 ) whose attention to materiality focuses on understanding the ways in which power and agency are distributed across people and things in what she calls an B ecology of matter . ^ For Bennett , such an ecological approach sees practice as B a dynamic ﬂ ow of matter - energy that tends to settle into various bodies , bodies that often join forces , make connections , form alliances , ^ and interrogates B the lively energy and / or resistant pressure that issues from one material assemblage and is received by others ^ ( Bennett 2004 , p . 365 ) . Her ecology metaphor echoes the use of the term in the artifact ecology stream of research in CSCW we have engaged with , but challenges us to consider the metaphor further – it is not only that we come to ﬁ nd that individuals ’ artifact use resembles the organic clusters of an ecology . It is also that the relationships between people and technologies are inter - dependent and unfolding – relationships that move , settle , and torque through everyday practices . These practices comprise a responsive dialogue through which people and technol - ogies B join forces , make connections , [ or ] form alliances ^ and where B lively ener - g [ ies ] and / or resistant pressure [ s ] ^ ( Bennett 2004 , p . 365 ) , are experienced as people move between these different social / material coalitions . Individuals experience software in situated , material encounters – the cloud ’ s contours and the accessibility it can offer are de ﬁ ned through speci ﬁ c interactions with speci ﬁ c apps on speci ﬁ c devices . As we ’ ve seen , these factors can and do change rapidly – as workers move between devices and between software instances , they must take note and adjust course . This dynamism is missed in approaches where cloud platforms are operationalized as stable and singular platforms . By taking a new mobilities ( Sheller and Urry 2006 ) perspective on circulation and movement ( i . e . , that workers ’ movements which interactionally span between and across IT artifacts are a form of everyday work mobility ) and focusing our analytical gaze on the Making Sense of Enterprise Apps in Everyday Work Practices 19 contours of software in these practices , we are able to uncover how encounters with software are unfolding and interactive – they are lively . In this work , we have shown how an attention to materiality is not simply a look to the ways that affordances constrain interaction . Indeed , our digital encounters have material characteristics that do intervene in interaction , constraining our experiences ( e . g . , Dourish 2017 ; Leonardi 2010 ; Jarrahi and Nelson 2018 ) . But our digital encounters are ongoing dialogues that unfold in everyday work practice – they are improvisational and inter - dependent , lively and messy , not determined or rigid . Conceptualizing of software encounters as improvisational and lively provokes us to consider the ways in which agencies are implicated at the interface ( e . g . , Suchman et al . 2002 ; Suchman 2007 ) . Who and what has agency in our everyday encounters with software ? How do those agencies shift and what impact do they have on everyday work ? The metaphors we use to understand digital artifacts can make it dif ﬁ cult to further these types of materialist accountings ( Leonardi 2010 ; Borning et al . 2018 ) . In calling software lively , we contribute language to push forward our conceptualizations of everyday encounters with software as material and agentic artifacts that intervene , act , and react in everyday work practices . Software ( and the various devices they can be encountered through ) are not simply tools that are used , leveraged , or worked - around – instead , everyday work practices are ongoing con - versations where workers strive to make sense of and act in concert with the material conditions they ﬁ nd themselves in . 5 . 2 . Software competencies and workplace recognition Drawing attention to the two sets of work practices we have labelled software calculus and data thinking also raises questions around technological competencies and workplace recognition . In their study of contemporary mobile workers , Erickson and Jarrahi ( 2016 ) set out the notion of B infrastructural competency ^ to recognize the emergent demands mobile workers must meet as they patch together various infra - structures to get work done . Our ﬁ ndings similarly point to the emergent software competencies workers must leverage in everyday work practices that involve com - plex , app - enhanced IT environments . In contemporary work experiences , people are increasingly required to develop emergent forms of digital literacy skills as they navigate the dynamic ITenvironments they work in . The need to B keep up ^ with new software programs at work is not new nor is touting one ’ s software skills as a value - add one brings to the team . Recall the freelancers in Nouwens and Klokmose ( 2018 ) , who often market their software skills as unique value - adds . In our case , the considerable effort workers expend to make sense of software – and make it workable in their everyday work practices – are not seen in the same way . The mundane , yet requisite practices around software we have exposed – keeping track of software features across devices ( software calculus ) and thinking about and adjusting recordkeeping to underlying data formats and databases ( data thinking ) – are often rendered invisible and absorbed in the B real work ^ these efforts make possible . A Wolf Christine T . and Blomberg Jeanette L . 20 longstanding concern within the CSCW community has been the ways in which design and use of computing technologies renders some work practices visible ( and hence , valued ) while others are obscured and made invisible ( and hence , devalued ) ( e . g . , Star and Strauss 1999 ; Suchman 1995 ) . Our case here reinvigorates these concerns , drawing attention to their saliency in contemporary enterprise settings where legacy IT environments are enhanced with new enterprise app capabilities . The modular visions that run through app narratives focus on certain notions of compatibility and not others . While the various enterprise apps we have examined are compatible in that they both run on the same OS and they both follow a similar design aesthetic , their underlying data structures – and the dynamic accessibility of those data based on speci ﬁ c app / device combinations – present an ongoing challenge that workers must keep at the forefront as they go about their daily work . Recall the participant who continually moved his sales notes between his home - brew CRM that utilized one program ’ s more ﬂ exible ﬁ le structures to record contextual client information of varying formats ( i . e . , Powerpoint or Word documents , free form text , images , etc . ) in contrast to Sage ’ s rigid B call report ^ data entry that records day , time , and brief text description of client contact . Although adding more work to his day , he must convert his records into Sage - friendly formats because his sales team relies on call reports to monitor sales progress . This example may seem like a somewhat mundane or inconsequential example of personal recordkeeping , but the collabora - tive re ﬂ ection and planning of his team depends on his data work , invisible though it appears . This points to the interdependency of data streams — not only for primary recordkeeping ( here , the sales team ’ s use of call stats in planning and re ﬂ ection ) but also for secondary uses ( analytics and other uses that may mine Sage data later on ) . Big Data is built on small practices , like the everyday micro - work of data thinking we have explored here . Perhaps rendered invisible and absorbed in the B real work , ^ these forms of micro - work are integral for the broader collective operations of teams and organizations . Cloud computing enables new forms of interconnectedness , but with this connectivity comes new demands ( Wolf et al . 2018 ) . Workers must manage increasingly complex IT environments wherein digital resources can move in new and accelerated ways – but , as we have seen , content in the cloud is never truly available B anytime , anywhere . ^ Instead , workers must account for additional layers of complexity as they access the cloud through speci ﬁ c apps on speci ﬁ c devices . In this paper , we have drawn attention to the emergent software competencies workers must demonstrate as they get work done , efforts we miss when we do not turn our gaze to software and its complicated , material , and lively dimensions . 5 . 3 . The promise of software analytics Although our focus has been on the practices of end - users , as we conclude , we circle back to the multiple objectives furthered by the development of enterprise apps , and in particular their relationship to data analytics . Big Data is an increasingly central concern for CSCW scholarship , both as a source of empirical material to utilize in Making Sense of Enterprise Apps in Everyday Work Practices 21 research and also as a phenomenon of interest . In many environments , analytics - driven decision - making is becoming a dominant paradigm , one that holds the promise of a new era of scienti ﬁ c management – and software development is no exception . The promise of analytics resides in the hope that actionable insights may be derived from larger and more diverse sets of data , revealing new knowledge through patterns and trends represented in datasets and the predictions they might infer . From the all too familiar spreadsheets of organizational life ( Dourish and Mazmanian 2013 ; Dourish 2017 ) to the elaborate analytics dashboards becoming more common lately ( Crooks 2017 ; Sukumar et al . 2018 ) , data ( and the subsequent forms of analytics they can be transformed into ) come to B stand in ^ for the phenom - ena they are meant to represent . Standing in is powerful in that it comes to shape perception and organize action – data recursively come to order the realities they are meant to represent . In the case of software analytics , such data are often measuring user activities , captured through various data traces generated as users engage with a given program . For those of us interested in understanding technologies in ordinary , longitudinal use , such software analytics seem to offer us a coveted window into the so - called B wild ^ of everyday life . The insights that may be assigned to software analytics , though , depend not only on ready access to data and the ability to standardize analysis across datasets ; they also rely on the assumption that these representations and the meanings assigned to them may be uniformly gleaned across contexts . Software B use ^ is seen as singular and straightforward , its contours in one setting equating to those in any other . But the software encounters we have explored in this paper complicate this type of vision . As we have seen , software in our participants ’ practices is a dynamic and changing material encounter – one that is both situated in speci ﬁ c app interac - tions as well as the organic , complex software ecosystems of organizational life . An app is not encountered alone but rather within the context of many other apps , software programs , devices , and work ﬂ ows . The situated character of these encoun - ters challenges the capability of single - program data traces to narrate the full , messy stories of everyday collaborative work . Further still , the practices of data thinking we have outlined showcase the ways in which workers orient towards the speci ﬁ c data formats and databases embedded within particular software programs – taking advantage of ﬂ exibility in some cases , while also making things ﬁ t in more rigid examples . As others have noted , data is never raw , but always cooked ( Gitelman 2013 ) – so too , actions are never wild but always occur in relation to the material ecologies in which they arise . In the words of Bowker ( 2000 ) the database comes to shape our world in its image . In this paper , we have shown the vibrant narratives of workers ’ everyday encoun - ters with software , revealing the care and ingenuity needed to make sense of and make workable the turbulent and lively landscapes of contemporary , app - enhanced IT ecosystems . The ongoing challenge for us , as CSCW scholars , is to ﬁ nd ways that the messiness of lively encounters are accounted for – ampli ﬁ ed and honored rather than reduced to the neat and orderly traces they might leave behind . Wolf Christine T . and Blomberg Jeanette L . 22 Acknowledgements Thank you to our participants , who generously shared their experiences and insights with us . Also thank you to Paul Dourish and Roderic Crooks for comments on earlier drafts and to the anonymous peer reviewers . This work was partially completed while the ﬁ rst author was a graduate student in the Dept . of Informatics , Donald Bren School of Information and Computer Sciences , University of California , Irvine , Irvine , CA , and was supported , in part , by fellowship funds from Achievement Rewards for College Scientists ( ARCS ) Orange County Chapter , the IBM PhD Fellowship Program , and the US Dept of Education . All opinions expressed herein are our own and do not re ﬂ ect any institutional endorsement . References Axtell , Carolyn ; Donald Hislop ; and Steve Whittaker ( 2008 ) . Mobile Technologies in Mobile Spaces : Findings from the context of train travel . International Journal of Human - Computer Studies vol . 66 , no . 12 . pp . 902 – 915 . Balka , Ellen ; and Ina Wagner ( 2006 ) . Making Things Work : Dimensions of Con ﬁ gurability As Appropriation Work . CSCW ' 06 . Proceedings of the ACM conference on computer supported cooperative work , Banff , Canada , 04 – 08 November 2006 . New York : ACM Press , pp . 229 – 238 . Bardram , Jakob E . ; and Claus Bossen ( 2005 ) . Mobility work : The spatial dimension of collaboration at a hospital . Computer Supported Cooperative Work ( CSCW ) , vol . 14 , no . 2 , pp . 131 – 160 . Bellotti , Victoria ; and Sara Bly ( 1996 ) . Walking away from the desktop computer : Distributed collaboration and mobility in a product design team . CSCW ' 96 . Proceedings of the ACM conference on computer supported cooperative work , Boston , Massachusetts , 16 – 20 November 1996 . New York : ACM Press , pp . 209 – 218 . Bennett , Jane ( 2004 ) . The force of things : Steps toward an ecology of matter . Political Theory , vol . 32 , no . 3 , pp . 347 – 372 . Bødker , Susanne ; and Ellen Christiansen ( 2012 ) . Poetry in motion : Appropriation of the world of apps . EECE ' 12 . Proceedings of the 30th European Conference on Cognitive Ergonomics , Edinburgh , United Kingdom , 28 – 31 August 2012 . New York : ACM Press , pp . 78 – 84 . Bødker , Susanne ; and Clemens Nylandsted Klokmose ( 2012 ) . Dynamics in artifact ecologies . NordiCHI ' 12 . Proceedings of the 7th Nordic Conference on Human - Computer Interaction , Copenhagen , Denmark , 14 – 17 October 2012 . New York : ACM Press , pp . 448 – 457 . Borning , Alan ; Batya Friedman ; and Deric Gruen ( 2018 ) . What Pushes Back From Considering Materiality in IT ? LIMITS ' 18 . Proceedings of the 2018 Workshop on Computing within Limits , Toronto , Canada , 13 – 14 May 2018 . New York : ACM Press , Article no . 10 . Bowker , Geoffrey C . ( 2000 ) . Biodiversity Datadiversity . Social Studies of Science , vol . 30 , no . 5 , pp . 643 – 683 . Capra , Robert ; Emily Vardell ; and Kathy Brennan ( 2014 ) . File Synchronization and Sharing : User Practices and Challenges . ASIS & T ' 14 . Proceedings of the American Society for Information Science and Technology , Seattle , Washington , 31 October - 5 November 2014 . Wiley and Sons , pp . 1 – 10 . Cecez - Kecmanovic , Dubravka ; Robert D . Galliers ; Ola Henfridsson ; Sue Newell ; and Richard Vidgen ( 2014 ) . The Sociomateriality of information systems : Current status , future directions . MIS Quarterly , vol . 38 , no . 3 , pp . 809 – 830 . Making Sense of Enterprise Apps in Everyday Work Practices 23 Charmaz , Kathy ( 2014 ) . Constructing grounded theory . Thousand Oaks , CA : SAGE . Churchill , Elizabeth F . ; and Nina Wakeford ( 2002 ) . Framing Mobile collaborations and Mobile technologies . In Brown , Barry ; Nicola Green ; and Richard Harper ( eds . ) Wireless world : Social and international aspects of the Mobile age . London : Springer . , pp . 154 – 179 . Ciol ﬁ , Luigina ; Breda Gray ; and Anthony D ’ Andrea ( 2012 ) . Social aspects of place experience in Mobile work / life practices . In Julie Dugdale ( ed ) From research to practice in the Design of Cooperative Systems : Results and open challenges . Springer , London , pp . 183 – 196 . Coughlan , Tim ; Trevor D . Collins ; and Anne Adams ( 2012 ) . The conceptual framing , design and evaluation of device ecologies for collaborative activities . International Journal of Human - Computer Studies , vol . 70 , no . 10 , pp . 765 – 779 . Crabtree , Andy , and Tom Rodden ( 2008 ) . Hybrid ecologies : Understanding cooperative interaction in emerging physical - digital environments . Personal and Ubiquitous Computing , vol . 12 , no . 7 , pp . 481 – 493 . Cresswell , Timothy ( 2006 ) . On the move : Mobility in the modern Western world . New York : Routledge . Crooks , Roderic ( 2017 ) . Representationalism at work : Dashboards and data analytics in urban education . Educational Media International , vol . 54 , no . 4 , pp . 289 – 303 . Dearman , David ; and Jeffery S . Pierce ( 2008 ) . It ’ s on my other computer ! : Computing with multiple devices . CHI ' 08 . Proceedings of the ACM Conference on Human Factors in Computing Systems , Florence , Italy , 05 – 10 April 2008 . New York : ACM Press , pp . 767 – 776 . Divine , Doug ; Toni Ferro ; and Mark Zachry ( 2011 ) . Work through the web : A typology of web 2 . 0 services . SIGDOC ' 11 . Proceedings of the 29th ACM International Conference on Design of Communication , Pisa , Italy , 03 – 05 October 2011 . New York : ACM Press , pp . 121 – 128 . Dourish , Paul . ( 2017 ) . The stuff of bits : An essay on the Materialities of information . Cambridge , Mass : The MIT Press . Dourish , Paul ; and Melissa Mazmanian ( 2013 ) . Media as Material : Information Representations as Material Foundations for Organizational Practice . In Carlile , Paul R . ; Davide Nicolini ; Ann Langley ; and Haridimos Tsoukas ( eds . ) . How Matter Matters : Objects , Artifacts , and Materiality in Organization Studies . Dourish , Paul , Annette Adler , Victoria Bellotti , and Austin Henderson ( 1996 ) . Your place or mine ? Learning from long - term use of audio - video communication . Computer Supported Cooperative Work ( CSCW ) , vol . 5 , no . 1 , pp . 33 – 62 . Draxler , Sebastian ; Adrian Jung ; Alexander Boden ; and Gunnar Stevens ( 2011 ) . Workplace warriors : Identifying team practices of appropriation in software ecosystems . CHASE ' 11 . Proceedings of the 4th international workshop on cooperative and human aspects of software engineering , Honolulu , Hawaii , 21 – 21 may 2011 . New York : ACM Press , pp . 57 – 60 . Erickson , Ingrid ; and Mohammad Hossein Jarrahi ( 2016 ) . Infrastructuring and the challenge of dynamic seams in Mobile knowledge work . CSCW ' 16 . Proceedings of the ACM conference on computer - supported cooperative work , San Francisco , California , 27 February - 02 march 2016 . New York : ACM Press , pp . 1323 – 1336 . Forlizzi , Jodi ( 2008 ) . The product ecology : Understanding social product use and supporting design culture . International Journal of Design , vol . 2 , no . 1 , pp . 11 – 20 . Fuller , Matthew ( ed ) ( 2008 ) . Software Studies : A Lexicon . Cambridge , mass : The MIT Press . Gantt , Michelle ; and Bonnie A . Nardi ( 1992 ) . Gardeners and gurus : Patterns of cooperation among CAD users . CHI ' 92 . Proceedings of the ACM conference on human factors in computing systems , Monterey , California , 03 – 07 may 1992 . New York : ACM Press , pp . 107 – 117 . Gillespie , Tarleton ; Pablo J . Boczkowski ; and Kirsten A . Foot ( eds ) ( 2014 ) . Media technologies : Essays on communication , materiality , and society . Cambridge , Mass : The MIT Press . Gitelman , Lisa ( ed ) ( 2013 ) . Raw Data is an Oxymoron . Cambridge , mass : The MIT Press . Gregg , Melissa ( 2015 ) . Inside the data spectacle . Television & New Media , vol . 16 , no . 1 , pp . 37 – 51 . Wolf Christine T . and Blomberg Jeanette L . 24 Gross , Shad , Jeffrey Bardzell , and Shaowen Bardzell ( 2014 ) . Structures , forms , and stuff : The materiality and medium of interaction . Personal and Ubiquitous Computing , vol . 18 , no . 3 , pp . 637 – 649 . Grudin , Jonathan ( 2001 ) . Partitioning digital worlds : Focal and peripheral awareness in multiple monitor use . CHI ' 01 . Proceedings of the ACM conference on human factors in computing systems , Seattle , Washington , 31 March - 4 April 2001 . New York : ACM Press , pp . 458 – 465 . Harris , Jeanne , Blake Ives , and Iris Junglas ( 2012 ) . IT consumerization : When gadgets turn into Enterprise IT tools . MIS Quarterly Executive , vol . 11 , no . 3 , pp . 99 – 112 . Houben , Steven ; Paolo Tell ; and Jakob E . Bardram ( 2014 ) . ActivitySpace : Managing device ecologies in an activity - centric con ﬁ guration space . ITS ' 14 . Proceedings of the ninth ACM international conference on interactive tabletops and surfaces , Dresden , Germany , 16 – 19 November 2014 . New York : ACM Press , pp . 119 – 128 . Ingold , Timothy ( 2011 ) . Being Alive : Essays on Movement , Knowledge and Description . London , New York : Routledge . Jarrahi , Mohammad Hossein ; and Sarah Beth Nelson ( 2018 ) . Agency , Sociomateriality , and con ﬁ guration work . The Information Society , vol . 34 , no . 4 , pp . 244 – 260 . Jarrahi , Mohammad Hossein ; and Steve Sawyer ( 2015 ) . Theorizing on the take - up of social technologies , organizational policies and norms , and consultants ’ knowledge - sharing practices . Journal of the Association for Information Science and Technology , vol . 66 , no . 1 , pp . 162 – 179 . Jung , Heekyoung ; Erik Stolterman ; Will Ryan ; Tonya Thompson ; and Marty Siegel ( 2008 ) . Toward a framework for ecologies of artifacts : How are digital artifacts interconnected within a personal life ? NordiCHI ' 08 . Proceedings of the Nordic conference on human - computer interaction , Lund , Sweden , 20 – 22 October 2008 . New York : ACM Press , pp . 201 – 210 . Kane , Shaun K . ; Amy K . Karlson ; and Brian R . Meyers ( 2009 ) . Exploring cross - device web use on PCs and Mobile devices . INTERACT ' 09 . Proceedings of Human - Computer Interaction . Berlin : Springer , pp . 722 – 735 . Kaplan , Sarah ( 2010 ) . Strategy and PowerPoint : An inquiry into the epistemic culture and machinery of strategy making . Organization Science , vol . 22 , no . 2 , pp . 320 – 346 . Karasti , Helena ; and Anna - Liisa Syrjänen ( 2004 ) . Artful infrastructuring in two cases of community PD . PDC ' 04 . Proceedings of the ACM Conference on Participatory Design , Toronto Canada , 27 – 31 July 2004 . New York : ACM Press , pp . 20 – 30 . Laurier , Eric ( 2004 ) . Doing of ﬁ ce work on the motorway . Theory , Culture & Society , vol . 21 , nos . 4 – 5 , pp . 261 – 277 . Leonardi , Paul M . ( 2010 ) . Digital Materiality ? How Artifacts Without Matter , Matter . First Monday , vol . 15 , nos . 6 – 7 . Leonardi , Paul M . ( 2013 ) . Theoretical foundations for the study of Sociomateriality . Information and Organization , vol . 23 , no . 2 , pp . 59 – 76 . Liegl , Michael ( 2014 ) . Nomadicity and the Care of Place — On the aesthetic and affective Organization of Space in freelance creative work . Computer Supported Cooperative Work ( CSCW ) , vol . 23 , no . 2 , pp . 163 – 183 . Luff , Paul ; and Christian Heath ( 1998 ) . Mobility in collaboration . CSCW ' 98 . Proceedings of the ACM Conference on Computer Supported Cooperative Work , Seattle , Washington , 14 – 18 November 1998 . New York : ACM Press , pp . 305 – 314 . Mackay , Wendy E . ( 1990 ) . Patterns of sharing customizable software . CSCW ' 90 . Proceedings of the ACM conference on computer - supported cooperative work , Los Angeles , California , 07 – 10 October 1990 . New York : ACM Press , pp . 209 – 221 . Marshall , Cathy , and John C . Tang ( 2012 ) . That syncing feeling : Early user experiences with the cloud . DIS ' 12 . Proceedings of the ACM conference on designing interactive systems , Newcastle upon Tyne , United Kingdom , 11 – 15 June 2012 . New York : ACM Press , pp . 544 – 553 . Making Sense of Enterprise Apps in Everyday Work Practices 25 Nouwens , Midas and Clemens Klokmose ( 2018 ) . The application and its consequences for non - standard knowledge work . CHI ' 18 . Proceedings of the ACM Conference on Human Factors in Computing Systems , Montreal , Canada , 21 – 26 April 2018 . ACM , New York , NY , USA , Paper 399 , 12 pages . Orlikowski , Wanda J . ; and Debra C . Gash ( 1994 ) . Technological frames : Making sense of information Technology in Organizations . ACM Transactions on Information Systems , vol . 12 , no . 2 ) , pp . 174 – 207 . Orlikowski , Wanda J . ; and C . Suzanne Iacono ( 2001 ) . Research commentary : Desperately seeking the B IT ^ in IT research — A call to theorizing the IT artifact . Information Systems Research , vol . 12 , no . 2 , pp . 121 – 134 . Orlikowski , Wanda J . ; and Susan V . Scott ( 2015 ) . Exploring material - discursive practices . Journal of Management Studies , vol . 52 , no . 5 , pp . 697 – 705 . Oulasvirta , Antti , and Lauri Sumari ( 2007 ) . Mobile kits and laptop trays : Managing multiple devices in Mobile information work . CHI ' 07 . Proceedings of the ACM Conference on Human Factors in Computing Systems , San Jose , California , 28 April - 03 May 2007 . New York : ACM Press , pp . 1127 – 1136 . Paine , Drew ; and Charlotte Lee ( 2017 ) . B Who has plots ? ^ : Contextualizing scienti ﬁ c software , practice , and visualizations . Journal proceedings of the ACM on human - computer interaction . New York : ACM Press , vol 1 . , no . CSCW , Article 85 . Palen , Leysia ; Marilyn Salzman ; and Ed Youngs ( 2000 ) . Going wireless : Behavior and practice of new Mobile phone users . CSCW ' 00 . Proceedings of the ACM Conference on Computer Supported Cooperative Work , Philadelphia , Pennsylvania , 2 – 6 December 2000 . New York : ACM Press , pp . 201 – 210 . Rosner , Daniela K . ( 2012 ) . The material practices of collaboration . CSCW ' 12 . Proceedings of the ACM Conference on Computer Supported Cooperative Work , Seattle , Washington , 11 – 15 February 2012 . New York : ACM Press , pp . 1155 – 1164 . Rossitto , Chiara , Cristian Bogdan , and Kerstin Severinson - Eklundh ( 2014 ) . Understanding constel - lations of Technologies in use in a collaborative nomadic setting . Computer Supported Cooperative Work ( CSCW ) , vol . 23 , no . 2 , pp . 137 – 161 . Santosa , Stephanie ; and Daniel Wigdor ( 2013 ) . A ﬁ eld study of multi - device work ﬂ ows in distributed workspaces . UbiComp ' 13 . Proceedings of the ACM international joint conference on pervasive and ubiquitous computing , Zurich , Switzerland , 08 – 12 September 2013 . New York : ACM Press , pp . 63 – 72 . Scott , Susan V . , and Wanda J . Orlikowski ( 2012 ) . Recon ﬁ guring relations of accountability : Materialization of social Media in the Travel Sector . Accounting , Organizations and Society , vol . 37 , no . 1 , pp 26 – 40 . Sheller , Mimi ; and John Urry ( 2006 ) . The new Mobilities paradigm . Environment and Planning A : Economy and Space , vol . 38 , no . 2 , pp . 207 – 226 . Sørensen , Carsten ( 2011 ) . Enterprise Mobility : Tiny Technology with Global Impact on Work . Basingstoke , GB : Palgrave Macmillan . Sørensen , Henrik ; and Jesper Kjeldskov ( 2014 ) . Concepts of multi - artifact Systems in Artifact Ecologies . ACHI ' 14 . Proceedings of international conference on advances in computer - human interactions . pp . 141 – 146 . Star , Susan Leigh ; and Anselm Strauss ( 1999 ) . Layers of silence , arenas of voice : The ecology of visible and invisible work . Computer Support Cooperative Work ( CSCW ) , vol . 8 , nos . 1 – 2 , pp . 9 – 30 . Stolterman , Erik ; Heekyoung Jung Ryan Will ; and Martin A . Siegel ( 2013 ) . Device landscapes : A new challenge to interaction design and HCI research . Archives of Design Research , vol . 26 , no . 2 , pp . 7 – 33 . Wolf Christine T . and Blomberg Jeanette L . 26 Strauss , Anselm ; and Juliet M . Corbin ( 1997 ) . Grounded theory in practice . Thousand Oaks , Calif . SAGE . Suchman , Lucy ( 1995 ) . Making work visible . Communications of the ACM , vol . 38 , no . 9 , pp . 56 – 64 . Suchman , Lucy ( 2007 ) . Agencies in technology design : Feminist recon ﬁ gurations . Suchman , Lucy ; Randall Trigg ; and Jeanette Blomberg ( 2002 ) . Working artefacts : Ethnomethods of the prototype . British Journal of Sociology , vol . 53 , no . 2 , pp . 163 – 179 . Sukumar , Poorna Talkad ; Ronald Metoyer ; and Shuai He ( 2018 ) . Making a pecan pie : Understanding and supporting the holistic review process in admissions . CSCW ' 18 . Journal Proceedings of ACM on Human - Computer Interaction . New York : ACM press , vol . 2 , issue CSCW , November 2018 , article no . 169 . Symon , Gillian ; and Katrina Pritchard ( 2015 ) . Performing the responsive and committed employee through the Sociomaterial mangle of connection . Organization Studies vol . 36 , no . 2 , pp . 241 – 263 . Tang , John C . ; Jed R . Brubaker ; and Catherine C . Marshall ( 2013 ) . What do you see in the cloud ? Understanding the cloud - based user experience through practices . INTERACT ' 13 . Human - Computer Interaction . Springer Press , pp . 678 – 695 . Turner , Thea ; Pernilla Qvarfordt ; Jacob T . Biehl ; Gene Golovchinsky ; and Maribeth Back ( 2010 ) . Exploring the workplace communication ecology . CHI ' 10 . Proceedings of the ACM Conference on Human Factors in Computing Systems , Atlanta , Georgia , 10 – 15 April 2010 . New York : ACM Press , pp . 841 – 850 . Vasiliou , Christina ; Andri Ioannou ; and Panayiotis Zaphiris ( 2015 ) . An artifact ecology in a nutshell : A distributed cognition perspective for collaboration and coordination . INTERACT ' 15 . Human - Computer Interaction . Springer Press , pp . 55 – 72 . Vertesi , Janet ( 2014 ) . Seamful spaces : Heterogeneous infrastructures in interaction . Science , Technology , and Human Values , vol . 39 , no . 2 , pp . 264 – 284 . Voida , Amy ; Judith S . Olson ; and Gary M . Olson ( 2013 ) . Turbulence in the clouds : Challenges of cloud - based information work . CHI ' 13 . Proceedings of the ACM Conference on Human Factors in Computing Systems , Paris , France , 27 April - 02 May 2013 . New York : ACM Press , pp . 2273 – 2282 . Watson - Manheim , Mary Beth ; and France Bélanger ( 2007 ) . Communication media repertoires : Dealing with the multiplicity of media choices . MIS Quarterly , vol . 31 , no . 2 , pp . 267 – 293 . Wolf , Christine T . ; Kathryn E . Ringland ; Isley Gao ; and Paul Dourish . ( 2018 ) . Participating through data : Charting relational tensions in multiplatform data ﬂ ows . CSCW ‘ 18 , Journal Proceedings of ACM on Human - Computer Interaction . New York , NY : ACM , vol . 2 , issue CSCW , November 2018 , article no . 184 . Publisher ’ s Note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional af ﬁ liations . Making Sense of Enterprise Apps in Everyday Work Practices 27