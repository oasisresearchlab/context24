Between Scripts and Applications : Computational Media for the Frontier of Nanoscience Midas Nouwens 1 , Marcel Borowski 2 , Bjarke Fog 1 , Clemens Nylandsted Klokmose 1 1 Department of Digital Design and Information Studies , Aarhus University 2 Department of Computer Science , Aarhus University midasnouwens @ cc . au . dk , marcel . borowski @ cs . au . dk , bfog @ cc . au . dk , clemens @ cavi . au . dk ABSTRACT The popularity of computational notebooks heralds a return of software as computational media rather than turn - key appli - cations . We believe this software model has potential beyond supporting just the computationally literate . We studied a biomolecular nano - design lab that works on a current frontier of science — RNA origami — whose researchers depend on computational tools to do their work , yet are not trained as pro - grammers . Using a participatory design process , we developed a computational labbook to concretise what computational media could look like , using the principles of computabil - ity , malleability , shareability , and distributability suggested by previous work . We used this prototype to co - reﬂect with the nanoscientists about how it could transform their prac - tice . We report on the computational culture speciﬁc to this research area ; the scientists’ struggles managing their compu - tational environments ; and their subsequent disempowerment yet dependence . Lastly , we discuss the generative potential and limitations of the four design principles for the future of computational media . Author Keywords Computational media ; Computational notebook ; Electronic laboratory notebook ; Participatory design CCS Concepts • Human - centered computing → Human computer inter - action ( HCI ) ; Interactive systems and tools ; Participatory design ; INTRODUCTION We are in a paradigm of software as applications — graphical interfaces to transform data using pre - deﬁned tools — rather than computational media — software which allows you to create , execute , and edit computations that can operate on anything , including the software itself . Tantalisingly , however , there are recent commercial products and research prototypes that run counter to this application paradigm . The computa - tional notebooks that have become popular in data science , digital journalism , and education , for example ( e . g . , Jupyter Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . Copyrights for components of this work owned by others than ACM mustbehonored . Abstractingwithcreditispermitted . Tocopyotherwise , orrepublish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . Request permissions from permissions @ acm . org . CHI ’20 , April 25 – 30 , 2020 , Honolulu , HI , USA . © 2020 Association for Computing Machinery . ACM ISBN 978 - 1 - 4503 - 6708 - 0 / 20 / 04 . . . $ 15 . 00 . http : / / dx . doi . org / 10 . 1145 / 3313831 . 3376287 Notebook [ 19 ] or Observable [ 29 ] ) , allow users to mix tradi - tional word - processing functionality with executable code in the same perceptual space . As seeds for a paradigm shift of software , however , computa - tional notebooks are programming environments with some application - like qualities , rather than that they are GUI appli - cations that also allow for writing and executing computations . As such , they treat code as the primary object of interest and expect users with software engineering skills ( e . g . , version control , dependency management ) . We want to expand this reimagination of software as computational media and explore designs that support computer users who are dependent on computation for their activities , but who are not trained as software engineers . We collaborated with a group of biomolecular nanoscientists whose scientiﬁc practice and progress rely on using in - house developed computational tools , but who do not have a formal programming education . We engaged them in the participatory design of a computational labbook that helps them carry out a key part of their work , namely the computational design of new RNA structures . The prototype and participatory design process were guided by the concepts computability , malleabil - ity , shareability , and distributability ; four proposed principles for computational media derived from Klokmose et al . [ 23 ] and Rädle et al . [ 35 ] . We address the following research questions : 1 . How do biomolecular nanoscientists use computation in their work ? 2 . How can computational media , rather than applications and scripts , better support their work ? 3 . What can we learn about computational media at large by designing for biomolecular nanoscientists ? Accordingly , our main contributions are : ( i ) an empirical account of the computational activities and challenges of biomolecular nanoscientists ; ( ii ) a high - ﬁdelity computa - tional labbook prototype for the domain of biomolecular nanoscience ; and ( iii ) a deepening of the four principles for computational media rooted in real - world work praxis . RELATED WORK We examine the potential and principles of computational media in a scientiﬁc practice . Related work includes com - putational tools in the sciences and work on computational media . Lab Notebooks and e - Science Tools In the sciences , the laboratory notebook is often seen as the cornerstone of research , and efforts to create electronic lab notebooks ( ELNs ) are plenty . Commercial ELNs are largely wiki - based and oriented towards particular considerations such as transparency , data management , and ease - of - use ( e . g . , Con - ﬂuence [ 1 ] , BIOVIA [ 3 ] , and Labguru [ 26 ] ) . Some academic work has explored other aspects of electronic laboratory work . Inspired by the Semantic Web , Talbott et al . [ 43 ] ( among oth - ers [ 46 , 47 ] ) have focused on data provenance as a key factor in lab work . Others have aimed to bridge the gap between physi - cal and digital materials by providing an interactive tabletop in the lab space [ 42 ] , augmenting the work - space with mixed - reality “interactive paper” [ 27 ] , or using digital photographs to couple notebooks and external materials [ 45 ] . Oleksik et al . have investigated the artifact ecologies of laboratories [ 30 ] and how scientists appropriate existing off - the - shelf note - taking software and the inherent clash between stability and ﬂexibil - ity , providing guidelines to how ELNs might be designed [ 31 ] . Most of the work on ELNs , however , has sought to more or less replace physical notebooks with digitally enhanced replicas . These enhancements are often web - based and col - laborative , offering tools for cross - referencing , tagging , and visualization [ 11 , 36 , 40 , 44 ] . While these are admirable ef - forts in their own right , we believe that looking more closely at the potential of computational media can fruitful directions for re - thinking laboratory notebooks to be the locus of scientiﬁc computational activities — as also proposed in [ 24 ] . The natural sciences have been the targets of efforts to aug - ment the scientiﬁc process with computational capabilities , in particular when their objects are large - scale and complex data , e . g . , genomic data , which often is referred to as e - Science . Smith [ 41 ] argues that contemporary scientiﬁc work is increas - ingly reliant on full - ﬂedged software engineering abilities . Sur - veying the literature on e - science reveals a large body of work that focuses on the technical infrastructure for distributed and grid computing . However , there is also work that addresses challenges similar to some of those we observe in our studies : Holdgraf et al . [ 18 ] explore how to facilitate sharing of com - putational environments , Östberg et al . [ 48 ] study how to ease distribution of computations by raising the required level of abstraction , and Harrison et al . [ 16 ] developed a standard for sharing scientiﬁc computational workﬂows . Yet , their aim is not to challenge the dominant software paradigm but to create practical computational tools to support scientiﬁc work . We argue that many of these identiﬁed challenges are systemically tied together and can collectively be addressed by a change in focus from scripts and applications to computational media . Computational Media The idea of software as a dynamic or computational medium was conceived by Alan Kay in his famous Dynabook vi - sion [ 20 ] . diSessa exempliﬁed a computational medium [ 7 ] with his Boxer programming environment [ 6 ] that allowed users to build software and do computation in the same medium as they write text . diSessa contrasted the “mono - lithic , nonmodiﬁable applications” with computational media , perceiving the latter as tools that can be organically enriched and extended [ 7 ] ( see Figure 1 ) . In recent years , the proliferation of computational notebooks , e . g . , Jupyter Notebook [ 19 ] , is emblematic of the perceived and actual beneﬁts of computational media . In 2017 , over a million Jupyter notebooks had been shared on GitHub [ 38 ] . Computational notebooks has has also recently become an academic object of study in HCI ( e . g . , [ 17 , 21 , 22 , 37 , 38 ] ) . Computational notebooks are not ELNs by another name , rather they are computational environments that enables weav - ing “a narrative directly into a live computation , interleaving text with code and results to construct a complete piece that re - lies equally on the textual explanations and the computational components” [ 32 ] . They are particularly designed to support replication in computational sciences [ 25 ] . Computational media do not necessitate that the user becomes a program - mer . A particular group of these media can be termed no - code computational media . No - code computational media embody computational capabilities but do not require that the users themselves write program code . One such example is No - tion [ 28 ] , a knowledge repository environment that enables users to utilise computation without writing code . Another example is Coda [ 5 ] . Webstrates [ 23 ] is a platform for developing dynamic or com - putational media inspired by Kay’s early visions of personal dynamic media . Webstrates is based on a simple change to the mechanics of the web , where a web - page is made collab - oratively editable directly from the browser . In Webstrates there is no technical distinction between editing content and the scripts deﬁning the functionality of a page . This means that the traditionally hard distinction between development and use of software is blurred . Codestrates [ 35 ] is an authoring environment for Webstrates and builds on the computational notebook metaphor . However , it allows for the development of application - like collaborative software , and is reprogrammable and extensible from within . Webstrates and Codestrates are document - centric in the spirit of Boxer . Webstrates is based on the principles of shareability , dis - tributability , and malleability . Shareability refers to the users’ ability to share and collaborate seamlessly on multiple types of data within a document , synchronously and asynchronously , with themselves and multiple people , using their own per - sonalised views and tools . Distributability points to the abil - ity to easily distribute documents , interactive elements , and computation across multiple and heterogeneous devices and Figure 1 . Applications ( left ) and computational media ( right ) . Adapted from diSessa [ 7 ] . platforms . Malleability signiﬁes the system’s ability to be continuously changed and appropriated by users in personal and idiosyncratic ways . We used these principles as guiding design principles for our participatory design process with the inclusion of the principle of computability , which is left implicit in previous work on computational media . With com - putability , we refer to the ability to develop , edit , and execute simple and complex computations on data that exist in the same perceptual space as the code . We used Webstrates and Codestrates to create our prototype . METHOD Our aim was to explore computational media as an alternative vision of software to traditional applications and scripts . To make this actionable , we looked for use cases where com - putation was an integral part of users’ activities , but where users were not employed or trained as a programmer ; activities where using and developing a piece of software blur , and users who work close to the code but did not necessarily author it . We collaborated with a group of biomolecular nanoscientists because they ( a ) do complex knowledge work mediated by digital tools and materials , some of which are developed by lab themselves ; ( b ) are computationally dependent but not trained to be computationally literate ; ( c ) have a history of experimenting with new research tools and processes ; and ( d ) were willing to participate and easy to access . Our research consisted of three core activities over two years : ( 1 ) observations and interviews ; ( 2 ) participatory design of a prototype ; and ( 3 ) in - situ interviews while using the prototype ( see Figure 2 right ) . Participants We collaborated with the Andersen Lab for Biomolecular Design 1 which is part of the Interdisciplinary Nanoscience Center 2 at Aarhus University . The nanoscience center is a consortium of ﬁfteen departments and faculties across two universities , housing twenty - ﬁve research groups . At the time of the study , the lab consisted of one principle investigator ( PI ) , eight postdoctoral researchers ( one remote ) , and four PhD students . All members of the lab except one were involved in the study to different extents . The process overview in Figure 2 to the left shows the participant engagement in the different activities in the project . Observations and Interviews To gain a phenomenological understanding of the work prac - tice of the participants , their use of computational tools , and the socio - technical context of the lab , we took a contextual inquiry - based approach , which totalled ﬁve whole days of observations at the lab and six formal in - context interviews . Before starting our observations , we were introduced to the research group at their weekly meeting . We explained our overall goal and asked for consent to record their work . The participants were introduced to our general research agenda and we demoed previous prototypes of computational media that we had developed . We followed two participants for the 1 https : / / bion . au . dk 2 https : / / inano . au . dk 2019 Activities Project brief and technology demo Observations and interviews Future workshop Prototype iteration # 1 Prototype presentation and design discussion Prototype iteration # 2 Observations and interview Prototype iteration # 3 Remote videocall prototype demo Prototype testing and contextual interviews In - situ interviews w / prototype # 4 2017 2018 People involved : participants ( 0 – 11 ) & researchers ( I – IV ) 1 2 3 4 5 6 7 8 91011I II III IV Initial design meeting Prototype iteration # 4 0 Figure 2 . Overview of researcher ( orange ) and participant ( green ) en - gagement in the research process . entire duration of a particular experimental phase — each last - ing between a day and a day and a half — and opportunistically observed and interviewed the other members of the lab when appropriate . During the experiments we tried to get a general understanding of the participants’ work practice and asked them to walk us through the different steps of their experi - mental process , why they were doing it in the way they were , what problems they run into while doing their work , and what they would like to see changed . In particular , we asked them to report on the variety of computational tools they used and how they worked together . During the formal interviews , we used the critical incident technique [ 12 ] to ask the participants about recent or memorable technology breakdowns . The data collected in this phase included ﬁeld notes , photos , videos of participants interacting with equipment and software , and audio recordings of interviews and workshops . The interviews were transcribed pure verbatim . Participatory Design of a Possible Future Prototype To help the participants reﬂect on how computational me - dia might or might not be useful for their work practice , we wanted to establish a possible future [ 39 ] , that is , use prototype development to co - create a future vision of a computational laboratory notebook “empirically researchable in the present world” [ 39 ] . The aim of this participatory design process was to encourage the participants to iteratively reﬂect on their cur - rent computational practice , crystallize ideas into prototypes , and give them hands - on experience with a possible future lab notebook . The participatory design process started with a full - day work - shop that focused on collectively imagining the future of digi - tally supported biomolecular nanoscience . We presented the empirical data we had collected and asked the participants to conﬁrm and expand on our observations . Grounded in these accounts , the participants wrote detailed scenarios of one par - ticular , common activity of their work practice . They were asked to bring up the different digital and analog materials they used , the breakdowns that occurred , and the workarounds they employed to deal with them . We picked two of these scenarios and ideated in two groups on how the scenario could be better supported digitally in the future . We chose one of these two ideas to design and develop into a prototype . The idea was chosen based on its level of signiﬁcance to their research , and its technical feasibility to implement . We focused on the ﬁrst part of their experimental workﬂow , which is the design phase of RNA structures . We conducted four meetings with researchers of the laboratory and a collabo - rator in the US to iteratively design and develop the prototype . Using previously conducted ﬁeldwork as a basis , we imple - mented the initial iteration of our prototype . It featured rudi - mentary functions like the displaying of a 3D representation of an RNA molecule or a drawing canvas for sketches . We used this ﬁrst iteration as a way to communicate our ideas during the ﬁrst meeting with two researchers of the lab . This meeting was used to get an initial reaction towards our idea of computational media and to clarify the exact steps of the workﬂow of one of the researchers . After developing the structure of our prototype , during a sec - ond meeting , one of the researchers showcased how the tools and scripts are used in practice . This showcase was followed by a discussion on how and with what features the researcher could imagine this workﬂow using a computational medium . The third iteration of the prototype , which implemented var - ious scripts and tools the researchers use , was discussed in a meeting with three researchers of the lab , two of whom were introduced to the prototype for the ﬁrst time during that meeting . After a brief introduction to the prototype , all three researchers used it with one of the molecule designs they were working with at the time . Based on the feedback and ideas of the three participating researchers , the prototype was iterated another time . The fourth prototype was used as the basis for the in - situ interviews described below . In - situ Interviews While Using the Prototype We conducted in - situ semi - structured interviews with three participants while they used the prototype to design a new RNA structure . We chose these three participants because they , at the time of the study , had concrete work they needed to do which the prototype was speciﬁcally designed to support . The three independent sessions with the participants started with us giving them an introduction to the goals of the project and the process so far , a brief mention of the history of these types of software tools , and a few words on what HCI research is . We introduced the participants to the four principles that the prototype was built upon : shareability , malleability , dis - tributability , and computability . We did this to allow them to reﬂect on these , and for them to have a vocabulary to talk about the prototype with . After the introduction , which lasted between 15 and 20 minutes , they received an in - depth demon - stration of how the prototype worked . We began the interviews by asking the participants to design an RNA structure using the prototype . The prototype was used as a springboard [ 10 ] into a discussion of their computational work , their thoughts on the four principles , and a general re - ﬂection on computational media in relation to their work . The interviews dealt with their general software problems , further explaining and discussions of the inner workings of the proto - type , and even co - debugging their pre - existing scripts that had been imported into the notebook prototype . The interviews were guided by a number of questions we had prepared , e . g . , “When was the last time you tweaked a script ? ” or “Do you have any shared documents or resources in the lab ? ” . The interviews lasted 82 minutes , 57 minutes , and 90 minutes , respectively . All authors coded them independently ( open coding ) , focusing on statements related to the four principles of computational media . We collected the codes and examples on a whiteboard and discussed how to arrange them in themes over three meetings . FINDINGS The ﬁndings are structured as follows : ﬁrst , we give an overview of the nanoscience laboratory and explain the work and environment of the participants . Second , we describe three deﬁning computational characteristics of biomolecular nanoscience that affect the participants . Lastly , we present the design of our computational labbook prototype and how it relates to the participants’ work practice and computational challenges . The ﬁndings are presented in an anachronistic order . The computational characteristics we describe came out of co - reﬂecting with the participants while using the prototype for a realistic work task . However , we present these insights before we describe the prototype’s design , because we believe this makes it easier for the reader to understand and appreciate what challenges the prototype tries to address . Overview of the Lab Nanoscience is the study and application of materials and struc - tures on the nanoscale , a transdisciplinary research category that can be found in ﬁelds such as chemistry , biology , physics , engineering , and material science . The research group under discussion here is one of the world’s leading molecular biol - ogy labs specialising in the origami method : a way of creating molecular structures using DNA , RNA and proteins as build - ing blocks which can assemble themselves into non - arbitrary shapes . This allows researchers to create “nanorobots” ; struc - tures that can perform pre - programmed tasks such as turn into a smiley , act as biosensors , or ( hopefully in the future ) deliver drugs to speciﬁc parts of the body . Figure 3 . A lab bench in one of the main laboratories . The experimental process of this area of research can be roughly divided into two parts : the “dry” part , which includes the open - ended and creative design of new structures ; and the “wet” part , which includes creating those structures in the lab and performing experiments on it to see how it behaves . For the wet work , each of the researchers in this group has their own assigned workbench in the laboratory ( see Figure 3 ) . The lab is crowded with scientiﬁc instruments they use for their experiments ( e . g . , vortex centrifuges , electroporators , non - confocal laser scanners ) . Because they work with genetic material , they have to be careful not to accidentally contam - inate their samples . They wear latex gloves in the lab , and there are strict rules about “glove - on” and “glove - off” equip - ment . They also limit the number of things entering or leaving the lab as much as possible to protect the environment , and anything brought from the outside is only allowed to be placed in speciﬁc taped off sections on the lab bench . The dry work is predominately done at a desk in the ofﬁce . Over the years , each researcher has accrued an ecosystem of computational tools they feel most comfortable with . Some of them have invested signiﬁcant time designing their ideal software environment , with scripts to automate parts of their tasks , sophisticated Excel spreadsheets , and carefully chosen commercial and open - source web and desktop applications . Some of the researchers are provided with a laptop by the department , others simply bring their own device . Because of the restriction on moving things into and out of the lab , to use a computer in the lab means sacriﬁcing that computer to that space , resulting in some of the researchers having one high - quality device for their ofﬁce work and a second “disposable” laptop for the laboratory . All team members are also supplied with Apple iPads as part of the PI’s efforts to digitise the lab and experiment with new ways of working . There are two computational tools that are absolutely fun - damental for the lab , the knowledge it creates , and the way they organise their work . The ﬁrst is their ELN : a wiki - based collaborative software called Conﬂuence . The notebook is the linchpin of the natural sciences , used to plan experiments , record research results , and document analyses . It plays an important part in ensuring scientiﬁc integrity and settling in - tellectual property disputes . The Conﬂuence ELN — a digital remediation of the traditional paper notebook — started as a grassroots project in this group , but was later picked up by the university administration and is now used by most of the labs . Each member of the group has their own webpage on the ELN , which they use to plan and report their experiments , present results during weekly meetings , hand over projects between researchers , and onboard new lab members . The sec - ond crucial computational tool is their repository of in - house developed Perl and Python scripts , which the researchers use to compute RNA structures , generate 3D visuals , and reformat outputs to be more readable . These scripts were written by one particular postdoc who taught himself how to program , and they are used in good faith by other lab members who have fewer or no programming background . Without these scripts , the lab would not be able to do RNA origami research , since this is a frontier of science that is still being invented . Computational Characteristics We identiﬁed three characteristics of computational biomolec - ular nanoscience that shape how participants structure their work , their psycho - social working conditions , and scientiﬁc knowledge they produce related to their computational tools . Computational Culture Biomolecular nanoscientists have a distinct relationship with computers and computation compared to other , related scien - tiﬁc ﬁelds . Reﬂecting on the tools they use , P3 remarked : Our lab is derived from molecular biology , so our meth - ods are also from that ﬁeld . We use “black box” machines a lot , where you put in your sample and just press start and you get your data . Physicists [ on the other hand ] like to have their own equipment they can tinker with . ( P3 ) The sophistication of those “black box” machines — whether hardware or software — differs quite signiﬁcantly depending on the particular research questions the scientist focuses on . If the area of study is well established , so is the computational support . But going beyond the frontier of an established type of research means stepping into a tabula rasa of software . P10 , for example , was confronted with this jarring difference when switching from analysing RNA structures in their previous job to designing them when they joined the current lab : We didn’t execute a whole bunch of codes in our previous lab . I was more using pretty well established software with a nice - ish GUI [ . . . ] I was still doing RNA work , but I wasn’t doing any design of RNA sequence or anything like that . So depending on the research you’ll have either really well supported workﬂows . . . or nothing . . . or homebrew scripts . ( P10 ) Switching research focus , then , also means a shift in the kind of computational competencies required of the researcher . For the ground - breaking RNA origami that this lab does , there are no well - established tools available . The lab members have to cobble together scripts in different languages , some of which are built in - house and others they found online . When asked if they could do this kind of research without those scripts , P11 answered : No , no I couldn’t do it . [ . . . ] I could do other kinds of science , but this is what is giving us like , a lot of chances to create new structures . [ . . . ] I see sometimes other people designing RNAs manually in some papers . . . that’s crazy . Sequence design manually ? Do you know how crazy that is ? ( P11 ) The friction comes from the fact that the software skills neces - sary to understand , run , and debug those scripts are not ( yet ) part of the formal education leading up to this kind of research , nor is it considered part of the professional culture to pick them up . Biomolecular nanoscientists with the computational literacy to produce or modify scripts are “pretty rare” ( P10 ) and learning how to program is considered “a whole other ca - reer” ( P11 ) rather than an integral part of their job . As a result , the development and maintenance of the computational tools vital to the participants’ research rests on the very precarious foundation of a once - in - a - blue - moon computationally literate graduate student , postdoc , or research assistant . In summary , the computational culture of biomolecular nanoscience is one where there is a dependency on compu - tational tools to do the work , but not a tradition of training scientists in the development , deployment , and maintenance of them . This is ﬁne when doing established research using GUI software , but becomes very restricting when working on a frontier of science where the tools have to be invented . There is an incongruous need for the ﬂexibility of scripts that allows researchers to invent new methods , but the usability and convenience of applications . A computational medium would have to address this gap between ﬂexibility and usability . Computational Environment The biggest challenge for the nanoscientists was not a lack of coding skills , but having to manage the computational en - vironments in which to execute code . Because there are few computational tools that support their work , the participants use any software — whether an open source system published on GitHub or a script sent by a colleague from a different lab — regardless of language , dependencies , or quality of doc - umentation . Installing , maintaining , and debugging the various environments that these tools rely on , however , has proven to be categorically prohibitive . Issues include terminal com - mands that change across operating systems , having to set up virtual environments to run scripts , ﬁxing corrupted installa - tions of language interpreters , etc . The consequences of these challenges are that they work with partial outputs , accept bottlenecks , and even abandon certain research approaches . For example , P8 explains how they had to give up on a popular tool because they could not get it to work in Windows . I was trying to get this software that everyone was using [ . . . ] and I couldn’t get it to work [ . . . ] Probably because it’s for like Linux and my Windows just didn’t . . . so I had to either do a virtual machine , get Linux , and do it from there . . . but then I just gave up . ( P8 ) P11 tried to run a script given to them by a collaborator but could not get it to work 3 . In the end , P11 simply sent the data and asked the collaborated to run the script on it and email back the result . We are trying to build this new structure , a triangle that is a bit weird . So what I do is , I try to design the pattern that I think is going to fold the way we expect and then I send it to him and he runs it , and he’s like “no” . ( P11 ) In summary , using computational tools requires an understand - ing of the entire software stack , but this kind of information is often assumed in documentation and few online tutorials focus on such obscure dependency management . A com - putational medium should break the tight coupling between hardware and computational environments , and instead merge the computational environment with the code . This would allow the code / environment artefact to be self - contained and easily shared regardless of the underlying platform . Computational Disempowerment Paradoxically , the very tools that provide the scientists with the ability to push the boundaries of RNA origami also created a psycho - social working environment where they frequently felt disempowered . Participants were vocal about how their tools made them feel helpless , but mostly placed the blame on their own perceived lack of skills rather than the design of the technology . So now I’m following this tutorial on how to use this other script and it doesn’t work and that’s it . I have no idea what to do . I don’t understand how it works , at all . ( P11 ) When a script reports an error , it is in the form of error codes or snippets of a foreign programming language . Errors in the molecular structure that make it impossible to be created are expressed as software errors and have to be somehow deciphered back into the realm of molecular biology . This is one of my points of frustration . Because I have no idea what that [ highlights terminal error ] means [ . . . ] I have tried to to look at the script . And that’s about as far as I got . Because this means nothing to me . So if I go to line 2856 . . . 2856 is . . . print oped spool , okay yeah that’s what’s there [ laughs ] . ( P10 ) In fortunate situations , a more capable peer can assist , as when P11 explained how they would send data to a remote collaborator to run a script that would not work on their own computer . However , this is a fragile workaround as P11’s work became dependent on the collaborator’s time and goodwill . Sometimes it is obvious that there are more efﬁcient ways to go about a problem , but time and skill prohibit doing something about it . I think this is one of those things where it’s deﬁnitely not the most efﬁcient way of doing this , but it’d take me longer to ﬁnd a more efﬁcient way . ( P10 ) 3 We helped ﬁx the issue during the interview : the script would overwrite the original source ﬁle instead of creating a new ﬁle . Figure 4 . Screenshot of the computational labbook . The center shows the sections and paragraphs of the document ; on the right side the In - strument Panel allows users to drag instruments into the document . P8 explains how one of the scripts requires not having dupli - cates of the same sequences , but is a bit uncertain whether it is a biological or software limitation . RNA wise it makes sense . But for some of these it doesn’t . . . I kind of like having duplicates . P8 Even though P8 would like to be able to change the script they don’t , instead they “hack the structure a bit” ( P8 ) . The new computational possibilities are a blessing and a curse . They enable scientiﬁc breakthroughs that were previously in - conceivable , but also create a dependence on machinery that the scientists are not trained to operate . When breakdowns happen — and they happen often — the scientists are largely left to their own fate , to much frustration . The Computational Labbook Prototype We produced a prototype through which to co - reﬂect with par - ticipants on their current and imagined future computational tools and activities . The ﬁndings presented above largely came from the co - creation of the prototype and its subsequent role as an artefact to talk about their current challenges and possible futures . In this section , we will describe the particular task that this prototype was developed for , how it implements the computational media principles suggested by previous work , and how its design addresses some of the three challenges faced by the scientists mentioned in the previous section . Supporting the Designing of Macromolecules Our prototype of a computational labbook 4 is designed to support the design of RNA nanostructures , also referred to by the scientists as the “dry” part of the experimental process . This phase typically consists of some variation of these steps : 1 . Producing a 2D textual representation of the target macro - molecule , often by adapting an existing structure ( from previous work or another lab member ) with a molecule that folds in a desired way . 4 See the accompanying video for an overview of the prototype . 2 . Checking whether the structure is physically capable of folding in the desired way by creating a 3D representation of it and looking for ﬂaws . 3 . Computing possible genetic sequences that might fold into the desired macromolecular structure and ranking them by viability . 4 . Turning the 2D textual representation into a string - based representation that can then be send to a commercial com - pany when ordering . Step two and three are largely interchangeable , and at least one researcher does not create a 3D representation at all . The “dry” part is then followed by the “wet” part in which researchers assemble , analyse , and validate their work in the lab space . Redesigning the Task as a Computational Notebook Besides providing functionality typically associated with ELNs , such as text editing and image uploading in a document , the computational labbook prototype lets the user add various computational instruments to the document by dragging and dropping from an instrument panel ( see Figure 4 ) . The prototype addresses the steps of the dry phase in the fol - lowing ways : To design a new structure ( step 1 ) , the scientist can create a new document and drag in an ASCII - based Pattern Editor instrument for the textual representation of the RNA structure . To preview the structure ( step 2 ) , a PDB 5 Viewer instrument can be added , which generates an interactive 3D visualization of the structure in the document . Now , the Batch Revolvr instrument can be added to compute multiple can - didates of molecules ( step 3 ) for a speciﬁc pattern scaffold by — broadly speaking — repetitively ﬁlling the scaffold and computing its energy properties . This is necessary as it is not feasible for researchers to try out every possible combination of nucleobases 6 in their scaffolds which can contain hundreds of nucleobases . The resulting candidates can then be used for further analysis in other external tools . As the computation of candidates is computationally heavy , it is ofﬂoaded to a server which — once ﬁnished — sends the results back to the document . The ability to ofﬂoad heavy computation to a fast central server was ( unsurprisingly ) something that was well received by the participants . It works pretty well ! [ laughs ] This is so fast . This is really good . ( P8 ) Other instruments can be added to perform analyses on the structure , to perform various sequence operations ( step 4 ) such as converting from RNA to DNA or reversing a sequence , or to give access to a shared repository of molecule designs . Having the repository is nice because it’s just click and drag and not a text document , stuff like that . But having it shared is also nice because you can make sure people are using the same motifs , like this mango one [ a particular structure ] has been through like ﬁve iterations . ( P10 ) 5 The Protein Data Bank ﬁle format . 6 Put simply , nucleobases are the four fundamental building blocks of DNA / RNA molecules . Multiple designs can be made in a document , and the computa - tional instruments can be interleaved with written text , images , and even hand - drawn sketches if the notebook is opened on a tablet with a stylus . The uniﬁcation of the different tools and scripts in one document was particularly highlighted by the participants . [ whispers ] Oh this is really convenient . . . usually I would have to like go in . . . make the modiﬁcation , save the ﬁle , run the script on the terminal , wait for it to gen - erate the ﬁle , then click that . ( P8 ) It would be nice to have the whole . . . everything from trace analysis to Revolvr all on there . I think it would be nice to do . . . because it’s all amalgamated into one lo - cation . And it’s a well documented workﬂow rather than having . . . [ clicks and shows folders of ﬁles ] this . ( P11 ) Using and discussing the prototype also spawned new ideas , e . g . , the ability to chain the output of one script to the execution of another . This is pretty fast ! Except you don’t get the summary , I would love to get these results but run another script on it . ( P8 ) Adherence to the Principles of Computational Media The prototype was developed to embody the four principles of computational media : shareability , distributability , malleabil - ity , and computability . We realised these principles partly by leveraging existing features of Webstrates and Codestrates and extending them with new ones . Table 1 gives an overview over how the prototype practically implements these principles through speciﬁc functionality . The principles are realised in the following manner : Note - books are shareable as they are accessed through their URLs , they can be copied , and they support real - time collaborative editing and interaction . Nanostructures can be shared between notebooks through a repository . Also , functionality can be shared between notebooks using its built - in packaging system from Codestrates . While the participants didn’t collaborate closely on a day - to - day basis , they reﬂected on how the share - ability could help in knowledge sharing . I think this is just so much nicer , just from an organisa - tional point of view . Like if he’s working on these designs , instead of just sending me the text ﬁles and then I have to organise that in my own computer and yada yada , I can just look at his labbook and see the output , and see what he’s done . ( P10 ) The prototype is web - based and can be accessed from any device with a web browser , and as a result it is distributable across a variety of devices ( e . g . , desktop computers , laptops , tablet , and phones ) and operating systems ( e . g . , Windows , ma - cOS , Android , and iOS ) . It supports distribution of interaction where , for example , the PDB Viewer can be shown on a tablet while the structure is edited on a laptop . Also , it supports distribution of computation . While the beneﬁts of distributing computation was obvious to the participants , it was harder for them to imagine how to leverage distribution of interaction across devices in their day - to - day work . Distributability – Documents accessible on any device with browser – Distribution of notebook paragraphs to other devices – Off - loading script execution to server Shareability – Real - time synchronisation of document changes – Package system for sharing tools – Repository of molecule structures – Easy sharing through URLs – Copying and branching of documents / templates Malleability – All code is accessible and changeable from within – Version control as safeguard – Custom scripts Computability – Scripts , data , and output in the same document – No setup of computational environment required – Execute code in multiple programming languages Table 1 . Overview of how the computational labbook prototype realises the four principles of computational media . The prototype supports computability as computations can be executed directly in the documents of the labbook without any setup , and it supports the execution of multiple programming languages . Compared to a conventional computational note - book , the prototype does not have code front - and - center . The code for the computational instruments can be accessed and modiﬁed from within the notebook , including the Perl and Python scripts developed in the lab . The built - in versioning support in Webstrates enables to revert to a working state if the notebook breaks . The notebook includes an instrument for creating custom scripts in Python , two dialects of Perl , Ruby , or Node . js JavaScript . The execution of the custom scripts is ofﬂoaded to a server . Hereby , the notebook supports malleability . Technical Foundation The prototype is realized using Webstrates [ 23 ] and its au - thoring environment , Codestrates [ 35 ] . Webstrates [ 23 ] is a platform for creating computational media that follows a document - centric approach to software . Documents in Web - strates are identiﬁed by their URL and can also be shared using it . Every document is self - contained and includes the source code of its own implementation . In Webstrates , changes to the document are made persistent on a server and synchro - nized to all other clients with the same document open , this includes changes to embedded scripts . The user interface of the labbook prototype is an adaptation of the Codestrates user interface following the same document - centric structure of sec - tions and paragraphs , where paragraphs can be textual , data , executable code , or user interface elements . Functionality can be dynamically added and removed from a from a document using Codestrates’ package manager [ 4 ] . Each computational instrument is implemented as a package , which means that it is possible to conﬁgure a notebook with a speciﬁc selection of instruments , and also extend it with new ones . The Codestrates platform supports the execution of JavaScript code directly in the document . The scripts of the nanoscience lab , however , are mainly implemented in Perl and Python . To be able to execute these scripts as well , we extended the Code - strates platform to make use of an experimental distributed computing platform for Webstrates . The latter uses Docker [ 8 ] containers on a dedicated server to run scripts of arbitrary programming languages in a sandboxed environment . DISCUSSION The design of the tools used by researchers play an important epistemological role in shaping what knowledge can be cre - ated . In his book Changing Minds [ 7 ] , diSessa explains how the invention of modern algebra at the close of the 16th century suddenly made it possible for secondary school level students to grapple with mathematical proofs that were previously only accessible to university - educated mathematicians . A parallel can be seen in the tools for the origami method in biomolecular nanoscience : modeling nanostructures was initially done by hand , but this limited the research to only small , manageable sequences . For DNA origami , a group of researchers released a software packaged called caDNAno that provided a graphi - cal user interface for designing 3D nanostructures [ 9 ] . All of a sudden , this branch of research became more accessible and more popular , to the point that “undergrad students can now even build these types of structures” ( P3 ) . For RNA origami , which the researchers in this study focus on , the tools are in - house developed scripts that compute suggestions of RNA structures . Because the script was designed to process the inputs sequentially , when it gets stuck in an inﬁnite loop on a particular structure , all possible nanostructures that might have been “discovered” afterwards are rendered scientiﬁcally impossible . Our ﬁndings highlight the dichotomy between computational tools designed as scripts and applications . Software as a script provides the nanoscientists with great expressiveness and ﬂex - ibility to do research on the frontier of their discipline , but becomes unapproachable because of the competences required to create , execute , and maintain it . Software as an application is more accessible because it requires less computational liter - acy , but they provide only turn - key operations that calcify a particular scientiﬁc praxis and the types of research that can be done . We could teach all scientists to also be software engi - neers so they could make their own tools , or we could provide all labs with professional programmers to create user - friendly applications . These are both commendable , albeit unrealistic paths . A scaleable solution is to develop a software model that straddles the divide of the dichotomy . This means questioning the application paradigm of the last 50 years and reinvigorate the efforts in creating computational media . What design should computational media have ? With our prototype , we applied four design principles derived from Klokmose et al . [ 23 ] and Rädle et al . [ 35 ] as a starting point : distributability , shareability , malleability , and computability . The rest of our discussion is structured around these principles , their relevance for the context of biomolecular nanoscience , and their limitations . Distributability Based on our observations and interviews , we can extend the concept of distributability for computational media by divid - ing it into three : distribution of documents , functionality , and computation . The distribution of documents is important be - cause the participants need easy access across devices ( laptop , desktop , tablet , phone ) and spaces ( ofﬁce , home , laboratory , conferences ) . This need is already well - integrated into th men - tal model of the researchers , and facilitated by ﬁle - sharing platforms and the Conﬂuence system . The distribution of func - tionality refers to the orchestration of operations across de - vices . Currently , operations are bundled in applications which means that each device needs to install the same application for functionality to be distributed ( i . e . , to access spreadsheets stored in the cloud , every device needs to install a spreadsheet application ) . However , the participants did not engage in any multi - device activities ( e . g . , using the PDB Viewer on a tablet while using the Pattern Editor on a desktop computer ) despite being provided with extra tablets by the lab . Previous research shows that — even if it is beneﬁcial to use multiple devices to perform a task — users tend to use only one or at most two devices at a time [ 34 ] . Distribution of computation was something that made an immediate positive impact and was wholeheartedly embraced by the participants . Being able to ofﬂoad heavy computations to a remote server was a crucial improvement over their current workﬂow , and is also a core focal point of many e - Science efforts . This , however , also necessitates server infrastructure that needs to be set up , be secure , should be scalable to a large number of users , and needs to be maintained . Shareability The participants work independently most of the time , so they did not see the need for real - time collaboration on a day - to - day basis . Instead , what the participants needed to be shareable was self - contained , computational environments . The difﬁ - culties they experienced trying to run scripts across devices make sharing their tools and results a huge hassle , either when when calling in the help of a more capable peer to debug an error , collaborating with a remote colleague , or networking at a conference . The problem of the tight coupling between computational environments and the hardware it runs on was similarly highlighted by Guo and Engler [ 14 ] . They built the CDE system , which combines code , data , and environemnt into software packages that could be transferred seamlessly be - tween Linux machines . Our prototype facilitates shareability by storing and running documents / environments on a server that are accessed through URLs , which is a conceptual switch from the traditional pass - by - value of sharing to a pass - by - reference model . Beyond this , however , the prototype does not implement any functionality that supports collaboration . Research into groupware ( see [ 13 ] for a historical overview ) shows that when multiple people can access a document , ques - tions such as “Who did that ? ” or “What happened since I was here last ? ” become pertinent [ 15 ] . We see additional chal - lenges when the document is computational , with questions such as “Is something computing ? ” or “What computation is this a result of ? ” . These need to be addressed in future designs , especially for scientiﬁc contexts where provenance of data and computation are important to attribute authorship and settle intellectual property disputes . Malleability The kind of software malleability we observed was not a con - stant low - level tinkering with the code . Rather , it was simi - lar to the malleability of a house , where adjustments can be made when needed , but which are often outsourced to skilled workers often such as carpenters and plumbers . As such , the concept of malleability needs to take a more collective view of software transformation , especially when the computational media targets users who are not trained programmers but rely on more capable peers . We implemented this by leveraging the package system of the Codestrates platform , which makes the medium extensible through packages authored by others . This allows users with limited technical skills to mold their environment , while retaining easy access to the code should it be needed . There is also the question of whether malleability is actually desirable , especially in the context of laboratory notebooks . While this did not come up explicitly in our process , Oleksik et al . [ 31 ] document how the ease with which ELNs are edited clashes with the “requirements for persistence and consistency of scientiﬁc records” and makes collaborating with others more difﬁcult because document structures are no longer stan - dardised . They suggest such systems could implement “ﬁxity” to address the ﬁrst concern : features that allow users to freeze certain states of a document so it can be authentically repli - cated . To facilitate collaboration , they recommend adding functionality that can deal with multi - structured data , such as text mining , natural language processing , and scheme integra - tion . Computability Because the participants operate in a space where there is no established software ecosystem , they opportunistically use scripts from different sources , written in multiple lan - guages . Therefore , supporting computability in a computa - tional medium should not just be about the ability to execute code , but should also allow the agnostic mixing of multiple programming languages in the same space . Our prototype distributed code execution to containers on a remote server , which makes it in principle possible to run any code . However , this simply moves dependency management to a device out of the control of the user , which does not scale very well without requiring the help of experts to maintain those execution en - vironments . With multiple , heterogeneous components also comes the need for piping the output of one into another — something participants requested . While our current prototype does not support this , we have developed reactive data - ﬂow pipeline mechanisms using Codestrates elsewhere [ 2 ] . Ideally , the day - to - day access to a medium that supports com - putability will improve the computational literacy of its users over time . There is evidence that this happened in the early days of the web through sites such as Myspace and Neopets . These social media helped users pick up HTML and CSS skills simply because the code was accessible and could be tinkered with [ 33 ] . Whether such learning - through - exposure extends to imperative languages such as JavaScript , Python , or Perl is unknown to us . What we do know is that creating the type of interactive components that we have developed for the prototype requires being able to read and write asyn - chronous event - based code , which is difﬁcult to pick up by simply stumbling into an existing codebase . CONCLUSION The tools used in research shape the science and the scientist , guiding what knowledge can be created and which compe - tences are required to create it . In this paper , we explored the scripts and applications used in biomolecular nanoscience , and the concept of computational media as an alternative soft - ware model that sits in between them . We discussed how the computational culture of biomolecular nanoscience creates a dependency on digital tools , but does not have a tradition of training the scientists in developing , deploying , and main - taining them . We showed how , contrary to what most policy around the digitalisation of science focuses on , the nanosci - entists do not need help with learning how to code , but with managing the computational environments required to execute that code . As a result , the tools that make their research possi - ble also are a source of feeling computational disempowerment on a daily basis . Computational media — systems where users can author and execute code in the same perceptual space as other multimedia content — could provide biomolecular nanoscientists with the ﬂexibility of scripts together with the accessibility of appli - cations . During a two - year participatory design process with the Andersen Lab at the Aarhus University iNANO Center , we built a computational labbook prototype to explore this potential . We used the prototype to critically evaluated four design principles for computational media suggested by pre - vious research : distributability , shareability , malleability , and computability . We ﬁnd that distributing functionality across devices is not particularly relevant , but distributing ( heavy ) computation is crucial ; that being able to share self - contained execution environments could play a small but critical role when collaborating and debugging code with more capable peers ; that malleability is a collective rather than individual need ; and that computability should support the execution and coupling of multiple programming languages . For the past 35 years , applications have been the dominant model for software . But the emergence and popularity of code - centric computational notebooks ( e . g . , Jupyter ) and no - code computational documents ( e . g . , Notion ) are exciting hints of a changing paradigm . Without a dominant design in place , what these computational media will look like is still an open challenge . Although our study is rooted in a very particular context , we hope it inspires a larger discussion around the paradigm shifting potential of this type of software . ACKNOWLEDGEMENTS We would like to express our gratitude to the participating researchers from the Andersen Lab , in particular to Ebbe Sloth Andersen , and to the Interdisciplinary Nanoscience Center at Aarhus University . This work was funded by Aarhus Univer - sitets Forskningsfond and Carlsbergfondet . REFERENCES [ 1 ] Atlassian Conﬂuence . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / atlassian . com / confluence [ 2 ] Sriram Karthik Badam , Andreas Mathisen , Roman Rädle , Clemens N . Klokmose , and Niklas Elmqvist . 2018 . Vistrates : A Component Model for Ubiquitous Analytics . IEEE Transactions on Visualization and Computer Graphics ( 2018 ) . DOI : http : / / dx . doi . org / 10 . 1109 / TVCG . 2018 . 2865144 [ 3 ] BIOVIA . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / 3dsbiovia . com [ 4 ] Marcel Borowski , Roman Rädle , and Clemens N . Klokmose . 2018 . Codestrate Packages : An Alternative to “One - Size - Fits - All” Software . CHI EA ’18 Proceedings of the 2018 CHI Conference Extended Abstracts on Human Factors in Computing Systems ( 2018 ) . DOI : http : / / dx . doi . org / 10 . 1145 / 3170427 . 3188563 [ 5 ] Coda . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / coda . io [ 6 ] Andrea diSessa and Hal Abelson . 1986 . Boxer : A Reconstructible Computational Medium . Commun . ACM 29 , 9 ( Sept . 1986 ) , 859 – 868 . DOI : http : / / dx . doi . org / 10 . 1145 / 6592 . 6595 [ 7 ] Andrea A . diSessa . 2001 . Changing Minds : Computers , Learning , and Literacy . Mit Press . [ 8 ] Docker . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / docker . com [ 9 ] Shawn M Douglas , Adam H Marblestone , Surat Teerapittayanon , Alejandro Vazquez , George M Church , and William M Shih . 2009 . Rapid prototyping of 3D DNA - origami shapes with caDNAno . Nucleic acids research 37 , 15 ( 2009 ) , 5001 – 5006 . DOI : http : / / dx . doi . org / 10 . 1093 / nar / gkp436 [ 10 ] Yrjö Engeström . 2015 . Learning by Expanding . Cambridge University Press . [ 11 ] Georgios John Fakas , Anh Vu Nguyen , and Denis Gillet . 2005 . The Electronic Laboratory Journal : A Collaborative and Cooperative Learning Environment for Web - Based Experimentation . Computer Supported Cooperative Work ( CSCW ) 14 , 3 ( 2005 ) , 189 – 216 . DOI : http : / / dx . doi . org / 10 . 1007 / s10606 - 005 - 3272 - 3 [ 12 ] John C . Flanagan . 1954 . The Critical Incident Technique . Psychological bulletin 51 , 4 ( 1954 ) , 327 . DOI : http : / / dx . doi . org / 10 . 1037 / h0061470 [ 13 ] Jonathan Grudin . 1995 . Groupware and Social Dynamics : Eight Challenges for Developers . In Readings in Human – Computer Interaction . Elsevier , 762 – 774 . DOI : http : / / dx . doi . org / 10 . 1016 / B978 - 0 - 08 - 051574 - 8 . 50079 - 0 [ 14 ] Philip J . Guo and Dawson Engler . 2011 . CDE : Using System Call Interposition to Automatically Create Portable Software Packages . USENIXATC’11 Proceedings of the 2011 USENIX conference on USENIX annual technical conference ( 2011 ) , 21 . https : / / dl . acm . org / citation . cfm ? id = 2002202 [ 15 ] Carl Gutwin and Saul Greenberg . 2002 . A Descriptive Framework of Workspace Awareness for Real - Time Groupware . Computer Supported Cooperative Work ( CSCW ) 11 , 3 - 4 ( 2002 ) , 411 – 446 . DOI : http : / / dx . doi . org / 10 . 1023 / A : 1021271517844 [ 16 ] Andrew Harrison , Ian Harvey , Andrew Jones , David Rogers , and Ian Taylor . 2011 . Object Reuse and Exchange for Publishing and Sharing Workﬂows . In Proceedings of the 6th Workshop on Workﬂows in Support of Large - Scale Science ( WORKS ’11 ) . Association for Computing Machinery , New York , NY , USA , 67 – 76 . DOI : http : / / dx . doi . org / 10 . 1145 / 2110497 . 2110506 [ 17 ] Andrew Head , Fred Hohman , Titus Barik , Steven M . Drucker , and Robert DeLine . 2019 . Managing Messes in Computational Notebooks . In Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems . ACM , 270 . DOI : http : / / dx . doi . org / 10 . 1145 / 3290605 . 3300500 [ 18 ] Chris Holdgraf , Aaron Culich , Ariel Rokem , Fatma Deniz , Maryana Alegro , and Dani Ushizima . 2017 . Portable Learning Environments for Hands - On Computational Instruction : Using Container - and Cloud - Based Technology to Teach Data Science . In Proceedings of the Practice and Experience in Advanced Research Computing 2017 on Sustainability , Success and Impact ( PEARC17 ) . Association for Computing Machinery , New York , NY , USA , Article Article 32 , 9 pages . DOI : http : / / dx . doi . org / 10 . 1145 / 3093338 . 3093370 [ 19 ] Juypter Notebook . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / jupyter . org [ 20 ] Alan C . Kay . 1972 . A Personal Computer for Children of All Ages . In Proceedings of the ACM Annual Conference - Volume 1 ( ACM ’72 ) . Association for Computing Machinery , New York , NY , USA , Article Article 1 , 11 pages . DOI : http : / / dx . doi . org / 10 . 1145 / 800193 . 1971922 [ 21 ] Mary Beth Kery and Brad A . Myers . 2018 . Interactions for Untangling Messy History in a Computational Notebook . In 2018 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) . IEEE , 147 – 155 . DOI : http : / / dx . doi . org / 10 . 1109 / VLHCC . 2018 . 8506576 [ 22 ] Mary Beth Kery , Marissa Radensky , Mahima Arya , Bonnie E . John , and Brad A . Myers . 2018 . The Story in the Notebook : Exploratory Data Science using a Literate Programming Tool . In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems . ACM , 174 . DOI : http : / / dx . doi . org / 10 . 1145 / 3173574 . 3173748 [ 23 ] Clemens N . Klokmose , James R . Eagan , Siemen Baader , Wendy E . Mackay , and Michel Beaudouin - Lafon . 2015 . Webstrates : Shareable Dynamic Media . UIST ’15 Proceedings of the 28th Annual ACM Symposium on User Interface Software & Technology ( 2015 ) , 280 – 290 . DOI : http : / / dx . doi . org / 10 . 1145 / 2807442 . 2807446 [ 24 ] Clemens N . Klokmose and Pär - Ola Zander . 2010 . Rethinking Laboratory Notebooks . In Proceedings of COOP 2010 . Springer , 119 – 139 . DOI : http : / / dx . doi . org / 10 . 1007 / 978 - 1 - 84996 - 211 - 7 _ 8 [ 25 ] Thomas Kluyver , Benjamin Ragan - Kelley , Fernando Pérez , Brian Granger , Matthias Bussonnier , Jonathan Frederic , Kyle Kelley , Jessica Hamrick , Jason Grout , Sylvain Corlay , and others . 2016 . Jupyter Notebooks—a publishing format for reproducible computational workﬂows . In ELPUB . 87 – 90 . DOI : http : / / dx . doi . org / 10 . 3233 / 978 - 1 - 61499 - 649 - 1 - 87 [ 26 ] Labguru . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / labguru . com [ 27 ] Wendy E . Mackay . 2003 . The Missing Link : Integrating Paper and Electronic Documents . In Proceedings of the 15th Conference on L’Interaction Homme - Machine ( IHM ’03 ) . ACM , New York , NY , USA , 1 – 8 . DOI : http : / / dx . doi . org / 10 . 1145 / 1063669 . 1063671 [ 28 ] Notion . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / notion . so [ 29 ] Observable . 2019 . ( 2019 ) . Retrieved September 20 , 2019 from https : / / observablehq . com [ 30 ] Gerard Oleksik , Natasa Milic - Frayling , and Rachel Jones . 2012 . Beyond Data Sharing : Artifact Ecology of a Collaborative Nanophotonics Research Centre . In Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work ( CSCW ’12 ) . Association for Computing Machinery , New York , NY , USA , 1165 – 1174 . DOI : http : / / dx . doi . org / 10 . 1145 / 2145204 . 2145376 [ 31 ] Gerard Oleksik , Natasa Milic - Frayling , and Rachel Jones . 2014 . Study of Electronic Lab Notebook Design and Practices That Emerged in a Collaborative Scientiﬁc Environment . In Proceedings of the 17th ACM Conference on Computer Supported Cooperative Work & Social Computing ( CSCW ’14 ) . Association for Computing Machinery , New York , NY , USA , 120 – 133 . DOI : http : / / dx . doi . org / 10 . 1145 / 2531602 . 2531709 [ 32 ] Fernando Pérez and Brian Granger . 2015 . Project Jupyter : Computational Narratives as the Engine of Collaborative Data Science . ( 2015 ) . Retrieved January 8 , 2020 from https : / / blog . jupyter . org / project - jupyter - computational - narratives - as - the - engine - of - collaborative - data - science - 2b5fb94c3c58 [ 33 ] Dan Perkel . 2008 . Copy and Paste Literacy : Literacy practices in the production of a MySpace proﬁle . In Informal Learning and Digital Media , Kirsten Drotner , Siggaard Jensen , Hans , Schrøder , and Kim Christian ( Eds . ) . Cambridge Scholars Press , Chapter 10 , 203 – 224 . [ 34 ] Thomas Plank , Hans - Christian Jetter , Roman Rädle , Clemens N . Klokmose , Thomas Luger , and Harald Reiterer . 2017 . Is Two Enough ? ! Studying Beneﬁts , Barriers , and Biases of Multi - Tablet Use for Collaborative Visualization . Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems ( 2017 ) . DOI : http : / / dx . doi . org / 10 . 1145 / 3025453 . 3025537 [ 35 ] Roman Rädle , Midas Nouwens , Kristian Antonsen , James R . Eagan , and Clemens N . Klokmose . 2017 . Codestrates : Literate Computing with Webstrates . In Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology ( UIST ’17 ) . ACM , New York , NY , USA , 715 – 725 . DOI : http : / / dx . doi . org / 10 . 1145 / 3126594 . 3126642 [ 36 ] Francois Roubert and Mark Perry . 2013 . Putting the Lab in the Lab Book : Supporting Coordination in Large , Multi - site Research . HCI 2013 - 27th International British Computer Society Human Computer Interaction Conference : The Internet of Things ( 2013 ) . http : / / dl . acm . org / citation . cfm ? id = 2578048 . 2578066 [ 37 ] Adam Rule , Ian Drosos , Aurélien Tabard , and James D . Hollan . 2018a . Aiding Collaborative Reuse of Computational Notebooks with Annotated Cell Folding . Proceedings of the ACM on Human - Computer Interaction 2 , CSCW ( 2018 ) , 150 . DOI : http : / / dx . doi . org / 10 . 1145 / 3274419 [ 38 ] Adam Rule , Aurélien Tabard , and James D . Hollan . 2018b . Exploration and Explanation in Computational Notebooks . In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems . ACM , 32 . DOI : http : / / dx . doi . org / 10 . 1145 / 3173574 . 3173606 [ 39 ] Antti Salovaara , Antti Oulasvirta , and Giulio Jacucci . 2017 . Evaluation of Prototypes and the Problem of Possible Futures . In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems ( CHI ’17 ) . ACM , New York , NY , USA , 2064 – 2077 . DOI : http : / / dx . doi . org / 10 . 1145 / 3025453 . 3025658 [ 40 ] Jenifer L . Skidmore , Matthew J . Sottile , Janice E . Cuny , and Allen D . Malony . 1998 . A Prototype Notebook - based Environment for Computational Tools . In Proceedings of the 1998 ACM / IEEE Conference on Supercomputing ( SC ’98 ) . IEEE Computer Society , Washington , DC , USA , 1 – 15 . http : / / dl . acm . org / citation . cfm ? id = 509058 . 509080 [ 41 ] Spencer Smith . 2018 . Beyond Software Carpentry . In Proceedings of the International Workshop on Software Engineering for Science ( SE4Science ’18 ) . Association for Computing Machinery , New York , NY , USA , 32 – 39 . DOI : http : / / dx . doi . org / 10 . 1145 / 3194747 . 3194749 [ 42 ] Aurélien Tabard , Juan - David Hincapié - Ramos , Morten Esbensen , and Jakob E . Bardram . 2011 . The eLabBench : An Interactive Tabletop System for the Biology Laboratory . In Proceedings of the ACM International Conference on Interactive Tabletops and Surfaces ( ITS ’11 ) . ACM , New York , NY , USA , 202 – 211 . DOI : http : / / dx . doi . org / 10 . 1145 / 2076354 . 2076391 [ 43 ] Tara Talbott , Michael Peterson , Jens Schwidder , and James D . Myers . 2005 . Adapting the Electronic Laboratory Notebook for the Semantic Era . In Proceedings of the 2005 International Symposium on Collaborative Technologies and Systems , 2005 . 136 – 143 . DOI : http : / / dx . doi . org / 10 . 1109 / ISCST . 2005 . 1553305 [ 44 ] Phil Turner and Susan Turner . 1997 . Supporting Cooperative Working Using Shared Notebooks . Springer Netherlands , Dordrecht , 281 – 295 . DOI : http : / / dx . doi . org / 10 . 1007 / 978 - 94 - 015 - 7372 - 6 _ 19 [ 45 ] Ron Yeh , Chunyuan Liao , Scott Klemmer , François Guimbretière , Brian Lee , Boyko Kakaradov , Jeannie Stamberger , and Andreas Paepcke . 2006 . ButterﬂyNet : A Mobile Capture and Access System for Field Biology Research . In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems ( CHI ’06 ) . ACM , New York , NY , USA , 571 – 580 . DOI : http : / / dx . doi . org / 10 . 1145 / 1124772 . 1124859 [ 46 ] Zulkiﬂy M . Zaki , Peter M . Dew , Mohammed H . Haji , Lydia M . S . Lau , Andrew Rickard , and Jennifer Young . 2011 . A User - orientated Electronic Laboratory Notebook for Retrieval and Extraction of Provenance Information for EUROCHAMP - 2 . In 2011 IEEE Seventh International Conference on eScience . 371 – 378 . DOI : http : / / dx . doi . org / 10 . 1109 / eScience . 2011 . 58 [ 47 ] Zulkiﬂy M . Zaki , Peter M . Dew , Lydia M . S . Lau , Andrew R . Rickard , Jenny C . Young , Tahir Farooq , Michael J . Pilling , and Chris J . Martin . 2013 . Architecture design of a user - orientated electronic laboratory notebook : A case study within an atmospheric chemistry community . Future Generation Computer Systems 29 , 8 ( 2013 ) , 2182 – 2196 . DOI : http : / / dx . doi . org / 10 . 1016 / j . future . 2013 . 04 . 011 [ 48 ] P . Östberg , A . Hellander , B . Drawert , E . Elmroth , S . Holmgren , and L . Petzold . 2012 . Reducing Complexity in Management of eScience Computations . In 2012 12th IEEE / ACM International Symposium on Cluster , Cloud and Grid Computing ( ccgrid 2012 ) . 845 – 852 . DOI : http : / / dx . doi . org / 10 . 1109 / CCGrid . 2012 . 72