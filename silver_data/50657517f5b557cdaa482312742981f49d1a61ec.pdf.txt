This article was downloaded by : [ Columbia University ] On : 14 November 2014 , At : 07 : 33 Publisher : Taylor & Francis Informa Ltd Registered in England and Wales Registered Number : 1072954 Registered office : Mortimer House , 37 - 41 Mortimer Street , London W1T 3JH , UK Human – Computer Interaction Publication details , including instructions for authors and subscription information : http : / / www . tandfonline . com / loi / hhci20 A Process - Oriented Approach to Design Rationale E . Jeffrey Conklin & K . C . Burgess Yakemovic Published online : 22 Jun 2011 . To cite this article : E . Jeffrey Conklin & K . C . Burgess Yakemovic ( 1991 ) A Process - Oriented Approach to Design Rationale , Human – Computer Interaction , 6 : 3 - 4 , 357 - 391 To link to this article : http : / / dx . doi . org / 10 . 1080 / 07370024 . 1991 . 9667172 PLEASE SCROLL DOWN FOR ARTICLE Taylor & Francis makes every effort to ensure the accuracy of all the information ( the “Content” ) contained in the publications on our platform . However , Taylor & Francis , our agents , and our licensors make no representations or warranties whatsoever as to the accuracy , completeness , or suitability for any purpose of the Content . Any opinions and views expressed in this publication are the opinions and views of the authors , and are not the views of or endorsed by Taylor & Francis . The accuracy of the Content should not be relied upon and should be independently verified with primary sources of information . Taylor and Francis shall not be liable for any losses , actions , claims , proceedings , demands , costs , expenses , damages , and other liabilities whatsoever or howsoever caused arising directly or indirectly in connection with , in relation to or arising out of the use of the Content . This article may be used for research , teaching , and private study purposes . Any substantial or systematic reproduction , redistribution , reselling , loan , sub - licensing , systematic supply , or distribution in any form to anyone is expressly forbidden . Terms & Conditions of access and use can be found at http : / / www . tandfonline . com / page / terms - and - conditions D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 HUMAN - COMPUTER INTERACTION , 1991 , Volume 6 , pp . 357 - 391 Copyright Q 1991 , Lawrence Erlbaum Associates , Inc . A Process - Oriented Approach to Design Rationale E . Jeffrey Conklin Microelectronics and Computer Technology Corporation ( MCC ) KC Burgess Yakemovic N C R ABSTRACT We propose an approach to design rationale ( DR ) that emphasizes supporting the design process in such a way that a trace of the rationale is captured with little disruption of the normal process . We describe a rhetorical method for design dialogue called IBIS ( meaning " issue - based information systemsn ) and two implementations of this rhetorical method : a graphical hypertext tool for conducting IBIS discussions called gIBIS and a simple indented text notation . We describe a field trial in an industrial setting in which the " low - techn indented text IBIS was used to capture more than 2 , 300 requirements and design decisions . We also explore the implications of this experience for the design of computer tools that , like gIBIS , seek to capture DR nonintrusively . Authors ' present addresses : E . Jeffrey Conklin , Corporate Memory Systems , Inc . , 8920 Business Park Drive , Austin , TX 78759 - 7405 ; KC Burgess Yakemovic , Human Interface Technology Center , NCR , 500 Technical Parkway , Northwest , Atlanta , GA 30313 . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 CONKLIN AND BURGESS YAKEMOVIC CONTENTS 1 . INTRODUCTION 1 . 1 . DR Capture Is Not New 1 . 2 . Why DB Capture Is Not Common Practice 2 . A PROCESS - ORIENTED APPROACH TO RATIONALE 2 . 1 . A Brief History of IBIS and g1f ) IS 2 . 2 . A Lesson in Technology Transfer 2 . 3 . The Fundamental Tradeoff : Cost Versus Payoff 2 . 4 . Two Approaches to the Tradeoff 3 . AN INDUSTRIAL - STRENGTH FIELD TRIAL OF THE METHOD 3 . 1 . Use of the IBIS Method Initial Use of the IBIS Method KDS Team Training and Use of itIBIS Conversion From itIBIS to gIBIS 3 . 2 . Observations and Results Impact on Access to Project Rationale Impact on Requirements Analysis Process Impact on Design Process Impact on Project Team Communication Other Development Process Observations 4 . IMPLICATIONS FOR glBIS 4 . 1 . Design in the Larger Context of Work 4 . 2 . Minimidng the Net Cost of Adopting DR Capture 4 . 3 . Computing on Rationale 5 . CONCLUSIONS I . INTRODUCTION Due to the increasing complexity of computer systems and demands for higher reliability , there is growing interest in the notion of capturing the DR of these systems . Yet , because of the wide range of kinds of artifacts and kinds of design , there is not yet a broad consensus about the form and function of DR or about the best way to extract it from the heads of designers . Although he never used the term rationale , Naur ( 1985 ) proposed that " the primary aim of programming is , not to produce programs , but to have the programmers build theories of the manner in which the problems at hand are solved . " Naur felt that these theories were so complex and rich as to be only transferable through direct personal interaction and that this is why it is so important for a system maintenance team to include at least one member of the development team . The theory behind a system provides the conceptual background for the specific features and structures of the system design , and it provides a coherence and intelligibility to the huge number of otherwise isolated design elements . For Naur , this theory filled the information gap D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 359 between developers and maintainers , the gap that so often makes mainte - nance a matter of guessing what the original designers and implementers had in mind . Simon ( 1969 ) described the design process as being akin to search in artificial intelligence ( A1 ) - in which one is searching the design space . The design decisions in this search process correspond to the branch points in A1 search , and the central functions of search - the successor function , which generates the alternatives for a given decision , and the evaluation function , which determines which of these alternatives to pursue first - are performed by the designer . The notion of searching the design space continues to be a useful metaphor , because the DR can be considered to be the path of decisions and selected alternatives that join the initial state ( in which no decisions have been made ) to the final state ( in which all design decisions have been resolved ) . Mostow ( 1985 ) described an approach to design in which A1 techniques are used to capture and structure the design rationale . Capturing design history may also enhance the design process . Recent evidence suggests how poorly human beings manage exploration of the space of design decisions , especially on large , complex development projects . One study of a team design effort that lasted over many months ( Walz , 1989 ) showed that key design decisions were discussed and explored by the group only to be taken up again weeks or months later as if the decision had not already been explored . Often , the issue had even been resolved when discussed earlier . Another study suggested that the number of issues raised and the proportion remaining unresolved may be the most valuable leading indicator available to management of a system ' s development progress ( Curtis , Krasner , Shen , & Iscoe , 1987 ) . In this article , we use DR to mean information that explains why an artifact is structured the way that it is and has the behavior that it has . Rationale provides a dimension of description that is usually missing , by augmenting the " what " of the artifact ' s structure and function with the " why " behind its design . It is thus a kind of communication from the creator of an artifact to those who later must use or understand the artifact . Therefore , like any communication , the successful use of DR depends on the writer and reader of the rationale document having some degree of shared background . 1 . 1 . DR Capture Is Not New The notion of DR capture is not entirely new to engineering practice . System design teams have for years tried to document some account of the key decisions and tradeoffs they were making in the course of the development process , if only as notes , white papers , minutes of design meetings , and memos . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 360 CONKLIN AND BURGESS YAKEMOVIC Indeed , some standards definition groups have made a concerted effort to document every standards decision , including the alternatives and pros and cons ( see Figure 1 ) . Defining a standard is , after all , a kind of high - level design , the output of which is a standard : a very abstract design on which all development efforts are expected to build . By recording their DR , these standards groups are able to accumulate a very rich and semiformal documentation of the learning and exploration process that took place over years . In general , when new members joined the standards committee , they were required to " come up to speedn by reviewing this rationale ( R . McNall , personal communication , June 1988 ' ) . Similarly , a recent programming language book ( Steele , 1990 ) includes an appendix in which all of the decisions that went into the language standard are presented . 1 . 2 . W h y DR Capture Is Not Common Practice Despite the theoretical and practical evidence that a record of DR would be of value , most efforts to capture it eventually fad , for many reasons . Writing down a DR is just a kind of documentation , resulting in a description of the design , a description that is not executable or even implementable , and is thus expendable when deadlines loom . In some kinds of design , such as architec - ture , which deal with the design of concrete and visible artifacts , documenting design decisions as somehow separate from their realization in the artifact itself can even be disruptive and can prevent the smooth flow of reflective exploration ( Fischer , Lemke , McCall , & Morch , 1991 [ this issue 1 ) . As documentation , a set of design decisions is inherently unstabie , especially if it is being written during an exploratory process . Designers are reluctant to document carefully a wrong turn in the exploration of the design space once it has become apparent what the right turn is . Moreover , a DR document , in order to be effective , cannot be a " write - only * trace of the exploratory process . It must be kept up to date , earlier decisions that have been undecided or redecided must have the documentation updated to reflect this , and this record of decision evolution must be ongoingly referred to in order to avoid unnecessary rehashing of decisions . Thus , as a development project matures , the DR document can grow into an unwieldy amount of loosely organized textual information . In addition , the chunks of this textual information tend to be highly interrelated , making awkward any linear storage medium , such as paper or computer files . If , as is often the case , there are many people involved in the development process , there is also a high likelihood that the same issues will come up repeatedly , in different groups and even within the same group over longer periods of time . These repeated occurrences of an issue will usually be worded and even conceived of differently . If potential duplicate decision instances are D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 Figure 1 . A sample page from the ( unpublished ) issue log of the American National Standards Institute graphics standards group X3H31 . TG - ID : 240410 attribute polygon hatch table hatch STATUS : Resolved by TG ISSUE : Should PHlGS & 6ae a rnechaairrm tor de6ning the hatch table ? DESCRIPTION : GKS 7 . 2 defines a mechanism for selechng a hatch style from a hatch table . GKS defines a Iunction which de6nes elements of the pattern table , but it does not detlne a mechanism lor d e t h q the elements of the hatch table . Should PHIGS define thm function ? 1 . PHIGS will spec * a function for d e f h q the hatch table . 2 . PHIGS will mt speciiy a function for deilaing the hatch table . ARGUMENTS : a . Pro 1 . Con 2 : This function is useful in many application environments . When devices do not support dedoltion of fU area patterns , but the workstation could support a wide variety of hatch patterns in hardware or software ; this tune tionatity would be very useN . b . Pro 2 : Strict GKS 7 . 2 conformity . c . Contra b : T ~ IS is really just an extension to GlGS 7 . 2 . d . Pro 1 : Consistency in functionality between raster and cahgmphic devices ( compare to pattern table ) . RESOLUTION : Alternative 1 : PHIGS will spec * a tunction for deflnmg the hatch table . REFERENCES : ORIGINATOR INFO : X3H31 ORIGINATOR ID : NA TASK GROUP HISTOKY : This issue was identified by a subtask group at the Berkeley meeting in October 1982 . October 82 letter ballot vote results : 8 persons did not vote . Alternative 1 - 12 Alternative 2 - 1 Discussed at the Silver Spring meeting in Dac . , 1982 . Vote was : 13 - 0 - 0 with 2 abstentions . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 362 CONKLIN AND BURGESS YAKEMOVIC not detected and eliminated , then the DR document will grow to contain inconsistent information in the form of multiple instances of an issue with differing rationales and resolutions . One of the most difficult problems for those researchers who would create the DR documentation during , as opposed to after , the design process is that design is often marked by breakthroughs of understanding , so called " Ah ha ! " events . Previous decisions and assumptions may become incorrect , mislead - ing , or irrelevant after such conceptual restructuring . When this happens , much of the existing DR must be updated to reflect the new understanding . The current interest in DR may be stimulated in part by the emergence of technologies such as hypertext , computer - supported cooperative work tools , and large text database technologies . It now appears possible that these and other technologies may be able eventually to make the capture , analysis , and reuse of DR practical on the large development projects for which this information would be so useful . It is worth noting that the value of recording rationale extends beyond design to any activity for which there is a need to be able to look back and ask , " Why did we do it that way ? " This includes activities similar to design , such as strategic planning and the creation of legislation . In these activities , a complex intellectual effort results in the production of some artifact ; however , even in organizational operations , where there is no specific artifact except " to keep things running smoothly , " there is often a legitimate need to know why things were done the way they were . Further study will be needed to determine how the current research on DR applies to these other domains . In the mean time , fundamental problems in the design of software systems appear to be driving much of DR research . This article has five parts . The next section provides some background for our approach to capturing DR , the third section describes a field trial that demonstrates this approach , the fourth section presents some of the lessons we learned from the field study , and the final section draws implications for future research . 2 . A PROCESS - ORIENTED APPROACH TO RATIONALE In this section , we describe briefly the events that lead to our current understanding of the design process and the nature of rationale and its capture . 2 . 1 . A Brief History of IBIS and gIBIS IBIS is a rhetorical model for design and planning dialogues . It specifies a simple set of conversational elements and moves : An IBIS discussion always D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 363 starts with a root issue , which specifies the main question or problem at hand . One or more positions respond to the issue with potential resolutions , and arguments either support or object to these positions . Secondary issues question , challenge , and generally expand on the discussion of the root issue , and each of these new issues may be explored with positions , arguments , subsequent issues , and so on . IBIS was developed during the 1970s by Horst Rittel and others ( see Kunz & Rittel , 1970 ) to provide a structure for planning dialogues in which a wide range of stakeholders addressed complex problems ( see Fischer et al . , 1991 [ this issue ] , for a more detailed history of IBIS ) . Various dialects of IBIS have emerged over the years . gIBIS ( pronounced " gibbous " ) is a graphical hypertext software tool for building IBIS networks ( Conklin & Begeman , 1988 , 1989 ) . gIBIS runs on Unix workstations ( see Figure 2 ) and has a limited " groupware " capability , allowing several users on a local area network to contribute to an IBIS discussion at the same time . gIBIS was developed as a prototype tool for research on using hypertext , groupware , and rhetorical models ( e . g . , IBIS ) to facilitate and capture software system design decisions and their rationale . It evolved substantially during 3 years of active experimentation and field testing at MCC and its member companies . During much of this time , gIBIS was also being used by researchers at MCC and some of its member companies as a practical tool for design and planning . However , gIBIS exposed a paradox of technology transfer . The investment to use gIBIS paid off best when it was used for a project that had specific goals , an extended time frame , and a clear process that was used by all project members . These are characteristics of commercial development groups much more than of research groups . However , development groups generally are not equipped as well as research groups , and in the MCC member companies development groups almost never had networked Sun workstations for each member of their project teams . As a consequence , the engineering groups that wanted to use gIBIS did not have the necessary equipment for it , whereas the researchers , who had the equipment , only used it in a casual way . Nonetheless , gIBIS served as a productive vehicle for research on DR . The first author used it to explore a variety of possible extensions to the IBIS method for representing some of the subtle and complex phenomena that arise in the logic of DR ( Conklin , 1989b ; see also Lee & Lai , 1991 [ this issue ] ) , some of which are described in Section 4 . 2 . 2 . A Lesson in Technology Transfer Several efforts were undertaken in the MCC member companies to develop versions of gIBIS that would run on the existing engineering computer D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE starts with a root issue , which specifies the main question or problem at hand . One or more positions respond to the issue with potential resolutions , and arguments either support or object to these positions . Secondary issues question , challenge , and generally expand on the discussion of the root issue , and each of these new issues may be explored with positions , arguments , subsequent issues , and so on . IBIS was developed during the 1970s by Horst Rittel and others ( see Kunz & Rittel , 1970 ) to provide a structure for planning dialogues in which a wide range of stakeholders addressed complex problems ( see Fischer et al . , 1991 [ this issue ] , for a more detailed history of IBIS ) . Various dialects of IBIS have emerged over the years . gIBIS ( pronounced " gibbousn ) is a graphical hypertext software tool for building IBIS networks ( Conklin & Begeman , 1988 , 1989 ) . gIBIS runs on Unix workstations ( see Figure 2 ) and has a limited " groupware " capability , allowing several users on a local area network to contribute to an IBIS discussion at the same time . gIBIS was developed as a prototype tool for research on using hypertext , groupware , and rhetorical models ( e . g . , IBIS ) to facilitate and capture software system design decisions and their rationale . It evolved substantially during 3 years of active experimentation and field testing at MCC and its member companies . During much of this time , gIBIS was also being used by researchers at MCC and some of its member companies as a practical tool for design and planning . However , gIBIS exposed a paradox of technology transfer . The investment to use gIBIS paid off best when it was used for a project that had specific goals , an extended time frame , and a clear process that was used by all project members . These are characteristics of commercial development groups much more than of research groups . However , development groups generally are not equipped as well as research groups , and in the MCC member companies development groups almost never had networked Sun workstations for each member of their project teams . As a consequence , the engineering groups that wanted to use gIBIS did not have the necessary equipment for it , whereas the researchers , who had the equipment , only used it in a casual way . Nonetheless , gIBIS served as a productive vehicle for research on DR . The first author used it to explore a variety of possible extensions to the IBIS method for representing some of the subtle and complex phenomena that arise in the logic of DR ( ConMin , 1989b ; see also Lee & Lai , 1991 [ this issue ] ) , some of which are described in Section 4 . 2 . 2 . A Lesson in Technology Transfer Several efforts were undertaken in the MCC member companies to develop versions of gIBIS that would run on the existing engineering computer D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE Figure 3 . An example itIBIS discussion . The root issue ( I ) is marked as resolved ( * I ) and is addressed by three positions ( P ) , the second of which is aelected ( * P ) . The positions have various supporting ( A6 ) and objecting ( AO ) arguments . The argument objecting to the third position has a subissue that seeks verification of the argument ' s assertion . * I : Which processor should be used ? ? P : A . AS : Fast . * P : Processor B . AS : Already in use , thus cheaper . - P : Processor C . AO : Will not be available in time . * I : Can it be delivered sooner ? * P : No . AS : Design will not be completed ti1 next year environments , including PCs , Apple Macintoshes , and mainframes with terminals . Most of these reimplementations never reached " industrial strength " and were never used on engineering projects . One , however , was incorporated successfully into an engineering project ( at NCR ) . This suc - cessful implementation of IBIS is very simple and is really little more than a notation . Called " itIBISn ( for indented text IBIS ) , it uses indentation to represent the hierarchical relationships among the nodes . Issues are labeled with I , positions with P , supporting arguments with AS , and objecting arguments with AO . Issue resolution is marked using * to show that an issue had been resolved or that a position had been selected , ? to show that no decision has been made , and - to show rejected positions . The example in Figure 3 shows what a simple issue deliberation might look like . Team members could use an outline processor , their favorite word processor , or even pencil and paper to construct itIBIS documents . Perhaps the most salient feature of itIBIS is that it was developed by the people who were to use it ( the ultimate in user - centered design ) and that it solved an immediate problem that they had : having effective documentation of a long series of design meetings . The itIBIS notation turned out to be especially useful when used to capture notes during meetings or to restructure them afterward . The NCR project , which is described in detail in Section 3 , consisted of five people working on one component of a rather complex software system . The members of the team ranged in experience from 2 years to 12 years . They had not used any form of IBIS before this project . The importance of a " champion " in technology transfer is widely recognized ( Bouldin , 1989 ) , and in this case the champion for the use of itIBIS was the second author . She convinced her management to support the use of itIBIS as a low - tech experiment in capturing DR . Then she convinced her colleagues on the D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 366 CONKLIN AND BURGESS YAKEMOVIC project team to try using it to structure their meeting records and some of their most critical documents ( i . e . , requirements document ) . At the end of 18 months , the project team had generated more than 8 , 000 itIBIS entries documenting more than 2 , 300 requirements and design decisions . There were other , somewhat smaller , uses of itIBIS . For example , one member company engineering group used itIBIS as the focus of its documen - tation during an intensive 6 - month period in which it met for 4 hr per day every day . During this time , this eight - person team generated 246 issues with 400 positions and 482 arguments . The team ran its meetings according to the IBIS structure ; that is , as each person spoke , he or she used the IBIS model to label comments . At the end of 6 months , the planning was done and the team stopped using itIBIS and started writing the document that would become the official output of this project . From a research standpoint , it was striking to find the users for whom gIBIS had been designed ( e . g . , designers and engineers ) eschewing use of this multifeatured hypertext system , preferring on real projects to use the itIBIS notation for which there was virtually no machine support ! There are many reasons this was so , but we believe that a critical component was that , even though the capture of DR was a new idea for the team members , they found in itIBIS a way to capture DR that required minimal changes to their existing work practices . This experience , among others , lead us to pursue the capture of DR from the process - oriented perspective of seeking to build technologies that matched as closely as possible the existing tools , methods , and practices of engineers and designers . The remainder of Section 2 outlines this process - oriented approach . 2 . 3 . The Fundamental Tradeoff : Cost Versus Payoff There are clearly some costs to making andlor using DR . In practice , either designers must document the DR as the design process unfolds , or the maintainers must reconstruct the DR after the fact , using whatever docu - mentation ( or personal contact with the designers ) available . Although current practice leaves all the cost for later ( i . e . , to the system maintainers ) , it is possible that overall life - cycle costs can be reduced dramatically if the DR is treated as a first - class document . But the tradeoff between the cost of creating a DR and the cost of using it later is a fundamental one . At one extreme is the use of video tape to capture the design process . This has minimal cost to the members of the design team ( unless you count their loss of privacy ) , but , because no abstraction or structuring of the process record has occurred , there is a very high cost to maintainers who try to recover rationale from this record . At the other extreme is construction of an expert system to design a class of applications automatically ; in this case , the DR is D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 367 so highly abstracted that it has largely disappeared into the rules of the expert system . All approaches to DR capture that tend toward automated or semiautomated design are at this end of the cost - payoff spectrum . Obviously , this has very high cost to the designers ( at least initially ) because the design space must be analyzed completely and structured for reuse , but system maintainers or later implementors merely need to make changes to the functional specification to make any needed modification to the application system . Any compromise between these two extremes assigns some cost to the designers ( to structure and summarize their reasoning process ) and some cost to the maintainers ( to read and understand the DR documentation ) . Most current DR research has moved away from the extremes of video tape and expert systems and is looking for tools , methods , and notations that lower the cost to one of these groups without appreciably raising it for the other or , equivalently , that raise the payoff of DR capture enough to offset the cost . 2 . 4 . Two Approaches to the Tradeoff The range of design situations and artifact types makes it necessary to focus one ' s DR research efforts . Current efforts can be divided broadly into two categories . The first approach studies the design of relatively stable and well - understood design domains , in which there is a relatively high degree of standardization . This approach emphasizes the careful construction of DR as a map of the design space and focuses on a rigorous and logical representation of the rationale . This approach maximizes the payoff of DR through its reuse and / or through lowering the cost of system maintenance and is represented by the work of MacLean , Young , Bellotti , and Moran ( 1991 [ this issue ] ) . The second approach to DR studies more dynamic design domains in which the problems are vague ( or " wicked " ) , the solution technology is poorly understood , or both , and in which there is , therefore , little or no standard - ization of designed artifacts . This approach emphasizes minimizing the cost and intrusion to the designers by making the DR capture as transparent as possible . In this approach , any intrusion into the pure design process must be offset by some process benefit that makes up for the DR capture disruption . This approach is represented by the work of Conklin , Burgess Yakemovic , and Begeman ( see Conklin , 1989a ; Conklin & Begeman , 1989 ; Burgess Yakemovic & Conklin , 1990 ) . Let us call these the " structure - oriented " and " process - oriented " approaches , respectively , because the former emphasizes the DR as a logical structure ( a knowledge representation of the design space ) , whereas the latter emphasizes the DR as a history of the design process . In the structure - oriented approach , the DR is prescriptive , because it summarizes the design decisions and D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 CONKLIN AND BURGESS YAKEMOVIC tradeoffs so that others will reuse the reasoning . In the process - oriented approach , the DR is merely descriptive ; its reusability is incidental . Any approach to DR capture results in the production of a new artifact - the DR itself . For the structure - oriented approach , this is precisely the point : One designs the DR ( MacLean et al . , 1991 [ this issue ] ) , and the quality of the final product depends in part on the quality of the DR . For the process - oriented approach , however , the fact that DR is itself an artifact is problem - atic , because one cannot simply instrument the pure process and reify its design decisions without having altered the process . ( It thus f d s to the process - oriented approach to show that it does not on the whole damage the design process . ) We discuss this irony later . Another feature of the process - oriented approach is that , by keeping and indeed emphasizing the temporal unfolding of the artifact and its DR , the process - oriented DR provides a dimension of narrative . This narrative , or story , about the evolution of the artifact includes not only the wrong turns and rejected alternatives in the design of the artifact but also the order in which they were taken , and to some extent this temporal sequence can help in painting a compelling picture about the artifact ' s rationale . Thus , another distinction between the process - and structure - oriented approaches is that process DR focuses on the rationale behind the design of a specific artifact , whereas the structure DR focuses on mapping the space of design issues for a family of related artifacts ( i . e . , a generic artifact ) . The process - oriented approach reflects an assumption that the DR dwells implicitly within the process of design and that to capture DR is to reify the decisional elements within the process . A closely related assumption is that the technology of this reification must disrupt the process as little as possible , because revolutions in design process are rare , whereas the process of design naturally evolves through small , incremental steps . The use of IBIS is thus an important part of our approach . The IBIS model is very simple - Indeed , it is a minimal model of design decisions . Because of our process - oriented approach , however , the IBIS model is more than a description of DR structure . It is also the rhetorical model within which " legaln moves are made in the IBIS design conversation . Part of the cost of producing the DR artifact in this approach is thus subsidized by supporting communi - cation and coordination efforts that would have to occur in any case , to the extent that the IBIS model is easy to learn and / or natural to use . In the next section , we present evidence that it is both . ' A hybrid approach has been taken by Fisher , McCall , and March ( 1989 ) and by Fischer et al . ( 1991 [ this issue ] ) , in which a minimally intrusive IBIS system is coupled with the use of a domain - specific knowledge base . In essence , the human and machine have a dialogue in which the human side is process oriented and the machine side is structure oriented . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 3 . AN INDUSTRIAL - STRENGTH FIELD TRIAL OF THE METHOD As a result of efforts to transfer gIBIS technology to the MCC sharehold - ers , it became apparent that there is a large gap between the environments in which the current version of gIBIS can , and would be , used and those in which the capture of DR is economically important : commercial development groups with scarce resources , hard deadlines , and a central accountability to produce industrial - strength products at a profit . The difference in the environments includes both available computer platforms and organizational practices and attitudes . 3 . 1 . Use of the IBIS Method The second author had many years of experience as a systems analyst in the software development environment at NCR and , during this time , collected information about the decisions made during software development projects , primarily by keeping detailed handwritten notes on most meetings she attended . Moreover , she acquired a reputation for being good at retrieving this information and other informal documents from the three - ring binders in which she stored them , thus helping the projects she was on to avoid wasting time and loosing information . Having been exposed to the IBIS method and the gIBIS tool , when she began the requirements analysis for a new commercial software development project , she decided to see if the IBIS method could be used to help structure the information she normally collected . The project at NCR involved the development of hardware and software for a special purpose workstation controller , known as the KDS controller , which was being developed to fit into an existing system . NCR distributes responsibility for various aspects of product development to different orga - nizations ; for this project , marketing , product management , hardware development , and the four organizations that were responsible for four different parts of the software system ( referred to as KDS , POS , MWS , and MAINTAIN ) were involved . The KDS team , of which the second author was a member , was thus one of several teams working on the same system . The KDS software had both real - time and distributed system requirements . Because the development environment for the KDS project did not allow the use of gIBIS , itIBIS was used . Initial Use of the IBIS Method As an approach to starting the requirements analysis process , the second author prepared an itIBIS document that captured the DR found in the initial D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 370 CONKLIN AND BURGESS YAKEMOVIC requirements document , as well as ( interactively ) from the product manage - ment group . Although not explicitly stated in the requirements document , the root issue the document addressed was , " What is required for this product ? " This root issue was specialized into subissues , such as , " What is required for the product hardware ? " and " What is required for the product software ? " The initial requirements document contained mostly positions ( again , not explic - itly stated as such ) and some arguments supporting these positions . The itIBIS document became the focus for discussions between the design team and the author of the requirements document ; additional supporting argu - ments were supplied as this itIBIS document was reviewed . Following these discussions , a new version of the requirements document was prepared by the product management group , which incorporated much of the rationale discovered through this review process . KDS Teams Training and Use of itIBIS The KDS team was exposed to the IBIS method during the requirements document analysis described before , and they became convinced that there might be some benefit to using the method for capturing other project - related information . Because of the many people and organizations involved in this project , a significant amount of time was spent in meetings where the KDS team discussed not only hardware , software , and user requirements but also design approaches , interfaces with other systems and other departments , and so on . These meetings traditionally had resulted in the generation of prose meeting minutes . The KDS team chose to use itIBIS to replace prose as the format for these minutes . In these project meetings , there was usually a central issue that was the reason for the meeting , such as " What do we need to supply ? " , " What does the hardware need to do ? " , " How should we solve this design problem ? " , " What information is needed for a particular interface ? " , or " Who should perform system integration testing ? " Discussion during the meeting contributed positions and related arguments and raised further issues . In addition to the introduction to IBIS given to the team through watching its use for requirements analysis , the KDS team was given a more formal introduction to the IBIS method and the itIBIS conventions in a 30 - min session . Further training on how to prepare itIBIS meeting minutes was done by having both a trained and an untrained scribe participate2 in the same meeting with each recording minutes . Following the meeting , the trainer and trainee compared the notes they had independently derived ; after a couple of meetings , the form and content captured by both the more and less The team member responsible for note taking was also involved actively in the meeting as a participant . The team was too small and resources too scarce to have nonparticipants act as scribes D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE experienced person became nearly identical . During the training period , two of the five team members acted in the trainer role . A hard - copy version of the file containing the issues , positions , and arguments recorded during a particular meeting served as a replacement for the customary prose meeting minutes for these meetings . The rest of the KDS team began using itIBIS approximately 3 months after the initial itIBIS document was created . Team members elected to use either an outline processor or a text editor to create itIBIS documents , depending on which they were more comfortable using . Regardless of the tool used , the result was an ASCII text file , which was stored on the team ' s network server disk . An itIBIS document ( file ) contained a group of related issues , positions , and arguments : for example , the DR derived from the hardware portion of the product requirements document , the DR resulting from a series of meetings held to verify the design against user events for the cases when the user was a supervisor , or the DR based on issues relating to the software requirements from a meeting with the marketing organization . Although the primary use of itIBIS was for requirements analysis and meeting minute preparation , two of the developers also made use of the method for a variety of individual analysis tasks , including analysis of design options for particular modules within the application . During the 15 months that the entire team used itIBIS , the KDS project was involved in requirements analysis , high - level design , and detailed design . Sixty - six files containing IBIS DR were created using itIBIS ; these contained approximately 16 , 000 lines of text in total and required 780 KB of disc space . As a high - level organizational aid , each file was placed in one of four categories : 1 . Platform : Information about the hardware and operating system plat - form . 2 . Requirements : Total system requirements . 3 . Design : Application design . 4 . Process : Development process . Figure 4 shows the total nodes by category . The entire set of itIBIS files contained approximately 8 , 000 nodes and addressed 2 , 260 issues . By the time the project moved into its second year of development , it had become very difficult for any team member to determine which file contained what information , either for retrieval or for extension . Conversion From itIBIS to gIBIS Although the team members continued to contribute to the creation of IBIS information , the difficulty in finding a file that contained a desired issue , position , or argument limited the teams ' participation in the use and D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 372 CONKLIN AND BURGESS YAKEMOVIC Figure 4 . Distribution of IBIS nodes in the four project categories . Platform discussions dealt with selection of the enabling substrate , whereas requirements and design discussions dealt with the rCDS system itself . The process discussions were about project procedures and policies . maintenance of the electronic version of the information . Because we thought that a tool that specifically supported IBIS could help with this management problem , a Sun workstation was at last acquired and the indented text files were converted to gIBIS format , through a semiautomated process . There were two major manual processes required for conversion : one to create the labels used in the gIBIS graphical browser and the other to clean up the results of the automated layout that placed the nodes in the graphical view . While working with itIBIS , the users often added new nodes or updated the status of existing nodes on the printed copy of the DR but did not update the electronic version . In addition to the updates required by conversion , the resolution status of issues was examined and updated as needed , and additional rationale was also added to the gIBIS networks . This additional rationale included information that individual team members had added to their printed copy of the DR , as well as such things as adding to a position the arguments that were discussed but never recorded . Because of the amount of time required to perform this conversion and DR update , we decided not to try to convert the entire IBIS corpus but , rather , to concentrate on the design category . As a result , only the DR for the application design , which represented 35 % of the total , was reviewed in detail . The decision to convert and review only this category of DR was based on two factors : Many design issues were still open , and it seemed that a review of this category would provide the most support to the project activities at that time . In addition , there had been a complete change in direction with regard to the product platform , which meant that the platform DR category could be archived . Of the 66 itIBIS files , 25 of the design files and 4 of the requirements files were converted to gIBIS format and reviewed and updated . Within this set , the resolution status of the issues was updated from 36 % open D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 373 to 12 % open . Approximately 800 nodes , including new issues , were added during the update process . Although gIBIS was used for several months at the end of this study , the great majority of the experience reported here is with itIBIS . 3 . 2 . Observations and Results Two empirical issues were explored during the use of the IBIS method at NCR : ( a ) whether the IBIS method could be used , over an extended period of time , in a commercial environment , with minimal disruption of the existing practices of the trial group , and ( b ) whether the method could improve a process of capturing DR that was already in place and extend the use of the process beyond a single individual . Because this field study was conducted in a commercial product develop - ment environment , rather than in a laboratory under controlled conditions , the results of this study are qualitative and open to interpretation . Overall , the results were encouraging for DR capture research and tool development : There were several advantages seen when using IBIS to structure note taking , and there were some obvious disadvantages from the lack of real technical support for the method . We present our observations in terms of two broad categories : impact on access to project rationale and impacts on the develop - ment process . Impact on Access to Project Rationale At several points in the nearly 2 years covered by this study , there were changes in personnel , and the captured informal information was very useful at these times . In one case , the design expert who was centrally involved in shaping the overall system structure left the company before the detailed design was complete . Because not only his design but also his design decisions and much of the reasoning behind them had been recorded , the team was able to finish the detailed design without difficulty . Indeed , during the project , whenever a " Why did we do such a such ? " type of question was asked , there was often an answer in the IBIS record of the decision and its rationale . Perhaps , because of the frailty of human memory , system designers need their own rationale records during development as much as the maintainers who work on the system later . Impact on Requirements Analysis Process The use of itIBIS had an impact on several aspects of the development process . The method was found to be very helpful in the design group ' s analysis of the requirements document , which came from another group , exposing faulty assumptions and weak or missing rationale for the require - ments . For example , in the requirements document , a particular feature was D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 374 CONKLIN AND BURGESS YAKEMOVIC Figure 5 . Summary of the 11 design errors identified during conversion from itIBIS to gIBIS . Each is classified as to when it would have been detected without the IBIS conversion process , which determines how much it would have cost . Key : I means " not likely to have been found before integration test , " and C means " probably would have been found during coding or unit test . " 1 I : Design failed to implement a requirement correctly ( an object of a certain class should have been created for all systems , but the designer thought it was needed only under certain conditions ) . 2 . C : Failed to create two objects before their addresses were used . 3 . C : A class of objects was used but instances were never created . 4 . C : A single data field used for multiple and conflicting purposes . 5 . I : Design failed to implement a requirement correctly ( handling of multiple cursors was in error under certain conditions ) . 6 . C : One part of the application system status was not initialized . 7 . C : Addresses for a group of objects were needed but no method of obtaining them was defined . 8 . C : Change in subsystem functionality not reflected in the design . 9 . C : Change in subsystem functionality not reflected in the design . 10 . I : Design failed to implement a requirement correctly ( a timer was not started when it should have been ) . 11 . I : Design failed to implement a requirement correctly ( user was not notified of a system action when he or she should have been ) . requested ( a position on the issue , " What is required ? " ) , with no supporting argument . The document ' s author assumed that everyone knew that the feature was required because there had been a number of customer com - plaints with a previous system that failed to support this capability . Actually , most of the development team was unfamiliar with the previous product and , therefore , did not know why the feature was required . Impact on Design Process Several software engineering techniques were used by the KDS team to expose problems with their design prior to implementation , including in - volving the entire team in both high - and low - level design walkthroughs . However , during the process of inspecting and updating the IBIS DR following the conversion to gIBIS , 11 additional problems were found with the existing design ; without this examination , it is most likely that 7 of these problems would not have been discovered until the related code was written and 4 not until the integration test was occurring . The 11 errors discovered during this process are outlined in Figure 5 . Based on industry average figure ^ , ^ the early detection of problems resulted in a substantial savings for The industry figures we used were derived from material quoted within NCR for quality assurance purposes . This material ( attributed to Albertson ) appears on page 21 of the course material accompanying Computer - Aided Software Engineering Environment USC Institutional Television Network , Dr EUis Horowitz , Professor D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 375 the project . The savings was between three and six times greater than the cost of using gIBIS , calculated from the actual number of hours spent working with the tool reviewing the itIBIS information and performing updates4 The information captured in an IBIS provides a different view of the software design from that presented by usual design documentation , so reviewing the issue base allows the design to be reviewed from a different angle , exposing different problems from traditional design reviews . The second author has found , from previous work with DR in an unstructured form , that the act of searching for specific information often reveals problems similar to those found during this study . The process of browsing the DR and looking for a specific entry seems to serendipitously trigger detection of problems or inconsistencies in the data . Further studies will be needed to clarify the connection between review of DR and detection of design errors . We recommend three factors to observe in such studies : ( a ) whether the DR review is concentrated or spread out over time , ( b ) whether the reviewer is also an author of the DR , and ( c ) how the goal of the review ( e . g . , searching for a specific item ) affects the detection of errors . The detection of design errors on this project is a preliminary result , but it points to the possibility that comparing and reviewing DR might actually reduce the cost of the design process by making it more rigorous and error free . Moreover , we speculate that any tools for browsing and reviewing the DR that make review activities on large projects less formidable will probably facilitate this mode of error detection . Impact on Project Team Communication Learning about and using the IBIS method had a direct impact on the communication processes among the members of the group , which also affected the development process . Once the entire KDS team was trained in the IBIS method , it seemed that team meetings were more productive . We propose that a knowledge of the underlying form of the dialogue allowed the ' Two numbers were calculated for the comparison of actual DR capture costs , CDR , versus potential error cost , CERR CERR , which represents the potential cost had the errors not been found , was calculated as EcAc + E , A , , where Ec is the number of errors that would most likely have been found during coding , A , is the industry average dollars per error found during coding , E , is the number of errors likely found during integration , and A , is dollars per error found in integration testing . CDR , which came out roughly three to six times smaller than CERR , is the cost of finding the errors in the DR ( the cost of reviewing and updating the IBIS DR ) and is simply the number of hours multiplied by dollars per hour . We did not include the cost of initial entry of data into the IBIS because , for the most part , the itIBIS was built by creating text files in IBIS format that replaced documentation ( e . g . , meeting minutes ) that would have been produced anyway . The actual number of hours spent reviewing the information and performing updates was tracked fairly closely , for reasons external to this field study . Unfortunately , the proprietary nature of the information prevents us from revealing either the number of hours or the dollars per hour directly . Because the reviewlupdate time included time that was " overhead " ( e . g . , learning to use the gIBIS tool ) and because the industry average figures were used rather than NCR specific figures , we have given the difference as between 3 and 6 times . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 376 CONKLIN AND BURGESS YAKEMOVIC Figure 6 . The seven interconnected KDO system design issues . The full rationale of these issues is proprietary - They are presentad here to provide a sense of the kind of issues that were involved . Where should the subsystem ' s current state data be kept ? What needs to be maintained to identify the current state ? How should the current state be maintained ? How does the subsystem determine the current state after a load ? When is the subsystem ' s parameter file built ? How are parameter changes made by external systems to be handled ? What changes can external systems make ? Figure 7 . Interissue connections among the seven system design issues . For example , Issues 1 and 2 were interdependent , in the sense of having a constraint on their resolutions ( see Section 4 ) . team to determine when the discussion had wandered from the intended topic . By recording the discussion , team members were able to " save " any open issues raised during tangential discussions - so that they could be addressed later - and were able to return to the original topic quickly , by reviewing what had been recorded prior to the tangent . ( It should be noted that while making use of IBIS during meetings , the team members spoke normally and did not preface their comments with , UMy issue / position / argument is . . . . " ) Open issues were tracked , and other important informal information ( often in the form of positions or arguments ) was more readily referred to by virtue of being logically tied to some design issue . Thus , the itIBIS documentation is perhaps more properly termed project rationale than just & sign rationale . The IBIS method was also used for setting meeting agendas : The attendees were provided with a set of issues and , if the topic had been discussed before , any existing positions and arguments . This proved particularly useful when the issues being discussed were interrelated in ways that were not obvious . In D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 377 Figure 8 . Interests of the five development groups in the seven system design issues . For example , the KDS team had a vested interest in the resolution of Issues 4 and 6 and was dependent on the resolution of Issue 2 to take further action . Link Key : . . . . . . . . . . . . . . . . . - Stakeholder action is dependant on the issue resolution - - Stakeholder has vested lnterest in the issue resolution Group Key : KDS - team using IBIS MWS - one software development team POS - another software development team MAlNT - a third software development team PM - product management ( representing the customer ) one particularly notable case , where the IBIS was used for meeting prepara - tion , there were a set of seven design choices , all of which depended on one or more of the others for resolution , and each of which had thus evaded independent resolution more than 6 months . Figure 6 outlines these issues , and Figure 7 shows which issues were related to which other issues . One reason for the difficulty in achieving resolution was that five different groups had a vested interest in the resolution of the issues , and no one group was responsible for resolving all of them . Figure 8 gives an indication of the stakeholder interests in each of the issues . The set of seven issues constituted a very complex design decision , which no one designer , including the leader , had completely grasped . Review of the D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 CONKLIN AND BURGESS YAKEMOVIC IBIS by this head individual , in preparation for a meeting that was originally planned to address two of the issues , allowed the precise identification of the seven issues and their proposed resolutions , as well as identifying which development groups were stakeholders in this issue network . Having then determined what needed to be discussed ( the seven decisions ) and who needed to be at the meeting , an agenda was prepared and distributed to the proposed attendees , listing the set of issues , with all previously discussed positions and arguments ( but not in the itIBIS format - to be discussed ) . The relationships between the issues ( as shown graphically in Figure 7 ) were also described in the agenda . This allowed those attending the meeting to come prepared to discuss any issues in which they were personally involved , with an awareness of the related issues and the prior discussions . The global perspective provided by this IBIS agenda allowed the groups to devise a new , previously unconsidered solution that elegantly resolved all seven issues while incorpo - rating the arguments from the prior discussions . Other Development Process Observations Two other observations can be made about the development process . First , the KDS team had little success in persuading other groups with which they had to work closely ( e . g . , marketing ) to use the itIBIS method for capturing the discussion that occurred during their joint meetings . In one case , with the product management group that supplied the requirements , the two groups were able to use IBIS to facilitate the intergroup communication , as described earlier . In the other cases , where interorganizational communication was required , itIBIS was considered too awkward or technical . When queried about not having read the itIBIS minutes published following a meeting with the KDS team , a member of one group commented that the itIBIS minutes were " too technical . " It was our impression that the " technicality " was related to having to translate the key ( I : , P : , AS : , or AO : ) into issue , position , supporting argument , and objecting argument . Following this conversation , when a meeting was held with a non - KDS group , itIBIS minutes were produced for KDS team use , and these minutes were manually converted to a prose form for the other attendees . Figure 9 shows an example of the type of conversion performed . The goal was to take the same information and put it into a more familiar format . Although the content was identical , the other groups accepted these minutes with no complaints . However , converting itIBIS DR into prose was time consuming and seemed to have limited value . Therefore , after a couple of attempts , the KDS team decided not to use the itIBIS format for minutes when meetings involved non - KDS team members . Intergroup communica - tions with these other groups were troubled by the traditional breakdowns , such as lack of clarity about the resolution status of important requirements issues , that had often been a problem in the past . We now feel that , if the use D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE Figure 9 . Example of an indented text IBIS discussion and a prose text version of the same discussion . itIBIS form : I : How should we handle situation X ? * P : Using Y AS : simple AS : some of this work needs to be done anyway AS : may be able to borrow from an existing implementation - P : Using Z AO : < etc . > Prose form : The first issue we addressed was how to handle situation X . The first solution we discussed , and the one we finally selected , was using Y . This approach has the advantage of being simple . Also some of this work needs to be done anyway . In addition , we may be able to borrow from an existing implementation . Another potential solution discussed was using Z , which was rejected because < etc . > of itIBIS had been continued as a method of documenting the communication between the KDS team and the other groups , some of these problems could have been avoided or identified sooner . The second observation that can be made about the development process is that tracking the open issues on the project made it clear that another important aspect of teamwork ( i . e . , action items ) was missing from the group ' s tracking system . The connection between IBIS and project manage - ment in general is discussed in the next section ; however , we note that the primary tracking problem was with action items that required action by someone who was not a member of the KDS team . This indicates that action item handling is , at least in part , an interorganizational communication problem . 4 . IMPLICATIONS FOR gIBIS There are two central themes in our research on DR . One is an emphasis on supporting the design process so that we can unobtrusively " catch " important informal information such as design decisions as they are made . To do this , we study what is happening or trying to happen in situated design practice and build tools to give it expression and support . The other theme is an emphasis on industrial acceptance and technology transfer . In other words , much of our research on DR has been shaped by the need ( encouraged no doubt by our funding source ! ) to show some measure of commercial acceptability in our research ideas and to move our prototypes into field testing as soon as practical . Indeed , we have come to regard technology transfer as an intrinsic and important part of our research . One D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 380 CONKLIN AND BURGESS YAKEMOVIC strategy for easing this transfer process is to replace existing practices and / or technologies , as opposed to introducing new ones ( Bouldin , 1989 ) . This is illustrated in the use of itIBIS in the NCR field trial . Similarly , technology transfer is facilitated by involving the users of the new technology in its design and development . The themes of supporting the design process and facilitating technology transfer result in three major issues ( issue here in the sense of a class of requirements ) for functionality of gIBLS and the family of tools that have evolved from it . The first is support for the processes other than design deliberation that are a part of the larger development process . The second is the need for the DR capture technology to merge as transparently as possible into existing practices and tools . The third deals with computing over the structure of the DR network database . 4 . 1 . Design in the Larger Context of Work Design is always embedded in a larger context of work , and design decision making is especially sensitive to the processes and practices of getting the work done - however that is organizationally defined . These processes include project management ( i . e . , people and resource management and planning ) ; communication and coordination with other groups and organizations ; developing and maintaining relationships , meetings , and presentations ; document preparation ; evolution of the understanding of the design problem to be solved ; and , of course , production of the actual design or implementa - tion itself . In that these activities all overlap in time , people , and materials , any tool that supports exploration and reasoning should integrate smoothly with the tools for the other activities . One might object that the activity of design deliberation can be reasonably segregated and supported with a stand - alone tool , and this may be true in certain instances . Indeed , in the research environment , gIBIS has been moderately successful because it is possible to segregate design deliberation . But our field experiences have shown that , in general , design deliberation is not a distinct activity separated from the rest of the process ; it is part of formal and informal meetings , phone calls , chance encounters , lunch discus - sions , and so on , and its progress is intimately bound to the progress of these other aspects of work . A simple example from the field trial was the desire expressed by the NCR design team ' s manager to be able to generate a report showing both the open issues and the " action items " connected with each issue . Once the design team had an explicit representation of open issues , it was natural to want to track the action items that , in many cases , were the stepping stones to getting the information needed to resolve the issues . ( Action items were partly supported D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE in gIBIS , with due dates but no reminder mechanism when the due date arrived , but were not added to the itIBIS notation . ) This experience suggests that if a DR capture tool also supported tracking of the action items associated with issue resolution , then use of DR would be that much more integrated into daily practices . This makes perfect sense from the simple , intuitive perspective that any kind of work , including design , consists of thinking ( reflection , deliberation , exploration ) and doing ( construction , action ) . As the action item example illustrates , one of the most important attributes of the development process is that it happens in time . The temporal dimension of DR may be of secondary importance when one is taking a structure - oriented approach , but the process - oriented approach requires that one provide such services as versioning and configuration management of the DR " hyperdocument " ( hypertext document ) itself . Users of gIBIS and itIBIS reported that they frequently needed to amend either the text within some node or the structure of the network but needed ( presumably because of the tentative nature of the exploration process ) to be able to " save state " in case they had to review later what the previous node contents or network structure had been . In any case , this very demanding class of requirements opens the door to integrating support for DR capture with full - scale project management tools . However , much of the project management functionality that is needed is still only available , if at all , in research tools . 4 . 2 . Minimizing the Net Cost of Adopting DR Capture There is a nearly universal intuitive impression that DR would be a good thing to have in the long term but that the immediate cost of capturing DR discourages the practice of DR capture . In order to make DR capture attractive to designers , this impression will have to be offset by perceptions that DR capture actually has a short - term payoff and that the cost of DR capture has been minimized . Thus , a second class of requirements , stemming from our orientation to technology transfer , deals with ways of minimizing the net short - term cost or maximizing the net short - term payoff of adopting the tools and practices of DR capture in industrial system design . There are several ways in which designers can be shown short - term payoffs from the practice of DR capture . The NCR field trial demonstrated several such payoffs : for example , increased rigor and clarity of thinking , better communication among team members and stakeholders , and improved meetings . Also , as Guindon ' s empirical studies have shown , the process of design is , at a cognitive level , exploratory and opportunistic in nature ( see Gindon , 1990 ) . That is , in solving a design problem of real - world complexity , a D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 382 CONKLIN AND BURGESS YAKEMOVIC designer ' s thought does not proceed in a linear or top - down fashion but , rather , jumps among a range of levels , open issues , and partial solutions . By using a DR capture tool , the designer gains direct support for the memory - intensive process of keeping many issues open while exploring the design space ( Simon , 1969 ) . The [ design ] environment should support rapid access and shifts between tools to represent and manipulate different kinds of ob - jects . . . . Some of these objects are informal requirements , informa - tion about the problem domain , issues and criteria about the system and the design process , design decisions expressed in a formal or semiformal notation , and design process goal management . ( Guindon , 1990 , p . 341 ) Thus , there should be a perceptible payoff simply from augmenting the designer ' s memory with a DR tool . At the same time the payoff from capturing DR is increased , the direct costs must be minimized . Some of the cost is simply the effort of writing out the DR and maintaining the accuracy and consistency of the DR hyperdocument . These are mechanical problems that , although nontrivial , may be reduced by engineering solutions such as voice input and limited natural language analysis ( i . e . , using statistical or neural net technologies ) . Some of the other immediate costs may be less tangible , coming for example in the form of organizational inertia . The very concept of DR as primary documentation is quite different from existing practices , and , in any case , producing documentation of any sort is often only weakly an existing practice . For DR capture to become common practice , then , will require a shift in the culture of design toward more of a process and quality orientation . One technique for altering organizational culture is to introduce minor modifications to existing practices . In the field trial , for example , the NCR design team , which already had the practice of writing meeting minutes for design meetings and sending them to their management , found that switching to an IBIS notation for their minutes was an acceptably small shift in practice . Another way to minimize disruption of the design process is to provide the designers with a clear model of precisely when it is important to capture rationale . If DR must be regarded as an ephemeral substance for which the engineering staff members must be ever vigilant , then they will soon grow tired and resigned about is capture . But if a process model specifies the specific occasions and events when DR is to be captured , then the cost of DR capture is limited to those occasions , and the engineering staff members can be confident that they are producing an appropriate level of DR documen - tation . For example , many development processes call for periodic reviews ( e . g . , requirements , design , and implementation reviews ) ; such review D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 383 meetings might be augmented to include recording the key issues and DR about the artifact under review . Another idea for reducing the cost of introducing a DR capture tool came from another MCC participant company , one that makes heavy use of email and bulletin boards for its design project communications . This company suggested that an email version of gIBIS would be the most effective tool for their DR capture . Because most design deliberation is already conducted using email and a bulletin board tool , DR might be more readily captured if the email and DR capture tools were integrated . One of the biggest problems reported by the NCR design team was that the diagrams and texts of its evolving design could only be represented outside of itIBIS or gIBIS . This was clearly a problem , because the activity of design is normally devoted to construction of the artifact called the design , and most organizations are already stocked with and accustomed to editors and other design - aid tools ( e . g . , Computer Aided Design and Computer Aided Engi - neering tools ) for constructing this ( primary ) artifact . Thus , for DR capture to occur at minimum additional cost , DR capture tools will need to be closely wed to the editors and design - aid tools being used to shape the design artifact : In the DR community , this problem is being best addressed by the work of Fischer et al . ( 1991 [ this issue ] ) , in which the construction and argumentation tools are tightly integrated with each other . However , hypertext is the only practical medium for representing the highly interlinked chunks of DR , and the great challenge facing the hypertext community is precisely this one : how to bring integration and interoperability into the hypertext picture . At the moment , and for the near future at least , hypertext links will join only those documents whose editors have been extended carefully to support a shared link traversal protocol . Failing this , DR support tools will have to : ( a ) be embedded into existing editors and design tools , ( b ) supply powerful text and graphics editing capabilities of their own , or ( c ) take advantage of emerging software integration platforms such as Portable Common Tool Environment ( Thomas , 1989 ) . 4 . 3 . Computing on Rationale The third class of requirements for gIBIS deals with computing over the structure of the DR representation . Our process orientation has focused our research efforts on minimizing the cost and intrusion of DR capture to the designers . Once captured , the DR can be valuable to the designers not only as a record of the design process but also as the basis for analytic tools to add value to the design process . For this short - term value to be added , however , our process - oriented DR representation must be such that useful computation can be done on it , and this need conflicts with the need for the capture process D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 384 CONKLIN AND BURGESS YAKEMOVIC to be natural and unobtrusive ( as discussed in Section 2 . 3 as the fundamental tradeoff of DR capture ) . In fact , the issue of the tradeoff between the expressive power of the DR notation and its ease of use is one of the central problems of the DR field . Lee and Lai ( 1991 [ this issue ] ) show that certain extensions to the IBIS method , such as goal nodes , allow more detailed tradeoff analysis among an issue ' s positions , which in turn supports a quantitative decision support capability that gIBIS lacks . Decision matrices were also proposed by MacLean , Young , and Moran ( 1989 ) as a way of having a computable tradeoff analysis for a decision . Our work undoubtedly represents the low - tech , high - informality corner of the field , which we have generally chosen in favor of lower expressive power and greater ease of learning and use . However , there are a few ways of computing on the issue base that tend to require minimum knowledge engineering effort : multiple views of the DR representation , issuing reminders about time - sensitive elements , syntactic checks on the DR structure , and semantic checks on the DR contents . Views . One straightforward step is to provide customized reports and views on the issue base . Instead of working with the hypertext network itself , the design team and its management can have , for example , a view or report that shows the open issues , ranked in order of decreasing priority , with any open action items that are linked to them . Similarly , customized lists of all decisions made ( issues closed ) within a specified period could be sent to the various stakeholders in those decisions ( e . g . , management , marketing , coop - erating design teams , etc . ) . We expect the important views in a given organization to be dependent on organizational practices and goals and to evolve over time . Two primary views are those of the issue base from the process and structure perspectives . In the process view , time is a major axis , and the temporal unfolding of the issue base - wrong turns , retracted arguments , and all - is the salient property . This is partly what gIBIS shows now . In the structured view , time has been factored out so that the user sees only the current logical state of the design and its rationale . gIBIS also shows this to some extent , depending on how it is used . Sorting out how to separate - and then smoothly integrate - these two views is a major challenge for our research . In particular , the process view is problematic because some aspects of the temporal unfolding of DR are quite useful in making the DR clear to later readers , providing a dimension of narrative that allows the reader to appreciate more easily why certain avenues were explored and others ignored . Conversely , some aspects of the temporal evolution of the DR hyperdocument ( e . g . , corrections of spelling errors ) are trivial and distract - ing . It remains to be seen if the salient features of the exploration process can D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE be extracted automatically or if the creation of a compelling history remains a matter of human ingenuity and discrimination . Reminders . A process - oriented DR naturally contains a variety of time - sensitive items , such as due dates on action items , deadlines on issue resolution , and arguments whose validity might be undone by time ( e . g . , an argument objecting to using processor C because it will not be available until a date 3 months away should signal for reevaluation after that date has passed ) . A process - oriented DR capture tool will thus offer mechanisms for notifying its authors and other stakeholders whenever a temporal dependency has come due . It is possible that receiving reminders from DR tools will further orient users to thinking of and relying on these tools consistently . Syntax Checks . Another kind of simple computation is to perform certain well - formedness checks on the syntax and structure of the issue base . A pattern - recognition engine could , for example , detect if a position were selected , even though its only arguments were all objections , and warn the user , or it could warn the user who tries to mark an issue " resolvedn without selecting any positions . Although one must be careful about when and how to intrude with such warnings , we are experimenting with a version of gIBIS that is coupled to Prolog and that detects such structural conditions in the network ( Hashim , 1990 ) . Because most of these syntactic conditions are defined in terms of network ( nodellinWattribute ) structure , experience with this kind of checking has been limited by the lack of a " structural query " ( Halasz , 1988 ) capability in gIBIS ( or any other hypertext system ) . Semantic Checks . The most challenging computation on issue networks is to monitor the logical and semantic consistency of the issue base and to aid a user ( e . g . , a moderator ) in maintaining the hygiene of the issue base . We mention here four kinds of semantic structures : repairs , decision support , strategies , and constraints . 1 . Repairs : One of the most common patterns of design reasoning is to observe a problem with a proposed design component and to devise directly a " repair " that revises the component and removes the problem . In gIBIS , this takes the form of an argument that objects to a solution presented in a position , followed by an issue that challenges the argument , saying , in effect , " Isn ' t there some way that this position can be repaired that eliminates or addresses the objection of the argument ? " Such structures could be detected and monitored to ensure consistency between the selection of the repair and the deliberation of the originally faulty solution . 2 . Decision support : When working with IBIS argumentation , users some - D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 CONKLIN AND BURGESS YAKEMOVIC times feel that there is more going on in the resolution of issues than qualitative judgments . Some issues are more important than others , some positions are clearer or more cogent than others , arguments have differing levels of importance and validity , and it seems natural to represent these more quantitative factors as part of the IBIS network . However , allowing these measures into the DR places it on the slippery slope of decision support systems and group decision support systems ( for a good review , see Zachary , 1986 ) . One of the great advantages of IBIS for upstream design is precisely that its qualitative approach avoids the complexities of multiattribute utility theory ( see Keeney & Raiffa , 1976 ) and the quagmires of arbitrary and hair - splitting quantitative judgments . One way to avoid this pitfall is to regard these measures as being a quick and convenient way of recording and communicating extremes of these measures to other people . For example , gIBIS currently supports the attribute importance on issues and arguments , and the values of the attribute can be " high , " " medium " ( the default ) , and " low . " If a node ' s importance is either high or low , a small subicon is displayed next to the node in the browser to draw attention to it . One version of gIBIS , called & y @ US , uses a truth maintenance engine to propagate automatically measures of strength and belief around an IBIS network using fuzzy logic ( Lubars , 1989 ) . As might be expected , however , such detailed modeling of the logic of a set of interacting issues requires vastly greater amounts of time and care than simply creating a traditional IBIS network covering the same issues . When in general it will be appropriate to use these much stronger computational models is an open research issue , but our process orientation and our field trial experience make us cautious about expecting designers in commercial settings to adopt tools requiring such large input efforts - even if large payoffs can be promised . 3 . Stratqgies : These are sets of positions from different issues that are all consistent with each other and that reinforce each other . Strategies are used to capture the intuition that in complex problem solving one is rarely resolving individual issues singly or independently . When a strategy is selected , all of its member positions become selected , and all of its issues become resolved . This structure was developed to help represent the process by which the field trial team resolved the set of seven interacting issues described in Section 3 . 2 . 4 . 4 . Constraints : It is a commonplace of system design that two or more decisions interact such that certain patterns of resolution among them do not work well , or at all , and must be prohibited . For example , suppose that Position PI . 1 on Issue I1 is selected but that this makes selection of Position P2 . 1 on Issue I2 invalid because the two positions happen to interact in an undesirable or impossible way . We call this phenomenon an " interissue constraint , " but we have had diffkulty representing constraints using only minor extensions to the IBIS model . The decision representation language D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 387 shows one way of representing such dependencies ( see Lee & Lai , 1991 [ this issue ] ) . Whatever mechanism for constraints is finally developed , however , we can be certain that it , like the other semantic - processing schemes proposed earlier and in the literature , will have the effect of shifting the status of an IBIS network from being a vehicle for structured communication between people to being a formal or semiformal knowledge representation . Our experience with trying to formalize the relationships among the seven interacting issues from the field trial , however , taught us an important lesson : What was operationally important in coping with the seven issues situation depicted in Figure 6 was simply observing that some kind of dependency existed between the issues and not in identifying precisely the logic of those relations . In this case , the power of the IBIS DR was that it simply made apparent to its users what the interacting issues were and that it facilitated devising an entirely new solution that observed the unformalized constraints . 5 . CONCLUSIONS For DR capture to become accepted practice ( from the process - oriented perspective ) the DR documentation must become " living " - It must take on the same qualities of dynamism that weekly sales charts have in the back room of an automobile dealership . Meeting minutes , rather than static notes that are dutifully written up and filed away after every meeting , must be merged into a single , growing meeting minutes hyperdocument . Issues raised repeat - edly must be documented as a single issue ' s discussion , growing and evolving , and not as a series of unrelated incidents . For the documentation to be living , it must possess three qualities : ease of input , effective views , and activeness . We have said much about ease of input in this article . This comes down to minimizing the increase in documentation efforts of the people who understand the DR and can be done by advanced input technologies , use of scribes , or capture of DR from existing forms of documentation . The problem of use of and retrieval from the living hyperdocument presents a greater challenge , because the scalability problem will never be permanently solved . No matter how effective one ' s technologies and practices are in providing effective access to a DR hyperdocument of size S , the steady growth of the hyperdocument through accretion of new knowledge will always overwhelm those technologies and practices when it reaches 2S , or 10s . The natural approach from a database perspective is to develop views and filters that show the user only that portion of the DR needed for the task at hand . But views and filters must always tradeoff between hiding potentially useful D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 388 CONKLIN AND BURGESS YAKEMOVIC information and overwhelming the user with an unmanageably large chunk of the database . Thus , efforts at managing large DR libraries will always be with us , in terms of both continued basic research on the scalability problem and continued need for skillful librarians . The third property of a living document is that it is active . It has the ability to detect important events and conditions that develop within it and to initiate action , from simply notifying a user or librarian to starting substantial computations . A simple example would be the capability to signal that an important issue had remained unresolved or unaddressed for some threshold period of time . A better example would be that a summary of the state of the DR is automatically issued on a weekly basis ( e . g . , percentage of issues open , percentage revolved within the last week , and list of the top ten unresolved issues ) and this report is used as a management tool . Our orientation to the introduction of DR capture clearly has been one of minimizing disruption to the existing design practices and tools of both individuals and groups , while seeking to offer as much long - and short - term improvement to the development process as possible . Nonetheless , it is inevitable that many forms of resistance and inertia will be brought out by the introduction of something so new and different . We believe that our field trial experience has taught us some lessons about how to avoid these pitfalls when introducing DR capture technology , principally : the importance of a local champion ( see also Bouldin , 1989 ) ; the importance of data showing the cost of not capturing DR ( One of the most critical shortcomings in the field of DR research is any study or estimate of the cost of the failure to capture DR , in any area of design and for any type of artifact . ) ; that the imposition of even minimal structure on the informal information that DR represents is generally immediately beneficial ; and that the practice of DR capture will be easier to accept if it can be limited to specific events or occasions , such as design meetings or reviews . However , if we are successful and DR capture really catches on in an organization , the new practices and the existence of the DR are very likely to have significant impact on that organization . It is dificult to say from present experience what that impact will be . If it turns out to be possible for the DR to be maintained as living documentation , then that organization will have acquired a new capacity in the evolution of organizations : organizational memory . That is , rather than depending on the memory and permanence of D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE 389 individuals , organizations will have a capacity to form a record of key events and decisions and to make effective use of that history in building its future . On the other hand , there are some practical and ethical questions that are raised by the existence of DR documentation . After all , on the face of it , DR capture is one of those things , like travel restrictions and layoffs , that is good for the organization but not necessarily good for the individual . Some questions that future research in the field should address are : Who does the routine work of DR capture and DR maintenance , and why ? How is politically or personally sensitive information handled in the DR hyperdocument ? How are the people who were honest enough to document their wrong turns and bad ideas rewarded ? How are they protected ? What prevents the DR from being used against the designers in litigation over the damages stemming from a design error ? If the O - ring fiasco had been documented clearly in the Challenger DR and people were fired on the basis of the DR , why would the shuttle staff members continue to document their DR ? How can sincerity of the DR authors be ensured ? Can it be ensured ? Will the DR become a medium of persuasion ? If so , what keeps it from becoming a tool of organizational politics ? These are questions that perhaps cannot be answered but must be addressed . How DR capture , whether structure or process oriented , takes its place within organizational dynamics and politics will depend very much on the kinds of organizations adopting it and on their sophistication in the use of other high - technology communication media . But DR , like any technology , is not impervious to being misused . Imagine an organization , for example , in which individual performance reviews were based on statistics on one ' s issue base participation during the year and that bonuses were based on total number of issue nodes created and resolved during the year . On the other hand , an enormous amount of chronic organizational waste and irrationality might be alleviated by the appropriate use of organizational rationale . Potential benefits of this research go back at least as far as Doug Engelbart ( see Engelbart , 1963 ) , who articulated the notion that individual and group work could be augmented powerfully by appropriate technologies . Engelbart ' s efforts in this direction over the last 30 years have led him to a unique research approach , in which the developers of augmenting technolo - gies " bootstrap " themselves into their own tools and test their ideas , tools , and D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 390 CONKLIN AND BURGESS YAKEMOVIC methods in doing their own daily work . When we start hearing news on DR tools for which the DR has been captured and is ongoingly used , we will know that the field of DR has passed a critical watershed . Achwhdgments . Many thanks go to the people who have contributed to this work over the years , including Peter Marks , David Creemer , Mitch Lubars , and Colin Potts . The first author did all of the work reported here while in the Software Techology Program at MCC in Austin , Texas , and wishes especially to acknowledge Les Belady and the wonderful research environment that he created there . The second author is particularly grateful for the efforts of Allison Kemp , Tom Klempay , David Pynne , and David Witherspoon at NCR , who were trying to get their real work done while this study was taking place , and for the NCR management support provided by Jim Brown , Hildegarde Gray , Ed Krall , and Roy Kuntz . Finally , we thank Tom Moran and Jonathan Grudin for their guidance in refining previous drafts of this article . REFERENCES Bouldin , B . ( 1989 ) . Agents of change . Managtng the rntroductzon of automated tools Englewood Cliffs , NJ : Yourdon . Burgess Yakemovic , KC , & Conklin , J . ( 1990 ) . Report on a development project use of an issue - based information system . Proceedings of CSCW ' 90 , 105 - 1 18 . New York : ACM . Conklin , J . ( 1989a ) . Design rationale and maintainability . Proceedings oj the 22nd Zntrmational Confsence on Sysdrm Sciences ( Vol . 2 , pp . 533 - 539 ) . Los Alamitos , CA : IEEE Computer Society Press . Conklin , J . ( 1989b ) . Interisme dependencies m gIBIS ( Tech . Rep . No . STP - 091 - 89 ) . Austin , TX : MCC . Conklin , J . , & Begeman , M . ( 1988 ) . gIBIS : A hypertext tool for exploratory policy discussion . Transactions on Ofice Information Systems , 6 ( 4 ) , 303 - 33 1 . Conklin , J . , & Begeman , M . L . ( 1989 ) . gIBIS : A tool for all reasons . Journal of the American Sot + for Infortnation Sctence , 40 , 200 - 2 1 3 . Curtis , B . , Krasner , H . , Shen , V . , & Iscoe , N . ( 1987 ) . On building software process models under the lamppost . Proceedings of the 9th International Conference on Software Engineering , 96 - 103 . Los Angeles : IEEE . Engelbart , D . C . ( 1963 ) . A conceptual framework for the augmentation of man ' s intellect . In Howerton & Weeks ( Eds . ) , Vistas tn infonnation handling ( pp . 1 - 29 ) . Washington , DC : Spartan . Fischer , G . , Lemke , A . C . , McCdl , R . , & Morch , A . I . ( 1991 ) . Making argumen - tation serve design . Human - Computerlnteraction , 6 , 393 - 419 . [ Included in this Special Issue . ] Fischer , G . , McCall , R . , & Morch , A . ( 1989 ) . JANUS : Integrating hypertext with a knowledge - based design . Proceedings of Hypertext ' 89 , 105 - 107 . New York : ACM . Guindon , R . ( 1990 ) . Designing the design process : Exploiting opportunistic thoughts . Human - Computer Interaction , 5 , 305 - 344 . D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014 PROCESS - ORIENTED DESIGN RATIONALE Halasz , F . ( 1988 ) . Seven issues for the next generation of hypermedia systems . Communications of the ACM , 31 , 836 - 852 . Hashim , S . ( 1990 ) . AiGerm : A logic programming front - end for Germ . Proceedings of the SEPEC Cot $ erence on Hypermedia and Information Reconstruction : Aerospace Applications and Research Directions . Houston : University of Houston - Clear Lake , Software Engineering Professional Education Center . Keeney , R . L . , & Raiffa , H . ( 1976 ) . Decisions with multiple objectives : Prejierences and value trade - ofs . New York : Wiley . Kunz , W . , & Rittel , H . ( 1970 ) . Issues as elements of infomtion systems ( Working Paper No . 131 ) . Berkeley : University of California at Berkeley , Institute of Urban and Regional Development . Lee , J . , & Lai , K . - Y . ( 1991 ) . What ' s in design rationale ? Human - Computer Interaction , 6 , 251 - 280 . [ Included in this Special Issue . ] Lubars , M . ( 1989 ) . Representing design dependencies in the issue - based information system style ( Tech . Rep . No . STP - 426 - 889 ) . Austin , TX : MCC . MacLean , A . , Young , R . M . , Bellotti , V . M . E . , & Moran , T . P . ( 1991 ) . Questions , options , and criteria : Elements of design space analysis . Human - Computer Interaction , 6 , 201 - 250 . [ Included in this Special Issue . ] MacLean , A , , Young , R . , & Moran , T . ( 1989 ) . Design rationale : The argument behind the artifact . Proceedings of the CHI ' 89 Conference on Human Factors in Computing Sysems , 247 - 252 . New York : ACM . Mostow , J . ( 1985 ) . Toward better models of the design process . AIMagazine , 6 , 44 - 57 . Naur , P . ( 1985 ) . Programming as theory building . Microprocessing and Microprogram - ming , 15 , 253 - 261 . Simon , H . ( 1969 ) . The sciences of the art $ cial . Cambridge , MA : MIT Press . Steele , G . L . ( 1990 ) . Common LISP : The language ( 2nd ed . ) . Burlington , MA : Digital Press . Thomas , I . ( 1989 ) . PCTE interfaces : Supporting tools in software - engineering environments . IEEE Software , 6 , 15 - 23 . Walz , D . ( 1989 ) . A longitudinal study of group design of computer systems ( Tech . Rep . No . STP - 110 - 89 ) . Austin , TX : MCC . Zachary , W . ( 1986 ) . A cognitively based functional taxonomy of decision support techniques . Human - Computer Interaction , 2 , 25 - 63 . HCZ Editorial Record . First manuscript received July 13 , 1990 . Revisions received February 13 , 1991 , and May 2 1 , 1991 . Accepted by Thomas Moran . Final manuscript received May 30 , 1991 . - Editor D o w n l o a d e d by [ C o l u m b i a U n i v e r s it y ] a t 07 : 33 14 N ov e m b e r 2014