Keeping the Development Environment Up to Date—A Study of the Situated Practices of Appropriating the Eclipse IDE Sebastian Draxler , Gunnar Stevens , and Alexander Boden Abstract— Software engineers and developers are surrounded by highly complex software systems . What does it take to cope with these ? We introduce a ﬁeld study that explores the maintenance of the Eclipse Integrated Development Environment by software developers as part of their daily work . The study focuses on appropriation of the Eclipse IDE . We present an empirical view on appropriation as a means to maintain the collective ability to work . We visited seven different organizations and observed and interviewed their members . Each organization was chosen to provide an overall picture of Eclipse use throughout the industry . The results decompose the appropriation of Eclipse by software developers in organizations into four categories : learning , tailoring and discovering , as well as the cross - cutting category : collaboration . The categories are grounded in situations that provoked a need to change as well as in policies adopted for coping with this need . By discussing these categories against the background of Eclipse and its ecosystem , we want to illustrate in what ways appropriation of component - or plugin - based software is nowadays a common and highly complex challenge for Eclipse users , and how the related appropriation practices can be supported by IT systems . Index Terms— Programmer workbench , human factors in software design , deployment , usage experience Ç 1 I NTRODUCTION A DOPTING appropriate tools and using them effectively has long been recognized as an important factor for improving productivity as well as product quality [ 1 ] . Therefore , unsurprisingly , the history of software engineer - ing is also deeply entangled with the history of develop - ment tools . Back in the early era of computing in the 1950s , development tools were a scarce resource and it was not unusual for programmers to ‘hand craft’ their own . Today the situation is rather different—an abundance of develop - ment tools and other applications . Web browsers such as Chrome or Firefox , for instance , can be individualized by hundreds of extensions , and professional tools like Photo - shop beneﬁt from vivid ecosystems of add - on providers . This trend also holds for contemporary development tools . Users of the popular integrated development environment ( IDE ) Eclipse , for instance , can choose between several dif - ferent UML modeling tools , code management solutions , database editors , to name but a few . The same is true for other popular development tools such as Visual Studio , Netbeans , SharpDevelop or IDEA . Tools and tool integration are broadly recognized as a central concern for software engineering . However , we know little about what this abundance of development tools means for developers in practice . Our understand - ing of the integration work of software developers in real settings is quite limited . Therefore , this paper presents a grounded theoretical study of appropriation work , pro - viding the broader context in which tool integration in companies is embedded and illuminating practices on the ‘shop ﬂoor’ . By providing a rich account of these prac - tices , we will show how appropriation is constituted in learning , tailoring and discovering as well as collabora - tion . Furthermore , we will show how Eclipse users’ actions and their technical , social and organizational sit - uations are intertwined . Our results are based on an ethnographic ﬁeld study in seven heterogeneous organizations involved in soft - ware development ( Table 1 ) . We observed software developers during their daily work , examined their workplace context and interviewed them about their tool usage and appropriation practices . All these organi - zations , despite their differences , use the Eclipse IDE as their primary development environment . This gave us the chance to perform a comparative analysis to identify both commonalities and differences between the cases . The paper is structured as follows : in Section 2 , we give an overview of the history of software development tools , as well as their appropriation and integration . In Section 3 , we outline our methodology and the details of the study . Following this , in Section 4 , we discuss details of the Eclipse ecosystem and the features which pertain to appropriation at the shop ﬂoor . In Section 5 we analyze appropriation work in relation to the various dimensions which affect it . (cid:1) S . Draxler and G . Stevens are with the Department for Information Systems and New Media , University of Siegen , H € olderlinstrasse 3 , 57068 Siegen , Germany . E - mail : { sebastian . draxler , gunnar . stevens } @ uni - siegen . de . (cid:1) A . Boden is with the Usability and User Experience Design Competence Center , Fraunhofer Institute for Applied Information Technology FIT , Schloss Birlinghoven 5 , 3754 Sankt Augustin , Germany . E - mail : alexander . boden @ ﬁt . fraunhofer . de . Manuscript received 9 Aug . 2013 ; revised 22 July 2014 ; accepted 8 Aug . 2014 . Date of publication 14 Sept . 2014 ; date of current version 14 Nov . 2014 . Recommended for acceptance by R . DeLine . For information on obtaining reprints of this article , please send e - mail to : reprints @ ieee . org , and reference the Digital Object Identiﬁer below . Digital Object Identiﬁer no . 10 . 1109 / TSE . 2014 . 2354047 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 1061 0098 - 5589 (cid:1) 2014IEEE . Personaluseispermitted , butrepublication / redistributionrequiresIEEEpermission . Seehttp : / / www . ieee . org / publications _ standards / publications / rights / index . htmlformoreinformation . Finally , in Section 6 , we discuss our ﬁndings with regard to research on software development environments . 2 R ELATED L ITERATURE Workplaces where software engineering is done usually combine different tools for computer aided software engi - neering ( CASE ) and integrate their features into a powerful and often complex ecology . In the following , we give a brief survey of research into workplace design and discuss why the use - perspective is becoming ever more important . 2 . 1 Designing and Integrating CASE Tools The ﬁrst CASE tools aimed at the automation of routinized , basic tasks ( like using compilers to generate machine code ) [ 2 ] were developed in the 1970s . Since then , signiﬁcant progress has been made , both qualitatively , as the complex - ity of task support increased [ 3 ] and quantitatively , as the variety and number of tools grew [ 4 ] . The design of CASE tools in this time increasingly oriented towards the para - digm of ‘software factories’ [ 5 ] . The guiding principle of software factories included separating planning processes from the work at the shop ﬂoor [ 6 ] , [ 7 ] . Here , CASE tools were introduced to ensure that work practices were compli - ant with prescribed development methodologies and pro - cesses [ 8 ] . As a result , individual developers were largely excluded from the design of their own workplaces . The latest paradigmatic turn in the design of Software Engineering tools has been to distinguish repetitive soft - ware engineering tasks that could be streamlined via auto - mation from the “essential” tasks that rest on human expertise , judgment , and collaboration [ 9 ] . This trend is reﬂected by the less restrictive CASE tool design associated with integrated development environments [ 10 ] . In particu - lar , IDE such as Microsoft’s Visual Studio and Eclipse pres - ent a synthesis of the need for individual tailorability and the need for standardization [ 11 ] : On the one hand , they provide freedom for users to adapt the working environ - ment to their needs ( which calls for related organizational protocols [ 12 ] ) . On the other hand , they contribute to the automation of repetitive tasks as well as to standardization . The standardization of working environments also pro - gressed , e . g . by the introduction of the NIST / ECMA reference model [ 13 ] for tool integration . More recent approaches inves - tigated activity - centered tool integration [ 14 ] , model based integration [ 15 ] and developing measures to determine how well a tool might be integrated [ 16 ] . A promising approach is furthermore the combination of sharing artifacts and experi - ences , as both seem interrelated [ 17 ] . However , despite that progress , working environments today often consist of a plethora of tools which are only “partially integrated , forming a complex tool landscape with partial integration . ” [ 15 ] . 2 . 2 Adopting CASE Tools A number of studies on the impact of CASE tools on soft - ware development work were carried out in the 1990s . While several studies mentioned positive effects ( e . g . [ 18 ] , [ 19 ] ) , others reported that introduced CASE tools were never used [ 20 ] or subsequently abandoned [ 21 ] . To under - stand the reasons in more detail , several studies on CASE Tool adoption have been conducted . Focusing on the organizational level , Orlikowski’s widely cited work [ 22 ] showed that the adoption of CASE Tools is complex and dynamic . In addition , she demonstrated that adoption should be understood as an organizational change process that depends as much on organizational and political issues as on technical ones . Maansari and Iivari [ 23 ] further analyzed how expectations and perceptions changed before and after an organization - wide introduction of CASE tools . Several studies [ 23 ] , [ 24 ] , [ 25 ] showed how work process com - patibility and management support are important factors for adoption . Yet , as Riemenschneider [ 26 ] noted , “ contrary to common beliefs , acceptance of the methodology [ and tools ] is not assured just because it is mandated by the organization” [ 26 ] . In order to understand the relevant factors affecting CASE tool adoption by the individual , research focused mainly on adoption theories like the Technology Accep - tance Model [ 27 ] or the Personal Computing Utilization Model [ 28 ] . Both show a signiﬁcant relationship between adoption and factors such as ease of use , perceived useful - ness , and long - term consequences [ 29 ] , [ 30 ] . Furthermore , [ 20 ] , [ 31 ] have shown that adoption is linked to changes in work behavior , requiring new skills and knowledge on the part of individual users . Moreover , it was argued [ 32 ] that tool adoption can lead to the adoption of new methodolo - gies and vice versa . TABLE 1 Visited Research Sites Employees Domain Gathered data Alpha 10 Software Development ( shared workspace system ) 3 interviews 3 Eclipse footprints Beta 8 þ free - lancers Software Development ( business games , web development ) 3 interviews 3 day observation 5 Eclipse footprints ( of 4 persons ) Gamma ca . 1200 ( ca . 90 developers ) Insurance company þ in - house software dev . 3 interviews 5 Eclipse footprints Delta ca . 50 Software Development and consulting ( Eclipse RCP , web development ) 4 Interviews 2 Eclipse footprints 5 day observation Epsilon > 2000 ( 30 maintenance dept . ) Research facility , Inhouse development for Machine maintenance 3 interviews 6 Eclipse footprints Zeta ca . 250 Software Development ( multimedia and web applications ) 5 day observation 4 interviews Theta ca . 35 Software development ( Eclipse RCP , web development ) 2 interviews 3 þ 7 Eclipse footprints of two teams 1062 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 Software development is today largely team - based [ 26 ] , [ 30 ] , [ 33 ] , [ 34 ] which implies a third important inﬂuence on adoption , situated between the individual and the organization . However despite its importance , only few studies explicitly address team practices . Exist - ing studies typically argue that the social context has a double impact : With regard to social norms , teams exert a pressure to accept and internalize common and com - patible styles of work . These pressures can promote [ 29 ] , [ 33 ] , but also impede the adoption of new tools and methodologies [ 26 ] . 2 . 3 CSCW Studies on Tool Appropriation The social dimension of software adoption and adaption was investigated in more detail in the ﬁeld of CSCW . In the 1980s and 1990s , studies showed how non - programmers tai - lored newly introduced systems in the local context of non - SE work environments . MacLean [ 36 ] investigated a system that allowed ofﬁce workers to create buttons on their user interfaces which contained small macro - like functionality . Furthermore , these small programs could be shared through an email - like system . In a similar way , patterns of cooperation emerging in the use of the sophisticated tailor - ing and extension facilities offered by many CAD products were identiﬁed [ 37 ] . Further , studies on X - Windows modiﬁ - cation and email ﬁlter conﬁguration identiﬁed common pat - terns of sharing tailored artifacts within an organization [ 38 ] . These studies showed that even non - programmers can tailor in a small way . More complex modiﬁcations , how - ever , are usually carried out only by more motivated and technically skilled users . Furthermore , both studies [ 37 ] , [ 38 ] identiﬁed a third group of users , situated between end - users and developers , able to contextualize existing modiﬁ - cations by acting as bridges between developers and users who do not tailor themselves . MacLean et al . [ 36 ] , called the three groups programmers , tinkerers , and workers . In Mackay’s work [ 38 ] , they are called lead users , translators , and ordinary users . A later study that focused more on collaborative aspects of tailoring [ 39 ] argued for support mechanisms for tailored artifacts . These include repositories for tailored artifacts , supplemented by features for sharing knowledge about how these artifacts should be used . One of the few studies in the context of modern IDE usage [ 40 ] showed that the ﬁrst problem of adoption is the necessity to discover relevant artifacts . The discovery mode described as “peer interaction” between developers includes observations as well as direct recommendations in order to become aware of interesting artifacts for adoption . This can happen face to face or even through the use of eclectic tools like social media and instant messengers in order to share customizations and especially to help peers . This can be considered especially important , as e . g . many Java develop - ers ( 12 of 14 , based on interaction histories during a study of Eclipse usage ) use third - party plug - ins [ 41 ] . Furthermore , the beneﬁt of role - based , coarse grained tai - loring functionalities in the context of the Eclipse IDE ( IBM Rational Application Developer—RAD ) have been shown [ 42 ] . The ﬁndings suggested that tailoring mechanisms that are ﬁner grained and more related to tasks instead of roles , as used by RAD , may be more effective . Furthermore , beneﬁcial to understanding the results of this study is Sigfridson’s endeavor to understand how devel - opers ( in distributed projects ) gain and develop their practi - cal knowledge [ 43 ] . Although it does not focus on adoption and adaption , it presents how three categories ( continous change , equivocal situations and external inﬂuence ) lead to a very complex ﬁeld of work and at the same time force its members to continously adapt their practical knowledge . During recent years , efforts were made to cover both , adaptation ( tailoring ) and adoption ( deciding to use something ) , under a single term : appropriation . The term relates not only to the repurposing of technical artifacts for one’s own aims or the work involved in doing so , but is held to be a general prerequisite for making practical use of technologies [ 44 ] , [ 45 ] , [ 46 ] . In this sense , the con - cept can be used as a guiding principle for ﬁeld studies on software adaption and adoption . 2 . 4 Discussion During the last few decades , great progress in the design of SE workplaces has been made , entailing a shift from design - ing isolated tools to highly tailorable working environments which allow the easy integration of additional tools . In addi - tion , the way tools are distributed and integrated has radi - cally changed . Instead of pre - packaged software bundles and occasional updates , the rise of the internet has fostered the creation of open and standardized platforms , accompa - nied by product communities . These so called software eco - systems [ 47 ] have radically changed the whole tool market . More third parties ( commercial companies , as well as single persons ) began to build tools , offering new features and bug ﬁxes in very fast cycles . These tools can be installed by Eclipse users , mostly free of cost and during runtime [ 48 ] . As a result , the integration work has to some extent shifted from plug - in manufacturers to Eclipse users . Truly identical working environments became increasingly rare [ 49 ] . Some - times the Eclipse user is the ﬁrst person who runs an “integration test” that veriﬁes if this particular set of installed tools is compatible . The appropriation work that emerges with this tailoring of modern tool ecosystems [ 47 ] as part of SE workplaces— has not yet been investigated in detail . From previous research several factors that promote or hinder appropria - tion are known [ 20 ] , [ 21 ] , [ 22 ] , [ 23 ] , [ 24 ] , [ 25 ] , [ 26 ] . In particu - lar : management support , perceived usefulness and ease of use are held to be factors that signiﬁcantly inﬂuence appro - priation . In general , we cannot consider workplace design merely as a technical challenge , but also have to understand it as a change process that involves the individual , the orga - nizational and the team level . However , these ‘social’ factors have not , as yet , been investigated in relation to professional software developers . In order to contribute to an understanding of tool adop - tion and adaptation of software developers in its social con - text , we want to combine the tradition of grounded theoretical studies in Software Engineering [ 22 ] , [ 50 ] with traditional ethnographical work on collaborative work prac - tices in CSCW [ 38 ] , [ 51 ] to uncover the underlying structure of appropriation work in the case of modern IDEs . For an example of this approach , applied to research software development work , see [ 43 ] . DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1063 3 R ESEARCH M ETHODOLOGY For our study , we chose the Grounded Theory approach [ 22 ] , [ 52 ] , [ 53 ] . This allowed us to recover the structure of appropriation work from within the ﬁeld in an explorative manner . It also allowed a focus on contextualized and situ - ated practices that have been omitted in tool adoption research thus far , and hence the building of substantial the - ories that are closely tied to the observed context , yet never - theless are ﬁt for ‘analytic generalization’ [ 54 ] . Our aim was therefore not to quantify practice occurrences through searching for predeﬁned categories , but to explore the range of existing practices . The literature on Grounded Theory is shaped by an ongoing debate on the usage of preconceived categories and existing literature as material for analysis , going back to slightly different variants of the method’s founders , Glaser and Strauss . Our analysis followed the approach of Strauss , which allows the inclusion of existing concepts and ﬁndings from literature during coding phases . All notes , interviews and related artifacts that we gathered in the ﬁeld , were coded using this approach . In 2011 , parts of our study have been published with a focus on appropriation work at one small company ( called Alpha in this publication ) [ 49 ] . This paper extends the initial study through including ﬁeld data of six heterogeneous organizations , leading to important clariﬁcations and recon - siderations in our analytic understanding . 3 . 1 Sensitizing and Constitutive Concepts The theoretic concepts of appropriation , practices and situations are of special importance for this ﬁeld study . They were shaped by our experiences in the ﬁeld and have proven con - stitutive of the phenomenon of appropriation work . In this paper , we understand appropriation as the network of activities users continuously perform to use software arti - facts constructively and to incorporate software artifacts into their lives for better or for worse [ 55 ] , [ 56 ] . We under - stand practice as a routinized pattern of human action [ 57 ] . It is represented by a ‘skillful performance’ of activities , which are reproduced in a speciﬁc context . A practice is grounded in , often implicit , background knowledge and implicit normative rules , which render the action meaning - ful within its context . In contrast we understand a situation as a speciﬁc constellation in which an activity takes place . Appropriation is therefore mostly a lens for our research and we will undertake efforts to explore its meaning in the context of Eclipse IDE usage . We intend to gain this under - standing by investigating observable and describable practi - ces and situations of Eclipse IDE users . 3 . 2 Data Sources , Selection and Analysis The data for this study was collected between 2006 and 2009 at seven different research sites ( Alpha to Theta ) . All sites are German organizations which were at the time involved in software development . All of them utilized the Eclipse IDE for at least part of that work . The sites were chosen spe - ciﬁcally for the comparison of results ( that way Grounded Theory achieves signiﬁcance ) . Therefore , we chose organi - zations of different size , structure , customer base , business models and technology used ( see Table 1 ) . At three sites , we started with several days of work / workplace observations . At every location , we carried out two to four on - site interviews in situ . Most interviews took around 1 . 5 hours . Few interviews were shorter in duration and some took about 2 hours . In addition , we collected Eclipse conﬁguration ﬁles . 3 . 2 . 1 Observations At Beta , Delta and Zeta , we carried out several days of obser - vation . At Beta , we tried to observe the whole company because its small size and work structure did not include ﬁxed development teams . At Delta and Zeta , —much bigger organizations—we concentrated on particular development teams . We followed the observed teams closely , took notes and asked questions at appropriate times . 3 . 2 . 2 Interviews Overall , we interviewed 21 people at their desks or in meet - ing rooms of their organizations . Interviews that started in a meeting room always ended with visiting the actual work - place . Therefore , we were able to observe modiﬁcations the interviewees made to their Eclipse installation ( s ) . This again enabled us to ask detailed questions about these observa - tions . We regularly made use of this opportunity to clarify responses given during the interviews . The participants’ Eclipse usage experience ranged from two to nine years . Some were ﬁnal year university students but most were professional software developers with sev - eral years’ experience . We also interviewed the CEO of Alpha as well as the CTO of Beta , who both did some devel - opment work from time to time . At the larger organizations ( e . g . Gamma and Epsilon ) , we interviewed people who worked together as a workgroup or development team . Before our ﬁeld trips , we prepared an interview guide - line . It included the following topics : (cid:1) Personal aspects such as age , professional career , period of Eclipse usage and experiences . (cid:1) Aspects related to the organization such as size , busi - ness model , and style of working . (cid:1) Detailed questions on Eclipse usage , conﬁguration efforts and collaboration . Following the iterative and adaptive work - theory build - ing principle of Grounded Theory [ 52 ] , we extended and focused our guideline during the study , based on the results of earlier interviews . Additionally , if participants brought up related topics that seemed to contribute to our research question , we asked further questions to investigate this in more detail . All Interviews were audio - recorded and tran - scribed with the consent of interviewees . 3 . 2 . 3 Artifact Analysis—Eclipse Footprints The Eclipse development environment is a complex product and Eclipse users can tailor substantial aspects of it . The key questions in our interviews centered around which software components ( features / plug - ins ) had additionally been installed by an Eclipse user and which preference settings had been changed . Eclipse allows us to extract this kind of information and export it to a plain text ﬁle , naming each of the installed 1064 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 components as well as their version , preference settings etc . These ﬁles can be seen as ‘footprints’ of Eclipse installations . They provide insight into the conﬁguration decisions of Eclipse users . We carefully analyzed the footprints by com - paring objective data with the statements of the owner of this Eclipse installation . Even though the extraction mecha - nism changed between different versions of the Eclipse IDE , which rendered a quantitative analysis less meaningful , the conﬁguration ﬁles were important evidence for our study as they allowed us to ask further questions in case of mis - matches between interview and footprint or helped to vali - date the statements from the interviews . 4 U NDERSTANDING THE T HREE F ACES OF E CLIPSE This section will provide an introduction to the Eclipse IDE , its typical users , and the Eclipse community in general , con - sidered as a software ecosystem . It is intended to provide context for readers who are not familiar with the Eclipse project . It should help the understanding of practices , restrictions and problems that will be presented in the fol - lowing parts of the paper . 4 . 1 Typical Eclipse Users The Eclipse IDE ( standing for Integrated Development Environment ) is a tool - set for software developers . There - fore , the user groups associated with it tend to be software architects , developers and testers and other highly trained specialists . Nevertheless , it puts its users in a difﬁcult situa - tion . On the one hand , it is a powerful and very tailorable set of tools that ﬁts a very broad range of tasks . But often - times it also forces users to tailor it to their speciﬁc needs . Tailoring the Eclipse IDE is often a very complex task . It is time consuming and can generate error , as incompatibilities between components can appear . Problems range from components not working or disappearing , apparently strange system behavior , to completely broken installations . In fact , tailoring Eclipse can become so complex that even software engineers can easily reach their limits . 4 . 2 An Architecture and User Interface , Designed for Flexibility If the practical act of tailoring Eclipse can be quite compli - cated , the technical foundations that allow this kind of tai - lorability are just as elaborate . Eclipse was built for ﬂexibility . Since the release of Eclipse IDE version 3 . 0 in 2004 , everything is part of a component , a so called plug - in , which makes Eclipse stand out from most other software . Usually , ﬂexible systems consist of a monolithic core , sup - plemented by additional components ( see Fig . 1left ) . Eclipse is a complex framework of interconnecting components , delivering all of the functionality ( see Fig . 1right ) . There is literally no monolithic core or base , just a tiny runtime which loads and executes plug - ins . In Eclipse terms : “ Everything is a plug - in” [ 12 ] . From a purely technical point of view , other software may be similarly structured . What makes Eclipse interesting is the fact that Eclipse users are aware of recently introduced architectural specialties . The Eclipse architecture separates components into two main groups . A ) Containers , or ‘features’ , used to group functionalities . B ) Components that deliver the functionality , called plug - ins and fragments . The Eclipse IDE comes pre - conﬁgured with a number of features , and each includes sev - eral plug - ins and fragments . Several of such preconﬁgured packages are offered , all of them specialized integrated development environments for software development . Examples are specialized Eclipse IDE for testers , Java devel - opers or C þþ developers . 1 Even so , there are often compo - nents that are very useful , or even necessary , which are not included . Therefore , an Eclipse user often has to add further features / plug - ins in order to modify Eclipse’s behavior to his / her needs . There are over a thousand components avail - able for Eclipse . Theoretically Eclipse users can even write their own components or adapt existing ones to their needs . Another level of complexity is added as most compo - nents are extensively conﬁgurable . For example , the text editor component can be conﬁgured in terms of font , font size , coding conventions , colors , etc . As an example , Eclipse IDE version 3 . 6 with additional components for Android mobile phone development shows 139 pages of preference settings , with each page showing several settings . Often these preference settings are preconﬁgured to be usable right away . Sometimes , however , they need to be conﬁg - ured in order to work properly . A tool that warns the user about bad coding style needs to know what problems it should mark . Similar complex possibilities and necessities for conﬁguration occur with many components . A third level of complexity is added as the Eclipse user interface is also highly conﬁgurable . It is structured into Views , Editors and Perspectives . Views and Editors are small windows within the Eclipse window . They show only a very small and speciﬁc portion of information . Examples are a log of warnings and errors , ﬁles of a project or a list of bugs to ﬁx . Interacting with the content of a View often acti - vates or opens a different View to show details , or an Editor to interact with and change that information . Views can be modiﬁed in a variety of ways . Views can be opened and existing ones can be closed . They can be resized and relo - cated within the Eclipse window . Furthermore , Views can Fig . 1 . Architectures of traditional software ( left ) and the “everything is a plug - in” - approach of Eclipse ( right ) as perceived by it’s users . 1 . http : / / www . eclipse . org / downloads / ( Accessed February 24th , 2014 ) DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1065 be minimized , showing the view as and when it is needed , but hiding it if not . A further aspect of Eclipse UI architec - ture is the concept of Perspectives . A Perspective is a set of Views , with deﬁned locations , sizes and modes . Perspec - tives are an easy way to switch e . g . between a set of Views used for modeling , and a set of Views for coding or debug - ging . They reduce the need to open and set - up a dozen views to one click . 4 . 3 The Community’s Rhythm Eclipse is also well known for its lively community ( includ - ing Eclipse IDE users—ordinary developers and our ﬁeld for research—as well as people who further develop the Eclipse IDE ) . This community consists of amateurs , stu - dents , freelancers as well as members of companies and large enterprises . The joint effort to make Eclipse continu - ously better is led by a very small organization : the Eclipse foundation . The Eclipse foundation does not determine the content of an Eclipse installation package or the direction the future development should take . Nor does it do the development work that produces the Eclipse IDE . Rather , it provides connectivity and ‘rhythm’ for most of the involved people . From 2004 to 2012 , the Eclipse community released yearly major version upgrades of the main Eclipse IDE com - ponents every June . Some contributors who offer additional components follow this cycle , while others do not . Further - more , milestone releases as well as unstable nightly builds are available for everyone to use and test . This complicates the situation for Eclipse users even more , as they usually face an upgrade of their main working tool at least once a year ( the Eclipse IDE ) . This is especially complicated , as some components may have changed , while others haven’t , introducing new compatibility issues . 5 M AINTAINING THE C OLLECTIVE A BILITY TO W ORK The Eclipse IDE is a very ﬂexible , powerful and complex tool for software developers . Nevertheless , if changes are necessary , problems can arise . The uncertain rhythm we refer to above means Eclipse users are under pressure to adapt . Therefore maintaining the collective ability to work has become a very important aspect of work . The ﬁndings of this study directly address this by presenting the four main aspects of this work to maintain the workplace : learning , tai - loring , discovering and collaborating . We introduce these situated work practices by drawing the connections between the need for change and particular situations , prob - lems or issues that were drivers for this need . 5 . 1 Learning and Gathering Information Throughout the study , we could only ﬁnd a few restrictions on participants’ ability to choose plug - ins and to modify Eclipse for their daily work . When the members of the com - panies we studied started to use Eclipse , they began to rein - stall , modify and improve the software in order to deal with the upcoming challenges of development work as well as new developments in the Eclipse community . The result was a complex and continuous process of gathering infor - mation and learning over several years that we present in the following sections . 5 . 1 . 1 Usual Topics to Learn About The software developers we studied used such tools to a sig - niﬁcant degree to support their work . To beneﬁt , however , they needed to be aware of what tools at that point existed , what functionality they included , if they were compatible with their environments and how they could be practically used . Therefore , they needed to get an overview of existing tools , i . e . plug - ins , and investigate their functionalities . The ﬁrst step for participants was to search for a tool that added support for e . g . the source code repository GIT or UML modeling . This was followed by a thorough check to see if that tool was compatible with the currently used Eclipse installation . Several indicators for compatibility checking were used . The most important and easiest aspect to check was the major Eclipse version . But the task could be more complex , as additionally installed plug - ins can be incompat - ible with each other . Furthermore , plug - ins that were new to the user needed to be thoroughly understood in order to be of practical use . This involved far more effort than getting an overview of the tool’s functionality . And lastly , many tools had to be conﬁgured in order to be helpful . 5 . 1 . 2 Learning Practices A special source of information and a foundation for learn - ing about recently introduced aspects was the Internet . Using general purpose search engines such as Google was a typical practice throughout the study . This was a step in a quest for information to solve certain problems or to stay informed of activities in the Eclipse community . Used search terms were the names of known plug - ins , certain topics such as “PHP programming Eclipse” or details of a problem encountered by the users ( e . g . an error message ) . While searching presents the ﬁrst step , it was just the pre - lude for reading . We found usage of internet - based media such as websites , user communities or mailing lists , which report on software development and Eclipse related topics . This includes news about upcoming or updated plug - ins , conﬁguration manuals as well as tutorials for usage of cer - tain tools and technologies . The Eclipse magazine is a journal on the German market that exclusively addresses topics around the Eclipse IDE and Eclipse community , for example current plug - ins , their applications and functionalities as well as their conﬁgura - tion possibilities . Even more importantly , perhaps , there are general software development related magazines . These are not focused on Eclipse , but address topics around Eclipse from time to time . Participants read both , although some stated that they did so only from time to time . Occasionally , tutorials and manuals that explain a certain plug - in refer to an older version of the plug - in . Therefore , learning by doing or exploring was considered a very impor - tant practice , even when following the existing documenta - tion . When in doubt , the participants explored a plug - in’s functions , gathered experiences through using it and observed and reﬂected on their progress in order to assess its beneﬁt for their work . This included creating small exam - ple programs to try certain functions . Examples for such tools are code editors for additional programming lan - guages such as Python or PHP , functionalities for the crea - tion of SOAP web services , quality control support and 1066 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 source code repositories . Plug - ins under exploration were even used for working on commercial projects , as otherwise it would not have been possible to investigate a new tool or setting in real world settings . Sometimes , software developers run into problems they cannot solve on their own . A recurrent practice was to turn to a colleague for a different viewpoint or to ﬁnd possible solutions . These situations offer the possibility to learn from a colleague’s experiences . During these sessions , the icon of a newly installed plug - in would become visible and trigger a conversation about its functionalities and possible uses . The reason for this help giving activity was often not directly related to tools . However , the study’s participants learned about plug - ins and their functions this way . Learning from colleagues was of course not limited to breakdown situations . During the ﬁeld study , it became clear that this also happens in a more subtle way . Gamma , Delta as well as Theta from time to time make use of the so called Pair Programming technique . Pair programming means two people share one computer during development work . One person takes the role of the navigator , while the other person takes the role of the driver . The navigator thinks about the current development task on a larger scale , while the driver thinks more closely about existing code and uses keyboard and mouse to directly manipulate source code . Because of this , they often sit at a colleague’s machine . This way , they learn not only about each other’s skills , but also about the other person’s tools , their conﬁguration as well as their func - tions . While serendipitous , these practices have several bene - ﬁts as compared to reading . First of all , certain aspects ( e . g . merging branches within a source code repository or the crea - tion of unit tests ) can be demonstrated live by the more expe - rienced person in real world customer projects , rather than example code / projects alone . Furthermore , the receiver of the information can assess value more realistically than when information comes from websites , as both persons may have a common background ( e . g . working at the same project ) . The case of Gamma showed a particularly interesting occurrence of learning , as when two members of that orga - nization told us about a conference visit . The conference addressed general Java - related software development as well as upcoming technologies and tools in that ﬁeld . Through a talk , they learned about the Mylyn Eclipse plug - in ( or Mylar at the time ) that was relevant to their work . Their perception was that it would allow them to view their work tasks directly within their Eclipse IDE , instead of using an additional web browser window and furthermore to easily integrate information from their working environ - ment into their task management system . A few days later , they were experimenting with this plug - in and a few weeks later , they begun using it as one of their standard tools . While this is comparable to learning from a colleague , there is an additional layer to it , as they learned from an unknown person . Normally , colleagues provide trustable context knowledge but , in this instance , it was the inventor of the plug - ins who was giving the talk , and so his recommenda - tion was trusted . 5 . 1 . 3 Contrastive Cases At Alpha , only a few employees were using Eclipse . Senior developers , who were used to working with console based tools of typical Unix / Linux environments , were less likely to see the beneﬁt of Eclipse and refused to constantly strug - gle with informing themselves . Younger employees , in con - trast , had familiarized themselves with the Eclipse IDE during their academic education . They viewed Eclipse as a useful set of tools that was more beneﬁcial than the alterna - tives . For them , continuous learning about new develop - ments in Eclipse was an integral requirement for the maintenance of their skill levels . The project team at Gamma , contrastively , delegated almost the whole process of creating a usefully conﬁgured , fully working Eclipse installation to one person . Because of this , others told us that reliance on this co - worker meant that reading the usual information sources on Eclipse became less likely . 5 . 2 Tailoring Tailoring activities were carried out to adapt the Eclipse IDE to the speciﬁc needs of its user . These activities were closely related to learning processes , as new needs and new possi - bilities for tailoring emerged through learning processes . 5 . 2 . 1 The Tailoring Possibilities of Eclipse The simplest form of tailoring was modifying the user inter - face , using the possibilities introduced in Section 4 . 2 . The possibility to deﬁne perspectives was held to be especially useful and several participants used this to redeﬁne and modify existing perspectives . However , we found no occur - rences of newly created perspectives . A more powerful but also more complex tailoring option was the installation of additional components , as these delivered new functional - ity . Some of these were quite complex and needed to be con - ﬁgured to work properly , which added a new layer of tailoring possibilities . The most powerful tailoring possibil - ity however was to create new plug - ins from scratch . 5 . 2 . 2 Tailoring Practices The means to tailor the user interface are integrated directly into Eclipse . Perspectives were tailored directly after Eclipse had been installed . This happened e . g . if a new version of Eclipse was released or after a major breakdown of the installation . Additionally , this happened after a new plug - in was installed , as new Views sometimes had to be inte - grated into a Perspective afterwards . During a work day , participants resized and moved Views regularly if space on the screen was needed for other purposes . Furthermore , during work place visits and in inter - views , we found that people installed additional plug - ins . The installation process depended on the form of delivery . At the time of the study , the vendors often offered a down - load , which usually contained all the ﬁles needed . These had to be extracted and manually copied over to a special folder within the Eclipse installation folder . Eclipse would be expected to detect and install the new plug - ins at the next start . This way was considered tricky , however , as it was hard to track whether the installation process worked properly , especially if the user had not previously used the plug - in . If an extension was delivered through an Update Site , a special user interface could be used to install the extension , the so called Update Manager . After inserting DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1067 the URL of an Update Site into the Update Manager , it would detect the available Features ( which include the plug - ins ) . The user could select the Features that should be installed and the Update Manager automatically down - loaded and installed these . The Update Manager did warn if any errors appeared during the installation but it was not easy for the participants to track down the reported problems . For example , the mechanism complained about missing plug - ins , which were deﬁnitely available , down - loads stopped in non - reproducible manner or dependen - cies could not be found , even if the necessary repositories were included . While the Update Manager was the more convenient tool for tailoring Eclipse , the participants stated they used manual installation for a long time . It was only towards the end of the study ( around 2009 ) , that users began using the Update Manager more frequently , as it was completely rebuilt and the Eclipse Foundation recom - mended avoiding manual installation . Throughout the whole study , we found only one case of custom plug - in development . A member of Alpha created a plug - in that delivered code formatting functionality . Com - pared to most other Eclipse plug - ins , the functionality was quite limited . But in this special situation , incorrectly for - matted source code resulted in compiler errors . Therefore it solved a very speciﬁc problem for this group . Eclipse offered a central mechanism to tailor the conﬁgura - tion of plug - ins , the so called preference settings dialog . Additionally installed plug - ins often extended this dialog by adding one or more pages with settings that changed the plug - in’s behavior . In some cases , additional plug - ins required separate conﬁguration . Similar to plug - ins , prefer - ence settings appeared to be quite stable throughout the typical working day in the study . Events that drove the par - ticipants to tailor the settings were the installation of new plug - ins , or when Eclipse had to be reinstalled . The Eclipse IDE is delivered as an archive that can be extracted in any folder of a computer and executed from that place . This enabled users to install and tailor several instances of Eclipse in parallel . We found several partici - pants who made use of this feature . They used different ver - sions of Eclipse , e . g . this year’s release and last year’s release ( as required for a certain project ) . In addition to this behavior , participants kep different Eclipse installations for different tasks . Alpha and Beta both used different pro - gramming languages ( and related tools ) for different proj - ects . Alpha relied on Python , complemented by Java , while Beta used PHP complemented by Java . Employees who often had to switch between projects were likely to use two different Eclipse installations . Each was therefore conﬁg - ured for the project at hand . Participants from Zeta used this technique because of incompatibilities between certain plug - ins . By using two Eclipse installations , they were able to separate the problematic plug - ins from each other , although this was only possible if the incompatible plug - ins were not both essential for the task . At Zeta , it was a common practice to archive Eclipse installations and switch to a new one , when a customer - paid project was shipped . This practice allowed the users to unpack and re - use an old , already tailored Eclipse installa - tion that was fully compatible with the shipped software project , even years later . Thus , if the customer required ﬁxes for certain bugs or needed additional functionality , they could start working very quickly . 5 . 2 . 3 Restrictions on Tailoring Tailoring activities were sometimes subject to technical or organizational restrictions . These were mandated either by other members or departments of the organization or deﬁned by internal , often implicit agreements . Participants ( especially members of Zeta ) argued that they felt their superiors expected them to be compatible with other parts of the company , even if this was never really made explicit . Zeta employees explained that while conforming to this expectation , they at the same time tried to explore new and probably unstable Eclipse - related tools from time to time . Organizational restrictions emerged mainly from daily work and were of an implicit nature . For example , the par - ticipants could freely choose additional plug - ins , but felt they had to respect organizational restrictions such as the company’s infrastructure or the programming languages in use for the project . While these aspects were clearly external restrictions , the participants argued this imposed no partic - ular constraint since the usage of that particular program - ming language or infrastructure had been their own ( collaborative ) decision in the past . Technical restrictions could be observed in several cases . At Zeta , the usage of plug - ins for web service creation caused breakdowns of the Eclipse IDE . The participants used multiple differently tailored Eclipse installations and backup copies of the whole IDE to solve this problem . Gamma , as a large company had its own IT department , which used a very restrictively conﬁgured Firewall . As a result , the members of Gamma were not able to install addi - tional plug - ins or even updates for Eclipse at all . To avert - conﬂict with the IT department , the team decided to delegate all tailoring tasks to one person . The person most interested in news concerning Eclipse technology tailored an Eclipse installation suitable for the whole team from home and distributed it via a memory stick . This was repeated once a month to make use of updates and integrate additional tools . 5 . 3 Discovering During the study , it became clear that serendipitous discov - eries were an important aspect of actions to maintain the collective ability to work . We found a mixture of discover - ies , learning , tailoring and collaboration . Discovering relates to information on tools / plug - ins , their functionalities , com - patibility issues , etc . Discoveries can trigger individual or collaborative learning or tailoring activities . Tailoring activi - ties can , however , also result in new discoveries . 5 . 3 . 1 Things to Discover The different groups’ work practices were closely related to certain plug - ins , as the functionalities and usability of each plug - in suggested a certain style of working . For example , the usage of a code editor for the Python programming lan - guage indicated Python development . Discoveries of new and helpful Eclipse plug - ins were therefore important events . These discoveries had the most potential to change future work practices . At Alpha , the Eclipse plug - ins for 1068 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 Python development were spread entirely by serendipitous discoveries . As Eclipse plug - ins tend to be complex , the settings of a given plug - in were often arrived at through discovery . This happened especially with plug - ins for quality control . Find - Bugs and Checkstyle are two plug - ins in this category . They made extensive use of tailorable rules to display warnings related to the code the users wrote . As these were only of interest in combination with the rules in use , these settings were very important . Single functions or even the keyboard shortcuts of plug - ins were also subject to discoveries . It was reported that new icons on someone else’s screen led to certain unknown but potentially interesting new functions ( e . g . the Eclemma plug - in for unit test coverage support adds one new icon to the toolbar which is visually very different ) . 5 . 3 . 2 Serendipitous Situations that Lead to Discoveries At Gamma , the above - mentioned conference visit led to the discovery of a new plug - in ( Mylyn ) . After returning to the company , information seeking and learning practi - ces were used to explore the beneﬁts of the Mylyn plug - in for the project team . Reading the existing print maga - zines led also to discoveries . As with the conference visit , the participants’ practice of reading magazine articles on Eclipse led to discoveries and contributed to learning about new plug - ins . Similar conclusions can be drawn for online magazines . While most of these report on software engineering in gen - eral , they sporadically also report on Eclipse . New plug - ins may only appear once a month or every few months , but even reading a note about the update of an existing plug - in might be a discovery . Practices that led to beneﬁcial discoveries involved per - sonal contact with colleagues . Examples were collaboratively solving problems or working together at one machine . These practices sometimes revealed new icons and keyboard shortcuts that led to previously unknown possibilities ( e . g . a shortcut to organize imported java packages or reformat - ting the source code ) . Learning and tailoring processes fol - lowed these discoveries , as with practices reported above . Distinct from these , however , personal contact was per - ceived in this instance as especially valuable . Participants argued that third party information sources are often very interesting , but co - workers share similar work contexts . They work collaboratively on the same projects , use the same company infrastructure and can rely on common suc - cess and failure stories when discussing the use and limits of a certain tool . This rendered discoveries at a co - worker’s workplace more useful and trustworthy than discoveries made through magazines or online sources . The usage of exploration environments also led to discover - ies . Exploration environments were mostly freshly released Eclipse versions which were tailored in order to explore new functionalities or to test for compatibility issues . Dur - ing this exploration process , participants sometimes expected to make discoveries ( e . g . to ﬁnd a new version of a plug - in compatible to the project , while the previous ver - sion might have been incompatible ) . We were also told that this process had been accompanied by unexpected discoveries in the past , as newly introduced functionalities appeared at the user interface . E . g . at the time of the study , support for the Subversion source repository was included with the default download packages of the Eclipse IDE . Prior to this , Eclipse users had to get to know about this plug - ins in other ways . 5 . 4 Collaboration The problem of maintaining the ability to work over a lon - ger period concerns the whole group , as every team mem - ber can run into problems and people from time to time depend on each other’s work . A variety of actions that con - tribute to appropriation , could also be seen as collaboration , including sharing information and virtual artifacts as well as asking for help and solving problems together . 5 . 4 . 1 Actors and Areas for Collaboration Collaborative effects could be observed ﬁrst and foremost between colleagues , working together as a group or project team or as members of an organization . Even between co - workers , different levels and areas of expertise became visi - ble . The perceived level of expertise of a colleague was implicitly used as a measure for trust for this person’s recom - mendations . As part of project work at the customer’s site , peo - ple employed by the customer were also part of this process ( therefore the group of collaborators spanned multiple com - panies ) . Such individuals by deﬁnition knew the customer infrastructure much better than suppliers , and shared knowledge to foster collaborative work with external people . Several interviewees maintained connections to former co - workers or friends working in the same industry and using similar tools . Additionally , they made use of their per - sonal social network to ask for help , to help others to solve problems or to generally discuss tools and related topics . If a problem could not be solved within the organization , they would turn to this circle . This was not conﬁned to work and was also a topic of conversation during leisure time . The last resort in terms of getting help was to contact the vendor or developer of a plug - in . Several participants argued that they would directly contact the vendor if an important plug - in would not work as expected , either in order to get help or to better assess the tool for the given task . We were told of only two occasions where such contacts actually hap - pened . Given that this spans a tool usage of several years , it seems , on the face of it , to be a surprisingly rare event . We have to bear in mind that the Eclipse community is huge and incompatibilities , usage problems , etc . as well as work - arounds or warnings are published very quickly in related forums . This explains why contact with the vendor of a plug - ins rare . 5 . 4 . 2 Collaboration Practices A frequently observed and described collaboration practice was asking others for help . Throughout the study , certain events sparked questions . Examples were breakdowns , as well as unclear or difﬁcult aspects of the tasks at hand . The discussion often also included tools and conﬁguration aspects , e . g . missing rules of quality control tools . Whenever a solution for a certain problem was known within the group , a course of action could be recommended . DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1069 During collaborative software development , developers relied on the hardware and software infrastructure in use . Therefore , the conﬁguration settings of plug - ins may be as important as the installed set of plug - ins itself . A plug - in may be useless if not conﬁgured properly in relation to the organization’s infrastructure ( e . g . source code repository tools ) , the project’s needs ( e . g . quality control tools ) or infor - mal agreements ( version of the interpreter of a program - ming language ) . Throughout the study , conﬁguration settings were spread by word of mouth or read to a person over the phone . In some more complex settings or when organizational boundaries were crossed , they were exported , sent by e - mail or instant messenger and imported into another Eclipse installation . This gave the receiver an exact copy of the conﬁguration settings , which saved time and reduced typing errors . Furthermore , participants directly shared plug - ins , e . g . web service support tools at Zeta , support for PHP develop - ment at Beta , support for Python development at Alpha . This was carried out by either sharing the ﬁles that repre - sented the particular Eclipse plug - ins or by sharing the URL of the plug - in’s update site ( see Update Manager in Section 4 . 2 ) . That said , extracting and sharing plug - ins from an existing installation was extremely complicated and error prone , as the users would have to manually ﬁgure out which set of plug - ins belonged to a certain tool and what the dependencies between plug - ins might be . As a result , the participants only shared ﬁles if they kept the down - loaded archives that contained the plug - ins . Otherwise , they preferred to share the complete Eclipse installation . The latter case was carefully applied to enable the receiver to start working without further conﬁguration needs . This was especially useful when new members joined the company ( e . g . a trainee who had just joined Beta at the time ) or the project team ( which happened regularly at Zeta ) . While these sharing practices resulted in manual labor , there were certain support tools emerging at the time . Serv - ices as Yoxos 2 or Pulse 3 allow their users to create tailored , fully functional Eclipse installations . With a few clicks , users can select the plug - ins that should be included . Never - theless , only Theta made use of one of these services . The participants argued that they did not know the services well enough to see sufﬁcient beneﬁt from their usage . Further - more , some of the more interesting features were not free of cost and their use would have involved the organization’s management in ﬁnancial deliberations . Both services also tended to apply an IT - department centric view , as they allowed only the owner of the shared installation to recon - ﬁgure the installed plugins , which restricted other users of the installation . The people at Delta and Theta regularly held meetings . Apart from the often more pressing issues of daily business , they also used these meetings to discuss work practices as well as tools in use and their conﬁguration . These meetings were an accepted way for members to share their know - how about tools within the company . This created a certain awareness of what others were using during their daily work and who was experienced in which ﬁelds . All compa - nies involved in the study carried out regular meetings and from time to time , all groups discussed the tools in use or tools for future use . But Delta and Theta put considerably more effort into this and , as a result , were more aware of these aspects . A slightly more top down way of sharing tool - related knowledge happened at Gamma . The project leader of the group we investigated was in fact an employee of Delta . He joined the project team at Gamma two years previously , along with some of his colleagues from Delta . At that time , people at Gamma had no experience at all in using the Eclipse IDE and related plug - ins . When the project leader and several of his colleagues joined Gamma , he introduced several new tools as well as practices that he was familiar with ( Scrum , pair programming , test driven development ) . The employees at Gamma accepted these innovations and , as they had never had contact with these tools and practices before , this lead to ongoing learning and tailoring activities . 6 D ISCUSSION The results of the ﬁeld study can be interpreted in two ways . First of all , we want to discuss the practices that we have identiﬁed in our ﬁeldwork . Second , we want to show poten - tial areas for supporting appropriation , based on the results of the ﬁeld study . 6 . 1 Conﬁguration and Adaptation Practices In our study , we have seen that learning , tailoring , discover - ing and collaborating were the main areas that contributed to the appropriation of the Eclipse IDE . Str € ubing [ 58 ] argues that always moving along the “bleeding edge of technology” [ 58 ] is part of the habitus of soft - ware developers . Sigfridsson mainly sees continous change , equivocal situations and external inﬂuence responsible for this effect of continous change of practical knowledge [ 43 ] . In the case of the Eclipse IDE , this edge is deﬁned by what happens in the community and at the different plug - in ven - dors’ sites . It is fast moving and dynamic ( similar effects have been decribed for the PyPy open source community [ 43 ] ) . Changing work tasks provide further justiﬁcation for learning ; or in some cases create a pressing need to learn ( see also [ 43 ] ) about news on the plug - in market and to stay on top of things ( see also [ 40 ] ) . Based on the results of the study , we agree with previous studies [ 20 ] , [ 31 ] , [ 32 ] , [ 40 ] , [ 43 ] , which argue that changes in work behavior stimulate learning or the need for new tools which , in turn , can stimu - late new skills . The lively Eclipse ecosystem creates plenty of opportunities , as new tools are constantly created . Adapting the user interface of Eclipse usually took only seconds and helped the Eclipse users in our study to get a better overview , to use different tools and to be better pre - pared overall for the task at hand . Other tailoring decisions , such as keeping several differently conﬁgured Eclipse con - ﬁgurations , were carried out to improve the performance of the Eclipse IDE and to provide backward compatibility , which has not been described by other authors yet . Mostly , however , Eclipse was tailored in order to use new techni - ques or work practices , as when using a different program - ming language , using code management tools or testing 2 . https : / / yoxos . eclipsesource . com / ( Accessed February 24 th , 2014 ) 3 . http : / / www . poweredbypulse . com / ( Accessed February 24 th , 2014 ) 1070 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 tools that might result in either faster development or better quality results . This result is in line with previous research efforts on learning and tailoring in SE environments ( see e . g . [ 40 ] , [ 42 ] , [ 43 ] ) . Discoveries were closely related to awareness of colleagues’ workplaces . The ﬂexibility of Eclipse as a toolbox for software developers sometimes meant poor awareness of what other colleagues were using . Discoveries were impor - tant , because they could help to satisfy a current need or help in ﬁxing a pressing problem . Most of the employees at Alpha , Beta , Epsilon and Zeta were only aware of a minimal set of Eclipse plug - ins or tools that were in use by their colleagues , which made them quite open for discoveries . At Gamma , Delta and Theta , however , this was different . The employees of Gamma could fairly precisely tell us which plug - ins their colleagues were using and even how these plug - ins were con - ﬁgured . This was because their ﬁrewall drove them to dele - gate all tailoring work to a single person and tailoring decisions were communicated within the team . At Delta and Theta , in contrast , tailoring was an individual effort . Even so , both companies were using pair programming techniques , which regularly made pairs of developers to sit down and use one machine together . This raised awareness of the tools in use . While Gamma was also using pair programming techni - ques , we found the technical infrastructure was the main rea - son for this level of awareness . Overall , a constant awareness helped members to stay on top of things , but in groups that had low awareness of each other’s workplaces , discoveries played a much bigger role . Mutual awareness of this kind is a cornerstone for helping each other out , implemented in a vari - ety of ways , and a very important practice among developers . This was previously noted by [ 40 ] , who suggested further organizational support for such practices ; [ 43 ] , who discussed it as part of practical learning and [ 59 ] , where it is however mainly discussed as personal help giving . If we focus on the collaborative aspects that contribute to appropriation , we can identify certain sharing practices that contribute to work effectiveness . This kind of expertise and artifact sharing happened above all when new co - workers joined the company or the project team . This was because new colleagues were expected to contribute to the project quickly , requiring useful ( and compatible ) tools . Similar effects were described by [ 43 ] when developers joined the PyPy open source community . Overall , we can see that the Eclipse users of our study mod - iﬁed their systems to maintain their collective ability to work . In line with [ 43 ] , we argue that they did whatever was possi - ble to achieve this task . The related practices were often col - laboratively carried out and can be categorized as learning , tailoring , sharing . They were often spawned spontaneously by discoveries that also contributed to the teams’ overall workplace awareness . 6 . 2 Potential Areas for Support and Process Improvements As the study has shown , at the time , Eclipse was an example of a very powerful , but also complex and in some situations unstable software system . Improvements to the current Eclipse architecture may be of help . In particular , mecha - nisms that might prevent plug - ins from harming each other could prove very helpful . However , future solutions that aim at a high conﬁgurability or modiﬁability could also learn from existing practices of Eclipse users and include features for supporting appropriation . Some of the sug - gested measures have already been implemented ( see e . g . [ 17 ] , [ 42 ] , [ 60 ] ) . 6 . 2 . 1 Fostering Collaboration As shown , the introduced practices that contribute to appropriation have very often been collaborative . The shar - ing of experience through recommendations , demonstra - tions and collaborative problem solving , as well as sharing of artifacts and settings were present to a large degree in all the participating organizations . However , as the tasks at hand relied heavily on the local context , e . g . the infrastruc - tures of the companies and the projects , people from the team were the main points of contact . Systems that accom - modate easy appropriation should leverage this . One suc - cessful example was the possibility of sharing preference settings . While that feature was not available for all settings and not at all for plug - ins , it was used on several occasions . It could be easily improved by connecting Eclipse installa - tions to a network infrastructure in order to implement additional features for sharing installed plug - ins , as well as settings , with colleagues . 6 . 2 . 2 Making Use of Trust Relations Such functionality would not only increase the usability of the current Update Manager and settings dialogs , but would also enhance trust between the members of an orga - nization . Co - workers often rely on common success and failure stories . They know their own organizations’ infra - structure , as well as their products , best . Throughout our study , it was apparent that participants in the main did know who was responsible for certain aspects of this infra - structure and therefore knew whom to ask in case of break - down . A network to share artifacts within the organization as suggested by [ 17 ] and [ 60 ] could beneﬁt from this , as it would make use of known sources from within the organi - zation , and as a result might create awareness of the tailor - ing efforts of experienced Eclipse users . This could generate serendipitous discoveries and offer a means to share the object of interest in an easy manner . However , this should also be supplemented by organizational measures , as sug - gestes by [ 40 ] . 6 . 2 . 3 Searching and Sharing We learned that Eclipse users regularly search the web for information on tools , as well as for subjective experiences with plug - ins and their settings . We also learned that the relationship of trust between an Eclipse user and unknown people on the web is different to the relationship of trust between anEclipse user and his / her colleague . The Eclipse forum and its members constitute a huge and complex net - work and inﬂuence at that level is difﬁcult to manage . The local network of experienced persons is more manageable . It should be possible to at least render the areas of co - work - ers’ expertise visible to , and searchable by , other members of the team in order to provide new possibilities e . g . for peo - ple who are experienced in using a certain tool . DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1071 6 . 2 . 4 Creating Workplace - Awareness Making the expertise of co - workers visible and searchable can help an Eclipse user if he needs a contact person , e . g . because a problem has occurred . But this information could also be used to increase the general awareness of colleagues’ workplaces in the group . Serendipitous discoveries were perceived to be very helpful , but happened very rarely and as the name suggests , by chance . Features that not only keep track of the Eclipse user’s experiences , but that announce some features thereof within the group , could create a much more consistent discovery experience [ 17 ] , [ 60 ] . In much the same way , similar to such a feature , certain practices like reg - ular meetings to discuss the group’s workplaces or pair pro - gramming can make discoveries much more likely [ 40 ] . 6 . 3 Limitations We presented results from seven German companies that were gained through a qualitative study . While these results are very detailed , there are limitations to the validity of this study . The results are not easily transferable to other cases . This is true for several dimensions of this study . Without further investigation , the results can not be easily applied to other software ecosystems ( e . g . Firefox or Android ) , other user groups ( e . g . casual computer users ) , as well as other usage scenarios ( e . g . private / home usage ) . Furthermore , we chose to focus mostly on small and medium sized organizations , as they are very important for the German software industry . However , we are aware of ( especially large ) companies that do not even allow their employees to tinker with their work places . It is also likely that e . g . sharing of experiences is dealt with quite differ - ently in other cultures ( the study included only German companies ) and work situations ( e . g . offshoring scenarios ) . This study is further limited by the fact that we may not have taken “preference settings” to be as important as we might have . This , too , could be a topic for future investigation . We observed that some interview participants found it difﬁcult to remember tailoring efforts they had initiated in the past . One reason for this might be that those practices are only seldom used . In several cases , we gave examples for what we meant or visited work places as part of the interview , in order to spark the discussion . 7 C ONCLUSION This paper addressed the topic of SE tool appropriation as a means to maintaining a collective ability to work . In doing so , we took a CSCW perspective , focusing on the micro - level of appropriation in the context of Eclipse users’ work practices . The focus at micro level certainly allowed us to obtain a detailed understanding of appropriation practices in the context of using software ecosystems , and introduced a perspective on what Eclipse users actually do . Based on interviews and observations , we provide an interpretation of the reasons behind the work being performed . Generally , the results conﬁrm statements from previous studies that have investigated how users engage with software products and share modiﬁcations as well as useful practices with each other [ 37 ] , [ 38 ] , [ 43 ] . The importance of serendipitous situations has however only partially been discussed ( see [ 40 ] ) . As such , we believe that our ﬁndings contribute to the state of the art of a ) understanding software development groups’ practices of maintaining the collective ability to work and b ) designing supportive tools for software devel - opers , which nowadays have to be understood as ecosys - tems rather than as standalone applications . Our study can be seen as an attempt to better understand the needs of Eclipse users and to identify approaches to supporting them in maintaining their ability to work individually as well as in the context of their teams , companies and commu - nities . A broader focus on surrounding technologies related to software development ( e . g . programming languages , frameworks , bug trackers ) could reveal that these results might be applicable to this domain of work ( cf . [ 43 ] ) , and constitute a topic for future research . With regard to possible support systems , we have shown that software developers in the observed organizations pos - sess a great deal of knowledge about their tools and most of them constantly take action to further improve that ( cf . [ 43 ] ) . Within all the visited sites , software developers modi - ﬁed their working environments on their own , in order to adapt these to the tasks at hand . In the observed environ - ments , this non - / self - organized approach was a very help - ful and powerful mechanism that worked well and could probably be enhanced by novel support tools that render the related learning and tailoring efforts more visible and accessible to other Eclipse users ( see [ 17 ] , [ 60 ] , [ 40 ] ) . While the observed style of working seems to be very interesting especially for small and medium - sized compa - nies , this level of individualized tailoring also marks an inherent problem of software ecosystems in general : to pro - vide maximum ﬂexibility in the choice of tools and high lev - els of stability in the working environment at the same time . How these mismatches can be mitigated , and to what extent companies that rely on more standardized work environ - ments can beneﬁt from the ﬂexible practices we have observed is as yet an open question that we plan to pursue in our future work . A CKNOWLEDGMENTS The authors wish to thank the organizations that partici - pated in the study . This endeavor was funded by the German Federal Ministry for Education and Research within the research initiative Software Engineering 2006 . The autors thank Dave Randall for his valuable support . R EFERENCES [ 1 ] T . Bruckhaus , N . H . Madhavji , I . Janssen , and J . Henshaw , “The impact of tools on software productivity , ” IEEE Softw , vol . 13 , no . 5 , pp . 29 – 38 , Sep . 1996 . [ 2 ] B . W . Kernighan and P . J . Plauger , “Software tools , ” SIGSOFT Softw . Eng Notes , vol . 1 , no . 1 , pp . 15 – 20 , May 1976 . [ 3 ] C . Bennett , D . Myers , M . - A . Storey , D . M . German , D . Ouellet , M . Salois , and P . Charland , “A survey and evaluation of tool features for understanding reverse - engineered sequence diagrams , ” J Softw . Maint . Evol . , vol . 20 , no . 4 , pp . 291 – 315 , Jul . 2008 . [ 4 ] G . Forte , “Integrated CASEEnvironments , ” in Computer - Aided Soft - ware Engineering : Issues and Trends for the 1990s and Beyond , vol . 1 , T . J . Bergin , Ed . Hershey , PA , USA : IGI Global , 1993 , pp . 3 – 52 . [ 5 ] B . Boehm , “A view of 20th and 21st century software engineer - ing , ” in Proc . 28th Int . Conf . Softw . Eng . , New York , NY , USA , 2006 , pp . 12 – 29 . 1072 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014 [ 6 ] C . L . McClure , Case Is Software Automation . Englewood Cliffs , NJ , USA : Prentice - Hall , 1989 . [ 7 ] C . Fernstrom , K . - H . Narfelt , and L . Ohlsson , “Software factory principles , architecture , and experiments , ” IEEE Softw . , vol . 9 , no . 2 , pp . 36 – 44 , Mar . 1992 . [ 8 ] J . Zettel , “Methodology support in case tools and its impact on individual acceptance and use : A controlled experiment , ” Empir . Softw . Eng . , vol . 10 , no . 3 , pp . 367 – 394 , Jul . 2005 . [ 9 ] J . Brooks , F . P . , “No silver bullet essence and accidents of software engineering , ” Computer , vol . 20 , no . 4 , pp . 10 – 19 , Apr . 1987 . [ 10 ] B . Lundell and B . Lings , “Changing perceptions of CASE tech - nology , ” J . Syst . Softw . , vol . 72 , no . 2 , pp . 271 – 280 , Jul . 2004 . [ 11 ] D . Geer , “Eclipse becomes the dominant Java IDE , ” Comput . , vol . 38 , no . 7 , pp . 16 – 18 , 2005 . [ 12 ] E . Gamma and K . Beck , Contributing to Eclipse : Principles , Patterns , and Plug - Ins . Reading , MA , USA : Addison - Wesley , 2004 . [ 13 ] NIST / ECMA TR / 55 , “Reference model for frameworks of soft - ware engineering environments , ” ECMA & NIST , NIST Special Publication , pp . 500 – 211 , 1993 . [ 14 ] K . M . Hansen , “Activity - centred tool integration—Using type - based publish / subscribe for peer - to - peer tool integration , ” in Proc . ESEC Tool Integration Workshop , 2003 , pp . 11 – 17 . [ 15 ] F . Asplund , M . Biehl , J . El - Khoury , and M . T € orngren , “Tool inte - gration beyond Wasserman , ” in Proc . Adv . Inf . Syst . Eng . Work - shops , 2011 , pp . 270 – 281 . [ 16 ] M . V . Zelkowitz , “Modeling software engineering environment capabilities , ” J . Syst . Softw . , vol . 35 , no . 1 , pp . 3 – 14 , 1996 . [ 17 ] G . Bourguin , A . Lewandowski , and M . Lewkowicz , “Sharing experience around component compositions : Application to the eclipse ecosystem , ” Int . J . Distrib . Syst . Technol . , vol . 4 , no . 4 , pp . 15 – 28 , Oct . 2013 . [ 18 ] P . N . Finlay and A . C . Mitchell , “Perceptions of the beneﬁts from the introduction of CASE : An empirical study , ” MIS Quart . , vol . 18 , no . 4 , pp . 353 – 370 , Dec . 1994 . [ 19 ] A . S . Ivan Aaen , “A tale of two countries : Case experiences and expectations , ” in Proc . IFIP WG8 . 2 Working Conf . Impact Comput . Supported Technol . Inf . Syst . Develop . , 1992 , pp . 61 – 93 . [ 20 ] C . F . Kemerer , “How the learning curve affects case tool adoption , ” IEEE Softw . , vol . 9 , no . 3 , pp . 23 – 28 , May 1992 . [ 21 ] H . Elshazly and V . Gover , “A study on the evaluation of CASE technology , ” J . Inf . Technol . Manage . , vol . 4 , no . 1 , 1993 . [ 22 ] W . J . Orlikowski , “CASE tools as organizational change : Investi - gating incremental and radical changes in systems development , ” MIS Quart . , vol . 17 , no . 3 , pp . 309 – 340 , Sep . 1993 . [ 23 ] J . Maansaari and J . Iivari , “The evolution of CASE usage in Fin - land between 1993 and 1996 , ” Inf . Manage . , vol . 36 , no . 1 , pp . 37 – 53 , 1999 . [ 24 ] A . Rai and R . Patnayakuni , “A structural model for CASE adop - tion behavior , ” J . Manage . Inf . Syst . , vol . 13 , no . 2 , pp . 205 – 234 , Sept . 1996 . [ 25 ] L . E . Mendoza , T . Rojas , and M . A . P (cid:2) erez , “Organizational indica - tors for CASE tools selection : A case study , ” Revista Colombiana de Computaci (cid:2) on , 2001 . [ 26 ] C . K . Riemenschneider , B . C . Hardgrave , and F . D . Davis , “Explaining software developer acceptance of methodologies : A comparison of ﬁve theoretical models , ” IEEE Trans . Softw . Eng . , vol . 28 , no . 12 , pp . 1135 – 1145 , Dec . 2002 . [ 27 ] F . D . Davis , “Perceived usefulness , perceived ease of use , and user acceptance of information technology , ” MIS Quart . , vol . 13 , no . 3 , pp . 319 – 340 , Sep . 1989 . [ 28 ] R . Thompson , C . Higgins , and J . Howell , “Personal computing toward a conceptual model of utilization , ” Manag . Inf . Syst . Quart . , vol . 15 , no . 1 , Dec . 1991 . [ 29 ] J . Iivari , “Why are CASE tools not used ? ” Commun . ACM , vol . 39 , no . 10 , pp . 94 – 103 , 1996 . [ 30 ] P . Y . K . Chau , “An empirical investigation on factors affecting the acceptance of CASE by systems developers , ” Inf . Manage . , vol . 30 , no . 6 , pp . 269 – 280 , Sep . 1996 . [ 31 ] L . Fowler , M . Allen , J . Armarego , and J . Mackenzie , “Learning styles and CASE tools in software engineering , ” presented at the 9th Annu . Teaching Learning Forum , Perth , W . A . , Australia , 2000 . [ 32 ] J . Robbins , “Adopting open source software engineering ( OSSE ) practices by adopting OSSE tools , ” in Perspectives on Free Open Source Software , J . Feller , B . Fitzgerald , S . Hissam , and K . Lakhani , Eds . Cambridge , MA , USA : MIT Press , 2005 , pp . 245 – 264 . [ 33 ] S . Sharma and A . Rai , “CASE deployment in IS organizations , ” Commun . ACM , vol . 43 , no . 1 , pp . 80 – 88 , Jan . 2000 . [ 34 ] B . C . Hardgrave and R . A . Johnson , “Toward an information sys - tems development acceptance model : The case of object - oriented systems development , ” IEEE Trans . Eng . Manage . , vol . 50 , no . 3 , pp . 322 – 336 , Aug . 2003 . [ 35 ] Yang P . H . - L . , “Adoption and implementation of CASE tools in Taiwan , ” Inf . Manage . , vol . 35 , no . 2 , pp . 89 – 112 , 1999 . [ 36 ] A . MacLean , K . Carter , L . L € ovstrand , and T . Moran , “User - tailora - ble systems : Pressing the issues with buttons , ” in Proc . SIGCHI Conf . Human Factors Comput . Syst . , 1990 , pp . 175 – 182 . [ 37 ] M . Gantt and B . A . Nardi , “Gardeners and gurus : Patterns of cooperation among CAD users , ” in Proc . SIGCHI Conf . Human Fac - tors Comput . Syst . , Monterey , CaA , USA , 1992 , pp . 107 – 117 . [ 38 ] W . E . Mackay , “Patterns of sharing customizable software , ” in Proc . ACM Conf . Comput . - Supported Cooperative Work , Los Angeles , CA , USA , 1990 , pp . 209 – 221 . [ 39 ] H . Kahler , “Supporting collaborative tailoring . department OG communication , ” J . Comput . Sci . , 2001 . [ 40 ] E . Murphy - Hill and G . C . Murphy , “Peer interaction effectively , yet infrequently , enables programmers to discover new tools , ” in Proc . ACM Conf . Comput . Supported Cooperative Work , New York , NY , USA , 2011 , pp . 405 – 414 . [ 41 ] G . C . Murphy , M . Kersten , and L . Findlater , “How are Java soft - ware developers using the eclipse IDE ? ” IEEE Softw . , vol . 23 , no . 4 , pp . 76 – 83 , Jul . / Aug . 2006 . [ 42 ] L . Findlater , J . McGrenere , and D . Modjeska , “Evaluation of a role - based approach for customizing a complex development environ - ment , ” in Proc . SIGCHI Conf . Human Factors Comput . Syst . , New York , NY , USA , 2008 , pp . 1267 – 1270 . [ 43 ] A . Sigfridsson , “The purposeful adaptation of practice : An empirical study of distributed software development , ” Doc - toral thesis , Dept . Comput . Sci . Inf . Syst . , Univ . Limerick , Limerick , Ireland , 2010 . [ 44 ] V . Pipek , From Tailoring to Appropriation Support : Negotiating Groupware Usage . Oulu , Finland : Univ . Oulu , 2005 . [ 45 ] P . Dourish , “The appropriation of interactive technologies : Some lessons from placeless documents , ” Comput . Supported Cooperative Work , vol . 12 , no . 4 , pp . 465 – 490 , Dec . 2003 . [ 46 ] E . Balka and I . Wagner , “Making things work : Dimensions of con - ﬁgurability as appropriation work , ” in Proc . 20th Anniversary Conf . Comput . Supported Cooperative Work , Banff , AB , Canada , 2006 , pp . 229 – 238 . [ 47 ] J . Bosch and P . Bosch - Sijtsema , “From integration to composition : On the impact of software product lines , global development and ecosystems , ” J . Syst . Softw . , vol . 83 , no . 1 , pp . 67 – 76 , Jan . 2010 . [ 48 ] J . Des Rivi (cid:3) eres and J . Wiegand , “Eclipse : A platform for integrat - ing development tools , ” IBM Syst . J . , vol . 43 , no . 2 , pp . 371 – 383 , Apr . 2004 . [ 49 ] S . Draxler and G . Stevens , “Supporting the collaborative appropri - ation of an open software ecosystem , ” Computer Supported Coopera - tive Work , vol . 20 , pp . 403 – 448 , Sep . 2011 . [ 50 ] G . Coleman and R . O’Connor , “Investigating software process in practice : A grounded theory perspective , ” J . Syst . Softw . , vol . 81 , no . 5 , pp . 772 – 784 , May 2008 . [ 51 ] K . Schmidt , “The critical role of workplace studies in CSCW , ” in Workplace Studies : Recovering Work Practice and Informing Sys - tem Design , Cambridge , U . K . : Cambridge Univ . Press , 2000 , pp . 141 – 149 . [ 52 ] A . C . Strauss and J . M . Corbin , Grounded Theory in Practice , 1st ed . Newbury Park , CA , USA : SAGE , 1997 . [ 53 ] F . Shull , J . Singer , and D . I . K . Sjøberg , Guide to Advanced Empirical Software Engineering . London , U . K . : Springer , 2008 . [ 54 ] R . K . Yin , Case Study Research : Design and Methods . Newbury Park , CA , USA : SAGE , 2009 . [ 55 ] G . Stevens , V . Pipek , and V . Wulf , “Appropriation infrastructure : Mediating appropriation and production work , ” J . Organ . End User Comput . , vol . 22 , no . 2 , pp . 58 – 81 , 2010 . [ 56 ] M . S . Pooleand G . DeSanctis , “Use ofgroupdecisionsupportsystems as an appropriation process , ” in Proc . 22nd Annu . Hawaii Int . Conf . Syst . Sci . EmergingTechnol . Appl . Track , , 1989 , vol . 4 , pp . 149 – 157 . [ 57 ] V . Wulf , M . Rohde , V . Pipek , and G . Stevens , “Engaging with practices : Design case studies as a research framework in CSCW , ” in Proc . ACM Conf . Comput . Supported Cooperative Work , New York , NY , USA , 2011 , pp . 505 – 512 . [ 58 ] J . Str € ubing , “Arbeitsstil und habitus - zur bedeutung kultureller ph € anomene in der Programmierarbeit , ” vol . 34 , Kassel : Wissen - schaftliches Zentrum f € ur Berufs - und Hochschulforschung der Gesamthochschule Kassel , 1992 . DRAXLER ET AL . : KEEPING THE DEVELOPMENT ENVIRONMENT UP TO DATE—A STUDY OF THE SITUATED PRACTICES OF . . . 1073 [ 59 ] M . Twidale , “Over the shoulder learning : Supporting brief infor - mal learning , ” Computer Supported Cooperative Work , vol . 14 , no . 6 , pp . 505 – 547 , Dec . 2005 . [ 60 ] S . Draxler , G . Stevens , M . Stein , A . Boden , and D . Randall , “Supporting the social context of technology appropriation : On a synthesis of sharing tools and tool knowledge , ” in Proc . ACM Annu . Conf . Human Factors Comput . Syst . , New York , NY , USA , 2012 , pp . 2835 – 2844 . Sebastian Draxler received the degree in busi - ness informatics from the University of Siegen in 2007 . He is currently working toward the PhD degree at the University of Siegen and a research associate at the Chair of Information Systems and New Media , university of Siegen , Germany . He has published in venues such as the ACM SIGCHI Conference on Human Factors in Computing Systems ( CHI ) , European Confer - ence on Computer Supported Cooperative Work ( ECSCW ) , and International Symposium for End - User Development . Furthermore , in journals such as IEEE Software and Computer Supported Cooperative Work . He is working at the intersec - tion between CSCW , Software Engineering and HCI . His current research interest is the appropriation of component - based systems by its users . Gunnar Stevens received the degree in com - puter science from the University of Bonn in 2002 and the PhD degree in information systems from the University of Siegen in 2009 . Before his aca - demic career , he was a software developer in the industry and as a research associate at Fraunhofer FIT , Skt . Augustin , Germany . Cur - rently , he is an assistant professor on Human Computer Interaction at the University of Siegen . He regularly publishes at conferences as ACM SIGCHI Conference on Human Factors in Com - puting Systems ( CHI ) , the ACM SIGCHI Conference on Computer Sup - ported Cooperative Work ( CSCW ) , and the German Conference on Information Systems as well as in journals such as ACM ToCHI , AIS ToCHI , JCSCW , JoEUC . He also was a chair member for conferences such as CHI , CSCW , ECSCW , PD and IS EUD . He was honored with the IBM Eclipse Innovation Award ( 2005 ) . Alexander Boden received the master’s degree in cultural anthropology from the University of Bonn in 2004 and the PhD degree in information sys - tems from the University of Siegen in 2011 . He was a research associate at the chair of Informa - tion Systems and New Media , and is currently employed as a postdoc researcher at the Fraunhofer Institute for Applied Information Tech - nology inSt . Augustin , Germany . He has published in venues such as the European Conference on Computer Supported Cooperative Work ( ECSCW ) and the ACM SIGCHI Conference on Human Factors in Computing Sys - tems ( CHI ) as well as in journals such as IEEE Software and Empirical Software Engineering . He was also a chair member for conferences such as CHI , INTERACT and ECSCW . He was honored with the study award ( “Studienpreis” ) of the district Siegen - Wittgenstein for his doctoral thesis in 2012 . He is working at the intersection between CSCW and software engi - neering and is especially interested in how ICTs can help coordination and knowledge exchange in global software development . " For more information on this or any other computing topic , please visit our Digital Library at www . computer . org / publications / dlib . 1074 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING , VOL . 40 , NO . 11 , NOVEMBER 2014