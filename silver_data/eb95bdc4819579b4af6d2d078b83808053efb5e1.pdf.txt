Middlesex University Research Repository An open access repository of Middlesex University research http : / / eprints . mdx . ac . uk Alegre , Unai , Augusto , Juan Carlos and Clark , Tony ( 2016 ) Engineering context - aware systems and applications : a survey . Journal of Systems and Software , 117 . pp . 55 - 83 . ISSN 0164 - 1212 Final accepted version ( with author’s formatting ) This version is available at : http : / / eprints . mdx . ac . uk / 18845 / Copyright : Middlesex University Research Repository makes the University’s research available electronically . Copyright and moral rights to this work are retained by the author and / or other copyright owners unless otherwise stated . The work is supplied on the understanding that any use for commercial gain is strictly forbidden . A copy may be downloaded for personal , non - commercial , research or study without prior permission and without charge . Works , including theses and research projects , may not be reproduced in any format or medium , or extensive quotations taken from them , or their content changed in any way , without ﬁrst obtaining permission in writing from the copyright holder ( s ) . They may not be sold or exploited commercially in any format or medium without the prior written permission of the copyright holder ( s ) . Full bibliographic details must be given when referring to , or quoting from full items including the author’s name , the title of the work , publication details where relevant ( place , publisher , date ) , pag - ination , and for theses or dissertations the awarding institution , the degree type awarded , and the date of the award . If you believe that any material held in the repository infringes copyright law , please contact the Repository Team at Middlesex University via the following email address : eprints @ mdx . ac . uk The item will be removed from the repository while any claim is being investigated . See also repository copyright : re - use policy : http : / / eprints . mdx . ac . uk / policies . html # copy Engineering Context - Aware Systems and Applications : A survey Unai Alegre a , ∗ , Juan Carlos Augusto a , Tony Clark b a Research Group On the Development of Intelligent Environments ( GOODIES ) , Middlesex University , London , United Kingdom b Department of computing , She ﬃ eld Hallam University , She ﬃ eld , United Kingdom Abstract Context - awareness is an essential component of systems developed in areas like Intelligent Environments , Pervasive & Ubiquitous Computing and Ambient Intelligence . In these emerging ﬁelds , there is a need for computerized systems to have a higher understanding of the situations in which to provide services or functionalities , to adapt accordingly . The literature shows that researchers modify existing engineering methods in order to better ﬁt the needs of context - aware computing . These e ﬀ orts are typically disconnected from each other and generally focus on solving speciﬁc development issues . We encourage the creation of a more holistic and uniﬁed engineering process that is tailored for the demands of these systems . For this purpose , we study the state - of - the - art in the development of context - aware systems , focusing on : A ) Methodologies for developing context - aware systems , analysing the reasons behind their lack of adoption and features that the community wish they can use ; B ) Context - aware system engineering challenges and techniques applied during the most common development stages ; C ) Context - aware systems conceptualization . Keywords : Context - Aware Systems Engineering , Context - Aware Computing , Context - awareness , Context - sensitive , Sentient Computing , Pervasive & Ubiquitous Computing , Intelligent Environments , Ambient Intelligence , Software Engineering , Systems Engineering . 1 . Introduction The miniaturization process of electronics has made a wide range of small devices available with sensing and computing capabilities , taking the computational paradigm out of the desk - top . This has opened up new possibilities for interacting with technologies , bringing them closer to people’s daily life expe - riences . The vision of Mark Weiser [ 1 ] , predicted a trend in which computers disappear by becoming embedded in our daily lives . His view has inﬂuenced research in new emerging areas such as Pervasive & Ubiquitous Computing , Intelligent Envi - ronments or Ambient Intelligence . The systems developed in these ﬁelds need to recognize the context in which they are ex - ecuting . In this way , they can understand better the situations in which the user expects services delivered and in which way . The aim is to minimize the user e ﬀ ort , enhancing the usabil - ity and enabling a better human - computer interaction . Never - theless , the expectations on context - aware systems ( C - AS ) can di ﬀ er from their real abilities [ 2 ] . There is a signiﬁcant con - trast between the development needs of systems with contex - tual awareness , compared to the traditional ones . The liter - ature shows a constant modiﬁcation of conventional develop - ment techniques and methods , to make them suit the C - AS de - velopment demands . The challenges of C - AS development are ∗ Corresponding author . Tel . : + 447871513023 Email addresses : u . alegre @ mdx . ac . uk ( Unai Alegre ) , j . augusto @ mdx . ac . uk ( Juan Carlos Augusto ) , t . clark @ shu . ac . uk ( Tony Clark ) diverse and complex , provoking these techniques to be com - monly disconnected from each other , and focused on solving speciﬁc issues . The evidence suggests that there is a need of unifying research for developing C - AS . The aim of this survey is to provide better understanding on the basis for an engineer - ing process that is tailored to the demands of C - AS . Our inten - tion is not to provide a whole new engineering process , how - ever , we hope the ﬁndings of this article may encourage and inform such future steps within the community . Our research is based on a literature review and the results of a questionnaire carried out to a total of 750 researchers 1 . The remainder of this paper is as follows : Section 2 presents the state - of - the - art in context - aware systems and its conceptualization . In Section 3 , challenges and techniques used for C - AS development in each of the most common stages of a system development process . Then , several methodologies are reviewed in Section 4 , compar - ing their methods and tools . We analyse the reasons behind the lack of acceptance in methodologies , as well as the features that could have better acceptance . We conclude in Section 5 , sug - gesting new directions for Context - Aware Systems Engineering ( C - ASE ) . 1 The participants were selected from seven conference proceedings be - tween 2011 and 2014 : CONTEXT 2011 / 2013 , AmI 2011 / 2012 / 2013 , IE 2011 / 2012 / 2013 / 2014 , UbiComp 2011 / 2012 / 2013 , Pervasive 2011 / 2012 , IoT 2012 , ICCASA 2012 / 2013 . From these , 280 papers were selected as poten - tially containing researchers with some experience in context - aware computing . A list of 750 names of context - aware systems developers was gathered from the papers and used for contacting the contestants . Preprint submitted to Journal of Systems and Software February 1 , 2016 2 . Context - aware systems This section focuses on the state - of - the - art in the conceptu - alization of context and context - awareness for the purpose of developing C - AS . First , we study the basic concepts , identify - ing a lack of agreement in their deﬁnition . Second , we analyse more in depth the causes behind that lack of consensus . Finally , we consider the conceptual limitations of C - AS to characterize their features and interaction types . Through all the section , for illustration purposes , we include an example of a context - aware smart - phone that is able to detect when is intruding into social situations in order to avoid unnecessary interruptions [ 2 ] . 2 . 1 . Context and context - awareness In order to implement systems that are able to use the im - plicit situational information , there is a need to understand the concept of context [ 3 ] . This subsection brieﬂy analyses what the community understands by “context” . 2 . 1 . 1 . Context Although “context” is a term that most people tacitly un - derstand , they ﬁnd it di ﬃ cult to elucidate [ 3 ] . Many multi - disciplinary areas use context to enhance their possibilities . Each area understands the notion as a reﬂection of its own con - cerns , making it di ﬃ cult to deﬁne [ 4 ] . In the literature , several deﬁnitions can be found [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ 7 ] [ 8 ] [ 9 ] . A detailed comparison between the di ﬀ erences and similarities of these is out the scope of this survey . Nevertheless , it has to be acknowl - edged that there is no consensus on the deﬁnition of context . Also , we highlight that Dey’s [ 10 ] is the most acknowledged one , considering it as “any information that can be used to characterize the situation of an entity” , where “an entity can be a person , place , or object that is considered relevant to the interaction between a user and an application , including the user and applications themselves” . 2 . 1 . 2 . Categories of context Not only is di ﬃ cult to reach an agreement in what context is , but also on how can it be categorized . Many authors have introduced di ﬀ erent context categories and taxonomies [ 9 ] [ 11 ] [ 12 ] [ 13 ] . Perera et al . [ 9 ] recently presented a broad com - parison between them , including their relationship , advantages and disadvantages . They acknowledge two di ﬀ erent types of categorization schemes : operational and conceptual . While the operational one helps to understand the issues and challenges of data acquisition techniques , the conceptual allows an under - standing of the relationships between di ﬀ erent contexts . Af - ter comparing all the di ﬀ erent categorization schemes , they ac - knowledge that there is no single one that can accommodate all the demands for context - awareness in the internet of things paradigm . 2 . 1 . 3 . Context - awareness Dey [ 10 ] also deﬁned a system as context - aware if “ it uses context to provide relevant information and / or services to the user , where relevancy depends on the user’s task ” . Indepen - dently from this deﬁnition , the adjective “context - aware” is generally used in the literature to describe any type of sys - tem that is able to use context . Also , systems that have char - acteristics which could be considered as “context - aware” use other terms ( e . g . , “smart” , “intelligent” ) or do not mention any . For instance , let us think about the feature of smartphones that changes the orientation of the screen ( landscape / portrait mode ) depending on the phone position . Although it could be con - sidered as “context - aware” , is typically known by other terms . Also , recently created applications such as Google Now [ 14 ] use di ﬀ erent terms for this kind of features . On one hand , the great variety of systems and features to be considered “context - aware” make very di ﬃ cult to make a deﬁnition that is suitable for all of them . On the other hand , since “context - awareness” relies on the deﬁnition of context , and since there is no con - sensus on its deﬁnition , it is very di ﬃ cult to characterize what contextual - awareness is . 2 . 2 . The challenges of context The lack of agreement in the conceptualization of context and context - awareness is just the superﬁcial evidence of a much deeper issue . This subsection studies the ins and outs of con - text , explaining why there is no consensus and identifying some limitations of these systems . 2 . 2 . 1 . Context , human activity and human behaviour Although primitive C - AS can be relatively easy developed ( e . g . , weather display depending on user location ) , there is much more potential in applications that involve a deeper con - text consciousness . The ambition is to create computational systems that are able to understand not only simple contexts , but others such as their environment , the person that is using the de - vice , or the social context in which they are executing services . The deeper conciousness to be implemented , the greater under - standing it requires on the complex relation between context , human activity and human behaviour . Following , we brieﬂy analyse some theories on this relation : Situated Action : Suchman [ 15 ] acknowledged that com - puter artefacts are build relying on an underlying concep - tion , based on the planning model of human action . She introduces the Situated Action , an alternative in which it is analysed how people ﬁnd meaning in actions or how should they construct it . Instead of producing formal mod - els of knowledge and action , she proposes exploring their relationship to the particular circumstances in which they occur . The unit of analysis of Situated Action is not the individual , not the environment , but a relation between the two [ 16 ] . Activity Theory : Claims that context is deﬁned by the ac - tivity itself . “Activity comprises a subject ( the person or group doing the activity ) , an object ( the need or desire that motivates the activity ) , and operations ( the way an activ - ity is carried out ) . Artefacts and environment are seen as entities that mediate activity” [ 17 ] . The unit of analysis in this theory is an activity [ 16 ] . 2 Distributed Cognition : Takes into account the representa - tion of knowledge both inside the heads of individuals and in the world [ 18 ] . The system is not considered relative to an individual but to a distributed collection of interacting people and artefacts [ 16 ] . Hence , the unit of analysis in this theory is the whole system , centring in its functional - ity and understanding the coordination among individuals and artefacts [ 16 ] . The Locales Framework : Tries to understand the nature of social activity and work , and how locale can support these activities [ 17 ] [ 19 ] . Locales are considered as a so - cial worlds that apportion and use particular locations and means for accomplish work . These , are abstract , and do not necessarily need to have a ﬁxed meaning or be associ - ated to a physical space . Ethnomethodology : Focuses on the way people make sense to their everyday world , capturing a range of phe - nomena associated with the use of mundane knowledge and reasoning procedures . Initially , the reader could think that embedding a deeper con - textual awareness into systems is just a matter of understanding the context through one of these theories and then creating a programmable model with the result . But the fact is that these theories work di ﬀ erently . They all share an understanding of social facts as having no objective reality beyond the ability of individuals and groups to recognise and orient towards them . Conversely , the developers of C - AS will naturally seek to re - duce complex observable phenomena to essences or simpliﬁed models that capture underlying patterns , abstracted from the de - tail of particular occasions . These models , try to seek an objec - tive reality in social facts , entering in conﬂict with the founda - tions of most theories in social analysis , which are incompatible with the idea of a stable external world that is unproblemati - cally recognized by all . This issue was recognised by Dourish [ 5 ] . He acknowledged that the problem comes from the over - lapping of two philosophical traditions behind the understand - ing of context : Positivism and phenomenology . Context - aware computing stems from computer science , that derives from the rational , empirical and scientiﬁc tradition of positivism . On the other hand , phenomenology , is the background behind many of the theories to explain context in complex human behaviour and activity . The incompatibilities between these standpoints help to explain what are the limitations that exist when developing C - AS , as it is further described in the next subsection . 2 . 2 . 2 . The limits of Context - Aware Systems Once that the reader is aware that there are tensions between two incompatible philosophical backgrounds , s / he can start to understand why is so di ﬃ cult to ﬁnd an agreement on the deﬁnition of context . In what regards to its conceptualization , phenomenology recognizes context as an interaction problem , considering that : “ ( I ) Context is particular to each occasion of activity or action ; ( II ) The scope of contextual features is deﬁned dynamically ; ( III ) Context may or may be not relevant to some particular activity ; ( IV ) Context arises from activity , being actively produced , maintained an enacted . ” [ 5 ] . In this approach , the context can only be understood as the situation arises . Then , there is no need to unearth the underlying models that will describe the objective reality behind context , alleviating developers from the task of having to foresee it . For making this possible , there is a need to make machines exhibit human - like cognitive skills . The idea is to extract the mathe - matical model of a brain , imitate it in a computer , and train it to satisfy the user needs [ 20 ] . Nevertheless , it has to be mentioned that there has been a long debate about the feasibility of com - putational systems mimicking human - like intellect since the early origins of artiﬁcial intelligence [ 21 ] [ 22 ] [ 23 ] [ 24 ] [ 25 ] . Although it is not the purpose of this survey to analyse in depth these theories and argue about them , we would like to stress that they acknowledge some issues that artiﬁcial intelligence and context - aware computing have not been able to solve yet . For example , the limitation of computers to acquire expertise in the same degree and areas as humans , due to their di ﬀ erent form of embodiment [ 22 ] . What is important for the reader is to understand that the contextual awareness of machines is from a radically di ﬀ erent nature than the one of humans . Also , that computational systems are good at gathering and aggregating data , but humans are still better at recognizing contexts and determining what action is appropriate in a certain situation [ 2 ] . On the other hand , positivism looks at context as a repre - sentational problem , considering it as a “ form of information , delineable , stable and separable from activity ” [ 5 ] . The deﬁnitions made in the context - aware ﬁeld , naturally adopt this point of view . For instance , Dey’s deﬁnition [ 10 ] allows designers to use the concept for determining why a situation occurs and use this to encode some action in the application [ 26 ] , making the concept operational in terms of the actors and information sources [ 17 ] . Nevertheless , since the deﬁnition inherently has a positivist view , the potential of C - AS remains limited to the context that developers are able to encode and foresee . Let us retake the example of the context - aware phone that is able to silence itself at certain situations . For instance , let us imagine that developers want to detect that the user is at the cinema . For this task , they can use the built - in sensors of the phone to detect luminosity , location , motionlessness and ambient sound . Then , they can program a rule to silence the phone whenever its sensors indicate certain values . In this way , the phone can detect when the user is at the cinema , but for detecting a completely di ﬀ erent situation , the sensor values that will silence the phone ( or even the sensors used ) could be com - pletely di ﬀ erent . The problem of having to program computers , is that developers must know beforehand the context that they need to program . But they might not be able to foresee some situations . The user might be at a job interview , s / he might be sleeping when some irrelevant notiﬁcations or calls arrive , the user could be in the middle of a wedding , funeral , trial , having a very important conversation , in the library , etc . The list of unforeseen or undetectable contexts can be endless . Besides , some situations can be speciﬁc issues of one user , or may not be useful enough to carry the e ﬀ ort of implementing them ( e . g . , they may just happen once in the whole system life - cycle ) . 3 Summarizing , if developers can not determine all that can be a ﬀ ected by an action , it will be very di ﬃ cult to write a closed and comprehensive set of actions to take in those cases . There are three tasks that a developer may ﬁnd di ﬃ cult , or even impossible , when developing a C - AS under this perspective [ 17 ] : ( A ) Enumerate the set of contextual states that may exist ; ( B ) Know what information could accurately determine a contextual state within that set ; ( C ) State what appropriate action should be taken in a particular state . As it can be observed , the development of C - AS is inherently in conﬂict with two opposite philosophical paradigms . Due to the limitations in both approaches , the near future of C - AS de - velopment should not be seen directly towards creating exclu - sively systems that exhibit human - like contextual awareness , nor to exclusively programming them on the basis of foreseen context . The creation of C - AS in the near future , comes through a combination of the current advances in both approaches , pro - viding a higher cooperation between humans and computers and making the most of each others qualities . 2 . 3 . Towards the characterization of context - aware systems In this subsection we focus on the aspects characterizing context - dependent applications in order to better engineer them . Taking into account the inﬂuence of C - AS limitations , we ex - plore the ways in which C - AS can interact with users , catego - rizing them . Finally , with the interaction categories in mind , we characterize the features of these systems . 2 . 3 . 1 . Interacting with a Context - Aware System Inspired in the human - like contextual awareness , C - AS were originally intended to monitor the context and then act accordingly without any human mediation . The aim of having an autonomous system is to reduce the user intervention , easing its use and decreasing user distraction [ 27 ] . As discussed in the previous section , humans are ﬁtted with better contextual understanding capabilities . So , when a system takes away the user control due to a misinterpretation of the context , in situations where the user has a better understanding of what is happening , the user can reject the system and stop using it . In order to alleviate this problem , other viewpoints propose to change the autonomy of C - AS , enabling the users to have more control over the system actions . Let us retake the auto - silence smartphone example . Instead of letting the phone itself decide when to silence , a machine could answer when someone is calling [ 2 ] : “Lee has been motionless in a dim place with a high ambient of sound for the last 45 minutes . Continue with the call or leave a message ? ” . In this way , the higher understanding of context that humans naturally have , can be used to complement the decision making about the system actions , depending on the situation . As readers can observe , there are di ﬀ erent ways to interact with C - AS . Barkhuus et al . [ 28 ] classiﬁed them into : A ) Personalization , in which the users are able to set their preferences , likes and expectations to the system manually [ 9 ] ; B ) Passive context - awareness , where the system is constantly monitoring the environment and o ﬀ ers choices to the users in order to take actions ; C ) Active context - awareness , where the system is continuously monitoring the environment and acts autonomously . We have classiﬁed the interaction with C - AS in two di ﬀ erent modalities : Execution and conﬁguration . The ﬁrst one refers to the actions / behaviours of the system when a speciﬁc situ - ation arises ( e . g . , auto - silence smartphone receives a call at 4 a . m . and decides to silence it ) . The second one is related to the adjustment of actions / behaviours that a system will be ex - hibiting in the future ( e . g . , according to the preferences of a certain user , the phone is conﬁgured so that future calls coming at 4 a . m . are not automatically silenced ) . Both execution and conﬁguration modalities are independent between themselves , but they can both have a degree in between : I ) Active , where the system changes its content autonomously ; and II ) Passive , where the user has explicit involvement in the actions taken by the system . Following , we analyse them more in depth : Active Execution : In this interaction type , the systems act autonomously depending on the context in which they are embedded . For example , the screen of a smart - phone can switch from landscape to portrait automatically , de - pending on the values of its accelerometer . The heater in a smart - house can be autonomously switched on and o ﬀ when the values of a thermometer sensor reach a certain point . In this approach the vision of self - adaptive systems is paramount , which are able to adjust their behaviour in response to their perception of the environment and the system itself [ 29 ] [ 30 ] . Mizouni et al . [ 31 ] presented a framework for context - aware self - adaptive mobile appli - cations using the advantages of the software product line feature modelling to manage variability . Projects such as MUSIC [ 32 ] [ 33 ] [ 34 ] , also support the development of self - adaptive systems in ubiquitous environments . Passive Execution : The users are involved in the action taking process of the system , where they specify how the application should change in a speciﬁc situation [ 35 ] . The system can present available services for that speciﬁc situ - ation or ask for permission to take an action . The user can also receive additional information of the context that can support their decision taking , or cues about why the sys - tem is behaving in a certain way . Dey and Newberger [ 36 ] encourage the use of intelligibility features to let the user control the system . Those techniques can help expose the inner workings and inputs of context - aware applications that tend to be opaque to users due to their implicit sensing and actions [ 37 ] . It allows understanding how a context - aware application is working or behaving by showing it and can be used to allow a better user control . Lim and Dey [ 38 ] , present the intelligibility tool - kit to give support for context - aware applications . They facilitate developers to obtain eight types of explanations from the most popular decision models of context - aware applications . Active Conﬁguration : In this interaction type , the system is able to learn from the user preferences in order to au - tonomously evolve his rules for future behaviour , after 4 the system is implemented . Mori and Inverardi [ 39 ] [ 40 ] present a software life - cycle process for context - aware adaptive systems , where they characterize context by fore - seen and unforeseen variations . In the ﬁrst case the system evolves in order to keep satisﬁed a ﬁxed set of require - ments while in the second one the system evolves in order to respond to requirements variations that are unknown at design - time . In a later work [ 41 ] , they focus on a decision support mechanism for simultaneous adaptation to system execution context and user preferences . Aztiria et al . [ 42 ] introduce a system which is able to discover patterns in the user actions to learn their frequent behaviour when in - teracting with Intelligent Environments . The system can generate automatically context - aware reasoning rules [ 43 ] . Passive Conﬁguration : The user is involved in the manual personalization of his / her preferences , likes , and expecta - tions of the system , after its implementation . By reduc - ing the complexity of programming , it enables the system behaviour conﬁguration to inexperienced users . These , acting as non - professional developers , can create , mod - ify , or extend existing context - aware artefacts . Lieberman et al . [ 44 ] , originally introduced this approach , classifying the type of activities 2 involved in it as : A ) Parametrization or customizations , considered as activities that allow users to choose among alternative behaviours already available in the application ; B ) Program creation and modiﬁcation , in the form of activities that imply some alteration , aim - ing at creating from scratch or modifying existing software artefacts . In what regards to C - AS , the Trigger - action pro - gramming 3 [ 45 ] [ 46 ] is recently gaining more popularity . In this approach , the end - users can handle simpliﬁed if - then programming rules that match a trigger with an ac - tion . Dey et al . [ 47 ] proposed iCap , a system that is the intermediate layer between low level tool - kits and users . They also present a speciﬁc solution [ 48 ] for user control , based on their Context Tool - kit [ 49 ] . C - AS do not necessarily have to be completely active or pas - sive , they can have hybrid approaches with di ﬀ erent degrees in between . For example , the autonomy level can be adjustable , enabling human users to collaborate with computational sys - tems managing the system behaviour as a team . Ball et al . [ 50 ] consider enabling human - agent teamwork in Intelligent Environments by employing concepts of adjustable - autonomy and mixed - initiative interaction . Such approaches reduce the chance of guesswork needing to be done . If the user or agent can not manage the system in the usual way , they can seek help from each other , inheriting the beneﬁts from autonomy level that is implemented . On the other hand , it also inherits the drawbacks from its opposite autonomy level . The advantages and disadvantages of the di ﬀ erent interaction categories are pre - sented in Table 1 . 2 Further information about the di ﬀ erent ways of customization can be found in Lieberman et al . [ 44 ] . 3 More information about Trigger - action programming can be found in Sec - tion 3 . 4 . 2 . 3 . 2 . 3 . 2 . Features of a Context - Aware System Schilit et al . [ 13 ] ﬁrst identiﬁed di ﬀ erent classes of context - aware applications . Pascoe et al . [ 55 ] , later aimed at identifying the core features of context - awareness . Dey and Abowd [ 3 ] pre - sented a categorization for features of context - aware applica - tions , based on the classiﬁcation of Schilit and Pascoe , namely : 1 . Presentation of information and services to the user . 2 . Automatic execution of a service . 3 . Tagging of context to information for a latter retrieval . The ﬁrst feature decides which information and services are presented to the user , based on context . Nearby located ob - jects might be emphasized , or for instance , a printer command might print to the nearest printer . The second feature is the au - tomatic execution of a service . For example , let us consider a smart home environment . “ When a user starts driving home from their o ﬃ ce , a context - aware application employed in the house should switch on the air condition system the co ﬀ ee ma - chine to be ready to use by the time the user steps into their house ” [ 9 ] . Finally , they present “contextual augmentation” , which extends the capabilities of sensing , reacting and interact - ing with the environment by using additional information . This is achieved by associating digital data with a particular context . For example , a tour guide can augment reality by presenting information about the attractions that they are surrounded by or are approaching [ 55 ] . In the previous subsections , we dis - cuss the need to : A ) Take into account the current limitations of C - AS ; B ) Include the di ﬀ erent interaction levels ; C ) The main challenges that are still open in the context - aware computing ﬁeld . In order to accommodate these demands , we propose to extend Dey and Abowd’s features of C - AS into : 1 . Presentation of information to the stakeholders 2 . Active or passive execution of a service 3 . Active or passive conﬁguration of a service 4 . Tagging context to information The ﬁrst one is very similar to Dey and Abowd’s . It keeps the essence of Pascoe’s “presenting context” , but Schilit’s “prox - imate selection” and “contextual commands” are merged with our second feature . We have introduced the notion of collabora - tion among stakeholders rather than just the users . We can have di ﬀ erent “situations of interest” according to the category of stakeholders ( e . g . , for a primary user it could be that the system is aware on the weather forecast , but for the engineers it may be that the system is aware of the level of battery in the mo - bile phone ) . So , we can di ﬀ erentiate Primary users’ contexts , Secondary users’ or system engineers’ , among others . Some contexts of interest from all these stakeholders will typically intersect . They do not necessarily have to be disjoint , equally they do not have to be exactly the same , there are no a - priori relations and it all depends on the applications and personal choices . Even when some “situations of interest” may be the same for di ﬀ erent stakeholders , they may be interested in them for di ﬀ erent reasons and may expect di ﬀ erent outcomes from the system when those situations materialize . The contextual information might arrive to some secondary or tertiary users 5 Name Pros Cons Name Pros Cons Active Execution ( Self - adaptivity ) • Little or no e ﬀ ort required by users [ 51 ] • No special user knowledge is needed [ 51 ] • Di ﬃ cult to ensure that the system will take an appropri - ate action ( Di ﬃ cult to validate and verify the system ) • Loss of control over what the system is executing and why [ 51 ] • There are still some open is - sues [ 29 ] [ 52 ] • Developershavealltheburden • Users can be uncomfortable not understanding what hap - pens with the information that themachinegathersfromthem Passive Execution ( Intelligibility & Control ) • Augments the trust of users [ 53 ] since they understand better how the system works • Easier to evaluate the sys - tem behaviour • The system will take the actions that the user wants • Requires developers to under - standhowtogenerateexplana - tions [ 38 ] • The users might not have enough expertise to take deci - sions on their own • Applications need to convey more information to explain actions to users [ 53 ] • May compromise the privacy of users if they are used on so - cial interactions • Userscanusetheirhighercon - text understanding for a better control the system [ 53 ] [ 2 ] Active Conﬁguration ( Learning & Adapting ) • Little or no e ﬀ ort required by users • No special user knowledge is needed • Can unearth needs , prefer - ences or habits di ﬃ cult to see in other ways [ 42 ] • Di ﬃ cult to determine when rules should be created or deleted • The rules are based on sensors values ( inaccuracy and uncer - tainty ) • Loss of control over what the system is executing and why [ 51 ] Passive Conﬁguration ( End - user programming ) • O ﬀ ers greater motivation , control , ownership , cre - ativity and quality to end - users [ 54 ] • Users are in control ; users know their tasks best [ 51 ] • Releases developers bur - den • Users might be forced to con - tribute and cooperate in con - text for which they could lack experience [ 54 ] • Meta - design is more complex and abstract than design • Complexityisincreased ( users need to learn adaptation com - ponents ) ; Systems may be - come incompatible [ 51 ] Table 1 : Comparative analysis on the interactivity levels that context - aware systems can have . that make the choices over the actions of the system , based on the users needs . Such as what happens in projects like POSEI - DON 4 [ 56 ] , where there is a need of secondary users ( e . g . , par - ents ) to take care of the primary ones ( i . e . , person with Down’s Syndrome ) . Our second feature includes all the di ﬀ erent in - volvement degrees of the user in the system actions , as the situ - ation arises when it is executing . A service can be automatically triggered , being the system autonomous in its decision . But it also can ask the approval of the user , or display a certain list of possible choices , as in Schilit’s “proximate selection” , to enable further collaboration between the system and the users . The third feature is related with being more useful to the stakehold - ers , relating its services to their preferences and needs , which can evolve in time . C - AS can adapt to these through the active or passive conﬁguration of the system , as explained in the pre - vious subsection . Finally , the last feature is the same as Dey and Abowd’s . 3 . Context - aware systems development techniques We have investigated the state - of - the - art in C - AS , under - standing better its conceptualization . In this section , we ﬁrst analyse the challenges of building such systems . Second , we study the C - AS development techniques in the literature throughout the most common stages of a development process : Requirements Elicitation , Analysis & Design , Implementation and Deployment and Maintenance . 3 . 1 . Development Challenges The following subsection highlights the challenges and de - mands of C - AS development . We focus more in the context 4 POSEIDON stands for PersOnalized Smart Environments to increase In - clusion of people with DOwn’s syNdrome information handling , as it is the most important and complex need . We also describe issues related to the diversity of systems and other important technological demands . 3 . 1 . 1 . Diverse and speciﬁc systems Almost any type of computerized system could potentially beneﬁt from having contextual understanding . Although di ﬀ er - ent kind of systems can be found next to the adjective “context - aware” , the process of embedding contextual awareness can be dramatically di ﬀ erent depending on the system type . For exam - ple , it is not the same to implement it in : a smart - phone appli - cation , a robot , a ubiquitous system or a web application [ 57 ] , a context - aware animal species recognition [ 58 ] , or an adap - tive e - book [ 59 ] , etc . Typically , context - awareness is a feature added on top of an existing system or functionality . Then , the implementation of such a feature depends intrinsically on the system where it is going to be implemented . Let us take the example of the context - aware smart - phone that is able to detect when is intruding into social situations in order to avoid unnec - essary interruptions . In this case , the features will be developed on top of the phone , its operating system , and its application to make calls . This fact turns the system into a very ad - hoc solu - tion . The main problem of being so speciﬁc , is that the amount of work employed to develop it will be di ﬃ cult to reuse , even for developing the same for a di ﬀ erent operating system . 3 . 1 . 2 . Context information handling In order to enable context - awareness , there is always a need of capturing context information and making it available to ap - plications and systems [ 60 ] . C - AS require separating how con - text is acquired from how it is used , so that applications are able to use contextual information without knowing the details of a sensor and how can it be implemented [ 49 ] [ 61 ] . The tech - niques for context information management have been widely 6 researched and are well understood [ 9 ] . Despite the advances , the challenge for an engineering process is to facilitate the de - velopment and reuse of structures that enable context infor - mation management and support the adaptation to the speciﬁc needs of the applications / systems . Following , the life - cycle [ 9 ] of context information is used as a reference to better clarify the issues that this information management may entail : Acquisition : First , the context information needs to be gathered . Generally , this happens from multiple and dis - tributed resources , which makes the quality and authentic - ity of information di ﬃ cult to achieve . On the other hand , sensors in general , are likely to provide inaccurate , over - lapping , contradictory or missing data ( e . g . , providing the same information at di ﬀ erent timings or with a jitter ) [ 62 ] . It also has to be mentioned , that the addition and removal of context resources can give rise to scalability issues . Fi - nally , it has to be taken into account that it will be di ﬃ cult to obtain contextual information if many users share the same physical sensors and service resources [ 63 ] . Modelling : After the information is sensed , it needs to be translated into usable values . In this process , real world concepts are translated into modelling constructs . A raw value of a user position may be in the form of : “42 . 85 , - 2 . 683333” . This information must be translated into more understandable information such as the name of a city , street , etc . These models require [ 64 ] [ 61 ] : 1 ) To repre - sent any kind of context information , reﬂecting the entities of the real world and their relations ; 2 ) Uniquely identify the contextual information , context and entities ; 3 ) To be simple , reusable , expandable and able to use the informa - tion at runtime ; 4 ) Validate pieces of data and encode its uncertainty . Reasoning : Based on the modelled data , di ﬀ erent kinds of conclusions can be inferred , where this data can be seen as evidence to support the conclusion [ 65 ] . In this way , new knowledge and understanding is obtained , based on the available context [ 66 ] . . This process has typically three di ﬀ erent phases [ 9 ] : ( 1 ) Context pre - processing , where data is cleaned to get rid of invalid , inaccurate and non de - sirable values ; ( 2 ) Sensor data fusion , in which sensor data is combined to produce more accurate and dependable in - formation ; ( 3 ) Context inference , from low - level informa - tion to high - level one . In what regards to reasoning , repre - sentation expressiveness is in mutual conﬂict with sound - ness , completeness and e ﬃ ciency [ 67 ] . Dissemination : Finally , both low - level and high - level con - text need to be distributed to the consumer . The context information must have high availability , ideally to be pro - vided it in real - time . Another desirable feature is to dis - cover new services that could provide new context infor - mation [ 65 ] . It also has to be mentioned that context information will in - herently contain important data related to the users , what raises some privacy issues . Privacy concerns may di ﬀ er from user to user , and may also be dynamically changing over time . The balance between privacy and the system potential is delicate , where the developer may fall into ethical issues . A detailed ex - amination of these issues is not the focus of this survey , but the reader can have more information about ethical concerns that can inﬂuence the area at engineering level in [ 68 ] . Besides , it is di ﬃ cult to obtain , ensure and evaluate the good Quality of Context ( QoC ) information , which depends on its [ 69 ] : Preci - sion , probability of correctness , trustworthiness , resolution and contemporaneity . 3 . 1 . 3 . Technological demands The technological challenges are not only focused on the in - formation management . We have classiﬁed the remaining rele - vant needs of C - AS systems into : • Flexibility versus change : Once the context information is provided , the rest of the system conﬁguration can happen in many forms , that depend on the speciﬁc implementation of the system itself . Although the particular implementa - tions can vary , a need that seems invariant is supporting a high amount of changes . • Cost : C - AS are expensive to develop , deploy , execute and maintain . The amount of information that they need to manage makes them resource hungry [ 70 ] and dependable on a very expensive structure . • Reliability : C - AS must be reliable , especially if they are going to be used in tasks where an error can put a human life at risk . Even if they are not able to o ﬀ er a continu - ous delivery of some services properly , they at least should be capable to perform its required basic functions tolerat - ing errors , faults and failures . Fault tolerance in pervasive systems can be increased by [ 71 ] : ( 1 ) E ﬃ ciently detect - ing faults ; ( 2 ) Isolating faults , to prevent its propagation to other parts of the system ; ( 3 ) Providing a transparent fault tolerance ; and ( 4 ) Good fault reporting mechanisms . Be - sides , it is di ﬃ cult to evaluate the correctness of C - AS due to their increasing size and device diversity . • Infrastructure : The expensiveness and complexity of C - AS development makes highly desirable for developers to have tools that support and ease their e ﬀ ort during the de - velopment of their systems . An infrastructure [ 72 ] , is soft - ware that supports construction or operation of other soft - ware , comprising systems that range from tool - kits to net - work services or other sorts of platforms . So , it enables applications that could not otherwise be built or would be prohibitively di ﬃ cult , slow or expensive . This kind of in - frastructures are typical in C - AS development . Neverthe - less , a certain infrastructure a ﬀ ords only certain styles of application and interface . This creates a tension between easing the development and the ﬂexibility of the infras - tructure , and it is a challenge itself . Although the ﬁeld has matured in the latest years , developers have still many issues to overcome when developing C - AS . The next step is to fathom the techniques proposed to develop this kind of systems . 7 3 . 2 . Requirements elicitation The requirement elicitation process helps developers to reach a better understanding of the user needs and demands by ﬁnding a systematic approach for eliciting , analysing , documenting , validating and managing software requirements from individ - ual stakeholders [ 73 ] [ 74 ] [ 75 ] . If the right requirements are not well deﬁned prior to the development of the system , it will be more likely to fail meeting the user and other stakeholder’s ex - pectations . Some conventional techniques for eliciting require - ments can be classiﬁed into [ 76 ] : Interviews , questionnaires , task analysis , domain analysis , introspection , repertory grids , card sorting , laddering , group work , brainstorming , joint ap - plication development , requirements workshops , ethnography based , observation , protocol analysis , apprenticing , prototyp - ing , goal based , scenario - based and viewpoints . The aim of this subsection is not to deeply review them , but to focus in require - ment elicitation techniques that have been tailored for meeting the needs of C - AS development . We have classiﬁed them into : A ) Context categorizations ; B ) User - centred and Social Science based ; C ) Requirements modelling D ) Adaptive and goal ori - ented . We compare their advantages and disadvantages in Ta - ble 2 . Finally , we analyse previous works for identifying com - mon features of requirements elicitation techniques for C - AS , to which we add our conclusions . 3 . 2 . 1 . Categories of context in Requirements Elicitation Some requirements engineering techniques are based on context - classiﬁcations . Krogstie [ 77 ] studies the challenges that specify the requirements to applications running on mo - bile technology . He presents six context categories ( i . e . , spatio - temporal , environment , personal , task - oriented , social and in - formation contexts ) to guide the design of customised stake - holder interviews . Hong et al . [ 78 ] present a methodology for requirements elicitation in context - aware ubiquitous appli - cation design . In their approach , they propose to use the notion of extended context , categorizing it into : A ) Computing con - text , referring to the hardware conﬁguration used ; B ) User con - text , that represents all the human factors such as user’s proﬁles or calendars ; and C ) Physical context , that considers the non – computing - related information provided by a real world envi - ronment . Kolos - Mazuryk et al . [ 79 ] , based on [ 35 ] [ 13 ] , present a classiﬁcation of contextual and non - contextual distinguishing properties of ubiquitous applications . On the contextual prop - erties , they acknowledge C - AS as having : I ) Dynamic environ - ment ; II ) Variable bandwidth ; III ) Changing display character - istics ; IV ) Changing user environment ; V ) The target platform is not known in advance . Finally , they present an initial phase of a requirements engineering process . 3 . 2 . 2 . User - Centred and Social Science based approaches Sutcli ﬀ e et al . [ 80 ] introduce a Personal and Contextual Requirements Engineering framework ( PC - RE ) , a method for their capture that incorporates a trade - o ﬀ analysis to decide how personal requirements should be implemented . They pro - vide three di ﬀ erent layers : Stakeholders , user characteristics and personal goals . These , can change over space and time . In what regards to requirements elicitation for C - AS develop - ment , they consider the locales conceptual framework [ 19 ] for including spatial implications in requirements . They acknowl - edge that monitoring requirements for this kind of applications needs to be speciﬁed for : A ) The devices and sensors that cap - ture environmental input ; B ) Functions and processes that in - terpret low - level data into streams of meaningful data ; C ) In - terpreters that make sense of the data using a model of the do - main ; D ) Models of the domain . They acknowledge that the results of interpreters ( e . g . , body temperature above a certain threshold is dangerous for a patient ) are frequently ambiguous so further requirements need to be considered : I ) Intelligibil - ity feedback functions ; II ) Default interpretations when data in - put is not available or is inadequate ; III ) Mediation dialogues should be planned to enable users override systems’ decision . Kjaer [ 81 ] proposes a requirement gathering process for the design of context - aware middleware . They video - recorded and documented the activities of people who worked at a farm while they were doing their daily work . Using an ethnographic study to classify the context , they determined requirements for the middleware they were trying to develop . Evans et al . [ 82 ] present R4IE , a framework for a requirements engineering pro - cess for Intelligent Environments , in which context - awareness is a primary feature . Their work is similar to Sutcli ﬀ e’s but they include stakeholder proﬁling with individual user customiza - tion . They also introduce a core ethical model , enhancing the addressing of the issues of social context and ethnicity , consid - ering privacy . 3 . 2 . 3 . Requirements Modelling Desmet et al . [ 83 ] present Context - Oriented Domain Analy - sis ( CODA ) , a systematic approach for gathering requirements of C - AS . It enforces modellers to think by means of “context - unaware” behaviour , which can be further reﬁned according to “context - aware dependant adaptations” at certain “valida - tion points” . They also identify existing relationships between context - dependent adaptations . CODA can be represented : in a tree structure ( graphically ) , using XML for writing its diagrams ( textually ) and mapping its semantics to elements in the deci - sion tables ( structurally ) . Choi et al . [ 84 ] propose a method for requirements gathering in C - AS based on variations of UML Use Case Diagrams . They classify context - aware services in ﬁve types , in order to give stakeholders a better understanding when analysing C - AS . They also introduce a process for re - quirements analysis , context - aware use case diagram , context - switch diagram and dynamic service model for context - aware systems . In a further work [ 85 ] , they introduce decision tables or trees . They encourage analysts and stakeholders to pay at - tention to context related issues such as system platform , target users , intelligence , possible context - aware services and agree - ment with other stakeholders as well as understanding context with decision tables and trees . Ruiz et al . [ 86 ] describe a model - driven engineering approach targeting non - functional require - ments , where they : A ) Derive a model - driven system design that meets speciﬁc requirements ; B ) Generate code that im - plements such design . Sitou and Spanfelner [ 87 ] present RE - CAWAR a requirements engineering process for context - aware 8 R e q u i r e m e n t s E li c i t a t i o n Approaches • Context categories • Requirements Modelling • User Centred & Social Science Based approaches • Adaptive & Goal Oriented A n a l y s i s & D e s i g n Design Patterns • Ubiquitous Com - puting Features • Fluid Interac - tions • Privacy • Physical - virtual spaces • Monitoring • Adaptation • Decision - making Architectural Patterns • Event - Control - Action • Sense - Compute - Control • Blackboard • Actions Pattern • Context Source & Management Hierarchy Veriﬁcation • Model - Checking : – SPIN – µ KLAIM – AFChecker • Simulation & test - case generation : – CASS – DiaSim – Bigraphs & EFSM – Automatedgenerationoftests Typical Process • Framing • Encoding • Unifying • Evaluating I m p l e m e n t a t i o n Context - Information Management • Acquisition : – Responsibility – Frequency – Source – Sensor Type – AcquisitionProcess • Modelling : – Key - Value – MarkupScheme – Graphical – Object Ori - ented – Logic Based – Ontology Based • Reasoning : – Supervisedlearning – Unsupervisedlearning – Fuzzy Logic – Ontological – Probabilistic • Dissemination : – Query – Subscription Programming Paradigms • Conventional – Object - Oriented – Aspect - Oriented – Feature - Oriented ∗ SPL – Service - Oriented • Emerging – Agent - Oriented – Holoparadigm – Context - Oriented • Model Driven – DSL ∗ Trigger - action pro - gramming D e p l o y m e n t & M a i n t e n a n ce Maintenance • Corrective : – Intelligibility • Adaptive • Perfective • Preventive : – Surrogate Application / Device Usage – Alternative Notiﬁcation Mechanisms – Context Information Error Handling – N - Version Approach – Fault Notiﬁcation Figure 1 : Summary of the techniques / approaches used for Context - Aware Systems Engineering . and adaptive systems . It provides an integrated model for the usage context based on di ﬀ erent models : I ) User Model , where the participants aspects are represented , characterizing the users and user groups ; II ) Task Model , to represent the activities as - pects , identifying which task and interactions are needed to per - form it ; III ) Domain Model , that consists of any user visible , operable objects in the applications’ domain , representing the operational environment aspects ; IV ) Platform Model , that rep - resents the physical infrastructure and the relationship between the involved devices ; V ) Dialogue model , where the interaction between the user and the system is depicted ; VI ) Presentation model , that shows visual haptic and audio elements needed for the interaction . Through an iterative process , stable needs are identiﬁed , as well as such that may change according to the con - text . The stable needs result in the functionality of the system , while the situational needs are further analysed to specify the adaptation logic . 3 . 2 . 4 . Adaptive and Goal - Oriented Finkelstein and Savigni [ 88 ] present a framework for require - ments engineering in context - aware services , where they pro - pose that requirements themselves can change during the sys - tem execution . They di ﬀ erence between : A ) Goals , as a ﬁxed objective of the service ; B ) Requirements , as a more volatile concept that can be inﬂuenced by the context . Oyama et al . [ 89 ] describe an approach of service requirements analysis using the feedback of contexts , to support the elicitation of user inten - tions and goals robustly . They identify two approaches in the evolvability of C - AS : I ) Short - term evolution , to handle excep - tions and to make correct reactions at runtime ; II ) Long - term evolution , to monitor user behaviour and capture new system requirements based on human intentions . Baresi et al . [ 90 ] present FLAGS , a goal model that adds adaptive goals in order to embed adaptation countermeasures , fostering self - adaptation by considering requirements as live , runtime entities . They dis - tinguish between : 1 ) Crisp goals , whose satisfaction is Boolean ; 2 ) Fuzzy goals , whose satisfaction is represented through fuzzy constraints . Adaptation countermeasures are triggered by vio - lated goals and the goal model is modiﬁed accordingly to main - tain a coherent view of the system and enforce adaptation di - rectives on the running system . Siadat and Song [ 91 ] discuss the state - of - the - art requirements for adaptive systems , under the notion that requirements that are engineered at design time may require further reasoning or reﬁnement at runtime in order to adapt to dynamic context - driven changes . 3 . 2 . 5 . Conclusions Other surveys have also studied the requirement elicitation techniques specialized for C - AS development . Following , we analyse their view on the most common characteristics in re - quirements elicitation for C - AS . Preuveneers and Novais [ 92 ] present a survey of the best software engineering practices in Ambient Intelligence . In all the approaches they surveyed for requirements elicitation , they highlight : A ) The importance to actively involve the end - user and to develop an elicitation pro - cess that is customized to the competences of the end user ; B ) The need for an explicit representation of the context and Name Pros Cons Pre - categorized • Can complement other re - quirement elicitation tech - niques • Categories might be too broad or to narrow • Categorization schemes can not accommodate all the de - mands for C - AS [ 9 ] Social Science Based • Complement the SW en - gineering knowledge with the one of social experts • More complete require - ments • Complexityofincludingsocialexpertsasnewstakeholders • Cost User Centred • Focusesontheneedsofthestakeholders • Improves the usability • Requires user involvement Model Driven • Forces developers to have di ﬀ erent views • Help to decide the bound - aries between elicitation and design • Enables better traceability • Di ﬀ erent readers can make di ﬀ erent interpretations • Hardtocapturenon - functional requirements Adaptive & Goal Oriented • Provides means to capture and analyse variability • Opens the way to require - ments evolution • Di ﬃ cult to determine when the behaviour of the system meets the requirements Table 2 : Comparative analysis on the advantages and disadvantages of the di ﬀ erent requirement elicitation techniques that are specialized for context - aware systems development . goals of the user , and how the context impacts the interac - tion with the user ; C ) An explicit formalization of which re - quirements are relevant for a given context and how the these can evolve when the context change . Alshaikh and Boughton [ 8 ] analyse how context works in requirements elicitation . In early stages , context is associated with the task of setting sys - tem boundaries , while in later stages , context is used implic - itly within the scenario - based requirements ( common - sense ap - proach ) . Finally , they distinguish between context and require - ments . Context is deﬁned through the user’s situation and Re - quirements are described focusing on the user’s interaction with the system . Evans et al . [ 82 ] classify the prominent themes in requirements elicitation focused on context - awareness for Intelligent Environments : 1 ) The consideration , adoption and possible enhancement of a context taxonomy ; 2 ) A general as - sumption that systems need to be adaptable to be context - aware ; 3 ) Elicitation techniques used to capture end - user cognitive tasks require enhancement to account for context - awareness ; 4 ) Identiﬁcation of target user groups and acknowledgement that contextual requirements for either proﬁle may evolve over time ; 5 ) Requirements themselves might be context - driven ; 6 ) The consideration of cultural context ; 7 ) The adoption of goal - oriented requirements engineering where higher - order goals are apparent in the domain . They also acknowledge that there is lack of standards in what regards to requirements en - gineering for C - AS . From the literature review , we insight that a requirements elicitation process , tailored to the demands of C - AS , needs to support engineers : 1 . Identifying situations in which services that are relevant to the stakeholders could be provided . We acknowledge that 10 social sciences and social experts could potentially help to understand better these situations . 2 . Determining how the system is going to detect those situa - tions . It does not have to be an exhaustive description , but it should facilitate the future design on how the contextual information is going to be acquired , modelled , reasoned and distributed . 3 . Choosing how the system will interact 5 with the stakehold - ers : ( a ) Determining the behaviour that the system will ex - hibit in those situations . ( b ) Identifying the possible conﬁgurations that can help to evolve the system after its implementation . 3 . 3 . Analysis and Design When the system requirements are well speciﬁed , an analysis can ease the development plan through a better understanding of the system implementation . The design brings developers closer to a feasible implementation plan . It has to be acknowl - edged that there is no set of universally accepted basic design and development principles , or standards , which lead to a uni - form approach to the e ﬃ cient C - AS development . The aim of this subsection is to study the di ﬀ erent approaches for analysing and designing C - AS . We ﬁrst focus on the design process it - self , to examine more in depth : A ) The di ﬀ erent architectures of C - AS and architecture patterns used for design ; B ) Middle - ware ; C ) Design - Patterns ; and D ) Design evaluation . 3 . 3 . 1 . Design process Bauer et al . [ 93 ] identiﬁed the most common practices used by developers when designing a C - AS , dividing the process into : A ) Framing : Designers will articulate and explore a con - cept of context , which imposes a set of limitations on what ex - ist inside and outside the design space their work inhabits [ 93 ] . B ) Encoding : In this stage designers will discuss the behaviour of the system and instantiate a vocabulary or codes to express its behaviour . C ) Unifying : As the designers explore the design space , certain possible design solutions are brought to the fore - ground , which impose additional constraints over other con - cerns the designers address . D ) Evaluating : The designer will focus on a solution that satisﬁes the constraints according to their encoded formulation of context , determining if they have arrived at a satisfactory solution . 3 . 3 . 2 . Architectures An architecture is an abstraction , that generalizes the sys - tems , without showing detailed implementation such as code or circuits . This subsection studies the architectures used for C - AS development . Due to their diversity , C - AS have adopted disparate ranges of architectures . Table 3 shows the di ﬀ erent classiﬁcations of architectures according to existing literature surveys . Following , we analyse the works that classify generic architectures and we study the di ﬀ erent architectural patterns that can be used for creating C - AS . 5 More information about interaction categories can be found in Section 2 . 3 . 1 Author ( s ) Winograd Chen et al . Perera et al . Reference [ 94 ] [ 95 ] [ 9 ] Year 2001 2004 2014 ArchitectureTypes • Widgets • NetworkedServices • BlackboardModel • Direct Sensor Access • MiddlewareBased • ContextServer • ComponentBased • Distributed • ServiceBased • Node Based • Centralized • Client - Server Table 3 : Di ﬀ erent architecture classiﬁcations for context - aware systems . 3 . 3 . 2 . 1 . Generic architectures . Other works also study the common parts that di ﬀ erent architectures have , providing a generic architecture for C - AS . Baldauf et al . [ 96 ] present a survey on C - AS , in which they introduce an abstract layer ar - chitecture for C - AS that is divided in : A ) Sensors ; B ) Raw data retrieval ; C ) Storage / Management ; D ) Pre - processing ; and E ) Application . Hong et al . [ 63 ] introduce a literature review of C - AS , in which they classify architectural layers of these sys - tems into : I ) Concept and Research ; II ) Network infrastructure layer ; III ) Middleware layer ; IV ) Application layer ; and V ) In - frastructure layer . 3 . 3 . 2 . 2 . Architectural patterns . An architectural pattern is a set of architectural design decisions that are applicable to a re - curring design problem , and parametrized to account for di ﬀ er - ent software development contexts in which that problem ap - pears [ 97 ] . We have gathered from the literature , the following patterns : • Context Sources & Managers Hierarchy [ 98 ] : This archi - tectural pattern aims at providing a structural schema to enable the distribution and composition of context infor - mation processing components ( Context Sources and Con - text Managers ) . A Context Source encapsulates single do - main sensors ( e . g . , blood pressure ) , while a Context Man - ager component covers multiple domain context sources ( e . g . , integration of blood pressure with heart beat mea - sures ) [ 99 ] . The structural schema consists of hierarchical chains of them , in which the outcome of a context infor - mation processing unit may become input for the higher level unit in the hierarchy . It o ﬀ ers a ﬂexible and decou - pled distribution of context processing activities ( sensing , aggregating , inferring and predicting ) . It also improves collaboration among context information owners allowing new parties to join the collaborative network in order to provide richer context information . • Blackboards [ 94 ] : The architectural style arose in artiﬁ - cial intelligence applications and its intuitive sense is one of many diverse experts sitting around a blackboard , all attempting to cooperate in the solution of a large , com - plex problem [ 97 ] . As an architectural pattern , it adopts a data - centric point of view . Rather than sending requests to distributed components and getting call - backs from them , a process posts messages to a common message board , to which others can subscribe to receive messages matching 11 a speciﬁed pattern that have been posted . All communica - tions go through a centralized server . • Event - Control - Action [ 98 ] : It has been devised in order to decouple context concerns from reaction ones , under the control of an application model . This pattern provides a structural scheme to enable the coordination , conﬁgu - ration and cooperation of distributed functionality within services platforms . Divides the information management related tasks from the ones that trigger actions , under the control of an application behaviour description . It pro - vides the following structural scheme : A ) Event , where tasks about the gathering and processing of context infor - mation are placed in ; B ) Control , that connects the context events with the actions to take ; C ) Action , that triggers the behaviour of the application . • Sense - Compute - Control ( SCC ) [ 97 ] : Also known as Sensor - Controller - Actuator , this architectural pattern was tailored for applications that interact with the environ - ment through sensors and actuators . Its architecture is divided in four layers [ 100 ] : I ) Capture , which gath - ers the useful information from the environment ; II ) Re - ﬁnement , where the information from the environment is treated ; III ) Control , where the decisions over the ac - tions are taken ; IV ) Action , where the orders from the control layer are received and orders are executed . Al - though it presents a di ﬀ erent layer for separating the acqui - sition of contextual information from its treatment , SCC resembles the Event - Control - Action ( ECA ) pattern , that presents solutions for recurring problems associated with managing context information and reacting upon context changes [ 101 ] . The main di ﬀ erence between these two patterns is the domain of application . While ECA ﬁts better in environments where software - based changes are expected , SCC is conceived for systems that imply in - teractions among numerous heterogeneous devices , many of them directly interacting with their physical surround - ings through sensors and actuators [ 102 ] . This pattern can be found in disparate application domains such as [ 100 ] [ 102 ] : Ubiquitous computing , automotive & avion - ics , smart houses / o ﬃ ces / cities and industrial control sys - tems among others . • Actions Pattern [ 98 ] : It provides a structure of compo - nents that support designing and implementing of action - related concerns . Its structure divides action purposes from action implementations in order to better coordinate the composition of actions . Its component arrangement includes Action Resolvers , Action Providers and Action Implementors . The Action Resolver breaks compound actions into indivisible service units . Then , the Action Provider delegates them to the proper concrete action im - plementations ( Action Implementor ) . An action might be performed independently or in parallel , while some actions depend on or trigger others . The applicability and beneﬁts of the presented architectural patterns can be observed in Table 4 . Pattern Applicability Beneﬁts Context Sources & ManagersHierarchy • Context information processing • Decentralization • Encapsulation , e ﬀ ective , ﬂexi - ble and decoupled distribution of context information man - agement activities • Filteringunnecessaryinforma - tion Blackboards • Context information processing • Centralization • Complex problem solving • Knowledge is reusable • Knowledge sources can work concurrently • Easy to add / remove knowledge Event - Control - Action • Trigger - action applications • Software - based actions • Distribution of responsibilities • Dynamic deployment and development of applications • Extensible and ﬂexible appli - cations Sense - Compute - Control • Trigger - action applications • Large number of heterogeneous devices ( sensors and actuators ) • Static environments • Distribution of responsibilities • Dynamic deployment and de - velopment of applications • Extensible and ﬂexible appli - cations • Allows the control of various devices Actions Pattern • Action management • Actions performed in parallel • Dependencybetweenactions • Avoids permanent binding be - tween action and purpose • Enables di ﬀ erent implementa - tions at platform run - time • Actionsmaybechangedorex - tended independently Table 4 : Beneﬁts and applicability of architectural patterns for context - aware systems . 3 . 3 . 3 . Middleware Middleware is the most used structure to collect context in - formation , support the deployment of sensors and hide hetero - geneity . By separating how context is used from how it is ac - quired , it eases the development of a generic set of applica - tions by reusing and customizing the necessary structure for context manipulation . Although many middleware approaches have been presented , it is di ﬃ cult to achieve a universal mid - dleware tool , applicable to any area , and capable of solving all the challenges involved in the context provision to applications , despite the many standpoints in the literature [ 9 ] . In this di - rection , approaches like UniversAAL 6 , aim at creating an open platform and reference speciﬁcation that makes technically fea - sible and economically viable to develop Ambient Assisted Liv - ing solutions . In order to better reuse their middleware , they provide a market in which developers will upload their appli - cations to make them available to users . Besides , the ReAAL 7 initiative has rolled - out active and independent living applica - tions on top of UniversAAL , and has tested them with users in real life . Middleware has been deeply analysed in the literature . For this reason , it is out of the scope of this survey to deeply analyse them . The reader can ﬁnd broader comparisons and studies related to middleware in Perera et al . [ 9 ] , Preuveneers and Novais [ 92 ] , Kjaer [ 103 ] , Baldauf et al . [ 96 ] or Henricksen et al . [ 104 ] , among others . 6 http : / / www . universaal . org / 7 http : / / www . cip - reaal . eu / 12 3 . 3 . 4 . Design patterns A design pattern is a semi - structured description of an ex - pert’s method for solving a recurrent problem , which includes a description of the problem itself and the context in which the method is applicable , but does not include directives which bind the solution to unique circumstances [ 105 ] . As in other domains , design patters have also been suggested for context - aware computing . They can help designers to focus on what they want to implement without having to resolve recurrent is - sues . Usually , problems have a strong relationship with the plat - form where they are going to be executed , which makes their identiﬁcation ad - hoc and di ﬃ cult to reuse . We have classiﬁed the di ﬀ erent patterns that can be obtained from the literature , according to the problem they intend to solve : • Ubicomp features : Enable ubiquitous and pervasive com - puting features . • Fluid interactions : Solve common problems that arise from providing a better interaction with the users . • Privacy : Address issues related with the conﬁdentiality of the user data . • Physical - virtual spaces : Looks at how physical objects and spaces can be merged with the virtual . • Monitoring : Enable to systematically observe the system itself and environmental conditions . • Adaptations : To dynamically perform structural and be - havioural changes in an adaptive system without leaving it in an erroneous or inconsistent state . • Decision making : Mechanisms to solve problems related with taking decisions . It is di ﬃ cult to determine design patterns that can be universally reused . Instead , they help to solve some speciﬁc problems that might not be necessarily applicable to any C - AS . Besides , it must also be acknowledged that there is no widely recognized technique for ﬁnding appropriate design patterns from existing C - AS . Due to space restrictions , a further anal - ysis of these patterns is not provided , but each of the patterns is related to its corresponding paper in table 5 . More informa - tion about design patterns can be also found in [ 92 ] [ 106 ] [ 107 ] . 3 . 3 . 5 . Design evaluation The system complexity and hence the likely number of de - sign errors , grows exponentially with the number of interacting system components . Although program testing can be a very e ﬀ ective way to show the presence of bugs , it is inadequate for showing their absence [ 112 ] . In these cases , veriﬁcation techniques are used to explore some general properties about the behaviour of a program . Most of the veriﬁcation done in C - AS is in the form of model checking , an approach to formal veriﬁcation that proves whether if a model meets a given speciﬁcation . Along with veriﬁcation techniques , C - AS are usually evaluated by using simulations . In these experiments , the behaviour of a system is imitated in order to provide a preliminary understanding of its performance . The rest of the section discusses some representative samples of the Ubicomp features & Decision making Fluid Interactions Privacy Ubicomp features [ 108 ] Upfront Value Proposition [ 108 ] Personal Ubicomp [ 108 ] Ubicomp for groups [ 108 ] Ubicomp for places [ 108 ] Exploration and navigation guides [ 108 ] Enhancedemergency response [ 108 ] Personal memory aids [ 108 ] Smart homes [ 108 ] Augmentedrealitygames [ 108 ] Streamliningbusinessoperations [ 109 ] Global data proxies Decision making [ 107 ] Adaptation detector [ 107 ] Case - based reasoning [ 107 ] Divide & conquer [ 107 ] Architecture - based [ 107 ] Trade - o ﬀ based [ 109 ] [ 108 ] Follow - me displays [ 109 ] [ 108 ] Context - sensitive I / O [ 110 ] Typiﬁed context element [ 108 ] Scale of interaction [ 108 ] Sense - making of services and devices [ 108 ] Streamliningrepetitivetasks [ 108 ] Keeping users in control [ 108 ] Serendipityinexploration [ 108 ] Active teaching [ 108 ] Resolving ambiguity [ 108 ] Ambient displays [ 108 ] Pick and drop [ 109 ] Appropriate levels of attention and anticipation [ 108 ] Fair information practices [ 108 ] Respecting social organizations [ 108 ] Building trust and credibility [ 108 ] Reasonablelevelofcontrol [ 108 ] Appropriateprivacyfeedback [ 108 ] Privacy sensitive architectures [ 108 ] Partial identiﬁcation [ 108 ] Physical privacy zones [ 108 ] Blurred personal data [ 108 ] Limited access to personal data [ 108 ] Invisible mode [ 108 ] Limited data retention [ 108 ] Notiﬁcation on access ofpersonalinformation [ 108 ] Privacy mirrors [ 108 ] Keep personal data on personal devices Monitoring Physical - Virtual Spaces Adaptations [ 111 ] Flyweight [ 111 ] Hybrid mediator - observer [ 111 ] Enactor [ 111 ] Flexible context pro - cessing [ 107 ] Sensor factory [ 107 ] Reﬂective monitoring [ 107 ] Context - based routing [ 109 ] [ 108 ] Physical - virtual associations [ 110 ] Active context element [ 108 ] Active Map [ 108 ] Tropical information [ 108 ] Successful experience capture [ 108 ] User - created content [ 108 ] Find a place [ 108 ] Find a friend [ 108 ] Notiﬁer [ 111 ] Strategy [ 110 ] Rule - based adaptation [ 110 ] Context wrapper [ 107 ] Component insertion [ 107 ] Component removal [ 107 ] Server reconﬁguration [ 107 ] Decentralizedreconﬁg - uration Table 5 : Classiﬁcation of design patterns used for context - aware systems development based on their applicability . state - of - the - art for evaluating the design of a C - AS . 3 . 3 . 5 . 1 . Formal Veriﬁcation . Formal veriﬁcation techniques provide a safer development of systems in intelligent envi - ronments , what leads to increase their reliability [ 113 ] . Au - gusto et al . [ 114 ] show techniques as well as tools that can be used to model processes and interactions , detecting prob - lems through simulation and veriﬁcation in early stages of the development . On a further work , Augusto and Hornos [ 115 ] , present a methodological guide which provides strategies and suggestions on how to model , simulate and verify these types of systems . Is divided in four stages : A ) Informal modelling ; B ) Structural modelling ; C ) Behavioural modelling ; D ) Simu - lation and veriﬁcation . The methodology is centred on a reﬁne - ment strategy which starts identifying the core components of Intelligent Environments ( sensors / actuators , actors , interfaces and communication mechanisms ) and then working on succes - sive models of increasing complexity . Although their method - ology is tool - independent , they illustrate it using SPIN [ 116 ] , a generic and open veriﬁcation system that supports the design and veriﬁcation of asynchronous process systems . Preuveneers and Berbers [ 117 ] also support a model checking approach in order to being able to verify the many possible conﬁgurations and contextual situation that a C - AS can be in . They discuss 13 the major beneﬁts and weaknesses of the SPIN tool . D’Errico and Loreti [ 118 ] present a set of formal tools that allows speci - fying systems along with a model - checking algorithm to verify whether considered speciﬁcation satisfy the expected proper - ties . They introduce µ KLAIM , based on a simpliﬁed version of a Kernel language for agent interaction and mobility [ 119 ] , which is based on an assume - guarantee approach : A system is not considered as isolated , but in conjunction with assumptions on the environment behaviour where is executed . The system can be speciﬁed in : I ) Process , accurately deﬁned ; II ) Environ - ment , more abstract and formalized by logical formulae . To specify properties of µ KLAIM systems they use modal logic ( MoMo ) that allows describing interactions that the enclosing environments can have . Liu et al . [ 120 ] present AFChecker , a public available tool to improve user’s fault detection and in - spection experiences . It has three major components : 1 ) Model checker based on a technique for fault patterns and their au - tomated identiﬁcation [ 121 ] . Which derives a state transition model from a set of user - conﬁgured adaptation rules and veri - ﬁes the model to detect ﬁve 8 common types of adaptation faults ; 2 ) Constraint inference engine , that infers both deterministic and probabilistic constraints based on CHOCO 9 by analysing the propositional atoms in the user - conﬁgured adaptation rules ; 3 ) Fault Report Processor , that processes the fault reports gen - erated by its underlying model checker . The ranking of fault reports for user’s inspection can be dynamic or static , depend - ing on the interaction mode . Approach Applicability Pros Cons • Tool : SPIN [ 116 ] • Language : PROMELA [ 122 ] • Methodology : MIRIE [ 115 ] IntelligentEnvironments [ 113 ] , Multi - agent systems [ 123 ] , Environmentswithmultipledevicesand / or sensors • Identify contexts that can give rise to con - ﬂictingactions • Supportive ﬁnding non - deterministic systembehaviours • Provide counter - examples for unveriﬁ - ablesituations • Natural explicit repre - sentationoftime • Di ﬃ cult to model ex - ternalinﬂuences • Easy to overlook de - pendenciesamongcon - textvariables • In complex situations , many state spaces are di ﬃ cult to process e ﬃ - ciently • Tool : µ KLAIM [ 118 ] • Language : KLAIM [ 119 ] MoMo [ 124 ] • Methodology : µ KLAIM [ 118 ] CodeonDemand , RemoteEvaluation , MobileAgents , DistributedSystems • Allows specifying systems by means of mixedspeciﬁcations • Associativity and com - mutativity of parallel and non - deterministic operators • Descriptions of the whole system are required to stablish systemproperties • Tool : AFChecker [ 120 ] • Language : CHOCO 9 • Methodology : (cid:53) User - conﬁguredrule - based adaptations • Alleviates the false positiveproblem • Userscanvalidatetheirownrules • Only considers con - straints on a binary basis • Might be too resource consuming for execut - inginamobiledevice Table 6 : Comparative analysis on the advantages and disadvantages of the di ﬀ erent approaches for validating context - aware systems through model checking . 8 Non - deterministic adaptations , dead rule predicates , dead states ( meaning that no rules can be satisﬁed in these states ) , adaptation traces and unreachable states . 9 Open source Java library . http : / / choco - solver . org / 3 . 3 . 5 . 2 . Simulation and test - case generation . Park et al . [ 125 ] present CASS , a simulation tool for smart - homes that is able to generate virtual people in order to perceive its movements and actions through sensors . The tool is programmed in Java , and it allows modifying and deleting sensors / devices according to the developers preferences . After , it can perceive simulated movements of virtual people , generating proper values for each sensor type . They also describe the system architecture and hi - erarchical rule structure model for smart - homes . Wang et al . [ 126 ] , provide an approach for automating the generation of tests for context - aware pervasive applications . They provide an integrated solution to identify when context changes may be rel - evant , and a control mechanism to guide the execution of tests into potentially interesting contextual scenarios as deﬁned by a coverage criterion that is context - cognizant . Their solution can be used to enhance other test suites of context - aware applica - tions . Bertran et al . [ 127 ] introduced DiaSuite , a tool suite for the development of sense - compute - control applications . Within their suite of tools , they present DiaSim [ 128 ] , a parametrized simulator to ease the acquisition , testing and interfacing of a variety of software and hardware components . The simulator is parametrized to a high - level description of the target environment , written in their own speciﬁcation language ( DiaSpec ) . This description is used to generate both a programming framework to develop the simulation logic and an emulation layer to execute applications . Furthermore , the simulation can be rendered , allowing to visually monitor and debug the system . Their tool can be found as an Eclipse 10 plugin . Yu et al . [ 129 ] apply a bi - graphical reaction system to model the environment that interacts with the middleware and domain services in the development of C - AS . To model the data entities in the environment , they extend the bi - graphical sorting predicate logic and build a meta - model . Then , they create a model of the middleware using an extended ﬁnite state machine . By synchronizing the bi - graphical reaction system with the state machine , they can generate test cases to verify the interactions between the environment and the middleware . Finally , they show the reductions of the number of test cases by using a bi - graphical pattern - ﬂow based testing on an airport example . Their tool is also in the form of an Eclipse 1 0 plugin . Generally , authors recognize three main issues when simu - lating C - AS [ 127 ] [ 129 ] : Modelling , source simulation and per - formance . First , it is di ﬃ cult to determine what to model and in what granularity . Likewise , the model needs to be accurate enough to match such granularity . Second , some issues about the correctness of the stimulus producers may arise when either the logged data are replayed from actual sensors or a domain - speciﬁc modelling function is introduced . Emulated sensors must be programmed in such way , that for a given input , they produce the same output as its equivalent real sensor . Besides , merging the di ﬀ erent intensities of simulated sensors requires 10 Eclipse is an integrated development environment ( IDE ) from the open source community of tools , projects and collaborative working groups Eclipse . https : / / eclipse . org / 14 domain - speciﬁc knowledge . Finally , physical spaces may in - volve lots of services , accurate simulation models and rich sim - ulation logics which can be resource consuming . Approach Features Limitations Tool Support CASS [ 125 ] • Simulate virtual people perceiving simulated movements in sensors • Able to detect rule con - ﬂicts • Very ad - hoc • Only applicable to smart home develop - ment (cid:51) Automatedgenerationoftests [ 126 ] • Enhance existing test - suites • Identify when context changes might be rele - vant • Static analysis tools are conservative • Infeasible drivers (cid:53) DiaSim [ 128 ] • Automatically gener - ates an emulation layer to run the application code unchanged • Generation of a simu - lation framework to al - low the development of the simulation logic • The simulation logic has to be done by de - velopers (cid:51) Bi - graphs & EFSM [ 129 ] • Test cases are gener - ated tracing the inter - actions between the bi - graphical model and the middleware • The number of test cases is reduced by us - ing a bi - graphical pat - tern ﬂow • Assumes that mid - dleware invokes only atomic services • Reaction rules are trig - gered in matches with agents and / or a middle - ware analysis result (cid:51) Table 7 : Comparative analysis on the features and limitations of the di ﬀ erent approaches for evaluating context - aware systems through simulations . 3 . 4 . Implementation After a good design and veriﬁed plan , there is a need to re - alize the implementation of the ideas into a tangible system . In this subsection we analyse the most common techniques for context information management and the most acknowledged programming paradigms that have been used for C - AS devel - opment . 3 . 4 . 1 . Context information management techniques There has been some research in what regards to context in - formation management techniques [ 130 ] [ 131 ] [ 61 ] [ 132 ] [ 96 ] . Perera et al . [ 9 ] , presented what we consider the most complete survey on it . They classiﬁed the context information life - cycle into : 1 ) Acquisition ; 2 ) Modelling ; 3 ) Reasoning ; and 4 ) Dis - semination . They analysed each of the techniques and com - pared their advantages and disadvantages . Following , a brief summary of the main techniques for this purpose . 3 . 4 . 1 . 1 . Acquisition . For acquiring context , they discuss ﬁve factors that need to be considered when developing context - aware middleware solutions : I ) Responsibility : ( a ) Pull , the data is obtained from the sen - sors with a request ; ( b ) Push , the sensor gives the data ( periodically or instantly ) to the software component that is responsible of obtaining it . II ) Frequency : ( a ) Instant , when events occur instantly ( e . g . , Switching on a light or opening a door ) ; ( b ) Interval , when events span a certain period . III ) Source : ( a ) Directly from sensor hardware ; ( b ) Acquire through a middleware infrastructure or solution ; ( c ) Ac - quire from context servers ( e . g . , databases or web ser - vices ) . IV ) Sensor types [ 132 ] : ( a ) Physical , that generate sensor data by themselves ; ( b ) Virtual , that do not necessary create sensor data by themselves and can retrieve data from many sources publishing it as sensor data ; ( c ) Logical , that com - bine physical and virtual sensors to produce more mean - ingful information . V ) Acquisition process : ( a ) Sense , in which the data is sensed through sensors , including the data stored in databases ; ( b ) Derive , in which the information is gen - erated by performing computational operations on sen - sor data ; ( c ) Manually provided , in which users provide context information manually via preferred setting options such as preferences . 3 . 4 . 1 . 2 . Modelling and Representation Techniques . In order to implement models related to context , there is a need of plat - forms and techniques with the power to support the expression and handling needs of context information . Below , a brief in - troduction to the most commonly used techniques for context modelling [ 130 ] : I ) Key - Value : The simplest form of context models , involv - ing a name and context value pairs . Used to model lim - ited amount of data such as user preferences and applica - tion conﬁgurations . Contain mostly independent and non - related pieces of information , which are suitable for lim - ited data transferring and any other less complex tempo - rary modelling requirements . II ) Markup Scheme : Hierarchical data structures are formed using these models , consisting of mark - up tags , attributes and content . It can be the intermediate data organisation format as well as mode of data transfer over network . It can be used to decouple data structures used by two com - ponents in a system . III ) Graphical : Modelling of context using graphical notation as UML , Object - Role Modelling , and other DSLs . Ideal for long term and large volume of permanent data archival . Historic context can be stored in databases . IV ) Object Oriented : Take advantage of object - oriented con - cepts and techniques as encapsulation and inheritance . To represent context in programming code level . It allows context runtime manipulation . They work on a very short term , temporary and mostly stored in computer memory . Also , support data transfer over network . V ) Logic Based : Use facts , expressions and rules to deﬁne formal models . Di ﬀ erent facts can be inferred separately and then used in existing rules to derive higher context knowledge . It is used for generating high - level context using low - level one , generating new knowledge . It is also used for modelling events and actions as well as for deﬁn - ing constraints and restrictions . 15 VI ) Ontology Based : Can be used to describe taxonomies of concepts , including relationships . Besides , they allow dif - ferent context reasoning techniques and inference rules . Rather than storing data on ontologies , data can be stored in appropriate data sources , while structure is provided by ontologies . All techniques have their strong points and drawbacks , although ontologies are the most widely adopted approaches , still have some deﬁciencies that could be mitigated in hybrid approaches [ 61 ] . Although the representation and information retrieval in ontologies can be complex , they support semantic reasoning , expressive representations of context , have strong validation , are application independent , allow sharing , have strong support by standardizations and have fairly sophisticated tools avail - able . 3 . 4 . 1 . 3 . Reasoning . Once the context is modelled , there is a need of creating new knowledge and have a better understand - ing based on the currently sensed context . Techniques for this purpose can be divided into [ 9 ] : I ) Supervised Learning : Training examples are collected to label them according to the expected results . Finally , a function can generate the expected results using the train - ing data . Techniques such as decision trees , Bayesian Net - works , Artiﬁcial Neural Networks and Support Vector Ma - chines are considered in this group . II ) Unsupervised Learning : Techniques that can ﬁnd hidden structures in unlabelled data . Such as K - nearest neighbour , Kohonen Self Organizing Map ( KSOM ) , Noise and outlier detection and Support Vector Machines . III ) Rules : One of the simplest , straightforward and popular reasoning methods . They usually have an IF - THEN - ELSE structure , but they can be based on simple mapping asso - ciations of IDs to entities ( RFID ) [ 38 ] . IV ) Fuzzy Logic : Allows approximate reasoning instead of ﬁxed one , extending the Boolean values form 0 or 1 to expressions that simulate closeness to a natural language . The conﬁdence values represent degrees of membership rather than probability . V ) Ontological : Based on description logic , ontological rea - soning is supported by OWL and RDF , rules as SWRL , are increasingly popular . VI ) Probabilistic : It allows decisions to be made based on probabilities attached to the facts related to the problem . These include techniques such as Dempster - Shafer , Hid - den Markov Models and Naive Bayes . 3 . 4 . 1 . 4 . Dissemination . Once the context information is ready , it has to be distributed to the consumers , and it is closely related to context acquisition . The distribution techniques are : I ) Query : The context consumer makes a request in certain manner so that they can obtain some speciﬁc results . II ) Subscription : The context consumer subscribes with the context management system . Then , this system will return the results periodically . 3 . 4 . 2 . Programming paradigms A programming paradigm is the structuring of thought that determines the foundation of a programming activity , inﬂuenc - ing the structure and elements of programs . In this subsection , the mostly used programming paradigms for the C - AS devel - opment are brieﬂy analysed . We have classiﬁed them into : A ) Conventional ; B ) Emerging ; C ) Model Driven . The inten - tion is not to have thorough research on them , but to highlight the most important bits on each of them . Due to space con - straints , many papers have been omitted from each approach . A table comparing all the paradigms can be found in Table 8 . 3 . 4 . 2 . 1 . Conventional programming paradigms . In this sub - section we brieﬂy overview approaches based on programming paradigms that were originally conceived for the creation of conventional software systems , but that have been tried for the development of C - AS . We have divided it into four di ﬀ erent approaches : A ) Object - oriented ; B ) Aspect - oriented ; C ) Fea - ture - oriented ; and D ) Service - oriented . A ) Object - oriented : Is the dominant programming paradigm for conventional software development . Considers the idea of building a software system by decomposing a prob - lem into objects . These , abstract together behaviour and data into a single conceptual entity . Fortier et al . [ 133 ] introduce a programming and execution model support - ing the development and execution of location - aware ap - plications in mobile distributed systems . They show how to : A ) Separate application concerns of C - AS to improve modularity ; B ) Ojectify context - aware services ; Deal with contextual information ; C ) Model context ; and D ) Take advantage of transparent distribution mechanisms in mo - bile environments . Gra ﬀ et al . [ 134 ] present an architec - ture for developing context - aware applications . They use and extend the dependency mechanism to connect di ﬀ er - ent layers to avoid cluttering the application with rules or customization code . B ) Aspect - oriented : This paradigm [ 135 ] complements the object - oriented approach and was created for giving re - sponse to the programming problems for which neither procedural nor object - oriented programming techniques were su ﬃ cient to clearly capture important design deci - sions that a program must implement . It addresses the cases where behaviours have a di ﬃ cult to deﬁne structure , because they are scattered across methods , classes , object hierarchies or even entire object models . For this purpose the approach uses Aspects , properties for which the im - plementation can not be cleanly encapsulated in a gener - alized procedure . The attractiveness for C - AS developers is that enables a system to adopt new features as it is cre - ated . Developers can dynamically modify the static object - oriented model to grow a system in order to meet new re - quirements . Tanter et al . [ 136 ] present an open framework for context - aware aspects to both restrict the scope of as - pects according to the context and allow aspect deﬁnitions to access information associated to the context . Dantas et al . [ 137 ] show a comparative study on aspect - oriented pro - 16 O b j ec t - o r i e n t e d A s p ec t - o r i e n t e d F e a t u re - o r i e n t e d S o ft w a re P r o du c t L i n e s S er v i ce - o r i e n t e d A g e n t - o r i e n t e d H o l o p a r a d i g m C o n t e x t - o r i e n t e d M o d e l - d r i v e n D o m a i n Sp ec i ﬁ c L a n g u ag e T r i gg er - a c t i o n p r og r a mm i n g B u il d i n g U n i t O b j ec t : C o m b i n a ti on o f v a r i a b l e s , f un c ti on s a nd s t r u c t u r e s A s p ec t : P r op e r ti e s f o r w h i c h t h e i m p l e m e n t a ti on ca n no t b e c l ea n l y e n ca p s u l a t e d i n a g e n e r a li ze d p r o ce du r e F e a t u r e : U n it o f f un c ti on a lit y o f a s o f t w a r e s y s t e m t h a t : 1 ) S a ti s ﬁ e s a r e qu i r e m e n t ; 2 ) R e p r e s e n t s a d e s i gn d ec i s i on ; o r 3 ) P r ov i d e s a po t e n ti a l c on ﬁ gu r a ti on op ti on P r odu c t L i n e : S a ti s f y d i ﬀ e r e n t s p ec i ﬁ c n ee d s by u s i ng a c o mm on s e t o f c o r e a ss e t s i n a p r e s c r i b e d w a y S e r v i ce : S o f t w a r e a v a il a b l e t o c u s t o m e r s ov e r a n e t w o r k A g e n t : E n tit y w ho s e s t a t e c on s i s t s o f m e n t a l p r op e r ti e s ( b e li e f s , ca p a b iliti e s , c ho i ce s a nd c o mm it m e n t s ) B e i ng : C o m b i n a ti on o f i n t e r f ace , b e h a v i ou r a nd h i s t o r y C o m b i n a ti on o f : 1 ) B e h a v i ou r a l v a r i a ti on s ; 2 ) L a y e r s ; 3 ) L a y e r ac ti v a - ti on / d eac ti v a ti on m ec h a n i s m s ; a nd 4 ) L a y e r s c op e M od e l : S i m p li ﬁ e d r e p r e s e n t a ti on o f a c on ce p t D o m a i n M od e l : N o t a ti on t a il o r e d t o e xp r e ss t h e r e l e v a n t c on ce p t s , f ea t u r e s a nd t op i c s t h a t a r e r e l a t e d t o a s p ec i ﬁ c p r ob l e m . C ond iti on a l s t a t e m e n t s i n t h e f o r m o f “ i f t h i s t h e n t h a t ” G e n er a l A pp li c a b ili t y • E n ca p s u l a ti ng b e h a v i ou r a nd d a t a • E n ca p s u l a ti ng c r o ss - c u tti ng c on ce r n s ( H o - m og e n e ou s , dyn a m i c a nd f ea - t u r e i n t e g r a ti on [ 140 ] ) • E n ca p s u l a ti ng c r o ss - c u tti ng c on ce r n s ( H e t e r og e n e - ou s , S t a ti c a nd f ea t u r e c o m po s i - ti on [ 140 ] ) • M a n a g e v a r i a b ilit y • I n t e g r a t e d i s - t r i bu t e d s y s t e m s • C o m p l e x c o m - m un i ca ti on [ 141 ] • E n tit y c oop e r a - ti on , n e go ti a ti on a nd c o m p e titi on • A u t ono m ou s b e - h a v i ou r [ 141 ] • V a r i a b l e s y s t e m pu r po s e [ 141 ] • U b i qu it ou s c o m - p u ti ng • D i s t r i bu t e d p r o - g r a m s • A d a p t t h e b e - h a v i ou r o f e n ti - ti e s dyn a m i ca ll y [ 142 ] • D ea l w it h c o m - p l e x it y • G u i d e t h e d e v e l - op m e n t • S p ec i a li za ti on o f f ea t u r e s f o r a p a r - ti c u l a r do m a i n • A ll o w i ng un e x - p e r i e n ce d u s e r s t o p r og r a m t h e b e h a v i ou r o f d i ﬀ e r e n t d e v i ce s a nd a pp li ca ti on s A d va n t a g e s • M odu l a r it y • M a i n t a i n - a b ilit y ( M od i ﬁ a b ilit y , E x t e n s i b ilit y a nd R e - u s a b ilit y ) • M a t u r e a pp r o ac h • C o m p l e m e n t a ti o n o f ob j ec t - o r i e n t e d • B e tt e r m a i n t a i n - a b ilit y a nd c od e und e r s t a nd i ng • C o m p l e m e n t a ti on o f ob j ec t - o r i e n t e d • B e tt e r m a i n - t a i n a b ilit y a nd c od e und e r s t a nd i ng • R e - u s a b ilit y • S o f t w a r e qu a lit y c on t r o l • B e tt e r r e qu i r e - m e n t s a n a l y s i s • R e du ce m a i n t e - n a n ce a nd t e s ti ng c o s t s • P l a t f o r m a nd L o ca ti on i nd e - p e nd e n ce • M a i n t a i n a b ilit y ( M odu l a r it y a nd R e u s e ) • S ca l a b ilit y • P r o ce ss i ng s p ee d - up [ 143 ] • R e du ce d c o m - m un i ca ti on b a nd w i d t h [ 143 ] • I n c r ea s e d r e li a - b ilit y [ 143 ] • N o t e v a l u a t e d y e t • E n a b l e s o f t w a r e e n titi e s t o a d a p t t h e i r b e h a v i ou r dyn a m i ca ll y [ 142 ] • L a y e r s i n c r ea s e r e - u s a b ilit y [ 142 ] • R e du ce r i s k • B e tt e r und e r - s t a nd i ng a m ong s t a k e ho l d e r s • R e du ce c o s t s • P r odu c ti v it y • L ong t e r m c o s t • P l a t f o r m i nd e - p e nd e n ce • O ﬀ e r s g r ea t e r m o ti v a ti on , c on t r o l , o w n e r - s h i p , c r ea ti v it y a nd qu a lit y t o e nd - u s e r s [ 54 ] • U s e r s a r e i n c on - t r o l ; u s e r s kno w t h e i r t a s k s b e s t [ 51 ] • R e l ea s e s d e v e l - op e r s bu r d e n • D i s a d v a n t ag e s • I m p e rf ec t l a n - gu a g e s ( S p ee d a nd S i ze ) • P l a nn i ng e ﬀ o r t • H o w t o s p ec i f y a s p ec t s • W h a t c o m - po s iti on a nd i m p l e m e n t a ti on m ec h a n i s m s t o p r ov i d e • W h a t i m p l e m e n - t a ti on • A r c h it ec t u r a l i n - t e g r it y • S up e r ﬁ c i a l kno w l e dg e on l a y e r s • R e qu i r e s c o m - m un i ca ti on t h r ough t h e o r g a n i za ti on [ 144 ] • L ac k o f gu i d e - li n e s , t ec hn i qu e s a nd t oo l s f o r p r odu c t li n e a r - c h it ec t u r e d e s i gn [ 144 ] • E xp e r t kno w l - e dg e o f t h e a pp li ca ti on do m a i n [ 144 ] • A v a il a b ilit y • S ec u r it y • I nv e s t m e n t c o s t • R e s pon s e ti m e a nd m ac h i n e l o a d • S e r v i ce m a n a g e - m e n t c o m p l e x it y • T h e b e n e ﬁ t s o f t h i s p a r a d i g m h a v e no t b ee n d e m on s t r a t e d [ 145 ] • S till m a t u r i ng a r ea • N o t e v a l u a t e d y e t • C u rr e n t p r og r a m - m i ng l a ngu a g e i m p l e m e n t a ti on s c ou l d h a v e p e r - f o r m a n ce i ss u e s [ 146 ] • D o no t s uppo r t s t a ti c c h a ng e s • S till m a t u r i ng a r ea • S p ec i f y i ng d e t a il s • I n t r odu ce s r i g i d - it y • S ho r t t e r m c o s t • T r a i n i ng p e r s on - n e l • T oo s p e - c i ﬁ c / g e n e r i c m od e l s • D o m a i n K no w l - e dg e r e qu i r e d • U s e r s h a v e t o t h i nk a bou t r u l e s o r ﬁ nd t h e m on a s t o r e • S y s t e m s m a y b e - c o m e i n c o m p a ti - b l e o r i n t r odu ce i n c on s i s t e n c i e s T a b l e 8 : C o m p a r a ti v e a n a l y s i s on t h e a dv a n t a g e s a nd d i s a dv a n t a g e s o f t h e d i ﬀ e r e n t p r og r a mm i ng p a r a d i g m s u s e d o r c r ea t e d f o r c on t e x t - a w a r e s y s t e m d e v e l op m e n t . 17 gramming for C - AS , identifying CSAspectAJ as the most complete between the evaluated approaches , in what re - gards to synchronization issues , transparency , joint - point models , exception handling and implementation availabil - ity . Fuentes et al . [ 138 ] [ 139 ] presented an approach to design and implement aspect - oriented context - aware ap - plications , run and test the design models , and show how these models map into an implementation . C ) Feature - oriented : Feature - Oriented Software Develop - ment ( FOSD ) is a paradigm for the construction , cus - tomization , and synthesis of large - scale software systems [ 147 ] . A feature is a unit of functionality of a software sys - tem that satisﬁes a requirement , represents a design deci - sion , and provides a potential conﬁguration option [ 147 ] . To this level of detail , feature - oriented programming re - sembles aspect - oriented programming . Both paradigms focus on a speciﬁc class of design and implementation of problems called cross - cutting concerns . These , are a design decision or issue whose implementation is scat - tered through the modules of code , violating the separa - tion of concerns and modularity . Nevertheless , they are not competing approaches and can be used in combina - tion to overcome individual limitations [ 140 ] . Ubayashi et al . [ 148 ] try to reduce the complexity of context - aware design by separating concerns . The demand of C - AS for static changes can beneﬁt from the use of Software Prod - uct Line Engineering , reusing artefacts over a set of simi - lar programs , called a Software Product Line ( SPL ) [ 149 ] . Both feature - oriented and aspect - oriented paradigms have been used along with SPL for C - AS development . Never - theless , it has to be mentioned that , the approaches using SPL and the aspect - oriented paradigm are more popular . Following , we analyse more in depth the combination of them : - Software Product Lines ( SPL ) : Fernandes et al . [ 150 ] [ 151 ] propose UbiFEX , an approach that supports feature analysis process for context - aware SPL and feature notation that provides context information representation as well as context rules speciﬁcation . Parra et al . [ 152 ] create a composition of assets bind - ing context adaptation to features for a context - aware Dynamic Software Product Line ( DSPL ) , named CAPucine . In mobile computing , Marinho et al . [ 153 ] show a SPL for mobile and context - aware ap - plications , along with the approach used to build it and a veriﬁcation mechanism [ 154 ] . Kramer et al . [ 155 ] present an approach to support static and dy - namic variability of a single code base of GUI docu - ments within features , providing tool support . They also present a generic context acquisition engine for mobile devices [ 156 ] . This engine is used as a sin - gle customizable acquisition mechanism which can monitor , manage and disseminate context informa - tion to applications that are running on the same de - vice . It also supports the composition of captured context events . D ) Service - oriented : The service - oriented approach to pro - gramming is based on the idea of composing applications by discovering and invoking network - available services to accomplish some task . In this paradigm , services are used as fundamental elements for developing applications . Kapitsaki et al . [ 157 ] survey methodologies and solutions for context - aware service engineering . They also acknowl - edge that the service engineering community lacks of a universally accepted basic design and development princi - ples that can lead to a uniform approach to context - aware service development . Abeywickrama [ 158 ] claims for the need of solid software engineering methodologies needed for context ware development and execution . They present a software - engineering - based approach , using a model - driven architecture , aspect - oriented modelling and formal model checking . 3 . 4 . 2 . 2 . Emerging programming paradigms . In this subsec - tion we focus on new emerging programming paradigms that can be potentially used for the development of C - AS or were created speciﬁcally to build them . A ) Agent - oriented : This paradigm stems from a branch of Artiﬁcial Intelligence ( AI ) that attempts to combine dis - tributed systems , AI and software engineering in a single discipline [ 159 ] [ 160 ] . It adopts the agent [ 161 ] abstrac - tion for software development , which introduces the no - tion of mentality into the programming environment . Un - der this approach , the agent is used as the basic building block for creating software . An agent is an entity , whose state is viewed as consisting of mental components such as beliefs , capabilities , choices and commitments . They are usually considered as able to control their own be - haviour in the furtherance of their own goals , being au - tonomous [ 162 ] . Di ﬀ erent agents can be combined in a so called Multi - Agent System ( MAS ) , in order to solve prob - lems that are more di ﬃ cult or impossible to achieve for an individual agent or system . The approach has been ac - knowledged as a promising in C - AS development by some authors [ 63 ] [ 163 ] . As an example , Murukannaiah and Singh [ 164 ] present Xipho , an agent oriented methodol - ogy that assists the developer in systematically modelling a context - aware personal agent ( CPA ) via cognitive con - structs . B ) Holoparadigm : Victoria - Barbosa et al . [ 165 ] present holoparadigm , which integrates di ﬀ erent programming paradigms in order to develop distributed / embedded sys - tems . The paradigm is based on an abstraction called Be - ing , which can be elementary or composed of other be - ings . An elementary being is an atomic being without composition levels . Is divided into : ( 1 ) Interface , describ - ing the possible interactions among beings , ( 2 ) Behaviour , that contains actions composed , which implement the be - ing’s functionality and ( 3 ) History , a synchronized shared storage space in a being , which supports the communi - cation and synchronization among the behaviour actions . On the other hand , a composed being may be formed from other beings that can be executed concurrently and shares 18 the history with its component beings . In order to coor - dinate the actions a model is used based on blackboard architecture . In further works [ 166 ] [ 167 ] they propose to apply a programming model speciﬁcally designed for the speciﬁcation of context - aware applications , based on holoparadigm . It is intended to simplify the mobility man - agement and the implementation of C - AS . C ) Context - oriented : Context Oriented Programming ( COP ) [ 142 ] is a technique to enable context - dependent com - putation . Is concerned with programming language con - structs to represent and manipulate behavioural variations . COP tries to isolate the deﬁnitions from the business logic of application , conceptually separating context provision - ing from the execution of the adaptable software . They identify four essential language properties to support COP [ 142 ] : 1 ) Means to specify behavioural variations ; 2 ) Means to group variations into layers ; 3 ) Dynamic activa - tion and deactivation of layers based on context ; 4 ) Means to explicitly and dynamically control the scope of layers . Salvaneschi et al . [ 106 ] give an overview of the COP techniques from the perspective of software engineering , recognising it as an apparently natural approach for this kind of systems . They acknowledge that supporting dy - namic adaptation through proper language - level abstrac - tions allows addressing the issues of adaptive software and avoid the decision logic for adaptive applications’ be - haviour to be scattered . Appeltauer et al . [ 146 ] present a comparison of presented context - oriented programming languages and acknowledge that they still have some per - formance penalties . 3 . 4 . 2 . 3 . Model Driven Development . As compilers let pro - grammers specify what the machine should do instead of how it should do it , Model - Driven Development ( MDD ) [ 168 ] aims to specify the system via high - level abstraction models that will be transformed into code . Models aim to reduce risk , helping to understand both a complex problem and its potential solutions before undertaking the expense and e ﬀ ort of a full implemen - tation [ 169 ] . Sheng and Benatallah [ 170 ] presented Contex - tUML , a modelling language based on the Uniﬁed Modelling Language ( UML ) [ 171 ] for the model - driven development of context - aware web services . Serral et al . [ 172 ] [ 173 ] intro - duce a model - driven development method for context - aware pervasive systems . It applies the Model - Driven Architecture ( MDA ) [ 168 ] and Software Factories ( SF ) , along with the Per - vML modelling language and the SOUPA ontology . Tesoriero et al . [ 174 ] presented CAUCE , a methodology based on MDA [ 168 ] , to provide a model - driven development of applications for Ubiquitous Computing environments . It is also worthy to be mentioned that there are some Domain Speciﬁc Lan - guages ( DSL ) for the development of context - aware software systems [ 175 ] [ 176 ] . Recently , a domain speciﬁc language called Trigger - action programming [ 47 ] [ 45 ] [ 46 ] is gaining popularity . Following , we brieﬂy explain it : - Trigger - action programming : Is a programming model based on the End - User Development paradigm [ 44 ] , where average users can manually customize a service accord - ing to their preferences , likes and expectations [ 46 ] . By reducing the complexity of programming , expressing the system behaviour becomes accessible to end - users . These , only need to handle simpliﬁed if - then programming rules that match a trigger with an action . Is starting to emerge in areas such as smart - homes / buildings [ 177 ] or smart - phones [ 178 ] . Services and applications such as IFTTT 11 or Tasker 12 let end - users create rules with sensors / devices that they already have and use in their daily life . A re - cent study [ 45 ] has found that this approach can express the most desired behaviours in order to personalize smart - home devices . Through a usability test conducted to 226 participants , they encountered that users without experi - ence can learn to create programs containing multiple trig - gers or actions obtained by extending the IFTTT language , that can express only one trigger and one action . 3 . 5 . Deployment and Maintenance Once the system is implemented , a typical life - cycle does not end . It is followed by evaluation and maintenance phases . Also , techniques such as documentation , training and support are highly recommended , as they help future maintenance and enhancement , as well as user acceptance . This subsection anal - yses the evaluation and maintenance techniques for a C - AS specialized development . Maintenance is the modiﬁcation of a software product after its delivery in order to correct faults , improve performance or other attributes 13 . C - AS require han - dling change faster and cheaper than conventional approaches . An initial design tends to become outdated or insu ﬃ cient fairly quickly because of changing requirements [ 44 ] . Despite the evolutionary nature of C - AS , it is di ﬃ cult to ﬁnd in the litera - ture approaches exclusively focused on improving the mainte - nance of C - AS . In the classical software engineering paradigm , there are four core maintenance activities [ 179 ] : ( 1 ) Adaptive ; ( 2 ) Perfective ; ( 3 ) Corrective ; and ( 4 ) Preventive . 3 . 5 . 0 . 4 . Corrective . It is involved with ﬁxing errors , faults or bugs in the system to restore . A bug is a defect that causes the system not to behave in the expected way . Debugging is the me - thodical process of ﬁnding a reducing the number of software and hardware defects in order to make the system behave in the expected way . It gets di ﬃ cult to ﬁnd bugs when it comes to classical programming , so in C - AS , where information is more complex to handle , it gets even more complicated . It has to be acknowledged that there is still very little research in special - ized debugging methods for C - AS . Moos et al . [ 180 ] propose the use of intelligibility to help users debugging why the system is not working . In their approach , debugging for C - AS is intro - duced as a mean to assist the users in discovering the cause of 11 IFTTT ( If This Then That ) : Is a web - based service that allows users to create chains of simple conditional statements , triggered based on changes to other devices or web services ( Facebook , Gmail , Calendar ) . https : / / ifttt . com / 12 Tasker : An android application for performing tasks based on contexts ( ap - plication , time , date , location , event , gesture ) deﬁned in user proﬁles or in click - able or timer home screen widgets . http : / / tasker . dinglisch . net / 13 ISO / IEC 14764 : 2006 19 the failure . In order to achieve this , they propose to include an information exchange approach from “explanatory debugging” . 3 . 5 . 0 . 5 . Preventive . It tries to prevent problems with the sys - tem before they occur , anticipating adaptive maintenance needs before users experience problems . Failure handling issues are the most concerned theme of research for C - AS within mainte - nance . Chetan et al . [ 71 ] classify the possible failures into : ( 1 ) Device failures , due to the di ﬀ erent kind of devices that conform a pervasive system ; ( 2 ) Application failures , that in - clude application crashes due to bugs , operating system errors , not handled exceptions , and faulty usage ; ( 3 ) Network failures , due to the di ﬀ erent connection channels that devices can have ; ( 4 ) Service failures , as service crashes due to bugs and oper - ating system errors , faulty operation of services , wrong infer - ring and lossy delivery of events . Kulkarni and Tripathi [ 181 ] present a framework for programming robust context applica - tions . They use a recovery model that consists of mechanisms for asynchronous event handling and synchronous exception handling . It integrates event handling at the object level with exception handling at the role level to build robust role - based context - aware applications . The exception interface for roles provides the ability for users to handle exceptions . In order to complement their application - level recovery mechanisms , au - thors suggest to use techniques such as replicating the trusted servers and running the various managers in a primary backup . The techniques for failure detection can be classiﬁed into [ 71 ] : • Surrogate Application / Device Usage : Upon failure , the process is restarted and restored from a stable storage de - vice . • Alternate Notiﬁcation mechanisms : The system notiﬁes the personnel trough di ﬀ erent devices . If the system discovers that a notiﬁcation device has failed , it should reroute the message trough a di ﬀ erent notiﬁcation chan - nel . • Handling errors in sensing and inferring context : De - tecting errors happened during the sensing and inferring phases of context information . This could be done by em - ploying redundancy ( multiple sensors that sense the same ) , so that the results can be compared . Another technique could be to let users identify any errors that might experi - ence . • N - Version approach : Executing in N di ﬀ erent implemen - tations the same task and giving the correct answer to an arbitrator . • Fault notiﬁcation mechanisms : Notify the errors in the de - vices that the user is using . This creates a dependency graph that could span numerous applications , services and devices . 3 . 5 . 0 . 6 . Adaptive & Perfective . Adaptive maintenance is in - volved with adapting the system to the ever changing hardware and software developments . The adaptiveness concern present in C - AS literature is more related with the behavioural changes that the context triggers , more than the platforms in which the system will be executing . On the other hand , perfective main - tenance is concerned with the improvement of the system fea - Engineering 27 % Matureness 23 % Diversity 9 % Industry 11 % Understanding 9 % User 7 % Privacy 7 % Others 9 % Figure 2 : Pie chart showing the response rate in each of the categories . tures . To the extent of our knowledge , there is very little adap - tive or perfective maintenance techniques for the development of C - AS . 4 . Methodologies for context - aware systems development The previous section analyses di ﬀ erent techniques that have been used for developing C - AS . These , are typically focused on addressing a speciﬁc problem in the development and are gen - erally independent from each other . On this section , we focus on the uniﬁcation of di ﬀ erent techniques into methodologies that can be used for C - AS development . We assess the needs of a methodology speciﬁcally conceived for this purpose through a questionnaire done to 750 researchers that have conducted some research related to C - AS development . First , we include experts opinion in order to clarify why there is no commonly accepted methodology for this purpose . Second , we identify which features would a methodology require to have better ac - ceptance in the community . Finally , we study existing e ﬀ orts in creating a uniﬁed methodology for C - AS development . For this , we study the coverage of actual methodologies for the most common development stages and for their desirable features ac - cording to the questionnaire . 4 . 1 . Assessing the needs of a methodology In an open question of our questionnaire , contestants were asked about the main reasons for not having a commonly ac - cepted methodology or tool for developing marketable C - AS . The responses were classiﬁed in eight di ﬀ erent categories : Engineering , Matureness , Diversity , Industry , Understanding , User , Privacy and Others . The pie chart from Figure 2 , shows the response rate obtained in each of the categories . a ) Engineering : There are lack of standards for representing information , models and general - purpose support . Bet - ter managerial support should be provided once C - AS are rolled out along with proper documentation . These sys - tems must integrate other sub - systems ( that sometimes use emergent ever - changing technologies ) . Interoperability is - sues were recognized as well as the absence of common middleware solutions to ease its development . Besides , the diversity of hardware - software requirements , that trade - o ﬀ with each other and the absence of common vocabu - lary / concepts when developing C - AS has been acknowl - edged . The di ﬃ culty to adequate a prototype to a real sys - 20 tem has not been evaluated . The research ﬁeld has a big - ger focus in the deliverables more than in the engineering process . Finally , software development companies believe that the application of formal methods in the early stages of a project delays them . b ) Matureness : The immatureness of the ﬁeld was acknowl - edged , due to the technology : Expensive , invasive - size , not too powerful / useful or that depends on other technolo - gies that are still evolving . Also , the infrastructure is ei - ther still very expensive or it has not been developed for the public yet . c ) Diversity : Survey respondents also stated that there are many alternatives ( SW Architectures , algorithms , meth - ods , techniques , etc . ) , that can be required in a multiple type of developments ( from operating systems to home automation ) , apart from the diversity of possible scenar - ios . One of the participants believes that context should be approached in di ﬀ erent ways and another that the problem is that “ di ﬀ erent developers / researchers focus on di ﬀ erent aspects ” . d ) Industry : There is a need for the industry to invest behind the development of these systems . Some even acknowl - edge that the reasons why companies do not invest money in C - AS are that : “ There is no clear business for “context - something” applications , users don’t care , they have it al - ready ” or that “ Daily life environments not being equipped with appropriate seamlessly integrated devices for deliv - ering contextualized application’s functions ” . e ) Understanding : There is no shared understanding of con - text and systems get the term wrong . One of the partici - pants highlighted that there is no common vocabulary and concepts for C - AS . f ) User : The user is a factor that inﬂuences the lack of ac - ceptance . Participants report that the user opinions are not taken into account neither during the development nor while the system is executing . They also believe that users are not conﬁdent with C - AS . g ) Privacy : Is one of the reasons behind the absence of ac - quisition of tools / methodologies . Mainly because the user does not feel comfortable with “ a machine knowing too much about humans ” . They also recognise the lack of full control about the collected data . One of the contributors to the poll , states that user privacy should be taken into account from the ﬁrst stages of the design . h ) Others : A couple of experts referred to intelligibility and the control about the information of the user and the ac - tivities carried out in the environment . Others proposed that there was no union of communities that study the ﬁeld and there is no reuse of knowledge between re - searchers / companies . Finally , one of the survey respon - dents believes that presented C - AS do not work in perfect ( or nearly perfect ) real - time environments . 4 . 2 . Desirable features for a methodology Participants were also asked to evaluate how important they considered some features in the development of C - AS . From 0 to 5 , where 0 is the lowest in importance and 5 the highest . The participants were also asked to suggest features they would include in a methodology that were not considered in the previous questionnaire . The answers were similar to the proposed features . Results can be graphically observed in Figure 3 . The choices given where : 3 3 . 5 4 4 . 5 5 1 . A Help Deﬁning A a Context 1 . B Situations A a Representation 1 . C User Interaction A a Representation 2 . A Device Relations A a Representation 2 . B Human Relations A a Representation 2 . C Cooperative A a Environment 3 . A Context Modelling 3 . B Context Reasoning 3 . C Privacy 4 . A Context Source A a Management 4 . B Knowledge Sharing 4 . C Scalability 5 . A Testing 5 . B Quality of Context 5 . C Traceability 5 . D Conﬂict Resolution 6 . A System Evolution 6 . B Deployment 7 . A Context Relevancy 3 . 5 5 4 3 . 5 4 . 5 5 3 . 5 3 4 3 . 5 5 4 . 5 4 3 3 . 5 4 . 5 4 3 3 . 5 Importance Figure 3 : Bar graph showing the importance that contestants would give to including certain features in a context - aware development process . 1 . A Help to Deﬁne Context : The support to understand the context notion within the boundaries of the system to be developed . For example , coining vocabulary to deﬁne the system features . 1 . B Situations Representation : The ability to represent situa - tions in which the system is intended to act in a certain way in order to better understand them . 1 . C User Interaction Representation : To be able to represent and model the interactions between the system and the 21 users . 2 . A Device Relations Representation : To represent and model the relations between devices . 2 . B Human Relations Representation : To allow the represen - tation and modelling of human relations and interactions . 2 . C Cooperative Environment : To allow the combination of di ﬀ erent environments in order to represent the details that would enable them to work together . 3 . A Context Modelling : The ability to model the context infor - mation , for example using ontologies . 3 . B Context Reasoning : To model the reasoning of the context information in order to choose the information that should infer or the actions that it should take . 3 . C Privacy : Enable the secure use of the information relative to users , so that is not interfered by other people or orga - nizations . 4 . A Context Source Management : It explicitly speciﬁes how the context data will be obtained . 4 . B Knowledge Sharing : It allows deﬁning how will the sys - tem distribute the knowledge within its own boundaries and outside them . 4 . C Scalability : Supports the system to handle a growing amount of work e ﬀ ectively , or enables the system expan - sion / reduction to accommodate that growth / decrease . 5 . A Testing : Ensures that the system meets its requirements . 5 . B Quality of Context : It provides a good quality of precision , probability of correctness , trustworthiness , resolution and contemporaneity of context information [ 69 ] . 5 . C Traceability : Allows tracking a given set or type of infor - mation to a given degree . 5 . D Conﬂict Resolution : Enable the conﬂict resolution of the C - AS , considering it as the process that enables a system to provide its safety - critical functionalities by recovering from errors and faults and preventing the system failure . 6 . A System Evolution : Supports evolution and maintenance of the system . 6 . B Deployment : Eases the system deployment . 7 . A Context Relevancy : It allows deﬁning which contexts are relevant depending on the situation . 4 . 3 . Existing methodologies and tools Following , a brief description of the main existing method - ologies that are related to the C - AS development is provided . It has to be mentioned that methodologies published in confer - ences are often only theoretical and do not present tool support . For this reason , and due to space restrictions , the methodolo - gies , frameworks and tools here presented are only the ones published on journals . Context Toolkit [ 49 ] : Was one of the ﬁrst e ﬀ orts to fa - cilitate the development and deployment of context - aware applications by providing a framework to support it . It provides abstractions to separate the details of how things are done from actually doing them : ( 1 ) Context Widget , to separate the details of sensing context from actually us - ing it ; ( 2 ) Context Interpreter , to reason sensor data us - ing di ﬀ erent reasoning techniques ; ( 3 ) Context aggregator ( Server ) , to collect multiple pieces of context information that are related into a common repository ; ( 4 ) Enactors , that serve as application units that acquire and take actions based upon context . Widgets , servers , interpreters and en - actors are allowed to run on di ﬀ erent computers , commu - nicating over a network . This toolkit has been further ex - tended by other authors [ 38 ] [ 47 ] . ISAMadapt [ 182 ] : Provides an integrated environment aimed at building general - purpose pervasive applications . It works on the basis of four main abstractions : Context , adapter adaptation commands , and adaptive behaviour management policies . They focus on supporting the follow - me semantics for building generic applications for building pervasive applications , investigating how context - awareness can be expressed at the programming language level . They o ﬀ er an integrated software infrastructure both to design pervasive applications and to manage a pervasive environment at global scale . Context Modelling Language ( CML ) [ 183 ] : Was created as a tool to assist designers exploring and specifying the context requirements of context - aware applications . They propose a set of conceptual models to support the software engineering process , including context modelling tech - niques , a preference model for requirements representa - tion and two programming models . Along with it , they present an engineering process supported by a software in - frastructure . The infrastructure is divided in seven phases : ( 1 ) Context Gathering , that allows the use of context in - terpreters and aggregators ; ( 2 ) Context reception layer ; ( 4 ) Context management layer ; ( 5 ) Query layer ; ( 6 ) Adapta - tion layer and ( 7 ) Application layer . Their work introduced improved opportunities for tool support into the software engineering process . The MUSIC 14 Project : Methodology to facilitate the de - velopment of adaptive applications in open , heterogeneous Ubiquitous Computing environments . The methodology includes tool support and an adaptation middleware and is based on the separation of concerns between the busi - ness logic , context - awareness and adaptation . Design and implementation of context - aware adaptive applications is done via model - driven development . They provide a soft - ware development framework for the automation of the adaptation of the software at run - time , including : ( I ) A modelling language ; ( II ) Generic and reusable middleware components that automate text monitoring & management and adaptation ; ( III ) Tools to support the development : such as design models , transformation , deployment , test - ing and validation ones . OPEN : OPEN [ 184 ] is an ontology - based cooperative programming framework for the rapid prototyping , shar - ing , and personalization of context - aware applications for 14 MUSIC [ 32 ] [ 33 ] : Component - based planning framework that optimizes context - aware variations , partially funded by the European Commission under research grant IST - 035166 lasting from October 2006 to March 2010 . 22 N o . N a m e Y ea r R e f e r e n ce R e qu i r e m e n t s E li c it a ti on T ec hn i q u e M i dd l e w a r e V e r i ﬁ ca ti on T ec hn i qu e M a i n t e n a n ce T ec hn i qu e R e qu i r e m e n t s E li c it a ti on T oo l A n a l y s i s a nd D e s i gn T oo l D e v e l op m e n t T oo l E v a l u a ti on T oo l M a i n t e n a n ce T oo l S it u a ti on s R e p r e s e n t a ti on C oop e r a ti v e E nv i r on m e n t s K no w l e dg e S h a r i ng H u m a n R e l a ti on s R e p r e s e n t a ti on S ca l a b ilit y C on ﬂ i c t R e s - o l u ti on ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ( 6 ) ( 7 ) ( 8 ) ( 9 ) ( 10 ) ( 11 ) ( 12 ) ( 13 ) ( 14 ) ( 15 ) ( 16 ) ( 17 ) ( 18 ) ( a ) C on t e x t T oo l k it 2001 [ 49 ] - (cid:51) - - - (cid:51) (cid:51) - - (cid:51) * (cid:51) * (cid:51) - ( b ) I S A M a d a p t 2002 [ 182 ] - (cid:51) - - - (cid:51) (cid:51) - - (cid:51) * - * (cid:51) - ( c ) C M L 2006 [ 183 ] * (cid:51) W B , BB - - (cid:51) (cid:51) (cid:51) - (cid:51) * (cid:51) * * - ( d ) C A M U S 2007 [ 185 ] - - - - - (cid:51) (cid:51) - - (cid:51) * * * * - ( e ) M U S I C 2012 [ 32 ] * (cid:51) S i m . * - (cid:51) (cid:51) (cid:51) - (cid:51) * * * (cid:51) - ( f ) O P E N 2011 [ 184 ] - - - * - (cid:51) (cid:51) - - (cid:51) * * * (cid:51) - ( g ) C A - PS C F 2010 [ 186 ] - (cid:51) M D * - (cid:51) (cid:51) - - * * * * (cid:51) - ( h ) - 2010 [ 187 ] S o (cid:51) - - - (cid:51) (cid:51) - - * * * (cid:51) (cid:51) - ( i ) M I R I E 2013 [ 115 ] - - F r m . * - (cid:51) - (cid:51) - (cid:51) * - * (cid:51) - ( j ) P e r D e 2014 [ 188 ] - (cid:51) S i m . * - (cid:51) (cid:51) - - (cid:51) * - (cid:51) (cid:51) - ( k ) D i a S u it e 2014 [ 127 ] - (cid:51) S i m . P e rf . , * - (cid:51) (cid:51) (cid:51) (cid:51) (cid:51) * - * (cid:51) (cid:51) T a b l e 9 : C o m p a r i s on o f e x i s ti ng m e t hodo l og i e s t o d e v e l op C - A S . G e n er a l S y m b o l s f o r T ec hn i qu e s : “ (cid:51) ” = U s e s a t ec hn i qu e / H a s t oo l s uppo r t , “ - ” = D o e s no t u s e a t ec hn i qu e / D o e s no t h a v e t oo l s uppo r t ; “ * ” = M e n ti on s a t ec hn i qu e bu t i s no t e xp l a i n e d i n d e t a il ; ( 4 ) R e qu i re m e n t s E li c i t a t i o n T ec hn i qu e : “ S o ” = S o c i a l s c i e n ce s b a s e d t ec hn i qu e s ; ( 6 ) V er i ﬁ c a t i o n T ec h n i qu e : “ W B ” = W h it e box v e r i ﬁ ca ti on , “ BB ” = B l ac k box , “ S i m . ” = S i m u l a ti on b a s e d , “ M . D . ” = M od e l d r i v e n , “ F r m . ” = F o r m a l ( 7 ) M a i n t e n a n ce T ec hn i qu e : “ P e rf . ” = P e rf ec ti v e ; R . E . C on t e x t - Aw a r e S p ec i a li s e d T e c hn i qu e s R . E . T r a d iti on a l T ec hn i qu e s A r c h it ec t u r e P a tt e r n s D e s i gn P a tt e r n s M i dd l e - w a r e V e r i ﬁ - ca ti on P r og r a mm i ng P a r a d i g m s C on t e x t I n f o r m a ti on M a n a g e m e n t D e p l oy m e n t & M a i n t e - n a n ce T ec hn i qu e s S i t u a t i o n s R e p re s e n t a t i o n V i s u a li za ti on S ce n a r i o B a s e d - - * * * M od e lli ng , R ea s on i ng - C oo p er a t i v e E n v i r o n m e n t s - - - * * * * - K n o w l e d g e Sh a r i n g - - - * * * H o l op a r a d i g m D i ss e m i n a ti on , A c qu i s iti on - H u m a n R e l a t i o n s R e p re s e n t a t i o n S o c i a l S c i e n ce B a s e d E t hnog r a phy B a s e d , O b s e r v a ti on - - * * - - - S c a l a b ili t y - - E C A , C S & M H , S CC , B l ac k - bo a r d s * * * F e O & SP L * A d a p ti v e C o nﬂ i c t R e s o l u t i o n - - * * * * * * P r e v e n ti v e E CA = E v e n t - C on t r o l - A c ti on , C S & M H = C on t e x t S ou r ce a nd M a n a g e r s H i e r a r c hy , S CC = S e n s e - C o m pu t e - C on t r o l ; F e O & S P L = F ea t u r e O r i e n t e d a nd S o f t w a r e P r odu c t L i n e s ; “ - ” = T h e r e i s no t ec hn i qu e ; “ * ” = N o t c o m p a r a b l e w it h i n t h e s c op e o f t h i s s u r v e y . T a b l e 10 : C o m p a r i s on o f t h e f ea t u r e s t h a t a m e t hodo l ogy f o r C - A S d e v e l op m e n t s hou l d s uppo r t r e l a t e d t o t h e s t a t e - o f - t h e - a r t t ec hn i qu e s . users with diverse technical skills . To meet diverse de - veloper requirements in the development and customiza - tion of context - aware applications , it implements three programming modes with diverse complexity : ( 1 ) Incre - mental mode , for high - level users , which supports the cre - ation of new context - aware applications ; ( 2 ) Composition mode , a programming mode for middle - level users ; and ( 3 ) Parametrization mode , for low - level users , to enable them customize existing applications . CA - PSCF [ 186 ] : is a model - driven approach to facilitate the creation of a context modelling framework that aims to simplify the design and implementation of pervasive services . It uses model - driven development to provide a systematic methodology that facilitates the generation of modelling frameworks and supports the overall service creation process . The process is as follows : ( 1 ) The oAW editor is used to deﬁne a code template , which conforms to a context meta - model ; ( 2 ) With the context editor a con - text model is deﬁned and validated ; ( 3 ) With the context model and the code template , the work - ﬂow execution en - gine generates service code . Optionally , models can be transformed ( 4 ) : Source domain models are transformed to target domain models in a di ﬀ erent domain language . Human - Centred Computing Methodology for Cooperative Ambient Intelligence : Gross [ 187 ] introduces a coopera - tive Ambient Intelligence methodology , elaborated on ex - isting approaches for organising software engineering and user - centred design processes . It suggests a new human - centred computing methodology for this aim . He acknowl - edges that many research issues remain for each phase in terms of : ( 1 ) Methods to be applied ; ( 2 ) The adaptation of the method concerning the characteristics of the tar - geted technological innovation ; and ( 3 ) The properties of the results of each phase . The life - cycle is divided into : ( A ) Identifying the need for cooperative Ambient Intelli - gence ; ( B ) Understand the situation of use ; ( C ) Specify the user , ambient and cooperation requirements ; ( D ) Pro - duce software and hardware design solutions ; ( E ) Produce embedded interaction and adaptation design solutions ; ( F ) Perform software and hardware evaluation ; ( G ) Perform overall evaluation in living laboratory ; ( H ) Reach speci - ﬁed user , ambient and cooperation satisfaction . MIRIE [ 115 ] : The Methodology for Improving the Re - liability of Intelligent Environments , has been created to guide and inform the development of more reliable Intel - ligent Environments . The methodology is centred on a re - ﬁnement strategy which starts identifying the core com - ponents of the Intelligent Environment ( sensors / actuators , actors , interfaces and communication mechanisms ) and then working through successive models of increasing complexity . The methodology is illustrated with SPIN and using the PROMELA modelling language but it is ac - tually tool - independent . In [ 115 ] a detailed explanation on the use of formal veriﬁcation to support the develop - ment of Intelligent Environments is given . Whilst other approaches mention the possibility of using veriﬁcation and give a few examples the above publication provides a step by step and detailed explanation of how developers can beneﬁt from formal methods at a pragmatic and prac - tical level . The methodology has been applied to several Intelligent Environments , one of which is a real Ambient Assisted Living system which is explained in the article as the main case study . PerDe [ 188 ] : Is a development environment that orients the designs of Pervasive Computing applications towards the user’s needs . It provides a domain - speciﬁc design lan - guage and a set of graphical tool - kits covering some de - velopment life - cycle stages for this kind of applications . It provides means to structure the application and allows the developer to build an application : ( 1 ) Focusing on the human situations evolved to the physical surrounding ; ( 2 ) Characterizing the application along with attributes of a new application model by representing the intentions as the task requirements , service speciﬁcation and instantia - tion of services in devices abstractly ; ( 3 ) Specifying a pro - gramming structure that trades - o ﬀ between the function requirement and the device capability ; ( 4 ) Rapid prototyp - ing . DiaSuite [ 127 ] : Is a tool - based development methodology that uses a software design approach to drive the devel - opment process in the domain of Sense / Compute / Control ( SCC ) applications . It provides a design language called DiaSpec , dedicated to the SCC paradigm , based on two layers : Taxonomy and application design . The application speciﬁcation can be represented by its data ﬂow using an oriented graph . In addition , DiaSuite has a compiler that produces a dedicated Java programming framework , guid - ing the programmer to implement the various parts of the software system ( Entities , context operators and control operators ) . The suite also includes a 2D - graphical ren - derer , for simulation proposes . The deployment can be done either in distributed execution platform or local . 4 . 4 . Coverage of desirable features The coverage of the most desirable features of our question - naire compared to the existing methodologies can be observed in Table 9 . We have considered to leave a deeper comparison out of this survey , as it is not possible to measure them in a useful way , due to their disparate aims and themes . Instead , we analyse the state - of - art techniques that could be used for creat - ing the most desirable features of a methodology according to our questionnaire . Situations Representation : During the requirement elic - itation stage , techniques such as Executable Use Cases [ 189 ] or the tool presented by Perez and Valderas [ 190 ] can be used in order to represent situations that will help to gather context - related requirements . There is not much presence of situations representation during the rest of the most common stages of development . Although speciﬁc middleware infrastructures might have features for repre - senting situations during this phase . All context informa - tion modelling and reasoning techniques need to enable 24 the situation representation , but there is no support for un - derstanding the situations and the contexts that they are going to be represented , stemming from the requirements . Cooperative Environments : The cooperation between en - vironments is a technique that stems from Ubiquitous Computing . The support in what regards to techniques for the cooperation between environments in context - awareness is very little , there is more support for this in other ﬁelds like Systems Engineering or Distributed Sys - tems , which are out of the scope of this survey . Knowledge Sharing : Is not taken into account during the early stages of the development . The techniques used for these are Queries and Subscribers as explained in Sec - tion 3 . 4 . 1 . 4 . Although the deep analysis of programming paradigms is out of the scope of this survey it has to be mentioned that Holoparadigm , enables the knowledge sharing at programming level . Human Relations Representation : As discussed in section 2 . 1 , the human relationships and interactions are explained using social sciences , which stem from a phenomenolog - ical philosophical tradition . Bauer et al . acknowledge that during the C - AS system development , in its life - cycle , starts from a more highlighted phenomenological perspec - tive and proceeds slowly transforming into a more posi - tivist one . We can observe that human relations represen - tation have more presence in early stages of the develop - ment , and lose support as the development process con - tinues . Using behavioural studies are helpful to capture more completely human relationships and interactions into requirements of the system as shown by Kjaer [ 81 ] and Fuentes et al . [ 191 ] . Ethnography based and observation techniques can also be used for this purpose . Scalability : The majority of the architecture patterns that are speciﬁc for C - AS development enable the scalability of the system . From these the highlighted ones are Event - Condition - Action , Context Source and Managers Hierar - chy , Sense - Compute - Control and Blackboards . Neverthe - less , it has to be mentioned that each of them enable dif - ferent types of scalability and that a further analysis is out of the boundaries of this survey . Although the intention is not to have a thoughtful comparison of programming paradigms , Feature Oriented one is prominent . Especially when it tends to Software Product Lines . Finally , the clas - sical adaptive maintenance techniques will enable also the scalability . It is very di ﬃ cult to measure scalability in De - sign Patterns , Middleware and Veriﬁcation . Conﬂict Resolution : There is very little support during the whole life - cycle of context - aware development for conﬂict resolution . Preventive maintenance can help to enable this feature . Also , the framework presented by Kulkarni and Tripathi [ 181 ] , as well as other techniques like Surrogate Application / Device Usage , Alternate notiﬁcation mecha - nisms , Handling errors in sensing and inferring context , N - Version Approach and Fault Toleration Mechanisms . The results of the comparison show quite weak support in the state - of - the - art techniques for the most desirable features of a methodology , as it can be observed in Table 10 . 4 . 5 . Coverage of development stages Generally , the engineering techniques are more concerned with the design and information management of C - AS , there is less attention focused on other stages the development pro - cess . The following subsection analyses the techniques and tool support of the methodologies through these stages . 4 . 5 . 1 . Techniques In general , there are no techniques for the early and latest stages of the development process . The human - centred comput - ing methodology [ 187 ] mentions that ethnomethodologically informed ethnography can be applied for understanding the sit - uation of use , but they do not deeply explain how the technique should be applied . Also , MUSIC [ 32 ] and CML [ 183 ] mention requirements , but do not explain into detail the techniques . Di - aSuite [ 127 ] o ﬀ ers perfective maintenance for the system , but does not support adaptive , preventive or corrective ones . The most used veriﬁcation technique is simulation , but generally the veriﬁcation support is not very strong . Finally , it has to be mentioned that most of the methodologies o ﬀ er middleware support . 4 . 5 . 2 . Tool support There is strong tool support for the design and develop - ment of C - AS . Nevertheless , they do not o ﬀ er support for other stages . No methodology enables the requirement elicitation with a tool , and only DiaSuite [ 127 ] allows the maintenance with one . MIRIE [ 115 ] o ﬀ ers a strong formal veriﬁcation sup - port , while MUSIC [ 32 ] , PerDe [ 188 ] and DiaSuite [ 127 ] o ﬀ er veriﬁcation based on simulation . It has to be acknowledged that DiaSuite [ 127 ] is one of the most complete methodologies , re - garding to these factors and within the scope of this survey . 5 . Conclusion This survey has analysed the concept of context and the reasons behind the lack of agreement on its deﬁnition . Taking into account the limitations of C - AS , we have characterized their interaction types and features . Then , we analyse the main challenges in its development . The literature review shows various techniques and methods that have been modiﬁed from the conventional development to better ﬁt the needs of C - AS creation . We provide an analysis of these techniques during di ﬀ erent stages of a development life cycle . We acknowledge that they only target certain aspects of the engineering process , sometimes only solving speciﬁc problems of a system . In order to go one step further , we focus on methodologies . The results show little support for the most common stages of a development process . We have carried out a questionnaire to understand the main reasons for the lack of adoption of these methodologies , as well as to identify the features of a new methodology that could have more acceptance in the 25 community . Our study shows that existing methodologies lack some features that will make them be accepted by the community . Contextual awareness is an attractive feature that has encour - aged research in the latest decades . Embedding such feature into a system implies challenges that are to be solved yet . There is a notable di ﬀ erence between developing a conventional sys - tem and a context - aware one . Although there is lot of research related to the development of this kind of systems , this is fo - cused on solving particular issues . The evidence presented in this work supports the need of a more holistic and uniﬁed ap - proach for the development of C - AS . Also it should be di ﬀ erent from the classical software engineering approach for creating these systems . Context - Aware Systems Engineering ( C - ASE ) is the study and application of engineering techniques to any activity involved in the creation of C - AS , including [ 192 ] its analysis , design , assessment , implementation , test maintenance and re - engineering , among others . Below , we present further research directions for C - ASE : • Design Principles and Human Computer Interaction : There is a need to better understand the potential syner - gies between phenomenology and positivism philosophi - cal paradigms in what regards to C - AS engineering . What are the speciﬁc limitations of a C - AS ? When can develop - ers use an autonomous approach ? When is it more rec - ommendable to use a passive one ? Not only a further philosophical research would give a better understanding on when to use a certain interaction type . It would also shed light on the conceptualization of context . • Diversity : The diversity among systems that could exhibit contextual awareness makes di ﬃ cult the creation of gen - eralized methods that can be applied to all of them . The research in C - ASE should also focus on the di ﬀ erences among the contextual awareness in di ﬀ erent areas of ap - plication . • Information management : The technology for handling contextual information is the most matured in the ﬁeld of context - aware computing . Nevertheless , it has still its challenges to overcome , as explained in Section 3 . 1 . 2 . Further research is required in this direction . • Requirements elicitation : We acknowledge that require - ment elicitation techniques in context - awareness are still maturing . The research directions point towards the ben - eﬁts from merging with social science based approaches . There is also a need to measure to what extent standard - ized methods such as SysML or UML cover the needs of C - AS for this stage of its development . • Architectural patterns : What are the most common design problems of C - AS architecture ? Can these be categorized ? Can a tailored solution for each of the problems be pro - posed ? • Programming paradigms : There is a demand to further study the synergies between the di ﬀ erent programming paradigms . Which paradigm is better for implementing which features of context - awareness ? When does a de - veloper know that there is a need to use one or another ? Which is the best programming language for C - AS devel - opment ? • Maintenance and deployment : Once the system is imple - mented , which are the best ways of detecting an error ? The maintenance and deployment has also several challenges that need to be further investigated . • Methodological support : There is a need for a methodol - ogy that guides the development of a context - aware sys - tem through all its stages . Standardized methods and tool support for methodologies are future research objectives to take into account . Acknowledgements The authors would like to acknowledge the anonymous re - viewers for the comments that have helped to improve the ﬁnal result of this survey . References [ 1 ] M . Weiser , The computer for the 21st century , Scientiﬁc american 265 ( 3 ) ( 1991 ) 94 – 104 . [ 2 ] T . Erickson , Some problems with the notion of context - aware comput - ing , Communications of the ACM 45 ( 2 ) ( 2002 ) 102 – 104 . [ 3 ] A . K . Dey , G . D . Abowd , Towards a better understanding of context and context - awareness , in : In HUC 99 : Proceedings of the 1st international symposium on Handheld and Ubiquitous Computing , Springer - Verlag , 1999 , pp . 304 – 307 . [ 4 ] M . Bazire , P . Br´ezillon , Understanding context before using it , in : Mod - eling and using context , Springer , 2005 , pp . 29 – 40 . [ 5 ] P . Dourish , What we talk about when we talk about context , Personal and ubiquitous computing 8 ( 1 ) ( 2004 ) 19 – 30 . [ 6 ] A . Zimmermann , A . Lorenz , R . Oppermann , An operational deﬁnition of context , in : Modeling and using context , Springer , 2007 , pp . 558 – 571 . [ 7 ] S . Jumisko - Pyykk¨o , T . Vainio , Framing the context of use for mo - bile hci , International Journal of Mobile - Human - Computer - Interaction ( IJMHCI ) 3 ( 4 ) ( 2010 ) 1 – 28 . [ 8 ] Z . Alshaikh , C . Boughton , Notes on synthesis of context between engi - neering and social science , in : Modeling and Using Context , Springer , 2013 , pp . 157 – 170 . [ 9 ] C . Perera , A . Zaslavsky , P . Christen , D . Georgakopoulos , Context aware computing for the internet of things : A survey , Communications Surveys & Tutorials , IEEE 16 ( 1 ) ( 2014 ) 414 – 454 . [ 10 ] A . K . Dey , Understanding and using context , Personal and Ubiquitous Computing 5 ( 2001 ) 4 – 7 . [ 11 ] K . Henricksen , A framework for context - aware pervasive computing ap - plications , Ph . D . thesis , University of Queensland ( 2003 ) . [ 12 ] A . H . Van Bunningen , L . Feng , P . M . Apers , Context for ubiquitous data management , in : Ubiquitous Data Management , 2005 . UDM 2005 . International Workshop on , IEEE , 2005 , pp . 17 – 24 . [ 13 ] B . Schilit , N . Adams , R . Want , Context - aware computing applications , in : Mobile Computing Systems and Applications , 1994 . WMCSA 1994 . First Workshop on , IEEE , 1994 , pp . 85 – 90 . [ 14 ] https : / / www . google . co . uk / landing / now / , [ Online ; Last ac - cessed 11 - December - 2015 ] ( 2014 ) . [ 15 ] L . A . Suchman , Plans and situated actions : the problem of human - machine communication , Xerox Corporation , Palo Alto Research Cen - ter , 1985 . [ 16 ] B . A . Nardi , Studying context : A comparison of activity theory , situated action models , and distributed cognition , Context and consciousness : Activity theory and human - computer interaction ( 1996 ) 69 – 102 . [ 17 ] S . Greenberg , Context as a dynamic construct , Human - Computer Inter - action 16 ( 2 ) ( 2001 ) 257 – 268 . 26 [ 18 ] N . V . Flor , E . L . Hutchins , A case study of team programming during perfective software maintenance , in : Empirical studies of programmers : Fourth workshop , Intellect Books , 1991 , p . 36 . [ 19 ] G . Fitzpatrick , The locales framework : understanding and designing for wicked problems , Vol . 1 , Springer Science & Business Media , 2003 . [ 20 ] D . S . Modha , R . Ananthanarayanan , S . K . Esser , A . Ndirango , A . J . Sherbondy , R . Singh , Cognitive computing , Communications of the ACM 54 ( 8 ) ( 2011 ) 62 – 71 . [ 21 ] H . Dreyfus , What Computers can’t do . The Limit of Artiﬁcial Intelli - gence . Revised edition , Harper and Row , New York a . o . , 1979 . [ 22 ] H . L . Dreyfus , Intelligence without representation – merleau - ponty’s cri - tique of mental representation the relevance of phenomenology to sci - entiﬁc explanation , Phenomenology and the Cognitive Sciences 1 ( 4 ) ( 2002 ) 367 – 383 . [ 23 ] J . R . Lucas , Minds , machines and g¨odel , Philosophy 36 ( 137 ) ( 1961 ) 112 – 127 . [ 24 ] J . R . Searle , Minds , brains , and programs , Behavioral and brain sciences 3 ( 03 ) ( 1980 ) 417 – 424 . [ 25 ] J . Fodor , The Mind Doesn’t Work that Way : The Scope and Limits of Computational Psychology , Bradford book , MIT Press , 2001 . [ 26 ] A . K . Dey , Providing architectural support for building context - aware applications , Ph . D . thesis , Georgia Institute of Technology ( 2000 ) . [ 27 ] B . Hardian , J . Indulska , K . Henricksen , Balancing autonomy and user control in context - aware systems - a survey , in : Pervasive Computing and Communications Workshops , 2006 . PerCom Workshops 2006 . Fourth Annual IEEE International Conference on , IEEE , 2006 , pp . 6 – pp . [ 28 ] L . Barkhuus , A . Dey , Is context - aware computing taking control away from the user ? three levels of interactivity examined , in : UbiComp 2003 : Ubiquitous Computing , Springer , 2003 , pp . 149 – 156 . [ 29 ] B . H . Cheng , R . De Lemos , H . Giese , P . Inverardi , J . Magee , J . Ander - sson , B . Becker , N . Bencomo , Y . Brun , B . Cukic , et al . , Software en - gineering for self - adaptive systems : A research roadmap , in : Software engineering for self - adaptive systems , Springer , 2009 , pp . 1 – 26 . [ 30 ] M . Salehie , L . Tahvildari , Self - adaptive software : Landscape and re - search challenges , ACM Transactions on Autonomous and Adaptive Systems ( TAAS ) 4 ( 2 ) ( 2009 ) 14 . [ 31 ] R . Mizouni , M . A . Matar , Z . Al Mahmoud , S . Alzahmi , A . Salah , A framework for context - aware self - adaptive mobile applications spl , Ex - pert Systems with applications 41 ( 16 ) ( 2014 ) 7549 – 7564 . [ 32 ] S . Hallsteinsen , K . Geihs , N . Paspallis , F . Eliassen , G . Horn , J . Lorenzo , A . Mamelli , G . A . Papadopoulos , A development framework and methodology for self - adapting applications in ubiquitous computing en - vironments , Journal of Systems and Software 85 ( 12 ) ( 2012 ) 2840 – 2859 . [ 33 ] R . Rouvoy , P . Barone , Y . Ding , F . Eliassen , S . Hallsteinsen , J . Lorenzo , A . Mamelli , U . Scholz , Music : Middleware support for self - adaptation in ubiquitous and service - oriented environments , in : Software engineer - ing for self - adaptive systems , Springer , 2009 , pp . 164 – 182 . [ 34 ] K . Geihs , M . Wagner , Context - awareness for self - adaptive applications in ubiquitous computing environments , in : Context - Aware Systems and Applications , Springer , 2013 , pp . 108 – 120 . [ 35 ] G . Chen , D . Kotz , et al . , A survey of context - aware mobile computing research , Tech . rep . , Technical Report TR2000 - 381 , Dept . of Computer Science , Dartmouth College ( 2000 ) . [ 36 ] A . K . Dey , A . Newberger , Support for context - aware intelligibility and control , in : Proceedings of the SIGCHI Conference on Human Factors in Computing Systems , ACM , 2009 , pp . 859 – 868 . [ 37 ] B . Y . Lim , A . K . Dey , Assessing demand for intelligibility in context - aware applications , in : Proceedings of the 11th international conference on Ubiquitous computing , ACM , 2009 , pp . 195 – 204 . [ 38 ] B . Y . Lim , A . K . Dey , Toolkit to support intelligibility in context - aware applications , in : Proceedings of the 12th ACM international conference on Ubiquitous computing , ACM , 2010 , pp . 13 – 22 . [ 39 ] M . Mori , A software lifecycle process for context - aware adaptive sys - tems , in : Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering , ACM , 2011 , pp . 412 – 415 . [ 40 ] P . Inverardi , M . Mori , A software lifecycle process to support consis - tent evolutions , in : Software Engineering for Self - Adaptive Systems II , Springer , 2013 , pp . 239 – 264 . [ 41 ] M . Mori , F . Li , C . Dorn , P . Inverardi , S . Dustdar , Leveraging state - based user preferences in context - aware reconﬁgurations for self - adaptive sys - tems , in : Software Engineering and Formal Methods , Springer , 2011 , pp . 286 – 301 . [ 42 ] A . Aztiria , J . C . Augusto , R . Basagoiti , A . Izaguirre , D . J . Cook , Learn - ing frequent behaviors of the users in intelligent environments , Systems , Man , and Cybernetics : Systems , IEEE Transactions on 43 ( 6 ) ( 2013 ) 1265 – 1278 . [ 43 ] U . Alegre , J . C . Augusto , A . Aztiria , Temporal reasoning for intuitive speciﬁcation of context - awareness , in : Intelligent Environments ( IE ) , 2014 International Conference on , IEEE , 2014 , pp . 234 – 241 . [ 44 ] H . Lieberman , F . Patern ` o , M . Klann , V . Wulf , End - User Development : An Emerging Paradigm , Vol . 9 of Human - Computer Interaction Series , Springer Netherlands , Dordrecht , 2006 . [ 45 ] B . Ur , E . McManus , M . Pak Yong Ho , M . L . Littman , Practical trigger - action programming in the smart home , in : Proceedings of the SIGCHI Conference on Human Factors in Computing Systems , ACM , 2014 , pp . 803 – 812 . [ 46 ] J . Huang , M . Cakmak , Supporting mental model accuracy in trigger - action programming , in : Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing , ACM , 2015 , pp . 215 – 225 . [ 47 ] A . K . Dey , T . Sohn , S . Streng , J . Kodama , icap : Interactive prototyping of context - aware applications , in : Pervasive Computing , Springer , 2006 , pp . 254 – 271 . [ 48 ] A . Newberger , A . K . Dey , Designer support for context monitoring and control , IRB - TR - 03 - 017 , Intel Research Berkeley ( 2003 ) . [ 49 ] A . K . Dey , G . D . Abowd , D . Salber , A conceptual framework and a toolkit for supporting the rapid prototyping of context - aware applica - tions , Human - computer interaction 16 ( 2 ) ( 2001 ) 97 – 166 . [ 50 ] M . Ball , V . Callaghan , M . Gardner , An adjustable - autonomy agent for intelligent environments , in : Intelligent Environments ( IE ) , 2010 Sixth International Conference on , IEEE , 2010 , pp . 1 – 6 . [ 51 ] G . Fischer , Context - aware systems : the’right’information , at the’right’time , in the’right’place , in the’right’way , to the’right’person , in : Proceedings of the International Working Conference on Advanced Visual Interfaces , ACM , 2012 , pp . 287 – 294 . [ 52 ] R . De Lemos , H . Giese , H . A . M¨uller , M . Shaw , J . Andersson , M . Litoiu , B . Schmerl , G . Tamura , N . M . Villegas , T . Vogel , et al . , Software engi - neering for self - adaptive systems : A second research roadmap , in : Soft - ware Engineering for Self - Adaptive Systems II , Springer , 2013 , pp . 1 – 32 . [ 53 ] B . Y . Lim , Improving trust in context - aware applications with intelligi - bility , in : Proceedings of the 12th ACM international conference adjunct papers on Ubiquitous computing - Adjunct , ACM , 2010 , pp . 477 – 480 . [ 54 ] G . Fischer , End - user development and meta - design : Foundations for cultures of participation , in : End - user development , Springer , 2009 , pp . 3 – 14 . [ 55 ] J . Pascoe , Adding generic contextual capabilities to wearable computers , in : Wearable Computers , 1998 . Digest of Papers . Second International Symposium on , IEEE , 1998 , pp . 92 – 99 . [ 56 ] D . Kramer , J . C . Augusto , T . Clark , Context - awareness to increase in - clusion of people with ds in society , in : Workshops at the Twenty - Eighth AAAI Conference on Artiﬁcial Intelligence , 2014 . [ 57 ] G . Ghiani , M . Manca , F . Patern ` o , C . Porta , Beyond responsive design : context - dependent multimodal augmentation of web applications , in : Mobile Web Information Systems , Springer , 2014 , pp . 71 – 85 . [ 58 ] C . L . T . Yuan , D . A . Ramli , Frog sound identiﬁcation system for frog species recognition , in : Context - Aware Systems and Applications , Springer , 2013 , pp . 41 – 50 . [ 59 ] D . Grassi , A . Bouhtouch , G . Cabri , Inbooki : Context - aware adaptive e - books , in : Context - Aware Systems and Applications , Springer , 2014 , pp . 57 – 66 . [ 60 ] A . K . Dey , G . Kortuem , D . R . Morse , A . Schmidt , Situated interaction and context - aware computing , Personal and Ubiquitous Computing 5 ( 1 ) ( 2001 ) 1 – 3 . [ 61 ] C . Bettini , O . Brdiczka , K . Henricksen , J . Indulska , D . Nicklas , A . Ran - ganathan , D . Riboni , A survey of context modelling and reasoning tech - niques , Pervasive and Mobile Computing 6 ( 2 ) ( 2010 ) 161 – 180 . [ 62 ] K . Henricksen , J . Indulska , Modelling and using imperfect context in - formation , in : Pervasive Computing and Communications Workshops , 2004 . Proceedings of the Second IEEE Annual Conference on , IEEE , 27 2004 , pp . 33 – 37 . [ 63 ] J . - y . Hong , E . - h . Suh , S . - J . Kim , Context - aware systems : A literature re - view and classiﬁcation , Expert Systems with Applications 36 ( 4 ) ( 2009 ) 8509 – 8522 . [ 64 ] M . Perttunen , J . Riekki , O . Lassila , Context representation and reason - ing in pervasive computing : a review , International Journal of Multime - dia and Ubiquitous Engineering 4 ( 4 ) ( 2009 ) 1 – 28 . [ 65 ] M . Jonsson , Sensing and making sense : Designing middleware for con - text aware computing , Ph . D . thesis , The Royal Institute of Technology School ( 2007 ) . [ 66 ] A . Bikakis , T . Patkos , G . Antoniou , D . Plexousakis , A survey of semantics - based approaches for context reasoning in ambient intelli - gence , in : Constructing ambient intelligence , Springer , 2008 , pp . 14 – 23 . [ 67 ] R . Brachman , H . Levesque , Knowledge representation and reasoning , Elsevier , 2004 . [ 68 ] S . Jones , S . Hara , J . Augusto , e - friend : an ethical framework for intelli - gent environment development , in : Ethics and Information Technology , Vol . 17 , Springer , 2015 , pp . 11 – 25 . [ 69 ] T . Buchholz , A . K¨upper , M . Schi ﬀ ers , Quality of context : What it is and why we need it , in : Proceedings of the workshop of the HP OpenView University Association , Vol . 2003 , 2003 , pp . pp – 32 . [ 70 ] J . Pascoe , N . Ryan , D . Morse , Issues in developing context - aware com - puting , in : Handheld and ubiquitous computing , Springer , 1999 , pp . 208 – 221 . [ 71 ] S . Chetan , A . Ranganathan , R . Campbell , Towards fault tolerance perva - sive computing , Technology and Society Magazine , IEEE 24 ( 1 ) ( 2005 ) 38 – 44 . [ 72 ] W . K . Edwards , V . Bellotti , A . K . Dey , M . W . Newman , The challenges of user - centered design and evaluation for infrastructure , in : Proceed - ings of the SIGCHI conference on Human factors in computing systems , ACM , 2003 , pp . 297 – 304 . [ 73 ] K . Pohl , Requirements engineering : fundamentals , principles , and tech - niques , Springer Publishing Company , Incorporated , 2010 . [ 74 ] B . Nuseibeh , S . Easterbrook , Requirements engineering : a roadmap , in : Proceedings of the Conference on the Future of Software Engineering , ACM , 2000 , pp . 35 – 46 . [ 75 ] S . Robertson , J . Robertson , Mastering the requirements process : getting requirements right , Addison - Wesley , 2012 . [ 76 ] D . Zowghi , C . Coulin , Requirements elicitation : A survey of techniques , approaches , and tools , in : Engineering and managing software require - ments , Springer , 2005 , pp . 19 – 46 . [ 77 ] J . Krogstie , Requirement engineering for mobile information systems , in : Proceedings of the seventh international workshop on requirements engineering : Foundations for software quality ( REFSQ’01 ) , 2001 . [ 78 ] D . Hong , D . K . Chiu , V . Y . Shen , Requirements elicitation for the design of context - aware applications in a ubiquitous environment , in : Proceed - ings of the 7th international conference on Electronic commerce , ACM , 2005 , pp . 590 – 596 . [ 79 ] L . Kolos - Mazuryk , G . J . Poulisse , P . A . T . van Eck , Requirements engi - neering for pervasive services , in : Second Workshop on Building Soft - ware for Pervasive Computing . Position Papers . , San Diego , California , USA , 2005 , pp . 18 – 22 . [ 80 ] A . Sutcli ﬀ e , S . Fickas , M . M . Sohlberg , Pc - re : a method for personal and contextual requirements engineering with some experience , Require - ments Engineering 11 ( 3 ) ( 2006 ) 157 – 173 . [ 81 ] K . E . Kjær , Ethnographic studies as a requirement gathering process for the design of context aware middleware , in : Proceedings of the 2007 ACM / IFIP / USENIX international conference on Middleware compan - ion , ACM , 2007 , p . 3 . [ 82 ] C . Evans , L . Brodie , J . C . Augusto , Requirements engineering for intelli - gent environments , in : Intelligent Environments ( IE ) , 2014 International Conference on , IEEE , 2014 , pp . 154 – 161 . [ 83 ] B . Desmet , J . Vallejos , P . Costanza , W . De Meuter , T . DHondt , Context - oriented domain analysis , in : Modeling and Using Context , Springer , 2007 , pp . 178 – 191 . [ 84 ] J . Choi , Context - driven requirements analysis , in : Computational Sci - ence and Its Applications – ICCSA 2007 , Springer , 2007 , pp . 739 – 748 . [ 85 ] J . Choi , Y . Lee , Use - case driven requirements analysis for context - aware systems , in : Computer Applications for Bio - technology , Multimedia , and Ubiquitous City , Springer , 2012 , pp . 202 – 209 . [ 86 ] T . Ruiz - L´opez , C . Rodr´ıguez - Dom´ınguez , M . J . Rodr´ıguez , S . F . Ochoa , J . L . Garrido , Context - aware self - adaptations : From requirements spec - iﬁcation to code generation , in : Ubiquitous Computing and Ambi - ent Intelligence . Context - Awareness and Context - Driven Interaction , Springer , 2013 , pp . 46 – 53 . [ 87 ] W . Sitou , B . Spanfelner , Towards requirements engineering for context adaptive systems , in : Computer Software and Applications Conference , 2007 . COMPSAC 2007 . 31st Annual International , Vol . 2 , IEEE , 2007 , pp . 593 – 600 . [ 88 ] A . Finkelstein , A . Savigni , A framework for requirements engineer - ing for context - aware services , in : In Proc . of 1 st International Work - shop From Software Requirements to Architectures ( STRAW ) , 2001 , pp . 200 – 1 . [ 89 ] K . Oyama , H . Jaygarl , J . Xia , C . K . Chang , A . Takeuchi , H . Fujimoto , Requirements analysis using feedback from context awareness systems , in : Computer Software and Applications , 2008 . COMPSAC’08 . 32nd Annual IEEE International , IEEE , 2008 , pp . 625 – 630 . [ 90 ] L . Baresi , L . Pasquale , P . Spoletini , Fuzzy goals for requirements - driven adaptation , in : Requirements Engineering Conference ( RE ) , 2010 18th IEEE International , IEEE , 2010 , pp . 125 – 134 . [ 91 ] S . H . Siadat , M . Song , Understanding requirement engineering for context - aware service - based applications , Journal of Software Engineer - ing and Applications 5 ( 8 ) ( 2012 ) 536 – 544 . [ 92 ] D . Preuveneers , P . Novais , A survey of software engineering best prac - tices for the development of smart applications in ambient intelligence , Journal of Ambient Intelligence and Smart Environments 4 ( 3 ) ( 2012 ) 149 – 162 . [ 93 ] J . S . Bauer , M . W . Newman , J . A . Kientz , What designers talk about when they talk about context , Human – Computer Interaction 29 ( 5 - 6 ) ( 2014 ) 420 – 450 . [ 94 ] T . Winograd , Architectures for context , Human - Computer Interaction 16 ( 2 ) ( 2001 ) 401 – 419 . [ 95 ] H . Chen , An intelligent broker architecture for pervasive context - aware systems , Ph . D . thesis , University of Maryland ( 2004 ) . [ 96 ] M . Baldauf , S . Dustdar , F . Rosenberg , A survey on context - aware sys - tems , International Journal of Ad Hoc and Ubiquitous Computing 2 ( 4 ) ( 2007 ) 263 – 277 . [ 97 ] R . Taylor , N . Medvidovic , E . Dashofy , Software Architecture : Founda - tions , Theory , and Practice , Wiley , 2009 . [ 98 ] P . D . Costa , L . F . Pires , M . van Sinderen , Architectural patterns for context - aware services platforms , in : Ubiquitous Computing , Proceed - ings of the 2nd International Workshop on Ubiquitous Computing , IWUC 2005 , In conjunction with ICEIS 2005 , Miami , USA , May 2005 , 2005 , pp . 3 – 18 . [ 99 ] I . Khalil , Handbook of research on mobile multimedia , IGI Global , 2008 . [ 100 ] D . Cassou , D´eveloppement logiciel orient´e paradigme de conception : la programmation dirig´ee par la sp´eciﬁcation , Ph . D . thesis , Universit´e Sciences et Technologies - Bordeaux I ( 2011 ) . [ 101 ] L . Daniele , P . D . Costa , L . F . Pires , Towards a rule - based approach for context - aware applications , in : Dependable and Adaptable Networks and Services , Springer , 2007 , pp . 33 – 43 . [ 102 ] P . Patel , B . Morin , S . Chaudhary , A model - driven development frame - work for developing sense - compute - control applications , in : Proceed - ings of the 1st International Workshop on Modern Software Engineering Methods for Industrial Automation , ACM , 2014 , pp . 52 – 61 . [ 103 ] K . E . Kjær , A survey of context - aware middleware , in : Proceedings of the 25th conference on IASTED International Multi - Conference : Soft - ware Engineering , ACTA Press , 2007 , pp . 148 – 155 . [ 104 ] K . Henricksen , J . Indulska , T . McFadden , S . Balasubramaniam , Middle - ware for distributed context - aware systems , in : On the Move to Mean - ingful Internet Systems 2005 : CoopIS , DOA , and ODBASE , Springer , 2005 , pp . 846 – 863 . [ 105 ] Y . Mor , N . Winters , Design approaches in technology - enhanced learn - ing , Interactive Learning Environments 15 ( 1 ) ( 2007 ) 61 – 75 . [ 106 ] G . Salvaneschi , C . Ghezzi , M . Pradella , Context - oriented programming : A software engineering perspective , Journal of Systems and Software 85 ( 8 ) ( 2012 ) 1801 – 1817 . [ 107 ] A . J . Ramirez , B . H . Cheng , Design patterns for developing dynami - cally adaptive systems , in : Proceedings of the 2010 ICSE Workshop on Software Engineering for Adaptive and Self - Managing Systems , ACM , 2010 , pp . 49 – 58 . 28 [ 108 ] E . S . Chung , J . I . Hong , J . Lin , M . K . Prabaker , J . A . Landay , A . L . Liu , Development and evaluation of emerging design patterns for ubiquitous computing , in : Proceedings of the 5th conference on Designing inter - active systems : processes , practices , methods , and techniques , ACM , 2004 , pp . 233 – 242 . [ 109 ] J . A . Landay , G . Borriello , Design patterns for ubiquitous computing , Computer 36 ( 8 ) ( 2003 ) 93 – 95 . [ 110 ] G . Rossi , S . Gordillo , F . Lyardet , Design patterns for context - aware adaptation , in : Applications and the Internet Workshops , 2005 . Saint Workshops 2005 . The 2005 Symposium on , IEEE , 2005 , pp . 170 – 173 . [ 111 ] O . Riva , C . Di Flora , S . Russo , K . Raatikainen , Unearthing design pat - terns to support context - awareness , in : Pervasive Computing and Com - munications Workshops , 2006 . PerCom Workshops 2006 . Fourth An - nual IEEE International Conference on , IEEE , 2006 , pp . 5 – pp . [ 112 ] E . W . Dijkstra , The humble programmer , Communications of the ACM 15 ( 10 ) ( 1972 ) 859 – 866 . [ 113 ] J . C . Augusto , Increasing reliability in the development of intelligent environments , in : Intelligent Environments 2009 : Proceedings of the 5th International Conference on Intelligent Environments , Barcelona 2009 , Vol . 2 , IOS Press , 2009 , p . 134 . [ 114 ] J . C . Augusto , H . Zheng , M . Mulvenna , H . Wang , W . Carswell , P . Jef - fers , Design and modelling of the nocturnal aal care system , in : Ambient Intelligence - Software and Applications , Springer , 2011 , pp . 109 – 116 . [ 115 ] J . C . Augusto , M . J . Hornos , Software simulation and veriﬁcation to increase the reliability of intelligent environments , Advances in Engi - neering Software 58 ( 2013 ) 18 – 34 . [ 116 ] G . J . Holzmann , The model checker spin , IEEE Transactions on software engineering 23 ( 5 ) ( 1997 ) 279 – 295 . [ 117 ] D . Preuveneers , Y . Berbers , Consistency in context - aware behavior : a model checking approach . , in : Intelligent Environments ( Workshops ) , 2012 , pp . 401 – 412 . [ 118 ] L . DErrico , M . Loreti , Context aware speciﬁcation and veriﬁcation of distributed systems , in : Trustworthy Global Computing , Springer , 2012 , pp . 142 – 159 . [ 119 ] R . De Nicola , G . L . Ferrari , R . Pugliese , Klaim : A kernel language for agents interaction and mobility , Software Engineering , IEEE Transac - tions on 24 ( 5 ) ( 1998 ) 315 – 330 . [ 120 ] Y . Liu , C . Xu , S . Cheung , Afchecker : E ﬀ ective model checking for context - aware adaptive applications , Journal of Systems and Software 86 ( 3 ) ( 2013 ) 854 – 867 . [ 121 ] M . Sama , S . Elbaum , F . Raimondi , D . S . Rosenblum , Z . Wang , Context - aware adaptive applications : Fault patterns and their automated iden - tiﬁcation , Software Engineering , IEEE Transactions on 36 ( 5 ) ( 2010 ) 644 – 661 . [ 122 ] R . Gerth , Concise promela reference , 1997 , URL http : / / cm . bell - labs . com / cm / cs / what / spin / Man / Quick . html . [ 123 ] J . C . Augusto , M . J . Hornos , Designing more reliable mas - based ambi - ent intelligence systems . , in : T . Bosse ( Ed . ) , Agents and Ambient Intel - ligence , Vol . 12 of Ambient Intelligence and Smart Environments , IOS Press , 2012 , pp . 65 – 90 . [ 124 ] R . De Nicola , M . Loreti , Momo : A modal logic for reasoning about mobility , in : Formal Methods for Components and Objects , Springer , 2005 , pp . 95 – 119 . [ 125 ] J . Park , M . Moon , S . Hwang , K . Yeom , Cass : A context - aware sim - ulation system for smart home , in : Software Engineering Research , Management & Applications , 2007 . SERA 2007 . 5th ACIS International Conference on , IEEE , 2007 , pp . 461 – 467 . [ 126 ] Z . Wang , S . Elbaum , D . S . Rosenblum , Automated generation of context - aware tests , in : Software Engineering , 2007 . ICSE 2007 . 29th International Conference on , IEEE , 2007 , pp . 406 – 415 . [ 127 ] B . Bertran , J . Bruneau , D . Cassou , N . Loriant , E . Balland , C . Consel , Diasuite : A tool suite to develop sense / compute / control applications , Science of Computer Programming 79 ( 2014 ) 39 – 51 . [ 128 ] J . Bruneau , W . Jouve , C . Consel , Diasim : A parameterized simulator for pervasive computing applications , in : Mobile and Ubiquitous Sys - tems : Networking & Services , MobiQuitous , 2009 . MobiQuitous’ 09 . 6th Annual International , IEEE , 2009 , pp . 1 – 10 . [ 129 ] L . Yu , W . T . Tsai , Y . Jiang , J . Gao , Generating test cases for context - aware applications using bigraphs , in : Software Security and Reliability , 2014 Eighth International Conference on , IEEE , 2014 , pp . 137 – 146 . [ 130 ] T . Strang , C . Linnho ﬀ - Popien , A context modeling survey , in : In : Work - shop on Advanced Context Modelling , Reasoning and Management , UbiComp 2004 - The Sixth International Conference on Ubiquitous Computing , Nottingham / England , Springer - Verlag , 2004 , pp . 31 – 41 . [ 131 ] C . Bolchini , C . A . Curino , E . Quintarelli , F . A . Schreiber , L . Tanca , A data - oriented survey of context models , SIGMOD Rec . 36 ( 4 ) ( 2007 ) 19 – 26 . [ 132 ] J . Indulska , P . Sutton , Location management in pervasive systems , in : Proceedings of the Australasian information security workshop confer - ence on ACSW frontiers 2003 - Volume 21 , Australian Computer Society , Inc . , 2003 , pp . 143 – 151 . [ 133 ] A . Fortier , N . Canibano , J . Grigera , G . Rossi , S . Gordillo , An object - oriented approach for context - aware applications , in : Advances in Smalltalk , Springer , 2007 , pp . 23 – 46 . [ 134 ] D . Gra ﬀ , M . Werner , H . Parzyjegla , J . Richling , G . M¨uhl , An object - oriented and context - aware approach for distributed mobile applications , in : Architecture of Computing Systems ( ARCS ) , 2010 23rd Interna - tional Conference on , VDE , 2010 , pp . 1 – 10 . [ 135 ] G . Kiczales , J . Lamping , A . Mendhekar , C . Maeda , C . Lopes , J . - M . Lo - ingtier , J . Irwin , Aspect - oriented programming , Springer , 1997 . [ 136 ] ´E . Tanter , K . Gybels , M . Denker , A . Bergel , Context - aware aspects , in : Software Composition , Springer , 2006 , pp . 227 – 242 . [ 137 ] F . Dantas , T . Batista , N . Cacho , Towards aspect - oriented programming for context - aware systems : A comparative study , in : Proceedings of the 1st International Workshop on Software Engineering for Pervasive Com - puting Applications , Systems , and Environments , IEEE Computer Soci - ety , 2007 , p . 4 . [ 138 ] L . Fuentes , N . G´amez , P . S´anchez , Aspect - oriented design and imple - mentation of context - aware pervasive applications , ISSE 5 ( 1 ) ( 2009 ) 79 – 93 . [ 139 ] L . Fuentes , N . Gamez , P . Sanchez , Aspect - oriented executable uml mod - els for context - aware pervasive applications , in : Model - based Method - ologies for Pervasive and Embedded Software , 2008 . MOMPES 2008 . 5th International Workshop on , IEEE , 2008 , pp . 34 – 43 . [ 140 ] S . Apel , The role of features and aspects in software develop - ment , Ph . D . thesis , Otto - von - Guericke - Universit¨at Magdeburg , Univer - sit¨atsbibliothek ( 2007 ) . [ 141 ] R . Evans , P . Kearney , G . Caire , F . Garijo , J . Gomez Sanz , J . Pavon , F . Leal , P . Chainho , P . Massonet , Message : Methodology for engineer - ing systems of software agents , EURESCOM , EDIN ( 2001 ) 0223 – 0907 . [ 142 ] R . Hirschfeld , P . Costanza , O . Nierstrasz , Context - oriented program - ming , Journal of Object Technology , ETH Zurich , 7 ( 3 ) ( 2008 ) 125 – 151 . [ 143 ] V . R . Lesser , Cooperative multiagent systems : A personal view of the state of the art , Knowledge and Data Engineering , IEEE Transactions on 11 ( 1 ) ( 1999 ) 133 – 142 . [ 144 ] P . Heymans , J . - C . Trigaux , Software product line : state of the art , Re - lat´orio T´ecnico EPH3310300R0462 / 215315 , Product Line ENgineering of food TraceabilitY software ( PLENTY ) Project , Institut dInforma - tique , FUNDP , Namur . [ 145 ] A . Sturm , O . Shehory , Agent - oriented software engineering : Revisiting the state of the art , in : Agent - Oriented Software Engineering , Springer , 2014 , pp . 13 – 26 . [ 146 ] M . Appeltauer , R . Hirschfeld , M . Haupt , J . Lincke , M . Perscheid , A comparison of context - oriented programming languages , in : Interna - tional Workshop on Context - Oriented Programming , ACM , 2009 , p . 6 . [ 147 ] S . Apel , C . K¨astner , An overview of feature - oriented software develop - ment . , Journal of Object Technology 8 ( 5 ) ( 2009 ) 49 – 84 . [ 148 ] N . Ubayashi , S . Nakajima , Context - aware feature - oriented modeling with an aspect extension of VDM , in : Proceedings of the 2007 ACM Symposium on Applied Computing ( SAC ) , Seoul , Korea , March 11 - 15 , 2007 , 2007 , pp . 1269 – 1274 . [ 149 ] D . Kramer , Uniﬁed gui adaptation in dynamic software product lines , Ph . D . thesis , University of West London ( 2014 ) . [ 150 ] P . Fernandes , C . Werner , L . G . P . Murta , Feature modeling for context - aware software product lines . , in : The 20th International Conference on Software Engineering and Knowledge Engineering ( SEKE ) , 2008 , pp . 758 – 763 . [ 151 ] P . Fernandes , C . Werner , E . Teixeira , An approach for feature modeling of context - aware software product line . , Journal of Universal Computer Science ( JUCS ) 17 ( 5 ) ( 2011 ) 807 – 829 . [ 152 ] C . Parra , X . Blanc , L . Duchien , Context awareness for dynamic service - oriented product lines , in : Proceedings of the 13th International Soft - 29 ware Product Line Conference , Carnegie Mellon University , 2009 , pp . 131 – 140 . [ 153 ] F . G . Marinho , R . Andrade , C . Werner , W . Viana , M . E . Maia , L . S . Rocha , E . Teixeira , V . L . Dantas , F . Lima , S . Aguiar , et al . , Mobiline : A nested software product line for the domain of mobile and context - aware applications , Science of Computer Programming 78 ( 12 ) ( 2013 ) 2381 – 2398 . [ 154 ] F . G . Marinho , R . M . Andrade , C . Werner , A veriﬁcation mechanism of feature models for mobile and context - aware software product lines , in : Software Components , Architectures and Reuse ( SBCARS ) , 2011 Fifth Brazilian Symposium on , IEEE , 2011 , pp . 1 – 10 . [ 155 ] D . Kramer , S . Oussena , P . Komisarczuk , T . Clark , Using document - oriented guis in dynamic software product lines , in : ACM SIGPLAN Notices , ACM , 2013 , pp . 85 – 94 . [ 156 ] D . Kramer , A . Kocurova , S . Oussena , T . Clark , P . Komisarczuk , An ex - tensible , self contained , layered approach to context acquisition , in : Pro - ceedings of the Third International Workshop on Middleware for Perva - sive Mobile and Embedded Computing , ACM , 2011 , p . 6 . [ 157 ] G . M . Kapitsaki , G . N . Prezerakos , N . D . Tselikas , I . S . Venieris , Context - aware service engineering : A survey , Journal of Systems and Software 82 ( 8 ) ( 2009 ) 1285 – 1297 . [ 158 ] D . B . Abeywickrama , Context - aware services engineering for service - oriented architectures , in : Web Services Foundations , Springer , 2014 , pp . 291 – 317 . [ 159 ] O . M . Shehory , A . Sturm , A brief introduction to agents , in : Agent - oriented software engineering : reﬂections on architectures , methodolo - gies , languages , and frameworks , Springer , 2014 , pp . 3 – 3 . [ 160 ] T . Bosse , Agents and Ambient Intelligence : Achievements and Chal - lenges in the Intersection of Agent Technology and Ambient Intelli - gence , IOS Press , Amsterdam , The Netherlands , The Netherlands , 2012 . [ 161 ] Y . Shoham , An overview of agent - oriented programming , Software agents 4 . [ 162 ] M . Wooldridge , An introduction to multiagent systems , John Wiley & Sons , 2009 . [ 163 ] A . R . d . M . Neves , ´A . M . G . Carvalho , C . G . Ralha , Agent - based ar - chitecture for context - aware and personalized event recommendation , Expert Systems with Applications 41 ( 2 ) ( 2014 ) 563 – 573 . [ 164 ] P . K . Murukannaiah , M . P . Singh , Xipho : Extending tropos to engi - neer context - aware personal agents , in : Proceedings of the 2014 interna - tional conference on Autonomous agents and multi - agent systems , Inter - national Foundation for Autonomous Agents and Multiagent Systems , 2014 , pp . 309 – 316 . [ 165 ] J . L . Barbosa , A . C . Yamin , P . Vargas , I . Augustin , C . F . Geyer , Holoparadigm : a multiparadigm model oriented to development of dis - tributed systems , in : Parallel and Distributed Systems , 2002 . Proceed - ings . Ninth International Conference on , IEEE , 2002 , pp . 165 – 170 . [ 166 ] A . C . Yamin , J . V . Barbosa , I . Augustin , L . C . da Silva , R . Real , C . Geyer , G . Cavalheiro , Towards merging context - aware , mobile and grid computing , International Journal of High Performance Computing Applications 17 ( 2 ) ( 2003 ) 191 – 203 . [ 167 ] J . Barbosa , F . Dillenburg , G . Lermen , A . Garzao , C . Costa , J . Rosa , To - wards a programming model for context - aware applications , Computer Languages , Systems & Structures 38 ( 3 ) ( 2012 ) 199 – 213 . [ 168 ] J . Miller , J . Mukerji , Mda guide version 1 . 0 . 1 , Tech . rep . , Object Man - agement Group ( OMG ) ( 2003 ) . [ 169 ] B . Selic , The pragmatics of model - driven development , IEEE software 20 ( 5 ) ( 2003 ) 19 – 25 . [ 170 ] Q . Z . Sheng , B . Benatallah , Contextuml : a uml - based modeling lan - guage for model - driven development of context - aware web services , in : Mobile Business , 2005 . ICMB 2005 . International Conference on , IEEE , 2005 , pp . 206 – 212 . [ 171 ] J . Rumbaugh , I . Jacobson , G . Booch , The Uniﬁed Modeling Language Reference Manual , Addison - Wesley Professional , 2005 . [ 172 ] E . Serral , P . Valderas , V . Pelechano , A model driven development method for developing context - aware pervasive systems , in : Ubiquitous Intelligence and Computing , Springer , 2008 , pp . 662 – 676 . [ 173 ] E . Serral , P . Valderas , V . Pelechano , Towards the model driven develop - ment of context - aware pervasive systems , Pervasive and Mobile Com - puting 6 ( 2 ) ( 2010 ) 254 – 280 . [ 174 ] R . Tesoriero , J . A . Gallud , M . D . Lozano , V . M . R . Penichet , Cauce : Model - driven development of context - aware applications for ubiqui - tous computing environments . , Journal of Universal Computer Science 16 ( 15 ) ( 2010 ) 2111 – 2138 . [ 175 ] A . Sindico , V . Grassi , Model driven development of context aware soft - ware systems , in : International workshop on context - oriented program - ming , ACM , 2009 , p . 7 . [ 176 ] J . R . Hoyos , J . Garc´ıa - Molina , J . A . Bot´ıa , Mlcontext : a context - modeling language for context - aware systems , Electronic Communica - tions of the EASST 28 ( 2010 ) . [ 177 ] A . A . Nacci , B . Balaji , P . Spoletini , R . Gupta , D . Sciuto , Y . Agarwal , Buildingrules : a trigger - action based system to manage complex com - mercial buildings , in : Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2015 ACM International Symposium on Wearable Computers , ACM , 2015 , pp . 381 – 384 . [ 178 ] G . Lucci , F . Patern ` o , Understanding end - user development of context - dependent applications in smartphones , in : Human - Centered Software Engineering , Springer , 2014 , pp . 182 – 198 . [ 179 ] B . P . Lientz , E . B . Swanson , Software maintenance management , Addison - Wesley Longman Publishing Co . , Inc . , Boston , MA , USA , 1980 . [ 180 ] D . Moos , S . Bader , T . Kirste , From intelligibility to debuggability in context - aware systems , in : KI 2014 : Advances in Artiﬁcial Intelligence , Springer , 2014 , pp . 219 – 224 . [ 181 ] D . Kulkarni , A . Tripathi , A framework for programming robust context - aware applications , Software Engineering , IEEE Transactions on 36 ( 2 ) ( 2010 ) 184 – 197 . [ 182 ] I . Augustin , A . C . Yamin , L . C . da Silva , R . A . Real , G . Frainer , C . F . Geyer , Isamadapt : abstractions and tools for designing general - purpose pervasive applications , Software : Practice and Experience 36 ( 11 - 12 ) ( 2006 ) 1231 – 1256 . [ 183 ] K . Henricksen , J . Indulska , Developing context - aware pervasive com - puting applications : Models and approach , Pervasive and mobile com - puting 2 ( 1 ) ( 2006 ) 37 – 64 . [ 184 ] B . Guo , D . Zhang , M . Imai , Toward a cooperative programming frame - work for context - aware applications , Personal and Ubiquitous Comput - ing 15 ( 3 ) ( 2011 ) 221 – 233 . [ 185 ] A . Moon , H . Kim , H . Kim , S . Lee , Context - aware active services in ubiquitous computing environments , ETRI journal 29 ( 2 ) ( 2007 ) 169 – 178 . [ 186 ] A . Achilleos , K . Yang , N . Georgalas , Context modelling and a context - aware framework for pervasive service creation : A model - driven ap - proach , Pervasive and Mobile Computing 6 ( 2 ) ( 2010 ) 281 – 296 . [ 187 ] T . Gross , Towards a new human - centred computing methodology for cooperative ambient intelligence , Journal of Ambient Intelligence and Humanized Computing 1 ( 1 ) ( 2010 ) 31 – 42 . [ 188 ] L . Tang , Z . Yu , H . Wang , X . Zhou , Z . Duan , Methodology and tools for pervasive application development , International Journal of Distributed Sensor Networks 2014 . [ 189 ] J . Baek Jorgensen , C . Bossen , Executable use cases : requirements for a pervasive health care system , Software , IEEE 21 ( 2 ) ( 2004 ) 34 – 41 . [ 190 ] F . P´erez , P . Valderas , Allowing end - users to actively participate within the elicitation of pervasive system requirements through immediate vi - sualization , in : Requirements Engineering Visualization ( REV ) , 2009 Fourth International Workshop on , IEEE , 2009 , pp . 31 – 40 . [ 191 ] R . Fuentes - Fern´andez , J . J . G´omez - Sanz , J . Pav´on , Understanding the human context in requirements elicitation , Requirements engineering 15 ( 3 ) ( 2010 ) 267 – 283 . [ 192 ] P . A . Laplante , What every engineer should know about software engi - neering , CRC Press , 2007 . 30