Interpretation - driven mapping : a framework for conducting search and re - representation in parallel for computational analogy in design Submitted to : AIEDAM Special Issue on Analogical Thinking On : October 31 , 2014 Authors : Kazjon Grace [ 1 ] , John Gero [ 1 , 2 ] and Rob Saunders [ 3 ] Aﬃliations : [ 1 ] College of Computing and Informatics , UNC Charlotte . [ 2 ] Krasnow Institute for Advanced Study , George Mason University . [ 3 ] Faculty of Architecture , Design and Planning , The University of Sydney . Contact Details ( ﬁrst author ) : Email : k . grace @ uncc . edu Phone : 347 443 6271 Mail : 220 E . 63rd St , Apt 8F , New York 10065 , NY , USA . Pages : 39 Figures : 8 Tables : 6 Short Title : Interpretation - driven mapping Abstract This paper presents a framework for the interactions between the processes of mapping and re - representation within analogy - making . Analogical reasoning systems for use in de - sign tasks require representations that are open to being reinterpreted . The framework , Interpretation Driven Mapping , casts the process of constructing an analogical relation - ship as requiring iterative , parallel interactions between mapping and interpreting . This paper argues that this interpretation - driven approach focusses research on a fundamental problem in analogy - making : how do the representations that make new mappings pos - sible emerge during the mapping process ? The framework is useful for both describing existing analogy - making models and designing future ones . The paper presents a computational model informed by the framework , Idiom , that learns ways to reinterpret the representations of objects as it maps between them . The results of an implementation in the domain of visual analogy are presented to demon - strate its feasibility . Analogies constructed by the system are presented as examples . The Interpretation Driven Mapping framework is then used to compare representational change in Idiom to that in three previously published systems . Keywords Computational analogy - making , representation , interpretation . 1 Introduction The production of a new analogy involves the construction of a new , often complex , relationship between two objects that was not previously part of the system’s knowledge ( Gick and Holyoak , 1980 ; Gentner , 1983 ; Hofstadter , 2008 ) . This new relationship , which we call an “association” , is then used to transfer knowledge from the source domain to that of the target ( Gick and Holyoak , 1983 ; Detterman and Sternberg , 1993 ; Barnden and Holyoak , 1994 ; Holyoak et al . , 1994 ; Gentner and Holyoak , 1997 ; Robertson , 2000 ) . We concern ourselves with the former process – mapping – which is integral to both 1 analogical reasoning and related processes such as conceptual blending ( Fauconnier and Turner , 2003 ) and metaphor ( Lakoﬀ and Johnson , 2003 ) . Terminological precision in this ﬁeld often suﬀers from the ability of many relevant words to refer both to processes and their results , so we adopt the following deﬁnitions throughout this paper . Mapping is the process of searching a source and a target object for a set of shared relationships on which to base a new analogy , while an association is the resulting set of relationships . Interpreting is the process of changing the representation of source and target objects to enable mapping , while a transformation is the resulting func - tion which produces the new object representations from the prior ones . The processes of mapping and interpreting operate in parallel , iteratively generating candidate associ - ations and transformations until a satisfactory pair of candidates – an association and the transformation which enables it – is found . Following Structure Mapping ( Gentner , 1983 ) we adopt the notion that an association connects a set of relationships between features of one object’s representation to an analogous set of relationships between an - other object’s representation . Analogy depends on compatible relational representations ( Doumas et al . , 2008 ; Penn et al . , 2008 ; Holyoak , 2012 ) . Our focus is on how that repre - sentation can be re - interpreted during and because of the process of analogical mapping , and the eﬀect of this reinterpreting on the resultant association . Viewed with this focus , the process of mapping can be considered a search of the space of possible new relationships between two objects , where a new relationship is deﬁned as a previously undiscovered commonality . This commonality can be a shared feature , a shared relationship between components , or any other matching representational struc - ture . Due to the combinatorial nature of a space of possible mappings the search can be computationally expensive , but conceptually the problem is simple : ﬁnd matching pairs of representational elements . Many models of analogy that perform this kind of search exist , with ANALOGY ( Evans , 1964 ) being a very early example and the Structure Map - ping Engine ( Falkenhainer et al . , 1989 ) being the best known . These models and their computational implementations demonstrate that locating the shared properties between objects is a solved problem when compatible representations already exist . 2 The representation of an object that is conducive to a particular analogical mapping may not be familiar or typical . Contextually salient features may not be regarded as central to an object’s description , and nor might be the representational structure in which those features are placed . Analogical mapping does not necessarily concern the design attributes that are considered most salient to an object considered in isolation . The focus of this research is on how two objects with initially disparate representations can be reinterpreted in such a way as to be compatible for mapping . This parallels the distinction between constructing analogies and solving them identiﬁed in Harpaz - Itay et al . ( 2006 ) . Previous approaches to this problem have focussed on building representations from sub - symbolic elements ( Hofstadter and Mitchell , 1992 ) , iteratively constructing relational representations ( Doumas et al . , 2008 ) , reconstructing representations from memory into the current context ( Kokinov and Petrov , 2001 ) , or by activating progressively more abstract concepts ( Petkov et al . , 2011 ) . Models of analogy - making in design have focussed on projecting representations into an ontology that characterises their function ( s ) , and then mapping based on patterns ( Visser , 1996 ; Qian and Gero , 1996 ; Griﬃth et al . , 1996 ; Bhatta and Goel , 1997 ; Griﬃth et al . , 2000 ) , a special case of mapping by abstraction . This work seeks to deﬁne a general framework for how representations change during mapping that can both inform future computational models and serve to compare these existing approaches to representational transformation . We apply this framework in the construction of a computational model of analogical mapping , Idiom , and describe several examples generated by an implementation of that model that could not have been constructed without interpretation - driven mapping . The implementation of Idiom is intended to serve as a proof - of - concept of both the framework and model , demonstrating their computational feasibility and potential as an approach to analogy - making . We then compare the way representations change in Idiom and three other analogy - making systems , demonstrating the diﬀerences of our approach . 3 2 The interpretation - driven mapping framework Constructing representations suitable for analogy in a complex creative domain ( such as design ) is a complex task . At the heart of this complexity is a chicken - and - egg question : an association cannot be found without a representation that supports it , and yet whether a representation contains mappable elements cannot be determined without searching . Without representations that compatibly express the relations encapsulated within both objects , neither representation nor mapping can completely precede the other . We de - velop a framework for conceptualising analogy in which these two processes take place interactively and in parallel . The central premise of our framework is that mapping should inform future representations , and representations should inform future mapping . Given symbolic representations of a source and target object , we model how those representations change over the course of the mapping process . We focus on this com - ponent of the analogy - making process to investigate how the context of searching for a mapping between source and target aﬀects their representations . To facilitate this focus we consider representation change during mapping separately from representation con - struction prior to mapping . The latter has long been considered a central component of analogy - making and incorporated into models ( Koestler , 1967 ; Wolstencroft , 1989 ; Chalmers et al . , 1992 ; French , 2002 ) , we focus on the former as a distinct but equally important consideration . This focus on representational change during mapping echoes the discussion on ontological mismatches in ( Davies et al . , 2003 ) . We propose a framework , “Interpretation - driven Mapping” ( IDM ) , for this notion of representational transformation . In this formulation interpreting is dependent on candi - date associations , i . e . how representations change depends on the progress of the search for mappings , and mapping is dependent on candidate transformations , i . e . how mappings are searched for is dependent on the progress of the search for representational changes . Our framework’s name derives from this interaction : mapping is interpretation - driven and vice versa . As a consequence of our desire for generality in this framework we do not place any constraints on how the objects are represented , how their symbolic representa - tions are initially constructed , what constitutes a satisfactory pair of candidates , or what 4 happens to the association / transformation pair once it has been found . Prior approaches to re - representation during analogical mapping include the minimal ascension method for extending Structure Mapping in Falkenhainer ( 1990 ) , in which non - identical relationships can be considered contextually mappable only when they have a common superordinate in the hierarchy of relationships . This is similar to the ontological approach used in Qian and Gero ( 1996 ) , where relationships are mappable if they perform the same function , and to that used in McDermott ( 1979 ) and Davies et al . ( 2003 ) , where attributes are abstracted iteratively until they are mappable . Such approaches can be extended to leverage relational hierarchies from external sources like WordNet , as in Holyoak and Thagard ( 1989 ) , or from hierarchies inferred from large corpora , as in Turney ( 2008 ) . Our iterative strategy for re - representing and mapping is similar to that adopted in Yan et al . ( 2003 ) , although IDM’s interpreting process is more general . The IDM framework , Figure 1 , highlights the interactions between the re - representation of objects and the search for mappings . The perception process ( es ) that are precursors to the interpreting / mapping cycle , as well as the transfer process ( es ) that follow it are included for illustrative purposes only : IDM makes no assumptions about those processes . We acknowledge transfer’s crucial role in analogy - making ( Gick and Holyoak , 1983 ; Hall , 1989 ; French , 2002 ) , and its absence is a matter of scope , not of exclusion . IDM focusses on the cyclical relationship between mapping and interpreting . Perception Interpreting Mapping Transfer objects ( sensory ) association transformation analogy Interpretation - driven mapping ( IDM ) Analogy - making candidate transformations candidate associations objects ( symbolic ) Figure 1 : The Interpretation - driven mapping ( IDM ) framework ( centre ) embedded in a model of computational analogy . IDM addresses representation construction and paral - lelised search for mappings and object re - interpreting . It has been argued ( Chalmers et al . , 1992 ; Kokinov and Petrov , 2001 ; French , 2002 ) 5 that the perception of analogues - to - be is not a precursor to the search for mappings but a concurrent process . The IDM framework supports and extends this notion , with rep - resentational change during mapping being its principal driver . While the “Perception” process in Figure 1 operates prior to the processes of the framework , this sequential and discretised depiction allows us to focus on how representations change during the map - ping process . We separate the processes acting to produce the representation of an object that exists when mapping begins ( “Perception” ) from the processes that act to change the representation of that object during mapping ( “Interpreting” ) based on their roles only , and make no assumptions about the similarity or diﬀerence in their mechanisms . We also refrain from stating that the symbolic representation which is present at the start of mapping is in any way “untransformed” or “canonical” , based on literature in embodied , constructivist and situated cognition ( Clancey , 1997 ; Schacter et al . , 2000 ; Mahon and Caramazza , 2008 ) that disputes the existence of such Platonic conceptualisations . The initial representation is merely the representation existing at the time mapping begins , and the basis for representational transformations applied during that process . The IDM framework does not prescribe analogy - making completely , it is a framework for the interactions between representation and mapping , not a framework for the whole of computational analogy . The framework also does not make any assumptions about the nature of the mapping and interpreting processes or the representation of objects , transformations , and associations . This distinguishes it from previous approaches , such as the VAE model ( Sowa and Majumdar , 2003 ) , which utilise a similar structure but limit possible transformations . The framework addresses the “which - came - ﬁrst ? ” question in representation in analogy - making by positing that the new relationship between objects and the representations that enable it arise out of a simultaneous , interactive process . Using the principles of IDM it becomes possible to describe how any computational analogy - making model incorporates representational change into mapping . While other models were not derived from our framework , framing analogical representation in this way can enable scrutinisation and comparison of otherwise disparate systems . The three core principles of the framework described , and the questions that arise from them when 6 inspecting an analogy - making model through the lens of IDM , are as follows : • Mapping can be conceptualised as a search for an association between source and target . Constructing a new association is a search through a space of possible associations . Mapping is an iterative process that produces and evaluates candidate associations . From this two questions arise about a model : 1 . What bounds the space of valid associations constructible by mapping ? 2 . What causes an association to be selected by mapping ? • Interpreting can be conceptualised as search for a transformation of source and target . Constructing representations that will be used in the association produced by mapping is a search through a space of possible transformations ( to be applied to the initial object representations ) . Interpreting is an iterative process that produces and evaluates transformations . From this two questions arise about a model : 3 . What bounds the space of valid transformations constructible by interpreting ? 4 . What causes a transformation to be selected by interpreting ? • Interpreting occurs in parallel with mapping . The two processes operate simultane - ously , with candidate transformations aﬀecting mapping and candidate associations aﬀecting interpreting . From this two questions arise about a model : 5 . How do candidate transformations selected by interpreting aﬀect mapping ? 6 . How do candidate associations selected by mapping aﬀect interpreting ? 3 Idiom : a computational model derived from IDM Idiom is a computational model of the association - construction component of analogy - making based on the IDM framework . Idiom demonstrates the feasibility of the the principles of parallel search and re - representation , and is so named for its ability to construct and operate on non - literal representations of objects . The model describes one way representations can change during the construction of an analogy , and how those 7 changes both aﬀect and are aﬀected by the search for mappings . Idiom provides one possible set of answers for the six questions raised at the end of Section 2 . Interpretation - driven mapping involves two bi - directionally interactive processes ; mapping ( or more generally the search for solutions ) and interpreting ( or more gener - ally the re - framing of the problem ) . The Idiom model adds a third process : Perception , by which the representations comprised of object features and the relationships between them are constructed from the sensory representations initially observed by the system . As an instantiation of the IDM framework Idiom outputs a new association ( a set of shared relationships between the source and target objects ) and the representational transformation under which that association exists . 3 . 1 Model overview We develop a symbolic representation of the three processes which comprise Idiom – perception , interpreting and mapping , shown in Figure 2 . perception interpreting mapping candidateassociationsa ∈ A objects o 1 , o 2 evaluation function selected association a win relational reps . r ( o 1 ) , r ( o 2 ) candidate transformations & transformed objects t ∈ T , τ ( r ( o 1 ) ) , τ ( r ( o 2 ) ) selected transformation t win p q m i Figure 2 : The three processes of Idiom , showing the symbolic representations of their inputs and outputs . Idiom is a computational model that instantiates the IDM framework Our model of representational change in analogy - making begins with the model ob - serving sensory representations of two objects . We do not treat the “source” and “target” objects diﬀerently as in without transfer the two are interchangeable . We refer these ob - jects as “sensory representations” to emphasise that there is no veridical representation of any analogue , only observations made through the system’s perceptual faculties . The symbols used to represent the Idiom model are as follows : 8 a is a candidate association . An association a ∈ A is an ordered nonempty list of pairs of features , with the ﬁrst of each pair being a node in τ ( r ( o 1 ) ) and the second being a node in τ ( r ( o 2 ) ) . a win is a candidate association that has been evaluated as satisfactory under the evaluation function q −→ , leading to the Idiom model ceasing its search . A is the set of candidate associations being considered by the mapping process . r ( o 1 ) , r ( o 2 ) are the relational representations of the two objects that result from perception . o 1 , o 2 are the sensory representations of the two objects . t is a candidate transformation . t win is the transformation that was applied when a satisfactory association was discovered . T is the set of candidate transformations being considered by the interpret - ing process . τ is a candidate transformation that has been applied to the relational representations . τ ( r ( o 1 ) ) , τ ( r ( o 2 ) ) are the relational representations after the active transformation has been applied . i −→ is the process of interpreting that uses the current association candidates to generate new ways to transform the object representations , and then selects one transformation to apply to them . See Section 3 . 4 for details . m −→ is the process of mapping that searches the interpreted relational rep - resentations for associations based on Structure Mapping Theory . See Section 3 . 3 for details . p −→ is the process of perception that constructs relational representations from the sensory representations . See Section 3 . 2 for details . q −→ is an evaluation function which can be applied to associations . The model’s perception process , p −→ constructs the relational representations used in search , and can be represented as ( 1 ) . Relational representations consist of a set of features and a set of relationships between those features , and are a commonly adopted representation in analogy - making ( Gentner , 1983 ; Holyoak and Thagard , 1989 ; Hofstadter and Mitchell , 1992 ; Kokinov and Petrov , 2001 ) . p −→ : = o 1 → r ( o 1 ) , o 2 → r ( o 2 ) ( 1 ) The model’s mapping process , m −→ searches for associations between relational repre - sentations , and can be represented as ( 2 ) . As input it takes the transformed objects for searching and the set of candidate associations for updating . In Idiom the Mapping 9 process is dependent only on the current active transformation and its aﬀects on the rela - tional representations . This is a simpliﬁcation of the IDM framework , in which mapping is reliant on the set of candidate transformations , allowing multiple transformations to inﬂuence mapping simultaneously , rather than a winner - takes - all approach used here . We denote the set of candidate associations after an iteration of the mapping process as A (cid:48) to indicate it has been updated . Idiom follows the Structure Mapping Theory ( Gentner , 1983 ) deﬁnition of analogical mapping , in which a mapping exists between a common subset of relationships between the features of the objects , although we reserve the word “mapping” for the process . As in Section 2 we refer to the shared subset of relationships between features that results from mapping as an “association” . We embed Gentner’s theory in a system where the relational representations are iteratively transformed by an interpreting process in parallel with the search for mappings . m −→ : = τ ( r ( o 1 ) ) , τ ( r ( o 2 ) ) , A → a win ∨ A (cid:48) ( 2 ) The model’s interpreting process , i −→ , uses the set of candidate associations to construct new ways of transforming the object representations , and can be represented as ( 3 ) . As input it takes the object representations and the set of candidate associations for use in generating new transformations , and both the current active transformation and the set of candidate transformations for searching and evaluation . We denote the active transformation and set of transformations after an iteration of the interpreting process as τ (cid:48) and T (cid:48) respectively to indicate they have been updated . Transformations act on the relational representations , and may include the addition or removal of features , or the addition , removal or relabelling of relations . New transformations are generated based on what changes could improve the performance of associations in A according to the same success measure used to select candidate mappings , q −→ . Transformations are generated , evaluated and stored , with the most promising transformation at each point in time becoming the active transformation τ that is applied to the objects . This characterisation of analogical mapping as being transformation - dependent echoes the deﬁnition of similarity as “representational distortion” ( Hahn et al . , 2003 ; Hodgetts et al . , 2009 ) . 10 i −→ : = r ( o 1 ) , r ( o 2 ) , A , τ , T → T (cid:48) , τ (cid:48) , τ (cid:48) ( r ( o 1 ) ) , τ (cid:48) ( r ( o 2 ) ) ( 3 ) Associations can be evaluated by q −→ under any transformation , allowing the system to iteratively improve its candidate associations based on the available transformations and its candidate transformations based on the available associations . A candidate association may specify unmappable feature pairs ( those not connected within their respective objects under the current transformation ) . These invalid shared associations are ignored by q −→ . Mapping and interpreting both operate incrementally , with each updated set of candi - date associations A being the basis for an updated τ , which is then in turn the basis for an updated A and so on . This iterative interaction implements the fundamental principles of the IDM framework . Below we describe the three processes in more detail . 3 . 2 Perception The perception process in the Idiom model , p −→ , takes low - level sensory representations of a form appropriate for the domain in which it is implemented and constructs from them the features and relationships used in mapping . To construct relational representations p −→ extracts features from the sensory representations , clusters those features into concepts , and then constructs relationships between features based on their sensory and conceptual contexts . Details of the perception processes are particularly aﬀected by the choice of an implementation domain , and in this model speciﬁcation we adopt an abstract framing to maintain broad applicability . The ﬁve processes that make up perception , Figure 3 , are : • Feature detection identiﬁes and describes elements of the sensory representation which become the features of the object on which analogies will be based . Feature deﬁnitions are domain speciﬁc . • Concept recognition classiﬁes features into known conceptual categories based on a domain speciﬁc similarity function . • Concept generation constructs new conceptual categories from the features that were not able to be classiﬁed , which are then added to the set of known concepts . 11 • Featural relationship construction describes relationships between features based on the properties of those features . • Conceptual relationship construction describes relations between features based on the concepts that they instantiate , for example between two features that are in - stances of similar concepts . o 1 , o 2 r ( o 1 ) , r ( o 2 ) FeatureDetection ConceptRecognition ConceptGeneration unrecognised features Concepts conceptual representation relational representation known concepts featural representation Conceptual Relation Construction Featural Relation Construction Figure 3 : The structure of the perception process of our model . The sensory representa - tions are converted into featural , conceptual , and relational representations . Feature detection acts on the sensory representations o 1 and o 2 to extract a set of features . A “feature” is a notion speciﬁc to the domain in which Idiom is implemented , and may be any element of the object , either a discrete component or a description of some aspect of the whole . For example , in a musical domain a feature might be a phrase of music , while in a visual domain a feature might be a shape . Each feature has a description embodying its properties , which is represented as a list of attribute / value pairs . The model requires that it be possible to calculate the similarity between two features for the purposes of categorisation , but otherwise makes no assumptions about their nature . The remainder of the perception process concerns the construction of the relationships between these features . Concept recognition is one of the two processes involved in clustering the feature representations into conceptual groups for the purpose of inferring relationships between them . Concept recognition attempts to place the features extracted by feature detection into known categories , each a region in the space of possible features which we refer to as a “concept” . The concept recognition process determines which of the features observed in the objects belong to existing concepts . The set of known concepts persists over 12 multiple iterations of the Idiom association - construction process . Features not matching an existing concept are passed to the concept generation process . Concept generation is the second of the processes involved in classifying features by their conceptual categories . Those features which were not classiﬁable within the current conceptual hierarchy are placed into new concepts as needed . After both concept recogni - tion and concept generation have operated on the feature representations all features will have been tagged as members of at least one conceptual category . The conceptual and featural representations are then used in the construction of relational representations . Featural relationship construction produces relationships between features based on their descriptions . A relationship consists of an ordered pair of features and a relation that connects them . This relation expresses some property of the second feature in the pair , the ‘destination feature’ , in relation to the ﬁrst feature , the ‘originating feature’ . Relations are expressed relative to the originating feature to increase their generality for mapping . For example , “the destination feature is above the originating feature” , “the destination feature is twice the size of the originating feature” , or “the destination feature is a component of the originating feature” . Conceptual relationship construction produces relationships between features based on the conceptual categories into which they have been placed . These express relations between the concepts two features instantiate , for example “the originating feature instan - tiates the same concept as the destination feature” , “the originating feature instantiates a similar concept as the destination feature” , or “a concept instantiated by the originating feature’s is a parent concept of one instantiated by the destination feature” . The resulting relational representations , consisting of a set of features and a set of relationships between then , are then searched based on Structure Mapping Theory ( Gen - tner , 1983 ) : features in the source and target that share a pattern of relationships can become part of an association . Idiom performs this search whilst iteratively reinterpreting the object representations to enable otherwise - impossible associations . 13 3 . 3 Mapping The mapping process in the Idiom model , m −→ , searches the representations provided by p −→ in the context of the transformations applied by i −→ . Mapping and interpreting itera - tively search and transform the relational representations until a suitable association is constructed . An individual iteration of the mapping process produces an updated set of candidate associations on which the next iteration of the interpreting process can oper - ate . Mapping operates on the principles of Structure Mapping ( Gentner , 1983 ) , searching for sets of relationships between features within the individual objects that form shared patterns between the objects . For example , two objects could be associated by a pattern of features connected by a series of “immediately above” relationships . The two processes that make up m −→ , Figure 4 , are : • Association search generates new candidate associations based on shared relation - ships between the transformed source and target object representations . While there may not be a suﬃcient pattern of such relationships in the untransformed representations , the transformation acts to facilitate better associations . • Association evaluation evaluates the patterns of relationships found by association search using the quality measure q −→ . Each candidate receives an evaluation via that measure , with evaluations over a threshold resulting in an association being deemed suitable . If a suitable association is found the process returns a solution , completing this run of the Idiom model . If no suitable mapping is found the set of current candidates is returned for use by the interpreting process . a win ( conditional on q ) AssociationSearch AssociationEvaluation CandidateAssociations current candidate associations new ( ranked ) candidate associations new ( unranked ) candidate associations τ ( r ( o 1 ) ) , τ ( r ( o 2 ) ) Figure 4 : The structure of the mapping process of our model . The two transformed object representations are searched for associations that ﬁt the evaluation measure . 14 Association search discovers associations – sets of pairs of features which can be considered analogous – by searching for shared relationships in the transformed represen - tations . This search applies not to the representations produced by perception , r ( o 1 ) & r ( o 2 ) , but to their reinterpretations under τ . In the very ﬁrst iteration of the mapping process τ defaults to a null transformation in which the objects are unchanged , meaning that initially r ( o 1 ) ⇔ τ ( r ( o 1 ) ) & r ( o 2 ) ⇔ τ ( r ( o 2 ) ) . Association evaluation determines the value of each candidate association as measured by q −→ . While the speciﬁc measure is domain speciﬁc , Structure Mapping requires that relations must match exactly for them to be considered a valid component of the mapping . q −→ can evaluate mappings in a variety of ways , including measures based on the size ( in features ) of the mapped subset or measures based on the domain - dependent meaning of the features or relationships within that set . Associations which map a pair of features within the source to a pair of features within the target must map at least one relation between them . For example assume a group of features within one object are all the same size and all instantiate the same concept . Within the second object is a group of features that all share the same size , but instantiate diﬀerent concepts . The association evaluation process would ﬁnd an association between these two groups to be valid based on the shared size relationships alone . This is the advantage of reducing complex relations to a set of simple relations . The mapping process updates the set of candidates . If a candidate association a scores suﬃciently highly at q −→ then the Idiom model terminates , returning a and τ . Otherwise i −→ is executed and the cycle of searching and transforming continues . 3 . 4 Interpreting The interpreting process in the Idiom model , i −→ , uses the current set of association candi - dates produced by the last iteration of m −→ to determine a new active transformation from among the candidates . To do this i −→ constructs , evaluates and applies transformations . The three processes that make up i −→ , Figure 5 , are : • Transformation search constructs new transformations by searching the current set 15 of candidate associations for what could make them successful . • Transformation evaluation considers all transformations in the current set of candi - date transformations against the candidate associations to determine which should be the active transformation τ . • Transformation application applies the newly updated active transformation τ (cid:48) to the relational representations of the source and target objects , reinterpreting them and aﬀecting the next iteration of the mapping process . τ , r ( o 1 ) , r ( o 2 ) TransformationSearch TransformationEvaluation CandidateAssociations Candidate Transformations current candidate transformations new ( ranked ) candidate transformations new ( unranked ) candidate transformations TransformationApplication τ´ τ´ ( r ( o 1 ) ) , τ´ ( r ( o 2 ) ) Figure 5 : The structure of the interpreting process of the Idiom model . Transformations are generated from candidate associations . One is selected as the active transformation τ and applied to the object representations . Transformation search is the process by which new transformations used in interpret - ing are constructed . A generate - and - test approach is used to create transformations that would make associations in the current candidate set more successful at mapping between the two objects . Transformations are applied to the representations being searched by m −→ . Each transformation must be general enough to be applied to any possible relational rep - resentation . Possibilities include the deletion , addition , editing , consolidation or splitting of both features and relations . A transformation may aﬀect the relational representations by editing and re - running the Perception process to produce altered representations . As the purpose of interpreting is to render non - matching relationships matching , the simplest transformation ( s ) involve the editing of relations . An example of such relabelling would be a “spatial reversal” transformation , under which all relationships involving “in front of” were treated as equivalent to “behind” , and so on . This transformation would parallel the “opposites” slippage in Copycat ( Hofstadter and Mitchell , 1992 ) that enabled 16 analogies such as “ABC : ABD is like XYZ : WYZ” . An alternative approach to deﬁning transformations is the adjacent node combination of the VAE model of analogical reason - ing ( Sowa and Majumdar , 2003 ) . Processes by which transformations can be constructed include : 1 ) attempts to improve current highly - performing associations according to q −→ , or 2 ) recalling transformations that have been successful on previous analogy problems . Transformation evaluation produces an evaluation of all the candidate transforma - tions in T by applying them to the candidate associations in A and measuring their quality with q −→ . Given the computational complexity of this a sampling approach is likely warranted , involving selecting a subset of “test” candidate associations from A for each candidate transformation in T . This selection could be weighted by q −→ ( a ) . Once an eval - uation of the quality of each transformation in T is known one candidate becomes τ and inﬂuences mapping . Transformation application applies the current τ ( either new or retained from the previous increment ) to the representations r ( o 1 ) & r ( o 2 ) . After the new transformation is applied this increment of the interpreting process completes and mapping continues . 4 Constructing associations with Idiom We have developed an implementation of the Idiom model that demonstrates its feasibility and serves as a proof - of - concept of the IDM framework . We present selected results from the implementation showing its capacity for interpreting and mapping . 4 . 1 Implementing Idiom The implementation of Idiom described in this paper is in the domain of visual analogy , constructing relationships between images and drawings based on their spatial properties . The Idiom model is domain agnostic , but this implementation serves as a proof - of - concept of both Idiom and the IDM framework from which it is derived . Associations constructed by this implementation will be based on perceptual relationships , such as geometrical or spatial relationships between shapes . This system can perform mapping on shapes 17 similar to those of CogSketch ( Lovett et al . , 2009b , a ; Forbus et al . , 2011 ) , but our focus is on representational transformation and the integration of representation and mapping , rather than on relational abstraction . Visual associations are an important component of many design processes in many design domains . The implementation takes visual representations of objects in the form of 2D vector drawings , extracts features from them , constructs relationships between those features and then makes analogies using those relationships . The deﬁnition of a “feature” in this implementation is a minimal closed shape , and features are described using the outline of these shapes , not their weight , colours or other styling . These shape features are cate - gorised into groups based on the similarity of their outlines using a centroid - radii method for shape description proposed by Tan et al . ( 2003 ) . The shape - based representations are analysed for a variety of featural relationships , including relative scale , orientation , position and the sharing of edges and vertices . Conceptual relationships include concep - tual similarity and conceptual identity . Featural relationships are abstracted into discrete categories like “slightly smaller” or “10 ◦ diﬀerence in orientation” . Mapping is computationally modelled as edge - labelled subgraph isomorphism search , with each feature being a node and each relation an edge . Exact maximum subgraph isomorphism search is computationally intractable , ( Garey and Johnson , 1979 ; Kann , 1992 ) but here approximate solutions are acceptable . We adopt a genetic algorithm - based subgraph isomorphism approximation based on Wang and Zhou ( 1997 ) and Cross et al . ( 1996 ) , in which the genotype is a set of node : node connections between object graphs and the ﬁtness function is based on the number of connections that are valid ( our quality measure ) . Transformations applied to the object graphs change the ﬁtness landscape by aﬀecting the validity of these mappings . A population of candidate associations between the source and target are created randomly and then evolved , with the quality measure q −→ acting as the ﬁtness and the current τ applying to all evaluations . The quality measure is based on the size of the largest contiguous subgraph validly mapped , i . e . the number of features connected by a pattern of shared relationships in the analogy . Mapping size is only an approximation of analogical quality , but its simplicity permits us to focus on 18 interpretation . Transformations in this implementation select one or more pairs of relations and treat them as interchangeable for the purpose of mapping . This enables interpreting of the kind “treat X in the source object as if it were the same as Y in the target object” . This gives more interpretive freedom than the approach used in Galatea ( Davies and Goel , 2001 ; Davies et al . , 2003 ; Davies and Goel , 2003 ) , which can only draw from a set of pre - speciﬁed transformations . Selection of transformations is based on the question “what transformation would improve the mappability of these two objects the most ? ” This relies on underlying syntactic commonality rather than any semantic content . When two patterns of relationship share the same structure , but not the same relationships , a transformation can be constructed to treat them as mappable . For example , an object containing a line of shapes of increasing sizes could be associated with another object containing a line of shapes of increasing orientations . The approach is related to the corpus - based label substitution in EMMA ( Ramscar and Yarlett , 2003 ) , where similarity along the dimensions that best describe a large dataset of examples is used to substitute contextually similar word . Idiom , by contrast , seeks out transformations that can most improve the mappability of the source and target object . The Idiom approach expands the space of possible transformations compared to pre - vious systems , allowing a greater diversity of mappings . It does so at the cost of expli - cability : transformations are justiﬁed based on their eﬀect ( enabling a more complete mapping ) rather than their meaning ( the relationship between the concepts so trans - formed ) . Section 5 compares Idiom’s capabilities with other analogy systems . 4 . 2 Example analogies in visual art and ornamental design A variety of vector representations of visual art objects , ornamental design motifs and architectural objects were drawn from images , taking care to select objects which could be meaningfully represented by lines and shapes . Several of the resulting associations are presented here , along with descriptions of how they were produced . We demonstrate that without IDM a structure - mapping based system could only have constructed these 19 analogies with task - speciﬁc representations . 4 . 2 . 1 Example 1 Figure 6 shows the ﬁrst example of the output of the computational implementation of Idiom . The ﬁgure depicts the vector representations of Object 1 ( o 1 ) , a Hittite sun symbol , and Object 2 ( o 2 ) , a French empire motif , both from Humbert ( 1970 ) . The thick solid lines - both grey and black - indicate the lines that make up the object representation itself , with the black lines indicating object features that are part of the association . The thin solid lines connecting features in Object 1 with features in Object 2 indicate the pairs of features that have been mapped by the successful association a win . The thick black dashed lines joining features within each object indicate the relationships between those features that form the basis for the mapped relationship . Each of these connections is labelled with the relationship it represents . The grey box at the bottom of the ﬁgure contains the current value for the active transformation τ . Object 1 Object 2 τ : ~ 50° Δrot = ~ 20° Δrot ~ 20° Δrot ~ 50° Δrot ~ 50° Δrot ~ 50° Δrot Figure 6 : An association produced by Idiom which maps adjacent points of the seven - pointed star in Object 1 to adjacent petals of the top ﬂoret in Object 2 , based on inter - preting the “50 ◦ orientation diﬀerence” relationships between the star - points to be like the “20 ◦ orientation diﬀerence” relationships between the petals . In Fig . 6 , the seven points of the star in o 1 are mapped to the seven petals of one ﬂoret in o 1 , with adjacent points being mapped to adjacent petals . Each of the adjacent pairs of points in Object 1 are connected by an “approximately 50 ◦ diﬀerence in orientation” relationship ( abbreviated using ∆ rot in the diagrams ) , while each of the adjacent pairs of petals in Object 2 are connected by an “approximately 20 ◦ diﬀerence in orientation” 20 relationship . The association was made in the presence of a transformation , τ , equating these two relationships . Idiom is making the analogy between the star and the ﬂoret in the context of treating those two relationships as alike . Idiom possesses no knowledge about the relative similarity or diﬀerence of the two orientation relationships , and they could just as easily have been one orientation relationship and one of scale , or any other relational type possessed by Idiom . The transformation that enables this mapping was selected on the syntactic similarity of the representations of the two objects , which each possessed a structurally similar pattern of homogeneously labelled edges . Naive structure - mapping would have failed to construct this association without additional knowledge . Idiom’s process to construct the association seen in Figure 6 began with the system attempting to map between the untransformed representations . m −→ creates ( initially by chance ) a candidate association , a 1 , that maps at least one pair of adjacent star - points to a pair of adjacent petals . a 1 is not of any value by the quality measure q −→ as there is no suitable transformation available to equate the two diﬀerent orientation labels . i −→ then works backwards to construct a transformation that would increase the value of a 1 , and one of the candidate transformations thus constructed is the one shown in Figure 6 , which we will call t 1 . As features can be mapped using t 1 that cannot be mapped without it , it outperforms other available transformations – including the default null transformation in which the representations are unchanged – and becomes the active transformation τ . This transforms the representations to treat the 20 ◦ and 50 ◦ orientation relations as alike . m −→ then adopts a search trajectory to maximises the number of associated nodes given τ = t 1 . This produces an association like the one in Figure 6 . Theoretically , if the objects were represented in precisely the right way , the association depicted in Figure 6 could be constructed without the use of representational transforma - tions . A relationship like “rotationally adjacent” , or “sharing a common axis of rotation” could produce mappable representations of Objects 1 and 2 for which no transformational process was needed . Alternatively , relationships between relationships , such as those used in some Structure Mapping Theory based systems ( Falkenhainer et al . , 1989 ; Forbus et al . , 1995 ) , could be used to describe the orientation diﬀerences in a more general way , and 21 these second - order relationships would be mappable . However these approaches require signiﬁcant prior knowledge on behalf of the experimenters to construct representations of the two objects that feature compatible relationships . The Idiom method discovers ap - propriate transformations from regularity in the structure of the object representations , rather than from compatible relational labels . Idiom can produce diﬀerent results when run repeatedly with the same stimuli . Figure 7 shows the result of another run involving the same two objects . In this case six of the seven points of the star in Object 1 are mapped to the two outer - most petals of each ﬂoret in Object 2 . The diﬀerence in orientation between every third star - point ( 150 ◦ ) is associated with the diﬀerence in orientation across each ﬂoret and between each ﬂoret , which are both 120 ◦ . The analogy - making system has interpreted these two diﬀerent relationships as being alike , transforming diﬀerent parts of the object representations to the ﬁrst example ( Figure 6 ) and producing a diﬀerent analogy . Object 1 Object 2 τ : ~ 150° Δrot = ~ 120° Δrot ~ 150° Δrot ~ 120° Δrot Figure 7 : A diﬀerent association between the same two objects , in which every third point in the seven - pointed star in Object 1 is mapped to the set of outermost petals on the three ﬂorets in Object 2 . These examples demonstrate that the Idiom model can produce analogies between simple visual objects . The computational implementation of this model has produced multiple varied outputs depicting associations that are diﬀerent in both appearance and substance . It does this by “forcing” mappings between semantically diﬀerent relationships based on the underlying syntactic similarities of the objects being mapped , such as the patterns of 120 ◦ and 150 ◦ relationships transformed in Example 2 and the similar pattern 22 transformed in Example 1 . 4 . 2 . 2 Example 2 Among the vector representations of art and design objects provided to the implemen - tation were a line - art version of M . C . Escher’s 1938 painting “Sky and Water I” and a nineteenth century wrought ironwork pattern intended for use in a gate ( Cottingham ( 1824 ) via Cliﬀ ( 1998 ) ) . An association between these two objects can be seen in Figure 8 , where the four rows of ﬁsh which make up the bottom half of Object 3 have been mapped to the four rows of quadrilateral - like shapes in the middle of Object 4 . The features of each row of ﬁsh belong to their own conceptual category , as the ﬁsh become progressively more abstract towards the centre of the painting , resulting in a ”similar concept” relationship existing between adjacent rows . The curved bars which make up the ironwork pattern in Object 4 create a similar pattern , with the gaps between the bars becoming slightly smaller with each successive row . The Idiom implementation uses a transformation that equates these two relationships and maps between the ﬁsh and gaps . τ : similar concept = slightly smaller similar concept slightly smaller Object 3 Object 4 Figure 8 : An association produced using Idiom which maps the triangular pattern of increasingly more abstract ﬁsh in Object 3 to the triangular pattern of increasingly smaller gaps in the gate in Object 4 , based on interpreting the ‘similar concept’ relationship between the ﬁsh to be like the ‘slightly smaller’ relationship between the gaps . Figure 8 shows that Idiom can construct relationships between structurally similar representations even when the relationships involved are disparate and the objects being represented are in diﬀerent domains . Not only could naive structure mapping not have constructed this association without additional knowledge , but it is diﬃcult to concep - 23 tualise a representation in which the relationships of similarity and scale are expressed identically . The two relationships are objectively diﬀerent , but in the context of this asso - ciation it is of potential beneﬁt to explore what the world would look like if they weren’t . Using IDM , our system is capable of mapping a pattern of typological relationships be - tween ﬁgures in a painting to a pattern of topological relationships between ﬁgures in an ironwork gate . This result demonstrates the possibility of inter - domain association using Idiom given symbolic representations of both objects . 5 Comparing re - representation in analogy models In addition to serving as a basis for developing models of computational analogy - making , the IDM framework can serve as a lens through which the interpreting capabilities of analogy - making systems can be described . The constituent processes of models of analogy can themselves be analogously mapped to IDM’s perception , interpreting and mapping . An analogy - making model can be described using IDM so long as it exhibits a mechanism by which previously unmappable object representations can be transformed so as to make them mappable . By re - framing other systems through this lens we can describe commonalities in the way they transform representations despite the diversity of methods by which they do so . The IDM framework asks six questions of an analogy - making model ( see Section 2 ) , and we follow this line of questioning for three extant models and the Idiom model described in this paper . The three models used for comparison come from the three paradigms of computa - tional analogy - making models in French ( 2002 ) : the symbolic , the connectionist and the hybrid . The canonical examples of each ( according to French ) are the Structure Map - ping Engine ( SME ) ( Falkenhainer et al . , 1986 , 1989 ) , Analogical Mapping by Constraint Satisfaction ( ACME ) ( Holyoak and Thagard , 1989 ; Spellman and Holyoak , 1992 ) , and Copycat ( Hofstadter , 1984 ; Hofstadter and Mitchell , 1992 ) . However , the SME is a model of analogical mapping only and does not incorporate any representation construction or transformation . We compare an extension of it , Incremental Structure Mapping ( I - SME ) 24 ( Forbus et al . , 1994 ) which incorporates a form of reinterpretation into the basic SME model . The incremental nature of I - SME addresses the problem of cognitive plausibility when problem - solvers are exposed to knowledge about potential analogues sequentially , with new knowledge arriving after the mapping process has begun . I - SME adds new knowledge to object representations during mapping , and decides in each case whether to extend the existing mapping or construct a new and diﬀerent one . We compare I - SME , ACME , Copycat and our Idiom implementation through the lens of the IDM framework . I - SME is a general theory of analogical mapping , and thus can map between any symbolic representation , but the best - known implementation of it , the Minimal Analog - ical Reasoning System ( MARS ) solves engineering problems given a worked example of an analogous problem . This implementation of I - SME combines basic knowledge about objects , incremental mapping and an equation solver to solve problems . It incrementally extends its representations by generating candidate inferences , evaluating them , and in - corporating the successful ones into its mapping . ACME maps between symbolic representations of real - world concepts , and is able to construct analogies like “Socrates is a midwife of ideas” . ACME operates on graph representations of features and relationships , and constructs mappings by spreading ac - tivation through that graph , with simultaneously active concepts being analogous . This activation is guided by a set of constraints governing what kinds of properties should be mapped . ACME adds excitatory and inhibitory connections between features to con - strain mappings between those features to be similar in structure , similar in meaning , and relevant to the current context . Copycat ﬁnds analogical connections within the domain of letter strings , solving pro - portional analogies of the form “ abc → abd , ijk → ? ” . Copycat has knowledge of concepts relevant to the domain – such as “group of letters” , “identical letters” and “successive letters” – in the form of a connectionist semantic network . Copycat builds representa - tions of letter strings out of these concepts using a parallel representation construction and mapping search process . Copycat’s search is aﬀected by both top - down pressures from the conceptual network and bottom - up pressures from the letter strings . 25 Our implementation of the Idiom model ( see Section 4 . 1 ) ﬁnds analogous patterns of shapes within vector images drawn from ornamental design , architecture and art . Images represented relationally are iteratively searched for mappings by a genetic algorithm and transformed by an interpreting process driven by reinforcement learning . We demonstrate that IDM framework is suﬃciently general as to compare the mechanisms of each system . The ﬁrst question posed in the IDM framework is “What bounds the space of valid associations constructible by mapping ? ” , Table 1 . The mapping search spaces used by I - SME , ACME , Copycat and Idiom all share a commonality : they map only between features that are contextually identical . They diﬀer in their representations , search strategies , and deﬁnitions of “context” , but each will map patterns of matching features . Copycat , I - SME and Idiom follow structure - mapping and map between relationships , not features . ACME maps features but its process for doing so can be thought of as con - textually equating the relationships between them as identicality , and thus can also be thought of as mapping structures of relationships . Deﬁning the space of valid associations I - SME ACME Copycat Idiom Features can be as - sociated when they share relations . Concepts within the graph are associated when simultaneously active . Strings of letters can be associated when they share representational structure . Features can be associated between shapes when there is a shared pattern of relationships . Table 1 : What bounds the space of valid associations constructible by mapping ? The second question posed in the IDM framework is “What causes an association to be selected by mapping ? ” , Table 2 . The four models can be divided into two categories : those that implement transfer that those that do not . The models that include a transfer component , I - SME and Copycat , terminate when they can successfully transfer knowledge from the source to the target and solve the provided problem . ACME terminates based on local maxima , by reaching a state where no further mapping can occur . Idiom terminates based on a speciﬁed suitability criterion that is speciﬁed according to the problem domain . The Idiom implementation presented in this paper uses a measure of quality derived from the association structure ( the mapping’s size in nodes ) . 26 Selecting candidate associations I - SME ACME Copycat Idiom Successful asso - ciations transfer knowledge that fulﬁlls a goal . An association is selected when an energy minimum is reached . An association is selected when a so - lution to to the proportional prob - lem can be gener - ated . Associations are selected when the quality measure reaches a pre - deﬁned threshold . Table 2 : What causes an association to be selected by mapping ? The third question posed in the IDM framework is “What bounds the space of valid transformations constructible by interpreting ? ” , Table 3 . Three of the four systems , ACME , Copycat and Idiom , implement transformation as contextual equivalency be - tween relationships . They diﬀer , however , in how and why these transformations are generated . In ACME and Copycat relational equivalencies are enabled by pre - speciﬁed connections between concepts , although in both this aﬀects representations indirectly . In ACME this enabling connection is in the form of constraints favouring certain mappings over others , and in Copycat certain concepts are “slippage” - capable in speciﬁed circum - stances . The connectionist nature of ACME means that these equivalencies are speciﬁed in a distributed but deterministic fashion , while the hybrid connectionist / symbolic nature of Copycat means that while equivalencies are symbolic but only aﬀect representations through distributed processes . In Idiom the interpreting process is symbolic and stochas - tic as in Copycat , but all pairwise equivalencies are possible as in ACME . Deﬁning the space of possible transformations I - SME ACME Copycat Idiom Candidate infer - ences are con - structed that inﬂuence the next mapping increment . Constraints apply pressure from con - textually related nodes to force disparate nodes to map . Equates the mean - ing of disparate concepts , aﬀecting the trajectory of representation construction . Theoretically any . Implemented as equivalency be - tween pairs of edge - labels in prototype . Table 3 : What bounds the space of valid transformations constructible by interpreting ? I - SME diﬀers from the other three systems in that transformation does not take the form of contextual equivalency between features of the object representations . I - SME 27 can receive new knowledge between mapping steps either from an external source like the experimenter or through its own deduction or inference . These transformations do not contextually treat objectively diﬀerent properties as contextually similar , but instead rep - resent an evolving objective knowledge base . For example , I - SME could be implemented with a set of knowledge about cats ( that they are kept as pets by humans , that they have fur , etc ) and use that to add knowledge to an object once it had established that the object belonged to the class “cat” . Transforming between levels of representational abstraction like this is not the same as contextual equivalency between objects – a cat is not a pet only for the purposes of this mapping , it is always both a pet and a cat . The fourth question posed in the IDM framework is “What causes a transformation to be selected by the interpreting process ? ” , Table 4 . Two of the four analogy - making models , I - SME and Idiom , select transformations based on how they improve the associ - ations they act on , while the other two , ACME and Copycat , use contextual inﬂuence . I - SME’s selected transformations ( the inferred attributes that extend its representations ) improve candidate associations based on progress towards the goal state , while Idiom’s selected transformations improve candidate associations based on the measure of associa - tion quality . Both I - SME and Idiom use syntactic properties of the object representations to motivate transformations : the transformations that are generated make candidate as - sociations stronger according to each system’s goal . As Idiom can construct any pairwise equivalency between relationships this means it is driven by structural similarity within object relationships – shared patterns of diﬀerent relationships that can be equated by transformations . I - SME , by contrast , is limited in its transformations by what it can de - rive from existing knowledge using rules and inference , and cannot contextually change the meaning of its representations , only add to them . ACME and Copycat select their transformations using the eﬀect of the current task context . In ACME every node exerts inﬂuence – however small – on every other node’s activation and thusly what it is analogous to . In Copycat representational elements beget more like them , but there is also inﬂuence exerted by active concepts , and active concepts spread their activation to similar concepts in the same way as ACME . Copycat’s 28 Selecting candidate transformations I - SME ACME Copycat Idiom Successful trans - formations bring the agent closer to its goal states . Conceptual acti - vation spreading along constrained relations de - termines the transformations produced . Pressures from active representa - tions ( bottom - up ) and active con - cepts ( top - down ) aﬀect what trans - formations occur . Selected transfor - mations improve the quality mea - sure q −→ . In the prototype imple - mentation this means they enable larger associations . Table 4 : What causes a transformation to be selected by the interpreting process ? transformations ( referred to as “conceptual slippage” ) occur only in the right combination of conceptual activations , in contrast to ACME’s transformations which occur as the sole , iterative mechanism by which analogies are constructed . The ﬁfth question posed in the IDM framework is “How do candidate transforma - tions selected by interpreting aﬀect mapping ? ” , Table 5 . While the cause and scope of their transformations are very diﬀerent , I - SME and Idiom both use transformations that directly change the representations being searched . This aﬀects the search trajectory by re - deﬁning the problem space – what was once mappable may now not be , and vice versa . Eﬀects of candidate transformations on mapping I - SME ACME Copycat Idiom Mapping search applies to trans - formed objects directly . Mapping and In - terpreting are not separate – associ - ating between two features and trans - forming them to be equivalent is the same operation . Transforms the meaning of nodes in its conceptual network , which aﬀect representa - tion construction and thus mapping search . Mapping search applies to trans - formed objects directly . Table 5 : How do candidate transformations selected by interpreting aﬀect mapping ? ACME and Copycat , while they both use spreading activation among conceptual networks to trigger their transformations , have very diﬀerent processes for how those transformations aﬀect mapping . In ACME the network of nodes and relationships be - tween them is the only representational structure present , and transforming the meanings of those nodes ( expressed as the context of simultaneous activations ) is both the mapping 29 process and the interpreting one . This equivalence between transformation and mapping reﬂects the core of the connectionist approach : “meaning” exists only in context , and thus both transformations of meaning and solutions to problems are embedded in distributed structures . While this may seem to violate a comparison of this system with the others under the IDM framework , note that it is only the last two questions which are diﬃcult to answer in ACME , and their answering still proves informative . The sixth and ﬁnal question posed in the IDM framework is “How do candidate as - sociations selected by mapping aﬀect interpreting ? ” , Table 6 . Each of the four systems provides a very diﬀerent answer to this question . In I - SME the rules of symbolic logic apply – transformations can only occur when there is a clear logical precedent . In ACME , again , the question does not have a clear meaning , as transformations and association candidates are both expressed as conceptual activation patterns . In Copycat there are indirect eﬀects on transformation brought about by the current candidate associations : existing representational fragments aﬀect conceptual activation , and certain patterns of conceptual activation trigger transformation . In Idiom the relationship is more direct : candidate transformations are evaluated based on how they improve candidate associa - tions , meaning that the evaluation of the former is contingent on the state of the latter . Eﬀects of candidate associations on interpreting I - SME ACME Copycat Idiom Candidate associ - ations determine which rules can apply . Mapping and In - terpreting are not separate – associ - ating between two features and trans - forming them to be equivalent is the same operation . Candidate associa - tions inﬂuence con - ceptual activation and and thus can bring about trans - formations . Candidate asso - ciations are used to evaluate trans - formations , thus aﬀecting which one ( s ) apply . Table 6 : How do candidate associations selected by mapping aﬀect interpreting ? This comparison illustrates that the IDM framework serves as a useful lens through which to view analogy - making models and compare the ways by which their constituent processes interact . IDM is an eﬀective comparative tool for models of analogy that have historically been categorised as divergent along the “symbolic” – “hybrid” – “connection - 30 ist” axis . The comparison also shows that Idiom occupies a niche distinct from previous models of analogy - making : it combines the structure mapping approach of I - SME with the contextual re - representation of Copycat while retaining the ﬂexibility of ACME . 6 Conclusion The way representations change during mapping is a critical component of computa - tional models of analogy . We have developed IDM , a general framework for describing representational transformation within analogy - making . IDM focusses on the way iter - ative reinterpreting occurs in parallel with the mapping process , and how this process mutually aﬀects and is aﬀected by mapping . This general framework has the capacity to investigate how other models of analogy - making have incorporated these interactions . By representing other analogy - making models in terms of these mechanisms we are able to elucidate the similarities and diﬀerences in the way their object representations change during mapping . We argue that this framework is particularly apt for analogy in computa - tional design , as the situated , constructive and emergent nature of design representations ( Gero , 1998 ) requires an approach that supports representational ﬂuidity . IDM provides a unifying descriptive architecture for comparing the processes used by diverse computational analogy - making models . Reviews of computational analogy - making spanning the last 25 years ( Hall , 1989 ; French , 2002 ; Gentner and Forbus , 2011 ) have identiﬁed a number of typicalities in extant models . These include typical processes in models of analogy ( including retrieval , re - representation , mapping , transfer , and eval - uation ) , typical components of the representations used in analogy ( such as labelled relational structures ) and typologies of model architectures ( connectionist , symbolic and hybrid ) . The IDM framework introduces an additional , general , way to describe similar - ities among analogy - making models : their interpretive capacity and its catalyst ( s ) . The IDM framework then poses questions about the representational processes encapsulated in the model and their interactions with mapping . The answers to these questions provide new insight into how models previously thought of as theoretically incompatible – such 31 as connectionist ACME and symbolic I - SME – are alike . We have developed a computational model of the mapping component of analogy - making , Idiom , that instantiates the IDM framework . Idiom is speciﬁcally designed around the iterative and parallel interactions between re - representation and the mapping process , and serves as a proof - of - concept of the IDM framework . Idiom , and the prototyp - ical implementation of it in the domain of ornamental design , demonstrate that a focus on the changes in representation that occur during mapping can lead to an expanded capacity for mapping without requiring extensive or specially - built representations . Id - iom leverages structural similarities that underly object representations to transform the relational structures and enable mapping . Two objects that may not share any relations may share a pattern of how those relations occur between their features , and it is from this syntactic level of commonality that Idiom derives its transformations . We evaluate our model by its generative capability : it can construct associations which previous structure - mapping systems could not construct from the same representations . This capability stems from the parallel interactive interpreting and mapping of the IDM framework . The model is able to construct a variety of associations from the same pair of objects by using diﬀerent transformations , and able to construct associations between relationships regardless of their similarity , permitting cross - domain analogy . We make no claims as to the quality of the associations produced ( beyond the internal evaluation by Idiom of the number of features they can connect ) , nor of their utility for a particular task : Idiom is a model only of the mapping component of analogy - making and produces associations in the absence of transfer . Idiom and IDM framework provide capabilities that structure - mapping systems did not previously possess . Their extension to a full model of analogy including transfer and evaluation is an area of active research . To illustrate the capabilities of both the IDM framework and Idiom , we compare our implementation to three analogy - making models , I - SME , ACME and Copycat . Symbolic models like I - SME typically utilise logical inference as the mechanism for representa - tional change when transformation during mapping is possible at all . Idiom’s approach oﬀers more ﬂexibility than I - SME approach in both the construction and selection of 32 transformations : new transformations can be constructed from syntactical regularities in object representations , and the iterative stochastic transformation evaluation process is less constrained than inference ( at least in the absence of new external knowledge ) . The approaches to transformation used by ACME and Copycat are revealed by the IDM reframing as diametrically opposed : While both model transformations as contextual equivalency , Copycat has few potential transformations ( “slippages” ) while ACME al - lows any pair of features to transform . Conversely , Copycat’s slippages occur only after speciﬁc representational and conceptual states have been reached , while ACME’s transfor - mations occur constantly as a result of aggregate pressure from the entire representational structure . Idiom , by comparison , permits the same space of possible transformations as ACME ( as in theory any two relations can be equated ) while oﬀering guidance in selecting transformations as in Copycat ( as transformations are only constructed in the context of speciﬁc , favourable representational states ) . This shows the strength of the iterative and parallel approach to interpreting and mapping : everything can in theory be mapped , but local conditions guide individual decisions about which transformations to apply . The second strength of the IDM framework is in the centrality of the interactions between mapping and interpreting . Interpreting in Idiom aﬀects mapping by transform - ing the object representations directly , changing the trajectory of the search as in I - SME and ACME . Mapping in Idiom aﬀects interpreting by driving what transformations are constructed – the interpreting process explores how to improve extant candidate associa - tions in the same way that in Copycat conceptual slippage occurs when context suggests it would be useful . Unlike Copycat Idiom is domain - general , and its transformations are syntactically derived , obviating the need to specify a domain - and context - speciﬁc set of potential slippages . The IDM approach allows mapping and interpreting to iteratively inﬂuence each other in a domain - general model of analogy . This comparison demonstrates the descriptive power of the IDM framework and high - lights that representational variation during mapping is central to analogy . Idiom exhibits capabilities previously only observed separately in models of analogy - making – speciﬁ - cally the ability to contextually guide the selection of a representational change and the 33 ability for a large space of possible representational changes to be applied . These charac - teristics , which are made possible by Idiom’s ability to learn new transformations based on the structure rather than content of the objects it is mapping , make Idiom particularly suited to the representationally dynamic domain of analogical reasoning in design . References Barnden , J . A . and Holyoak , K . J . ( 1994 ) . Advances in Connectionist and Neural Com - putation Theory : Analogy , Methaphor , and Reminding . Ablex Publishing Corporation . Bhatta , S . R . and Goel , A . ( 1997 ) . Learning generic mechanisms for innovative strategies in adaptive design . The Journal of the Learning Sciences , 6 ( 4 ) : 367 – 396 . Chalmers , D . J . , French , R . M . , and Hofstadter , D . R . ( 1992 ) . High - level perception , representation , and analogy : A critique of artiﬁcial intelligence methodology . Journal of Experimental & Theoretical Artiﬁcial Intelligence , 4 ( 3 ) : 185 – 211 . Clancey , W . J . ( 1997 ) . Situated cognition : On human knowledge and computer represen - tations . Cambridge University Press . Cliﬀ , S . ( 1998 ) . The English archive of design and decoration . Thames & Hudson ( Lon - don ) . Cottingham , L . N . ( 1824 ) . The Smith and Founder’s Director : Containing a Series of Designs and Patterns for Ornamental Iron and Brass Work . Hullmandel . Cross , A . D . , Wilson , R . C . , and Hancock , E . R . ( 1996 ) . Genetic search for structural matching . In Computer VisionECCV’96 , pages 514 – 525 . Springer . Davies , J . and Goel , A . K . ( 2001 ) . Visual analogy in problem solving . In Proceedings of the 17th international joint conference on Artiﬁcial intelligence - Volume 1 , pages 377 – 382 . Morgan Kaufmann Publishers Inc . Davies , J . and Goel , A . K . ( 2003 ) . Representation issues in visual analogy . In Proc . 25th Annual Conf . Cognitive Science Society . Lawrence Eribaum Associations . 34 Davies , J . , Goel , A . K . , and Nersessian , N . J . ( 2003 ) . Visual re - representation in creative analogies . In The Third Workshop on Creative Systems . International Joint Conference on Artiﬁcial Intelligence , pages 1 – 12 . Detterman , D . K . and Sternberg , R . J . ( 1993 ) . Transfer on trial : Intelligence , cognition , and instruction . Ablex Publishing . Doumas , L . A . , Hummel , J . E . , and Sandhofer , C . M . ( 2008 ) . A theory of the discovery and predication of relational concepts . Psychological Review , 115 ( 1 ) : 1 – 43 . Evans , T . ( 1964 ) . A heuristic program to solve geometric - analogy problems . In Proceed - ings of the 1964 Spring Joint Computer Conference , pages 327 – 338 . ACM Press . Falkenhainer , B . ( 1990 ) . Analogical interpretation in context . In Proceedings of the Twelfth Annual Conference of the Cognitive Science Society , pages 69 – 76 . Falkenhainer , B . , Forbus , K . D . , and Gentner , D . ( 1986 ) . The structure - mapping engine . Department of Computer Science , University of Illinois at Urbana - Champaign . Falkenhainer , B . , Forbus , K . D . , and Gentner , D . ( 1989 ) . The structure - mapping engine : Algorithm and examples . Artiﬁcial Intelligence , 41 ( 1 ) : 1 – 63 . Fauconnier , G . and Turner , M . ( 2003 ) . The Way We Think : Conceptual Blending and the Mind’s Hidden Complexities . Basic Books . Forbus , K . , Usher , J . , Lovett , A . , Lockwood , K . , and Wetzel , J . ( 2011 ) . Cogsketch : Sketch understanding for cognitive science research and for education . Topics in Cognitive Science , 3 ( 4 ) : 648 – 666 . Forbus , K . D . , Ferguson , R . W . , and Gentner , D . ( 1994 ) . Incremental structure - mapping . In Proceedings of the sixteenth annual conference of the Cognitive Science Society , pages 313 – 318 . Lawrence Erlbaum Associates , Inc Hillsdale , NJ . Forbus , K . D . , Gentner , D . , and Law , K . ( 1995 ) . MAC / FAC : A model of similarity - based retrieval . Cognitive Science , 19 ( 2 ) : 141 – 205 . 35 French , R . ( 2002 ) . The computational modeling of analogy - making . Trends in Cognitive Sciences , 6 ( 5 ) : 200 – 205 . Garey , M . R . and Johnson , D . S . ( 1979 ) . Computers and Intractability : a guide to NP - Completeness . WH Freeman New York . Gentner , D . ( 1983 ) . Structure - mapping : A theoretical framework for analogy . Cognitive Science , 7 : 155 – 170 . Gentner , D . and Forbus , K . D . ( 2011 ) . Computational models of analogy . Wiley Inter - disciplinary Reviews : Cognitive Science , 2 ( 3 ) : 266 – 276 . Gentner , D . and Holyoak , K . J . ( 1997 ) . Reasoning and learning by analogy : Introduction . American Psychologist , 52 ( 1 ) : 32 . Gero , J . S . ( 1998 ) . Conceptual designing as a sequence of situated acts . In Artiﬁcial Intelligence in Structural Engineering , pages 165 – 177 . Springer . Gick , M . L . and Holyoak , K . J . ( 1980 ) . Analogical problem solving . Cognitive Psychology , 12 ( 3 ) : 306 – 355 . Gick , M . L . and Holyoak , K . J . ( 1983 ) . Schema induction and analogical transfer . Cog - nitive Psychology , 15 ( 1 ) : 1 – 38 . Griﬃth , T . W . , Nersessian , N . J . , and Goel , A . ( 2000 ) . Function - follows - form transfor - mations in scientiﬁc problem solving . In 22nd Annual Conf . of the Cognitive Science Society , pages 196 – 201 . Griﬃth , T . W . , Nersessian , N . J . , and Goel , A . K . ( 1996 ) . The role of generic models in conceptual change . In Proceedings of the 18th Annual Conference of the Cognitive Science Society , pages 312 – 317 . Hahn , U . , Chater , N . , and Richardson , L . B . ( 2003 ) . Similarity as transformation . Cog - nition , 87 ( 1 ) : 1 – 32 . 36 Hall , R . P . ( 1989 ) . Computational approaches to analogical reasoning : A comparative analysis . Artiﬁcial Intelligence , 39 ( 1 ) : 39 – 120 . Harpaz - Itay , Y . , Kaniel , S . , and Ben - Amram , E . ( 2006 ) . Analogy construction versus analogy solution , and their inﬂuence on transfer . Learning and Instruction , 16 ( 6 ) : 583 – 591 . Hodgetts , C . J . , Hahn , U . , and Chater , N . ( 2009 ) . Transformation and alignment in similarity . Cognition , 113 ( 1 ) : 62 – 79 . Hofstadter , D . ( 1984 ) . The copycat project : An experiment in nondeterminism and creative analogies . MIT Artiﬁcial Intelligence Laboratory AI Memo 755 . Hofstadter , D . R . ( 2008 ) . Fluid Concepts and Creative Analogies : Computer Models of the Fundamental Mechanisms of Thought . Basic Books . Hofstadter , D . R . and Mitchell , M . ( 1992 ) . An overview of the Copycat project . In Holyoak , K . and Barnden , J . , editors , Connectionist Approaches to Analogy , Metaphor , and Case - Based Reasoning . Ablex . Holyoak , K . J . ( 2012 ) . Analogy and relational reasoning . The Oxford Handbook of Think - ing and Reasoning , pages 234 – 259 . Holyoak , K . J . , Novick , L . R . , and Melz , E . R . ( 1994 ) . Component Processes in Analogical Transfer : Mapping , Pattern Completion , and Adaptation . Ablex Publishing . Holyoak , K . J . and Thagard , P . ( 1989 ) . Analogical mapping by constraint satisfaction . Cognitive Science , 13 ( 3 ) : 295 – 355 . Humbert , C . ( 1970 ) . Ornamental Design : Europe , Africa , Asia , the Americas , Oceania : A Source Book With 1000 Illustrations . Thames & Hudson ( London ) . Kann , V . ( 1992 ) . On the approximability of NP - complete optimization problems . PhD thesis , Royal Institute of Technology Stockholm . Koestler , A . ( 1967 ) . The Act of Creation . Penguin Books . 37 Kokinov , B . and Petrov , A . ( 2001 ) . Integrating memory and reasoning in analogy - making : The AMBR model . The Analogical Mind . Perspectives from Cognitive Science , Cam - bridge Mass . Lakoﬀ , G . and Johnson , M . ( 2003 ) . Metaphors We Live By . University Of Chicago Press , 2nd edition . Lovett , A . , Gentner , D . , Forbus , K . , and Sagi , E . ( 2009a ) . Using analogical mapping to simulate time - course phenomena in perceptual similarity . Cognitive Systems Research , 10 ( 3 ) : 216 – 228 . Lovett , A . , Tomai , E . , Forbus , K . , and Usher , J . ( 2009b ) . Solving geometric analogy problems through two - stage analogical mapping . Cognitive Science , 33 ( 7 ) : 1192 – 1231 . Mahon , B . Z . and Caramazza , A . ( 2008 ) . A critical look at the embodied cognition hypothesis and a new proposal for grounding conceptual content . Journal of Physiology ( Paris ) , 102 ( 1 ) : 59 – 70 . McDermott , J . ( 1979 ) . Learning to use analogies . In Proceedings of the 6th International Joint Conference on Artiﬁcial Intelligence - Volume 1 , pages 568 – 576 , San Francisco , CA , USA . Morgan Kaufmann Publishers Inc . Penn , D . C . , Holyoak , K . J . , and Povinelli , D . J . ( 2008 ) . Darwin’s mistake : Explaining the discontinuity between human and nonhuman minds . Behavioral and Brain Sciences , 31 ( 2 ) : 109 – 130 . Petkov , G . , Vankov , I . , and Kokinov , B . ( 2011 ) . Unifying deduction , induction , and analogy by the AMBR model . In Proc . 33rd Annu . Conf . Cogn . Sci . Soc . Erlbaum , Hillsdale . Qian , L . and Gero , J . S . ( 1996 ) . Function - behavior - structure paths and their role in analogy - based design . AIEDAM , 10 ( 4 ) : 289 – 312 . Ramscar , M . and Yarlett , D . ( 2003 ) . Semantic grounding in models of analogy : an environmental approach . Cognitive Science , 27 ( 1 ) : 41 – 71 . 38 Robertson , I . ( 2000 ) . Imitative problem solving : Why transfer of learning often fails to occur . Instructional Science , 28 ( 4 ) : 263 – 289 . Schacter , D . L . , Norman , K . A . , and Koutstaal , W . ( 2000 ) . The cognitive neuroscience of constructive memory . False - memory Creation in Children and Adults : Theory , Re - search , and Implications , pages 129 – 168 . Sowa , J . F . and Majumdar , A . K . ( 2003 ) . Analogical reasoning . In Conceptual Structures for Knowledge Creation and Communication , pages 16 – 36 . Springer . Spellman , B . A . and Holyoak , K . J . ( 1992 ) . If Saddam is Hitler then who is George Bush ? Analogical mapping between systems of social roles . Journal of Personality and Social Psychology , 62 ( 6 ) : 913 . Tan , K . - L . , Ooi , B . C . , and Thiang , L . F . ( 2003 ) . Retrieving similar shapes eﬀectively and eﬃciently . Multimedia Tools and Applications , 19 ( 2 ) : 111 – 134 . Turney , P . D . ( 2008 ) . The latent relation mapping engine : Algorithm and experiments . J . Artif . Intell . Res . ( JAIR ) , 33 : 615 – 655 . Visser , W . ( 1996 ) . Two functions of analogical reasoning in design : a cognitive - psychology approach . Design Studies , 17 ( 4 ) : 417 – 434 . Wang , T . and Zhou , J . ( 1997 ) . Emcss : A new method for maximal common substructure search . Journal of Chemical Information and Computer Sciences , 37 ( 5 ) : 828 – 834 . Wolstencroft , J . ( 1989 ) . Restructuring , reminding and repair : What’s missing from mod - els of anology . AI Communications , 2 ( 2 ) : 58 – 71 . Yan , J . , Forbus , K . D . , and Gentner , D . ( 2003 ) . A theory of rerepresentation in analogical matching . In Proceedings of the 25th Annual Meeting of the Cognitive Science Society . 39