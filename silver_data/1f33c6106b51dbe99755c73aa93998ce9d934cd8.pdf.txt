Report of the Workshop on Software Engineering Foundations for End - User Programming Grace Lewis , Dennis Smith , Len Bass Carnegie Mellon University Software Engineering Institute { ljb , glewis , dbs } @ sei . cmu . edu Brad Myers Carnegie Mellon University Human Computer Interaction Institute ( HCII ) bam @ cs . cmu . edu DOI : 10 . 1145 / 1598732 . 1598762 http : / / doi . acm . org / 10 . 1145 / 1598732 . 1598762 Abstract The Workshop on Software Engineering Foundations for End - User Programming ( SEEUP ) was held at the 33 rd International Conference on Software Engineering ( ICSE ) in Vancouver , British Columbia on May 23 , 2009 . This workshop discussed end - user programming with a specific focus on the software engineering that is required to make it a more disciplined process , while still hiding the complexities of greater discipline from the end user . Speakers covered how to understand the problems and needs of the real end users of end - user programming . The discussion focused on the software engineering and supporting technology that would have to be in place to address these problems and needs . 1 . Introduction The Workshop on Software Engineering Foundations for End - User Programming ( SEEUP ) was held at the 33 rd International Conference on Software Engineering ( ICSE ) in Vancouver , British Columbia on May 23 , 2009 . This workshop was a continuation of the themes of the series of Workshops on End User Software Engineering ( WEUSE ) that were held at previous ICSE and CHI conferences and also at Dagstuhl , Germany . 3 The workshop focused on the software engineering that is required to make end user programming ( EUP ) a more disciplined Twenty three participants from both the research and corporate world contributed to the discussions . 3 To recognize this continuity with previous WEUSE workshops , this workshop is also referred to as “WEUSE V : the 5 th Workshop on End - User Software Engineering” . process . End - user programming ( EUP ) is the practice by which end users write computer programs to satisfy a specific need , but programming is not their primary job function . The software engineering discipline that is required to make end user programming more effective and less error prone is referred to as “End User Software Engineering” ( EUSE ) . Familiar examples of end - user programming include the use of shell scripts and Excel spreadsheets to allow users to quickly automate tasks specific to their needs . The advent of the Internet , and the recent explosion in the availability of web technologies , has provided more ways for end users to author programs ( such as JavaScript and Flash ) , and has made it easier for end users to share and use other people’s software . While there are substantial potential benefits of end - user programming , it is important to recognize the software engineering discipline that needs to be in place to enable such flexibility , and to protect against the potential problems that can arise from such flexibility . For example , end - user programming on the Web has vastly increased the use of shared code and shared data , at the risk being exposed to code and data of poor quality which might even be malicious . In addition there is a growing impact and substantial cost in businesses resulting from errors in end - user programs . 2 . Workshop Goal and Themes The goal of the SEEUP workshop was to discuss end - user programming with a specific focus on the software engineering that is required to make it a more disciplined process , while still shielding the end user from the complexities of greater discipline [ 14 ] . Specifically , the intent is to understand the problems and ACM SIGSOFT Software Engineering Notes Page 51 September 2009 Volume 34 Number 5 needs of the real user in end - user programming . The themes of the workshop included discussions of : • the range of end - user programming approaches . • specific end - user programming approaches that have the potential to provide significant benefits . • mechanisms to prevent malicious use of end user capabilities while still not inhibiting legitimate use . • an adoption path for end - user programming based on a disciplined software engineering foundation , and highlighting potentials and limitations of end - user programming . 3 . Discussion Topics The workshop was divided into 5 parts : • introduction to EUP state of practice • developer perspective , • end user perspective , • discussion of selected topics and • workshop review . The following five subsections summarize the discussions on these topics . Copies of the presentations are available on the SEEUP website [ 14 ] . 3 . 1 Introduction to EUP State of the Practice The introduction consisted of three talks that outlined the current state of the practice and set the tone for the rest of the day . The first talk , by Brad Myers of Carnegie Mellon [ 14 ] described previous EUSE workshops and introduced the major themes of the workshop . This talk identified the scope of End - User programming and traced its importance and previous work that has impacted it . The talk referred to two NSF workshops that determined the need for serious attention to the end - user [ 2 ] . The talk cited research findings that show that while there are about 3 million professional programmers in the United States , over 12 million people say they do programming at work , and over 55 million people use spreadsheets and databases at work , and thus may also be considered to be doing programming [ 12 ] . The NSF reports that there are about 6 million scientists and engineers in the US , most of whom program as part of their jobs [ 10 ] . A problem that needs serious attention is that errors are pervasive in software created by end users , resulting in serious consequences for the people whose retirement funds , credit histories , e - business revenues , and even health and safety , rely on decisions made based on that software . For example , a Texas oil firm lost millions of dollars in an acquisition deal through spreadsheet errors [ 11 ] . These problems are symptoms of the increased use of shared code and shared data , the potentially poor quality of that data , the lack of appropriate discipline on the part of the EUP , the lack of testing , and the failure to properly address security . EUSE is a multi - disciplinary problem needing software engineering research , programming language research , education research , end - user programming research , and HCI research of all types . Two recent large collaborative efforts , one in the U . S . ( the EUSES Consortium http : / / eusesconsortium . org / ) , and one in Europe ( the Network of Excellence on End - User Development , http : / / giove . cnuce . cnr . it / eud - net . htm ) have produced promising results in this area ( see , e . g . , [ 13 ] ) . Special Interest Group meetings at CHI’2004 [ 5 ] , CHI’2005 [ 6 ] , and CHI’2007 [ 8 ] , CHI’2008 [ 7 ] , CHI’2009 [ 9 ] and the WEUSE series of workshops at ICSE’2005 [ 4 ] , CHI’2006 [ 3 ] , Dagstuhl 2007 ( see www . dagstuhl . de / 07081 ) and ICSE’2008 [ 1 ] , successfully brought together researchers and companies interested in this topic . The second talk , by Andrew Ko , of the University of Washington , was on “The State of the Art in End - User Software Engineering” . This talk identified the pervasiveness and importance of end user programming . It reviewed how end user programming is beginning to be more disciplined across the software life cycle , and also identified areas of continued challenge . One primary concern is to inculcate the need to focus systematically on quality and to build more automated tools to support life cycle activities . Discussion topics included : • Because end user programs are developed by end users for their own use , formal requirements are not usually developed . The drivers for changes come from the end users themselves , and often involve ways to achieve greater automation . • Design and specifications tend to be emergent because end users do not see value in making them explicit . Techniques that have been successful in focusing greater attention on specification include designing domain ‐ specific languages to replace a lower ‐ level language ( e . g . , Yahoo pipes ) , and making the specification be the language itself and supporting design exploration ( such as Newman’s Denim ) . • End user programmers in general do not have the same cultural aversion to reuse as some professional programmers do . Reuse occurs by finding code on the web and in repositories , and by customizing templates and changing APIs . There is a need to evaluate how inputs , APIs and outputs are changed when code is reused . • End users tend to be overconfident about testing and verification because they do not have the experience that professional programmers have seeing how programs can fail . Techniques that provide immediate feedback tend to be the most effective , such as visualizing test data and automated consistency checking . • Debugging is difficult for end user programmers . Effective techniques support automated reasoning backward from output and suggesting potential solutions . Margaret Burnett of Oregon State University gave the third talk on “End - User Software Engineering and External Cognition” [ 15 ] . This talk started with the premise that for EUP to become more disciplined , programmers need to see a perceived payoff at a low cost . One mechanism for accomplishing this is through distributed cognition which is cognition beyond the individual to encompass interactions between people , resources , materials , and environment . The talk reviewed ways to help end users think in ways that enable users to recognize the perceived cost and benefits across a greater set of such interactions . Some current research in this area includes : • “What you see is what you test” ( WYSIWYT ) . An ACM SIGSOFT Software Engineering Notes Page 52 September 2009 Volume 34 Number 5 example includes that the system tracks progress of “things - to - test” , finds possible culprits for errors , prioritizes them , and then the user makes value correctness judgments . • Debugging Learned Programs to allow users to ask questions of machine - learned programs ( such as e - mail filters ) . The explanations provided by the system represent “code” that users can correct . • Debugging Via Information Foraging . Empirical studies are showing that information foraging is a significant activity in debugging . Current tools are providing clues on where to look for relevant information . 3 . 2 Developer View Two papers were presented in this session . Xingliang Yu , of the Chinese Academy of Sciences , presented a talk on “Extending the Boundary of Spreadsheet Programming : Lessons Learned from Chinese Government Projects” [ 15 ] . Mark Vigder , of NRC Canada , presented a paper on “End - User Scientific Development in a Scientific Organization” [ 15 ] . The talk by Xingliang Yu provided a case study of how spreadsheets are used to enable information sharing on schools and education across multiple levels of government . The project needed to integrate different types of data and different report formats into a coherent form that meets objectives at the local , province and national levels . The primary lessons learned are that mature spreadsheet applications provide significant leverage , permitting editing for specific needs provides additional impact , dictionaries of common terms enable greater interoperability , and that codifying a language ( ESL – EUD - enabled Spreadsheet Language ) facilitated use by diverse end users . Vigder’s paper provided a case study of end user scientists who develop scientific programs to support their own needs as well as the needs of their teams . These end - users have limited software knowledge and there is very little software engineering support for such processes as testing , configuration management or versioning . NRC has developed a general model of the workflow for such applications . It includes such activities as : convert data , select relevant data , and filter and transform data . Simple tools have been provided to support many of these tasks that involve selecting the appropriate workflow and inserting an appropriate set of parameters . This has led to the following preliminary results : • Since a GUI is automatically generated , many ‘programming’ operations are now done at the GUI level . • A single version of a program is maintained and only parameters at invocation are different . This minimizes the previous practice of ‘cloning and modifying’ . • The automation of tedious workflows has been simplified because of standard tool integration mechanisms and standard domain - relevant data structures . • Off - the - shelf tools have been integrated into workflows . 3 . 3 End - User View Harold Schellekens of SAP BusinessObjects , presented an invited talk on “Using Crystal Reports : Examples of Richly - Formatted Report Creation by Non - Developers” [ 14 ] . Crystal Reports enables business users to develop highly adaptive , customized reports from data bases . Based on customer input , current work is simplifying the designer’s tool to make it more accessible for people who are not professional software developers . This is being accomplished through more buttons for formulas , better context - sensitive help , analysis of usage data from web accesses to understand the types of reports that are most commonly used , and providing a greater number of templates for development . Other areas of research and improvement include developing more wizards to make the use of formulas more accessible , analysis of more advanced workflows , design based on experience of the report designer , and additional usability testing . 3 . 4 Discussion Session The talks led to a significant amount of discussion . Participants selected two main topics for more detailed discussion . The main topics were : 1 ) Multi - User Creation of End - User Engineered Software , and 2 ) How to Shape EUP Frameworks to Produce Better Software . These discussions are summarized below . While EUP emerged with a single user focus , there is an increasing trend toward multiple users . For example , an initial assisted living program may monitor a set of patients and follow up with house calls in case of emergencies . A number of variations can later be developed by different sets of users . As the program becomes more complex , challenges of configuration management , stakeholder conflict and control , social and legal concerns such as privacy , and quality attributes such as safety and security , need to be considered . Other examples of multiple end - user creation include collaborative prototyping , Wiki creation , cooperative tailoring , and search tool tailoring . Challenges of multi - user EUP include : • understanding the current state of the program , • traceability of who made specific changes , • training , • greater need for validation , • solving conflicts and clashes in multi - user creation environments , and • more languages for collaborative environments that could exploit computation . Tool needs for supporting these collaborative environments include : • versioning tools to indicate who made the changes and why the changes were made , and • collaboration tools for requirements management . These tools need to be focused on intuitive functionality with a strong GUI to account for the fact that users do not have a professional software engineering background . The second discussion topic focused on shaping the overall development framework and associated tools to lead to better and more robust software . Three dimensions were identified : ACM SIGSOFT Software Engineering Notes Page 53 September 2009 Volume 34 Number 5 • understand the nature of specific domains before developing frameworks , • understanding of end user needs and behaviors , and • factoring in the social side of the end user context . End - user programming is very domain specific . For example , the needs of the scientific users reported by Vigder are very different from the needs of the spreadsheet users reported by Xingliang Yu . Empirical and descriptive studies , such as the ones reported by Margaret Burnett , help with understanding how end users develop software in specific domains . One aspect of shaping the development framework focuses on identifying a set of principles within specific domains . For example , Adobe Catalyst captures common interactive behaviors that do not need to be re - coded by each programmer . Some of these primitives can then be generalized across domains by using techniques such as parameterization . The social dimension of the end user context becomes increasingly important in the multi - user EUP situations that were discussed earlier . The challenges in shaping the overall development framework include : • understanding general ( as opposed to domain – specific ) principles of EUP , • customizing domain - specific methods and languages , • determining the appropriate level of expressiveness in languages and tools . 3 . 5 Workshop Review Grace Lewis led a discussion of the major workshop themes and conclusions [ 14 ] . An overall conclusion is that EUP accounts for a significant amount of activity ; its impact is growing ; and the need for instilling software engineering discipline into EUP is reaching a critical stage . Common questions and themes that emerged throughout the day included : • EUP targets : who are the right people to target as EUP adopters ? When does it not make sense to introduce EUP ? • Adoption : How to get end users to use tools ? • Tool characteristics : What tool characteristics appeal to end users in a specific domain ? • Are there common aspects of tools in different domains that can be generalized ? • Adaptation of tools : Tools are tailored for different levels of expertise—what is the delta between levels of expertise ? How do we reduce the delta ? How does the delta change by introducing EUP ? • What are the points along the continuum from professional programming to EUP ? • Will skills change when the prevalent demographic groups become “digital natives” ? • How can work from other fields be better integrated with EUP ? • How can we enable end users to more effectively do their activities without requiring a 4 - year degree ? • What are appropriate processes for different types of EUP situations ? The workshop concluded that EUSE is a multi - disciplinary problem needing software engineering research , programming language research , education research , end - user programming research , and HCI research . Based on the workshop discussions , there was a consensus that the next edition of WEUSE should be planned for 2010 at an appropriate venue . A link to the presentations from the workshop is available at the SEEUP Workshop website at http : / / www . sei . cmu . edu / isis / workshops / seeup - 2009 / . A more extensive workshop post - proceedings report is being put together as an SEI Technical Report . This will include extended abstracts from the published papers and invited talks as well as summaries of the workshop discussions . 4 . 0 References . 1 . Abraham , R . , Burnett , M . , and Shaw , M . “Fourth Workshop on End - User Software Engineering ( WEUSE IV ) , ” in In conjunction with ICSE 2008 2008 . Leipzig , Germany : 2 . Boehm , B . and Basili , V . , “Gaining intellectual control of software development . ” Computer , 2000 . 33 ( 5 ) : pp . 27 - 33 . 3 . Burnett , M . M . , et al . “The Next Step : From End - User Programming to End - User Software Engineering ( WEUSE II ) , ” in Extended Abstracts , CHI ' 2006 . 2006 . Montreal , Canada : pp . 1699 - 1702 . 4 . Elbaum , S . and Rothermel , G . , First Workshop on End - User Software Engineering : WEUSE 2005 . In conjunction with ICSE 2005 , May 21 , 2005 . http : / / www . cse . unl . edu / ~ grother / weuse / weuse - proceedings . pdf . 5 . Myers , B . A . and Burnett , M . “End - Users Creating Effective Software ( Special Interest Group Meeting Abstract ) , ” in Extended Abstract CHI ' 2004 : Human Factors in Computing Systems . 2004 . Vienna , Austria : pp . 1592 - 1593 . 6 . Myers , B . A . , Burnett , M . , and Rosson , M . B . “End Users Creating Effective Software . ( Special Interest Group ) , ” in Extended Abstracts CHI ' 2005 : Human Factors in Computing Systems . 2005 . Portland , OR : pp . 2047 - 2048 . 7 . Myers , B . A . , et al . “End User Software Engineering : CHI ' 2008 Special Interest Group Meeting , ” in Extended Abstracts , CHI ' 2008 . 2008 . Florence , Italy : pp . 2371 - 2374 . 8 . Myers , B . A . , et al . “End User Software Engineering : CHI ' 2007 Special Interest Group Meeting , ” in Extended Abstracts CHI ' 2007 . 2007 . San Jose , CA : pp . 2125 - 2128 . 9 . Myers , B . A . , et al . “End User Software Engineering : CHI ' 2009 Special Interest Group Meeting , ” in Extended Abstracts , CHI ' 2009 . 2009 . Boston , MA : pp . 2731 - 2734 . 10 . National Science Board , Science and Engineering Indicators 2006 . National Science Foundation volume 1 : NSB 06 - 01 ; volume 2 : NSB 06 - 01A , 2006 . Arlington , VA . http : / / www . nsf . gov / statistics / seind06 / . 11 . Panko , R . , “Finding spreadsheet errors : Most spreadsheet models have design flaws that may lead to long - term miscalculation . ” Information Week , 1995 . pp . 100 . 12 . Scaffidi , C . , Shaw , M . , and Myers , B . “Estimating the Numbers of End Users and End User Programmers , ” in IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ' 05 ) . 2005 . Dallas , Texas : pp . 207 - 214 . 13 . Wulf , V . , Paterno , F . , and Lieberman , H . , eds . End User Development . 2006 , Kluwer Academic Publishers . 14 . Workshop on Software Engineering Foundations for End - User Programming ( EUP ) , http : / / www . sei . cmu . edu / isis / workshops / seeup - 2009 / 15 . Workshop on Software Engineering Foundations for End - User Programming ( EUP ) , May 23 , 2009 , in Proceedings of International Conference on Software Engineering , 2009 , Vancouver , British Columbia , May 16 - 24 , 2009 . ACM SIGSOFT Software Engineering Notes Page 54 September 2009 Volume 34 Number 5