Integration o f scientific data and formulae in an object - oriented knowledge - based system M V Krishnamurthy * and F J Smith An object - oriented knowledge based system has been devel - oped to store and manipulate scientific knowledge in the form of data and formulae encountered in conventional textbooks on science and engineering . The formulae are input in the same form as they are written in , in terms of the well known symbols used by engineers and scientists . The system interprets the symbols as representing scientific quantities and links them with the underlying data and methods in the knowledge base . By linking data about scientific quantities with one or more appropriate formulae , it is shown that the knowledge base can be used for simple problem solving . The development of the system on a Sun Sparcstation was facilitated by the use of an object - oriented environment , Objectworks C + + . Keywords : object - oriented systems , problem solving , science , engineering It has been argued frequently that conventional know - ledge based systems , mainly intended to handle logical rules , are not adequate for storing and manipulating the wide range of data and knowledge encountered in science and engineeringt , L For example , conventional hand - books and textbooks of science and engineering are filled with numerous algebraic formulae representing scientific laws describing the relationship between scientific quan - tities , in addition to data on these quantities 3 . As a fre - quent requirement of many scientists and engineers is to solve problems which involve the application of formu - lae to data , we believe that the storage of formulae is as Department of Computer Science , Queen ' s University of Belfast , Bel - fast BT7 ! NN , UK * On leave of absence from the Defence Research and Development Laboratory , Hyderabad , India Paper received 12 August 1992 . Revised paper received 28 April 1993 . Accepted 21 May 1993 important as the storage of data . We describe in this paper a knowledge based system for storing and manipu - lating knowledge in the form of data and scientific laws represented by formulae . We first analyse the nature of the relationship between scientific data and formulae and then describe how they can be represented together in an object - oriented frame - work . We then illustrate how the depth - first recursive strategy is used in searching the knowledge base to pick out an appropriate sequence of formulae to solve an actual problem . RELATED WORK There have been some attempts in the past to build systems which can store formulae . For example , some of the early intelligent programs for solving physics problems were MECHO by Bundy et al . 4 and ISSAC by Novak 5 . MECHO was developed to solve problems in mechanics . In MECHO , formulae were represented using predicate logic . In ISSAC , formulae were repre - sented as procedures attached to a special kind of frames called canonical object frames . Though these systems were powerful in exploiting the domain knowledge , and they facilitated the specification of the problem in natural language , their usage was restricted to highly specific domains . Recently Tyugu et al . 6 , 7 developed a system called PRIZ for general problem solving . Tyugu suggested the use of ' computational graphs ' which are special kinds of semantic networks for representing quantities in mathematics and physics and formulae relating these quantities . However , these systems do not provide any means to store data . Smith and Hughes 8 developed a system called the Bel - fast Scientific Database System , which was suitable for the storage of a wide range of data about science and technology . The special feature of this system was the storage of formulae as functions and subroutines . Another parallel system was developed by the same team 0950 - 705119410210135 - 07 © 1994 Butterworth - Heinemann Ltd Knowledge - Based Systems Volume 7 Number 2 June 1994 135 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith to process more general queries using the relational data model and a query - by - example interfaceL Bandyopad - hyoy et al . ~ ° developed a system called the Symbolic Information Management System ( SIS ) for the storage and manipulation of structured data and algebraic form - ulae . They used a model called the Symbolic Relational Model , which was a derivative of the relational model . In SIS , formulae were represented as special attributes of a symbolic relation . All these systems facilitate the storage of both data and formulae . This project is an attempt to develop the above ideas further , to represent data and formulae together in an object - oriented framework aimed at problem solving . Besides data and formulae we also intend to store know - ledge on geometry and units . We believe that the object - oriented methodology makes possible a uniform para - digm to represent such heterogeneous data and know - ledge which was lacking in our earlier work 4 , 5 . Besides supporting complex data modelling , the object - oriented paradigm also offers abstraction , encapsulation and the capability of capturing semantics through inheritance . SCIENTIFIC DATA AND FORMULAE We discuss below the two most basic entities in our knowledge base : quantities and formulae . Quantities The notion of quantity is central to problem solving in science and engineering . A quantity can be a geometrical quantity like radius or volume or a physical quantity like mass or force . Physical quantities can be categorized into constants , variables and properties . Physical constants are the universal constants of nature , e . g . the velocity of light ( c ) is 2 . 9979 × 108 m / s . Physical variables ( some - times called state variables ) are independent variables which describe the state of a physical system , such as temperature ( T ) or pressure ( P ) . Physical properties are quantities which have different values for different materials ( or elements ) in different states , for example the elastic modulus ( E ) , which has a value of 0 . 70 x 10 " Pa for aluminium at room temperature . The physical constants and physical properties are held in the know - ledge base , and the variables ( including geometric values ) are specified by a user or computed using formulae during problem solving . Each quantity can be described ( as above ) by its attri - butes , such as name , symbol , units and data values . The data values , which are often fuzzy ~ , are normally expressed in the form of tables . Quantities are normally identified by symbols , well known to every practising engineer and scientist . In certain cases a single symbol is used to represent two or more different quantities ; for example , the symbol E is used to represent energy , elec - tric field and elastic modulus . Normally an engineer interprets the symbol appropriately on the basis of the context in which it is used . Our system resolves these ambiguities using simple dimensional arguments . USER INTERFACE GRAPHIC FRONT - END I i / " - . , 1 f so , . v . QUANTITmS FORMULAEI ~ I SEARCH ENGINE I Figure 1 Principal components of knowledge based system Formulae Formulae describe the relationships among quantities and are expressed in the form of mathematical equations . A formula can be a simple definition of a physical quan - tity or a physical law describing a phenomenon or fact . For example the quantity tensile stress is defined by the formula = F / A ( 1 ) where F is the load applied and A is the crosssectional area . Physical laws are often only valid under certain con - ditions , which are expressed as constraints on the law . For example , if E is the elastic modulus ( or Young ' s modulus ) , K is the bulk modulus , G is the torsion modu - lus , and a is the Poisson ratio , then K and G are related to E and cr through the following equations : K = E / 3 ( 1 - 2ry ) ( 2 ) G = El2 ( 1 + or ) ( 3 ) However these relations are valid only for isotropic solid materials . Therefore before using them the system would need to know that they apply to some solid material and that the material is isotropic . OVERVIEW OF SYSTEM The system consists of three main components : the knowledge base , the problem solver and the user inter - face , as illustrated in Figure 1 . The knowledge base contains the essential knowledge required for problem solving , that is , the quantities , for - mulae , units of measure and geometry . The problem solver obtains the specifications of a problem from the user interface and interacts with the knowledge base to retrieve the necessary physical quantities or formulae or to convert quantities from one system of units to another . The search engine in the problem solver is responsible for the selection of the appropriate formulae for solving a problem and the formula interpreter inter - prets a formula to compute the value of a quantity . The user interface consists of two components : the graphic 136 Knowledge - Based Systems Volume 7 Number 2 June 1994 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith CLASS , , ~ UNITS ~ QUANTITY in isla ? is computed GEOMETRICAL GEOMETRY ~ QUANTITY using is computed v using is - a FORMULA l is - a PHYSICAL QUANTITY lis lisa CONSTANT W . IAOL PROPERTY Figure 2 Relationships among various classes in knowledge base Class Formula { String Symbolic _ Form ; List Actual _ Form ; Set ( Constraint ) Constraints ; Set ( Quantity ) Quantities _ Related public : List Get _ ActuaLForm0 ; / / Retrieves the actual form of the formula for interpretation Set ( Constraint ) Get . . Constraints0 ; / / Retrieves the constraints associated with the formula void Print ( ) ; / / Prints the components of the Formula class Quantity { Set ( String ) Names ; Set ( String ) Symbols ; Set ( Unit ) Units ; Set ( Formula ) Formulae ; public : double ConvertValue ( Unit source _ unit . Unit target _ unit , double value ) ; / / Converts value from one system of unit to another Set ( Formula ) Get Formulae0 ; / / Retrieves the formulae related to a quantity Figure 3 Definition of class Quantity front end and the formula translator . The graphic front end creates the menus , popup windows etc . required for user interaction . The formula translator translates a formula which is input by a user in a symbolic form into an unambiguous form . This is required because , as men - tioned earlier , there are symbols which correspond to more than one quantity . For example , the symbolic form and the actual form of the formula in Equation 2 are as follows : Figure 4 Definition of class Formula and 4 respectively , in their C + + syntax . Each class con - tains a set of attributes ( eg . names , symbols , units , data and formulae in the case of the class Quantity ) and a set of methods specified under the label public . For the sake of simplicity only important attributes and methods are given . Each instance of a class represents a real world object . For example , Mass is an instance of the class Physical _ Quantity and the unit Newton is an instance of the class Units . A class can inherit data and methods from a more general class through inheritance . For exam - ple the classes Geometrical _ Quantity and Physical _ Quan - tity can inherit data and methods from the class Quan - tity . Each object of a class is uniquely identified by a system generated identifier which is transparent to the user . Procedures for computing a value of a quantity from a formula or procedures for converting a value from one system of units to another are expressed as methods in our object - oriented design . This approach has also been useful in representing geometrical knowledge because the geometrical shapes can be represented as objects ( e . g . sphere or cylinder ) , with their variables ( e . g . radius ) represented as attributes and their formulae ( e . g . A = rrr 2 ) represented as methods . It would have been more difficult to have represented this knowledge in anything other than an object - oriented design . Symbolic form : Actual form : Constraint : K = e / 3 ( 1 - 2or ) bulk modulus = elastic modulus / 3 ( 1 - 2 Poisson ratio ) isotropic solid materials We discuss the two key issues , knowledge representation and problem solving , in discussing the design of the knowledge based system below . KNOWLEDGE REPRESENTATION The relationships among the various entities in the knowledge base are shown in the object - oriented designs in Figure 2 . Each entity is implemented ~ 2 as a class in C + + , and for the sake of illustration , the definition of the classes Quantity and Formula are given in Figures 3 PROBLEM SOLVING STRATEGY The problems we aim to solve are common problems for engineers and physical scientists , entailing the compu - tation of the value of a quantity by applying formulae . This is simple when there is a single formula to apply and the values of all the other quantities in the formula are known , because they are either specified in the problem , or are available in a database of properties . The process becomes complex when there is more than one formula to apply and when the values of some of the quantities in the formulae are unknown ( neither specified in the problem nor available in the knowledge base ) , and have to be computed from other formulae . We use the problem decomposition strategy from artifi - cial intelligencel3 , 14 to tackle this problem . We divide the problem of the computation of a quantity into a number Knowledge - Based Systems Volume 7 Number 2 June 1994 137 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith Table 1 Sample data of moduli of elasticity of some materials ( as given in a handbook ) Material Young ' s modulus Shear modulus Bulk modulus Poisson ratio Y G K v Material Pa × 10 H lb / in × 10 6 Pax 10 ~ lb / in × 10 6 Pa × 10 ~ lb / in x 10 6 Aluminium 0 . 70 10 . 0 0 . 300 3 . 40 0 . 700 10 . 0 0 . 16 Brass 0 . 91 13 . 0 0 . 360 5 . 10 0 . 610 8 . 5 0 . 26 Copper 1 . 10 16 . 0 0 . 420 6 . 00 1 . 400 20 . 0 0 . 32 Glass 0 . 55 7 . 8 0 . 230 3 . 33 0 . 370 5 . 2 0 . 19 Iron 1 . 90 26 . 0 0 . 700 10 . 00 1 . 000 14 . 0 0 . 27 Lead 0 . 16 2 . 3 0 . 056 0 . 80 0 . 077 1 . 1 0 . 43 Nickel 2 . 10 30 . 0 0 . 770 11 . 00 2 . 600 34 . 0 0 . 36 Steel 2 . 00 29 . 0 0 . 840 12 . 00 1 . 600 23 . 0 0 . 19 Tungsten 3 . 60 51 . 0 1 . 500 2 1 . 00 2 . 000 29 . 0 0 . 20 Table 2 Sample formulae relating elastic properties of materials Symbolic form Actual form Constraint 1 cr = F / A 2 a = AL / Lo 3 AL = L ~ - Lo 4 T = F / A 5 ~ , = tan 0 6 ~ = Ee 7 T = G ' / 8 B = E / 3 ( l - 2v ) 9 G = E / 2 ( I + v ) tensile stress = load / cross _ sectional area tensile strain = elongation / original length elongation = instantaneous length - original length shear stress = load / crosssectional area shear strain = tan ( shear angle ) tensile stress = elastic modulus , tensile strain shear stress = shear modulus , shear strain bulk modulus = elastic modulus / ( 3 , ( l - 2 , Poisson ratio ) ) shear modulus = elastic modulus / ( 2 , ( l + Poisson ratio ) ) Perfect deformation Perfect deformation Isotropic materials Isotropic materials of subproblems each involving the computation of a subquantity in the formula . When there is more than one formula to apply , we try them one by one . The entire problem space can then be represented as an AND / OR tree and we can employ a depth - first recursive search to traverse the tree . The leaf nodes represent quantities whose values are known . The search terminates at this level and returns the value to its previous level . When a dead end is reached , the system backtracks to a previous level and selects another formula if available . If the com - plete search space is exhausted , the system reports that the problem is unsolvable and prompts for more infor - mation . Each problem is specified in terms of known quanti - ties , i . e . the geometry of the entities in the problem , the material from which they are made , and a goal quantity whose value is to be computed . If the goal quantity exists as a known variable at any step in the computation or if it equals a physical quantity in the knowledge base , its value is returned and the search is terminated . ( These two cases correspond to leaf nodes of the solution tree ) . Otherwise , the formulae for computing the quantity are retrieved from the knowledge base ( the formulae in the knowledge base are indexed on the names of quantities making up the formulae ) . Then , as mentioned above , these formulae are selected one by one to compute the goal quantity ) . These correspond to the OR branches of the solution tree . The formula with the minimum number of unknowns is selected first to minimise the search space . The validity of the constraints on the formula are next verified interactively . If they are valid , all the other quantities in the formula must be computed before computing the goal quantity . These correspond to the AND branches of the solution tree . The search pro - cedure is invoked recursively to compute each quantity , the quantity being a new goal quantity until it is com - puted . When all the unknowns in a formula ( except the goal quantity ) are known or computed , the formula is interpreted and solved numerically to compute the goal quantity . ( Note that if a formula reappears in the same search path , it is eliminated automatically to avoid infi - nite recursion ) . The solution tree is thus generated until the goal quantity at the root of the tree is computed or until the search space is exhausted . This strategy is illus - trated later with some examples . PRACTICAL APPLICATION We discuss the advantages of storing data and formulae together using a practical application . We tested our prototype system with some sample data and formulae related to properties of materials . Table 1 shows a por - tion of a data table with data about different elastic moduli stored in our system . Table 2 shows a sample subset of formulae stored in the knowledge base . The problem solving strategy is illustrated further below with some examples . Reduction of storage Besides the automatic solution of problems which we discuss next , the system reduces storage requirements by eliminating the need to store data in different systems of units and to store data about interdependent quantities . For example , for the data in Table 1 , the actual data stored can be substantially reduced . We eliminate the storage of values in FPS units ( which can be computed using the knowledge of units ) and the storage of values of bulk modulus and shear modulus ( which can be com - puted using the formulae in Equations 2 and 3 ) . The 138 Knowledge - Based Systems Volume 7 Number 2 June 1994 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith Goal : 81 A formulae ? Return 81 1 . 81 = 1i - Io 2 . E = 81 / Io S OR Select 1 ~ 1 = li - Io 2 / oo I io ig specified li is not known Io = 0 . 305 m No formula to Return the value compute Dead end @ Search failed & Select 2 ~ Retum 81 / e - . ~ / Io lo / / AND ~ lo is specified Io = 0 . 305 m Return value t " not known ~ k Return formula : O ? E £ o is specified Get E for copper o = 276 I 0 V Pa from KB 11 Return value E = 1 . 1 10 Pa Return value Figure 5 AND / OR tree , illustrating problem decomposition strategy used in solution of problems actual reduction in storage is considerable since the data for each material may vary with two or more indepen - dent variables such as temperature and pressure . The computational overhead arising out of this reduction in space is minimal as the formulae contain mostly simple arithmetic operators . Sample problems The problem solving strategy is illustrated below with simple examples . Problem 1 : A rectangular bar of copper originally 0 . 305 m long is pulled down in tension with a stress of 276 MPa . If the deformation is entirely elastic , what will the resultant elongation be ? This problem can be specified as follows : material = copper geometry = rectangular bar 10 = 0 . 305 m tr = 276 x 106pa material = copper 6l = ? m There are two formulae for computing 61 : 6l = li - / 0 E = 6l / lo ( 4 ) ( 5 ) Initially Equation 4 is selected , but the system has to abandon the search on this path at the next level because the value of li is not known and there is no other formula for computing li . The system backtracks and selects Equation 5 . In this case e has to be computed before the computing of 6l . In the next level E ts computed using the formula cr = Ee ( 6 ) A solution tree for this problem is shown in Figure 5 and a sample window demonstrating the solution of this problem is shown in Figure 6 . The window is self explan - atory . It contains problem specifications in the middle and a set of buttons on top and bottom . The top buttons are mainly used for the entry of Greek symbols , super - scripts , subscripts etc . The problem is solved using the SOLVE button and the EXPLAIN button explains the solving process . Problem 2 . " What would be the current flowing through an aluminium wire of 0 . 0013 m diameter and 10 m long at - 10 * C ( 263 K ) if the wire experiences a voltage drop of 1 V ? The problem can be specified as follows : material = aluminium geometry = wire 1 = 10m d = 0 . 0013 m Knowledge - Based Systems Volume 7 Number 2 June 1994 139 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith H ~ L ~ L p 3 ~ l . Super ~ crIptl Subscript ' SYMBOL M E N U M ~ terial : , : , , ! , , . ~ ~ o ~ try : , e , tarig , Jlar I , ~ Known Quantities : 0 - u . ~ 05 I , , , o 27£ , e + I ' ~ Goal Quantity : ~ ' r , ~ C , , : , ~ ~ u ~ t , t ~ has beeq , : c , r , q ~ , Jted . , : . l fl 80875 ~ . 272 r , , Figure 6 Window used in solution of problem 1 Table 3 Reduced table ( as stored in system ) Material Young ' s modulus E . Poisson ratio Pa × 10 " v Aluminium 0 . 70 0 . 16 Brass 0 . 91 0 . 26 Copper 1 . 10 0 . 32 Glass 0 . 55 0 . 19 Iron 1 . 90 0 . 27 Lead 0 . l 6 0 . 43 Nickel 2 . 10 0 . 36 Steel 2 . 00 0 . 19 and being several levels deep . In order to appreciate the complexity , consider the following problem . Problem 3 : A cylindrical bar of steel 0 . 010 m in diameter is deformed elastically by the application of a force that produces an elastic reduction of 3 × 10 - 6 m in diameter . Compute the force . The problem can be specified as follows : Material : a I umir , iun , Geometry : wire K ~ OW ~ Quantities : 10 m , d : 0 . S8 ~ 13 n , , V - l . ~ V , T - 263 K Goal Quantity : I - v Goal _ Quantity has been computed . . I : 5 . 55688 A Figure 7 Window used in solution of problem 2 V = IV T = 263 K I = ? A A solution tree similar to the one for problem 1 can be created using the following four formulae : V = IR ( 7 ) p = Ra / / ( 8 ) m = 7 " ( F 2 ( 9 ) d = 2r ( 10 ) A sample window demonstrating the solution of the problem is given in Figure 7 . Unlike in these two problems , the search space for some problems can be long , involving several branches material = force geometry = cylindrical bar d0 = 0 . 010 m & / = - 3 . 0 x 10 - 6 F = ? N in order to solve this problem several intermediate quan - tities ( o - , E , v , A , ex , ~ etc . ) need to be computed . The search space for this problem involves more than 20 formulae ( some of which are rejected ) and is up to 20 levels deep . We have loaded up to 150 formulae and relevant data tables of the properties of materials from two text - books 15 , 16 and tested the system with problems from mechanical and electrical engineering . Out of 70 problems selected from textbooks the system could solve 58 problems correctly . The remaining problems mostly involved complex geometries and equations involving differentials and integrals which the present system can - not yet handle . An example of an unsolved problem is given below . Problem 4 : A flat steel bar 10 m long and 10 mm thick tapers from 60 mm at one end to 20 mm at the other . Determine the change in the length of the bar when an axial tensile load of 12 000 N is applied to it . In order to solve this problem , we must be able to repre - sent the geometry of the tapered bar . We also need to have facilities for representing and manipulating expres - sions of the following type for computing the change in the length . 3l = l = 5 dl ( 11 ) We plan to augment the system with capabilities for handling differentials , integrals , vectors , matrices and 140 Knowledge - Based Systems Volume 7 Number 2 June 1994 Integration of scientific data and formulae in an object - oriented KBS : M V Krishnamurthy and F J Smith complex geometries . Many problems still need resolving , but there appears to be no difficulty in principle . CONCLUSIONS We have implemented the prototype of the system on a Sun Sparcstation using the Objectworks C + + environ - ment . We have selected the C + + language because of its efficiency and portability 17 , 18 . As C + + does not support persistence , we had to build our own object manager to store and manipulate objects . Although this was aided by our earlier work on database design 4 and by the Object - works environment ~ 9 , an object - oriented database system , such as objectstore 2° , might have speeded up the work if it had been available when the project started . We found that an object - oriented environment is suitable for this type of system ; indeed , without it , the system would have been very difficult to implement , and the lack of such a tool held back our earlier work on this kind of knowledge based system 4 , 5 . ACKNOWLEDGEMENTS The authors gratefully acknowledge the earlier work of S R Tripathy on this project . M V Krishnamurthy expresses his gratitude to the Indian Ministry of Educa - tion for supporting this research through the Jawaharlal Nehru Centenary British Fellowship administered by the British Council , UK . The author also thanks the authori - ties of the Indian Defence Research Development Organisation , for granting him leave to carry out this research . The research described in this paper was supported in part by the UK Science and Engineering Research Council with grant IED4 / 1 / 1416 . This paper is a revised version of a paper presented at the 6th International Conference on Scientific and Statisti - cal Database Management Ascona , Switzerland ( Jun 1992 ) . REFERENCES 1 Rumble , J R and Smith , F J Database Systems in Science and Engineering Adam Hilger , UK ( 1990 ) 2 Smith , F J and Hughes , J G ' Some special features of a materials database system ' Proc . Conf . Data and Knowledge Systems for Manufacturing and Engineering Hartford , CT , USA ( Oct 1987 ) pp 76 - 82 3 Hughes , J G , Smith , F J and Tripathy , S R ' A knowledge base for the properties of materials ' Proc . l l th International CODA TA Con - ference Hemisphere Press ( 1990 ) pp 122 - 126 4 Bundy , A ' Solving mechanics problems using recta - level interface ' in Michie , D ( Ed . ) Expert Systems in the Micro Electronic Age Edinburgh University Press , UK ( 1979 ) pp 50 ~ 4 5 Novak , G S ' Representation of knowledge in a program for solving physics problems ' Proc . 5th International Joint Conference on Arti - ficial Intelligence ( 1977 ) pp 286 - 291 6 Mints , G and Tyugu , E ' The programming system PRIZ ' Journal of Symbolic Computation Vol 5 ( 1988 ) 286 - 291 7 Tyugu , E N ' Knowledge based programming environments ' Know - ledge - Based Systems Vol 4 No 1 ( 1991 ) pp 4 - 15 8 Smith , F J and Hughes , J G ' The Belfast Scientific Database System ' in Glaeser , P S ( Ed . ) The Role of Data in Scientific Progress North - Holland , Netherlands ( 1985 ) pp 435 - 437 9 Bandyopadhyay , S , Hughes , J G , Smith , F J and Sen , K ' A genera - lised scientific information system ' Comp . Phys . Commun . Vol 33 ( 1984 ) pp 49 - 53 10 Bandyopadhyay , S and Devitt , J S ' A symbolic information man - agement system ' Journal of Symbolic Computation Vol 4 ( 1987 ) pp 397 - - 408 11 Smith , F J and Emerson , L ' Indexing technical data in a material database ' Proc . Conf . Data and Knowledge Systems for Manufactur - ing and Engineering Gaithersburg , MD , USA ( Oct 1989 ) pp 11 - 18 12 Stroustrup , B The C + + Programming Language Prentice - Hall , UK ( 1987 ) 13 Nilsson , J N Principles of Artificiallntelligence Springer , Germany ( 1980 ) 14 Rich , E Artificial Intelligence McGraw - Hill , USA ( 1983 ) 15 Callister Jr , W D Materials Science and Engineering - An Introduc - tion ( 2nd Ed . ) John Wiley , USA ( 1991 ) 16 Mott , R L Applied Strength of Materials ( 4th Ed . ) Prentice - Hall , USA ( 1978 ) 17 Marc , R et al . ' Object - oriented programming in A1 - - new choices ' AI Expert ( Jan 1989 ) pp 53 - 69 18 Jordan , D ' Implementation benefits of C + + language mechanisms ' CACM ( Sep 1990 ) pp 61 - 64 19 Objectwork C + + Selected Readings Release 2 . 1 AT & T , USA ( 1989 ) 20 Lamb , C et al . ' The objectstore database systems ' Commun . ACM Vol 34 No 10 ( 1991 ) pp 50453 Knowledge - Based Systems Volume 7 Number 2 June 1994 141