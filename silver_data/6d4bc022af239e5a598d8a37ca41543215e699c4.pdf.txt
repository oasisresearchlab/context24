Proposing a New Process Model for Mashup Development By Applying Meta - Design Principles and Goals for Managing End user Expectations Sumaira S . Minhas 1 , Pedro Sampaio 2 , Nikolay Mehandjiev 3 Manchester Business School University of Manchester Manchester , UK 1 Sumaira . minhas @ manchester . ac . uk , 2 p . sampaio @ manchester . ac . uk , 3 n . mehandjiev @ manchester . ac . uk Abstract — End users’ requirements should be incorporated in the software , and service based ephemeral applications are no exception . Mashup development is facing different challenges such as inherent tension between the non - technical end user and complexity demands of the end user mashup development tools . We believe meta design can address these challenges . Meta design tends to provide a road map for innovative computational envi - ronments beyond the user - centered and participatory design . It seeks to bring the end user at the heart of software development by coining ideas such as co - designing at use - time , constant evolu - tion of systems at the hand of users and Seeding , evolutionary growth and reseeding model ( SER ) . There has been already some ideas generation regarding using meta - design principles for mashup development . We have further explored and assessed meta - design principles and have proposed a concrete solution in the form of a process model that can provide a way forward to overcome the predicaments faced by end users who wish to pro - gram for themselves at a comfortably abstract level in an evolu - tionary fashion . We present the process model and describe a motivational real - world scenario for validation purpose followed by initial observations of the experiment conducted . Index Terms —Mashup , End User Development , End User requirements . I . I NTRODUCTION & R ESEARCH P ROBLEM The current trend of consumer web is synonymous with Ben Shneiderman’s claim [ 1 ] : “The old computing was about what computers could do ; the new computing is about what users can do” The number of services is on the rise [ 2 ] , and can be a driv - ing force for end - users’ empowerment from mere consumers of web to become active producers of services . Currently , the literature hints towards an underlying problem regarding exist - ing tools . According to [ 3 ] , the research has mainly focused on enabling technologies and standards with little attention to eas - ing the mashup development process . This has led researchers to conduct different user studies and propose the idea of user - centered mashups [ 4 ] [ 5 ] . Hence , it can be deduced that mashup development , specifically among end users , does not represent a success story in spite of the high interest of end users in the idea of developing novel applications in a mashup - style [ 6 ] . 978 - 1 - 5090 - 4300 - 2 / 16 / $ 31 . 00 ©2016 IEEE Besides , a group of researchers is also emphasizing on the need of bridging the gap between software engineering and web engineering software development practices [ 5 ] . Different user studies have suggested that the main problem is the lack of focus on the human factors of mashup development as most of the research has been carried out to deliver and improve the technical aspects of developing applications by combining ser - vices [ 7 ] [ 8 ] [ 9 ] . User studies into this research area suggest a more comprehensive development environment with a thor - ough support , which should be presented to the users in a pro - gressive way [ 6 ] [ 10 ] . Our earlier research [ 19 ] suggests that none of the existing platforms for mashup development have explicit support for user requirements or user goals . Keeping in view this state of the art of mashup development and study - ing about different mashing techniques , we decided to provide the extended support for mashup development activities . Since proposing a new tool architecture using the existing ( or even proposing a new ) mashing technique would only contribute to the existing research into the tools and technical aspects . Hence , this research aims at bringing forward an important aspect of mashup development : exploring and understanding end - users’ expectations and requirements while composing an ephemeral application . The major objective of the proposed approach is to provide user - friendly extended development support to elaborate the EU’s objective , by applying goal - based techniques in a collab - orative way , into more concrete , ready to be designed mashup requirements and further assist the assignment of these concrete requirements to target web services that satisfy the main objec - tive and hence the sub - goals . II . T HE PROPOSED SOLUTION The proposed solution is in the form of a process model that employs the principles of “meta - design” as the premises for the new tool and uses goal formalisms for its working . A brief de - tail of each is given below : A . Meta Design : It is a conceptual framework that is proposed as a solution to a constant need of change in the design of existing systems and has been prescribed to meet the future EUD needs [ 11 ] . It comprises of principles , guidelines and models that are aimed at defining social and cultural systems and creation of infra - structures that enable and promote collaborative design and co - creation . The conceptual underpinning of this framework , as is the motivating force behind EUD , is the assumption that future uses and problems of a given system cannot be anticipated dur - ing design - time leading to mismatches during use - time result - ing in new insights that can be employed for the benefit of end users [ 6 ] . It is a concept that believes in cultures of participa - tion , thus fostering a mind - set that moves end users from the passive consumerism side to a more active designer’s role ul - timately making them owners of their problems [ 12 ] . Hence , it seeks to extend the traditional system design phase beyond the system development of that system , and enables the users to become the co - developers or co - designers of the system by making use of a co - adaptive and collaborative process between user and the system . B . Goals The concept of goals is considered as a naturally suitable way of doing RE since unlike requirements , goals are concrete and less volatile statements that naturally provide a justification and organization mechanism for requirements [ 13 ] . Goals happen to be the high level statements and operationaliz - ing goals into requirements help satisfy the completeness ob - jective of requirements specifications ; since to satisfy goals , sufficient level of elaborations are required [ 14 ] . This goal der - ivation mechanism also helps in ensuring that requirements are pertinent to the system [ 15 ] and thus it keeps the scope creep under control . The tree structure of goal graphs apart from providing the visual picture of goals also help in traceability of requirements as well as in increasing the readability of re - quirements document [ 13 ] . We propose to use direct manipulation techniques for creating and modifying the goal models based on goal templates . The direct manipulation of the goals operates on data structures representing domain - independent and domain - specific models . The organization , working and constraints of these models are governed by goal meta - models and goal templates . The goal meta - model and goal templates are intended to define general constraints on the goal model to help end - users specify and elaborate vague requirements of their mashup applications . III . EXPLANATION Our proposed process model is spiral ( fig . - 1 ) and template driven since it takes the life cycle of mashup development be - yond a single mashup application and isolated end users’ needs . It does not take a single mashup into account and takes mashup development as a continuous incremental activity . Templates are goal - oriented and form the building blocks of the process model and the first step in generating the mashups that drive the activity of deriving services from the objectives or goals at the beginning of the mashup development process . The proposed process model is iterative and incremental in nature since each activity or phase is repeated , typically fo - cused on different phases of the mashup development and at the end of each cycle , the mashup is incrementally enhanced in terms of features and addressing additional end users’ needs . Figure 1 – The Proposed Spiral Process Model for Mashup Development The proposed process model is composed of phases and cycles . Each cycle of the spiral consists of 4 phases ( concep - tion , translation , composition and execution ) and at the end of each cycle , a new tested and deployed mashup is released ( if the mashup needs not to be published depending on the intent of the end user , testing and deploying can be skipped ) . The enhancements in the mashups take place through goal templates which can be detailed and extended . It is proposed that the goal template can be extended by adding additional goals from the library of goals , which bring extended feature set to the new mashup . Capturing the initial requirements of the mashup makes the conception phase of the mashup development which can be mapped to early requirements of the traditional software development . It consists of specifying the basic mashup in - formation including the name , purpose , type , genre and addi - tional comments regarding the details . The end user can also specify the services in the beginning depending on his pref - erences . If the end user starts a new mashup project and se - lects the template to iteratively develop a goal model , it will be considered as a new start of the new spiral in our process model . However , if the end user continues with the filled template and updates an existing filled template with pa - rameters and services specified to add a new goal compo - nent , it will be considered as the next cycle of the parent mashup . The translation phase is oriented towards the elaboration and refinement of the early mashup requirements identified in the previous phase using appropriate goal based templates in a top - down fashion . The goals are considered a natural mechanism for derivation of requirements . Hence the goal hierarchies are believed to be a user friendly way of guiding users from their objective to the final candidate services . The translation phase for cycle 1 will start from an unfilled tem - plate . Alternatively , if and when the end user may want to start with the filled template and modify the goal compo - nents , it will be considered the cycle 2 . The workflow for translation phase consists of instantiating the goal template by filling in the parameters followed by selecting the candi - date services or data sources . The third composition phase is currently the only explic - itly defined phase in the mashup development lifecycle as is evident by design of the contemporary tools and involves the composition of data sources and APIs needed to fulfill the end user situational need . In our proposed framework , this should also accomplish the resolution of any / all conflicts between the finally selected service / data components . SBAs are being reused ; famous examples are Craigslist [ 17 ] and Housingmaps [ 16 ] . This requires the applications to be tested and debugged before being deployed and reused . Quality for the mashup development is being considered as an important aspect recently and models for ensuring quality are being researched [ 18 ] . Hence , we propose that this phase tests the data and performance of the composed application for consistency with the original intention of the EU . Lastly , it involves the final building of the application af - ter debugging and may involve deployment depending upon the application type , intention of the EU , quality and utility . IV . V LIDATING S CENARIO Different iterations and rounds of the spirals can be ex - plained using the help of an example . We will apply spiral model to Craigslist . com , one of the very first and commer - cially successful mashups . Craigslist was originally devel - oped in 2005 as a San Francisco mailing list featuring local events in San Francisco Bay area . Now , it is an expanded commercial online business and provides classified ads relat - ed to different categories including but not limited to jobs , housing , for sale , and items wanted . The evolution of Craigslist could be cited as a good example of how template - based development can be used to facilitate enhancements into an existing mashup . Currently according to Craigslist . org , over 700 cities in 70 countries have Craigslist sites . Let’s suppose in the first iteration , Craigslist used a basic data mashup template to create basic version of the site to list the events in San Francisco bay area . Next , housing - maps . com decides to publish the events on the map accord - ing to their locations ( Housing maps is the first mashup that used the Google maps API but is now closed since Craigslist has added the maps component within their site ) . Instead of developing the mashup from scratch , the template for the Craigslist can be reused and customized to add the map component in the second spiral leading to the second round of spiral . V . E XPERIMENTAL S ETUP AND I NITIAL O BSERVATIONS An experiment was conducted that helped in validating the proposed approach . Usually , consumer mashup tools aimed at facilitating end users do not use explicit require - ments acquisition method ( s ) [ 19 ] . These tools force all end users to rely on implicit handling of requirements and use the technical components such as widgets or pipes to translate their intention into a services - based - application . We hypoth - esize that a separate phase for explicit handling of users’ expectations , in which the end users can specify the require - ments of their mashup application will have a significantly higher impact on the adoption of mashup tools by decreasing the technical burden that is a reported cause of end user prob - lems in the literature . A total of 10 participants were selected for the evaluation with no , basic or limited IT knowledge . The key group for the study was identified from the University of Manchester students and will be referred to as end users or partici - pants / respondents in the remainder of the paper . The experi - ment was designed to be conducted with two participants at one time so as to facilitate the control - treatment experimen - tation style . The two participants were later on swapped so as to make the control participant use the treatment and the treatment participant act as a control . The participants were given a total of six scenarios for mashups . The control group was asked to list down the user requirements in an outline format whereas the treatment group specified and elaborated the requirements using the goal templates provided . All the participants were carefully recruited based on the results of an initial selection form so as to make sure that they have little to no programming experience / background . We wanted to see if the participants , who were given tutorials about the idea of service mashups can list down the details of the se - lected mashup scenario in a better way with or without the goal support . A . Initial Observations This section reports on the initial observations made while conducting the experiment which endorse our hypoth - esis . These observations were made during the course of experiment and were being noted down during the whole exercise . 1 . Requirements One of the most prominent observations made was re - garding the timings of questions . All the users with no excep - tion asked different task - specific questions in the beginning of experiment i . e . after the tutorial and before beginning the scenario modelling once their choice of the scenario was confirmed . This could lead one to do further experimentation and conclude that the requirements elicitation problems that exist in traditional software development where the roles of end users and analysts / developers are differentiated also exist in mashup development . 2 . Scenario Selection 65 % of the times , participants selected either scenario 1 or scenario 4 ( 15 out of 20 ) with only 15 % selecting scenario 3 and 20 % selecting scenario 2 . Although , the users were asked not to consult the selection in the second task with the other member , the end users preferred to select the scenarios that they had discussed as a possible selection in the begin - ning . This also points towards an important proposal of our method : Meta design . One of the proposals of meta - design is to share the design among the end users and could lead to an important research prospect in mashup development . 3 . Services Knowledge All the participants did not have any idea of web services or APIs and could only relate to the services at a user - level . Most of the participants asked about services that were to be identified in the templates and came up with vague services functionalities to identify the services required in the particu - lar scenarios . 4 . Task completion time Certain observations were made regarding task comple - tion time , and they were obvious even without comparing the actual , precise times . The treatment group for task 1 took less time than the control group for task 1 . Whereas for Task 2 , the completion time for control group was less than that of the treatment group . There are only 2 exceptions to this observation when actual times are noted and both involve scenario 1 . All the participants took less time in the task two as com - pared to task 1 . This makes us believe that the tutorial and experience is an important part of the mashups for end users . In actual , the completion time could only be taken as a com - parison between the control and treatment groups after measured the completeness and errors in their requirements specification documents which were in outline and goal tem - plates form respectively . VI . CONCLUSION To the best of our knowledge , this approach is the first proposal that addresses the mashup development problems by explicitly integrating the end users expectations into the mashup development process as a separate activity . Breaking down the mashup development activity into four phases of conception , translation , composition and execution is a novel idea for addressing the problems of end users . With this rede - fined process proposal , it is the pioneering research in the community of end user development of situational applica - tions that proposes a model that reorganizes the development activity and includes an intertwined instrumentation for ex - plicitly supporting end user requirements - cum - design activi - ty as an inherent feature of the process . The initial observa - tions of the experiment are promising and have confirmed our viewpoint regarding the lack of requirements and goal specifications as one of the main hindrances in the adoption of mashup development tools by end users and endorse our idea of splitting the mashup development activity into con - ceptual phases . We plan to do further experimentation to evaluate the usefulness of our approach . R EFERENCES [ 1 ] B . Shneiderman , Leonardo’s laptop : human needs and the new computing technologies . Mit Press , 2003 . [ 2 ] A . Namoun , T . Nestler , and A . De Angeli , Conceptual and usability issues in the composable web of software services . Springer , 2010 . G . Eason , B . Noble , and I . N . Sneddon , “On certain integrals of Lipschitz - Hankel type involving products of Bessel functions , ” Phil . Trans . Roy . Soc . London , vol . A247 , pp . 529 – 551 , April 1955 . ( references ) [ 3 ] C . Cappiello , F . Daniel , M . Matera , M . Picozzi , and M . Weiss , “Enabling end user development through mashups : requirements , abstractions and innovation toolkits , ” in Proceedings of the Third international conference on End - user development , Torre Canne , Italy , 2011 , pp . 9 – 24 . [ 4 ] K . Väänänen - Vainio - Mattila and M . Wäljas , “Towards user - centered mashups : exploring user needs for composite web services , ” in CHI’11 Extended Abstracts on Human Factors in Computing Systems , 2011 , pp . 1327 – 1332 . K . Elissa , “Title of paper if known , ” unpublished . [ 5 ] T . Mikkonen and A . Taivalsaari , “The mashware challenge : bridging the gap between web development and software engineering , ” in Proceedings of the FSE / SDP workshop on Future of software engineering research , 2010 , pp . 245 – 250 . [ 6 ] Namoun , A . , Wajid , U . and Mehandjiev , N . ( 2010 ) . Service Composition for Everyone : A Study of Risks and Benefits . In A . Dan , F . Gittler , & F . Toumani , eds . Service - Oriented Computing . ICSOC / ServiceWave 2009 Workshops . Lecture Notes in Computer Science . Springer Berlin Heidelberg , pp . 550 – 559 . [ online ] . Available from : http : / / dx . doi . org / 10 . 1007 / 978 - 3 - 642 - 16132 - 2 _ 52 . [ 7 ] A . Namoun , T . Nestler , and A . De Angeli , Conceptual and usability issues in the composable web of software services . Springer , 2010 . [ 8 ] A . Namoun , U . Wajid , and N . Mehandjiev , “Service composition for everyone : a study of risks and benefits , ” in Proceedings of the 2009 international conference on Service - oriented computing , Stockholm , Sweden , 2009 , pp . 550 – 559 . [ 9 ] N . Mehandjiev , A . Namoune , U . Wajid , L . Macaulay , and A . Sutcliffe , “End user service composition : Perceptions and requirements , ” in Web Services ( ECOWS ) , 2010 IEEE 8th European Conference on , 2010 , pp . 139 – 146 . [ 10 ] A . Koschmider , V . Torres , and V . Pelechano , “Elucidating the mashup hype : Definition , challenges , methodical guide and tools for mashups , ” in Proceedings of the 2nd Workshop on Mashups , Enterprise Mashups and Lightweight Composition on the Web at WWW , 2009 , pp . 1 – 9 . [ 11 ] G . Fischer and E . Giaccardi , “Meta - design : A Framework for the Future of End - User Development , ” in End User Development , vol . 9 , H . Lieberman , F . Paternò , and V . Wulf , Eds . Springer Netherlands , 2006 , pp . 427 – 457 . [ 12 ] G . Fischer , “End - user development and meta - design : Foundations for cultures of participation , ” in End - user development , Springer , 2009 , pp . 3 – 14 . [ 13 ] E . Yu and J . Mylopoulos , “Why goal - oriented requirements engineering , ” in Proceedings of the 4th International Workshop on Requirements Engineering : Foundations of Software Quality , 1998 , vol . 15 . [ 14 ] K . Yue , “What does it mean to say that a specification is complete ? , ” in Proc . IWSSD - 4 , Fourth International Workshop on Software Specification and Design , 1987 . [ 15 ] A . Van Lamsweerde , “Goal - oriented requirements engineering : A guided tour , ” in Requirements Engineering , 2001 . Proceedings . Fifth IEEE International Symposium on , 2001 , pp . 249 – 262 . [ 16 ] http : / / housingmaps . com / [ 17 ] https : / / www . craigslist . org / about / sites [ 18 ] Daniel , F . and Matera , M . ( 2014 ) . Quality in Mashup Development . In Mashups . Data - Centric Systems and Applications . Springer Berlin Heidelberg , pp . 269 – 291 . [ online ] . Available from : http : / / dx . doi . org / 10 . 1007 / 978 - 3 - 642 - 55049 - 2 _ 10 . [ 19 ] S . S . Minhas , P . Sampaio , and N . Mehandjiev , “A Framework for the Evaluation of Mashup Tools , ” Services Computing ( SCC ) , 2012 IEEE Ninth International Conference on , pp . 431 – 438 , 24 .