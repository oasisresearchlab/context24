glBIS : A Hypertext Tool for . Exploratory Policy Discussion Jeff Conklin and Michael L . Begeman MCC Software Technology Program 3500 West Balcones Center Drive Austin , Texas 78759 - 6509 ARPA : conklin @ MCC . COM begeman @ MCC . COM ABSTRACT . This paper describes an application specific hypertext sys - tem designed to facilitate the capture of early design delib - erations . It implements a specific method , called Issue Based Information Systems ( IBIS ) , which has been devel - oped for use on large , complex design problems . The hy - pertext system described here , gIS ( for graphical IBIS ) , makes use of color and a high speed relational database server to facilitate building and browsing typed IBIS net - works . Further . glBIS is designed to support the collabora - tive construction of these networks by any number of co - operating team members spread across a local area net - work . Early experiments suggest that the IBIS method is still incomplete , but there is a good match between the tool and method even in this experimental version . INTRODUCTION . There is a growing recognition that hypertext is an ideal model on which to base a support environment for the system design process . In the MCC Software Technology Program we have been working on a hypertext project called the Design . lournaZ which is aimed at providing a team of system designers a medium in which all aspects of their work can be computer mediated and supported . This includes the traditional documents such as requirements , specifications , high level design , and the design document itself , but it also includes such things as interviews with users , scenarios , design reviews , designers’ early notes and sketches , design decisions and rationale , internal de - sign constraints , meeting minutes , etc . The Design Journal places particular emphasis on the capture of the design rationale as the central aspect of the process which may serve to integrate all of the other documentation . In addi - tion , our research is directed at the upstream of the design process , where most of the information is informal , and for which there is little technical support . Permission to copy without fee all or part of this material is granted provided that the cooks are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of [ he publication and its date appear , & d notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish , requires a fee and / or specific permission . 0 1988 ACM 0 - 89791 - 282 - 9 / 88 / 0140 $ 1 . 50 . _ _ _ _ _ By design rationale we mean the design problems , alterna - tive resolutions ( including those which are later rejected ) , tradeoff analysis among these alternatives , and record of the tentative and firm commitments that were made as the problem was discussed and resolved . Our research has two thrusts : ( i ) to understand the internal structure of de - sign decisions , and the higher level dependencies which grow up among decisions , and ( ii ) to address the interface problems inherent in capturing large amounts of informal design information and in providing effective methods for indexing and retrieval within that information . As part of the former thrust we have been developing our own theory about the structure of design decisions , called ISAAC . As part of the latter thrust we have built a running prototype of the Design Journal , called glBIS . At the time of the design of glBIS , however , the ISAAC theory was not yet ready to be encoded as a running tool . Instead , glBIS is based on a similar though somewhat simpler model of de - sign deliberation called Issue Based Information Systems , or IBIS . THE IBIS METHOD . The lBIS method was developed by Horst Rittel [ RIT70 ] , and is based on the principle that the design process for complex problems , which Rittel terms “wicked” problems , is fundamentally a conversation among the stakeholders ( e . g . designers , customers , implementers , etc . ) in which they bring their respective expertise and viewpoints to the resolution of design issues . Any problem , concern , or question can be an issue , and may require discussion ( if not agreement ) in order for the design to proceed . Indeed , in the IBIS model it is this “argumentation” which consti - tutes the design process . ( This does not preclude “argu - ing” with oneself , and glBIS works as well for monologues as for dialogues . ) Rittel developed this model over 15 years ago , and has used it successfully in diverse design situations such as architectural design , city planning , and planning at the World Health Organization . The IBIS model focuses on the articulation of the key Is - sues in the design problem . Each Issue can have many Positions . A Position is a statement or assertion which re - solves the Issue . Often Positions will be mutually exclu - sive of each other , but the method does not require this . 140 Each of an Issue’s Positions , in turn , may have one or more Arguments which either support that Position or ob - ject to it . Thus each separate Issue is the root of a ( possi - bly empty ) tree , with the children of the Issue being Posi - tions and the children of the Positions being Arguments . There are nine kinds of links in IBIS . For example , a Position Responds - to an Issue , and this is the only place the Responds - to link can be used . Arguments must be linked to their Positions with either Supports or Objects - to links . Issues may Generalize or Specialize other Issues , and may also Question or Be - suggested - by other Issues , Positions , and Arguments . A typical IBIS discussion‘begins with someone posting an Issue node containing a question such as “How should we do X ? “ . That person may also post a Position node pro - posing one way to do X , and may also post some Argu - ment nodes which support that Position . Another user may post a competing Position responding to the Issue , and may support that with their own Arguments . Others may post other Positions , or Arguments which support or object to any of the Positions . In addition , new Issues which are raised by the discussion may be posted and linked into the nodes which most directly suggested them . Figure 1 shows a state transition diagram specifying all of the legal moves within the IRIS method . I Figure 1 : The set of legal rhetorical moves in IBIS . There is no stopping rule , nor is there in the IBIS method a particular way of registering that an Issue has been re - solved by agreement upon some Position . Rather , the goal of the discussion is for each of the stakeholders to try to understand the specific elements of each others’ propos - als , and perhaps to persuade others of his own point of view . The method makes it harder for discussants to make unconstructive rhetorical moves , such as “argument by repetition” and name calling , and it supports other more constructive moves , such as seeking the central issue , ask - ing questions as much as giving answers , and being spe - cific about the supporting evidence of one’s viewpoint . In implementing gIBIS we have made certain changes and extensions to the IBIS method to allow needed flexibility . However , we tried to change the method as little as possi - ble . The IBIS method has been in use by Rittel in various design and planning activities for many years , and we felt it was important to push his method as far as it would go , understanding its strengths and weaknesses , before we started making any radical extensions . The extensions to IBIS in the current glBIS tool are : ( 1 ) an additional “Other” type for nodes and links , as an “es - cape” mechanism for users who could not find a way to express a thought within the IRIS framework ; ( 2 ) an addi - tional “External” type for nodes that contain non - IRIS ma - terial , such as requirements documents , design sketches , or code ; and ( 3 ) the ability to let Positions “specialize” or “generalize” other Positions , and likewise with Arguments . THE glBlS TOOL . There were three technological themes guiding our design of gIBIS . The first was an interest in exploring the capture of design history : the decisions , rejected options , tradeoff analysis . . . in short , the rationale behind the design itself . For this purpose , the IRIS framework seemed a good start - ing point . The second theme was an interest in supporting computer mediated teamwork , and particularly the various kinds of design conversations that might be carried on via networked computers , a la email or news [ EVE86 , HOR86 ] . And thirdly , we needed an application in which we would have a sufficiently large information base that we could investigate navigation ( i . e . search and browsing ) of very large information spaces . All of these factors lead us to this application , and to the more specific require - ments discussed below . As can be seen in Figure 2 , the basic gIBIS interface is divided into 4 tiled windows : a graphical browser on the left , a structured index into the nodes on the top right , a control panel below the index window , and an inspection window in which the attributes and contents of nodes and links can be viewed . This interface is somewhat unusual in that the only way to view the contents of a node or link is to select it , causing it to be immediately displayed in the single inspection window . ? The browser . The browser provides a visual presentation of the IRIS graph structure . Nodes and their interconnecting links are displayed on a canvas of virtually unlimited size . Most of the browser is dedicated to a local view of the network : a “zoomed in” view of the current area of interest which shows the full detail of the nodes and links . The lower - right portion of the browser is reserved for a global over - view of the data : a “zoomed out” abstraction of the entire network in which node labels , link type icons , and the sec - ondary links which make up the network’s fine structure are filtered out . In addition to giving an overview of the entire network , the global view also indicates the scope and position of the current local view by a rectangular overlay ( in this example , the local view extends down from the top left corner of the global view ) . t The examples used throughout these sections are taken from the issue group “gibis - issues” which we have used to capture many of the design issues for the glBlS tool itself . The reader is warned not to confuse statements which appear in the issue group ( e . g . “The glBlS tool does not allow users to select links” . ) with the current state of the tool . ( This particular lBlS conversation resulted in an implementation for selectable links . ) 141 FiQure 2 : The QIBIS lnterf ~ ce . The canvas can be scrolled within the window area of the browser by the use of traditional scrollbars ( seen at the top and left side of the browser ) or more directly by “snap scolling” - a method where the user clicks the mouse any - where within the local view to center that location in the window . This method allows the user to easily fine - tune the positioning of the display , and to scroll diagonally without having to reposition two independent scrollbars . Scrolling to an area outside of the local view is also possi - ble by directly repositioning the local view indicator in the global view window . Simply dragging the rectangle to a new area within the global view causes the local view to be updated appropriately . The browser supports a direct manipulation [ NOR861 style interface to the nodes and links ( i . e . display objects ) . Dis - play objects can be selected simply by “clicking on them” with the left button of our 3 - button mouse . Selecting a display object causes it to become highlighted and boxed in the browser , its contents to appear in the inspection win - dow ( see Figure 2 ) , and its index line to be scrolled to the top of the index window . A right - click on the mouse causes context - sensitive menus to be displayed . It is by these menus that objects are created , edited , deleted , moved , and so forth . As an example , let’s begin with the case where the user presses the menu button when no ob - ject is selected . The following menu appears indicating that the only legal operation is ISSUe Creation ( i . e . the beginning a new IBIS structure ) . By contrast , if a node of type Issue is selected , the menu changes to reflect the legal operations on Issues . In this example , the user is choosing to create a followup node of type Position which , when populated and submit - ted , will be placed to the right of the selected Issue and will automatically be linked to it by a link of type Re - sponds - to . Upon making this menu selection , the inspec - tion window ( lower right ) divides itself in half and a Node Creation window appears under it which is preloaded with a structured template to be filled in . 142 o < wo POSITIOn w > oo Subject : Xeyvords ? Label : The user fills in the template’s structured fields ( e . g . Sub - ject , Keywords , . . . ) . and then provides an optional descrip - tion of the node’s topic ( i . e . an unstructured node body ) . When the node has been completed , the user pushes the SUEMT button in the control panel ( which appears only during Node Creation / Editing ) , the node gets parsed and stored , and the browser and index windows are updated to include it . When users follow the “Link to another node” menu item , a pullright menu appears which constrains them to select from the set of legal outgoing link types for the currently selected node . Choosing the link type , the new link appears stretching from the source - node to the current mouse position . The user moves the mouse to the destination node ( the link follows the mouse by “rubber banding” across the can - vas ) , and the user then drops the end of the link on its destination again by menu selection . In addition to being able to select nodes and links , canoni - cal IBIS subnets ( i . e . a single Issue followed by its set of Positions , followed in turn by their set of Argument nodes ) are selectable as an entity as well . The tool provides sup - port for the movement and automatic layout of these sub - nets as a whole . Further , gIBIS allows aggregation of these subnets into a single composite IPA node which pro - vides additional structure to represent an analysis of the competing Positions and commitment to one of them ( i . e . Issue resolution ) . While it has a structure and body all its own , the IPA node by default inherits its iabel , subject and keywords from the root Issue of the underlying subnet . Selecting the compos - ite causes traversal of the underlying lBIS subnet , compos - ing an “inherited” body which is shown in the inspection window along with the text which is specific to the com - posite ( see Figure 3 ) . Since the inherited body of the composite can grow to be quite long for an aggregation of a large IBIS subnet , users can suppress ( or reveal ) its in - clusion in the inspection window by use of a function key . The node index window . The node index window provides an ordered , hierarchical view of the nodes in the current IBIS network . The net - work is traversed following Primary links ( discussed later ) in depth - first order starting from each Issue ( i . e . the root of each canonical IBIS subnet ) . The Issues , Positions and Arguments are given sequence numbers like those one would expect to find in an outline editor [ HER85 ] ; for ex - ample , the following figure shows the Subject line for Is - sue 8 ( 1 . 8 ) which has no children , 19 whose first Position node ( P . 9 . 1 ) has 2 Argument nodes as children ( A . 9 . 1 . l and A . 9 . 1 . 2 ) , and so forth . Issues are simply ordered by creation date . The integers in the leftmost column are unique object identifiers and can be ignored . The view configuration panel allows the user to tailor the index in - formation to reflect not only by Subject , but also Author , Keyword , or node Label . Nodes can be selected through the index as well as the browser . Clicking on a node’s index line causes that node to become current : its icon is highlighted in the browser , the canvas is scrolled ( if necessary ) to make the node vis - ible in the local view , and the node’s contents appear in the inspection window . Through this index window based access , we have provided a second browsing method which provides a linear , compressed view of the data in the net - work . The control panel . The control panel is composed of a set of buttons which extend the tool’s functionality beyond simple node and 143 Figure 3 : A canonical IBIS subnet before and after aggregadon . link creation . Each button has a menu hidden behind it which extends or tailors its basic function . The NEXT button , for example , will normally cause gIl3IS to record that you have read the current node before displaying the next node in the network , but pressing the right ( menu ) mouse button while over the NEXT button causes this menu to appear - a slight extension of the basic function - ality which leaves the current node marked unread . For those functions which have no extended function , the menu is simply a longer explanation of the functionality provided . For example the GOT0 button which causes gIB1 . S to load a particular issue group’s data into the brow - ser has a simple help menu behind it which instructs the user to “Enter an issue group name and push this button . ” Interface configurability . The MISC button hides a grab - bag of functionality . Of the functions available , we will describe one in depth : the TOOL CONFlG item which allows the user to tailor par - ticular aspects of the interface . ? Upon selecting this item , a new window appears ( see following figure ) which con - tains the gIBIS configuration parameters , their current set - tings , and constraints on their legal settings . t Other functions behind the MISC button allow users to send tool gripes / suggestions to the developers . mark all nodes as having been read / unread , linearizing and printing the IEIS net . and [ unlsubscribing to issue groups . The Tool Configuration Window . Configuration parameters are divided according to which window they affect : the index , browser , or inspection win - dow . The adjoining figure shows a user modifying the node attribute upon which the index window will be built . We wish to emphasize two major points about the browser now : the concept of a “primary” link , and the use of color . P & nary and Secondary links . Recall that when a node is created , it is usually automati - cally linked into the existing network of nodes . This auto - matic link - the first link which connects a node into the network - is considered to be that node’s primary link . The user may later connect that node to others in the net - work using the linking facility described above ; but all sub - sequent links are considered to be secondary links , and are distinguished from the primary link both visually and navigationally . 144 Filtering the secondary links from a canonical IBIS subnet results in a hierarchy , and this hierarchy is the basis for the index window’s structured linearization . Take the case where three Positions were created in response to an Issue . Two of the Positions have supporting arguments . In this example , the Positions were mutually exclusive , so each Argument also objected to the other Position , and hence the authors created secondary links to make this explicit . We have found that it is easier for the casual browser of an IBIS network to understand the network if , on first pass , the secondary links are turned off so that the browser only displays the primary links . The NEXT button leads the user through the network in the canonical IBIS order ( the same sequence as the index window ) , and the primary - link browser view reinforces their understanding of how the current node relates to the surrounding conversational structure . For subsequent passes , the user may wish to enable the visibility of secondary links in order to under - stand the cross - relationships which the authors of the net - work have encoded . ( In keeping with the design philoso - phy of tightly coupled windows , selecting a node with the NEXT button causes the same scrolling / highlighting as se - lection via the browser or index window . ) The use of color . @ IS was designed for use on SUN workstations with color monitors . Based on this , we chose to make use of color to indicate node and link type information , as well as some special node states such as “currently selected” and “matches the current query . ” We also gave users the abil - ity to configure the tool to customize the type - color map - ping . This flexibility caused some trouble at first and we quickly proposed ( and then encoded in the tool ) a set of standard - ized color mappings . Having colored nodes and links turns out to be one of the most compelling aspects of the tool . Users can quickly learn the type mappings for the most commonly used nodes and links , and type identifica - tion then becomes a rapid , unconscious activity . While users occasionally change their mappings using the TOOL CONFIG panel for . special purposes ( like making some links invisible for presentations ) , they most commonly set their mapping and leave it alone . Later , we adopted a set of users with monochrome moni - tors , so we provided iconic information which duplicates the information encoded by color . While the tool by de - fault presents both color and iconic information to the us - er , both can be suppressed . Most frequently , the color user will suppress link icons in order to make the browser appear less cluttered . The use of color presents its own set of problems though . The technique of type - to - color mapping is obviously lim - ited to those users who have color display devices and are not themselves color blind . It is also limited to situations where the number of mappings remains rather small . In our application there are nine link types , and the feeling is that we are near the limit of people’s ability to reliably perform the mapping . By adding the link type icons , the mapping complexity drops and more link types could be “safely” added . More surprising , however , is the large machine - to - machine variation among the color monitors . The variation in over - all brightness , convergence , and RGB gun saturation has eliminated the possibility of using a single , standardized set of color mappings for all machines . Color settings which produce bright , highly defined images on one screen can look very dark , muddy and indistinct on another . To address this , we have provided the four sliders at the bot - tom of the TOOL CONFlG window which allow users to “fine tune” the colormap on their machines . While this approach lets users construct color - maps which adequately distinguish the types , we doubt whether we could ever reli - ably use more subtle shading schemes to communicate type information . Search and query . The last control panel feature we wish to discuss is the QUERY button . Pressing it results in the appearance of a small query - construction window as seen centered in the next figure . The query window itself contains a small con - trol panel and a query specification section which is query by example in that the user creates a proto - node against which those in the current IBIS net will be matched . The following example searches the network for those nodes authored by “begernan” after g / 25 / 87 which contained the string “link” in their body . Upon pressing the EXECUTE button , the query is parsed , evaluated , and the query’s re - sults are displayed both in the browser ( selected nodes are turned a bright yellow in both the local and global views ) and in the index window ( the window only shows the index lines for those nodes which satisfied the query ) . The user can then examine those nodes using the standard naviga - tion techniques described above . Pressing the HELP but - ton reveals yet another window ( obscuring the browser window below ) which contains instructions on how to for - mulate queries , the query grammar , and a number of ex - amples . This query specification technique allows users to easily formulate node content searches based upon the logical ANDing of predicates over node attributes . While we have thought about extending the grammar to allow full boolean expressions over the predicates ( and have designed a vis - ual interface for the specification of structural queries ) , there has been so little demand for this that we have cho - sen to focus our implementation resources elsewhere . We feel that these more sophisticated queries may be required when the networks become very large , but experience 145 shows that the simple query engine which has been pro - vided is sufficient for searching over networks of moderate size . The query control and help windows . Some key glBlS requirements . gIBIS is primarily a vehicle for the exploration of Issue - based methodologies for the capture of design rationale . It was intended from the start to be used by small teams of people collaborating on “real” projects within the Software Technology Program at MCC . Because of this , we had a number of constraints to design to : 1 ) The tool had to be reliable . We recognized that since people would be using gIBIS to capture information which was important to them ( i . e . not for “toy” problems / experiments ) , our data storage had to be very reliable . Losing or corrupting an IBIS network was considered to be an intolerable fault . 2 ) The tool hud to support multiple concurrent users . As a tool to facilitate team collaboration , gIBIS had to provide true multiuser support . This meant shared , coordinated access to centralized lBIS net - works , automatic notification of significant changes ( e . g . new nodes ) to the nets , access control and locking to prevent multiple updaters from corrupt - ing the data , and “lightweight” IBIS groups that teams could create and share at their own volition . The user community had already been using the USENET news network to hold machine - mediated group conversations , and was expecting richer and more powerful functionality from glBIS . 3 ) The tool had to perform reasonably well . With the goal of producing a real tool for use on real problems , we had to provide reasonable per - formance from the beginning . Accessing an exist - ing node or link’s contents needed to be almost in - stantaneous , while larger tasks such as loading a new IBIS network into the browser or performing a query could take longer ( lo - 15 seconds for a large network seemed reasonable ) . Our basic guideline was that the performance of the tool should not break a user’s rhythm of creating and browsing a network . 4 ) We had to implement gIBIS with very limited resources . Because the entire project team consisted of 21 / z people ( 1 author working full time on the methodol - ogy , the other author and a student working on the tool ) , we had to import as much functionality as possible . Wanting to concentrate our efforts on the interface and the method , we chose to build gIBIS on top of an existing relational DBMS . The Choice of a RDBMS . Choosing a relational DBMS as our storage manager pro - vides us with concurrency control , record level locking , re - liable data storage , fast access methods and a reasonable search engine for free . In addition , our DBMS ( UNIFY ) provides us with an uninterpreted data type - basically a field into which we can store arbitrarily long passages of text , digitized voice , graphics bitmaps , or whatever . We are therefore able to store the body of a node as an inte - gral part of a record in the database - something which many of today’s DBMSs do not support . In retrospect , we feel that the decision to implement glBIS on top of a DBMS has allowed us to focus on our research topic , and has saved us many months of development effort . Unfortunately , the DBMS does not provide an adequate notification mechanism ( triggers in DBMS parlance ) to alert an application when a table or set of records gets modified ( e . g . when a new node gets added to an Issue group ) . To overcome this , we had to build our own notifi - cation layer on top of the database . This layer keeps track of the state of the DBMS with respect to each individual user . When the database gets modified in such a way as to cause a change in any user’s view of the data , those af - fected users are sent a notification and their copy of gIBIS updates their view appropriately . In this way , gIS pro - vides an effective , tight coupling between its users and their views of the evolving Issue networks . References to external data . Using a DBMS as our storage manager presented one ma - jor drawback however : closing the system . In essence , all of the objects which the Issue networks reference needed to reside within the DBMS . Unfortunately , many objects which give rise to Issue - based discussions ( like require - 146 ments or architecture documents ) as well as - those which result from these networks ( such as code and documenta - tion - the artr @ cts of design ) are external to the database and hence out of reach . For this reason , we felt compelled to create a special surrogate type of node which allows gIBIS to reference external objects in a “blind faith” sort of way . A surrogate has two parts : a pointer to the exter - nal object ( usually a fully - qualified pathname to a file ) and an optional display program which gIBIS should invoke to display the object . If the default display program is in - voked , the external object is assumed to be a text file and is loaded into gIBIS’ standard inspection window . If , on the other hand , the user specifies a display program , that program is invoked and passed the external pathname as an argument . Using this facility , external data and pro - grams are smoothly integrated into gIBIS . Some examples of external data which we have seen include simple textual documents , static graphic figures , dynamic simulations , a spreadsheet , and even a full - scale hypertext network man - aged by MCC’s PlaneText hypertext system . OBSERVATIONS . In this section we wish to present some trends and obser - vations of the uses , strengths , and weaknesses of this hy - pertext tool . These are preliminary findings . In this sec - tion we have tried to be as candid as possible about the weaknesses and research problems of both the IBIS method and the gIBIS tool . We hope that this candor does not create an overly negative impression about what we feel is a very positive research effort . It is important to keep in mind that none of our users was - - at least initially - - more than passingly familiar with the IBIS method itself , so there was quite a bit of learning and experimenting going on while users constructed their networks . Indeed , it could be said that most of our users regarded themselves as experimenters , exploring different ways of working and using the tool , conventions , etc . Network structure . In this section we describe the usage of the gIBIS tool dur - ing a one year period , from mid February 1987 to mid February 1988 , in terms of statistics on the networks . Thirty two people participated in the creation of 33 issue groups in all . ( One issue group , not presented here , was used for an experiment in which the gIE % IS hypertext facili - ties were used but the IBIS method ignored . ) As of Febru - ary 1988 , 2091 nodes had been created in roughly equal numbers of Issues , Positions , and Arguments across all of the issue groups . Issues Positions P . l ; : ‘lmentS ‘Jlllers : . t , r , , v . 0 100 200 300 400 500 600 700 800 900 Thirty one percent of the Issue nodes had no Positions and the remainder of the Issue nodes had , on average , 1 . 9 Po - sitions . On the other hand , 59 percent of the Position nodes had no Argument nodes , and the remaining Posi - tions had an average of 1 . 7 Arguments . Connecting these nodes were 2214 links , in the following proportions : Responds - to supports Objects - to Questions Replaces Generalizes Links : 0 100 200 300 400 500 600 700 800 900 While it is still to soon to draw any conclusions from these numbers , they do at least indicate that users had a greater tendency to post supporting Arguments than objecting ones , and that it was somewhat more natural to specialize nodes than to generalize them . Finally , we wish to indicate the levels of individual partici - pation within the fifteen largest issue groups during this trial period . Each issue group is shown with a code letter ( e . g . “A” ) , and the bars above that designator show the number of nodes contributed by each participant , with one bar per participant . Thus , issue group “B” had two par - ticipants , one of whom posted 190 nodes , the other of whom posted 30 . As the figure suggests , many issue groups were constructed largely by a single participant , while a few issue groups had reasonably balanced partici - pation . This reflects a pattern of glBIS usage that falls ABCDEFGHIJKLMNO into two categories : some people used the tool primarily as an isolated hypertext tool for structured thinking and de - sign , others used the tool primarily as a vehicle for struc - tured communication . The usefulness of explicit rhetorical structure . One early surprise about the IBIS method was that , while most people felt before they learned to use it that IBIS was awkward and overspecialized , many users of the gIBIS tool have come to regard IBIS as a powerful method for re - search thinking and design deliberation . Users who worked alone in an issue group reported that the Issue - Po - sition - Argument framework helped to focus their thinking on the hard , critical parts of the problem , and to detect incompleteness and inconsistency in their thinking more readily . Users who collaborated - in issue groups reported that the structure that it imposed on discussions was very useful , and’ served to expose “axe grinding , hand waving , and clever rhetoric . ” They also valued the tendency for assumptions and definitions to be made explicit . Some of these advantages can be traced to the semi - struc - tured nature of IBIS networks [ hfAL86 ] . The writer is aided in structuring a complete message without any con - straint on expressibility , while the reader is provided with recurrent structure in the textual material that aids both search and comprehension . Both reader and writer are aided by the explicit rhetorical structure of IBIS , which makes apparent at least the general structure of an unfold - ing discussion . Indeed , we feel that a distinct advantage stems from the particular structure that IBIS provides . That is , there is a good match ( though this will be difficult to prove ) between some of the cognitive structures and processes of design and the 3 node types and 9 link types that compose IBIS . However , as we press gIl3IS into service in an ever wider variety of design applications , we find that there are some major shortcomings . There is no specific node type for goals and requirements , and several users have requested support for these . There is no particular support for mak - ing a decision ( or reaching concensus ) among the various positions of an issue , and there is no way to indicate that such a decision has been made . Design decisions usually result in the addition of solution elements to the design itself ( e . g . code , module structure , etc . ) , but these ele - ments are not supported by gIBIS and must be stored ex - ternally to the tool , i . e . artifacts cannot now be integrated with ( i . e . linked to ) the decisions that lead to them . All of these extensions were anticipated during our theoretical work on the Design Journal , though our experiences with gIBIS are suggesting some changes to our theory of design rationale . The synergy of tool and method . We have observed an interesting synergy - - a mutual fa - cilitation between tool and method . The noncomputerized IBIS method is cumbersome , and would not have reached the popularity that it has here in our lab without the high speed gIBIS tool to support it . On the other hand , gIBIS is not the only hypertext system available in our environ - ment , and yet it has achieved a wider and more prolonged usage in a much shorter time than has PlaneText [ CON8 ? ] , the other system . We speculate that there is a particularly good match between the requirements of the IBIS method and the hypertext facilities of the gIBIS tool . For example , one of the clear successes of this project has been the use of color to indicate the type of the IBIS nodes and links . Perhaps this is in part because there are just a few distinct node and link types in IBIS , and each has a reasonably well - defined semantics , so that the browser display can use bright primary colors which , after some familiarization , come to have a strong association with the semantics . Evidently , despite its narrow design and rigid functionality , gIBIS provides facilities which can be quickly learned and appreciated by researchers working on ill - defined design problems . This experience has lead us to begin the design of a general hypertext system which would be a toolkit for building gIBIS - like systems . The basic functionality for such a system includes : typed nodes and links ( user defined ) ; customizable interface views of the network that exploit type and other information ; high - speed real - time interaction among coworkers in the hyper - document ; rapid global search of the entire network , both for node contents and network structure ; and strong sup - port for classificational heirarchies and composite nodes . The dangers of premature segmentation . One common but subtle difficulty in hypertext systems is that it is sometimes unnatural to break ones’ thoughts into discrete units , particularly when the problem is not well understood and those thoughts are vague , confused , and shifting . With gIBIS this effect is pronounced , because the IBIS method imposes a rather austere selection of node and link types on the user . In particular , design conversa - tions often feature commitments of the form , “Let’s try X - - it has advantage Y . ” Notice that this is a Position and its supporting Argument , with no Issue articulated for the Position . Some users have complained that they don’t al - ways see the Issue or Position immediately , and that they would like to have a “proto - node” to simply record ideas before structuring them . To some extent this complaint is to be expected : the tool supports a method which demands that one think within a particular framework ( e . g . focusing on issues without nec - essarily resolving them ) , and this can be disruptive . How - ever , even some users who are well familiar with the IBIS method still insist that they occasionally require support for recording unstructured material . As John Brown [ BR082 ] and John Smith [ Sh4I86 ] have both noted for the writing process , the early phase of con - sideration of a writing or design problem is critical and fragile , and must be allowed to proceed in a vague , contra - dictory , and incomplete form for as long as necessary . However , any insights and breakthroughs should be imme - diately ( and reversibly ) cap & u - able , and the tool should support the emergence of a coherent structure as that de - velops in the designer’s mind . Ultimately , of course , it will be valuable to have teased apart these elements into separate issues , positions , and arguments . But in the moment of struggling to solve the problem , the cognitive overhead required to segment the “muck” into discrete thoughts , identify their types , label them , and link them is prohibitive . We are considering providing a “brainstorming” mode in which it is easy to jot down snippets of text ( and perhaps graphical sketches ) , providing only minimal organization to these elements , This will lead to the development of tools to aid in the structuring of this “raw” material into the IBIS framework . 148 Capturing issue resolution . A somewhat complementary problem exists at the other end of the deliberation process : how should the resolution of an issue be represented and displayed ? The IBIS method suggests that an issue is resolved by selecting ( it does not matter how ) one of the positions that respond to it as being “the right answer , ” or at least “the position we are committing to for now . ” This could be represented as marking the Position node as “SELECTED , ” and could be displayed simply by marking such Position nodes distinc - tively in the browser , e . g . by giving them a somewhat dif - ferent color from unselected Positions . We have recently added this feature , but do not yet have enough experience with it to report on user acceptance . We combined indicating resolution with the aggregation in IPA nodes , so that once an issue’s discussion is aggregated into an lPA node one can indicate that the Issue is re - solved . At the moment , this is done by changing the value of the “Resolved : ” fietd to TRUE and adding a short piece of text indicating which of the Issue’s Positions was the one selected . as the resolution . However , we suspect that it will not always be sufficient to simply flag the selected Position . One reason is that the rationale for adopting a particular conclusion may require more explanation - - it may be that not all of the argumen - tation occurred within the gIBIS tool , or that there is a broader perspective for the resolution than that in which the pros and cons of the established Positions were argued . Similarly , the resolution of an issue sometimes transcends the fixed options which were originally perceived to be available . Such emergent resolutions often combine ele - ments of the original options , and often they abandon as - sumptions or presuppositions that were hidden in those options . Sometimes when such “breakthroughs” occur there is no need for further discussion - - it is clearly the right solution . gIBIS will need to allow for such leaps in the argument without unduly constraining the Issue to a well structured resolution . This may be as simple as pro - viding the kind of free text annotation of an Issue - Posi - tion - Argument tree described above , or it may require a facility for marking such discussions as “irrelevant in light of Position X” . A problem wlth context in non - linear documents . One of the chief elements of our experimentation with glBIS is to investigate the use of hypermedia as a medium for cooperative work . In some cases where several users worked cooperatively in a shared issue group an unex - pected problem emerged . Unless each author was careful to write clearly and completely , the readers found that , while they had a sense of understanding the individual nodes , they could not follow the thread of the writer’s thoughts as it wound through several dozen nodes . That is , there was the sense that the hypertext too1 forced ideas to be expressed in a fined - grained . separated manner , and that this obscured the larger idea being developed by the author . In one respect this is the familiar problem of cognitive overload common to many hypertext systems : the freedom of choice inherent in branching documents simply requires greater care from the writer and attention from the reader . Another factor could be the unfamiliar separation of Posi - tion and Argument ( i . e . idea and justification ) in IBIS . But we suspect that there is a related but more subtle issue here : that traditional linear text provides a continuous , un - winding thread of context as ideas are proposed and dis - cussed - - a context which the writer is directly , if uncon - sciously , constructing to guide the reader to the salient points and away from the irrelevant and distracting ones . Indeed , a good writer anticipates the questions and confu - sions that the reader may encounter , and carefully crafts the text to prevent these problems . The hypertext ( or at least gIBIS ) author , however , is being encouraged to make his or her points discrete , and to sepa - rate them from their context . Indeed , we have observed the problem that the gIBIS writer , being in a hurry to cap - ture a design issue and its analysis , sometimes writes only the bare minimum necessary to record the essence of the issue , positions , and arguments ( presumably with the in - tention of returning later to “clean up” the network and make their postings more readable ) . Even the careful author , however , is in danger of not anticipating all the various routes by which a reader may reach a given node , and SO may fail to sufficiently develop the context neces - sary to make the node’s contents clear , if not compelling . Several techniques may be useful in ameliorating this problem . The notion of a “path , ” described by Bush [ BUS451 and Trigg [ TRI86 ] , may provide a sufficient linearization that readers of the network can gleen a useful context from segments of a network . Also , we are experi - menting with higher level constructs that aggregate a set of nodes . The new IPA node type described above combines the display of all of the nodes of an IBIS subtree ( the Is - sue , its Positions , and their Arguments ) into a single node , and allows additional PA - specific text to be appended as well . This will linearize the discussions of individual is - sues and reduce the sense of fragmentation one sometimes has when reading a gIl3IS network , but it is probably not sufficient to create or restore the context in which those nodes were created . Finally , part of the context that the writer has in mind is the relative importance of the various points being presented , and we are investigating ways of incorporating a simple importance metric directly into gIl3I . S nodes . As a methodological experiment , gIBIS users are currently experimenting with providing one of the three keywords “HI IMPORTANCE” , “MED IMPOR - TANCE” , or “LO MPORTANCE” in each node they cre - ate . This measure could be used to guide the reader to the most salient points first ( see also [ LOWSS ] ) , as well as to control the level of clutter in the browser display . Annotative or “Meta” discussion + It is a commonplace of human conversations to “go meta” and make a comment on the process ( as opposed to the content ) of the discussion , for example , “But that isn’t the 149 issue here . ” Similarly , in IIUS discussions there is some - times a need for a meta - discussion when a participant in an issue group feels that someone has poorly or inac - curately used the IBIS structure to present their ideas . For example , if B feels that the content of A’s Issue node is in fact two Issues and a Position about one of the Issues , B needs some way to express this , and in fact to initiate a discussion about this “meta - - issue” with A within the con - text of the issue group . In fact , it has been noted that there are three levels of description for collaborative work : substantive ( the content of the work ) , annotative ( comments about substance ) , and procedural ( comments about procedures and conventions for use of the medium ) [ TRI86 ] . In an IBIS framework , all three levels can theoretically be treated as Issues and their argumentation . For example , in the case of B’s disagree - ment with A , B could post an Issue , connected by a “ques - tions” link to A’s Issue , asking “Isn’t this really 2 Issues and a Position ? ” While this is a perfectly valid move in the IBIS rhetorical framework , it has drawbacks . This Is - sue is by its nature meta - substantive , although it is un - clear whether it is annotative or procedural . But by plac - ing it in the network B creates an Issue that adds complex - ity to the browser display’ without illuminating the sub - stance of the problem being discussed , and initiates a dis - cussion that may well lead to a change in the network , after which the meta - discussion will have only historical interest . There are several ways of resolving this problem . One is to have special meta - level Issue , Position , and Argument nodes , so that these meta - discussions could be distin - guished from the substantive ones . Or we could provide a mechanism by which any node could be labelled as “only of historical interest ; ” such nodes could be archived , or at least have their display suppressed so that they would not normally be visible . Thirdly , we could provide each node with its own “meta - layer , ” so that discussions about the match of the node’s contents to its IBIS type would be tracked in this specialized part of the node , which again would only be displayed upon request . At the moment we are experimenting with a simple version of this third op - tion : any user may append a “meta - line” at the end of the body of any node , and may then begin an annotative or procedural discussion in that part of the node by entering his comments and signing them . The author of the node might append a response at the end of the node , or might simply revise the network to correct the structural error . Macro - level organization of the browser space . One of the “hot issues” in hypertext research is the prob - lem of the effective use of a graphical browser to navigate in networks that have more than a few dozen nodes . This is linked to the more general problem of disorientation [ CON87 ] , but bears particularly on the visual and spatial aspects of disorientation in a large data space . The gIBIS browser ran into these difficulties as well , of course , since the problem is largely independent of implementation . ( Note that the global view mechanism described above , which shows a highly reduced view of the entire network , was added after the data for this paper was gathered . Thus while this feature has enjoyed very high user satisfac - tion and acceptance , our observations here are based on use of the gIE3IS tool with only the small scale browser . ) In its current form the gIBIS browser must share the screen space with the node viewing and control panel win - dows , and so cannot occupy more than about half of the screen This provides the browser enough room to show no more than 40 to 50 nodes at one time . While this may sound like a lot of nodes , recall that the browser only dis - plays a very brief one or two word label . for each node in the browser - - to get any detail about a node requires mousing it and reading its contents in the node viewing window . For some users this made 40 - 50 nodes the largest network that they wanted to try to work in . Two users , however , developed a way to partially overcome the spatial disorien - tation problem . These users divided their networks into regions that were meaningful in the terms of the problem they were working on . Nodes were classified according to broad semantic features , and these features were also identified with regions of the browser canvas . For exam - ple , one user created a node , labelled “LAYOUT” , in which she placed a map of her network : Not . 8 I I I Msatlng Critlcal Requhmonts ( Introduction ) Crltlosllty Leveh 1 I One user’s node containing the browser layout map This technique has several advantages . Surprisingly , users reported that the effort of coming up with a layout re - vealed aspects of their problem that were not obvious be - forehand . But the map also organized their work within gIBIS , by easing the problem of deciding where to place new issues , and by providing a natural basis for finding nodes whose location and keyword information had been forgotten . This is an aid to navigation of large networks that the authors had never considered , and which we will pursue supporting directly in the tool . This experience has reminded us of the value of having “real users” testing out new tools . Coping with change in an evolving network . Any database has to have mechanisms for managing changes to the data it contains . Often this is at best a versioning scheme which allows older versions of the data to be marked and archived . In an application like gIBIS , however , the issue of change is of unusual importance , because the very nature of an “issue base” is that it is a vehicle for an evolving discussion in which older material 150 may be accurate and highly important , inaccurate and only of historical interest , or anything in between . For exam - ple , the original form in which an Issue was framed may have been biased toward a particular Position , or may have contained a presupposition that was later made ex - plicit and rejected . How should this “outdated” form of the Issue be handled ? In some cases the Issue and its discussion subnet may be isolated and simply wrong , in which case it will be easy to decide to archive that subnet and delete it . But more often there will be parts of the subnet that are wrong , mislead - ing , or irrelevant , and others which are still quite relevant or important to the network , and which are directly linked to network regions where discussion is quite active . How can these partially invalid discussion segments be pre - vented from “poisoning” the network ? The answer seems to have two parts . One is that we need mechanisms for systematically indicating the age and rele - vance of network material , such as displaying older nodes as yellowed or frayed - - unless of course they have been recently visited and updated . Like the mechanisms sug - gested above for importance , salience , and confidence , age and relevance would be somewhat subjective measures that could only be partially automated . The other mecha - nism for managing change is completely human - - as is - sue networks grow in size and importance , it will become increasingly important for organizations to have people whose job is to maintain the currency and hygiene of the issue base . CONCLUSIONS . We have described the IBIS method , the gIBIS tool , and some preliminary observations about the use of the tool . Our experiments with glBIS are informing our theory about the structure of design decisions and design ration - ale , and are providing us with important insights about the design of the Design Journal , a hypertext - based environ - ment for system engineering which we will continue to de - sign , prototype , and test in the next few years . More im - portantly , our experiences suggest that the computer is in - deed a powerful medium for collaboration and debate among members of a team , but that the integration of computers into the fine detail of real work is attended by some severe breakdowns . Some of the breakdowns are due to inadequate interfaces , others to inappropriate un - derlying representations , and still others to insufficiently rich models of work practices and methods . Our experi - ence with glBIS suggests that we are just at the beginning of a long but exciting path , which will culminate when we have succeeded in making such tools as effective and transparent in structuring communication as the telephone has grown to be in simply transmitting it . REFERENCES . [ BEN861 [ BR082 ] [ BUS451 [ CON871 [ DEH72 ] [ DIC86 ] [ EVE861 [ HAL871 [ HER851 [ HOR86 ] [ LOW851 [ NOR861 [ REI85 ] 3enbasat , I . , Dexter , A . and Todd , P . , “An zxperimental program investigating : olor - enhanced and graphical information Jresentation : An integration of the findings” . Commun . ACh4 ( 29 ) 11 . 1986 . 3rown , J . S . , “Notes Concerning Desired ? uncti , onality , Issues and Philosophy for an 4uthoringLand” . Xerox PARC CIS Working Paper , 1982 . Bush , Vannevar , “As We May Think , ” Atlantic Vonthly , No . 176 , pp . 101 - 108 , July 1945 . Conklin , J . “Hypertext : a Survey and Introduction” . I . E . E . E . Computer , Vol . 20 , No . 9 , September , 1987 . Dehlinger , ‘H . and Protzen , J . “Debate and argumentation in planning : An inquiry into appropriate rules and procedures” . Working paper # I 78 . Institut fur Grundlagen der Planung I . A . University of Stuttgart . Dickson , G . W . , DeSanctis , G . and McBride , D . J . , “Understanding the effectiveness of computer graphics for decision support : A cumulative experimental approach” . Commun . ACM ( 29 ) 1 . 1986 . Eveland , J . and Bikson , T . “Evolving electronic communication networks : empirical assessment . ” Proc . CSCW’ : : . MCCIACM conference on computer - supported cooperative work . 1986 . Halasz , F . , Moran , T . and Trigg , R . “NoteCards in a nutshell . ” Proc . ACM CHI’87 : Human factors in computing systems . 1987 . Hershey , W . “Idea Processors . ” BYTE . June , 1985 . Horton , M . and Adams , R ( Center for Seismic Studies , Arlington , Va . ) . “How to read the network news . ” Distributed by Mr . Adams quarterly over the USENET news network . Lowe , David G . “Cooperative structuring of information : the representation of reasoning and debate . ” ht . . I . Man - Machine Studies , Vol . 23 . 1985 . Malone , T . , Grant , K . , Lai , K . , Rao , R . and Rosenblitt , D . “Semi - structured messages are surprisingly useful for computer - supported cooperation . ” Proc . CSCW86 : MCCIACM conference on computer - supported cooperative work . 1986 . Norman , D . A . and Draper , S . W . ( ed . ) , User centered system design . Lawrence Erlbaum Associates , Publishers . 1986 . Reiss , S . “PECAN : Program development systems that support multiple views . ” IEEE Trans . Software Eng . ( SE - 11 ) 3 . 1985 . 151 w701 Rittel , H . and Kunz , W . “Issues as elements of information systems . ” Working paper # I 31 . Institut fur Grundlagen der Planung I . A . University of Stuttgart . [ SMI86 ] Smith , John B . , Stephen F . Weiss , Gordon J . Ferguson , Jay D . Bolter , Marcy Lansman , and David V . Beard , ‘WE : A Writing Environment for Professionals . ” Technical Report 86 - 025 , Department of Computer Science , University of North Carolina at Chapel Hill , 1986 . [ TRI83 ] Trigg , R . H . “A Network - based Approach to Text Handling for the Online Scientific Community . ” PhD . Thesis , University of Maryland , ( University Microfilms # 8429934 ) , 1983 . [ TRI86 ] Trigg , Randall , Lucy Suchman , and Frank Halasz , “Supporting Collaboration in NoteCards , ” Proceedings of CSCW ‘86 : the Conference on Computer - Supported Cooperative Work , MCCYSTP , Austin , Texas , December , 1986 . [ WIN861 Winograd , T . and Flores , F . Understanding computers and cognition : A new foundation for design . Ablex Publishing Corp . 1986 . 152