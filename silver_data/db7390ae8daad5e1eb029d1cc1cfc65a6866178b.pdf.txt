Customizing Lotus Notes to Build Software Engineering Tools Jun Ma , Holger M . Kienle , and Piotr Kaminski University of Victoria Victoria , Canada { majun , kienle , pkaminsk } @ cs . uvic . ca Anke Weber ExperEdge Technology Partners Victoria , Canada weber @ experedge . com Marin Litoiu IBM Toronto Labs Toronto , Canada marin @ ca . ibm . com Abstract Many software engineering research tools are stand - alone applications that have trouble in - teroperating with other development tools and do not ﬁt well into the software developers’ es - tablished work processes . Our main hypothesis is that in order for new tools to be adopted ef - fectively , they must be compatible with both existing users and existing tools . Typically , software engineering teams in an organization share a set of common appli - cations for their development activities that are a permanent part of each developer’s ev - eryday workﬂow . Among these applications are shrink - wrapped oﬃce tools such as Lotus Notes , which are used for , among other tasks , email , scheduling , and project reports and pre - sentations . These oﬃce tools , are highly inte - grated and oﬀer a mature , well - tested working environment , which can be customized to an extent that allows to provide support for ad - vanced software engineering tasks . This paper describes RENotes , a reverse engineering tool built by customizing Lotus Notes . RENotes targets software developers who use Notes as part of their work environ - ment . We describe Notes’ features and how they can be leveraged to layer new reverse engineering functionality on top . Keywords : Lotus Notes , customization , end - user programmable systems , tool adop - tion , collaboration , Rigi 1 Introduction It takes a lot of eﬀort to go from the con - ceptual design for a new software engineer - ing technique to the development of tools that supports the technique and ﬁnally adoption of the tool in industry . Researchers that strive to have their tools adopted struggle to de - velop tools that satisfy the requirements that software engineers in industry place on them . Common examples of adoption hurdles include diﬃcult installation , lack of documentation , unpolished / awkward user interfaces , and poor interoperability with existing tool infrastruc - ture . As a result , most research tools require a signiﬁcant learning curve while disrupting the established work process of the software engi - neer . Tool development is a signiﬁcant investment and should focus on the novel features of the tool . Unfortunately , the development of a base - line environment , albeit often trivial to ac - complish , requires signiﬁcant eﬀort before tool - speciﬁc functionality can be tackled . This is especially true for GUI - based tools that use a visual manipulation paradigm . In this paper , we outline a software devel - opment approach that leverages a widely - used , shrink - wrapped oﬃce tool—Lotus Notes— by building a software reengineering tool , RENotes , on top of it . Notes is the host ap - plication that provides the baseline environ - ment , including features such as document - based database , collaboration , search , and se - 1 curity . RENotes leverages Notes to provide software reengineering functionality such as ar - tifact ﬁltering and graph manipulation . We believe that tool implementations that follow this approach have desirable features from the user and developer point of view . Spinellis draws a similar conclusion for the ﬁeld of visual programming tools [ 21 ] : “As many visual programming en - vironments are research - oriented , proof - of - concept projects , they cannot easily compete with the commercially - developed , polished , and supported commercial IDEs . In contrast , visual programming based on the reuse of proven existing components in a widely adopted IDE levels the playing ﬁeld and allows research to focus on program representations and methodologies that can increase productivity rather than supporting infrastructure . ” The reminder of the paper is organized as follows . Section 2 gives more background in - formation that guides our research . RENotes , our case study , implements part of the func - tionality of the Rigi reverse engineering tool . Therefore , Section 3 gives a brief introduction of Rigi and its functionality . In Section 4 we further introduce Notes as the host application for the RENotes case study . We ﬁrst analyze the baseline environment that Notes provides and then discuss in Section 5 in detail how we customized Notes to build RENotes . Sec - tion 6 reviews related work . Finally , Section 7 summarizes our development experiences and RENotes’ potential of improved adoption . 2 Background This section discusses what we mean by tool customization and categorizes both the so - called host applications and the targeted users in more detail in order to provide a better un - derstanding of the requirements of our research . 2 . 1 Tool Customization A prerequisite for our proposed tool develop - ment method is that the host tool oﬀers sophis - ticated customization mechanisms . ( Such tools have been also referred to as user - tailorable computer systems [ 14 ] . ) Support for customization can be divided into non - programmatic and programmatic cus - tomization mechanisms . Non - programmatic customization is accomplished , for example , by editing parameters in startup and conﬁgura - tion ﬁles or with direct manipulation at the GUI level . Programmatic customization in - volves some form of scripting or programming language that allows the modiﬁcation and ex - tension of the application’s behavior . Program - matic customization is more powerful , but re - quires a signiﬁcant eﬀort . There is an initial cost in acquiring the necessary customization skills , followed by development and mainte - nance costs of the customization . It is an interesting question to what extent users customize their applications . Page et al . studied the customization changes that users made to the WordPerfect word processor [ 18 ] . A surprising 92 percent of users in their study did some form of customization , with 63 per - cent using macros . They summarize their ﬁnd - ings with “users who most heavily used their systems have the highest levels of customiza - tion” and “customization features that were simple to adapt ( like the Button Bar ) tended to have higher incidences of tailoring . ” The above study suggests that tool builders should expect that users want to customize their software ; thus , tools should oﬀer extensive customization support while making it simple and fast to use . An early commercial product that allowed users to create customized applications was Hy - perCard , thus making “everybody a program - mer” [ 8 ] . The Emacs text editor can be cus - tomized both by parameter setting and by pro - gramming in Emacs Lisp . Similarly , the Auto - CAD system can be customized with AutoLisp . An example of a highly customizable research tool is Rigi [ 24 ] [ 23 ] . The Rigi graph editor al - lows customization by exposing its graph model and user interface with a Tcl / Tk API . Further - more , Rigi graphs have a generic model that can be customized to diﬀerent domains . Spec - iﬁcation ﬁles describe the kinds of nodes and arcs that constitute a certain domain . Tool builders have recognized the impor - tance of making their software customizable 2 and by now many popular tools ( such as Mi - crosoft Oﬃce , Lotus Notes , Adobe Acrobat , and Macromedia Dreamweaver ) oﬀer scripting support and APIs to accomplish customization . This paper focuses on the customization of Notes . The feasibility of customization of Notes has been demonstrated by a number of large - scale projects . One such eﬀort reports the following experiences [ 12 ] : “Users and developers have been pos - itive about Notes . Advantages cited include the relative ease of learning how to develop basic applications , the relatively short development cycle— from a few days to a couple of weeks per applications—and the fact that users’ suggestions and feedback can be incorporated into the applications with relative ease and can be done on a continuous basis . ” 2 . 2 Host Applications The development approach that we describe grafts domain - speciﬁc functionality on top of highly customizable tool foundations—we call these tools host applications . There is a broad range of candidates for host applications . In our current research , we focus on oﬃce suites ( e . g . , Microsoft Oﬃce , Lotus SmartSuite , and OpenOﬃce ) and productivity tools ( e . g . , Lotus Notes and Microsoft Project ) . From the programmer’s point of view , these tools have commercial - of - the - self ( COTS ) char - acteristics . Other promising candidates are ex - tensible IDEs ( e . g . , Eclipse ) . We classify systems that use COTS compo - nents based on the scheme proposed by Carney [ 2 ] : turnkey : These systems use a single COTS component on which they heavily depend . Typically , customization is quite limited and non - programmatic . intermediate : These systems are also built on a single COTS component , but also “have a number of customized elements speciﬁc to the given application . ” The amount of customization can vary , but does not fun - damentally change the nature of the em - ployed COTS component and results in a moderate amount of newly developed cus - tomization code . mixed : These systems contain several ( het - erogeneous ) COTS components to provide large - scale functionality that is otherwise not available . They have a signiﬁcant amount of glue code and are often diﬃcult to develop and maintain . In our current research , we target intermedi - ate systems ( i . e . , only a single host application is selected and customization is done program - matically ) . 2 . 3 Target Users Another important consideration are the users that the application targets . Karsten [ 11 ] reviewed 18 case studies of organizations’ use of Notes and splits them into three groups : exploratory , expanding , and extensive use of Notes . Organizations with extensive use of Notes had the following commonalities [ 11 ] : “In all these cases , there were several applications that were tied directly into established work practices . Ap - plication development was conducted as a careful process , with prototypes and user involvement . ” Thus , in the best case , the host application is a fundamental part of the users’ work pro - cesses . Evidence of such a mission - critical tool are local developers ( “gardeners” ) that work on customizations for their group . This has been observed , for example , for CAD systems [ 6 ] . An other example is the IBM Toronto Lab , which has a dedicated development group to customize Notes . Host applications that are based on familiar oﬃce tools provide a number of potential ben - eﬁts to users : a familiar GUI : The user interacts with a fa - miliar environment and paradigm . Appli - cation knowledge ( a . k . a . cognitive support [ 26 ] ) has been typically built up by the user over years . Since the users are already familiar with the standard functionality , they can concentrate on learning the ad - ditional , domain - speciﬁc functionality ( in - crementally ) . 3 tool interoperability : Oﬃce tools interoper - ate among each other via cut - and - paste and ( ﬁle - based ) import / export facilities . tool support : Popular tools come with a large infrastructure that provides useful information to the user . For example , ( on - line ) publications discuss how to use a tool most eﬀectively . Mailing lists and discus - sion forums help troubleshoot users’ prob - lems . Stand - alone research tools are typically found lacking in all of the areas outlined above . 2 . 4 Selection of Host Applica - tions Selection of a host application is a trade - oﬀ de - cision . When deciding on a suitable host ap - plication , one typically has to choose among several possible candidates . A host applica - tion has to satisfy two main criteria : it has to ( 1 ) provide a suitable baseline environment for extension , and ( 2 ) be familiar to its tar - get users . The former criterion shortens the development life cycle while the latter can ac - celerate the adoption . Sometimes , these two criteria may conﬂict with each other . Our host application for RENotes is Lotus Notes . The decision to select Notes was based on its large user base in companies and its customization ﬂexibility . Although we did not formally eval - uate the trade - oﬀs , our observations and dis - cussions with developer at the IBM Toronto Lab hold up our assumptions . Notes appears to be the most pervasive application within the IBM Toronto Lab . Besides its use as a group and peer - to - peer communication infras - tructure , Notes is the host application for tens of customized applications used by the Lab em - ployees . About seven developers in the Lab are currently involved in development and mainte - nance of these applications . 3 The Rigi Reverse Engi - neering Tool In order to gain experiences and validate our tool development approach , we decided to build a reverse engineering tool on top of Notes that is similar to Rigi as a case study . Rigi has been under development for over a decade in our re - search group at the University of Victoria . Be - cause of our previous tool building experience with Rigi , we are already familiar with the ap - plication domain and can focus on understand - ing customizations with Notes . Figure 1 : The Rigi reverse engineering tool . Rigi is an interactive , visual tool designed for program understanding and software re - documentation . Figure 1 shows a snapshot of Rigi . The core of Rigi is a generic graph editor enhanced with domain - speciﬁc functionality for reverse engineering tasks . Rigi uses typed , di - rected graphs to convey information about the target software system . Nodes of the graph represent artifacts of the system ( e . g . , func - tions , variables , and types ) and directed arcs represent artifact relationships ( e . g . , functions calls , assignments to variables , and type decla - rations ) . A simple example of a Rigi view is the subject system’s call - graph . Nodes in the call - graph represent functions of the program and arcs represent calls between functions . Diﬀer - ent kind of nodes and arcs are visualized with diﬀerent colors . Rigi oﬀers operations to select and ﬁlter the arcs and nodes in a graph and al - lows to apply several graph layout algorithms . Even though Rigi can be customized with Tcl scripting , it is a stand - alone application that is not easy to integrate with other tools . Most no - tably , short of taking screenshots , Rigi graphs cannot be exported to other applications . This 4 is a severe drawback , because Rigi graphs are the main work products of the reverse engineer - ing activity , usually becoming part of the sys - tem documentation [ 27 ] . Leveraging oﬃce tools to build reverse en - gineering functionality seems a promising ap - proach because the reverse engineering process for a larger legacy system is both document - intensive and collaborative . An important problem is the task of organizing and archiv - ing of obtained reverse engineering results , so that they are available for future system evo - lution . As described in Section 4 , Notes has features that address these problems . 4 Lotus Notes / Domino Lotus Notes / Domino is a popular groupware product that is used by many organizations [ 10 ] . It is important to realize that Notes has more to oﬀer than email support . In fact , it is often mentioned as the main software for sup - porting collaboration and its use is extensively studied by researchers in the area of computer supported collaborative work [ 11 ] . Based on the client / server model , Lotus Notes / Domino is often used to construct an in - ternal information platform for an organization [ 4 ] . In this platform , all information is rep - resented as documents , which are stored and organized in databases . Domino acts as the server , providing database access ; Notes hosts the client applications that access the database . In Notes , shared databases are the backbone that enables collaboration among members in an organization . For many organizations Notes is a critical part of their IT infrastructure . An example is Statoil , a Norwegian state - owned oil com - pany [ 17 ] . Statoil has a full company license making it one of the world’s largest users of Notes . Five years after its introduction in 1992 , Notes had diﬀused to most of the company’s 17000 employees , and its use was made manda - tory . Statoil’s geographical distribution ( 40 - 50 sites ) makes collaboration - based features at - tractive . The following collaborative features of Notes are leveraged : email , document manage - ment , workﬂow , electronic archive , group cal - endar , news and bulletin boards , and discussion databases . IBM itself is another example of a company that uses Notes extensively . From our obser - vations at the IBM Toronto Labs , Notes has been customized for a wide variety of applica - tion , ranging from a simple carpool database to a project application that allows a devel - opment team to organize the work - products of their project . With the Domino Web server , Notes applications can be published on the Web . When an HTTP request accesses a database , Domino translates the document to HTML . Thus , certain applications can be made accessible with both Notes and a standard Web browser . At the Toronto Lab , Domino servers within the intranet allow Web access to appli - cations . 4 . 1 Features Before deciding on a host application , it is im - portant to understand its key features . The host’s baseline functionality and customization mechanisms determines its suitability for build - ing domain - speciﬁc functionality on top of it . Figure 2 : Lotus Notes mail application . The user leverages the following features of Notes’ baseline environment when using RENotes : User interface : Notes has a mature ( if id - iosyncratic ) user interface that has been consecutively reﬁned over six major re - leases . Figure 2 shows a snapshot of the 5 latest release , Lotus Notes 6 . The user in - terface includes a menu bar , a bookmark bar , a tool bar , a status bar and a set of window tabs . Tabs make it easy for user to switch to diﬀerent applications and databases . Most of the GUI elements can be customized . Furthermore , each tab has its own set of task - speciﬁc menu items and buttons . The mail tab , for example , has a button to compose a new email ( “New Memo” ) and a pull down menu with sev - eral options on how to reply to the cur - rently selected email ( “Reply” ) . Document - based database ( DBD ) : The documents in each database are organized with views and folders . In Notes , every document is a basic data unit that con - tains a set of data ﬁelds . In this respect , a document is similar to a record in a relational database ; however , a document in Notes can be composed of an arbitrary number of ﬁelds . Since all documents adhere to this schema , it is possible to access , manage , and manipulate diverse documents in a uniform manner . Notes databases support many data types , including text , pictures , sound , video , ﬁle attachments , embedded objects , and applets . Script automation : Users often take advan - tage of customization to automate work . A study about the customization behavior of 51 users in a Unix environment found that users “were most likely to customize when they discovered that they were do - ing something repeatedly and chose to au - tomate the process” [ 13 ] . Notes provides users agent and actions to accomplish automation . Actions are inte - grated into the GUI and activated by users ( e . g . , by pressing a button ) . Agents , which run on the server , can be triggered by cer - tain events ( e . g . , expiration of a timer ) . Collaboration : Typical Notes applications are message exchange , information shar - ing , and workﬂow . By sending and receiv - ing emails , members exchange messages in an organization . By accessing document in shared databases on servers , distributed information exchange , retrieval , storage , and consolidation is facilitated . Workﬂow applications guide users through certain tasks that they have to perform as part of their work . Such guidance can reduce overhead and mistakes , thus speeding up processes . Search : Notes has automatic search capabili - ties as well as full - text indexing support . Users can give keywords in the search bar to retrieve matching documents sorted by signiﬁcance . For example , users can search a certain folder in the mailbox database . Security : In many large organizations , access to information in databases needs ﬁne - grained access control as well as secu - rity mechanisms for authentication . Ev - ery Notes user has a digital ID and access can be granted at diﬀerent level , from the server down to individual document ﬁelds . 5 RENotes Case Study RENotes is our reverse engineering application that we built as a case study to gain experiences with our approach to tool - building . It lever - ages Notes features wherever possible , supple - menting them with custom functionality where needed . In this section , we describe RENotes’ architecture and implementation , list the sup - posed beneﬁts to its adoption , and relate our experiences with implementing and using the application . 5 . 1 Architecture and Implemen - tation RENotes has been implemented with standard three - layer architecture . Its major components are shown in Figure 3 . RENotes represents the structure of the system under examination with a typed , directed , attributed graph , similar to the one used in Rigi ( see Section 3 ) . The graph is initially produced using existing source code parsers ( e . g . , Rigi’s cparse for C , or the CPPX fact extractor for C + + [ 3 ] ) and saved in Graph Exchange Language ( GXL ) format [ 9 ] . GXL is a XML - based exchange format popular in the reverse engineering community . Its syntax is 6 deﬁned with an XML Document Type Deﬁni - tion ( DTD ) . Figure 3 : RENotes’ layered architecture . The generated GXL ﬁle can be imported into RENotes as a Notes database through a Java agent . In order to perform the transformation , the GXL ﬁle is parsed into an XML Document Object Model ( DOM ) tree . The XML DOM tree is then traversed and elements are con - verted into the Domino Object Model . Notes exposes its internal state with the Domino Object Model [ 25 ] . This model al - lows programmatic access to and manipulation of the databases and application services . It has been implemented for a broad range of lan - guages , including the Formula language , Lo - tus Script , Visual Basic , JavaScript , and Java . Each object deﬁnes a set of properties and methods . For example , the NotesDocument ob - ject represents a document in a database and has the method AppendItemValue to add a new ﬁeld to the document . The graph to database mapping is simple : each node and arc is mapped to a separate new document with an automatically gener - ated unique identiﬁer . The type and other attributes of each graph element are saved in the corresponding document’s ﬁelds . Figure 4 shows a database with a small graph of 14 nodes . During the import , the graph is also checked against a source code language - speciﬁc domain schema , encoded in XML and held in a separate Notes document . This ensures that the graph is well - formed and meaningful so that other tools can use it safely . Once the data has been imported , users can manipulate the documents with all the Figure 4 : Nodes in a sample RENotes database . usual Notes tools . They can search for spe - ciﬁc nodes or arcs by keyword ( cf . Figure 5 ) , or create ﬁltered , sorted views of the ( auto - matically indexed ) database based on complex queries . The documents can also be accessed through Notes’ standard automation features , allowing users to write ad - hoc scripts to per - form more complex operations such as bulk at - tribute changes or transitive closures on the system’s directed relationships . The user can also select from a set of predeﬁned scripts that perform typical reverse engineering tasks such as to ﬁnd all callers of a function or accessors of a ﬁeld . These existing scripts provide use - ful templates as a starting - point for users that want to write their own scripts . Access to the RENotes databases is con - trolled by Notes’ security features ; RENotes deﬁnes some common user roles with various degrees of privilege , restricting users’ actions with ﬁne granularity . All this functionality is leveraged unchanged from Notes and should be familiar to its users . 5 . 2 Visualization The generic textual list views provided by Notes are often not optimal for exploring the structure of a system , so RENotes provides a custom - built graphical visualization . The user 7 Figure 5 : Keyword search of a RENotes database . ﬁrst selects a subset 1 of nodes to visualize . Ref - erences to the nodes are gathered into a per - spective document from which the user can pop up the RENotes graph browser ( cf . Figure 6 ) . Figure 6 : Visualization of a RENotes database . The browser—written in Java using the open - source , Swing - based JGraph [ 1 ] graph editing toolkit and embedded in the RENotes database—provides a visual representation of the nodes and all relationships between them . All graphical elements are connected to the un - derlying Notes documents , using the domain 1 The subset may , in fact , be the whole graph . schema to map their properties to visual at - tributes . The browser oﬀers basic navigation , manipulation ( most notably ﬁltering of nodes and arcs ) , and layout controls to help the user investigate the system’s structure . When the user exits the graph browser , its state is saved in the corresponding perspective document , encoded as XML . This allows the developer to resume exploration of the graph in a subsequent session . Each perspective docu - ment thus represents a separate persistent view on the system graph ; the same node may be in - dependently present in many perspectives . The graph visualization can also be saved in Scal - able Vector Graphics ( SVG ) format [ 5 ] , so that it can be embedded into other documents or shared with people who are not using RENotes or do not have the access privileges necessary to open a perspective document . 6 Related Work There are other oﬃce tools besides Notes that are promising candidates for host applications . In related projects in our group we extend Mi - crosoft Visio and PowerPoint to visualize and manipulate Rigi graphs [ 16 ] . Other research , discussed in the following , has leveraged oﬃce tools as well to build software engineering func - tionality . Desert is an open tool environment con - sisting of several loosely coupled components [ 19 ] . One of these components is a spe - cialized editor for source code and architec - ture documentation . This editor is based on Adobe FrameMaker and uses a wide variety of FrameMaker’s functionality , such as syntax highlighting with fonts and colors , graphic in - sets , and hypertext links . FrameMaker is ex - tended via the Frame Developer’s Kit API . Riva and Yang have developed a software documentation process that uses Rigi to visu - alize software artifacts [ 20 ] . They used Rigi’s scripting capabilities to export this information to Visio as a UML model . The authors take also advantage of Visio’s ability to export Vi - sio UML drawings as HTML to Web - enable the documentation . The Visual Design Editor ( VDE ) is a domain - speciﬁc graph editor implemented with 8 VisualBasic on top of PowerPoint [ 7 ] . VDE personalizes PowerPoint with new pull - down menus and icons . The authors state : “Power - Point oﬀers a highly functional GUI for inter - actively designing presentation graphics . Vir - tually every part of that GUI is useful , without modiﬁcation , as part of our design editor . ” Tilley and Huang report on their experiences with an industrial client in implementing a soft - ware visualization and documentation system in Visio [ 22 ] . Visio was selected after evalu - ating the visualization capabilities of several candidate tools . The authors were constrained in their technology choices by the client’s poli - cies . For example , ”the company reasonably requested that professional support be avail - able for whichever tools were selected . This requirement immediately ruled out almost all academic and research tools . ” Among the iden - tiﬁed beneﬁts of Visio was that the client al - ready employed Visio in their development pro - cess and had a set of custom - developed stencils to represent their software artifacts . 7 Conclusions Even at this early stage , the RENotes project has generated some interesting insights and po - tential beneﬁts to adoption , though more work is necessary to evaluate the eﬀectiveness of our approach . 7 . 1 Development Experience Building our application in Lotus Notes rather than stand - alone has greatly reduced our de - velopment eﬀort . The beneﬁts of reusing Notes functionality more than oﬀset the overhead of adapting to a new development environment , reducing lines of code by an ( estimated ) order of magnitude . This also allowed us to build sev - eral prototypes to verify and test the feasibility of our ideas . The JGraph framework proved also very helpful : the graph browser application weighs in at less than 4000 lines of code . By com - parison , Rigi has about 30000 lines of C / C + + code , though it provides a richer feature set than RENotes does . Overall , the majority of the eﬀort was directed at leveraging the po - tential the Notes environment provides , as op - posed to writing new code from scratch . As with any framework , there are also some limitations . Notes does not let Java clients control its user interface , preventing the graph browser from tightly binding visualized node selection to a Notes document view . While other APIs ( for example , the Notes C API ) may aﬀord more control , we did not consider these languages suitable for rapid development of re - liable software . There are also potential issues with scaling RENotes to handle larger systems . While we did not try large - scale experiments , we are cautiously optimistic on this count since Notes’ database kernel has been reﬁned and op - timized over the last decade . 7 . 2 Beneﬁts to Adoption RENotes made substantial strides towards im - proved adoption by building on top of Notes . Notes’ relatively large user base ( as compared to research prototypes ) means that support is plentiful and basic training easy to obtain . Since RENotes reuses many of Notes’ features , the learning curve is signiﬁcantly lowered for existing users , and even new users beneﬁt from Notes’ support network . Notes also has a ma - ture , coherent user interface and many con - venient tools , such as search and ﬁlters . To - gether with Notes’ popularity , this should make RENotes more appealing to domain experts with no reverse engineering experience . Notes support for ad - hoc end - user pro - grammability is also critical to reverse engi - neering eﬀorts . Many reverse engineering tasks are tedious to perform manually and , if so ac - complished , cannot be recorded and reused . Notes is fully scriptable and even oﬀers users a choice of programming languages that cover the spectrum of formality , letting them pick a tool appropriate for the task at hand . The abun - dance of scripting options also makes it more likely that a user already knows at least one of them , further lowering the barrier to adoption , and comparing favorably with research proto - types that normally support at most one script - ing method . Building on Notes also lets us leverage its support for collaboration , which should become more important as reverse engineering projects 9 grow more complex . RENotes databases also integrate well into the Notes workspace and can be linked to other databases employed by the user . By providing GXL import and SVG ex - port capabilities , RENotes also integrates well with applications outside Lotus Notes , making it easier to ﬁt into an existing workﬂow . 7 . 3 Future Work In future work , we will add more of the Rigi functionality and reverse engineering capabili - ties to RENotes . Furthermore , we would like to conduct a user study with software engineers at the IBM Toronto Lab to gain a better under - stand if , and how , RENotes lowers the adop - tion barrier . Furthermore , we want to observe how eﬀectively Notes’ baseline environment is utilized by RENotes users and how users will integrate RENotes into their work environment and processes . The work on RENotes described in this pa - per is part of ACRE V1 . 0 [ 16 ] , the ﬁrst ver - sion of the software evolution environment un - der development at the University of Victoria as part of our Adoption - Centric Reverse Engi - neering ( ACRE ) project [ 15 ] . In addition to RENotes it consists of several other software visualization engines on top of various oﬃce products ( e . g . , Microsoft Excel , PowerPoint , and Visio ) . We plan to compare and evaluate our experiences with these approaches and use the implementations for user studies targeted to the question of how to further ( industrial ) adoption of research tools . Acknowledgments This work has been supported by the Natu - ral Sciences and Engineering Research Council of Canada ( NSERC ) , the Consortium for Soft - ware Engineering ( CSER ) , and the Center for Advanced Studies ( CAS ) , IBM Canada Ltd . About the Authors Jun Ma is a Master student in Computer Sci - ence at the University of Victoria , Canada . He received a B . E . from the Harbin Institute of Technology in China . His research interests include software engineering , XML technology , and CSCW . Holger M . Kienle is a Ph . D . student in Computer Science at the University of Victoria , Canada . He received a Master of Science degree in Computer Science from University of Mas - sachusetts Dartmouth and a Diploma in Infor - matics from University of Stuttgart , Germany . His interests include software reverse engineer - ing , exchange formats for re - engineering , pro - gram analyses , and domain - speciﬁc languages . Piotr Kaminski is a Ph . D . student in Com - puter Science at the University of Victoria , Canada . He received a Master of Science de - gree in Computer Science from the University of Victoria , and a Bachelor of Mathematics from the University of Waterloo , Canada . His interests include software engineering , aspect - oriented programming , the semantic web and human - computer interaction . Anke Weber is a principal of ExperEdge Technology Partners , an IT consulting com - pany based in Victoria , Canada . Prior to co - founding ExperEdge , she has gained a variety of experiences in the IT ﬁeld in positions as a co - ordinator for a European Union - funded project at the Paderborn Center for Parallel Computing , as a technical editor and writer at dSPACE Inc . , an international supplier of tools for developing and testing new mecha - tronic control systems , and most recently as a Software Engineering Research Associate in the Department of Computer Science at the Uni - versity of Victoria , Canada . She received her Master’s Degree in Computer Science from the University of Dortmund in Germany . Among here many roles , she appreciates most to work as a designer , editor , and writer in both the technical and non - technical worlds . Her cur - rent research interests include adoption - centric software engineering , web site evolution , and “live” systems documentation . Dr . Marin Litoiu is member of the Centre for Advanced Studies at the IBM Toronto Lab - oratory where he initiates and manages joint re - search projects between IBM and Universities across the globe in the area of Application De - velopment Tools . Prior to joining IBM ( 1997 ) , he was a faculty member with the Department of Computers and Control Systems at the Uni - versity Politechnica of Bucharest and held re - 10 search visiting positions with Polytechnic of Turin , Italy ( 1994 and 1995 ) , and Polytechnic University of Catalunia ( Spain ) , and the Euro - pean Center for Parallelism ( 1995 ) . Dr . Litoiu’s other research interests include distributed ob - jects ; high performance software design ; perfor - mance modeling , performance evaluation and capacity planning for distributed and real time systems . References [ 1 ] Gaudenz Alder . JGraph home page . http : / / jgraph . sourceforge . net / . [ 2 ] David Carney . Assembling large systems from COTS components : Opportunities , cautions , and complexities . In SEI Mono - graphs on the Use of Commercial Software in Government Systems . Software Engi - neering Institute , Carnegie Mellon Univer - sity , June 1997 . [ 3 ] Thomas R . Dean , Andrew J . Malton , and Ric Holt . Union schemas as a basis for a C + + extractor . Eighth Working Con - ference on Reverse Engineering ( WCRE ’01 ) , pages 59 – 67 , October 2001 . [ 4 ] Mike Falkner . Using Lotus Notes as an Intranet . Wiley , 1997 . [ 5 ] Jon Ferraiolo . Scalable Vector Graphics ( SVG ) 1 . 0 Speciﬁcation . W3C , Septem - ber 2001 . http : / / www . w3 . org / TR / 2001 / REC - SVG - 20010904 / . [ 6 ] Michelle Gantt and Bonnie A . Nardi . Gar - deners and gurus : Patterns of cooperation among CAD users . Conference on Human Factors in Computing Systems ( CHI 92 ) , pages 107 – 117 , May 1992 . [ 7 ] Neil M . Goldman and Robert M . Balzer . The ISI visual design editor generator . IEEE Symposium on Visual Languages ( VL ’99 ) , pages 20 – 27 , September 1999 . [ 8 ] Williams Gregg . Hypercard : Hypercard extends the machintosh user interface and makes everybody a programmer . Byte , pages 109 – 117 , December 1987 . [ 9 ] Richard C . Holt , Andreas Winter , and Andy Sch¨urr . GXL : Towards a standard exchange format . Seventh Working Con - ference on Reverse Engineering ( WCRE ’00 ) , pages 162 – 171 , November 2000 . [ 10 ] IBM . Lotus home page . http : / / www . lotus . com . [ 11 ] Helena Karsten . Collaboration and collab - orative information technologies : A review of the evidence . The DATA BASE for Ad - vances in Information Systems , 30 ( 2 ) : 44 – 65 , Spring 1999 . [ 12 ] Tung Lai Lai and Efraim Turban . One organization’s use of Lotus Notes . CACM , 40 ( 10 ) : 19 – 21 , October 1997 . [ 13 ] Wendy E . Mackay . Triggers and barriers to customizing software . Conference on Hu - man Factors in Computing Systems ( CHI 91 ) , pages 153 – 160 , April 1991 . [ 14 ] Allan MacLean , Kathleen Carter , Lennard L¨ovstrand , and Thoams Moran . User - tailorable systems : Pressing the issues with buttons . Conference on Human Factors in Computing Systems ( CHI 90 ) , pages 175 – 182 , April 1990 . [ 15 ] Hausi A . M¨uller , Margaret - Anne Storey , and Ken Wong . Leveraging cog - nitive support and modern platforms for adoption - centric reverse engineering ( ACRE ) . CSER Research Proposal , November 2001 . [ 16 ] Hausi A . M¨uller , Anke Weber , and Ken Wong . Leveraging cognitive support and modern platforms for adoption - centric re - verse engineering ( ACRE ) . 3rd Inter - national Workshop on Adoption - Centric Software Engineering ( ACSE 2003 ) , pages 30 – 35 , May 2003 . [ 17 ] Bjorn Erik Munkvold and Robert Anson . Organizational adoption and diﬀusion of electronic meeting systems : A case study . ACM 2001 International Conference on Supporting Group Work ( GROUP ’01 ) , pages 279 – 287 , September 2001 . 11 [ 18 ] Stanley R . Page , Todd J . Johnsgard , Uhl Albert , and C . Dennis Allen . User cus - tomization of a word processor . Con - ference on Human Factors in Computing Systems ( CHI 96 ) , pages 340 – 346 , April 1996 . [ 19 ] Steven P . Reiss . The Desert environment . ACM Transactions on Software Engineer - ing and Methology , 8 ( 4 ) : 297 – 342 , October 1999 . [ 20 ] Claudio Riva and Yaojin Yang . Genera - tion of architectural documentation using XML . 9th Working Conference on Re - verse Engineering ( WCRE 2002 ) , pages 161 – 169 , October 2002 . [ 21 ] Diomidis Spinellis . Unix tools as vi - sual programming components in a GUI - builder environment . Software—Practice and Experience , 32 ( 1 ) : 57 – 71 , January 2002 . [ 22 ] Scott Tilley and Shihong Huang . On se - lecting software visualization tools for pro - gram understanding in an industrial con - text . 10th International Workshop on Pro - gram Comprehension ( IWPC 2002 ) , pages 285 – 288 , June 2002 . [ 23 ] Scott R . Tilley . Domain - retargetable re - verse engineering II : Personalized user in - terfaces . 1994 International Conference on Software Maintenance ( ICSM ’94 ) , pages 336 – 342 , September 1994 . [ 24 ] Scott R . Tilley , Hausi A . M¨uller , Micheael J . Whitney , and Kenny Wong . Domain - retargetable reverse engineering . Conference on Software Maintenance ( CSM ’93 ) , pages 142 – 151 , September 1993 . [ 25 ] Tommi Tulisalo , Rune Carlsen , Andre Guirard , Pekka Hartikainen , Grant Mc - Carthy , and Gustavo Pecly . Domino De - signer 6 : A Developer’s Handbook . IBM Redbooks , December 2002 . [ 26 ] Andrew Walenstein . Improving adoptabil - ity by preserving , leveraging , and adding cognitive support to existing tools and en - vironments . 3rd International Workshop on Adoption - Centric Software Engineer - ing ( ACSE 2003 ) , pages 36 – 41 , May 2003 . [ 27 ] Kenny Wong , Scott R . Tilley , Hausi A . M¨uller , and Margaret - Anne D . Storey . Structural redocumentation : A case study . IEEE Software , 12 ( 1 ) : 46 – 54 , January 1995 . 12