Teaching the novice programmer : A study of instructional sequences and perception Douglas A . Kranch Published online : 10 May 2011 # Springer Science + Business Media , LLC 2011 Abstract Studies show that for many years courses teaching computer programming skills to novices have engendered a dislike for programming in many students . The first phase of this study presented identical content in one of three instructional sequences to 34 college students who were programming novices to determine which produced the greatest development of programming expertise . Learning was measured by performance on a Programming Assessment given immediately after the intervention , and effort and difficulty were self - rated during the instruction . There was no significant difference among the groups in Programming Assessment scores , and overall self - rated effort and difficulty of the instruction did not vary simply by rearranging the order in which the major elements were presented . However , instructional units that covered programming syntax skills and structures were rated by all groups as requiring significantly less effort and difficulty than units covering plans , and participants in all groups scored significantly higher on syntax skills and structures than on plans . The second phase sought evidence that there were differences in perception and the complexity of knowledge in long term memory between novices and experts programmers by comparing the fifteen top performing participants on the Programming Assessment with three programming experts in chunking a short program and in constructing the central solution statement to four programming problems . Experts chunked programs to twice the levels and twice as fast as novices , indicating differences in the mental organization of novices and experts . The implications of these results are discussed . Keywords Instructional design . Learning theory . Novice learner . Expertise 1 Introduction Teaching programming to novices has been a problem “ for almost 40 years ” ( Bennedsen and Caspersen 2008 p . 2 ) and significant enough to make the effective Educ Inf Technol ( 2012 ) 17 : 291 – 313 DOI 10 . 1007 / s10639 - 011 - 9158 - 8 D . A . Kranch ( * ) North Central State College , 2441 Kenwood Circle , Mansfield , OH 44906 , USA e - mail : dkranch @ ncstatecollege . edu teaching of programming one of the seven grand challenges of computing ( McGettrick et al . 2005 ) . The literature contains many studies citing the poor performance of students after completing their first programming courses ( e . g . , Kurland et al . 1989 ; Linn and Dalbey 1989 ; McCracken et al . 2001 ; Putnam et al . 1989 ; Soloway et al . 1982 ; Winslow 1996 ) . Programming courses are also regarded by students as difficult and have high dropout rates ( Robins et al . 2003 ) . While different instructional methods have been employed in the studies cited above , to date no study has directly compared the effectiveness and efficiency of the instructional sequences used in presenting programming material to novices . Is it better to begin with a strategic overview , to start with syntax details and work upward , or to work through entire programming concepts one at a time ? Knowing the effect of sequence on instructional effectiveness can help instructional designers avoid sequences that make learning unnecessarily difficult in an already difficult domain . Further , knowing the differences in how novices and experts analyze programs and solve programming problems can help experts understand what novices focus on and avoid expecting more from them than they can give . This paper reviews a study comparing three instructional sequences for teaching programming concepts to novices and some differences in the thinking processes of novices and experts . Varying the sequence did not change what novices learned , but it did affect the difficulty they experienced in learning it . One cause could be the focus novices place on the surface features of a domain . The study also confirmed that experts analyze written programs faster and to a higher level of complexity than novices and suggestions are made on how this could impact their expectations of students . 2 Literature review Expertise in a domain begins with trained perception , so that what one sees and the way one sees it become more selective . De Groot ( 1965 ) was the first to link perception to chess expertise . While tracking the eye movements of expert and intermediate level chess players , Charness et al . ( 2001 ) found that chess experts rapidly scanned piece groupings to give them an initial overview of the game . Boschker et al . ( 2002 ) concluded that expert climbers were better able to identify affordances in the upper and middle areas of a climbing wall than novices . Such a practiced scan is vital to expertise . Gobet and Jackson ( 2002 ) were able to mimic elements of novice performance by disabling eye movement heuristics ( i . e . , the practiced scan ) from their simulated chess expert CHREST . Efficient use of working memory is also critical . Being limited to about four independent elements ( Cowan 2000 ) , the working memory required to hold information about a subject area must decrease to leave working memory available for reasoning through problems ( Van Gog et al . 2005 ) . Chase and Simon ( 1973 ) concluded that chess experts ’ long term memories organized conceptually - related groups of pieces into “ chunks ; ” thus , the number of total pieces an expert ’ s short - term memory could contain became the sum of all the pieces contained in the chunks . The term chunk had its origin in Miller ( 1956 ) , who defined it as information held as a unit in working memory . This study similarly defines a chunk 292 Educ Inf Technol ( 2012 ) 17 : 291 – 313 as a collection of data elements of any size that is perceived and manipulated in working memory as a unit . Chunks provide the means for generating new ideas from vertical associations of constituents , linking broad concepts to their elementary constituents in a hierarchy of ideas . Both the number and size of chunks in long - term memory increase with experience in a domain ( Sweller and Chandler 1994 ) . Saariluoma and Laine ( 2001 ) noted that novices first learning a skill quickly master the basic elements , as these are few and make little demand on short - term memory . As expertise increases , short - term memory must accommodate the increasing numbers of chunks that are required for more complex tasks . Countering this increase in need for short - term memory is the tendency Gobet and Simon ( 2000 ) saw for chunks representing specific problems to coalesce over time , resulting in fewer , larger chunks per solution . By gathering and combining together ideas into new chunks , the mind can experience constant accretion as ideas became increasingly layered ( Wickelgren 1999 ) , forming schemas . Sweller and Chandler ( 1994 ) asserted that the principle means of reducing working memory load ( beyond simple conditioning ) are schema acquisition and automatization . They defined a schema as information organized according to how it will be used . In this study , a schema is chunks of information organized in such a way that the identification of a few chunks in the schema results in the automatic recall of the remaining chunks ( Cowan 2000 ) . As schemas are repeatedly applied , they become automated , further reducing working memory load by executing directly from long - term memory ( van Merriënboer and Sweller 2005 ) . That expertise relies on both trained perception and knowledge organization is a common finding in studies from diverse domains . Garland and Barry ( 1992 ) in a recall study involving play diagrams presented to football experts , non - experts , and novices concluded that skilled performance required an immediate linkage of perceived patterns with conceptual categories in long - term memory . Eckert and Stacey ( 2003 ) concluded that garment designers first sought out patterns and then created memory units based on those patterns . Complex memories such as faces and stories could be reconstructed by combining a few key details in the pattern that stand out with stereotype elements filling in the remaining details . Pattern making seems such a strong proclivity that , as Cowan ( 2000 ) noted , simply focusing on several items simultaneously appeared to link them as a single unit . The order in which chunks are encountered can profoundly influence what is both learned and recalled ( Gobet and Wood 1999 ; Gobet 2005 ) . They must be presented in both an order that facilitates learning and at an appropriate difficulty . The order is of utmost importance as the incoming chunk order establishes the organization of those chunks and there is “ no opportunity for global reorganization ” ( Gobet 2005 p . 196 ) of those chunks once established . Gobet and Chassy ( 2008 ) proposed that knowledge chunks already formed in memory exert such an influence over the mind that they steer the focus of attention , thus determining what will be perceived and learned . In experiments with the EPAM computer model of perception and memory , if EPAM saw little variety in its problems , templates and similarity links failed to develop . Correcting this problem required a “ massive and costly restructuring of knowledge ” ( p . 205 ) . Programming follows the general pattern of expertise development in that attention is gradually trained to shift from the surface features to the functional Educ Inf Technol ( 2012 ) 17 : 291 – 313 293293 features of a programming language . Corritore and Wiedenbeck ( 1991 ) found that novices were rooted in syntactic details and seldom used real world domain referents in describing programs they did not write . Adelson ’ s ( 1981 ) novices tended to recall memorized code lines grouped by their syntactic roles : headers , conditional statements , assignments , loop statements , and returns . Spohrer and Soloway ( 1988 ) divided errors in programs novices wrote into those that were construct - based and those that were plan - based . Construct - based problems arose from misunderstandings of language semantics , similar in effect to the natural language confusion Bonar and Soloway ( 1985 ) observed . For example , novices treated surface similarity between a programming language and natural language as if they implied functional similarity , and they imparted to computers a human - like ability to understand their intentions . When logic fails them , novices tend to resurrect code from prior solutions and change it randomly until the program compiles , seldom able to explain what they did ( Gaspar and Langevin 2007 ) . Experts have trained their perception and organized their knowledge according to overall plans and code function . When asked to memorize code words and lines , experts recall the material in groups related by function ( Adelson 1981 ; Davies et al . 1995 ; McKeithen et al . 1981 ) . As they examine already written code , experts first surmise what the program does based on its name , description , or other “ skimpy sources ” ( Wiedenbeck 1986 p . 57 ) , then generate an anticipated outline the structures and functions and look for “ beacons ” ( Wiedenbeck 1986 p . 56 ) , “ syntactic markers ” ( Davies et al . 1995 p . 241 ) , or “ focal lines ” ( Rist 1989 p . 397 ) that confirm their expectations . It does not seem unreasonable to conclude that such function - centered focal lines could be , as McKeithen et al . ( 1981 ) remarked , “ pegs on which the details of the program hang ” ( p . 324 ) . Expertise grows as more function - based “ pegs ” are acquired . Experts begin reasoning at a solution - wide level because of their experience . Soloway ( 1986 ) suggested that this experience added a storehouse of stereotypical plans and solution strategies that they select , alter , and merge as needed . Rist ( 1989 ) also saw the use of plans as a strategy that signified expertise . His novice programmers used forward - moving , top - down program development to produce small - scale program units that could be worked into the complete program in a bottom - up manner . As expertise increased , Rist ’ s ( 1989 ) programmers began coding at higher levels using previous plans as a basis in a top - down forward development until they could produce an abstract plan for a complete solution before coding it . Novices , focused as they are on surface features and rules , would be served best by a direct approach to instruction that emphasizes those features and rules . There are three significantly different presentation orders suggested in the literature for direct instruction . Gagné et al . ( 1988 ) recommended a sequence based on skill hierarchies in which all prerequisite skills are presented and mastered before skills dependent on them are introduced . This instructional sequence is called the elements - to - plans sequence in this study . A second sequence advocated by Reigeluth and Stein ’ s ( 1983 ) elaboration theory centers on the epitome , a concrete application that presents a small number of the essential ideas related to a single type of course content ( concepts , procedures , or principles ) . Such a whole task approach advocates teaching from the beginning all the knowledge and skills required to complete the task rather than introducing 294 Educ Inf Technol ( 2012 ) 17 : 291 – 313 concepts individually and amalgamating them toward the end of instruction ( van Merriënboer et al . 2003 ) . Concepts are taught from simple to complex , making sure that “ each of these ideas is directly preceded by all of its learning prerequisites that have not yet been mastered by all of the target learner population ” ( Reigeluth and Stein 1983 p . 365 ) . This study calls this learning sequence the elaboration sequence . A third sequence is advocated by Soloway et al . ( 1982 ) , who suggested guiding novices ’ natural language logic by packaging expert knowledge as standard solutions or plans . Soloway ( 1986 ) advocated teaching novices to break down the problems into parts that match these canned plans , determine which plans were most appropriate to apply , and then combine the plans into a single comprehensive solution . Soloway ’ s ( 1986 ) method would teach novices these canned plans and the means to amalgamate them into a coded solution . This learning sequence is called the plans - to - elements sequence in this study . The cognitive load each places on students is equally critical when learning efficiency is considered . Three types of cognitive load have been identified : intrinsic , extrinsic and germane . Intrinsic cognitive load is determined by the minimum number of elements that must be held in working memory simultaneously so that understanding can occur ( Schnotz and Kürschner 2007 ; Sweller and Chandler 1994 ) . For example , the programming terms used and the logic that binds them can overwhelm the novice in their variety and thereby increase the intrinsic cognitive load needed by a novice programmer learning the material . Extrinsic load results from element interactivity at or exceeding working memory limits , irrelevant information , or effort unrelated to solving the problem . Germane load represents effort expended in schema construction and automatization and as such is considered to be a beneficial ( Schnotz and Kürschner 2007 ) . Increasing germane load would be considered good as long as the total cognitive load ( considered the sum of the intrinsic , extrinsic , and germane loads ) did not exceed the limit of the learner ’ s working memory . The first question investigated in this study was from which of the plans - to elements , elements - to - plans , and elaboration learning sequences would novices learn in the most effective and efficient manner . This study follows Paas and Van Merriënboer ( 1994 ) in defining learning efficiency as the amount of learning achieved divided by the perceived effort . The second question was whether novice preference for any of the sequences was rooted in how novices learn a new domain . To this end , an attempt was made to quantitatively measure differences between novice and expert analysis of a previously written program and the starting point for writing new programs . 3 Research design The study employed a mixed methods design . First came a three - group experimental design to examine which of three instructional sequences would best improve the programming skills of novice programmers . Ten days later , a follow - up study using a grounded theory design compared the development of the mental concepts of programming in participants who achieved the top five assessment scores from each instructional sequence in the first study with expert programmers . The purpose of the Educ Inf Technol ( 2012 ) 17 : 291 – 313 295295 second study was to probe for quantifiable differences in how novices and experts differed in their analysis of an already written program and in writing new programs . The study took place at a Midwestern two - year college and was approved by the Institutional Review Board of the college . Facilities were provided by a computer laboratory containing the required hardware and software for the programming lesson . The study sample ( N = 34 ) was recruited by personal solicitation from entering nursing and Computer Information Systems ( CIS ) students . Nursing students were recruited to represent students who were naïve to computer use beyond word processing and other widely - used applications . Participants received a small stipend for their participation . The first portion of the study used an online instructional program whose 52 Web pages covered the basic programming structures of sequence , selection , and repetition in the Visual Basic programming language . To provide uniform content , the same 52 single - concept Web pages were arranged into an elements - to - plans , elaboration , and plans - to - elements sequences . Each sequence was further divided into three units to provide two short breaks to complete effort and difficulty rating sheets . The laboratory contained three rows of computers and each row was loaded with one of the three sequences . Participants were randomly assigned to a row ( and thereby a sequence ) as they entered the laboratory . Participants remained in the laboratory during the entire instructional unit and had no interaction with each other or with the proctor except to receive and return the study materials . The time required to complete the three units for participants who documented times for all three units varied from 33 min to 177 min ( N = 25 , M = 86 . 04 , SD = 33 . 243 ) . The design of a typical presentation page is shown in Fig . 1 . The text in each page presented a single topic without requiring the learner to scroll . Two types of interaction were provided . The first allowed the participant to insert values into text Fig . 1 Layout of a web page used for syntax units in the instructional sequences 296 Educ Inf Technol ( 2012 ) 17 : 291 – 313 boxes and select an operator in the programming statement at the top of the page . Free play with these practice programs was encouraged to give participants experience with structures without the frustration of writing and correcting code . When the participant clicked the “ Run ” button , the statement would be executed using the values inserted by the participant . The second type of interaction was provided by interactive questions that let the participants check their understanding of the concepts . None of the answers to these questions was recorded . To insure that the three groups were statistically equivalent , general mathematical competence , programming self esteem , and hours spent playing computer games were measured using the students ’ entry math course placement , a modified Rosenberg Self - Esteem Scale and the Ramalingham - Wiedenbeck Computer Self - Efficacy Scale , and self reporting , respectively . These factors have been shown by Bergin and Reilly ( 2006 ) to be important predictors of success in programming courses . Table 1 shows the demographics for the sample as a whole and for each learning sequence . Mental effort and mental difficulty were self - rated on a 9 - point scale by the participants at the end of each of the three instructional units in each sequence . Mastery of the skills taught in the units was measured by a Programming Assessment divided into three sections . The first nine items assessed knowledge of programming syntax , the set of rules governing the use of a computer language and defining its surface features , program operations , and flow of control . The next six items assessed knowledge of programming the three foundational structures : sequence ( one programming line executing another in the order written ) , selection ( decision making based on a true / false test ) , and repetition ( looping based on a true / false test ) . The last ten items assessed knowledge of programming plans , canned programming solutions ( Soloway 1986 ) that solve a class of problems . All data submitted by participants underwent screening to ensure freedom from coding errors . The second portion of the study began by benchmarking expert performance and schema organization . The experts in the benchmarking study were a sample of convenience of local professional programmers . Expertise was determined using years of experience ( Pennington 1987 ; Campbell et al . 1992 ) . The three experts had a mean programming experience of 23 . 67 years and were conversant in at least four different programming languages . Each expert worked individually with the researcher in a quiet , well - lit room apart from others and were videotaped as they Table 1 Participant demographics Group Sample size Gender Major Female Male CIS Other General 34 14 20 21 13 Elements - to - plans sequence 12 6 6 8 4 Plans - to - elements sequence 11 5 6 8 3 Elaboration sequence 11 3 8 5 6 Educ Inf Technol ( 2012 ) 17 : 291 – 313 297297 completed the instruments . The experts first circled the lines of a previously written program that they believed went together as chunks . The experts were then asked to write the most important or key or central statement that would be needed to solve four problems : a Two Numbers Problem ( adding two numbers together ) , a Summing Problem ( summing a series of numbers ) , a Tag problem ( printing as many name tags as desired ) , and a Conversion Problem ( converting a score to a letter grade ) . The problems were rated for all participants on a 7 - point scale developed by the researcher and grounded in the answers given by the participants as follows : 0 No answer 1 Describe variables and features ( Syntax ) 2 Code variables or features ( Syntax ) 3 Describe prompt or outer loop ( Syntax ) 4 Code prompts or outer loop ( Syntax ) 5 Describe central calculation conceptually ( Structure ) 6 Write code for central calculation ( Syntax and Structure ) 7 Write working code for central calculation and describe plan ( Syntax , Structure , Plans ) The intention was to capture the solution level that first occurred to the participants as a reflection of the complexity of the problem solving schemas employed ( van Merriënboer and Sweller 2005 ) . The video recording was used together with the written results to develop a protocol that was used to analyze the results . Participants who achieved the top five Programming Assessment scores from each of the three instructional sequences also completed the chunking and program writing instruments . These participants were selected based on the assumption that the 15 participants with the highest Programming Assessment scores also underwent the greatest mental restructuring toward expertise . Comparing the results of these participants with those of experts allowed the greatest developmental differences among the three instructional sequences to be examined . 4 Results 4 . 1 Learning and the instructional sequences All statistical results were calculated using SPSS Statistics 18 software . Table 2 shows the mean percent of questions correct for each item type for all participants Table 2 Descriptive statistics for programming assessment subtotals Subtotal N Mean Std . Dev . SEM Syntax subtotal percent correct 34 60 . 6862 22 . 73545 3 . 89910 Structure subtotal percent correct 34 45 . 7838 22 . 40216 3 . 84194 Plans subtotal percent correct 34 30 . 8235 22 . 08588 3 . 78770 298 Educ Inf Technol ( 2012 ) 17 : 291 – 313 combined . The mean percent correct for all syntax questions combined was 60 . 6862 % , for all structure questions combined 45 . 7838 % , and for all plans questions combined 30 . 8235 % . A paired samples t test showed that participants as a group received significantly lower mean subtotals ( p < . 001 ) on the Programming Assessment as they passed from the syntax to the structure items , and again from the structure to the plan items . A one way ANOVA among the three learning sequences , however , showed that there was no significant difference in percent correct by subtotal ( p > . 05 ) , indicating that all learning sequences resulted in similar drops in scores as participants moved from the simpler syntax items to the more complex plan items . A Scheffé test confirmed that there were no significant differences between individual sequences ( p > . 05 ) . Thus , all of the instructional sequences in the study yielded statistically equal programming assessment scores for the novice programmers . Averaged over the entire instructional program , an ANOVA by instructional sequence revealed no significant differences in mean effort ( p = . 152 ) or mean difficulty ( p = . 261 ) . When the units are examined individually , however , a different picture emerges . Figure 2 shows graphically the mean unit effort ratings for the three learning sequences and , hence , the intrinsic load produced by each unit ( DeLeeuw and Mayer 2009 ) . Unit 1 of both the elements - to - plans and elaboration sequences contained content related to syntax elements and were rated at 5 . 50 and 5 . 27 respectively , but the remaining elaboration sequence units saw intrinsic load as reflected by perceived effort increase significantly ( p = . 002 ) to 7 . 00 for unit 2 and increased significantly again ( p < . 001 ) to 8 . 36 for unit 3 . The elements - to - plans sequence dropped insignificantly ( p = . 529 ) to 5 . 17 for unit 2 but then increased significantly ( p < . 001 ) to 7 . 45 for unit 3 . The plans - to - elements sequence began with high intrinsic load of 7 . 18 in unit 1 , which contained exclusively strategic planning content , then dropped significantly ( p = . 001 ) to 4 . 27 for unit 2 that contained structure elements , and then rose again significantly ( p = . 018 ) to 5 . 91 for unit 3 with syntax content . For all three sequences , intrinsic load was high for units containing Fig . 2 Mean effort reported by participants in the elements - to - plans , plans - to - elements , and elaboration sequences for the three instructional units Educ Inf Technol ( 2012 ) 17 : 291 – 313 299299 plans content as reflected by a mental effort rating of 7 or more , while it was near 5 for units with syntax content . The self - rated difficulty scores shown in Fig . 3 show almost identical mean ratings by sequence and unit as the self - rated effort scores . The difficulty ratings indicate that more germane load was experienced in units with program plan content than unit with syntax elements content ( DeLeeuw and Mayer 2009 ) . There was also a high degree of correlation between the effort and difficulty ratings for unit 1 ( r = . 928 , p < . 001 ) , unit 2 ( r = . 900 , p < . 001 ) , and unit 3 ( r = . 963 , p < . 001 ) . That effort and difficulty were rated nearly identical by participants may suggest that participants may not have discriminated clearly between the two terms , but DeLeeuw and Mayer ( 2009 ) also had a high correlation between the two and concluded that the two ratings measured different types of cognitive load . 4 . 2 Indicators of mental organization The second part of this study explored evidence for differences in how novice and expert programmers organize and apply their programming knowledge . Experts focus on the underlying functionality of the code ( Adelson 1981 ) , and this should be reflected in a higher number of perceived chunks that are based on both syntactic markers and functionality ( Davies 1994 ) . The number of chunk layers ( i . e . , chunks within chunks ) should reflect the number of levels at which the participant can envision the program ’ s functionality ( Davies 1994 ; Davies et al . 1995 ; Rist 1989 ) . The number of programming lines in each chunk was counted as the chunk size . A large mean chunk size should reflect a consideration of the more global functions of the program ( Saariluoma and Laine 2001 ; Sweller and Chandler 1994 ) . A large mean chunk size coupled with a large number of chunks would reflect an ability to see both the global and local organization of a program . Table 3 displays the descriptive statistics for the chunking measures considered as indicators of the participant ’ s mental organization of the program . An ANOVA Fig . 3 Mean difficulty reported by participants in the elements - to - plans , plans - to - elements , and elaboration sequences for the three instructional units 300 Educ Inf Technol ( 2012 ) 17 : 291 – 313 performed on the results with a Scheffé post hoc test indicates no significant difference for number of chunks , number of chunk levels , or mean chunk size among the learning sequences ( p > . 593 ) . Insofar as the chunking measures indicated progress toward expertise , novice participants performed equivalently across all sequences . There were also no significant differences between novice and expert participants in number of chunks or mean chunk size ( p > . 136 ) . However , two important differences appeared between novice and expert participants . The first was the number of chunk levels ( p = . 014 ) . This difference indicates that the experts were able to analyze a previously - written program to a greater number of levels than novices and that the experts possessed a mental organization of programming knowledge that moved its focus to more levels of detail within a program than the novices . The second significant difference was the time interval between chunks , defined as the number of seconds between the time a participant ’ s pen left the paper after circling one programming chunk and the time when the pen met the paper to begin circling the next chunk . The interval was not considered ended until the participant had actually begun drawing the next chunk , so that both hesitation and multiple pen drops were included in the interval time . Since interval times varied over a wide range , the between - chunk times were grouped into intervals of 10 s for novices and 5 s for experts . Figure 4 shows the histogram for novice participants ( M = 38 . 88 , SD = 40 . 78 ) and Fig . 5 that for expert participants ( M = 18 . 52 , SD = 18 . 19 ) . The two graphs have a similar look even though the time span for novice intervals is twice that of expert intervals . Table 4 helps to reinforce the similarity between the histograms . Despite the difference in time spans , the cumulative percentages remain within a few points of each other until all expert between - chunk times have been accounted for by the 65th second . The histogram and the table point out two important comparisons : ( a ) the novice participants took about twice the time between chunks to identify the next chunk , and ( b ) novices took at longest three times as many seconds as experts to identify the next chunk . Chunk strategies can be compared by the program code words participants used to mark the chunk boundaries . Table 5 presents an independent samples t test for these Table 3 Descriptive statistics for novice participant chunking data Source Learning sequence n M SD Median Mode SEM No . chunks Elements - to - plans 5 7 . 60 2 . 408 9 . 00 5 1 . 077 Plans - to - elements 5 6 . 00 2 . 739 6 . 00 2 1 . 225 Elaboration 5 6 . 40 2 . 074 6 . 00 4 . 927 Combined 15 6 . 67 2 . 350 6 . 00 5 . 607 No . chunk levels Elements - to - plans 5 1 . 80 . 837 2 . 00 1 . 374 Plans - to - elements 5 1 . 40 . 548 1 . 00 1 . 245 Elaboration 5 1 . 80 . 837 2 . 00 1 . 374 Combined 15 1 . 67 . 724 2 . 00 1 . 187 Mean chunk size Elements - to - plans 5 7 . 3240 3 . 49401 7 . 5600 3 . 10 1 . 56257 Plans - to - elements 5 8 . 2840 4 . 89561 6 . 0000 4 . 00 2 . 18938 Elaboration 5 9 . 4080 3 . 29214 9 . 0000 6 . 40 1 . 47229 Combined 15 8 . 3387 3 . 76995 7 . 5600 3 . 10 . 97329 Educ Inf Technol ( 2012 ) 17 : 291 – 313 301301 boundary pairs that compares the means of novices and experts . Only pairs that were used by both novices and experts are shown . The statements that begin and end each chunk are separated by slashes in each chunk boundary pair . Of the boundary pairs used by both novices and experts , only the WHILE / END WHILE showed a significant difference ( p = . 012 ) in use . Although Table 6 shows only a small difference in the percentage of WHILEs used to begin chunks ( 36 . 3 % vs . 36 . 7 % ) and END WHILEs Fig . 4 Novice participant chunk intervals showing the percent of total chunk intervals within the span of each given interval Fig . 5 Expert participant chunk intervals showing the percent of total chunk intervals within the span of each given interval 302 Educ Inf Technol ( 2012 ) 17 : 291 – 313 used to end chunks ( 48 . 0 % vs . 43 . 3 % ) by novices and experts , novices paired WHILE and END WHILE with statements other than each other often enough to make expert use of the WHILE / END WHILE pair significantly greater than novice use . Table 4 Comparison of percent of between - chunk intervals of given spans for novice and expert participants Novice participants Expert participants Span in seconds Percent Cumulative percent Span in seconds Percent Cumulative percent 0 – 10 25 . 24 % 25 . 24 % 0 – 5 23 . 33 % 23 . 33 % 11 – 20 28 . 16 % 53 . 40 % 6 – 10 26 . 67 % 50 . 00 % 21 – 30 8 . 74 % 62 . 14 % 11 – 15 10 . 00 % 60 . 00 % 31 – 40 8 . 74 % 70 . 87 % 16 – 20 3 . 33 % 63 . 33 % 41 – 50 3 . 88 % 74 . 76 % 21 – 25 3 . 33 % 66 . 67 % 51 – 60 5 . 83 % 80 . 58 % 26 – 30 13 . 33 % 80 . 00 % 61 – 70 1 . 94 % 82 . 52 % 31 – 35 3 . 33 % 83 . 33 % 71 – 80 0 . 97 % 83 . 50 % 36 – 40 3 . 33 % 86 . 67 % 81 – 90 1 . 94 % 85 . 44 % 41 – 45 0 . 00 % 86 . 67 % 91 – 100 4 . 85 % 90 . 29 % 46 – 50 0 . 00 % 86 . 67 % 101 – 110 0 . 97 % 91 . 26 % 51 – 55 6 . 67 % 93 . 33 % 111 – 120 2 . 91 % 94 . 17 % 56 – 60 0 . 00 % 93 . 33 % 121 – 130 0 . 00 % 94 . 17 % 61 – 65 6 . 67 % 100 . 00 % 131 – 140 0 . 97 % 95 . 15 % 141 – 150 0 . 00 % 95 . 15 % 151 – 160 2 . 91 % 98 . 06 % 161 – 170 0 . 97 % 99 . 03 % 171 – 180 0 . 97 % 100 . 00 % Table 5 Independent samples t test for chunk boundary pairs by expertise Boundary pair t df Sig . ( 2 - tailed ) Meandifference Std . error difference 95 % Conf . int . Lowerbound Upperbound DISPLAY / DISPLAY − . 674 2 . 067 . 568 b − 1 . 133 1 . 681 − 8 . 143 5 . 877 DISPLAY / END WHILE . 381 16 . 708 a . 267 . 700 − 1 . 217 1 . 751 DISPLAY / GET − . 806 16 . 432 a − . 667 . 827 − 2 . 419 1 . 086 DIMENSION / DIMENSION . 402 16 . 693 a . 133 . 332 − . 570 . 836 GET / GET − . 784 2 . 163 . 510 b − . 267 . 340 − 1 . 629 1 . 095 GENERAL / GENERAL − . 931 2 . 018 . 449 b − . 933 1 . 002 − 5 . 209 3 . 343 WHILE / DISPLAY − . 784 2 . 163 . 510 b − . 267 . 340 − 1 . 629 1 . 095 WHILE / END WHILE − 3 . 207 8 . 228 . 012 b − 1 . 600 . 499 − 2 . 745 − . 455 a Equal variances assumed . b Equal variances not assumed Educ Inf Technol ( 2012 ) 17 : 291 – 313 303303 Novices used eleven boundary pairs not used by experts : BEGIN / END WHILE , BEGIN / GET , DIMENSION / GET , DISPLAY / GENERAL , DISPLAY / STOP , DIS - PLAY / WHILE , END WHILE / DISPLAY , END WHILE / END WHILE , GET / WHILE , WHILE / GET , and WHILE / WHILE . None of these is a functional pair , although a few could be based on surface features . For example , the BEGIN statement in the BEGIN / END WHILE pair would naturally suggest itself as the beginning of a chunk , while the END in the END WHILE statement could be seen as a natural chunk terminator . Functionally , END WHILE terminates a WHILE block and the STOP statement terminates a block initiated with BEGIN . Table 7 displays the results of a one - way ANOVA comparing the ratings for the four problems among the three learning sequences and shows no significant difference among the sequences for any problem . A Scheffé test showed no Table 6 Comparison of the novice and expert use of chunk boundary words Chunk boundary word ( s ) Novice participants Expert participants Timesusedtobegin Timesusedtoend Percentofchunkbeginnings Percentofchunkendings Timesusedtobegin Timesusedtoend Percentofchunkbeginnings Percentofchunkendings WHILE 37 3 36 . 3 % 2 . 9 % 11 0 36 . 7 % 0 . 0 % END WHILE 4 49 3 . 9 % 48 . 0 % 0 13 0 . 0 % 43 . 3 % DISPLAY 48 10 47 . 1 % 9 . 8 % 13 5 43 . 3 % 16 . 7 % GET 2 28 2 . 0 % 27 . 5 % 1 7 3 . 3 % 23 . 3 % DIM 8 7 7 . 8 % 6 . 9 % 1 1 3 . 3 % 3 . 3 % BEGIN 2 0 2 . 0 % 0 . 0 % 1 0 3 . 3 % 0 . 0 % STOP 0 2 0 . 0 % 2 . 0 % 0 1 0 . 0 % 3 . 3 % OTHER 1 3 1 . 0 % 2 . 9 % 3 3 10 . 0 % 10 . 0 % Table 7 One way ANOVA , program problem rating by learning sequence Problem Sum of squares df Mean square F Sig . Two - number problem rating Between Groups 1 . 733 2 . 867 . 236 . 793 Within Groups 44 . 000 12 3 . 667 Total 45 . 733 14 Summing problem rating Between Groups 1 . 733 2 . 867 . 306 . 742 Within Groups 34 . 000 12 2 . 833 Total 35 . 733 14 Tag problem rating Between Groups 1 . 600 2 . 800 . 750 . 493 Within Groups 12 . 800 12 1 . 067 Total 14 . 400 14 Conversion problem rating Between Groups 5 . 733 2 2 . 867 1 . 036 . 385 Within Groups 33 . 200 12 2 . 767 Total 38 . 933 14 304 Educ Inf Technol ( 2012 ) 17 : 291 – 313 significant difference between individual learning sequences . No learning sequence appeared better than another at preparing the novice participants to solve any of the four problems . Table 8 displays the results of t - tests comparing the programming problem scores earned by the novices with those earned by the experts . None of the differences is significant , but the scores between novices and experts approaches significance for the summing problem . 5 Discussion 5 . 1 Learning sequences The units presenting the plans material were rated as higher in effort and difficulty than units presenting syntax and structures in all three learning sequences ; however , there were no significant differences among the sequences in effort and difficulty ratings averaged over all three units . Neither rearranging the material nor increasingly contextualizing the plans content resulted in any change in a sequence ’ s overall perceived effort or difficulty . The results of the Programming Assessment represent short term memory recall . It was anticipated that the radically different presentation sequences would produce a measurable difference in learning based on the chunking theory ’ s assertion that the arrangement and order of the early chunks has a profound effect on the organization of the remaining chunks in long term memory ( Gobet 2005 ; Gobet and Wood 1999 ) . Instead , this study found no significant differences in the overall assessment scores or individual topic scores among the three learning sequences . There were , however , significant differences among the mean score subtotals for different content items , with participants on average achieving the highest scores on syntax items and lowest scores on plan items . These differences occurred no matter how the material was presented to participants . The implication is that novice programmers master more of the syntax material than the plan material regardless of the order in which it is presented to them . If novice learners focus first on the surface characteristics as the literature indicates , syntax elements should be easiest for them Table 8 Independent samples t test for programming problem solving comparing the rating for novice and expert participants Variable t df Sig . ( 2 - tailed ) Meandifference Std . Error difference 95 % Confidence interval Lower bound Upper bound Two numbers problem rating . 182 16 . 858 . 200 1 . 100 − 2 . 132 2 . 532 Summing problem rating − 1 . 922 16 . 073 − 1 . 867 . 971 − 3 . 926 . 192 Tag problem rating − . 760 16 . 458 − . 467 . 614 − 1 . 768 . 834 Conversion problem rating − . 737 16 . 472 − . 733 . 995 − 2 . 843 1 . 376 Educ Inf Technol ( 2012 ) 17 : 291 – 313 305305 to attend to , with feature - laden structures nearly as easy . Gobet and Chassy ( 2008 ) argued that knowledge chunks already formed in long term memory exert such an influence over the mind that they steer the focus of attention , thus determining what will be perceived and ultimately how long term memory is constructed . It may be that programming syntax and , to a lesser degree , structures had close analogies to language and logic concepts already in long term memory , and that this similarity led them to favor syntax content over plans content . Another possible explanation for the lack of difference among the sequence scores is that the short exposure to the content never allowed the participants to advance beyond forming initial perceptual chunks culled from the surface features of programming syntax and structures . They learned programming language features by rote as standalone chunks . Gobet and Jackson ( 2002 ) were able to mimic novice performance to an extent in their simulated chess expert CHREST by disabling the discrimination network developed from experience ( Gobet and Chassy 2009 ) , a central element of chess expertise . This suggests that the novices did not yet have enough experience to construct eye movement heuristics that would compare and contrast any but the most obvious surface features of the language . If the first step toward gaining expertise is perception training , it would be expected that novices in all three learning sequences would focus on acquiring the surface features of the language and not on the more abstract elements of programming such as plans . This also would result in all novices gaining essentially the same knowledge from the lessons regardless of how the content was presented . Selective attention to content did not come without a cost . The effort and difficulty ratings of the elements - to - plans and plans - to - elements sequences both indicate that the units containing syntax and structure material were perceived to be easier than the unit containing programming plan content . Perceptually - laden syntax material produced less effortful learning and thus yielded greater learning efficiency . Decreased intrinsic effort resulted in lower germane effort as reflected by lower perceived unit difficulty ( Schnotz and Kürschner 2007 ) . Whether presented first , last , or mixed throughout , units containing syntax and structure material were always rated the least effortful and difficult while those covering programming plans were always rated the most difficult and requiring the greatest effort . The importance Gobet ( 2005 ) placed on optimal presentation and difficulty level seems well founded during the initial stage of expertise development . It is also in line with Gagné et al ’ s ( 1988 ) hierarchical ordering of skills . The elaboration sequence had programming plan content distributed throughout all three units . Figures 2 and 3 show that the effort and difficulty ratings in the elements - to - plans and plans - to - elements sequences was lower for unit 2 than for either unit 1 or unit 3 , and that the unit containing plans content was always rated the highest in effort and difficulty . The elaboration sequence differed from the other two in that perceived effort and difficulty increased significantly ( p = . 002 ) between units 1 and 2 and increased significantly again ( p < . 001 ) between units 2 and 3 . This may reflect the increased cognitive load required to separate the syntax and structure material from the plans material . It also may reflect that , rather than being spread evenly throughout the elaboration sequence , some plans content was presented in the second unit and it dominated the third unit . Kalyuga ( 2009 ) noted that knowledge elaboration required executive guidance , and if it did not come from the learner ’ s 306 Educ Inf Technol ( 2012 ) 17 : 291 – 313 own knowledge base , from an instructor , or from an adaptive learning environment , extraneous cognitive load and working memory overload could result . This study demonstrated no significant difference in learning outcomes from the three sequences used , but what about learning efficiency ? Again , taking all three units of each sequence as a whole , there was no significant difference in either learning as measured by the Programming Assessment or in rated effort and difficulty . Not so for individual units . The elements - to - plans and plans - to - elements sequences presented the clearest comparison of learning efficiency by content as these sequences isolated syntax , structure , and plans content to individual units . The elaboration sequence , on the other hand , scattered syntax , structure , and plans content throughout all three units . Learning efficiency is defined in this study as the amount of learning achieved divided by the perceived effort ( Paas and Van Merriënboer 1994 ) . If for the sake of comparison the average percentage correct in a Programming Assessment content area is taken as a measure of learning , then the learning efficiency of the elements - to - plans and plans - to - elements sequences could be represented by the mean subtotal percent correct divided by the mean perceived effort . The results are shown in Table 9 . There is an apparent rough trend of increasing efficiency as one moves from plans content to structure content to syntax content . If Pearson correlations were calculated for these values , significant and high correlations would be found between mean subtotal and mean efficiency ( r = . 891 , p = . 017 ) and between mean effort and mean efficiency ( r = − . 877 , p = . 022 ) . Arguing from means is tenuous at best , especially when subtotals are used as approximations of knowledge , but the overall trend is clear . The novices in this study produced higher mean scores with lower mean effort with syntax content than with plans content . Effort can have an either beneficial or adverse impact on learners . Schnotz and Kürschner ( 2007 ) note that “ alignment of task difficulty with the learner ’ s expertise is equivalent to adapting instruction to the learner ’ s zone of proximal development ( ZPD ) ” ( p . 501 ) . They elaborate on this in a discussion of germane load : Germane load is not only constrained by the available working memory capacity , it is also constrained by the nature of the learning task ( i . e . by its intrinsic load ) , and it is constrained by the learner ’ s willingness to invest his / her available working memory resources into specific learning - oriented activities . Thus , germane cognitive load cannot be increased to any degree whatever within the limits of available working memory capacity . Instead , Table 9 Relative efficiencies calculated from mean percent correct and mean effort rating Elements - to - plans Plans - to - elements N Mean % Meaneffort Meanefficiency N Meanscore Meaneffort Meanefficiency Syntax subtotal 12 66 . 5742 5 . 50 12 . 1044 11 53 . 1309 5 . 91 8 . 99 Structure subtotal 12 52 . 4992 5 . 17 10 . 1546 11 44 . 8473 4 . 27 10 . 5029 Plans subtotal 12 5 . 91 7 . 45 4 . 6309 11 35 . 8182 7 . 18 4 . 9886 Educ Inf Technol ( 2012 ) 17 : 291 – 313 307307 germane load should be balanced within the available working memory capacity with the intrinsic load of the learning task , which in turn has to be adapted to the learner ’ s zone of proximal development ( Schnotz and Kürschner 2007 p . 503 ) . This leaves the question of exactly how much effort is appropriate to be answered on a case by case basis . Knowing the general effort rating of different material to be covered in a programming course would be an important aid to matching topic difficulty to learner readiness . Tackling effortful topics too early could go beyond a student ’ s willingness to invest the mental resources needed to master them . Applying Schnotz and Kürschner ’ s suggestions to this study , the participants in all three learning sequences gained the most learning for syntax content , then structure content , with the least learning for plans content . This is a strong indication that , for the programming topics included in the instructional program , learning was essentially independent of presentation order . However , the self - reported effort and difficulty varied significantly depending on both the content of the unit and the order in which it was presented . Abstract topics garnered the greatest effort and difficulty ratings . Mixing together the high and low effort and difficulty material in the elaboration sequence did not ameliorate cognitive load ; rather , its units were rated at a higher level of both than units in the other sequences . Pollock et al . ( 2002 ) postulated that if understanding required all interacting elements to be active simultaneously in working memory , intrinsic load would be reduced if instruction did not require full understanding during the initial stages of learning . They broke learning into stages to reduce intrinsic load by focusing first on learning individual elements and afterward assimilating them into an interactive set . This may be a viable way to introduce difficulty material and manage the increased cognitive load it brings with it . 5 . 2 Novice vs . expert performance 5 . 2 . 1 Analyzing previously - written code The follow - up study sought to compare the organization of programming knowledge in experts and novices by comparing how novice and expert programmers chunked previously - written code . Just as with the Programming Assessment results , no significant differences were found among the three learning sequences in any of the measures used in the second study . For the remainder of this discussion the novice participants will be treated as a single group whose results will be compared with the three expert programmers . The results of the follow - up study corresponded well to observations recorded in the literature . Novices described the example program in terms of its code details and structure ( Corritore and Wiedenbeck 1991 ) and only when they referred to the variable names did they hint at the abstract purpose of the program . As they read through the program , their comments centered on the structures they could identify and they equated structures with function and program chunks : “ I used WHILE as - ‘ cuz I remember while being something that starts and ends something . ” They applied knowledge from other domains that seemed appropriate by analogy : “ The 308 Educ Inf Technol ( 2012 ) 17 : 291 – 313 indentation was just trying , uh , I think it just makes it cleaner to - … it starts a program and whatnot … kind of like an intro paragraph . ” Novices cited the instructional units as the reason for choosing chunk boundaries and looked for rule matches , not functional matches : “ we was taught how if , like , loops , or whatever you want to call them , work , and the while ones , so , usually they begin with a WHILE . ” The experts similarly searched for “ syntactic markers ” ( Davies et al . 1995 p . 241 ) or focal lines ( Davies 1994 ) such as WHILE statements , but they were looking not just for structures , but also for their functional properties . They applied their already - mastered knowledge of programming languages and paradigms to the sample code as they deciphered it . One expert described the program in functional terms this way : So while it ’ s greater than 15 , we say the interest equals balance times point 013 , add the interest to the balance , the payment is going to equal the balance times point 04 , balance is going to equal balance minus payment , so we ’ ve recalculated the balance . We display the word “ payment ” and the actual payment that we calculated here , and we display the new balance which we calculated here . And what we ’ re creating is a list , a table of payouts , payments . These experts also used programming structures as a mental foundation on which to build program comprehension ( Pennington 1987 ) . Two expert participants used their workplace vocabulary to refer to the functionality of the code , describing a GET statement as “ hit ( ting ) the Attention Key ” and an error correction loop as “ an edit . ” These two experts were visualizing the code as it would be implemented in their local environment . The references to the Attention Key and edit loops appear to run counter to Vessey ’ s ( 1988 ) observation that experts tend to decompose existing programs solely by using syntactic structures and not preexisting code in long - term memory . The emphasis of the experts on functionality was also shown by their choice of chunk delimiting statements . None of the experts selected statement pairs that were functionally unrelated , whereas the novices often selected nonfunctional pairs such as DISPLAY / GET . In short , the novices chunked the example code primarily according to syntax rules as they recalled them from the instructional units while the experts chunked the program primarily according to function . Two measures proved significantly different between the experts and the novices : the number of chunk levels and the time between chunks . Experts had a mean number of chunk levels nearly double that of novices , indicating a greater perceived complexity in the program ( Davies 1994 ; Davies et al . 1995 ; Rist 1989 ) . Experts also required only about half the time as novices to identify the next chunk , showing that this more complex ability to chunk a program was also automatized to a significantly higher degree than novices ’ chunking ability . The chunking theory ’ s application of Anderson ’ s ( 1987 ) ACT * automatization help explain an expert ’ s greater speed in solving problems . The more rapid analysis of the program by the experts alludes to a problem expert instructors may have with novice performance . Experts could have unrealistic expectations of how much novices can accomplish within a set amount of time . Novices in this study took up to three times as long as experts to analyze the short program in the study . Experts have highly trained perception and well - organized long - term memories of programming plans to speed them through program analysis Educ Inf Technol ( 2012 ) 17 : 291 – 313 309309 and problem solving . This disparity between expert and novice processing speed may make it difficult to create instruments that assess what novices know at novice retrieval speeds . 5 . 2 . 2 Coding new problems The second part of the follow - up study compared how novice and expert programmers approached the coding of solutions to new problems by having them write the statement that was central to solving the problem . The expected result was that novices would center their solutions on surface elements such as getting values from the user , while experts would focus on the core functionality needed to solve the problem . This expectation was not met . Three possible causes for this may be at work : ( a ) the first step proposed to solve a problem does not reliably reflect the complexity of the problem solving schema being used ; ( b ) the instructions given for the instrument were unclear ; and ( c ) the construct of the instrument was in error in that an entire solution should have been required and the participants observed to determine where they began their solution and the paths they took as they constructed it . 5 . 3 Limitations and recommendations for further research Several important limitations to the study should be noted . All of the study participants came from a two - year community college population and so are generalizable specifically to that population . The number of participants overall and in each learning sequence was also low , further reducing the representativeness of the results . As the sample size in this study is small , this study should be replicated to confirm the results achieved here with a much larger sample . A large sample consisting of only students majoring in computer studies would further validate the findings of this study for computer science novices . The short time span during which participants learned programming was different from the traditional weeks - long programming course . The results therefore reflect a short term exposure to programming concepts and not a sequences of instruction lasting weeks or months . As participants were assigned to learning sequences regardless of preference , the sequence assigned as well as the computer based instructional design may not have matched the learning style of all participants and possibly affected their performance on the study instruments . It would be enlightening to repeat the study using the same learning sequences but spread throughout a course that is of traditional length to allow the concepts presented in this instructional sequence to be fully developed . The study results only apply to structured programming as taught using one of the three instructional sequences in the study . It would be useful to repeat the study using an object oriented language . 6 Conclusions This study extends the literature in several ways . Three instructional sequences that contained identical content for effectiveness and efficiency were compared : basic to 310 Educ Inf Technol ( 2012 ) 17 : 291 – 313 abstract founded on Gagné et al . ’ s ( 1988 ) hierarchical ordering of skills , abstract to basic as advocated by Soloway ( 1986 ) , and intermixed and spiraling between basic and abstract following Reigeluth and Stein ( 1983 ) . Participants in all three sequences evidenced equal learning . It would be wrong , however , to conclude from this that learning sequences are irrelevant to learning . Learners appeared to selectively attend to information that was presented to them , so that sequencing should be done according to the readiness of the learner . The long - term memory structure of the learner may filter out material that is too advanced , probably increasing cognitive load as it does so ( Chandler and Sweller 1991 ) . The study also demonstrated that the overall self - rated effort and difficulty of a program does not vary simply by rearranging the order in which the major elements of the program are presented . The difficult parts remain difficult no matter where they are presented . There were indications that participants paid a price in increased cognitive load to prune away parts of the instruction that they were not ready for . This result extends the application of cognitive load to considerations of the order of presentation and the effect difficult material and high cognitive load has on the overall perception of instruction . Teaching from basic to abstract produced the lowest rated effort and difficulty and , as roughly calculated above , with the highest efficiency . Third , this study extends the understanding of how to teach programming to novices . Novice programmers should be given ample opportunity to work with the fundamental syntax and structure of programming before they are presented with standard program solution plans . This study reinforces the principle that novices must have experience with the basic elements of programming before they can comprehend successfully ways in which those elements are assembled into solutions . Instructors should thoroughly ground novices in foundational skills and simple problem solving before presenting problem - solving plans so that novices have the background needed to understand and appreciate those plans . Doing so should increase the persistence of less - advanced novices in introductory courses . References Adelson , B . ( 1981 ) . Problem solving and the development of abstract categories in programming languages . Memory & Cognition , 9 ( 4 ) , 422 – 433 . Anderson , J . R . ( 1987 ) . Skill acquisition : Compilation of weak - method problem solutions . Psychological Review , 94 ( 2 ) , 192 – 210 . Bennedsen , J . , & Caspersen , M . E . ( 2008 ) . Optimists have more fun , but do they learn better ? On the influence of emotional and social factors on learning introductory computer science . Computer Science Education , 18 ( 1 ) , 1 – 16 . Bergin , S . , & Reilly , R . ( 2006 ) . Predicting introductory programming performance : A multiinstitutional multivariate study . Computer Science Education , 16 ( 4 ) , 303 – 323 . Bonar , J . , & Soloway , E . ( 1985 ) . Preprogramming knowledge : A major source of misconceptions in novice programmers . Human - Computer Interaction , 1 ( 2 ) , 133 – 161 . Boschker , M . S . J . , Bakker , F . C . , & Michaels , C . F . ( 2002 ) . Memory for the functional characteristics of climbing walls : Perceiving affordances . Journal of Motor Behavior , 34 ( 1 ) , 25 – 36 . Campbell , R . L . , Brown , N . R . , & DiBello , L . A . ( 1992 ) . The programmer ’ s burden : Developing expertise in programming . In R . R . Hoffman ( Ed . ) , The psychology of expertise : Cognitive research and empirical AI ( pp . 269 – 294 ) . New York : Springer . Chandler , P . , & Sweller , J . ( 1991 ) . Cognitive load theory and the format of instruction . Cognition & Instruction , 8 ( 4 ) , 293 – 332 . Educ Inf Technol ( 2012 ) 17 : 291 – 313 311311 Charness , N . , Reingold , E . , Pomplun , M . , & Stampe , D . M . ( 2001 ) . The perceptual aspect of skilled performance in chess : Evidence from eye movements . Memory & Cognition , 29 ( 8 ) , 1146 – 1152 . Chase , W . G . , & Simon , H . A . ( 1973 ) . Perception in chess . Cognitive Psychology , 4 , 55 – 81 . Corritore , C . L . , & Wiedenbeck , S . ( 1991 ) . What do novices learn during program comprehension ? International Journal of Human - Computer Interaction , 3 ( 2 ) , 199 – 222 . Cowan , N . ( 2000 ) . The magical number 4 in short - term memory : A reconsideration of mental storage capacity . The Behavioral and Brain Sciences , 24 ( 1 ) , 87 – 114 . Davies , S . P . ( 1994 ) . Knowledge restructuring and the acquisition of programming expertise . International Journal of Human Computer Studies , 40 , 703 – 726 . Davies , S . P . , Gilmore , D . J . , & Green , T . R . G . ( 1995 ) . Are objects that important ? Effects of expertise and familiarity on classification of object - oriented code . Human - Computer Interaction , 10 ( 2 – 3 ) , 227 – 248 . De Groot , A . D . ( 1965 ) . Thought and choice in chess . The Hague . The Netherlands : Mouton . DeLeeuw , K . E . , & Mayer , R . E . ( 2009 ) . A comparison of three measures of cognitive load : Evidence for separable measures of intrinsic , extraneous , and germane load . Journal of Educational Psychology , 100 ( 1 ) , 223 – 234 . Eckert , C . , & Stacey , M . ( 2003 ) . Adaptation of sources of inspiration in knitwear design . Creativity Research Journal , 15 ( 4 ) , 355 – 384 . Gagné , R . M . , Briggs , L . J . , & Wager , W . W . ( 1988 ) . Principles of instructional design ( 3rd ed . ) . New York : Holt , Rinehart and Winston . Garland , D . J . , & Barry , J . R . ( 1992 ) . Effects of interpolated processing on experts recall of schematic information . Current Psychology , 10 ( 4 ) , 273 – 280 . Gaspar , A . , & Langevin , S . ( 2007 ) . Restoring “ Coding with intention ” in introductory programming courses . In Proceedings of the 8th ACM SIGITE conference on information technology education ( pp . 91 – 98 ) . New York : ACM . Gobet , F . ( 2005 ) . Chunking models of expertise : Implications for education . Applied Cognitive Psychology , 19 ( 2 ) , 183 – 204 . Gobet , F . , & Wood , D . ( 1999 ) . Expertise , models of learning and computer - based tutoring . Computers & Education , 33 ( 2 – 3 ) , 189 – 207 . Gobet , F . , & Simon , H . A . ( 2000 ) . Five seconds or sixty ? Presentation time in expert memory . Cognitive Science , 24 ( 4 ) , 651 – 682 . Gobet , F . , & Jackson , S . ( 2002 ) . In search of templates . Cognitive Systems Research , 3 ( 1 ) , 35 – 44 . Gobet , F . , & Chassy , P . ( 2008 ) . Towards an alternative to Benner ’ s theory of expert intuition in nursing : A discussion paper . International Journal of Nursing Studies , 45 ( 1 ) , 129 – 139 . Gobet , F . , & Chassy , P . ( 2009 ) . Expertise and intuition : A tale of three theories . Minds and Machines , 19 , 151 – 180 . Kalyuga , S . ( 2009 ) . Knowledge elaboration : A cognitive load perspective . Learning and Instruction , 19 , 402 – 410 . Kurland , D . M . , Pea , R . D . , Clement , C . , & Mawby , R . ( 1989 ) . A study of the development of programming ability and thinking skills in high school students . In E . Soloway & J . C . Spohrer ( Eds . ) , Studying the novice programmer ( pp . 83 – 112 ) . Hillsdale : Lawrence Erlbaum . Linn , M . C . , & Dalbey , J . ( 1989 ) . Cognitive consequences of programming instruction . In E . Soloway & J . C . Spohrer ( Eds . ) , Studying the novice programmer ( pp . 57 – 81 ) . Hillsdale : Lawrence Erlbaum . McCracken , M . , Almstrum , V . , Diaz , D . , Guzdial , M . , Hagan , D . , Kolikant , Y . B . , et al . ( 2001 ) . A multi - national , multi - institutional study of assessment of programming skills of first - year CS students . SIGCSE Bulletin . , 33 ( 4 ) , 125 – 180 . McGettrick , A . , Boyle , R . , Ibbett , R . , Lloyd , J . , Lovegrove , G . , & Mander , K . ( 2005 ) . Grand challenges in computing : Education — A summary . The Computer Journal , 48 ( 1 ) , 42 – 48 . McKeithen , K . B . , Reitman , J . S . , Rueter , H . H . , & Hirtle , S . C . ( 1981 ) . Knowledge organization and skill differences in computer programmers . Cognitive Psychology , 13 ( 3 ) , 307 – 325 . Miller , G . A . ( 1956 ) . The magical number seven , plus or minus two : Some limits on our capacity for processing information . Psychological Review , 63 , 81 – 97 . Paas , F . G . , & Van Merriënboer , J . ( 1994 ) . Measurement of cognitive load in instructional research . Perceptual and Motor Skills , 79 ( 1 ) , 419 – 430 . Pennington , N . ( 1987 ) . Stimulus structures and mental representations in expert comprehension of computer programs . Cognitive Psychology , 19 ( 3 ) , 295 – 341 . Pollock , E . , Chandler , P . , & Sweller , J . ( 2002 ) . Assimilating complex information . Learning and Instruction , 12 ( 1 ) , 61 – 86 . 312 Educ Inf Technol ( 2012 ) 17 : 291 – 313 Putnam , R . T . , Sleeman , D . , Baxter , J . A . , & Kuspa , L . K . ( 1989 ) . A summary of misconceptions of high school basic programmers . In E . Soloway & J . C . Spohrer ( Eds . ) , Studying the novice programmer ( pp . 301 – 315 ) . Hillsdale : Lawrence Erlbaum . Reigeluth , C . M . , & Stein , F . S . ( 1983 ) . The elaboration theory of instruction . In C . M . Reigeluth ( Ed . ) , Instructional - design theories and models : An overview of their current status ( pp . 334 – 381 ) . Hillsdale : Lawrence Erlbaum Associates . Rist , R . S . ( 1989 ) . Schema creation in programming . Cognitive Science , 13 , 389 – 414 . Robins , A . , Rountree , J . , & Rountree , N . ( 2003 ) . Learning and teaching programming : A review and discussion . Computer Science Education , 13 ( 2 ) , 137 – 172 . Saariluoma , P . , & Laine , T . ( 2001 ) . Novice construction of chess memory . Scandinavian Journal of Psychology , 42 , 137 – 146 . Schnotz , W . , & Kürschner , C . ( 2007 ) . A reconsideration of cognitive load theory . Educational Psychology Review , 19 ( 4 ) , 469 – 508 . Soloway , E . ( 1986 ) . Learning to program = learning to construct mechanisms and explanations . Communications of the ACM , 29 ( 9 ) , 850 – 858 . Soloway , E . , Erlich , K . , Bonar , J . , & Greenspan , J . ( 1982 ) . What do novices know about programming ? In A . Badre & B . Shneiderman ( Eds . ) , Directions in human - computer interaction ( pp . 27 – 54 ) . Norwood : Ablex . Spohrer , J . C . , & Soloway , E . ( 1988 ) . Novice mistakes : Are the folk wisdoms correct ? Communications of the ACM , 29 ( 7 ) , 624 – 632 . Sweller , J . , & Chandler , P . ( 1994 ) . Why some material is difficult to learn . Cognition and Instruction , 12 ( 3 ) , 185 – 233 . Van Gog , T . , Paas , F . , & Van Merriënboer , J . J . G . ( 2005 ) . Uncovering expertise - related differences in troubleshooting performance : Combining eye movement and concurrent verbal protocol data . Applied Cognitive Psychology , 19 ( 2 ) , 205 – 221 . van Merriënboer , J . J . G . , & Sweller , J . ( 2005 ) . Cognitive load theory and complex learning : Recent developments and future directions . Educational Psychology Review , 17 ( 2 ) , 147 – 177 . van Merriënboer , J . J . G . , Kirschner , P . A . , & Kester , L . ( 2003 ) . Taking the load off a learner ’ s mind : Instructional design for complex learning . Educational Psychologist , 38 ( 1 ) , 5 – 13 . Vessey , I . ( 1988 ) . Expert - novice knowledge organization : An empirical investigation using computer program recall . Behaviour & Information Technology , 7 ( 2 ) , 153 – 172 . Wickelgren , W . A . ( 1999 ) . Webs , cell assemblies , and chunking in neural nets . Canadian Journal of Experimental Psychology , 53 ( 1 ) , 118 – 131 . Wiedenbeck , S . ( 1986 ) . Beacons in computer - program comprehension . International Journal of Man - Machine Studies , 25 ( 6 ) , 697 – 709 . Winslow , L . E . ( 1996 ) . Programming pedagogy : A psychological overview . SIGSE Bulletin , 28 ( 3 ) , 17 – 25 . Educ Inf Technol ( 2012 ) 17 : 291 – 313 313313