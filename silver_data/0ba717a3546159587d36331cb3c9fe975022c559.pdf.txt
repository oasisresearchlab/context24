BURRITO : Wrapping Your Lab Notebook in Computational Infrastructure The Harvard community has made this article openly available . Please share how this access benefits you . Your story matters Citation Guo , Philip J . and Margo I . Seltzer . 2012 . BURRITO : Wrapping your lab notebook in computational infrastructure . In TaPP ' 12 Proceedings of the 4th USENIX conference on Theory and Practice of Provenance , June 14 - 15 , Boston , Massachusetts . Berkeley , CA : USENIX Association . Published Version https : / / www . usenix . org / system / files / conference / tapp12 / tapp12 - final10 . pdf ; http : / / dl . acm . org / citation . cfm ? id = 2342882 & CFID = 211477395 & CFTOKEN = 57044396 Citable link http : / / nrs . harvard . edu / urn - 3 : HUL . InstRepos : 9938866 Terms of Use This article was downloaded from Harvard University’s DASH repository , and is made available under the terms and conditions applicable to Open Access Policy Articles , as set forth at http : / / nrs . harvard . edu / urn - 3 : HUL . InstRepos : dash . current . terms - of - use # OAP B URRITO : Wrapping Your Lab Notebook in Computational Infrastructure Philip J . Guo Stanford University Margo Seltzer Harvard University Abstract Researchers in ﬁelds such as bioinformatics , CS , ﬁnance , and applied math have trouble managing the numerous code and data ﬁles generated by their computational ex - periments , comparing the results of trials executed with different parameters , and keeping up - to - date notes on what they learned from past successes and failures . We created a Linux - based system called B URRITO that automates aspects of this tedious experiment orga - nization and notetaking process , thus freeing researchers to focus on more substantive work . B URRITO automati - cally captures a researcher’s computational activities and provides user interfaces to annotate the captured prove - nance with notes and then make queries such as , “Which script versions and command - line parameters generated the output graph that this note refers to ? ” 1 Motivation For hundreds of years , the pace of scientiﬁc research was relatively slow , limited by the need to set up , run , and de - bug experiments on physical apparatus . Throughout their experiments , researchers took the time to write meticu - lous accounts of their hypotheses , observations , analy - ses , and reﬂections in handwritten lab notebooks . In the past few decades , the pace of research has sped up signiﬁcantly as more experiments are being done on the computer . People as diverse as the bioinformatics Ph . D . student who is testing out sequence alignment al - gorithms , the computer performance engineer who is tuning optimization parameters , and the web marketing analyst who is trying to ﬁnd the best set of clickstream features to predict purchase rates , all struggle with the same problems in their experimental workﬂow [ 4 , 6 ] : • To test hypotheses , they constantly adjust their code and re - execute to generate numerous output data ﬁles . They struggle to remember which exact changes to their code generated a particular output . • They consult a myriad of resources such as docu - mentation web pages , PDFs of related papers , code snippets , and hand - drawn sketches while they work , so they struggle to remember which resources inﬂu - enced them to make speciﬁc edits to their code . • They struggle to maintain up - to - date notes on which experimental trials worked and did not work . Since they rapidly edit code , tune execution parameters , and generate new variants of output data , notes taken only a few hours ago might be outdated . Researchers cope with the above problems by taking notes using a mix of plain - text ﬁles , “sticky notes” wid - gets , and notebook software such as Microsoft OneNote . The fundamental shortcoming of all existing electronic notetaking solutions is that they are not linked with the user’s activity context , which we deﬁne as the user’s ac - tions at a particular time , such as editing code , read - ing documentation , and executing commands . Instead , these tools are simply digital versions of paper lab note - books . As a result , researchers have trouble organizing their notes and associating them with the proper context . These observations highlight the need for an electronic lab notebook that keeps up with the fast pace of compu - tational research rather than mimicking paper notebooks . 2 The B URRITO System Researchers often work in a heterogeneous environment where they cobble together a patchwork of ad - hoc scripts written in multiple languages , interfacing with a mix of 3rd - party libraries and executables from disparate sources within a command - line environment [ 6 ] . We cre - ated a Linux - based provenance collection and notetaking system called B URRITO for this target audience . Related work such as scientiﬁc workﬂow systems ( e . g . , Kepler , Taverna , VisTrails ) provide similar provenance collec - tion and annotation features for researchers who work exclusively within those environments [ 1 ] . NILFS versioning ﬁlesystem Timestamped event stream OS - level provenance GUI window interactions Clipboard events Command invocations ( Bash , Python , MATLAB ) Text editor interactions ( Vim ) Web browsing history ( Firefox , Chrome ) Sticky notes and todos ( Xpad ) Digital sketches ( Wacom pen tablet ) Audio recordings ( microphone ) Core Plugins Figure 1 : B URRITO platform overview : Each component logs a timestamped stream of events to a master database . B URRITO consists of two parts : an extensible platform that automatically captures provenance and user activity context and a set of applications that allow the user to annotate and query the captured metadata stream . 3 B URRITO Platform The B URRITO platform ( Figure 1 ) consists of a core and a set of plugins that integrate a rich history of user activ - ity into a master MongoDB database on the user’s ma - chine . Suppose that Alice is a Ph . D . student conduct - ing computational research on a Linux machine with the B URRITO core platform installed . The NILFS versioning ﬁlesystem [ 2 ] automatically preserves all old versions of her source code and data ﬁles , so that she no longer needs to use version control or embed metadata within ﬁlenames . An OS - level provenance collection daemon captures execution context , such as which processes read from and wrote to which ﬁles , and builds up a prove - nance graph similar to PASS [ 5 ] . A GUI trace daemon captures all of her GUI window interactions , which pro - vides context such as which application windows she is viewing at all times as she is working on her experiments . B URRITO platform plugins capture Alice’s activities within speciﬁc applications . For example , the Bash plugin records her executed Bash shell commands , the Firefox plugin records her web browsing history , and the clipboard plugin traces what code she copies and pastes from , say , tutorial websites into her scripts . Alice can also write plugins for scientiﬁc software that she uses . In sum , the B URRITO platform automatically captures Alice’s work activities and their context with no percepti - ble run - time slowdowns and disk space usage of ∼ 2 GB per month ( estimated by our own experiences running B URRITO over a two - month period while developing it ) . 4 B URRITO Applications We have built four applications atop the B URRITO plat - form . These applications provide innovative ways of in - teracting with provenance beyond simply exploring a tra - ditional interactive graph - based visualization [ 3 ] . 4 . 1 Activity Feed The Activity Feed is a sidebar residing on the left portion of the user’s Linux desktop background . It periodically polls the master B URRITO database ( every 5 seconds by default ) and displays a near real - time stream of the user’s actions as a list of feed events in reverse chronological order . New events appear at the top of the feed and push down older events ( Figure 2 ) . This UI metaphor is inspired by the Facebook news feed and Twitter tweet stream . The feed currently displays six types of events : • A Bash command event shows a group of Bash shell commands executed in the same directory without any other intervening events . The user can click on any command to copy it to the clipboard and paste it into a terminal to re - execute . • A website visit event shows a set of web pages vis - ited without any intervening events . The user can click on any page title to open its link in a browser . • A ﬁle modiﬁcation event shows a group of ﬁles modiﬁed by a particular process . For example , sav - ing a source code ﬁle in a text editor will create a new ﬁle modiﬁcation event , as does executing a script to generate an output data ﬁle . • A digital sketch event shows a thumbnail view of a sketch that the user has just drawn using , say , a digital pen tablet . Researchers often draw freehand sketches and doodles while they work . • The user can create a status update event by enter - ing text in the status text box and pressing the “Post” button . This is the main way for users to take notes about what they are currently working on at a given moment , which helps place other events in context . ( e . g . , posting “I’m now trying to optimize my B - tree split algorithm to copy less data” ) . • The user can create a checkpoint event by clicking on either the “Happy Face” or “Sad Face” button and then entering a note in the pop - up text box de - scribing why they are happy or sad about the current state of the experiment . The system takes a screen - shot and pushes it alongside the note onto the feed . A “happy checkpoint” is like making a commit in a version control system , and a “sad checkpoint” is like ﬁling a bug report in a bug tracking system . 2 Figure 2 : The Activity Feed resides on the desktop back - ground and shows a near real - time stream of user actions . 4 . 1 . 1 Annotating feed events Besides writing notes in status update and checkpoint events , the user can also add text annotations to all other types of feed events . After right - clicking on an item in the feed ( e . g . , a Bash command invocation ) , the user can choose the “Annotate” option from a pop - up menu . Do - ing so creates a text box immediately below the event where the user can enter and save a note to the database . Use case : Researchers struggle with managing notes ﬁles . For instance , when reading months - old notes about tweaks made to a particular script , the user will probably be unable to view the exact version of the script to which the notes refer . Activity Feed annotations allow users to make notes within the most precise context at the time when relevant events are occurring . The user can later retrieve the exact old version of a ﬁle to which an anno - tation refers , even if that ﬁle has since been deleted . 4 . 1 . 2 Interacting with ﬁle modiﬁcation events The Activity Feed provides a convenient interface to monitor and access old versions of ﬁles . Right - clicking on a ﬁle modiﬁcation event in the feed pops up a menu where the user can make four types of actions : 1 . ) Open the version of the ﬁle either right before or after the given modiﬁcation using a NILFS snapshot . 2 . ) Diff two cho - sen versions of a text ﬁle . 3 . ) Revert a ﬁle to any older version , thus undoing unintended edits . 4 . ) View the computational or activity context surrounding modiﬁca - tions to the chosen ﬁle ( see Sections 4 . 2 and 4 . 3 ) . Use case : The Activity Feed subsumes the basic features of version control systems and sticky notes applets using a uniﬁed interface . Rather than restoring ﬁles by time or version control commit points , users can access old ﬁle versions within the context of all past activities ( e . g . , ex - ecuted commands , visited websites , checkpoints , notes ) . 4 . 2 Computational Context Viewer The Computational Context Viewer allows researchers to answer a central question in their workﬂow : “What effects did changes in my source code ﬁles have on my experiment’s output ﬁles ? ” The user launches this GUI application with the desired output ﬁle ( and time bound ) as an argument . It displays all versions of the chosen output ﬁle in reverse chronological order , the parameters of the executed command that created each version , and the diffs of all source ﬁles that led to the creation of that output ﬁle version via the executed command . For example , Figure 3 shows three variants of an out - put graph ﬁle generated by a Python data analysis script : a line graph , a bar graph , and a bar graph with three crucial bars highlighted in yellow . The leftmost column shows the respective diffs in the script ﬁle that led to each change in the output graph ﬁle ( i . e . , the code change re - sponsible for turning the line graph into a bar , and then the change for highlighting the three bars in yellow ) . Use case : Using this graphical interface , researchers can answer the question , “Which version of my source code produced the graph that looked like this ? ” The inline diff view allows users to focus on signiﬁcant changes without needing to learn to use a version control system . 4 . 3 Activity Context Viewer The Activity Context Viewer allows researchers to an - swer the following question : “What actions inﬂuenced me to make these edits to my source code ? ” Researchers rarely edit code in isolation ; while they work , they often consult documentation web pages , related research pa - pers in the form of PDF or Word documents , and other source code . They sometimes write code comments , notes , or hand - drawn sketches to explain the rationale for their edits , but doing so is a tedious manual process . 3 Figure 3 : The Computational Context Viewer shows how diffs in input source code ﬁles and command - line param - eters affect each version of a given output ﬁle . B URRITO automatically captures all of this context surrounding code edits and makes it visible to the user via the Activity Context Viewer . This GUI application looks similar to Figure 3 , except that each row displays four ﬁelds about one version of the chosen source ﬁle : • Diffs of the source ﬁle against the previous version . • Resources read while working on edits to the cur - rent version , including web pages visited , on - disk documents viewed , and other source code ﬁles read . • Resources written while working on this version , including other edited source code ﬁles , check - points , status updates , and digital sketches drawn . • Annotations that the user can write for this version . Use case : Researchers can use this tool to re - create their prior work context . For example , “When I left work last week , I was editing this part of my script and had a col - lection of reference materials open . . . what were they ? ” 4 . 4 Lab Notebook Generator The Lab Notebook Generator creates an HTML ﬁle sum - marizing the user’s activities and notes in a given time period . It currently provides the following functional - ity : 1 . ) Feed events are grouped into phases separated by user login sessions , checkpoints , and status updates . 2 . ) Within a phase , all ﬁles read / written are displayed in a directory tree along with any annotations . Bash com - mands and visited websites are displayed along with an - notations . 3 . ) Digital sketches and output image ﬁles are rendered as inline HTML images . Use case : Lab notebook HTML ﬁles can be archived , shared with colleagues , and used as the basis for writing status reports and preparing notes for meetings . 5 Future Visions Although B URRITO can be useful for an individual re - searcher , we are more excited about discussing the pos - sibility of using it to disseminate knowledge . B URRITO traces could allow students , colleagues , and skeptics to learn from someone’s entire research process , not just from their ﬁnal results as presented in a published paper . In this vision , all Ph . D . students would use B URRITO to capture and archive the complete trials and tribulations of their 5 – 6 years’ worth of experiments . This “Ph . D . - in - a - box” could be used to train new students and to pass down all of the implicit knowledge , experiences , tricks , and wisdom that are rarely captured in a dissertation . Even more ambitiously , imagine an online library ﬁlled with the collected B URRITO archives of all com - putational research projects . It now becomes possible to perform pattern recognition and aggregation across mul - tiple projects to discover common “tricks - of - the - trade” . Someone new to a ﬁeld , say machine learning , can now learn from the collective “behind - the - scenes” wisdom of thousands of expert machine learning researchers rather than simply reading their published papers . One could argue that , in the limit , such a system would be like “indexing” all of those researchers’ brains and making that knowledge widely accessible . We actu - ally believe that such a system can be more effective than “brain indexing” , since people subconsciously ap - ply tricks from their intuitions and often forget the details of what they were working on ( especially failed trials ) . In this vision of the future , a paper is merely a facade for the true contributions of the full research process . Acknowledgments : Special thanks to Elaine Angelino , Ewen Cheslack - Postava , Eunsuk Kang , Imran Haque , Robert Ikeda , Adam Marcus , Rob Miller , and Jean Yang for giving me helpful feedback on this project and paper . References [ 1 ] F REIRE , J . , K OOP , D . , S ANTOS , E . , AND S ILVA , C . T . Prove - nance for computational tasks : A survey . Computing in Science and Engineering 10 ( May 2008 ) , 11 – 21 . [ 2 ] K ONISHI , R . , A MAGAI , Y . , S ATO , K . , H IFUMI , H . , K IHARA , S . , AND M ORIAI , S . The Linux implementation of a log - structured ﬁle system . SIGOPS Oper . Syst . Rev . 40 ( July 2006 ) . [ 3 ] M ACKO , P . , AND S ELTZER , M . Provenance Map Orbiter : Inter - active exploration of large provenance graphs . TaPP ’11 . [ 4 ] M AC L EAN , D . Provenance , PASS & People : A Research Report . Tech . rep . , Harvard University , 2007 . [ 5 ] M UNISWAMY - R EDDY , K . - K . , H OLLAND , D . A . , B RAUN , U . , AND S ELTZER , M . Provenance - aware storage systems . USENIX ’06 , USENIX Association . [ 6 ] P RABHU , P . , J ABLIN , T . B . , R AMAN , A . , Z HANG , Y . , H UANG , J . , K IM , H . , J OHNSON , N . P . , L IU , F . , G HOSH , S . , B EARD , S . , O H , T . , Z OUFALY , M . , W ALKER , D . , AND A UGUST , D . I . A survey of the practice of computational science . In State of the Practice Reports ( 2011 ) , SC ’11 , ACM . 4