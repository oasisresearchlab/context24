Spacelord : Private and Secure Smart Space Sharing Yechan Bae Georgia Institute of Technology Atlanta , USA Sarbartha Banerjee University of Texas at Austin Austin , USA Sangho Lee Microsoft Research Redmond , USA Marcus Peinado Microsoft Research Redmond , USA ABSTRACT Space sharing services like vacation rentals are being equipped with smart devices . However , sharing of such devices has privacy and security problems due to no or unclear control transfer between owners and users . In this paper , we propose Spacelord , a system to time - share smart devices contained in a shared space privately and securely while allowing users to configure them . When a user stays at a space , Spacelord ensures that the smart devices contained in it run code and configurations the user trusts while removing pre - installed code and configurations . When the user leaves the space , Spacelord reverts any changes the user has introduced to the smart devices to delete remaining private data and let the owner take back control over the devices . We evaluate Spacelord for two realistic space - sharing cases—smart home and coworking meeting room—and observe reasonable provisioning delay and runtime overhead . CCS CONCEPTS • Security and privacy → Embedded systems security ; Oper - ating systems security . KEYWORDS bare - metal provisioning , secure boot , smart space , time sharing ACM Reference Format : Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado . 2022 . Spacelord : Private and Secure Smart Space Sharing . In Annual Computer SecurityApplicationsConference ( ACSAC’22 ) , December5 – 9 , 2022 , Austin , TX , USA . ACM , New York , NY , USA , 13 pages . https : / / doi . org / 10 . 1145 / nnnnnnn . nnnnnnn 1 INTRODUCTION The spaces around us are becoming more intelligent . Spaces such as residences [ 47 ] , offices [ 107 ] , and hospitals [ 48 ] are being equipped with smart devices , such as smart door locks , light bulbs , cameras , and speakers , to increase space efficiency , user convenience , and Authors are alphabetically ordered . Part of this work was done while Yechan Bae and Sarbartha Banerjee were interns at Microsoft Research . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than ACM mustbehonored . Abstractingwithcreditispermitted . Tocopyotherwise , orrepublish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from permissions @ acm . org . ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA © 2022 Association for Computing Machinery . ACM ISBN 978 - x - xxxx - xxxx - x / YY / MM . . . $ 15 . 00 https : / / doi . org / 10 . 1145 / nnnnnnn . nnnnnnn security . Smart homes were a $ 78 billion industry in 2020 , projected to double by 2025 [ 65 ] . The smart office market is projected to grow to $ 57 billion by 2025 [ 46 ] . This trend extends to space sharing , e . g . , vacation rentals [ 10 , 106 ] and hotel rooms [ 4 , 50 ] , whose control is transferred to short - term users ( i . e . , tenants or guests ) . Owners install smart devices in their spaces and allow users to control them to use the spaces conve - niently and efficiently . Also , coworking spaces feature hybrid meet - ing rooms with arrangements of intelligent cameras and micro - phones for both in - person and remote participants [ 40 , 105 , 115 ] . However , the integration of space sharing and smart devices extensively affects privacy , security , and usability . In a shared space setting , owners choose which devices to install in their spaces and preconfigure them . They typically retain administrative privilege of the devices due to security concerns [ 26 ] . This setup introduces security and privacy concerns for users because they have no op - tion but to trust owners and devices they did not choose . Recent studies [ 26 , 64 , 118 ] show that Airbnb users value the convenience of smart devices but are concerned about privacy and security prob - lems . Also , users cannot enjoy the full potential of smart devices with user - specific configuration and personalization due to a lack of permission , privacy concerns , or both . Some mechanisms such as stateless devices [ 4 , 5 ] or user - driven data control [ 122 ] partially mitigate , but do not fully address , these problems . In particular , smart space sharing introduces the following three challenges . Privacy . Smart devices managed by an owner might capture a wealth of privacy - sensitive information that are beyond user con - trol . For example , apartment rental companies might use smart door locks to surveil tenants [ 82 , 91 ] . Voice - controlled speakers in vaca - tion rentals can reveal the user’s browsing history or preferences which might be used for user - profiling [ 26 , 64 , 118 ] . Security . Lack of control over smart devices threatens both users and owners . For example , adversarial settings of smart devices such as carbon monoxide detectors or garage door openers can affect users . Adversarial access to audio or video streams from corporate meetings could result in secret leakage ranging from product plans to financial statements . Also , malicious users might tamper with smart devices ( e . g . , install persistent malware ) . Configurability . Lack of control over smart devices prevents users from personalizing them . Even if owners transfer control to users , it is unclear whether short - term ( e . g . , hours or days ) users can efficiently configure smart devices . For example , users might want to configure a smart door lock to recognize their faces during their stay and erase them immediately at check - out . However , manually configuring individual smart devices is time - consuming and does ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado not scale [ 109 ] . Also , any solution to the configurability challenge is complicated by incompatibility between smart devices [ 29 , 42 ] . In this paper , we present Spacelord , allowing a user to exclu - sively time - share smart devices in a shared space while addressing the three challenges . A user can verify whether each shared device in a space is compliant with Spacelord and runs code they trust with configurations they provide during their stay . Pre - installed code and configurations , which are beyond their control , are re - moved at check - in . Spacelord reverts all modifications the user has made during their stay at check - out to remove any private data and return control to the owner . Spacelord only requires minor hard - ware and firmware changes ( § 4 ) , minimizing its Trusted Computing Base ( TCB ) as well as maximizing its potential adoption . Spacelord currently focuses on hub - based smart spaces [ 14 , 20 , 29 , 42 , 56 , 60 , 123 ] and it enables a user to control such a smart space in two steps . First , Spacelord allows the user to take full control of the hub except for firmware . The user can deploy an entire software stack ( including an operating system ) they trust on the hub while eliminating old ones which might be under the con - trol of the owner or malicious users . The hub only maintains tiny , trusted firmware ( i . e . , a bootloader ) that realizes this provisioning . The trusted bootloader enables secure boot of the provisioned soft - ware stack and attests it to the user . Also , Spacelord separates the device - and user - specific parts from the rest of the software stack and makes them replaceable across different hubs and spaces to overcome hardware incompatibility . The user - specific part , which contains private configuration , data , and automation rules , becomes accessible to the hub only if it has been attested . Next , Spacelord allows the user to take control of smart devices paired to the hub through the provisioned hub software . The hub and smart devices perform authenticated binding to mutually verify their validity based on attestation and secure device identity , and to establish secure channels . Devices with successful bindings are ready to accept commands from the hub over secure channels . Every Spacelord device has a certified type , so the hub can securely associate it with user - specific configurations and rules . Our prototype shows the effectiveness of Spacelord for two example cases : smart home sharing and meeting room sharing . They function as expected and their configurations ( including automation rules ) are securely migrated across two different smart rooms and two different meeting rooms with a reasonable provisioning delay of ∼ 81s . Our performance evaluation of Spacelord hubs featuring remote encrypted storage in the public cloud shows an average overhead of 12 % on the Phoronix Test Suite [ 81 ] . In summary , this paper makes the following contributions : • Spacelord is the first system that realizes secure and privacy - preserving smart space sharing with configurability . Users can securely use and move across time - shared smart spaces with their preferred configurations . • Spacelord lets a user take control of the hub and paired smart devices in a shared space . Spacelord realizes it using ( a ) full provisioning of an entire hub software stack which is separated and replaceable , and ( b ) authenticated binding between the hub software and smart devices . 2 MOTIVATING EXAMPLES In this section , we describe two space sharing examples suffering from privacy , security , and configurability problems . Smart home sharing . Space sharing services ( e . g . , Airbnb , Hilton Connected Room ) [ 4 , 10 , 50 , 90 , 106 ] are featuring smart devices such as smart door locks and smart light bulbs for convenient usage . While worrying about the devices’ privacy and security implication , users would like to customize the devices [ 26 , 64 ] . This customiza - tion includes running automation rules ( e . g . , turn on the light if it is dark , and the user is inside the room ) and having personalized services ( e . g . , recommendation and calendar ) . However , creating these rules is too tedious and time - consuming for users to manually configure the system every time they arrive at a new hotel room or rental while suffering from a privacy - usability trade - off . Meeting room sharing . Meeting rooms in coworking spaces ( e . g . , WeWork [ 111 ] ) feature multiple devices to support hybrid meetings , a mix of an in - person and remote meeting [ 40 , 97 , 115 ] . Such de - vices include a hub for management , screens for presentation , and intelligent cameras , microphones , and speakers for individualized conferencing . Remote meeting software ( e . g . , Teams and Zoom ) run - ning on the hub controls the devices to record and stream a meeting . Also , users would configure presentation or other office software ( e . g . , Impress and PowerPoint ) on the hub to access their sensitive meeting materials . The security and privacy of a hybrid meeting are important as it deals with business - sensitive information while being managed and monitored by numerous devices . 3 MODEL AND GOALS Inthissection , weexplainthe systemandthreatmodelofSpacelord and its design goals . 3 . 1 System and Threat Model We consider time - sharing of a smart space which is modeled as a location managed by a hub and smart devices . The hub connects to and controls all shared devices contained in the space and runs various applications that use them . The devices are controlled only through the hub . This hub - based model follows recent academic and industry smart space systems [ 14 , 20 , 29 , 42 , 56 , 60 , 123 ] with enhanced access control , management , and compatibility . Three participants govern the security and functionality of smart space sharing : manufacturer , owner , and user . Manufacturer . Amanufacturerdevelopsthehardware andfirmware of hubs or devices which are compliant with Spacelord . It also provides security services such as hardware certification and revo - cation . In our model , every participant trusts the manufacturer’s hardware , firmware , and certification . Any attacks from it ( e . g . , built - in backdoor ) and against its hardware and firmware ( e . g . , physical attacks ) are beyond this paper’s scope § 9 . Owner . An owner prepares a smart space by purchasing a hub and smart devices from manufacturers and placing them in the space . The owner lends a user the space and lets them control the hub and devices during their stay . However , the owner does not fully trust them because they might refuse to return control over the hub and devices even after they leave the space ( e . g . , install malware on the Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA hub or pair devices with different hubs ) . The owner aims to revert any modification users have made after they leave . User . A user exclusively leases a smart space and the hub and smart devices contained within it from an owner for a time . The user does not trust convoluted software and configurations already installed on the hub and devices because they might still be under the control of the owner or other users . Thus , users aim to remove the existing software and configurations and install the ones they trust and that are compatible with Spacelord . Out of scope . We do not model the following general threats . First , the owner or other users might place hidden devices , which are not for sharing , in a space . Technologies to detect such devices have been proposed [ 16 , 61 , 87 , 88 , 92 ] , and Spacelord could rely on them . Second , attackers might be able to compromise the hub or devices by exploiting vulnerabilities in their hardware , firmware , or installed user software . Numerous researchers propose hardening mechanisms for them and Spacelord can leverage such mecha - nisms . In addition , we do not consider external attackers as they are weaker than the three participants . Finally , we do not model management problems such as how to agree on the length of stay and cost and how to permit and revoke space entry . 3 . 2 Design Goals G1 . User privacy and security : Spacelord protects a user’s privacy and security when and after they use a space from the owner and other users . Requirements . First , the hub only runs code verified by the user or manufacturer ( i . e . , the user’s TCB ) . Second , every shared smart device in the space is either under the user’s control or disabled . Third , the hub and devices will not be able to access private user code and data after the user leaves the space . G2 . Secure configuration migration : Spacelord enables a user to move across different spaces without configuration and compatibility concerns . Requirements . First , a user needs an abstract smart space rep - resentation to create a universally applicable configuration . Sec - ond , the configuration as well as user code and data are securely deployed to the space where the user arrives . Third , during the deployment , some of the user’s software stack will be securely replaced to accommodate heterogeneous hardware . G3 . Space recoverability : Spacelord allows the owner to recover control of a smart space and restore its configuration . Requirements . Both hub and smart devices have methods to allow the owner to revert any control and configuration changes regardless of prior user actions . 4 DESIGN In this section , we describe the design of Spacelord , including the hub , smart devices , and other components ( Figure 1 ) . 4 . 1 Primitives We outline the primitives Spacelord relies on . ❶ reset SW image User data User token ❷ provision ❹ bind ❺ access Hub Bootloader Devices ❸ attest User SW Stack Smart space Figure 1 : Overall flow of Spacelord . A user resets the hub ➊ to provision a software stack to it ➋ and attest this provisioning ➌ . The hub connects to the smart devices to control them ➍ . The user lets the hub access their data after a successful attestation ➎ . Secure boot . Secure boot checks the integrity of the multilayered boot [ 7 , 114 ] . Before the next software layer is executed , the current layer computes the next layer’s identity ( e . g . , a hash over the binary code ) and decides whether it is authorized to run ( e . g . , by checking whether the hash is in an allow list and whether it is signed by a trusted key ) . If this check fails , the code is not executed . Authenticated boot . Authenticated boot also makes each layer compute the identity of the next software layer [ 35 ] . However , unlike secure boot , authenticated boot does not prevent code from running . The computed identities are simply recorded ( e . g . , in a Trusted Platform Module ( TPM ) [ 103 ] ) and are used in attestation and sealed storage to gate access to resources . Remote attestation . Remote attestation allows one principal ( i . e . , attestor ) to provide signed , verifiable claims ( e . g . , this computer has booted Linux version X with a measurement value Y ) to another principal ( i . e . , verifier ) [ 71 ] . The TPM [ 103 ] and Device Identifier Composition Engine ( DICE ) [ 101 ] are well known examples of it . Secure device identity . A hardware device requires an unforge - able unique identity [ 52 ] to be attested to a remote principal . This hardware identity does not depend on the software state of the device and is often implemented through attestation mechanisms . Attested authenticated key exchange . Authenticated Key Ex - change ( AKE ) [ 28 ] lets two parties exchange a cryptographic session key such that each party can authenticate the identity of the other . Transport Layer Security ( TLS ) [ 86 ] is a widely deployed AKE pro - tocol . AKE can be augmented with attestation claims [ 44 , 58 ] . Our attestor generates X . 509 certificates with additional fields contain - ing attestation claims which are checked as part of a TLS handshake . Proximity verification . Proximity verification confirms whether two parties are physically close to each other . This verification ensures that the user interacts with the hub in the same space ( and vice versa ) , mitigating relay attacks like Cuckoo [ 80 ] . Spacelord can use any verification mechanism , such as distance bounding [ 12 , 27 , 85 ] and biometrics - based presence attestation [ 23 , 124 ] . 4 . 2 User Token Spacelord uses attestation , AKE , and proximity verification to prove to the user ( i . e . , verifier ) that the system is in a trustworthy state . It requires the user to have a trusted device ( or token ) that can participate in these protocols on their behalf . All of them can be implemented as a smartphone app . The token is configured with the public keys of all manufacturers or other entities the user trusts . ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado 4 . 3 Hub Device We explain hardware requirements and setup for the Spacelord hub and essential software components running on it . Hardware . The hub supports secure boot , attestation , and prox - imity verification . The manufacturer provisions every hub device with a unique public - private key pair ( 𝑝𝑘 ℎ , 𝑠𝑘 ℎ ) . The private key 𝑠𝑘 ℎ is protected based on the attestation or secure device identity technology employed ( e . g . , TPM ) . The manufacturer certifies the hub public key 𝑝𝑘 ℎ with its private key 𝑠𝑘 𝑚 . Bootloader . The manufacturer equips the hub with a trusted bootloader akin to existing ones [ 25 , 100 ] . This bootloader installs and loads the user’s software stack with attestation . As a first step , the bootloader orchestrates the acquisition and installation of this software . It begins with the user ( e . g . , a newly arrived guest ) instructing the hub to install their software stack by pressing a dedicated button on the hub to ensure local presence . This button resets the hub and leaves one bit of information for the bootloader to start the software acquisition and installation . The bootloader adapts the hub to a new user by booting into the hub manager—a small operating system with enough driver support to access the network and local storage . The hub manager first obtains the software stack chosen by the user—typically by copying it from the local cache ( for popular public software stacks ) or removable storage ( e . g . , the user token or USB drive ) or by down - loading it . Then , the hub manager installs the chosen image on the hub’s storage device and finally resets the hub . The hub manager is only a networking and storage conduit and not part of the TCB . After the reset , the bootloader performs an authenticated boot of the user’s image by measuring the image , extending the attestation chain with it , and transferring control to it . User software stack . Spacelord allows the user to run a software stack they select while addressing three key challenges . First , the software stack must support different hubs with diverse hardware configurations . It involves deploying and attesting compatible de - vice drivers . Second , the user’s smart space configuration and data ( e . g . , hub apps , ML models , automation rules ) must be secure and portable to the new space . Third , the user must be able to verify the software stack running on the hub . This involves establishing trust in all software components and verifying that they are running on the hub in front of them . § 4 . 4 and § 4 . 5 describe this in detail . 4 . 4 Software Stack Customization We explain how Spacelord securely and efficiently customizes software stacks for different hub hardware while supporting various peripherals and smart devices as well as how it enables users to access their code and data consistently and securely across hubs . Software stack layers . Spacelord partitions the user’s software stack into four layers : ( a ) hardware layer , ( b ) system layer , ( c ) con - figuration layer , and ( d ) user layer . The hardware layer contains hardware - specific files such as device drivers . There is a different hardware layer for each hub type based on its Instruction Set Architecture ( ISA ) and built - in peripherals ( e . g . , GPU , Embedded Multi - Media Card ( eMMC ) , and Ethernet ) . This layer is typically provided by the hub manufacturer . The system layer contains essential system files ( e . g . , system utilities and libraries ) that are independent of hardware ( i . e . , periph - erals ) . In the case of Linux , it contains the root filesystem except for device drivers relocated to the hardware layer . Spacelord uses a common system layer for various hub models with the same ISA . This layer typically comes from an operating system vendor . The configuration layer specifies peripherals and smart devices that the owner has placed in the smart space in the form of a space manifest § 4 . 6 . The hub connects to them via USB , Ethernet , Bluetooth , or other methods . In addition , the configuration layer contains drivers and device - specific software necessary for the hub to interact with these devices . This software generally originates with the manufacturers of the devices and not with the owner . The user layer contains modifications the user has made on top of the clean operating system installation ( i . e . , the system layer ) . It includes the user’s programs and files , and hub applications [ 51 , 78 ] with customization and automation rules which the user wants to apply to the smart spaces they visit . Layer management . Spacelord manages the four layers with two different deployment and security policies based on their se - curity and functionality requirements . The system , hardware , and configuration layers make up the device - specific part of the soft - ware stack . This part is read - only and small ( e . g . , typically around a gigabyte when compressed ) . The bootloader fully acquires and installs this part via the hub manager § 4 . 3 . Spacelord individually hashes these three layers and attests them for verification . In contrast , the user layer ( or user - specific part ) is both readable and writable , and private . It maintains the user’s private data and has to be protected from disclosure . Moreover , it can be large ( e . g . , tens of gigabytes of security camera video streams or slides and demo videos ) with only a portion accessed during typical usage . Thus , fully populating this part during hub provisioning could lead to an excessive and unnecessary delay . In addition , any data written in this part while the software stack is running on a hub must be accessible from other hubs the user may use in the future . Encrypted storage . Spacelord integrates hub - side storage en - cryption with remote storage ( e . g . , third - party cloud storage ) or portable storage using a union filesystem to ensure the security and functionality of the user - specific part . The user token provides the hub with the access credentials ( e . g . , login information , storage decryption keys ) only if it has verified the hub’s software stack § 4 . 5 . Storage caching . Remote user storage for the Spacelord hub might be slow due to high network latency , low bandwidth , or both . Spacelord can optionally use a portion of the local storage as a transparent cache . Spacelord places this cache between the remote encrypted storage and the in - memory decryption logic , so the local storage does not store any plaintext blocks . 4 . 5 Hub Attestation Since the user layer contains private data , Spacelord allows the hub to access it only if a valid device - specific part is installed , booted , and running on the hub . Spacelord uses attestation in combination with AKE to do so § 4 . 1 . The token verifies the manufacturer cer - tificate to decide whether to trust the hub . It also decides whether to trust the software running on the hub , identified by the attested hashes of the hardware , system , and configuration layers . Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA The user token must know the expected hashes against which to compare the hashes from the attestation statement . The hardware layer is typically authored or endorsed by the manufacturer who can securely publish the signed hash ( e . g . , via a trusted Content Delivery Network ( CDN ) ) such that the token can find and download it . The system layer is authored by either an operating system vendor or the hub manufacturer , and the token can obtain its hash similarly . Obtaining the expected hash of the configuration layer is chal - lenging because it consists of different components from various sources . The owner , who composes this layer , publishes a spec - ification of its components that the token will verify § 4 . 6 . The specification lists all binaries and their sources ( i . e . , the device or software vendors ) . The token will download the hash or signature for each binary from its source , and canonically combine these component hashes into the expected hash . On the hub side , a small agent application that is part of the system layer establishes a connection to the user token ( e . g . , over Wi - Fi or Bluetooth ) and implements the AKE protocol ( e . g . , TLS ) including obtaining attestation claims . A similar program imple - ments the AKE protocol on the token side . In parallel , they can do proximity verification § 4 . 1 to mitigate Cuckoo attacks [ 80 ] . If all checks succeed , the agent and the token establish a secure channel , and the token sends the credentials for the user layer to the agent . At this point , the user has assurance that their full software stack is running on the local hub . The next step is to allow the hub to control the devices throughout the smart space . 4 . 6 Peripherals and Connected Devices Space manifest and abstraction . Spacelord requires the owner to specify a space manifest consisting of the cryptographic hardware identifier of the hub and the information of every device placed in the smart space ( i . e . , an extended listing description [ 2 ] ) . For each device 𝑑 𝑖 , the manifest lists its information including certified public key 𝑝𝑘 𝑑 𝑖 , type , and location in the smart space and how to discover or address it . The latter consists of the bus or protocol through which the device can be reached ( e . g . , Wi - Fi , Bluetooth , Z - Wave ) and a protocol - specific way to identify the device such as an auto - discovery mechanism [ 20 , 70 , 77 ] or a special address . The type and location of each device in a space manifest must follow an abstraction model [ 22 , 29 , 42 , 56 , 60 , 78 ] specified by Spacelord . This allows the hub to associate devices with corre - sponding user rules through the space manifest to control or disable them ( e . g . , LivingRoomLight instead of Light # 2 or Device # 5 ) . Hardware and firmware . Spacelord requires attestation and secure boot support for all smart devices . Many low - cost micro - controllers [ 17 , 93 , 94 ] already provide this or functionally similar features . Each device has a local presence button ( or other physical control such as power control [ 116 ] ) to configure it . The manufacturer provisions each device 𝑑 𝑖 with a unique public - private key pair ( 𝑝𝑘 𝑑 𝑖 , 𝑠𝑘 𝑑 𝑖 ) during manufacturing . The manufac - turer certifies 𝑝𝑘 𝑑 𝑖 with its private key 𝑠𝑘 𝑚 , thereby asserting that the device is legitimate . The manufacturer includes the principal device properties in this certificate , such as device model and type ( e . g . , camera , door lock ) , device manufacturer , and URLs to obtain any required device - specific software ( e . g . , drivers ) . In contrast to the hub , the devices are fixed - function sensors or actuators . They do not run arbitrary user code , but adhere to their specifications . Secure boot ensures that the device firmware can only be updated by the manufacturer . Device pairing . The device communicates with and accepts com - mands only from the single local hub , identified by its cryptographic hardware identifier . This requires a pairing step in which the hub’s public key 𝑝𝑘 ℎ is stored in the device . The challenge is to perform the pairing without trusting the owner or burdening the user . Every Spacelord device exposes a command SetPairingKey which allows the hub to provision the device with 𝑝𝑘 ℎ . This com - mand is available only if the device’s local presence button is pressed like Wi - Fi Protected Setup ( WPS ) [ 113 ] . It allows the owner to man - ually pair the devices in the space with the hub by instructing the hub to send the SetPairingKey command while pressing the local presence button on each of the devices . Typically , the owner would complete the pairing for all devices only once , when the smart space is originally set up , obviating the need for any further manual pair - ing steps . Although the owner is not trusted and may pair a device with a different hub , the user can detect it as described below . Authenticated binding and reset . The hub can request a device to reset and establish a new binding . It typically happens when a user arrives at the space or leaves it . After installing user software , the hub reconnects to every device listed in the space manifest . The hub calls the device’s ResetAndBind command , which resets the device to effectively erase the device state including the binding , conducts secure boot , and goes through an attested AKE protocol with the hub , making use of the key pairs and attestation capabilities on either side . The device accepts a binding only if the originator’s public key matches 𝑝𝑘 ℎ stored in it during the pairing . Similarly , the hub accepts the binding only if the device’s public key and attestation information is listed in the space manifest . In a simple case , both hub and device could use X . 509 certificates generated by the TPM’s TPM2 _ CertifyX509 command to establish a TLS session . This mechanism provides confidentiality and integrity for all subsequent communications between the hub and the device . All further device commands and their associated communications are protected by this cryptographic channel . Device inventory and usage control . The hub inventories avail - able devices and shares the list with the user , which consists of successfully bound devices and their properties extracted from the corresponding device certificates . The hub alerts the user of any mismatch between device properties in the space manifest and device certificates ( likely a corrupt space manifest ) and any failed bindings ( likely compromised or turned - off devices ) . A smart space and its manifest might contain types of devices that a user has never used before or does not trust ( e . g . , device types or manufacturers which are suspicious or unknown ) . To deal with such devices , the hub disallows communication with all devices by default even if it has established bindings to them . The hub permits communication with devices only if it finds corresponding rules from the user layer or corresponding public keys from the user token , or the user explicitly authorizes them ( and writes new rules or downloads certificates for them ) . In addition , users can terminate bindings to some devices if they decide not to use them . ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado Component ROCKPro64 iMX8MQ SoC RK3399 i . MX 8M CPU 2 × Cortex A72 @ 1 . 8GHz 4 × Cortex A53 @ 1 . 5GHz 4 × Cortex A53 @ 1 . 4GHz RAM 4GiB 3GiB Storage PCIe Gen 2 SSD 250GB USB 3 . 0 SSD 250GB eMMC 32GB eMMC 16GB Table 1 : Hardware characteristics of hub devices . 4 . 7 Space Reset Spacelord wipes all user information from a smart space if a user requests it ( i . e . , resets the hub ) typically when they leave the space . On every hub power cycle or reboot , the Spacelord bootloader san - itizes the whole RAM . This step is not required for storage devices which are encrypted . All external smart devices are subsequently re - set when the restarted hub initiates the authenticated binding ( § 4 . 6 ) . Owners also use the same reset mechanism to take back control over the smart space . In addition to the reset button , the hub can be configured with an authenticated timer [ 102 , 117 ] , enabling remote reset which is not suppressible by a malicious software stack . 5 IMPLEMENTATION Inthissection , weexplaina referenceimplementationofSpacelord . We introduce two different hub configurations along with their boot - loader and software stack modifications . Then , we prototype several smart devices satisfying Spacelord’s security requirements . Also , we explain implementations of the external components . Finally , we describe complete smart home and meeting room instantiations . 5 . 1 Hub Hardware We implement Spacelord hubs on two Single - Board Computers ( SBCs ) : PINE64 ROCKPro64 ( ROCKPro64 ) and NXP iMX8MQ - EVK ( iMX8MQ ) with different performance and security characteristics . Both SBCs support an open - source bootloader , U - Boot [ 25 ] , that our bootloader is based on § 5 . 2 . ROCKPro64 . Our ROCKPro64’s characteristics are shown in Ta - ble 1 . We use eMMC power - on write protection to write - protect blocks containing the bootloader and the hub manager , respectively . This protection stays in place until the next device reset . We attach a TPM [ 53 ] to the ROCKPro64 for attestation . During hub provisioning , we use the TPM’s own procedure to create an Attestation Identity Key ( AIK ) pair [ 103 ] using the manufacturer as a Certificate Authority ( CA ) , and treat its public and private parts as 𝑝𝑘 ℎ and 𝑠𝑘 ℎ . The TPM does not reveal 𝑠𝑘 ℎ to the outside and all operations with 𝑠𝑘 ℎ ( e . g . , signing ) are performed inside it . iMX8MQ . Our iMX8MQ’s characteristics are shown in Table 1 . Instead of requiring additional hardware ( i . e . , TPM ) , we imple - ment DICE [ 101 ] using secure storage that the iMX8MQ already provides via its Cryptographic Acceleration and Assurance Mod - ule ( CAAM ) [ 76 ] . During provisioning , we encapsulate 𝑠𝑘 ℎ in an encrypted and integrity - protected blob and store it in a write - protected eMMC block . Since DICE delegates signing to higher - level software , we augment DICE with a monotonic counter which is maintained by the bootloader and checked by the devices . 5 . 2 Hub Bootloader Our bootloader is based on U - Boot [ 25 ] . In total , we add 995 and 753 lines of C code to the ROCKPro64 ( with TPM ) and iMX8MQ ( with CAAM ) bootloaders , respectively , as measured by SLOCCount [ 112 ] . We extend U - Boot’s MMC driver to activate eMMC power - on write protection and include the RIoTCrypt library [ 68 ] in it for cryp - tographic operations . We use SHA - 256 for measurement and the Elliptic Curve Digital Signature Algorithm ( ECDSA ) with the NIST P - 256 curve and SHA - 256 for signing and validation . The mea - surement is computed over the GUID Partition Table ( GPT ) of the storage and the boot partition . ROCKPro64 . We modify U - Boot ( v2020 . 01 ) customized for this board [ 104 ] to support the TPM . iMX8MQ . WemodifyU - Boot ( v2020 . 04 ) customizedforthisboard [ 75 ] to enable the NXP - specific caam command for secret storage . After every reset , the bootloader loads the capsulated blob containing 𝑠𝑘 ℎ from eMMC , decapsulates it , and sets the PRIBLOB bits to disable further access until the next reset . The bootloader uses 𝑠𝑘 ℎ to certify a public - private key pair it generates for later software . On - demand hashing . Spacelord uses a runtime integrity protec - tion mechanism ( e . g . , dm - verity [ 98 ] ) for the software stack image ( i . e . , the device - specific part ) . The bootloader only hashes a small part of the image that is needed to enforce the runtime protection . 5 . 3 Hub Manager We use initramfs - tools [ 24 ] to build the hub manager . We write hooks to specify programs ( e . g . , wget and lz4 ) and drivers ( e . g . , Ethernet ) to include in the hub manager . 5 . 4 Software Stack Generation We build a common system layer for our SBCs and their respective hardware layers . The system layer includes all files in the RK3399 Debian 9 Desktop image [ 83 ] except for the kernel binary , modules , and drivers . We also install programs for Spacelord operations to the system layer , i . e . , OpenHAB [ 78 ] and WireGuard [ 31 ] . For the hardware layers , we build Linux kernels , modules , and drivers for the SBCs ( versions 5 . 6 . 0 and 5 . 4 . 47 , respectively ) [ 75 , 104 ] . We run veritysetup on the system and hardware layers , respectively , to compute dm - verity root hashes and hash devices [ 98 ] . Each of our images has ( a ) a boot partition containing the kernel , initramfs , Device Tree Blob ( DTB ) , and root hash , ( b ) a system partition con - taining the system layer , ( c ) a device partition containing the re - spective hardware layer , and ( d ) additional partitions containing hash devices . We measure the GPT and boot partition of each image and sign the resulting hash with 𝑠𝑘 𝑚 . 5 . 5 Storage Server and Device Counterpart We prototype a remote storage server running Internet Small Com - puter Systems Interface ( iSCSI ) via WireGuard [ 31 ] . We create a Linux Unified Key Setup ( LUKS ) [ 41 ] image with a passphrase , for - mat it with ext4 , and upload it to the server . We also generate a WireGuard key pair and store it with the LUKS passphrase in the user token while uploading the WireGuard public key to the server . We create initramfs to allow the user software stack to access a LUKS image in the storage server via iSCSI with WireGuard . The Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Device Sensor / Actuator REST APIs IP camera Camera [ 37 ] / api / camera Door lock Solenoid lock [ 18 ] / api / lock Light bulb LED [ 37 ] / api / led Sensor Motion [ 84 ] , light [ 36 ] / api / motion , / api / light Table 2 : Our smart device implementation with ESP32 . initramfs obtains the WireGuard private key and LUKS passphrase from the user token via the agent only if the hub attestation is successful . It uses dm - cache [ 99 ] to configure a portion of the local storage as a cache for LUKS - encrypted iSCSI blocks . It also uses overlayfs [ 13 ] to overlay the above storage on top of any other partitions to capture and store any new file writing with encryption . If a user uses portable storage instead of remote storage , they only need to ensure a LUKS passphrase is stored in the user token . 5 . 6 User Token and Agent We develop the user token and agent as Linux applications . The user token connects to the agent running on the hub ( i . e . , the hub manager or a user software stack ) via TLS . They consist of 421 and 376 lines of Rust code , respectively . 5 . 7 Peripherals and Connected Devices We prototype smart devices with ESP32 boards with built - in cam - era and light sensor [ 36 , 37 ] and with external motion sensor and actuator [ 18 , 84 ] using the Espressif IoT Development Framework ( ESP - IDF ) [ 38 ] . The four devices we prototype are listed in Table 2 . Each smart device exposes REST APIs to control the sensor or ac - tuator or to retrieve the sensor data . For example , a hub can make the IP camera take a picture and download the captured image by sending a GET request to / api / camera and waiting for a response . We revise the HTTPS server component and Mbed TLS [ 39 ] to support the authenticated binding § 4 . 6 . The HTTPS server running on a smart device accepts a TLS handshake only if a client ( i . e . , hub ) certificate is attested . The device restarts itself before binding to wipe out previous user data . 5 . 8 Smart Home Instantiation We equip two rooms representing two separate vacation rental apartments or hotel rooms each with a hub and a small collection of smart devices . They enable smart entry and lighting as two compelling functions . Our prototype is based on OpenHAB [ 78 ] to abstract and manage the smart home and contained devices . Hub software customization . We modify OpenHAB’s HTTP binding [ 55 ] for the authenticated binding § 4 . 6 . As a client , it establishes two - way TLS sessions with the HTTPS servers run - ning on the smart devices § 5 . 7 . We configure the HTTP binding’s HttpClient [ 32 , 34 ] with SSLContextFactory . Client [ 33 ] and spec - ify a KeyStore for the private key derived by TPM or DICE and TrustStores for the certificates of smart devices contained in the configuration layer § 4 . 4 . This binding controls the smart devices via their REST APIs § 5 . 7 . Device deployment . We deploy an IP camera and a smart door lock to support smart entry and a smart light bulb and a motion and a light sensor for smart lighting . To demonstrate migration across different smart homes , we implement two versions of each of the de - vice types § 5 . 7 and deploy them to the two rooms . The two devices of the same type expose slightly different interfaces ( i . e . , different REST API endpoints , such as / api / camera versus / api / v2 / photo ) to test migration . In room A , we deploy the ROCKPro64 hub and version A of the four devices . In room B , we deploy version B of the devices and the iMX8MQ hub . Configuration . The owner prepares configuration layers ( or space manifests ) for the two rooms , specifying which devices exist and how to interact with them . A configuration layer based on Open - HAB contains two different specification files : . things and . items files . A . things file specifies each device by its name , address ( e . g . , IP address ) , location ( e . g . , bathroom or living room ) , and Open - HAB binding ( e . g . , HTTP and MQTT ) . A . items file abstracts de - vices [ 22 , 29 , 42 , 56 , 60 , 78 ] to associate them with user rules . For example , we expose a living room light irrespective of its model as an OpenHAB item called LivingRoomLight . This abstraction allows users to travel with their universal automation rules ( . rules files ) . User state . We prepare user state to demonstrate face - recognition entry and smart lighting . In the former , the hub coordinates the IP camera and smart door lock with face - recognition software to unlock the door if the user is in front of the camera . In the latter case , the user’s automation rules running on the hub control the smart light bulb based on inputs from the light and / or motion sen - sor . In particular , we configure the Face service of Azure Cognitive Services [ 69 ] with user images ( i . e . , one of the authors ) . We use a Python script to connect to the service , upload an image from the camera , and retrieve the recognition result . We add an automation rule to OpenHAB to unlock the door if the user’s face is recognized . Also , we write automation rules to turn the light on and off depend - ing on the reading on the light sensor and the time of day . All these rules , scripts , and credentials are included in the user state . 5 . 9 Meeting Room Instantiation We instantiate two meeting rooms managed by the two hub devices explained in § 5 . 1 . Unlike the smart home example , this instance uses Commercial Off - The - Shelf ( COTS ) peripherals and software for video conference and presentation . Device deployment . We prepare two USB webcams with built - in microphones [ 62 , 108 ] , monitors , and speakers , and attach them to the two hubs . We also attach USB keyboards and mice to the two hubs to let users control video conferences and presentations . These two sets of devices make up meeting rooms A and B , respectively . Configuration . We create configuration layers for the two differ - ent meeting rooms including device drivers and the secure identi - fiers of individual smart devices . User state . We prepare a common user state image for meeting rooms . We install the Firefox browser into the user state image to use the Teams and Zoom web applications . We also install LibreOf - fice’s Impress as a presentation program . In addition , we prepare . odp files in the user state image to open them using Impress . 6 EVALUATION We evaluate Spacelord by answering the following questions : ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado • RQ1 . Case satisfaction : Does Spacelord satisfy the example cases mentioned in § 2 ? ( § 6 . 2 ) • RQ2 . Provisioning latency : How long does a user have to wait for a Spacelord smart space to be ready ? ( § 6 . 3 ) • RQ3 . Performance overhead : How much performance over - head does Spacelord introduce on the hub ? ( § 6 . 4 , § 6 . 5 ) 6 . 1 Environment Server . We deploy the storage server in Microsoft Azure . We use a Standard D2s v3 instance consisting of two vCPUs running at 2 . 6GHz , 8GiB of RAM , 30GiB of Premium SSD storage for the oper - ating system ( Ubuntu Server 18 . 04 ) . The storage server additionally has 128GiB of Standard SSD storage to store LUKS images and runs an iSCSI server with a block size of 4KiB via WireGuard . Hub and network . We evaluate Spacelord with the two hub devices § 5 . 1 and external devices § 5 . 7 . We measure the network bandwidth between the hub devices and the Azure Virtual Ma - chine ( VM ) using iperf3 [ 72 ] . The average download and upload bandwidths are 49 . 5MiB / s and 48 . 8MiB / s . Device . We use ESP32 boards § 5 . 7 to implement smart light bulb , camera , door lock , and sensor . We connect them to Wi - Fi while assigning static private IP addresses . User token . We run the token application on a Linux laptop . The token has a negligible effect on provisioning latency and does not affect hub performance . Software image and LUKS image . We use the RK3399 Debian 9 Desktop image mentioned in § 5 . 4 to generate software stacks for evaluation . The sizes of the lz4 - compressed software stack im - ages we generate for the ROCKPro64 and the iMX8MQ are 1 . 4GiB and 1 . 6GiB ( 2 . 9GiB and 3 . 4GiB before compression ) . We config - ure them to have a 100MiB boot partition , sufficient to store the kernel , initramfs , and other files . We format each partition storing files ( boot , system , and device ) with ext4 . These compressed images are cached and write - protected on the hub’s eMMC device . To install and run the Phoronix Test Suite [ 81 ] , we create a LUKS image ( 40GiB ) , format it with ext4 , and upload it to the storage server while storing the mobile user state mentioned in § 5 . 8 and § 5 . 9 . We use AES - XTS mode with a 256 - bit key for the LUKS image . All benchmarking software § 6 . 5 is installed in the LUKS image . On each hub device , we reserve a 40GiB area of the local storage to cache the LUKS image blocks accessed via iSCSI . In general , Spacelord does not require such a large amount of storage space . For example , if a user only needs a few OpenHAB plugins and configurations , the user storage size can be smaller than 10s of MiB . 6 . 2 Case Satisfaction Smart home sharing . We demonstrate how Spacelord satisfies the smart home sharing case § 2 . In room A , we initialize the ROCK - Pro64 hub with the user’s software stack including OpenHAB and the modified HTTP binding § 5 . 8 . We use OpenHAB’s web interface to verify that all devices are recognized and configured correctly . We test our automation rules for the smart light and confirm they work correctly . We test smart entry by having the user step in front of the camera and observing that the lock opens . Finally , we reset 0 20 40 60 80 100 iMX8MQ RockPro64 Provisioning time ( s ) provision reboot sanitize measure kernel load network storage init Figure 2 : Hub provisioning time ( 81 s on average ) . the hub to erase all user data . We repeat the experiment in room B and observe everything to work correctly . Meeting room sharing . We evaluate whether Spacelord satisfies the meeting room sharing case mentioned in § 2 . We confirm that the two meeting rooms managed by the ROCKPro64 and iMX8MQ hubs support both video conferencing ( i . e . , Teams and Zoom via Firefox ) and presentation ( i . e . , Impress ) . We also validate hub migration by joining the same Zoom meeting and opening the same Impress slides from the storage server in the two meeting rooms in order without overlap ( i . e . , reset and reprovision hubs ) . 6 . 3 Provisioning Latency We measure ( a ) how long it takes to provision a user software stack to the hub and attest it ; and ( b ) how long it takes to create an authen - ticated binding between the hub and each smart device . We repeat these measurements 10 times for each smart space configuration . The standard deviation is less than 10 % in all cases . Hub provisioning . The average provisioning time for a user software stack is 84 . 5s for ROCKPro64 and 77 . 5s for iMX8MQ ( Figure 2 ) . We break down this time : ( a ) copy and decompress an image ; ( b ) reboot and initialize the device ; ( c ) sanitize memory ; ( d ) measure the boot partition ; ( e ) load the kernel and initramfs ; ( f ) initialize the network and do attestation ; ( g ) configure the network storage ; and ( h ) initialize the software stack’s remaining part . The most time - consuming stage is ( a ) , 18 . 6s on ROCKPro64 and 21 . 5s on iMX8MQ , which can be skipped if a user simply reboots the hub while still using the space . Memory sanitization on iMX8MQ is faster than on ROCKPro64 because it has less RAM ( 3GiB versus 4GiB ) and its memory write throughput is higher than that of ROCKPro64 ( 512MiB / s versus 341 . 3MiB / s ) on U - Boot . A provisioning time of < 1 . 5min is reasonable for both smart home and meeting room . The provisioning time is negligible for smart home users who typically rent the space for at least a day . It is also far shorter than the time that would be required to manually configure smart devices or to set up a machine and external devices or prepare meeting materials in a meeting room . Authenticated binding . We measure the elapsed time to estab - lish an authenticated binding between a hub and a smart device . This binding can be conducted in parallel with network storage configuration ( g ) and software stack initialization ( h ) . In total , it takes ∼ 9 . 4s consisting of device reset ( ∼ 3s ) and two - way TLS hand - shakes before and after the device reset ( ∼ 3 . 2s each ) . The hub can initiate multiple bindings in parallel . Thus , the total delay is largely independent of the number of smart devices it manages . It adds up to the OpenHAB startup time that takes ∼ 14 . 9s ( mostly due to Java Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA seqwrite randwrite seqread randread 0 200 400 600 800 T h r oughpu t ( M i B / s ) ( a ) ROCKPro64 seqwrite randwrite seqread randread 0 100 200 300 400 T h r oughpu t ( M i B / s ) S SL I IW IWL IWLC IWLCO ( b ) iMX8MQ Figure 3 : fio benchmark results on our two hub devices ( S : SSD , L : LUKS , I : iSCSI , W : WireGuard , C : dm - cache , O : overlayfs ) . VM initialization ) . The differences in device binding and OpenHAB startup times between ROCKPro64 and iMX8MQ are negligible . 6 . 4 Microbenchmark A Spacelord hub uses encrypted storage , which is backed by re - mote storage , to securely store any data generated or collected when a user stays at a smart space . This encryption and network overhead affects the hub’s overall storage performance . We use a microbenchmark program , fio 2 . 16 [ 11 ] , to evaluate storage perfor - mance in terms of sequential read / write and random read / write throughput . For comparison , we selectively enable Spacelord’s security and performance - enhancement features , including storage encryption , network encryption , and local cache . The seven configurations are SSD ( S ) ; SSD with LUKS ( SL ) ; iSCSI ( I ) ; iSCSI with WireGuard ( IW ) ; iSCSI with WireGuard and LUKS ( IWL ) ; iSCSI with WireGuard , LUKS , and dm - cache ( IWLC ) ; and iSCSI with WireGuard , LUKS , dm - cache , and overlayfs ( IWLCO , Spacelord’s configuration ) . Configuration ( SL ) resembles the best case for Spacelord : all encrypted data are cached locally . In con - trast , configuration ( IWL ) resembles the worst case for Spacelord : all data have to be fetched from remote storage via an encrypted channel . We configure fio to read and write a 2GiB file with asyn - chronous I / O depth 32 and access block size 1MiB . We iterate fio 10 times to obtain the average values . The standard deviation is less than 6 % in all cases . Spacelord outperforms bare iSCSI and is comparable to SSD with LUKS ( Figure 3 ) . On the ROCKPro64 , Spacelord’s storage throughputs are 368 . 5MiB / s ( sequential write ) , 364 . 2MiB / s ( ran - dom write ) , 273 . 8MiB / s ( sequential read ) , and 131 . 4MiB / s ( random read ) . They outperform iSCSI by 3 . 3 × , 3 . 7 × , 2 . 6 × , and 1 . 5 × , and un - derperform SSD with LUKS by 6 . 6 % , 7 . 1 % , 9 . 7 % , and 23 . 9 % ( Fig - ure 3a ) . On the iMX8MQ , the throughputs are 272 . 7MiB / s ( se - quential write ) , 268 . 2MiB / s ( random write ) , 199 . 7MiB / s ( sequential read ) , and 86 . 6MiB / s ( random read ) . They outperform iSCSI by 2 . 5 × , 2 . 8 × , 1 . 9 × , and 1 . 1 × , and underperform SSD with LUKS by 4 . 9 % , 4 . 7 % , 14 . 8 % , and 12 . 9 % ( Figure 3b ) . The iMX8MQ’s lower stor - age performance hides Spacelord’s overhead . Consequently , Spacelord introduces negligible overhead ( 4 . 7 % – 7 . 1 % ) to storage write performance and low overhead ( 9 . 7 % – 23 . 9 % ) J e t S t r ea m 2 S p ee do m e t e r M o ti on m a r k7 - Z i p G z i p pb z i p2 O p e n SS L G nu P G S Q L it e pgb e n c h P yb e n c h A l e xn e t G oog l e n e t g l m a r k2x264 G I M P r e s i ze G I M P r o t a t e G I M P a u t o - l e v e l s G I M P un s h a r p m a s k F L A C e n c od i ng G E O M E A N 0 20 40 60 193 . 8 198 . 7 O v e r h ea d ( % ) RockPro64 iMX8MQ Figure 4 : Phoronix benchmark results . The average runtime perfor - mance overhead of Spacelord is moderate ( 12 % on average ) . to storage read performance . Thus , it does not affect data generation and collection . In contrast , it slows down read operations ( e . g . , reading configuration files or meeting materials ) , but such files are typically small and would be cached in memory in most cases . 6 . 5 Runtime Overhead Spacelord’s state separation and remote encrypted storage affect hub performance . We carefully select 20 tests from the Phoronix Test Suite v10 . 2 . 0 ( which has more than 450 tests ) [ 81 ] related to the hub’s core functionality or users’ general expectations , includ - ing browser , data compression , cryptography , database , machine learning , and multimedia processing . First , the hub can run various web - based applications ( e . g . , OpenHAB , Zoom ) . Second , the hub needs to compress data collected by smart devices to effectively store them . Third , the hub runs cryptographic algorithms to secure communications between itself and smart devices as well as the external services . Fourth , the hub can run database programs to store the structured configuration and data of smart devices . Fifth , the hub can run machine learning algorithms for object recognition or face detection . Finally , the hub can run multimedia processing programs to handle audio , image , and video collected by devices . We compare Spacelord to a baseline of Debian 9 with local stor - age but without LUKS encryption with results shown in Figure 4 . Phoronix ensures that the standard deviation is at most 3 . 5 % by increasing the number of runs as necessary [ 59 ] . On average ( geo - metric mean ) , Spacelord’s runtime overhead is 13 . 5 % ( ROCKPro64 ) and 9 . 5 % ( iMX8MQ ) . The higher overhead on the ROCKPro64 is due to a faster baseline with native storage connected over PCIe as compared to the USB 3 . 0 connection of the iMX8MQ . We think that these overheads are moderate ( considering that Spacelord uses encrypted storage LUKS over iSCSI and WireGuard ) and would be acceptable to most users . A PostgreSQL benchmarking tool , pg - bench ( with 50 clients ) , introduces the highest overhead ( ∼ 200 % ) because it is sensitive to I / O latency and throughput . However , Spacelord targets a smart space , and a database service simultane - ously serving 50 clients is not a likely workload for it . The average overhead of Spacelord without pgbench is 6 % . 7 SECURITY ANALYSIS We explain how Spacelord satisfies its security goals of § 3 . 2 . 7 . 1 User Privacy and Security ( G1 ) Spacelord protects the privacy and security of users from the owner and other users by ( a ) deploying a full software stack that ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado users selected to the hub , ( b ) allowing users to verify whether the software they chose is loaded on the hub , ( c ) ensuring the smart devices only interact with the software securely running on the hub , and ( d ) sanitizing the hub memory . All this relies on the hub bootloader and device firmware written by trusted vendors and secured by trusted hardware . Bare - metal provisioning . Spacelord allows users to provision a full software stack they choose to the hub except for the bootloader and the hub manager , which are write protected . This provisioning effectively removes any unwanted code and data—potentially under the control of the owner or other users—from the hub . The untrusted hub manager cannot violate user privacy and security because it does not run concurrently with the software stack and cannot secretly modify the software stack due to authenticated boot . Authenticated boot . The hub bootloader in conjunction with the hub hardware measures and attests the software stack . The user token compares this measurement value to an expected value to verify whether the user’s software stack is running on the hub . This procedure protects users from malicious owners and other users who may try to install arbitrary software via the hub manager . Authenticated binding . Spacelord devices only interact with the software stack currently running on the hub . A binding request contains the secure device identifier of the hub and is certified by the hub private key whose public key has been placed in the device during provisioning . A Spacelord device will accept a binding request only if the originator’s identifier corresponds to the hub public key . The device resets itself before accepting a valid binding request , destroying any binding and data of a previous user . Memory sanitization . The hub bootloader sanitizes the entire memory after every reset and some portions of it before loading the hub manager or a user software stack . The former wipes out any sensitive user data kept in memory . The latter deletes secret data which is critical to Spacelord operations , such as private keys . 7 . 2 Secure Configuration Migration ( G2 ) Spacelord uses encrypted remote or portable storage to securely maintain configuration and data and deploy them to different spaces . A hub can access the encrypted storage only if the user verifies that the hub is running the software stack they have chosen via their token . Also , Spacelord securely customizes the configura - tion and the software stack’s device - specific part to accommodate heterogeneous hardware by checking a canonical combination of component hashes . 7 . 3 Space Recoverability ( G3 ) Spacelord ensures the owner can take back control over a smart space . The hub bootloader and the hub manager are write protected while the user software stack is running . Thus , the latter cannot delete or corrupt them . The owner can force a reset into a software stack of their choice by asserting local presence ( i . e . , by pressing the hub’s reset button ) . If desired , remote administration can be enabled by equipping the hub hardware with a remote reset mechanism [ 102 , 117 ] . Lastly , the hub manager conducts authenticated bindings with all devices in the space to take control over them . It will inform the owner of any binding failures to resolve their problems . 8 DISCUSSION AND LIMITATION We discuss alternative designs and limitations of Spacelord . 8 . 1 Alternative Design Provisioning . Instead of bare - metal provisioning , Spacelord could use virtualization or container technologies to reduce hub provisioning time [ 1 , 30 , 63 ] . However , these designs have two dis - advantages . First , their TCB is significantly larger than a bootloader . Second , peripheral and external device support is restricted . Using Trusted Execution Environments ( TEEs ) [ 8 , 9 , 19 , 57 ] can avoid the TCB size problem , but it also has limited device support . Decentralization . Spacelord’s centralized design might suffer from a single point of failure problem and be incompatible with standalone smart devices . In general , decentralized smart devices are powerful enough [ 6 , 122 ] , so Spacelord could use bare - metal provisioning and configuration migration for every smart device to realize decentralized control as it provisions each hub . 8 . 2 Limitations Devices under the physical control of an adversary are subject to physical attacks , and Spacelord is no exception . One way to mitigate this threat is using tamper - proof or tamper - evident hard - ware [ 15 , 67 , 74 , 95 , 110 ] , as has been done in other systems such as video game consoles and Blu - ray players . Further , in contrast to remote attacks and physical attacks against devices in a public space ( e . g . , a kiosk ) , physical attackers in our two examples ( i . e . , the owner or previous guests ) are not anonymous . Thus , investigators can ( eventually ) identify and penalize them legally or financially . 9 RELATED WORK Smart home systems . Researchers propose multi - user smart home systems [ 3 , 6 , 43 , 49 , 66 , 89 , 119 – 121 ] . They consider how to assign different access control rights to different people according to their roles ( e . g . , owner , guest ) . Unlike them , Spacelord focuses on exclusive time - sharing of spaces [ 26 , 64 , 118 ] with configurability . Some commercial systems [ 4 , 5 , 45 ] pledge exclusive control of smart devices contained in hotel rooms or vacation rentals while preventing owners from accessing and controlling them . However , in these systems , smart devices are stateless and both users and owners are not allowed to customize the devices . A concurrent study , TEO [ 122 ] , focuses on cryptographic exclusive control of data collected and generated when a user stays at a smart space , but it fully trusts devices and does not consider configurability . Bare - metal provisioning . Existing bare - metal provisioning [ 21 , 54 , 73 , 79 ] considers cloud servers rather than end - user devices . Bolted [ 73 ] relies on a bootloader to provision user images with attestation . However , given the homogeneity of cloud servers gov - erned by the same provider and lack of diverse peripherals , Bolted does not consider critical challenges Spacelord overcomes , such as supporting heterogeneous peripherals and smart devices , verifying smart devices , and detecting user presence . In addition , RO - IoT [ 96 ] considers bare - metal provisioning for IoT devices . However , it does not support heterogeneous devices , control external peripherals , or provide state continuity . Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA 10 CONCLUSION Spacelord allows a user to time - share spaces and their contained smart devices in a privacy - preserving and secure manner . Users can freely and securely install a software stack of their choice via bare - metal provisioning . Spacelord gives users complete control of the smart space while customizing it with the user’s mobile state . Spacelord supports two realistic example cases , smart home and meeting room sharing , with low performance overhead . REFERENCES [ 1 ] Alexandru Agache , Marc Brooker , Alexandra Iordache , Anthony Liguori , Rolf Neugebauer , Phil Piwonka , and Diana - Maria Popa . 2020 . Firecracker : Light - weight Virtualization for Serverless Applications . In Proceedings of the 17th USENIX Symposium on Networked Systems Design and Implementation ( NSDI ) . Santa Clara , CA . [ 2 ] Airbnb Help Center . 2019 . Use of cameras and recording devices . https : / / www . airbnb . com / help / article / 3061 / use - of - cameras - and - recording - devices . [ 3 ] MohammedAl - Shaboti , GangChen , andIanWelch . 2020 . AchievingIoTDevices Secure Sharing in Multi - User Smart Space . In IEEE 45th Conference on Local Computer Networks ( LCN ) . 88 – 99 . [ 4 ] Amazon . 2020 . Alexa for Hospitality . https : / / developer . amazon . com / en - US / alexa / alexa - for - hospitality . [ 5 ] Amazon . 2020 . Alexa Smart Properties End - User FAQs . https : / / m . media - amazon . com / images / G / 01 / asp - marketing / Alexa _ for _ Hospitality _ FAQs . pdf . [ 6 ] Michael P Andersen , Sam Kumar , Moustafa AbdelBaky , Gabe Fierro , John Kolb , Hyung - Sin Kim , David E Culler , and Raluca Ada Popa . 2019 . WAVE : A Decen - tralized Authorization Framework with Transitive Delegation . In Proceedings of the 28th USENIX Security Symposium ( Security ) . Santa Clara , CA . [ 7 ] W . A . Arbaugh , D . J . Farber , andJ . M . Smith . 1997 . ASecureandReliableBootstrap Architecture . In Proceedings of the 18th IEEE Symposium on Security and Privacy ( Oakland ) . Oakland , CA . [ 8 ] Arm . 2021 . Arm Confidential Compute Architecture . https : / / www . arm . com / why - arm / architecture / security - features / arm - confidential - compute - architecture . [ 9 ] Arm Developer . 2008 . TrustZone for Cortex - A . https : / / www . arm . com / technologies / trustzone - for - cortex - a . [ 10 ] August Home . 2017 . August Smart Locks for Airbnb Hosts . https : / / august . com / pages / airbnb . [ 11 ] Jens Axboe . 2017 . Welcome to FIO’s documentation ! https : / / fio . readthedocs . io / en / latest / . [ 12 ] Stefan Brands and David Chaum . 1993 . Distance - bounding protocols . In Work - shop on the Theory and Application of of Cryptographic Techniques . Springer , 344 – 359 . [ 13 ] Neil Brown . 2014 . Overlay Filesystem . https : / / www . kernel . org / doc / Documentation / filesystems / overlayfs . txt . [ 14 ] Z . Berkay Celik , Gang Tan , and Patrick McDaniel . 2019 . IoTGuard : Dynamic Enforcement of Security and Safety Policy in Commodity IoT . In Proceedings of the 2019 Annual Network and Distributed System Security Symposium ( NDSS ) . San Diego , CA . [ 15 ] Tony Chen . 2019 . Guarding Against Physical Attacks : The Xbox One Story . Platform Security Summit . [ 16 ] Yushi Cheng , Xiaoyu Ji , Tianyang Lu , and Wenyuan Xu . 2018 . DeWiCam : Detecting Hidden Wireless Cameras via Smartphones . In Proceedings of the 2018 on Asia Conference on Computer and Communications Security ( ASIACCS ) . 1 – 13 . [ 17 ] Saurin Choksi , Paul Kimelman , and Durgesh Pattamatta . 2020 . Extend MCU Security Capabilities Beyond Trusted Execution with Hardware Crypto Accel - eration and Protection . [ 18 ] Ashish Choudhary . 2020 . ESP32 - CAM Face Recognition Door Lock Sys - tems . https : / / circuitdigest . com / microcontroller - projects / esp32 - cam - face - recognition - door - lock - system . [ 19 ] Victor Costan and Srinivas Devadas . 2016 . Intel SGX Explained . Cryptology ePrint Archive , Report 2016 / 086 . http : / / eprint . iacr . org / 2016 / 086 . pdf . [ 20 ] CSA - IOT . 2022 . Build With Matter | Smart Home Device Solution . https : / / csa - iot . org / all - solutions / matter / . [ 21 ] Cumulus Networks . 2022 . Open Network Install Environment . https : / / opencomputeproject . github . io / onie / . [ 22 ] Stephen Dawson - Haggerty , Andrew Krioukov , Jay Taneja , Sagar Karandikar , Gabe Fierro , Nikita Kitaev , and David Culler . 2013 . BOSS : Building Operating System Services . In Proceedings of the 10th USENIX Symposium on Networked Systems Design and Implementation ( NSDI ) . Lombard , IL . [ 23 ] Ivan De Oliveira Nunes , Xuhua Ding , and Gene Tsudik . 2021 . On the Root of Trust Identification Problem . In Proceedings of the 20th International Conference on Information Processing in Sensor Networks ( IPSN ) . [ 24 ] Debian Wiki . 2019 . initramfs - tools . https : / / wiki . debian . org / initramfs - tools . [ 25 ] DENX . 2007 . Das U - Boot – the Universal Boot Loader . https : / / denx . de / wiki / U - Boot . [ 26 ] Rajib Dey , Sayma Sultana , Afsaneh Razi , and Pamela J Wisniewski . 2020 . Ex - ploring Smart Home Device Use by Airbnb Hosts . In Extended Abstracts of the 2020 CHI Conference on Human Factors in Computing Systems . 1 – 8 . [ 27 ] AritraDhar , IvanPuddu , KariKostiainen , andSrdjanCapkun . 2020 . ProximiTEE : Hardened SGX Attestation by Proximity Verification . In Proceedings of the Tenth ACM Conference on Data and Application Security and Privacy ( CODASPY ) . [ 28 ] Whitfield Diffie , Paul C Van Oorschot , and Michael J Wiener . 1992 . Authentica - tion and Authenticated Key Exchanges . Designs , Codes and cryptography 2 , 2 ( 1992 ) , 107 – 125 . [ 29 ] Colin Dixon , Ratul Mahajan , Sharad Agarwal , AJ Brush , Bongshin Lee , Ste - fan Saroiu , and Paramvir Bahl . 2012 . An Operating System for the Home . In Proceedings of the 9th USENIX Symposium on Networked Systems Design and Implementation ( NSDI ) . San Jose , CA . [ 30 ] Docker . 2013 . Empowering App Development for Developers . https : / / docker . com . [ 31 ] Jason A . Donenfeld . 2017 . WireGuard : Next Generation Kernel Network Tun - nel . In Proceedings of the 2017 Annual Network and Distributed System Security Symposium ( NDSS ) . San Diego , CA . [ 32 ] Eclipse foundation . 2016 . Class Httpclient . https : / / www . eclipse . org / jetty / javadoc / jetty - 9 / org / eclipse / jetty / client / HttpClient . html . [ 33 ] Eclipse foundation . 2016 . Class SSLContextFactory . Client . https : / / www . eclipse . org / jetty / javadoc / jetty - 9 / org / eclipse / jetty / util / ssl / SslContextFactory . Client . html . [ 34 ] Eclipse foundation . 2016 . The Eclipse jetty project . https : / / www . eclipse . org / jetty / . [ 35 ] Paul England , Butler Lampson , John Manferdelli , Marcus Peinado , and Bryan Willman . 2003 . A Trusted Open Platform . IEEE Computer 36 , 7 ( July 2003 ) , 55 – 62 . [ 36 ] ESP - IoT - Solutiondocumentation . 2022 . ESP32 - MeshKit - SenseHardwareDesign Guidelines . https : / / docs . espressif . com / projects / espressif - esp - iot - solution / en / latest / hw - reference / ESP32 - MeshKit - Sense _ guide . html . [ 37 ] Espressif Systems . 2020 . ESP - EYE AI Board . https : / / www . espressif . com / en / products / devkits / esp - eye / overview . [ 38 ] Espressif Systems . 2022 . ESP - IDF Programming Guide . https : / / docs . espressif . com / projects / esp - idf / en / latest / esp32 / index . html . [ 39 ] Espressif Systems . 2022 . ESP - TLS . https : / / docs . espressif . com / projects / esp - idf / en / latest / esp32 / api - reference / protocols / esp _ tls . html . [ 40 ] BobFrischandGaryGreene . 2021 . WhatItTakestoRunaGreatHybridMeeting . https : / / hbr . org / 2021 / 06 / what - it - takes - to - run - a - great - hybrid - meeting . [ 41 ] Clemens Fruhwirth . 2004 . Linux Unified Key Setup ( LUKS ) . https : / / gitlab . com / cryptsetup / cryptsetup / . [ 42 ] Silvery Fu and Sylvia Ratnasamy . 2021 . dSpace : Composable Abstractions for Smart Spaces . In Proceedings of the 28th ACM Symposium on Operating Systems Principles ( SOSP ) . Virtual . [ 43 ] Christine Geeng and Franziska Roesner . 2019 . Who’s In Control ? Interactions In Multi - User Smart Homes . In Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems . 1 – 13 . [ 44 ] Kenneth Goldman , Ronald Perez , and Reiner Sailer . 2006 . Linking remote attestation to secure tunnel endpoints . In Proceedings of the first ACM workshop on Scalable trusted computing ( STC ) . 21 – 24 . [ 45 ] Google . 2021 . Get the best of Google for your hotel . https : / / assistant . google . com / hospitality / . [ 46 ] Grand View Research . 2018 . Smart Office Market Size & Share | Global Industry Report , 2018 - 2025 . https : / / www . grandviewresearch . com / industry - analysis / smart - office - market . [ 47 ] Richard Harper . 2006 . Inside the Smart Home . Springer Science & Business Media . [ 48 ] John Hatcher . 2022 . Healthcare facilities : extraordinary care needs exceptional resilience . https : / / smartbuildingsmagazine . com / features / healthcare - facilities - extraordinary - care - needs - exceptional - resilience . [ 49 ] Weijia He , Maximilian Golla , Roshni Padhi , Jordan Ofek , Markus Dürmuth , Earlence Fernandes , and Blase Ur . 2018 . Rethinking Access Control and Au - thentication for the Home Internet of Things ( IoT ) . In Proceedings of the 27th USENIX Security Symposium ( Security ) . Baltimore , MD . [ 50 ] Hilton . 2017 . Hilton Connected Rooms . https : / / www . hiltonownersportal . com / resource / 1567103925000 / ConnectedRoomBrochure . [ 51 ] Home Assistant . 2013 . Home Assistant . https : / / www . home - assistant . io . [ 52 ] IEEE . 2018 . IEEE 802 . 1AR - 2018 - IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity . [ 53 ] Infineon . 2018 . OPTIGA TPM SLB 9670 TPM2 . 0 Data Sheet . [ 54 ] Michael Isard . 2007 . Autopilot : Automatic Data Center Management . ACM SIGOPS Operating Systems Review 41 , 2 ( 2007 ) , 60 – 67 . [ 55 ] Jan N . Klug . 2010 . HTTP Binding . https : / / www . openhab . org / addons / bindings / http / . [ 56 ] Haojian Jin , Gregory William Joseph Liu , David Ethan Hwang , Swarun Kumar , Yuvraj Agarwal , and Jason Hong . 2022 . Peekaboo : A Hub - Based Approach to ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Yechan Bae , Sarbartha Banerjee , Sangho Lee , and Marcus Peinado Enable Transparency in Data Processing within Smart Homes . In Proceedings of the 43rd IEEE Symposium on Security and Privacy ( Oakland ) . San Francisco , CA . [ 57 ] David Kaplan , Jeremy Powell , and Tom Woller . 2016 . AMD Memory Encryption . White paper ( 2016 ) . [ 58 ] Thomas Knauth , Michael Steiner , Somnath Chakrabarti , Li Lei , Cedric Xing , and Mona Vij . 2018 . Integrating Intel SGX Remote Attestation with Transport Layer Security . arXiv preprint arXiv : 1801 . 05863 ( 2018 ) . [ 59 ] Michael Larabel . 2019 . When will the Phoronix Test Suite pts / fio run more samples ? https : / / www . phoronix . com / forums / forum / phoronix / phoronix - test - suite / 1126013 - when - will - the - phoronix - test - suite - pts - fio - run - more - samples . [ 60 ] E . Lear , R . Droms , and D . Romascanu . 2019 . Manufacturer Usage Description Specification . ( 2019 ) . [ 61 ] Tian Liu , Ziyu Liu , Jun Huang , Rui Tan , and Zhen Tan . 2018 . Detecting Wireless Spy Cameras Via Stimulating and Probing . In Proceedings of the 16th Annual International Conference on Mobile Systems , Applications , and Services ( MobiSys ) . 243 – 255 . [ 62 ] Logitech . 2020 . Logitech BRIO Webcam with 4K Ultra HD Video & HDR . https : / / www . logitech . com / en - us / products / webcams / brio - 4k - hdr - webcam . 960 - 001105 . html . [ 63 ] FilipeManco , CostinLupu , FlorianSchmidt , JoseMendes , SimonKuenzer , Sumit Sati , Kenichi Yasukata , Costin Raiciu , and Felipe Huici . 2017 . My VM is Lighter ( and Safer ) than you Container . In Proceedings of the 26th ACM Symposium on Operating Systems Principles ( SOSP ) . Shanghai , China . [ 64 ] Shrirang Mare , Franziska Roesner , and Tadayoshi Kohno . 2020 . Smart De - vices in Airbnbs : Considering Privacy and Security for both Guests and Hosts . Proceedings on Privacy Enhancing Technologies 2020 , 2 ( 2020 ) , 436 – 458 . [ 65 ] MarketsandMarkets . 2021 . Smart home market . https : / / www . marketsandmarkets . com / Market - Reports / smart - homes - and - assisted - living - advanced - technologie - and - global - market - 121 . html . [ 66 ] Tara Matthews , Kerwell Liao , Anna Turner , Marianne Berkovich , Robert Reeder , and Sunny Consolvo . 2016 . “She’ll just grab any device that’s closer” : A Study of Everyday Device & Account Sharing in Households . In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems . 5921 – 5932 . [ 67 ] Amanda McGregor . 2021 . NXP Introduces its First Cloud - Secured , Microsoft Azure Sphere - Certified Processor Family . https : / / www . nxp . com / company / blog / nxp - introduces - its - first - cloud - secured - microsoft - azure - sphere - certified - processor - family : BL - I - MX - 8ULP - CS . [ 68 ] Microsoft . 2020 . RIoTCrypt . https : / / github . com / microsoft / RIoT / tree / master / Reference / RIoT / RIoTCrypt . [ 69 ] Microsoft Azure . 2019 . Cognitive Services—APIs for AI Developers . https : / / azure . microsoft . com / en - us / services / cognitive - services / . [ 70 ] Brent A Miller , Toby Nixon , Charlie Tai , and Mark D Wood . 2001 . Home networking with Universal Plug and Play . IEEE Communications Magazine 39 , 12 ( 2001 ) , 104 – 109 . [ 71 ] Chris Mitchell . 2005 . Trusted Computing . The Institution of Electrical Engineers ( IEE ) . [ 72 ] Mathijs Mortimer . 2018 . iperf3 Documentation . [ 73 ] Amin Mosayyebzadeh , Apoorve Mohan , Sahil Tikale , Mania Abdi , Nabil Schear , Charles Munson , Trammell Hudson , Larry Rudolph , Gene Cooperman , Peter Desnoyers , and Orran Krieger . 2019 . Supporting Security Sensitive Tenants in a Bare - Metal Cloud . In Proceedings of the 2019 USENIX Annual Technical Conference ( ATC ) . Renton , WA . [ 74 ] Bryon Moyer . 2020 . What Makes A Chip Tamper - Proof ? https : / / semiengineering . com / what - makes - a - chip - tamper - proof / . [ 75 ] NXP . 2020 . i . MX - Code Aurora . https : / / www . codeaurora . org / projects / i - mx . [ 76 ] NXP Semiconductors . 2018 . Encrypted Boot on HABv4 and CAAM Enabled Devices . [ 77 ] ONVIF . 2020 . ONVIF Core Specification . [ 78 ] OpenHAB . 2010 . OpenHAB . https : / / www . openhab . org . [ 79 ] OpenStack . 2021 . Welcome to Ironic’s documentation ! http : / / docs . openstack . org / ironic / latest / . [ 80 ] Bryan Parno . 2008 . Bootstrapping Trust in a " Trusted " Platform . In Proceedings of the 3rd USENIX Workshop on Hot Topics in Security ( HotSec ) . [ 81 ] Phoronix Media . 2008 . Phoronix Test Suite - Linux Testing & Benchmarking Platform , Automated Testing , Open - Source Benchmarking . https : / / www . phoronix - test - suite . com . [ 82 ] Jon Porter . 2019 . NYC tenants successfully argue for right to a physical key over a smart lock . https : / / www . theverge . com / 2019 / 5 / 10 / 18564322 / new - york - city - apartment - smart - lock - physical - key - judge - lawsuit - latch . [ 83 ] Radxa . 2019 . ROCK Pi 4 - Radxa Wiki . https : / / wiki . radxa . com / Rockpi4 . [ 84 ] Random Nerd Tutorials . 2019 . ESP32 - CAM PIR Motion Detector with Photo Capture ( saves to microSD card ) . https : / / randomnerdtutorials . com / esp32 - cam - pir - motion - detector - photo - capture / . [ 85 ] Kasper Bonne Rasmussen and Srdjan Capkun . 2010 . Realization of RF Distance Bounding . In Proceedings of the 19th USENIX Security Symposium ( Security ) . Washington , DC . [ 86 ] EricRescorlaandTimDierks . 2018 . TheTransportLayerSecurity ( TLS ) Protocol Version 1 . 3 . ( 2018 ) . [ 87 ] Sriram Sami , Sean Rui Xiang Tan , Bangjie Sun , and Jun Han . 2021 . LAPD : Hidden Spy Camera Detection Using Smartphone Time - of - Flight Sensors . In Proceedings of the 19th ACM Conference on Embedded Networked Sensor Systems ( SenSys ) . [ 88 ] Rahul Anand Sharma , Elahe Soltanaghaei , Anthony Rowe , and Vyas Sekar . 2022 . Lumos : Identifying and Localizing Diverse Hidden IoT Devices in an Unfamiliar Environment . In Proceedings of the 31st USENIX Security Symposium ( Security ) . Boston , MA . [ 89 ] Amit Kumar Sikder , Leonardo Babun , Z Berkay Celik , Abbas Acar , Hidayet Aksu , Patrick McDaniel , Engin Kirda , and A Selcuk Uluagac . 2020 . Kratos : Multi - User Multi - Device - Aware Access Control System for the Smart Home . In Proceedings of the 13th ACM Conference on Security and Privacy in Wireless and Mobile Networks ( WiSec ) . [ 90 ] SmartRent . 2022 . Smart Home Solutions . https : / / smartrent . com . [ 91 ] Rich Smith . 2019 . The Latest Trend in Apartment Living Hits Seattle : Forced Installation of “Smart” Devices . https : / / www . thestranger . com / slog / 2019 / 09 / 09 / 41335556 / the - latest - trend - in - apartment - living - hits - seattle - forced - installation - of - smart - devices . [ 92 ] Yunpeng Song , Yun Huang , Zhongmin Cai , and Jason I Hong . 2020 . I’m All Eyes andEars : ExploringEffectiveLocatorsforPrivacyAwarenessinIoTScenarios . In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems . 1 – 13 . [ 93 ] Kedar Sovani . 2018 . Understanding ESP32’s Security Features . https : / / medium . com / the - esp - journal / understanding - esp32s - security - features - 14483e465724 . [ 94 ] STMicroelectronics . 2020 . OverviewofSecureBootandSecureFirmwareUpdate solution on Arm TrustZone STM32L5 Series microcontrollers . [ 95 ] G Edward Suh , Dwaine Clarke , Blaise Gassend , Marten Van Dijk , and Srinivas Devadas . 2003 . AEGIS : Architecture for Tamper - Evident and Tamper - Resistant Processing . In ACM International Conference on Supercomputing . [ 96 ] KuniyasuSuzaki , AkiraTsukamoto , AndyGreen , andMohammadMannan . 2020 . Reboot - OrientedIoT : LifeCycleManagementinTrustedExecutionEnvironment for Disposable IoT devices . In Proceedings of the Annual Computer Security Applications Conference ( ACSAC ) . [ 97 ] Neal Taparia . 2021 . How One Startup Is Reimagining Office Shar - ing . https : / / www . forbes . com / sites / nealtaparia / 2021 / 03 / 12 / how - one - startup - is - reimagining - office - sharing / ? sh = 6413352cf279 . [ 98 ] The kernel development community . 2011 . dm - verity . https : / / www . kernel . org / doc / html / latest / admin - guide / device - mapper / verity . html . [ 99 ] The kernel development community . 2013 . Cache . https : / / www . kernel . org / doc / html / latest / admin - guide / device - mapper / cache . html . [ 100 ] TianoCore . 2022 . What is TianoCore ? https : / / www . tianocore . org . [ 101 ] TrustedComputingGroup . 2018 . HardwareRequirementsforaDeviceIdentifier Composition Engine . [ 102 ] Trusted Computing Group . 2019 . TPM 2 . 0 Authenticated Countdown Timer ( ACT ) Command . [ 103 ] Trusted Computing Group . 2019 . Trusted Platform Module Library - Part 1 : Architecture . [ 104 ] Kamil Trzciński . 2022 . Rock64 and RockPro64 ayufan’s packages . http : / / rock64 . ayufan . eu . [ 105 ] tuesday coworking . 2021 . Member Benefit : Zoom Room . https : / / www . tuesdaycoworking . com / rent - zoom - room / . [ 106 ] MonicaUprety . 2020 . SmartHomeGadgets : 6AdditionsThatWillRevolutionize Your Vacation Rental . https : / / www . lodgify . com / blog / smart - home - gadgets - vacation - rental / . [ 107 ] Vantage Circle . 2022 . 7 Features Of A Smart Office That You Can’t Overlook . https : / / blog . vantagecircle . com / features - of - smart - office / . [ 108 ] VITADE . 2020 . Webcam 1080P 60fps with Microphone for Streaming , Vitade 682HProHDUSBComputerWebCameraVideoCamforGamingConferencingMacWindowsDesktopPCLaptop . https : / / www . amazon . com / Microphone - Streaming - Vitade - 682H - Conferencing / dp / B086QT9T13 . [ 109 ] Neil Walker . 2021 . How Long Does It Take To Install Smart Home Technology ? Is Home Automation Worth It ? https : / / beonhome . com / how - long - does - it - take - to - install - smart - home - technology / . [ 110 ] David Weston . 2020 . Meet the Microsoft Pluton processor – The security chip designed for the future of Windows PCs . [ 111 ] WeWork . 2008 . https : / / www . wework . com / . [ 112 ] David A . Wheeler . 2001 . SLOCCount . https : / / dwheeler . com / sloccount / . [ 113 ] Wi - Fi Alliance . 2006 . How does Wi - Fi Protected Setup work ? https : / / www . wi - fi . org / knowledge - center / faq / how - does - wi - fi - protected - setup - work . [ 114 ] Richard Wilkins and Brian Richardson . 2013 . UEFI Secure Boot in Modern Computer Security Solutions . [ 115 ] Annabelle Williams . 2021 . Take a look at what Microsoft thinks the future of hybrid meetings will look like . https : / / www . businessinsider . com / microsoft - teams - meetings - hybrid - remote - work - 2021 - 5 . [ 116 ] Megan Wollerton . 2020 . 3 ways to install a smart LED bulb . https : / / www . cnet . com / home / energy - and - utilities / how - to - install - smart - led - light - bulbs / . [ 117 ] MengXu , ManuelHuber , ZhichuangSun , PaulEngland , MarcusPeinado , Sangho Lee , Andrey Marochko , Dennis Matoon , Rob Spiger , and Stefan Thom . 2019 . Spacelord : Private and Secure Smart Space Sharing ACSAC ’22 , December 5 – 9 , 2022 , Austin , TX , USA Dominance as a New Trusted Computing Primitive for the Internet of Things . In Proceedings of the 40th IEEE Symposium on Security and Privacy ( Oakland ) . [ 118 ] Yaxing Yao , Justin Reed Basdeo , Oriana Rosata Mcdonough , and Yang Wang . 2019 . Privacyperceptionsanddesignsofbystandersinsmarthomes . Proceedings of the ACM on Human - Computer Interaction 3 , CSCW ( 2019 ) , 1 – 24 . [ 119 ] Bin Yuan , Yan Jia , Luyi Xing , Dongfang Zhao , XiaoFeng Wang , and Yuqing Zhang . 2020 . Shattered Chain of Trust : Understanding Security Risks in Cross - Cloud IoT Access Delegation . In Proceedings of the 29th USENIX Security Sympo - sium ( Security ) . Boston , MA . [ 120 ] Eric Zeng , Shrirang Mare , and Franziska Roesner . 2017 . End User Security and Privacy Concerns with Smart Homes . In thirteenth symposium on usable privacy and security ( SOUPS ) . 65 – 80 . [ 121 ] Eric Zeng and Franziska Roesner . 2019 . Understanding and Improving Security and Privacy in Multi - User Smart Homes : A Design Exploration and In - Home User Study . In Proceedings of the 28th USENIX Security Symposium ( Security ) . Santa Clara , CA . [ 122 ] Han Zhang , Yuvraj Agarwal , and Matt Fredrikson . 2022 . TEO : Ephemeral Ownership for IoT Devices to Provide Granular Data Control . In Proceedings of the 20th ACM International Conference on Mobile Systems , Applications , and Services ( MobiSys ) . [ 123 ] Han Zhang , Abhijith Anilkumar , Matt Fredrikson , and Yuvraj Agarwal . 2021 . Capture : Centralized Library Management for Heterogeneous IoT Devices . In Proceedings of the 30th USENIX Security Symposium ( Security ) . Virtual . [ 124 ] Zhangkai Zhang , Xuhua Ding , Gene Tsudik , Jinhua Cui , and Zhoujun Li . 2017 . Presence Attestation : The Missing Link in Dynamic Trust Bootstrapping . In Pro - ceedings of the 24th ACM Conference on Computer and Communications Security ( CCS ) . Dallas , TX . 11 APPENDIX 11 . 1 Key Pair Terminology Term Meaning 𝑝𝑘 𝑚 , 𝑠𝑘 𝑚 Public - private key pair of a device manufacturer 𝑝𝑘 ℎ , 𝑠𝑘 ℎ Public - private key pair of a hub ( bootloader ) 𝑝𝑘 𝑑𝑖 , 𝑠𝑘 𝑑𝑖 Public - private key pair of an external device 𝑑 𝑖 Table 3 : Key pairs used in Spacelord . 11 . 2 Compatibility with Existing Ecosystem Spacelord assumes that a smart space’s hub and devices are com - pliant with the Spacelord specification . A Spacelord hub can potentially work with non - Spacelord devices , but this interac - tion should require user authorization . For example , Spacelord presents a user with a list of non - Spacelord devices in a room to let them decide which devices they use or turn off . Unlike existing systems , Spacelord prevents multiple hubs or external apps from managing devices . However , they can interact with the main hub to indirectly control the devices , so its usability concern is marginal .