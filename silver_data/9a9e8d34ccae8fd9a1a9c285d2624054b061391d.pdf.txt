1 A Survey on End - User Robot Programming GOPIKA AJAYKUMAR , MAUREEN STEELE , and CHIEN - MING HUANG , Department of Computer Science , Johns Hopkins University As robots interact with a broader range of end - users , end - user robot programming has helped democratize robot programming by empowering end - users who may not have experience in robot programming to customize robots to meet their individual contextual needs . This article surveys work on end - user robot programming , with a focus on end - user program specification . It describes the primary domains , programming phases , and design choices represented by the end - user robot programming literature . The survey concludes by highlighting open directions for further investigation to enhance and widen the reach of end - user robot programming systems . CCSConcepts : • Computersystemsorganization → Externalinterfacesforrobotics ; • Human - centered computing → User studies ; • Software and its engineering → Development frameworks and environments . Additional Key Words and Phrases : End - User Robot Programming , Human - Robot Interaction , End - User Programming ACM Reference Format : Gopika Ajaykumar , Maureen Steele , and Chien - Ming Huang . 2021 . A Survey on End - User Robot Programming . ACM Comput . Surv . 1 , 1 , Article 1 ( January 2021 ) , 35 pages . https : / / doi . org / 10 . 1145 / 3466819 1 INTRODUCTION As computing technologies have been adopted in a variety of domains , the needs of their end - users in quickly customizing the operation of these technologies to meet domain - specific goals has resulted in increasing development of end - user programming systems for users who are not professional software developers , such as children , accountants , and scientists . End - user program - ming technologies , such as spreadsheets , have reached such pervasiveness that it is estimated that end - user programmers substantially outnumber professional programmers today [ 105 ] . In this way , end - user programming has helped make computer programming widely accessible for those who do not practice software development as a career and has fostered the financial growth of individuals [ 104 ] and the productivity of organizations [ 119 ] . Analogous to how end - user programming has increased the accessibility of computer programming for end - users of computing technologies without extensive training in software development , end - user robot programming is an emerging research area that seeks to enable end - users of general - purpose robotic technologies who are not robotics engineers to re - task and customize robots according to their needs . End - users of robots are working closely with robots in manufacturing plants , warehouses , offices , shops , homes , and even on the road to a growing degree [ 27 ] . As of 2020 , there is a record of This work was supported in part by the National Science Foundation Graduate Research Fellowship Program under Grant No . DGE - 1746891 and the Nursing / Engineering joint fellowship from the Johns Hopkins University . Authors’ address : Gopika Ajaykumar , gopika @ cs . jhu . edu ; Maureen Steele , msteel21 @ jhu . edu ; Chien - Ming Huang , cmhuang @ cs . jhu . edu , Department of Computer Science , Johns Hopkins University , 3400 N . Charles St . , Baltimore , Maryland , 21218 . Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for third - party components of this work must be honored . For all other uses , contact the owner / author ( s ) . © 2021 Copyright held by the owner / author ( s ) . 0360 - 0300 / 2021 / 1 - ART1 https : / / doi . org / 10 . 1145 / 3466819 ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . a r X i v : 2105 . 01757v2 [ c s . R O ] 6 J un 2021 1 : 2 Ajaykumar , Steele , and Huang 2 . 7 million industrial robots being used in factories , with a growing share of these industrial robots being collaborative robots that work closely with end - users [ 79 ] . The variety of domains in which robots are adopted involve different user needs , environments , and task requirements . Rather than requiring robots to be pre - programmed by robotics engineers for specific application domains , which reduces flexibility , or for all potential task scenarios , end - user robot programming allows the end - users of robots to modify the operation of robots to work within their contexts . However , enabling end - user robot programming is a challenging problem . Robot programming is characterized by the embodied nature of the technology being programmed and the situated nature of its programs , introducing unique challenges such as the need for programs to reference and interact with the surrounding environment , which may potentially include task objects , obstacles , and other agents , including people . Effective robot programming not only requires mastery of the technical concepts involved in computer programming in general , such as data structures and algorithms , but also of a variety of multidisciplinary topics , from control engineering to mechatronics . Robotics software engineers must also have an in - depth knowledge of advanced topics related to robotics including path planning , localization , mapping , kinematics , control theory , computer vision , and machine learning . Furthermore , unlike the average robotics engineer , end - users vary widely in their backgrounds and technological literacy and may not have the time or capacity to learn how to program robotic technologies . The primary goal of end - user robot programming is to distill the complexity of robot programming into programming methods that are approachable for users without extensive experience in robotics . The challenge of enabling end - users to effectively develop robot programs that can safely be run in real - world environments without requiring expertise in software development practices and in the underlying hardware , mechanics , and control of robots has inspired a variety of methods for easily re - tasking robots from both industry and academia . Methods to enable end - users to re - task robots and author robot behaviors largely involve two different approaches— demonstration of skills and specification of programs . Robot Learning from Demonstration ( LfD ) , known variously as Programming by Demonstration ( PbD ) and imitation learning , seeks to eliminate the complexities involved in having end - users manually specify robot programs of their desired robot skills by instead having users demonstrate how to perform the desired robot skills . Under the LfD paradigm , robots develop new skills not by executing pre - specified programs , but by learning how to generalize multiple user - provided demonstrations of a task into a robot skill that can be applied in a variety of environmental and task variations . While LfD seeks to simplify end - user customization of robot behavior by eliminating the act of program specification completely , an alternative approach is to simplify robot programming enough such that end - users are capable of program specification . In this article , we survey existing work targeted towards this approach , which , unlike LfD , seeks to enable end - user programming of the structure , logic , and characteristics of the desired robot behavior rather than having end - users demonstrate several instantiations of it . Our survey of end - user robot programming may subsume works on end - user programming using demonstrations , but we focus on demonstrations as a tool for program specification rather than on the techniques to enable robot learning from end - user demonstrations , which have been covered by numerous surveys ( e . g . , [ 5 , 12 , 15 , 22 , 26 , 56 , 71 , 106 , 121 ] ) . Furthermore , we only survey papers on end - user program specification , as opposed to papers on direct control or instruction of robots ( e . g . , [ 48 ] ) . We organize our paper around the domains , processes , and designs involved in end - user robot programming . In Section 2 , we give an overview of how end - user robot programming fits into the larger context of end - user programming and robot programming . Section 3 details the methodology we used to collect papers for the survey . In Section 4 , we begin our survey , focusing specifically on the domains covered by end - user robot programming systems . Section 5 surveys techniques used ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 3 by end - user robot programming systems to enable end - users to participate in different phases of the robot programming process . In Section 6 , we review trends and goals in the design of end - user robot programming systems . Section 7 provides an overview of user evaluation methods in end - user robot programming . Finally , we discuss open challenges and opportunities for future research in Section 8 and provide concluding remarks in Section 9 . 2 BACKGROUND Although end - user robot programming may differ from other forms of programming in terms of its goals and constraints , it draws parallels and inspiration from various related fields . We describe two related fields , end - user programming and robot programming . 2 . 1 End - User Programming End - user robot programming is just one direction within the overall area of end - user programming , which seeks to empower users to program their computing technologies themselves even without experience in programming . In addition to robotics , end - user programming has found use in a variety of application domains , including animation , e - mail , and gaming . End - user programming technologies have reached widespread use , with some estimates indicating that there were more than 55 million end - user programmers in the United States by 2012 [ 105 ] . End - user programming has also seen increasing research interest in the last decade , especially within the computer sci - ence and human - computer interaction communities , with several surveys being published on the topic over the past decade ( e . g . , [ 9 , 73 , 83 , 111 ] ) . Common end - user programming approaches in - clude spreadsheets , natural language programming , rule - based programming , visual programming , wizard - based programming , and programming by demonstration or example , many of which are used to enable end - user robot programming as well ( Section 5 . 2 . 3 ) . Using end - user programming tools , users may perform operations such as automating processes or manipulating data objects without extensive experience in using lower - level programming languages . Unlike traditional programming , end - user programming is generally intended for personal , rather than public , use [ 60 ] . Although end - users may program to meet different goals compared to professional developers , they face similar software engineering challenges , such as the need to test , debug , and secure their software [ 60 ] , which has inspired focus on enabling not just end - user programming , but end - user software engineering . A primary challenge in end - user software engineering has been to support the development of high - quality software in the face of extensive errors in software developed by end - users [ 20 ] and despite the tendency of end - users who are novice programmers to prioritize efficiency and ease over maintainability and robustness during programming [ 13 ] . End - user software engineering research in the past decade has focused on discovery of new programming methods and platforms , software engineering concepts , and application domains [ 60 ] , a trend seen in end - user robot programming research as well . Rooted in the increase in the number and diversity of computer users , end - user programming has helped transform programming by enabling shorter development cycles and empowering end - users to realize their real - time contextual needs through computing . Similarly , as the user base of robotic technologies grows in size and variety , end - user robot programming has emerged as a research area in its own right . Although it shares similarities and builds off of end - user programming approaches , end - user robot programming researchers must also contend with challenges and user needs specific to robot programming and human - robot interaction ( HRI ) , motivating the need to consider end - user robot programming not only as a subcategory within end - user programming , but as an independent field involving unique user needs , goals , and constraints . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 4 Ajaykumar , Steele , and Huang 2 . 2 Robot Programming A central force driving end - user adoption of robotic technologies lies in their programmability , which enables them to be used for a variety of tasks without requiring substantial modification of their hardware or control . The availability of adequate robot programming tools to leverage robots’ programmability is a key factor in determining the tasks a robot can be used for , as well as the total cost of applications involving robots [ 72 ] . Thus , robot programming systems have played a central role in determining the adoption and evolution of robotics . Some of the earliest instances of robot programming took the form of robot - specific languages , which enabled programmers to specify robot motions and sensing operations for particular robots [ 11 ] . These languages , which are commonly used to program industrial robots ( e . g . , Universal Robots’ URScript and KUKA’s KUKA Robot Language ) and are still popular today , provide programmers with application programming interfaces and scripting languages for programming a specific robot or multiple robots from the same company . Although robot - specific languages tend to involve relatively simple syntax and programming commands , they still require programmers to have experience in programming languages and robotics . Furthermore , programmers need to learn a new robot - specific language every time they program a different robot due to the specificity of robot - specific languages . The limitation of robot - specific languages has resulted in a drive towards more abstracted robot programming systems that can be used to program different robots [ 11 ] . Among these more abstracted programming methods , Robot Operating System ( ROS ) [ 93 ] has emerged as the foremost framework for programming a variety of robotic technologies . As one of the most widely used tools for robot programming today , especially in robotics research labs , ROS has helped standardize the procedure for programming different types of robots and provides numerous libraries and simulation tools to simplify specification of robot operations such as navigation and path planning . While ROS provides some GUI - based tools to specify aspects of robot behavior , such as motion , without the need to program using textual program languages , it is primarily intended for use by expert robot programmers , which is seen through its largely command line - based interaction style . At a bare minimum , programmers need experience with a textual programming language , such as C + + or Python , and an understanding of concepts such as reference frames , kinematics , and motion planning to effectively program robots using ROS . Therefore , while ROS and similar frameworks have helped address the overspecificity of robot - specific languages through their applicability to many different robotic technologies and by driving robot programming towards standardization , they require a similarly high level of programming and robotics expertise from robot programmers , limiting their accessibility for end - users who may need to customize robots but are not robotics experts , such as workers on factory floors . The technical barriers preventing end - users of robots from using both robot - specific and more abstracted programming languages and frameworks have motivated the need for end - user robot programming systems . The confluence of trends in end - user programming and robot programming has helped propel research on end - user robot programming . Several surveys have reviewed end - user robot program - ming research literature in the context of specific methods and application domains ( e . g . , [ 29 , 114 ] ) or in the context of end - user programming ( e . g . , [ 84 ] ) or robot programming ( e . g . , [ 11 ] ) in general . In this article , we aim to provide an updated and more comprehensive survey of research on enabling end - user specification of robot programs . 3 METHODOLOGY We conducted a multi - phased collection process to obtain relevant papers for our survey . We focused our search on the databases of four publishers that publish works from major conferences ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 5 and journals on human - computer interaction , human - robot interaction , and robotics : ACM Digital Library ( ACM ) , IEEE Xplore ( IEEE ) , ScienceDirect ( Elsevier ) , and SpringerLink ( Springer ) . 3 . 1 Phase 1 : Initial Paper Collection During Phase 1 of our collection process , we used the search string end - user AND ( robot OR robots OR robotic OR robotics ) AND ( program OR programming OR development OR instruction ) to obtain an initial set of papers from each of the four databases . To determine whether these initial papers were relevant to our survey , we read each paper’s title and abstract to determine whether the paper referenced end - user robot programming and then applied the following exclusion criteria : • The paper is written in a language other than English . • The paper is about end - user robot programming for children or students , with a focus on out - reach or learning outcomes rather than on program specification methods and techniques ( see [ 14 ] for a review on end - user robot programming in the context of non - technical education ) . • The paper was about robot learning rather than end - user robot program specification . Several existing surveys review this topic ( e . g . , [ 5 , 12 ] ) . • The paper focused on intuitive or user - friendly robot programming for programming or robotics experts , rather than end - users without significant experience in programming and robotics ( e . g . , [ 32 , 78 ] ) . If the title and abstract referenced end - user robot programming and did not meet the exclusion criteria , the paper was collected . In cases where it was ambiguous from the title and abstract whether the paper was related to end - user robot programming , we skimmed through the paper to determine whether it should be collected , with a special focus on whether the paper discussed end - users , experts , novices , experience , and user evaluations . Throughout this process , we only collected peer - reviewed papers from symposiums , conferences , and journals . Since three of the four databases yielded from 3 , 000 to around 33 , 000 results using our search string , we set an upper limit to the collection for these databases , which we chose empirically for each database based on the relevancy of the search results . Some papers were listed on both the ACM Digital Library and on IEEE Xplore . We collected these papers from ACM Digital Library but not from IEEE Xplore to avoid duplicates . • ACM Digital Library : Yielded 32 , 548 results ; read through the first 400 ( after which papers were less relevant ) ; collected 45 papers • IEEE Xplore : Yielded 258 results ; collected 18 papers • ScienceDirect : Yielded 33 , 497 results ; read through the first 375 ( after which papers were less relevant ) ; collected 19 papers • SpringerLink : Yielded 3 , 140 conference papers and 2 , 654 journal papers ; read through the first 200 conference papers and the first 50 journal papers ( after which papers were less relevant ) ; collected 16 papers 3 . 2 Phase 2 : Additional Paper Collection After collecting papers from the four databases , we performed a search on Google Scholar using the same search string as before , which yielded 128 , 000 results . We looked through the first 100 items in the search results to discover any peer - reviewed papers that we failed to collect in Phase 1 . Through this process , we added nine additional papers to our initial paper collection , resulting in a total of 107 papers . Six of the papers collected from Google Scholar were published by IEEE , and three of the papers were published by independent publishers , such as the Association for the Advancement of Artificial Intelligence ( AAAI ) . Our collection process , including Phases 1 and 2 , was ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 6 Ajaykumar , Steele , and Huang concluded on June 2020 . While we limited our paper collection to papers published by June 2020 , we did not include any bounds on how early the papers we collected could be published . 3 . 3 Phase 3 : Additional Paper Elimination Finally , we applied the additional elimination criteria listed below to the 107 papers that we collected : • The paper describes designs for end - user robot programming systems but does not describe a system implementation realizing the proposed designs ( e . g . , [ 36 ] ) . • The paper is a short paper consisting of four pages or less ( e . g . , [ 80 ] ) . • The paper does not describe the results from any form of user evaluation of the end - user robot programming system , including case studies ( e . g . , [ 43 ] ) . We included this elimination criterion because of the focus of our paper on user experiences in end - user program specification , rather than on isolated programming methods or system performance metrics . The application of the additional criteria resulted in the elimination of 62 papers ( two of which described no system implementation , 28 of which were short papers , and 32 of which did not include results from a user evaluation ) . This left a total of 45 pages for our survey , the majority of which were from the United States ( 𝑛 = 18 ) . 4 DOMAINS OF END - USER ROBOT PROGRAMMING End - user robot programming systems are designed for the common goal of making robot program - ming more accessible for a wider range of people than only robotics experts . However , they may differ in terms of the categories of users and robots that they are meant for . Below , we describe the diversity of end - users and robots covered by the end - user robot programming research literature . 4 . 1 Types of End - Users End - user robot programming systems cover a spectrum of end - user expertise levels and backgrounds ( Table 1 ) . While the majority of the systems described in the surveyed papers are geared for general users from any background or expertise level , some systems are targeted towards specific groups of users . These include domain specialists such as healthcare workers ( e . g . , [ 63 ] ) and industrial workers ( e . g . , [ 81 ] ) . These domain specialists may have experience in Science , Technology , Engineeering , and Mathematics ( STEM ) [ 7 , 85 ] but tend to have little to no background in robotics or computer programming and no prior experience with robot programming . On the other hand , some systems are meant for everyday groups of users who may not be specialized in a particular field , including children ( e . g . , [ 8 , 101 , 103 ] ) , elderly adults ( e . g . , [ 31 ] ) , caregivers ( e . g . , [ 7 , 31 ] ) , store workers ( e . g . , [ 70 ] ) , and non - programmer adults ( e . g . , [ 96 , 116 ] ) . Due to the diversity of expertise levels that users have , most end - user robot programming systems are designed to support programming for users who have no experience at all in STEM , programming , and robotics . However , some systems may include more advanced programming concepts , such as parallelization ( e . g . , [ 7 , 44 , 47 , 58 , 67 ] ) , procedural abstraction ( e . g . , [ 3 ] ) , and functions ( e . g . , [ 53 ] ) . Furthermore , systems may support a variety of expertise levels , such as by including natural language - based high - level programming features for novice programmers and more expressive , block - based programming features for more advanced users ( e . g . , [ 10 ] ) . Such systems can support novice robot programmers in gradually learning to leverage the full expressivity of an end - user robot programming system and allow both inexperienced and experienced users to make use of the system for their programming needs . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 7 4 . 2 Types of Robots As robots vary greatly in terms of form factors , capabilities , and use cases , end - user robot pro - gramming systems often focus on enabling intuitive customization of a specific type or make of robot ( Table 1 ) . The types of robots used in end - user robot programming systems today can be broadly categorized into two categories : robots primarily intended for manipulation tasks and robots primarily intended for non - manipulation tasks . We describe the robots that are commonly programmed by end - users within these two classes below . 4 . 2 . 1 Robots Primarily Intended for Manipulation Tasks . The most common type of robot used for end - user robot programming in the surveyed literature is the industrial robot manipulator ( arm ) , which is traditionally used for manufacturing tasks . These robots , which have six to seven movable joints , can be programmed to perform various manipulation tasks , ranging from simple pick - and - place tasks to high precision assembly , depending on the individual robot’s capabilities and range of motion . Another common type of robot used in end - user robot programming systems exposes even more capabilities for programming through the use of two manipulators , paving the way for complex manipulation tasks that may require the simultaneous use of multiple forces , such as unscrewing the lid of a jar . Within the surveyed literature , three collaborative robots of this type are used in end - user robot programming systems : the PR2 robot , the Baxter robot , and the YuMi robot . Systems using the PR2 robot from Willow Garage may expose its navigation , manipulation , and sensing and perception capabilites for end - user programming , whereas systems meant for the Baxter robot from Rethink Robotics may expose its customizable facial appearance , its sensing and manipulation capabilities , and , depending on whether it is mounted on a stationary or mobile pedestal , its navigation capabilities for programming . Both types of robots have two 7 - degrees - of - freedom arms and a 2 - degrees - of - freedom head . On the other hand , the YuMi robot from ABB Robotics includes two 7 - degrees - of - freedom arms but no manueverable head or base , which limits it to end - user robot programming of manipulation tasks . While the PR2 robot is a service robot meant for everyday human environments and daily living tasks that require dexterity , the Baxter robot is an industrial robot intended for simple industrial tasks , with a focus on pick - and - place operations , and the YuMi robot is an industrial robot designed for manufacturing environments and assembly tasks . 4 . 2 . 2 Robots Primarily Intended for Non - Manipulation Tasks . In addition to robots intended for manipulation tasks , social robots , mobile service robots , home robots , and educational robots are also types of robots that are commonly programmed by end - users . Social robots include anthropomorphic and zoomorphic robots . The anthropomorphic robots used in end - user robot programming systems include the NAO ( e . g . , [ 7 , 17 , 18 , 34 , 74 ] ) and the Pepper ( e . g . , [ 67 ] ) robots from SoftBank Robotics , the Kaspar robot from the University of Hertfordshire ( e . g . , [ 77 ] ) , the Maggie robot from the University Carlos III of Madrid ( e . g . , [ 44 ] ) , and the Kuri robot from Mayfield Robotics ( e . g . , [ 63 ] ) . The Pepper , Maggie , and Kuri robots are mobile , allowing them to be programmed for navigation tasks . The zoomorphic robots used in end - user robot programming systems include stuffed animal robots ( e . g . , [ 120 ] ) and the Pleo robot from Innvo Labs ( e . g . , [ 74 , 101 ] ) . End - user robot programming systems that use social robots allow users to program both low - level actions , such as sensing and motion , as well as high - level interactive behaviors , such as emotion expression . Other robots used in end - user robot programming systems include mobile service robots ( e . g . , [ 31 , 55 ] ) , such as the Savioke Relay robot . End - user robot programming systems that work with these types of robots allow users to program various types of commands , from navigation to sound and visual display . In addition to robots found in service sectors , some end - user robot programming systems focus on programming of robots found in everyday environments . These include home ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 8 Ajaykumar , Steele , and Huang robots such as the Roomba robot ( e . g . , [ 120 ] ) , robotic toys such as robotic spheres from Sphero ( e . g . , [ 96 ] ) , Arduino cars ( e . g . , [ 8 ] ) , and LEGO robots ( e . g . , [ 103 ] ) . Programming systems that work with lower - cost consumer robots often center on the programming of robot movement and navigation . While end - user robot programming systems tend to focus on the programming of one specific robot , some systems provide users with the option to program multiple robots simultaneously ( e . g . , [ 7 , 99 ] ) , including robots of different makes ( e . g . , [ 99 ] ) . Recent systems further extend end - user programming by enabling the simultaneous programming of robots together with the Internet of Things that is present in the robot’s environment ( e . g . , [ 53 , 67 ] ) . 5 PHASES OF END - USER ROBOT PROGRAMMING The process of developing a program using an end - user robot programming system involves various phases , such as setting up the system , program , or task environment ; specifying program logic ; fixing and checking the authored program for correctness ; and executing the program . We describe the various ways in which programming systems enable users to participate in each of these phases . 5 . 1 Initialization / Setup Similar to how computer programming may require initialization of variables or setup of a program editor , end - user robot programming may require initial setup before program authoring can begin . While a setup or initialization phase is not supported or required in all end - user robot programming systems , some systems may offer system - level setup features , such as hardware testing or calibration ( e . g . , [ 21 ] ) or specification of user information ( e . g . , [ 44 ] ) , and program - level setup features , such as specifying task objects ( e . g . , [ 54 ] ) or the workspace ( e . g . , [ 108 ] ) that must be represented in the programming system . Since robot programming systems , unlike most computer programming systems , often work with programs involving interaction with other objects and entities in the environment , the end - user must also set up the task environment to include necessary components , such as task objects . Setup may also involve preparing necessary hardware for the programming system itself , such as microphones ( e . g . , [ 2 , 21 , 101 ] ) , wearable devices ( e . g . , [ 6 , 94 ] ) , or projectors ( e . g . , [ 41 , 108 , 110 ] ) . To minimize the overhead required on the part of the user , some end - user robot programming systems automate parts of the setup process , such as mapping of the programming workspace and detection of programmable devices and robots ( e . g . , [ 53 ] ) . On the other hand , supporting users in appropriately initializing programs , which is challenging for novice programmers [ 38 ] , has been less explored in the literature , though prior work has suggested its potential usefulness in preventing program errors by end - users ( e . g . , [ 117 ] ) . 5 . 2 Authoring The literature on end - user robot programming systems includes a diversity of focal points , methods , and approaches towards enabling end - user authoring of robot programs . We highlight the variety of authoring techniques that end - users can leverage for robot programming . 5 . 2 . 1 Programmable Robot Capabilities . End - user robot programming systems limit programmable robot capabilities to specific actions that can interlock with their respective robots’ capabilities and meet the needs of their intended users and domains ( Table 1 ) . Programs relating to manipulation are commonly supported by end - user robot programming systems . Some end - user robot programming systems focus on lower - level programming of manipulation and motion paths through which users may specify robot end - effector poses ( e . g . , [ 21 , 40 , 112 ] ) or continuous trajectories ( e . g . , [ 57 ] ) . Others focus on higher - level programming of manipulation through specification of the objects and locations to be used for pick - and - place actions ( e . g . , [ 41 , 81 , 109 ] ) , or they may provide additional user flexibility by allowing both low - level and high - level programming of manipulation ( e . g . , [ 94 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 9 T a b l e 1 . D o m a i n s , P r o g r a mm i n g M e t h o d s , a n d P r o g r a mm a b l e C a p a b i l i t i e s i n E n d - U s e r R o b o t P r o g r a mm i n g . P r o g r a mm i n g M e t h o d ( S e c t i o n 5 . 2 . 3 ) : V = V i s u a l , X R = A u g m e n t e d / M i x e d R e a l i t y , D = D e m o n s t r a t i o n , N L = N a t u r a l L a n g u a g e , T = T a n g i b l e P r o g r a mm a b l e C a p a b i l i t i e s ( S e c t i o n 5 . 2 . 1 ) : I n t e r a c t i v e B e h a v i o r ( e . g . , e m o t i o n , d i a l o g , i n t e r a c t i o n s t y l e ) , M a n i p u l a t i o n ( e . g . , a n y m o t i o n i n v o l v i n g m a n i p u l a t i o n o f o b j e c t s v i a g r i pp e r ) , M o t i o n ( e . g . , m o t i o n p a t h s , g e s t u r e s ) , N a v i g a t i o n ( e . g . , m o t i o n o f m o b i l e r o b o t s t o s p e c i f i e d l o c a t i o n s i n e n v i r o n m e n t ) , S e n s i n g ( e . g . , a c t i v e p e r c e p t i o n , t o u c h s e n s o r r e a d i n g s ) , A u d i o v i s u a l ( e . g . , a u d i o o u t p u t s u c h a s r o b o t s p ee c h a n d v i s u a l o u t p u t s u c h a s t u r n i n g o n a n L E D ) P r o g r a mm i n g M e t h o d P r o g r a mm a b l e C a p a b i l i t i e s B a s i c s E n d - U s e r R o b o t V X R D N L T I n t e r a c . M a n i p . M o t i o n N a v . S e n s i n g A u d . / V i s . A l e x a n d r o v a e t a l . ( 2014 ) [ 2 ] G e n e r a l P R 2 ✓ ✓ ✓ ✓ ✓ A l e x a n d r o v a e t a l . ( 2015 ) [ 3 ] G e n e r a l P R 2 ✓ ✓ ✓ ✓ ✓ ✓ B a m b u š e k e t a l . ( 2019 ) [ 6 ] G e n e r a l P R 2 ✓ ✓ ✓ B a r a k o v a e t a l . ( 2013 ) [ 7 ] H e a l t h c a r e w o r k e r s S o c i a l ✓ ✓ ✓ ✓ ✓ B a r i š i ć e t a l . ( 2018 ) [ 8 ] C h i l d r e n A r d u i n o c a r ✓ ✓ ✓ B e s c h i e t a l . ( 2019 ) [ 10 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ ✓ B u c h i n a e t a l . ( 2016 ) [ 17 ] H e a l t h c a r e w o r k e r s S o c i a l ✓ ✓ ✓ ✓ ✓ B u c h i n a e t a l . ( 2019 ) [ 18 ] H e a l t h c a r e w o r k e r s S o c i a l ✓ ✓ ✓ ✓ ✓ C a k m a k a n d T a k a y a m a ( 2014 ) [ 21 ] G e n e r a l P R 2 ✓ ✓ ✓ ✓ D a tt a e t a l . ( 2011 ) [ 31 ] H e a l t h c a r e w o r k e r s , E l d e r l y a d u l t s , C a r e g i v e r s M o b i l e s e r v i c e ✓ ✓ ✓ ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 10 Ajaykumar , Steele , and Huang T a b l e 1 C o n t i n u e d f r o m P r e v i o u s P a g e P r o g r a mm i n g M e t h o d P r o g r a mm a b l e C a p a b i l i t i e s B a s i c s E n d - U s e r R o b o t V X R D N L T I n t e r a c . M a n i p . M o t i o n N a v . S e n s i n g A u d . / V i s . E r i c h e t a l . ( 2017 ) [ 34 ] H e a l t h c a r e w o r k e r s S o c i a l ✓ ✓ ✓ F o r b e s e t a l . ( 2014 ) [ 37 ] G e n e r a l P R 2 ✓ ✓ ✓ ✓ G a d r e e t a l . ( 2019 ) [ 40 ] G e n e r a l B a x t e r ✓ ✓ ✓ G a o a n d H u a n g ( 2019 ) [ 41 ] G e n e r a l A r m ✓ ✓ G o r o s t i z a a n d S a l i c h s ( 20 1 1 ) [ 44 ] G e n e r a l S o c i a l ✓ ✓ ✓ ✓ ✓ ✓ G u e r i n e t a l . ( 2015 ) [ 47 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ H u a n g e t a l . ( 2016 ) [ 55 ] G e n e r a l M o b i l e s e r v i c e ✓ ✓ ✓ ✓ ✓ ✓ H u a n g a n d C a k m a k ( 2 0 17 ) [ 54 ] G e n e r a l P R 2 ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ H u a n g e t a l . ( 2020 ) [ 53 ] I n d u s t r i a l w o r k e r s M o b i l e ✓ ✓ ✓ ✓ J h a e t a l . ( 2015 ) [ 57 ] G e n e r a l A r m ✓ ✓ K a p i n u s e t a l . ( 2019 ) [ 58 ] I n d u s t r i a l w o r k e r s P R 2 ✓ ✓ K u b o t a e t a l . ( 2020 ) [ 63 ] H e a l t h c a r e w o r k e r s S o c i a l ✓ ✓ ✓ ✓ L e o n a r d i e t a l . ( 2019 ) [ 67 ] G e n e r a l S o c i a l ✓ ✓ ✓ ✓ L i a n g e t a l . ( 2017 ) [ 68 ] G e n e r a l B a x t e r ✓ ✓ ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 11 T a b l e 1 C o n t i n u e d f r o m P r e v i o u s P a g e P r o g r a mm i n g M e t h o d P r o g r a mm a b l e C a p a b i l i t i e s B a s i c s E n d - U s e r R o b o t V X R D N L T I n t e r a c . M a n i p . M o t i o n N a v . S e n s i n g A u d . / V i s . L i a n g e t a l . ( 2018 ) [ 70 ] S t o r e w o r k e r s M o b i l e a r m ✓ ✓ ✓ L i a n g e t a l . ( 2019 ) [ 69 ] G e n e r a l B a x t e r ✓ ✓ ✓ M a n o h a r a n d C r a n d a ll ( 2014 ) [ 74 ] G e n e r a l S o c i a l ✓ ✓ M a tt h a i a k i s e t a l . ( 2017 ) [ 75 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ M o r o s e t a l . ( 2019 ) [ 77 ] G e n e r a l S o c i a l ✓ ✓ ✓ ✓ ✓ O n g e t a l . ( 2020 ) [ 81 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ P a x t o n e t a l . ( 2018 ) [ 85 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ P e d e r s e n a n d K r ü g e r ( 20 1 5 ) [ 86 ] I n d u s t r i a l w o r k e r s M o b i l e a r m ✓ ✓ ✓ Q u i n t e r o e t a l . ( 2018 ) [ 94 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ R a cc a e t a l . ( 2020 ) [ 95 ] G e n e r a l A r m ✓ ✓ ✓ ✓ R a m o ğ l u e t a l . ( 2017 ) [ 96 ] A d u l t s T o y ✓ ✓ ✓ ✓ R i e d l a n d H e n r i c h ( 2 0 19 ) [ 99 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ R y o k a i e t a l . ( 2009 ) [ 101 ] C h i l d r e n S o c i a l ✓ ✓ ✓ ✓ ✓ ✓ ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 12 Ajaykumar , Steele , and Huang T a b l e 1 C o n t i n u e d f r o m P r e v i o u s P a g e P r o g r a mm i n g M e t h o d P r o g r a mm a b l e C a p a b i l i t i e s B a s i c s E n d - U s e r R o b o t V X R D N L T I n t e r a c . M a n i p . M o t i o n N a v . S e n s i n g A u d . / V i s . S a p o u n i d i s a n d D e m e t r i a d i s ( 2013 ) [ 103 ] C h i l d r e n L E G O ✓ ✓ ✓ ✓ ✓ S c h o u e t a l . ( 2018 ) [ 108 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ ✓ ✓ ✓ S e fi d g a r e t a l . ( 2017 ) [ 109 ] G e n e r a l P R 2 ✓ ✓ S e fi d g a r e t a l . ( 2018 ) [ 110 ] G e n e r a l P R 2 ✓ ✓ S t e n m a r k e t a l . ( 2017 ) [ 112 ] G e n e r a l Y u M i ✓ ✓ ✓ ✓ ✓ W e i n t r o p e t a l . ( 2017 ) [ 117 ] I n d u s t r i a l w o r k e r s A r m ✓ ✓ ✓ W e i n t r o p e t a l . ( 2018 ) [ 116 ] A d u l t s A r m ✓ ✓ ✓ Y o u n g e t a l . ( 2014 ) [ 120 ] G e n e r a l R oo m b a , T o y ✓ ✓ ✓ ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 13 For mobile robots , end - user robot programming systems allow users to author programs related to robot navigation ( e . g . , [ 3 , 53 , 55 ] ) . When authoring navigation - related programs , end - users may program the robot to navigate to a known location , which may either be preprogrammed by the system developer , automatically detected by the system ( e . g . , [ 53 , 55 ] ) , or specified by the end - user ( e . g . , [ 86 ] ) . Beyond task - related movements , end - users may also specify motion for robot gestures ( e . g . , [ 7 , 18 ] ) . In addition to motion - related programs , end - user robot programming systems may allow user authoring of robot sensing using sensors such as cameras , motion sensors , and touch sensors to enable the robot to react appropriately to its surroundings ( e . g . , [ 7 , 18 , 47 , 63 , 96 ] ) . Including sensing capabilities can extend the flexibility of end - user robot programming systems by allowing programming in more dynamic environments where task objects or obstacles change locations frequently . Sensor - related actions are often used for event - driven programming or conditional constructs in programming ( e . g . , [ 63 ] ) . For robots with first - person cameras , end - user robot pro - gramming systems may allow user authoring of programs related to active perception ( e . g . , [ 2 ] ) . Active perception enables the robot to maneuver itself or its sensors to obtain information about its environment , which can further minimize the responsibility of the user in specifying object locations during robot programming . In addition to supporting general robot actions related to sensing and audiovisual capabilities such as speech , sound , and lighting ( e . g . , [ 7 , 18 ] ) , end - user robot programming systems may also support programming of higher - level actions , such as human - robot interaction and collaboration ( e . g . , [ 3 , 47 , 55 , 101 , 120 ] ) , or task - level commands , such as common therapeutic exercise commands ( e . g . , [ 63 ] ) or object assembly commands ( e . g . , [ 108 ] ) . 5 . 2 . 2 Authoring Scope . End - user robot programming systems vary in their authoring scope . Many systems focus on enabling users to specify the structure and logic of a program using pre - specified robot primitives , such as grasps or spinning , that are often developed by expert robot programmers ( e . g . , [ 3 , 7 , 8 , 10 , 17 , 18 , 44 , 47 , 53 , 55 , 58 , 63 , 67 , 77 , 86 , 96 , 101 , 103 , 112 , 116 , 117 ] ) . Some end - user robot programs give the user more granular access by allowing end - users to specify the primitives used for subsequent programming ( e . g . , [ 34 , 55 , 68 , 69 , 108 , 112 ] ) or by taking an end - to - end approach in which end - users are fully responsible for specifying every aspect of the program , as in imitation learning ( e . g . , [ 57 , 74 ] ) . On the other hand , other end - user robot programming systems handle the bulk of the program specification using techniques such as automated planning ( e . g . , [ 68 , 69 ] ) . In such systems , end - users may only need to specify high - level aspects of the system , such as end goals or style , or make minor refinements to the system - generated program ( e . g . , [ 6 , 70 , 110 ] ) . Similarly , some systems may focus on enabling rapid prototyping of robot programs rather than longer development cycles ( e . g . , [ 54 , 55 ] ) . In addition to enabling specification of the overall logic and flow of a program , some systems may enable end - users to specify the parameters for commands or functions ( e . g . , [ 53 , 85 , 117 ] ) . In order to ease the process of specifying continuous parameters or parameters in 3 - D space , systems may provide intuitive methods for parametrization , such as directional ( e . g . , [ 95 ] ) or gesture - based specification ( e . g . , [ 86 ] ) . 5 . 2 . 3 Programming Methods . End - user robot programming systems offer a variety of methods for users to program robot actions and behaviors ( Table 1 ) , each of which has its own advantages and limitations . We describe the most common methods used to date ( see Fig . 1 for examples ) . Visual . Visual programming is a common end - user programming method that is widely recog - nized for its success in making programming more accessible for users without technical experience [ 30 , 98 ] . Using visual programming interfaces , end - users are able to author robot programs by manipulating a graphical representation of the program . In the end - user robot programming liter - ature , visual programming interfaces commonly use flow diagrams ( e . g . , [ 7 , 34 ] ) , behavior trees ( e . g . , [ 8 , 47 , 85 ] ) , blocks ( e . g . , [ 10 , 54 , 55 , 77 , 96 , 116 , 117 ] ) , and icons ( e . g . , [ 101 , 103 , 112 ] ) as their ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 14 Ajaykumar , Steele , and Huang Augmentedinterface Visual programming Kinesthetic Demonstration Tangible programming Credit : www . ready - robotics . com Credit : www . ptc . com Credit : www . microsoft . com Credit : developers . google . com Gao and Huang , 2019 [ 41 ] Fig . 1 . Examples of End - User Robot Programming Methods . ( Top ) Visual , Tangible ( Bottom ) Demonstration , Augmented Reality graphical representations . A primary weakness of the visual programming method is its limited representational power , since it can be intractable to represent every possible robot command visually . Thus , visual programming is often combined with alternate methods to enhance its ex - pressivity , such as textual programming ( e . g . , [ 7 ] ) or kinesthetic demonstrations ( e . g . , [ 54 , 112 ] ) . Visual programming requires users to program within a 2 - D interface where the programming commands are disconnected from the task environment . This limitation has led to new approaches to end - user robot programming that combine visual programming concepts with spatial context ( i . e . , spatial - visual programming [ 53 ] ) . For some visual programming systems ( e . g . , [ 31 , 67 , 69 , 70 , 75 , 86 , 95 , 108 ] ) , end - users specify robot programs using Graphical User Interfaces ( GUIs ) that makes use of common interactive visual components for authoring programs , such as windows , buttons , input forms , menus , and sliders . GUIs generally provide pre - specified programming options rather than allowing open - ended user input . Some systems also include simulations of the robot in their GUI for visualization and programming purposes ( e . g . , [ 69 , 75 ] ) . GUI - based end - user robot programming emphasizes familiar , intuitive interaction styles and visualization of program information , but it may still result in high cognitive burden for end - users because of the difficulty of programming robot capabilities meant for 3 - D task environments using 2 - D screens [ 40 , 53 , 96 , 116 , 117 ] . This drawback of GUIs for end - user robot programming has contributed to increased interest in augmented and mixed reality - based robot programming in recent years . Augmented / Mixed Reality . Augmented Reality ( AR ) , in which the real - world environment is supplemented with virtual information , and Mixed Reality ( MR ) , in which physical and virtual objects can interact , are increasingly leveraged as mediums for end - user robot programming . AR - and MR - based robotics applications have been commonly used in industrial environments [ 35 , 42 ] , where the need for safety awareness may limit the use of potentially distracting interfaces that are disjoint from the working environment , and most AR - and MR - based programming systems are intended for programming industrial robots and manufacturing tasks ( e . g . , [ 41 , 58 , 81 , 94 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 15 Augmented and mixed reality interfaces for end - user robot programming enhance the physical environment with virtual overlays through the use of head - mounted displays ( e . g . , [ 6 , 40 , 81 , 94 ] ) , projectors ( e . g . , [ 6 , 41 ] ) , or mobile devices ( e . g . , [ 58 ] ) . End - users are able to interact with virtual items in the augmented environment using gestures ( e . g . , [ 6 , 40 , 41 , 94 ] ) , touch ( e . g . , [ 6 ] ) , speech ( e . g . , [ 94 ] ) , direct interaction ( e . g . , [ 6 , 40 , 58 ] ) , or using devices , such as pointers ( e . g . , [ 81 ] ) or gesture control bands ( e . g . , [ 94 ] ) . End - user program specification is performed by indicating task objects and locations for manipulation ( e . g . , [ 6 , 41 ] ) , motion trajectories ( e . g . , [ 40 , 81 , 94 ] ) or the high - level , situated flow of the program ( e . g . , [ 58 ] ) . AR - and MR - based end - user robot programming overcomes the limitations of other programming methods that may require end - users to be collocated with the robots being programmed , to translate 3 - D environments onto 2 - D screens , and to perform context switches between the robot and the programming interface . Furthermore , they may also better enable non - anthropomorphic robots to convey intent during interactive programming [ 28 , 51 ] . However , augmented reality interfaces may be susceptible to perceptual issues during end - user robot programming because of issues such as occluded or constrained viewpoints and difficult depth perception [ 62 ] . Designers of AR - based programming systems may need to consider these issues carefully , as perceptual issues caused by hardware limitations or overdraw during object rendering may result in higher user cognitive load [ 6 ] . Demonstration . A common and intuitive technique end - users use to program robots is demon - stration of the capabilities to be programmed ( e . g . , [ 57 , 120 ] ) . A common form of demonstration used for program specification is kinesthetic demonstration , which is provided by end - users using kinesthetic teaching , also known as lead - through programming . During kinesthetic teaching , users physically maneuver the robot through the desired robot motion trajectory . Kinesthetic teaching requires low cognitive load for users [ 6 , 94 ] ; allows programmers to have better control of a robot’s movements compared to alternative methods , such as direct manipulation of a virtual image of the robot [ 74 ] ; and can be faster and more intuitive for end - users because it works within the robot’s configuration space [ 81 ] , making it the predominant end - user robot programming method in robotics [ 117 ] and a popular programming method in scientific literature ( e . g . , [ 21 , 69 , 99 , 108 , 112 ] ) . Despite its advantages and widespread use , kinesthetic teaching has limitations , including the requirement for the robot to be physically present during programming [ 6 , 74 ] , which may lessen workplace productivity [ 81 ] ; the physical demands placed on the user in physically guiding the robot [ 1 , 6 , 94 ] , which may make it infeasible to program heavy industrial robots using this method [ 94 ] ; and the need for the robot being programmed to be equipped with sensors and motors that enable kinesthetic demonstrations [ 74 ] . Natural Language . Natural language is commonly employed for end - user robot programming in the form of speech ( e . g . , [ 2 , 10 , 21 , 44 , 54 , 94 ] ) and text ( e . g . , [ 10 , 17 , 18 ] ) . Speech - based programming in particular has the advantage of easy accessibility for most users because of its basis in innate human communication , including for users with physical limitations or who have difficulties spelling [ 63 ] . However , speech - based programming is subject to vulnerabilities , such as speech misrecognition in noisy environments , which may be common in industrial workplaces where end - user robot programming systems may be deployed [ 10 ] , and is constrained to work with programming commands that are easy to describe verbally [ 40 ] . Perhaps due to the potentially unreliable nature of natural language recognition , end - user robot programming systems that use natural language also make use of additional programming methods , such as kinesthetic teaching ( e . g . , [ 2 , 21 , 54 ] ) , GUI visualizations ( e . g . , [ 2 ] ) , augmented reality ( e . g . , [ 94 ] ) , and visual programming ( e . g . , [ 10 , 17 , 18 , 54 ] ) , or additional input modalities , such as gestures ( e . g . , [ 44 , 94 ] ) . Tangible . Tangible programming is a programming method where end - users can author a program by indicating a program’s structure and instructions using physical objects situated in the real - world environment . Common objects used for tangible programming include cards ( e . g . , [ 63 , 101 ] ) ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 16 Ajaykumar , Steele , and Huang and blocks ( e . g . , [ 103 , 109 , 110 ] ) . Tangible programming often involves high - level commands , which can include task - level concepts ( e . g . , [ 63 ] ) , robot behaviors ( e . g . , [ 101 ] ) , or directional or goal - based aspects of motions ( e . g . , [ 103 , 109 , 110 ] ) . Due to its simplicity and ease of use , tangible programming systems are often designed for use by children ( e . g . , [ 101 , 103 ] ) , though recent systems have expanded their use to general end - users ( e . g . , [ 109 , 110 ] ) and domain specialists ( e . g . , [ 63 ] ) . Unlike other programming systems that combine multiple programming methods , tangible robot programming systems generally rely on interaction with physical objects alone for program specification , making it difficult for tangible robot programming to be used in specifying and modifying longer and more complex programs . 5 . 2 . 4 Programming Features . End - user robot programming systems include various programming features common to computer programming , such as conditional instructions and loops . Since robotics often involves the simultaneous processing of multiple sensor streams and actuation of various motors , end - user robot programming systems may also allow end - users to specify elements of parallelization ( e . g . , [ 7 , 44 , 47 , 58 , 67 ] ) and event - driven programming ( e . g . , [ 10 , 47 ] ) . Depending on the background of the intended end - users , designers may also choose to add more advanced programming features into end - user robot programming systems , such as nesting ( e . g . , [ 3 ] ) or functions and recursion ( e . g . , [ 53 ] ) . To reduce the complexity of working with programming features for users without coding experience , some systems embed concepts such as conditions ( e . g . , [ 3 , 109 , 110 ] ) and looping ( e . g . , [ 86 , 109 , 110 ] ) within commands so that users do not explicitly have to work with statements like if / else or while . End - user robot programming systems often involve online ( e . g . , [ 2 , 75 , 94 ] ) or offline ( e . g . , [ 2 , 10 , 74 , 75 , 116 , 117 ] ) programming features . Online programming features , such as those that use kinesthetic teaching , require the use of a real , physical robot . In contrast , offline programming features enable users to program using a virtual simulation of a robot . While interacting with a physical robot may give end - users a better idea of the robot’s capabilities and may be less computationally intensive than simulation - based programming , offline programming features can help reduce user effort and program suboptimalities [ 81 ] , cost [ 82 ] , difficulties in modifying and developing programs [ 82 ] , and idle time in waiting for a robot to become available [ 82 ] . To leverage the advantages of both online and offline features , end - user robot programming systems may provide a combination of both , such as by decoupling online program specification from offline parameter specification ( e . g . , [ 108 ] ) . Alternatively , some end - user robot programming systems may offer programming capabilities that require neither physical nor virtual robot presence ( e . g . , [ 6 ] ) . 5 . 3 Editing and Debugging End - user robot programming systems typically provide program editing tools to allow users to iteratively refine the program and remove any errors or suboptimalities . At the simplest level , end - users can often delete , move , copy , or clear individual commands or the entire program ( e . g . , [ 3 , 21 , 41 , 47 , 101 , 112 ] ) or modify parameters for saved programs or templates ( e . g . , [ 6 , 31 , 40 , 69 , 70 ] ) . In addition , systems focused on editing may provide additional editing functionality , including modification of the configuration or reference frame of individual points in manipulation programs ( e . g . , [ 2 , 37 , 40 ] ) . End - users may also use editing tools to correct system inferences for systems using techniques such as intent recognition or automated planning to automatically specify portions of the program ( e . g . , [ 68 – 70 ] ) . Program modification may also be achieved using more indirect feedback , such as via simple reinforcement learning ( e . g . , [ 120 ] ) . While most systems support pre - and post - execution editing , some systems support real - time editing while the program is running , such as by dynamically changing a robot motion path while it is being previewed in simulation ( e . g . , [ 94 ] ) or executed ( e . g . , [ 75 , 120 ] ) . To support debugging , ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 17 end - user robot programming systems may include features such as stepwise execution and program reversion ( e . g . , [ 86 , 95 , 112 ] ) . These systems may enable editing of visualizations of the robot and the program via GUIs ( e . g . , [ 2 , 37 , 40 , 99 ] ) or augmented reality ( e . g . , [ 69 ] ) , which allows end - users to avoid maneuvering the physical robot to modify portions of the program . To make program editing more intuitive , end - user robot programming systems may use common concepts from other domains , such as filmstrip views or playback from video editing ( e . g . , [ 99 ] ) . For systems focusing on editing to help end - users in providing more diverse , optimal demonstrations for subsequent robot learning , editing may be accomplished through crowdsourcing ( e . g . , [ 37 ] ) . 5 . 4 Verification Verifying that a program will work correctly when executed on the robot is an important part of the programming process , especially for safety - critical environments like clinical settings where users may need to confirm that the program is safe to run around patients [ 17 ] . A program may fail to run correctly because of errors introduced during program authoring or because of errors due to hardware limitations or probabilistic system components , such as robot perception ( e . g . , [ 110 ] ) . Verification of program correctness is often the responsibility of the user , even when the program is automatically generated by the system ( e . g . , [ 68 , 69 ] ) , but systems may offer error feedback ( e . g . , [ 110 , 117 ] ) and prevention mechanisms ( e . g . , [ 8 , 10 , 117 ] ) to ease or automate verification . Some systems check for errors during program authoring ( e . g . , [ 53 , 67 ] ) , while others also perform error checking during program execution ( e . g . , [ 2 , 53 , 110 ] ) . Furthermore , systems using techniques like control synthesis may be able to guarantee users that their program is automatically correct - by - construction , elimating the need for manual verification ( e . g . , [ 63 ] ) . End - user robot programming systems may also include a compilation phase prior to execution ( e . g . , [ 53 , 54 , 103 , 109 ] ) , similar to computer programming systems . 6 DESIGN OF END - USER ROBOT PROGRAMMING SYSTEMS The design of end - user robot programming systems is often inspired by observed user difficulties and needs in robot programming , and designers focus on common design aspects to meet these user needs and make robot programming more accessible . We summarize common design inspirations and aspects and how they are implemented in end - user robot programming systems . 6 . 1 Design Inspirations End - user robot programming systems are often developed with user needs and domain requirements in mind . For example , end - user robot programming systems are commonly developed using a Human - Centered Design ( HCD ) process , where the system design is iteratively updated based on user evaluations and feedback . The HCD design process often involves observation of or interviews with potential end - users at the domain the system is intended for ( e . g . , [ 53 , 55 ] ) , which may help designers understand design requirements and goals for their system [ 53 , 112 ] . Furthermore , designers may follow a bottom - up design approach where user characteristics and needs are used to inspire design ( e . g . , [ 10 ] ) . The HCD process may be applied for both the design of the programming system as well as of any supplementary instructional materials that will accompany it [ 21 ] . End - user robot programming systems may also take inspiration from interfaces from other fields and domains , such as projected interfaces in human - computer interaction ( e . g . , [ 41 ] ) , programming environments in education ( e . g . , [ 117 ] ) , or editors in multimedia ( e . g . , [ 99 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 18 Ajaykumar , Steele , and Huang 6 . 2 Design Aspects End - user robot programming systems prioritize some common design aspects to help provide a more flexible , robust , and easy robot programming experience for users . We detail the aspects commonly considered in the design of end - user robot programming systems . 6 . 2 . 1 Reusability . End - user robot programming systems commonly enable end - users to reuse elements , or the entirety , of their programs . Reusability can be enabled at multiple levels within an end - user robot programming scenario , from reusing robot primitives or modules of a program to reusing a program in a different domain [ 7 ] . Furthermore , program parameters , such as locations , may also be reused ( e . g . , [ 116 ] ) . Reusability can be a valuable design aspect for end - user robot programming systems in improving programming efficiency and simplicity [ 112 ] . To enhance reusability , end - user robot programming systems may follow a modular design where the program is broken into independent modules that can be reused within or shared among programs ( e . g . , [ 7 , 55 ] ) . In many cases , end - users may develop their own custom modules that group together specific portions of the program that they would like to reuse ( e . g . , [ 8 , 40 , 47 , 112 ] ) . End - user robot programming systems may also enable reusability using traditional modular programming constructs like functions and recursion ( e . g . , [ 53 ] ) . Program templates are another popular mechanism to support reusability in end - user robot programming . Program templates enable end - users to program robot actions by quickly and easily parametrizing prespecified program sequences . Program templates can be created by end - users [ 6 , 40 ] , or they may be predefined in the programming system for common tasks , such as screwing ( e . g . , [ 75 ] ) or pick - and - place ( e . g . , [ 117 ] ) . Although end - user robot programming systems for program specification do not focus on robot learning , they may still include components in their systems to help increase the generalizability , and thus reusability , of user programs to new scenarios without relying on the robot to learn how to adapt the program . Program generalizability is often emphasized in robot manipulation programming systems , as manipulation programs are often specified in terms of specific objects and positions instead of higher - level concepts that can apply to different situations . For robot manipulation programs , generalizability is often achieved by representing the way - points in a motion trajectory relative to reference frames , often in reference to a landmark in the environment ( e . g . , [ 2 , 3 , 54 , 85 , 112 ] ) , rather than as an absolute point . Using this approach , program generalizability may be the responsibility of the user , as users can generalize a program to new environments by manually editing the reference frames for waypoints as needed when a program needs to be run for a new task or in a new setting ( e . g . , [ 2 , 112 ] ) . Alternatively , the programming system may be responsible for helping make the manipulation program general - izable by automatically adapting the program to work with task changes , such as the number , types , configurations , or environments of task objects ( e . g . , [ 3 , 69 , 75 , 85 ] ) , allowing flexibility in how and when programmed actions can be performed [ 69 ] . Another common approach to make end - user robot programming systems and programs generalizable to different domains , tasks , and environments is to include parametric programming components that can be easily reparametrized according to the requirements of a new scenario ( e . g . , [ 10 , 47 , 69 , 70 , 86 , 112 ] ) . To further enhance program generalizability , end - user robot programming systems may support parameter ranges , rather than single values , for parametric components so that the system can adapt its parameters’ values to new scenarios ( e . g . , [ 95 ] ) . As a whole , more generalizable end - user robot programming helps drive robot programs towards being more reusable for a diversity of tasks [ 69 , 70 ] . 6 . 2 . 2 Context . As robot programs are situated within the real , physical environment , end - user robot programming systems need to represent the task environment throughout the programming process . While some end - user robot programming systems are inherently situated in the task ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 19 environment through the use of online , AR , natural language , or tangible programming features , other robot programming systems may need to include additional components to help users contextualize their programs . In addition to displaying a representation of the program structure , these systems may include visualizations of the robot ( e . g . , [ 2 , 117 ] ) , task objects ( e . g . , [ 54 , 69 ] ) , and surfaces in the environment ( e . g . , [ 2 ] ) . For manipulation programs , programmed motion paths and robot poses ( e . g . , [ 2 , 37 , 40 , 69 , 81 , 94 , 99 ] ) or the high - level program sequence ( e . g . , [ 58 ] ) may also be visualized within the environment . For navigation programs , where a 2 - D representation is sufficient for conveying spatial information , visualizations of robots and relevant objects may be represented at a lower fidelity ( e . g . , [ 53 ] ) . Some systems assume that the task environment will remain static during the programming process , with objects and landmarks being predefined ( e . g . , [ 69 ] ) , while others assume dynamic , flexible task environments ( e . g . , [ 41 , 75 ] ) , where real - time changes to the environment are supported ( e . g . , [ 3 ] ) . For programs involving interactive robot behaviors , end - users may benefit from social or interaction context . Social context is especially critical when end - users demonstrate programs by acting out robot behaviors , as contextual cues can support effective acting [ 107 ] . Social context can take the form of nonverbal or verbal behaviors ( e . g . , [ 74 ] ) or collaborative scenarios ( e . g . , [ 120 ] ) . 6 . 2 . 3 Transparency . End - user robot programming systems help increase the transparency of robot programming by helping end - users in developing accurate mental models of robots and programming systems . Accurate mental models are essential in helping users effectively learn to operate devices [ 59 ] and use programming commands properly [ 109 ] , helping novice programmers avoid programming errors [ 55 ] and better align their perceived and actual task performance [ 116 ] , and helping users better understand the robot behavior resulting from complex programs [ 67 ] and make use of advanced robotic capabilities [ 85 ] . Supporting accurate mental models may be especially important for systems that include probabilistic components , such as speech recognition , that could lead to unintended changes to the program that the user may fail to notice [ 54 ] . To help users form clearer mental models during the programming process , end - user robot programming systems may contextualize the program within the physical environment so that end - users can understand what is visible to the robot and visualize where commands will occur in the real world ( e . g . , [ 2 , 110 ] ) . In addition , end - user robot programming systems may use direct mapping techniques to make the process of robot programming easier and draw off of end - users’ existing mental models , such as by directly mapping the programming environment to the spatial task environment ( e . g . , [ 53 ] ) , directly mapping program primitives to human actions ( e . g . , [ 86 ] ) , or directly mapping program building to jigsaw puzzle building to help users understand what commands can be connected sequentially ( e . g . , [ 54 ] ) . Furthermore , systems may display the real - time status of the system and the robot as it is programmed so that users can better understand the effects of their programming actions as well as causes of errors or failures ( e . g . , [ 53 , 110 ] ) . Besides displaying the state and status of robot programs , systems may better enhance transparency of robot programming by displaying the “thought process” of the robot as it executes programmed operations , such as by displaying its current state in terms of inputs , outputs , and commands ( e . g . , [ 101 ] ) or its interpretation of the current programming command ( e . g . , [ 69 , 110 ] ) , to help users understand their programs’ effects in real - time . Effective robot programming also requires end - users to have a good understanding of what robots are and are not capable of . End - users who do not have prior experience with robots may be susceptible to misperceptions and incorrect mental models of robot capabilities ( e . g . , [ 68 ] ) due to robots’ physical [ 39 , 91 ] , speech [ 24 ] , movement [ 25 ] , and behavioral [ 65 ] characteristics , as well as due to overblown representations of robots in the media [ 102 ] . This can lead to novice robot programmers having incorrect expectations on what a robot and programming system can ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 20 Ajaykumar , Steele , and Huang accomplish during robot programming . Thus , end - user robot programming systems often include elements in the system to better convey robot and system capabilities . Robot capabilities may be communicated by representing the reachability of different points in space by the robot for manipulation tasks ( e . g . , [ 81 ] ) , providing all programmable robot capabilities as programming commands ( e . g . , [ 63 ] ) and providing a status bar indicating their real - time feasibility ( e . g . , [ 53 , 110 ] ) , specifying which task and programming objects are detected by the robot ( e . g . , [ 110 ] ) , and indicating the workspace in which the robot can operate ( e . g . , [ 110 ] ) . For end - user robot programming methods that may appear to have an unlimited space of programming options , such as natural language - based programming , it is especially important for systems to communicate the constrained set of programming commands that the robot is capable of executing [ 17 ] . 6 . 2 . 4 Abstraction . Abstraction is a common design aspect of end - users robot programming systems that helps simplify the complexity involved in robot programming . Abstraction is inherently part of end - user robot programming systems , which abstract away processes like motion planning or localization . However , some programming systems may include more abstraction than others , depending on whether they choose to abstract away computer programming concepts such as conditions ( e . g . , [ 3 , 109 ] ) or loops ( e . g . , [ 86 , 109 ] ) , represent programming commands at a primitive or semantic level ( e . g . , [ 53 , 63 , 85 , 108 ] ) , or enable the creation of reusable modules ( e . g . , [ 7 , 69 ] ) . Though abstraction is a critical aspect of end - user robot programming systems , it may be difficult for users to create and use abstractions themselves [ 45 ] . Thus , end - user robot programming systems employing abstractions such as templates or functions may need to either pre - define the abstractions for end - users or provide assistance in their development , or they could risk reducing the accessibility of the system for some users [ 45 ] . One approach to enhance user control and flexibility in working with abstractions is to provide users with access to multiple levels of abstraction during robot programming ( e . g . , [ 17 , 67 , 81 ] ) , which can allow them to use or ignore abstractions as desired . 6 . 2 . 5 Assistance . End - user robot programming systems may offer different levels of assistance to further decrease the complexity of robot programming . At the simplest level , end - user robot programming systems may help simplify the process of manual specification of programs . Error prevention , detection , and handling mechanisms are a common example of this type of assistance ( e . g . , [ 3 , 55 ] ) . At a more complex level , programming systems may use interactive , data - driven approaches to automate aspects of program specification . For example , the system may use mixed - initiative features to actively prompt the end - user to provide information that may improve the quality of their program , rather than relying on the user to optimize the program themselves ( e . g . , [ 44 , 95 ] ) . In a similar vein , programming systems may use automated planning techniques to assist the user by automatically generating programs ( e . g . , [ 68 , 69 ] ) and control synthesis to automatically generate control code for specified high - level robot behaviors ( e . g . , [ 63 ] ) . Recent works have explored the use of more data - driven and probabilistic approaches to providing assistance , allowing the use of techniques like intent recognition to infer task goals ( e . g . , [ 70 ] ) or active learning to help end - users narrow down the range of feasible values for continuous program parameters ( e . g . , [ 95 ] ) . 7 EVALUATION OF END - USER ROBOT PROGRAMMING SYSTEMS In this section , we summarize common components and approaches in the design of user evaluations for end - user robot programming . 7 . 1 Methods User evaluations of end - user robot programming systems often seek to evaluate system use for program authoring , with users being instructed to program a specific or open - ended task . In some cases , it may be desirable to evaluate different or more nuanced aspects of the system use . For this ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 21 reason , in addition to tasks related to program authoring , users may be assigned different tasks testing their comprehension of existing programs or their ability to debug erroneous programs ( e . g . , [ 3 , 34 , 53 , 109 ] ) . User evaluations are often conducted using controlled experiments , but may also take form in case ( e . g . , [ 54 , 55 , 112 ] ) , field ( e . g . , [ 31 ] ) , and observational studies ( e . g . , [ 54 ] ) . Observation tends to be favored over controlled experiments when the goal is to evaluate the expressivity of an end - user robot programming system for expert users ( e . g . , [ 47 , 69 ] ) . Evaluations may be conducted not only to understand user experiences in using an end - user robot programming system , but also in the programming process as a whole . For example , user evaluations may seek to understand the effectiveness of supplementary materials or instructions for end - user robot programming systems in addition to the effectiveness of the programming systems ( e . g . , [ 21 , 96 ] ) . User evaluations generally involve one participant at a time , but user evaluations involving children often allow pairs of users to program at a time ( e . g . , [ 77 , 101 , 103 ] ) . End - user robot programming systems may be evaluated alone or against comparative examples or baseline conditions . Comparative examples and evaluation baselines may involve robot pro - gramming using existing commercial ( e . g . , [ 8 , 17 , 34 , 74 , 81 , 112 , 116 ] ) or academic ( e . g . , [ 8 , 41 ] ) programming systems . For systems that are intended for use by expert programmers as well as novices , traditional textual programming languages may serve as the baseline programming method ( e . g . , [ 112 ] ) . For user studies seeking to evaluate system learnability , the baseline condition can involve the use of the same version of the system without instructions ( e . g . , [ 109 ] ) to gauge the immediate understanding of users who do not have any training on how to use the system . 7 . 2 Data Most evaluations collect data about users’ demographics and backgrounds , which often include questions about their attitudes towards and prior experience with technology ( e . g . , [ 21 ] ) , program - ming ( e . g . , [ 67 ] ) , and robots ( e . g . , [ 112 ] ) , to determine whether there is any correlation between user characteristics and various study measures ( e . g . , [ 67 , 112 ] ) . We describe common categories of study measures used in user evaluations for end - user robot programming . 7 . 2 . 1 Success and Quality of User - Authored Programs . Many user evaluations for end - user robot programming systems evaluate the success and quality of programs developed using the end - user robot programming system . We summarize common measures related to task and program success and quality . Task Success . A common task measure used to evaluate whether a programming system enables effective robot programming is task success ( e . g . , [ 2 , 21 , 40 , 112 ] ) . Task success is measured by checking whether a user - authored program results in successful execution ( e . g . , [ 54 , 94 ] ) or meets pre - defined standards of correctness ( e . g . , [ 53 , 70 , 116 ] ) . Subjective Evaluation of Program Quality . When the programming task relates to developing stylistic or social robot behaviors , task success may be based on more subjective measures related to the user - authored program , such as discernability ( e . g . , [ 74 ] ) . In this case , the user - authored program may need to undergo evaluation by other study participants to determine its quality ( e . g . , [ 74 , 120 ] ) . Similarity . In some cases , a program’s quality may be determined by its similarity to other programs , such as programs from previously related work ( e . g . , [ 74 ] ) or experts’ programs ( e . g . , [ 95 ] ) . Similarity - related measures may also be used to evaluate the operation of the system . For instance , for systems that automatically generate a program by imitating a user demonstration , the evaluation may measure the dissimilarity of the generated program from the user’s original demonstration to understand how faithfully the system managed to recreate the user’s demonstration as a robot manipulation program ( e . g . , [ 57 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 22 Ajaykumar , Steele , and Huang Generalizability . Generalizability tests are often performed for programs created by experts , most frequently by the system developers themselves ( e . g . , [ 69 ] ) . However , the generalizability of programs created by study participants may also be evaluated . This is commonly accomplished by having the participant develop the program and then having the experimenter test its generaliz - ability in a new scenario after the study is over ( e . g . , [ 2 , 37 ] ) . Complexity . User - authored programs may be evaluated for their complexity . Depending on the goal of the end - user robot programming system , complexity may be either a desired or undesired quality of a program . For example , for systems meant for the development of complex programs , program complexity may be evaluated to indicate whether users are able to master the use of the system to create more involved programs ( e . g . , [ 17 ] ) . 7 . 2 . 2 Programming Time and Progress . Time and progress are often the focus of user evaluations for end - user robot programming . Around 64 % of the surveyed papers included user evaluations that measure task and programming time , which can be used to get an idea of how efficient end - user robot programming is using the evaluated system . Another task metric used to understand user efficiency while programming an end - user robot programming system is task progress , or the number of tasks that a user managed to complete during the study ( e . g . , [ 17 , 40 , 54 , 116 ] ) . While metrics such as time and progress may provide an idea of the programming efficiency enabled by an end - user robot programming system , these measures are not infallible representations of efficiency since they may be affected by other factors . For instance , studies have suggested that expert programmers may have higher task times because they spend more time exploring a system beyond the requirements of a task [ 69 ] and that some programming methods are inherently faster than others , which may affect task progress measures in studies comparing different programming methods ( e . g . , [ 94 ] ) . Furthermore , high task times may be desirable in some circumstances , as spending more time on earlier tasks may be an effective strategy for programming by helping users master programming features [ 2 , 69 ] . In addition to efficiency , time metrics may highlight the user’s experience and understanding of the system . For example , measuring the amount of time the user spends practicing before they begin programming using a system may suggest the immediate learnability of the system ( e . g . , [ 41 ] ) . While longer interaction times are generally considered negative when considering aspects such as system efficiency and learnability , they may be desirable when the end - user robot programming system is meant for edutainment . For example , interaction time may be measured as part of the user evaluation to assess how engaged a user is when programming using the system ( e . g . , [ 44 ] ) . 7 . 2 . 3 User Perceptions . User evaluations often seek to understand user perceptions of the end - user robot programming process , including their perceptions of the system , the robot , and the programming tasks . User perceptions of the system may be measured by having users give subjective evaluations of the system and its features in terms of their ease to learn ( e . g . , [ 116 ] ) and use ( e . g . , [ 55 , 77 , 103 , 116 ] ) , functionality ( e . g . , [ 86 ] ) , usefulness ( e . g . , [ 2 , 70 , 77 , 110 ] ) , effectiveness ( e . g . , [ 8 ] ) , naturalness ( e . g . , [ 40 ] ) , and intuitiveness ( e . g . , [ 86 ] ) . The perceived usability of an end - user robot programming system is widely measured in user evaluations . The most common tool for measuring system usability in user evaluations for end - user robot programming systems is the System Usability Scale ( SUS ) ( e . g . , [ 6 , 10 , 40 , 54 , 58 , 63 , 67 , 69 , 85 , 95 , 96 ] ) , an established 10 - item questionnaire that produces a system usability score [ 16 ] . User evaluations may also use variations of the Cognitive Dimensions Framework [ 46 ] to evaluate the usability of the system along various cognitive dimensions ( e . g . , [ 7 , 17 , 53 ] ) . Similarly , users may evaluate the user experience of the system using established questionnaires such as the User Experience Questionnaire ( UEQ ) [ 64 ] ( e . g . , [ 6 , 58 ] ) . In addition , users’ perceptions of the programming system may also be better understood by measuring their satisfaction with the system ( e . g . , [ 8 , 116 ] ) , as well as by asking open - ended ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 23 questions about their experience , opinions , and suggestions related to the system and its features . Open - ended comments may be subsequently grouped to represent common user perceptions using a Grounded Theory approach [ 113 ] ( e . g . , [ 63 , 116 , 120 ] ) . Furthermore , users may be asked about their willingness to use a system again ( e . g . , [ 77 ] ) and about their preference for the system relative to alternate programming systems ( e . g . , [ 103 , 110 ] ) . In addition to users’ perceptions and subjective evaluation of the end - user robot programming system , user evaluations may investigate users’ perceptions of the robot being programmed to understand how using an end - user robot programming system affects a user’s mental model of and relationship with the robot . User studies may include questions about the user’s overall perception of the robot ( e . g . , [ 7 ] ) or their evaluation of how the robot performed ( e . g . , [ 2 ] ) . Users’ perceptions of the robot being programmed may also be observed indirectly . For instance , the number of interactions with the robot may be measured to understand how engaging a user perceives the robot , and the programming system as a whole , to be ( e . g . , [ 31 ] ) . User evaluations often aim to understand user perceptions of the programming tasks , since these tasks are representative of real - world programming scenarios the system is intended for . To understand how easy robot programming is using a system , user evaluations may include questions about the users’ perceived difficulty ( e . g . , [ 2 , 21 , 96 ] ) or success ( e . g . , [ 21 ] ) for the programming tasks used in the study . For programming systems meant for edutainment , user evaluations may also ask users how fun or enjoyable they found the programming tasks to be ( e . g . , [ 77 , 103 ] ) . 7 . 2 . 4 User Effort . User evaluations may include measures related to user effort to understand the extent to which an end - user robot programming system alleviates an end - user’s burden during robot programming . User effort may be measured through the number of programming attempts the user makes to achieve a task ( e . g . , [ 120 ] ) . The most common tool for measuring user workload during end - user robot programming is the NASA Task Load Index ( NASA - TLX ) ( e . g . , [ 2 , 6 , 21 , 34 , 37 , 40 , 41 , 58 , 94 ] ) , a subjective tool for assessing a user’s workload while working with a system in terms of mental , physical and temporal demand ; performance ; effort ; and frustration [ 50 ] . 7 . 2 . 5 User Understanding . User evaluations for end - user robot programming systems may seek to measure the level of user understanding on how to effectively program using the system . Gaps in user understanding may be observed by measuring the number , rate , and type of errors users make while using the system ( e . g . , [ 3 , 41 , 116 ] ) and , in cases where the experimenter is available for assistance , the number of help requests they make to the researcher running the evaluation study ( e . g . , [ 21 , 54 , 108 ] ) . Lack of user understanding may also be identified by observing the challenges or difficulties encountered by users during programming ( e . g . , [ 10 , 63 , 110 , 112 ] ) . Users may also be directly tested on their understanding of different system features ( e . g . , [ 109 ] ) , or they may be tested on their understanding of how to use the system before beginning the study to discover correlations between pre - study understanding with final task performances ( e . g . , [ 69 ] ) . 7 . 2 . 6 User Behavior . In addition to the data collected from questionnaires and interviews , data from observations of users may provide insight into user behaviors while using an end - user robot programming system . Data from observing user behavior may provide information on how frequently different system features are used [ 2 , 54 , 69 , 101 ] and how different user groups approach programming tasks using the system [ 3 , 86 , 103 , 120 ] . It may also help showcase unexpected participant behaviors that the system may not be designed for [ 6 ] . Evaluators may use techniques such as encouraging users to think aloud while using the system to understand common user behaviors and thought processes during programming ( e . g . , [ 7 , 96 , 120 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 24 Ajaykumar , Steele , and Huang 7 . 3 Participants If possible , user evaluations will include participants from the intended user base of the program - ming system being evaluated . These may include specific populations , such as domain specialists ( e . g . , [ 7 , 17 , 63 , 99 ] ) or children ( e . g . , [ 77 , 101 , 103 ] ) with or without programming experience . Because end - user robot programming is intended to be approachable for those without technical backgrounds , user evaluations may focus on the recruitment of participants without experience in robotics , in the programming method used by the system , and in programming in general . However , many evaluations also invite participation from experts in these technical areas . Conducting user evaluations with expert users , in addition to novice robot programmers , may be beneficial for gaining insights into how to improve a programming system [ 2 , 120 ] and serve a broader range of users who could benefit from the system [ 120 ] and into how well the system closes the performance gap between novice robot programmers and experts [ 108 ] . 7 . 4 Instruction and Training A common practice in user evaluations for end - user robot programming systems is to provide some form of instruction and training on how to use the systems to users before they begin performing the study tasks . This training may seek to expose users to not just the procedure for programming using the system , but also to special hardware needed to use the system ( e . g . , [ 6 ] ) . Common instruction materials include one - page reference sheets ( e . g . , [ 2 , 116 ] ) and video ( e . g . , [ 37 , 53 ] ) or written ( e . g . , [ 21 , 41 ] ) tutorials . The experimenter may also provide a demonstration ( e . g . , [ 2 , 3 ] ) or verbal explanation of how to use the programming system . Occasionally , tutorials and program examples may be embedded in the system interface itself ( e . g . , [ 96 ] ) . Users may be given an opportunity to perform practice tasks ( e . g . , [ 6 , 55 , 58 , 69 , 85 ] ) and to seek clarifications for any confusion they may still have ( e . g . , [ 85 ] ) before performing the experimental tasks . Furthermore , experimenters may choose not to provide any instruction or training on how to program using the system when they want to observe the immediate understanding of the users without any priming ( e . g . , [ 109 ] ) . 7 . 5 Tasks The study tasks used in user evaluations for end - user robot programming systems may represent common robot actions , domain - specific activities , or specific phases of end - user robot programming . Study tasks involving common robot actions include pick - and - place tasks ( e . g . , [ 41 , 85 ] ) and human - robot or robot - robot interaction tasks , such as authoring scenarios commonly encountered in robot - facilitated therapy ( e . g . , [ 17 ] ) or robot emotions and roles for multi - robot interaction ( e . g . , [ 120 ] ) . Study tasks representing domain - specific activities cover daily living tasks such as cleaning , retrieving and storing household items , and folding towels ( e . g . , [ 2 , 3 , 21 , 54 , 94 , 112 ] ) ; manufacturing tasks such as machine tending , circuit board testing , and welding ( e . g . , [ 47 , 58 , 81 , 86 , 94 , 99 , 108 ] ) ; and store shelving tasks ( e . g . , [ 70 ] ) . While most study tasks focus on testing program authoring , they may also test other phases of end - user robot programming , such as parametrization ( e . g . , [ 6 ] ) , editing ( e . g . , [ 6 , 40 , 68 ] ) , and debugging ( e . g . , [ 58 ] ) . Users may also go through an open - ended task where they freely interact with the programming system to develop their desired program ( e . g . , [ 63 , 67 , 120 ] ) . User evaluations for end - user robot programming systems generally involve multiple study tasks . Often , the number and type of tasks are chosen such that they fit within a prescribed time limit . Study tasks may be given to users in order of increasing complexity ( e . g . , [ 10 , 21 ] ) or with decreasing instruction ( e . g . , [ 7 ] ) to challenge users as they gain experience in using a system . Furthermore , different study tasks may be given to users of different levels of expertise ( e . g . , [ 54 ] ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 25 8 DISCUSSION In this survey , we presented an overview of design and evaluation approaches used for end - user robot programming systems to provide users with the ability to program , edit and debug , and execute programs for various robots without requiring expertise in robot programming . While prior research has helped drive the movement towards connecting a wider range of users with the power of robot customization , there still remain unexplored directions in the field that could further highlight techniques for better understanding and meeting user needs in robot programming . Below , we discuss open challenges and areas of research in end - user robot programming . 8 . 1 Supporting Representative User Evaluations User evaluations are a key component in the design of end - user robot programming systems , motivating the need to develop robust and representative evaluation methods . In this section , we describe open directions for improving evaluations of robot programming systems and to help researchers and developers further understand end - user experiences in robot programming . 8 . 1 . 1 Longitudinal Studies . User evaluations in the end - user robot programming literature are largely short in scope , with studies often taking place within an hour and users performing pre - defined , timed programming tasks . Although user evaluations of this form may be useful in highlighting various aspects of system use , especially in terms of immediate user understanding and first - sight preferences , they may fail to capture the complete user experience in end - user robot programming . This can be observed in the prevalence of the learning effect in user evaluations for end - user robot programming systems ( e . g . , [ 2 , 53 , 54 , 69 , 95 , 96 , 112 , 120 ] ) , where users’ task performances improve as they progress with study tasks . With users often devoting substantial study time to understanding how to use a programming system , evaluations may miss out on user experiences outside of the learning phase and in programming using more complex features that require more time to learn than a short - term study can provide . Longitudinal studies may help researchers and developers obtain a better idea of how users would use systems in the long term , as well as help them understand the dynamics of how users’ system usage may change over time as they become more familiar with an end - user robot programming system . Further work may be needed to enable system developers to easily track how long - term usage and user assessments evolve over time [ 8 ] . 8 . 1 . 2 Benchmark Tasks and Metrics . A primary challenge found in user evaluations for end - user robot programming systems is the difficulty of preventing irrelevant factors from influencing measures in user evaluations . For example , programming tasks requiring more physical input from users ( i . e . , kinesthetic teaching ) take inherently longer to complete , which may make it difficult to fairly compare the task times for programming tasks involving different levels of physical involvement to measure relative efficiency [ 3 ] . Furthermore , subjective measures , such as system usability , may be susceptible to influence from factors unrelated to the programming methods and techniques being evaluated , such as hardware unreliability [ 6 , 86 ] or users’ perceptions of the robot being programmed [ 96 ] . Additionally , the novelty effect users may experience from programming or interacting with a robot for the first time may result in overly positive or negative evaluations of the system , especially for users with unrealistic expectations about a robot’s abilities . End - users of robots are far from a homogenous group and vary greatly in their backgrounds and demographics , which can in turn result in a substantial variance in how different users program [ 3 , 86 , 103 , 120 ] . This variance can be seen in the prevalence of unexpected user programming behaviors that emerge during user evaluations of end - user robot programming systems ( e . g . , [ 6 ] ) . While following a strict experimental protocol , including a variety of study measures , and collecting covariate data may ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 26 Ajaykumar , Steele , and Huang offset some of the variability introduced by the influence of peripheral factors on study measures , it may be infeasible for experimenters to control for every factor in an evaluation . Moving towards deriving an established benchmark set of evaluation tasks and metrics , an approach common in fields such as computer vision and natural language processing , may highlight one way to make systematic progress in end - user robot programming by standardizing the evaluation process and simplifying the process of understanding and comparing different robot programming works . 8 . 1 . 3 Evaluations in Real - World Settings . Recent years have seen the publication of several works in end - user robot programming enabled through collaboration between academics and companies ( e . g . , [ 8 , 55 ] ) , highlighting increasing commercial interests in making end - user robot programming accessible through real - world products and applications . However , academic work on end - user robot programming may present a limited view of user experiences in end - user robot programming due to a lack of deployments and user evaluations in non - laboratory settings . Laboratory settings are generally highly controlled and are set up to prioritize participant safety , which may cause participants to program less cautiously than they would in a less controlled setting ( e . g . , [ 95 ] ) . While some systems have been deployed in real - world settings , such as on production floors ( e . g . , [ 47 , 86 , 108 ] ) , these deployments generally focus on evaluating the technical capabilities of programming systems in enabling programming of complex tasks rather than on how end - users use the systems as part of their typical workflows . Further exploration is therefore needed to understand the applicability of end - user robot programming systems in the research literature to real - world domains , which may have requirements and constraints that laboratory settings may fail to represent . Conducting more observational and field studies may further help in gaining insight into how users program for real - world use cases in uncontrolled lab environments , while including open - ended programming tasks where end - users freely interact with a system in user evaluations may reveal user programming behaviors outside of a timed task context . Overall , further work is needed in end - user robot programming to create experimental approaches and data measures and analyses that faithfully represent realistic end - user programming experiences . 8 . 2 Supporting a Wider Range of Programming Capabilities Although end - user robot programming has made many aspects of robot programming accessible for end - users , there still remain key use cases of robots and aspects of robot behavior that should be available for end - user customization to further the applicability of end - user robot programming . 8 . 2 . 1 Programming Collaborative Tasks . While there have been several proposed approaches for end - user programming of human - robot interactions , end - user robot programming techniques for programming human - robot collaboration are less represented in literature . Most end - user robot programming systems today skew towards programming autonomous tasks , with any programmed human - robot interactions being simple or highly structured . Unlike social human - robot interactions , which lend themselves to highly structured programming since they can be composed of established social norms ( e . g . , [ 88 ] ) , human - robot collaboration may not always take the form of rigid turn - taking interactions . It instead can involve open - ended structures that the sequential and templated constructs of conventional end - user robot programming systems may not be able to handle . Human - robot collaboration can involve an unbounded space of inputs from a human collaborative partner and abstract concepts such as intent recognition that may be difficult for end - users to program . Furthermore , human - robot collaboration is highly dependent on external events performed by collaborative agents , making it a highly dynamic process , with a pace and form that may change over time . Because of the idiosyncrasies involved in human - robot collaboration compared to autonomous and structured robot actions , end - user robot programming systems for programming human - robot ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 27 collaboration must provide new types of programming capabilities for end - users . For example , systems may need to move towards enabling users to specify not only what a robot will do ( i . e . , task goal ) but how it will do it ( i . e . , style or collaborative role ) ( e . g . , [ 120 ] ) . Since stylistic aspects and robot roles may need to change in real - time according to the collaborative context at any given moment , which end - users may not be able to anticipate during programming , end - user robot programming systems should also enable metaprogramming whereby end - user programs can generate robot behavior in real - time as the need arises rather than requiring users to pre - author the robot behavior . End - user robot programming systems should also support concepts such as parallel programming and synchronization , which are typically difficult even for advanced programmers [ 76 ] , in an intuitive manner for end - users , as collaborative techniques such as action understanding and intent recognition may need to run as a background thread while a collaborative program sequence unfolds and inputs from human collaborators may arrive simultaneously , such as co - temporal speech and gestures . In cases of collocated collaboration , end - user robot programming systems may need to prioritize meeting strict safety constraints , possibly by performing automatic verification and optimization checks on user - created programs similarly to how social human - robot interaction programs have been verified to meet social norms [ 88 ] . Bridging the areas of end - user robot programming and human - robot collaboration may be beneficial , as end - users know their collaborative preferences and abilities best and may want to personalize the nature and timing of their collaboration with a robot to better align with these preferences and goals ( e . g . , [ 115 ] ) . Similar to how robotics as a field has shifted from largely autonomous machines to interactive , collaborative technologies , end - user robot programming will need to move from enabling highly structured autonomous programming capabilities to robot capabilities that will interact with and support human actions in new task contexts such as collaborative manufacturing or co - design . 8 . 2 . 2 Programming Multiple Robots . The applicability of end - user robot programming systems to real - world scenarios may be enhanced by enabling the simultaneous programming of multiple types of robots . Due to variance in the programmable capabilities of different robots , end - user robot programming systems are often designed to work with a particular robot . Although the availability of resources such as ROS , which has helped standardize the programming process for different robot technologies , may help developers create open - source end - user robot programming systems that can be easily modified to work with different robots , most systems do not enable users to program different robots simultaneously . This may limit the use of end - user robot programming systems , as some tasks may be too complex or infeasible to perform without simultaneously programming multiple robots , such as when tasks are not collocated but require synchronization , as in a missile launch [ 33 ] . In these task scenarios , multi - robot systems ( MRSs ) , homogeneous or heterogeneous groups of robots , can be required . MRSs are increasingly adopted in real - world domains due to their benefits in terms of task efficiency [ 19 ] and system reliability and scalability [ 92 ] . Enabling intuitive robot programming of MRSs while handling the increased user workload and diminished situation awareness associated with attending to multiple robots [ 118 ] is an open challenge that must be addressed to combine the benefits of end - user robot programming and MRSs . 8 . 2 . 3 Programming Social Human - Robot Interaction . As robots make their way into everyday environments , there is expected to be an increasing amount of social encounters between humans and robots . While there have been tools designed for easing the process of generating social behaviors for robots ( e . g . , [ 52 ] ) and of authoring programs for social human - robot interaction ( e . g . , [ 87 – 90 ] ) , these tools are generally intended for expert human - robot interaction designers rather than for the end - users interacting with the robot . Introducing more programming tools for social HRI may be beneficial in allowing human interactants to customize interactions according to their ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 28 Ajaykumar , Steele , and Huang preferences by , for example , specifying the robot’s personality and modifying the robot’s interactive behaviors to meet social norms and work appropriately in the current interaction context . End - user robot programming for social HRI may be especially beneficial in keeping end - users engaged with robots in long - term deployments by enabling them to customize robot operation to produce new behaviors over time , which may reduce habituation effects [ 61 , 66 ] . End - user robot programming may also serve as a tool for helping populations such as older adults or people with disabilities retain their sense of independence when using the services of socially assistive robots . Work on end - user robot programming for social human - robot interaction remains largely limited to programming of robots intended for activities such as education and therapy , where interactions involve a limited set of robot responses and are not necessarily representative of social human - robot interaction in general . Enabling end - user robot programming of a wider space of social HRI requires further investigation to determine the appropriate methods and interfaces for enabling real - time end - user customization during interaction scenarios . By investigating these open areas of research , end - user robot programming tools can be put to use to better empower end - users during social human - robot interactions and potentially reduce the possible negative consequences of social HRI , such as emotional deception , by exposing the programmable nature of robots to end - users . 8 . 3 Supporting Various Degrees of Programmability End - user robot programming systems that emphasize expressivity are critical in making program - ming of complex programs accessible for a wider range of users , especially in domains such as manufacturing that may require programming of more intricate procedures such as welding . How - ever , citizen - level programming systems that emphasize a constrained programming space may serve as an equally valid approach towards developing end - user robot programming systems for everyday environments , such as homes . For day - to - day tasks , citizen developers may not have the need or the desire to engage in the end - to - end programming processes typical of most end - user robot programming systems . They may instead want to engage in quick specification of aspects of the programs that are relevant to the need at hand , such as setting up the area to be cleaned for a vacuum cleaner robot . User interactions with everyday technologies can exemplify how robot programming should be structured for everyday needs . For example , moving towards standard interaction conventions , such as the drag - and - drop and swipe interactions end - users use to operate touchscreen interfaces , for instructing robots may help make end - user robot programming accessi - ble when the goal is quick and easy modification and personalization of robot behaviors , rather than detailed specification of a task procedure , and may also minimize user difficulties in learning new programming conventions and methods for every new robot that they encounter ( e . g . , [ 48 ] ) . The varying needs of different users and domains with respect to the expressivity of end - user robot programs centers around the tradeoff between expressivity and simplicity . End - user robot programming systems often seek to strike a balance between these concepts , including enough features to enable programming of non - trivial tasks while constraining system features to simplify programming for untrained users and to minimize the chance of user errors ( e . g . , [ 3 ] ) . End - user robot programming systems that prioritize expressivity may be able to better handle a variety of use cases but may be less accessible for users without programming experience [ 53 , 55 ] , who may favor a limited set of programming capabilities [ 67 ] . On the other hand , end - user robot programming systems that oversimplify programming may be less favored by more advanced users , who may desire a similar level of expressivity to the amount found in traditional textual languages [ 110 ] . Discovering the ideal balance between simplicity and expressivity and the limits to which end - users can effectively make use of programming expressivity is an open challenge that may determine how end - user robot programming systems will take form in the future . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 29 8 . 4 Supporting End - Users End - user robot programming centralizes around the goal of making end - user robot customization attainable for those without robotics experience . We highlight open research directions for further supporting end - users in meeting their programming goals without undue difficulties . 8 . 4 . 1 Collaborative Programming . Work on end - user robot programming has largely focused on supporting singular users in easily programming robots . While some end - user robot programming systems support robot programming by multiple users with different roles , such as clinicians and caregivers , ( e . g . , [ 31 ] ) , the programming interactions are generally limited to a single user at a time . However , in real world domains , there are situations where collaborative or multi - user programming may be desired . For example , clinicians may want to collaboratively develop robot programs for interactive therapies with patients to provide patients with flexibility in choosing robot actions that meet their goals [ 63 ] . Furthermore , multi - user tandem programming can help ease the workload of users when developing programs involving multiple robots [ 120 ] . Further investigation is needed to determine methods to simultaneously support multiple end - users during robot programming while avoiding interference between users . Prior work on virtual pair programming and multi - user visual programming may highlight design and implementation tools that can be used to make end - user robot programming more collaborative and social ( e . g . , [ 23 , 97 ] ) . Special considerations should be taken for end - user robot programming systems meant for children , where it may be necessary to provide equal opportunities and control for each user to help reduce antagonism between children in collaborative robot programming scenarios [ 103 ] . 8 . 4 . 2 Assisted End - User Robot Programming . End - user robot programming has helped transform robot programming from an occupation reserved for robotics engineers to an act that everyday users and domain specialists can take to meet their personal needs . While the increased accessibility of robot programming for users without robotics experience is beneficial in empowering more users to customize robots to meet their needs , it is not without its risks , as software developed by end - users without programming experience tend to contain substantial amount of errors [ 20 ] . Without the training undergone by developers , end - users may be more likely to include workarounds and shortcuts in their programs and to misjudge their own programming abilities [ 49 ] . Errors in robotics software developed by end - users can be especially dangerous since robot programs often include interactions with the physical world and people , including vulnerable populations such as children and patients . Therefore , there is a need for end - user robot programming systems to assist users in identifying errors and developing more optimal , correct programs . Assistance is commonly found in computer programming , with integrated development environ - ments increasingly providing syntax - level assistance , such as autocorrect and autocomplete , and more personalized , intelligent assistance , such as code completion and smart suggestion . Similarly , end - user robot programming systems should offer both syntax - level and personalized assistance to users . While end - user robot programming systems in the research literature have included assistance at the syntax - level ( Section 6 . 2 . 5 ) , research on personalized assistance in end - user robot programming is still incipient . To meet the needs of diverse groups of end - users while handling the idiosyncrasies of individuals’ programming approaches and behaviors , end - user robot programming systems should incorporate personalized data - driven assistance as a tool , introducing intelligent tools that can identify an individual’s programming intent and challenges in real - time to provide just - in - time assistance that can help end - users avoid introducing errors and suboptimalities into their programs . For example , assistance may be introduced to kinesthetic teaching to reduce the tradeoff between users’ mental and physical workloads . Programming by kinesthetic demonstration may be favored by end - users for the low cognitive effort involved in kinesthetic teaching , but the ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 30 Ajaykumar , Steele , and Huang method may also be tiring and difficult for users because of the high physical workload required to move robot manipulators [ 94 ] . Introducing assistance into the kinesthetic programming workflow , such as by offering support positioning the robot when the end - user is experiencing difficulties in maneuvering a robot to a specific configuration or when they are approaching a joint limit , may reduce the physical difficulties associated with kinesthetic teaching and in turn reduce suboptimal and redundant movements in the resulting robot program . Alternatively , assistance can be provided by predicting the user’s intent during programming and proactively completing the user’s program ( e . g . , [ 70 ] ) or suggesting program commands that can be used to meet the user’s programming goal . Different programming methods may warrant different types of assistance , such as assistance in perceiving relevant aspects of a program within a limited field of view for AR - based programming . Including assistance in end - user robot programming systems will involve shifting more of the control over the programming process from the user to the system . Providing less control to the user during robot programming can be beneficial in reducing user workload in dealing with tedious aspects of robot programming unrelated to the programming task such as motion planning [ 81 , 117 ] , in reducing imperfections in user programs such as noise in kinesthetic demonstrations due to natural hand tremors [ 4 ] , and in increasing the flexibility of programs in working in new contexts [ 120 ] . However , although prior work has suggested that participants like automatic assistance provided by end - user robot programming systems [ 69 ] , end - users may be unwilling to accept assistance if it means relinquishing control to automated assistance in specifying programs [ 95 ] or if it means interference to their programming workflow [ 100 ] . Furthermore , reduced user control could lead to disinterest in programming for younger populations [ 103 ] . Therefore , although assistance has potential to further reduce barriers that prevent everyday users from effectively programming robots , more work is needed to understand the level of assistance end - users are willing to accept and to develop assistance that supports users in programming while still empowering them in leveraging robots according to their individual needs . 9 CONCLUSION Similarly to how the pervasiveness of computers have necessitated methods for end - users to program computing technologies , the increasing number of robots in a diversity of domains , from the home to factory floors , has warranted tools to achieve end - user robot programming . The challenges associated with end - user robot programming in terms of the prerequisite programming , engineering , and robotics expertise required to effectively program robots have inspired many different techniques and methods to lower the barriers involved in customizing robot behavior . The present work presents a survey of the research literature covering end - user program specification , with a structured review of the application domains , programming phases , and design techniques and aspects encompassed by the end - user robot programming space . We highlight both past trends and future directions in better supporting users , conducting more representative user evaluations , and providing wider programming spaces and ranges of programmability . Our survey not only provides a comprehensive review of the end - user robot programming space , but also seeks to highlight the need for continuous improvement on end - user robot programming systems to truly democratize the customization of robotic technologies . REFERENCES [ 1 ] GopikaAjaykumarandChien - MingHuang . 2020 . Userneedsanddesignopportunitiesinend - userrobotprogramming . In Companion of the 2020 ACM / IEEE International Conference on Human - Robot Interaction . 93 – 95 . [ 2 ] Sonya Alexandrova , Maya Cakmak , Kaijen Hsiao , and Leila Takayama . 2014 . Robot programming by demonstration with interactive action visualizations . . In Robotics : science and systems . Citeseer . [ 3 ] Sonya Alexandrova , Zachary Tatlock , and Maya Cakmak . 2015 . RoboFlow : A flow - based visual programming language for mobile manipulation tasks . In 2015 IEEE International Conference on Robotics and Automation ( ICRA ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 31 IEEE , 5537 – 5544 . [ 4 ] Dario Antonelli , S Astanin , M Galetto , and L Mastrogiacomo . 2013 . Training by demonstration for welding robots by optical trajectory tracking . Procedia Cirp 12 ( 2013 ) , 145 – 150 . [ 5 ] Brenna D Argall , Sonia Chernova , Manuela Veloso , and Brett Browning . 2009 . A survey of robot learning from demonstration . Robotics and autonomous systems 57 , 5 ( 2009 ) , 469 – 483 . [ 6 ] Daniel Bambušsek , Zdeněk Materna , Michal Kapinus , Vítězslav Beran , and Pavel Smrž . 2019 . Combining Interactive Spatial Augmented Reality with Head - Mounted Display for End - User Collaborative Robot Programming . In 2019 28th IEEE International Conference on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 1 – 8 . [ 7 ] Emilia I Barakova , Jan CC Gillesen , Bibi EBM Huskens , and Tino Lourens . 2013 . End - user programming architecture facilitates the uptake of robots in social therapies . Robotics and Autonomous Systems 61 , 7 ( 2013 ) , 704 – 713 . [ 8 ] Ankica Barišić , João Cambeiro , Vasco Amaral , Miguel Goulão , and Tarquínio Mota . 2018 . Leveraging teenagers feedback in the development of a domain - specific language : the case of programming low - cost robots . In Proceedings of the 33rd Annual ACM Symposium on Applied Computing . 1221 – 1229 . [ 9 ] Barbara Rita Barricelli , Fabio Cassano , Daniela Fogli , and Antonio Piccinno . 2019 . End - user development , end - user programming and end - user software engineering : A systematic mapping study . Journal of Systems and Software 149 ( 2019 ) , 101 – 137 . [ 10 ] Sara Beschi , Daniela Fogli , and Fabio Tampalini . 2019 . CAPIRCI : a multi - modal system for collaborative robot programming . In International Symposium on End User Development . Springer , 51 – 66 . [ 11 ] Geoffrey Biggs and Bruce MacDonald . 2003 . A survey of robot programming systems . In Proceedings of the Australasian conference on robotics and automation . 1 – 3 . [ 12 ] Aude Billard , Sylvain Calinon , Ruediger Dillmann , and Stefan Schaal . 2008 . Survey : Robot programming by demon - stration . Handbook of robotics 59 , BOOK _ CHAP ( 2008 ) . [ 13 ] Joel Brandt , Philip J Guo , Joel Lewenstein , and Scott R Klemmer . 2008 . Opportunistic programming : How rapid ideation and prototyping occur in practice . In Proceedings of the 4th international workshop on End - user software engineering . 1 – 5 . [ 14 ] Flor A Bravo , Alejandra M González , and Enrique González . 2017 . A review of intuitive robot programming environments for educational purposes . In 2017 IEEE 3rd Colombian Conference on Automatic Control ( CCAC ) . IEEE , 1 – 6 . [ 15 ] Cynthia Breazeal and Brian Scassellati . 2002 . Robots that imitate humans . Trends in cognitive sciences 6 , 11 ( 2002 ) , 481 – 487 . [ 16 ] John Brooke . 1996 . SUS : a “quick and dirty’usability . Usability evaluation in industry ( 1996 ) , 189 . [ 17 ] Nina Buchina , Sherin Kamel , and Emilia Barakova . 2016 . Design and evaluation of an end - user friendly tool for robot programming . In 2016 25th IEEE International Symposium on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 185 – 191 . [ 18 ] Nina G Buchina , Paula Sterkenburg , Tino Lourens , and Emilia I Barakova . 2019 . Natural language interface for programming sensory - enabled scenarios for human - robot interaction . In 2019 28th IEEE International Conference on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 1 – 8 . [ 19 ] Wolfram Burgard , Mark Moors , Dieter Fox , Reid Simmons , and Sebastian Thrun . 2000 . Collaborative multi - robot exploration . In Proceedings2000ICRA . MillenniumConference . IEEEInternationalConferenceonRoboticsandAutomation . Symposia Proceedings ( Cat . No . 00CH37065 ) , Vol . 1 . IEEE , 476 – 481 . [ 20 ] Margaret Burnett , Brad Myers , Mary Beth Rosson , and Susan Wiedenbeck . 2006 . The next step : from end - user programming to end - user software engineering . In CHI’06 Extended Abstracts on Human Factors in Computing Systems . 1699 – 1702 . [ 21 ] Maya Cakmak and Leila Takayama . 2014 . Teaching people how to teach robots : The effect of instructional materials and dialog design . In Proceedings of the 2014 ACM / IEEE international conference on Human - robot interaction . 431 – 438 . [ 22 ] Sylvain Calinon . 2009 . Robot programming by demonstration . EPFL Press . [ 23 ] Jeffrey D Campbell . 2002 . Multi - user collaborative visual program development . In Proceedings IEEE 2002 Symposia on Human Centric Computing Languages and Environments . IEEE , 122 – 130 . [ 24 ] Elizabeth Cha , Anca Dragan , Jodi Forlizzi , and Siddhartha S Srinivasa . 2014 . Effects of speech on perceived capability . In 2014 9th ACM / IEEE International Conference on Human - Robot Interaction ( HRI ) . IEEE , 134 – 135 . [ 25 ] Elizabeth Cha , Anca D Dragan , and Siddhartha S Srinivasa . 2015 . Perceived robot capability . In 2015 24th IEEE International Symposium on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 541 – 548 . [ 26 ] Sonia Chernova and Andrea L Thomaz . 2014 . Robot learning from human teachers . Synthesis Lectures on Artificial Intelligence and Machine Learning 8 , 3 ( 2014 ) , 1 – 121 . [ 27 ] Henrik I Christensen , T Batzinger , K Bekris , K Bohringer , J Bordogna , G Bradski , O Brock , J Burnstein , T Fuhlbrigge , R Eastman , et al . 2009 . A roadmap for us robotics : from internet to robotics . Computing Community Consortium 44 ( 2009 ) . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 32 Ajaykumar , Steele , and Huang [ 28 ] Michael D Coovert , Tiffany Lee , Ivan Shindev , and Yu Sun . 2014 . Spatial augmented reality as a method for a mobile robot to communicate intended movement . Computers in Human Behavior 34 ( 2014 ) , 241 – 248 . [ 29 ] Enrique Coronado , Fulvio Mastrogiovanni , Bipin Indurkhya , and Gentiane Venture . 2020 . Visual Programming Environments for End - User Development of Intelligent and Social Robots , a Systematic Review . Journal of Computer Languages ( 2020 ) , 100970 . [ 30 ] Allen Cypher and David Canfield Smith . 1995 . KidSim : end user programming of simulations . In Proceedings of the SIGCHI conference on Human factors in computing systems . 27 – 34 . [ 31 ] Chandan Datta , H Yul Yang , Priyesh Tiwari , I Han Kuo , and Bruce A MacDonald . 2011 . End user programming to enable closed - loop medication management using a healthcare robot . Social Science ( 2011 ) . [ 32 ] James Diprose , Bruce MacDonald , John Hosking , and Beryl Plimmer . 2017 . Designing an API at an appropriate abstraction level for programming social robot applications . Journal of Visual Languages & Computing 39 ( 2017 ) , 22 – 40 . [ 33 ] Gregory Dudek , Michael RM Jenkin , Evangelos Milios , and David Wilkes . 1996 . A taxonomy for multi - agent robotics . Autonomous Robots 3 , 4 ( 1996 ) , 375 – 397 . [ 34 ] Floris Erich , Masakazu Hirokawa , and Kenji Suzuki . 2017 . A Visual Environment for Reactive Robot Programming of Macro - level Behaviors . In International Conference on Social Robotics . Springer , 577 – 586 . [ 35 ] HC Fang , SK Ong , and AYCNee . 2014 . Anovel augmentedreality - based interfacefor robot pathplanning . International Journal on Interactive Design and Manufacturing ( IJIDeM ) 8 , 1 ( 2014 ) , 33 – 42 . [ 36 ] Ylva Fernaeus and Mattias Jacobsson . 2009 . Comics , Robots , Fashion and Programming : outlining the concept of actDresses . In Proceedings of the 3rd International Conference on Tangible and Embedded Interaction . 3 – 8 . [ 37 ] Maxwell Forbes , Michael Jae - Yoon Chung , Maya Cakmak , and Rajesh PN Rao . 2014 . Robot Programming by Demonstration with Crowdsourced Action Fixes . . In HCOMP . [ 38 ] Diana Franklin , Charlotte Hill , Hilary A Dwyer , Alexandria K Hansen , Ashley Iveland , and Danielle B Harlow . 2016 . Initialization in scratch : Seeking knowledge transfer . In Proceedings of the 47th ACM Technical Symposium on Computing Science Education . 217 – 222 . [ 39 ] Susan R Fussell , Sara Kiesler , Leslie D Setlock , and Victoria Yew . 2008 . How people anthropomorphize robots . In 2008 3rd ACM / IEEE International Conference on Human - Robot Interaction ( HRI ) . IEEE , 145 – 152 . [ 40 ] Samir Yitzhak Gadre , Eric Rosen , Gary Chien , Elizabeth Phillips , Stefanie Tellex , and George Konidaris . 2019 . End - user robot programming using mixed reality . In 2019 International Conference on Robotics and Automation ( ICRA ) . IEEE , 2707 – 2713 . [ 41 ] Yuxiang Gao and Chien - Ming Huang . 2019 . PATI : a projection - based augmented table - top interface for robot programming . In Proceedings of the 24th International Conference on Intelligent User Interfaces . 345 – 355 . [ 42 ] Michele Gattullo , Giulia Wally Scurati , Michele Fiorentino , Antonio Emmanuele Uva , Francesco Ferrise , and Monica Bordegoni . 2019 . Towards augmented reality manuals for industry 4 . 0 : A methodology . Robotics and Computer - Integrated Manufacturing 56 ( 2019 ) , 276 – 286 . [ 43 ] Javier F Gorostiza and Miguel Angel Salichs . 2010 . Natural Programming of a Social Robot by Dialogs . . In AAAI Fall Symposium : Dialog with Robots . [ 44 ] Javi F Gorostiza and Miguel A Salichs . 2011 . End - user programming of a social robot by dialog . Robotics and Autonomous Systems 59 , 12 ( 2011 ) , 1102 – 1114 . [ 45 ] Thomas Green and Alan Blackwell . 1998 . Cognitive dimensions of information artefacts : a tutorial . In BCS HCI Conference , Vol . 98 . 1 – 75 . [ 46 ] Thomas R . G . Green and Marian Petre . 1996 . Usability analysis of visual programming environments : a ‘cognitive dimensions’ framework . Journal of Visual Languages & Computing 7 , 2 ( 1996 ) , 131 – 174 . [ 47 ] Kelleher R Guerin , Colin Lea , Chris Paxton , and Gregory D Hager . 2015 . A framework for end - user instruction of a robot assistant for manufacturing . In 2015 IEEE international conference on robotics and automation ( ICRA ) . IEEE , 6167 – 6174 . [ 48 ] Ji Han , Gopika Ajaykumar , Ze Li , and Chien - Ming Huang . 2020 . Structuring Human - Robot Interactions via Interaction Conventions . In 2020 29th IEEE International Conference on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 341 – 348 . [ 49 ] Warren Harrison . 2004 . From the editor : The dangers of end - user programming . IEEE software 21 , 4 ( 2004 ) , 5 – 7 . [ 50 ] Sandra G Hart and Lowell E Staveland . 1988 . Development of NASA - TLX ( Task Load Index ) : Results of empirical and theoretical research . In Advances in psychology . Vol . 52 . Elsevier , 139 – 183 . [ 51 ] Hooman Hedayati , Michael Walker , and Daniel Szafir . 2018 . Improving collocated robot teleoperation with augmented reality . In Proceedings of the 2018 ACM / IEEE International Conference on Human - Robot Interaction . 78 – 86 . [ 52 ] Chien - Ming Huang and Bilge Mutlu . 2012 . Robot behavior toolkit : generating effective social behaviors for robots . In 2012 7th ACM / IEEE International Conference on Human - Robot Interaction ( HRI ) . IEEE , 25 – 32 . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 33 [ 53 ] Gaoping Huang , Pawan S Rao , Meng - Han Wu , Xun Qian , Shimon Y Nof , Karthik Ramani , and Alexander J Quinn . 2020 . Vipo : Spatial - Visual Programming with Functions for Robot - IoT Workflows . In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems . 1 – 13 . [ 54 ] Justin Huang and Maya Cakmak . 2017 . Code3 : A system for end - to - end programming of mobile manipulator robots for novices and experts . In 2017 12th ACM / IEEE International Conference on Human - Robot Interaction ( HRI . IEEE , 453 – 462 . [ 55 ] Justin Huang , Tessa Lau , and Maya Cakmak . 2016 . Design and evaluation of a rapid programming system for service robots . In 2016 11th ACM / IEEE International Conference on Human - Robot Interaction ( HRI ) . IEEE , 295 – 302 . [ 56 ] Ahmed Hussein , Mohamed Medhat Gaber , Eyad Elyan , and Chrisina Jayne . 2017 . Imitation learning : A survey of learning methods . ACM Computing Surveys ( CSUR ) 50 , 2 ( 2017 ) , 1 – 35 . [ 57 ] Abhishek Jha , Shital S Chiddarwar , and Mayur Andulkar . 2015 . Application of human arm kinematics for robot path programming using imitation . In Proceedings of the 2015 Conference on Advances In Robotics . 1 – 6 . [ 58 ] Michal Kapinus , Vítězslav Beran , Zdeněk Materna , and Daniel Bambušek . 2019 . Spatially Situated End - User Robot Programming in Augmented Reality . In 2019 28th IEEE International Conference on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 1 – 8 . [ 59 ] David E Kieras and Susan Bovair . 1984 . The role of a mental model in learning to operate a device . Cognitive science 8 , 3 ( 1984 ) , 255 – 273 . [ 60 ] Andrew J Ko , Robin Abraham , Laura Beckwith , Alan Blackwell , Margaret Burnett , Martin Erwig , Chris Scaffidi , Joseph Lawrance , Henry Lieberman , Brad Myers , et al . 2011 . The state of the art in end - user software engineering . ACM Computing Surveys ( CSUR ) 43 , 3 ( 2011 ) , 1 – 44 . [ 61 ] KhengLeeKoay , DagSverreSyrdal , MichaelLWalters , andKerstinDautenhahn . 2007 . Livingwithrobots : Investigating the habituation effect in participants’ preferences during a longitudinal human - robot interaction study . In RO - MAN 2007 - The 16th IEEE International Symposium on Robot and Human Interactive Communication . IEEE , 564 – 569 . [ 62 ] Ernst Kruijff , J Edward Swan , and Steven Feiner . 2010 . Perceptual issues in augmented reality revisited . In 2010 IEEE International Symposium on Mixed and Augmented Reality . IEEE , 3 – 12 . [ 63 ] Alyssa Kubota , Emma IC Peterson , Vaishali Rajendren , Hadas Kress - Gazit , and Laurel D Riek . 2020 . JESSIE : Synthe - sizing Social Robot Behaviors for Personalized Neurorehabilitation and Beyond . In Proceedings of the 2020 ACM / IEEE International Conference on Human - Robot Interaction . 121 – 130 . [ 64 ] Bettina Laugwitz , Theo Held , and Martin Schrepp . 2008 . Construction and evaluation of a user experience question - naire . In Symposium of the Austrian HCI and usability engineering group . Springer , 63 – 76 . [ 65 ] Kwan Min Lee , Namkee Park , and Hayeon Song . 2005 . Can a Robot Be Perceived as a Developing Creature ? Effects of a Robot’s Long - Term Cognitive Developments on Its Social Presence and People’s Social Responses Toward It . Human communication research 31 , 4 ( 2005 ) , 538 – 563 . [ 66 ] Iolanda Leite , Carlos Martinho , and Ana Paiva . 2013 . Social robots for long - term interaction : a survey . International Journal of Social Robotics 5 , 2 ( 2013 ) , 291 – 308 . [ 67 ] Nicola Leonardi , Marco Manca , Fabio Paternò , and Carmen Santoro . 2019 . Trigger - action programming for personal - ising humanoid robot behaviour . In Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems . 1 – 13 . [ 68 ] Ying Siu Liang , Damien Pellier , Humbert Fiorino , and Sylvie Pesty . 2017 . A framework for robot programming in cobotic environments : first user experiments . In Proceedings of the 3rd International Conference on Mechatronics and Robotics Engineering . 30 – 35 . [ 69 ] Ying Siu Liang , Damien Pellier , Humbert Fiorino , and Sylvie Pesty . 2019 . End - User Programming of Low - and High - Level Actions for Robotic Task Planning . In 2019 28th IEEE International Conference on Robot and Human Interactive Communication ( RO - MAN ) . IEEE , 1 – 8 . [ 70 ] Ying Siu Liang , Damien Pellier , Humbert Fiorino , Sylvie Pesty , and Maya Cakmak . 2018 . Simultaneous end - user programmingofgoalsandactionsforroboticshelforganization . In 2018IEEE / RSJInternationalConferenceonIntelligent Robots and Systems ( IROS ) . IEEE , 6566 – 6573 . [ 71 ] Yueyue Liu , Zhijun Li , Huaping Liu , and Zhen Kan . 2020 . Skill transfer learning for autonomous robots and human - robot cooperation : A survey . Robotics and Autonomous Systems ( 2020 ) , 103515 . [ 72 ] Tomas Lozano - Perez . 1983 . Robot programming . Proc . IEEE 71 , 7 ( 1983 ) , 821 – 841 . [ 73 ] Monica G Maceli . 2017 . Tools of the trade : a survey of technologies in end - user development literature . In International symposium on end user development . Springer , 49 – 65 . [ 74 ] Vimitha Manohar and Jacob W Crandall . 2014 . Programming robots to express emotions : interaction paradigms , communication modalities , and context . IEEE transactions on human - machine systems 44 , 3 ( 2014 ) , 362 – 373 . [ 75 ] Stereos Alexandros Matthaiakis , Konstantinos Dimoulas , Athanasios Athanasatos , Konstantinos Mparis , George Dimitrakopoulos , Christos Gkournelos , Apostolis Papavasileiou , Nikos Fousekis , Stergios Papanastasiou , George Michalos , et al . 2017 . Flexible programming tool enabling synergy between human and robot . Procedia Manufacturing ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . 1 : 34 Ajaykumar , Steele , and Huang 11 ( 2017 ) , 431 – 440 . [ 76 ] Paul E McKenney . 2017 . Is parallel programming hard , and , if so , what can you do about it ? ( v2017 . 01 . 02 a ) . arXiv preprint arXiv : 1701 . 00854 ( 2017 ) . [ 77 ] Sílvia Moros , Luke Wood , Ben Robins , Kerstin Dautenhahn , and Álvaro Castro - González . 2019 . Programming a humanoid robot with the scratch language . In International Conference on Robotics and Education RiE 2017 . Springer , 222 – 233 . [ 78 ] Pedro Neto and Nuno Mendes . 2013 . Direct off - line robot programming via a common CAD package . Robotics and Autonomous Systems 61 , 8 ( 2013 ) , 896 – 910 . [ 79 ] International Federation of Robotics . 2020 . World Robotics Report 2020 . [ 80 ] Yoha Oishi , Takayuki Kanda , Masayuki Kanbara , Satoru Satake , and Norihiro Hagita . 2017 . Toward end - user programming for robots in stores . In Proceedings of the Companion of the 2017 ACM / IEEE International Conference on Human - Robot Interaction . 233 – 234 . [ 81 ] SK Ong , AWW Yew , NK Thanigaivel , and AYC Nee . 2020 . Augmented reality - assisted robot programming system for industrial applications . Robotics and Computer - Integrated Manufacturing 61 ( 2020 ) , 101820 . [ 82 ] Zengxi Pan , Joseph Polden , Nathan Larkin , Stephen Van Duin , and John Norrish . 2012 . Recent progress on program - ming methods for industrial robots . Robotics and Computer - Integrated Manufacturing 28 , 2 ( 2012 ) , 87 – 94 . [ 83 ] Fabio Paternò . 2013 . End user development : Survey of an emerging field for empowering people . ISRN Software Engineering 2013 ( 2013 ) . [ 84 ] Fabio Paternò and Carmen Santoro . 2019 . End - user development for personalizing applications , things , and robots . International Journal of Human - Computer Studies 131 ( 2019 ) , 120 – 130 . [ 85 ] Chris Paxton , Felix Jonathan , Andrew Hundt , Bilge Mutlu , and Gregory D Hager . 2018 . Evaluating methods for end - user creation of robot task plans . In 2018 IEEE / RSJ International Conference on Intelligent Robots and Systems ( IROS ) . IEEE , 6086 – 6092 . [ 86 ] Mikkel Rath Pedersen and Volker Krüger . 2015 . Gesture - based extraction of robot skill parameters for intuitive robot programming . Journal of Intelligent & Robotic Systems 80 , 1 ( 2015 ) , 149 – 163 . [ 87 ] David Porfirio , Evan Fisher , Allison Sauppé , Aws Albarghouthi , and Bilge Mutlu . 2019 . Bodystorming human - robot interactions . In Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology . 479 – 491 . [ 88 ] David Porfirio , Allison Sauppé , Aws Albarghouthi , and Bilge Mutlu . 2018 . Authoring and verifying human - robot interactions . In Proceedings of the 31st Annual ACM Symposium on User Interface Software and Technology . 75 – 86 . [ 89 ] David Porfirio , Allison Sauppé , Aws Albarghouthi , and Bilge Mutlu . 2019 . Computational tools for human - robot interaction design . In 2019 14th ACM / IEEE International Conference on Human - Robot Interaction ( HRI ) . IEEE , 733 – 735 . [ 90 ] David Porfirio , Allison Sauppé , Aws Albarghouthi , and Bilge Mutlu . 2020 . Transforming Robot Programs Based on Social Context . In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems . 1 – 12 . [ 91 ] Aaron Powers and Sara Kiesler . 2006 . The advisor robot : tracing people’s mental model from a robot’s physical attributes . In Proceedings of the 1st ACM SIGCHI / SIGART conference on Human - robot interaction . 218 – 225 . [ 92 ] Amanda Prorok , Alexander Bahr , and Alcherio Martinoli . 2012 . Low - cost collaborative localization for large - scale multi - robot systems . In 2012 IEEE International Conference on Robotics and Automation . Ieee , 4236 – 4241 . [ 93 ] Morgan Quigley , Ken Conley , Brian Gerkey , Josh Faust , Tully Foote , Jeremy Leibs , Rob Wheeler , and Andrew Y Ng . 2009 . ROS : an open - source Robot Operating System . In ICRA workshop on open source software , Vol . 3 . Kobe , Japan , 5 . [ 94 ] Camilo Perez Quintero , Sarah Li , Matthew KXJ Pan , Wesley P Chan , HF Machiel Van der Loos , and Elizabeth Croft . 2018 . Robot programming through augmented trajectories in augmented reality . In 2018 IEEE / RSJ International Conference on Intelligent Robots and Systems ( IROS ) . IEEE , 1838 – 1844 . [ 95 ] Mattia Racca , Ville Kyrki , and Maya Cakmak . 2020 . Interactive Tuning of Robot Program Parameters via Expected Divergence Maximization . In Proceedings of the 2020 ACM / IEEE International Conference on Human - Robot Interaction . 629 – 638 . [ 96 ] Muhammet Ramoğlu , Çağlar Genç , and Kerem Rızvanoğlu . 2017 . Programming a robotic toy with a block coding application : A usability study with non - programmer adults . In International Conference of Design , User Experience , and Usability . Springer , 652 – 666 . [ 97 ] Alexander Repenning , Navid Ahmadi , Nadia Repenning , Andri Ioannidou , David Webb , and Krista Marshall . 2011 . Collective programming : Making end - user programming ( more ) social . In International Symposium on End User Development . Springer , 325 – 330 . [ 98 ] Mitchel Resnick , John Maloney , Andrés Monroy - Hernández , Natalie Rusk , Evelyn Eastmond , Karen Brennan , Amon Millner , Eric Rosenbaum , Jay Silver , Brian Silverman , et al . 2009 . Scratch : programming for all . Commun . ACM 52 , 11 ( 2009 ) , 60 – 67 . [ 99 ] Michael Riedl and Dominik Henrich . 2019 . A Fast Robot Playback Programming System Using Video Editing Concepts . In Tagungsband des 4 . Kongresses Montage Handhabung Industrieroboter . Springer , 259 – 268 . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 . A Survey on End - User Robot Programming 1 : 35 [ 100 ] TJ Robertson , Shrinu Prabhakararao , Margaret Burnett , Curtis Cook , Joseph R Ruthruff , Laura Beckwith , and Amit Phalgune . 2004 . Impact of interruption style on end - user debugging . In Proceedings of the SIGCHI conference on Human factors in computing systems . 287 – 294 . [ 101 ] Kimiko Ryokai , Michael Jongseon Lee , and Jonathan Micah Breitbart . 2009 . Children’s storytelling and programming with robotic characters . In Proceedings of the seventh ACM conference on Creativity and cognition . 19 – 28 . [ 102 ] Eduardo Benitez Sandoval , Omar Mubin , and Mohammad Obaid . 2014 . Human robot interaction and fiction : A contradiction . In International Conference on Social Robotics . Springer , 54 – 63 . [ 103 ] Theodosios Sapounidis and Stavros Demetriadis . 2013 . Tangible versus graphical user interfaces for robot program - ming : exploring cross - age children’s preferences . Personal and ubiquitous computing 17 , 8 ( 2013 ) , 1775 – 1786 . [ 104 ] Chris Scaffidi . 2016 . Potential financial motivations for end - user programming . In 2016 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) . IEEE , 180 – 184 . [ 105 ] Christopher Scaffidi , Mary Shaw , and Brad Myers . 2005 . Estimating the numbers of end users and end user program - mers . In 2005 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC’05 ) . IEEE , 207 – 214 . [ 106 ] Stefan Schaal , Auke Ijspeert , and Aude Billard . 2003 . Computational approaches to motor learning by imitation . Philosophical Transactions of the Royal Society of London . Series B : Biological Sciences 358 , 1431 ( 2003 ) , 537 – 547 . [ 107 ] Henk G Schmidt , Henny PA Boshuizen , and Gerard JP van Breukelen . 2002 . Long - term retention of a theatrical script by repertory actors : The role of context . Memory 10 , 1 ( 2002 ) , 21 – 28 . [ 108 ] Casper Schou , Rasmus Skovgaard Andersen , Dimitrios Chrysostomou , Simon Bøgh , and Ole Madsen . 2018 . Skill - based instruction of collaborative robots in industrial settings . Robotics and Computer - Integrated Manufacturing 53 ( 2018 ) , 72 – 80 . [ 109 ] Yasaman S Sefidgar , Prerna Agarwal , and Maya Cakmak . 2017 . Situated tangible robot programming . In 2017 12th ACM / IEEE International Conference on Human - Robot Interaction ( HRI . IEEE , 473 – 482 . [ 110 ] Yasaman S Sefidgar , Thomas Weng , Heather Harvey , Sarah Elliott , and Maya Cakmak . 2018 . RobotIST : Interactive Situated Tangible Robot Programming . In Proceedings of the Symposium on Spatial User Interaction . 141 – 149 . [ 111 ] Michael Spahn , Christian Dorner , and Volker Wulf . 2008 . End user development : approaches towards a flexible software design . ( 2008 ) . [ 112 ] Maj Stenmark , Mathias Haage , and Elin Anna Topp . 2017 . Simplified programming of re - usable skills on a safe industrial robot : Prototype and evaluation . In Proceedings of the 2017 ACM / IEEE International Conference on Human - Robot Interaction . 463 – 472 . [ 113 ] Anselm Strauss and Juliet Corbin . 1994 . Grounded theory methodology . Handbook of qualitative research 17 , 1 ( 1994 ) , 273 – 285 . [ 114 ] Valeria Villani , Fabio Pini , Francesco Leali , Cristian Secchi , and Cesare Fantuzzi . 2018 . Survey on human - robot interaction for robot programming in industrial applications . IFAC - PapersOnLine 51 , 11 ( 2018 ) , 66 – 71 . [ 115 ] Yeping Wang , Gopika Ajaykumar , and Chien - Ming Huang . 2020 . See what i see : Enabling user - centric robotic assistance using first - person demonstrations . In Proceedings of the 2020 ACM / IEEE International Conference on Human - Robot Interaction . 639 – 648 . [ 116 ] David Weintrop , Afsoon Afzal , Jean Salac , Patrick Francis , Boyang Li , David C Shepherd , and Diana Franklin . 2018 . Evaluating coblox : A comparative study of robotics programming environments for adult novices . In Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems . 1 – 12 . [ 117 ] David Weintrop , David C Shepherd , Patrick Francis , and Diana Franklin . 2017 . Blockly goes to work : Block - based programming for industrial robots . In 2017 IEEE Blocks and Beyond Workshop ( B & B ) . IEEE , 29 – 36 . [ 118 ] Choon Yue Wong and Gerald Seet . 2017 . Workload , awareness and automation in multiple - robot supervision . International Journal of Advanced Robotic Systems 14 , 3 ( 2017 ) , 1729881417710463 . [ 119 ] Volker Wulf and Matthias Jarke . 2004 . The economics of end - user development . Commun . ACM 47 , 9 ( 2004 ) , 41 – 42 . [ 120 ] James E Young , Takeo Igarashi , Ehud Sharlin , Daisuke Sakamoto , and Jeffrey Allen . 2014 . Design and evaluation techniques for authoring interactive and stylistic behaviors . ACM Transactions on Interactive Intelligent Systems ( TiiS ) 3 , 4 ( 2014 ) , 1 – 36 . [ 121 ] Zuyuan Zhu and Huosheng Hu . 2018 . Robot learning from demonstration in robotic assembly : A survey . Robotics 7 , 2 ( 2018 ) , 17 . ACM Comput . Surv . , Vol . 1 , No . 1 , Article 1 . Publication date : January 2021 .