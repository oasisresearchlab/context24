Proactive Wrangling : Mixed - Initiative End - User Programming of Data Transformation Scripts Philip J . Guo ∗ , Sean Kandel ∗ , Joseph M . Hellerstein † , Jeffrey Heer ∗ ∗ Stanford University { pg , skandel , jheer } @ cs . stanford . edu † University of California , Berkeley hellerstein @ cs . berkeley . edu ABSTRACT Analysts regularly wrangle data into a form suitable for com - putational tools through a tedious process that delays more substantive analysis . While interactive tools can assist data transformation , analysts must still conceptualize the desired output state , formulate a transformation strategy , and specify complex transforms . We present a model to proactively sug - gest data transforms which map input data to a relational for - mat expected by analysis tools . To guide search through the space of transforms , we propose a metric that scores tables according to type homogeneity , sparsity and the presence of delimiters . When compared to “ideal” hand - crafted transfor - mations , our model suggests over half of the needed steps ; in these cases the top - ranked suggestion is preferred 77 % of the time . User study results indicate that suggestions produced by our model can assist analysts’ transformation tasks , but that users do not always value proactive assistance , instead preferring to maintain the initiative . We discuss some impli - cations of these results for mixed - initiative interfaces . ACM Classiﬁcation : H5 . 2 [ Information interfaces and pre - sentation ] : User Interfaces – Graphical user interfaces . General terms : Design , Human Factors Keywords : Data transformation , data cleaning , end - user pro - gramming , mixed - initiative interfaces , data analysis INTRODUCTION The increasing scale and accessibility of data — including government records , web data , and system logs — provides an under - exploited resource for improving governance , pub - lic policy , organizational strategy , and even our personal lives [ 23 ] . However , much of this data is not suitable for use by analysis tools . Data is often stored in idiosyncratic formats or designed for human viewing rather than computational pro - cessing ( e . g . , cross - tabulations within spreadsheets ) . These hurdles require that analysts engage in a tedious pro - cess of data transformation ( or data wrangling ) to map in - put data to a form consumable by downstream tools . Both prior work [ 3 ] and our own conversations with analysts in - Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . UIST’11 , October 16 - 19 , 2011 , Santa Barbara , CA , USA . Copyright 2011 ACM 978 - 1 - 4503 - 0716 - 1 / 11 / 10 . . . $ 10 . 00 . dicate that wrangling is one of the most time - consuming as - pects of analysis . As a result , domain experts regularly spend more time manipulating data than they do exercising their specialty , while less technical audiences may be excluded . Analysts typically wrangle their data by writing scripts in programming languages such as Python or Perl or by manu - ally editing the data within spreadsheets . To assist this pro - cess , researchers have developed novel interactive tools . Pot - ter’s Wheel [ 21 ] and Google Reﬁne [ 11 ] are menu - driven interfaces that provide access to common data transforms . Wrangler [ 13 ] extends this approach by ( a ) automatically suggesting applicable transforms in response to direct ma - nipulation of a data table and ( b ) providing visual previews to aid transform assessment . Each of these tools enable skilled practitioners to rapidly specify transformation work - ﬂows ; however , they fall short in helping users formulate data transformation strategies . Given an input data set , what is the desired output state ? What operations are possible and which sequence of operations will result in suitable data ? One complication is that there is no single “correct” output format . A data layout amenable to plotting in Excel is of - ten different than the format expected by visualization tools such as Tableau . That said , one format is required by many database , statistics and visualization tools : a relational data table . In this format , each row contains a single data record and each column represents a variable of a given data type . In this paper , we augment the Wrangler transformation tool [ 13 ] to aid transform discovery and strategy formation . We take a mixed - initiative [ 10 ] approach to end - user program - ming : we generate proactive suggestions to improve the suitability of a data set for downstream tools . In other words , we want the computer to help analysts get data into the for - mat that computers expect . We make three contributions : A model of data table “suitability” that enables generation of proactive transform suggestions . We introduce a metric that indicates the degree to which a table adheres to a rela - tional format usable by downstream tools . We use this metric to guide automated search through the space of possible op - erations . As the search space is too large to evaluate at inter - active rates , we couple our metric with empirically - derived heuristics for pruning the space of candidate transforms . An analysis of algorithm behavior assessing the strengths and limitations of our suggestions . Across a set of realistic transformation tasks , we ﬁnd that our method suggests over Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 65 Split Cut Extract Edit Fill Translate Drop Merge Delete Promote Fold Unfold Transpose column split1 , split2 , split3 , split4 . . . keys 1 , 2 Fold split1 , split2 , split3 , split4 . . . using 1 , 2 , 3 as keys Fold split1 , split2 , split3 , split4 . . . using 1 , 2 as keys Fold split1 , split2 , split3 , split4 . . . using 1 as a key Export Split data repeatedly on newline into rows Split data repeatedly on ' , ' Delete rows 1 , 2 Fill row 1 with values from the left Suggestions Script Total rows : 54 Prev Next 1 2004 2004 2004 2003 2003 2 STATE Participation Rate 2004 Mean SAT I Verbal Mean SAT I Math Participation Rate 2003 Mean SAT I Verbal 3 New York 87 497 510 82 496 4 Connecticut 85 515 515 84 512 5 Massachusetts 85 518 523 82 516 6 New Jersey 83 501 514 85 501 7 New Hampshire 80 522 521 75 522 8 D . C . 77 489 476 77 484 split split1 split2 split3 split4 split5 1 New York 2004 Participation Rate 2004 2 New York 2004 Mean SAT I Verbal 3 New York 2004 Mean SAT I Math 4 New York 2003 Participation Rate 2003 5 New York 2003 Mean SAT I Verbal 6 New York 2003 Mean SAT I Math 7 New York 2002 Participation Rate 2002 8 New York 2002 Mean SAT I Verbal 9 New York 2002 Mean SAT I Math 10 Connecticut 2004 Participation Rate 2004 11 Connecticut 2004 Mean SAT I Verbal 12 Connecticut 2004 Mean SAT I Math split fold fold1 value 87 497 510 82 496 510 79 494 506 85 515 515 a b c d Figure 1 : The Wrangler User Interface . Clockwise from the top : ( a ) tool bar for transform speciﬁcation , ( b ) data table display , ( c ) history viewer containing an exportable transformation script , ( d ) suggested transforms . The effect of the selected Fold transform is previewed in the data table display using before ( top ) and after ( bottom ) views . half ( 53 % ) of the steps used in “ideal” transformations . In these cases our suggestions exhibit high precision : the top - ranked suggestion is the preferred option 77 % of the time . A user study examining how end users apply proactive sug - gestions . We ﬁnd that our method can help users complete transformation tasks , but not always in the manner that we expected . Many users express a desire to maintain control and roundly ignore suggestions presented prior to interaction with the data table . However , users do not express similar concerns when suggestions generated by our proactive model are inserted among “reactive” suggestions speciﬁc to an ini - tiating interaction . User assessment of suggestions appears to improve when users see themselves as the initiators . We also present a redesign of the Wrangler interface to bet - ter surface the space of available data transforms and param - eters . The resulting interface enables manual speciﬁcation or reﬁnement of transforms and facilitates learning from the examples provided by automated suggestions . RELATED WORK Researchers have proposed numerous strategies for simplify - ing programming tasks , including domain - speciﬁc languages [ 18 ] , visual programming [ 1 ] , keyword programming [ 17 ] , and programming - by - demonstration [ 2 ] . Myers et al . [ 20 ] provide a survey of these approaches . Here , we review prior work in end - user programming tools for data transformation . Menu - Driven Data Transformation Both database and HCI researchers have devised graphical interfaces [ 6 , 11 , 21 ] for reformatting and cleaning data . Each of these tools share a similar design : a data table view and a set of menu - accessible transformation operators . Google Reﬁne [ 11 ] combines menu - driven commands with faceted histograms for data proﬁling and ﬁltering . Ajax [ 6 ] similarly provides an interface for transform speciﬁcation with advanced facilities for entity resolution . Potter’s Wheel [ 21 ] is a graphical interface for authoring statements in a declarative transformation language and offers extensible fa - cilities for data type inference . Each of these tools enable skilled practitioners to transform data more rapidly . How - ever , each imposes a learning curve : users must learn both the available operations and how to combine them to achieve common data transformation needs . Programming - by - Demonstration Systems Another class of targeted data manipulation tools rely on pro - gramming by demonstration ( PBD ) techniques [ 2 ] . Potluck [ 12 ] uses simultaneous editing [ 19 ] to help users perform data integration . Karma [ 22 ] infers text extractors and trans - formations for web data from examples entered in a table . Vegemite [ 16 ] extends CoScripter [ 15 ] to integrate web data , automate the use of web services , and generate shareable scripts . Dontcheva et al . [ 4 ] use PBD techniques to enable extraction , integration , and templated search of web data . Gulwani [ 8 ] introduces an algorithm for learning expres - sive string processing programs from input - output examples . PADS [ 5 ] infers nuanced data parsers from a set of positive examples . Though well - suited for their intended tasks , these systems are insufﬁcient for the more general demands of data wrangling . For example , while text extraction and mass edit - ing are quite valuable for data transformation , the above tools lack other needed operations such as table reshaping , aggre - gation , and missing value imputation . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 66 Closely related to our current work is Harris and Gulwani’s [ 9 ] system for learning table transformations from an exam - ple input - output pair . Given input and output tables , the sys - tem can infer a program that ﬁlters , duplicates , and / or reorga - nizes table cells to generate the output table . These resulting programs can express a variety of table reshaping operations . Our work differs in multiple respects . First , the approach of Harris and Gulwani treats table cells as atomic units , and thus has limited expressiveness . For example , it does not support transformations involving text editing or extraction . Second , their approach requires that a user specify both input and output examples , and thus know the details of the desired output in advance . In the case of large tables , creating the output example may be tedious . On the other hand , provid - ing a small example from which the proper transformation can be inferred may require signiﬁcant insight . Third , the actual mechanics of the resulting transformation are opaque , potentially limiting user skill acquisition . In contrast , our ap - proach does not accept an output example but instead lever - ages the assumption that the user desires a relational data table with homogeneous columns . This enables our system to offer proactive suggestions in the context of a full - featured data transformation environment . DATA WRANGLER In this work , we introduce extensions to Data Wrangler [ 13 ] , a system that combines multiple end - user program - ming strategies to facilitate speciﬁcation of data transforma - tion scripts . Underlying Wrangler is a declarative domain - speciﬁc language that includes a comprehensive set of trans - formation operators and enables code - generation of reusable programs ( e . g . , Python and JavaScript code ) . Wrangler pro - vides natural language descriptions and visual previews with which users can assess and verify transform behaviors . Wran - gler uses programming - by - demonstration methods ( c . f . , [ 8 , 19 ] ) to specify regular expression patterns and row predi - cates . In addition , Wrangler generates automatic transform suggestions in response to user interactions with a data table . The Wrangler Transformation Language The transformation scripts produced by Wrangler consist of a linear sequence of individual transforms , expressed in an un - derlying declarative language . The transforms support com - mon data cleaning and reformatting tasks such as splitting or extracting text values , deleting or merging columns , batch text editing , interpolating values , and reorganizing cell lay - out ( table reshaping ) . Table 1 summarizes the most com - mon transforms surfaced in the user interface . The language is the direct descendant of the Potter’s Wheel language [ 21 ] and draws on concepts introduced in SchemaSQL [ 14 ] . This prior work [ 14 , 21 ] also provides formal proofs of the lan - guage’s expressiveness , showing it is capable of expressing any one - to - one or one - to - many transform of cell values . In addition , the declarative nature of the language facili - tates implementation across a variety of platforms . Thus the Wrangler tool can generate executable code for multi - ple runtimes , including Python and JavaScript . For example , we often wrangle a data subset within the user interface and then export a resulting Python script to transform much larger databases ( millions or more rows ) on a server machine . Transform Description Cut Remove selected text from cells in speciﬁed columns . Delete Remove rows that match given indices or predicates . Drop Remove speciﬁed columns from the table . Edit Edit the text in each cell of the speciﬁed columns . Extract Copy text from cells in a column into a new column . Fill Fill empty cells using values from adjacent cells . Fold Reshape a table into columns of key - value sets ; se - lected rows map to keys , selected columns to values . Merge Concatenate multiple columns into a single column . Promote Promote row values to be the column names . Split Split a column into multiple columns by delimiters . Translate Shift the position of cell values by a given offset . Transpose Transpose the rows and columns of the table . Unfold Reshape a table by mapping key - value sets to a col - lection of new columns , one per unique key . Table 1 : The Wrangler Transformation Language . Each transform accepts as parameters some combi - nation of enumerable values and text , row , or column selection criteria . For further discussion , see [ 13 , 21 ] . Boys Girls Australia 1 2 Austria 3 4 Belgium 5 6 China 7 8 Australia Boys 1 Australia Girls 2 Austria Boys 3 Austria Girls 4 Belgium Boys 5 Belgium Girls 6 China Boys 7 China Girls 8 Figure 2 : An example of table reshaping . A Fold op - eration transforms the table on the left to the one on the right ; an Unfold operation performs the reverse . A critical feature of the language design is its compactness : with only a dozen operators , analysts can complete a wide variety of data cleaning tasks . Moreover , most operators ac - cept identical parameter types , namely row , text and column selections . The compact language design is intended to fa - cilitate exploration and learning by limiting the number of possible operations considered . An additional beneﬁt is that this reduced set of formally - deﬁned operators lends itself to computational search over operation sequences . The Wrangler User Interface The Wrangler user interface ( shown in Figure 1 ) allows an - alysts to specify transforms in the underlying language . The interface contains four primary components : along the top of the display is a tool bar for transform speciﬁcation , the right panel contains an interactive data table display , and the left panel contains both automated transform suggestions ( top ) and an interactive history viewer describing the current script ( bottom ) . Similar to other transformation tools [ 11 , 21 ] , a transform can be speciﬁed manually by selecting a transform type from the tool bar and then entering in desired parameter values . However , Wrangler provides additional facilities to aid transform speciﬁcation and veriﬁcation . Automated Transform Suggestions Wrangler’s data table display supports a set of common inter - actions , such as selecting rows and columns by clicking their Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 67 headers or selecting and manipulating text within table cells . While these actions can be used to specify parameters for a selected transform type , manual speciﬁcation can be tedious and requires that users have a ﬁrm command of the available transforms . To facilitate rapid speciﬁcation , Wrangler infers applicable transforms directly from an initiating interaction . After the user makes a selection on the data table , Wran - gler generates automatic suggestions in a three - phase pro - cess . First , Wrangler infers a set of possible parameter values in response to the user’s selection . Example parameters in - clude regular expressions matching selected text substrings and row predicates matching selected values , generated us - ing programming - by demonstration methods [ 13 , 19 ] . Sec - ond , Wrangler enumerates a list of transforms that accept the inferred parameters . Third , Wrangler ﬁlters and ranks the re - sulting transforms according to historical usage statistics and heuristics intended to improve result quality . These trans - forms then appear as a ranked list of suggestions in the inter - face , where users can preview their effects and modify their parameters . For more details regarding the Wrangler infer - ence engine , we refer interested readers to Kandel et al . [ 13 ] . Assessing Transform Effects When creating data transformation scripts , users often ﬁnd it difﬁcult to understand a transform’s effect prior to exe - cuting it [ 13 ] . To aid in transform assessment , Wrangler presents suggestions using natural language descriptions to aid quick scanning of the suggestions list . When a transform is selected , Wrangler uses visual previews to enable users to quickly evaluate its effects without executing it . When fea - sible , Wrangler displays in - place previews in the data table , drawing users’ attention to the effect of the transform in its original context . For complex reshaping operations , Wran - gler shows before and after images of the table and uses color coding to help users perceive the correspondence of cells be - tween the two states ( Figure 1b ) . Design Issues and Opportunities Wrangler’s automated suggestions and visual assessment fea - tures help analysts iteratively hone in on a desired transfor - mation . A user study by Kandel et al . [ 13 ] ﬁnds that these mechanisms can accelerate speciﬁcation and facilitate dis - covery of applicable transforms . However , the initial Wran - gler design also suffers from some shortcomings . Surfacing Transform Parameters While natural language descriptions enable users to scan sug - gestions , they provide little guidance for how to specify pa - rameters manually . This disconnect constitutes a missed op - portunity : in addition to accelerating speciﬁcation , suggested transforms might serve as instructive examples of more ad - vanced system use . The initial Wrangler design also buries transforms within hierarchical menus , limiting visibility . In response , we redesigned the Wrangler user interface to better surface available transforms and their parameters . The tool bar along the top of the user interface makes all trans - forms immediately visible , and the parameters for a current transform appear directly below . As users preview suggested transforms , the complete parametrization is now visible in the tool bar . We apply linked highlighting between parame - ters in natural language descriptions and those in the tool bar . In terms of Green’s Cognitive Dimensions of Notation [ 7 ] , this redesign is intended to improve the visibility of options and decrease the viscosity of manually tuning inferred param - eters . In terms of Horvitz’s principles for mixed - initiative in - teraction [ 10 ] , the design provides a shared working memory by which users can more directly observe ( and thus hopefully learn from ) system - initiated actions . Specifying Transforms and Formulating Strategies Observing user activity with Wrangler reveals that analysts may have difﬁcultly formulating data cleaning strategies [ 13 ] . Novice users are often unsure which target data state is the one best suited for subsequent analysis . Even when the target data state is known , users are often unsure which sequence of operations is needed to reach that state . We have observed that both novice and expert users may consequently resort to blind exploration of the available transforms . This process is hampered by the fact that some operations remain difﬁ - cult to specify despite the aid of automated suggestions . In particular , reshaping operations that signiﬁcantly alter the ar - rangement of table cells are hard to conceptualize and apply . However , it is exactly these operations that are often neces - sary to map input data to a format usable by analysis tools . We attempt to address these issues by extending Wrangler to provide proactive suggestions in addition to “reactive” sug - gestions initiated by user actions . Our proactive suggestions are intended to lead users towards effective cleaning strate - gies and facilitate the speciﬁcation of complex reshaping op - erations . After describing the details of our proactive sug - gestion algorithm , we go on to analyze the behavior of our algorithm and evaluate our approach in a user study . PROACTIVE DATA WRANGLING We now describe extensions to Wrangler to automatically generate proactive suggestions . In addition to the previous method of suggesting transforms in response to user - initiated actions ( e . g . , selecting a row or column ) , Proactive Wran - gler continually analyzes the current state of the data table and provides suggestions to make the table more suitable for import into a relational database or analytic tool . These sug - gestions are intended to both accelerate the work of experts and guide novices towards a desired outcome . For exam - ple , we wish to surface complex reshaping operations ( fold and unfold ) within a “recognition” task , rather than a harder “recall” task in which the user needs to determine which op - eration they require and manually initiate its speciﬁcation . A Proactive Data Cleaning Scenario To give a sense of how proactive suggestions ease the data cleaning process , Figure 3 illustrates a complete scenario where a user transforms data imported from an Excel spread - sheet ( Table 1 within Figure 3 ) into a dense relational format ( Table 6 ) . First , Wrangler analyzes the initial table state and makes 3 proactive suggestions . The user ignores them and instead manually selects and deletes the ﬁrst two rows , turn - ing Table 1 into Table 2 . Then the user chooses to execute the 2nd suggestion ( shown in bold ) , Split column 2 on ‘ : ’ , which transforms the data into Table 3 . Wrangler continues proac - tively suggesting additional transforms , and the user can sim - ply pick the desired ones from the list . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 68 1 . Bureau of I . A . Regional Director Numbers Niles C . Tel : ( 800 ) 645 - 8397 Fax : ( 907 ) 586 - 7252 Jean H . Tel : ( 918 ) 781 - 4600 Fax : ( 918 ) 781 - 4604 Frank K . Tel : ( 615 ) 564 - 6500 Fax : ( 615 ) 564 - 6701 Manually select and delete the ﬁrst two rows Proactive suggestions ( none chosen ) : 1 . Fill column 1 from above 2 . Split column 2 on ’ : ’ 3 . Delete empty rows 2 . Niles C . Tel : ( 800 ) 645 - 8397 Fax : ( 907 ) 586 - 7252 Jean H . Tel : ( 918 ) 781 - 4600 Fax : ( 918 ) 781 - 4604 Frank K . Tel : ( 615 ) 564 - 6500 Fax : ( 615 ) 564 - 6701 Proactive suggestions : 1 . Fill column 1 from above 2 . Split column 2 on ’ : ’ 3 . Delete empty rows 3 . Niles C . Tel ( 800 ) 645 - 8397 Fax ( 907 ) 586 - 7252 Jean H . Tel ( 918 ) 781 - 4600 Fax ( 918 ) 781 - 4604 Frank K . Tel ( 615 ) 564 - 6500 Fax ( 615 ) 564 - 6701 Proactive suggestions : 1 . Delete empty rows 2 . Fill column 1 from above 4 . Niles C . Tel ( 800 ) 645 - 8397 Fax ( 907 ) 586 - 7252 Jean H . Tel ( 918 ) 781 - 4600 Fax ( 918 ) 781 - 4604 Frank K . Tel ( 615 ) 564 - 6500 Fax ( 615 ) 564 - 6701 Proactive suggestions : 1 . Fill column 1 from above 5 . Niles C . Tel ( 800 ) 645 - 8397 Niles C . Fax ( 907 ) 586 - 7252 Jean H . Tel ( 918 ) 781 - 4600 Jean H . Fax ( 918 ) 781 - 4604 Frank K . Tel ( 615 ) 564 - 6500 Frank K . Fax ( 615 ) 564 - 6701 Proactive suggestions : 1 . Unfold column 1 on column 3 2 . Unfold column 2 on column 3 6 . Tel Fax Niles C . ( 800 ) 645 - 8397 ( 907 ) 586 - 7252 Jean H . ( 918 ) 781 - 4600 ( 918 ) 781 - 4604 Frank K . ( 615 ) 564 - 6500 ( 615 ) 564 - 6701 Result : cleaned table ready for DB import Figure 3 : Using Proactive Wrangler to reformat raw data from a spreadsheet . The proactive suggestion chosen at each step is highlighted in bold . In the Wrangler UI , proactive suggestions are displayed in the suggestions panel ( Figure 1d ) . Although the above example is small , it is indicative of a common usage pattern when cleaning data with Proactive Wrangler . In particular , cleaning often involves executing a mix of human - initiated and proactively - suggested trans - forms . Here the user must recognize that rows 1 and 2 are ex - traneous headers that should be deleted , but Wrangler proac - tively suggests all other necessary transforms . In the remain - der of this section , we describe how Wrangler generates , ﬁl - ters and ranks these proactive suggestions . A Metric for Data Table “Suitability” We deﬁne a suitable data table as one that can be loaded and effectively manipulated by an analytic tool or relational database . These tools often expect data in a relational format where each row contains a single data record and each col - umn represents a variable of a given data type . Although the raw data in Table 1 of Figure 3 is human - readable , it is not suitable for analytic tool or database import because of its ir - regular structure : it contains extraneous header rows , empty rows , and telephone / fax numbers are located in cells mixed with other strings , separated by a colon delimiter ( e . g . , “Tel : ( 800 ) 645 - 8397” ) . In contrast , the compact relational result in Table 6 is more usable by downstream tools . We created a metric that assesses how amenable a table is for import into downstream tools . Our metric rewards column type homogeneity ( H ) , fewer empty values ( E ) , and lack of delimiters ( D ) . A lower score indicates a more suitable ta - ble . A homogeneous , dense , delimiter - free table ( e . g . , Table 6 in Figure 3 ) has a “perfect” score of zero ; tools expecting relational tables should be able to import it . For a table T with rows R and columns C , we deﬁne the table suitability S as S ( T ) = (cid:18) 1 − ∑ c ∈ C H c ( T ) | C | (cid:19) + E ( T ) + D ( T ) | R | | C | ( 1 ) where | R | is the number of rows , | C | is the number of columns , and each component function is deﬁned as follows . H c is the homogeneity of column c , the sum of squares of the proportions of each data type Type present in that column : H c = ∑ Type (cid:18) | i ∈ R : c i ∈ Type | | R | (cid:19) 2 ( 2 ) Wrangler parses each cell’s contents into the most speciﬁc possible type , which can be a built - in like number or date , a user - deﬁned type like zip code or country name , or a generic string type for those that fail to match a more speciﬁc type ( for more details regarding Wrangler’s type inference , see Kandel et al . [ 13 ] ) . If 75 % of values in a column are num - bers and 25 % are dates , then the column’s homogeneity is ( 0 . 75 ) 2 + ( 0 . 25 ) 2 = 0 . 625 . If 50 % are numbers and 50 % are dates , then the column is less homogeneous : ( 0 . 5 ) 2 + ( 0 . 5 ) 2 = 0 . 5 . A column that contains only values of a sin - gle type has the maximum possible homogeneity score of 1 . Our table suitability score averages the homogeneity of all columns and subtracts that average from 1 , so that higher ho - mogeneity leads to a lower ( more “suitable” ) score . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 69 E is the count of empty cells . We favor denser tables , as missing values may indicate a sub - optimal data layout possi - bly containing replicated values in adjacent columns . D is the count of delimiters . A delimiter is a comma , colon , pipe , or tab character . We favor tables with fewer delimiters , as those tables are more likely to consist of atomic data rather than compound elements that could split into speciﬁc values . Our suitability score is invariant of table size , since its terms are all normalized by the numbers of rows and columns . However , one of its limitations is that it does not penalize data loss . In the extreme pathological case , deleting all cells except for one can lead to a perfect score of 0 ( assuming that last cell contains no delimiters ) . In the next section , we describe how we designed Proactive Wrangler to avoid sug - gesting such undesirable transforms . Poor scores in each component of Equation 1 make a table ill - suited for tool import . In databases and analytic tools , a column with a mixture of data types typically can only be im - ported as uninterpreted strings . A column with many delim - iters may be treated as strings rather than composite values of more speciﬁc types . A column with many empty cells of - ten indicates replicated values in adjacent columns . All these situations can limit downstream analyses . Generating Candidate Transforms Proactive Wrangler automatically suggests transforms that improve a table’s suitability score by ﬁrst generating candi - date suggestions , and then evaluating , ﬁltering , and ranking these candidates before presenting them to the user . One way to avoid suggesting undesirable lossy transforms is to explicitly penalize data loss when ranking suggestions ; however , this suffers from efﬁciency problems because all possible suggestions must still be generated , evaluated , and ranked . Instead , we adopt a simpler approach : we prune the space of suggestions to ensure that Proactive Wrangler never makes suggestions that involve signiﬁcant data loss . We limit lossy transforms to deletions of mostly - empty rows ( which often appear in spreadsheet headers or footnotes ) . We con - tend that data deletion should be left to the user’s discretion , and so Proactive Wrangler should only help to compact ( ﬁll and delete empty cells ) , parse ( split on delimiters ) , and re - shape ( fold and unfold ) the table . Thus , it generates the fol - lowing types of transforms as candidates at each step : • Fold columns C 1 , . . . , C n using rows R 1 , . . . , R n as keys • Unfold column C 1 on column C 2 • Split column C into multiple columns using a delimiter ( comma , colon , pipe , or tab ) • Fill all empty cells of row R with values from the left • Fill all empty cells of column C with values from above • Delete all mostly - empty rows ( ≥ 75 % empty cells ) • Delete all empty rows • Delete all empty columns Since most of these transforms take row and / or column in - dices as parameters , enumerating all possibilities is both in - feasible and undesirable . Assuming that a table has | R | rows and | C | columns , there are O ( | R | ) possible row ﬁlls , O ( | C | ) possible column ﬁlls and splits , O ( 2 | R | · 2 | C | ) possible folds , and O ( | C | 2 ) possible unfolds . It would take far too much time to evaluate all possible parameterizations , precluding interactive response rates . Even if efﬁciency were not a con - cern , many parameterizations are undesirable since they trig - ger degenerate cases of certain transforms . Informed by our data cleaning experiences and empirical ob - servations from a corpus of public data sets ( described in the next section ) , we developed rules to reduce the set of trans - form parameters and eliminate undesirable candidates : Fill . Proactive Wrangler only generates ﬁll candidates if the majority ( ≥ 50 % ) of cells in a given row or column are empty . This type of transform is useful for ﬁlling in sparse key rows ( or columns ) before doing a fold ( or unfold ) . Fold . Proactive Wrangler only generates fold candidates us - ing all columns except for the leftmost one ( i . e . , Columns 2 through | C | ) , and using at most the ﬁrst 3 rows as keys ( i . e . , Row 1 , Rows 1 – 2 , or Rows 1 – 3 ) . The above rule reduces the number of possible folds from O ( 2 | R | · 2 | C | ) to 3 and covers the majority of observed use cases for transforming a cross - tabulation into a relational for - mat . To quantify our intuition , we manually inspected all 114 tables in the 2010 OECD Factbook , an annual publication of world socioeconomic data sets from oecd . org . For all ex - cept for 2 of the tables , the only sensible fold used columns 2 through | C | , and for all except for 1 table , the only sensible fold used at most the ﬁrst 3 rows as keys . A cursory inspec - tion of cross - tabulation data sets from Wikipedia , US Bureau of Justice , and data . gov showed no tables that could be sensibly folded using columns other than 2 through | C | or using more than the ﬁrst 3 rows as keys . Also , Proactive Wrangler only generates fold candidates if the leftmost column contains all unique and non - null values in rows other than the key row ( s ) ; otherwise the folded table will have conﬂicts . For example , if there were a duplicate “Australia” row in the table on the left of Figure 2 , then the results of a fold would be ambiguous . Unfold . Proactive Wrangler only generates unfold candi - dates of the form “Unfold C 1 on C 2 ” if all columns except for C 2 are completely homogeneous ( single - typed ) and non - empty ; otherwise the headers in the resulting cross - tab will not be well - typed . ( The values in C 2 become the data matrix at the core of the resulting table , so it can have empty cells . ) Also , Proactive Wrangler only generates unfold candidates if the table has exactly 3 , 4 , or 5 columns , which corresponds to 1 , 2 , or 3 key columns , respectively . Our intuition for im - posing this limit is similar to why we only restrict folds to using at most the ﬁrst 3 rows as keys : it covers the majority of use cases , as indicated by our data corpus . The aforementioned rules reduce the number of candidate transforms from O ( 2 | R | · 2 | C | ) to O ( | R | + | C | ) . At each step ( e . g . , in Figure 3 ) , Proactive Wrangler generates all of these candidates at once and then evaluates , ﬁlters , and ranks them before presenting them to the user . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 70 Ranking and Presenting Proactive Suggestions After Proactive Wrangler generates a set of candidate trans - forms , it executes each of them on the current table and cal - culates the suitability score for the resulting table . It re - moves all candidates that result in tables with scores higher ( “worse” ) than the current table . We use a slightly modiﬁed scoring method for unfold transforms . The operation “Un - fold C 1 on C 2 ” transforms the values in column C 2 into a 2D data matrix at the core of the resulting table . Thus , that matrix should be scored as an atomic unit rather than as dis - parate columns . Proactive Wrangler calculates the score im - provement of an unfold by the change in homogeneity and density between C 2 and the resulting data matrix . Proactive Wrangler then presents the remaining candidates to the user in the suggestions panel ( Figures 1d and 3 ) , sorted by the amount of improvement ( – ∆ S ) . A user can preview and execute one of these proactive suggestions or can choose to ignore them , and instead make a selection on the data table to surface the ordinary context - dependent suggestions . CHARACTERIZING PROACTIVE ALGORITHM BEHAVIOR To assess the quality of our proactive suggestions , we ana - lyzed the behavior of our algorithm across a collection of di - verse data sets . For each , we compared the suggestions pro - duced by our algorithm with “ideal” transformation scripts constructed by hand . As there is often more than one feasi - ble “clean” goal state , we strove to transform each data table into a relational format amenable for import into a database or analytic tool and also sought to remove extraneous tokens from ﬁelds ( e . g . , parentheses , leading dashes , etc . ) . We compared 20 distinct data sets in our analysis . While this collection is relatively small , each data set was chosen because it is representative of a much larger class of data we have collected . For example , although we only included three tables from the 2010 OECD Factbook of world socioe - conomic data , all 114 tables from that source had a format that matched one of these three canonical tables . Although we cannot claim that our corpus is a representative sample of all data that users might want to clean , we strove to select data of diverse origins , formats , and complexity : Origins . Our corpus consists of a mix of government and NGO data ( e . g . , OECD , US Department of Justice , data . gov ) , scientiﬁc data ( e . g . , ﬂower classiﬁcations , audiology experi - ments ) and data scraped from websites ( e . g . , Wikipedia ref - erence tables , Craigslist apartment rental listings ) . Format . Data formats range over cross - tabulations ( e . g . , left half of Figure 2 ) , Excel reports intended for human consump - tion ( e . g . , Table 1 in Figure 3 ) , line - oriented records with cus - tom token separators and ad - hoc formats generated by scien - tiﬁc experiments . Complexity . The most concise cleaning script we constructed for data sets in our corpus ranged from 1 to 7 transforms in length ( i . e . , some data sets were noticeably “dirtier” than oth - ers ) . The mean script length was 3 . 6 transforms . We now summarize the results of using Proactive Wrangler to transform the 20 data sets in our corpus . When avail - able , we always selected the highest - ranking proactive sug - gestion that would lead us towards the goal state ; otherwise we initiated a selection on the data table and chose to execute the appropriate context - speciﬁc suggestion . Of all executed transforms , 53 % ( 39 / 73 ) were proactive suggestions ; the re - maining 47 % ( 34 / 73 ) resulted from human - initiated actions . When appropriate proactive suggestions appeared , the top - ranked ( # 1 ) suggestion was the preferable choice 77 % of the time ( 30 / 39 ) . The lowest rank of any chosen proactive sug - gestion was 6 , and the mean rank was 1 . 6 . For reference , in the ideal case 100 % of all executed trans - forms would come from the top - ranked proactive sugges - tion . In reality , our scoring metric is not perfect and there are certain classes of transforms that Proactive Wrangler is designed speciﬁcally not to offer . For our corpus , the fol - lowing transforms required human intervention : splitting on non - standard delimiters , extracting and cutting substrings , and deleting non - sparse rows and columns . Across our col - lection , 6 of the corpus tables can be cleaned solely using proactive suggestions , 9 require a mix of human - initiated se - lections and proactive suggestions , and 5 require exclusively human selections . We now discuss each category in turn . Fully Proactive Six of the data tables in our corpus ( 30 % ) exhibited the best - case performance for Proactive Wrangler : all of the required transforms appear as proactive suggestions . This typically occurs for tables whose individual elements are properly for - matted but the table itself requires re - structuring . For example , all 114 tables in the 2010 OECD Factbook and all 50 state - level crime data sets from the Department of Justice are cross - tabulations embedded within Excel spread - sheets . Even though we only included a few samples in our corpus , the rest of the tables from those sources are identi - cally formatted . For all of these tables , Proactive Wrangler suggests to delete the mostly - empty title and footnote rows , ﬁll in the header key row ( s ) , and then perform the appropriate fold to get the data into a relational format . Hybrid In the common case ( 9 / 20 tables , 45 % ) , data must be cleaned using a combination of user - initiated transforms and proac - tive suggestions . For these kinds of tables in our corpus , 55 % of executed transforms ( 23 / 42 ) came from proactive suggestions . By design , Proactive Wrangler does not offer certain types of suggestions , namely of transforms that lead to data loss . This limitation causes Wrangler to sometimes get “stuck” at a local optimum point when it cannot gener - ate any more proactive suggestions . In those cases , human intervention can allow Wrangler to escape local optima and resume generating useful proactive suggestions . For example , in a veteran’s hospital dataset , we ﬁrst chose a proactive suggestion to delete all empty rows , but then we had to manually delete an unnecessary column and remove ( cut ) the trailing ‘ % ’ character from all numbers represent - ing percentages . After those user - initiated clean - ups , Wran - gler proactively offers the proper fold suggestion , which we executed to complete our cleaning task . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 71 Manual Wrangler cannot offer useful proactive suggestions for data that require extensive string parsing within individual cells , which occurred in a quarter of our examples ( 5 / 20 tables , 25 % ) . These data sets all require the user to perform cus - tom string splits , cuts , or extracts . For two of these data sets , Wrangler “stayed out of the way” and did not offer any proactive suggestions . For the other three , Wrangler offered on average two ( unhelpful ) proactive suggestions . Our ﬁnd - ings from the user study ( see next section ) indicate that users ﬁnd it easy to ignore such unhelpful suggestions . For example , each line in a Craigslist apartment listings dataset is a string in this format : $ 2475 / 2br - Superb location - ( palo alto ) pic To create a table of rental prices , bedroom count , and loca - tions , one can split each line on the ‘ / ’ character , cut the ‘ $ ’ from the price to make it into an integer , and extract the lo - cation ( e . g . , “palo alto” ) from within the parentheses . These types of string manipulations are easier for a human to initi - ate using Wrangler’s reactive suggestions ; it is difﬁcult for an algorithm to suggest these manipulations a priori with both high precision and recall . Consequently , Wrangler does not currently attempt to make proactive suggestions for them . USER STUDY We conducted a user study comparing versions of Wrangler with and without proactive suggestions . We originally hy - pothesized that proactive suggestions would simplify spec - iﬁcation of commonly - used , but hard - to - specify reshaping transforms ( e . g . , fold , unfold ) , while causing limited distrac - tion to users specifying other types of transforms . Further - more , we hypothesized that by lowering the cost of ﬁnding applicable transforms , users would more quickly complete data cleaning tasks requiring multi - step transformations . As we will discuss , our results indicate that suggestions gen - erated by our proactive model can help users discover ap - plicable transforms , but not always in the manner we antici - pated . Users often dismissed proactive suggestions presented prior to an initiating interaction , but made use of those exact same suggestions when presented later in the session . Participants We recruited 16 participants ( 11 male , 5 female ) who had never used Wrangler before . All were university students with at least moderate experience programming and using data analysis tools such as Microsoft Excel or Matlab ; all came from Computer Science or related majors . Participants received a $ 15 gift certiﬁcate for one hour of their time . Methods We evaluated the impact of proactive suggestions by compar - ing Proactive Wrangler to a baseline version that only gen - erates suggestions in reaction to user - initiated interactions . First , we guided each subject through a 15 - minute tutorial of Wrangler , highlighting both proactive and reactive modes . Next , we had each subject perform data cleaning tasks on four data sets that were miniature versions of data sets from our corpus . We designed each task so that , in proactive mode , helpful proactive suggestions were available at most but not all steps ( the “Hybrid” category from the algorithm behav - ior study ) . We imposed a 10 - minute limit per task . The four cleaning tasks were divided into two pairs , each requiring structurally similar transformations . We gave participants a paper printout of the desired goal table state for each task . For a given pair of tasks , we assigned subjects one task using Proactive Wrangler and the other task using the baseline “re - active” Wrangler . We counterbalanced task order and Wran - gler versions across subjects . After completing the four tasks , we asked subjects to de - scribe their preferences for reactive versus proactive sugges - tions . Each study session was administered on a 15” Mac - Book Pro laptop and recorded using screen capture software . The ﬁrst eight subjects used a version of Proactive Wrangler that displayed proactive suggestions only when there was no active selection on the data table ; as soon as the user makes a selection , the proactive suggestions were replaced by the standard reactive suggestions . However , we observed that most subjects largely ignored the proactive suggestions in this conﬁguration . After interviewing those subjects about their rationale , we updated Wrangler to append the top three proactive suggestions to the list of reactive suggestions nor - mally generated from a user interaction . In other words , Wrangler now displayed proactive suggestions regardless of how the user interacted with it . This modiﬁed embedded proactive interface was seen by the last eight subjects . Results We initially expected subjects to complete tasks faster using Proactive Wrangler , but in fact we found no signiﬁcant dif - ference in completion times between proactive , embedded , or reactive variants ( F 2 , 51 = 0 . 059 , p = 0 . 943 according to re - peated measures ANOVA ) . We compared within individual tasks and controlled for the effects of task order , but found no signiﬁcant differences . The average task completion time was 231 seconds ; in only one instance did a user fail to com - plete a task by going over the 10 - minute time limit . Upon reviewing the usage logs , we found that subjects made sparing use of proactive suggestions . Most users ( 11 / 16 , 69 % ) executed a proactive suggestion at least once . How - ever , the total number of such transforms was small : in proactive conditions , subjects executed 1 . 16 proactive sug - gestions per task on average , compared to an average of 4 . 9 reactive suggestions on those same tasks . To understand why subjects were reluctant to use the proac - tive suggestions , we reviewed our recorded experiment ses - sions to identify critical incidents . We identiﬁed three recur - ring patterns : subjects ignoring useful proactive suggestions , previewing but dismissing suggestions , and viewing sugges - tions as a last resort . We now discuss each . Ignoring proactive suggestions Nearly one - third of the subjects ( 5 / 16 ) simply never pre - viewed any proactive suggestions , despite having used them in the tutorial . All of these subjects ignored at least one proactive suggestion that they later executed after making a selection and choosing an identical reactive suggestion . For example , after 137 seconds of work , one subject was almost Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 72 done with a task and only needed to perform a ﬁnal unfold . The necessary unfold was displayed as the sole proactive suggestion , but the subject ignored it and spent the next 86 seconds experimenting with selecting columns and specify - ing various folds and unfolds . He ﬁnally chose the correct unfold and completed his task , at which point he said , “A proactive suggestion would have really helped me here ! ” Once we integrated proactive suggestions among reactive suggestions , 4 out of the 8 subjects who used the embedded version ignored a useful proactive suggestion only to click on it immediately after selecting an unrelated part of the table . One subject wanted to do a fold when in fact he needed an unfold ( which was proactively suggested but ignored ) . When he selected some columns and attempted a fold , he noticed the proactive unfold suggestion at the bottom of the list and realized he needed to unfold , so he selected it and completed his task . This unfold would not have surfaced if he had not been using the embedded proactive interface . Previewing , then ignoring , proactive suggestions Almost half of our subjects ( 7 / 16 ) actually previewed the effects of a useful proactive suggestion , dismissed it , and a short time later made a selection and executed the identical reactive suggestion . As a typical example , one subject pre - viewed a proactively - suggested unfold transform for a few seconds . But instead of executing it , he immediately selected the two columns in the table necessary to have Wrangler re - actively suggest the same unfold . He then navigated directly to that unfold transform , previewed , and executed it . Proactive suggestions as a last resort Three subjects used proactive suggestions only when they ran out of ideas for triggering reactive suggestions . For example , out of the 167 seconds that one subject spent on a task , she was stuck staring at the table for 60 seconds ( 36 % of total time ) before she looked at the top - ranked proactive fold , pre - viewed , and then executed it . This was the ﬁrst ( and only ) time that she paused for long enough to actually consider us - ing proactive suggestions ; for the remainder of her session , she was continually making selections on the table , which surfaced reactive suggestions and hid the proactive ones . Study Limitations All subjects had some programming background , and this might make them more likely to want to explore rather than immediately follow proactive suggestions . One subject re - marked , “Maybe it’s just me , but I like to try [ initiating Wrangler actions ] myself to see how they work . ” We provided speciﬁc target end states to subjects and timed them . Although many analysts have some end state in mind when working with data , discovering an appropriate end state is often an exploratory task . Several subjects reported that given a more ambiguous task , they believe they would be more likely to explore proactive suggestions , since these may inform what types of end states are possible . Summary Our user study largely disconﬁrms our original hypotheses . Users initially ignored proactive suggestions and on aver - age did not complete tasks more quickly with them . How - ever , proactive suggestions did aid the transformation pro - cess . Over two - thirds of subjects executed a proactive sug - gestion at least once . Suggestions generated by our proactive model proved helpful when embedded among reactive sug - gestions and when users failed to complete tasks by other means . At minimum , proactive suggestions are occasion - ally helpful and do not disrupt users . Moreover , our results raise some future research questions for the design of mixed - initiative interfaces . We discuss these in the next section . DISCUSSION In this paper , we presented a metric for table “suitability” that we apply to generate suggested data transforms . When com - pared with idealized transformation scripts , our model pro - duces helpful suggestions for a majority of transform steps and ranks the preferred suggestion highly . In our own use , we have found proactive suggestions to be of great assistance : we regularly use the tool for data wrangling and ﬁnd proac - tive suggestions to be a valuable complement . As a result , we believe our proactive suggestion model helps advance the state - of - the - art in interactive data transformation . However , our user study results cast a shadow on our initial motivations . We ﬁnd little evidence that proactive sugges - tions help novice users complete transformation tasks more quickly or learn data cleaning strategies . Upon review of our notes and recordings , we hypothesize multiple factors shape the observed usage patterns : attentional blindness to proac - tive suggestions , users’ desire to sustain initiative , and insuf - ﬁcient expertise to recognize the value of suggestions . Attention Blindness Some subjects reported that they did not attend to proactive suggestions , even after using them in the tutorial . Many instead clicked on the table to initiate reactive suggestions . On the one hand , subjects expressed appreciation that proac - tive suggestions did not interrupt their workﬂow : annoying distractions are a classic complaint for mixed - initiative in - terfaces . However , insufﬁcient visibility also seems to be a problem . Wrangler and similar tools might beneﬁt from cues that emphasize suggested operations . For instance , sub - tle animation or colored backgrounds might draw attention to high - conﬁdence suggestions without interrupting users’ ﬂow . User Agency and Sustained Initiative Many users expressed a pre - existing disdain for proactive in - terfaces . One said : “I hate suggestions popping up at me on the computer . . . I just want to get them out of my way . ” Users described a distrust of automated suggestions in productivity software , citing examples like the infamous Microsoft Of - ﬁce ‘paper clip’ . Another user , describing his reluctance to use Wrangler’s proactive suggestions , stated “I knew what I wanted to do with the data , so I just did it myself . ” Ironically , users voiced no such qualms regarding reactive suggestions , which were regularly employed to transform data . During the ﬁrst half of our study , only 4 / 8 subjects ( 50 % ) executed proactive suggestions . After we deployed the em - bedded proactive interface , 7 / 8 subjects ( 88 % ) executed sug - gestions generated by our proactive model , including those inserted into reactive suggestions . It is possible that user as - sessment of suggested transforms improves when users per - Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 73 ceive of themselves as the initiator . We observed several in - stances of subjects making a selection , choosing an embed - ded proactive suggestion , and executing it after the same sug - gestion had already been proactively presented and viewed . Subjects seem to value suggestions more when they are of - fered in response to an initiating action , even if the sugges - tions are generated independently . While speculative , this observation suggests that future research might examine not only the utility of suggestions to the stated task goal [ 10 ] , but also how interface design and turn - taking affects user recep - tiveness to those suggestions . What design decisions might help sustain users’ sense of control in mixed - initiative UIs ? Expertise for Transform Assessment Our own internal use of Proactive Wrangler and the results of our study with novice users are at a disconnect . In our expe - rience , proactive suggestions can reduce the cognitive effort and also the time required to specify transformations . Ini - tially we hypothesized that proactive suggestions can speed transformation by casting transform speciﬁcation as a “recog - nition” task , in which users recognize a desired transform among the list of suggestions . Our user study results suggest otherwise . Prior knowledge of transformation strategies may be needed to rapidly “recognize” the value of a transform . Thus , proactive suggestions may actually be more effective for expert users than for novices . New preview mechanisms might better facilitate user assessment of suggestions . For example , thumbnails of a transform’s effects might be easier to comprehend than the current textual descriptions . More sophisticated approaches may be needed to foster learn - ing of multi - step transformation strategies . In most cases subjects followed a greedy approach to discovering an ap - propriate chain of transformations . Some complex transfor - mations may require steps in which it is difﬁcult to gauge progress from an intermediate state ( e . g . , a fold transform followed by a subsequent unfold ) . Subjects stated that they were worried that proactive suggestions might lead them down the wrong path . However , they often did later select and execute transforms that were identical to those previ - ously suggested by Proactive Wrangler . By this point the subject had explored more alternatives and used interactions to communicate their intent . It is unclear which of these two factors gave the user more trust in the system . Ultimately , users may be the most successful once they are able to articulate and evaluate their own transformation strate - gies . Towards this aim , future work might examine alterna - tive approaches to fostering expertise . Tutorial generation may be one means . Another possibility is to examine the effects of multi - step suggestions . New user interface tech - niques for suggesting and previewing multiple steps may aid these situations ; can a different design prompt multi - step rea - soning rather than greedy search ? More broadly , designing mixed - initiative interfaces to foster expertise through exam - ple presents a compelling challenge for future work . ACKNOWLEDGMENTS The authors thank all the participants in the user study . This research was supported in part by NSF grant CCF - 0964173 , the Boeing Company , and Greenplum / EMC . REFERENCES 1 . M . Burnett . Visual programming . In J . G . Webster , editor , Encyclopedia of Electrical and Electronics Engineering . John Wiley & Sons Inc . , 1999 . 2 . A . Cypher . Watch What I Do : Programming by Demonstration . MIT Press , 1993 . 3 . T . Dasu and T . Johnson . Exploratory Data Mining and Data Cleaning . John Wiley & Sons , Inc . , New York , NY , 2003 . 4 . M . Dontcheva , S . M . Drucker , D . Salesin , and M . F . Cohen . Relations , cards , and search templates : user - guided web data integration and layout . In ACM UIST , pages 61 – 70 , 2007 . 5 . K . Fisher and D . Walker . The Pads project : An overview . In International Conference on Database Theory , March 2011 . 6 . H . Galhardas , D . Florescu , D . Shasha , and E . Simon . Ajax : an extensible data cleaning tool . In ACM SIGMOD , page 590 , 2000 . 7 . T . R . G . Green . Cognitive dimensions of notations . In British Computer Society , Human - Computer Interaction Specialist Group on People and Computers V , pages 443 – 460 . Cambridge University Press , 1989 . 8 . S . Gulwani . Automating string processing in spreadsheets using input - output examples . In ACM POPL , pages 317 – 330 , 2011 . 9 . W . Harris and S . Gulwani . Spreadsheet table transformations from examples . In ACM PLDI , 2011 . 10 . E . Horvitz . Principles of mixed - initiative user interfaces . In ACM CHI , pages 159 – 166 , 1999 . 11 . D . Huynh and S . Mazzocchi . Google Reﬁne . http : / / code . google . com / p / google - refine / . 12 . D . F . Huynh , R . C . Miller , and D . R . Karger . Potluck : semi - ontology alignment for casual users . In ISWC , pages 903 – 910 , 2007 . 13 . S . Kandel , A . Paepcke , J . Hellerstein , and J . Heer . Wrangler : Interactive visual speciﬁcation of data transformation scripts . In ACM CHI , 2011 . 14 . L . V . S . Lakshmanan , F . Sadri , and S . N . Subramanian . SchemaSQL : An extension to SQL for multidatabase interoperability . ACM TODS , 26 ( 4 ) : 476 – 519 , 2001 . 15 . G . Leshed , E . M . Haber , T . Matthews , and T . Lau . CoScripter : automating & sharing how - to knowledge in the enterprise . In ACM CHI , pages 1719 – 1728 , 2008 . 16 . J . Lin , J . Wong , J . Nichols , A . Cypher , and T . A . Lau . End - user programming of mashups with Vegemite . In IUI , pages 97 – 106 , 2009 . 17 . G . Little and R . C . Miller . Translating keyword commands into executable code . In ACM UIST , pages 135 – 144 , 2006 . 18 . M . Mernik , J . Heering , and A . M . Sloane . When and how to develop domain - speciﬁc languages . ACM Comput . Surv . , 37 ( 4 ) : 316 – 344 , 2005 . 19 . R . C . Miller and B . A . Myers . Interactive simultaneous editing of multiple text regions . In USENIX Tech . Conf . , pages 161 – 174 , 2001 . 20 . B . A . Myers , A . J . Ko , and M . M . Burnett . Invited research overview : end - user programming . In ACM CHI Extended Abstracts , pages 75 – 80 , 2006 . 21 . V . Raman and J . M . Hellerstein . Potter’s wheel : An interactive data cleaning system . In Proc . VLDB , 2001 . 22 . R . Tuchinda , P . Szekely , and C . A . Knoblock . Building mashups by example . In ACM IUI , pages 139 – 148 , 2008 . 23 . H . Varian . Hal Varian on how the Web challenges managers . In McKinsey Quarterly , Jan 2009 . Paper Session : Social Information UIST’11 , October 16 – 19 , 2011 , Santa Barbara , CA , USA 74