Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than the author ( s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from Permissions @ acm . org . http : / / dx . doi . org / 10 . 1145 / 2509578 . 2514737 User Model and System Model : The Yin and Yang in User - Centered Software Development Han Xu Fakultät für Informatik Technische Universität München Munich , Germany han . xu @ tum . de Oliver Creighton Corporate Technology Siemens AG Munich , Germany oliver . creighton @ siemens . com Naoufel Boulila Corporate Technology Siemens AG Munich , Germany naoufel . boulila @ siemens . com Ruth Demmel Fakultät für Informatik Technische Universität München Munich , Germany demmel @ in . tum . de Abstract Software systems can be viewed from both external and internal perspectives . They are called user model and system model re - spectively in the human - computer interaction community . In this paper , we employ the yin - yang principle as an analytical tool for reviewing the relationship between the user model and the system model . In the traditional system - centered approach , the engineer is more concerned with the system model and does not pay much attention to the user model . However , as the user - centered ap - proach has gained increasing acceptance in a number of projects , we claim that the user model and system model are the yin and yang in user - centered software development and , following the yin - yang principle , call for equal emphasis on both models . Par - ticularly , we propose using video - based scenarios as the represen - tation of user models and reveal the benefits of the use of video in software development . As a case study , we describe how we have employed scenario videos in a project course and share best prac - tices that we have identified for the creation of demo scenario videos . Categories and Subject Descriptors D . 2 . 1 [ Software Engineer - ing ] : Requirements / Specifications General Terms Management , Design , Human Factors . Keywords Software Engineering ; User Centered Design ; Yin - Yang ; Scenario Based Design ; Video 1 . Introduction In the early days of computer systems , the main focus of system development was , among others , data structures , algorithms , and communication mechanisms : all the elements that would finally make up the “moving parts” of the target system . In those days , computer systems came with command - line interfaces and were designed primarily for trained or experienced users . At that time , the system - centered approach , which focuses on the internal mechanics of the software system , was enough for system devel - opment ; there was almost no need for developers to consider user interaction issues . However , with the development of computer technology , computer systems were becoming more and more complex – both in terms of the type of applications as well as in the form of user interaction . The target audience was no longer limited to trained specialists , but an increasing focus was put on novice users instead . Finally , Human - Computer Interaction ( HCI ) , although started later than other areas of computer science , re - ceived attention in the 1980s [ 1 , 2 ] and since then more and more research has emerged from this field . As User Centered Design [ 4 ] and Participatory Design [ 5 ] have been widely accepted in a number of software development [ 6 ] , the designer’s focus has shifted from the system to the ultimate end - user today [ 3 ] . In this paper , we adopt the terms user model and system model from the HCI community [ 19 ] to refer to the external , user - visible aspects and the internal , user - invisible aspects of software systems respectively . Based on the yin - yang principle [ 7 ] , we identify the user model as the yin and the system model as the yang . We argue that the user model and system model depend on and transform into each other and that equal attention should be given to both the user model and the system model during system development . The rest of the paper is organized as follows . In Section 2 , we briefly introduce the basic concept and properties of yin and yang and illustrate some instances of yin and yang in the real world as well as in software development . Then , we introduce the four - model categorization in software development ( system model , user model , design model and interface model ) and explain why the user model and system model are the yin and yang in user - centered software development . In Section 3 , we propose using video - based scenarios as the representation of the user model and explain why and how we use video - based scenarios for this pur - pose . Section 4 presents a case study of this approach at a project course and section 5 concludes the paper and discusses directions for future work . 2 . The Yin - Yang and Software Development 2 . 1 The Yin - Yang Principle Yin and yang are concepts that originated from the ancient Chi - nese text The Book of Change [ 8 ] ( also known as I Ching or Yi - jing ) . The Book of Change , as its name suggests , describes the philosophy of change in terms of yin and yang . There are several levels of understanding about yin - yang and change , which can be summarized as : “change has an absolute limit : this produces two modes ; the two modes produce four forms ; the four forms produce eight trigrams ; the eight trigrams determine fortune and misfor - tune . ” [ 8 ] . 91 Onward ! 2013 , October 29 – 31 , 2013 , Indianapolis , Indiana , USA . Copyright is held by the owner / author ( s ) . Publication rights licensed to ACM . ACM 978 - 1 - 4503 - 2472 - 4 / 13 / 10 / 13 / 10 . . . $ 15 . 00 . Yin and yang are the two fundamental concepts ( called “two modes” ) , which represent the dualism that exist everywhere and in everything . Some basic properties of yin and yang are summa - rized as below [ 7 , 8 , 9 , 10 ] : (cid:1) Yin and yang are quite ubiquitous . For example , birth and death , heaven and earth , good and bad , to name just a few . However , it should be noted that there could be several differ - ent pairs of yin and yang for a particular concept or situation . (cid:1) Yin is feminine , dark and passive , while yang is masculine , bright , and active . (cid:1) Yin and yang are opposite but complementary . However , it is noteworthy that by being opposite it just means that they are two sides of a dualism and should not be viewed as contrary in the sense of logic ; they are complementary to each other in - stead . The above is the account of the static properties of yin and yang . Below we introduce the concept of “four forms” and reveal the dynamic nature of yin and yang : (cid:1) Yin and yang depend on each other and at the same time trans - form into each other in a continuous manner . (cid:1) In this dynamic process , every yin comes with a little bit of yang and every yang comes with a little bit of yin . They are named “four forms” of yin / yang : climaxing yin , climaxing yang , incipient yin and incipient yang ( also known as major yin / yang and minor yin / yang ) [ 8 ] . The Taiji diagram ( see Figure 1 ) is a representation of the yin and yang as well as the dynamic process of waxing and waning . In this diagram , a circle is divided into two halves by an S - line : the white area represents the yin mode and the black area repre - sents the yang mode . The yin mode is subdivided into climaxing yin and incipient yang ( i . e . the black hole in the white area ) ; the yang mode is subdivided into climaxing yang and incipient yin ( i . e . the white hole in the black area ) [ 8 ] . The philosophy of yin and yang is all about the harmony and balance in the process of constant change and has been adopted in some areas of research such as computer science and management science . [ 9 , 11 , 42 ] 2 . 2 Perceptual vs . Rational One of the ways of categorizing human knowledge is to classify it as perceptual knowledge and rational knowledge [ 12 ] . Perceptual knowledge refers to the first - hand knowledge gained through direct experience and observation . In contrast , rational knowledge means the after - thought knowledge that is learned through analy - sis and reasoning and exists in the form of rules or laws of things . Perceptual knowledge and rational knowledge have a close con - nection with the yin - yang principle . We view perceptual knowl - edge as the yin and rational knowledge as the yang . Just like the properties of yin and yang , perceptual knowledge and rational knowledge are knowledge of the same thing in different forms and they , when combined together , form a comprehensive understand - ing of the object . Perceptual knowledge transforms into rational knowledge by analysis and reasoning and rational knowledge results in better , higher - quality perceptual knowledge . 2 . 3 Motorcycling After reading the book Zen and the art of motorcycle maintenance by Pirsig [ 13 ] , one will share the opinion that the mechanic and the driver have different views on motorcycling : the driver just enjoys the experience of driving , however , the mechanic focuses on enhancing the overall performance of the vehicle by fine - tuning its internal parts . They think of motorcycling from different perspectives and focus on different sides of motorcycling . The driver perceives motorcycling through the feeling obtained from driving ( similar to the process of acquiring perceptual experience , so it is the yin ) , while the mechanic views motorcycling as a running vehicle made up of different parts and thinks in his mind about how each moving or fixed part is working ( similar to the process of rational thinking , so it is the yang ) . It should be noted that the mechanic and the driver are just separate roles . Some - times they are assumed by different people and sometimes they could be the same person . This example of different perceptions of motorcycling also highlights the ubiquity of the yin - yang prin - ciple . 2 . 4 Music Composition You may have had the experience that sometimes when you are humming , you can be surprised to discover that the short segment of improvised music sounds beautiful ! It is true that an untrained person can sometimes create a few segments of beautiful music , however , he would find it very difficult to stitch them together and form a whole composition . This is an example of a perceptual ability that still lacks the necessary rational ability . In music psy - chology , it is termed intuitive musical ability ( IMA ) and rational musical ability ( RMA ) . This opinion has been concurred by re - searchers from the field of music education . For example , Moore describes : “Intuitive musical ability ( IMA ) , primarily an intuitive , spontaneous process , involved the creation of germinal musical ideas through exploratory means such as improvisation . In con - trast , rational musical ability ( RMA ) was a more logical , rational process that involved the conscious reshaping , extending and developing of germinal ideas” [ 14 , 15 ] . The intuitive musical ability and the rational music ability are two kinds of abilities required for a music composer and we see them as one instance of yin and yang in music composition . Only when these two kinds of abilities are perfectly combined and well balanced are great pieces of music created . Furthermore , Hermann von Helmholtz , the German physician who is known for his theory on the Conserva - tion of Energy , said that “Mathematics and music ! The most glaring possible opposites of human thought ! and yet connected , mutually sustained ! ” [ 16 , 17 ] Albert Einstein is another example of someone who combined his intuitive and reasoning ability in his science research . He said , “the greatest scientists are artists as well . ” [ 18 ] 2 . 5 Software Development Unsurprisingly , examples of yin and yang also exist in software system development . Engineers and users consider software sys - tems from different perspectives . Engineers are more concerned with underlying technical details of the system , while users care about appearance and usage . Engineers prefer thinking about software design in technical concepts like classes , attributes and Figure 1 . The yin and yang in the Taiji diagram 92 methods . However , this convention may pose a challenge for the communication with and among users , especially in user - centered system development , where active user involvement is strongly recommended . Users typically focus more on what the software offers and how to use it – these would be better described in more concrete representations like use cases and scenarios . In this paper , we adopt the four - model categorization from [ 19 ] ( see Table 1 ) , and identify the user model as the yin and system model as the yang . Below , we analyze the user model and system model based on the yin - yang principle . We begin with the analysis of the static properties from the “two modes” perspective and then proceed to the dynamic properties in terms of the “four forms” . User Model and System Model are opposite but complementary to each other During software development , engineers communicate among themselves by means of the system model and users communicate with the engineers based on their user models ( usually informally or semi - formally represented in , for example , scenarios ) . System models are formal or semi - formal representations of various aspects of the system implementation . For example , UML defines the notation and semantics for a semi - formal description of the software design ( e . g . class diagrams for the static class structure and interaction diagrams for the dynamic system behavior ) . As UML has been widely adopted among engineers , such a conven - tion provides an effective tool for communication within the development team [ 20 ] . Engineers with a correct understanding of the diagrams are supposed to be able to create corresponding source code from these diagrams . The user model reflects how the future system will look like from the user’s point of view . For example , scenarios are commonly used as the representation of the user model . Just like software engineers “focus at any one time on only the relevant details and ignor ( e ) everything else” [ 20 ] , scenarios enable the users and software engineers to focus on the user - visible aspects of the system and postpone considera - tion of the underlying technical details . We argue that the user model and system model are the yin and yang in user - centered software development . The user model , which reflects the user’s expectation and understanding of the system , is the yin and the system model , which describes the underlying implementation of the target system , is the yang ( see Figure 3 ) . The user model and the system model are opposite 1 In real - world situations , there may be user models from different users that are inconsistent with each other . This is the representative users issue and beyond the scope of this paper . Figure 2 . Four models in software development Table 1 . Four models in software development There is a four - model categorization in software development in terms of different focus : user model , design model , system model and interface model ( see Figure 2 ) [ 19 ] . The user model and design model , which come from Norman and Draper [ 21 , 22 ] , are mental models held by the user and designer re - spectively . The system model and interface model are models that describe how the system works internally . (cid:1) System Model . The engineer concentrates on the system model , which describes the underlying structure and behav - ior of the system implementation . Modeling allows us to fo - cus only on the interesting aspects of a complex system and ignore the irrelevant details [ 20 ] . The system model provides an abstraction of the implementation and is used as a con - vention for communication among the engineers . (cid:1) Design Model . The designer’s mental model of how the user will use the system is called design model . Note that the design model used here should be distinguished from the design model used in object - oriented design . As the user on - ly cares about the user interface of the system , the design model is mainly about the interface and interaction between the system and the end user . However , the design model on - ly represents the designer’s idea about the system and may not be fully identical to the user’s ( although it should be , in an ideal situation ) . (cid:1) User Model . The user’s mental model of how the system will work from the usage perspective is called user model . It should be noted that the user model is not formed directly from the design model [ 21 , 22 ] ; instead , according to Nor - man , the user model is formed and continually refined through contact with the system image ( either in the form of a working system or a set of documentation about the sys - tem , which is presented by the designer ) as well as from the user’s prior knowledge and expectations [ 21 , 22 ] . (cid:1) Interface Model . To emphasize the components of imple - mentation that are relevant to the end - user , the interface model is distinguished from the system model . The system model , in a broad sense , comprises user interface compo - nents and , in a narrow sense , contains only the underlying components that are invisible to the end - user ( Note that we jump between these two meanings in this paper when the word system model is used ) . However , the interface model hides the underlying details that are invisible to the user and is only about the user - visible aspects of the system . We believe that a good software system is one whose design models are consistent with the user models 1 and are faithfully implemented by the system as well as the interface models . user model system model Figure 3 . The yin and yang “modes” in software development 93 because one of them is concerned with the internal , user - invisible aspects of the system and the other with the external , user - visible aspects . They are also complementary to each other , because , just like motorcycling , the internal mechanics and external experience form a comprehensive view of the complete software system . User Model and System Model depend on and transform into each other constantly The system model depends on the user model in that the system model is not created in a vacuum ; instead , it is grounded in the user’s expectation of the functionality and behavior of the system . Although the software system is technically defined by means of abstract concepts from the solution domain ( e . g . class , object , attribute , operation in terms of a static class structure , and initial state , final state , transition in terms of dynamic behavior ) , the “operational semantics” of the software system should satisfy the user’s requirements . On the other hand , with the development of a software system , user needs reflected in the user model will final - ly be translated to implementation , which is represented by the system model . This describes how the user model transforms into the system model . Before proceeding to explain how the system model trans - forms into the user model , it is necessary to first present our viewpoints on change and the software lifecycle . Change is a common phenomenon in software development and is considered as constant and inevitable . We recognize that change in general will come earlier or later and cannot be totally avoided . However , while we do observe certain kind of changes that cannot be elimi - nated , but could be made to happen earlier . Based on this observa - tion , we distinguish between two categories of changes : extrinsic changes and intrinsic changes ( see Table 2 ) . It is hard to make intrinsic changes arrive ahead of “schedule” . For example , the user normally has to wait until a working system is provided . Only then could he or she build her personal user model of the system and give further feedback ( which usually means subse - quent changes ) . It is common that the user , after having tried out the first version of the implementation ( incipient yang ) , proposes some new ( usually more specific and complex ) requirements ( climaxing yin ) for the next version . As a result , the end of the first release is in a sense where the requirements engineering of the next version begins . In other words , the system model facili - tates the refinement of the user model and the user model again promotes the improvement of the system model . This dynamic process of how user model and system model depend on and transform into each other during software development is re - flected in Figure 4 . 3 . Scenario Videos in Software Development 3 . 1 Use of Scenarios in Software Development We have stated that the yin - yang principle is a universal rule that exists everywhere , including music composition , motorcycling and software development and we have analyzed one instance of yin and yang in software development : the system model and the user model . In this section , we propose using scenarios as a repre - sentation of the user model and that equal attention is given to system implementation as well as scenario development during software development . Scenarios are intuitive and suitable for representing user models Scenarios have been widely used in areas including requirements engineering , user experience design and strategic management [ 25 ] . Rolland et al . categorize all the approaches that “use exam - ples , scenes , narrative description of contexts , mock - ups and prototypes” as scenario - based approaches because all these ap - proaches “emphasize some description of the real world” [ 26 ] . In the field of usability engineering , Nielsen considers scenarios as “an especially cheap kind of prototype” that supports only limited features on the user - interface level [ 27 ] . In requirements engineer - ing , scenarios describe how the user interacts with the system in the context from the user’s perspective . In our opinion , three essential properties of scenarios are : 1 ) focus on the interaction ; 2 ) consider the context of use ; 3 ) tell it from the user’s point of view . Although the system model provides a formal or semi - formal description of the system implementation , which the engineers can translate into source code , the ultimate goal of software de - velopment is by no means just to release the software ; the real goal is to satisfy the user’s needs ! In this sense , using system models as the mapping of user’s needs into the solution domain may be good for communication among engineers but not perfect at all suited for communication with users . In contrast , scenarios , which describe why the new system is needed and how it can be used by the end - user , are suitable for communication with stake - holders without strong technical background . By communicating Table 2 . Extrinsic changes and intrinsic changes Extrinsic changes usually occur due to reasons like insuffi - cient communication , inaccurate requirement specification , inappropriate or late handling of user feedback . These changes result from faults or inappropriate management . We argue that extrinsic changes could be avoided or made to occur earlier rather than later through proactive management ( e . g . continu - ous user involvement ) . Intrinsic changes on the other hand are more uncontrollable because they happen over time with the evolution of the user’s accumulated experience and cognitive familiarity with the system and / or the advancement of technology and social envi - ronment . These changes have their own inherent “half - life period” . For example , the user cannot come up with further feedback on the system before having formed his personal user model by interacting with the working system sufficient - ly . This is called the IKIWISI ( I’ll know it when I see it ) issue [ 23 , 24 ] , which is well - known in requirements engineering . Figure 4 . User Model and System Model in terms of “four forms” 94 via scenarios , it is easier for the user to understand the complex and abstract concepts in the system design . As Rolland et al . point out , “people react to ' real things ' and ( … ) this helps in clarifying requirements . ” [ 26 ] Scenarios are cost - efficient and enable quick iterations Needless to say , a functional system would be ideal for the user to construct a user model in his mind . However , in a changing envi - ronment ( as is nearly always the case ) , the design of the system usually takes several revisions to reach a “stable” state . Conse - quently , it could be costly if a functional system was developed for communication and validation during each iteration . Compared to a functional system , scenarios are easier to create and more understandable for the user . Although scenarios , as a kind of “cheap prototyping” , are not as high fidelity as a function - al system , they provide an ideal compromise for cost - efficient communication and validation during each iteration . Scenarios represent the user’s requirements and expectations of the system in a sense . By constructing scenarios and validating them with the user , the engineer may improve his understanding of the user needs and update the design ideas based on feedback from the user . In addition , by using scenarios for validation purposes , multi - ple rounds of short iterations become feasible . As previously mentioned , the user requirements are volatile during software development ; therefore it is often too late to collect feedback from the user after the delivery of a functional system . Hence , in order to make sure that the engineer is building the right system for the user , it is important to do multiple quick iterations during devel - opment to keep the user model and design model consistent and up - to - date . As Nielsen states , “scenarios are a way of getting quick and frequent feedback from users” [ 27 ] . This viewpoint is also resonated by Jarke et al . who “look at scenarios as enablers of change” and have done an in - depth study into the use of sce - narios in different disciplines [ 25 ] . Scenarios are open - ended and stimulate imagination Apart from the economic factor , scenarios , unlike a rigorously specified system model , are open - ended and stimulate the user’s imagination and thus enable the user to come up with more specific requirements and help “the analysts to consider contin - gencies they might otherwise overlook” [ 28 ] . 3 . 2 Why Video - based Scenarios ? In practice , scenarios have been largely represented in textual description . In this paper we recommend using video to describe scenarios . Compared to textual scenario descriptions , video - based scenarios have the advantages of lucidity and intuitiveness [ 29 , 41 ] . Mackay et al . have recognized that “video artifacts help bridge the gap between abstraction and detail in the design process” and enhances communication among the team members [ 30 ] . Of course , there are also other benefits of using video - based scenari - os , which will be mentioned in later sections of this paper . 3 . 3 From Scenario of Pixels to Scenario of Bytes In software development activities , video can be used for both requirements elicitation and requirements validation [ 32 ] . In this paper we adopt the Tornado model [ 19 ] and propose using video for four kinds of scenarios during software development . (cid:1) As - is scenario for problem statement . The as - is scenario describes how users currently perform their daily tasks before introducing the new system . As - is scenario videos provide a faithful record of how the user actually works , which facili - tates the analysis of what problems exist in the current setting and the identification of where an opportunity for a new sys - tem lies [ 33 ] . (cid:1) Visionary scenario for requirements elicitation . The vision - ary scenario represents the design ideas of a new system and is used during requirements elicitation . As change arises spon - taneously in the requirements elicitation phase , visionary sce - narios often require several rounds of iterations before reach - ing a “stable” version . Agreement should be reached on the vi - sionary scenarios before proceeding to the design and devel - opment phase . Visionary scenario videos provide a reasonable compromise between the costs of building a fully - fledged working system and the fidelity of the representation of the design idea . In order to create the visionary scenario video , some filming techniques could be used as treatment for the under - development part of the system . Some of the techniques , like green screen technology have been reported in [ 34 ] . Other techniques like mock - up , prototyping [ 35 ] , storytelling [ 36 ] etc . could also be applied in this context . However , for cost - efficiency and flexibility reasons , coding efforts are intention - ally kept as minimal as possible in this phase . (cid:1) Design scenario for requirement specification . Design sce - narios are further refined visionary scenarios that are finally considered for implementation , because typically not all the visionary scenarios are realizable in the real world system [ 19 ] . (cid:1) Demo scenario for system demonstration . Demo scenarios are used during the customer acceptance test . The demo sce - nario can be considered as an answer to the as - is scenario , de - scribing how the existing problems are resolved by introduc - ing the newly developed system . Demo scenario videos provide a visual demonstration of how the problem can be re - solved by using the developed system . Unlike visionary or de - sign scenario videos that are mostly made up of mock - ups ( al - beit there can be a small amount of executable code ) , demo scenario videos record how the user interacts with the imple - mented system in a real world situation . We call the visionary or design scenario video scenario of pix - els and the demo scenario video scenario of bytes . Therefore , the process of scenario video - based software development can be summarized as from scenario of pixels to scenario of bytes . In Figure 5 , we can see that at the beginning of the project , there are only ideas represented in mock - ups or prototypes ; scenario videos made of these artifacts are scenarios of pixels . With the progress Figure 5 . From scenario of pixels to scenario of bytes 95 of the software project , more and more design ideas are refined and implemented in source code , some parts of the system will then be available for the user to try out , hence the mock - ups and prototypes will be gradually replaced by the working system . Scenario videos made of the working system in the real world are scenarios of bytes . 3 . 4 Development Activities and Communication Activities There are different kinds of activities during software develop - ment . In this paper we distinguish between two kinds of activities : development activities and communication activities . Develop - ment activities refer to activities that are relevant to building the system ( including planning , requirements engineering , coding , testing etc . ) and are primarily done by engineers . Communication activities are about information exchange and happen at the same time as development activities ; they are important during user involvement . In addition to development activities , video is also a useful medium during communication . Videos provide a record of how user involvement actually happened and what the stakeholders communicated . It not only provides the evidence and rationale for the current team to make subsequent decisions , but it offers neces - sary information for new team members to learn and understand the context and technical background . It is an important and help - ful complement especially for agile projects , which advocate “working software over comprehensive documentation” [ 31 ] . 4 . The Use of Video - based Scenarios in a Real World Project 4 . 1 The iPraktikum 2012 The iPraktikum 2012 [ 37 ] was a project course at the department of computer science at Technische Universität München . The objective of this project course was to develop real systems to solve real problems by a real deadline for real customers . It was a multiple - project course with 80 students and 11 projects . To manage the course , a process model called Tornado model [ 19 ] was adopted . The Tornado model highlights the importance of the informal model ( which focuses on communication issues among stakeholders ) in addition to the formal model ( which focuses on object - oriented analysis and design ) [ 19 ] . This is aligned with our idea of yin - yang balance in software development . Besides , the Tornado model also proposes the use of scenarios for solving communication issues . 4 . 2 The Challenges We have identified some challenges in this project . First , there were 80 students who were in different university semesters , came from different countries and had different technical backgrounds ( most of them majored in computer science and electronic engi - neering , but we also accepted students from physics , mechanical engineering and medicine etc . ) . This posed a challenge for com - munication in the project . In software engineering , communica - tion issues usually exist between engineers and end - users . How - ever , with the cultural and technical diversity among the team members , communication issues emerge within the development team , too . Second , there were 11 projects , which meant 11 cus - tomers and 11 teams , and they were supposed to solve real prob - lems by a real deadline in parallel . These teams were managed by 11 different coaches and 2 instructors at the same time ( see Figure 6 ) . With so many stakeholders involved and given the time pres - sure , there was an imperative need for efficient and effective communication . 4 . 3 The Process Model An idealized process model , where no change happens after re - quirements elicitation , is apparently not well suited for a project course . To embrace changes , the Tornado model was adopted , which is a hybrid of the Unified Process [ 38 ] and agile methods [ 21 ] ( See Figure 7 ) . According to the Tornado model , a project begins with the Predevelopment Phase , where problems to be solved are identified . What follows is the Development Phase , which involves several Sprints . Some important activities in the first sprint include the Kick - off and Icebreaker ( a team building exercise ) . The Design Review happens during each sprint and the project is concluded with the Customer Acceptance Test . For more detail about the process model please refer to [ 19 ] . Here , we only focus on the role of video in the project process . Figure 6 . Organization chart of the iPraktikum project Figure 7 . The lifecycle model [ 19 ] 96 4 . 4 The Role of Video Problem statement We have used video techniques extensively throughout the lifecy - cle of the project . During the Predevelopment Phase , a video about the as - is scenario was created to describe how the user did daily tasks before the introduction of the new system and to show the problems to be solved in this context . This as - is scenario video was used both as an input for the subsequent requirements elicitation and as the reference for validation . The as - is scenario video could also be used as part of the marketing trailer to show the customer intuitively what the application domain is and what problems are going to be addressed . Project context “Software engineering is a rationale - driven activity . When ac - quiring knowledge and making decisions about the system or its application domain , software engineers also need to capture the context in which decisions were made and the rationale behind these decisions” [ 20 ] . As previously mentioned , in addition to the software development activities , video is also useful for commu - nication activities . As the project context is important for software development , we highlight the role of video recordings of com - munication activities . In the early Development Phase , the kick - off event was recorded as video and shared with all stakeholders . This kick - off event video provided useful context information about the project . This was a crucial complementary artifact in agile prac - tice , because it could , to some extent , make up for the lack of technical documents . One of the concerns Sommerville has about agile development is how to rebuild the knowledge about the ongoing project once the continuity of the development team is broken [ 39 ] . We argue that video clips of communication activi - ties fill this gap because they provide original evidence of , for example , how major decisions were made as well as the rationale behind them . Team context After the kick - off event , the 80 students were allocated into 11 teams . Studies show that the team - building “phase” is crucial to better communication and collaboration among team - members [ 40 ] . To that end , a team - building exercise was intentionally placed prior to the start of development activities . The Icebreaker was one such kind of communication activity . During the ice - breaker , a fun mini - task was given to each team . Every team should accomplish this mini - task in the given time ( for example , 60 to 120 minutes ) through the cooperation of team members . The task can be , for example , making a paper airplane and trying to make it fly longer in the air , or making a parachute from ordinary office stationery that can protect an egg dropped from a height of two meters . At the end of the exercise , prizes were given to the most successful teams . During the icebreaker , the activities of each team were vide - otaped to record how they brainstormed , made decisions , and implemented the ‘project’ . The video was shared within the team and with the coach ( ‘project manager’ ) . This video provided the coach with an opportunity of taking stock of the team ( for exam - ple , communication efficiency and characteristics of each team members ) and applying specific strategies accordingly . Requirements elicitation After warming up with the icebreaker , the next technical task for the team was requirements elicitation . Each team analyzed the customer’s need and made a visionary scenario video reflecting their design ideas of the future system . The team might take the as - is scenario video as input and identify the problems and the user’s needs . Of course , the video was made based on mock - ups and prototypes , because no executable system was available at that moment . Although the fidelity of scenario videos is not as high as the one based on a real - world system , it is a cost - efficient representation of the target system . The main objective of this scenario of pixels was to show the basic ideas , which would be refined and validated in the later phase with a scenario of bytes . Sprint - level validation The Development Phase was made up of several iterations called sprints . Although change is inevitable in software projects , we can respond to it proactively . In agile software development , fast iteration and continuous customer involvement are highly empha - sized when responding to changes . Small and quick iterations facilitate early feedback and problem identification ; continuous customer involvement ensures that each iteration gets a step closer to the real goal . However , the executable code , on which part of the system validation relies , may not yet be available in a specific iteration . Then , video , as an alternative to the executable system , can be employed to show intuitively how the system will work and support the discussion among stakeholders . That is why a design scenario video fits the sprint - level validation . The design scenario video was created partially based on the executable system and partially based on the prototypes and mock - ups . We highlight validation in each sprint because it is supposed to mini - mize intrinsic and extrinsic changes ( see Table 2 ) before it is too late . Figure 8 is a design scenario video that was created for a trip app in the iPraktikum . Release - level validation The last stage is called Customer Acceptance Test ( CAT ) , which happens after the deadline of development . The development of each team was supposed to reach a milestone at this stage . It should be noted that there is actually no end to product develop - ment , because intrinsic changes are inevitable and you can only embrace and respond to them , which usually means proceeding 2 This video is also available online : http : / / youtu . be / OCCBWRp6Tv0 . Figure 8 . A design scenario video for a trip app ( click to play the video in the PDF document 2 ) 97 with a new version of the product . Therefore , the release of a software product does not mean the termination of the project ; instead , there is usually another round of development for the new version . Actually , every year after the conclusion of the project course , some projects continue toward productization with their customers . In the CAT meeting , every team , together with the coaches and course instructors , was present and each team gave a presentation illustrating the output of the project . The demo sce - nario video was presented at this occasion , too . Unlike the design scenario video , which was made of a mix of pixels and bytes , the demo scenario video was made fully of bytes . The as - is scenario video , which was used at the beginning of requirements elicitation , was presented together with the demo scenario video to provide some context about the project . As a summary , Table 3 illustrates each type of video used in the iPraktikum project as well as their associated activities and purposes . 4 . 5 Best practices For development activities , scenario videos can be created by the development team themselves ; for communication activities , videos are recorded by a dedicated film team . The film team should always work as a standalone team like an observer . For the demo scenario videos , we have additionally identified some best practices for students in order to create scenario videos effectively : (cid:1) Give some context about the application at the beginning of the video ( e . g . problem statement ) . (cid:1) Prepare well before setting off ( for example , storyboard and the video team should be ready for the shoot ) . (cid:1) Use appropriate audio and text to improve understandability of the scenario . (cid:1) Avoid a diary of events ( for example , a 15 - minute walk can be represented in 3 seconds of video ) . (cid:1) Training by the film team may be necessary ; especially the difference between a scenario video and a marketing trailer should be clear . 5 . Conclusion and Future Work In this paper we have reviewed instances of yin and yang from different disciplines . In particular , we illustrated one of the in - stances in user - centered software development . We identified the outward view of software systems ( i . e . user model ) as the yin and the inward view ( i . e . system model ) as the yang . We also analyzed how user model and system model depend on and transform into each other . Based on the yin - yang principle , we argued that equal attention should be given to the system model as well as the user model in user - centered software development . Particularly , we proposed the use of video - based scenarios as a representation of the user model and illustrated the use of scenario videos in a project course . The yin - yang principle is a powerful thinking tool and in this paper , we only discussed the yin and yang in software develop - ment at the level of “two modes” and “four forms” . In future work , we want to analyze it from a higher level , e . g . “eight tri - grams” , which should allow us to reveal more relationships and principles . Furthermore , a tool based on Xrave [ 33 ] that manages the scenario videos and maintains their relationship with the exe - cutable source code could be developed . Acknowledgments We gratefully acknowledge the financial support of Siemens and DAAD for funding this research . We would like to extend our special thanks to Prof . Dan Chiorean and two anonymous review - ers for reviewing this paper and giving valuable comments and suggestions . We also thank Anna Stockitt and Tina Schrier for their help with this paper . References [ 1 ] Grudin , J . A moving target : The evolution of human - computer interaction . The Human - Computer Interaction Handbook – Fundamentals , Evolving Technologies , and Emerging Applications , 2nd ed . Erlbaum , 1 - 24 . 2008 . [ 2 ] Carroll , J . M . Human - computer interaction : psychology as a science of design . Annual review of psychology . 48 , 61 – 83 . 1997 . [ 3 ] Costabile , M . Usability in the software life cycle . Handbook of software engineering and knowledge engineering . 2011 . [ 4 ] Norman , D . and Draper , S . eds . User centered system design ; new perspectives on human - computer interaction . 1986 . [ 5 ] Muller M J . Participatory design : the third space in HCI [ J ] . Human - computer interaction : Development process , 2003 : 1051 - 1068 . [ 6 ] Gulliksen J , Lantz A , Boivie I . User centered design in practice - problems and possibilities . Sweden : Royal Institute of Technology , 1999 . [ 7 ] Chan , W . T . A source book in Chinese philosophy . Princeton , NJ : Princeton University Press . 1963 . [ 8 ] Cleary , T . I Ching The Book of Change . Thomas Cleary . 1992 . [ 9 ] Fang , T . Yin Yang : A new perspective on culture . Management and organization Review , 8 ( 1 ) , 25 - 50 . 2012 . [ 10 ] Aveleira , J . Consciousness and Reality - A stable - dynamic model based on Jungian psychology . In The C . G . Jung Page , Don Williams . 2001 . [ 11 ] Patel - Schneider , P . , & Siméon , J . The Yin / Yang web : XML syntax and RDF semantics . In Proceedings of the 11th international confer - ence on World Wide Web ( pp . 443 - 453 ) . ACM . 2002 . [ 12 ] Munro , D . J . The concept of man in contemporary China ( Vol . 12 ) . Ann Arbor : University of Michigan Press . 1977 . [ 13 ] Pirsig , R . Zen and the art of motorcycle maintenance : An inquiry into values . New York , Bantam Books . 1974 . [ 14 ] Moore , B . R . The Relationship between Curriculum and Learner : Music Composition and Learning Style . Journal of Research in Mu - sic Education . 38 , 1 ( 1990 ) , 24 . [ 15 ] Dingwall , C . Rational and Intuitive Approaches to Music Composi - tion . 2008 . [ 16 ] Charlton , M . H . Helmholtz on Perception : Its Physiology and Devel - opment . Archives of Neurology , 19 ( 3 ) , 349 . 1968 . Table 3 . The role of video in the iPraktikum project Video Type Activity Purpose As - is scenario Development Problem statement Kick - off event Communication Project context Icebreaker Communication Team context Visionary scenario Development Requirements elicitation Design scenario Development Sprint - level validation Demo scenario Development Project - level validation 98 [ 17 ] Root - Bernstein , R . S . Music , creativity and scientific thinking . Leonardo , 34 ( 1 ) , 63 - 68 . 2001 . [ 18 ] Calaprice , A . The expanded quotable Einstein ( p . 126 ) . Princeton , NJ : Princeton University Press . 2000 . [ 19 ] Bruegge , B . , Krusche , S . and Wagner , M . Teaching Tornado : from communication models to releases . Proceedings of the 8th edition of the Educators’ Symposium . ( 2012 ) , 5 – 12 . [ 20 ] Bruegge , B . and Dutoit , A . Object - Oriented Software Engineering Using UML , Patterns , and Java ( 3rd Edition ) . Prentice Hall . 2010 . [ 21 ] Norman , D . and Draper , S . eds . User centered system design ; new perspectives on human - computer interaction . 1986 . [ 22 ] Norman , D . The Design of Everyday Things . Basic Books . 2002 . [ 23 ] Boehm , B . 2000 . Requirements that Handle IKIWISI , COTS , and Rapid Change . Computer . ( 2000 ) , 99 – 102 . [ 24 ] Cao , L . et al . Agile Requirements Engineering Practices : An Empiri - cal Study . IEEE Software . 2008 . [ 25 ] Jarke , M . , Bui , X . T . and Carroll , J . M . Scenario Management : An Interdisciplinary Approach . Requirements Engineering . 3 , 3 - 4 . Mar . 1998 . [ 26 ] Rolland , C . et al . A Proposal for a Scenario Classification Frame - work . Requirements Engineering . 3 , 23 – 47 . 1998 . [ 27 ] Nielsen , J . Usability Engineering . Morgan Kaufmann . 1993 . [ 28 ] Carroll , J . Making Use : Scenario - based design of human - computer interactions . The MIT Press . 2000 . [ 29 ] Xu , H . , Creighton , O . , Boulila , N . and Bruegge , B . From pixels to bytes : evolutionary scenario based design with video . Proceedings of the ACM SIGSOFT 20th International Symposium on the Founda - tions of Software Engineering . 2012 . [ 30 ] Mackay , W . E . , Ratzer , A . V and Janecek , P . Video Artifacts for Design : Bridging the Gap Between Abstraction and Detail . ( 1992 ) , 72 – 82 . [ 31 ] Beck , Kent , et al . " Manifesto for agile software development . " The Agile Alliance ( 2001 ) : 2002 - 04 . [ 32 ] Brill , O . , Schneider , K . and Knauss , E . Videos vs . Use Cases : Can Videos Capture More Requirements under Time Pressure ? ( 2010 ) , 30 – 44 . [ 33 ] Creighton , O . Software Cinema : Employing Digital Video in Re - quirements Engineering . PhD Thesis . Technische Universität Mün - chen . Germany . 2005 . [ 34 ] Bruegge , B . , Stangl , H . and Reiss , M . An experiment in teaching innovation in software engineering . Companion to the 23rd ACM SIGPLAN conference on Object oriented programming systems lan - guages and applications - OOPSLA Companion ’08 . ( 2008 ) , 807 . [ 35 ] Mackay , W . E . , Munkegade , N . and Fayard , A . Video Brainstorming and Prototyping : Techniques for Participatory Design . 118 – 119 . 1999 . [ 36 ] Boulila , N . , Hoffmann , A . and Herrmann , A . 2011 . Using Story - telling to record requirements : Elements for an effective require - ments elicitation approach . 2011 Fourth International Workshop on Multimedia and Enjoyable Requirements Engineering ( MERE’11 ) . ( Aug . 2011 ) , 9 – 16 . [ 37 ] Chair for Applied Software Engineering , Technische Universität München . Praktikum 2012 . http : / / www1 . in . tum . de / static / lehrstuhl _ 1 / projects / 451 - ios - praktikum - 2012 . [ 38 ] Kruchten , P . The Rational Unified Process : an Introduction . Addi - son - Wesley Professional . 2004 . [ 39 ] Sommerville , I . Software Engineering ( 9th Edition ) . Addison - Wesley . 2010 . [ 40 ] Ellis , J . B . , Luther , K . , Bessiere , K . , & Kellogg , W . A . Games for virtual team building . In Proceedings of the 7th ACM conference on Designing interactive systems ( pp . 295 - 304 ) . ACM . 2008 . [ 41 ] Creighton , O . , Ott , M . and Bruegge , B . Software Cinema - Video - based Requirements Engineering . 14th IEEE International Require - ments Engineering Conference ( RE’06 ) . ( Sep . 2006 ) , 109 – 118 . [ 42 ] Chok , M . K . Chinese leadership wisdom from the Book of Change . Chinese University Press . 2006 . 99