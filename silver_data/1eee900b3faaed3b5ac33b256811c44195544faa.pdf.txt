Extended and discretized formulations for the maximum clique problem Pedro Martins (cid:2) CIO - Centro de Investigac - ~ ao Operacional - FC / UL and ISCAC - Instituto Polite´cnico de Coimbra , Portugal a r t i c l e i n f o Available online 29 October 2009 Keywords : Maximum clique problem Extended formulations Discretized formulations a b s t r a c t The maximum clique ( MC ) problem has long been concentrating the attention of many researchers within the combinatorial optimization community . Most formulations proposed in the literature for the MC problem were adapted from the maximum independent set ( MIS ) problem , which is known to be equivalent to the MC . In fact , independent sets can be easily modelled within the natural variables space . In the present paper we propose new formulations for the MC problem , using additional and extra indexed variables , leading to extended and discretized formulations . The number of variables and constraints of the new models depend on the range of variation of an interval containing the clique number ( o ) of the graph . Therefore , tight lower and upper bounds for o may strongly beneﬁt the dimension of the new models . Computational results have been conducted on some DIMACS benchmark and biological instances . These results indicate that , among sparse graphs , the linear programming relaxation of the discretized formulations may produce stronger upper bounds than the known models , being faster to ﬁnd an optimum clique when embedded into the branch - and - bound . Furthermore , the new models can be used to address other related problems , namely to ﬁnd a maximum size k - plex , or a maximum size component involving two overlapping cliques . & 2009 Elsevier Ltd . All rights reserved . 1 . Introduction Let G ¼ ð V ; E Þ be a simple undirected graph , where V ¼ f 1 ; . . . ; n g is the set of vertices and E the set of edges . A clique of G is a subset C D V such that ð i ; j Þ A E for all i ; j A C . In the maximum clique ( MC ) problem we want to ﬁnd a maximum cardinality clique among all cliques in G . If we are simply interested in the size of the maximum clique , then we only want to know the clique number of G , denoted by o ð G Þ . An independent set of G is a subset C D V such that ð i ; j Þ = 2 E for all i ; j A C . The maximum independent set ( MIS ) problem seeks for an independent set of maximum cardinality . It is well known that a clique of G is an independent set on the complementary graph G ¼ ð V ; E Þ , where E ¼ fð i ; j Þ A V (cid:2) V : i a j and ð i ; j Þ = 2 E g . Then , there is an equivalence relationship among both MC and MIS problems , in the sense that solving one of them is equivalent to solve the other one in the complementary graph . Karp [ 24 ] showed in 1972 that the decision version of the MC problem is NP (cid:3) complete . Furthermore , there is no polynomial - time approximation algorithm for it , unless P ¼ NP [ 12 ] . In fact , the problem is not approximable within n 1 = 4 (cid:3) e , for any e 4 0 [ 4 ] . There is quite a number of applications involving maximum cliques . In some of them , to ﬁnd a maximum clique is just a subproblem of a wider system , as is most common in real applications . These arise in coding theory , fault detection and diagnosis , computer vision and pattern recognition , data mining , telecommunications and wireless networks , as suggested in [ 5 , 7 , 11 , 22 , 25 ] . Also in biological systems , like spot matching for two - dimensional gel electrophoresis images , protein structure alignment and protein side - chain packing , as suggested in [ 1 , 9 , 17 , 32 ] . Furthermore , the detection of functional modules in molecular networks were studied in [ 31 ] , and the identiﬁcation of strongly related groups of proteins have been seek within protein – protein interaction networks in [ 16 ] . In [ 8 ] the authors showed how clique detection procedures can help in other biochemistry and genomic problems . Since 1949 , when Luce and Perry [ 26 ] have ﬁrst introduced the concept of cliques , a lot of work has been done on it . In a broad sense and considering the attempts to ﬁnd maximum cliques , we may divide these works into , bounding , exact and heuristic methodologies . Up to 1999 , most of these contributions have been described in the extended survey of Bomze et al . [ 7 ] . After 1999 , bounding properties and methods have been proposed in [ 13 , 29 ] on improvements of the Lova´sz – Schrijver bound for o ð G Þ . Also in [ 27 , 10 ] proposing a quadratic characterization and a heuristic method to approximate the Lova´sz theta number , and in [ 18 ] proposing a sequential elimination algorithm that is guaranteed ARTICLE IN PRESS Contents lists available at ScienceDirect journal homepage : www . elsevier . com / locate / caor Computers & Operations Research 0305 - 0548 / $ - see front matter & 2009 Elsevier Ltd . All rights reserved . doi : 10 . 1016 / j . cor . 2009 . 10 . 010 (cid:2) Tel . : + 351239802000 . E - mail address : pmartins @ iscac . pt Computers & Operations Research 37 ( 2010 ) 1348 – 1358 ARTICLE IN PRESS to improve upon a given upper bound . In [ 18 ] , the authors also use their methodology to improve given lower bounds . Still after 1999 , exact enumerative algorithms have been described in [ 28 , 15 , 30 , 33 ] . Heuristic methods have also been proposed in many works , some of them applying known heuristic and metaheuristic techniques adapted to the MC problem . Among those published after 1999 , we detach the work of Battiti and Protasi [ 3 ] ( also mentioned in [ 7 ] ) that use memory to adjust the algorithm parameters . Outstanding heuristic results , both in terms of effectiveness and computing times , can also be found in [ 20 , 21 ] . Although following different metaheuristic ideas , all these three works are based or include local search techniques . Known formulations for the MC problem resort to modelling aspects of the MIS problem . As mentioned above , we can model cliques by modelling independent sets on the complementary graph . In the present paper we propose new formulations directly describing cliques on the original graph G . To do it , we resort to additional variables and extra indexes on the original vertex variables , conducting to extended and discretized formulations . The new models’ number of variables and constraints is inﬂuenced by the range of variation of an interval containing o ð G Þ , claiming for tight bounds to those intervals . Furthermore , even if we could possibly know in advance the value of o ð G Þ , conducting to the tightest interval of all , the problem would still be hard to solve , if our goal is to ﬁnd an associated subset of vertices . For very sparse graphs , the new models revealed to be very competitive even without prior bounds for o ð G Þ . This paper is organized as follows . Known and new formula - tions to the MC problem are presented in the next section . It also includes ideas for strengthening the LP relaxation of these models . Furthermore , we show how to adapt these formulations to address other clique related problems . Computational tests comparing the models and using DIMACS and biological instances are given in Section 3 . Last section is devoted to concluding remarks . 2 . Formulations Within this and the forthcoming sections , for a given integer programming formulation F , we denote by F L its linear program - ming ( LP ) relaxation . 2 . 1 . Known formulations Most known formulations for the MC problem are natural models in the sense that they simply use one variable for each vertex , indicating whether it belongs to the solution or not , that is , the binary variables x i for all i A V , taking value 1 if vertex i is in the solution and 0 otherwise . Thus , in general terms , the MC problem can be formulated as maximize X i A V x i ð 1 Þ subject to x A f all cliques of G g ð 2 Þ x i A f 0 ; 1 g ; 8 i A V ð 3 Þ for x ¼ f x 1 ; x 2 ; . . . ; x n g . We can ﬁnd in the literature a number of ways to characterize constraints ( 2 ) . Two long known characterizations are ( see , e . g . [ 19 ] ) : (cid:4) the Edge Formulation ( here denoted by EdgeF ) that force the independent set property in the complementary graph G , imposing that for any pair ð i ; j Þ A E , only one of the vertices i or j may belong to the clique , that is x i þ x j r 1 ; 8ð i ; j Þ A E ð 4 Þ (cid:4) the Independent Set Formulation ( here denoted by ISF ) that imposes that any clique of G can contain no more than a single vertex from any maximal independent set of G , where the set of all maximal independent sets of G is represented by S , thus X i A s x i r 1 ; 8 s A S ð 5 Þ More recently , Della Croce and Tadei [ 14 ] proposed an aggregated version of formulation EdgeF , leading to the following characterization of set ( 2 ) : X j A N ð i Þ x j r j N ð i Þjð 1 (cid:3) x i Þ ; 8 i A V ð 6 Þ for N ð i Þ ¼ V \ ð N ð i Þ [ f i gÞ , the set of vertices not adjacent to vertex i . In fact , if we sum in j all constraints ( 4 ) we obtain constraints ( 6 ) , for each i A V . This means that inequalities ( 4 ) imply inequalities ( 6 ) . This formulation is here denoted by AEdgeF . Furthermore , it can also be shown that all constraints ( 4 ) are implied by inequalities in ( 5 ) . 2 . 2 . New formulations All the models previously described arise from independent set characterizations on the complementary graph , or use indepen - dent sets explicitly to characterize cliques . To our best knowledge , we have not found any formal characterization of cliques on G using only the natural set of variables x i and having polynomial dimension . In fact , we believe that such a formulation may not exist as it would possibly require an exponential number of constraints . However , if we resort to extra variables or extra index information on the original set of vertex variables , then we can obtain compact characterizations of cliques on G . The present section is devoted to such models . We start by deﬁning the extra set of clique variables : w q ¼ 1 if the clique size is equal to q ; 0 otherwise ; ( 8 q A Q with Q ¼ f q min ; . . . ; q max g . In the worst case we can have q min ¼ 1 and q max ¼ n , assuming G to be a simple graph of any kind , including the empty graph ( with E ¼ | ) and the complete graph ( with E ¼ fð i ; j Þ A V (cid:2) V : i a j g ) . However , a preliminary study of the graph in hands can reduce the range of variation of Q , namely by using known methods in the literature on bounds for o ð G Þ . From this point on , we assume that G is not an empty graph ( j E j Z 1 ) , which implies that q min Z 2 . Considering the extra clique variables previously described , we propose the following Extended Formulation ( EF ) for the MC problem : maximize X i A V x i subject to X j A N ð i Þ x j Z ð q (cid:3) 1 Þ x i (cid:3) ð q (cid:3) 2 Þð 1 (cid:3) w q Þ ; 8 i A V ; 8 q A Q ð 7 Þ ð EF Þ X i A V x i ¼ X q A Q qw q ð 8 Þ P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1349 ARTICLE IN PRESS X q A Q w q ¼ 1 ð 9 Þ x i A f 0 ; 1 g ; 8 i A V w q A f 0 ; 1 g ; 8 q A Q ð 10 Þ For the single clique size q determined , imposed by ( 9 ) and ( 10 ) , inequalities ( 7 ) , ( 8 ) and ( 3 ) force that each of the q vertices belonging to the clique must have at least ð q (cid:3) 1 Þ neighbors in the clique . Thus , the vertices in the clique induce a complete subgraph of G . Furthermore , if the clique has size other than q ( w q ¼ 0 ) , then inequalities ( 7 ) are redundant , provided that G is connected . Inequalities ( 7 ) can be further strengthen if the clique size information is brought into the vertices variables , conducting to the following discretized variables : x qi ¼ 1 if vertice i is in a clique of size q ; 0 otherwise ; ( 8 i A V ; 8 q A Q Both vertex variables are related by equality x i ¼ X q A Q x qi ; 8 i A V ð 11 Þ Using these variables we can write an improved version of constraints ( 7 ) , X j A N ð i Þ x qj Z ð q (cid:3) 1 Þ x qi ; 8 i A V ; 8 q A Q ð 12 Þ and also to disaggregate Eq . ( 8 ) , in the form X i A V x qi ¼ qw q ; 8 q A Q ð 13 Þ Thus , we propose the following Discretized Formulation ( DF ) for the MC problem : maximize X i A V X q A Q x qi ð 14 Þ ð DF Þ subject to ð 12 Þ ; ð 13 Þ ; ð 9 Þ ; ð 10 Þ x qi A f 0 ; 1 g ; 8 i A V ; 8 q A Q ð 15 Þ As in model EF , any integer solution of the discretized formulation forces the selection of a single dimension for the clique size , guaranteed by ( 9 ) and ( 10 ) . Furthermore , the vertices belonging to that clique must induce a complete subgraph of G ( imposed by ( 12 ) ) . Equalities ( 13 ) link the two sets of variables . Both models have nearly the same number of constraints . However , DF has much more variables than EF , specially when j Q j is large . In fact , without any reductions , the LP relaxation of DF can be hard to handle for large values of j Q j . Thus , we suggest another version of DF that decreases its number of constraints by aggregating in q inequalities ( 12 ) , leading to X q A Q X j A N ð i Þ x qj Z X q A Q ð q (cid:3) 1 Þ x qi ; 8 i A V ð 16 Þ The new Aggregated Discretized Formulation ( ADF ) can be obtained from DF , substituting ( 12 ) by ( 16 ) . The set of constraints in ADF still characterize all cliques of size q A Q in G , because constraints ( 8 ) – ( 10 ) guarantee that a single clique size q is going to be chosen . The number of variables and constraints in all polynomial sized models discussed in the present section is summarized in Table 1 . When j Q j is large , the new discretized models DF and ADF have many more variables than the others . On the other hand , models EF and DF may also have many more constraints than the aggregated formulations AEdgeF and ADF , again , for large values of j Q j . However , model EdgeF may be the largest one on the number of constraints if graph G is sparse . Furthermore , when G is sparse , inequalities ( 6 ) from AEdgeF are denser than inequalities ( 7 ) from EF and ( 12 ) from DF . On the contrary , when G is dense , constraints ( 7 ) and ( 12 ) are denser than ( 6 ) . In fact , the size of set Q can signiﬁcantly increase the dimension of the new discretized models . However , that size can be much reduced if we resort to known results on bounding methodologies for o ð G Þ , in the literature . Actually , there is quite some work done on it , providing outstanding practical results that may consider - ably help our formulations ( see , e . g . [ 18 , 10 ] ) . For some instances , those methods have been able to ﬁnd the exact value of o ð G Þ . In those cases , it closes the discussion for the identiﬁcation of o ð G Þ , but it does not provide a clique set of vertices S with j S j ¼ o ð G Þ . Moreover , even if o ð G Þ is known in advance , there is no polynomial time algorithm to solve problem MC , otherwise we would have a polynomial time algorithm to solve the general MC problem , something known not to be truth , unless P ¼ NP . In effect , when o ð G Þ is given in advance , leading to j Q j ¼ 1 , then all formulations here proposed can be reduced to the feasibility problem f x q A f 0 ; 1 g n : ( 12 ) and P i A V x qi ¼ q g , with q ¼ o ð G Þ . This model can be projected onto the f x i g variables space , becoming ( x A f 0 ; 1 g n : X j A N ð i Þ x j Z ð q (cid:3) 1 Þ x i ; 8 i A V and X i A V x i ¼ q ) ð 17 Þ It has the same number of variables and almost the same number of constraints as AEdgeF , which is known to be the smallest formulation for the MC problem . 2 . 3 . Strengthening the models In order to strengthen the linear programming relaxation of the models , we propose two tests . The ﬁrst is a vertex elimination test , while the second one involves the identiﬁcation of pairs of vertices that can never belong to a size - q clique . This test induces the identiﬁcation of additional constraints to strengthen the LP relaxation of all these models . (cid:4) Test 1 : For any i A V and q A Q , if j N ð i Þj o q (cid:3) 1 , then variable x qi can be removed from models DF and ADF , as well as all constraints involving the pair ð i ; q Þ . Furthermore , for any i A V , if j N ð i Þj o q min (cid:3) 1 , then variable x i can be removed from models EdgeF , AEdgeF and EF , and also all constraints involving vertex i . (cid:4) Test 2 : For any pair i ; j A V for which ð i ; j Þ A E and j N ð i Þ \ N ð j Þj o q (cid:3) 2 , the following is a valid inequality P q max q ¼ q 0 x qi þ P q max q ¼ q 0 x qj r P q max q ¼ q 0 w q , for q 0 ¼ min f q A Q : j N ð i Þ \ N ð j Þj o q (cid:3) 2 g . This constraint can strengthen models DF L and ADF L . Further - more , for any pair i ; j A V with ð i ; j Þ A E , if j N ð i Þ \ N ð j Þj o q min (cid:3) 2 , then constraint x i þ x j r 1 should strengthen models EdgeF L , AEdgeF L and EF L . To understand Test 2 , we can state that for any pair i ; j A V with ð i ; j Þ A E and q A Q , if j N ð i Þ \ N ð j Þj o q (cid:3) 2 , then vertices i and j cannot belong to the same size - q clique , which can be guaranteed by the valid inequality x qi þ x qj r w q . As a single clique size is going Table 1 Number of variables and constraints in all models under discussion . Model Variables Constraints EdgeF n j E j AEdgeF n n EF n þj Q j n j Q jþ 2 DF ð n þ 1 Þj Q j ð n þ 1 Þj Q jþ 1 ADF ð n þ 1 Þj Q j n þj Q jþ 1 P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1350 ARTICLE IN PRESS to be chosen , then we consider an aggregated version of these constraints , obtained by summing in q all these inequalities for each pair f i ; j g , leading to P q max q ¼ q 0 x qi þ P q max q ¼ q 0 x qj r P q max q ¼ q 0 w q , for q 0 ¼ min f q A Q : j N ð i Þ \ N ð j Þj o q (cid:3) 2 g . Test 1 contributes to decrease the size of the models , while Test 2 generates a set of inequalities for strengthening their linear programming relaxation . These constraints take advantage of the clique size information provided in variables f x qi g , for q 4 2 . On the other hand , models deﬁned on the space of variables f x i g can only proﬁt from both Tests 1 and 2 whenever q min 4 2 . Note that when q min ¼ 2 , we are assuming to have no information on lower bounds for o ð G Þ , thus the maximum clique set can be as small as a set of two vertices . Furthermore , none of the constraints generated by Test 2 is included in the set ( 4 ) of model EdgeF . 2 . 4 . Maximum clique related problems As previously mentioned , there are a number of applications involving the determination of a maximum size clique . However , in some cases , to ﬁnd a maximum clique , or even maximal cliques , is just a subproblem of a larger system , while in other cases , more relaxed concepts of dense subgraphs rather than that of a clique can be more adequate . In this section we bring two such examples , to which the previously reported models can provide interesting answers . Maximum size component involving two overlapping cliques : Consider we want to ﬁnd the biggest component involving two cliques sharing a number of vertices within the range L ¼ f l min ; . . . ; l max g , that is , the two cliques must share at least l min and at most l max vertices , with l min Z 1 and l max r n . Such biggest component should involve two maximal cliques with minimum number of common vertices . When thinking on protein interac - tion networks , this problem is important to help discovering proteins that share different functional modules ( see [ 31 , 34 ] ) . These may constitute pleiotropic proteins that are involved in various cell functional activities . When l min is small , searching for components with maximum total size should lead us into inter - module complexes . Considering formulation DF , we duplicate the set of variables f x qi ; w q g into f x 1 ; q i ; w 1 ; q g and f x 2 ; q i ; w 2 ; q g with q A Q ¼ f l min ; . . . ; n g , regarding the two cliques , respectively . The new variables have the same meaning as before , concerning the correspondent clique . We also bring the initial set of natural vertex variables x i for i A V . Then , the problem can be modelled as ( denoted by OQF — Over - lapping Cliques Formulation ) maximize X i A V x i subject to X j A N ð i Þ x h ; q j Z ð q (cid:3) 1 Þ x h ; q i ; 8 i A V ; 8 q A Q ; h ¼ 1 ; 2 ð 18 Þ X i A V x h ; q i ¼ qw h ; q ; 8 q A Q ; h ¼ 1 ; 2 ð 19 Þ ð OQF Þ X q A Q ð w 1 ; q þ w 2 ; q Þ ¼ 2 ð 20 Þ X q A Q 1 = 2 ð x 1 ; q i þ x 2 ; q i Þ r x i r X q A Q ð x 1 ; q i þ x 2 ; q i Þ ; 8 i A V ð 21 Þ l min r X q A Q ð qw 1 ; q þ qw 2 ; q Þ (cid:3) X i A V x i r l max ð 22 Þ x i A f 0 ; 1 g ; 8 i A V x h ; q i A f 0 ; 1 g ; 8 i A V ; 8 q A Q ; h ¼ 1 ; 2 ð 23 Þ w h ; q A f 0 ; 1 g ; 8 q A Q ; h ¼ 1 ; 2 ð 24 Þ Constraints ( 18 ) , ( 19 ) , ( 23 ) and ( 24 ) are extensions of constraints ( 12 ) , ( 13 ) , ( 15 ) and ( 10 ) , respectively . Equality ( 20 ) extends ( 9 ) , searching for a pair of cliques . Inequalities ( 21 ) relate the two sets of vertex variables , letting variable x i identify a vertex in the global component if and only if it belongs to one of the cliques . The bounds for the total number of shared vertices is imposed by inequalities ( 22 ) . Note that the only reason for duplicating the set of q - indexed variables is because the two cliques may have the same size , otherwise we could have used the original variables from DF . The k - plex problem : The second problem involves the determi - nation of a maximum size k - plex . For a given integer k Z 1 , a subset of vertices S is a k - plex if the following condition holds : j N ð i Þ \ S j Z j S j (cid:3) k , for all i A S . That is , S is a k - plex if the degree of every vertex in the induced subgraph is at least j S j (cid:3) k . When k ¼ 1 this reduces to the clique problem . For k 4 1 the k - plex problem is a degree - based relaxation of the clique . An extensive number of applications of the k - plex and other clique relaxed problems are described in [ 2 ] . In many social and biological networks , to ﬁnd a clique component can be much restrictive , particularly when we are dealing with ephemeral or missing links ( edges ) being involved in important cohesive components . In some of those practical problem , cliques have been criticized for their overly restrictive nature , which has motivated the emergence of more relaxed concepts of dense subgraphs , namely k - plexes , among others . The decision version of the k - plex problem has been shown to be NP - complete in [ 2 ] . The authors also propose a formulation and describe a branch - and - cut based algorithm , using some polyhe - dral properties also discussed in the same paper . The formulation proposed in [ 2 ] is based on the characteriza - tion of k - plexes by the following set of inequalities : X j A N ð i Þ x j r ð k (cid:3) 1 Þ x i þj N ð i Þjð 1 (cid:3) x i Þ ; 8 i A V ð 25 Þ leading to model m k ð G Þ ¼ max ( X i A V x i : ð 25 Þ and x i A f 0 ; 1 g ; 8 i A V ) ð 26 Þ Formulation ( 26 ) can be seen as the k - plex version of model AEdgeF , previously described to the clique problem . Also based on other cliques characterizations here described , we can model k - plexes on the discretized and extended space of variables f x qi ; w q g , namely by substituting in model DF inequalities ( 12 ) by X j A N ð i Þ x qj Z ð q (cid:3) k Þ x qi ; 8 i A V ; 8 q A Q ð 27 Þ leading to model m k ð G Þ ¼ max ( X i A V X q A Q x qi : ð 27 Þ ; ð 13 Þ ; ð 9 Þ ; ð 10 Þ and x qi A f 0 ; 1 g ; 8 i A V ; 8 q A Q ) ð 28 Þ As before , set Q ¼ f q min ; . . . ; q max g , with q min Z k þ 1 and q max r n . This is a straightforward adaptation of model DF that can also be applied to the other discretized formulations . 3 . Computational results From a practical point of view , it is important to compare the models here proposed and also compare them with those P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1351 ARTICLE IN PRESS reported in the literature . As usual , we resort to the benchmark DIMACS instances 1 that have long been used to test MC methods . An yeast protein interaction network 2 reported in [ 34 ] has also been considered in our tests . In these experiments , we concentrate on the quality of the upper bounds obtained with the linear programming relaxations , the time to solve the LPs and the time to reach the optimums , when these models are embedded into the branch - and - bound . Among all DIMACS instances available , we only took those with density not higher than 0 . 6 . Our option is because the new models are more efﬁcient on sparse graphs , rather than dense graphs . We used the ILOG / CPLEX 9 . 0 package to solve both LPs and branch - and - bounds . These tests were ran on a Pentium IV with 3 . 2GHz and 512 MBytes of RAM memory . 3 . 1 . Maximum clique problem tests As mentioned in Section 2 . 2 , the new models are strongly inﬂuenced by the range of variation of set Q . For that reason , tight lower and upper bounds for o ð G Þ can reduce the models’ dimensions , beneﬁting their resolution . Thus , we resort to the recent work of Gendron et al . [ 18 ] and take the bounds reported in the papers ( shown in the Appendix ) . In order to guarantee a good tradeoff between the quality of the upper bounds and the times reported to reach them we chose the values obtained through the Sequence elimination algorithm applied to upper bounds gener - ated by the Linear coloring method . When referring to these bounds , we use the previously introduced notation q min and q max , as the best lower and upper bounds for o ð G Þ , respectively . We have set an upper time limit of 10800s in all tests here described . Percent gaps are calculated as 100 ðð UB (cid:3) LB Þ = LB Þ , with LB the best known lower bound for o ð G Þ or the optimum when available , and UB the upper bound produced by the LP relaxation of the models under discussion . All LB values used are given in the Appendix . Times are reported in seconds . Instances are sorted according to graph’s density ( d ) . Missing results in the tables are due to time or memory limitations , being marked with ‘‘ – ’’ . The primal simplex has been used in all linear programming relaxations involving model ADF L , because it has more variables than constraints , whenever j Q j 4 1 . For all other models , the dual simplex has been called to solve the associated LP relaxations . We start comparing the LP bounds produced by the models , without the prior knowledge of q min nor q max . This is the way models EdgeF and AEdgeF have ﬁrst been posed . It also means that Q ¼ f 2 ; . . . ; n g , which implies an enormous number of variables and / or constraints in the new models EF , DF and ADF . For this reason we only report results on instances with n r 500 . The gaps reported in Table 2 indicate that for the sparser graphs , models DF L and ADF L produce upper bounds much closer to o ð G Þ than the other models . However , when the density grows ( d 4 0 : 45 ) , the known models EdgeF L and AEdgeF L are the best to approximate o ð G Þ . In addition , the extended formulation EF L presents very high gaps and execution times . The results in Table 2 also indicate that the two known models EdgeF L and AEdgeF L reach the same upper bound values . This observation only addresses these instances , as differences can occur among denser graphs . As expected , the new models require much more time to solve the LPs than the known ones . In fact , any attempt to solve the bigger instances ( with n 4 500 ) would be inhibited from memory or execution time limitations . In addition , the aggregated AEdgeF L model requires more time to solve the LPs than model EdgeF L , although the latter has many more constraints . A reason for this can be associated with the density of constraints ( 6 ) from AEdgeF L , when compared with inequalities ( 4 ) of EdgeF L . Considering the two tests proposed in Section 2 . 3 , we begin to show the number of variables and constraints identiﬁed by Tests 1 and 2 , respectively . This is reported in Table 3 and only addresses the space of variables f x qi g that beneﬁt from the additional information provided by the extra index q , as suggested in Section 2 . 3 . Note that we are still assuming to have no information on approximate values for o ð G Þ , thus Q ¼ f 2 ; . . . ; n g . The column labelled with ‘Test 1 variables eliminated’ indicates the proportion of variables identiﬁed by Test 1 over the total number of vertex variables . Column labelled with ‘Test 2 constraints identiﬁed’ refer to the total number of constraints identiﬁed by Test 2 . As expected , Test 1 is more effective on sparse graphs . A similar observation holds for Test 2 , in the sense that smaller values for q 0 should come up among sparse graphs , inducing stronger cuts generated by Test 2 . Remember that q 0 ¼ min f q A Q : j N ð i Þ \ N ð j Þj o q (cid:3) 2 g . Note that the total number of constraints identiﬁed by Test 2 is equal to j E j , because there is Table 2 Linear programming relaxation gaps and times . Instance n d EdgeF L AEdgeF L EF L DF L ADF L Gap Time Gap Time Gap Time Gap Time Gap Time c - fat500 - 1 500 0 . 036 1685 . 7 1 . 22 1685 . 7 3 . 39 3407 . 9 104 . 47 – – 49 . 7 24 . 91 c - fat500 - 2 500 0 . 073 861 . 5 1 . 20 861 . 5 3 . 61 1802 . 1 73 . 66 – – 49 . 8 48 . 70 c - fat200 - 1 200 0 . 077 733 . 3 0 . 16 733 . 3 0 . 20 1528 . 8 3 . 14 41 . 7 322 . 91 49 . 3 2 . 16 c - fat200 - 2 200 0 . 163 316 . 7 0 . 13 316 . 7 0 . 20 723 . 4 4 . 08 37 . 5 700 . 84 41 . 5 4 . 36 c - fat500 - 5 500 0 . 186 290 . 6 1 . 05 290 . 6 2 . 27 677 . 9 5558 . 38 – – 47 . 6 3941 . 58 p - hat300 - 1 300 0 . 244 1775 . 0 0 . 31 1775 . 0 0 . 77 3620 . 4 23 . 91 – – 926 . 4 96 . 70 p - hat500 - 1 500 0 . 253 2677 . 8 0 . 95 2677 . 8 3 . 52 – – – – – – hamming6 - 4 64 0 . 349 700 . 0 0 . 01 700 . 0 0 . 02 1477 . 0 0 . 42 475 . 0 7 . 86 475 . 0 0 . 39 c - fat500 - 10 500 0 . 374 98 . 4 0 . 78 98 . 4 1 . 86 – – – – – – c - fat200 - 5 200 0 . 426 72 . 4 0 . 09 72 . 4 0 . 13 243 . 6 24 . 73 46 . 6 969 . 83 48 . 0 49 . 66 p - hat300 - 2 300 0 . 489 500 . 0 0 . 19 500 . 0 0 . 45 1095 . 7 172 . 83 – – 545 . 1 303 . 16 brock200 - 2 200 0 . 496 733 . 3 0 . 08 733 . 3 0 . 13 1561 . 6 25 . 69 733 . 3 1366 . 14 735 . 8 54 . 75 san400 - 0 . 5 - 1 400 0 . 500 1438 . 5 0 . 36 1438 . 5 1 . 11 – – – – – – sanr400 - 0 . 5 400 0 . 501 1438 . 5 0 . 36 1438 . 5 1 . 42 – – – – – – p - hat500 - 2 500 0 . 505 594 . 4 0 . 59 594 . 4 4 . 03 – – – – – – johnson8 - 2 - 4 28 0 . 556 250 . 0 0 . 00 250 . 0 0 . 00 589 . 0 0 . 06 300 . 0 0 . 45 300 . 0 0 . 05 Q ¼f 2 ; . . . ; n g . Only instances with n r 500 . 1 Available at ftp : / / dimacs . rutgers . edu / pub / challenge / graph / benchmarks / clique . 2 Available at NAR online . P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1352 ARTICLE IN PRESS always one such constraint for any pair f i ; j g , as j N ð i Þ \ N ð j Þj can range from 0 to n (cid:3) 2 , whenever Q ¼ f 2 ; . . . ; n g . So the only condition holding is ð i ; j Þ A E . Table 4 reports the gaps and execution times to solve the LP relaxation of the discretized models with Tests 1 and 2 . Among all constraints identiﬁed by Test 2 , we took no more than n of them . The selected ones involved the n pairs of vertices f i ; j g with higher common degree , where the common degree is given by j N ð i Þ \ N ð j Þj . This option is to provide the model with additional information involving the decision among pairs of vertices with higher chance to belong to the clique . The tighter values for q min and q max have still been ignored , thus keeping Q ¼ f 2 ; . . . ; n g . As mentioned above , no experiments are made involving Tests 1 and 2 and addressing the models using variables f x i g , whenever q min ¼ 2 . The amount of variables eliminated by Test 1 contributes for faster solving the discretized models . Such reduction has also allowed to solve the bigger instances , within the given time limit . Test 2 additional constraints also contribute for further reduction of the previously reported gaps . However , contrarily to expected , the beneﬁts are more meaningful on the denser graphs , where higher gaps still remain . For some instances , and among the discretized models , the number of constraints identiﬁed is much bigger than those selected for inclusion ( only n of them ) . Some additional experiments revealed no signiﬁcant decrease on the gaps , when more constraints are added to the models . Comparing with the gaps produced by the known models EdgeF L and AEdgeF L , reported in Table 2 , the two discretized formulations generate tighter upper bounds , for all instances except ‘johnson8 - 2 - 4’ . As before , the differences are more signiﬁcant among the sparser graphs . However , if tests were conducted on other DIMACS instances with density higher than 0 . 6 , then we would observe an opposite behavior on the gaps . This time the advantage would beneﬁt the known formulations . Additionally , the times reported in Table 4 are still superior than those reported in Table 2 for solving models EdgeF L and AEdgeF L . The new formulations become signiﬁcantly smaller when tight q min and q max values are made available . Results on the correspondent LP relaxations are reported in Table 5 . In order to provide a fair comparison with the known models , we add to EdgeF L and AEdgeF L the following inequalities : q min r X i A V x i r q max ð 29 Þ Once again , and for all models under discussion , we took no more than n constraints among all those generated by Test 2 . The selected ones followed the same criterion as before . The total number of constraints identiﬁed by Test 2 can be found in Table 6 . Table 5 only shows the times to solve the LPs because all optimums coincide with the correspondent q max value . Smallest times for each instance are detached in bold . The cardinality of set Q has also been included in Tables 5 and 6 . The inclusion of constraints ( 29 ) in EdgeF L induced a small increase on the time to reach the LP optimums . On the contrary , model AEdgeF L required less time than before . The same happened with the new formulations , revealing a signiﬁcant decrease on the times due to the presence of the tight bounds for o ð G Þ . Comparing with the known models , the new formulations are more effective among the sparser graphs and when j Q j ¼ 1 . Table 4 Linear programming relaxation gaps and times , including Tests 1 and 2 . Instance n d DF L ADF L Gap Time Gap Time c - fat500 - 1 500 0 . 036 42 . 9 0 . 67 48 . 9 0 . 47 c - fat500 - 2 500 0 . 073 46 . 2 2 . 73 49 . 0 2 . 13 c - fat200 - 1 200 0 . 077 41 . 7 0 . 13 48 . 1 0 . 11 c - fat200 - 2 200 0 . 163 37 . 5 0 . 59 39 . 0 0 . 61 c - fat500 - 5 500 0 . 186 45 . 3 17 . 88 46 . 5 14 . 64 p - hat300 - 1 300 0 . 244 725 . 0 753 . 83 805 . 4 16 . 33 p - hat500 - 1 500 0 . 253 – – 1272 . 6 105 . 45 hamming6 - 4 64 0 . 349 475 . 0 0 . 09 475 . 0 0 . 05 c - fat500 - 10 500 0 . 374 47 . 6 502 . 53 48 . 8 423 . 49 c - fat200 - 5 200 0 . 426 44 . 8 5 . 53 47 . 8 4 . 97 p - hat300 - 2 300 0 . 489 400 . 0 95 . 44 446 . 3 34 . 74 brock200 - 2 200 0 . 496 661 . 3 168 . 17 727 . 6 15 . 69 san400 - 0 . 5 - 1 400 0 . 500 1346 . 2 1047 . 45 1435 . 6 503 . 67 sanr400 - 0 . 5 400 0 . 501 1338 . 0 4974 . 16 1440 . 8 397 . 64 p - hat500 - 2 500 0 . 505 – – – – johnson8 - 2 - 4 28 0 . 556 277 . 8 0 . 03 284 . 3 0 . 02 Q ¼f 2 ; . . . ; n g . Only instances with n r 500 . Table 5 Times to solve the LP relaxations , with the tight values for q min and q max . Instance n d j Q j EdgeF L AEdgeF L EF L DF L ADF L c - fat500 - 1 500 0 . 036 1 6 . 98 0 . 16 0 . 00 0 . 01 0 . 00 c - fat500 - 2 500 0 . 073 1 6 . 47 0 . 14 0 . 03 0 . 03 0 . 02 c - fat200 - 1 200 0 . 077 1 0 . 45 0 . 03 0 . 01 0 . 01 0 . 00 c - fat200 - 2 200 0 . 163 1 0 . 36 0 . 03 0 . 01 0 . 02 0 . 01 c - fat500 - 5 500 0 . 186 1 4 . 38 0 . 20 0 . 16 0 . 08 0 . 03 p - hat300 - 1 300 0 . 244 4 1 . 05 0 . 03 0 . 05 0 . 06 0 . 05 p - hat1000 - 1 1000 0 . 245 15 3 . 98 0 . 34 6 . 26 8 . 34 9 . 75 p - hat700 - 1 700 0 . 249 9 1 . 83 0 . 16 1 . 63 1 . 88 1 . 02 p - hat500 - 1 500 0 . 253 8 0 . 90 0 . 08 0 . 45 0 . 58 0 . 33 p - hat1500 - 1 1500 0 . 253 23 269 . 73 1 . 12 106 . 44 53 . 02 70 . 45 hamming6 - 4 64 0 . 349 2 0 . 02 0 . 00 0 . 00 0 . 00 0 . 00 c - fat500 - 10 500 0 . 374 1 2 . 63 0 . 31 0 . 18 0 . 15 0 . 11 c - fat200 - 5 200 0 . 426 1 0 . 11 0 . 03 0 . 05 0 . 05 0 . 02 p - hat300 - 2 300 0 . 489 10 0 . 59 0 . 03 0 . 55 0 . 52 0 . 33 p - hat1000 - 2 1000 0 . 490 44 2 . 55 0 . 34 1939 . 23 3899 . 31 1761 . 39 brock200 - 2 200 0 . 496 10 0 . 08 0 . 06 0 . 21 0 . 32 0 . 17 p - hat700 - 2 700 0 . 498 28 0 . 87 0 . 16 47 . 69 15 . 47 20 . 41 san400 - 0 . 5 - 1 400 0 . 500 7 0 . 19 0 . 05 1 . 20 1 . 61 0 . 68 C2000 - 5 2000 0 . 500 106 262 . 00 2 . 41 – – – C4000 - 5 4000 0 . 500 200 – 16 . 73 – – – sanr400 - 0 . 5 400 0 . 501 21 0 . 31 0 . 05 2 . 86 3 . 64 1 . 75 san1000 1000 0 . 502 14 1 . 42 0 . 32 12 . 48 18 . 95 8 . 09 p - hat500 - 2 500 0 . 505 19 0 . 51 0 . 08 4 . 27 4 . 77 2 . 50 p - hat1500 - 2 1500 0 . 506 69 110 . 91 0 . 94 – – – johnson8 - 2 - 4 28 0 . 556 2 0 . 00 0 . 01 0 . 02 0 . 01 0 . 01 Table 3 Proportion of variables eliminated by Test 1 and total number of constraints identiﬁed by Test 2 , within the space of variables f x qi g . Instance n d Test 1 Test 2 Variables eliminated Constraints identiﬁed c - fat500 - 1 500 0 . 036 0 . 96 4459 c - fat500 - 2 500 0 . 073 0 . 93 9139 c - fat200 - 1 200 0 . 077 0 . 92 1534 c - fat200 - 2 200 0 . 163 0 . 84 3235 c - fat500 - 5 500 0 . 186 0 . 81 23191 p - hat300 - 1 300 0 . 244 0 . 76 10933 p - hat500 - 1 500 0 . 253 0 . 75 31569 hamming6 - 4 64 0 . 349 0 . 65 704 c - fat500 - 10 500 0 . 374 0 . 63 46627 c - fat200 - 5 200 0 . 426 0 . 57 8473 p - hat300 - 2 300 0 . 489 0 . 51 21928 brock200 - 2 200 0 . 496 0 . 50 9876 san400 - 0 . 5 - 1 400 0 . 500 0 . 50 39900 sanr400 - 0 . 5 400 0 . 501 0 . 50 39984 p - hat500 - 2 500 0 . 505 0 . 50 62946 johnson8 - 2 - 4 28 0 . 556 0 . 44 210 P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1353 ARTICLE IN PRESS This reveals the strong dependency of the new formulations from the given tight bounds , imposing much higher execution times when j Q j is large and when the density grows . In addition , it should be noted that the reported times do not include the effort to ﬁnd the given bounds . However , for all instances to which the new models solve faster the LP problem , the times to compute the upper bounds are less than a second ( 0s as reported in [ 18 ] ) , namely among all instances with density smaller than 0 . 2 . For the same competitive instances , times for the lower bounds can also be found very fast ( see , e . g . [ 18 , 20 ] ) . Table 6 shows the total number of constraints found by Test 2 . Those identiﬁed within the space of variables f x i g are shown in the column labelled ‘constraints on f x i g ’ , while those generated in the space of variables f x qi g have label ‘constraints on f x qi g ’ . We present no results involving Test 1 , because no vertex has been eliminated . When q takes values in f q min ; . . . ; q max g , the number of constraints generated by Test 2 decreases a lot . As expected , for j Q j 4 1 , the test is more effective on the variables space f x q i g than in f x i g . However , it hardly ﬁnds constraints on the denser graphs . We also tested the effectiveness of the models to reach the optimums when embedded into the branch - and - bound . We concentrate on the very sparse graphs , with d r 0 : 2 , where the new models revealed to be more competitive . For these instances , the values taken from [ 18 ] for q min and q max are equal , which means we know the exact value of o ð G Þ . In effect , while most q max bounds being proposed do not have an associated feasible clique , the same does not happen with q min . Actually , most lower bounding contributions in the literature are based on heuristic methods , bringing an associated feasible clique , which means that the problem is solved whenever q min ¼ q max . For this reason , we consider six different versions of set Q , with j Q j ¼ 1 ; 3 ; 5 ; 9 ; 15 and Q ¼ f 2 ; . . . ; n g , that is , j Q j ¼ n (cid:3) 1 . In all these sets , except the last one , o ð G Þ is the central value . Hence , we are assuming an equal distance from o ð G Þ to both q min and q max , which is not the most common situation among the known intervals reported in the literature . In fact , q min is most frequently closer to o ð G Þ than q max . Anyway , even admitting that the q min values are exaggeratedly far from o ð G Þ , the branch - and - bound as been observed to ﬁnd very tight lower bounds in early stages of its execution , specially among the known models . In the j Q j ¼ 1 case we assume to know just the value of o ð G Þ , having no feasible set for it . We used most default settings proposed by CPLEX , which involves an automatic procedure that uses the best rule for variable selection and the best - bound search strategy for node selection in the branch - and - bound tree . Other strategies available by CPLEX have also been experimented in some preliminary tests , revealing no beneﬁts in general . We ran the tests with and without the automatic generation of mixed integer programming ( MIP ) global cuts , and chose to close the cuts generator , because it required much more time to solve the known models . Tables 7 – 11 show the times to run the branch - and - bound , using each of the models and considering the sequence of increasing cardinality of Q , mentioned above . Smallest times for each instance and j Q j value are detached in bold . The running time of the branch - and - bound tends to grow when j Q j increases . However , model EdgeF seems to be relatively insensitive to the size of Q , from j Q j Z 3 , although taking much more time than the others , in general . Also , there is a signiﬁcant jump on the times from the case j Q j ¼ 1 to 3 , for all models , being more pronounced for EdgeF . Additionally , when Q ¼ f 2 ; . . . ; n g , where we ignore any approximate bound for o ð G Þ , the new models’ times tend to get worsen along with the graph’s density growth , although model DF is more resistent than the others . On the contrary , for the same Q ¼ f 2 ; . . . ; n g case , the known models tend to be better choices , specially model AEdgeF and particularly among denser graphs . These results also indicate that the discretized models , DF and ADF , perform very well among the sparser graphs . A reason for this can be credited to the fast decrease of the best - bound value along with the branch - and - bound execution . In our opinion , this happens because the LP projected polyhedra of the two men - tioned models should be closer to the MC convex hull than the other models’ LP polyhedra . Considering the option of closing the automatic cuts generator , we have observed that the times to run the branch - and - bound increased a lot in the version that includes the cuts , specially when the known models were involved . For some instances , it was more than 10 times slower than the times here reported , and in general the differences tend to be higher when j Q j increases . For the tests addressing the new models , those differences were not so high . It is important to remaind that CPLEX includes clique cuts among the global pool of MIP cuts available . These cuts have been most visible in the case with Q ¼ f 2 ; . . . ; n g , and also when the known models EdgeF and AEdgeF were used . Still , we expect that the inclusion of the MIP global cuts can be helpful among higher dimensional and denser graphs . Sparse graphs are very common in real applications , namely those addressing biological network problems . For instance , considering some of the works mentioned in Section 1 , the density of the CMO ( maximum contact map overlap ) graphs used in [ 32 ] , to compare protein’s tertiary structure , ranged from 0 . 11 to 0 . 16 , in their initial form . Other common applications involve the protein – protein interaction network of the yeast Saccharo - myces cerevisiae , being reported to have density smaller than 0 . 01 ( see , e . g . [ 34 ] ) . This interactome includes a giant component composed of 741 proteins ( vertices ) and 1752 interactions ( edges ) , made available in Han et al . [ 35 ] and used in Valente and Cusick [ 34 ] . If we use formulations AEdgeF and DF to ﬁnd a maximum size clique in this graph , it identiﬁes 14 proteins , all belonging to the same functional module , the core transcription factor module . It has eight transcriptional control proteins , ﬁve transcriptional initiation proteins and a single chromatin conformation modiﬁcation protein . In addition , there are eight vital and ﬁve lethal proteins , and Table 6 Total number of constraints identiﬁed by Test 2 . Instance n d j Q j Constraints on f x i g Constraints on f x qi g c - fat500 - 1 500 0 . 036 1 2208 2208 c - fat500 - 2 500 0 . 073 1 3048 3048 c - fat200 - 1 200 0 . 077 1 585 585 c - fat200 - 2 200 0 . 163 1 2079 2079 c - fat500 - 5 500 0 . 186 1 12555 12555 p - hat300 - 1 300 0 . 244 4 83 358 p - hat1000 - 1 1000 0 . 245 15 0 243 p - hat700 - 1 700 0 . 249 9 1 237 p - hat500 - 1 500 0 . 253 8 5 343 p - hat1500 - 1 1500 0 . 253 23 0 67 hamming6 - 4 64 0 . 349 2 224 224 c - fat500 - 10 500 0 . 374 1 19344 19344 c - fat200 - 5 200 0 . 426 1 3192 3192 p - hat300 - 2 300 0 . 489 10 3 155 p - hat1000 - 2 1000 0 . 490 44 0 74 brock200 - 2 200 0 . 496 10 0 0 p - hat700 - 2 700 0 . 498 28 0 180 san400 - 0 . 5 - 1 400 0 . 500 7 0 0 C2000 - 5 2000 0 . 500 106 0 0 C4000 - 5 4000 0 . 500 200 0 0 sanr400 - 0 . 5 400 0 . 501 21 0 0 san1000 1000 0 . 502 14 0 0 p - hat500 - 2 500 0 . 505 19 0 143 p - hat1500 - 2 1500 0 . 506 69 0 38 johnson8 - 2 - 4 28 0 . 556 2 0 0 P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1354 ARTICLE IN PRESS one unknown ( protein TRA1 ) . Considering the times to reach the optimum , model AEdgeF required 61 . 8s , while model DF took just 0 . 09s . In fact , model DF L immediately reached the integer optimum in 0 . 02s . Also , by adding inequality P i A C x i r ð o ð G Þ (cid:3) 1 Þ , with C the mentioned clique set , to model ( 17 ) , we would obtain an infeasible problem , showing that the 14 - vertices clique obtained is the only one in that graph . This infeasible problem took 0 . 02s to be solved . We set q min ¼ 2 and q max ¼ 33 in all these tests , involving models AEdgeF and DF . We chose a very simple upper bound , based on the maximum vertex degree ( dmax ) of the yeast interactome graph , where dmax ¼ 32 . We can ﬁnd in the literature other implicit enumerative methods specially designed for the MC problem . Tomita and Kameda [ 33 ] provide a comparison among most of those methods , showing that any of the instances tested in Tables 7 – 11 could have been solved in less than 0 . 02s , using the benchmark program dfmax proposed by Applegate and Johnson ( see [ 23 ] ) or the branch - and - bound algorithm proposed in [ 33 ] . These approaches can be much faster than using a general branch - and - bound ( or - cut ) to solve a mathematical formulation of the problem . However , when moving into a different clique related problem , the mathematical modelling approach can play Table 7 Formulation EdgeF . Branch - and - bound execution times . Instance n d o ð G Þ j Q j¼ 1 j Q j¼ 3 j Q j¼ 5 j Q j¼ 9 j Q j¼ 15 Q ¼f 2 ; . . . ; n g c - fat500 - 1 500 0 . 036 14 9 . 86 1485 . 78 1650 . 42 1413 . 16 1561 . 41 1536 . 95 c - fat500 - 2 500 0 . 073 26 12 . 36 2211 . 64 2099 . 86 2178 . 19 2351 . 31 2379 . 08 c - fat200 - 1 200 0 . 077 12 3 . 39 43 . 83 47 . 25 48 . 78 49 . 80 49 . 42 c - fat200 - 2 200 0 . 163 24 9 . 69 68 . 53 70 . 11 68 . 83 66 . 34 69 . 03 c - fat500 - 5 500 0 . 186 64 16 . 08 4882 . 88 3831 . 48 3855 . 47 3989 . 70 4078 . 34 Table 8 Formulation AEdgeF . Branch - and - bound execution times . Instance n d o ð G Þ j Q j¼ 1 j Q j¼ 3 j Q j¼ 5 j Q j¼ 9 j Q j¼ 15 Q ¼f 2 ; . . . ; n g c - fat500 - 1 500 0 . 036 14 0 . 72 25 . 52 24 . 80 26 . 80 31 . 28 89 . 77 c - fat500 - 2 500 0 . 073 26 0 . 72 33 . 98 36 . 52 33 . 06 41 . 81 157 . 31 c - fat200 - 1 200 0 . 077 12 0 . 11 1 . 80 1 . 73 1 . 76 2 . 05 8 . 02 c - fat200 - 2 200 0 . 163 24 0 . 36 2 . 06 1 . 89 2 . 03 2 . 31 9 . 38 c - fat500 - 5 500 0 . 186 64 0 . 72 122 . 95 89 . 66 297 . 58 78 . 75 261 . 36 Table 9 Formulation EF . Branch - and - bound execution times . Instance n d o ð G Þ j Q j¼ 1 j Q j¼ 3 j Q j¼ 5 j Q j¼ 9 j Q j¼ 15 Q ¼f 2 ; . . . ; n g c - fat500 - 1 500 0 . 036 14 0 . 03 0 . 17 45 . 09 94 . 28 115 . 75 – c - fat500 - 2 500 0 . 073 26 0 . 06 12 . 92 126 . 67 178 . 30 366 . 41 – c - fat200 - 1 200 0 . 077 12 0 . 02 0 . 14 3 . 00 4 . 70 7 . 55 1303 . 41 c - fat200 - 2 200 0 . 163 24 0 . 02 2 . 72 6 . 70 17 . 73 39 . 58 413 . 23 c - fat500 - 5 500 0 . 186 64 0 . 47 1728 . 92 370 . 23 906 . 19 1542 . 45 – Table 10 Formulation DF . Branch - and - bound execution times . Instance n d o ð G Þ j Q j¼ 1 j Q j¼ 3 j Q j¼ 5 j Q j¼ 9 j Q j¼ 15 Q ¼f 2 ; . . . ; n g c - fat500 - 1 500 0 . 036 14 0 . 01 0 . 95 3 . 27 3 . 84 4 . 38 28 . 44 c - fat500 - 2 500 0 . 073 26 0 . 05 4 . 53 10 . 02 19 . 06 34 . 06 83 . 17 c - fat200 - 1 200 0 . 077 12 0 . 01 0 . 33 0 . 45 0 . 75 0 . 81 2 . 53 c - fat200 - 2 200 0 . 163 24 0 . 05 0 . 97 1 . 50 3 . 64 7 . 89 29 . 52 c - fat500 - 5 500 0 . 186 64 0 . 45 99 . 58 59 . 19 90 . 55 322 . 83 3247 . 78 Table 11 Formulation ADF . Branch - and - bound execution times . Instance n d o ð G Þ j Q j¼ 1 j Q j¼ 3 j Q j¼ 5 j Q j¼ 9 j Q j¼ 15 Q ¼f 2 ; . . . ; n g c - fat500 - 1 500 0 . 036 14 0 . 01 0 . 41 26 . 58 41 . 36 64 . 86 75 . 72 c - fat500 - 2 500 0 . 073 26 0 . 05 5 . 08 39 . 34 141 . 98 347 . 25 892 . 80 c - fat200 - 1 200 0 . 077 12 0 . 00 0 . 23 2 . 77 4 . 19 4 . 50 6 . 08 c - fat200 - 2 200 0 . 163 24 0 . 02 0 . 83 5 . 03 19 . 11 39 . 36 106 . 14 c - fat500 - 5 500 0 . 186 64 0 . 39 132 . 45 843 . 09 1037 . 67 1467 . 89 – P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1355 ARTICLE IN PRESS an important role . Two such cases have been described in Section 2 . 4 , namely the overlapping cliques and k - plex problems . Next we provide a few tests with these problems . 3 . 2 . Tests for the maximum size component involving two overlapping cliques Considering model OQF , we propose ﬁnding pairs of over - lapping cliques using three different L ranges : L 1 ¼ f 1 ; . . . ; o ð G Þ (cid:3) 1 g , L 2 ¼ f 3 ; . . . ; o ð G Þ (cid:3) 1 g and L 3 ¼ f 5 ; . . . ; o ð G Þ (cid:3) 1 g . In these tests , we simply analyze changes on the minimum number of shared vertices . Table 12 shows the solutions and computational times to solve model OQF , applied to the 741 vertices S . cerevisiae interactome graph . There is a signiﬁcant increase on the time to solve model OQF when few vertices are allowed to share the cliques . In fact , we have not been able to reach the optimum for the L 1 range case . The best solution found is a 17 - vertices component , involving the 14 - vertices maximum clique and a 5 - vertices clique . The shared proteins are TAF10 and TAF5 , being both lethal . In fact , all proteins in the smaller clique are lethal . The two cliques belong to the core transcription factor module and all their proteins are in two different sub - modules ( see [ 34 ] ) . Besides , if we remove the shared proteins , then all those from clique 1 go to one of the sub - modules while the other ones , from clique 2 , fall in the other sub - module . The case with range L 2 returned a 16 - vertices component , composed of the same 14 - vertices maximum clique and a 5 - vertices clique , also belonging to the core transcription factor module . The shared vertices correspond to proteins TAF10 , TAF60 , TAF5 , being all lethal . Interestingly , the 5 - vertices clique includes protein TAF2 with unknown lethality . Model OQF with range L 3 also identiﬁed a 16 - vertices component within the same functional module . It also includes the 14 - vertices maximum clique and a 7 - vertices clique , sharing ﬁve proteins . These shared proteins are TAF17 , TAF10 , TAF60 , TAF61 and TAF5 , all involved in the transcriptional initiation function . Curiously , these are all the lethal proteins in the 14 - vertices maximum clique . The additional proteins brought by the 7 - vertices clique are TAF19 and TAF145 , also involved in the transcriptional initiation function and being lethal as well . None of the solutions revealed a topological inter - module complex , basically because of the sparsity of the yeast inter - actome graph . If more interactions come up , then the OQF model may help discovering new functional complexes between the modules . Alternatively , more relaxed concepts of dense compo - nents rather than cliques should be considered instead . 3 . 3 . Tests for the k - plex problem Tests with the two formulations ( 26 ) and ( 28 ) , addressing the k - plex problem , have also been conducted , using the same S . cerevisiae interactome graph . Bounds for m k ð G Þ have been set to q min ¼ k þ 1 and q max ¼ min f k þ dmax ; n g , with dmax the maximum vertex degree in G . For the present graph dmax ¼ 32 . Solutions and times are reported in Table 13 , for k ¼ 2 ; 3 ; 4 ; 5 ; 10 . Model ( 28 ) is faster to solve all these problems . The 2 - plex problem identiﬁed the same 14 proteins found in the maximum sized clique , while the other k - plex solutions , for k ¼ 3 ; 4 ; 5 ; 10 , identiﬁed components in the large 60S ribosomal subunit module . In fact , the k - plex solutions seem to fall within known cell functional modules , which suggests that k - plexes can provide an adequate structure for identifying new functional modules or protein complexes in other cells’ interactome . Actually , the k - plex concept can deal with possible missing interactions , which is commonly a matter of concern in biological network analysis ( see , e . g . [ 31 , 34 ] ) . We have also applied the two models ( 26 ) and ( 28 ) , with Q ¼ f k þ 1 ; . . . ; min f k þ dmax ; n gg , to the sparser DIMACS instances previously considered : c - fat500 - 1 , c - fat500 - 2 , c - fat200 - 1 , c - fat200 - 1 and c - fat500 - 5 . In this case , addressing problem 2 - plex , the times to solve the DF based model ( 28 ) are 27 . 63 , 248 . 72 , 5 . 05 , 42 . 44 and 10269 . 08s , respectively . On the other hand , the times required by the AEdgeF based model ( 26 ) are 235 . 91 , 402 . 39 , 16 . 08 , 15 . 75 and 596 . 47s , respectively . Considering the results reported in [ 2 ] , their branch - and - cut method took 557 . 1 , 885 . 2 , 30 . 92 , 31 . 67 and 1087 . 75s , respectively , to solve the same instances , using a 2 . 2GHz Pentium IV processor ( remember that we are using a 3 . 2GHz Pentium IV computer in our tests ) . Once again , the discretized formulations have been faster to ﬁnd the optimums among the sparser graphs , including the yeast S . cerevisiae interactome graph that has long been concentrating the attention of biologists . However , as in the clique problem , the AEdgeF based formulation takes the lead when density gets growing . A similar conclusion holds for the branch - and - cut method described in [ 2 ] . 4 . Conclusions This paper proposes new formulations for the MC problem . These are extended and discretized models that use additional information on candidate values for the clique number of the graph . Computational tests conducted on some DIMACS instances showed that for sparse graphs , with d o 0 : 5 , the LP relaxation of the new discretized models produce much stronger upper bounds for o ð G Þ than the known formulations . This suggests that the associated LP projected polyhedra should be closer to the MC convex hull than the known models’ LP polyhedra . In addition , when tight bounds for o ð G Þ are given in advance , the new formulations can be much reduced in their size , being able to reach the LP optimum much faster than before . For sparse graphs and when a short interval containing o ð G Þ is known , then model DF is the best formulation within the branch - Table 12 Solutions and times ( in seconds ) to solve model OQF , for L 1 , L 2 and L 3 . L 1 L 2 L 3 Solution Time Solution Time Solution Time Z 17 10800 . 00 16 4863 . 21 16 1625 . 64 Table 13 Solutions and times to solve models ( 26 ) and ( 28 ) , for k ¼ 2 ; 3 ; 4 ; 5 ; 10 . Model k ¼ 2 k ¼ 3 k ¼ 4 k ¼ 5 k ¼ 10 m 2 ð G Þ Times m 3 ð G Þ Times m 4 ð G Þ Times m 5 ð G Þ Times m 10 ð G Þ Times AEdgeF based : ( 26 ) 14 75 . 64 15 74 . 88 17 62 . 41 18 57 . 73 23 71 . 09 DF based : ( 28 ) 14 0 . 19 15 0 . 36 17 0 . 11 18 0 . 14 23 0 . 08 P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1356 ARTICLE IN PRESS and - bound to ﬁnd an optimum clique . On the other hand , when the graph becomes denser and the interval grows , then the best choice is formulation AEdgeF . Formulations EF and ADF are only competitive for very short intervals for o ð G Þ . Sparse graphs are very common in biological interaction’s characterizations . Such an example , involving an yeast inter - actome , has been used , reinforcing the advantages of the new discretized formulations , even without tight bounds for o ð G Þ . Sparse graphs are also common in other real - world applications , namely in social networks ; internet and world - wide - web net - works ; metabolic , protein and genetic networks and in brain networks ; as shown in [ 6 ] . Apart from the comparison among the new and the existing formulations described in the present paper , we can ﬁnd in the literature implicit enumerative methods specially designed for the MC problem ( see , e . g . [ 28 , 33 ] ) . These approaches can be much faster than using a general MIP solver like the branch - and - bound ( or - cut ) to answer the mentioned models . However , when moving into a different clique related problem , the mathematical modelling approach can play an important role . Two such cases have been considered , namely overlapping cliques and the k - plex problem , to which adequate reformulations have been proposed and tested . Acknowledgments The author would like to thank Carlos Luz and Luis Cavique for kindly making available their most recent results on upper bounds for o . Thanks are also due to Andre´ X . C . N . Valente for making available the protein interactome of Saccharomyces cerevisiae . The author also thanks the anonymous referees for their valuable suggestions . Appendix Table 14 indicates the optimum / best known values for o ð G Þ , denoted by LB ( from lower bound ) . It also shows values for q min and q max taken from [ 18 ] . We chose the upper bounds generated through the sequential elimination method applied to the chromatic number , obtained through the linear coloring heuristic . Among all instances proposed in the DIMACS library , we only considered those with density not higher than 0 . 6 . Instances are sorted according to graph’s density ( d ) . References [ 1 ] Bahadur KC , Akutsu T , Tomita E , Seki T , Fujiyama A . Protein matching under non - uniform distortions and protein side chain packing based on an efﬁcient maximum clique algorithm . Genome Informatics 2002 ; 13 : 143 – 52 . [ 2 ] Balasundaram B , Butenko S , Hicks IV , Sachdeva S . Clique relaxations in social network analysis : the maximum k - plex problem . Manuscript / http : / / ie . tamu . edu / people / faculty / butenko / papers / kplex060127 . pdf S ; 2006 . [ 3 ] Battiti R , Protasi M . Reactive local search for the maximum clique problem . Algorithmica 2001 ; 29 ( 4 ) : 610 – 37 . [ 4 ] Bellare M , Goldreich O , Sudan M . Free bits , PCPs and non - approximabil - ity — toward tight results . In : Proceedings of the 36th annual IEEE symposium on foundations of computer science . New York : IEEE Computer Society ; 1995 . p . 422 – 31 . [ 5 ] Berman P , Pelc A . Distributed fault diagnosis for multiprocessor systems . In : Proceedings of the 20th annual international symposium on fault - tolerant computing , Newcastle , UK , 1990 . p . 340 – 6 . [ 6 ] Boccaletti S , Latora V , Moreno Y , Chavez M , Hwang D - U . Complex networks : structure and dynamics . Physics Reports 2006 ; 424 : 175 – 308 . [ 7 ] Bomze IM , Budinich M , Pardalos PM , Pelillo M . The maximum clique problem . In : Du DZ , Pardalos PM , editors . Handbook of combinatorial optimization , suppl . vol . A . Dordrecht : Kluwer ; 1999 . p . 1 – 74 . [ 8 ] Butenko S , Wilhelm WE . Clique - detection models in computational biochem - istry and genomics . European Journal of Operational Research 2006 ; 173 : 1 – 17 . [ 9 ] Caprara A , Carr R , Istrail S , Lancia G , Walenz B . 1001 optimal PDB structure alignments : Integer programming methods for ﬁnding the maximum contact map overlap . Journal of Computational Biology 2004 ; 11 : 27 – 52 . [ 10 ] Cavique L , Luz CJ . A heuristic for the stability number of a graph based on convex quadratic programming and tabu search . Journal of Mathematical Sciences 2009 : 161 ( 6 ) : 944 – 55 . [ 11 ] Cook DJ , Holder LB . Graph - based data mining . IEEE Intelligent Systems 2000 ; 15 ( 2 ) : 32 – 41 . [ 12 ] Crescenzi P , Fiorini C , Silvestri R . A note on the approximation of the MAX CLIQUE problem . Information Processing Letters 1991 ; 40 : 1 – 5 . [ 13 ] de Klerk E , Pasechnik DV . Approximation of the stability number of a graph via copositive programming . SIAM Journal on Optimization 2002 ; 12 ( 4 ) : 875 – 92 . [ 14 ] Della Croce F , Tadei R . A multi - KP modeling for the maximum - clique problem . European Journal of Operational Research 1994 ; 73 : 555 – 61 . [ 15 ] Fahle T . Simple and fast : improving a branch - and - bound algorithm for maximum clique . In : Lecture notes in computer science , vol . 2461 . Berlin : Springer ; 2002 . p . 485 – 98 . [ 16 ] Gagneur J , Krause R , Bouwmeester T , Casari G . Modular decomposition of protein – protein interaction networks . Genome Biology 2004 ; 5 ( 8 ) : R57 . 1 – 2 . [ 17 ] Gardiner EJ , Artymiuk PJ , Willett P . Clique - detection algorithms for matching three - dimensional molecular structures . Journal of Molecular Graphics and Modelling 1997 ; 15 : 245 – 53 . [ 18 ] Gendron B , Hertz A , St - Louis P . A sequential elimination algorithm for computing bounds on the clique number of a graph . Discrete Optimization 2008 ; 5 ( 3 ) : 615 – 28 . [ 19 ] Grotschel M , Lova ´ sz L , Scherijver A . Geometric algorithms and combinatorial optimization . Algorithms and Combinatorics , vol . 2 . Berlin : Springer ; 1988 . [ 20 ] Grosso A , Locatelli M , Pullan W . Simple ingredients leading to very efﬁcient heuristics for the maximum clique problem . Journal of Heuristics 2008 ; 14 ( 6 ) : 587 – 612 . [ 21 ] Hansen P , Mladenovic´ N , Uroˇsevic´ D . Variable neighborhood search for the maximum clique . Discrete Applied Mathematics 2004 ; 145 : 117 – 25 . [ 22 ] Hotta K , Tomita E , Takahashi H . A view - invariant human face detection method based on maximum cliques . Transactions of IPSJ 2003 ; 44 ( SIG14 ) : 57 – 70 . [ 23 ] Johnson DS , Trick MA , editors . Cliques , coloring and satisﬁability . In : DIMACS series in Discrete mathematics and theoretical computer science , vol . 26 , 1996 . [ 24 ] Karp RM . Reducibility among combinatorial problems . In : Miller RE , Thatcher JW , editors . Complexity of computer computations . New York : Plenum Press ; 1972 . p . 85 – 103 . [ 25 ] Krishna P , Vaidya N , Chatterjee M , Pradhan D . A cluster - based approach for routing in dynamic networks . ACM SIGCOMM Computer Communication Review 1997 : 49 – 65 . [ 26 ] Luce RD , Perry AD . A method of matrix analysis of group structure . Psychometrika 1949 ; 14 : 95 – 116 . [ 27 ] Luz CJ , Schrijver A . A convex quadratic characterization of the Lova´sz theta number . SIAM Journal on Discrete Mathematics 2005 ; 19 ( 2 ) : 382 – 7 . [ 28 ] O¨sterg˚ard PRJ . A fast algorithm for the maximum clique problem . Discrete Applied Mathematics 2002 ; 120 : 197 – 207 . [ 29 ] PenaJ , VeraJ , ZuluagaL . Computingthestabilitynumberofagraphvialinearand semideﬁnite programming . SIAM Journal on Optimization 2007 ; 18 ( 1 ) : 87 – 105 . Table 14 Best known lower bounds for o ð G Þ . Values for q min and q max , reported in [ 18 ] . Instance n d LB q min q max c - fat500 - 1 500 0 . 036 14 14 14 c - fat500 - 2 500 0 . 073 26 26 26 c - fat200 - 1 200 0 . 077 12 12 12 c - fat200 - 2 200 0 . 163 24 24 24 c - fat500 - 5 500 0 . 186 64 64 64 p - hat300 - 1 300 0 . 244 8 8 11 p - hat1000 - 1 1000 0 . 245 10 10 24 p - hat700 - 1 700 0 . 249 11 11 19 p - hat500 - 1 500 0 . 253 9 9 16 p - hat1500 - 1 1500 0 . 253 12 11 33 hamming6 - 4 64 0 . 349 4 4 5 c - fat500 - 10 500 0 . 374 126 126 126 c - fat200 - 5 200 0 . 426 58 58 58 p - hat300 - 2 300 0 . 489 25 25 34 p - hat1000 - 2 1000 0 . 490 46 46 89 brock200 - 2 200 0 . 496 12 10 19 p - hat700 - 2 700 0 . 498 44 44 71 san400 - 0 . 5 - 1 400 0 . 500 13 8 14 C2000 - 5 2000 0 . 500 16 15 120 C4000 - 5 4000 0 . 500 18 16 215 sanr400 - 0 . 5 400 0 . 501 13 13 33 san1000 1000 0 . 502 15 8 21 p - hat500 - 2 500 0 . 505 36 36 54 p - hat1500 - 2 1500 0 . 506 65 65 133 johnson8 - 2 - 4 28 0 . 556 4 4 5 P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1357 ARTICLE IN PRESS [ 30 ] Regin J - C . Solving the maximum clique problem with constraint program - ming . In : Lecture notes in computer science . , vol . 2883 . Berlin : Springer ; 2003 . p . 634 – 48 . [ 31 ] Spirin V , Mirny LA . Protein complexes and functional modules in molecular networks . Proceedings of the National Academy of Science 2003 ; 100 ( 21 ) : 12123 – 8 . [ 32 ] Strickland DM , Barnes E , Sokol JS . Optimal protein structure alignment using maximum cliques . Operations Research 2005 ; 53 ( 3 ) : 389 – 402 . [ 33 ] Tomita E , Kameda T . An efﬁcient branch - and - bound algorithm for ﬁnding a maximum clique with computational experiments . Journal on Global Optimization 2007 ; 37 : 95 – 111 . [ 34 ] Valente AXCN , Cusick ME . Yeast protein interactome topology provides framework for coordinated - functionality . Nucleic Acids Research 2006 ; 34 ( 9 ) : 2812 – 9 . [ 35 ] Han JD , Bertin N , Hao T , et al . Evidence for dynamically organized modularity in the yeast protein - protein interaction network . Nature 2004 ; 430 : 88 – 93 . P . Martins / Computers & Operations Research 37 ( 2010 ) 1348 – 1358 1358