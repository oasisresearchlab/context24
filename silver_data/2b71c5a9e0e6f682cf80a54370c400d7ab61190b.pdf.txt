Int . J . Metadata , Semantics and Ontologies , Vol . 6 , Nos . 3 / 4 , 2011 185 Metadata support to retrieve and revise solutions in case - based reasoning Lorenza Manenti * and Fabio Sartori Department of Informatics , Systems and Communication , University of Milano - Bicocca , Viale Sarca 336 / 14 , 20126 , Milano , Italy E - mail : manenti @ disco . unimib . it E - mail : sartori @ disco . unimib . it * Corresponding author Abstract : Case - Based Reasoning ( CBR ) is a knowledge management approach that consists in the development of decision - support systems where problems are solved by analogy with similar problem solved in the past . In this way , the system supports users in ﬁnding solutions without starting from scratch . CBR has become a very important research topic in Artiﬁcial Intelligence , with the deﬁnition of methodologies and architectural patterns for supporting developers in the design and implementation of case - based systems . The paper presents one of these frameworks , namely CRePERIE , an ongoing research project based on the integration between CBR paradigm and metadata approach to obtain domain - independent case structure and retrieval algorithm deﬁnition . This paper focuses on how the developed retrieval strategy can be proﬁtably exploited for the CBR revise step too , according to a substitutional approach . Keywords : case - based reasoning ; metadata ; revise : retrieve . Reference to this paper should be made as follows : Manenti , L . and Sartori , F . ( 2011 ) ‘Metadata support to retrieve and revise solutions in case - based reasoning’ , Int . J . Metadata , Semantics and Ontologies , Vol . 6 , Nos . 3 / 4 , pp . 185 – 194 . Biographical notes : Lorenza Manenti is a third - year PhD student in Computer Science at the University of Milano - Bicocca , where she obtained both her BSc and MSc in 2006 and 2009 , respectively . She is currently a Member of CSAI ( Complex Systems and Artiﬁcial Intelligence ) Research Center , where she is involved in research projects in the area of crowd simulation using agent approach . Her research interests also include several aspects in the knowledge management area . Fabio Sartori earned his PhD in Computer Science from the University of Milano - Bicocca in 2005 . He is currently an Assistant Professor of Computer Science at the Department of Computer Science , Systems and Communication of that University , where he is involved both in research and in teaching activities . His research interests are mainly related to knowledge management and , in particular , on the integration between case - based reasoning and other conceptual paradigms to support knowledge sharing in collaborative domains . He has taken part in many research projects in the Knowledge Management area , involving both academic and industrial partners . He is the author of more than 50 research and application papers . 1 Introduction Over the last decade , Case - Based Reasoning ( CBR ) ( Kolodner , 1992 ) methodology has been successfully applied to a wide range of problem domains and becomes one of the most important research areas in the ﬁeld of Artiﬁcial Intelligence . The main reason of its success is that the CBR model allows ﬁnding solutions to difﬁcult problems even if a well - deﬁned knowledge model is absent . CBR approach is founded on the reasoning by analogy method ( i . e . , similar problems have similar solutions ) , summarised in the well - known 4R’s cycle ( Aamodt and Plaza , 1994 ) : a description of the new problem is given , then it is compared with the description of similar problems already solved and stored in the case base according to a similarity algorithm . The most similar problem description is then retrieved and its solution is reused as a ﬁrst attempt to solve the new problem without starting from scratch . If the reused solution does not ﬁt the problem , a revise step can be applied to adapt it . Finally , the new problem description and its ( possibly revised ) solution are retained in the case base . Copyright © 2011 Inderscience Enterprises Ltd . 186 L . Manenti and F . Sartori This paper describes Case Retrieval Platform Extended to RevIsE ( CRePERIE ) , a Java - based framework that extends the functionalities of the previous CReP platform ( Manenti and Sartori , 2010 ) including the possibility to adapt reused solutions as the result of more than 10 years of experience in the design and development of knowledge management applications according to CBR approach ( e . g . , P - Race ( Bandini et al . , 2002 ) , P - Truck ( Bandini et al . , 2004 ) and Symphony ( Bandini et al . , 2007 ) ) . CRePERIE works on experience representations given in the form of cases . According to the CBR model , a case is the basic element for lessons learned memorisation and the most similar cases are retrieved to reuse their solutions whenever a new case arises . In fact , the framework allows the description and the development of systems able to retrieve cases from the case memory . To increase the generality level of CRePERIE and to allow its use to cover a wider range of domains , a metadata description of case structure elements has been given . The CRePERIE metadata schema deﬁnes every signiﬁcant component of the platform , from the atomic elements of the case description ( i . e . , attributes and the values ) to the most complex concepts , like the case base and the similarity and aggregation functions . The main assumption is that each experience can be represented as a case composed of case elements . Every case element is devoted to a speciﬁc part of the case , i . e . , description , solution and outcome . A case element is associated to a type that indicates its range of values . As a consequence , each case is a ﬁnite list of couples (cid:1) case element , value (cid:2) . A ﬁnite and not empty collection of cases constitutes the case base , i . e . , the set of experiences used by CRePERIE during the retrieval phase . The retrieval strategy implemented is based on the classical K - Nearest Neighbour algorithm ( Finnie and Sun , 2002 ) : the computation of the similarity rate on a single node denotes a local similarity , limited to the deﬁnition of the node considered . The global similarity related to the whole case has to involve all the nodes belonging to the subtree of Case Description . The metadata description adopted in the deﬁnition of the main elements of CRePERIE has allowed the design and implementation of a revise algorithm based on the substitutional approach ( Manzoni et al . , 2007 ) . The paper is organised as follows : Section 2 brieﬂy presents the research on solution revising in the CBR approach ; Section 3 describes the conceptual model of metadata adopted in CRePERIE , while Section 4 describes how a computational model has been derived from the conceptual one . Section 5 presents an application of CRePERIE to a classical problem in the CBR literature , to show its effectiveness in ﬁnding solutions as well as revising them in a concrete situation . Section 6 brieﬂy points out the contribution of the paper to the research in the CBR ﬁeld and the beneﬁts coming from the adoption of metadata to describe reasoning by analogy problem - solving methods . Finally , some conclusions and future works are brieﬂy pointed out in Section 7 . 2 Context and related work While many different approaches to the retrieval phase of a CBR system have been developed , ﬁnding methods and algorithms to tackle the revise one is still an open problem : in fact , CBR is often selected as a problem - solving method for situations in which a theory or model allowing to construct the solution of a given problem cannot be deﬁned owing to the lack of knowledge . In these situations , it is also very difﬁcult to have a theory of adaptation , a set of mechanisms deﬁning how to modify the solution of a case similar to the current one according to differences in their descriptions . The null adaptation approach ( i . e . , leaving the adaptation up to the user , or do not perform adaptation at all ) is often selected , while relevant experiences in the modelling and design of adaptation models describe complex knowledge models requiring considerable knowledge engineering effort to be effectively implemented ( Bandini and Manzoni , 2001 ; Smyth and Keane , 1998 ) . A taxonomy of various approaches to case adaptation can be found in Wilke and Bergmann ( 1998 ) , and two main categories of adaptation approaches are identiﬁed . Transformational approaches provide the modiﬁcation of the solution of a retrieved case to better ﬁt the new situation ( through the substitution of certain solution features or even the modiﬁcation of its structure ) . Generative adaptation schemes instead build from scratch part of the solution , according to current case description features and the description of the reasoning process that led to the solution of the retrieved best - matching case . In general , whatever adaptation approach is selected , the involved knowledge is strictly domain speciﬁc and it cannot be simply generalised . The aim of this paper is to present a general framework for substitutional approach to adaptation , which only requires and exploits analogical knowledge , i . e . , domain knowledge that is already employed by the CBR system to evaluate differences and similarity between cases . The underlying idea of the here - presented approach considers that past cases may give an indication on how to adapt the solution of the retrieved case given the difference among its description and the one related to the current problem . The difference among current and retrieved case descriptions is used as a criterion to select from the Case Base pairs of representatives of these cases , whose solutions ( and more precisely , the difference among their solutions ) are aggregated to deﬁne the way to adapt the solution of the retrieved case to solve the current one . Several works can be found in the literature that aim at describing possible approaches for the modelling and design of adaptation modules , and some of them are aimed at the development of general approaches Metadata support to retrieve and revise solutions in case - based reasoning 187 and methodologies for case adaptation . The CASER ( i . e . , Case Adaptation by SEgment Replanning ) method ( Tonidandel and Rillo , 2005 ) has been presented as a successful approach to adaptation in designing Case - Based Planning systems ( CBP ) . In such systems , a case is a plan and adaptation is responsible for reducing the number of actions that compose it . The CASER method is divided into two main steps : the completion of the retrieved case , which is responsible to make its solution acceptable for the new problem ; the execution of a recursive algorithm that optimises the plan , preserving its correctness . The CASER method exploits a modiﬁed version of the FF planning system ( Hoffmann , 2002 ) . The main advantage of CASER is that it does not require additional domain knowledge , once the problem is formulated in terms of plan ﬁnding ; on the other hand , it can be only applied in the context of planning systems . A similar approach , introduced in Fuchs et al . ( 1999 ) , represents an attempt to combine retrieve and adaptation steps into a unique planning process , leading to the problem solution starting from the current problem description . In this way , the general issue of adaptation is reformulated in terms of plan adaptation . A different approach to case adaptation provides the exploitation of interchangeability properties between values in solutions of Constraint Satisfaction Problems ( CSPs ) . In particular , a proposal introduced in Neagu and Faltings ( 2001 ) can provide a general approach to the adaptation of previous case solutions , whenever it is possible to deﬁne a complete constraint model of the underlying domain . Although the CSP model can be applied to many ﬁelds ( such as planning , scheduling , robot control and conﬁguration ) , the interchangeability approach requires thus a considerable amount of domain knowledge , to be suitably formalised as constraints . Another relevant example of adaptation strategy provides the exploitation of domain - speciﬁc relationships among cases ( i . e . , case dominance ) to provide an adaptation heuristics supporting case - based estimation ( Mcsherry , 1998 ) . In particular , this approach exploits pairs of past solved cases presenting some speciﬁc difference with respect to the current one , to derive an adaptation to the retrieved case solution . Only few approaches are aimed at providing general mechanisms to tackle the case adaptation problem ; from this standpoint , they generally try to reduce the usage of domain - speciﬁc knowledge . Some of these approaches provide in fact the learning of adaptation rules from the case base itself ( Hanney and Keane , 1997 ) . In particular , while some of them reify episodes of adaptation into cases and adopt a second CBR system devoted to this single step of the overall cycle ( Craw et al . , 2001 ) , other ones adopt a hybrid strategy , including both such a CBR - based adaptation and rule - based modiﬁcations of the retrieved solution ( Leake et al . , 1996 ) . The rationale on which the substitutional adaptation approach is based is that ‘similar differences among case descriptions imply similar differences among their solutions’ . In other words , the same base of previously solved problem instances can also be queried for pairs of cases representing , respectively , the current and the retrieved case . These pairs , which are called representatives in our framework , are characterised by the fact that their descriptions present similar differences to the one that holds between the current and the retrieved cases . The differences among their solutions can thus be considered as indicators of the modiﬁcation to be applied to the solution of the retrieved case to obtain the new one . In the next section , the CRePERIE approach to the development of CBR systems will be pointed out , focusing on how the adoption of metadata schemes in the deﬁnition of problem description and retrieval algorithms has allowed to easily describe algorithms for solution revise step too . To this aim , metadata descriptions of all the necessary elements have been given . Metadata have been already adopted in the past in CBR research : for example , Premraj et al . ( 2003 ) have developed a framework for guiding retrieval of similar cases in the software cost prediction , where metadata information are used to enrich the case description to facilitate the deletion of fake cases from the next retrieval phase . Shwartz et al . ( 2004 ) have designed and implemented a metadata case - based reasoner where XML schemas describing a problem are compared with others stored in the case base ( i . e . , a collection of XML ﬁles ) according to a given similarity metric . Different from them , we use metadata to give a general deﬁnition of the CBR 4R’s cycle : in this sense , while the ﬁrst paper focused on the indexing step ( Kolodner , 1992 ) , which is a pre - processing phase exploited in CBR systems to reduce the retrieval search space , our approach focuses on the development of ﬂexible retrieval algorithms too , by means of the deﬁnition of abstract similarity measures that can be concretely instantiated when needed . The second approach is more similar to the one described in this paper : the main difference is in the retrieval strategy since we do not compare the XML ﬁles directly , but the information put in the structures represented by them by means of the similarity functions deﬁned for each node . 3 The conceptual model of metadata The ﬁrst problem in CBR system development is how to computationally describe past experiences using cases . Knowledge contained in a case must be structured and organised to achieve better expressiveness and performances : in our approach , a case is a collection of case elements , which correspond to nodes of the tree - structure . Formally , a case element ce is a member of the CaseElement set : ∀ ce ∈ CaseElement , ce = ( id , t , n ) 188 L . Manenti and F . Sartori where • id ∈ Z + − { 0 } is the identiﬁer of the case element • t ∈ T identiﬁes the range of value associated to ce ( i . e . , String , Integer , Double ) • n ∈ String is the name used to refer to the case element . All the cases belonging to the same context have to be collected in a particular case holder , namely case base . A case base C = { c 1 , . . . , c n } , 1 ≤ n < ∞ , is a ﬁnite and not empty collection of cases and every case is deﬁned as a set of couples ( ce 1 , v 1 ) , . . . , ( ce n , v n ) where ∀ ( ce i , v i ) , ce i ∈ CaseElement and t ( ce i ) = t and v i ∈ t ∪ { ⊥ } ( i . e . , v i is the value associated to ce i ) . Considering a case base , each case has to be organised following a particular tree - structure presented earlier . In this structure , inner nodes and outer nodes can be identiﬁed ( Figure 1 ) : outer nodes , also named attributes , overlap with leaves whereas inner nodes represent categories , which the attributes belong to . In our approach , only one structure can be deﬁned for each case base so every case belonging to a particular case base has the same structure . The structure deﬁnes the three parts of a generic case according to the literature : ∀ x ∈ StructBase , x = ( d , sol , o ) where • StructBase is a ﬁnite and not empty collection of case structures • d ( x ) = d denotes the problem description part • sol ( x ) = sol denotes the solution part • o ( x ) = o denotes the outcome part . In the structure , each node ( inner and outer ) overlaps with a particular ce ∈ CaseElement . Moreover , to support the fundamental methodology of CBR approach based on comparison among cases , every node is coupled with a similarity function sf , i . e . , a mathematical function that compares values associated to the same case element in different cases and produces their similarity degree . Figure 1 Representation of a generic hierarchical structure . Inner nodes are represented as ovals while outer nodes as rectangles A set of similarity functions is available in the system . A ﬁrst type of similarity functions works on strings : they compare strings in case - sensitive or case - no - sensitive ways and produce as result 1 ( if the strings are equal ) or 0 ( otherwise ) . A second type works on number intervals ( both integer and double ) ; it is necessary to deﬁne minimum and maximum values of the range allowed for every node . The similarity value on a node n corresponding to case element ce between two cases x and y is deﬁned as follows : sf ( n ) ( v ce ( x ) , v ce ( y ) ) = 1 − | v ce ( x ) − v ce ( y ) | max − min . Considering a tree - structure in which sub - trees can be identiﬁed , to obtain a single similarity value for each sub - tree , we introduce the concept of aggregation function af , which works on similarity degrees of child nodes and of the parent node . In our approach , two kinds of aggregation functions are implemented : average functions and weighted average function . Both of them consider the similarity degrees of inner nodes ( if the root is included in calculation by means of the Root modality ) or not ( if the root is included in calculation by means of the NoRoot modality ) . While average functions in the aggregation phase are already used in the literature ( Bergmann and Stahl , 1998 ) , we propose the use of weighted average functions to characterise more in detailed different parts in a case structure : working on weight assignment , it is possible to specify different importance for different subsets of nodes and , moreover , it allows to make uniform different structures supporting a comparison between them . Similarity and aggregation functions are used both in the retrieval and in the revising steps : in the ﬁrst case , they are applied to the description part of cases while in the second one they support the comparison among the solution part . In the next section , the implementation of the conceptual model by means of metadata approach is presented . 4 From conceptual model to CRePERIE implementation The conceptual model described earlier has been ﬁnally translated into an XML schema that deﬁnes the metadata used in the design and implementation of steps of CBR approach . In particular , the schema deﬁnes all the components useful in the retrieval and revising steps : the elements are deﬁned ( in a top - down way ) to guarantee the semantic speciﬁcation of each component . Each element is associated to a complexType that lists all the sub - elements ( with the name and the type ) it is composed of . In Tables 1 and 2 , the main elements of the XML schema are presented with sub - elements and the relative types . The starting point is CRePConf element , which speciﬁes all the components that are involved into Metadata support to retrieve and revise solutions in case - based reasoning 189 Table 1 Elements and sub - elements with relative types of the XML - schema ( I ) Element Sub - elements Type CRePConf structBase XMLStructBase caseElements XMLCaseElements caseBase XMLCaseBase aggregation XMLAggregation Functions Functions similarity XMLSimilarity Functions Functions XMLStructBase caseDescription XMLCasePart caseSolution XMLCasePart caseOutcome XMLCasePart XMLCasePart innerNode XMLInnerNode outerNode XMLOuterNode Table 2 Elements and sub - elements with relative types of the XML - schema ( II ) Element Sub - elements Type XMLInnerNode innerNode XMLInnerNode outerNode XMLOuterNode aggregation String FunctionName aggregation XMLParam FunctionParam similarity String FunctionName similarity XMLParam FunctionParam caseElementId Integer XMLOuterNode caseElementId Integer similarity String FunctionName similarity XMLParam FunctionParam XMLParam name String value String XMLCase name String Elements type String id Integer XMLCaseBase case XMLCase XMLCase id Integer caseItem XMLCaseItem XMLCaseItem caseElementId Integer value String XMLAggregation name String Functions XMLSimilarity name String Functions the conceptual model of the platform : structBase , caseElements , caseBase , aggregationFunctions and similarityFunctions . Each of them is then deeper investigated by means of the analysis of relative sub - elements . In this section , we introduce the implementation of the model exploiting the metadata shown in Tables 1 and 2 . Starting from the representation of past experience , we then show how the retrieval , reusing and revising processes are supported by CRePERIE . The platform is made of a collection of Java ﬁles , which implement the main classes for the case , case base , case structure , similarity and aggregation functions representation . All the information the platform needs to work in the proper way are persistently stored in libraries of XML ﬁles as well as the results of retrieval computations . 4 . 1 Representation of past experience To support the representation of past experience , we exploit the XMLCaseBase element . In our model , past experiences related to a particular domain are collected into a speciﬁc holder ( i . e . , XMLCaseBase element ) : this latter is deﬁned as a collection of XMLCase elements in which XMLCaseItem sub - elements represent the different case elements ( identiﬁed by an id , a value and a type ) a case is composed of . Information about past experiences are stored in a set of XML - ﬁles , one for each case , and they are organised following the graph structure associated to the case base : in fact , every ﬁle contains the same sets of nodes and edges with the relative values . The user can deﬁne a new structure in the creation of a case base , and he / she can build solved and unsolved problems by specifying the values for both inner and outer nodes in the description or solution part ; the structure will be graphically visualised in the form of a tree and then stored in the relative XML ﬁle . The following code shows a sketch of an XML ﬁle representing a case : the graph is composed of the list of nodes and the list of edges , which compose the structure . 190 L . Manenti and F . Sartori For each node , a set of values has to be speciﬁed : id , name , aggregation and similarity functions ( with parameters ) , type of node ( inner or outer ) and modality of the node ( description or solution ) . Differently , every edge is deﬁned by a couple source - target of nodes connected by a ‘part - of’ or ‘is - a’ relationship . 4 . 2 Retrieval step The retrieval process is based on the comparison between the set of solved cases stored in a case base and a new unsolved case ( C u ) deﬁned in the same domain ( see Figure 2 ) . Figure 2 A graphical representation of the retrieval step in which C u represents the unsolved case , C s the ﬁle chosen on the basis of retrieval step and S s the solution that has to be added in C u This comparison exploits the deﬁnition of structBase element that is composed of three sub - elements : caseDescription , caseSolution and caseOutcome . These latter belong to the XMLCasePart element , described as a composition of inner nodes and outer nodes with the relatives similarity and aggregation functions according to the hierarchical tree - structure before introduced . In the case of retrieval step , the comparison regards the caseDescription part of the structure : the output produces a table with the similarity degrees among solved cases stored in the case base and C u . The calculus of these values is supported by means of the creation of a temporary XML - ﬁle in which information about structure are retained . The following code shows a sketch of the XML - ﬁle focused on description , solution and outcome parts of the structure . In this example , the description part is composed of three nodes organised in a hierarchical way with the relatives similarity functions , aggregation functions and identiﬁcation number . After the information about the structure , the rest of the XML - ﬁle contains information about all solved cases stored in the case base : For instance , in this sketch , information about three different solved cases , identiﬁed by their identiﬁcation number , are shown : in the comparison step , the values associated to the same case element are compared using the function deﬁned in the structure . In this case , the case element with caseElementId = 3 assumes the value ‘Intel’ in the case with id = 1 and the value ‘Asus’ in case with id = 2 and id = 3 . The function associated to the comparison is ‘SimCaseInString’ , working on strings in a case no - sensitive way . The output of the comparison step allows user to analyse past experiences and to move towards reusing and revising process . 4 . 3 Reusing , revising and retaining steps The results of the comparisons are shown to the user that can then select one of them ( C s , generally the case with the highest similarity degree ) to analyse the solution S s and possibly reuse it for C u ( see Figure 2 ) . If the user chooses this possibility , the graphical structure of the solution is added in the tree visualisation of the case , and the XML code to describe it is appended to C u ﬁle . Metadata support to retrieve and revise solutions in case - based reasoning 191 The solution added to the unsolved case can be accepted without modiﬁcation by the user or it is possible to revise it in two different ways : manually , in which the user can apply some changes in the values of solution nodes , or automatically . In this second way , it is necessary that a set of cases modiﬁed by manual adaptation already exist and that information about these latter and the relatives C s are stored in a backup ﬁle . On the basis of these information , we can build a method to obtain the automatic adaptation of the solution . As introduced in Section 2 , we investigated the substitutional approach to develop the revising step : Figure 3 shows an overview of the whole process involved in obtaining automatic adaptation . Figure 3 A graphical representation of the revise step based on substitutional adaptation . The four steps the process is composed of are identiﬁed by means of broken lines boxes The method can be divided into four phases , corresponding to the four boxes depicted in Figure 3 : 1 A comparison on values of nodes belonging to the description parts of C s and C u cases : an XML ﬁle C s − C u with these differences is created , exploiting the same structure used in the step of representation of past experience 2 Starting from the backup ﬁle containing the couples “case retrieved - case adapted” already existing , several XML ﬁles , one for each couple , are composed . These ﬁles contain the differences among the values of nodes in the couple , both for the description part D d and for the solution part S d . We can see this collection of XML ﬁles as a case base containing information about differences as in the retrieval process 3 We can now apply the retrieval method considering C s − C u ﬁle as an unsolved case and the case base of differences as the case base of solved cases . The scope is to retrieve the couple of cases with the most similar differences in the description part 4 Considering the differences in the solution part of the retrieved couple , we apply them to the solution S s obtaining a new adapted solution S s + S d . It can be noticed that the revising step is based on the components involved in the representation of past experience and in the retrieval step and all these components are speciﬁed according to Tables 1 and 2 . The new solved case can be then added to the initial case base implementing the retaining step , increasing the knowledge base . 5 Case study In this section , an example of the use of CRePERIE : the scenario has been widely used in the literature ( Bergmann and Stahl , 1998 ) and it is related to a CBR system to support customers purchasing Personal Computers , on the basis of desired characteristics and computers available from the stock . In this system , every case represents an available computer by means of information about physical features ( e . g . , the CPU data , the presence of optical and storage device ) . The output of the CBR system will be the computer that is most similar to the desired one according to the described features : the resulting case structure is shown in Figure 4 . Figure 4 The case structure associated to case study scenario : physical features related to a computer are organised in a hierarchical - tree structure Let us suppose a customer creates a new C u unsolved case , asking for a computer whose price is no more than 1300 Euro : the retrieval step result is depicted in Figure 5 , where a case C s with a small difference in the price attribute ( 1400 Euro ) is presented , and the related solution Asus 1700 is added to C u . To perform the adaptation step , a retrieval phase among the difference C s − C u ( with respect to the price attribute ) and the previous adaptations in the case base is performed : the system proposes an adaptation of the solution value from Asus 1700 to Asus 1900 ( see Figure 6 ) . The new solved case is then stored in the case base and the information related to the couple ‘case retrieved - case adapted’ are stored in the backup ﬁle of differences for future revising steps . 192 L . Manenti and F . Sartori Figure 5 An overview on the retrieval step and reusing step ( before adaptation ) Figure 6 Schematic representation of the revise step by means of substitutional adaptation : the four boxes overlap with the revising phases presented in Section 4 . 3 6 Discussion In 2008 , Greene et al . ( 2008 ) published a very interesting paper on the modern research trends in CBR research . They analysed the paper the literature present in the proceedings of the most important conferences on that theme ( i . e . , ECCBR and ICCBR ) according to a statistical approach , trying to understand how the topics of interest for the CBR community was going to change . Their conclusion about adaptation was the following : “ . . . One of the smaller clusters of research activity that has emerged from our analysis is in the area of case adaptation . Despite a strong showing in the early years of CBR , work in the area of adaptation is now far less prominent . . . ” Indeed , revising a solution proposed by a CBR system is extremely difﬁcult from the computational point of view . This is the reason why many researchers prefer to avoid the implementation of adaptation strategies in their systems , leaving it to the responsibility of system users , as pointed out in Section 2 . Anyway , as highlighted in the above - mentioned work “This cluster [ i . e . , adaptation ] reﬂects recent work in the area of case adaptation and includes practical work on domain - speciﬁc adaptation techniques and more general approaches to case adaptation . . . ” , that means how the need for effective adaptation algorithms and frameworks is still an open problem in the CBR research ﬁeld . In this paper , we have presented a framework for substitutional adaptation in the context of CRePERIE : as reported by Wilke and Bergmann ( 1998 ) “For CBR systems concerned with simple problem - solving tasks , simple substitutional adaptation is sufﬁcient . It is promising when the retrieved case will typically be very close to the target and consequently will require only minor modiﬁcations . ” In our opinion , this is true only in part : the simplicity of the problem - solving strategy depends on how it is represented . A case is a representation of a critical situation solved in the past , useful when a similar critical problem must be solved and no automatic approach is suitable : for example , in the SMMART project ( Bandini et al . , 2008 ) , the CBR approach was devoted to provide mechanics of Volvo repair shops with an effective and efﬁcient tool to troubleshoot truck engines . Repair shops had sophisticated tools based on different strategies to this scope , like model - based reasoning and fault trees , but they did not use them because of their complexity and the long time to solution . They preferred to exploit their experience to address the direction of further investigations to discover the root cause of a fault . In this sense , the choice of an adequate case structure is fundamental for obtaining a real support for the user , allowing transforming a complex decision - making process into a simpler one . The case structure adopted in the CRePERIE platform , described in the ﬁrst part of Section 3 , was perfect from this point of view . Moreover , the capability of a case - based system to ﬁnd retrieved cases very close to the target , with the consequence of requiring minor modiﬁcations on the reused solution , is an important beneﬁt of a CBR system , not a drawback as it seems from the above - mentioned sentence . Anyway , substitutional adaptation could be useful in the case of highly diverging solutions too , since the focus of this approach is on the differences existing between the two couples of case descriptions considered . Wilke and Bergmann ( 1998 ) continue their argumentation about substitutional adaptation as follows : “In this adaptation model , it is only possible to change the values of attributes . The structure of the new solution remains unchanged . Of course , the values of the attributes are reused from the old case , too , but it is possible to change some of them to get a solution of a better quality . Here , adaptation means a recalculation of several parameters depending on the relation of the attributes of the problem description of the query the similar case” . This is correct , and it is the reason behind the concrete applicability of substitutional approaches with respect Metadata support to retrieve and revise solutions in case - based reasoning 193 to other kinds of revising methods . Indeed , the solution structure is unchangeable in most domains where CBR can be applied . After all , the principle that ‘similar problems have similar solutions’ on which CBR is founded clearly addresses towards the need for solutions characterised by ﬁxed descriptions . But this is not a must : some attempts ( see e . g . , Bandini et al . , 2009 ) have demonstrated the applicability of the substitutional adaptation algorithm in context characterised by a low degree of variability in case description and solution representation . The real problem in these cases is to state the coherence of the adapted solution : in CRePERIE , the choice to have a precise structure for solution description has been made for sake of coherence with the whole case structure model , as well as with the implemented retrieval strategy ( that is the same for retrieving the couple of representatives to revise the solution too ) , but the adoption of a clear model based on metadata do not exclude the possibility to deal with varying solutions structures in future developments of the platform . From the metadata research point of view , the adoption of CBR approach to design and implement support systems could be an interesting research trend too . Metadata have been already adopted to store experiences : for example , Manouselis and Costopoulou ( 2006 ) developed a framework to manage metadata quality in the e - commerce ﬁeld , where an experience category was explicitly considered to archive the description and the results of quality approaches for evaluating an e - commerce resource . As reported by the authors , the experience category did not contain information about the quality approach itself , but about its application on various contexts . This makes the metadata adopted to represent experience reusable in a wider ( but homogeneous ) range of contexts . This idea is similar to the principles behind the development of CRePERIE : to have an abstract model of a framework is important to apply it to many different contexts . In our approach , different from Manouselis and Costopouolou , the metadata description of experiences concerns all the reasoning process , not only a part of it . We have given an abstract description of all the elements necessary to develop a CBR system , focusing , in particular , on the similarity functions to design and implement retrieve and revise phases of the 4R’s cycle , to give the possibility to make instances of them according to the nature of the knowledge involved . 7 Conclusion In this paper , we have presented CRePERIE , a platform for the development of CBR systems . This platform allows the user to implement quickly case structures and similarity algorithms for the retrieval phase when problems tackled by the CBR system are characterised by hierarchical representations of attributes . The platform has been successfully adopted in the context of SMMART Bandini et al . ( 2008 ) , a research project funded by European Commission where CBR has been exploited to build a truck troubleshooting module , in collaboration with Volvo Trucks : that initial version of CRePERIE , namely CReP ( Case Retrieval Platform ) , was simply a collection of ﬁles to deﬁne the case structure and the similarity algorithms , invoked by the main system as a web - service . The evolution of that initial platform towards a stand - alone application has been described , by means of which CBR systems can be implemented . The platform , in its current state , has been used as a tool for students of the Knowledge Engineering course at the University of Milan - Bicocca : they have used it for developing their projects , trying to highlight malfunctions and possible improvements . The last part of the system development was the recent addition of the revise step ( i . e . , adaptation ) algorithm , which is the main subject of this paper : in this way , CRePERIE has become a complete tool for the development of case - based applications , covering all the phases described in the 4Rs cycle . The metadata approach has been very useful also for the adaptation of reused solutions , allowing the adoption of the retrieval strategy for the identiﬁcation of past couples of cases to compare with the current one , to identify the most relevant pairs from the substitutional adaptation point of view . As described in Section 6 , revising solutions according to the substitutional adaptation methods has beneﬁts and drawbacks : indeed , the approach is applicable under precise conditions that partially limit its level of generality : it works very well with cases characterised by numerical attributes ; it works better when both case descriptions and solutions have ﬁxed structures ; the coherence of the adapted solutions should be evaluated by the user before retaining it . Anyway , the substitutional approach fully comply with the requirements behind the development of CRePERIE , i . e . , to consider cases characterised by hierarchical representations and homogeneous descriptions and solutions : future works are then devoted to optimise the performance of the algorithm , providing the platform with a more precise calculation of similarity among alphanumerical attributes , like strings and symbols , as well as to implement methods for the automatic generation of case - bases and for the visualisation of results . References Aamodt , A . and Plaza , E . ( 1994 ) ‘Case - based reasoning : foundational issues , methodological variations , and system approaches’ , Ai Communications , Vol . 7 , No . 1 , pp . 39 – 59 . Bandini , S . and Manzoni , S . ( 2001 ) ‘CBR adaptation for chemical formulation’ , Proceedings of 4th International Conference on CBR ICCBR01 , Vancouver , Canada , pp . 634 – 647 . Bandini , S . , Manzoni , S . and Sartori , F . ( 2002 ) ‘Acquiring knowledge and numerical data to support cbr retrieval’ , 194 L . Manenti and F . Sartori in Asunci ´o n G ´o mez - P ´e rez and Richard , V . ( Eds . ) : EKAW , Volume 2473 of Lecture Notes in Computer Science , Springer , Siguenza , Spain , pp . 8 – 13 . Bandini , S . , Colombo , E . , Sartori , F . and Vizzari , G . ( 2004 ) ‘Case based reasoning and production process design : the case of p - truck curing’ , in Peter , F . and Gonz ´a lez - Calero , ( Eds . ) : ECCBR , Volume 3155 of Lecture Notes in Computer Science , Springer , Madrid , Spain , pp . 504 – 517 . Bandini , S . , Mereghetti , P . , Merino , E . and Sartori , F . ( 2007 ) ‘Case - based support to small - medium enterprises : The symphony project’ , in Basili , R . and Pazienza , M . T . ( Eds . ) : AI ∗ IA , Volume 4733 of Lecture Notes in Computer Science , Springer , pp . 483 – 494 . Bandini , S . , Colombo , E . , Frisoni , G . , Sartori , F . and Svensson , J . ( 2008 ) ‘Case - based troubleshooting in the automotive context : The smmart project’ , in Althoff , K - D . , Bergmann , R . , Minor , M . and Hanft , A . ( Eds . ) : ECCBR , Trier , Germany , Volume 5239 of Lecture Notes in Computer Science , Springer , pp . 600 – 614 . Bandini , S . , Manzoni , S . and Sartori , F . ( 2009 ) ‘Case - based reasoning to support work and learning in small and medium enterprises’ , ICTAI , IEEE Computer Society , Newark , New Jersey , USA , pp . 253 – 260 . Bergmann , R . and Stahl , A . ( 1998 ) ‘Similarity measures for object - oriented case representations’ , in Smyth , B . and Cunningham , P . ( Eds . ) : EWCBR , Volume 1488 of Lecture Notes in Computer Science , Springer , Dublin , Ireland , pp . 25 – 36 . Craw , S . , Jarmulak , J . and Rowe , R . ( 2001 ) ‘Learning and applying case - based adaptation knowledge’ , in Aha , D . W . and Watson , I . ( Eds . ) : ICCBR , Volume of 2080 Lecture Notes in Computer Science , Springer , Vancouver , Canada , pp . 131 – 145 . Finnie , G . R . and Sun , Z . ( 2002 ) ‘Similarity and metrics in case - based reasoning’ , Int . J . Intell . Syst . , Vol . 17 , No . 3 , pp . 273 – 287 . Fuchs , B . , Lieber , J . , Mille , A . and Napoli , A . ( 1999 ) ‘Towards a uniﬁed theory of adaptation in case - based reasoning’ , Proceedings 3rd International Conference on CaseBased Reasoning ICCBR99 , Seeon Monastery , Germany , p . 723 . Greene , D . , Freyne , J . , Smyth , B . and Cunningham , P . ( 2008 ) ‘An analysis of research themes in the cbr conference literature’ , in Althoff , K - D . , Bergmann , R . , Minor , M . and Hanft , A . ( Eds . ) : ECCBR , Trier , Germany , Volume 5239 of Lecture Notes in Computer Science , Springer , pp . 18 – 43 . Hanney , K . and Keane , M . ( 1997 ) ‘The adaptation knowledge bottleneck : How to ease it by learning from cases’ , Proceedings of the Second International Conference on CaseBased Reasoning , Providence , Rhode Island , USA , pp . 359 – 370 . Hoffmann , J . ( 2002 ) ‘Extending ff to numerical state variables’ , in van Harmelen , F . ( Ed . ) , ECAI , IOS Press , Lyon , France , pp . 571 – 575 . Kolodner , J . L . ( 1992 ) ‘An introduction to case based reasoning’ , Artiﬁcial Intelligence Review , Vol . 6 , pp . 3 – 34 . Leake , D . B . , Kinley , A . and Wilson , D . ( 1996 ) ‘acquiring case adaptation knowledge : a hybrid approach’ , Proceedings of the Thirteenth National Conference on Artiﬁcial Intelligence , AAAI Press , Portland , Oregon , pp . 684 – 689 . Manenti , L . and Sartori , F . ( 2010 ) ‘Exploiting CReP for Knowledge Retrieval and Use in Complex Domains’ , Metadata and Semantic Research , pp . 160 – 171 . Manouselis , N . and Costopoulou , C . ( 2006 ) ‘Quality in metadata : a schema for e - commerce’ , Online Information Review , Vol . 30 , No . 3 , January , pp . 217 – 237 . Manzoni , S . , Sartori , F . and Vizzari , G . ( 2007 ) ‘Substitutional adaptation in case - based reasoning : a general framework applied to p - truck curing’ , Applied Artiﬁcial Intelligence , Vol . 21 , No . 4 , April , pp . 427 – 442 . Mcsherry , D . ( 1998 ) ‘An adaptation heuristic for case - based estimation’ , Advances in CaseBased Reasoning , Volume 1488 of Lecture Notes in Computer Science , Springer , pp . 184 – 195 . Neagu , N . and Faltings , B . ( 2001 ) ‘Exploiting Interchangeabilities for Case Adaptation’ , Proceedings of 4th International Conference on CBR ICCBR01 , Vancouver , Canada , pp . 422 – 436 , http : / / www . springer - link . com / content / m64k98v1kybl0lk5 Premraj , R . , Shepperd , M . and Cartwright , M . ( 2003 ) ‘Meta - data to guide retrieval in cbr for software cost prediction’ , 8th UK Workshop on Case - based Reasoning , Citeseer , Cambridge , UK , pp . 26 – 37 . Smyth , B . and Keane , M . T . ( 1998 ) ‘Adaptation - guided retrieval : questioning the similarity assumption in reasoning’ , Artiﬁcial Intelligence , Vol . 102 , No . 2 , pp . 249 – 293 . Shwartz , D . G . , Yilmaz , E . , Stoecklin , S . and Patel , M . ( 2004 ) A Metadata Architecture for Case - based Reasoning , Technical Report TR - 040203 , FSU Computer Science , Tallahassee , FL , USA . Tonidandel , F . Rillo , M . ( 2005 ) ‘Case adaptation by segment replanning for case - based planning systems’ , CaseBased Reasoning Research and Development , Volume 3620 of Lecture Notes in Computer Science , Springer , pp . 579 – 594 . Wilke , W . and Bergmann , R . ( 1998 ) ‘Techniques and knowledge used for adaptation during case - based problem solving’ , Tasks and Methods in Applied Artiﬁcial Intelligence , pp . 497 – 506 .