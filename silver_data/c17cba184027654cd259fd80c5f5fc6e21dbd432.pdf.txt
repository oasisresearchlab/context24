manuscript submitted to JGR - Space Physics Snakes on a Spaceship – An Overview of Python in Heliophysics A . G . Burrell 1 , 2 , A . Halford 3 , J . Klenzing 4 , R . A . Stoneback 2 , S . K . Morley 5 , A . M . Annex 6 , K . M . Laundal 7 , A . C . Kellerman 8 , D . Stansby 9 , J . Ma 10 1 Space Science Division , U . S . Naval Research Laboratory , Washington , DC , USA 2 William B . Hanson Center for Space Sciences , The University of Texas at Dallas , Richardson , TX , USA 3 Space Sciences Department , The Aerospace Corporation , Chantilly , VA 4 ITM Physics Laboratory / Code 675 , Goddard Space Flight Center Greenbelt , MD , 20771 5 Space Science and Applications , Los Alamos National Laboratory , Los Alamos , NM 87545 , USA 6 Department of Earth and Planetary Sciences , Johns Hopkins University , Baltimore , MD , 21218 7 Birkeland Centre for Space Science , University in Bergen , Norway 8 Department of Earth Planetary and Space Sciences , University of California , Los Angeles , CA 9 Imperial College London , London , SW7 2AZ , UK 10 Facebook AI Research , Menlo Park , CA 94025 Key Points : • A wealth of Python analysis tools exist to support space physics research • Open source tools aid reproducible science • Collaborative programming is essential for analysis tools to keep pace with sci - entiﬁc progress Corresponding author : A . G . Burrell , angeline . burrell @ nrl . navy . mil – 1 – a r X i v : 1901 . 00143v1 [ a s t r o - ph . I M ] 1 J a n 2019 manuscript submitted to JGR - Space Physics Abstract Computational analysis has become ubiquitous within the heliophysics community . However , community standards for peer - review of codes and analysis have lagged be - hind these developments . This absence has contributed to the reproducibility crisis , where inadequate analysis descriptions and loss of scientiﬁc data have made scientiﬁc studies diﬃcult or impossible to replicate . The heliophysics community has responded to this challenge by expressing a desire for a more open , collaborative set of analysis tools . This article summarizes the current state of these eﬀorts and presents an overview of many of the existing Python heliophysics tools . It also outlines the challenges facing community members who are working towards the goal of an open , collaborative , Python heliophysics toolkit and presents guidelines that can ease the transition from individualistic data analysis practices to an accountable , communalistic environment . Plain Language Summary As computers have become more powerful and bet - ter at solving complex mathematical equations , space scientists have relied more and more on computational tools . Community standards for peer - review of computer codes and similar analysis tools have not kept pace with the development of these technolo - gies . This lag in community accountability has contributed to a crisis in the scientiﬁc literature , where it has been hard or even impossible to verify past studies . Space scientists have responded to this challenge with a desire for open , shared analysis tools . This article summarizes the current state of these eﬀorts and presents an overview of many of the existing Python analysis tools used in space physics . It also outlines the challenges facing scientists who are working towards the goal of an open , shared , Python space science toolkit and presents guidelines that can ease the transition from private to public data analysis practices . 1 Introduction The proliferation of observed and modeled data within the ﬁeld of heliophysics , a ﬁeld that encompasses solar , magnetospheric , and upper atmospheric studies within the solar system , has vastly expanded the possibilities for science investigation . These ever expanding archives ( e . g . , the Coupling , Energetics and Dynamics of Atmospheric Regions ( CEDAR ) Madrigal database , the National Aeronautics and Space Admin - istration ( NASA ) Coordinated Data Analysis Web ( CDAWeb ) , and the Near Earth Space data infrastructure for e - science ( ESPAS ) ) are accessible and searchable , but ( appropriately ) do not provide many tools for identifying speciﬁc case studies or per - forming data analysis . This absence has contributed to the reproducibility crisis , where the results of scientiﬁc studies have been shown to be diﬃcult or even impossible to replicate ( Peng , 2011 ; Gil et al . , 2016 ) . Additionally , as the heliophysics community moves toward solving more complex interdisciplinary problems through data science techniques , a common infrastructure capable of handling diverse data sets is required ( McGranaghan et al . , 2017 ) . The challenges presented by large , distinct data sets and unreproducible results may be surmounted using currently available tools and techniques . Other scientiﬁc communities have tackled these challenges , providing an example for the heliophysics community to follow . For example , the Incorporated Research Institutions for Seis - mology ( IRIS ) , provides services that include batch data downloads and searchable lists of institution and community developed software ( IRIS : Data Services , 2018 ) . This article presents a framework for creating , maintaining , and sharing these tools within the space physics community . It begins in section 2 by discussing the beneﬁts of open source tools in general , and Python ( van Rossum , 1995 ) in particular , to the scientiﬁc community . Section 3 then presents a summary of currently available helio - – 2 – manuscript submitted to JGR - Space Physics physics Python packages . Finally , a framework for future community development is presented in section 4 . The desire for an overarching framework ( inspired by successful projects in other disciplines , such as AstroPy ( Astropy Collaboration et al . , 2013 ) ) has been repeatedly expressed in space physics community meetings and workshops ( e . g . , A . Burrell et al . , 2017 ; R . Stoneback et al . , 2017 ) . 2 Upholding Mertonian norms The modern , Western scientiﬁc ethos can be described by the Mertonian norms of universalism , communalism , disinterestedness , and organized skepticism ( Merton , 1957 ) . Universalism speaks to the expectation that scientiﬁc results will be evaluated on their own merit . Communalism asserts that scientiﬁc knowledge belongs to the entire community , not an individual or single institution . Disinterestedness espouses the rejection of personal gain , in terms of both prestige and income . Organized skep - ticism requires scientists to be critical of new and old ideas presented by themselves and others in the community . These norms , intended to characterize the social aspects of scientiﬁc culture , show a strong subscription across disciplines . The vast majority of scientists believe , to a great extent , that these norms should be upheld ( M . S . An - derson et al . , 2010 ) . All of these norms support the adoption of the open source philosophy , which refers to things that have been made publicly accessible for people to use , modify , and share . Making science and scientiﬁc analysis open source has a wide range of beneﬁts . It encourages organized skepticism and addresses the reproducibility crisis ( Gil et al . , 2016 ) , since all community members would have all of the necessary information available to independently evaluate and build upon past work ( Peng , 2011 ) . With proper citation , it brings scientiﬁc work that is currently being performed behind the scenes into the open where it can be appropriately evaluated and recognized , reducing opportunities for methodological plagiarism . It also reduces gatekeeping ( upholding communalism and universalism ) , since data and analysis tools would not be hidden behind a paywall . The reduction of gatekeeping has both ethical and practical beneﬁts , as reduced gatekeeping has been shown to increase diversity within the ﬁeld ( Murray et al . , 2018 ) . Although the beneﬁts of a diverse scientiﬁc community are obvious , research has shown that diverse working groups produce higher quality and better cited research ( Jehn et al . , 1999 ; M . W . Nielsen et al . , 2017 ; AlShebli et al . , 2018 ) . These practical beneﬁts also improve the working lives of individual researcher , leading to improved well - being and job satisfaction ( Kanter , 2008 ; Choi , 2017 ) . Even though open science both ﬁts with the Western scientiﬁc ethos and has been shown to help researchers succeed through increased acknowledgement for traditionally unacknowledged work , increased citations , media attention , funding opportunities , and potential collaborations ( McKiernan et al . , 2016 ) , there is still considerable resistance across the community towards adopting these practices . Opponents of open source practices in particular ( as open source practices are the focus of this paper ) give a range of reasons to keep scientiﬁc analysis and data private , including plagiarism , misuse of open science products , risks to career advancement , previous lack of publication opportunities , giving up an edge in funding opportunities , lack of funding for open source software in space sciences , the possibility of producing a new set of gatekeepers with additional requirements for scientiﬁc productivity , and the capturing of academic labor output by commercial interests ( e . g . , Tyﬁeld , 2013 ; Longo & Drazen , 2016 ; Lancaster , 2016 ) . There is also a trend for many researchers to agree with open code policies in principle , but not in practice ( Shamir et al . , 2013 ) . The adoption of open source software practices can be hampered by a lack of familiarity with available tools and by concerns about short term productivity . Although the impacts of the open – 3 – manuscript submitted to JGR - Space Physics source movement on research and individual scientists are ongoing , its early impacts are positive ( McKiernan et al . , 2016 , and references therein ) . Following the steps and procedures outlined section 4 will help the space physics community avoid many of the potential negative eﬀects of open source science . Open source science is most easily disseminated when scientists program their tools in an open source language . While there are many options for open source languages , this paper focuses on the applicability of Python to space science . Python is a popular option for building scientiﬁc data analysis tools , because it is a community driven , open source language , with a broad spectrum of well developed packages . Two features make Python stand out as a language : the relative maturity of Python for scientiﬁc applications and the widespread use of Python outside of academia . Scientiﬁc programming in Python typically builds oﬀ of the NumPy ( Oliphant , 2006 ) and SciPy ( Jones et al . , 2001 ) libraries , which form a mature foundation for scientiﬁc applications . A rich ecosystem of software packages that build on the ‘sci - entiﬁc stack’ of Python ( NumPy and SciPy ) are available ; this paper describes the current heliophysics ecosystem . In addition , legacy codes in languages like Fortran ( FORmula TRANslation , Backus ( 1998 ) ) and C ( Ritchie , 1996 ) are easily wrapped in Python . Many of the models discussed in Section A . 2 utilize this functionality to make empirical models more widely available to the community . Python is a high - level language that natively handles many of the required computational tasks ( such as memory management and compilation ) without requiring any instruction from the developer . This lowers the barrier for new scientiﬁc programmers and allows scientists to focus on their algorithms and analysis rather than the details of computer program - ming . Finally , SciPy provides the functionality to read proprietary data sets , including those written by the Interactive Data Language ( IDL , Harris Geospatial Solutions , Inc . ( 2018 ) ) and Matrix Laboratory ( MATLAB , MATLAB ( 2018 ) ) , allowing for a smooth transition in working environments that use legacy codes and datasets . The widespread use of Python outside of the immediate heliophysics community has a number of advantages . Commonly - used techniques such as signal processing have a large support network , allowing the heliophysics community to beneﬁt from outside expertise . It ensures continued language development and support for new technology , since its popularity throughout the global programming community pro - vides the critical mass needed for such investment . Python has been broadly adopted as a teaching language ( Fangohr , 2004 ) , allowing the heliophysics community to build on the budding expertise of computationally literate students . Additionally , the use of Python in our community provides students with transferable skills for industry careers ( TIOBE Index , 2018 ; PYPL PopularitY of Programming Language , 2018 ) . 3 Overview of Current Packages Heliophysics is a diverse research community , with research interests reaching from the sun to the lower thermosphere of solar planets and methods encompassing active experiments , ground and space - based observations , modeling , and theory . An enterprise this vast requires a wide range of tools . Figure 1 outlines the types of Python packages currently available and their regions of specialization , while Table 1 supplies their licensing information , package location , and the section in appendix A that con - tains a description of each package . Although not a complete list of heliophysics Python packages , this ﬁgure shows the community written packages commonly used at the time of publication , as determined through an international survey designed to gauge com - munity involvement in collaborative space physics python projects ( A . G . Burrell et al . , 2018 ) . This survey was distributed to six space physics mailing lists and received 223 responses ( 195 complete and 28 partial ) from heliophysicists of all career stages – 4 – manuscript submitted to JGR - Space Physics across 28 countries and 6 continents . These project descriptions are also limited to include only those that are all free and open - source software ( FOSS ) . Figure 1 . Community developed heliophysics packages , grouped by ﬁeld and purpose . At the time of publication , software development within the space physics com - munity is largely an individual eﬀort . For example , the survey results reported that 92 . 9 % of respondents wrote their own analysis code and only 18 % contributed to com - munity packages . This has lead to some overlap of functionality in the community written packages . Common areas of overlap include ﬁle handling routines , time handling utilities , legacy model implementations , and coordinate transformations . For example , there are three diﬀerent packages that load NASA common data format ( CDF ) ﬁles and three diﬀerent packages that use the International Geomagnetic Reference Magnetic Field ( IGRF ; Th´ebault , Finlay , and Toh ( 2015 ) ) . The ﬁrst instance of overlap is a function of early development and diﬀerent focuses within heliophysics . SpacePy ( see section A . 6 . 3 ) was developed ﬁrst and provides full CDF library support ( reading and writing ) along with many other tools for magnetospheric physics . pysatCDF ( see section A . 3 . 3 ) was developed as a stand - alone python CDF reader to provide a streamlined user experience by developers in the ionospheric community . CDFlib ( see section A . 3 . 1 ) was developed recently , and contains a pure Python CDF reader and writer ( as opposed to a Python wrapper for the NASA CDF C library ) . The second example of overlap is less avoidable . The IGRF is used in two of the coordinate transformation packages ( AACGMV2 in section A . 4 . 1 and pysatMagVect in section A . 4 . 4 ) , the coordinate transformations within SpacePy , and the modeled data access and analysis package , pyglow ( see section A . 2 . 5 ) . The IGRF implementation within the coordinate packages and SpacePy is contained internally and it would not be desirable for them to use a common python IGRF python package . The pyglow package is the only one of these packages to provide the user with the direct output from IGRF . While the pyglow implementation may not be ideal for all users , since the package contains many other models and was not developed by the authors of IGRF , it does provide a unique tool needed by the heliophysics community . – 5 – manuscript submitted to JGR - Space Physics Table 1 . License , description section , and location of alphabetically ordered community devel - oped heliophysics packages . License acronyms are deﬁned in section 4 . 2 . Name License Section Location AACGMV2 MIT A . 4 . 1 https : / / github . com / aburrell / aacgmv2 analysator GPL - 2 A . 2 . 1 https : / / github . com / fmihpc / analysator apexpy MIT A . 4 . 2 https : / / github . com / aburrell / apexpy Astropy BSD A . 6 . 1 http : / / www . astropy . org CDFlib MIT A . 3 . 1 https : / / github . com / MAVENSDC / cdflib DaViTPy / pyDARN GPL - 3 . 0 A . 1 . 1 https : / / github . com / vtsuperdarn / davitpy digital rf BSD A . 1 . 2 https : / / github . com / MITHaystack / digital rf GeoData MIT A . 1 . 3 https : / / github . com / jswoboda / GeoData geospacepy MIT A . 6 . 2 https : / / github . com / lkilcommons / geospacepy - lite HelioPy GPL - 3 . 0 A . 1 . 4 http : / / docs . heliopy . org jplephem MIT A . 5 . 4 https : / / pypi . org / project / jplephem MadrigalWeb MIT A . 1 . 5 http : / / cedar . openmadrigal . org OCBpy BSD - 3 - Clause A . 4 . 3 https : / / github . com / aburrell / ocbpy OvationPyme LGPL - 3 . 0 A . 2 . 2 https : / / github . com / lkilcommons / OvationPyme PlasmaPy BSD + Patent A . 6 . 5 http : / / www . plasmapy . org pyAMPS MIT A . 2 . 3 https : / / github . com / klaundal / pyAMPS PyEphem LGPL A . 5 . 2 http : / / rhodesmill . org / pyephem / index . html pyForecastTools BSD - 3 - Clause A . 2 . 4 https : / / github . com / drsteve / PyForecastTools pyglow MIT A . 2 . 5 https : / / github . com / timduly4 / pyglow pyLTR BSD - 3 - Clause A . 3 . 2 https : / / github . com / jma127 / pyltr pysat BSD - 3 - Clause A . 1 . 6 https : / / github . com / rstoneback / pysat pysatCDF BSD - 3 - Clause A . 3 . 3 https : / / github . com / rstoneback / pysatcdf pysatMagVect BSD - 3 - Clause A . 4 . 4 https : / / github . com / rstoneback / pysatmagvect SGP4 MIT A . 5 . 3 https : / / pypi . org / project / sgp4 skyﬁeld MIT A . 5 . 4 http : / / rhodesmill . org / skyfield SpacePy PSF A . 6 . 3 https : / / github . com / spacepy / spacepy SpiceyPy MIT A . 5 . 1 https : / / github . com / AndrewAnnex / SpiceyPy SunPy MIT A . 6 . 4 https : / / sunpy . org – 6 – manuscript submitted to JGR - Space Physics Apart from obvious overlap in package functionality and model implementations , there are also instances of conceptual overlap between the packages listed in Figure 1 and Table 1 . For example , the packages that focus on the data access and analysis of observations all contain routines to read and load the observations into a python object that may be easily used for data analysis . However , this overlap is not necessarily a problem . Several of these packages focus on a single instrument network , allowing the experts to deal with the speciﬁc peculiarities in that data set ( e . g . , DaViTpy / pyDARN in section A . 1 . 1 ) . Others , such as HelioPy and pysat ( section A . 1 . 6 ) , focus on the in - struments in diﬀerent subdisciplines of heliophysics . The packages with broader scopes can beneﬁt from the targeted work done by the more focused packages . pysat sets a good example of this practice ; it uses pysatCDF to read CDF ﬁles , DaViTpy / pyDARN to read Super Dual Auroral Radar Network ( SuperDARN ) data , pysatMagVect for magnetic vector transformations , pyglow for model access , SGP4 and pyEphem for satellite orbit propagation , madrigalWeb for downloading data from Madrigal , as well as AACGMv2 and apexpy for magnetic coordinates . 4 Towards a Heliophysics Framework The broad scope of heliophysics , the diverse nature of heliophysics data sets , the lack of funding for scientiﬁc software development , and the current tradition of individ - ualism in data analysis all present challenges for the development of a useful Python toolkit for space physics . Despite these challenges , the community has expressed a desire to create a uniﬁed framework , similar to Astropy ( described in section A . 6 . 1 ) , for space science Python tools ( A . Burrell et al . , 2017 ) . As the community works towards this uniﬁed framework , there are steps that can be taken to reduce duplicated eﬀorts and increase the utility of existing packages . These steps include establishing a steering committee , centralizing information about all Python heliophysics projects ( as discussed in section 4 . 1 ) , providing guidelines for making these projects accessible and connectible ( as described in section 4 . 2 ) , ensuring that scientists receive appropriate recognition for their work ( as discussed in section 4 . 3 ) , encouraging best practices for scientists and developers ( as discussed in section 4 . 4 ) , and holding scientiﬁc software to the same standards that scientiﬁc theses are held ( as discussed in section 4 . 5 ) . En - gaging in these practices will improve the trustworthiness of scientiﬁc analysis ( Miller , 2018 ; Kanewala & Bieman , 2014 ) and address many of the concerns raised by oppo - nents of the open source philosophy described in section 2 . 4 . 1 Centralization As with many international , interdisciplinary , collaborative eﬀorts the best way to centralize is online . To this end , a website has been set up to act as a hub for he - liophysics Python packages at http : / / www . heliopython . org . Currently , this website focuses on providing a place to easily locate heliophysics Python packages and commu - nity developers . Python packages are not hosted at this website , allowing developers to determine which hosting service best serves their own needs . To be included on this website , package authors submit a pull request on the website’s GitHub page and follow the guidelines ( which currently include ensuring that the software is citable and FOSS ) . The code should also provide a useful tool for heliophysics research , falling into one of the categories outlined in Figure 1 . Other websites also attempt to curate sub - sets of heliophysics software ( not limited to Python packages ) , including the CEDAR wiki ( http : / / cedarweb . vsp . ucar . edu / wiki / index . php / Community : Software ) . Another goal of the website is to involve new community members in develop - ment . By laying out where work has already been done , new developers can dedicate their time to areas in need of improvement , rather than re - inventing the wheel . Increas - ing community involvement will also help maintain active development , keep packages – 7 – manuscript submitted to JGR - Space Physics up to date , and improve communication between scientists involved with model devel - opment , instrument development , data analysis , and space weather products . These community organization eﬀorts are recent , and could beneﬁt from fol - lowing the example of more mature scientiﬁc community organizations , such as the Incorporated Research Institutions for Seismology ( IRIS ) . The IRIS consortium aims to advance discovery , research , and education in seismology and has a large mem - bership from research groups across the globe . Their website provides access to data , derived data products , sponsored and community developed software , educa - tion resources , archives of posters and presentations , annual reports , and much more ( https : / / www . iris . edu / hq / ) . The scope of involvement at IRIS is larger than that currently envisioned by the heliophysics Python community , but following their exam - ple and involving national and international professional organizations would increase community involvement , encourage collaboration , and reduce instances of overlapping software development . 4 . 2 Accessibility Software licenses are used to set the terms on which the software may be used , modiﬁed , or distributed . There are three types of software licenses : FOSS ( which may be further divided into permissive and copyleft ) , proprietary , and hybrid ( Morin et al . , 2012 ) . FOSS licenses are typically used by academic institutions , since they best espouse the scientiﬁc ethos by fostering collaboration , improving reproducibility , and aiding the peer - review process . Permissive FOSS licenses ensure the widest possible distribution and adaptation of the software , place the fewest restrictions on users , and ease the incorporation of the code by others . The two most common permissive FOSS licenses are the modi - ﬁed BSD ( Berkeley Software Development ) license ( The BSD License , 2018 ) and the MIT ( Massachusetts Institute of Technology ) license ( The MIT License , 2018 ) . These licenses allow commercial use , distribution , modiﬁcation , and private use as long as the original developers are attributed and are not held liable ( there is no warranty ) . Table 1 shows that 22 of the 27 packages have a permissive FOSS license ( PSF , the Python Software Foundation license is a BSD - style permissive FOSS license ) . Copyleft licenses were created to assure that the beneﬁts of FOSS are maintained in all future derivatives of the software . The GNU ( GNU’s Not Unix ! ) General Public License ( GPL ) ( Free Software Foundation , Inc . , 2007 ) is the best - known , strong copy - left license . These licenses explicitly describe the treatment of patents related to the software and require that any computer code linked to the licensed software have the same license . The remaining packages in Table 1 have either a GPL or Lesser GPL ( LGPL ) license . When choosing a software license , it is important to involve your local technology transfer oﬃce . However , for new and existing heliophysics projects to eventually form a cohesive framework , they must all have compatible licenses ( Morin et al . , 2012 ) . The adaptation of permissive FOSS licenses best supports this goal , and so should be strongly considered . Another important aspect of accessibility is making the source code publicly available ( Shamir et al . , 2013 ) . The centralization eﬀorts described in section 4 . 1 can only succeed if the community makes their code available online . Few projects have the funds to set up and maintain an individual repository in perpetuity . Code sharing directories such as GitHub ( https : / / github . com ) and RunMyCode . org ( Stodden et al . , 2012 ) allow scientists to share , archive , and distribute software at no cost , while also providing a platform for collaborative work . – 8 – manuscript submitted to JGR - Space Physics Sometimes the analysis code for a particular project may not have a scope large enough for its authors to justify creating a repository and DOI for it . In such cases , it may be possible to publish source code as supplemental information in the article that shares the results from that project . This use of supplemental information is explicitly encouraged by some space physics journals , including the American Geophysical Union journals ( American Geophysical Union , 2018 ) . However , other journals ( including Eu - ropean Geophysical Union journals ) require that computer program code be deposited in a repository with a persistent identiﬁer such as a DOI ( Annales Geophysicae , 2018 ) . 4 . 3 Attribution A common argument against open source data and software is the danger of plagiarism . When dealing with Python packages , there are two aspects of attribution that should be considered : citations and collaborations . Citations deal with provid - ing scientists with credit for their products ( whether they be data sets , software , or theories ) and collaborations deal with the ethics of building upon another person’s work . Citations are at the core of academic culture . Most heliophysics journals now require citations to data sets and software , discouraging plagiarism and encouraging communalism . Properly citing FOSS used to obtain and analyze data provides an incentive for other scientists to provide quality FOSS . Since the advent of the Digital Object Identiﬁer ( DOI ) , it is possible to cite software projects and data sets . One service that oﬀers DOIs for software packages is Zenodo ( L . H . Nielsen & Smith , 2014 ) . Unlike journal articles , which will not change after publication , software and data sets often have diﬀerent versions . Zenodo deals with this challenge by allowing the developers to set up a DOI for a package in general and have separate DOIs for diﬀerent versions . Before software DOIs , it was common to provide attribution by entering into a collaboration with the person who created the data set that was used or provided the analysis software . This could be an active or an in - name only collaboration , where the work already done was acknowledge by oﬀering a co - authorship . This is a valid method of attribution , though it should not replace proper referencing as described above . This type of consideration should also be extended when beginning a new heliophysics Python project . For example , before creating a Python package for an existing model , it is best practice to contact the model’s author . This ensures that the resulting product is of the highest quality and makes it easier to maintain the package when future versions of the model are released . Another option is for project authors to write a methods paper . This follows the tradition of instrument papers of heliophysics , and has the advantage of allowing the project authors to describe the scope and purpose of their project , as well as outline plans for future development . Like instrument papers , software papers may be published in either dedicated journals ( such as the Journal of Open Source Software ( Smith , 2018 ) ) and those with a larger scope ( such as the Journal of Geophysical Research : Space Physics ( American Geophysical Union , 2018 ) ) . When using software that has a published methods papers , both the paper and the software DOI should be cited . Because diﬀerent people are often involved in each part of a project , this ensures that the eﬀorts of all involved are recognized . For example , an article that uses apexpy should cite Richmond ( 1995 ) , who describes the coordinate systems , Emmert , Rich - mond , and Drob ( 2010 ) , which outlines the computational process used to smoothly represent modiﬁed apex and quasi - dipole coordinates , and van der Meeren , Burrell , and Laundal ( 2018 ) , the Python implementation of Emmert et al . ( 2010 ) ’s code . In order to ensure that citations are correctly made , it is useful for the software develop - – 9 – manuscript submitted to JGR - Space Physics ers to provide this information in much the same way that data and instrument teams currently do . 4 . 4 Best Practices Space scientists historically have not received formal education in computer pro - gramming . This deﬁcit means that most of the people developing scientiﬁc analysis software are not aware of the best practices involved in writing code , providing docu - mentation , and working with collaborators . This should not be a barrier to publishing code . If it is good enough to produce reliable scientiﬁc results it is both good enough for peer consumption and of interest to the scientiﬁc community ( Barnes , 2010 ; Shamir et al . , 2013 ) . However , good coding practices ( like a well written paper ) improve both adaptation by others and reproducibility . To encourage more scientists to contribute code to projects , this section provides an overview of the most relevant of these best practices . Best practices for coding include supporting the current standard version of the programming language , adhering to the style guide for the programming language , commenting , using descriptive variables , and reducing in - code duplication . At the time of publication , Python 2 is a legacy version with limited future support ( Peterson , 2008 ) and Python 3 is undergoing active development . It is possible to write code compatible to both Python 2 and 3 ; this is the strategy that has been followed in most of the packages described in appendix A . Style guidelines for Python are described in Python Enhancement Proposal ( PEP ) 8 ( van Rossum et al . , 2013 ) . PEPs are community proposed design documents used to inform the Python community about a new feature , process , or environment . PEP 8 is a style guide for Python code that will help developers write programs that are suitable for community development and incorporation into other packages . Commenting and using descriptive variables ensure that a new user will be able to follow the coded algorithm and ﬁnd references to the literature when certain methods or constants are used . For example , when coding up a theory or model that is published in a journal , it is useful to cite papers with page or equation numbers as comments when they are coded . Comments should be included for every function , deﬁned constant , and algorithm stage in the software . This low - level documentation prevents confusion over units , sources of empirically determined values , and reasons why a particular method was implemented . Python provides two ways to comment code , through traditional source code comments and through docstrings . Docstrings are literal strings that describe a Python package , function , class , or method , and occur as the ﬁrst statement in one of these objects . Well written docstrings are an important element of good Python code , since standard use dictates that they contain a summary of the object that they are contained in . This practice allows docstrings to improve the maintainability and clarity of diﬀerent routines , as well as speed up the learning curve for new users . They are an improvement over standard comments because they are accessible at runtime , and so do not require the user to open up the source code . The standard conventions for writing docstrings are described in PEP 257 ( Goodger & van Rossum , 2001 ) . Variable names are another potential source of elucidation or confusion . Best practice dictates using descriptive variables , or ensuring that the variable name indi - cates what it is . For example , iterative counts are typically have either single letter , lower case names ( e . g . , i , j , k ) or names that reﬂect their purpose ( e . g . , counter , inum , ion count ) . – 10 – manuscript submitted to JGR - Space Physics Documentation is very important , since it ensures that changes to the code ( which will aﬀect scientists abilities to replicate results in the future ) can be easily identiﬁed . This is vital for reproducibility as scientists move onto other projects , making their expertise less accessible to their former collaborators and future investigators . Com - ments and docstrings are examples of low - level documentation , providing details about speciﬁc parts of a software package . However , their dispersion throughout a package , lack of cohesion , and speciﬁcity make them insuﬃcient to serve as an overarching ( or high - level ) document . High - level documentation should provide general information about the project , an installation guide , useful references to appropriate literature , tutorials , and more . Adding to high - level documentation is an excellent way for new users to contribute to software packages , since they have a perspective that the project developers lack . The SunPy project is an excellent example of documented software . They pro - vide general information about the project , an installation guide , community and de - veloper guidelines , and extensive downloadable tutorials ( available at the URL shown in Table 1 ) . Not all projects will be able to support such extensive online documenta - tion . Free online documentation is supported through a variety of websites , including readthedocs . org . This website and other available tools often take advantage of internal , low - level documentation by turning all the docstrings in a package into a manual ( Brandl & the Sphinx team , 2018 ; numpydoc maintainers , 2018 ) , providing a structure around which more extenstive documentation may be written . Duplication within a package , deﬁned as the existence of code that is either identical to another section of code or has the same intent and structure , happens naturally during the development of complex code . Often this happens unintentionally , when the developer does not yet realize how useful a particular portion of the algorithm will be . Other times this happens intentionally , with the developer deciding that the abstraction necessary to remove the duplication will negatively impact functionality . In general , duplication is problematic as it makes software packages harder to maintain . Multiple instances of the same structure make algorithms more diﬃcult to analyze and increases the likelihood of not ﬁxing a known bug , since ﬁnding all instances of the bug will be more diﬃcult ( Kanewala & Bieman , 2014 ) . Thus , best practice dictates that in - code duplication should be removed or managed through documentation . 4 . 5 Rigor Producing scientiﬁc analysis tools is an integral part of modern heliophsyics analysis , and so should be treated with the same level of skepticism as the results that it produces . Peer - reviewing code is one way to ensure that computational methodology is treated with the same level of rigor as other scientiﬁc analysis methods . Code review may be performed in - house , with collaborating developers checking each others code ( Kelly et al . , 2011 ) . It may also be performed as a part of the publishing process . Journals dedicated to publishing and reviewing software ( e . g . , Smith , 2018 ) have review criteria that require the implementation of many of the best practices outlined above , including licensing , documentation , and attribution . In addition , the reviewers also ensure that the software under consideration is functional . To be functional , software must conclusively address a demonstrated need . In science , ﬁnding a need for a software tool is not diﬃcult . However , testing the ability of the software to ﬁll that need can be , since it requires that the developers determine the applicable range of conditions their algorithm can support and construct tests that convincingly demonstrate expected outcomes . Common software testing methods include unit , integration , system , and acceptance testing . Unit tests are an application of component testing , a method that tests the smallest unit of an application . Python has native and third - party frameworks for – 11 – manuscript submitted to JGR - Space Physics unit testing that allow each object in a program to be subjected to a series of tests , ensuring it behaves as expected under a variety of operating conditions . Unit tests are most practically implemented as code is written , discouraging in - code duplication and reducing instances when analysis results are contaminated by software bugs . The adoption of widespread unit testing promotes the use of short methods with outputs that are readily veriﬁable . Even when each individual component of a program is working well , problems may still be encountered when they are brought together . Integration testing ensures that disparate parts of a code behave as expected when they invoke each other and pass data amongst themselves . The same frameworks that Python uses for unit testing may also be used for integration testing , since the diﬀerence between unit and integration testing is the scope of the tests rather then the implementation method . System testing is a type of black - box testing that evaluates a computing system’s compliance with the requirements of a software program . This type of testing ensures that the program is behaving as expected in its current environment . There are many diﬀerent types of system tests , some that are commonly used by scientiﬁc developers include installation testing ( ensuring dependencies are installed and up - to - date ) and regression testing ( re - running integration and unit tests to ensure the software still performs as expected ) . Acceptance testing is testing performed by users . This type of test can be per - formed locally , but it is also common to release a package as an ‘alpha’ or ‘beta’ version for this purpose . Acceptance testing is common in heliophysics , where the small size of the community encourages contact between users and developers . Repositories such as GitHub also assist with this level of testing , providing a channel for users to notify developers of problems they encounter when using a software package . Best practice dictates unit , integration , and system tests should be automated , allowing an inexperienced user to run the software with conﬁdence . There are several commercial services that will automatically test appropriately conﬁgured repositories ( e . g . , TRAVIS CI , GMBH , 2018 ; Appveyor Systems Inc . , 2018 ) . Many oﬀer these services for free to smaller , FOSS projects . These tools promote eﬃcient use of devel - oper time and help users determine which packages are suitable for their research and development environment . Despite the dangers of using untested software ( e . g . , Miller , 2018 ) , scientiﬁc soft - ware is largely untested or under tested . The reasons behind this have been attributed to inherent diﬃculties in applying tests to scientiﬁc software and the culture around scientiﬁc software development ( Kanewala & Bieman , 2014 ) . The greatest technical challenge facing scientiﬁc software testing is the lack of an oracle ( or known truth ) to test against ( Kelly et al . , 2011 ) . Techniques such as metamorphic , property based , and ‘golden run’ testing may overcome some of these testing challenges , though more research from the software engineering community is needed ( Kanewala & Bieman , 2014 , and references therein ) . 5 Summary The heliophysics community has expressed a desire to create a uniﬁed framework , similar to Astropy , for space science Python tools . This article has outlined some of the challenges facing those of us working towards this goal and presented guidelines that can ease the transition from individualistic and proprietary coding practices to a communalistic environment that takes advantage of each individual’s expertise . Many of the existing tools have been outlined as well , and a central location for further information about these Python projects has been identiﬁed . – 12 – manuscript submitted to JGR - Space Physics Currently , much of this eﬀort has been undertaken by individuals and small groups with little communication between the parties . This has led to signiﬁcant over - lap between certain packages . For instance , considering only the packages summarized in this article , there are three diﬀerent CDF readers . This overlap is to be expected at the beginning of a community development eﬀort . There also tends to be more du - plication of eﬀort between projects written by diﬀerent heliophysics disciplines . While combining these packages into a single framework may be desirable , it is more prac - tical to create packages for each subdiscipline that play well together and rely on a common framework for truly universal tasks , such as access to ﬁle reading utilities and the calculation of plasma parameters . Following the best practices in software development and citations is an im - portant step for creating an environment where collaborative software can ﬂourish . Although space scientists have not historically been educated in software development and may not be aware of the best practices to follow when developing software , these practices have immediate beneﬁts that make their adoption advantageous . By adopt - ing these practices in current and future work , the heliophysics community can reduce instances of unreproducible research . Making science and scientiﬁc analysis open source , although not always possible due to institutional constraints , is consistent with scientiﬁc ethics and can increase the ease and quality of scientiﬁc research . FOSS for scientiﬁc analysis makes it possible to fully replicate past scientiﬁc analysis , reduces the monetary barrier to participa - tion caused by propriety software , and allows all stages of scientiﬁc analysis to receive appropriate acknowledgement . Ultimately , open source analysis leads to an increase in diversity within the scientiﬁc community , increased creativity , and better cited re - search . A Description of Current Packages The detailed descriptions provided here are intended to introduce the heliophysics community to the range of available tools and act as a reference for the packages whose scope are small enough that a paper dedicated to their description is not currently a feasible option . A . 1 Observational Data Access and Analysis Experimental and observational scientists in the heliophysics community rely on ground and space - based data from a wide variety of instruments . Each of these data sets have their own quirks and standards . The Python packages in this section support data access and analysis for one or more observational data sets . A . 1 . 1 DaViTPy / pyDARN SuperDARN consists of High Frequency ( HF ) coherent scatter radars distributed over the northern and southern high and mid latitudes ( Greenwald et al . , 1995 ; Chisham et al . , 2007 ) . This network monitors the plasma convection over the poles through backscatter from ﬁeld - aligned ionospheric irregularities , facilitates studies of magnetosphere - ionosphere interactions , and provides important ionospheric speciﬁca - tions . The Python package pyDARN ( currently provided as part of DaViTpy , but also being re - written as a more focused Python package ) provides tools to retrieve , load , analyze , and visualize the SuperDARN backscatter ( Sterne et al . , 2017 ) . The core functionality of DaViTpy , pyDARN , sets out to provide the necessary tools to download , read , and plot the SuperDARN data . Currently , there are routines to read the custom - formatted SuperDARN data ﬁles that are produced from raw data – 13 – manuscript submitted to JGR - Space Physics using the Radar Software Toolkit ( RST ) ( SuperDARN Data Analysis Working Group . Participating members et al . , 2018 ) , obtain radar hardware information , download the ﬁles from one of the data mirrors ( defaulting to the Virginia Tech mirror ) , perform some higher level processing , and create basic plots ( such as range - time - intensity plots and maps of the radar ﬁelds of view ) . DaViTpy also provides coordinate conversion tools , contains tools to perform coordinated studies with satellites and incoherent scatter radars , has a ray tracing tool , and provides Python implementations of several useful models . This additional functionality is useful , but will not be included in pyDARN . Modeling and coordinate system packages are better supported by existing packages ( e . g . , AACGMV2 and pyglow ; described in sections A . 4 . 1 and A . 2 . 5 , respectively ) , ray tracing tools have uses beyond the SuperDARN community and so are better developed as stand - alone packages , and coordinated studies may be performed through packages such as pysat ( described in section A . 1 . 6 ) , whose focus is providing a common framework for multiple data sets and has already successfully integrated DaViTpy . A . 1 . 2 digital rf The Digital Radio Frequency ( Digital RF ) project established a disk storage and archival format for radio signals . It uses the Hierarchical Data Format ( HDF ) 5 , a software package and ﬁle format that can be read by any programming language ( Koziol & Robinson , 2018 ) , to deﬁne a self - documenting ﬁle format for radio frequency data . The Python package , digital rf , contains routines for reading , writing , and processing radio frequency data using this format . The digital rf project also has C and MATLAB implementations . This package may be referenced using the URL provided in Table 1 . A . 1 . 3 GeoData GeoData is a software package implemented in Python and MATLAB , that plots and interpolates data from a variety of space physics sources . The main goal of this package is to simplify the plotting and processing of geophysical data , speciﬁcally data provided by the CEDAR Madrigal database . To support the data analysis , coordinate transformations between several geographic systems are provided . The processing ﬂow is streamlined by outputting data into HDF5 ﬁles . This package may be referenced using the URL provided in Table 1 . A . 1 . 4 HelioPy HelioPy ( Stansby et al . , 2018 ) is a Python library for heliospheric and planetary physics , whose primary goal is to make it easy to download and import common data sets . It uses CDFlib ( see section A . 3 . 1 ) to handle CDF ﬁles , and is set up to download and ingest a wide variety of solar and satellite data . At the time of publication this included magnetometer and Solar Wind Ion Com - position Spectrometer ( SWICS ) data from the Advanced Composition Explorer ( ACE , Stone et al . ( 1998 ) ) spacecraft , magnetometer , Cluster Ion Spectrometry ( CIS ) , and Plasma Electron And Current Experiment ( PEACE ) data from Cluster , particle and magnetic ﬁeld data from Helios , International Monitoring Platform ( IMP ) , the Mag - netospheric MultiScale ( MMS ) mission , Ulysses , and Wind ( Acu˜na et al . , 1995 ) , as well as magnetometer data from the THEMIS ( Time History of Events and Macroscale Interactions during Substorms , ( Angelopoulos , 2009 ) ) , ARTEMIS ( Acceleration , Re - connection , Turbulence and Electrodynamics of the Moons Interaction with the Sun , ( Angelopoulos , 2010 ) ) , Cassini ( Dougherty et al . , 2004 ) , and MESSENGER ( MErcury Surface , Space ENvironment , GEochemistry , and Ranging , ( B . J . Anderson et al . , 2007 ) ) missions . Sunspot numbers are also included , and there are plans to include DSCOVER ( Deep Space Climate Observatory ) , NASA / Goddard Space Flight Center – 14 – manuscript submitted to JGR - Space Physics ( GSFC ) OMNI , Solar Orbiter ( M¨uller et al . , 2013 ) , and Parker Solar Probe ( Fox et al . , 2016 ) data . As well as importing data , HelioPy builds upon the SpiceyPy package ( described in section A . 5 . 1 ) to provide an accessible interface for performing orbital calculations . It has also implemented a framework to perform transformations between some com - mon coordinate systems . Future goals for HelioPy involve building upon the Astropy package ( described in section A . 6 . 1 ) to provide data with physical units attached , easy methods for transforming between a wider range of coordinate systems , and expanding methods for importing data . A . 1 . 5 MadrigalWeb The CEDAR Madrigal Database is an online resource for archiving and retrieving many heliophysics data sets . This data can be accessed remotely using Python scripts , through functions provided by the MadrigalWeb package . MadrigalWeb allows users to explore the available experiments and instruments , download the data in several ﬁle formats , calculate a range of derived parameters , and perform some instrument - speciﬁc coordinate conversions . This package may be referenced using the URL provided in Table 1 . A . 1 . 6 pysat The Python Satellite Data Analysis Toolkit ( pysat ) ( R . A . Stoneback , Burrell , et al . , 2018 ; R . A . Stoneback , Spence , et al . , 2018 ) is a high - level package intended to form a common ground for all packages and data sources in space science . To make this possible , pysat hides the tedious ﬁle and data handling behind a single consistent object interface in a class object called ‘Instrument’ . The Instrument object features robust data and metadata handling , generalized data iteration , on - the - ﬂy orbit breakdown , and a versatile system for modifying data . These features enable the creation of instrument independent routines that can operate on the varied dimensionality found across space science . Pysat is currently being used as a framework for processing the Ion Veloc - ity Measurements ( IVM ) for the upcoming NASA Ionospheric Connection ( ICON ) Explorer satellite ( Immel et al . , 2018 ) as well as the National Oceanic and Atmo - spheric Administration ( NOAA ) Formosa Satellite ( Formosat ) - 7 / Constellation Ob - serving System for Meteorology , Ionosphere , and Climate ( COSMIC ) - 2 Constellation . Several instruments from the Communication / Navigation Outage Forecasting System ( C / NOFS ) satellite ( the IVM , Vector Electric Field Instrument ( VEFI ) , and Planar Langmuir Probe ( PLP ) ) ( de la Beaujardi ` ere & C / NOFS Science Deﬁnition Team , 2004 ) , NASA / GSFC OMNI data , SuperDARN grid data ( SuperDARN Data Analy - sis Working Group . Participating members et al . , 2018 ) , SuperMAG magnetometer data and indices ( Gjerloev , 2009 ) , Formosat - 3 / COSMIC Global Positioning System ( GPS ) occultation data ( Liou et al . , 2007 ) , the Republic of China Satellite ( ROCSAT ) - 1 / Formosat - 1 IVM ( Su et al . , 1999 ) , Dst , Kp , the Defense Meteorological Satellite Pro - gram ( DMSP ) IVM ( Gorney , 1987 ; Sun et al . , 2018 ) , the Floating Point Measurement Unit ( FPMU ) on the International Space Station ( ISS ) ( Barjatya et al . , 2009 ) , and Thermosphere Ionosphere Mesosphere Energetics Dynamics Solar Extreme ultravio - let Experiment ( TIMED - SEE ) ( Woods et al . , 2005 ) are also currently supported . The most recent release includes a ‘Constellation’ class that allows simultaneous processing of heterogeneous groups of Instruments . The Constellation support was developed by undergraduate computer science students for their senior project . Upcoming versions of pysat will feature support for both Pandas ( McKinney , 2010 ) and xarray ( Hoyer & Hamman , 2017 ) data formats , improving support for multi - dimensioned data sets . – 15 – manuscript submitted to JGR - Space Physics A . 2 Modeled Data Access and Analysis The heliophysics community uses ﬁrst principles and empirical models for a va - riety of purposes , including theoretical studies and space weather forecasts . Modeling studies frequently face reproducibility challenges , since the data are often not made publicly available and many models are not FOSS . The Python packages in this section begin to address these issues by providing access to documented versions of common heliophysics models , as well as standard analysis tools . A . 2 . 1 analysator Analysator is an analysis tool developed for Vlasiator , a 6 - dimensional Vlasov theory - based simulation that focuses on fundamental plasma processes within the near - Earth space environment ( von Alfthan et al . , 2014 ) . It began as a ﬁle reader for the Vlasiator output and has evolved to include analysis and visualization tools . Analysator facilitates studies of particle paths , pitch angle distributions , velocity dis - tributions , and more . More details about the capabilities of this package may be found at the URL provided in Table 1 . A . 2 . 2 OvationPyme OvationPyme is a translation of the Ovation Prime model written in IDL . The Ovation Prime model ( Newell et al . , 2002 ) predicts the total electron and ion energies and number ﬂuxes precipitated into the upper atmosphere , as well as the character - istic energy of the precipitation ( assuming a Maxwellian distribution ) . This model is based on observations from the DMSP Special Sensor Precipitating Electron and Ion Spectrometer ( SSJ ) 4 / 5 particle detectors , which are sensitive to particles in the 30 eV - 30 keV energy ranges ( Newell et al . , 1996 ) . This package may be referenced using the URL provided in Table 1 . A . 2 . 3 pyAMPS pyAMPS ( Laundal & Toresen , 2018 ) is a Python interface for the Average Mag - netic ﬁeld and Polar current System ( AMPS ) model ( Laundal et al . , 2018 ) . AMPS is an empirical model of the ionospheric current system and magnetic ﬁeld , which takes inputs of the solar wind velocity , the Interplanetary Magnetic Field ( IMF ) , the dipole tilt , and the F 10 . 7 index . The primary model output is the average , large - scale , iono - spheric magnetic ﬁeld disturbances at any location in near - Earth space for the selected set of input parameters . Ionospheric currents are then derived from the magnetic ﬁeld . pyAMPS includes functions to calculate ﬁeld - aligned currents , horizontal currents , and estimates of associated ground magnetic ﬁeld perturbations on a grid . It also includes functions to calculate a time - series of model magnetic ﬁeld perturbations ( e . g . , along satellite tracks ) . The empirical model is derived from magnetic ﬁeld measurements from the Swarm ( Friis - Christensen et al . , 2006 ) and Challenging Minisatellite Payload ( CHAMP ; Reigber , L¨uhr , and Schwintzer ( 2002 ) ) satellites . A . 2 . 4 PyForecastTools PyForecastTools is a Python package providing implementations of a wide variety of metrics for model validation and forecast veriﬁcation ( S . Morley , 2018 ) . The metrics include a generic forecast skill score , comparison metrics , scale - and order - dependent biases , a symmetric signed bias , diﬀerent measures of accuracy , and common error estimates . A key feature in this package is the inclusion of classes for contingency table analyses with multiple methods for estimating conﬁdence intervals on scores . These metrics and contingency tables simplify and illuminate the model validation process , – 16 – manuscript submitted to JGR - Space Physics making it more accessible to new users and improving the ability of the scientiﬁc community to critically analyze model outputs and forecasts . A . 2 . 5 pyglow Pyglow is a Python package wrapping multiple empirical Ionosphere - Thermosphere models , including the Horizontal Wind Model ( HWM ; Hedin , Schmidlin , et al . ( 1993 ) ; Hedin , Fleming , et al . ( 1993 ) ; Drob et al . ( 2008 , 2015 ) ) , the International Reference Ionosphere ( IRI ; Bilitza et al . ( 2014 , 2017 ) ) , IGRF , the Naval Research Laboratory ( NRL ) Mass Spectrometer Incoherent Scatter radar ( MSIS ) Exobase ( NRLMSISE ) - 00 model ( Picone , 2002 ) , and an airglow model ( Chartier et al . , 2015 ) . To ensure the most up - to - date versions are used at the time of installation , pyglow retrieves the source code ( for the non - Python model implementations ) from the oﬃcial distribution sites at the time of installation . Pyglow also includes a package to download and archive the geophysical indices used to drive these models : Ap , Kp , F 10 . 7 , Dst , and AE . This package may be referenced using the URL provided in Table 1 . A . 3 Data Analysis and File Routines Sometimes data analysis methods and ﬁle formats reach beyond disciplines . The Python packages described in this section are used by the heliophysics community . They have kept their scope small , though , to better serve multiple scientiﬁc ﬁelds . A . 3 . 1 CDFlib CDFlib is a Python package for reading and writing CDF ﬁles . Unlike other CDF ﬁle handling packages , CDFlib is a pure Python implementation that does not require any compiled C or Fortran code . This makes installing the package on diﬀerent operating systems and platforms very easy . This package may be referenced using the URL provided in Table 1 . A . 3 . 2 pyLTR pyLTR is a Python learning - to - rank ( LTR ) toolkit . LTR is a supervised machine learning method that trains a model to rank lists of data points rather than score single data points . This is useful for applications such as information retrieval and data mining ( Li , 2011 ) . pyLTR provides ranking models , evaluation metrics , tools to load and sort data , and other relevant utilities . pyLTR’s goal is to be as full - featured as the prevailing open - source LTR library , RankLib ( implemented in Java ; Arnold , Gosling , and Holmes ( 2000 ) ) , while being signiﬁcantly easier to use . As such , it contains built - in support for data libraries like NumPy and Pandas . This package may be referenced using the URL provided in Table 1 . A . 3 . 3 pysatCDF pysatCDF ( R . A . Stoneback , Depew , & Iyer , 2018 ) provides a Python interface to the NASA CDF C library through an intermediate Fortran layer . To enable ease of access , pysatCDF includes the NASA library and couples the build system for the CDF C library with Python installation tools . This makes pysatCDF a self - contained package that is easy to install . pysatCDF also supports the same data access mech - anisms present in SpacePy’s CDF routines to enable cross - package interoperability ( SpacePy is described in section A . 6 . 3 ) . pysatCDF operates independently of pysat ( described in section A . 1 . 6 ) , though it also features routines designed to simplify the integration of science data sets into pysat . For example , the NASA CDAWeb hosted mission support within pysat relies upon pysatCDF . – 17 – manuscript submitted to JGR - Space Physics A . 4 Coordinates Coordinate systems are used to order data in a sensible fashion . In complex and coupled systems , there is often not a single best way to do this . As a result , there are a plethora of coordinate systems used within heliophysics . This section outlines several packages that focus on calculating coordinate transformations between geographic and geomagnetic systems . A . 4 . 1 AACGMV2 Corrected geomagnetic ( CGM ) coordinates are deﬁned in terms of the intersec - tion between the local IGRF ﬁeld line and the dipole equatorial plane . The CGM longitude is the centered dipole longitude of this intersection [ see Laundal and Rich - mond ( 2017 ) for a review ] . CGM latitude is the latitude where a dipole ﬁeld line with this radius intersects a sphere at 1 R ⊕ ( Earth radius ) . This coordinate conversion requires magnetic ﬁeld line tracing with the IGRF , and is thus relatively computation heavy . Early implementations , based on look - up tables , only allowed for conversions of points at ground . When this limitation was later removed , CGM coordinates became better known as Altitude - Adjusted Corrected Geomagnetic coordinates ( AACGM ) . AACGM coordinates were originally developed for the purpose of comparing ground - based radar backscatter measurements from high - latitude locations in both hemispheres . Originally known as the Polar Anglo - American Conjugate Experiment ( PACE ) geomagnetic ( PGM ) coordinate system ( Baker & Wing , 1989 ) , AACGM co - ordinates preserve latitude and longitude along magnetic ﬁeld lines ( as speciﬁed by IGRF ) . AACGMv2 is the most recent incarnation of this coordinate system , providing coeﬃcients that can be used to obtain AACGM coordinates between 0 - 2000 km above the surface of the earth and ﬁeld line tracing for higher altitudes . These coordinates are designed to be highly accurate at polar and middle latitudes , and may be unde - ﬁned at the dip equator and near the South Atlantic Anomaly ( Shepherd , 2014 ) . The Python implementation of AACGMV2 provides an interface for the C code developed by Shepherd ( 2014 ) . It allows conversions between geographic ( or geodetic ) coordi - nates and AACGM latitude , longitude , and local time , and it is possible to provide alternative versions of the AACGM coeﬃcients ( A . Burrell et al . , 2018 ) . A . 4 . 2 apexpy Magnetic apex coordinates are deﬁned in a similar way as CGM / AACGM coor - dinates . Instead of using the intersection of the IGRF model with the dipole equatorial plane , magnetic apex coordinates are based on the ﬁeld line apex , the highest point above the geoid . Apex longitude is deﬁned as the centered dipole longitude of the ﬁeld line apex . Two diﬀerent deﬁnitions are used for the latitude , which separate two vari - ants of the apex coordinates : modiﬁed apex coordinates , and quasi - dipole coordinates ( Richmond , 1995 ) . In modiﬁed apex coordinates , the latitude is deﬁned as the latitude where a dipole ﬁeld line with radius equal to the apex height intersects a sphere with radius R ⊕ + h R , where h R is a chosen reference height . In quasi - dipole coordinates , this sphere is replaced by R ⊕ + h , where h is the height of the point of interest . This means that modiﬁed apex coordinates are constant along IGRF magnetic ﬁeld lines , while quasi - dipole coordinates are not . If h R or h are small , the apex coordinates are very similar to AACGM coordinates at high latitudes . In contrast to AACGM coordinates , apex coordinates are deﬁned at low latitudes ( above h R in the case of modiﬁed apex coordinates ) . apexpy ( van der Meeren et al . , 2018 ) provides functions to convert to and from apex coordinates . It also includes functions to calculate base vectors , needed to do – 18 – manuscript submitted to JGR - Space Physics vector calculus in these nonorthogonal coordinate systems ( Richmond , 1995 ; Laundal & Richmond , 2017 ) , and map electric ﬁelds along magnetic ﬁeld lines to diﬀerent altitudes . At apexpy’s core is a wrapper for the Fortran library described in Emmert et al . ( 2010 ) . A . 4 . 3 OCBpy High latitude ionospheric processes interact directly with the magnetosphere and the solar wind . These interactions lead to diﬀerent ionospheric behaviors in the auroral oval and the polar cap , a region where the magnetic ﬁeld lines are open ( connecting to the IMF ) . Chisham ( 2017 ) developed a coordinate system for high latitudes that arranges observations relative to the Open Closed ﬁeld line Boundary ( OCB ) . This was shown to aﬀect the formation of empirical models and statistical studies , which could otherwise inadvertently combine observations taken in the auroral oval and polar cap . OCBpy is a Python package that determines the location of data relative to the OCB from AACGM coordinates and , when appropriate , scales the measurements to reﬂect the inﬂuence of the cross - polar cap potential drop ( A . G . Burrell & Chisham , 2018 ) . The coordinate transformation OCBpy performs requires the OCB location , the data location , the data value , and knowledge of how this value is related to the iono - spheric electric ﬁeld . OCB locations are currently provided for the northern hemisphere between May 2000 and August 2002 using observations from the Far Ultraviolet Imager ( FUV ) on board the IMAGE satellite ( Mende et al . , 2000b , 2000a ) . Future develop - ments will increase the number of OCB locations , incorporate AACGMV2 ( described in section A . 4 . 1 ) to allow conversion between geographic and OCB coordinates , and incorporate the pysat Instrument class ( described in section A . 1 . 6 ) to allow coordinate transformations for a wide range of data sets . A . 4 . 4 pysatMagVect The motion of plasma in the ionosphere is constrained by the anisotropic conduc - tivity of magnetized plasma , making perpendicular motion much more diﬃcult than motion along magnetic ﬁeld lines . To best reﬂect a geophysical basis for interpreting electric ﬁelds and plasma motion , pysatMagVect calculates unit vectors in the mag - netic ﬁeld - aligned , meridional , and zonal directions . The ﬁeld - aligned direction points along the magnetic ﬁeld , deﬁned to be positive when directed from south to north . The meridional unit vector is perpendicular to the ﬁeld - aligned direction and constrained to the meridional plane , the plane that contains the ﬁeld line . At the magnetic equator , the meridional vector is vertical and deﬁned to be positive when directed upward . The zonal direction completes the orthogonal set and is positive when directed towards the East . The vector system is calculated by ﬁeld - line tracing and vector math . Refer - ence code for IGRF in Fortran is coupled with SciPy’s Ordinary Diﬀerential Equation numerical integrator to provide a robust and accurate ﬁeld - line tracing system . The relative locations of the ﬁeld line footprints in the northern and southern hemispheres are compared to a speciﬁed location and used to deﬁne the magnetic meridian plane . The geomagnetic vector system may also be determined using the local magnetic ﬁeld . Under the common assumption that geomagnetic lines are equipotentials in the ionosphere , electric ﬁelds are ‘mapped’ along ﬁeld lines . This allows measurements made anywhere along a ﬁeld line to be translated to another location on the ﬁeld . The electric ﬁeld values are not strictly maintained along the ﬁeld line as the magnetic ﬂux density changes with position . pysatMagVect ( R . A . Stoneback , 2018 ) uses ﬁeld - line tracing to determine both the geomagnetic unit vectors as well as scalars needed to determine the changes in an electric ﬁeld along a geomagnetic ﬁeld line . – 19 – manuscript submitted to JGR - Space Physics To support these and other calculations , pysatMagVect also includes coordinate and vector transformations . Translation between Earth Centered Earth Fixed ( where x lies in equatorial plane pointing from center of Earth towards 0 ◦ longitude , y similarly points towards 90 ◦ longitude , and z completes the system and is aligned with the rotation axis ) , as well as geographic and geodetic ( WGS84 ) systems . Vector projections onto an ECEF or other custom basis speciﬁed in ECEF are also supported . A . 5 Orbits Space - based data from satellites and rockets requires knowledge of orbital me - chanics to properly determine locations . The ephemera that contain orbital informa - tion are often diﬃcult to read . This process becomes increasingly complex when data from multiple satellites are used together . The Python packages in this section provide tools for determining the orbital mechanics of natural and artiﬁcial satellites and can be very useful for mission planning , conjunction studies , and post multi - point analysis . A . 5 . 1 SpiceyPy SPICE is a geometry information system designed , built , and maintained by the Navigation and Ancillary Information Facility ( NAIF ) , acting under the directions of NASA’s Planetary Science Division , to assist NASA scientists in planning and inter - preting scientiﬁc observations from space - borne instruments . As FOSS , SPICE has been used internationally to assist spacecraft mission concept development , data anal - ysis , and the correlation of instruments on multiple spacecraft . SPICE components , or kernels , have diﬀerent functions that give the system its name . S stands for spacecraft ephemeris , P stands for planet , satellite , comet , asteroid , or any other target body ephemerids , I stands for instrument information , C stands for C - matrix ( a matrix containing orientation information ) , and E stands for events information ( which sum - marizes mission activities ) . SPICE was originally implemented in Fortran 77 , but is now oﬃcially supported in C , IDL , MATLAB , and Java . There are several unoﬃcial Python implementations of SPICE , one of which is SpiceyPy ( Annex et al . , 2018 ) . SpiceyPy provides a Python interface for more than 98 % of C SPICE functions , a greater percentage than are made available through of - ﬁcially supported IDL and MATLAB interfaces , and is thoroughly tested through the use of continuous integration services . SpiceyPy also simpliﬁes Python to C interac - tions by presenting an interface that simpliﬁes C function parameters ( such as array lengths and temporary data structures ) to idiomatic Python and through data type conversions of common NumPy data types ( Annex , 2017 ) . A . 5 . 2 PyEphem PyEphem is a Python package based on the XEphem C package ( XEphem 3 . 7 . 7 , 2018 ) that allows users to determine the position of astronomical bodies or artiﬁcial satellites with user provided orbital elements ( Rhodes , 2008 ) . These locations are available in equatorial , ecliptic , and galactic coordinates , as well as location in the sky relative to known ‘landmarks’ , such as a constellation . Although a database of heliophysics spacecraft are not provided by PyEphem , they do provide orbital elements for a wide variety of astronomical object and long - duration artiﬁcial satellites . A . 5 . 3 SGP4 The Simpliﬁed General Perturbations # 4 ( SGP4 ) Python package uses two line element ( TLE ) data for an Earth orbiting satellite to calculate its position and ve - locity . The purpose of the original C + + and Python implementations of SGP4 is to foster collaboration between partners and allies by providing a high quality , FOSS – 20 – manuscript submitted to JGR - Space Physics propagator compatible with data products produced by the United States Air Force Space Command Joint Space Operations Center . The Python package was regularly tested against the C + + 2010 SGP4 propagator suit to ensure that the predictions agree within 0 . 1 mm . This package may be referenced using the URL provided in Table 1 . A . 5 . 4 skyﬁeld and jplephem Skyﬁeld and jplephem are both pure Python ephemeris packages . Jplephem uses the Jet Propulsion Laboratory ( JPL ) ephemeris to predict the position and velocity of a planet or other Solar System body , producing plain three - dimensional vectors . Skyﬁeld builds upon jplephem , computing positions for stars , planets , and Earth - orbiting satellites in a variety of coordinate systems . Its results are tested against the Astronomical Almanac ( produced by the United States Naval Observatory and Her Majesty’s Nautical Almanac Oﬃce ) to within 0 . 5 milliarcseconds . Each of these packages may be referenced using the URLs provided in Table 1 . A . 6 Multipurpose With appropriate scope , vision , and resources , it is possible to provide a main - tainable Python toolkit that encompasses multiple functions . The software outlined in this section contain functionality that crosses the categories outlined in sections A . 1 - A . 5 . A . 6 . 1 Astropy The Astropy Project is a community eﬀort to develop a core Python package for astronomy , as well as improving the usability , interoperability , and collaboration between other astronomical Python packages ( Astropy Collaboration et al . , 2013 ) . To this end , Astropy consists of a core package aimed at professional astronomers and astrophysicists and secondary packages that may or may not have been created by the core development team . The secondary ( or aﬃliated ) packages share the goals of Astropy , and often use the core package as a base . The core Astropy package contains data structures and transformations , ﬁle han - dling , remote communication , computational tools , analysis utilities , and other sup - porting tools . The data structures contain common astronomical constants , units , and coordinates that are often useful for heliophysics research . The ﬁle handling , com - putational , and analysis tools are commonly used within the planetary portion of the heliophysics community , which often relies on telescope observations to observe auroral and other ionospheric emissions . Astropy actively supports community development through aﬃliated packages with the aim of improving the availability of interpretable tools in the astronom - ical community . A template for aﬃliated packages is provided to encourage new developers . A complete list of aﬃliated Astropy packages is available at http : / / affiliated . astropy . org / . A . 6 . 2 geospacepy Geospacepy is a small library of Python functions used for space science data analysis , and can currently be referenced using the URL provided in Table 1 . It in - cludes a set of utilities for handling diﬀerent time formats , some coordinate conversions , and plotting utilities for several standard data plots . It also downloads and reads in OMNI data . Geospacepy uses SpacePy ( described in section A . 6 . 3 ) to read CDF ﬁles and PyEphem ( described in section A . 5 . 2 ) for astrodynamical calculations . – 21 – manuscript submitted to JGR - Space Physics A . 6 . 3 SpacePy SpacePy is a Python package that contains a set of common analysis software pri - marily developed for the magnetospheric community ( S . K . Morley et al . , 2010 ; Morley et al . , 2011 ) . SpacePy includes tools to read from a variety of data formats including NASA CDF . A core feature is the ‘datamodel’ module , which provides classes that al - low both data and metadata to be loaded and stored in a common form from a range of sources including CDF , HDF5 , and netCDF ﬁles , with full support for writing to any of these formats . Additional functionality includes conversion between diﬀerent time systems , and an interface to the International Radiation Belt Environment Modeling ( IRBEM ) library ( Boscher et al . , 2008 ) for computing terrestrial magnetic coordinate transformations , evaluating model magnetic ﬁelds , and tracing magnetic ﬁeld lines and drift shells . SpacePy also provides a range of empirical models , statistical analysis tools , data handling tools , and plotting convenience functions . A suite of tools to work with simulation output from components of the Space Weather Modeling Framework is included in the pybats module . Supported compo - nents include the Block - Adaptive - Tree Solar - Wind Roe - Type Upwind Scheme ( BATS - R - US ; Powell , Roe , Linde , Gombosi , and De Zeeuw ( 1999 ) ; De Zeeuw , Gombosi , Groth , Powell , and Stout ( 2000 ) ) , Polar Wind Outﬂow Model ( PWOM ; Glocer , T´oth , Gombosi , and Welling ( 2009 ) ) , Ridley Ionosphere Model ( Ridley et al . , 2004 ) , Rice Convection Model ( RCM ; Toﬀoletto , Sazykin , Spiro , and Wolf ( 2003 ) ) , Ring current Atmosphere interactions Model with Self - Consistent B ﬁeld ( RAM - SCB ; Jordanova , Welling , Zaharia , Chen , and Thorne ( 2012 ) ) , and Global Ionosphere - Thermosphere Model ( GITM ; Ridley , Deng , and T´oth ( 2006 ) ) . SpacePy’s core development team are continuing work to improve ease of instal - lation , ease of use , and compatibility with other packages across heliophysics . The SpacePy project is planning a move to an environment inspired by ‘scikits’ ( SciPy de - velopers , 2018 ) , where a streamlined core SpacePy package provides key functionality for a broad range of applications and is supplemented by specialized packages that build on the core of SpacePy . A . 6 . 4 SunPy SunPy is a Python package for solar physics that was developed with the help and support of the global community ( SunPy Community et al . , 2015 ) . It provides a comprehensive data analysis environment that allows researchers to carry out their tasks with minimal eﬀort . As a mature solar physics package , SunPy handles data ac - quisition ( from observations and models ) , analysis , and plotting . It includes functions that perform common solar coordinate transformations , unit conversions , and deals with temporal parsing . SunPy also allows local user customization of the analysis environment . A . 6 . 5 PlasmaPy PlasmaPy is a community developed and driven Python package for plasma physics ( PlasmaPy Community et al . , 2018 ) . Still at an early stage of development , it aims to provide the common tools used within the ﬁeld of plasma physics for theoretical and experimental analysis . It currently includes access to particle data , functions to calculate plasma parameters , dielectric tensor components , and transport coeﬃcients . Acknowledgments The authors would like to acknowledge the support of all the heliophysics scientists who have participated in the CEDAR Snakes on a Spaceship workshops , the recent Snakes on a Spaceship survey , AGU meet - ups , and other community organization eﬀorts . We – 22 – manuscript submitted to JGR - Space Physics acknowledge use of NASA / GSFCs Space Physics Data Facility’s OMNIWeb service and OMNI data by many of these Python packages ( https : / / omniweb . gsfc . nasa . gov / ) . The Python packages and data accessed by these packages may be obtained by following the links provided in Table 1 . A . G . Burrell is supported by the Chief of Naval Research . D . Stansby is supported by the U . K . Science and Technology Facilities Council studentship ST / N504336 / 1 . Contributions by S . K . Morley were performed under the auspices of the U . S . Department of Energy and partly funded by the Laboratory Directed Research and Development program ( grant 20170047DR ) . References Acu˜na , M . H . , Ogilvie , K . W . , Baker , D . N . , Curtis , S . A . , Fairﬁeld , D . H . , & Mish , W . H . ( 1995 , February ) . The Global Geospace Science Program and Its Investigations . Space Science Reviews , 71 ( 1 ) , 5 – 21 . doi : 10 . 1007 / BF00751323 AlShebli , B . K . , Rahwan , T . , & Woon , W . L . ( 2018 , March ) . Ethnic diversity in - creases scientiﬁc impact . ArXiv e - prints . American Geophysical Union . ( 2018 ) . Supporting information guidelines . Retrieved 19 September 2018 , from https : / / publications . agu . org / author - resource - center / auxiliary - materials - guidelines / Anderson , B . J . , Acu˜na , M . H . , Lohr , D . A . , Scheifele , J . , Raval , A . , Korth , H . , & Slavin , J . A . ( 2007 ) . The magnetometer instrument on MESSENGER . In The MESSENGER mission to mercury ( pp . 417 – 450 ) . New York , NY : Springer , New York , NY . doi : 10 . 1007 / 978 - 0 - 387 - 77214 - 1 12 Anderson , M . S . , Ronning , E . A . , De Vries , R . , & Martinson , B . C . ( 2010 ) . Extend - ing the Mertonian norms : Scientists’ subscription to norms of research . The Journal of Higher Education , 81 ( 3 ) , 366 – 393 . Angelopoulos , V . ( 2009 ) . The THEMIS mission . In The THEMIS mission ( pp . 5 – 34 ) . New York , NY : Springer , New York , NY . doi : 10 . 1007 / 978 - 0 - 387 - 89820 - 9 2 Angelopoulos , V . ( 2010 ) . The ARTEMIS mission . In The ARTEMIS mission ( pp . 3 – 25 ) . New York , NY : Springer , New York , NY . doi : 10 . 1007 / 978 - 1 - 4614 - 9554 - 3 2 Annales Geophysicae . ( 2018 ) . Manuscript preparation guidelines for authors . Re - trieved 19 September 2018 , from https : / / www . annales - geophysicae . net / for authors / manuscript preparation . html Annex , A . ( 2017 , June ) . SpiceyPy , a Python Wrapper for SPICE . In Third planetary data workshop and the planetary geologic mappers annual meeting ( Vol . 1986 , p . 7081 ) . Annex , A . , Carcich , B . , Murakami , S . - y . , Kulumani , S . , de Val - Borro , M . , Stefko , M . , . . . Seignovert , B . ( 2018 , June ) . Andrewannex / spiceypy : Spiceypy 2 . 1 . 2 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1291631 doi : 10 . 5281 / zenodo . 1291631 Appveyor Systems Inc . ( 2018 ) . Continuous integration for windows and linux . Re - trieved 27 September 2018 , from https : / / www . appveyor . com / Arnold , K . , Gosling , J . , & Holmes , D . ( 2000 ) . The java programming language ( 3rd ed . ) . Boston , MA , USA : Addison - Wesley Longman Publishing Co . , Inc . Astropy Collaboration , Robitaille , T . P . , Tollerud , E . J . , Greenﬁeld , P . , Droettboom , M . , Bray , E . , . . . Streicher , O . ( 2013 , October ) . Astropy : A community python package for astronomy . Astronomy and Astrophysics , 558 , A33 . doi : 10 . 1051 / 0004 - 6361 / 201322068 Backus , J . ( 1998 ) . The history of FORTRAN I , II , and III . IEEE Annals of the His - tory of Computing , 20 ( 4 ) , 68 – 78 . Baker , K . B . , & Wing , S . ( 1989 , July ) . A new magnetic coordinate system for conju - gate studies at high latitudes . Journal of Geophysical Research , 94 , 9139 – 9143 . doi : 10 . 1029 / JA094iA07p09139 – 23 – manuscript submitted to JGR - Space Physics Barjatya , A . , Swenson , C . M . , Thompson , D . C . , & Wright Jr . , K . H . ( 2009 , April ) . Invited article : Data analysis of the ﬂoating potential measurement unit aboard the international space station . Review of Scientiﬁc Instruments , 80 ( 4 ) , 041301 . doi : 10 . 1063 / 1 . 3116085 Barnes , N . ( 2010 ) . Publish your computer code : it is good enough . Nature , 467 , 753 . Bilitza , D . , Altadill , D . , Truhlik , V . , Shubin , V . , Galkin , I . , Reinisch , B . , & Huang , X . ( 2017 , February ) . International Reference Ionosphere 2016 : From iono - spheric climate to real - time weather predictions . Space Weather , 15 ( 2 ) , 418 – 429 . doi : 10 . 1002 / 2016SW001593 Bilitza , D . , Altadill , D . , Zhang , Y . , Mertens , C . , Truhlik , V . , Richards , P . , . . . Reinisch , B . W . ( 2014 , February ) . The International Reference Ionosphere 2012 − a model of international collaboration . Journal of Space Weather and Space Climate , 4 ( A07 ) . doi : 10 . 1051 / swsc / 2014004 Boscher , D . , Bourdarie , S . , O’Brien , P . , & Guild , T . ( 2008 , October 13 ) . IRBEM - LIB download . Retrieved 5 July 2018 , from https : / / sourceforge . net / projects / irbem / Brandl , G . , & the Sphinx team . ( 2018 ) . Overview − sphinx 1 . 8 . 0 + documentation . Retrieved 2 July 2018 , from http : / / www . sphinx - doc . org / en / master / The BSD license . ( 2018 ) . Retrieved 16 June 2018 , from https : / / opensource . org / licenses / bsd - license . php Burrell , A . , Kellerman , A . , Halford , A . , Ireland , J . , Fadden , J . , Piker , C . , . . . Za - wdie , K . ( 2017 , December 14 ) . Fall agu python meet up . Private Communica - tion . Burrell , A . , van der Meeren , C . , & Laundal , K . M . ( 2018 , May ) . aburrell / aacgmv2 : v2 . 4 . 2 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1250727 doi : 10 . 5281 / zenodo . 1250727 Burrell , A . G . , & Chisham , G . ( 2018 , April ) . aburrell / ocbpy : Beta Release . Re - trieved from https : / / doi . org / 10 . 5281 / zenodo . 1217177 doi : 10 . 5281 / zenodo . 1217177 Burrell , A . G . , Klenzing , J . , & Stoneback , R . A . ( 2018 , June 25 ) . Python for space science , snakes on a spaceship : The return of the python . Retrieved 27 August 2018 , from http : / / cedarweb . vsp . ucar . edu / wiki / images / c / c8 / Snakes welcome . pdf Chartier , A . T . , Makela , J . J . , Liu , H . , Bust , G . S . , & Noto , J . ( 2015 ) . Modeled and observed equatorial thermospheric winds and temperatures . Journal of Geo - physical Research : Space Physics , 120 ( 7 ) , 5832 - 5844 . Retrieved from https : / / agupubs . onlinelibrary . wiley . com / doi / abs / 10 . 1002 / 2014JA020921 doi : 10 . 1002 / 2014JA020921 Chisham , G . ( 2017 , January ) . A new methodology for the development of highlat - itude ionospheric climatologies and empirical models . Journal of Geophysical Research : Space Physics , 122 , 932 – 947 . doi : 10 . 1002 / 2016JA023235 Chisham , G . , Lester , M . , Milan , S . E . , Freeman , M . P . , Bristow , W . A . , Grocott , A . , . . . Walker , A . D . M . ( 2007 , May ) . A decade of the Super Dual Auro - ral Radar Network ( SuperDARN ) : scientiﬁc achievements , new techniques and future directions . Surveys in Geophysics , 28 ( 1 ) , 33 – 109 . Retrieved from http : / / link . springer . com / 10 . 1007 / s10712 - 007 - 9017 - 8 doi : 10 . 1007 / s10712 - 007 - 9017 - 8 Choi , S . ( 2017 ) . Workforce diversity and job satisfaction of the majority and the mi - nority : Analyzing the asymmetrical eﬀects of relational demography on whites and racial / ethnic minorities . Review of Public Personnel Administration , 37 ( 1 ) , 84 - 107 . Retrieved from https : / / doi . org / 10 . 1177 / 0734371X15623617 doi : 10 . 1177 / 0734371X15623617 de la Beaujardi ` ere , O . , & C / NOFS Science Deﬁnition Team . ( 2004 ) . C / NOFS : A mission to forecast scintillations . Journal of Atmospheric and Solar - Terrestrial – 24 – manuscript submitted to JGR - Space Physics Physics , 66 ( 17 ) , 1573 – 1591 . doi : 10 . 1016 / j . jastp . 2004 . 07 . 030 De Zeeuw , D . L . , Gombosi , T . I . , Groth , C . P . T . , Powell , K . G . , & Stout , Q . F . ( 2000 , Dec ) . An adaptive mhd method for global space weather simu - lations . IEEE Transactions on Plasma Science , 28 ( 6 ) , 1956 - 1965 . doi : 10 . 1109 / 27 . 902224 Dougherty , M . K . , Kellock , S . , Southwood , D . J . , Balogh , A . , Smith , E . J . , Tsuru - tani , B . T . , . . . Cowley , S . W . H . ( 2004 ) . The Cassini magnetic ﬁeld investi - gation . In The cassini - huygens mission ( pp . 331 – 383 ) . Dordrecht : Springer , Dordrecht . doi : 10 . 1007 / 978 - 1 - 4020 - 2774 - 1 4 Drob , D . P . , Emmert , J . T . , Crowley , G . , Picone , J . M . , Shepherd , G . G . , Skinner , W . , . . . Vincent , R . A . ( 2008 , December ) . An empirical model of the earth’s horizontal wind ﬁelds : HWM07 . Journal of Geophysical Research , 113 ( A12 ) , A12304 . doi : 10 . 1029 / 2008JA013668 Drob , D . P . , Emmert , J . T . , Meriwether , J . W . , Makela , J . J . , Doornbos , E . , Conde , M . , . . . Klenzing , J . H . ( 2015 , July ) . An update to the Horizontal Wind Model ( HWM ) : The quiet time thermosphere . Earth and Space Science , 2 ( 7 ) , 301 – 319 . doi : 10 . 1002 / 2014EA000089 Emmert , J . T . , Richmond , A . D . , & Drob , D . P . ( 2010 , August ) . A computationally compact representation of Magnetic - Apex and Quasi - Dipole coordinates with smooth base vectors . Journal of Geophysical Research , 115 , A08322 . doi : 10 . 1029 / 2010JA015326 Fangohr , H . ( 2004 ) . A comparison of c , matlab , and python as teaching languages in engineering . In M . Bubak , G . D . van Albada , P . M . A . Sloot , & J . Dongarra ( Eds . ) , Computational science - iccs 2004 ( pp . 1210 – 1217 ) . Berlin , Heidelberg : Springer Berlin Heidelberg . Fox , N . J . , Velli , M . C . , Bale , S . D . , Decker , R . , Driesman , A . , Howard , R . A . , . . . Szabo , A . ( 2016 , Dec ) . The Solar Probe Plus Mission : Humanity’s First Visit to Our Star . Space Science Reviews , 204 ( 1 - 4 ) , 7 – 48 . Retrieved from http : / / link . springer . com / 10 . 1007 / s11214 - 015 - 0211 - 6 doi : 10 . 1007 / s11214 - 015 - 0211 - 6 Free Software Foundation , Inc . ( 2007 , Jun 29 ) . The GPL license . Retrieved 16 June 2018 , from https : / / opensource . org / licenses / GPL - 3 . 0 Friis - Christensen , E . , L¨uhr , H . , & Hulot , G . ( 2006 , Apr 01 ) . Swarm : A constella - tion to study the earth’s magnetic ﬁeld . Earth , Planets and Space , 58 ( 4 ) , 351 – 358 . Retrieved from https : / / doi . org / 10 . 1186 / BF03351933 doi : 10 . 1186 / BF03351933 Gil , Y . , David , C . H . , Demir , I . , Essawy , B . T . , Fulweiler , R . W . , Goodall , J . L . , . . . Yu , X . ( 2016 ) . Toward the geoscience paper of the future : Best practices for documenting and sharing research from data to software to provenance . Earth and Space Science , 3 ( 10 ) , 388 - 415 . doi : 10 . 1002 / 2015EA000136 Gjerloev , J . W . ( 2009 , July ) . A Global GroundBased Magnetometer Initiative . EOS , Transactions American Geophysical Union , 90 ( 27 ) , 230 – 231 . doi : 10 . 1029 / 2009EO270002 Glocer , A . , T´oth , G . , Gombosi , T . , & Welling , D . ( 2009 ) . Modeling ionospheric out - ﬂows and their impact on the magnetosphere , initial results . Journal of Geo - physical Research : Space Physics , 114 ( A5 ) . doi : 10 . 1029 / 2009JA014053 Goodger , D . , & van Rossum , G . ( 2001 , June 13 ) . PEP 257 − Docstring conventions . Retrieved 19 September 2018 , from https : / / www . python . org / dev / peps / pep - 0257 / Gorney , D . J . ( 1987 , April ) . U . S . National Report to the International Union of Geodesy and Geophysics : U . S . progress in auroral research : 1983 – 1986 . Re - views of Geophysics , 25 ( 3 ) , 555 – 569 . doi : 10 . 1029 / RG025i003p00555 Greenwald , R . A . , Baker , K . B . , Dudeney , J . R . , Pinnock , M . , Jones , T . B . , Thomas , E . C . , . . . Yamagashi , H . ( 1995 ) . DARN / SUPERDARN . Space Science Reviews , 71 ( 1 - 4 ) , 761 – 796 . doi : 10 . 1007 / BF00751350 – 25 – manuscript submitted to JGR - Space Physics Harris Geospatial Solutions , Inc . ( 2018 ) . Documentation center [ harris geospa - tial docs center ] . Retrieved 6 July 2018 , from http : / / www . harrisgeospatial . com / docs / whatsnew . html Hedin , A . E . , Fleming , E . L . , Manson , A . H . , Schmidlin , F . J . , Avery , S . K . , Clark , R . R . , . . . Vincent , R . A . ( 1993 ) . Empirical wind model for the middle and lower atmosphere – part 2 : Local time variations ( NASA Technical Memoran - dum No . 104592 ) . Retrieved from https : / / ntrs . nasa . gov / archive / nasa / casi . ntrs . nasa . gov / 19940017389 . pdf Hedin , A . E . , Schmidlin , F . J . , Fleming , E . L . , Avery , S . K . , Manson , A . H . , & Franke , S . J . ( 1993 ) . Empirical wind model for the middle and lower at - mosphere – part 1 : Local time average ( NASA Technical Memorandum No . 104581 ) . Retrieved from https : / / ntrs . nasa . gov / archive / nasa / casi . ntrs . nasa . gov / 19930015971 . pdf Hoyer , S . , & Hamman , J . ( 2017 , April ) . xarray : N - D labeled Arrays and Datasets in Python . Journal of Open Research Software , 5 ( 1 ) , 304 . doi : 10 . 5334 / jors . 148 Immel , T . J . , England , S . L . , Mende , S . B . , Heelis , R . A . , Englert , C . R . , Edelstein , J . , . . . Sirk , M . M . ( 2018 , December ) . The Ionospheric Connection Explorer Mission : Mission goals and design . Space Science Reviews , 214 ( 1 ) , 13 . doi : 10 . 1007 / s11214 - 017 - 0449 - 2 Iris : Data services . ( 2018 ) . Retrieved 30 August 2018 , from https : / / http : / / ds . iris . edu / ds / Jehn , K . A . , Northcraft , G . B . , & Neale , M . A . ( 1999 ) . Why diﬀerences make a diﬀerence : A ﬁeld study of diversity , conﬂict , and performance in work - groups . Administrative Science Quarterly , 44 ( 4 ) , 741 – 763 . Retrieved from http : / / www . jstor . org / stable / 2667054 Jones , E . , Oliphant , T . , Peterson , P . , & the SciPy developers . ( 2001 ) . SciPy : Open source scientiﬁc tools for Python . Retrieved 22 June 2018 , from http : / / www . scipy . org / Jordanova , V . K . , Welling , D . T . , Zaharia , S . G . , Chen , L . , & Thorne , R . M . ( 2012 ) . Modeling ring current ion and electron dynamics and plasma instabilities during a high - speed stream driven storm . Journal of Geo - physical Research : Space Physics , 117 ( A9 ) . Retrieved from https : / / agupubs . onlinelibrary . wiley . com / doi / abs / 10 . 1029 / 2011JA017433 doi : 10 . 1029 / 2011JA017433 Kanewala , U . , & Bieman , J . M . ( 2014 , oct ) . Testing scientiﬁc software : A systematic literature review . Information and Software Technology , 56 ( 10 ) , 1219 – 1232 . doi : 10 . 1016 / j . infsof . 2014 . 05 . 006 Kanter , R . ( 2008 ) . Men and women of the corporation : New edition . Basic Books . Retrieved from https : / / books . google . com / books ? id = B - 5GztW4IZQC Kelly , D . , Smith , S . , & Meng , N . ( 2011 ) . Software engineering for scientists . Compu - tational Science and Engineering , 13 ( 5 ) , 7 – 11 . Koziol , Q . , & Robinson , D . ( 2018 , Mar ) . HDF5 . [ Computer Software ] https : / / dx . doi . org / 10 . 11578 / dc . 20180330 . 1 . Retrieved from https : / / dx . doi . org / 10 . 11578 / dc . 20180330 . 1 Lancaster , A . ( 2016 , 28 ) . Open science and its discontents . Retrieved 17 Au - gust 2018 , from http : / / ronininstitute . org / open - science - and - its - discontents / 1383 / Laundal , K . M . , Finlay , C . C . , Olsen , N . , & Reistad , J . P . ( 2018 ) . Solar wind and seasonal inﬂuence on ionospheric currents from swarm and champ measure - ments . Journal of Geophysical Research : Space Physics , 123 ( 5 ) , 4402 - 4429 . Retrieved from https : / / agupubs . onlinelibrary . wiley . com / doi / abs / 10 . 1029 / 2018JA025387 doi : 10 . 1029 / 2018JA025387 Laundal , K . M . , & Richmond , A . D . ( 2017 ) . Magnetic Coordinate Systems . Space Sci . Rev . . doi : 10 . 1007 / s11214 - 016 - 0275 - y – 26 – manuscript submitted to JGR - Space Physics Laundal , K . M . , & Toresen , M . ( 2018 ) . pyAMPS . https : / / github . com / klaundal / pyAMPS . doi : 10 . 5281 / zenodo . 1182930 Li , H . ( 2011 ) . A short introduction to Learn to Rank . IEICE Trans . Inf . & Syst . , E94 - D ( 10 ) , 1854 – 1862 . Liou , Y . - A . , Pavelyev , A . G . , Liu , S . - F . , Pavelyev , A . A . , Yen , N . , Huang , C . Y . , & Fong , C . - J . ( 2007 , November ) . FORMOSAT - 3 / COSMIC GPS radio occul - tation mission : Preliminary results . IEEE Transactions on Geoscience and Remote Sensing , 45 , 3813 – 3826 . doi : 10 . 1109 / TGRS . 2007 . 903365 Longo , D . L . , & Drazen , J . M . ( 2016 ) . Data sharing . The New England Journal of Medicine , 374 , 276 – 277 . doi : 10 . 1056 / NEJMe1516564 MATLAB . ( 2018 ) . version 9 . 4 ( R2018a ) . Natick , Massachusetts : The MathWorks Inc . McGranaghan , R . M . , Bhatt , A . , Matsuo , T . , Mannucci , A . J . , Semeter , J . L . , & Datta Barua , S . ( 2017 , December ) . Ushering in a new frontier in geospace through data science . Journal of Geophysical Research : Space Physics , 122 ( 12 ) , 12 , 586 – 12 , 590 . doi : 10 . 1002 / 2017JA024835 McKiernan , E . C . , Bourne , P . E . , Brown , C . T . , Buck , S . , Kenall , A . , Lin , J . , . . . Yarkoni , T . ( 2016 ) . How open science helps researchers succeed . eLIFE , e16800 . doi : 10 . 7554 / elife . 16800 . 001 McKinney , W . ( 2010 ) . Data structures for statistical computing in python . In S . van der Walt & J . Millman ( Eds . ) , Proceedings of the 9th python in science conference ( p . 51 - 56 ) . Mende , S . B . , Heetderks , H . , Frey , H . U . , Lampton , M . , Geller , S . P . , Abiad , R . , . . . Trondsen , T . ( 2000a , January ) . Far ultraviolet imaging from the IMAGE spacecraft . 2 . wideband FUV imaging . Space Science Reviews , 91 ( 1 ) , 271 – 285 . doi : 10 . 1007 / 978 - 94 - 011 - 4233 - 5 9 Mende , S . B . , Heetderks , H . , Frey , H . U . , Stock , J . M . , Lampton , M . , Geller , S . P . , . . . Lauche , H . ( 2000b ) . Far ultraviolet imaging from the IMAGE spacecraft . 3 . spectral imaging of Lyman - alpha and OI 135 . 6 nm . Space Science Reviews , 91 ( 1 ) , 287 – 381 . doi : 10 . 1007 / 978 - 94 - 011 - 4233 - 5 10 Merton , R . ( 1957 ) . Social theory and social structure ( Rev . and enl . ed . ) . Glencoe : Free Press . Miller , G . ( 2018 ) . A scientist’s nightmare : Software problem leads to ﬁve retractions . Science , 314 ( 5807 ) , 1856 – 1857 . doi : 10 . 1126 / science . 314 . 5807 . 1856 The MIT license . ( 2018 ) . Retrieved 16 June 2018 , from https : / / opensource . org / licenses / mit - license . php Morin , A . , Urban , J . , & Sliz , P . ( 2012 , July ) . A Quick Guide to Software Licensing for the Scientist - Programmer . PLOS Computational Biology , 8 ( 7 ) , e1002598 . doi : 10 . 1371 / journal . pcbi . 1002598 Morley , S . ( 2018 , June ) . drsteve / PyForecastTools : PyForecastTools : Version 1 . 0 . 1 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1299389 doi : 10 . 5281 / zenodo . 1299389 Morley , S . K . , Koller , J . , Welling , D . T . , Larsen , B . A . , Henderson , M . G . , & Niehof , J . T . ( 2011 ) . Spacepy − A Python - based library of tools for the space sciences . In Proceedings of the 9th Python in science conference ( SciPy 2010 ) . Austin , TX . Morley , S . K . , Welling , D . T . , Koller , J . , Larsen , B . A . , & Henderson , M . G . ( 2010 , Jan ) . Spacepy - a python - based library of tools for the space sciences . M¨uller , D . , Marsden , R . G . , St . Cyr , O . C . , & Gilbert , H . R . ( 2013 , Jul ) . Solar Or - biter . Solar Physics , 285 ( 1 - 2 ) , 25 – 70 . Retrieved from http : / / link . springer . com / 10 . 1007 / s11207 - 012 - 0085 - 7 doi : 10 . 1007 / s11207 - 012 - 0085 - 7 Murray , D . , Siler , K . , Larivi´ere , V . , Chan , W . M . , Collings , A . M . , Raymond , J . , & Sugimoto , C . R . ( 2018 ) . Gender and international diversity improves equity in peer review . bioRxiv . doi : 10 . 1101 / 400515 – 27 – manuscript submitted to JGR - Space Physics Newell , P . T . , Lyons , K . M . , & Meng , C . - I . ( 1996 , February ) . A large survey of elec - tron acceleration events . Journal of Geophysical Research , 101 ( A ) , 2599 – 2614 . doi : 10 . 1029 / 95JA03147 Newell , P . T . , Sotirelis , T . , Ruohoniemi , J . M . , Carbary , J . F . , Liou , K . , Skura , J . P . , . . . Rich , F . J . ( 2002 ) . Ovation : Oval variation , assessment , track - ing , intensity , and online nowcasting . Annales Geophysicae , 20 ( 7 ) , 1039 – 1047 . Retrieved from https : / / www . ann - geophys . net / 20 / 1039 / 2002 / doi : 10 . 5194 / angeo - 20 - 1039 - 2002 Nielsen , L . H . , & Smith , T . ( 2014 , March ) . Zenodo overview . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 8428 doi : 10 . 5281 / zenodo . 8428 Nielsen , M . W . , Alegria , S . , B¨orjeson , L . , Etzkowitz , H . , Falk - Krzesinski , H . J . , Joshi , A . , . . . Schiebinger , L . ( 2017 ) . Opinion : Gender diversity leads to better science . Proceedings of the National Academy of Sciences , 114 ( 8 ) , 1740 – 1742 . Retrieved from http : / / www . pnas . org / content / 114 / 8 / 1740 doi : 10 . 1073 / pnas . 1700616114 numpydoc maintainers . ( 2018 , June 16 ) . numpydoc − Numpy’s Sphinx exten - tions . Retrieved 2 July 2018 , from https : / / numpydoc . readthedocs . io / en / latest / Oliphant , T . E . ( 2006 ) . Guide to NumPy . Trelgol Publishing . Peng , R . D . ( 2011 ) . Reproducible research in computational science . Science , 334 ( 6060 ) , 1226 – 1227 . Retrieved from http : / / science . sciencemag . org / content / 334 / 6060 / 1226 doi : 10 . 1126 / science . 1213847 Peterson , B . ( 2008 , November 3 ) . PEP 373 − Python 2 . 7 release schedule . Retrieved 28 September 2018 , from https : / / www . python . org / dev / peps / pep - 0373 / Picone , J . M . ( 2002 ) . NRLMSISE - 00 empirical model of the atmosphere : Statistical comparisons and scientiﬁc issues . Journal of Geophysical Research , 107 ( A12 ) , 1468 – SIA 15 – 16 . doi : 10 . 1029 / 2002JA009430 PlasmaPy Community , Murphy , N . A . , Leonard , A . J . , Sta´nczak , D . , Kozlowski , P . M . , Langendorf , S . J . , . . . Huang , Y . - M . ( 2018 , April ) . PlasmaPy : an open source community - developed python package for plasma physics . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1238132 doi : 10 . 5281 / zenodo . 1238132 Powell , K . G . , Roe , P . L . , Linde , T . J . , Gombosi , T . I . , & De Zeeuw , D . L . ( 1999 ) . A solution - adaptive upwind scheme for ideal magnetohydrodynam - ics . Journal of Computational Physics , 154 ( 2 ) , 284 - 309 . Retrieved from http : / / www . sciencedirect . com / science / article / pii / S002199919996299X doi : https : / / doi . org / 10 . 1006 / jcph . 1999 . 6299 PYPL PopularitY of programming language . ( 2018 , September ) . Retrieved 14 September 2018 , from http : / / pypl . github . io / PYPL . html Reigber , C . , L¨uhr , H . , & Schwintzer , P . ( 2002 ) . Champ mission status . Ad - vances in Space Research , 30 ( 2 ) , 129 - 134 . Retrieved from http : / / www . sciencedirect . com / science / article / pii / S0273117702002764 doi : https : / / doi . org / 10 . 1016 / S0273 - 1177 ( 02 ) 00276 - 4 Rhodes , B . C . ( 2008 ) . Pyephem home page . Retrieved 21 June 2018 , from http : / / rhodesmill . org / pyephem / index . html Richmond , A . D . ( 1995 ) . Ionospheric electrodynamics using magnetic apex coordi - nates . Journal of Geomagnetism and Geoelectricity , 47 ( 2 ) , 191 – 212 . Ridley , A . J . , Deng , Y . , & T´oth , G . ( 2006 ) . The global ionosphere – thermosphere model . Journal of Atmospheric and Solar - Terrestrial Physics , 68 ( 8 ) , 839 - 864 . Retrieved from http : / / www . sciencedirect . com / science / article / pii / S1364682606000071 doi : https : / / doi . org / 10 . 1016 / j . jastp . 2006 . 01 . 008 Ridley , A . J . , Gombosi , T . I . , & DeZeeuw , D . L . ( 2004 ) . Ionospheric control of the magnetosphere : conductance . Annales Geophysicae , 22 ( 2 ) , 567 – 584 . Retrieved from https : / / www . ann - geophys . net / 22 / 567 / 2004 / doi : 10 . 5194 / angeo - 22 - 567 - 2004 – 28 – manuscript submitted to JGR - Space Physics Ritchie , D . M . ( 1996 ) . History of programming languages—ii . In T . J . Bergin Jr . & R . G . Gibson Jr . ( Eds . ) , ( pp . 671 – 698 ) . New York , NY , USA : ACM . Re - trieved from http : / / doi . acm . org / 10 . 1145 / 234286 . 1057834 doi : 10 . 1145 / 234286 . 1057834 SciPy developers . ( 2018 ) . SciPy : Open source scientiﬁc tools for Python . Retrieved 6 July 2018 , from https : / / www . scipy . org / scikits . html Shamir , L . , Wallin , J . F . , Allen , A . , Berriman , B . , Teuben , P . , Nemiroﬀ , R . J . , . . . DuPrie , K . ( 2013 , 2 ) . Practices in source code sharing in astrophysics . Astron - omy and Computing , 1 , 54 – 58 . doi : 10 . 1016 / j . ascom . 2013 . 04 . 001 Shepherd , S . G . ( 2014 , September ) . Altitude − adjusted corrected geomagnetic coor - dinates : Deﬁnition and functional approximations . Journal of Geophysical Re - search : Space Physics , 119 , 7501 – 7521 . doi : 10 . 1002 / 2014JA020264 Smith , A . ( Ed . ) . ( 2018 ) . The journal of open source software . Retrieved 27 Septem - ber 2018 , from http : / / joss . theoj . org / Stansby , D . , Yatharth , & Shaw , S . ( 2018 , June ) . heliopython / heliopy : Heliopy 0 . 5 . 2 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1009079 doi : 10 . 5281 / zenodo . 1291945 Sterne , K . , Burrell , A . , Reimer , A . , Schmidt , M . , Kotyk , K . , DeLarquier , S . , . . . Meeren , C . ( 2017 , December ) . AACGM v2 upgrade , convection map up - dates . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1288637 doi : 10 . 5281 / zenodo . 1288637 Stodden , V . , Hurlin , C . , & Perignon , C . ( 2012 ) . RunMyCode . org : a novel dissemi - nation and collaboration platform for executing published . SSRN . Retrieved from https : / / ssrn . com / abstract = 2147710 doi : 10 . 2139 / ssrn . 2147710 Stone , E . C . , Frandsen , A . M . , Mewaldt , R . A . , Christian , E . R . , Margolies , D . , Ormes , J . F . , & Snow , F . ( 1998 ) . The Advanced Composition Explorer . Space Science Reviews , 86 ( 1 - 4 ) , 1 – 22 . doi : 10 . 1023 / A : 1005082526237 Stoneback , R . , Burrell , A . , & Klenzing , J . ( 2017 , June 25 ) . Snakes on a spaceship : 2 fast 2 furious . Retrieved 30 August 2018 , from http : / / cedarweb . vsp . ucar . edu / wiki / index . php / 2017 Workshop : Python for Space Science Stoneback , R . A . ( 2018 , July ) . pysatmagvect : Nasa icon ion velocity meter support ( version 0 . 2 . 0 ) . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1299374 doi : 10 . 5281 / zenodo . 1299374 Stoneback , R . A . , Burrell , A . G . , Klenzing , J . , & Depew , M . D . ( 2018 , May 9 ) . Pysat : Python satellite data analysis toolkit . Journal of Geophysical Research : Space Physics , 123 . Retrieved from https : / / agupubs . onlinelibrary . wiley . com / doi / abs / 10 . 1029 / 2018JA025297 doi : 10 . 1029 / 2018JA025297 Stoneback , R . A . , Depew , M . D . , & Iyer , G . S . ( 2018 , April ) . pysatcdf : Win - dows compatibility and improved pysat meta handling ( version 0 . 3 . 0 ) . Re - trieved from https : / / doi . org / 10 . 5281 / zenodo . 1217181 doi : 10 . 5281 / zenodo . 1217181 Stoneback , R . A . , Spence , C . , Depew , M . D . , Hargrave , N . , Burrell , A . G . , Klen - zing , J . , . . . Lee , J . ( 2018 , July ) . rstoneback / pysat : Constellation Sup - port , Satellite Simulations , and DMSP IVM Support . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1306979 doi : 10 . 5281 / zenodo . 1306979 Su , S . , Yeh , H . C . , Heelis , R . A . , Wu , J . , Yang , S . C . , Lee , L . , & Chen , H . L . ( 1999 ) . The ROCSAT1 preliminary results : Lowlatitude ionospheric plasma and ﬂow variations . Terr . Atmos . Oceanic Sci . , 10 ( 4 ) , 787 – 804 . Sun , Q . , Miao , C . , Duan , Q . , Ashouri , H . , Sorooshian , S . , & Hsu , K . L . ( 2018 , Jan - uary ) . A Review of Global Precipitation Data Sets : Data Sources , Estimation , and Intercomparisons . Reviews of Geophysics , 56 ( 1 ) , 79 – 107 . doi : 10 . 1002 / 2017RG000574 SunPy Community , T . , Mumford , S . J . , Christe , S . , P´erez - Su´arez , D . , Ireland , J . , Shih , A . Y . , . . . Kirk , M . S . ( 2015 , January ) . SunPy − Python for solar physics . Computational Science and Discovery , 8 ( 1 ) , 014009 . doi : – 29 – manuscript submitted to JGR - Space Physics 10 . 1088 / 1749 - 4699 / 8 / 1 / 014009 SuperDARN Data Analysis Working Group . Participating members , Thomas , E . G . , Ponomarenko , P . V . , Bland , E . C . , Burrell , A . G . , Kotyk , K . , . . . Walach , M . - T . ( 2018 , January ) . Superdarn radar software toolkit ( rst ) 4 . 1 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1143675 doi : 10 . 5281 / zenodo . 1143675 Th´ebault , E . , Finlay , C . , & Toh , H . ( 2015 , Sep 23 ) . Special issue “international ge - omagnetic reference ﬁeld—the twelfth generation” . Earth , Planets and Space , 67 ( 1 ) , 158 . Retrieved from https : / / doi . org / 10 . 1186 / s40623 - 015 - 0313 - 0 doi : 10 . 1186 / s40623 - 015 - 0313 - 0 TIOBE Index . ( 2018 , June ) . Retrieved 18 June 2018 , from https : / / www . tiobe . com / tiobe - index / Toﬀoletto , F . , Sazykin , S . , Spiro , R . , & Wolf , R . ( 2003 , Apr 01 ) . Inner mag - netospheric modeling with the rice convection model . Space Science Re - views , 107 ( 1 ) , 175 – 196 . Retrieved from https : / / doi . org / 10 . 1023 / A : 1025532008047 doi : 10 . 1023 / A : 1025532008047 TRAVIS CI , GMBH . ( 2018 ) . Travis CI − Test and Deploy with Conﬁdence . Re - trieved 27 September 2018 , from https : / / travis - ci . org / Tyﬁeld , D . ( 2013 , Nov ) . Transition to science 2 . 0 : “remoralizing” the economy of science . Spontaneous Generations : A Journal for the History and Philosophy of Science , 7 ( 1 ) , 29 – 48 . doi : 10 . 4245 / sponge . v7i1 . 19664 van der Meeren , C . , Burrell , A . G . , & Laundal , K . M . ( 2018 , April ) . apexpy : Apexpy version 1 . 0 . 3 . Retrieved from https : / / doi . org / 10 . 5281 / zenodo . 1214207 doi : 10 . 5281 / zenodo . 1214207 van Rossum , G . ( 1995 , May ) . Python tutorial ( Tech . Rep . No . CS - R9526 ) . Amster - dam : Centrum voor Wiskunde en Informatica ( CWI ) . van Rossum , G . , Warsaw , B . , & Coghlan , N . ( 2013 , August 1 ) . PEP 8 − Style guide for Python code . Retrieved 2 July 2018 , from https : / / www . python . org / dev / peps / pep - 0008 / von Alfthan , S . , Pokhotelov , D . , Kempf , Y . , Hoilijoki , S . , Honkonen , I . , Sandroos , A . , & Palmroth , M . ( 2014 , December ) . Vlasiator : First global hybrid - Vlasov simulations of Earth’s foreshock and magnetosheath . Journal of Atmospheric and Solar - Terrestrial Physics , 120 , 24 – 35 . doi : 10 . 1016 / j . jastp . 2014 . 08 . 012 Woods , T . N . , Eparvier , F . G . , Bailey , S . M . , Chamberlin , P . C . , Lean , J . , Rottman , G . J . , . . . Woodraska , D . L . ( 2005 , January ) . Solar EUV Experiment ( SEE ) : Mission overview and ﬁrst results . Journal of Geophysical Research , 110 , A01312 . doi : 10 . 1029 / 2004JA010765 Xephem 3 . 7 . 7 . ( 2018 , March 23 ) . Retrieved 21 June 2018 , from http : / / www . clearskyinstitute . com / xephem / – 30 –