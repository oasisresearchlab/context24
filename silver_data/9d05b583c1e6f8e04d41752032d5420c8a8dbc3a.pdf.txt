The Subject - Oriented Notation for End - User Data Modelling Sergey Kucherov , Yuri Rogozov and Alexander Sviridov Institute of Computer Technology and Information Security Southern Federal University Taganrog , Russian Federation { skucherov , yrogozov , asviridov } @ sfedu . ru Abstract — Existing data modeling notations and methods of database development are dedicated to technicians . At the same time , there is a tendency to involve the end - user in the development process . This requires the creation of new modeling notations and development methods for databases area . These tools should be understandable both to end - users and to developers . Because of unified understanding , it is possible to consider the action of the subject ( end - user ) as a basis of such modelling and designing tools . Subject ' s action describes the process of creating domain concepts with which end - users are working and which developers should implement in an information system . The paper proposes a subject - oriented data model and its modeling notation , which are devoted to the end user . Minimizing of graphic primitives quantity and universalization of modeling tools are results of using both the unified structure of action mechanism and its variable content . Index Terms — Database , modelling , notation , subject - oriented approach I . I NTRODUCTION There is a trend towards individualization of software and information systems , in particular for today . This is due to advent of financial possibilities by small firms to make their own applications , to appearance of agile software development ( SCRUM , xP ) [ 1 ] , to creation of numerous frameworks and kits . Along with this the level of end - user involvement in the process of creating systems is increased . It is known that an end - user is the main carrier of domain knowledge [ 2 ] . Direct user involvement in the development process allows creating software and databases that are more appropriate to subject area requirements [ 3 , 4 ] . This in turn requires the solving of significant problem of understanding between a customer and a developer [ 5 ] . Teaching of an end - user to the level of modern development tools will lead to absence of necessity in technical specialists . It is also labor - intensive and costly process . In this context , development of new notations and concepts of representation , which are based on the perception of domain area and system by an end - user , is promising . The most interest from this point of view is a data modeling process . Methodologies of software development suggest that data model creation and database design is a prerogative of database designer or data administrator [ 6 ] . For these specialists a lot of modelling and designing notations are created . However , all of these notations are based on the concept of object ( not object - oriented ) , in which a database is represented as a set of interrelated data objects . Represented data model can be deprived of a significant proportion of semantics depending on an abstraction level ( conceptual , logical or physical ) . Existing notations can be divided into : Structural ( IDEF1x , E - R , UML ) and Streamed ( DFD ) . Streamed notations are not used directly in a database structure design . They are more focused on the problem of mapping data streams . Such notations are able to demonstrate end - user information about a data conversion on their way from a source to a receiver . Each converter is a separate function with an encapsulated content . Structural notations , on the contrary , form the basis of modern data modeling tools . Such notations are focused on information entities , interconnected set of which describes a domain data structure . Mechanisms such as normalization , already at a logical level hamper the perception of data model by an end - user . In addition , structural notations require a thorough documentation of a model at all levels of abstraction . In the research process and the practical work on creation of information systems next important features of a subject area and data modeling have been identified by us . It call into question the applicability of existing notations :  An end - user does not perceive data separately from processes of their creation , transformation and processing in many cases . The basis of perception by an end - user is subject - oriented concept [ 7 , 8 ] . This concept , in contrast to the object , are focused on user ' s actions which are leading to generation , transfer and transformation of information , and an information itself as a product of user activity [ 9 ] .  Normalized database schemas complicate the perception of information system data model , because along with a description of domain data objects ' semantics they require to describe a separation of these objects into a plurality of entities .  The combination of structural and streamed notations does not provide a complete picture about a domain data , as it does not represent a causal link between a purpose of processing ( of creation ) data and its result . Processes themselves , in which data can be created or converted are related to business logic of information systems for today and this is not part of a data model ( fig . 1 ) . Fig . 1 . Representation of concepts in classical systems Figure 1 shows that the one domain concept , with which end - user works in real life , is represented in an information system as a set of objects of different types : Properties that reflect a concept sense are placed in a database ; A visual representation of a concept sense is contained in a graphical user interface ; A behavioral aspect of concept is reflected in an application business logic ; A concept reflection into an information system are performed non by subject area specialist but by technician , often without knowledge of domain specifics ; Different users create each of aspects into that a concept sense is shared . All this leads to a mismatch both between a domain concept sense and between its realization in an information system , and within a concept sense . Thus , there is a segmental representation of processes and data , which is also have no means of explicit and formalized binding into a single integrated domain model . This is , firstly , hampering communication between a developer and a customer , and secondly , is preventing to the construction of development methodologies and tools aimed at the end user . In addition , existing methods are not able to fully ensure the dynamism of a database on the same level with a domain area [ 10 ] . The key problem , which follows from the foregoing , is the lack of data modeling and design tools , focused on an end - user . Because of this the set of designed flexible databases [ 11 - 14 ] are not commercially successful . They are designed for an end - user but for represent a data model they use technologies and models aimed on a developer . To solve this problem , we have proposed the subject - oriented repository [ 15 , 16 ] , which is combining technical and user domain description . The next step is the development of modeling tools , aimed to an end - user . This is due to the fact that a notation that combines the possibility of describing end - user actions and results of these actions is not exist for today . The aim of this paper is to provide the user - centric notation for the subject - oriented data modeling . The first chapter represents the subject - oriented data model . In the second chapter the graphical notation and description of its implementation are proposed . II . S UBJECT - O RIENTED D ATA M ODEL From an end - user ' s ( subject ' s ) position data is an integral part of processes and it can not be separated from them to preserve semantics . A potential user until a system introduction performs some work ( consisting of individual activities ) over a set of domain concepts [ 17 ] . Each domain concept has a name , which allows to determine its type and purpose , defining the implementation of this concept in a specific environment . A concept is a more general term to describe a domain area , but in terms of databases , it can be identified with a data object in the classical approach to development . A data object is characterized by a set of attributes that determine values of its key properties . The concept is characterized by a description of a process , implementation of which leads to its reception . Description of processes is dependent upon a context in which a concept is used . Consider differences between a concept and data object on the example of a book :  A book as a data object is represented by a set of attributes : title , author , number of pages , type of binding , etc . ;  A book as a concept will be the description of a process of creating a book from cover and pages of text ( including a title and an author ) . In addition , a page of text is a concept , which process of creating contains just a text itself and rules for its printing . The peculiarity of the subject - oriented approach is that maximum variability is ensured for each concept . At the same time , there are three state of concepts . They are characterized by the content of their sense : As long as a process description does not contain any specific values , the concept has an implicit sense . In the example with a book , we used exactly this type of concept - we do not know in what this book is bound , this book is printed on a paper or electronic , etc . However , we clearly understand that we are talking about a book . A concept sense is filled with concrete characteristics during a process specification ( cover type , page size ) . Because of this process execution , a concept with explicit sense is obtained . It corresponds to a data object , but in contrast , contains not only a description of the expected result ( in this example , a book ) , and the process of its creation . If the specified process will be carried out , its characteristics will have specific values and the concept itself becomes specific . For example , the book about SWEBOK . This corresponds to an instance of a data object ( see . Figure 2 ) . Thus , a concept approach is nothing other than the action specification to create a domain object . The convenient tool for modeling concepts is the mechanism of action [ 17 ] - a fixed set of characteristics with variable content . Changing content determines a purpose of an action , while the fixed structure of actions representation allows to use a single abstraction throughout the process of system creating - from a research of domain area , prior to the establishment and operation of a database and information system as a whole . Concept : Gradebook Database Business logics GUI Concepts representation Concepts behavior Concepts’ features Fig . 2 . Correspondence between elements of subject - oriented and object approach For the description of domain concepts , the mechanism of action uses the simple basic set of features - elements , functions , tools and results . Regardless of a level of detail this base set of features is fixed and is a form , filling if which by content ( specification of elements , functions , etc . ) is a process of design concepts . Subject - oriented data model , being adequate to domain as a basic storage unit uses a concept and its forms described above . Presentation of each type of a concept corresponds to a certain type of action . An action type is the reflection of a concept with implicit sense in the form of named unit of user activity . An action type holds no characteristics ( Figure 3 ) . Fig . 3 . The model of concept with implicit sense Elements , tools and functions will largely depend on the form in which the concept will go with specifying its sense . An action is the reflection of a concept with explicit sense in the form of the named unit of user activity . An action is expressed by used elements , functions , a tool that regulates the rules for the application of functions on elements and results that can be obtained by performing an action appropriate for the purpose of its implementation ( see Figure 4 ) . It should be noted that an action specifies result only as an expected performing targets , while the result value appears after an action implementation . An action is the basic unit of data storage and presentation of configurable information system . An example of a user ' s actions can be " payment of monthly wage to worker . " As elements it is using information on number of days worked ( which in turn is a result of " counting the number of days worked ) and information about the cost of one working day . As functions it is using the mathematical operator " multiplication " , and as a tool the multiplication rule included in one of the system modules are used . Fig . 4 . The model of concept with explicit sense Perfect action is the result of an action implementation in a particular moment of time , containing specific values of all the characteristics , including the value of result ( see Figure 5 . ) . Fig . 5 . The model of concrete concept It corresponds to a specific concept . In the context of the example described above , it may be the value of a particular employee wages in a given month . This will not only preserved the value itself , but also its production process . This greatly expands possibilities of storage in terms of supporting the integrity and historicity changes Action is declared via the common pattern for the description , which includes an action name , four basic characteristics and a list of their constituent components . The result of action description is degenerate , since an action is described , but not implemented . Perfect action , in contrast to the action has values of characteristics . A time stamp obtaining or setting accompanies each value . In addition , for an action , we store a result of its implementation , and timestamp for values obtaining deemed actions implementing time . As can be seen from figures , each kind of action is a named tree describing the concept . Inside the node are possible hierarchy , describing the nesting activities in each other and allow to describe the complex subject of activity . Link in the subject - oriented data model is also action . By analogy with a real world , concepts can be linked within a particular activity . Thus various binding methods are possible :  Result < - > element . This type of connection is the most common and demonstrates a sequential process of obtaining a data : a result of calculation for number of days worked becomes an element of calculation of wages ( see Figure 5 ) ;  Result < - > function . This type of connection demonstrates the possibility of using one of concepts as the description of a function of the other . For Subject - oriented approach A concept with implicit sense Concrete concept A concept with explicit sense process result process result process result Object approach Data object instance Data object Action name : «Monthly salary» Results Elements Functions Tools Action name : «Monthly salary» Results Elements Days worked Rate of payment Functions Tools Multiplying rule “Multiply” example , the term " increase " is used to describe the concept of " wages " as a function ;  Result < - > tool . This relationship type describes a situation where one concept is a means or a rule to perform a function on elements in the description of other concepts . III . N OTATION FOR S UBJECT - O RIENTED D ATA M ODEL In terms of structure , the subject - oriented data model differs from currently known models and has following features : The dynamic set of characteristics ( in the presence of a base constant set ) and their values ; The lack of a clear separation of the elements by types . Any value of any characteristic may be element , function or tool ; Lack of association link as to classical models . All concepts are linked only through action . It requires alternative tools and methods of implementation . The subject - oriented data model uses only one basic element of submission - action . With this element modeled as concepts of various kinds , and their relationship . Figure 6 shows different ways of action representation . Figure 6a shows a minimized view of an action . It is consist of «action name» and region of results ( for the perfect action , reflecting the specific concepts ) «action value» . Figure 6b shows a detailed representation of an action with specified set of characteristics used in its description . As each characteristic is also a concept for its representation minimized type of an action is used ( fig . 6a ) . Figures 6a and 6b are also a representation of a concept with implicit sense ( type of action ) . It does not include any specific elements , functions or tools . Figure 6c shows an action that characterizes a concept with explicit sense from the example in the previous section . For its representation in accordance with the data model is required to transfer characteristics . Modelling concrete concepts is necessary in determining the system constants . Most of the concrete concepts is a specific result of the user ' s work with information system or database . This goes beyond the issues discussed in the article . Fig . 6 . Graphical primitives of subject - oriented notation Thus , we can say that the process of describing a data model in accordance with the proposed notation - a consistent description of a hierarchical structure of domain concepts . In terms of rules and constraints in the proposed modelling notation can be distinguished follows :  Data modeling begins with a main action , characterizing the scope of an information system ;  The depth of decomposition is dependent on a functional purpose of an information system and potentially not limited ;  In describing characteristics of action bundle «action name» : «action value» must be unique .  If necessary , a reference to a concept of other hierarchy in field «action value» we specifies the bundle «action name» : «action value» of necessary concept . The communication is a special action , called IS _ A _ RESULT .  In one model duplicates of the same action is not permitted with the exception of perfect action . The proposed set of graphics primitives and rules is minimal and sufficient to represent a domain data model in terms of subject - oriented approach . Figure 7 shows a portion of user data structure , showing the process and results of calculating the monthly salary of each employee . Fig . 7 . User data representation Implementation of storage and modeling tools is carried out on the basis of NoSQL database GlobalsDB [ 18 ] . A key feature of this solution is fully supported schema - free approach [ 19 , 20 ] . The storage consists of permanently stored global variables - globals . The approach to the implementation of storage model is based on the creation of a special data structure . This structure is a multi - dimensional sparse array . Structural elements of the array are elements of the metric chosen to describe a domain . In our case , this metric - the mechanism of action . This array contains both a specification of subject ' s works in the form of concepts senses and results of action performing in the form of specific concepts . Configuration layer is described by using globals with the prefix name TD * . Results of user ' s work with a system are stored in globals with the prefix name RESULT _ * , where * is used as an absolute time , set at the time of obtaining a result . IV . C ONCLUSIONS The paper suggests a notation for the subject - oriented data model . This notation is based on the using of a single representation conception for stored elements and links between them . It is used as a tool to describe a domain area for a storage of configurable information systems , solving the problem of variability and consistency of application systems and user tasks . This tool allows to shift modelling to a new level - semantics of a data , nature of their occurrence are clearly documented in a readable form for an end - user . This in turn has a positive effect both on a modelling process and on a process of operation and improving system by end - user . Subject - oriented modelling notation allows to represent a structure of user data and results of user working with a system in an adequate form with respect to a domain model . Using of subject - oriented approach erases a clear separation of data , logic and interface . Concept described by an action can be repeatedly reproduced with necessary changes in a composition and characteristics of the structure . The use of NoSQL technologies , in turn , will allow to realize high - performance solutions , devoid of shortcomings of existing flexible databases implementations . A CKNOWLEDGMENT The reported study was partially supported by RFBR , research project No . 15 - 07 - 04033 . R EFERENCES [ 1 ] Rubin , Kenneth S . , 2013 Essential Scrum : a practical guide to the most popular agile process / Addison - Wesley . - 498 p . ISBN 978 - 0 - 13 - 704329 - 3 [ 2 ] Kucherov , S . , 2013 . User - configurable information systems as a means to overcome the semantic gap / Journal of Informatization and Communication 5 ' 2013 , P . 135 - 137 [ 3 ] Cohn , M . , 2009 . Succeeding with Agile : Software Development Using Scrum / Addison - Wesley . - 504 p . ISBN 978 - 0 - 32 - 157936 - 2 [ 4 ] Fischer , G , . 2009 . End - User Development and Meta - design : Foundations for Cultures of Participation / IS - EUD ' 09 Proceedings of the 2nd International Symposium on End - User Development , Springer - Verlag Berlin , Heidelberg , p . 3 - 14 . [ 5 ] Lavrishcheva , E . , 2013 . Software Engineering Computer Systems . Paradigms , techniques and CASE - tools programming / Moscow : Science . Dumka , 2013 . - 283 p . [ 6 ] Date , C . J . , 2004 . An Introduction to Database Systems ( 8th Edition ) / Addison Wesley . – 983 p . – ISBN 978 - 0321197849 . [ 7 ] Rogozov , Y . I . , 2013 . Approach to the definition of a meta - system as system . Proceedings of ISA RAS . - 2013 . - Vol . 63 . , №4 / 2013 . - P . 92 - 110 . [ 8 ] Rogozov Y . , 2014a . The general approach to the organization of certain system of concepts based on the principle of generating knowledge . XII All - Russian Conference on Control VSPU - 214 . Moscow : Proceedings . ISBN 978 - 5 - 9145 - 151 - 5 . , pp 7822 - 7833 . [ 9 ] Chernikov B . V . , 2014 . Specificities of Lexicological Synthesis of Text Documents / / Computer Science Procedings . 2nd International Conference on Information Technology and Quantitative Management , ITQM 2014 / Vol . 31 . ELSEVIER , p . 431 – 439 [ 10 ] Kucherov S . , Rogozov Y . , Borisova , E . , 2014 . Structure – independent databases modelling / Proceedings of IEEE 8th International Conference on Application of Information and Communication Technologies - AICT2014 , ISBN : 978 - 1 - 4799 - 4120 - 9 2 , p . 192 - 196 [ 11 ] Kucherov , S . , Samoylov , A . , Grishchenko , A . , 2014 . Flexible database for configurable information systems / / Proceedings of IEEE 8th International Conference on Application of Information and Communication Technologies - AICT2014 . IEEE Catalog Number CFP1456H - PRT , ISBN : 978 - 1 - 4799 - 4120 - 9 2 , p . 374 - 377 [ 12 ] Kucherov S . , Sviridov , A . , Belousova S . , 2014 . The formal model of structure - independent databases / Proceedings of 3rd International Conference on Data Management Technologies and Applications DATA2014 , Vienna , Austria , Scitepress - Science and Technology Publications . ISBN : 978 - 989 - 758 - 035 - 2 . p . 146 - 152 [ 13 ] Rossi , C . , Guevara , A . , Enciso . M . , 2010 . A tool for user - guided database application development . Automatic Design of XML Models using CBD / Proceedings of the Fifth International Conference on Software and Data Technologies , ICSOFT 2010 , Volume 2 , p . 195 - 200 [ 14 ] Palviainen , M . , Kuusijärvi , J . , Tuomisto , T . , Ovaska , E . , 2014 . Towards a data model of end - user programming of applications / DATA 2014 - Proceedings of 3rd International Conference on Data Management Technologies and Applications , pp . 272 - 281 . [ 15 ] Kucherov , S . , Rogozov , Y . , Sviridov , A . , 2015 . NoSQL storage for configurable information system : The Conceptual Model / DATA2015 - Proceedings of 4th International Conference on Data Management Technologies and Applications , ISBN 978 - 989758103 – 8 , p . 279 - 287 [ 16 ] Kucherov , S . , Rogozov , Y . , Sviridov , A . , and Rasol , M . 2015 . Approach to data warehousing in configurable information systems based on action abstraction / Communications in Computer and Information Science , Volume 535 , 2015 , Pages 139 - 148 [ 17 ] Rogozov Y . , 2014b . Methodology of creation of subject - oriented systems . / Journal of Informatization and Communication 2 ' 2014 , P . 6 - 10 [ 18 ] Tweed , R . ; James , G . , 2010 . A Universal NoSQL Engine , Using a Tried and Tested Technology . http : / / www . mgateway . com / docs / universalNoSQL . pdf [ 19 ] McCreary , D . , Kelly , A . , 2013 . Making Sense of NoSQL : A guide for managers and the rest of us . Manning Publications , 312 p . ISBN 978 - 1 - 61729 - 107 - 4 . [ 20 ] Sadalage , Pramod J . , Fowler , M . , 2012 . NoSQL Distilled : A Brief Guide to the Emerging World of Polyglot Persistence , ISBN - 13 : 978 - 0321826626 .