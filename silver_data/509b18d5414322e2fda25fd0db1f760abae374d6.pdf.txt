Supporting the S ocial C ontext of T echnology A ppropri a - tion : On a S ynthesis of S haring T ools and T ool K nowledge Sebastian Draxler 1 , Gunnar Stevens 1 , Martin Stein 1 , Alexander Boden 1 , David Randall 2 ( 1 ) University of Siegen Hölderlinstrasse 3 , 57068 Siegen { prename } . { lastname } @ uni - siegen . de ( 2 ) Manchester Metropolitan University All Saints , Manchester , M15 6BH D . Randall @ mmu . ac . uk ABSTRACT There is an increasing spread of flexible software applica - tions that can be modified by adding components ( some - times called plug - ins or add - ons ) . A popular example in the software development domain is Eclipse , a flexible devel - opment environment that can be extended with literally thousands of different plug - ins . However , searching , in - stalling and configuring new plug - ins requires complex overhead work that is only weakly addressed by existing support mechanisms . Recent research has highlighted the related practices of learning about new plug - ins and tailor - ing software tools as being highly cooperative , situated , socially embedded , and often connected to particular work situations . Based on an empirical study in small software enterprises , we develop an understanding of appropriation as a social and collaborative activity . We then suggest de - sign principles for appropriation support that are grounded in the practices we have found in the field , and present a prototypical implementation of the concept that extends existing mechanisms of sharing tools and tool - knowledge . Author Keywords Appropriation ; tailorability ; learning ; ad - hoc ; peer - to - peer ; help giving ; workplace learning ; software development ACM Classification Keywords H . 5 . 3 [ Group and Organization Interfaces ] : Computer Supported cooperative Work INTRODUCTION Today , tailorability is an important part of software devel - opment . We have conducted a study on tailorability in the context of the Eclipse IDE , one of the most popular devel - opment environments that is widely used by software de - velopers [ 6 ] . Eclipse provides support for a broad variety of programming languages , connectors to other software engi - neering tools such as bug trackers , as well as project man - agement functionalities ( just to name a few ) . All these func - tionalities are provided by a huge number of available plug - ins , which can extend and adapt Eclipse to virtually any software engineering project [ 20 ] . However , this flexibility also leads to problems for practitioners , who often need to deal with a considerable overhead in finding , selecting , installing and configuring the right plug - ins for a task at hand—always at risk of breaking their installations due to possible incompatibilities between plug - ins [ 27 ] . As a consequence , discovering new features has become an inherent and non - trivial part of the daily work of software developers [ 6 ] . This task can be time - consuming , confusing and involves a number of decisions concerning compatibil - ity issues etc . Our data clearly shows that Eclipse users struggle with the necessary overhead work of managing their installations , keeping them up - to - date and reconfigur - ing them for new tasks . Hence , there is a strong case for understanding how people go about finding the plug - ins they need , what problems and constraints they have to deal with , and what kinds of support they rely on . In companies , appropriation is shaped to large extents by individual activi - ties as well as by the formal structure and demands of the organization [ 1 ] . Yet , in its very nature , appropriation is a highly social activity which is embedded in particular work - related situations and carried out mostly between peers or colleagues . Cooperative appropriation may be performed in numerous different and elegant ways . Examples are asking colleagues for help , purposefully discussing new tools , casually sharing tools over coffee breaks , using email or newsgroups to ask for help , or relying on Twitter for infor - mation about new tools [ 5 , 20 , 21 ] . As we will show in this paper , individual aspects of soft - ware appropriation like tailoring , configuration sharing or informal learning are covered well in the literature . Howev - er , the connections between these aspects are not well un - derstood . At the same time , existing solutions for sharing and managing tools and configurations provide only frag - mented support for the diverse facets of technology appro - priation . Based on the example of Eclipse , we present a novel , lightweight approach that is based on a holistic un - derstanding of appropriation as an entangled , cooperative process of searching , becoming aware , installing , configur - ing , and learning how to use new tools . This approach is meant to overcome the fragmentations in the current design of appropriation support systems , filling a gap between solutions for general file sharing , specialized platforms for mass - distribution and configuration , as well as knowledge management approaches . Permission to make digital or hard copies of all or part of this work for p ersonal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . CHI’12 , May 5 – 10 , 2012 , Austin , Texas , USA . Copyright 2012 ACM 978 - 1 - 4503 - 1015 - 4 / 12 / 05 . . . $ 10 . 00 . Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2835 RELATED WORK Our work is grounded in the Marxian tradition of under - standing appropriation as the social process of incorporat - ing objects into one ' s life , including changes to the objects , caused by the changing modes of using it [ 5 , 28 ] . Configur - ing and sharing artifacts is seen as closely related to organi - zational learning in this tradition , and appropriation is un - derstood as a holistic concept that includes adoption , tailor - ing , configuration sharing , tool awareness and informal learning . In this section , we want to give a brief survey of these inter - related aspects . Sharing tools at work In both CHI and CSCW , studying data sharing practices has a long tradition [ 11 ] . Since peer - to - peer networks have become a mass - phenomenon , a special focus in HCI has been on music sharing [ 3 ] , addressing political and legal issues ( like impacts on the music industry and digital right management ) , as well as hedonic issues ( like socializing , intimacy , or expressing identity and personal experiences e . g . by creating mix - tapes ) [ 3 , 32 ] . From a technical viewpoint , Voida et al . [ 33 ] analyzed the different systems people use in practice for file sharing ( like e - mail , shared folders , version control systems or peer - to - peer networks ) . By classifying these systems , they devel - oped a scheme of categories ( including scope , addressing , distribution , visibility and notification ) that should be con - sidered by the design of sharing tools in general . While such general principles are valuable , we will argue that the specific demands and pragmatics of sharing tools and cus - tomizations in the work context remain important . In the case of customizations the shared object is a hybrid one , since not only the files need to be shared ( or copied ) , but also the contextualized information how to use the custom - ized tool . Therefore , a technological solution to address this issue has to deal with knowledge sharing as well as pure file sharing . With regard to customization sharing , several important studies from the 1990s showed that local social networks play an important role for adaptation and adoption of soft - ware in organizations [ 8 , 19 , 34 ] . Within these networks , an informal division of labor exists where small groups of lead users create sophisticated customizations . These customiza - tions are further adapted by translators to the needs of less experienced users , who usually do not adapt tools them - selves , but profit from their colleagues’ configuration work [ 19 ] . As noted by Mackay , local work practices become objecti - fied by the customizations and diffuse through the sharing practices : “The exchange of customization files provides another example of how users in an organization share information about their preferred ways of interacting with software” [ 19 ] . However , Pipek [ 24 ] pointed out that the forms of usage and the use conventions are only partially manifested in the tailored artifact . In order to foster the collaborative appropriation and the negotiation of conven - tions , he argues for providing built - in mechanisms for re - cording and annotating usage , as well as use - discourse infrastructures to share these annotations with others . In addition , as customizations affect the work within the group , Wulf [ 34 ] argues that groupware systems should include a means for collaborative tailoring . However , be - cause of the complexity and subtle interplay between indi - vidualization and group preferences , it remains an open research topic how general demands of collaborative tailor - ing can be realized adequately . Kahler [ 16 ] further elaborates Wulf’s line of thought with regard to the special case of sharing individual customiza - tions . He suggests technical as well as organizational means of support , including push and pull mechanisms ( like send - ing tailored artifacts by email [ 18 ] or by a built - in notifica - tion system as well as providing common repositories for configuration sharing [ 15 ] ) , enabling the annotation of configurations and allowing to test the modifications in an exploration environment [ 35 ] . Furthermore , he suggests raising the awareness of tailoring activities and fostering a tailoring culture by encouraging cooperation among col - leagues as well as between users and local experts , and by recognizing tailoring efforts as important part of coopera - tive work with computers . Finding new tools and learning how to use them As indicated , appropriating new technologies refers not only to the physical installation of new tools but also to organizational ‘learning’ , and specifically to transfor - mations of work practices and the acquisition of new com - petencies [ 4 ] . As Lave and Wenger [ 17 ] have shown , such processes are often embedded in everyday work situations . Informal interaction within communities of practice turned out to be an important driver for knowledge exchange in this regard . The related learning processes have been out - lined in an apprenticeship model that describes how ap - prentices learn from a master or colleague by peripherally participating in their practices . Twidale has demonstrated how important these aspects are in the context of “informal technical help giving between colleagues” [ 30 ] . Stressing the importance of the specific situation and the collaborative nature of learning activities , he showed how knowledge sharing could be understood flexibly and contingently . In contrast to the apprenticeship model that usually discerns fixed roles ( “masters” and “ap - prentices” ) , Twidale discovered that actors tend to switch between these roles in practice . One example would be a student working in a software company . One the one hand , he could be seen as an apprentice learning about software development practices . On the other hand , in some situa - tions he may also be seen as a master , introducing new technologies to his colleagues that he learned about in Uni - versity . Such forms of learning therefore could often be better characterized as peer learning , instead of apprentice learning . Furthermore , Twidale observed that sitting to - gether in front of a computer in order to work together and Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2836 discuss work issues often determines a starting point and defines the context of the learning situation . Such forms of “over - the - shoulder - learning” [ 30 ] are important for the diffusion of work practices in an organization , as it enables people to discover and become aware of unknown tools or features in their social surroundings , and observe how to use them . Similar issues have been studied by Murphy - Hill and Mur - phy [ 21 ] . They analyzed peer interaction in collocated and remote pair programming settings 1 according to related situated discovering and learning processes . Among other aspects , they identified sequences of peer observation and peer recommendation . In the first case , one programmer observes a colleague using a programming tool or feature that he / she was not familiar with . In the second case , the programmer is observed by a colleague and gets a sugges - tion with regard to a new tool or feature . Such situations could be characterized as special cases of the over - the - shoulder - learning [ 30 ] that lead to the discov - ery of new tools and / or initiated learning processes about how to use these tools . In comparison to other information sources like internet forums or following Twitter , practi - tioners reported a preference for the local peer interaction because they valued the opinions and advice from col - leagues’ more . If possible , organizations should therefore support discussions about tools as a regular part of informal work communication as well as of regular team meetings . Furthermore , the results of Murphy - Hill and Murphy indi - cate a need for system design “ to make existing tools and environments more discoverable and distributed collabora - tion more effective . ” [ 21 ] . Discussion At the technical level , sharing tools and configurations is similar to file sharing in general [ 33 ] . However , there are also important differences with regard to the related prag - matics . As tools have to be configured in order to match the individual needs or the IT infrastructure of the company , it is insufficient to share relevant files only . One also has to share the information how tools can and should be config - ured and used . As we have shown , such processes are often accompanied by forms of informal learning that are focused by concepts such as legitimated peripheral participation [ 17 ] , over - the - shoulder learning [ 30 ] or peer interaction [ 21 ] . However , such concepts are hardly supported by gen - eral purpose sharing solutions like Napster or Dropbox that just support users specifying “ the what , with whom , and how of sharing” [ 33 , p . 2 ] . Even in the case of specialized platforms for software dis - tribution ( like Apple’s App Store , the Firefox add - ons page 1 Pair programming is an agile development technique where two software developers synchronously work togeth - er in front of one computer . or the Eclipse Marketplace ) , these aspects are only weakly supported . Rating and commenting functionalities are practically anonymous , making trustful interactions hard to establish . As a result , the features provided by these plat - forms do not have the same impact as recommendations from known persons or colleagues [ 23 , 25 ] . Also the exist - ing configuration and installation managers that are inte - grated in some applications ( like Firefox add - on manager or Eclipse update manager ) primarily focus on the single user , and arguably neglect the sharing of tools and tool expertise within personal social networks . In summary , we have identified a lack of support for the appropriation of new tools in situations where a large num - ber of alternatives of varying use and relevance are possi - ble . Current systems especially fail to address the social dimension of appropriation and fail to take into account the close interrelation between the physical sharing of tools , and the highly social and situated activity of sharing tool expertise . These shortcomings on the technical level also reflect shortcomings on the conceptual level . In particular , holistic concepts that provide theoretical accounts for the integration of configuration sharing and knowledge sharing features have been introduced just recently covering only parts of the issue [ 21 ] . Hence , there is a need for further research that takes the complex interrelations between in - formal learning and collaborative tailoring into account . In the following sections , we present such an approach and demonstrate how it can be realized in the case of Eclipse . METHODOLOGY Our work adopts the combination of ethnographic studies of work practice and participatory design as outlined in the concept of Co - realization [ 12 ] and Design Case Studies [ 26 ] . As noted by Hartswood et al . [ 12 ] knowing “what exists” can inform design , but cannot replace the practical experience of designing and using the actual artifact . In particular , the realization and appropriation of socially embedded software leaves ontic and epistemic traces that cannot be fully anticipated [ 26 ] . It has been suggested that design research comprises both retrospective and prospec - tive elements [ 1 ] . Prospectively , the purpose of theoretical and empirical knowledge is to sensitize and inspire design . Retrospectively , analytic work should make explicit “what shows up [ … ] as having been all along already implicit in that tradition [ which is created by the ontic and epistemic traces of the realization process ] ” [ 2 ] . The purpose of retrospective analysis is further to clarify and elaborate the general lessons learned that are worth remembering . So prospection and retrospection follow a different logic , but taken together , they constitute the iterative design process [ 26 ] . Here , retrospectively , we discuss a design project , where we developed a plug - in solution for Eclipse that is able to support collaborative appropriation . The design realization followed an iterative , participatory approach that was mainly organized in three cycles : Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2837 Cycle 1 : Concept Design In the first cycle we studied the Eclipse appropriation prac - tices in five organizations ( 3 small and medium enterprises , 1 large enterprise and 1 research institute ) . In 2 small and medium enterprises , we conducted participative observation for more than two weeks . We furthermore interviewed at least 3 developers in each organization . In addition , we conducted an online survey in which 138 persons partici - pated . As part of this survey , 76 Eclipse installations were sent in to be analyzed . The findings of these studies are partial - ly published in [ 5 , 27 ] . Their results show that appropriation is an important prerequisite for Eclipse users in order to get their work done , and that local social networks of colleagues are a hugely important source for support in this regard . We then developed a first design concept enabling users to browse the Eclipse installations of their colleagues . We evalu - ated the concept at the research institute in a small team of 8 developers , who are located at the same floor . Following a Wizard of Oz approach , we manually collected infor - mation about all Eclipse installations in the team . Based on the installed plug - ins , we derived suggestions for interesting tools for the team members . The value of the suggestions was assessed by the participants , followed by interviews that aimed to identify possible collaborative appropriation features within Eclipse . We further developed a first de - monstrator to illustrate the general idea . Cycle 2 : Interaction Design In Cycle 2 we focused on improving the interaction with the demonstrator . Initially , we conducted a 3 - hour Participatory Design workshop with 6 students who regularly used Eclipse . Additionally , we presented the existing demonstra - tor to 7 Eclipse users from 2 of the small and medium en - terprises and the research institute . As a preliminary evalua - tion of the interaction concept , we presented screenshots of the user interface to the practitioners . Later , the participants explored the demonstrator by themselves . The user tests were followed by interviews to get an insight into user perceptions of the tool . These interviews followed the Lad - dering technique , took about one hour each , and included discussions about the general impression of the design , areas for improvement , motivational aspects and possible use scenarios . The usability of the new interface design was also evaluated by 5 of the previous participants in form of follow - up interviews . This part of the evaluation included open explorative tasks as well as ‘solving’ tasks such as plug - in searches , browsing user configurations and com - menting on a plug - in . The specification of these tasks was informed by our previous empirical study and the participa - tory discussion about meaningful use scenarios . Cycle 3 : Field trials In Cycle 3 , we developed a fully functional prototype that is stable enough to be used in practice . This stable version is currently being evaluated at the research institute , where 8 users have integrated the plug - in into their daily working environments . The feedback of the users is being used to continuously improve the prototype . DESIGN PRINCIPLES This section describes the major design principles we have identified , based on the ongoing ethnographic and evalua - tive work conducted . As described above , this process con - sisted of stages such as realizing and discussing prototypes and designing sketches with users , conducting field studies and surveys , as well as analyzing related work in the litera - ture . As our understanding of appropriation practices reached a saturated level [ 9 ] , we elaborated a system of related issues that designers of supportive systems for col - laborative appropriation might consider . In the following , we present the most essential parts of this design space analysis . Facilitating collaborative appropriation “ [ … ] especially one person in the project was extremely experienced in using Eclipse . It would have helped me a lot to know which [ tools ] he was using . I just would have used the tool [ s ] he used and wouldn’t have had to worry about it . ” ( Participant of an interview study , beginning cycle 2 , translated by authors ) In the software industry , technology often follows rapid innovation cycles that make it hard for practitioners to keep up to date in their relevant fields . Furthermore , tool compe - tencies often vary among team members in software com - panies with regard to different degrees of expertise ( see e . g . [ 19 ] ) , but also with regard to the different specializations of team members ( as we observed in our fieldwork ) . The dy - namics and diversity of technology - related knowledge can also be seen in the working environment . For example , in our online survey the average Eclipse installation consisted of 418 plug - ins combined into 42 assembly units ( so called Eclipse features ) , the average age of a plug - in version was not older than 6 months [ 5 , 27 ] . In addition , even among colleagues no installation was identical to the other . In line with existing literature [ 16 , 19 , 21 , 30 ] , our fieldwork shows that tool adoption emerges mainly from ad - hoc cir - cumstances in everyday work [ 5 , 27 ] . Even when people were not actually working together on a common task , we observed developers sometimes ‘having a look’ at a col - league’s machine to understand which tools he used for his daily work . If something attracted attention , communication was initiated about further explanations , help was taken and given , and customizations were shared with each other . Support for collaborative appropriation should exploit this diversity , as it allows people to learn from each other . In particular , it should support the situated and social nature of appropriation in the context of modifying tools and learning new features in interaction with colleagues . In addition , design has to recognize the fact that appropriation is an important part of the ‘work to make things work’ , but it is usually not the primary work objective [ 1 ] . Hence , the overall challenge is to facilitate situated appropriation , without distracting users from their primary work . Based on our observations , supporting collaborative appro - priation should consider the following design issues : Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2838 • Workplace integration : Supporting the interleaving of work and appropriation [ 30 ] , a solution should be seamlessly and consistently integrated into the work context . • Sharing scope : With regard to the scope of sharing , the most promising granularity is the organization , the group and the team that works closely together or has at least some personal contact . With regard to tasks that should be supported , we identified three major areas : • Searching tool knowledge : Features are needed for supporting users in finding the right information about the tool that might solve the problem at hand , and / or persons who are willing and competent to give advice in the given case . • Appropriation awareness : In order to facilitate seren - dipitous situations of discovering new artifacts by chance , opportunities for social interaction in the sense of a “tickets - to - talk” approach [ 29 ] should be provided . • Peer installation : In order to support the exchange and tools between colleagues , a solution for installing tools that are already in use by peers is needed . While some of these design issues may sound self - evident , they are disregarded by existing tools for appropriation support and customization sharing . For example , sending customizations via emails ( as suggested by [ 18 ] ) is de - tached from ordinary work and involves the overhead of collecting the relevant files ( or related links to repositories ) . Similarly , using shared file systems as local repositories ( as suggested by [ 15 ] ) introduces extra burdens with regard to administrating and maintaining the repository . While the more recent integration of marketplace features in applica - tions ( like the Firefox built - in add - on manager or the cur - rently released plug - in for accessing the Eclipse market - place ) is a step in the right direction for satisfying the needs of appropriation , these solutions do not support the sharing of tools and tool knowledge within the local context of a team or company , but rely on external repositories or error - prone and clumsy file copying . Workplace integration In order to reduce any extra efforts and preserve the work context , appropriation features should be closely integrated into the ordinary working environment and be easily acces - sible in a casual manner . The integrated features especially allow the interleaving of work and learning from others by reducing the overhead for both the help - giver and the help receiver by ‘looking over the virtual shoulder’ [ 30 ] . In order to be perceived as an integral component , the addi - tional features should conform to the general look & feel of the working environment . Further a lightweight solution is needed that avoids additional burdens of configuring the system and / or maintaining extra information . Sharing scope With regard to the sharing scope that specifies what data should be shared with whom , we can distinguish three de - sign alternatives in general : public , selective and subnet [ 33 ] . Examples of public sharing solutions are websites , blogs or Twitter , where the content is published on the Internet for a public audience . Examples of selective sys - tems are Emails , where providers intentionally select the persons the information should be shared with . An example of a subnet solution is the possibility to share pieces of music and whole playlists in the media player iTunes . It restricts the public audience to persons in the same network ( typically colleagues or friends ) . With regard to the pragmatics of collaborative appropria - tion , the drawback of the selective scope is that it is only appropriate for intentional interaction where the provider knows in advance which person the information is relevant to . This sharing mechanism facilitates serendipitous situa - tions only weakly . In addition , the selective mechanism excludes newcomers who are not yet well connected to established local networks . The selective mechanism is therefore inappropriate for promoting the learning processes of newcomers within the community of practice [ 17 ] . In contrast , sharing information with the general public audience allows others ( even strangers or people one is only weakly connected to ) to become aware about one’s activi - ties . Hence , the public sharing mechanism enables a legiti - mate peripheral awareness [ 17 ] of appropriation activities . Yet , the public scope is too broad and lacks a common work context that is important for trust building and initiat - ing peer - interaction [ 5 , 21 ] . We therefore recommend providing features that make appropriation activities public - ly visible within the scope of the organization and its work groups . Technically , this could be realized by a subnet solution . Although the benefits of subnet sharing are well known and used by some tools like iTunes , to our knowledge no tool sharing solution exists so far which has adopted this sharing mechanism with regard to software tools and configurations . Searching tool knowledge “I think this [ used browsing tools ] would be interesting for our company , since ( … ) we do work in quite different pro - jects . On the other hand , we are talking about a small group in whose competences I trust—unlike a web portal such as the plug - in community , which contains all [ Eclipse ] plug - ins , but I don’t know who rated or commented these . That is just useless . ” ( Participant of an interview study , translated by authors ) In order to support the searching within the local context , we explored the concept of being able to browse the tools installed by colleagues . As illustrated by the transcripts above , all users stated that a browsing feature would be really helpful for them . In addition , the users recognized that this feature is not only relevant for appropriation , but also addresses a general problem in cooperative work : namely identifying hidden conflicts that are related to using different tools and configurations [ 24 ] : Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2839 “I would have been interested in my colleague’s [ Eclipse ] installation , since I need to be able to get and run the code that he produces . It would be useful to compare and match different Eclipse configurations [ … ] ” ( Participant of an interview study , translated by authors ) As tool knowledge only partially manifests itself in the plug - ins a user has integrated so far , such features as ‘browsing’ and ‘comparing tool configurations’ should be supplemented by a means to document and discuss configu - ration settings , best practices etc . [ 19 ] . Knowledge addi - tionally should be made persistent as the appropriation of new tools happens irregularly and often casually as a kind of invisible work . For example , our study revealed that people often could not remember when and how they did modifications to their Eclipse installations , even in case they viewed these modifications as highly important ( and sometimes struggled to replicate them in case of re - installations or updates ) . Hence , we believe that there is a need for a local memory that makes tool - centric knowledge persistent and easily retrievable , and that provides infor - mation on who has created the information , and how he or she can be contacted . In addition , the system should increase the visibility of others’ tool expertise and provide cues for becoming aware of what kind of tools the colleagues are usually working with . The cues should make use of automatic recordable information like which tools a person has installed , and how long they have been installed . However , the automatic col - lected data alone does not necessarily qualify practitioners to offer help to their colleagues , so cues should also consid - er user - controlled information , e . g . in a way as outlined by one of our participants : “ . . . the system should somehow visualize that one has done a lot of annotations , as this implies and shows others that one is experienced . “ ( Participant of an interview study , translated by authors ) Appropriation awareness “Probably it would be useful to be able to send messages like ‘I solved all our problems by…’ if I discovered some - thing new . [ … ] The question would also be , if I get in - formed if someone else installed or likes something . ” ( Par - ticipant of an interview study , cycle 2 , translated by au - thors ) In the literature , awareness is mainly studied from the per - spective of coordinating activities ( e . g . [ 13 , 22 ] ) . In our case , we are more interested in a second , often neglected aspect of awareness about the work activities of colleagues , that of casual ‘looking over the shoulder’ [ 21 , 30 ] . Observ - ing work practices and noticing individual tool modification activities in a team allows for legitimate peripheral partici - pation and supports the learning and enculturation of new - comers [ 17 ] . Existing research results show that awareness support sys - tems are especially useful in the context of distributed work , as the knowledge about each other’s context decreas - es with distance [ 22 ] . However , the evaluation of our de - sign concept in the first cycle shows that even small co - located teams would benefit from such support . As indicat - ed in the transcript above , appropriation awareness is espe - cially useful if the people work on different projects and profit from the each other’s specific competences . To reduce overhead , we argue that an information notifica - tion mechanism should be integrated , so that users do not have to fall back to communication channels like email “to make sure that their indented recipient knows that a new file is available” [ 33 ] . Such a mechanism should support both sending explicit messages as well as providing notifi - cations that are implicitly triggered by tailoring activities . The last issue is related to Wulf’s concept of informing groupware users of someone else’s tailoring activities by an integrated notification system [ 34 ] . The major motivation is to support serendipitous situations of peer observation and peer recommendation . This means that the notification system should not just inform users about conflicting activi - ties , but also support them in sharing information about newly discovered tools or solved problems within the work context . Technically , awareness features could be realized as an awareness pipeline [ 7 ] that grants users fine grained control of the implicitly triggered notifications as well as the filter - ing of received events . As users want to spend as little extra time as possible with appropriation work , the design of sophisticated but complex configuration options has to adhere to the principle of proportionality . Hence , the design of a lightweight solution should take into account that noti - fications about tailoring activities will only sparsely be triggered as users do not modify their working environ - ments daily . In addition , design should take into account that the default appropriation activities should be visible in the subnet in order to foster collaborative appropriation ( see above ) . Peer installation “If you start using software , it helps to see how colleagues are using it . It helps to get a first overview , and to configure the [ Eclipse ] environment in a way that enables you to work with it . ” ( Participant of an interview study , translated by authors ) Studies conducted in the 1990’s [ 15 , 18 , 19 ] mainly focused on the sharing of self - created customizations . However , today it is easy to distribute customizations world wide . Instead of creating own solutions , users nowadays have the opportunity to look for existing solutions that relate to their problem and share the adopted solution with others . Our fieldwork indicated that Eclipse users follow this trend , as they made intensive use of the growing market of freely available tools . The practitioners regularly modified their working enviroment by downloading new plug - ins and exchanged them with colleagues . However , the intention to exchange plug - ins was typically not planned in advance , Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2840 but emerged in peer - interaction situations , where one observed an interesting feature in use by a colleague . Acquiring the relevant feature , however , requires knowledge of : • Which plug - in implemented the feature in question ? • Does the plug - in in question depend on other plug - ins ? • What plug - ins need to be transfered , which have already been installed , in which version , and will this create conflicts ? • Were are the plug - in’s files stored ? In principle , the Eclipse installations of peers contain all the requireded information and files to answer these questions and to ( semi - ) automize the task . However , we are not aware of any solutions that support the exchange of tools in the peer interaction situations we observed in our study . Instead , users are forced to carry out clumsy and error - prone workarounds as outlined above . Based on this observation , we conclude that there is a need for supplementing existing solutions with features supporting peer - installation in situations of peer observation as well as peer recommendation [ 21 ] . We therefore decided to provide peer - installation features that support users in installing plug - ins and features observed on someone else’s installation , as well as in recommending useful features to other users . THE COLLABORATIVE APPROPRIATION PROTOTYPE In order to support workplace integration and facilitation of appropriate methods , described above , we adopted the gen - eral sharing experience idea of iTunes . Like the music shar - ing feature is directly integrated into iTunes , the suggested features should be integrated directly into Eclipse . In order to realize this seamlessly , the prototype was implemented as an Eclipse plug - in . It uses the native Eclipse user inter - face , and relies on typical Eclipse interaction concepts . The user interface consists of different so called views ( e . g . to show other peers ) and editors ( e . g . to comment a plug - in ) , typical elements of the Eclipse interaction concept , which consistently integrate the appropriation features into the work context ( see Figure 1 for an overview ) . Also like iTunes , our prototype is realized as a lightweight peer - to - peer solution , where users do not need to configure anything apart from activating the sharing and setting a nickname ( optionally users can provide a picture , full name as well as their location ) . Technically , the prototype uses a simple JXTA peer - to - peer architecture that supports subnet visibility [ 10 ] . The network connections between the users’ installations are established automatically if the prototype is installed on their machines , as the peers broadcast their availability . The communication infrastructure allows users to browse each other’s Eclipse installation within the subnet to foster the coincidental nature of just meeting someone in the office . In contrast to iTunes , our prototype optionally caches information about users , the tools they installed as well as their comments and ratings ( see below ) . Thus , tool information can be browsed even when the people are cur - rently offline . Realizing search and annotation features In order to support looking over the virtual shoulder [ 31 ] we implemented an Eclipse view that allows users to in - Figure 1 : Integration of collaborative appropriation within the work context . Left : List of Eclipse users within the local network . Right : List of tools used by a colleague and a detail view showing the stored tool knowledge . Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2841 spect what tools are used in the local context . Like a Skype contact list , this view consists of all ( cached ) users in the subnet including name , picture and presence information ( see Figure 1 on the left ) . By clicking on an entry , the view changes its appearance and shows the plug - ins used by the colleague ( Figure 1 on the right gives the example of the plug - ins used by Daniel ) . Information in the list of tools includes the tool’s icon as well as the name and parts of the description . From our usability study we know that this usually enough information for Eclipse users to decide if the tool is worth further exploration . If a user wants to have further information , he / she can click on an entry . This opens a detail view ( see Figure 1 black rectangle on the right ) that gives additional information including comments and ratings of other users ( see below ) . In general , these user interface elements enable users to explore the diverse Eclipse installations used in the subnet and look for tools that might be helpful for them . This is especially useful , as the experience in the group usually varies . To enhance the browsing experience , we further implemented different ways to filter and sort the results . For example , the user can search for keywords . This inverts the navigation , as the user can find a consultant by searching for a tool’s name and therefore get help even without know - ing in advance who is an expert on a particular topic . Fur - ther , it is possible to hide the tools that are used by both the user and his colleagues in the same version in order to en - hance the awareness about differences in the configuration . The list of tools can be sorted either alphabetically in order to simplify search , or by popularity in order to show poten - tially interesting tools . Currently , we measure popularity by calculating the average rating given by users ( see below ) and by the number of colleagues who use the plug - in , if multiple plug - ins show the same average rating . In addition , it is possible to exclude tools from the result set that have not been rated or received bad ratings . To capture and maintain a shared memory of the tool knowledge , we adopted the common concept ( used for example by commercial marketplaces like Amazon ) to allow customers to annotate and rate the products that are provided on the platform . We provided rating and com - menting in the detail view ( see Figure 1 right ) . During de - sign workshops , we introduced several different ways of annotating , namely , comments , rating , tags , and categories . However , free comments and ratings were perceived as the most useful ways of sharing knowledge and experiences and have therefore been included in the prototype . As illustrated by the quote below , it is important to under - stand the reasons for using such features as well as neces - sary configuration information : “I would add tool related information [ annotations ] . For example information that is important for the initial config - uration [ of a tool ] . Team members can benefit from this information as it will save time and money…” ( Participant of an interview study , beginning of cycle 2 , translated ) An important factor here is common work context . Col - leagues , for instance , need to know what kind of pitfalls might occur when installing new plug - ins , or may find it useful to know that particular plug - ins are both useful and easy to install . Figure 1 ( details box ) presents an example of the different pragmatics . In this case one of participants used the implemented annotation feature to provide an instruction on how to configure the SVN tool in order to access the company’s new source code revision control system . Generally , restricting annotation features to the local organ - ization has the effect that users are not forced to make knowledge explicit that could be taken for granted in the shared work context . This prevents the general problem of ‘sticky information’ [ 14 ] and allows users to focus on more specific comments that are valuable for the local context . For example , formulations and instructions are highly bene - ficial for the local context , but do not make much sense without it . In their pragmatics , local annotations therefore differ from information that is targeting a public audience ( like official help manuals or a users’ review published on Amazon ) . The shared work context also has an effect on the pragmat - ics of reading comments . In our fieldwork , for example , users often preferred to ask certain persons when seeking advice . Trust is often enabled by specific knowledge of the capabilities and characteristics of colleagues . The system allows for such filtering and , if in doubt , supports to ask the author supplementary questions , to clarify some infor - mation or get additional advice . Realizing awareness features In order to raise awareness of the infrequent appropriation situations , the system sends notifications to local peers in cases of users tailoring their installations , or when they comment or rate tools ( see Figure 2 for an example ) . By sending notifications to all colleagues , we provide a solu - tion for the lack of peer interaction in non - collocated set - tings and increase their visibility at the team level of peer interaction , as the users do not need to be working in the same room or building to discover that a colleague is using a new or interesting tool . Figure 2 : Notification example of a tool ( SWT Designer ) that was commented and rated by the user Bart . The notifications ( we used Figure 2 as example ) provide the user with different kinds of information : Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2842 • Tool Awareness : Users become aware of the tool itself ( SWT Designer ) and are able to look up more detailed information about it by clicking the corresponding link in the notification . • Peer information : Users become aware of the fact that a colleague ( Bart ) has installed the tool . They can contact him or check his profile by clicking the corresponding link in the notification . • Additional context : Users become aware that their colleague has provided comments to specify a cer - tain work context , tasks , pitfalls or practices that have proven to be beneficial . Notifications enable the user to navigate to relevant objects ( a tool that might be interesting and a person who may be an experienced user ) by clicking the corresponding link . Realizing peer installation features In order to support users to share tools , we implemented a peer install feature . It makes use of the circumstance that the users’ installations hold all needed information and files for the exchange of plug - ins . Instead of forcing the user to switch to an external marketplace or to copy files manually , the user can install a tool from a colleague’s installation by clicking a single button ( see Figure 1 upper right corner ) . The functionality behind this button calculates the plug - in’s dependencies , detects possible version conflicts , and identi - fies all the files that need to be transferred . As all needed files are stored on the colleague’s machine , the prototype does not need an internet connection . Instead , all relevant files are copied using the peer - to - peer infrastructure and are afterwards installed on the local machine . To calculate dependencies between plug - ins , we used Eclipse’s internal provisioning mechanism ( P2 ) , which is also used by the default mechanism to update and install plug - ins from mar - ket places . By reusing this functionality , the installation process using the prototype does not differ from the instal - lation from any other source . EVALUATION So far , we have conducted a limited evaluation in the re - search institute mentioned above . Even so , useful feedback has been obtained through workshops and usage tests dur - ing all phases of the design process . Users were generally positive and were particularly enthusiastic about the oppor - tunity to browse each other’s installations and be aware of each other’s customization activities . The peer installation is more efficient and preferred over the clumsy and error - prone solution of copying files , and users do not feel dis - tracted by additional appropriation features . In other words , the system acts to significantly reduce overheads in terms of time . It also has the valuable function of preventing in - stallation crashes since one person’s experiences can be easily propagated to others and necessary tools and plug - ins are provided . However , certain limitations are also becom - ing apparent . One of the limitations that has become evident is the ab - sence of a feature that can draw a connection between a user interface element and the underlying tool . For example a new Eclipse user needs help with a certain user interface element or functionality . However since Eclipse plug - ins are integrated so deeply it is not clear what tool / plug - in delivers this functionality and therefore he can’t use the prototype to find an experienced user who uses the same tool . The same is true if a user wants to recommend certain functionalities but does not know which plug - ins contribute these . In a future version , we plan to adopt the approach of the Eclipse plug - in spy , a functionality which reveals the plug - in that is responsible for a certain user interface ele - ment by pressing a shortcut key . 2 Another issue is the overly mechanistic implementation of the subnet , which needs to be more flexible than we have provided for . Changes in team membership ; the involve - ment of external members ( such as consultants to an organ - ization ) and casual sharing with outsiders ( friends , universi - ty colleagues , and so on ) are currently not well supported . In addition , the prototype does not yet support the sharing of configuration settings many Eclipse users have expressed a wish for . CONCLUSION Tailoring flexible software products is an increasingly im - portant and common aspect of organizational work . As our study showed , Eclipse users have to deal with complex overhead work for maintaining and extending their working environments to the emerging needs of the daily work . This is a real problem that thousands of Eclipse users encounter regularly in their daily work . While over one thousand additional tools for Eclipse exist , it is hard to find relevant and useful ones . Furthermore , the users have to work out which conflicts may occur , what version of a tool is neces - sary , and what the tool can be used for . In the case of Eclipse , the related sharing and learning prac - tices turned out to be highly cooperative , situated , and grounded in the context of particular work situations . We have argued that because these issues are seldom addressed together , existing solutions only partially support the full context of appropriation . In other words , they largely fail to provide adequate appropriation support in organizations . Hence , there is strong evidence that better solutions for collaborative appropriation are needed and that we have to support all the related facets of finding , sharing and learn - ing in order to support appropriation in practice . Drawing on a detailed understanding of appropriation prac - tices , we have presented design principles for supporting the social and collaborative aspects of appropriation . These principles were implemented in form of a prototype that addressed different aspects we have found to be important in the context of organizations : 2 Cf . http : / / www . eclipse . org / pde / incubator / spy / Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2843 • Appropriation awareness within the organization helps to systematically uncover customizations that are inter - esting for others . • The active search for tools and tool expertise help to decide what to use and whom to ask , based on the peo - ple within the organization rather than relying on anon - ymous market places . • Peer installation of customizations supports sharing customizations with colleagues in a safe way , without having to search for dependencies and without having to work with files directly . Right now , the prototype is tested ‘in the wild’ in form of a long - term study . Early results are positive , though they are subject to the limitations we mentioned above . Right now it is too early for a summative evaluation of how the proto - type is being used in practice . As many issues of appropria - tion support can only be studied in long - term field trials ( due to the relatively rare and unconscious occurrence of appropriation ) , we plan to conduct further evaluations and iterate our design accordingly . REFERENCES 1 . Balka , E . and Wagner , I . Making things work Proc . of CSCW ' 06 , ( 2006 ) , 229 – 238 . 2 . Brandom , R . Tales of the Mighty Dead . Cambridge Univ Press , 2002 . 3 . Brown , B . , Sellen , A . J . , and Geelhoed , E . Music sharing as a computer supported collaborative application . Proc . of ECSCW’01 , ( 2001 ) , 179 – 198 . 4 . Dourish , P . The appropriation of interactive technolo - gies . JCSCW 12 , 4 ( 2003 ) , 465 – 490 . 5 . Draxler , S . and Stevens , G . Supporting the Collaborative Appropriation of an Open Software Ecosystem . JCSCW 20 , 4 ( 2011 ) , 403 - 448 . 6 . EvansData . 3rd Annual Eclipse Global Enterprise Sur - vey Research Findings . Evans Data Cooperation , 2007 . 7 . Fuchs , L . , Pankoke - Babatz , U . , and Prinz , W . Support - ing cooperative awareness with local event mechanisms . Proc . of ECSCW ( 1995 ) , 247 – 262 . 8 . Gantt , M . and Nardi , B . A . Gardeners and gurus : patterns of cooperation among CAD users . Proc . of CHI’92 ( 1992 ) , 107 - 117 . 9 . Glaser , B . G . and Strauss , A . L . The discovery of ground - ed theory . . Aldine Transaction , 2007 . 10 . Gong , L . JXTA : A network programming environment . IEEE Internet Computing 5 , 3 , 88 - 95 . 11 . Greif , I . and Sarin , S . Data sharing in group work . ACM TOIS 5 , 2 ( 1987 ) , 187 – 211 . 12 . Hartswood , M . et al . Co - realization , Co - Evolution and artifacts , ( 2008 ) , 59 – 94 . 13 . Heath , C . and Luff , P . Collaboration and control . JCSCW 1 , 1 ( 1992 ) , 69 – 94 . 14 . Von Hippel , E . “ Sticky information” and the locus of problem solving : Implications for innovation . Manage - ment science , ( 1994 ) , 429 – 439 . 15 . Kahler , H . More Than WORDs . Journal of Universal Computer Science 7 , 8 ( 2001 ) , 826 – 847 . 16 . Kahler , H . Supporting collaborative tailoring . Depart - ment og Communication , Journalism and Computer Sci - ence , 2001 . 17 . Lave , J . and Wenger , E . Situated learning : Legitimate peripheral participation , 1991 . 18 . MacLean , A . et al . User - tailorable systems : pressing the issues with buttons . Proc . of CHI ' 90 , ( 1990 ) , 175 - 182 . 19 . Mackay , W . E . Patterns of sharing customizable soft - ware . Proc . of CSCW’90 , ACM ( 1990 ) , 209 - 221 . 20 . Murphy , G et al . How Are Java Software Developers Using the Eclipse IDE ? IEEE Software 23 , 2006 , 76 - 83 . 21 . Murphy - Hill , E . and Murphy , G Peer interaction effec - tively , yet infrequently , enables programmers to discov - er new tools . Proc . of CSCW’11 , ( 2011 ) , 405 – 414 . 22 . Olson , G . M . and Olson , J . S . Distance matters . Human - computer interaction 15 , 2 ( 2000 ) , 139 – 178 . 23 . Ozakca , M . and Lim , Y . - K . A study of reviews and ratings on the internet . CHI ’06 extended abstracts , ACM ( 2006 ) , 1181 – 1186 . 24 . Pipek , V . From tailoring to appropriation support Uni - versity of Oulu , Oulu , 2005 . 25 . Rogers , E . M . Diffusion of Innovations , 5th Edition . Free Press , 2003 . 26 . Rohde , M . et al . . Towards a paradigmatic shift in IS Proc . of DESRIST’09 , ( 2009 ) , 15 . 27 . Stevens , G . and Draxler , S . Appropriation of the Eclipse Ecosystem . Proc . of COOP ( 2010 ) . 28 . Stevens , G . , Pipek , V . , and Wulf , V . Appropriation Infrastructure . JOEUC , 22 , 2 ( 2010 ) , 58 – 81 . 29 . Svensson , M . S . and Sokoler , T . Ticket - to - talk - television Proc . of NordCHI ' 08 ( 2008 ) , 334 – 343 . 30 . Twidale , M . Over the Shoulder Learning : Supporting Brief Informal Learning . JCSCW 14 , 6 ( 2005 ) , 505 - 547 . 31 . Twidale , M . B . Interfaces for Supporting Over - The - Shoulder Learning . Proc . of HICS , ( 2000 ) , 33 – 37 . 32 . Voida , A . , et al . Listening in : practices surrounding iTunes music sharing . Proc . of CHI’05 , ( 2005 ) , 191 – 200 . 33 . Voida , S . et al . Share and share alike . Proc . of CHI ' 06 ( 2006 ) , 221 – 230 . 34 . Wulf , V . Mechanisms for conflict management in groupware . Advances in Human Factors / Ergonomics 20 , ( 1995 ) , 379 – 384 . 35 . Wulf , V . Exploration environments . Interacting with Computers 13 , 2 ( 2000 ) , 265 – 299 . Session : Better Together CHI 2012 , May 5 – 10 , 2012 , Austin , Texas , USA 2844