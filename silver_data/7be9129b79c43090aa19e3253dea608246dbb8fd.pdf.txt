a r X i v : 2010 . 15015v1 [ c s . H C ] 28 O c t 2020 Towards Supporting Programming Education at Scale via Live Streaming YAN CHEN ∗ , University of Michigan , USA WALTER S . LASECKI , University of Michigan , USA TAO DONG , Google Inc . , USA Live streaming , which allows streamers to broadcast their work to live viewers , is an emerging practice for teaching and learning computer programming . Participation in live streaming is growing rapidly , despite sev - eral apparent challenges , such as a general lack of training in pedagogy among streamers and scarce signals about a stream’s characteristics ( e . g . , diﬃculty , style , and usefulness ) to help viewers decide what to watch . To understand why people choose to participate in live streaming for teaching or learning programming , and how they cope with both apparent and non - obvious challenges , we interviewed 14 streamers and viewers about their experience with live streaming programming . Among other results , we found that the casual and impromptu nature of live streaming makes it easier to prepare than pre - recorded videos , and viewers have the opportunity to shape the content and learning experience via real - time communication with both the streamer and each other . Nonetheless , we identiﬁed several challenges that limit the potential of live stream - ing as a learning medium . For example , streamers voiced privacy and harassment concerns , and existing streaming platforms do not adequately support viewer - streamer interactions , adaptive learning , and discov - ery and selection of streaming content . Based on these ﬁndings , we suggest specialized tools to facilitate knowledge sharing among people teaching and learning computer programming online , and we oﬀer design recommendations that promote a healthy , safe , and engaging learning environment . CCS Concepts : • Human - centered computing → Empirical studies in HCI ; • Applied computing → Collaborative learning . Additional Key Words and Phrases : Live streaming ; programming education ; informal learning ; live coding ACM Reference Format : Yan Chen , Walter S . Lasecki , and Tao Dong . 2020 . Towards Supporting Programming Education at Scale via Live Streaming . In Proceedings of CSCW ’20 : ACM Conference on Computer - Supported Cooperative Work and Social Computing ( CSCW ’20 ) . ACM , New York , NY , USA , 19 pages . https : / / doi . org / TBD 1 INTRODUCTION In the last few years , video - centric learning materials from online platforms such as YouTube , Coursera , and Khan Academy have enabled people of all ages and countries to share and gain knowledge [ 1 – 3 ] . These videos are often well - structured , pre - recorded , and carefully edited by experienced instructors or even professional teams , and the content often covers speciﬁc topics , concepts , or techniques . However , the eﬀort required to start sharing knowledge using these ap - proaches is often high . Moreover , the asynchronous interaction and non - immediate feedback can impede learning and reduce student engagement [ 8 , 58 ] . ∗ This work was completed while the author was an intern at Google . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . Copyrights for components of this work owned by others than the author ( s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . Request permissions from permissions @ acm . org . CSCW ’20 , 2020 , © 2020 Copyright held by the owner / author ( s ) . Publication rights licensed to ACM . ACM ISBN TBD . . . $ 15 . 00 https : / / doi . org / TBD 1 CSCW ’20 , 2020 , Chen et al . Live streaming has increasingly become a way to share and obtain technical knowledge . To un - derstand this emerging practice , we studied live video streaming of computer programming where the focus is on demonstrating knowledge and practical skills for educational purposes . We investi - gate this phenomenon for two reasons : 1 ) there is widespread interest in learning to program [ 52 ] , and 2 ) prior work has found that live coding , in which instructors write code from scratch on a computer connected to a projector in a lecture [ 42 ] , is eﬀective for programming education [ 48 ] . Live streaming platforms scale and democratize this pedagogical technique for anyone who has a decent Internet connection and a passion for sharing their knowledge with the world . Although live streaming is a promising format in the online learning ecosystem [ 15 ] , there are apparent downsides . Compared to massive open online courses ( MOOCs ) or other professional ed - ucational settings , streamers often lack pedagogical training , leading to large variations in content quality , presentation skills , and the ability to engage students . For viewers , there are few signals to determine whether an upcoming stream will be a good ﬁt for the viewer’s learning needs and level of expertise , because unlike pre - recorded videos , live streams have no ratings , view counts , summaries , or previews . These challenges may negatively aﬀect the viewer’s learning experience , making live streaming a less eﬀective learning medium compared to pre - recorded videos . To sustain and improve the developing practice of live streaming programming , we aim to under - stand the reasons for the disconnect between the growing interest in stream participation and the aforementioned challenges . In particular , we explore the beneﬁts that the major stream platforms ( e . g . , YouTube Live , Twitch ) provide for learning - oriented live streams , and the challenges people overcome , work around , or fail to tackle on those platforms . We use pre - recorded video , a more established medium for learning programming , as a reference point to gain a better understanding of the position of live streaming in the online programming education ecosystem . Speciﬁcally , we wanted to answer the following research questions . RQ1 : why do streamers choose to share programming knowledge via live streaming ? RQ2 : why do viewers choose to learn programming via live streaming ? RQ3 : what barriers do streamers face when sharing programming knowledge via live stream - ing ? RQ4 : what barriers do viewers face when learning programming via live streaming ? Through 26 in - depth interviews ( 14 streamers , 12 viewers ) , we found that 1 ) the nature of live ( e . g . , more casual ) content makes streaming sessions easier to prepare than pre - recorded video ; 2 ) streaming gives viewers the opportunity to shape the content through real - time interactions ; 3 ) live interactions make these streams infeasible to script , intensifying streamers’ privacy and harassment concerns ; and 4 ) inadequate tool support makes learning hard to personalize for indi - vidual viewers ( e . g . , pacing ) . Based on these ﬁndings , we discuss four implications for the design of streaming platforms , including a ) evolving generic video streaming platforms to support personalized learning , b ) re - ducing the eﬀort of documenting and retrieving points of interest in live streams , c ) improving support for content moderation , and d ) mitigating streamers’ privacy and security risks . Also , we critique and elaborate on prior design prototypes and concepts applicable to this domain . These ideas work toward a form of improvisational , real - time , and personalized knowledge sharing to ﬁll gaps in formal programming education . In sum , we contribute the following : • We position live streaming in the online , and especially video - based , programming educa - tion ecosystem by highlighting unique advantages that can be leveraged , and limitations that must be mitigated and managed to make this learning medium more eﬀective and viable . 2 Programming Education via Live Streaming CSCW ’20 , 2020 , • We draw design implications to facilitate programming knowledge sharing via live stream - ing , as well as design modiﬁcations to promote a healthier and more secure learning envi - ronment . 2 RELATED WORK Our work mainly relates to two ﬁelds : common practices of programming learning and live stream - ing . In this section , we will review the key work in these two areas . 2 . 1 Common Practices for Learning Computer Programming 2 . 1 . 1 Informal Learning . Consuming knowledge on streaming platforms like Twitch . tv is a form of informal learning , which is a type of learning undertaken on the learner’s own , without exter - nally imposed criteria [ 51 ] . Unlike formal learning , which is often institutionally sponsored and structured , informal learning provides learners better control and personalization , representing a promising opportunity for learners to develop diﬀerent kinds of skills through lifelong learn - ing [ 9 ] . In recent years , a growing number of people have begun to engage in a wide range of technology - based informal learning opportunities . However , the Educating the Engineers of 2020 report highlights the lack of research on informal learning within engineering education [ 45 ] . In the context of live streaming , prior work has reported on the unique learning relationship that this medium creates for programming communities . More speciﬁcally , the act of learning via live streaming often takes place in a collaborative manner rather than an individual one , which enables a sense of social presence . However , researchers have raised the concern that the place of live streaming within the online learning ecosystem is still unclear , making it diﬃcult for people to choose when to use this medium and what beneﬁts they might receive from it [ 15 ] . Our work aims to more clearly position live streaming in the ecosystem of diﬀerent learning mediums , adding new understanding to the body of literature on informal learning within programming education [ 45 ] . 2 . 1 . 2 Video Lecturing . The use of video lecture capture in higher education is becoming increas - ingly commonplace in universities worldwide and massive open online courses ( MOOCs ) [ 25 , 57 ] . Video lectures provide extra resources that may complement students’ studies and add ﬂexibility , temporally and spatially , for students to catch up and revisit the learning materials [ 30 ] . Prior work has explored the cognitive value of educational videos on YouTube and found a set of cognitive features that correlates with students’ learning gains [ 54 ] . However , video lectures have a negative impact on students’ performance compared to regular classroom lectures . Prior work has shown that video lectures can be perceived as uninteresting and may lack beneﬁcial student - teacher and student - student interactions , leading to low class attendance and less engagement [ 8 , 29 , 58 ] . Video delivery of programming solutions may be useful in enabling a lecturer to illustrate the complex decision - making processes and the incremental nature of the actual code development process . McGowan et al . analyzed students’ activities during programming lecture videos and found that code - based , practical demonstrations are more valued by students than solo explana - tions [ 40 ] . Our work explores the potential pedagogical value of coding demonstration via live streaming to inform and improve its educational beneﬁts . We focus speciﬁcally on the informal learning context rather than institutionally structured alternatives such as the types of content found in MOOCs . 2 . 1 . 3 Live Coding . The practice that our work focuses on closely relates to live coding , an exist - ing common pedagogical practice for teaching computer programming where instructors write code with little preparation work and project the process to learners [ 42 ] . Learners beneﬁt from watching instructors’ iterative process of thinking , designing , coding , and testing , which is rarely covered in slides - driven lectures [ 6 , 18 ] . Prior work has explored the eﬀectiveness of live coding 3 CSCW ’20 , 2020 , Chen et al . for teaching introductory programming material and found it to be on par with using static code examples [ 48 ] . Raj et al . [ 47 ] found that students prefer live - coding , as they beneﬁt from seeing the process of programming and debugging . Our work will explore the beneﬁts of the live coding practice in online informal learning settings . 2 . 2 Live Streaming Recently , an increasing amount of work has focused on studying live streaming in the human - computer interaction ( HCI ) community , as this medium enables anyone to share their life experi - ences , opinions , and knowledge on a variety of topics . Prior work has explored the use of streaming platforms and found that streams involve a diverse range of activities , with self - promotion as the most common motivation [ 56 ] . Dougherty explored the use of Qik , showing that 11 % of videos had civic importance , such as journalistic and activist value [ 14 ] . Researchers have also explored the social norms of streaming given its “live” quality . Seering et al . found that viewers could shape the streaming content , and have an impact on other viewers’ behavior through interactions such as moderation interventions [ 50 ] . In this section , we will ﬁrst discuss prior work on entertainment - focused live streaming , which is the most popular type of live content on our target streaming plat - forms ( i . e . , Twitch . tv , YouTube Live ) . Then we will review work on knowledge - sharing - focusedand programming - focused live streaming and discuss their diﬀerences from entertainment - focused live streaming . 2 . 2 . 1 Entertainment - focused Live Streaming . Live streaming has been primarily focused on enter - tainment content , such as eSports [ 22 , 44 ] , live events [ 21 , 55 ] , outdoor activities [ 37 ] , or news updates [ 27 , 53 ] . Streaming platforms like Twitch , which was founded in 2012 , originally focused on game - related content . Prior work in entertainment - focused live streaming found that viewers engage in live streaming because of the unique content of the stream , and being able to partici - pate in that stream’s community [ 23 ] . They also revealed a series of issues in the live streaming community , namely vicious trolling and harassment [ 50 , 59 ] . 2 . 2 . 2 Knowledge - sharing - focused Live Streaming . Other work has also studied knowledge shar - ing via live streaming . Fraser et al . explored how people share knowledge via creative live streams where the content focuses on creating a novel artifact , such as digital visual art [ 17 ] . Chen et al . studied multimedia tools to enrich interactions in live streams for language learning [ 49 ] . Lu et al . investigated the sharing of intangible cultural heritage artifacts ( ICH ) in China via live stream - ing [ 36 ] . They found that streamers’ motivations were less ﬁnancially driven and more altruistic : streamers are driven to develop online communities with unique identities and to share knowledge through meaningful conversations . Other than skill - related knowledge - sharing , Lu et al . found 68 % of their survey respondents use live streaming to share their life experiences , such as dealing with pressure from work [ 39 ] . They found that sharing life experiences in the stream encourages more conversational interactions between streamers and viewers , giving viewers opportunities to learn more about streamers and making them more willing to continue following the streamers . Unlike entertainment - focused live streaming , streamers in knowledge - sharing streams found it challenging to keep their viewers engaged while focusing on more performative activities [ 17 ] . Similarly , viewers found these knowledge - sharing streams to be less eﬃcient and less engaging in terms of streamer - viewer interaction than entertainment - focused streams [ 60 ] . Also , viewers wished the stream archives had better documentation for further consumption [ 38 ] . These con - cerns imply that existing streaming platforms need to make changes to adapt to the interaction needs in live streams focused on knowledge - sharing . 4 Programming Education via Live Streaming CSCW ’20 , 2020 , 2 . 2 . 3 Programming - focused Live Streaming . Growing interest in the online streaming community has led to increased research related to programming - focused live streams as a phenomenon in CS education . For example , Haaranen identiﬁed educational moments in the chats during program - ming streams [ 20 ] . Faas et al . conducted a participant - observer study that observed nine streamers and interviewed ﬁve streamers and four viewers regarding their live streaming programming ex - periences [ 15 ] . The authors reported that viewers played a key role while watching the stream due to their interactions with the streamer and each other . They also found a mutual mentorship among viewers and streamers both during and outside of the stream . Alaboudi et al . conducted a similar preliminary study that compared live streaming program - ming to pair programming by watching 20 - hour stream archive videos and surveying ﬁve stream - ers [ 4 ] . They found that streamers struggled to balance between engaging with viewers and stream - ing the content , and viewers who joined the stream in the middle found it diﬃcult to understand the stream content . All these studies have suggested that programming - focused live streams have great potential as a unique form of online learning , yet these streams face a few unique challenges compared to those of streamers that focus on other content . Those challenges were under - examined in prior work . First , unlike game playing or visual art creation , programming often involves frequent appli - cation switching , from the integrated development environment ( IDE ) and the program output to browsers and other support tools [ 7 ] . This application switching behavior makes it more diﬃcult to follow a programming - focused live stream , as streamers often share one application at a time , so if viewers do not follow along , they might miss the context and thus fall behind . Additionally , de - bugging and on - the - ﬂy learning ( for streamers ) are common activities while developing software . However , these activities can be time consuming and tedious , making the stream less engaging . Finally , software development often requires a series of conﬁguration settings , meaning streamers must provide personal information ( e . g . , API keys , passwords ) , which could cause privacy issues . 3 METHODS To better understand these challenges and ﬁll in the research gaps , we conducted semi - structured interviews with 26 participants who engage in live streaming programming . We recruited our participants via purposive sampling combined with snowball sampling . The ﬁrst eight streamers were recruited based on their high ranking in Twitch . tv’s programming and software development directories and in YouTube’s search results with queries such as “live streaming programming” and “live programming . ” The rest of the streamers and all of the viewers were recruited through an institutionally - maintained general participant pool and snowball sampling . We reached out to interview candidates by email and Twitter with a short description of our research purpose and a background survey about their live streaming experience and demographic information . Based on their responses , we selected our ﬁnal interviewees ( refers to both streamers and viewers ) to ensure the relevance of their experiences , as well as consider diversity in gender , age , and occupation . Each interview session was conducted via video conferencing software and lasted 40 to 75 min - utes . Following their interview , each participant received a thank you gift valued appropriately for their time ( above standard market rate for programmers in the U . S . ) . We designed the interview based on our research questions mentioned in the introduction . We began by asking interviewees about their general motivations for producing or watching live streams compared to pre - recorded videos . We asked when and how they started live streaming , why they continue participating , how they grew their community , and their reasons for streaming more or less often . We then asked interviewees to open an archived stream they recently hosted or watched . We sought to understand what kinds of interactions interviewees had with others before , during , and after live streaming sessions and what their intentions and concerns were . We asked interviewees about 5 CSCW ’20 , 2020 , Chen et al . PID Occupation Age Platform Programming Experience ( yr ) S1 P M 18 to 23 Y 15 S2 P M 41 to 50 Y , T 4 S3 P M 18 to 23 Y 3 S4 P M 31 to 40 Y 2 . 5 S5 P M 31 to 40 Y , T 20 S6 P M 41 to 50 Y 4 S7 H M 24 to 30 Y , T 15 S8 S M 18 to 23 Y 6 S9 P F 24 to 30 Y 10 + S10 P Prefer not to say Prefer not to say T 26 S11 P F 24 to 30 T 10 S12 P F 31 to 40 Y , T 10 S13 H F 24 to 30 T 15 S14 P F 31 to 40 T On and oﬀ 20 V1 H F 18 to 23 Y 2 V2 S M 18 to 23 Y 8 V3 S M 24 to 30 T 5 V4 P M 18 to 23 T 3 V5 S M 24 to 30 Y 4 V6 P M 41 to 50 Y 21 P F 18 to 23 Y 4 P M 24 to 30 Y 5 P F 24 to 30 T 5 P M 24 to 30 T 4 S M 24 to 30 Y 6 S M 24 to 30 Y 5 Table 1 . Participants’ background information . For the Participant column , S1 - S14 represent the 14 stream - ers , and V1 - V12 represent the 12 viewers . For the Occupation column , P = professional developer ( paid to develop software ) , H = hobbyist programmer , and S = student programmer . For the Platform column , Y = YouTube and T = Twitch . their best practices for protecting their or others’ sensitive information , for information about their concerns regarding live streaming , and what they wished to improve or to see improved regarding their privacy concerns . We used an automated transcription service to transcribe all the interviews . The lead author ﬁrst went through the transcripts along with the audio , corrected machine transcription mistakes , and then exported the transcripts to a Google Document . The lead author then conducted iterative cod - ing to divide the interview responses into major themes using an inductive analysis approach [ 12 ] . The lead author coded the ﬁrst few interviews to form an initial codebook , and then discussed with other authors to merge similar codes and identify important emerging themes . With the new codebook , the lead author coded all 26 interviews while discussing and iterating key themes with other authors from time to time . We lightly edited interviewees’ quotes for readability . 6 Programming Education via Live Streaming CSCW ’20 , 2020 , 3 . 0 . 1 Interviewee Backgrounds . Table 1 lists part of the participants’ background information . We did not report the streaming content for each participant , as the small size of certain communities might reveal personally identiﬁable information . We strove for diversity across multiple dimen - sions , such as gender , age , and programming languages used in the live streams that participants hosted or watched . The 26 participants had two main roles : streamers ( 14 ) , whose primary job is narrating their thoughts along with their programming activities , and viewers , who watch the stream and interact with others in the same stream via a single thread chatroom . For each role , we also required certain activities as part of the participant’s eligibility to participate in the study : 1 ) for both streamers and viewers , the participation frequency of programming - related streams should be at least once a month over the last half a year , so that they were likely to be familiar with certain context - appropriate behaviors , such as viewers responding to one another or stream - ers engaging viewers in the stream chat , and they should also have previously produced or watched video recordings about computer programming ; 2 ) for streamers , their streams’ purpose should be about sharing programming knowledge and practical skills ; 3 ) for viewers , they must often watch live streaming sessions for more than half an hour and had some interactions with streamers or other viewers , avoiding those with little engagement . We will use S1 - S14 and to represent the 14 streamers ( S ) and 12 viewers ( V ) , respectively . Both the streamers and viewers participate in a diverse set of live streaming content , including a variety of programming languages such as JavaScript ( 8 ) , Python ( 4 ) , C # ( 3 ) , Dart ( 2 ) , Rust ( 2 ) , and C ( 1 ) . Out of the 14 streamers , 7 of them primarily stream while working through programming tasks related to open source projects . The number of live viewers per session ranges from 5 to 500 people on average . Note that the two closest related prior works that focused on programming streams [ 4 , 15 ] had all male participants . 4 STUDY DESIGN LIMITATIONS While we strove to recruit participants from diverse demographic and professional backgrounds , our participant pool and snowball sampling had some limitations : our sample had only female viewers , and all but three participants were from the U . S . The rest were from Europe . Future work could recruit from broader demographics and geographic regions to improve the external validity of our ﬁndings . In terms of participants’ motivations , our focus was on those driven by the developer commu - nity itself , rather than ﬁnancial rewards ( e . g . , leading paid MOOCs ) or other extrinsic incentives . Most of our streamers stream their working on real programming projects instead of conducting a lecture - style sharing of knowledge . However , we have seen a few other platforms ( e . g . , Douyu . com ) in which the majority of the live streaming programming channels follow a prepared classroom style , a model to which our ﬁndings might not apply . Also , in terms of streaming platforms , our participants used only YouTube Live and Twitch . tv , so some of our ﬁndings and design recommen - dations might not speak to those who participate in live streams on other platforms that might have diﬀerent norms or technical aﬀordances than those we studied . Future work can compare the norms across platforms by recruiting those who have had related experiences . 5 RESULTS In our interviews with streamers and viewers , we solicited both groups’ opinions about their rea - sons for creating or participating in programming - focused live streams , as well as any barriers they faced with this type of knowledge - sharing medium . In the rest of this section , we present our ﬁndings in detail to address our four research questions . 7 CSCW ’20 , 2020 , Chen et al . 5 . 1 Why do streamers choose to share programming knowledge via live streaming ? We found three main reasons for which streamers would share their programming knowledge via live streams as opposed to recorded videos : 1 ) video recording takes much longer to prepare compared to live streaming , 2 ) streaming allows streamers to connect with and update their com - munities , 3 ) streamers can receive rewards and assistance from their viewers . We describe each of these reasons in detail below . 5 . 1 . 1 Producing a video takes much longer than live streaming . When asked why they chose live streaming over video recording , half of the interviewed streamers ( 7 / 14 ) expressed concerns that video recording was a process that could “tak [ e ] forever” ( S6 ) , was “tedious” ( S3 ) , was a “nightmare” ( S11 ) , and was typically “really hard” ( S10 ) . The dread of arduous behind - the - scenes work along with the slower pace of content generation associated with pre - recorded videos were barriers that the streamers were able to avoid with live streaming . After I’ve tried live stream [ sic ] , I’ve actually shifted from doing pre - recorded videos because it takes a lot of time to , you know , think everything through , prepare this crap , and record and edit . Then you know , make everything look nice and then publish . While on the live stream , we can just hit the play button and then uploaded [ sic ] to YouTube and you’re basically done and people are just as happy about it . - S5 When recording a video , a third of the streamers would shift to a “ﬂight attendant” ( S9 ) persona , where the voice - over primarily focuses on the content itself , which is fully prepared and scripted , as if they were “acting” for the “virtual audience” ( S11 ) . In contrast , when live streaming these streamers found their dialogue to be “a bit more casual” ( S11 , S9 ) and “spontaneous” ( S10 ) , and they “don’t care about the risk [ of making mistakes ] at all” ( S9 ) . In prepared content , it’s going to be much more scripted . It’s going to be much more acted , and I’m going to focus more on my facial expressions and make sure that you know what I intended to be and whatever work I’m creating . I think the prepared content is going to be like an actual performance that you can reshoot and whatnot . But in streaming , you can’t really do that unless you’re really good at , like , improv acting or something . - S11 5 . 1 . 2 Streaming is a new way to reach out and update the community . Half of the streamers ( 7 / 14 ) reported that they often streamed about programming work related to open source projects or on - line programming communities . For example , they would review pull requests , add new features , or resolve repository issues . Unlike the other half of the streamers , who have focused on build - ing their own communities with independent projects , these streamers are core contributors in existing open source projects or programming communities . Live streaming allows them to more easily connect with their respective developer communities as a whole , sharing information and updates without excessive eﬀort . [ Live streaming ] seems like an opportunity to reach developer communities in a new way that I hadn’t tried to access before . - S10 We also found that streamers use live streaming as a communication platform to share informa - tion with the developer communities . One streamer found streaming to be an eﬀective method of reaching out to viewers in an existing developer community with quick updates on new features . Two years ago when I started at [ Anonymous Community ] , we had four videos on the YouTube channel , and four of them were from when [ Anonymous Community ] was , like , an energy startup . So [ the videos were ] clearly not , like , aligned with our current 8 Programming Education via Live Streaming CSCW ’20 , 2020 , vision , and having more technical content that I could produce without spending a ton of time on it was a nice way to go back [ and update the users ] . - S9 5 . 1 . 3 Streamers receive appreciations and assistance from viewers . When asked what made them continue streaming , the interviewed streamers mentioned that some of their motivation came from their audience . Speciﬁcally , the motivators included live interactions around common inter - ests ( 7 ) , direct assistance on the streaming content from viewers ( 8 ) , e . g . , viewers pointing out the streamer’s coding mistakes , and viewers’ words of appreciation ( 6 ) . S2 said , “ [ for ] that pre - recorded material , you’re never gonna get feedback on [ it ] , you’re never gonna interact with viewers on [ it ] . It’s reference material . ” Additionally , three streamers beneﬁted from their audience by using them as a sounding board or “rubber duck” 1 ( S3 ) for debugging or getting unstuck . Furthermore , hearing viewers’ comments about how the streams helped them felt personally rewarding for the stream - ers . It’s just nice to hear when people show up and say ‘Hey , just wanna let you know I got my ﬁrst dev job , and thanks so much for keeping your streams on . - S5 5 . 2 Why do viewers choose to learn programming via live streaming ? Viewers’ motivations found in prior work are limited , as some of them are inferred from behav - ioral observation by researchers [ 15 ] . Our ﬁndings revealed why , when , and how viewers choose whether or not to attend a live stream session , watch a pre - recorded video , or watch an archived live stream . We describe each of these reasons in detail below . 5 . 2 . 1 Streaming creates an over - the - shoulder learning experience . , reported that they had no spe - ciﬁc “problems to solve” ( V4 , V3 ) or concrete learning objectives ( V1 , V5 ) . In contrast , when watching a pre - recorded video tutorial or attending online classes , these viewers mentioned that they often looked for solutions to speciﬁc problems or had deﬁned learning objectives in mind . Viewers cited a variety of reasons for this , including not approaching a live stream in the same way they would approach a class , not having much information about the live stream provided ahead of time , and expecting to ask in - situ questions as the stream progresses . In fact , this phenomenon is similar to the concept of informal learning , or “over - the - shoulder learning . ” We will later discuss how live streams can beneﬁt from this practice when used as a form of online learning . For more speciﬁc types of problems that I would have , like . . . I can also look [ them ] up on Stack Overﬂow . Like ‘how do I ﬁx this error ? ’ So those are not the things that I would watch live streaming for . I’m going to the live stream more for , like , the structure of a project of the [ chat ] bot . - V4 , most viewers reported satisfaction with the streams that they have watched fully , although only a few of them directly applied the techniques learned from the stream to their daily work . 5 . 2 . 2 Viewers like to see and hear streamers’ thought processes . This ﬁnding is consistent with prior work on the motivation of viewers watching live programming [ 15 , 47 ] . As viewers often bring this expectation to live streaming sessions , they may ﬁnd it unsatisfactory when streamers are not actually live streaming but instead “copying and pasting” ( V6 ) pre - written code . I like to see how the person thinks and makes mistakes , and a lot of people edit it ( the video ) too harshly . And then it ends up being this one ﬂuid front - to - back program with no mistakes . They are not researching anything or looking anything up , and that’s not realistic to me . So I think it’s a little bit more entertaining , a bit more easy to sit through a lot of the live stream videos or even their archive videos . - V4 1 https : / / tinyurl . com / y333u324 9 CSCW ’20 , 2020 , Chen et al . 5 . 2 . 3 Real - time interaction makes the learning more authentic . V2 said “It feels better , feels [ like ] you can interact with the actual streamer live and ask questions . ” The real - time proceedings make viewers feel that “ [ streamers ] can answer questions from you right there” ( V1 ) . Half of the viewers ( 6 / 12 ) seek closer connections with others in the community as opposed to a one - oﬀ encounter . “I was looking for communities that I can join in , and [ the streamers ] are almost like a mentor . ” V4 said . Similar to prior work on the live streaming of other content [ 17 ] , viewers also expressed their preference for watching certain live streams , as they favor the way that the streamer explained things ( V1 , V3 , V4 , V5 , V7 , V11 ) . 5 . 3 What are the barriers that streamers face when sharing programming knowledge via live streaming ? In this section , we report diﬃculties streamers face when creating content for programming - focused live streams . We address topics that have not been considered in prior work , including privacy , preparatory work for a streaming session , and issues that members of marginalized groups face . 5 . 3 . 1 . During our interview , all streamers had concerns regarding the potential risk of exposing their personal information to an unknown audience . This information ranged from digital infor - mation such as email addresses , passwords , and API keys to physical information such as “where I live” ( S5 ) or “my family” ( S2 ) . S2 raised some concerns : [ It is ] very easy to dox yourself . I have had guests on who inadvertently showed their phone number on stream . I’ve had issues where the API keys for various services have inadvertently been shown on stream . The sensitivity of information could also depend on the content being streamed . Three stream - ers had live - streamed using products from the organizations they were work for , and all of them expressed the challenge of keeping their organizations’ information conﬁdential , including “unan - nounced projects” ( S11 ) or “user - related information” ( S9 ) . S9 said , My number one thing is that I will I never , ever , ever want to violate user privacy . That’s why I never use a dev environment . I never use my admin account . I actually have a second non - admin account that I use [ for streaming ] . All streamers explained that they prepare to live stream by performing a series of protective actions to safeguard their sensitive information . Before live streaming , streamers log in to all nec - essary accounts ( 14 streamers ) , use anonymous mode in their browser ( 10 ) , share only part of the screen ( 8 ) , and use unrecognizable usernames or accounts only while streaming ( 6 ) . Some stream - ers also consider the background of their videos as well : [ The ] easiest way is just to keep it away from anything related to the street , so I don’t have any windows behind me . It’s hard for people to tell where I am . I’m just doing it in an all closed room right now - S10 Nearly all streamers ( 12 / 14 ) expressed the tedium and eﬀort involved in these preparation tasks , and even if these streamers are thoroughly prepared , we found that they were still worried about potentially leaking their private information during stream . These streamers noted that they must carefully monitor both their current shared content as well as what they are about to share and say to avoid leaks . S3 said , “recently I do work on [ sic ] projects in private repositories that aren’t public . I’ll need to keep in mind not to just open GitHub in the front page on the live stream . So I need to just go to a repository for example . ” Even with such eﬀorts , these streamers still occasionally encounter unintended information leaks : 10 Programming Education via Live Streaming CSCW ’20 , 2020 , You code on screen , you dump an object [ that ] has a bunch of secrets in it . It happens . I average like one secret getting leaked out like every six hours of screen time . - S10 You don’t really realize how many times like a random API key or some other secret is in log ﬁles until you try and code on the stream . - S10 When we asked those streamers who had privacy concerns or incidents how they prevent or handle these incidents , the answers were mixed . Half of the streamers ( 6 / 12 ) reported that they do not do anything , as they think “nobody made a big deal out of it” ( S9 ) , and they trust their technology and platform to protect them ( S10 ) . The rest were very sensitive and cautious about their privacy and often applied advanced precautionary practices , such as “ [ muting ] my mic while typing my password” ( S7 ) , or “ [ notifying ] the SWAT team in my city” ( S10 ) . 5 . 3 . 2 Gender - related harassment is common and diﬀicult to prevent . more than half of these non - male streamers ( 4 / 6 ) said their biggest concern is gender harassment , such as receiving comments about their physical appearance . In contrast , none of the eight male streamers mentioned gen - der harassment as a concern during their interviews . One non - male streamer noted the frequent occurrence of these unwanted comments : For me , it’s all gender aspect . So [ people just keep ] making comments about irrelevant things like my physical appearance and things like that . - S10 These comments are often from the live chat , which is diﬃcult to ignore or ﬁlter out . However , some comments are made outside of live stream : “I tend to get more of the creepy messages to my email or to my Twitter” ( S12 ) . These comments have made streamers feel “horrible” ( S9 ) , “uncom - fortable” ( S12 ) , and worried about their safety ( S10 ) . When asked why there are few non - male programming streamers , all six non - male streamers cited the imbalanced gender ratio in developer communities and the hassle of dealing with poten - tial harassment as two main reasons . S11 said , “there are challenges that men just don’t face when doing this type of stuﬀ online . Men generally don’t have or generally aren’t being harassed for their gender . ” 5 . 3 . 3 Challenges and practices that the non - male streamers face when streaming . None of the stream - ers believe the current tools on their streaming platforms are suﬃcient to prevent harassment . “I wish I had one better set up so I could like block people from within the overlay” ( S12 ) . When harass - ment occurs , streamers often warn and ban the oﬀending commenters immediately while working to build a healthier community . If there are people who troll you [ . . . ] you can get rid of them as soon as possible , then you’re going to start building a community that’s really supportive of you , and that support gives you a lot of strength . - S11 Besides tools , three of the six non - male streamers mentioned that ﬁnding other streamers who share a similar identity has helped them overcome this barrier : “one of the reasons why I felt like it was OK to start was I saw another person [ like me ] doing it” ( S12 ) . We also found that non - male streamers spent more eﬀort signalling their ability during the interview ; one noted that “I think it also helps that I have a PhD” ( S9 ) . All six non - male streamers talked about their qualiﬁcations in terms of external validations ( e . g . , a certiﬁcate or a degree ) , while none of the male streamers we interviewed mentioned such . [ I ] wrote the standard introduction book to [ framework ] , and so most of the people in the [ framework ] world—not all , but most of them—are pretty respectful . - S12 11 CSCW ’20 , 2020 , Chen et al . 5 . 4 What are the barriers that viewers face when learning programming via live streaming ? 5 . 4 . 1 Related resources are not shared in real - time . V4 wished for the code and resources to be shared “on the ﬂy . ” It would be good for the streamers , maybe before they do the live stream , [ to ] make an announcement and they release , like , resources that they’re going to use during the coding . [ . . . ] Other people can deﬁnitely follow along when they have a package and stuﬀ . - V1 However , the live nature of streaming means that streamers often improvise their knowledge sharing . This modality makes it challenging for streamers to share materials in advance , since live streams are not typically scripted or planned concretely . 5 . 4 . 2 Finding high - quality and helpful live streams can be diﬀicult . some viewers reported behav - ing as“shoppers” looking for the right match , but this can be an ineﬃcient process . “I [ don’t ] realize this topic isn’t that much of interest to me till the streamers [ start ] coding , which is 20 minutes in already” ( V5 ) . unlike recorded videos , which include indicators of video quality ( e . g . , number of views , likes , comments ) and the ability to scrubbing through the timeline , there are often limited signals to determine the quality of a live stream . Additionally , streamers usually do not share their streaming resources ( e . g . , code , documents ) in advance , so it is diﬃcult for viewers to quickly search and ﬁnd a stream they would like to watch . Although the viewers in our study were experienced with live streaming , some of them still made their decisions solely based on the title of the stream , which could be ineﬀective . I just look through and go by what the title is describing . And then after , I start watch - ing it for like maybe 5 - 10 minutes . If it’s going too slow or [ it’s ] just not [ about ] topics that I’m interested in , then I’ll probably switch and ﬁnd something [ else ] . - V5 Other viewers found their own methods of choosing a stream to watch using indicators such as their prior experience with a particular streamer or examining the streamer’s video archive . For example , V4 relied on their knowledge about the streamer’s credentials to assess content qual - ity : “ [ the streamer ] has a PhD in computer science , and so when I watch it , I know that I’m getting legitimate , helpful knowledge . ” 5 . 4 . 3 Impromptu research may be needed when encountering new concepts . I would listen to the live stream , and then as they were talking I’d be , like , googling things or googling more about certain topics . - V5 As mentioned earlier , this style of learning is similar to “over - the - shoulder learning , ” in which a learner looks over someone else’s shoulder as they work on a project on screen [ 5 ] . However , there are always trade - oﬀs between time spent watching a stream and looking up newly encountered concepts that are useful to learn . 5 . 4 . 4 Learning experience is not personalized to the viewer’s ability and preferences . The fact that live streaming is free and has no minimum requirement for the viewer’s level of expertise also means that viewers often have more diverse backgrounds than those who attend structured classes . We also noticed that diﬀerent learning paces inﬂuenced viewing behaviors . However , because of the “live " nature of streaming , these viewers often felt they had “fallen behind” ( V6 ) or were “lost” ( V4 ) but did not want to interrupt the streamer due to perceived social norms . [ I’ve ] fallen behind because I’m doing research or just because he’s moved fast . It would be pretty awesome [ to ] sync with him again , like [ I’m ] desperate [ sic ] at that 12 Programming Education via Live Streaming CSCW ’20 , 2020 , point because I can’t catch up to him if there’s something wrong or I’ve missed a line or a typo and he’s just cranking on . 5 . 4 . 5 . When asked about the live Q & A experience with viewers , all streamers reported that for most of the time they have no problem understanding and responding to viewers’ questions in the chat . This makes sense , as viewers’ questions are often related to concepts that streamers have recently discussed . The challenge of understanding others’ chat messages arises from the loss of a shared context and the large volume of chat messages , which has been mentioned in related work [ 38 , 60 ] . In the context of programming , we observed the challenge comes from the fact that the code is constantly changing , which means viewers’ references ( e . g . , line number ) are only correct at the time the information appeared in the chat . 5 . 4 . 6 Stream archives can enable deeper use of the content but are hard to navigate . The majority of our viewer participants ( 9 / 12 ) mentioned that the information they seek when watching live stream archives is diﬀerent from the information found in pre - edited videos . This information includes a streamer’s thought process ( V3 - 6 ) , Q & As ( V1 , V7 , V12 ) , recently - introduced techniques and features ( V11 , V12 ) , or the social aspects of a stream ( V9 ) . This aligns with our aforementioned ﬁndings regarding viewers’ motivations : viewers do not often decide to watch live streaming to solve a speciﬁc problem . Instead , they are typically patient , relaxed , and open to receiving new ideas when participating in live streaming or viewing archives . Additionally , six viewers have revisited stream archives after attending the live version . Watch - ing stream archives allows them to further analyze this knowledge and learn at their own pace . The topic is just hitting me the ﬁrst time , and then if I notice later [ that ] I was like ‘oh , I really have to get into this and use this , ’ that’s , like , the ﬁrst wave of knowledge and information about this thing . Then I’ll go back and be like , let me break down this live stream or whatever I watched and , you know , plan out some topics that I’m going to go over myself and get more deeply into it and ﬁgure out what’s up . - V5 When asked how they navigate the stream archives , seven viewers mentioned that they often found it diﬃcult to locate speciﬁc information that they were looking for . This is because videos are often unplanned , and there are no timetables to facilitate skipping to speciﬁc content . Consistent with prior work [ 16 ] , live streams are often very long , so useful information is more likely to be scattered throughout the video , and since the stream is not edited , not all of the content may be engaging or helpful . 6 DISCUSSION In light of our ﬁndings , how can we redesign streaming platforms to better support this informal learning and teaching practice in developer communities ? To address this question , we discuss four design implications in this section ( Table 2 ) . 6 . 1 Designing Personalized Live Learning Environments The UI of these live streaming platforms are inherited from the versions designed with only gamers or entertainers in mind , not learners and teachers . The design principles used on these platforms focus on optimizing the UI for extended visual attention , such that viewers are less likely to look away from streamed content . However , both prior work and our research have shown that viewers often need to look away from the video stream in order to digest the incoming knowledge through complementary activities , like asking questions , taking notes , or doing relevant exercises [ 13 ] . The behaviors that beneﬁt learners most are not well supported by live stream platforms designed for 13 CSCW ’20 , 2020 , Chen et al . entertainment content . This indicates a need for platform design updates that consider the context of learning , allowing platforms to meet the needs of creators and viewers of educational content . Before online learning became popular , the education community was already grappling with the challenge of providing appropriate educational opportunities at scale in traditional in - person settings ( e . g . , in large lectures ) [ 46 ] . As we found , the diﬃculty in adapting teaching and demon - stration to viewers is due in part to their diﬀering expertise levels . Below , we discuss a few design implications based on our ﬁndings and prior work on learning at scale and personalized education . Scale learning with better real - time information acquisition tools . The viewer’s chal - lenge of continuously following along at a streamer’s pace also occurs in other groupware settings , such as in virtual meetings [ 28 ] . The lack of support for latecomers who must obtain missed in - formation could negatively aﬀect their engagement and overall productivity . Prior work proposed catch - up techniques for viewing and replaying missed activities in settings that require real - time interactions among stakeholders [ 19 ] . In the context of live streaming programming where the viewers shift their attention away from the stream and want to sync back up again later , we pro - pose the pause feature from prior work [ 31 ] . This allows viewers to pause , fast - forward , and jump immediately back to the current point of the live stream . Furthermore , when there are multiple ﬁles and applications that the streamers were switching in between , this feature would allow viewers to stay at the view ( e . g . , a code ﬁle ) that they want to pay more attention on . Streaming platforms could also integrate information seeking tools to ease the process of knowl - edge acquisition in real time . We propose that future streaming systems could automatically pro - vide related resources as streamers narrate , such as speciﬁc programming concepts or sections in the documentation . This could be done by combining the techniques of auto - transcription and Google search APIs . Along with this feature , we suggest that platforms enable real - time code sharing , with streamers’ permission . This would help those viewers who code along but worry that they “would have fallen behind” because they took the time to look up a new concept . Prior work has proposed eﬀective tools with automation techniques [ 7 , 24 , 35 ] , or crowdsourcing ap - proaches [ 11 , 32 ] to provide easy access to code - related support . Future work could explore more techniques to help viewers to learn at their own pace . Personalized stream matching process . In the future , we can also consider mechanisms that help align a stream’s diﬃculty level with the viewer’s current knowledge and skills . This will Main Results Design Implications - Related resources aren’t shared in advance - Finding quality , helpful live streams can be diﬃcult - Impromptu research may be needed if viewers watch streams without speciﬁc problems in mind - Certain techniques help create a more personalized learning experience Designing personalized live learning environments - Chat rooms lack methods of capturing context - Stream archive is useful but hard to navigate Creating new tools for con - tent retrieval and under - standing - Strategies to prevent privacy leaks can demanding and tedious to put in place Easing the eﬀort of privacy protection - Gender - related harassment is common and hard to prevent Designing healthier and cleaner learning environ - ments Table 2 . Four design implications that are drawn from our results . 14 Programming Education via Live Streaming CSCW ’20 , 2020 , help move towards a constructivist learning environment where viewers are more likely to retain knowledge attained by engaging in contextualised problem - solving [ 43 ] . Examples could include showing a visual “diﬃculty” badge for an upcoming stream , including a section of knowledge prerequisites in the stream’s description and real - time displays of viewers’ self - reported expertise level . This could allow streamers to adjust their teaching strategy and content , shaped indirectly by viewers , and potentially help indecisive viewers determine whether they should join the stream . Future work would be needed to conduct deeper analysis on streamers’ live streaming styles to match them with viewers’ viewing preferences . 6 . 2 Creating New Tools for Content Retrieval and Understanding A major challenge for many of our viewers was the diﬃculty of retrieving and understanding information that they missed or revisited . This information was mostly from the previous chat and the video content . In particular , the lack of context in the chat and poor tool support on video navigation can make learning and communicating with each other more diﬃcult . We envision two directions for designing tools to facilitate retrieving and understanding information : context - captured chat interfaces and lightweight stream archiving tools . Context captured chat interface . The current chat tool on streaming platforms does not sup - port context referencing ( e . g . , line number ) , which makes the chat hard to understand during pro - gramming streams . Additionally , the fact that streamers constantly change their code makes it more challenging to understand past references in the chat . Chat . codes [ 41 ] and EdCode [ 10 ] enable students and teachers to link code snippets to their Q & A messages for context reference . However , our problem requires context that might link to multiple points of the video . Similar to prior work that automatically segmenting live stream archives [ 16 ] , we suggest developing a chat interface that is automatically organized by anchor points , . In this way , the system would automatically anchor and manage the stream content based on the chat time and natural language context , Lightweight stream archiving tools . Our ﬁndings have shown insuﬃcient support for inter - acting with stream archives eﬃciently . This includes 1 ) the presence of uncut irrelevant content ( e . g . , idle stream time ) , 2 ) no navigation support ( e . g . , a timetable ) , and 3 ) a lack of relevant and in - teresting interactions ( e . g . , q & a in the chat ) during the stream . All streamers we interviewed had a desire to better archive their streams for various beneﬁts , such as to build viewership or for future content reference . Some of them expressed their willingness to add timetables , but they often felt “tired” after a few hours of live streaming , making it more diﬃcult to follow through . To address this challenge , prior work has attempted to leverage viewers to help with annotation and documentation of the stream archive [ 38 ] . However , they found that viewers often had low incentives to contribute to the work , which we found from our interviews as well . To achieve a similar goal , We suggest designing a lightweight annotation tool that allows streamers or their designated assistants to take notes as they stream along , with automatically captured timestamps and auto - generated transcript . Once live streaming is over , the timetable would be automatically generated . 6 . 3 Reduce the Eﬀort of Privacy Protection The challenge of protecting privacy is much more diﬃcult in live streaming than it is in pre - recorded video . Unlike pre - recorded video , where people can always edit their recordings before posting , the nature of live streams makes it infeasible to edit their recording [ 33 ] . Writing scripts for the stream would not work , as interacting with the live audience would break the plan by in - troducing new content , which could result in streamers showing or saying sensitive information . 15 CSCW ’20 , 2020 , Chen et al . Streaming programming work makes privacy control more challenging , as streamers constantly switch between applications ( e . g . , IDE , browser , terminal ) for diﬀerent coding - related tasks . Prior work has studied people’s privacy concerns regarding information disclosure during oth - ers’ live video game streaming [ 34 ] . Given that their main ﬁndings are concerns a participant might have regarding the team she / he was in , their design suggestions do not apply in our case . One approach would be to simply provide a privacy checklist that guides streamers through the steps that they need to take before streaming . An automatic checker could also require that certain privacy settings are in place , such as sharing a browser window in incognito mode . Ad - ditionally , integrating with existing automated tools , such as OCR , can help detect patterns that are potentially sensitive , such as cell phone numbers , emails , or home addresses , and then we can use the existing user interface design to hide them or notify streamers . The computational cost of conducting OCR can be high when done in real time . Instead , a post - hoc video process would be better to help reduce the risk of exposing sensitive information to malicious viewers through the archived stream . 6 . 4 Designing Healthier Learning Environments While enhancing streaming techniques can help address certain problems in programming edu - cation , the solution to many other issues in this emerging sociocultural environment may exist fully or partially outside the purview of tools and technologies . Gender - related harassment , in particular , has been an issue in live streaming in other content areas , such as gaming [ 59 ] . In de - veloper communities , gender - related harassment in live streaming is not yet well - studied , but the general gender imbalance likely makes the issue prevalent . Prior work has discussed such issues in the developer community on sites such as GitHub [ 26 ] . Aside from gender - related harassment , we also observed skill - related stereotypes from the audience . To address the problems we found , we suggest a few social strategies and design adjustments to beneﬁt both platforms and streamers wishing to create a healthy and safe learning environment . Promoting underrepresented streamers . Improving usability of the moderation tools . A few streamers mentioned that they did not set up the platform’s built - in moderation tool because they perceived it to be too complicated to initiate . Streaming platforms could make the moderation setup process easier in the future . Incentivizing viewers to help moderate the chat . Prior work has studied moderation in live streaming for games . Researchers found that viewers’ motivation to volunteer to help moderate streams is not very high . During our research , we asked viewers how willing they would be to help streamers to moderate the chat . Some viewers expressed concerns , such as the excessive time and commitment needed , and noted that their motivation depends on the streamer in question . For viewers who have followed a certain streamer for an extended time or who have developed a close relationship with the streamer , they expressed a willingness to help moderate the streamer’s chat . In the live streaming programming community , the audience size is usually not large , making it even more diﬃcult to ﬁnd a volunteer to help moderate for the entire session . We propose that the streamers or the streaming platforms could develop incentives , such as virtual points and badges or privileged access , for those who moderate the chat . They might also allow viewers to volunteer for only a portion of the entire streaming time . 7 CONCLUSION In this research , we sought to understand the beneﬁts and challenges of live streaming as a new way to share and acquire technical knowledge . In particular , we aimed to position live streaming in the ecosystem of online programming education by comparing it to traditional video - based learn - ing experiences . Through in - depth interviews with 14 streamers and 12 viewers who regularly 16 Programming Education via Live Streaming CSCW ’20 , 2020 , participate in programming - focused live streams , we identiﬁed the unique educational value live streaming provides due to its improvisational , real - time , and social nature . We found that these characteristics of live streaming not only lower the barrier to sharing knowledge but also allow the viewer to shape the content being taught while observing error recovery and workarounds they would otherwise miss in well - edited videos . Live streaming thus plays an important gap - ﬁlling role in the rather crowded space of online learning technologies . Nonetheless , our study also revealed a number of challenges users face in education - focused live streaming . In addition to a lack of features speciﬁcally designed to support learning in video live streaming platforms , streamers also have to deal with privacy risks and sometimes online harass - ment . Drawing from our ﬁndings , we suggest better tools and strategies for leveraging the beneﬁts of live streaming and mitigating the drawbacks and risks of participation . We contribute a critical examination of this young practice to the HCI literature and several design directions to evolve live streaming platforms into safer , more eﬀective , and more inclusive learning environments . 8 ACKNOWLEDGEMENT We thank our participants for sharing their experiences and perspectives with us , Google for spon - soring this work , Rebecca Krosnick for her feedback and proofreading the writing , and all of our reviewers for their constructive feedback on this paper . REFERENCES [ 1 ] 2020 . Coursera . https : / / www . coursera . org Accessed : Jan . , 2020 . [ 2 ] 2020 . Khan Academy . https : / / www . khanacademy . org Accessed : Jan . , 2020 . [ 3 ] 2020 . Youbue , Google . https : / / www . youtube . com Accessed : Jan . , 2020 . [ 4 ] Abdulaziz Alaboudi and Thomas D LaToza . 2019 . An Exploratory Study of Live - Streamed Programming . VL / HCC ( 2019 ) . [ 5 ] Liam J Bannon . 1986 . Helping users help each other . In User centered system design . CRC Press , 399 – 410 . [ 6 ] Jens Bennedsen and Michael E Caspersen . 2005 . Revealing the programming process . In ACM SIGCSE Bulletin , Vol . 37 . ACM , 186 – 190 . [ 7 ] Joel Brandt , Philip J Guo , Joel Lewenstein , Mira Dontcheva , and Scott R Klemmer . 2009 . Two studies of opportunistic programming : interleaving web foraging , learning , and writing code . In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems . ACM , 1589 – 1598 . [ 8 ] Rovy F Branon and Christopher Essex . 2001 . Synchronous and asynchronous communication tools in distance edu - cation . TechTrends 45 , 1 ( 2001 ) , 36 . [ 9 ] John Bransford . 2007 . Preparing people for rapidly changing environments . Journal of Engineering Education 96 , 1 ( 2007 ) , 1 – 3 . [ 10 ] Yan Chen , Jaylin Herskovitz , Gabriel Matute , April Wang , Sang Won Lee , Walter S Lasecki , and Steve Oney . 2020 . EdCode : Towards Personalized Support at Scale for Remote Assistance in CS Education . In 2020 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) . IEEE , 1 – 5 . [ 11 ] Yan Chen , Sang Won Lee , Yin Xie , YiWei Yang , Walter S Lasecki , and Steve Oney . 2017 . Codeon : On - demand software development assistance . In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems . ACM , 6220 – 6231 . [ 12 ] Juliet Corbin , Anselm L Strauss , and Anselm Strauss . 2015 . Basics of qualitative research . sage . [ 13 ] National Research Council et al . 2009 . Learning science in informal environments : People , places , and pursuits . National Academies Press . [ 14 ] Audubon Dougherty . 2011 . Live - streaming mobile video : production as civic engagement . In Proceedings of the 13th international conference on human computer interaction with mobile devices and services . ACM , 425 – 434 . [ 15 ] TravisFaas , Lynn Dombrowski , Alyson Young , and AndrewDMiller . 2018 . Watch me code : Programming mentorship communities on twitch . tv . Proceedings of the ACM on Human - Computer Interaction 2 , CSCW ( 2018 ) , 50 . [ 16 ] C Ailie Fraser , Joy O Kim , Hijung Valentina Shin , Joel Brandt , and Mira Dontcheva . 2020 . Temporal Segmentation of Creative Live Streams . In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems . 1 – 12 . [ 17 ] C Ailie Fraser , Joy O Kim , Alison Thornsberry , Scott Klemmer , and Mira Dontcheva . 2019 . Sharing the Studio : How Creative Livestreaming can Inspire , Educate , and Engage . In Proceedings of the 2019 on Creativity and Cognition . ACM , 144 – 155 . 17 CSCW ’20 , 2020 , Chen et al . [ 18 ] Rex E Gantenbein . 1989 . Programming as process : a “novel” approach to teaching programming . In ACM SIGCSE Bulletin , Vol . 21 . ACM , 22 – 26 . [ 19 ] Carl Gutwin , Scott Bateman , Gaurav Arora , and AshleyCoveney . 2017 . Looking Away and Catching Up : Dealing with Brief Attentional Disconnection in Synchronous Groupware . In Proceedings of the 2017 ACM Conference on Computer Supported Cooperative Work and Social Computing . 2221 – 2235 . [ 20 ] Lassi Haaranen . 2017 . Programming as a performance : live - streaming and its implications for computer science education . In Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education . ACM , 353 – 358 . [ 21 ] OliverLHaimson andJohnCTang . 2017 . WhatmakesliveeventsengagingonFacebook Live , Periscope , andSnapchat . In Proceedings of the 2017 CHI conference on human factors in computing systems . ACM , 48 – 60 . [ 22 ] Juho Hamari and Max Sjöblom . 2017 . What is eSports and why do people watch it ? Internet research 27 , 2 ( 2017 ) , 211 – 232 . [ 23 ] William A Hamilton , Oliver Garretson , and Andruid Kerne . 2014 . Streaming on twitch : fostering participatory com - munities of play within live mixed media . In Proceedings of the 32nd annual ACM conference on Human factors in computing systems . ACM , 1315 – 1324 . [ 24 ] AndrewHead , Codanda Appachu , Marti A Hearst , and Björn Hartmann . 2015 . Tutorons : Generating context - relevant , on - demand explanationsanddemonstrations ofonlinecode . In 2015 IEEESymposium onVisualLanguages and Human - Centric Computing ( VL / HCC ) . IEEE , 3 – 12 . [ 25 ] Richard Holliman and Eileen Scanlon . 2013 . Mediating science learning through information and communications technology . Routledge . [ 26 ] Nasif Imtiaz , Justin Middleton , Joymallya Chakraborty , NeillRobson , Gina Bai , andEmersonMurphy - Hill . 2019 . Inves - tigating theeﬀectsofgenderbiasonGitHub . In Proceedings ofthe 41st International ConferenceonSoftwareEngineering . IEEE Press , 700 – 711 . [ 27 ] Gerald Iorio . 2016 . TrumpClimber . In Periscope . https : / / www . periscope . tv / w / 1vOxwpkOjYLKB [ 28 ] Sasa Junuzovic , Kori Inkpen , Rajesh Hegde , Zhengyou Zhang , John Tang , and Christopher Brooks . 2011 . What did I miss ? In - meeting reviewusing multimodal accelerated instant replay ( AIR ) conferencing . In Proceedings ofthe SIGCHI Conference on Human Factors in Computing Systems . 513 – 522 . [ 29 ] Juho Kim , Philip J Guo , Daniel T Seaton , Piotr Mitros , Krzysztof Z Gajos , and Robert C Miller . 2014 . Understanding in - video dropouts and interaction peaks inonline lecture videos . In Proceedings of the ﬁrst ACM conference on Learning @ scale conference . ACM , 31 – 40 . [ 30 ] Marc Kruger and ReinholdNickolaus . 2005 . Self - directedand cooperative learning withlecture recording . PhD Disser - tation , Availableathttp : / / stadium . open . ac . uk / prolearn / summer05 / documents / marc _ krueger _ abstrakt _ of _ dissertation . pdf ( 2005 ) . [ 31 ] Walter S Lasecki , Raja Kushalnagar , and Jeﬀrey P Bigham . 2014 . Helping students keep up with real - time captions by pausing and highlighting . In Proceedings of the 11th Web for All Conference . ACM , 39 . [ 32 ] Thomas D LaToza , W Ben Towne , Christian M Adriano , and André Van Der Hoek . 2014 . Microtask programming : Building software with a crowd . In Proceedings of the 27th annual ACM symposium on User interface software and technology . ACM , 43 – 54 . [ 33 ] Sang Won Lee , Aaron Willette , Danai Koutra , and Walter S Lasecki . 2019 . The Eﬀect of Social Interaction on Facilitat - ing Audience Participation in a Live Music Performance . In Proceedings of the 2019 on Creativity and Cognition . ACM , 108 – 120 . [ 34 ] Yao Li , Yubo Kou , Je Seok Lee , and Alfred Kobsa . 2018 . Tell Me Before You Stream Me : Managing Information Dis - closure in Video Game Live Streaming . Proceedings of the ACM on Human - Computer Interaction 2 , CSCW ( 2018 ) , 107 . [ 35 ] Xieyang Liu , Jane Hsieh , Nathan Hahn , Angelina Zhou , Emily Deng , Shaun Burley , Cynthia Taylor , Aniket Kittur , and Brad A . Myers . 2019 . Unakite : Scaﬀolding Developers’ Decision - Making Using the Web . In Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology . ACM . [ 36 ] Zhicong Lu , MichelleAnnett , Mingming Fan , and Daniel Wigdor . 2019 . I feel it is my responsibility to stream : Stream - ing and Engaging with Intangible Cultural Heritage through Livestreaming . In Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems . ACM , 229 . [ 37 ] Zhicong Lu , Michelle Annett , and Daniel Wigdor . 2019 . Vicariously Experiencing it all Without Going Outside : A Study of Outdoor Livestreaming in China . Proceedings of the ACM on Human - Computer Interaction 3 , CSCW ( 2019 ) , 25 . [ 38 ] Zhicong Lu , Seongkook Heo , and Daniel J Wigdor . 2018 . StreamWiki : Enabling Viewers of Knowledge Sharing Live Streams to Collaboratively Generate Archival Documentation for Eﬀective In - Stream and Post Hoc Learning . Pro - ceedings of the ACM on Human - Computer Interaction 2 , CSCW ( 2018 ) , 112 . 18 Programming Education via Live Streaming CSCW ’20 , 2020 , [ 39 ] Zhicong Lu , Haijun Xia , Seongkook Heo , and Daniel Wigdor . 2018 . You watch , you give , and you engage : a study of live streaming practices in China . In Proceedings of the 2018 CHI conference on human factors in computing systems . ACM , 466 . [ 40 ] Aidan McGowan , Philip Hanna , and Neil Anderson . 2016 . Teaching programming : understanding lecture capture YouTube analytics . In Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education . ACM , 35 – 40 . [ 41 ] Steve Oney , Christopher Brooks , and Paul Resnick . 2018 . Creating Guided Code Explanations with chat . codes . Pro - ceedings of the ACM on Human - Computer Interaction 2 , CSCW ( 2018 ) , 131 . [ 42 ] John Paxton . 2002 . Live programming as a lecture technique . Journal of Computing Sciences in Colleges 18 , 2 ( 2002 ) , 51 – 56 . [ 43 ] Arnold Pears , Stephen Seidman , Lauri Malmi , Linda Mannila , Elizabeth Adams , Jens Bennedsen , Marie Devlin , and James Paterson . 2007 . A survey of literature on the teaching of introductory programming . In ACM sigcse bulletin , Vol . 39 . ACM , 204 – 223 . [ 44 ] Anthony J Pellicone and June Ahn . 2017 . The Game of Performing Play : Understanding streaming as cultural produc - tion . In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems . ACM , 4863 – 4874 . [ 45 ] II Phase et al . 2005 . Educating the engineer of 2020 : Adapting engineering education to the new century . National Academies Press . [ 46 ] Joseph Psotka , Leonard Daniel Massey , and Sharon A Mutter . 1988 . Intelligent tutoring systems : Lessons learned . Psy - chology Press . [ 47 ] Adalbert Gerald Soosai Raj , Jignesh M Patel , Richard Halverson , and Erica Rosenfeld Halverson . 2018 . Role of Live - coding in Learning Introductory Programming . In Proceedings of the 18th Koli Calling International Conference on Computing Education Research . ACM , 13 . [ 48 ] Marc J Rubin . 2013 . The eﬀectiveness of live - coding to teach introductory programming . In Proceeding of the 44th ACM technical symposium on Computer science education . ACM , 651 – 656 . [ 49 ] Nurain Adila Abdul Samat , Harwati Hashim , and Melor Md Yunus . 2019 . Live Streaming : A New Platform for ESL Learning . Creative Education 10 , 12 ( 2019 ) , 2899 – 2906 . [ 50 ] Joseph Seering , Robert Kraut , and Laura Dabbish . 2017 . Shaping pro and anti - social behavior on twitch through moderation and example - setting . In Proceedings of the 2017 ACM conference on computer supported cooperative work and social computing . ACM , 111 – 125 . [ 51 ] Neil Selwyn . [ n . d . ] . Web 2 . 0 applications as alternative environments for informal learning - a critical review . [ 52 ] Dhawal Shah . 2018 . By The Numbers : MOOCs in 2018 . https : / / www . classcentral . com / report / mooc - stats - 2018 / Accessed : Sep . , 2020 . [ 53 ] Catherine E . Shoichet . 2016 . Facebook Live video oﬀers new perspective on police shootings . . In CNN . https : / / cnn . it / 3cKYyf4 [ 54 ] Abdulhadi Shoufan . 2019 . Estimating the cognitive value of YouTube’s educational videos : A learning analytics ap - proach . Computers in Human Behavior 92 ( 2019 ) , 450 – 458 . [ 55 ] John Tang , Gina Venolia , Kori Inkpen , CharlesParker , Robert Gruen , and Alicia Pelton . 2017 . Crowdcasting : Remotely Participating in Live Events Through Multiple Live Streams . Proceedings of the ACM on Human - Computer Interaction 1 , CSCW ( 2017 ) , 98 . [ 56 ] John C Tang , Gina Venolia , and Kori M Inkpen . 2016 . Meerkat and periscope : I stream , you stream , apps stream for live streams . In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems . ACM , 4770 – 4780 . [ 57 ] Moshe Y Vardi . 2012 . Will MOOCs destroy academia ? Commun . ACM 55 , 11 ( 2012 ) , 5 – 5 . [ 58 ] Dawn Wilson and David Allen . 2011 . Success rates of online versus traditional college students . Research in Higher Education Journal 14 ( 2011 ) . [ 59 ] Donghee Yvette Wohn . 2019 . Volunteer Moderators in TwitchMicro Communities : How TheyGet Involved , the Roles They Play , and the Emotional Labor They Experience . In Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems . ACM , 160 . [ 60 ] Saelyne Yang , Changyoon Lee , Hijung Valentina Shin , and Juho Kim . 2020 . Snapstream : Snapshot - Based Interaction in Live Streaming for Visual Art . In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems ( CHI ’20 ) . Association for Computing Machinery , New York , NY , USA , 1 – 12 . https : / / doi . org / 10 . 1145 / 3313831 . 3376390 19