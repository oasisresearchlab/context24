NetLogo NetLogo Moreno Marzolla Dip . di Informatica—Scienza e Ingegneria ( DISI ) Università di Bologna http : / / www . moreno . marzolla . name / Complex Systems 2 Slide credits : prof . Franco Zambonelli , dr . Stefano Cacciaguerra , and the NetLogo Manual Copyright © 2014 , Moreno Marzolla , Università di Bologna , Italy ( http : / / www . moreno . marzolla . name / teaching / CS2013 / ) This work is licensed under the Creative Commons Attribution - ShareAlike 3 . 0 License ( CC - BY - SA ) . To view a copy of this license , visit http : / / creativecommons . org / licenses / by - sa / 3 . 0 / or send a letter to Creative Commons , 543 Howard Street , 5th Floor , San Francisco , California , 94105 , USA . Complex Systems 3 NetLogo ● NetLogo is a programmable modeling environment for simulating complex systems . ● Modelers can give instructions to hundreds or thousands of independent " agents " all operating in parallel . ● This makes it possible to explore the connection between : – the micro - level behavior of individuals – the macro - level patterns that emerge from the interaction of many individuals . ● http : / / www . ccl . sesp . northwestern . edu / netlogo / Complex Systems 4 Complex Systems 5 Features ● You can use the list below to help familiarize yourself with the features NetLogo has to offer . – System – Language – Environment Complex Systems 6 Features : System ● Free Software ( GPLv2 + ) ● Cross - platform – Written in Java , runs on MacOSX , Windows , Linux ● Web - enabled – Can be executed within a web browser or download and run locally ● Models can be saved as applets and embedded in Web pages ● BehaviorSpace allows planning and execution of simulation experiments with varying parameters Complex Systems 7 Features : Language ● Fully programmable ● Approachable syntax – With a few quirks . . . – Language is Logo dialect extended to support agents ● Mobile agents ( turtles ) move over a grid of stationary agents ( patches ) ● Link agents connect turtles to make networks , graphs , and aggregates ● Large vocabulary of built - in language primitives ● Double precision floating point math Complex Systems 8 Features : Environment ● Interface builder w / – buttons – sliders – monitors – switches – plots – text boxes Complex Systems 9 Programming guide ● The next slides explain some important features NetLogo programming – Agents – Procedures – Variables – Colors – Ask – Agentsets – Breeds – Synchronization – Lists Complex Systems 10 Agents ● The NetLogo world is made up of agents . Agents are beings that can follow instructions . Each agent can carry out its own activity , all simultaneously . ● In NetLogo , there are three types of agents : – Turtles are agents that move around in the world . The world is two dimensional and is divided up into a grid of patches . – Each patch is a square piece of " ground " over which turtles can move . – The observer doesn ' t have a location - - you can imagine it as looking out over the world of turtles and patches . Complex Systems 11 Patches ● Patches have coordinates . The patch in the center of the world has coordinates ( 0 , 0 ) . We call the patch ' s coordinates pxcor and pycor ( integers ) ● The total number of patches is determined by the settings screen - edge - x and screen - edge - y . Complex Systems 12 Turtles ● Turtles have coordinates too : xcor and ycor . ● The each turtle has an identifier who . ● NetLogo always draws a turtle on - screen as if it were standing in the center of its patch , but in fact , the turtle can be positioned at any point within the patch . Complex Systems 13 Miscellaneous ● The world of patches isn ' t bounded , but " wraps " so when a turtle moves past the edge of the world , it disappears and reappears on the opposite edge . ● Every patch has the same number of " neighbor " patches . If you ' re a patch on the edge of the world , some of your " neighbors " are on the opposite edge . Complex Systems 14 Primitives ● Commands and reporters tell agents what to do : – Commands are actions for the agents to carry out . – Reporters carry out some operation and report a result ( these things are called functions in other programming languages ) ● Commands and reporters built into NetLogo are called Primitives Complex Systems 15 Procedures ● Commands and reporters you define yourself are called procedures . ● Each procedure has a name , preceded by the keyword to . The keyword end marks the end of the commands in the procedure . ● Once you define a procedure , you can use it elsewhere in your program . ● Many commands and reporters take inputs values that the command or reporter uses in carrying out its actions . Complex Systems 16 Example : Procedures to setup clear - all ; ; clear the screen create - turtles 10 ; ; create 10 turtles reset - ticks end to go ask turtles [ fd 1 ; ; forward 1 step rt random 10 ; ; turn right lt random 10 ; ; turn left ] tick end Complex Systems 17 Procedures with input ● Procedures can take inputs , just like many primitives do . To create a procedure that accepts inputs , put their names in square brackets after the procedure name . For example ● You might use the procedure by asking the turtles to each draw an octagon with a side length equal to its who number to draw - polygon [ num - sides len ] ; ; turtle procedure pen - down repeat num - sides [ fd len rt 360 / num - sides ] end ask turtles [ draw - polygon 8 who ] Complex Systems 18 Reporter Procedures ● Just like you can define your own commands , you can define your own reporters . You must do two special things . – First , use to - report instead of to to begin your procedure . – Then , in the body of the procedure , use report to report the value you want to report . to - report absolute - value [ number ] ifelse number > = 0 [ report number ] [ report ( - number ) ] end Complex Systems 19 Variables ● A variable can be : – A global variable : there is only one value for the variable , and every agent can access it – A local variable : each turtle has its own value for every turtle variable , and each patch has its own value for every patch variable – Some variables are built into NetLogo ● E . g . , all turtles have a color variable , and all patches have a pcolor variable Complex Systems 20 Variables ● You can make a global variable by adding a switch or a slider to your model , or by using the globals keyword at the beginning of your code globals [ score ] ● You can also define new turtle and patch variables using the turtles - own and patches - own turtles - own [ energy speed ] patches - own [ friction ] ● Use the set command to set them ( default value is zero ) . ● Global variables can by read and set at any time by any agent . A turtle can read and set patch variables of the patch it is standing on . Complex Systems 21 Variables ● The following command causes every turtle to make the patch it is standing on red . ● In other situations where you want an agent to read a different agent ' s variable , you can use of ● You can also use of with a more complicated expression than just a variable name ask turtles [ set pcolor red ] show [ color ] of turtle 5 ; ; prints current color of turtle with who number 5 show [ xcor + ycor ] of turtle 5 ; ; prints the sum of the x and y coordinates of ; ; turtle with who number 5 Complex Systems 22 Local Variables ● A local variable is defined and used only in the context of a particular procedure or part of a procedure ● To create a local variable , use the let command . – If you use let at the top of a procedure , the variable will exist throughout the procedure . – If you use it inside a set of square brackets , for example inside an " ask " , then it will exist only inside those brackets . to swap - colors [ turtle1 turtle2 ] let temp [ color ] of turtle1 ask turtle1 [ set color [ color ] of turtle2 ] ask turtle2 [ set color temp ] end Complex Systems 23 Ask ● NetLogo uses the ask command to give commands to turtles , patches , and links . All code to be run by turtles must be located in a turtle " context " : – In a button , by choosing " Turtles " from the popup menu . Any code you put in the button will be run by all turtles . – In the Command Center , by choosing " Turtles " from the popup menu . Any commands you enter will be run by all the turtles . – By using ask turtles , hatch , or other commands which establish a turtle context . Complex Systems 24 Example to setup clear - all create - turtles 100 ; ; create 100 turtles with random headings ask turtles [ set color red ; ; turn them red fd 50 ] ; ; spread them around ask patches [ if pxcor > 0 ; ; patches on the right side [ set pcolor green ] ] ; ; of the view turn green reset - ticks end Complex Systems 25 Examples ● You can also ask individual turtles ( patches , links ) to execute specific commands : to setup clear - all crt 3 ; ; make 3 turtles ask turtle 0 ; ; tell the first one . . . [ fd 1 ] ; ; . . . to go forward ask turtle 1 ; ; tell the second one . . . [ set color green ] ; ; . . . to become green ask turtle 2 ; ; tell the third one . . . [ rt 90 ] ; ; . . . to turn right ask patch 2 - 2 ; ; ask the patch at ( 2 , - 2 ) [ set pcolor blue ] ; ; . . . to become blue ask turtle 0 ; ; ask the first turtle [ ask patch - at 1 0 ; ; . . . to ask patch to the east [ set pcolor red ] ] ; ; . . . to become red ask turtle 0 ; ; tell the first turtle . . . [ create - link - with turtle 1 ] ; ; . . . make a link with the second ask link 0 1 ; ; tell the link between turtle 0 and 1 [ set color blue ] ; ; . . . to become blue reset - ticks end Complex Systems 26 Synchronization ● When you “ask” a set of agents to run more than one command , each agent must finish before the next agent starts . For example , if you write : ask turtles [ fd 1 set color red ] first one turtle moves and turns red , then another turtle moves and turns red , and so on . ● If you write it this way : ask turtles [ fd 1 ] ask turtles [ set color red ] first all the turtles move , then they all turn red . Complex Systems 27 Agentsets ● An agentset is set of agents ● An agentset can contain either turtles , patches or links , but not more than one type at once . An agentset is not in any particular order . – In fact , it ' s always in a random order . – Every time you use it , the agentset is in a different random order . – This helps you keep your model from treating any particular turtles , patches or links differently from any others ( unless you want them to be ) Complex Systems 28 Agentsets examples ; ; all other turtles : other turtles ; ; all other turtles on this patch : other turtles - here ; ; all red turtles : turtles with [ color = red ] ; ; all red turtles on my patch turtles - here with [ color = red ] ; ; patches on right side of view patches with [ pxcor > 0 ] ; ; all turtles less than 3 patches away turtles in - radius 3 ; ; the four patches to the east , north , west , and south patches at - points [ [ 1 0 ] [ 0 1 ] [ - 1 0 ] [ 0 - 1 ] ] ; ; shorthand for those four patches neighbors4 ; ; turtles in the first quadrant that are on a green patch turtles with [ ( xcor > 0 ) and ( ycor > 0 ) and ( pcolor = green ) ] ; ; turtles standing on my neighboring four patches turtles - on neighbors4 ; ; all the links connected to turtle 0 [ my - links ] of turtle 0 Complex Systems 29 Agensets examples ● To make a randomly chosen turtle turn green : ask one - of turtles [ set color green ] ● To tell a randomly chosen patch to sprout a new turtle : ask one - of patches [ sprout 1 ] ● To remove the “richest” turtle : ask max - one - of turtles [ sum assets ] [ die ] ● To find out how rich turtles are on the average : show mean [ sum assets ] of turtles Complex Systems 30 Breeds ● You can define different " breeds " of turtles ● You define breeds using the breeds keyword , at the top of your model , before any procedures : breeds [ wolves sheep ] ● When you define a breed such as sheep , an agentset for that breed is automatically created ● The following new primitives are also automatically available once you define a breed : create - sheep , create - custom - sheep , sheep - here , and sheep - at ● Also , you can use sheep - ow n to define new turtle variables that only turtles of the given breed have . Complex Systems 31 Breeds ● A turtle ' s breed agentset is stored in the breed turtle variable . So you can test a turtle ' s breed , like this : if breed = wolves [ . . . ] ● Turtles can change breeds . ask random - one - of wolves [ set breed sheep ] breeds [ sheep wolves ] sheep - own [ grass ] to setup ca create - custom - sheep 50 [ set color white ] create - custom - wolves 50 [ set color black ] end Complex Systems 32 Lists ● In the simplest models , each variable holds only one piece of information , usually a number or a string ● Lists let you store multiple pieces of information in a single value by collecting that information in a list . – Each value in the list can be any type of value : a number , or a string , an agent or agentset , or even another list . ● Lists allow for the convenient packaging of information in NetLogo . ● Several primitives simplify the process of performing the same computation on each value in a list . Complex Systems 33 Constant Lists ● You can make a list by simply putting the values you want in the list between brackets , like this : set mylist [ 2 4 6 8 ] ( the individual values are separated by spaces ) ● You can make lists that contain numbers and strings this way , as well as lists within lists , for example [ [ 2 4 ] [ 3 5 ] ] ● he empty list is written by putting nothing between the brackets , like this : [ ] Complex Systems 34 Building Lists on the fly ● If you want to make a list in which the values are determined by reporters , as opposed to being a series of constants , use the list reporter ● The list reporter accepts two other reporters , runs them , and reports the results as a list ● To make longer or shorter lists , you can use the list reporter with fewer or more than two inputs , enclosing the entire call in parentheses set random - list list ( random 10 ) ( random 20 ) ( list random 10 ) ( list random 10 random 20 random 30 ) Complex Systems 35 Building Lists on the fly ● The of primitive lets you construct a list from an agentset . ● It reports a list containing each agent ' s value for the given reporter . – The reporter could be a simple variable name , or a more complex expression - - even a call to a procedure defined using to - report max [ . . . ] of turtles sum [ . . . ] of turtles Complex Systems 36 Changing list items ● replace - item replace index element in the list with new value ( 0 means the first item , 1 means the second item , and so forth ) set mylist [ 2 7 5 B [ 3 0 - 2 ] ] ; mylist is now [ 2 7 5 B [ 3 0 - 2 ] ] set mylist replace - item 2 mylist 10 ; mylist is now [ 2 7 10 B [ 3 0 - 2 ] ] ● To add an item , say 42 , to the end of a list , use the lput reporter ( fput adds to the beginning of a list . ) set mylist lput 42 mylist ; mylist is now [ 2 7 10 B [ 3 0 - 2 ] 42 ] Complex Systems 37 Changing list items ● The but - last reporter reports all the list items but the last . set mylist but - last mylist ; mylist is now [ 2 7 10 B [ 3 0 - 2 ] ] ● Suppose you want to get rid of item 0 , the 2 at the beginning of the list ( but - first ) set mylist but - first mylist ; mylist is now [ 7 10 B [ 3 0 - 2 ] ] Complex Systems 38 Strings but - first " string " = > " tring " but - last " string " = > " strin " empty ? " " = > true empty ? " string " = > false first " string " = > " s " item 2 " string " = > " r " last " string " = > " g " length " string " = > 6 member ? " s " " string " = > true member ? " rin " " string " = > true member ? " ron " " string " = > false position " s " " string " = > 0 position " rin " " string " = > 2 position " ron " " string " = > false remove " r " " string " = > " sting " remove " s " " strings " = > " tring " replace - item 3 " string " " o " = > " strong " reverse " string " = > " gnirts " Complex Systems 39 Strings ● Strings can be compared using the = , ! = , < , > , < = , and > = operators . ● A few primitives are specific to strings , such as is - string ? , substring , and word : is - string ? " string " = > true is - string ? 37 = > false substring " string " 2 5 = > " rin " word " tur " " tle " = > " turtle "