Design Prototypes : A Knowledge Representation Schema for Design John S . Gero AI Magazine Volume 11 Number 4 ( 1990 ) ( © AAAI ) Although there are designers who claim design is a mysteri - ous activity not amenable to scien - tific examination , research into design continues Although there are publica - tions by designers on how to design dating back to Roman times , notably by Vitruvius , the nineteenth - century design thinkers actually began work on articulating design as a process ( Durand 1802 ) . However , it was not until the 1960s that major research programs were initiated . These programs were originally founded on the systems view and used concepts from operations research ( Jones and Thornley 1963 ) . More recently , information - processing models founded on AI concepts have provided an impetus for renewed research into design in its various aspects ( Simon 1969 ; Coyne et al . 1990 ) . Many foundational ideas in AI are proving to be useful in developing formal models of design as an activity . What Is Design ? Designers are change agents in society . Their goal is to improve the human condition in all its aspects through physical change . Although design for many continues to Articles remain a mysterious activity , it has been Designers are recognized as an change agents important activity for more than 4000 in society . years In approxi - mately 2000 B c , Hammurabi , king of Babylon , enacted a law that both recog - nized design and made it dangerous ( figure 1 ) . Design research has a number of goals , including a better understanding of design , the development of tools to aid human designers , and the potential automation of some design tasks . Design appears to be carried out differently from the way we are taught to understand the world , which is largely derived from the Greek view of the world . Science has been developed as a means of attempting to explain and understand the world around us . It begins with a description of the world ( which in itself is not a trivial act to produce ) and some behaviors and attempts to produce causal dependencies between them . Science then can be used to attempt to produce a purpose for the world . Design exists because the world around us does not suit us , and the goal of designers is to change the world through the creation of artifacts . Designers design by positing functions to be achieved and produc - ing descriptions of artifacts capable of gener - Figure 1 . Hammurabi’s Code , from an Engraving on a Stella in Cmeiform in the Louvre , Paris . “If a designer - builder kas designed - built a kome for a man and kis work is not good , and if tke house he kas desiped - built falls in and kills the householder , tkat desigm - builder skall be slain ” 0738 . 4602 / 90 / $ 40001990AAAI WINTER 1990 27 Articles Design activity can be now characterized as a goal - oriented constrained , decision - making exploration , and learning activity . . . ating these functions . In this sense , design is the opposite of the traditional scientific explanation . Thus , design is purposeful , and the activi - ty of designing is goal oriented . The metagoal of design is to transform requirements , gener - ally termed functions , which embody the expectations of the purposes of the resulting artifact , into design descriptions . The result of the activity of designing is a design description . This design description is generally represented graphically , numerical - ly , or textually . The purpose of such a descrip - tion is to transfer sufficient information about the designed artifact so that it can be manufactured , fabricated , or constructed . A prevalent and pervasive view of designing is that it can be modeled using variables and decisions made about what values should be taken by these variables . The activity of designing is carried out with the expectation that the designed artifact will operate in the natural world and the social world . These worlds impose constraints on the variables and their values ; so , design could be described as a goal - oriented , constrained , decision - making activity . However , design distinguish - es itself from other similarly described activities not only by its domain but also by additional necessary features . Designing involves exploration , exploring what variables might be appropriate . The process of explo - ration involves both goal variables and deci - sion variables . In addition , designing involves learning : Part of the exploration activity is learning about emerging features as a design proceeds . Finally , design activity occurs within two contexts : the context within which the designer operates and the context produced by the developing design itself . The designer’s perception of what the context is affects the implication of the context on the design . The context shifts as the designer’s perceptions change . Design activity can be now characterized as a goal - oriented , con - strained , decision - making , exploration , and learning activity that operates within a con - text that depends on the designer’s percep - tion of the context . Models of Design The purpose of designing is to transform function F ( where F is a set ) into a design description D in such a way that the artifact being described is capable of producing these functions . For example , when designing win - dows , some of the functions include the pro - vision of daylight , control of ventilation , and access to a view . The design description would take the form of drawings and notes . Thus , a naive model of design is F + D , where + is some transformation . There is , however , no direct transformation capable of achieving this result . A design description represents the artifact’s elements and their relationships ; it is labeled structure S . In the window design example , the artifact’s elements are the glazing and the frame and their topology . Computer - aided drafting systems have become the means by which structure is transformed into a design description ; that is , S + D . Another model of design is F AS . Here , a transformation does occasionally exist in the form of a direct mapping between function and structure , often termed catalog Iookup . This transformation occurs at the ele - ment level of an artifact and is not considered designing . More generally , no direct transfor - mation between function and structure exists , which leaves a requirement for an indirect transformation between function and structure . Function has been defined in another con - text as the relation between the goal of a human user and the behavior of a system ( Bobrow 1984 ) . In designing , behavior can be viewed in two ways . First is the behavior of the structure B , ( where B , is a set ) , which is directly derivable from structure : S + B , . In the window design example , the behaviors of the structure include the light flux trans - mitted , the ventilation rate , and the various solar gains . This process is that of analysis and presupposes the delineation of which behaviors to determine . Transforming function to expected behav - iors B , ( where B , is a set ) provides the second view of behavior . The expected behaviors for the window design example include light transmission , ventilation rates , and solar col - lection . The expected behavior provides the syntax by which the semantics represented by function can be achieved : F + BB , . This process is that of formulatio ~ l or specifica - tiolz in design . The predicted behavior of the structure can be compared with the expected behavior required to determine if the struc - ture synthesized is capable of producing the functions : B , * 4 , where @ is a comparison . This comparison process is termed evaluation in design . 28 AI MAGAZINE Articles F - - - - - > S - ND 1 Y Be - B , Figure 2 . Model of Design as a Process . Be = Set of expected behaviors Bs = Set of actual behaviors D = Design description F = Set of functions S = Structure - - f = Transformation - - - > = Occasional transformation < - - > = Comparison Another model of design is F + B , Be + S @ , ) . Here , the function is transformed to expected behavior . This expected behavior is used in the selection and combination of structure based on a knowledge of the behaviors produced by this structure . This process is called synthesis . When structures are synthesized , they pro - duce their own behaviors , which can be a useful superset of the expected behaviors . This process can change the range of expected behaviors and through them the function being designed for , leading to a reformulation . Reformulation can also occur when the evalu - ation of the comparison between the behav - ior of the structure and the expected behavior is unsatisfactory and cannot be made satisfac - tory by manipulating the structure . This reformulation leads to a change in expected behavior . Figure 2 shows how these transformations appear in design . A general model of design as a process involves the following activities ( figure 3 ) : formulation , synthesis , analysis , evaluation , reformulation , and production of design description . Two fundamental research issues present themselves here : What appropriate represen - tation frameworks are for design knowledge and what appropriate transformation process - es are for design . The remainder of this article only addresses the first of these . The Conceptual Schema “Design Prototypes” Schemas are introduced here , and the concep - tual schema “design prototypes , ” which is used to represent design knowledge , is elabo - rated and described . F - - - - - > S - D I B , * ZJ BS ( a ) formulation F - - - - - - > S - D ( b ) synthesis F - - - - - - , S - - - - - - ) D ( c ) analysis F - - - - + SSD ( di evaluation / I - - - - - - i s - D F _ - - - - > s . . . . - - . . . . - . . . _ . > { ) I I 3 4 Be - Bs ( f ) production of design description Figure 3 . Activities in Design . Schemas How is it that designers can begin designing with incomplete information and before all the relevant information is available ? Indeed , because design is an exploration process , what is relevant only manifests itself as the design proceeds and varies with the decisions taken . Where do structures come from ? How do additional functions appear as a design progresses ? How does a designer know what behaviors to analyze for ? It is suggested that WINTER 1990 29 Articles facade - elerrlent ting ( double - pane , triple - pane ) heat - reflecting enhance - winter - solar - gain heat - loss - corltrol provide - view winter - solar - collectlorl summer - solar - collection thermal - condlrctlon salrnd - attenuation wewAranstmsslon ninter - solar - gain summer - solar - gain conductlo & heat - loss solrnd - reduction - index frame wndofi - length wndow - heigM wlndon - number - of - panes STRUCTURE ELEMENT VARIABLES glazirlg - area glazirlg - length glazing - height glaring - thickness frame - area frame - v ~ idth frarrle - thickness glaring - mass glanlng - solar - absorptance glazing - solar - reflectailce glaring - solar - transmlttarlce glaring - visible - ilght - transtmti glazing - thermal - conductlvlty frame - mass frame - thermal - conductlwty frame - solar - absorptarlce tame Figure 4a . Diagrammatic representation of the fitnction , behavior and structure components of the design prototype schema for window design ( Tham et al . , 19901 . human designers form their individual design experiences into generalized concepts or groups of concepts at many different levels of abstraction ; that is , they schematize their knowledge . Such schemas consist of knowl - edge generalized from a set of alike design cases and form a class from which individuals can be inferred . In design , any schema must at least be able to incorporate function , struc - ture , behavior , and design description and be accessed by elements within these compo - nents . It will be seen later that more than these elements needs to be incorporated within a schema . No satisfactory schemas appear to be available for the representation of this generalized heterogeneous design knowledge that have sufficient expressiveness and power . None can be used to explain how a design begins and continues or how design processes can be categorized . often singular examples of their type . Thus , the Taj Mahal in India is the archetypal romantic architectural setting , and a red Fer - rari is the archetypal rich , young bachelor’s car . In both cases , there can be no substitute . Each archetype might provide an analog for another design , but reproducing the Taj Mahal would not be considered a feat of designing . Stereotypes are copies without change . Mass production of goods is a means of stereotyp - ing . In designing , stereotyping ( that is , the process of reproduction ) belies the design endeavor . Prototypes are the first on which others are modeled . This is one of the bases of the notion of design prototypes being elabo - rated here within the context of knowledge - based design . Design Prototypes It is customary to talk about types as a means A design prototype ( Gero 1987 ) is a conceptual of classifying the world . There are important schema for representing a class of a general - distinctions between archetypes , stereotypes , ized heterogeneous grouping of elements and prototypes . Archetypes are the first and derived from alike design cases that provides 30 AI MAGAZINE Articles FUNCTION - DEHAVIOUR - _ _ _ _ _ _ - _ _ _ _ provide - daylightlng ilght - transmission light - tratlsn ~ issior ~ Ilght - flux - transmitted ventilatioii - control ventilation - restrlctlon ventilation restriction veiltilatlon - rate enhance - summer - solar - gain slrmmer - solar - collection summer - solar - collection summer - solar - gain enhance - wnter - solar - gain wiiiter - solar - collection winter - solar - collection * inter - solar - gain heat - loss - control thermal - condlrction thermal - conduction conduction - heat - loss noise - control sound - attenuation solind - attenuation sound - reduction - index \ / : \ / . - I ti QUALITATIVE KNOWLEDljE light - flux - irarwnitted ventilation - rate summer - solar - gain wirlter - solar - gain sound - reduction - index conduction - heat - loss U - value transmitted - sound - le , $ el we’ * - area wndov - area glazing - area + , glaring - visible - light - tratismittance + window - length + , window - height + glazing - area + , glazing - solar - tratwnittarlce + , glazing - solar - absorptance + glazing - area + , glazing - solar - transrnlttance + , glazing - solar - absorptance’ glamlng - area + , glazirlg - mass - , frame - area + , frame - mass - glazing - area + , glazing - thermal - conductivity + , glaring - thickness - . frame - area + glazing - thermal - conductivity + . glaziiig - thickness - frame - thickness - , frame _ thertrlal - conductivity + glaring - area + , glaziiig - mass - , frame - area + , frame - mass - glaring - area + glazing - area + , frame - area + Figure 4b . Diagrammatic representation of the relational and qualitative knowledge of the design prototype schema for window design ( Tham et al . , 1990 ) . the basis for the start and continuation of a design . Design prototypes provide this basis by bringing all the requisite knowledge appropriate to the design situation together in one schema . A designed artifact can be broadly interpret - ed in terms of the three variable groups of function , structure , and behavior . The level of specificity in each of these groups depends on the granularity and level of abstraction being represented . Thus , at an early stage of design - ing , an appropriate design prototype might primarily contain function and behavior , with little information on structure , but at a later time , an appropriate design prototype might contain considerable detail in the structure group . A design prototype brings together these three groups and the relations between them , which includes processes for selecting and obtaining values for variables Design prototypes draw from such sources as prototype theory ( Osherson and Smith 1981 ) and scripts ( Schank and Abelson 1975 ) . Proto - type theory construes membership of a concept to be determined by its similarity to the con - cept’s best exemplar . Design prototypes use the notions of generalization to produce the prototype . Although closely related to scripts , design prototypes include semantics and are not bound by time sequence . Although it is well recognized that there is no function in structure and that there is no structure in function , human and design experience produces a connection between function and structure . Once this connection is learned , it is difficult to unlearn . Once the connection between behavior and structure is made , and the connection between behavior and function is made , these connections form the basis of much of a designer’s knowledge . Function , structure , behavior , and relation - ships form the foundation of the knowledge that must be represented for specific design processes to be able to operate on them . In natural discourse , the distinction between function and structure sometimes becomes blurred to the extent that the label of the structure takes on the meaning of the func - WINTER 1990 31 Articles ventllatioil - rate sumrrIer - solar - galrI wnter - solar - gain transmitted - sound - level external - solrrld - level conduction - heat - loss external - sir - temperature , internal mr - temperature If mid - seasons use single - pane - wndow if strorlg - solar - exposure use heat - reflecting - nlndow or heat - absorbing - ~ ~ lndow lf strlnq - solar - exposure and buildinq - restrictlorl - on _ reflective - wirldow use heat - absorblrlq - hlndo \ INITIAL VALUES PROPOSAL olazlna - thickness = 6 COMPUTAT10NAC KNOWLEDGE ‘I nlnter - solar - ga1r1 = f ( glmng - area , average - solar _ lrradiance , glazing - solar - trarlsnlitiance glazing - solar - absorptance eqn : winter - solar - gall = glazlrlg - area l average - solar _ irradisnce * ( glaring - solar - transmittance + CO 5 l qlazlrlq - solar - absorptance ) ) Slrrnmer - solarLgs ~ n f ( glazing - area , average - solar _ irradiance , glazing - solar - transmltiailce . glazing - solar - absorptarlce ) sound - reduction - index 1 f C glazing - area , glazing - mass , frame - area , frame - mass ) trarlsmltted _ sq , rnd _ level = f i glazing - area , glazing - mass , frame - area , frame - mass ) ilghtflux - transrilltted = f ( glaring - area , average - sky - illumlnance , glazing - visible - light - transmittarlce ) ventilation - rate = f i glaring - area . external - wind - pressure , internal - wind - pressure ) i Figure 4c . Diagrammatic representation of the context and computational knowledge of the design protoype schema for window design ( Tham et al . , 1990 ) . tion . For example , the label of a particular copier , Xerox TM , is slowly taking on the meaning of its function , that is , to copy . However , if reasoning is to occur in trans - forming function to structure , then a clear separation must be made between them and between function , structure , and behavior . Structure of Design Prototypes A design prototype separates function ( F ) , structure ( S ) , expected behavior ( B , ) and actual behavior ( B , ) . It also stores relational knowledge between them ( KJ as well as qual - itative knowledge ( K , ) , computational knowl - edge ( K , ) , and context knowledge ( I $ , ) . Relational knowledge provides and makes explicit the dependencies between the vari - ables in the function , structure , and behavior categories and can take the form of a depen - dency network . Relational knowledge identi - fies the relevant variables in going from function to behavior and behavior to func - tion and from behavior to structure and structure to behavior . Relational knowledge allows for the specialization of the informa - tion in a prototype to a specific design situa - tion ( see Designing Using Design Prototypes ) . Qualitative knowledge ( a subset of qualitative reasoning ) is an adjunct to relational knowl - edge and provides information on the effects of modifying values of structure variables on behavior and function . Included here are the normal ranges of values of variables found in the generalization . Qualitative knowledge can be used to guide any decision - making process . Computational knowledge is the quantitative counterpart of qualitative knowledge and specifies symbolic or mathematical relation - ships among the variables . Computational knowledge is used to determine values of variables . Constraints appear in both qualitative knowledge and computational knowledge . Constraints on function appear as expected behaviors ; constraints on structure reduce the range of possibilities . Context knowledge identifies the exogenous variables for a design situation and specifies that values for these variables must come from outside the design prototype , that is , from the context ( C ) . 32 AI MAGAZINE Articles In addition , there is knowledge concerning the design prototype itself ( KP ) . This knowl - edge comprises the typology ( T ) of the design prototype , which identifies the broad class of which the design prototype is a member , and partitions ( P ) represent the subdivisions of the concept represented by the prototype . Partitioning a design prototype supports viewing it from many perspectives . Once the partition or combination of partitions is selected , only information pertaining to these partitions is made available . In this sense , par - titioning of design prototypes ultimately reduces the space of potential designs . A design prototype , P , can be symbolically represented as P = ( 6 B , S , D , K , ‘4 , where B = ( B , BJ C = context K = ( K , , Kq , K , Kc , KpJ Kp = CL PI P = partition T = typology . Figure 4 is a diagram of the design prototype schema for the knowledge associated with window design . In summary , a design prototype brings together all the requisite knowledge appropri - ate to a specific design situation . Although the contents of a design prototype are devel - oped by individual designers , like - minded designers will tend to agree on its general contents . Thus , a design prototype concerned with the initial design of a house is likely to include such notions as style , location on site , orientation , existence of spaces based on their functional activities , and building proposal codes . A designer will draw on many design prototypes during the course of developing any design . Designing Using Design Prototypes Designing using design prototypes can be thought of as matching a cognitive view of a process model of design . Studies of designers indicate that they link function and structure and select concepts to follow early in a design ( Lawson 1980 ) . Later in this article , I present the specifics of routine and nonroutine design . Here , I give a descriptive outline of designing using design prototypes . A designer begins with required functions from a client . Sometimes clients also specify required structures . These requirements are used to retrieve potentially useful design pro - totypes on the basis that they are indexed by these requirements . These retrieved design prototypes represent the set of concepts that a designer remembers when s / he examines the requirements . Each design prototype contains more function and structure ( and behavior ) than were used to index it . This is similar to being reminded of additional related func - tions and structures . In this way , design pro - totypes provide a means by which given a little situational information , potentially appropriate concepts are retrieved , and the designer has available a fleshed - out set of concepts that can lead in many directions . However , not all retrieved design prototypes are likely to be equally useful , and they need to be evaluated and one or more selected . Once a design prototype is selected , an instance is created . Each instance represents the beginning of a design alternative . Instances are subsets of their design proto - types . They initially inherit the entire struc - ture of the design prototype , but not all the knowledge in the design prototype might be useful in the particular context ; so , it is pruned and this pruning propagated using the dependency knowledge . The pruned instance is now the equivalent of a formulated design problem at this level of abstraction and granularity . It contains default values and normal ranges of values for variables . The various types of knowledge are used to attempt to determine specific values for variables . a design & Gotype brings together all the requisite knowledge appropriate to a specific design situation . If there is insufficient knowledge to pro - duce values for specific variables , these vari - ables are transformed into requirements . These requirements are then used to retrieve additional design prototypes that have the potential through their instances to produce these values , and the entire process is repeat - ed . The use of default values provides a con - venient means of controlling the propagation of design prototype retrieval down the scale of granularity . Thus , the designer does not need to know the detail when working at the overall level . Designing using design prototypes allows for the start of a design at any level of avail - able information . Because design prototypes carry a wide range of functions with them , retrieved design prototypes are a source of new functions . Retrieval by function alone still introduces structure , and retrieval by structure alone introduces functions associat - ed with this structure . Design prototypes encode what the appropriate behaviors are to . analyze for . Design prototypes provide a knowl - edge representation schema separate from the specific computational processes . ( Computa - tional processes that support design are described elsewhere [ Coyne et al . 19901 ) . Design prototypes readily provide a framework that WINTER 1990 33 Articles space of possible designs space of possible designs space of innovative designs space of routine designs Figure 5 . State Space of Routine Designs . supports both routine and nonroutine design , which are discussed in the next section . Routine , Innovative , and Creative Design There seems to be a general acceptance of the classification of design into routine , innova - tive , and creative ( Brown and Chan - drasekaran 1985 ; Coyne et al . 1987 ) . Although there is argument about the defini - tions , they have proved to be useful . Routine design can be defined as the design that proceeds within a well - defined state space of potential designs . That is , all the variables and their applicable ranges , as well as the knowledge to compute their values , are all directly instantiable from existing design prototypes ( figure 5 ) . In routine design , the space of designs produced is substantially smaller than the space of possible designs because of the constraints on the applicable Innovntive design can be defined as nonrou - ranges of values for variables . tine design that proceeds within a well - defined state space of potential designs . What distin - guishes it from routine design is that the designs produced are outside the routine or normal space . This distinction is produced by manipulating the applicable ranges of values for variables . What results is a design with a familiar structure but novel appearance because the values of the defining variables are unfamiliar ( figure 6 ) . Creative design can be defined as nonroutine design that uses new variables producing new types and , as a result , extending or moving the state space of potential designs . In the extreme case , a new and disjoint state space is produced . Creative design has the capacity to produce a paradigm shift ( figure 7 ) . Routine Design Routine design can be viewed as design pro - Figure 6 . State Space of Innovative Designs . totype - instance refinement . Design proto - types are retrieved and selected , and instances The specific processes used in qualitative are produced . These instances are refined in two ways . The first way is by pruning the set knowledge and computational knowledge are of variables to the applicable set through a separated from the representation of the specification of applicable functions , struc - tures , or behaviors and propagating this spec - ification . The second way is by determining design prototypes and from any system archi - the values of the applicable set of variables using the available knowledge . Figure 8 shows tecture . As stated previously , the processes the outline of routine design by design proto - type - instance refinement . cover formulation , synthesis , analysis , evalua - tion , reformulation , and production of design description . The use of a conceptual schema , such as design prototypes , which collects all the requisite knowledge , provides a basis for routine design . Innovative Design Innovative design can be viewed as design prototype - instance refinement with an adap - tation of some of the knowledge concerning applicable ranges of variable values , that is , design prototype - instance adaptation . Addi - tional processes for adaptation and the use of dependency knowledge to assist in the confir - mation of the utility of any change are required . Creative Design Creative design , which involves the introduc - tion of new variables into a design prototype , can be viewed as a means by which design prototypes are adapted to produce new design prototypes , that is , design prototype generation . In most cases , new prototypes are produced from old by changing them . It is possible to sufficiently adapt a design proto - type so that the new design prototype is dis - 34 AI MAGAZINE Articles User f Interaction c Prototype Selection Refinement \ 4 - b Requirements Retried f Prototype Selection Refinement Requirements - - _ ~ - ~ - - . - - - - - * Process Iteration L Figure 8 . Routine Design by Design Prototype - Instance Refinement . joint with the original prototype . On rare occasions , a design prototype is generated without precedent , for example , the design of Figure 7 . State Space of Creative Designs . the airplane , although , even here , a well - defined process could be used to explain its generation . In creative design , the role of context and the designer’s perception of it play an increas - ingly important part . Because design is being viewed as a process here , it could be argued that all new variables are already implicit in the processes to be used . To counter such arguments , it is suggested that designers work , of necessity , within a well - defined con - text of their choosing . The context is defined by the available design prototypes . However , there comes a time during the design process when the designer decides that s / he wishes to move outside the available design prototypes WINTER 1990 35 Articles to find new variables . This move can be seen as the designer changing the context in which s / he is working . The four main compu - tational processes that appear capable of pro - ducing the new variables needed for creative design are combination , analogy , mutation , and first principles ( these processes are not discussed here , however ) . Discussion Design requires a representation framework that has sufficient expressive power to cap - ture the nature of the concepts that support design processes . The use of a knowledge rep - resentation schema such as design prototypes provides such a framework . It separates the knowledge from the computational processes that operate on it . The use of this representa - tion effectively provides a translator between structure , which can be seen as the syntax of a design , and function , which can be treated as the semantics of a design . Such an articula - tion is useful not only in the production of designs but also in their analysis and evalua - tion . For example , traditional computer - aided design systems produce a design description in their databases that maps onto the syntax of a design . For these databases to be useful for other than purposes of graphic representa - tion , a translation to the semantics of the design is needed . It is tempting to view the design prototype schema as producing a rigid transformation between function and structure that is inca - pable of providing the basis for anything more than parameterized design . Certainly , it can be argued that this schema readily sup - ports the notion of design fixation , where the provision of a design description for a speci - fied set of functions limits the designer’s abil - ity to produce structures other than those found in the design description . However , the delineation of function from structure and their connection through behavior breaks the function - structure nexus and still maintains the association derived from experience . The design prototype representation schema aims to match the expectations of a designer who utilizes computational process - es in the production of a design . It readily provides a framework that supports both rou - tine and nonroutine design processes . Acknowledgments I would like to thank the reviewers who assist - ed in refining this article . The work described here has been supported by the Australian Research Council , the U . S . National Science Foundation , and the United Kingdom Science and Engineering Research Council . References Bobrow , D . G . 1984 . Qualitative Reasoning about Physical Systems : An Introduction Artificial Welli - gence 24 ( 1 - 3 ) : 1 - 5 . Brown , D . C . , and Chandrasekaran , B 1985 Expert Systems for a Class of Mechanical Design Activity In Knowledge Engineering irl Computer - Aided Design , ed . J S . Gero , 259 - 282 Amsterdam : North - Holland Coyne , R D ; Rosenman , M . A . ; Radford , A D ; and Gero , J . S . 1987 Innovation and Creativity in Knowledge - Based CAD In Expert Systems in Corn - puter - Aided Design , ed . J . S . Gero , 435 - 465 Amster - dam : North - Holland . Coyne , R D . ; Rosenman , M . A ; Radford , A . D . ; Bal - achandran , M ; and Gero , J . S . 1990 . Knowledge - Based Des @ Systems . Reading , Mass . : Addison - Wesley . Durand , J - N - L 1802 Precis des Legons d’ilrchitecture Paris : Ecole Polytechnique Gero , J S . 1987 . Prototypes : A New Schema for Knowledge - Based Design , Working Paper , Architec - tural Computing Unit , Univ of Sydney . Jones , J C . , and Thornley , D . , eds . 1963 Conference OJZ Design Methods . Oxford : Pergamon Lawson , B . R . 1980 . How Architects Think . London : Architecture Press Osherson , D . N . , and Smith , E . E 1981 On the Adequacy of Prototype Theory as a Theory of Con - cepts Cognitio ~ z 9 ( l ) : 35 - 58 Schank , R . C . , and Abelson , R . 1975 Scripts , Plans , and Knowledge . In Proceedings of the Fourth Inter - national Joint Conference on Artificial Intelligence , 151 - 157 Menlo Park , Calif . : American Association for Artificial Intelligence . Simon , H A 1969 . The Sciences of the Artificial . Cambridge : MIT Press Tham , K W ; Lee , H . S . ; and Gero , J S . 1990 Build - ing Envelope Design Using Design Prototypes . In AI in Building Design : Progress and Promise , ASHRAE Symposium Forthcoming . John Gero is professor of design science , director of the Design Computing Unit , and director of the Key Centre of Design Quality at the Univer - sity of Sydney . He is also an adjunct professor at Carnegie - Mellon University . He is the author - editor of 16 books and 200 research papers He has been a visiting professor of architecture , civil engineering , computer science , and mechanical engineering at universities in the United States , United Kingdom , and France . His current research interests include computational processes that support creativity . 36 AI MAGAZINE