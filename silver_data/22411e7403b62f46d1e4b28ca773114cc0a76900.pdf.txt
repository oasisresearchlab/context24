CHI 90 Pmceednrs April 1990 THE DESIGN SPACE OF INPUT DEVICES Stuart K . Card , Jock D . Muckinlay , and George G . Robertson Xerox Palo Alto Research Center 3333 Coyote Hill Road Palo Alto , CA 94304 415 - 494 - 4362 , card . pa @ xerox . com ABSTRACT A bewildering variety of devices for communication from humans to computers now exists on the market . In order to make sense of this variety , and to aid in the design of new input devices , we propose a framework for describing and analyzing input devices . Following Mackinlay’s semantic analysis of the design space for graphical presentations , our goal is to provide tools for the generation and test of input device designs . The de - scriptive tools we have created allow us to describe the semantics of a device and measure its expressiveness . Using these tools , we have built a taxonomy of input devices that goes beyond earlier taxonomies of Buxton & Baecker and Foley , Wallace , & Chan . In this paper , we build on these descriptive tools , and proceed to the use of human performance theories and data for evalu - ation of the efleciiveness of points in this design space . We focus on two figures of merit , footprint and band - width , to illustrate this evaluation . The result is the systematic integration of methods for both generating and testing the design space of input devices . KEYWORDS : Input devices , semantics , design knowl - edge systematization . INTRODUCTION Human - machine interface technology has developed to the point where it is appropriate to systematize existing research results and craft into a body of engineering and design knowledge . A case in point is the design of input devices . A bewildering variety of such devices now exist on the market , including typewriter keyboards , mice , headmice , pen and tablets , dialboxes , Polhemus cubes , gloves , and body suits . Given an abundance of designs , Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish requires a fee and / or specific permission . most engineering disciplines proceed to organize these designs by developing abstractions , theories , or other organizing principles in order to get a view of the design space behind these and potentially other designs ( e . g . , [ 21 ] ) . Previous work on human - machine input devices has provided three lines of development in this area : toolkits , taxonomies , and performance studies . Tool & i . User interface toolkits or user interface man - agement systems help with a wide range of problems in - cluding the construction , runtime execution , and post - runtime analysis of a user interface [ 22 ] . They may help systematize input device knowledge by providing a li - brary of pre - built input device modules [ 18 , 161 , archi - tecture and specification techniques for combining these modules [ 2 , 231 , or post - processing analysis tools 1171 . Sometimes , as in Anson [ 2 ] , they even provide archi - tectural models of input device interactions . But the device models implicit in user interface toolkits sketch only a limited picture of the design space of input de - vices and their properties . Even for the construction of interfaces , they present interface designers with many design alternatives , but do little to help with the de - sign decisions themselves . In order to achieve a sys - tematic framework for input devices , toolkits need to be supported by technical abstractions about the user , the devices themselves , and the task they are used in performing . Taxonomies . Two recent attempts have been made to provide abstractions that systematize the design space of input devices . Foley , Wallace , and Chan [ lo ] focused on computer graphics subtasks . They classified input devices under the graphics subtasks they were capable of performing ( e . g . , the tablet and the light pen are capable of character recognition ) . They also reviewed experimental evaluations of input devices . Buxton and Baecker [ 4 , 31 have proposed a taxonomy of input de - vices classified according to the physical properties and the number of spatial dimensions they sense . The lim - itation of the Foley , Wallace , and Chan scheme is that the categories , while reasonable , are somewhat ad hoc and there is no attempt at defining a notion of complete - ness for the design space . The limitation of the Buxton 0 1990 ACM 0 - 89791 - 345 - O / 90 / 0004 - 0117 1 . 50 cH190 - ngs prxil1990 and Baecker scheme is that it only includes continuous devices . Performance studies . Seve : ral studies have been made of the performance of different pointing devices . English & Englebart [ 7 ] studied several devices and found the mouse the fastest device . Card , English , & Burr [ 5 ] con - firmed these empirical results and discovered that point - ing speed with the mouse is governed by Fitts’s Law [ 9 ] with a bandwidth similar to that of the hand . Sub - sequent studies have empirically compared speed and preference of various devices ( [ lo , 1 , 8 , 11 , 251 . Unfor - tunately these have not always agreed and most studies have not attempted to disentangle task , subject , and human performance variables . ANALYTIC DESIGN FRAMEWORK In order to understand how the above results could be accommodated in a single systematic framework , it is useful to consider the role of input devices in human - machine communication . An input device is part of the means used to engage in dialogue with a computer or other machine . The dialogue is not , of course , in natural language , but is conducted in ways peculiarly suited to interaction between human and machine . Un - like human - human conversation , the dialogue is between fundamentally dissimilar agents - both in terms of per - ception and processing . Furthermore it takes place un - der conditions ( e . g . , the persistance of displays ) that are different from the evanescent , sequential oral converslt tion that is often taken as the model for communica - tion . Instead of words , the user may move the mouse and press buttons . Instead of words , the machine may show highlighted animated diagrams . The design of human - machine dialogues is , at least in part , the design of artificial languages for this commu - nication . Mackinlay [ 13 , 141 , in work on the automatic generation of displays , suggested that each display could be thought of as a sentence in such a language and that such sentences could be analyzed as to their ability to transmit an intended semantic meaning from the ma - chine to the user . This analysis has direct consequences for the design of machines . Semantic theories provide the means by which the design space can be gener - ated . Human performance studies provide the means by which design points in the space can be tested . We can use this basic approach as a means for systematizing knowledge about human interface technology , including the integration of theoretical , human performance , and artifact design efforts . In particular , we can use this approach to integrate knowledge gained from toolkit , taxonomy , and human performance literature . In an earber paper [ 15 ] , we addressed the semantic anal - ysis of input devices and used this to generate the design space of input devices . In this paper , we build on the results from the earlier paper and proceed to the use of human performance theories and data for the evalu - ation of points in this design space . The result is the systematic integration of methods for both generating and testing the design space . GENERATING THE DESIGN SPACE Conceptually the most general case of human - machine interaction is the case of a human interacting with an embedded computer ( e . g . , the autopilot on an airplane ) . Such an interaction can be modeled as the interaction in an artificial language among at least three agents [ 6 ] : 1 . a human , 2 . a user dialogue machine , and 3 . an application . We can trace the semantics of an input device by trac - ing the mappings from human action through mappings inherent in the device and finally into changes in the pi + rameters of the application . There are two key ideas in modeling the language of input device interaction : 1 . A primitive movement vocabulary , and 2 . A set of composition operators . The movement vocabulary gives the elementary sen - tences that can be expressed in the artificial language . The composition operators give methods of combining this vocabulary into a combinatorically richer set . Primitive Movement Vocabulary We begin with the observation inspired by Baecker and Buxton [ 3 ] that : Basically , an input device is a transducer from the physical properties of the world into logical values of an application . Formally , we represent the input device as a six - tuple ( M , In , S , R , Out , W ) where l M is a manipulation operator , l In is the input domain , l S is the current state of the device , 118 Cl - II 90 Ploceedngs Ppil1990 ~ ~ Fipun I . Physical proper & scmed by input devices . l R is a resolution function that maps from the input domain set to the output domain set , l Out is the output domain set , and e W is a general purpose set of device properties that describe additional aspects of how a device works ( perhaps using production systems ) . Figure 1 lists the various manipulation operators pos - sible for an input device . They are an extension of the physical properties suggested by Baecker and Buxton 131 . They represent all combinations of linear and ro - tatary , absolute and relative , position and force . Al - though other input devices are possible ( based , say on speech or heat ) , virtually all input devices use some combination of these properties . Figure 2 illustrates the description of a simple set of ra - dio controls , using our primitive movement vocabulary . The volume knob is rotated about the Z axis ( conven - tionally assumed to be normal to the panel surface ) . It is a continuous device and maps using the identify oper - ator from an input domain set of 0 to 270 degrees into the same set . The selector knob , on the other hand , maps from the set consisting of 0 to 90 degrees into the ordered sequence ( 0 , 45 , 90 ) degrees . Finally , the station knob is a dial that moves any number of turns to the right or to the left . It is presumed to connect to a slider that moves back and forth between 0 and 5 inches . The station knob is a relative device . It keeps turning after the slider is against one side and no longer moves . But if the knob direction is reversed , then the slider reverses immediately . The volume knob , the selection switch , and the slider each go through another mapping into the parameters of an application . Composition Operators The example in Figure 2 also illustrates the notion of a composition operator . The output domain set of the station knob is mapped into the input domain set of the slider . This sort of composition operator is called a connection . There are three composition operators : l Merge composition 0 Layout composition 0 Connect composition Input state Resolution fn OutQlJt Merge composition is the combining of two devices such that the resulting input domain set is the cross product of the input domains of the two devices . A mouse , for example , can be thought of as the merge composition of two orthogonal one - dimensional sliders . Layout com - position is the collocation of two devices on different places of a common panel . For example , the three but - tons of a mouse and the XY sensor are all four layout - composed together to form the mouse . Connect compo - sition occurs when the output domain of one device is mapped onto the input domain of another device . For the mouse , the output is connected to the input for the screen cursor . The screen cursor , of course , is not ac - tually a physical device . This illustrates another point about the modeling scheme , namely , that devices do not have to be physical devices , but can also be virtual devices implemented in software , such as the cursor . The Design Space for Input Devices The design space for input devices is basically the set of possible combinations of the composition operators with the primitive vocabulary . We graph a simplified visualization of this space in Figure 3 . This is our equiv - alent to Foley , Wallace , & Chan’s [ IO ] and Buxton’s [ 3 ] classification . A device is represented in the figure as a set of circles connected together . Each circle repre - sents a transducer in the device , plotted according to the canonical physical property it transduces . Each line in - dicates a composition operator : connection composition ( double line arrow ) , layout composition ( dotten line ) or merge composition ( black line ) . We have plotted the devices of our radio example and the mouse on this diagram to illustrate its use . The ra - dio volume knob is in the cell in Figure 3 for sensors of angles relative to the Z axis . It is located on the right side of the cell , showing that it is continuous . The se - 119 CHI 90 Ptnceedngs ApI I ! 390 hieawte MetiSWW Measure Measure MeaSure Measure I Figure 3 . This diagnm describes PP input device taxow ~ ~ ~ tkt Is bud an tk analWs presented in this paper . Circln me used to idkate tkl 1 device senses OM oftk physical prowties rhonn OII tk rtnical axis nloq OD ( of tk limu or roun dimemiom skra on tk horizontal axis . for example . tk roluac circk indicates P device tkt sews angle wound tk z axis . The po4rion in a column indicma tk nuabcr olvdua tkt PI - C XI & ( tkt is . tk messwe of the domain set ) . For example . tk s & cllon circle represents P discrete device . Lines are used to connect the clrcln 01 composlrr dwica . Tk double line represents 1 co # mectioa composirkn . such m tar rk rodlo ~ lalloo composite device A bhck line represeWs 3 merge conpdtloh such ss tk x and Y conpacms of tk q ou . Tk d & d line ~ pnsents l layout composition . such as tk buttons on P moue . wbicb we represented by I circle wltb n 3 in it ( siw tk ~ arc identical devices ) . lection knob is similar , but it is located nearer the left side showing that it takes just a few values . The station knob is located in the cell for relative angle and is con - nected to a slider for the tuning mechanism . A mouse is depicted in the figure as a circle on X Movement , a cir - cle on Y Movement , and a circle containing the number 3 on Z positioning . This says that the mouse is a layout composition of four devices : one device which is itself the merge composition of two elementary devices sens - ing change in X and Y and three other d , evices that are simple buttons . The placement of the X and Y circles to the right of the column indicate nearly continuous resolution . The location of the button circles to the left indicates controls with only two states . To demonstrate the coverage of the taxonomy , we have reclassified the devices listed by Foley , Wallace , & Chen and Buxton ( see Figure 4 ) . With the exception of voice , we have been able to position on the diagram all of the devices considered so far . Furthermore , it is possible by placing circles in , various cells of the diagram to generate potential new devices . Of course many of these devices might not be good ones , but the point is that Figure 3 is a sufficiently rich depiction of the design space for input devices that it can be used both to classify nearly all existing devices and to generate ideas for new ones not yet invented . In particular , we haved used our model of the input device design space to help design novel egocentric motion devices for virtual 3D environments [ 15 , 191 . TESTING POINTS IN THE DESIGN SPACE Up to this point , we have described how to model the Linear I Rotary I de & d l & & d la bib p & ola tuomdles . & kr & tir ~ indkstedi , circles , & de tk radio devices d & W prericusl ~ and somu uarsvll devka to demonstnte tk generality of the tk t . xowm , . space of input device designs , including methods to help generate the space . We now turn to testing it . Follow - ing Mackinlay [ 13 , 141 , the mappings implied by spe - cific input device designs can be evaluated according to two basic criteria : ( 1 ) ezpressiven . ess ( the input conveys exactly and only the intended meaning ) and ( 2 ) effec - tiveness ( the input conveys the intended meaning with felicity ) . Expressiveness There are several sorts of expressiveness problems that can arise with input devices . One sort of problem arises when the number of elements in the Out set does not match the number of elements in the In set to which it is connected . If the projection of the Out set includes elements that are not in the In set , the user can spec - ify illegal values ; and if the In set includes values that are not in the projection , the user cannot specify legal values . For example , if the user wishes to convey the meaning to the system “Select point ~ 105 , y = 32” , but the device he is using has a resolution of l / 4 inch ( as for some touch panels ) , then he will not be able to express his requests exactly and there will be some loss of expressiveness - serious or not depending on the situation . Effectiveness More interesting for input devices is effectiveness . Sev - eral figures of merit are possible : 120 cHl9oproceedinQs Apir1990 l Pointing speed ( reahy device bandwidth ) 0 Pointing precision l Errors l Time to learn l Time to grasp the device 0 User preference l Desk footprint l cost These figures of merit include human performance mea sures , such as speed and errors , as well as pragmatic concerns , such as desktop footprint , panel space , or cost . Let us illustrate two of these : footprint and bandwidth . footprint An input device requires a certain amount of space on a desk . Since a workspace , such as a desk , is a small , fi - nite resource , smaller footprints are usually better . The actual amount of space required to operate a device de - pends on the sequence of actions in an application . But for design purposes , we can index this by taking an ex - treme application parameter manipulation , then map - ping this backward through the input device to deter - mine what input device manipulation would be required to make this change in the application parameter . As an example , let us compare the relative desk foot - print of different input devices for pull - down menus on the original Macintosh ( 12 inch screen ) and the Super - Mac ( 19 inch screen ) . The mouse must be able to move from any point of the screen to the menu bar , which is at the extreme top of the screen . The footprint is therefore an image of virtually the entire screen in the movement of the device . For various devices , we can estimate this , as below . Device Footprint ( square inches ) 19” Screen 12’ Screen Mouse ( C : D = 1 : 2 ) 43 4 . 1 Tablet ( C : D = 1 : l ) 173 69 Light Pen 0 0 Touch Pad 0 0 Trackball ( 2”x2” ) 4 4 Rotary Pots 0 0 Joystick ( 2”x2” ) 4 41 Figure 5 plots the sensors for . these devices , circle size proportional to the area of the footprint . Several facts about the design space of potential devices are evident Fiw - c 5 . FooWint of ittwt dcvkn for Mnclntmh # ulldown memu . Filled in circla the describe tk drrkc footvinb for tk 12 inch screen . The sbite circles describe tk dnirt footvtots for the 19 Inch x , ea , from the diagram : ( 1 ) The tablet and the mouse are very expensive in footprint relative to other devices . ( 2 ) Going from 12 inch to 19 inch displays causes a major increase in footprint size for the mouse and tablet ( but has no effect on the other devices ) . This increase in footprint size might profitably cause designers to con - sider whether the original pull - down menu design is the most appropriate for the larger screen . Bandwidth Now let us turn to another figure of merit , bandwidth . It is usually desirable for an input device to be as fast to use as possible . But it is not quite accurate to char - acterize input devices in terms of speed of use . The time to do something is actually a joint product of all these elements in our model : the human , the device , and the application . For the moment , we restrict our - selves to tasks which involve pointing to a target with a continuous device . The speed and error performance of a particular device may depend on a number of subtleties , such as the re - lationship between the geometry of the device and the geometry of the hand or coefficients of friction . But we can give a rough characterization of input device design effectiveness in terms of human and device bandwidth and application precision requirements : 1 . [ Human ] The bandwidth of the human muscle group to which the input device transducer is at - tached . 2 . [ Device ] The resulting bandwidth of the input de - vice . 3 . [ Application ] The precision requirements of the task to be done with the device . Bandwidth of the human muscles . Figure 6 shows data from an experiment by Langolf [ 12 ] . Subjects in the experiment performed the Fitts dotting task [ 9 ] under the microscope . Movements of different muscles caused 121 CHI 90 Prucwdings April1990 NECK 5 bwdsec bssumed ) ARM 10 b , tS , SC WRIST 23 bbtS / SBC FINGER 38 bltS / Z % C LOG , ( PA / Wl ( bits ) l e . 0 Para ~ faph Icon Word Char Fipre 6 . Morcmnt the IS a fuwttw of Fin’s Index olDlf ! kulty from Ln ; olf’s study ol movemmts rmder m gkroscope ( Laogolf . 1973 . & ME + . The older fom of Fitt’r Law ( Fits . 1954 ) is used ( A - Distance . W I Width olT . ~ L Data “I ) 01 tbm subjects for IZS - ZOO nwwmei ~ ts . different Fitts’s Law slopes suggesting different muscle bandwidths . We can use Figure 6 as a rough index for the bandwidth of different parts of the body . Bandwidth of Input Devices . An approximate measure of the difficulty of many input activities can be esti - mated by selecting one , or a few , extreme subtasks as design benchmarks ( the way a heating engineer would take a - 2O’F winter day , a lOOOF summer day , and a 70°F typical day as design benchmarks to run calcula tions on ) . For example , in text editing , we might select the subtask of pointing to a character ( because it is probably the hardest pointing task for editing ) as our design benchmark . We can index the difhculty of a task by using Fitts’s Index of Difficulty [ 9 ] , which , in Welford’s [ 24 ] reformu - lation is given as : ID = log , ( D / S + . 5 ) bits , where D is the distance and 5’ is the size of the target , that is , the precision with which pointing has to be done . The time required to do one of these tasks is given by : MovementTime = Const + ( l / B ) * ( 10 ) set , where B is the bandwidth of the device . The quantity B is often given for Fitts’s Law in terms of its reciprocal . Values of the Index of Difficulty for some common graphics subtasks are located on the abscissa of Fig - ure 6 . We now go one step farther . Using the bandwidth of the arm ( which is the main muscle group involved in moving the mouse ) as a reference , we can compare de - vice bandwidth and task precision requirements . We take an application task such as pointing to a character on a display . This task has an associated In index of difficulty number as indicated in Figure 6 on the ab - scissa . Moving vertically upward , we intersect the line indicating the time required by an arm to point to a target of this difficulty . We can then move horizontally to find the Fitts’s Law line associated with the muscles connected to the transducer of another input device . From this intersection , we can move back down to the abscissa to find the Index of Difficulty value that this device could point to in the same time that the arm could point to a character . As a result , we say that an input device will be matched with the precision re - quirements of a pointing task , if the pointing device ( as indicated by the relative size of the circles ) is as good as the pointing hand . This calculation has been used to set the size of circles that characterize both device bandwidths and application precision requirements in the following example . Example : Display Selection in a 30 Information En - vironment using Mouse and Headmouse Suppose the user is located in a virtual 3D environment ( Figure 7 ) . Moving the mouse forward and back rotates the virtual head up and down ; moving the mouse left and right rotates the head to the left or to the right . The screen contains a fixed circle cursor on its center . Moving the mouse thus moves the world , keeping the cursor fixed . This simulates moving the user’s direction of gaze aroun , d in this virtual world . Pressing a button on the mouse selects whatever object is inside the circle . An interesting alternative to the mouse for this appli - cation is the “headmouse” device . A headmouse has a pair of ultrasonic sensors worn on the head like ear - phones , a transmitter mounted on the display , and plugs into the mouse port . Moving the head changes the XY coordinates of the mouse in the appropriate way . It seems like an obvious device for this application , but analysis shows that it is only appropriate for half of the task . Figure 8 shows the set of connected devices im - plied by the above description of the use of the mouse . The mouse is connected to a virtual head and then to 122 cH19opluceed ~ Ppil1990 Match Match b & match Match a virtual cursor on a surface in the virtual 3D world . In the figure , the circles of all these virtual devices are drawn to indicate the precision with which pointing can be done - a smaller circle indicates tighter precision com - puted according to Figure 6 . Filled circles represent the precision requirements of the application . In this task there are essentially two application precision require - ments : loose precision for controlling the virtual head looking around and tight precision for pointing at a po - sition on the whiteboard . A white circle and a filled cir - cle of the same size indicate a fit . A filled circle larger than a white circle indicates that the device has more precision than needed . But a filled circle smaller than a white circle indicates that the task requires more peci - sion than is being provided . In Figure 8 , we see that the mouse provides more than enough precision for moving the head and is a match for pointing to the whiteboard . But when we make the equivalent diagram for the headmouse in Figure 9 , we see that the headmouse . is matched to the task of look - ing around , but it is not precise enough for the pointing task . If we want to use the headmouse , we should sep - arate out the pointing task and put it on some other , more precise device . Incidently , a similar analysis for editing would suggest that the headmouse is not a very good idea for text editing because the transducer has been connected to a muscle with too little bandwidth for the precision of editing subtasks such as pointing to a character . CONCLUSION In this paper , we have illustrated a way of systematiz - ing knowledge about input devices . We have provided a method for helping to generate points in the design space . We have shown how designs can be critiqued in terms of expressiveness and effectiveness and have used two effectiveness metrics , footprint and bandwidth to il - lustrate how regions of the space can be systematically analyzed . The design of human - machine interfaces , it has been argued , can be at least partially viewed as the design of artificial languages for communicating between hu - man and machine . This paper has analyzed the basic semantics of one component of such artificial languages - input devices . Mackinlay [ 13 , 141 , as noted , has made a similar analysis of graphical presentations of data - communication in the other direction , from machine to human , Both studies have tried to work out a sys - tematic description of the semantics of the messages to be communicated between human and machine . There are , of course , many additional complexities to human - machine communication that have not been dealt with ( e . g . , feedback , turn - taking , or animation ) , but the techniques used in these studies seem likely to be use - ful for future systematic treatments of other areas . In particular , it allows us to accumulate theory , empirical results , and design in a coherent framework . It is interesting to note that somewhat similar methods have been used in other areas of engineering , for exam - ple , to design jet engines [ 26 ] . A technique similar to ours ( called “morphological search” ) was used to define several design spaces and , it is claimed , led to a number of surprising and novel inventions . References PI PI PI PI Albert , A . , ( 1982 ) . The effect of graphic input devices on performance in a cursor positioning task . Proceedings of the Human Factors Society - 26th Annual Meeting , pp . 5458 . Anson , E . ( 1982 ) . The device model of interaction . Computer Gruphics , 16 ( 3 ) , 107 - 114 . Also , SIG - GRAPH ‘82 Proceedings . Baecker , R . M . , & Buxton , W . ( Eds . ) , ( 1987 ) . Readings in human - computer interaction : A mul - tidisciplinary approuch . Los Altos , CA : Morgan Kaufmann , 357 - 365 . Buxton , W . ( 1983 ) . Lexical and pragmatic consid - erations of input structures . Computer Graphics 17 ( l ) , 31 - 37 . 123 , Cl - 4 90 procee & m Apfil1990 [ 5 ] Card , S . K . , English , W . K . , & Burr , B . J . ( 1978 ) . Evaluation of mouse , rate - controlled isometric joy - stick , step keys , and text keys for text selection on a CRT . Ergonomics 21 , 601 - 613 . [ 6 ] Card , S . K . ( 1989 ) . H uman factors and artificial intelligence . In P . A . Hanccock & M . H . Chignell ( Eds . ) , Intelligent interfaces : theory , research and design . Elsevier Science Publishers B . V . ( North - Hohand ) . [ 7 ] English , W . K . , Engelbart , D . C . , & Berman , M . L . ( 1967 ) . Display - selection techniques for text ma - nipulation . IEEE Transactions on Human Factors in Elec2ronics HFE - 8 , 515 . [ S ] Epps , B . , Snyder , H . , & Mutol , W . ( 1986 ) . Com - parison of six cursor devices on a target acquisi - tion task . Proceedings of the Society for Informa - tion Display , pp . 302 - 5 . [ 9 ] Fitts , P . M . ( 1954 ) . The information capacity of the human motor system in controlling amplitude of movement . Journal of Experimental Psychology 47 , 381 - 391 . [ lo ] Foley , J . D . , Wallace , V . L . , & Chan , P . ( 1984 ) . The human factors of computer graphics interac - tion techniques . IEEE Computer Graphics & Ap - plications 4 ( 11 ) , 13 - 48 . [ ll ] Karat , J . , McDonald , J . , & Anderson , M . ( 1985 ) . A comparison of selection techniques : touch panel , mouse and keyboard . In B . Shacket ( Ed . ) , Human - Computer Interaction - INTERACT 84 , pp . 189 - 193 . [ 12 ] Langolf , G . D . ( 1973 ) . Human motor performance in precise microscopic work . PdD dissertation . Uni - versity of Michigan . Also published by the MTM Association , Fairlawn , New Jersey , 1973 . [ 13 ] Mackinlay , J . ( 1986a ) . Automatic design of graphi - cal presentations . PhD dissertation . Computer Sci - ence Dept . , Stanford University . Also Tech . Rep . Stan - ( X - 86 - 1038 . 1141 Mackinlay $ J . ( 1986b ) Automating the design of graphical presentations of relational information , ACM Transactions on Graphics , 5 ( 2 , April ) , llO - 141 . 1151 Mackinlay , J . D . , Card , S . K . , & Robertson , G . G . ( in press ) . A semantic analysis of the design space of input devices . To appear in Human - Computer Interaction , Lawrence Erlbaum . [ 16 ] Olsen , D . R . , et al . ( 1987 ) . ACM SIGGRAPH workshop on software tools for user interface man - agement . Computer Graphics 21 ( 2 ) , 71 - 147 . [ 17 ] Olsen , D . R . , & Halversen , B . W . ( 1988 ) . Inter - face usage measurements in a user interface man - agement system . Proceedings of the ACM SIG - GRAPH Symposium on User Interface Software . Banff , Alberta , Canada , October , 19988 , 102 - 108 . New York : ACM [ 18 ] Pfaff , G . E . ( 1985 ) . User interface management systems . New York : Springer - Verlag . [ 19 ] Robertson , G . G . , Card , S . K . & Mackinlay , J . ( 1989 ) . The cognitive coprocessor architecture for interactive user interfaces . Proceedings of A CM Symposium on User Interface Software & Technol - ogy . Williamsburg , VA , in press . New York : ACM . [ 20 ] Sheridan , T . B . ( 1984 ) . Supervisory control of re - mote manipulators , vehicles and dynamic pro cesses : experiments in command and display aid - ing . Advances in Man - Machine System Research , 1 , 49 - 137 , JAI Press . [ 21 ] Siewiorek , D . , Bell , G . , & Newell , A . ( 1981 ) . Com - puter structures . New York : McGraw - Hill . [ 22 ] Tanner , I’ . P . & Buxton , W . A . S . ( 1985 ) . Some issues in future UIMS development . In G . E . Pfaff ( ed . ) , User interface management systems , ( pp . 67 - 79 ) , New York : Springer - Verlag . [ 23 ] van den 13os , J . ( 1988 ) . Abstract iteraction tools : a language for user interface management sys - tems . ACM Transactions on Programming Lan - guages and Systems , 10 ( 2 ) , 215 - 247 . [ 24 ] Welford , A . T . ( 1968 ) . Fundamentals of skill . Lon - don : Methuen . [ 25 ] Whitefield , D . , Ball , R . , & Bird , J . ( 1983 ) . Some comparisons of on - display and off - display touch in - put devices for interaction with computer gener - ated displays . Ergonomics , . 26 ( 11 ) , pp . 1033 - 1053 . [ 26 ] Zwicky , F . ( 1967 ) The morphological approach to discovery , invention , research , and construction . In F . Zwicky & A . G . Wilson ( Eds . ) , New meth - ods of thought and procedure . Springer - Verlag ( New York ) . 124