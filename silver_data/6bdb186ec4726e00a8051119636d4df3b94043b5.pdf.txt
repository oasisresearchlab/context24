MLDS Caffe Tutorial 2015 - 12 - 18 simpdanny Outline - BVLC : B erkeley V ision and L earning C enter - Caffe : C onvolutional A rchitecture for F ast F eature E mbedding - What can Caffe do ? - Installation - Tutorial - Conclusion Caffe ●Convolutional Architecture for Fast Feature Embedding ●http : / / caffe . berkeleyvision . org / Notes ●CNN / DNN ●Different training objective function ●Different optimization algorithm ●Program control ●Model Zoo ●C + + Framework ● NO LSTM / RNN CNN / DNN modules ● Vision Layer ○ Convolution / Pooling / Local Response Normalization ● Common Layer ○ InnerProduct ( = DNN fully - connected weights ) ○ batch normalization ○ element - wise summation / product / BNLL ○ dropout layer ● Activation Layer ( Non - linearity ) ○ Sigmoid / Tanh / ReLU / PReLU ● Utility Layer ○ Dimension slicing / concatenation / flattening / reshaping Training Loss Layer ●CrossEntropyLoss ●L1 , L2 Loss , pair - wise contrasive loss ●Multitask Learning with loss weights ●Accuracy Layer : for evaluation only . Optimization Algorithms ●SGD , RMSProp , ADAM , ADADELTA , ADGRAD… ●Momentum ●Learning Rate Adjustment Policies ○ decay , step - decay , exp - decay ●Regularization ○ weight - decay , L1 decay Program Control ●Snapshot ( solverstate ) ●Phase : ○ Convention : Train / Validation / Test ○ Caffe : Train / Test / Deploy ○ You could assign different action w . r . t different phase . ●Caffe Program Interface ○ You can provide meta data without actually implement the deep learning algorithms . ○ You can extend the module and implement your own ideas . What can Caffe do ? ●Multitask learning ○ Multi - target , Multi - loss ●Parameters share training ○ Siamese Neural Network ●Easy to integrated into online system . ○ With known distributed database , protocol… ○ C + + , Python and Matlab binding . Multitask Learning Siamese Neural Network Introduction ●The goal of Caffe is to find the effective representations ( feature embedding ) for various inputs , such as images and sounds , with help of deep learning and GPU acceleration . ○ There does exist cross - domain feature embedding among different tasks . ○ Utilize CUDA ( cuDNN ) to achieve acceptable training time . Introduction ● Caffe is designed for image s and based on state - of - the - art CNN . However , the concept of feature embedding shares among other works ( e . g . speech recognition ) . ○ Yes , Caffe supports non - image tasks with a bit more efforts . Introduction ● Caffe provided well - known and well - trained models , offering state - of - the - art researching and off - the - shelf deployment . ○ ImageNet : classify images into 22000 categories . ○ GoogleNet : classify images into 1000 categories . ○ R - CNN : object detection ( 20 or 200 types ) ImageNet GoogleNet R - CNN Highlights ●Complete toolkit for training , testing , fine - tuning and deploying . ●Modularity ○ Extensible ○ Forward , backward , CPU / GPU version . ●Good coding style and huge community ○ Only well - test idea would be merged into Caffe ○ Distributed developed with many coders . ○ Clearly logging , documentation , robust , bullet proof , easy - understanding message . . . Highlights ●Python / Matlab binding ○ Online deploying interface ○ Online training is not intuitively integrated but able to . ●Pre - trained models Architecture ●C + + implementation ○ Well - known efficiency . ●Saving models in GPBL . ○ Google Protocol Buffer Language ○ Human - readable , efficient serialization and implemented in multiple interface . ●Online training ○ Memory data . ●Offline training ○ LevelDB database for image data ○ HDF5 database for general purpose . Application ●Object Classification / Detection ○ ImageNet ○ Demo Application ●Learning Feature Embedding ○ ImageNet ○ Using pre - trained models as feature extractor Tutorial ●Installation ○ Prerequisite / Core / Wrappers ●Data Preprocessing ○ LevelDB / HDF5 ●Models ○ description , model weights , protobuf ●Solver ○ description , solver state ●Training / Testing / Fine - tuning / Deploying Warning ● Caffe is not officially supporting Windows OS . Ubuntu / CentOS is recommended . ● Caffe is not officially supporting Windows OS . Ubuntu / CentOS is recommended . ● Caffe is not officially supporting Windows OS . Ubuntu / CentOS is recommended . ● 不要問我 windows 怎麼灌。 Installation ● Install Prerequisite ○ CUDA and cuDNN ○ BLAS via OpenBLAS , MKL , or ATLAS ○ sudo apt - get install Boost / OpenCV / protobuf / glog / gflags / hdf5 / leveldb / snappy / lmdb ●Install Caffe ○ prepare Makefile . config from Makefile . config . example ○ make all & & make test & & make runtest ●Install Python wrapper ( optional but recommended ) ○ for req in $ ( cat requirements . txt ) ; do pip install $ req ; done ○ export PYTHONPATH = / path / to / caffe / python : $ PYTHONPATH Data Preprocessing ●Input data must be 4D array : ○ Image : ( number , channel , height , width ) ○ Non - image : ( number , dimension , 1 , 1 ) ●Training target is usually 2D array : ○ Label : ( number , dimension ) ●Online Memory ○ ( C + + ) MemoryDataLayer : : Reset ( ) ○ ( python ) Net . set _ input _ arrays ( ) ●Offline database ○ prepare a directory contain all the images ○ prepare lmdb ( python ) or leveldb ( c + + ) for images ○ prepare hdf5 ( python ) for general purposes ○ prepare train . list / test . list comprising the path Models ●Description ○ DAG layered structure written in json format . ○ Data Layers : read from data , only out - degree ○ Activation / Neuron Layers : perform forward / backward pass . ○ Loss Layers : nn output , only in - degree ○ Common Layers : for utility ○ Each type of layers contain its own parameters ○ Different layer parameter could share ! Models Models Models Models Models ●Model Weights ○ x . caffemodel ○ store in GPBL format ○ prototype Solver Training and Testing ●Preparation : ○ data ○ model description ( nnet . prototxt ) ○ solver description ( solver . prototxt ) ●You can specify two phase ○ training - > calculate loss , gradients , backward pass and update ○ testing - > calculate accuracy / loss ●run : ○ caffe train - - solver = solver . prototxt Fine - tuning ●Preparation : ○ data ○ model description ( nnet . prototxt ) ○ solver description ( solver . prototxt ) ○ pre - trained models ( pretrain . caffemodel ) ●run : ○ caffe train - - solver = solver . prototxt - - weights = pretrain . caffe Deploying ●Preparation : ○ data ○ model description ( deploy . prototxt ) ○ well - train model ( well _ train . caffemodel ) ○ pycaffe if you use python ○ your own code ( python , c + + or matlab ) ●deploy . prototxt is slightly different Deploying ( python example ) ●Add data description in deploy . prototxt ○ remove any DATA _ LAYER ●In python , import caffe ○ net = caffe . Classifier ( MODEL _ FILE , PRETRAINED ) ○ use numpy array to prepare your input data ○ net . blobs [ ' data ' ] . reshape ( input _ shape ) ○ out = net . forward ( data = input ) ○ use out [ ' label ' ] to get any output you want . Final Recommendation ●Caffe is easy and flexible to use , but not that efficient . 甚至可以不用寫程式 XD ●For complicated structure with multi - loss layer , weight sharing and advanced optimization , caffe is good . ●However , you should prepare data in the specified format ○ HDF5 , LMDB , LEVELDB… ○ offline training / testing is easy and preferred ●For online procedure , you must write your own code to deploy .