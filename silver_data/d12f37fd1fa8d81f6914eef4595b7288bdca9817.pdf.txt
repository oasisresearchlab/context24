Needs - driven service bundling in a multi - supplier setting The computational e 3 service approach Sybren de Kinderen VRIJE UNIVERSITEIT Needs - driven service bundling in a multi - supplier setting The computational e 3 service approach ACADEMISCH PROEFSCHRIFT ter verkrijging van de graad Doctor aan de Vrije Universiteit Amsterdam , op gezag van de rector magniﬁcus prof . dr . L . M . Bouter , in het openbaar te verdedigen ten overstaan van de promotiecommissie van de faculteit der Exacte Wetenschappen op maandag 25 oktober 2010 om 13 . 45 uur in de aula van de universiteit , De Boelelaan 1105 door Sybren de Kinderen geboren te Amsterdam promotor : prof . dr . J . M . Akkermans copromotor : dr . J . Gordijn SIKS Dissertation Series No . 2010 - 42 . The research reported in this thesis has been carried out under the auspices of SIKS , the Dutch Graduate School for Information and Knowledge Systems . Promotiecommissie : prof . dr . J . M . Akkermans ( promotor ) dr . J . Gordijn ( copromotor ) prof . dr . E . Dubois ( Public research centre Tudor , Luxembourg ) prof . dr . R . J . Wieringa ( University of Twente , the Netherlands ) prof . dr . J . Domingue ( The Open University , UK ) dr . A . ten Teije ( VU University , the Netherlands ) prof . dr . R . T . Frambach ( VU University , the Netherlands ) ISBN : 978 - 90 - 5335 - 319 - 6 Cover design by Ridderprint . Front : Juan Gris , Glass and a carafe ( 1917 ) Back : Vincent van Gogh , Glass of Absinthe and a carafe ( 1887 ) Copyright c (cid:13) 2010 by Sybren de Kinderen 7 ‘What is your conceptual continuity ? ’ 1 1 F . Zappa , Stinkfoot Contents Acknowledgements vii 1 Introduction 1 1 . 1 Automated needs - driven service bundling in a multi - supplier setting 2 1 . 1 . 1 A needs - driven process . . . . . . . . . . . . . . . . . . . 2 1 . 1 . 2 Services . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1 . 1 . 3 Service bundling . . . . . . . . . . . . . . . . . . . . . . 3 1 . 1 . 4 A multi - supplier setting . . . . . . . . . . . . . . . . . . 4 1 . 1 . 5 A semi - automatic process . . . . . . . . . . . . . . . . . 4 1 . 2 Research question . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1 . 3 Research approach . . . . . . . . . . . . . . . . . . . . . . . . . 6 1 . 4 Research contributions . . . . . . . . . . . . . . . . . . . . . . . 8 1 . 5 Publications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 1 . 6 Structure of this thesis . . . . . . . . . . . . . . . . . . . . . . . 10 2 Customer - supplier interaction to reason about bundling commercial services 11 2 . 1 What is a service ? . . . . . . . . . . . . . . . . . . . . . . . . . . 12 2 . 2 Customer needs analysis . . . . . . . . . . . . . . . . . . . . . . 15 2 . 2 . 1 Separation of problem and solution . . . . . . . . . . . . 16 2 . 2 . 2 Gradual speciﬁcation of customer need into solutions . . . 17 2 . 2 . 3 Customer - supplier interaction : Balancing positive and neg - ative service features . . . . . . . . . . . . . . . . . . . . 19 ii Contents 2 . 3 Commercial perspective on services bundling . . . . . . . . . . . 20 2 . 3 . 1 What is a service bundle ? . . . . . . . . . . . . . . . . . 20 2 . 3 . 2 Reasons for service bundling . . . . . . . . . . . . . . . . 20 2 . 3 . 3 Needs - driven customization of service bundles . . . . . . 22 2 . 3 . 4 Creating needs - driven packages of commercial services . 23 2 . 4 Computational perspective on services bundling . . . . . . . . . . 24 2 . 4 . 1 Composition by syntactic workﬂow . . . . . . . . . . . . 24 2 . 4 . 2 Semantic web service composition . . . . . . . . . . . . . 26 2 . 4 . 3 Web service composition lacks pragmatic service expressions 28 2 . 5 Formal reasoning about services bundling . . . . . . . . . . . . . 28 2 . 6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 3 Consequences as a key concept 33 3 . 1 Positioning of the e 3 service ontologies . . . . . . . . . . . . . . . 34 3 . 1 . 1 Ontologies for shared understanding and formal reasoning 34 3 . 1 . 2 Formal conceptualization of established business literature 35 3 . 2 The e 3 service ontologies . . . . . . . . . . . . . . . . . . . . . . 36 3 . 2 . 1 A supplier and customer perspective ontology . . . . . . . 36 3 . 2 . 2 The customer perspective ontology . . . . . . . . . . . . 36 3 . 2 . 3 The supplier perspective ontology . . . . . . . . . . . . . 42 3 . 2 . 4 Using Service catalogues to hide the complexity of the e 3 service ontologies . . . . . . . . . . . . . . . . . . . . 47 3 . 3 Creating a customer perspective service catalogue . . . . . . . . . 47 3 . 3 . 1 Elicit service suppliers and the offered elementary services 48 3 . 3 . 2 Formalizing ICT services from a customer perspective . . 48 3 . 4 Create a supplier perspective catalogue of ICT services . . . . . . 51 3 . 5 Reasoning about needs - driven service bundling . . . . . . . . . . 53 3 . 6 Computational implementation of the customer perspective service catalogue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 3 . 7 Summary : Consequences are key . . . . . . . . . . . . . . . . . . 62 Contents iii 4 Applying e 3 service to practical business cases 65 4 . 1 B2B Case : Online design of mailings for SMEs . . . . . . . . . . 65 4 . 1 . 1 Case study setup . . . . . . . . . . . . . . . . . . . . . . 67 4 . 1 . 2 Creating a customer perspective service catalogue . . . . . 68 4 . 1 . 3 Create a supplier perspective service catalogue . . . . . . 72 4 . 1 . 4 Reasoning with mailing ontology instantiations . . . . . . 75 4 . 2 Practical usefulness and theoretical reﬂections . . . . . . . . . . 81 4 . 3 B2C Case : Bundling of end - customer telecom services . . . . . . 82 4 . 3 . 1 Case study setup . . . . . . . . . . . . . . . . . . . . . . 83 4 . 3 . 2 Creating a customer perspective service catalogue . . . . . 84 4 . 3 . 3 Reasoning about ISP ontology instantiations . . . . . . . 86 4 . 4 Practical usefulness and theoretical reﬂections . . . . . . . . . . 92 5 Towards interactive , consequence - based , reasoning 95 5 . 1 Consequences as a key concept for needs - driven service bundling . 96 5 . 2 Service bundling requires customer - supplier interaction . . . . . . 96 5 . 3 Elaborating on consequence - based , interactive reasoning . . . . . 98 5 . 3 . 1 Incrementally creating service bundles . . . . . . . . . . . 98 5 . 3 . 2 Supporting computational reasoning by Problem Solving methods . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 5 . 3 . 3 Ontology clean - up . . . . . . . . . . . . . . . . . . . . . 101 5 . 4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 6 Adding customer - supplier interaction to e 3 service 105 6 . 1 The e 3 service ontology . . . . . . . . . . . . . . . . . . . . . . . 106 6 . 1 . 1 The customer perspective ontology . . . . . . . . . . . . 106 6 . 1 . 2 The supplier perspective ontology . . . . . . . . . . . . . 111 6 . 1 . 3 The pricing model ontology . . . . . . . . . . . . . . . . 115 6 . 2 Adding customer - supplier interaction to the reasoning process . . 118 6 . 2 . 1 Propose - Critique - Modify . . . . . . . . . . . . . . . . . . 118 6 . 2 . 2 Needs driven services bundling as PCM . . . . . . . . . . 121 iv Contents 6 . 3 Detailed explanation of the high - level reasoning steps . . . . . . . 127 6 . 4 PCM 2 : Modifying solutions and requirements . . . . . . . . . . . 140 6 . 5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150 7 The PCM 2 software reasoner 151 7 . 1 Tools used : Protege and Jena . . . . . . . . . . . . . . . . . . . . . 151 7 . 2 Inferencing with the software reasoner . . . . . . . . . . . . . . . 153 7 . 2 . 1 Methods for inferencing and producing intermediate output 153 7 . 2 . 2 The tool reasoning process . . . . . . . . . . . . . . . . . 155 7 . 3 Tool implementation reﬂection . . . . . . . . . . . . . . . . . . . 158 7 . 3 . 1 Developing tool support : Contributions to research . . . . 158 7 . 4 Concluding outlook . . . . . . . . . . . . . . . . . . . . . . . . . 159 8 Hosted ICT services 161 8 . 1 Finding needs - driven bundles of hosting services at OGD . . . . . 161 8 . 2 Case study setup . . . . . . . . . . . . . . . . . . . . . . . . . . 162 8 . 3 Creating catalogues of hosted services . . . . . . . . . . . . . . . 164 8 . 3 . 1 Instantiating the supplier perspective ontology . . . . . . 164 8 . 3 . 2 Instantiating the customer perspective ontology . . . . . . 166 8 . 4 Reasoning about bundling hosting services . . . . . . . . . . . . . 169 8 . 5 Lessons learned . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 9 Dementia - care services 183 9 . 1 Reasoning about bundling dementia - care services in the privatized health - care domain . . . . . . . . . . . . . . . . . . . . . . . . . 183 9 . 2 Case study setup . . . . . . . . . . . . . . . . . . . . . . . . . . 184 9 . 3 A customer and supplier catalogue of dementia - care services . . . 185 9 . 3 . 1 A supplier catalogue of dementia - care services . . . . . . 185 9 . 3 . 2 A customer catalogue of dementia - care services . . . . . . 187 9 . 4 Reasoning with the dementia - care service catalogues . . . . . . . 190 9 . 4 . 1 Scenario 1 : Finding a meal - preparation service . . . . . . 192 Contents v 9 . 4 . 2 Scenario 2 : Loaning a wheelchair and ﬁnding related , value - enhancing services . . . . . . . . . . . . . . . . . . . . . 200 9 . 5 Lessons learned . . . . . . . . . . . . . . . . . . . . . . . . . . . 203 10 Conclusions 207 10 . 1 Revisiting the detailed research questions . . . . . . . . . . . . . 207 10 . 1 . 1 Formalization of customer needs . . . . . . . . . . . . . . 207 10 . 1 . 2 Finding multi - supplier service bundles that satisfy needs , against acceptable customer sacriﬁces . . . . . . . . . . . 208 10 . 2 Future research . . . . . . . . . . . . . . . . . . . . . . . . . . . 210 10 . 3 The bundling of commercial ICT services : A cross - disciplinary perspective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213 Appendix A : Intentionality as a guiding principle for deﬁning a service 215 Samenvatting 219 Summary 223 Bibliography 227 Acknowledgements My mother is a ﬁsh 2 It is only my name that appears on the cover , yet this thesis would not have been written had it not been for the support of others . I shall do my best to name all of them . First , I would like to thank my supervisors , Hans ( Akkermans ) and Jaap . Jaap , I want to thank you for seeing in me a PhD - student , and for the constant sup - port and guidance that you provided me with . I shall never quite understand how you mustered up the patience to correct my sometimes Vardaman - like arguments ( see footnote ) , and how you managed to keep encouraging me to keep pursuing my research - even through the ‘I do not like marketing , so this is not for me’ period . Hans , you have been very supportive during the write - up of this thesis - especially in seeing the bigger picture . Frank ( van Harmelen ) , Ruud , Carlos , Annette , Ziv , Chide , Marta , Rainer and Thomas , I want to thank you for the genuine interest that you took in my work . A little interest goes a long way in getting through those ‘why on earth am I doing this ? ’ moments . Hans ( Burg ) , Pieter , all - the - different - persons - at - KPN - who - occupied - that - same - position - of - enterprise - architect - but - whose - names - I - cannot - remember - because - there - was - a - different - face - each - time , Frank ( Verlaan ) , Rose - Marie and Franka , thank you for the time that you invested in the cases . The programmers Evert and Evelien I want to thank for helping me out with the implementation of the e 3 service ontol - ogy and reasoning process . My direct colleagues from the e 3 - value group - Vincent ( Pijpers ) , Zsoﬁa , Ania , Ivan - and the others working on VITAL and COOP , I want to thank for their feed - back on my work , and for being patient with my sometimes tedious talking on insigniﬁcant subjects . In addition , I want to thank Vincent and Ivan for proofread - ing major parts of this thesis . 2 - As I lay dying , W . Faulkner . As I lay dying describes the trials of the Bundren family , as they transport a deceased family member to her ﬁnal resting place . “My mother is a ﬁsh” is an inference made by Vardaman , the youngest of the Bundren family . It is his way of making sense of his mother’s death . He reasons as follows : ( 1 ) My mother is a different is from my is . ( 2 ) We recently caught a ﬁsh that changed from a live ﬁsh to a “not - ﬁsh” . ( 3 ) Thus , that ﬁsh also changed into an is that is different from my is . ( 4 ) Thus , my mother must be a ﬁsh . Vardaman maintains this inference throughout the book , because every other member of the Bundren family is too preoccupied with the transportation to explain to Vardaman the basic facts about life and death . Message : Fully on your own , you cannot achieve a proper understanding of the world . You need the help of others . viii Contents Of course , Bertrand should not be forgotten for helping me to settle down in Lux - embourg , thus facilitating me in applying the ﬁnal touches to this thesis . For the diversions : The ‘cultural outings’ with Chide , Ivan , Jan and others were interesting - although I am never , ever going up those ﬁnal steps of de Dom tower again , the part where there is nothing to hold on to . Also worth a mention is the futsal team in Lelystad whose recreational , out - of - competition mentality I have particularly enjoyed . Finally , my gratitude of course goes out to my family , for their support towards and interest into my work : Vincent ( Tolhuis ) , Bregje , Hans ( de Kinderen ) , omas en opa , and of course Marco and Janneke . Chapter 1 Introduction Today , many organizations offer ( semi - ) automatic customization of physical prod - ucts such that they satisfy speciﬁc customer needs . A well - known example is Dell , who allows for the online design and ordering of a customized PC through spec - iﬁcation of components such as monitor - type , CPU and hard - disk capacity . Cus - tomizing service offerings to satisfy speciﬁc needs is however equally important . A service offering is often a bundle of individual elementary services , such as internet access plus e - mail hosting plus a spam ﬁlter . First and foremost , such bundles are required because elementary services often satisfy a complex need only partially , but together satisfy this need completely . For example , a customer may be interested in an e - mail service only if it includes a spam - ﬁlter service , to avoid being ﬂooded with unwanted e - mails . Currently , services are often offered in ﬁt - for - all bundles that satisfy frequently encountered needs . Pre - packaged ISP service offerings are an example of this . By default , these include services such as web hosting or e - mail hosting that might not be of interest to everyone , but that have to be paid for nonetheless . Worse still , such pre - packaged bundles might include only a ‘watered - down’ version of the service that the customer is looking for , such as a sub - par spam ﬁlter . Therefore ﬁt - for - all bundles are more and more un - bundled in their constituent services , which are subsequently re - bundled to ﬁt with speciﬁc needs ( Normann 2000 , p . 166 - 167 ) . For the ISP example , one can imagine that services such as web hosting and e - mail hosting are only included in an offering when the customer requests this . In addition , the constituent services of bundles can be offered by different enterprises who each focus on their core competencies . As such , one can pick individual services from a supplier of choice , to build a best - of - breed solution . 2 Introduction So , service bundles can be customized to ﬁt with speciﬁc needs , whereby the individual services may be offered by different suppliers . Similar to the ( semi - ) automatic customization of physical products , creating such service bundles should also be computationally supported . In particular , this is relevant for e - services , ser - vices - such as e - mail access - that are partly or completely provisioned online . If such services are provisioned online , they should also be offered and ordered on - line . In other words , the sales process of creating e - service bundles that ﬁt with speciﬁc customer needs should also happen online . 1 . 1 Automated needs - driven service bundling in a multi - supplier setting This thesis explores how to semi - automatically generate a ( possibly ) multi - supplier bundle of services that satisﬁes a complex customer need . 1 . 1 . 1 A needs - driven process Although we still see that many companies offer generic , ﬁt - for - all service bundles that satisfy often - encountered customer needs , we also ﬁnd that more and more companies try to personalize their service offerings such that they ﬁt with speciﬁc customer needs ( Normann 2000 , p . 166 - 167 ) ( Bitner et al . 2000 ) . To illustrate this , consider that many Internet Service Providers ( ISPs ) move towards modularized ISP service offerings such as internet access only , without add - on functionality such as an e - mail box , web space and VoIP , or add - ons only , such as an e - mail box plus VoIP plus web space , without internet access . As such , technically - savvy users can ‘click together’ these modularized offerings to create a customized ISP , exactly in line with their speciﬁc needs . Such modularization introduces a challenge however when it comes to addressing the needs of the average , not - so - technical customer . As opposed to the technically - savvy user , the normal end user often does not speak in supplier - terminology , such as the required bandwidth or latency of an internet connection . The needs of such customers are actually notoriously hard to capture . According to Kotler ( 2000 ) , this is due to amongst others : Customers having trouble articulating exactly what it is they need ( e . g . ‘a fast internet connection’ , but what is fast ? ) , customers having needs that they are not fully conscious of , and that might be inﬂuenced by supplier feedback ( e . g . an elderly person might not be aware of VoIP ) , and customers having concerns that are important , but they rather keep these concerns to themselves ( such Automated needs - driven service bundling in a multi - supplier setting 3 as acquiring VoIP because the customer does not want to lag behind his peers ) . Keeping this in mind , a particularly difﬁcult challenge then is to translate these somewhat vague customer needs into speciﬁc service offerings that satisfy these needs . Adding to that difﬁculty is that customers not only have needs that they want to sat - isfy , but that they also have to take into account the sacriﬁces they have to make . As stated by amongst others Woodruff ( 1997 ) and Kotler ( 2000 ) , the value a customer receives from a service offering is the result of a trade - off between the positive fea - tures received from such an offering , and the sacriﬁces made to acquire an offering 1 . Such sacriﬁces ultimately also have an inﬂuence on what offerings are acquired , and what speciﬁc needs are satisﬁed . In sum : To create personalized offerings , we need to somehow translate a customer need - which might be a vague , ill - informed statement - into service offerings , while taking into account that service offerings can inﬂuence the customer need in terms of sacriﬁces required . 1 . 1 . 2 Services The composition of physical products out of elementary ones is found in a variety of domains , such as elevator and computer design ( VT and XCON ) and the design of an airplane cabin interior ( for more examples , see ( Stumptner 1997 ) ) . The composition of physical products is relatively straightforward , because they can be unambiguously described in terms of their physical properties . Unfortu - nately , describing services is not so easy . The main reason for this is that services have a more or less intangible nature ( Shostack 1977 ) . As such , services cannot be described solely in terms of their physical properties and require additional con - cepts for description . Adding to this difﬁculty is that relatively little literature exists on how to capture commercial services . Early efforts by Baida et al . ( 2005 ) and O’Sullivan et al . ( 2002 ) provide a good starting point , but otherwise the capturing and composition of commercial services is by no means as well - studied as that of physical products . 1 . 1 . 3 Service bundling Services are often offered as bundles , such as e - mail hosting plus internet access plus spam ﬁltering , because they together satisfy a complex customer need . In such 1 Sacriﬁces entail scarce materials that can only be invested once , thus both monetary and non - monetary sacriﬁces 4 Introduction a case , services are said to be interdependent in demand ( Guiltinan 1987 ) . In addition , suppliers have implicit business logic rules for ( not ) combining ser - vices . For example , consider that Apple only sells its iPhones in combination with its iTunes environment , thus forcing the customer to buy two products together or none at all ( a practise commonly referred to as pure bundling ( Stremersch & Tellis 2002 ) ) while , on the other extreme , many providers of 3G mobile internet deny the usage of Skype services . Such business logic should also be taken into account when creating bundles of commercial services . 1 . 1 . 4 A multi - supplier setting Service offerings are increasingly provided by a network of enterprises ( Tapscott et al . 2000 , Normann & Ramirez 1994 ) . For example , internet access plus e - mail hosting plus spam ﬁltering , a commonly occurring bundle of ISP - services , might actually be provided by three different companies that each provide one of these services . The main advantage of such a multi - supplier setting is that companies can each focus on the part offering they specialize on , their core competency , while they together satisfy a complex need . Such multi - supplier scenarios introduce another layer of complexity to the chal - lenges discussed thus far , especially when considering that the bundling of services should be automated as much as possible . Chief amongst this is the difﬁculty of creating a shared understanding . After all , to ensure that the offerings from differ - ent companies can be connected together similar to composing physical products out of individual components , companies require a common vocabulary through which they can express their service knowledge in a uniform manner . 1 . 1 . 5 A semi - automatic process Ideally , needs - driven service bundling should be computationally supported . First and foremost , this is required for the aforementioned support towards the online offering and ordering of e - services , services that are for the most part already pro - visioned online . In a future scenario we foresee , such automated reasoning enables a customer to ﬁll in her e - service preferences using a question - answer game on a website , after which the website responds with possible service bundles that , upon selection , can be provisioned immediately . As can be concluded from the challenges discussed thus far however , automating the task of bundling commercial services based upon on customer needs is a tough Research question 5 nut to crack . Especially , this goes for capturing services and customer needs for - mally , which are both considered illusive even by business scholar standards . 1 . 2 Research question In this thesis , we concentrate on how to reason about multi - supplier bundles of services ( semi - ) automatically , starting from a customer need . Thus , we address the following research question : How can we semi - automatically reason about service bundling in a multi - supplier setting , such that service bundles satisfy complex customer needs against acceptable sacriﬁces ? This question can be broken down as follows : • To what extent can customer needs be formalized , such that they can be used for reasoning about ﬁnding service bundles ? We want to capture customer needs such that they are ﬁt for computational reasoning about ﬁnding service bundles . This requires us to at least make customer needs speciﬁc enough so that they can be matched to services sat - isfying these needs . Yet , we might not be able to fully represent these needs because of their illusiveness : Customers might not be fully aware of needs , may have a difﬁculties to articulate them , or may have needs they keep to themselves . Therefore the question is : To what extent can customer needs be formalized ? • How do we formally reason about ﬁnding service bundles in a multi - supplier setting , against acceptable customer sacriﬁces ? If needs are speciﬁc enough to ﬁnd services for , the next problem is how to formally reason about ﬁnding bundles of services , possibly in a multi - supplier setting , that satisfy these needs . This requires us to capture services such that they can be matched to speciﬁed customer needs . In addition , the decision to acquire a service bundle requires a trade - off be - tween the positive and negative features received from that bundle . Thus , we need to ensure that we not only ﬁnd service bundles that satisfy customer needs , but also that they do so against acceptable customer sacriﬁces . 6 Introduction 1 . 3 Research approach We propose a methodology that , based upon complex customer needs , is able to semi - automatically reason about bundling commercial services : e 3 service . As suggested by the italicized words , e 3 service draws on theories from different dis - ciplines : The business community and the computer science community . Theory development : Formalizing business theories We believe that ideas from different disciplines complement each other : The business community spe - cializes in ‘soft’ topics such as customer needs analysis , but lacks ideas on how to do this in a computational manner . The computer science community , on the other hand , specializes in formal represention of problems for computational purposes , but lacks a ‘soft’ perspective on such problems . The idea of combining notions from the computer science community with ideas from the marketing literature is key to the theory development of e 3 service . From established business literature , we borrow ( presumably ) well - researched ideas on how to bundle commercial services and how to analyse customer needs . The key advantage of this is that it prevents us from having to develop a theory from scratch . Instead , we can rely on a set of well - established principles . From computer science literature we use theories to formalize ideas from business literature such that they can be used for computational reasoning . This approach to theory development has two main advantages . From the com - putational side , we create a formal reasoning process for service bundling that is similar to how business literature describes it . From the business side , computer science theory distills the essence out of multiple theories on a similar topic , such as customer needs analysis ( for elaboration , see section 3 . 1 ) . As such , we end up with a small set of ﬁrst principles . Tool development As part of this research effort we develop a software tool . First , the tool is developed as part of theory development . We shall explain why , using the requirements engineering cycle ( Wieringa et al . 2006 ) as a frame of ref - erence ( ﬁgure 1 . 1 ) . First , we specify a set of principles and implement these in software tool . Referring to the engineering cycle , we perform solution design and solution implementation , by specifying what to implement and then implementing it . At the same time however , we also perform Solution validation . We ﬁnd that tool development by itself enforces speciﬁcity : It acts as a litmus test as to whether the principles are sufﬁciently concretized to be implemented in software . This val - idation by implementation often leads to improvements in the initial design , which Research approach 7 Implementationvalidation Implementation use Solution implementation Solution design Problem analysis Solution validation tests experience implementation improvementsof design solutionspecification improvementsof understanding requirements requirements improvementsof understanding improvementsof design solution properties requirements improvementsof understanding Figure 1 . 1 : The engineering cycle , adapted from ( Wieringa et al . 2006 ) are then again implemented and validated simultaneously etcetera . . . until we have a working tool that we could apply to a case . Second , we require tool development simply to support our claim : That we can reason semi - automatically about services bundling . In this sense , the software tool acts as a proof - of - concept , to show that the reasoning steps that we discuss later on ( see section 6 . 2 ) can indeed be implemented in software . Case study validation We apply e 3 service to four case studies to assess its prac - tical validity : To the postal industry and telecom industry ( chapter 4 ) , to a company that provides hosting services ( chapter 7 ) , and to the healthcare industry ( chapter 8 ) . From each case , we learn what ideas work well in practise and what ideas do not work so well . These lessons learned are used to build an adjusted version of e 3 service : In part , the current version of e 3 service is the result of going through four cycles of case study research . Note here that case study research is largely conducted by participating in real - life cases and , at some points , actually introducing ideas novel to domain experts . Thereby , we intervene in the object we study . At this point , it is interesting to brieﬂy reﬂect upon the type of research we do : design science . To study a phe - nomenon , we participate in the design of a new artefact or , referring to the soft - 8 Introduction ware tool , introduce a new artefact altogether . This is opposed to natural science , where scientists explain phenomena by trying to intervene as little as possible in the object that they study ( March & Smith 1995 ) . 1 . 4 Research contributions With e 3 service , we contribute the following : Consequences as a key concept for formalized needs - driven service bundling We propose a formalized , computational theory of consequences for bridging the gap between customer needs and suppler - speciﬁc services . As we shall discuss more extensively in sections 3 . 2 . 2 and 6 . 1 . 1 , consequences are valuable results of consuming a service that exist on various levels of abstraction ( e . g . not only ‘providing a meal’ , but also ‘support in common household tasks’ ) ( Gutman & Reynolds 1982 , Gutman & Reynolds 1988 ) . As such , they are an ideal means for translating high level needs ( e . g . the need for social support ) into something that is speciﬁc enough to ﬁnd services for . Customer - supplier interaction for ﬁnding needs - driven bundles of services A commonly found idea in marketing and information science literature is that cus - tomers view services differently than do suppliers ( Gr¨onroos 2007 , Parasuraman et al . 1985 , Grifﬁn & Hauser 1993 , Baida et al . 2005 ) . Customers are generally in - terested in the value provided by a service , while suppliers tend to have additional , customer - independent considerations such as price setting , the required supporting services and what is commercially interesting to ( un - ) bundle . Remarkably however , the actual bridging between these different views on services is often left implicit . And if this bridging is addressed , it is often perceived as a simple , one way projection from a set of fully speciﬁed customer needs to the service offerings of the supplier . We have found that this one way projection from needs to services is too simplistic . In particular , we introduce an interactive process that ( 1 ) trades off the beneﬁts and constraints of a service bundle , and that ( 2 ) incrementally creates a service bundle by gradually considering new requirements . The e 3 service approach also contributes speciﬁcally to the marketing and computer science community . To the marketing community , we contribute a computational theory of consequences and services bundling . This is an addition to the current , somewhat fuzzy , marketing approaches that emphasize the use of natural language . Publications 9 To the computer science community , we introduce substantive content theories borrowed from marketing literature . In particular , we contribute to the Problem Solving Method Propose - Critique - Modify ( to be discussed in chapters 5 and 6 ) , by showing that the constraints that serve as an input for PCM tasks can actually also be modiﬁed - instead of being a static , unchanging given . 1 . 5 Publications Major parts of this thesis have appeared in the following publications : • In de Kinderen & Gordijn ( 2008 a ) we present the e 3 service customer per - spective ontology , exempliﬁed by a case in the telecom industry . This publi - cation was nominated for a best paper award . • In de Kinderen & Gordijn ( 2008 b ) we apply e 3 service to a case in the postal industry . • Gordijn et al . ( 2008 a ) discusses how to bridge the customer and supplier perspectives on services . The telecom case is again used for illustration . • de Kinderen & Gordijn ( 2008 c ) provides a step - wise description of how to generate service bundles , given a customer need . • In de Kinderen et al . ( 2009 b ) we further discuss the e 3 service reasoning pro - cess . Additionally , this paper discusses the tool implementation of the rea - soning process . • Gordijn et al . ( 2008 b ) focuses on the relation between e 3 service and other theories from the e 3 - family . • de Kinderen et al . ( 2009 c ) discusses an application of e 3 service in the health - care industry . • de Kinderen et al . ( 2009 a ) is a deliverable for DELLIISS , an European project that aims at developing a service science master . This deliverable provides a synthesis of a literature survey carried out by the partners of DEL - LIISS . In particular , it discusses the notion of a service , service bundling as we ﬁnd it in business discourse , and service composition as we ﬁnd it in the computer science community . 10 Introduction 1 . 6 Structure of this thesis Chapter 2 discusses related work on service bundling and , in so doing , shows that a formal approach towards needs - driven services bundling is currently lacking . In Chapter 3 , we introduce two key ideas behind e 3 service : Consequences as a key concept in customer needs analysis , and using customer - supplier interaction to rea - son about needs - driven service bundling . Subsequently , in Chapter 4 , these ideas are applied to two practical cases : A case in the postal industry , and an ISP case . Chapter 5 serves as an intermezzo . It discusses the upshot of the ideas introduced in chapter 3 , and reﬂects upon their application in chapter 4 . Following up on this , it discusses how these ideas can sharpened such that they are ﬁt for ( semi - ) automated reasoning . In particular , chapter 5 ﬁrst introduces the idea of using the Problem Solving Method ( PSM ) Propose - Critique - Modify as a frame of reference for ( semi - ) automated reasoning about service bundling . Chapter 6 implements the ideas introduced in chapter 5 . It discusses how ( 1 ) ser - vice bundling requires customer - supplier interaction and , ( 2 ) how this is facilitated by the PSM Propose - Critique - Modify . Subsequently , chapter 7 discusses a soft - ware implementation of the interactive reasoning process . Chapters 8 ( a case in the hosted services domain ) and 9 ( a case in the healthcare domain ) show that our bundle reasoning process can also be applied to complex , real world bundling scenarios . Finally , chapter 10 summarizes the contributions from this thesis and provides di - rections for further research . Chapter 2 Customer - supplier interaction to reason about bundling commercial services In this chapter , we argue for a formal approach for reasoning about needs - driven services bundling , and show why customer - supplier interaction in such an approach is required . Additionally , we review related work from the ﬁelds of requirements engineering , com - puter science and service marketing to show that such a formal approach currently does not exist . Parts of this chapter ( sections 2 . 1 , 2 . 3 and 2 . 4 ) have been published in ( de Kinderen et al . 2009 a ) . The aim of this thesis is to show that customer - supplier interaction is required to semi - automatically reason about the bundling of commercial services . In this chapter , we ﬁrst discuss what a ‘service’ is ( section 2 . 1 ) to establish our interpre - tation of this term for the remainder of this thesis . We require such a discussion because the term ‘service’ means different things to different communities ( Baida et al . 2004 ) . In addition , we argue for a guiding principle in asking the question ‘what is a service ? ’ . We feel that such as principle is needed because more often than not , especially in the information science community , this question is asked without any sense of purpose . We feel that the question ‘what is a service ? ’ is only relevant in the light of the task that is to be accomplished . Next , we discuss literature on customer needs analysis ( section 2 . 2 ) , and literature with a commercial and computational perspective on service bundling ( sections 2 . 3 12 Customer - supplier interaction to reason about bundling commercial services and 2 . 4 respectively ) to show that current theories each contain useful ideas but , on their own , are insufﬁcient for accomplishing our research goal . Finally , section 2 . 5 discusses what features our approach should have and acts as a step - up for the remainder of this thesis . 2 . 1 What is a service ? Services in business literature When scholars with a service marketing background characterize a service , the following aspects occur most often : • Intangibility . As emphasized by Shostack ( 1977 ) , and later by Bitner et al . ( 2008 , p . 5 ) and Lovelock ( 2001 , p . 3 ) , services often have a more or less intangible nature . This is what sets services apart from physical goods , such as a shoe or hammer . • A processual nature . Services are characterized as : ‘ . . . deeds , processes or performances’ by Bitner et al . ( 2008 , p . 5 ) , ‘ . . . . Acts or performances’ by Lovelock ( 2001 , p . 3 ) and as being co - created by customer and supplier ( Gr¨onroos 2007 ) . In other words : They often have a processual nature . For example , a helpdesk - service is a process of inquiry between the helpdesk - employee and customer . A noteworthy addition is that services are sometimes , but not necessarily always , co - produced by customer and supplier . Actions taken by the cus - tomer ( answering questions in the helpdesk - example ) then constitute a vital part of the service production process . Zeithaml et al . ( 1985 ) refer to this as inseparability of production and consumption . • Valuable outcomes . Services often result in valuable outcomes for the cus - tomer . This is reﬂected by Lovelock ( 2001 , p . 3 ) , who characterizes ser - vices as ‘ . . . economic activities that create value and provide beneﬁts for customers’ , by Spohrer et al . ( 2008 ) who characterizes services as ‘The ap - plication of competence ( resources ) for the beneﬁt of another’ and Gr¨onroos ( 2007 , p . 26 - 27 ) and Edvardsson et al . ( 2005 ) who both state that all services provide value , in the form of value in use 1 , for the customer . 1 ( Ramsay 2005 ) and ( Monroe 1990 ) mention two types of value : Value in use , and value in exchange . Value in use , or use value , denotes how an offering is valuable for the customer and , following from this , how much an offering is worth to her . For example , an airplane trip may be What is a service ? 13 It is important to note that the aforementioned points are all characteristics of a service , and that none is by itself a discriminating element in the deﬁnition of a service . This is most certainly true for the valuable outcomes characteristic , which also holds for physical goods . Actually , there is no such thing as the deﬁnition of a service . Most scholars refer to the above characteristics , but use them in different combinations to provide their own interpretation of what a service is . Some emphasize one speciﬁc aspect , such as ‘services are deeds , processes or performances’ Bitner et al . ( 2008 ) while others , most notably Vargo & Lusch ( 2004 ) , will discuss all of the above aspects , state that some - such as intangibility - are outdated , and go on to conclude that everything is a service . For this thesis , we adopt a business science interpretation of the term service . Of particular importance for us are the following aspects : • Services have an intangible nature . This is what makes automated rea - soning about services challenging , compared to physical products . • Services produce valuable outcomes . This provides us with matchmak - ing capabilities with customer needs . We can see that business scholars perceive services from a commercial perspec - tive . However , there is another ( computer science ) interpretation of services that business scholars should be equally aware of , especially when involved in multi - disciplinary research : Services as technical web services . Services in computer science In the web services and semantic web community , web services are considered im - portant . Web services can be described as ‘computational entities that perform a function on behalf of the user’ ( Roman et al . 2005 ) and so , as opposed to com - mercial services , have a technical ﬂavor . Some typical web service topics include interoperability ( e . g . how to make sure that two pieces of software can ‘talk’ to each other ) or fault tolerance ( e . g . how to change a conﬁguration of web - services in case of a malfunction ) . Some computer science scholars treat the term service as a synonym for web ser - vices . They either use the words service and web service interchangeably , or even valuable to a customer because it takes her from Amsterdam to Milan and back . The customer may value this trip as being worth e 200 . Value in exchange , in turn , denotes the actual exchanges of value that take place between actors . For example , our customer may actually pay e 160 to an airliner and in return receive a ticket . 14 Customer - supplier interaction to reason about bundling commercial services solely rely on the word ‘service’ when they actually mean web - service . For ex - ample , consider the following excerpt from Paolucci et al . ( 2002 ) ‘a book - selling service may provide two different functionalities : the ﬁrst one is to allow other services to browse its database to ﬁnd books of interest ; the second one is to allow them to buy the books they found . ’ and another from Baresi et al . ( 2007 ) ‘Providers advertise their services . . . . through registries . . . . . . . New services can be discovered every time a client queries a registry . . . . ’ . Using the terms service and web service interchangeably is not problematic , as long as persons are aware that a different , commercial interpretation of the term also exists . This is also recognized by computer science and information science scholars , such as Baida et al . ( 2004 ) , Roman et al . ( 2005 ) and Preist ( 2004 ) . They make an explicit distinction between business - oriented commercial services and technically ﬂavored web services . For example , Roman et al . ( 2005 , p . 87 ) states that : ‘A WSMO Web service is a computational entity that is able ( by invocation ) to achieve a user’s goal . A service in contrast is the actual value provided by this invocation . ’ Intentionality : The meaning of the term service depends on what is to be ac - complished with it So , what is meant by a ‘service’ is very much dependent upon the community at hand ( Baida et al . 2004 , Preist 2004 ) . The business community consider ser - vices from a commercial perspective : For them business considerations , such as the value provided by a service , are paramount . Computer scientists , on the other hand , consider services more as computational entities , sometimes treating them as a synonym for web services . This difference in interpretation is by itself not problematic . After all , even within communities , it is common practice that an author uses a deﬁnition that ﬁts best with what s / he wants to accomplish 2 . However , to avoid crosstalk it is important for this thesis to ( 1 ) recognize that between disciplines , different interpretations of the term service exist , and to ( 2 ) establish that we use a commercial interpretation of the term service , with a particular emphasis on the characteristics intangibility and valuable outcomes . 2 Following up on this , we argue that intentionality should be leading in any debate on what a service is . In other words : The deﬁnition of what a service is should depend on the problem under consideration . The more absolutist question ‘what is a service ? ’ , as addressed by amongst others ( Ferrario & Guarino 2009 , Vargo & Lusch 2004 ) , is by itself not so useful . See appendix A for a more extensive discussion on this point . Customer needs analysis 15 Problemrecognition Informationsearch Post - purchase Evaluation Purchase Figure 2 . 1 : The Customer Buying Behavior Model , cf . Kotler ( 2000 ) 2 . 2 Customer needs analysis To ensure a needs - driven process , we require an understanding of the steps that a customer usually takes to arrive from the goals that s / he wants to achieve , to the decision to acquire an offering . Marketers provide us with several buying behavior theories that help us understand the main steps that customers use in this process . Most prominent amongst these is the Customer Buying Behavior ( CBB ) model , which we ﬁnd in amongst others ( Kotler 2000 , Solomon 2003 , Loudon & Della - Bitta 1993 ) . The CBB model consists of the ﬁve steps depicted in ﬁgure 2 . 1 : ( 1 ) problem recog - nition , in which the customer becomes aware of a need that is to be satisﬁed ( 2 ) information search , in which the customer seeks out beneﬁts required to satisfy this need ( 3 ) evaluation , in which the customer decides upon the product that max - imizes the desired features and minimizes the negative features ( 4 ) product buying , in which the customer actually buys the product and ﬁnally ( 5 ) the post - purchase phase , in which the customer evaluates the product in use - situations . 3 In this section , we discuss common aspects of techniques that are used in service marketing and requirements engineering literature for translating customer needs into service offerings , using the CBB as a frame of reference . In so doing , we explore what ideas can be adopted for creating an automated needs - driven pro - cess . Following the steps of the Customer Buying Behavior model ( Kotler 2000 , p . 177 - 178 ) , we discuss ( 1 ) separation between problems and solutions , ( 2 ) how a customer seeks out products , and ( 3 ) how products are evaluated by balancing positive and negative service features of a product . 3 Figure 2 . 1 suggests that the customer goes through the CBB steps sequentially . This is however not the case . Depending on the situation in which it used , the CBB model contains feedback loops between steps , and some steps even might be omitted altogether ( Kotler 2000 , p . 179 ) . For example : In the case of habitual buying , such as a pack of salt , the customer can skip the steps ‘information search’ and ‘evaluation of alternatives’ . 16 Customer - supplier interaction to reason about bundling commercial services 2 . 2 . 1 Separation of problem and solution Relevant CBB steps : Problem recognition and information search The Customer Buyer Behavior model sees problem recognition and information search as two separate phases . Thereby , it explicitly separates between need recog - nition and the ﬁnding of a solution that satisﬁes this need . First a customer need emerges , caused by a deviation between the customer’s current and ideal state . This can happen by an alteration of the current state ( e . g . the need for a new car can be initiated by a breakdown of the current car ) or ideal state ( e . g . through the new car of the neighbor ) . Only thereafter , the customer searches for solutions satisfying his need through information search . The separation between problem and solutions is also recognized in the Require - ments Engineering community . Amongst others , we ﬁnd it in the work of Jackson ( 2001 ) and Cross ( 2002 ) . Jackson ( 2001 ) discusses the notion of problem fram - ing . The key idea behind problem framing is to ﬁrst establish a proper perspective on the real world problem that is to be solved , instead of focusing on software as a solution to that problem . This is mainly important for software development projects : Seeing that a piece of software is always used in a real - world situation , it is important to ﬁrst properly analyze this real - world situation . As such , seeing that software is only a means to and end , one may ﬁnd out that a piece of software is not necessary to solve the problem at hand . Cross ( 2002 ) interviewed renowned engineers to see what distinguishes them from average engineers . He concludes that excellent engineers always ﬁrst focus on the problem at hand by ( 1 ) taking a broad perspective on the problem , instead of accepting narrow criteria deﬁned by someone else . For example : When one of the interviewed designers was asked to design a sawing machine , he took his personal experiences with a sawing machine as a starting point . He realized that the sawing mechanism was located in the middle of existing sawing machines , thereby obscuring the space that the user needs to manoeuver the fabric around the needle . From this experience , he deﬁned the problem ”more space around the needle” as a starting point for ﬁguring out a design . ( 2 ) properly framing the problem , in a manner similar to Jackson ( 2001 ) ( only then beyond software as a solution ) . In sum : In customer needs analysis , problems are often separated from solutions . Before a solution is found , a problem should ﬁrst be properly stated . As such , this consideration should also return in our approach . Customer needs analysis 17 2 . 2 . 2 Gradual speciﬁcation of customer need into solutions Relevant CBB step : Information search . Customer needs analysis is often treated as problem speciﬁcation , whereby a goal from the customer is translated into something that is speciﬁc enough to ﬁnd a solution for . The amount of levels required for this speciﬁcation then depends on the level of abstraction of the customer’s goal . Here , one may consider ‘leading a happy life’ as the ultimate abstract goal that needs many levels before a speciﬁc solution can be found , while speciﬁc ones such as ‘communicating with family abroad’ need few abstraction levels . Means - end chaining ( Gutman & Reynolds 1988 , Gutman & Reynolds 1982 ) is a well - known marketing theory in which problem speciﬁcation plays a prominent role . This theory links speciﬁc product attributes , such as ‘minty breath’ from toothpaste , to high - level personal values such ‘sense of belonging’ via interme - diary consequences , such as ‘neat image’ and ‘increase social acceptance’ . This way , consequence ladders of products are created that represent a conceptual map of how a customer group links speciﬁc product attributes to more static high - level values . For minty - breath , the ladder would for example be : ‘minty breath’ ( at - tribute ) - ‘neat image’ ( consequence ) - ‘increase social acceptance’ ( consequence ) - ‘sense of belonging’ ( value ) . Means - end chaining is particularly useful for dis - covering high - level motivations for a customer and is often used for positioning a product . For example , if ‘staying healthy’ is an important personal value for a customer group , then toothpaste would also be positioned differently , with an emphasis on attributes such as ‘calcium’ and consequences such as ‘strengthens teeth’ . ‘Minty breath’ would then not be so relevant . Observe that personal values exhibit a high level of abstraction . Typically , well re - searched lists of human values , such as from Rokeach ( 1973 ) , include relatively un - changing desired states of mind such as ‘happiness’ , ‘social recognition’ or ‘lead - ing an exciting life’ , and relatively unchanging values enabling those desired states such as ‘being independent’ , ‘being intellectual’ or ‘being courageous’ . For study - ing speciﬁc needs , such as ‘getting from Amsterdam to Paris’ this may not always be relevant . Woodruff ( 1997 ) proposes a variant on means - ends chaining theory that can also cope with translating concrete customer goals into speciﬁc product attributes . This variant replaces high - level personal values with the notion of goals that a customer wants to achieve , with consequences and - ultimately - product attributes serving as a means of achieving those goals . This model can be found in ﬁgure 2 . 2 4 . 4 For the sake of completeness : The arrows represent how a customer learns to associate a product 18 Customer - supplier interaction to reason about bundling commercial services Customer’s goals and purposes Desired consequences in use situations Desired product attributes Figure 2 . 2 : Goals , consequences and attributes , adapted from ( Woodruff 1997 ) . Quality Function Deployment ( QFD ) ( Grifﬁn & Hauser 1993 ) is a pen - and - paper product development tool that aims at translating customer concerns - as typically captured by a marketing department - into attributes that a product should have - as typically relevant for engineers . QFD is mainly used for cross - departmental product design . It allows engineers and marketers , and possibly other departments , to communicate about required changes . To this end , QFD ( a ) allows for problem speciﬁcation to translate high - level customer concerns into product attributes , and ( b ) allows for studying the impact that required product attributes have upon other product attributes . To illustrate this , consider the development of a new toothpaste , to be named ‘Jaws’ ( after a gentle Bond - villian ) . First QFD speciﬁes customer concerns into concerns that are speciﬁc enough to ﬁnd product attributes for . For Jaws , a concern such as ‘strong teeth’ can be translated into ‘strengthen enamel’ ( the outmost layer of a tooth ) . Then , these speciﬁed concerns are linked to product features in a matrix , with rows representing customer concerns and columns prod - uct features . For Jaws , ‘strengthen enamel’ can be realized through the attribute ‘calcium carbonate’ . Next , QFD analyses the impact of attributes on each other . with consequences , and goals achieved through those consequences in the post - purchase phase . Con - versely , lessons from use - situations , such as side effects , have an effect on how a customer perceives product attributes . Customer needs analysis 19 Adding ‘calcium carbonate’ to a toothpaste , for example , might have a detrimental effect on the taste or color of a toothpaste , which would then have to be adjusted accordingly ( note here that this is for the sake of example : The author of this thesis is not a toothpaste expert ) . Finally , Goal - Oriented Requirements Engineering ( GORE ) uses problem spec - iﬁcation , only then in the broader sense of goal speciﬁcation . Needs can then be perceived as goals that a customer wants to achieve . Consider i * , a modelling tech - nique that is commonly used in early - phase requirements engineering to analyze the purpose of a solution , such as a piece software , prior to creating it ( Yu 1997 ) . In i * , goals are speciﬁed by means - ends links , that show how the achievement of more speciﬁc goals or tasks contribute to achieving a higher - level goal . Following the example from Yu ( 1997 ) , the goal ‘meeting be scheduled’ can be speciﬁed to by two alternative tasks : ‘Let ( electronic ) scheduler schedule meeting’ and ‘sched - ule meeting manually’ . In sum : Customer needs frameworks mostly perceive needs analysis as needs speciﬁcation . A higher level goal is gradually speciﬁed until it is speciﬁc enough to ﬁnd a product for . 2 . 2 . 3 Customer - supplier interaction : Balancing positive and negative service features Relevant CBB steps : Information search , evaluation of alternatives . After specifying needs and having found appropriate service offerings , the next step is to evaluate what service offering to acquire . While evaluating service of - ferings , a customer seeks to maximize positive features and minimize negative features ( Gutman & Reynolds 1982 ) . In other words : The customer balances the positive and negative features . Solomon ( 2003 ) mentions different heuristics - commonsensical shortcuts - that customers can use to evaluate offerings in terms of their positive and negative fea - tures . Interestingly , not all of these involve fully weighting all positive against all negative features of a service offering . Consider for example the lexicographical rule . With this rule , the customer ﬁrst ranks product attributes according to their importance , after which any product that does not contain important attribute is not bought , irrespective of any other attributes this product might have . For ex - ample : Upon buying a computer , a customer that ﬁnds the feature ‘HD - size = > 120GB’ important , will not consider any computer that has a HD - size < 120 GB , irrespective of other features such as CPU - speed or the amount of internal memory . 20 Customer - supplier interaction to reason about bundling commercial services Thus , in computer science terms , the customer can employ rules of thumb to smartly move through the solution space of product information . Yet , irrespec - tive of what rule is used , a trade - off between positive and negative features is often required . This is emphasized by , amongst others , Woodruff ( 1997 ) who states that customer value is the result of a trade - off between positive and negative service features ; Kotler ( 2000 ) who states that a want for a product is converted into de - mand when the customer is willing and able to pay for it ; and Gutman & Reynolds ( 1982 ) who states that the customer wants to maximize positive consequences and minimize negative consequences . In sum : The customer can employ several reasoning mechanisms to evaluate prod - ucts . Yet , the customer value of an offering depends ultimately on a trade - off be - tween positive and negative service features . Therefore , the balancing of positive and negative features is usually required , irrespective of what speciﬁc reasoning method is used . 2 . 3 Commercial perspective on services bundling 2 . 3 . 1 What is a service bundle ? Service marketers deﬁne bundling as the practice of selling two or more products together in a single package ( Guiltinan 1987 , Stremersch & Tellis 2002 ) . As ex - amples of bundling , Stremersch & Tellis ( 2002 ) mention bundles of ISP - services ( internet access , e - mail hosting , spam ﬁlters etcetera ) , vacation - packages ( trans - portation , plus hotel , plus dinner - arrangements ) and a multimedia - PC ( dvd - player , processor etcetera ) . Observe that bundling is referred to as product bundling : Ser - vices , such as ISP - services , and physical goods , such as a multi - media PC . For this thesis , we focus on bundling services . In particular , the following character - istics are important : ( 1 ) A package of elementary services . A service bundle is a package of one or more elementary services , units of delivery that can be provided on their own commercially ( 2 ) a multi - supplier setting . The elementary services in a bundle can be provided by different enterprises , who each focus on their core competency . 2 . 3 . 2 Reasons for service bundling So what incentives exist for service bundling , for the customer and supplier ? First and foremost , customers often require two or more elementary services to com - pletely satisfy a complex need . This is referred to as complimentariness of services Commercial perspective on services bundling 21 Economides ( 1996 ) or interdependency in demand Guiltinan ( 1987 ) . Services then logically belong together , with an increase in the demand for service A ( e . g . an e - mail hosting service ) also causing an increase in the demand for service B ( e . g . a spam ﬁlter ) . Second , if suppliers provide a package of services , they can often reuse resources such as personnel and administrative services . For the customer , the advantage of this is twofold . First , customers can receive beneﬁts from a bundle of services additional to the beneﬁts of the individual services . Stremersch & Tellis ( 2002 ) refer to this phenomenon as product bundling . Typical examples include the cen - tralized helpdesk ( a single point of contact ) and single bill ( easy overview ) offered in most triple / multi - play service bundles . Second , reusing resources allows sup - pliers to cut costs , that can be passed to the customer in the form of discounts on the bundle price . If services are offered together , the ﬁxed costs that are nor - mally incurred for each service individually can be spread over multiple services , thus leading to lower marginal costs of selling additional products to the customer ( Guiltinan 1987 ) . Bakos & Brynjolfsson ( 2000 ) add that this is especially true for information goods such as online weather reports or news services , that can be replicated with negligible marginal costs and whose costs mainly depend on ﬁxed costs , such as those incurred upon customer acquisition 5 . Offering service bundles at a discount is often referred to as price bundling . ( Kotler 2000 , p . 477 - 478 ) ( Stremersch & Tellis 2002 ) . As explained , these discounts are often due to the cost savings inherent in reusing resources . However , suppliers sometimes also artiﬁcially introduce a discount on a service bundle , on top of actual the cost savings that are a result of reusing resources . With this , we arrive at two purely supplier - oriented motivations for service bundling : Increasing sales and creating entry barriers . First , bundles that are offered at a discount are likely to increase sales ( Kotler 2000 , p . 477 - 478 ) ( Zhu & MacQuarrie 2003 ) . This best illustrated by the software package ‘MS - Ofﬁce’ . Say that there are two customers , A and B . Customer A is willing to pay e 40 for Word , e 10 for Excel and e 25 for Powerpoint . Customer B is willing to e 20 for Word , e 20 for Excel and e 20 for Powerpoint . In case the supplier now tries to maximize his proﬁts by selling these software products individually , he earns e 85 . ( e 40 and e 25 for selling Word and Powerpoint to A , e 20 for selling Excel to B ) . However if the supplier chooses to sell the package at a discounted price of e 60 , he will earn e 120 by selling the total package to both A and B . Thus , by capitalizing on the total willingness to pay , a supplier can provide 5 On a side note : This is not true for all information goods . Copyrighted material , such as music tracks , often requires usage - based payment to the right - owners 22 Customer - supplier interaction to reason about bundling commercial services for a sales increase . Second , selling bundles of services potentially creates barriers for market entrants that can only offer a single product in the bundle ( Zhu & MacQuarrie 2003 , Bakos & Brynjolfsson 2000 ) . Again , this is best illustrated by MS - ofﬁce . Here , the indi - vidual software products Word , Excel and Powerpoint are fully equipped with an elaborate set of fonts , such as helvetica , arial , sans - serif , and typesetting options for these fonts , such as italic and bold - face fonts . In principle , Microsoft could have chosen to offer these font sets as a separate component , for which customers could pay individually . However , this would also have opened up the market to companies specializing in font setting . To prevent competitors for competing on font packages , Microsoft had thus chosen to include this additional functionality already in their product 6 . 2 . 3 . 3 Needs - driven customization of service bundles Traditionally , service bundles are offered as ﬁt - for - all bundles that satisfy often - encountered customer needs . Yet , despite capitalizing on some of the aforemen - tioned advantages of service bundling , ﬁt - for - all service bundles also have one ma - jor disadvantage : That of the possible mismatch between the features desired by the customer and the features provided by the service bundle . For example : Many ﬁt - for - all ISP service bundles contain the feature web hosting , while this is often - times not required . And if a customer does require web hosting , s / he might not be interested in the standard web hosting solution from his ISP , because a specialized web hosting company might be able to provide a more complete package . To mitigate the mismatch between desired and received bundle features , organi - zations more and more disassemble their standardized offerings into their con - stituent parts , and then reassemble these into offerings that ﬁt with speciﬁc cus - tomer needs ( Quinn & Paquette 1990 ) . Normann ( 2000 , pp 166 - 167 ) refers to this as unbundling and rebundling of services : With unbundling , bundles are decom - posed into services that can each be provided on their own commercially . During re - bundling , these services are recomposed to ﬁt with speciﬁc customer needs . 6 An interesting additional motivation is mentioned by Bakos & Brynjolfsson ( 2000 ) . Microsoft could also include elaborate font options by default because of the low marginal costs involved in replicating digital goods . Commercial perspective on services bundling 23 2 . 3 . 4 Creating needs - driven packages of commercial services Service marketing approach to bundling When designing service bundles , ser - vice marketing literature usually separates core services , the actual service of in - terest to the customer , from supplementary services , which are needed to provide the core service and / or act as value - adding extras ( Lovelock 2001 , Normann 2000 ) . For example , for a hotel service ‘having a place to sleep’ is the core service , while a billing service and on - demand movie channel can be considered as supporting supplementary services . Service marketing literature also distinguishes between different types of supple - mentary services . Lovelock ( 2001 ) discusses two types of supplementary services : • Facilitating services , which are necessary for , or are facilitating in , the de - livery of a core service . For our hotel - service , billing could be an example of a facilitating service . • Value - enhancing services . For our hotel - service , the on - demand movie chan - nel is a value - enhancing service . Other authors ( e . g . Gr¨onroos ( 2007 ) ) make similar distinctions between different types of supplementary services , albeit in slightly different phrasing . For example : Where Lovelock ( 2001 ) refers to value - enhancing services , Gr¨onroos ( 2007 ) refers to supporting services . Note that supplementary services are not strictly facilitating or value - enhancing ( to adopt the terminology of Lovelock ) . For example , many providers of multi - play service bundles ( that is : telephony , plus internet , plus television , plus mobile telephony , plus mobile internet . . . . and so on ) pride themselves in placing multiple services on a single bill that provides a quick overview of the ( monthly ) costs . In such a case , this single bill is both facilitating , since it is necessary for the ongoing contract between customer and supplier , and value - enhancing . The above considerations can aid in the design of service bundles , in particular for the unbundling and rebundling of services . This is because they aid in separating a service bundle into its core services and its value - enhancing services . However , services marketing typically lacks formalization . As such , considera - tions from services markiting cannot by themselves be used for semi - automated reasoning about services bundling . In addition , service marketing literature is mostly concerned with the design of a bundle for a single company , while the constituent parts of a bundle might just as well be supplied by different companies , who each use their own core competency ( Tapscott et al . 2000 ) . 24 Customer - supplier interaction to reason about bundling commercial services Serviguration : ( semi - ) Automatically conﬁguring service bundles Servigura - tion ( Baida et al . 2005 , Akkermans et al . 2004 ) aims at conﬁguring bundles of commercial services ( semi - ) automatically . It conceptualizes ideas from estab - lished marketing literature , such as the distinction between supporting and value - enhancing services mentioned in the previous paragraph . In so doing , Servigura - tion enables automated reasoning on the business logic considerations relevant for bundling commercial services . Because of its computational adequacy , serviguration provides a good starting point for our research goal : To arrive at a semi - automated needs - driven bundling process . However , serviguration focuses on supplier - perspective considerations for services . Its customer perspective considerations are fairly rudimentary , in that ( 1 ) it provides a problem speciﬁcation framework that always requires three levels of speciﬁcation , while the number of levels required depends on the complexity of the customer need at hand , and ( 2 ) while it has a concept ‘willingness to pay’ , this concept is never used in the described reasoning process . Thus , the sacriﬁces that a customer has to make to acquire a service bundle are not taken into consideration in the serviguration reasoning process . 2 . 4 Computational perspective on services bundling The web service and semantic web communities ( semi - ) automatically composition complex web services out of more elementary ones ( Sirin et al . 2002 , Verma et al . 2004 ) . On the surface , this seems similar to our research goal of semi - automatically creating bundles of services that satisfy customer needs , especially in the light of e - services - services that are partially or completely provisioned online . This section explores to what extent we can use web services approaches to ser - vice composition . We review two often used approaches : Service composition by workﬂow through syntactic languages such as BPEL and BPSS , and semantically enriched service composition . 2 . 4 . 1 Composition by syntactic workﬂow Syntactic workﬂow languages for web services , such as BPSS ( Andrews et al . 2003 ) and BPEL ( Barreto et al . 2007 ) , take a process - oriented approach towards web service composition ( Ouyang et al . 2007 ) . They employ control ﬂow concepts such as parallelism , branching and sequencing to deﬁne dependencies between web services . Computational perspective on services bundling 25 Process - oriented composition is often required for business processes that rely on successful execution of several web services at different points in the process . Con - sider the example ordering process for a car manufacturer depicted in ﬁgure 2 . 3 . Here , we see that the ordering process requires - amongst others - the activities re - ceive order , check availability , receive payment and shipping the order . Assuming that each is supported by web service technology , we thus require a composition of web services to execute the part ordering process . Syntactic workﬂow languages allow for creating web service compositions in ac - cordance with the control ﬂow of this process . Returning to the ordering process in ﬁgure 2 . 3 , we see the following control ﬂow constructs : • Branching , to represent that an order for a part is only processed under the condition that this part is available . In ﬁgure 2 . 3 , the diamond represents a choice point , while the square brackets [ available ] and [ unavailable ] indicate the conditions for taking a path to further the process ; • Sequencing , to represent that a payment must be received before an order is shipped . Sequencing is represented by an unidirectional arrow between activities ; • Parallelism , to represent that the order of the activities ‘ship part’ and ‘pro - cess payment’ does not matter , as long as both are ﬁnished before the next activity : ‘Send shipment conformation’ . Parallelism is represented by the two horizontal bars in 2 . 3 : One bar for commencement of parallelism ( the fork ) and one bar for stopping parallelism ( the join ) . A key advantage of using workﬂow languages is that processes can be highly au - tomated . In our car part example , checking availability of a part upon receipt of an order can happen without human intervention . On the other hand , workﬂow languages are mostly suited for well - known business processes , for which major changes are unlikely to happen ( Verma et al . 2004 ) . As such , they cannot express more pragmatic considerations relevant for dynamically bundling commercial services . As stated by Verma et al . ( 2004 ) , syntactic work - ﬂow languages composition web services mostly on the level of WSDL interfaces , which describe web services on a syntactic level . That is , WSDL interfaces de - scribe web services in terms of ( lower - level ) supplier - speciﬁc operation names and parameter values . 7 . 7 Verma et al . ( 2004 ) mainly discusses the BPEL4WS language , which has been superseded by WS - BPEL . If we turn to the WS - BPEL speciﬁcation however ( Barreto et al . 2007 ) , we ﬁnd ( on 26 Customer - supplier interaction to reason about bundling commercial services receive order confirm order Notify unavailability receive payment process payment ship part Send shipment conformation [ unavailable ] [ available ] Check part availability Figure 2 . 3 : An example process ( part ordering ) , modelled cf . the UML activity diagram speciﬁcation ( Fowler 2003 ) So , syntactic workﬂow languages seem ill - equipped for our research purposes . We require ( 1 ) translation between needs and services , and ( 2 ) dynamic composition of service bundles according to customer needs , while workﬂow languages seem primarily aimed at ﬁxed business processes , for which all required services are known upfront , described in terms of syntactic WSDL interfaces . 2 . 4 . 2 Semantic web service composition The semantic web community aims for interoperability between web services , such that complex web services can be composed out of elementary ones with a min - imum of human intervention ( Roman et al . 2005 ) . Thus they go one step further than syntactic workﬂow languages such BPEL , where any two web services need to be ‘connected’ manually . To ensure that a complex web service can be composed ( semi - ) automatically , the semantic web community faces two translation problems : ( 1 ) bridging the gap be - page 8 ) that WS - BPEL follows the same design goals of BPEL4WS . BPEL4WS however was never intended for dynamic composition , so seeing that WS - BPEL follows similar design goals , it seems reasonable to assume that dynamic generation of web service compositions is also not the primary goal of WS - BPEL . Computational perspective on services bundling 27 tween a goal from the user and the functionality offered by web services . For example , a user’s goal such as ‘booking a trip’ differs from a s WSDL interface of a trip - booking web service . ( 2 ) to bridge the differences between web services themselves , in terms of different data descriptions and protocols used . For exam - ple , when booking a trip by high speed train from Amsterdam to Montpellier , a web service from the French railway services might refer to a ‘TGV’ while a web service from the Dutch railway services might refer to that same train by ‘HSL’ . OWL - S ( Martin et al . 2005 ) and WSMO ( Roman et al . 2005 ) are two often - used semantic web languages that address both of the abovementioned translation prob - lems . They both add a descriptive layer for web services on top of a service’s syntax description . OWL - S uses the service proﬁle , which allows for advertising a service’s functionality independently of the required WSDL - operations . WSMO provides two mechanisms for describing the semantics of a service : • A WSMO goal . WSMO allows for describing a web service in terms of the end user goals that it can achieve . This is similar to service proﬁle from OWL - S . • WSMO mediators . Mediators are components that resolve semantic mis - matches - on goals , protocols , non - functional properties or otherwise - be - tween two web services . For example , to mediate between the web services’ goals ‘book a trip’ from a travel agency and ‘make a reservation for a trip’ from a railway agency . Additionally , OWL - S and WSMO allow for web services composition by describ - ing how elementary services depend on each other for succesful execution . Service dependencies are then usually represented as planning , a generic type of reasoning behavior commonly referred to as Problem Solving Methods ( PSMs ) . Roughly speaking , this means that service composition for semantic web services hap - pens by expressing their control - ﬂow dependencies . However , contrast to syntactic workﬂow languages , these dependencies exist on a higher abstraction level : They abstract away from what ( supplier - ) speciﬁc web services are used ( we shall return to PSMs in chapters 5 and 6 ) . The additional semantic mechanisms for describing web services seem a good ﬁrst step to dynamic ( semi - ) automated service composition . Yet , as with syntactic workﬂow languages , we still cannot directly adopt them for reasoning about com - mercial services . Although semantic web service languages add a semantic layer for describing web services , the service proﬁle in OWL - S and the notion of a goal in WSMO , they lack in such layers mechanisms for describing commercial ser - vices . For example : Semantic web languages do not express how functionality 28 Customer - supplier interaction to reason about bundling commercial services offered by one service can add value to the functionality offered by another ser - vice . 2 . 4 . 3 Web service composition lacks pragmatic service expressions So far , we have seen that web service composition is realized through syntactic workﬂow languages or by means of semantically enriched web service languages . Each of these approaches builds on individual web services that are syntactically described through WSDL interfaces . So , for service composition we can make a rough division as in ﬁgure 2 . 4 : Syntactically , individual services can be speciﬁed by WSDL interfaces ( e . g . in terms of expected communication protocol , param - eters that need to be passed etcetera ) , which can then be composed together with syntactic workﬂow languages , or by semantically enriched web service composi - tion techniques . However , we cannot express the pragmatic concerns of a web service with current web service composition techniques : Concerns , such as one service adding value to another service , that are relevant for the bundling of commercial services . Yet , since we reason about service bundling from a commercial perspective , we do require a layer for describing the pragmatics of a service , which currently does not exist in the web service and semantic web communities . 2 . 5 Formal reasoning about services bundling So far , we have discussed theories that can contribute to realizing our research goal . Still , none of the approaches is by itself sufﬁcient for achieving our research goal : To semi - automatically perform needs - driven service bundling in a multi - supplier setting . As we argued however , such an approach is interesting to explore further because ( 1 ) regarding needs - driven service bundling , it becomes more common to unbundle generic service bundles and rebundle them to ﬁt with speciﬁc needs ( 2 ) regarding a multi - supplier setting , service offerings are more and more realized by a network of enterprises , and ( 3 ) regarding automation , if a bundle can be offered online , the sales process can also happen online . Before we discuss such an approach in detail however , we establish features that our approach and reasoning process should have . A customer and supplier perspective . As discussed , customers are interested in the value delivered by services , while suppliers are more concerned with the ser - Formal reasoning about services bundling 29 Syntactics Some concerns : Advertising functionality of individual web services Used language : WSDL Semantics Some concerns : facilitating dynamic service compositioning Example : OWL - S , WSMO Pragmatics Some concerns : Translate customer needs to services , core vs . value - enhancing services Example : e 3 - service Syntactic workflow Some concerns : Automating workflows Example : BPSS , BPEL Web service compositioning Figure 2 . 4 : Descriptive layers for web services : Syntactic , syntactic workﬂow , semantic and pragmatic 30 Customer - supplier interaction to reason about bundling commercial services vices themselves . Thus , we require two different views for modelling services : A customer perspective for modelling needs , and a supplier perspective for modelling services knowledge as relevant for suppliers . An interactive reasoning process . We discussed that customer value is the result of a trade - off between the positive features that a customer receives from a service and the negative features the customer has to sacriﬁce to acquire the service . As such , the sacriﬁces for the customer can inﬂuence what service is eventually ac - quired , and what speciﬁc needs are satisﬁed . Assuming that such sacriﬁces are known only fully when service bundles are generated , we require an interaction between the customer and supplier perspective on services to take into account supplier feedback . ( Semi - ) automated reasoning . We construct a theory that allows us to reason about needs - driven service bundling semi - automatically . This requires us to for - malize the reasoning process to the extent that it can be made computational . This requires us to capture the concepts ‘customer need’ and ‘service’ such that they can be made computer - processable . In addition , we require a computational framework to facilitate an interactive reasoning process that uses these computer - processable concepts . Graphical representation . We require a formal approach to service bundling , yet at the same time we want our approach to be easy to understand for practi - tioners . To this end , we employ graphical , lightweight models such as ﬁgure 3 . 8 . Experience has shown that such models serve as a good starting point for commu - nicating with practitioners . 2 . 6 Summary In this chapter , we argued that intentionality should be leading in any discussion on the meaning of the term service . We then established the meaning of a service as relevant for this thesis : That of a commercial service , with an emphasis on intangibility and valuable outcomes . Next , we addressed how a customer usually arrives from a need at buying a service offering that satisﬁes this need . We discussed three key aspects of this process : ( 1 ) separation between problem and solution , ( 2 ) customer needs analysis as problem speciﬁcation and ( 3 ) balancing positive and negative service features . Summary 31 Subsequently , we discussed existing approaches to service bundling from a com - mercial and computational perspective . We have seen that the commercial per - spective provides us with pragmatic guidelines useful for bundling commercial services , such as one service adding value to another service , but generally lacks computational capabilities . The computational perspective , on the other hand , pro - vides computational capabilities , but lacks the pragmatic considerations relevant for bundling commercial services . To achieve the goal of ( semi - ) automatically bundling commercial services , starting from a customer need , we therefore require an approach that takes both a computational and commercial perspective on service bundling . Chapter 3 Consequences as a key concept This chapter introduces the e 3 service ontology and reasoning process . We focus our dis - cussion on consequences , the outcomes of a service that are valuable for the customer . Parts of this chapter have been published earlier : the e 3 service customer perspective ontology and service catalog ( sections 3 . 2 . 2 and 3 . 3 ) in Proceedings of the the Confer - ence on Advanced Information Systems Engineering 2008 ( CAiSE 2008 ) ( de Kinderen & Gordijn 2008 c ) and Hawaiian International Conference on System Sciences 2008 ( HICSS 2008 ) ( de Kinderen & Gordijn 2008 a ) , the e 3 service supplier perspective ontology and service catalog ( section 3 . 2 . 3 and 3 . 4 ) and the bundling reasoning ( section 3 . 5 ) in Proceed - ings of the Requirements Engineering conference 2008 ( RE ’08 ) ( Gordijn et al . 2008 a ) . So far , we argued that none of the methodologies available for service bundling is by itself adequate for fulﬁlling our research goal : To ( semi - ) automatically gener - ate multi - supplier service bundles based upon customer needs . On the one hand , in marketing there exist useful theories on what commercial services are and how to analyze customer needs , but these theories are insufﬁciently formalized to be made computational . Computer science literature , on the other hand , contains no - tions that allow for formalization of services knowledge , but insufﬁciently empha - sizes what services knowledge to formalize . So : marketing emphasizes a soft per - spective on services bundling but lacks formal theories , whereas computer science emphasizes a hard , formal perspective on services bundling but lacks substantive content theories . In this chapter , we introduce a method that allows us to reason formally about relating customer needs to service bundles : e 3 service . In this chapter we focus our discussion on the the aspect of consequences being a key concept in needs - driven 34 Consequences as a key concept services bundling , whereas in chapter 6 we focus on interaction being key in the reasoning process . This chapter is structured as follows . In section 3 . 1 , we introduce ontologies and how they are relevant to our research . Section 3 . 2 discusses the e 3 service ontolo - gies . Subsequently , section 3 . 3 and 3 . 4 show how these ontologies can be used to develop service catalogues . In section 3 . 5 , we show the bundling reasoning that can be perfomed with catalogues of services knowledge . Finally , in section 3 . 6 , we discuss a software tool that provides computationally support on the development of the e 3 service service catalogues . 3 . 1 Positioning of the e 3 service ontologies 3 . 1 . 1 Ontologies for shared understanding and formal reasoning The term ontology ( Greek for the study of being ) originates from philosophy and encompasses anything related to the study of what exists , or is assumed to exist . For our purposes , we limit ourselves to a computer science interpretation of an ontology ( adapted from ( Borst 1997 ) ) : ‘an explicit formal speciﬁcation of a shared conceptualization’ . This deﬁnition highlights two aspects of an ontology that are important for our research : 1 . A formal speciﬁcation , which we require because we want to reason about bundling services ( semi - ) automatically , and ; 2 . The shared conceptualization ; we want to reason about service bundling in a networked enterprise , meaning that it is imperative that every organization in this network talks about the same concepts to avoid mismatches . In other words : A shared understanding , an aspect of ontologies also emphasized by ( Uschold & Gruninger 2009 , p . 2 – 3 ) , must be present amongst the partici - pating companies for a network of enterprises to succeed . This is important since without such a shared understanding , an organization in a networked enterprise could , for example , interpret the concept of a service as a purely technical web - service , while others could interpret it as a purely commercial service . So , what we aim for with an ontology is that ( 1 ) partners that want to participate in offering part of a service bundle have a common vocabulary for uniformally ex - pressing their services knowledge , and ( 2 ) that the relevant services concepts and Positioning of the e 3 service ontologies 35 the relationships between them are captured formally , to enable automated reason - ing with instantiations of these concepts made by partners that want to participate in a service offering . 3 . 1 . 2 Formal conceptualization of established business literature As a foundation for developing our ontologies , we rely on established business research literature . By so doing , we ensure that our ontologies are grounded in established and , presumably , well - researched theories . In addition , relying on well - established literature prevents us from having to reinvent the wheel , so that we do not have to invent concepts for our ontology from scratch . Below , we discuss how we conceptualize theories from business literature , using the development of an ontology of customer needs as a running example ( see sec - tion 3 . 2 . 2 for the resulting ontology ) . We ﬁrst search for seminal , important the - ories on a particular topic by means of discussions with business scholars , or by querying electronic libraries of marketing papers and focusing on those papers that are cited most often . For our needs ontology , we thus ﬁnd ‘need , want , demand’ by Kotler ( 2000 ) and Arndt ( 1978 ) , means - end chaining by Gutman & Reynolds ( 1982 ) , and Quality Function Deployment ( QFD ) by Grifﬁn & Hauser ( 1993 ) . Next , we distil the key concepts from the found theories . For our customer needs example , we thus ﬁnd that : • Need , want and demand speciﬁes a problem from the customer into a speciﬁc solution that the customer is able and willing to pay for ; • Means - end chaining captures how a customer reasons about ﬁnding a spe - ciﬁc product as a solution for a high - level problem ; • QFD translates a high - level statement from the customer , called ‘the voice of the customer’ , into something that is speciﬁc enough to ﬁnd product features for . Subsequently , we observe commonalities between the distilled concepts . We ﬁnd that the most important commonality between the mentioned theories for customer needs analysis is actually problem speciﬁcation . So : Problem speciﬁcation should also be part of the ontology of customer needs . Finally , we base our ontology on the commonalities of the distilled concepts . 36 Consequences as a key concept 3 . 2 The e 3 service ontologies 3 . 2 . 1 A supplier and customer perspective ontology As in the work of Baida et al . ( 2005 ) , we create two ontologies : One for capturing the customer’s perspective on services , and one for capturing the supplier’s per - spective on services . We do so because these actors have a different worldview , and therefore a differing presupposition of what things they assume to be relevant and true in this view . In other words : We require two different ontologies , because the ontological commitment of customers and suppliers is different . First and foremost , customers are not concerned with a service itself , but with its valuable outcomes ( Gr¨onroos 2007 , Grifﬁn & Hauser 1993 ) . For example : A cus - tomer may be interested in having an e - mailing capability , not that s / he acquires an e - mail service from KPN , nor that this service relies on a billing service ( the latter being typical supplier concerns ) . As a result , customers and suppliers also have different knowledge about services . Following the means - ends chaining the - ory ( ﬁgure 2 . 2 ) , customers mainly learn about services in terms of their valuable outcomes and how these help them to achieve their goals . They are less concerned with supplier - oriented concerns , such as what supporting services are required to actually keep a service up - and - running . In line with Finkelstein et al . ( 1992 ) , we therefore create two different viewpoints on the same phenomenon , that account for these differences in - amongst others - concerns and expertise : A customer and supplier perspective on services . 3 . 2 . 2 The customer perspective ontology The customer perspective ontology concentrates on modeling concepts that repre - sent how a customer yields value from acquiring a service bundle . This section is organized by clustering the concepts in the ontology as follows : ( 1 ) needs , wants and demands ( 2 ) beneﬁts , consequences , and value derivations , and ( 3 ) dependencies between want / consequence pairs . We shall explain each cluster by focusing on a part of the ontology , and so work towards the complete customer perspective ontology in ﬁgure 3 . 4 . The ontology is based on concepts from estab - lished customer needs literature . Most notably , see ( Arndt 1978 , Kotler 2000 ) for a discussion on needs wants and demands , ( Gutman & Reynolds 1982 , Woodruff 1997 , Gutman & Reynolds 1988 ) for a discussion on means - end chaining and ( Holbrook 1999 ) for a discussion on the different ways in which a product / service can be valuable . The e 3 service ontologies 37 1… * 1… * problem / solution 1… * 0… * 1 1 concretizes alternative partial concretized by demand want functional need Figure 3 . 1 : Needs , wants and demands The need / want / demand - hierarchy . Figure 3 . 1 shows a formal conceptualiza - tion of the need / want / demand hierarchy . The need / want / demand hierarchy empha - sizes a gradual transition from a need - a problem statement - to a set of services that together provide a solution for that need , called a demand ( see ( Arndt 1978 ) and ( Kotler 2000 ) ) . For the e 3 service ontology , this results in the following con - cepts . Functional need . A functional need is the point of departure for the customer and represents a problem statement or goal , independently from a solution direction ( Arndt 1978 ) . EXAMPLE : A customer may have a need to ‘communicate with family abroad’ . This need does not include a notion of a solution yet , as nothing is stated about how the communication will be done . Want . A need ( problem ) can usually be covered by multiple alternative wants ( solutions ) ( Arndt 1978 ) . In doing so , a want does not indicate a speciﬁc ( named ) supplier satisfying the stated need yet . Thereby , we explicitly separate the ﬁnding of a general solution for a need ( a want ) , from ﬁnding a speciﬁc supplier doing so ( a demand ) . A need may require multiple wants that each satisfy a need partly , but together do so completely . The separation of problem and solutions is important to avoid that we overlook alternative wants ( solutions ) for needs ( problems ) . However , as a want indicates a solution available in the market , at least one supplier should be willing to provide the solution . EXAMPLE : The want ‘e - mail hosting’ is a possible solution for satisfying the need ‘communicating with family abroad’ . Problem / solution pair . A want is a ( partial ) solution for a functional need , which is stated by a problem / solution pair . Problem / solution pairs can be related to each other to state that ( 1 ) they are alternatives for each other , or ( 2 ) together they form a complete solution for a problem . 38 Consequences as a key concept 1… * 1… * consequence efficiency excellence status … . 1 1 1… * 1… * value derivation benefit range benefit Figure 3 . 2 : Beneﬁts , beneﬁt ranges , value derivations and consequences EXAMPLE : ‘e - mail hosting’ and ‘instant messaging’ are alternative wants for sat - isfying the need ‘communicating with family abroad’ . ‘E - mail hosting’ plus ‘IP - connectivity’ exemplify partial problem / solution pairs , which together satisfy the need ‘communicating with family abroad’ . Demand . A demand is a supplier - speciﬁc service for which the customer is willing and able to pay . We use a strict distinction between wants and demands , because they refer to two different steps in our process of customer needs elicitation . First , the customer chooses a service independently of supplier - speciﬁc characteristics by focusing on the features s / he desires from that service ( to be detailed in the next paragraph ) . So , the customer ﬁrst considers a want . Only thereafter does the customer take supplier - speciﬁc service features into account such as a price to be paid for a service , customer lock - in and more . Relations . • A demand concretizes one or more wants . EXAMPLE : ‘Gmail’ ( from Google ) is a demand that concretizes the want ‘e - mail hosting’ . As a supplier - speciﬁc service , ‘ G - mail’ has the constraint ‘advertisement exposure’ . Beneﬁts , consequences and value derivations Figure 3 . 2 presents the section of the ontology that is based on concepts from means - end chaining ( Gutman & Reynolds 1982 , Gutman & Reynolds 1988 ) . Beneﬁt range and beneﬁts . Beneﬁts describe properties that are of economic value to the customer in terms of value - in - use ( Ramsay 2005 ) . In other words , The e 3 service ontologies 39 beneﬁts provide an increase of economic utility to the customer , through some - thing functional , social ( e . g . status ) or otherwise . A beneﬁt is also used to connect demands , as needed by the customer , to services , as provided by the supplier . Of - ten , there is a mismatch between the set of beneﬁts as contained by a customer demand , and the set of beneﬁts as contained by a supplied service . In our work , we assume that the customer and the supplier use the same terminology to represent the customer / supplier beneﬁt itself , so ontologically , these beneﬁts are the same ( although speciﬁc values may differ obviously ) . Reasoning about a match between a found customer demand and available supplier e - services , is then about ﬁnding a multi - supplier e - service bundle with a set of beneﬁts , that is closest to the required set of beneﬁts as contained by the customer demand . A beneﬁt range is a more general construct , which speciﬁes a range of values a beneﬁt may have . Relations . • A want has one or more beneﬁt ranges . Since a want exists independently of a speciﬁc supplier , beneﬁts on the want - level do not possess supplier - speciﬁc values . Instead , beneﬁts on the want level have a range of possible values , within which a supplier - speciﬁc beneﬁt could fall . EXAMPLE : A want ‘e - mail hosting’ with the beneﬁt range ‘mailbox size = 0 . 5GB - 3GB’ . • A demand has one or more beneﬁts . Since a demand is speciﬁc for a supplier , beneﬁts of a demand have supplier - speciﬁc properties . EXAMPLE : The demand ‘G - mail’ has the beneﬁt ‘mailbox size = 2 . 6 GB’ . • A beneﬁt is for one beneﬁt range , and a range can have multiple beneﬁts that fall - in the beneﬁt range . EXAMPLE : The beneﬁt ‘mailbox size = 2 . 6 GB’ is for the beneﬁt range ‘0 . 5GB - 3GB’ . Consequence . A consequence represents the subjective added value for the end - customer if s / he consumes a beneﬁt ( falling into a certain beneﬁt range ) . Deriving consequences from beneﬁts is based upon the laddering - technique from means - end chaining ( Gutman & Reynolds 1988 ) . This entails that consequences are elicited by asking the question ‘what happens if we consume service X in which beneﬁt Y is contained ? ’ . Relations . • A beneﬁt range has one or more consequences . 40 Consequences as a key concept 1… * dependent consequence Core / Enhancing adds value OptionalBundling dependency … . 0… * 1 1… * 1… * dependee 1… * 1 0… * want Figure 3 . 3 : Dependencies between pairs of wants / consequences EXAMPLE : The beneﬁt range ‘0 . 5GB - 3GB’ has the consequence ‘large mail - box’ . Value derivation . We reify the relation between ‘beneﬁt range’ and ‘consequence’ by introducing the concept of value derivation . While eliciting a service catalogue , we reason about value derivation as a result of consuming a certain beneﬁt , by using a customer value framework presented by Holbrook et al ( Holbrook 1999 ) . This framework , which originates from the ﬁeld of axiology , is used to explain how end - customers derive value while consuming a product / service . Note that a framework as proposed by Holbrook serves as a ‘plug - in’ . In case of business - to - business services , value derivation will be done entirely differently , and so other frameworks should be used . EXAMPLE : The beneﬁt ‘customized domain’ from an e - mail service , can be anno - tated with the value derivation ‘status’ , resulting in the consequence of ‘enhancing status through personalized e - mail address’ . Dependencies between want / consequence pairs . Figure 3 . 3 concentrates on the part of the customer perspective ontology that represents dependencies between pairs of wants and consequences . The notion of service dependencies ( see ( Baida et al . 2005 ) ) indicates that services may depend on each other . For instance , a service can serve as an option for another service , or a service may exclude meaningful consumption of another service . In ( Baida et al . 2005 ) , this relation has only been investigated from a supplier per - spective ; e . g . a paid e - mail service cannot be delivered without a billing service . We have found that such dependencies can also exist from a customer perspective ; The e 3 service ontologies 41 e . g . a spam ﬁlter adds value for the customer if it is bundled with an e - mail hosting service . Adds value and dependency . As beneﬁts of wants have economic value con - sequences for the customer , the wants themselves also have consequences . In e 3 service , this is represented as a reiﬁed ‘adds - value’ relationship between one want and one consequence . Note here that we explicity chose to relate pairs of wants and consequences instead of only consequences , because wants package consequences as available on the marketplace . We have found two speciﬁc kinds of dependencies , which may exist between two or more ‘adds value’ relations ( so between want / consequence pairs ) . 1 . In a ‘Core / Enhancing’ ( C / E ) dependency , a want / consequence pair B pro - vides added value if bundled with a want / consequence pair A . Pair B cannot be acquired independently from A . 2 . In a ‘Optional Bundling’ ( OB ) dependency , a want / consequence pair B adds value to a want / consequence A . Yet , in case of an OB relation , A and B can also be acquired separately . These dependencies may exist between multiple want / consequence pairs ( ‘adds value’ ) , as shown by the concept dependency in the e 3 service ontology . Relations . • An ‘adds value’ relationship contains a single want and a single conse - quence . This pair represents a commercially feasible offering , plus part of the subjective value gained from consuming a beneﬁt contained within this offering . EXAMPLE : The adds - value pairs { e - mail hosting ( want ) , send and receive e - mail ( consequence ) } and { spam ﬁlter ( want ) , reduce unwanted e - mails’ } . • ‘Adds value’ is a dependent or dependee of zero or more other adds value relationships , via the ‘dependency’ concept . EXAMPLE : The adds - value pair { spam ﬁlter ( want ) , reduce unwanted e - mails ( consequence ) } is in a Core / Enhancing dependency with the adds - value pair { e - mail hosting ( want ) , send and receive e - mail ( consequence ) } . Here , the want spam ﬁlter represents the type of solution that adds value to the want e - mail , whereas the consequence reduce unwanted e - mails from the want spam ﬁlter states why this type of solution is valuable . Note that 42 Consequences as a key concept demand functional need want concretizes 1… * 1… * 1… * 1… * has 1… * benefit dependent benefit range consequence 1… * 1… * for Core / Enhancing 1 . . * adds value OptionalBundling dependency problem / solution alternative partial 1… * 0… * 1 1 value derivation efficiency excellence status … . 1 1… * for 1 … . 0… * 1 1… * 1… * for dependee 1… * 1… * 1… * 1 0… * concretized by has has Figure 3 . 4 : The e 3 service customer perspective ontology a Core / Enhancing relationship is present , because an acquisition of a spam - ﬁlter only makes sense in combination with an e - mail service . Summary : The customer perspective ontology Figure 3 . 4 presents the com - plete e 3 service customer perspective ontology . The key concepts in this ontology are : • Needs , wants and demands , to represent the transition from a need to a ser - vice offering ; • Consequences , to represent the valuable features of a service that are of in - terest to the customer and ﬁnally ; • Dependencies between consequences , to represent valuable combinations of consequences ( valuable features ) . 3 . 2 . 3 The supplier perspective ontology We adopt the supply - side ontology from ( Baida et al . 2005 ) to model services from a supplier perspective . This ontology is depicted in ﬁgure 3 . 5 . Since this earlier The e 3 service ontologies 43 Service element Starts at Ends at 0 . . * 0 . . * Dependee of Dependent on 1 . . * 1 . . * Service object has 1 0… * resource Benefit Service interface Service port Service dependency Has 1… * 1 C / S BU EX OB . . . 1 1… * 1… * 1 incoming outgoing Figure 3 . 5 : The e 3 service supplier perspective ontology work discusses this ontology already extensively , we limit ourselves to discussing those concepts / ideas that are relevant for understanding the discussions in subse - quent sections . Service element . A service element is a product that is commercially offered by a speciﬁc supplier within a market environment . EXAMPLE : In ﬁgure 3 . 6 , ‘internet access’ is a service element provided by the supplier KPN . Resource . Service elements produce objects of value for customers and require inputs to produce these objects . Collectively , these valuable objects and inputs are refered to as resources . Amongst others , resources can be monetary , provide a capability or be experiential . EXAMPLE : the service element IP - access from KPN requires the monetary re - source ‘MONEY’ as input , and produces the capability resource ‘data communi - cation’ . 44 Consequences as a key concept BU C / E Actor Resource Service interface Service port Consequence Service element Service dependency Figure 3 . 6 : Example of supplier perspective service catalogue The e 3 service ontologies 45 Beneﬁt . A service property expresses attributes and attribute values of service elements and / or resources . A service property is always part of a resource or service element : It cannot be provisioned on its own right . Relations : • A beneﬁt is part of zero or more resources , via the concept ‘Design element’ . • A beneﬁt is part of zero or more service elements , via the concept ‘Design element’ . EXAMPLE : the resource data communication has the service properties ‘upload : 512 kb / s’ and ‘download : 2048 kb / s’ . Service object . A service object is a supertype of the concepts ‘Resource’ and ‘Service element’ . It alllows for the assignment of beneﬁts to both these concepts . Service port . Resources are provided or consumed by service elements via ser - vice ports , represented as arrowheads in ﬁgure 3 . 6 . Basically , they are a means of abstracting away from the inner workings of a service element so that one can focus on modelling the ( valuable ) inputs and outputs of a service element . We distinguish between incoming and outgoing service ports : Resources that are re - quired as input for a service element are attached to an incoming service port of that element , whereas resources that are produced as output of a service element are attached to an outgoing port of that element . EXAMPLE : the resource ‘MONEY’ is required input for the service element ‘in - ternet access’ , thus attached to an incoming service port . The resource ‘data com - munication’ is provided by the service element ‘internet access’ , thus it is attached to an outgoing service port . Service interface . A service interface states that all resources attached to the service ports in this interface must be exchanged , or none at all . EXAMPLE : For the service element ‘internet access’ , a customer will only receive the beneﬁt data communication in exchange for money . 46 Consequences as a key concept Service dependency . Service dependencies are used to model dependencies be - tween service elements . These dependencies are unidirectional , meaning that the dependency between services A and B exists independently of that between B and A . Based upon a literature study , Baida et al . ( 2005 ) identiﬁed the following service dependencies ( where S 1 and S 2 denote service elements ) : • S 1 is in a Bundled dependency with S 2 if S 1 is not provided separately from S 2 for commercial reasons . In literature , this is refered to as pure product bundling ( Stremersch & Tellis 2002 ) . Notation : BU . EXAMPLE : Figure 3 . 6 shows a bundled dependency between ‘VoIP’ from KPN and ‘internet access’ from KPN to indicate that when you acquire VoIP from KPN , you must also acquire Internet access from KPN . Note here that Internet access can be acquired independently from VoIP . This emphasizes that BU is a unidirectional relationship . • S 1 is in a Core / Supporting dependency with S 2 if S 1 cannot be provided ( for technical or legal reasons ) without also providing S 2 . The supporting service can be supplied by the same supplier as the supplier of the core service , but another case is that the supporting service is supplied by someone else . Notation : C / S . EXAMPLE : VoIP from Skype is in a Core / Supporting relationship with an IP - access service that provides basic IP - connectivity . Note here that IP - access is required for technical reasons , not commercial . • S 1 is in a Core / Enhancing relationship with S 2 if ( 1 ) S 2 possibly adds value to S 1 , ( 2 ) acquisition of S 1 is obligatory for acquisition of S 2 and ( 3 ) S 1 can be acquired separately from S 2 . Notation : C / E . EXAMPLE : Figure 3 . 6 shows a core / enhancing relationship between internet access from KPN and VoIP from KPN . This relationship indicates that if IP - access from KPN is acquired , VoIP from KPN would also be an interesting option . Yet , KPN does not offer its VoIP service separately from its IP - access service . • S 1 is in a Optionally Bundled relationship with S 2 when ( 1 ) S 2 possibly adds value to S 1 and ( 2 ) S 1 and S 2 can be acquired separately . Note here that , as opposed to the C / E relationship , S 1 does not have to be acquired before S 2 can be acquired . Notation : OB . EXAMPLE : KPN offers digital television in combination with its VoIP ser - vice , and provides a discount to the customer if s / he acquires both services . Creating a customer perspective service catalogue 47 However , digital television from KPN can also be acquired separately from its VoIP service . • S 1 excludes S 2 if the supplier of S 1 prevents the customer to consume S 2 , for example because S 2 is offered by a competitor , or because joint consumption is legally prohibited . Notation : EX . EXAMPLE : Most mobile service providers that offer 3G internet access ex - clude the usage of skype - services , because skype constitutes a loss of income for their own telecom services . 3 . 2 . 4 Using Service catalogues to hide the complexity of the e 3 service ontologies The customer and supplier perspective ontologies provide a formal conceptualiza - tion of service marketing theory , such that we can reason computationally about the bundling of commercial services . We shall discuss this reasoning at length in chapter 6 . In addition to creating a computational process however , we also need ensure the practical validity of the domain - speciﬁc knowledge that we capture in our ontolo - gies . This requires us to represent this knowledge such that it is ﬁt for discussion with ( non - technical ) domain experts . To this end , we publish services in service catalogues , graphical conceptual models ( see e . g . ﬁgure 3 . 6 ) that are easy to un - derstand for persons with a business background . These catalogues hide the under - lying complexity of using an ontology . Yet at the same time , they are instantiations of the e 3 service customer and supplier perspective ontologies , to enable the shared formal conceptualization and formal reasoning discussed in section 3 . 1 . In this manner , we use service catalogues to facilitate the discussion with non - technical ( business ) domain experts while , ‘under water’ , we still capture services such that they are ﬁt for computational reasoning . Next , we discuss a step - wise creation of service catalogues based on the e 3 service ontologies . In line with the two perspectives , we discuss the creation of a customer and supplier perspective services catalogue . 3 . 3 Creating a customer perspective service catalogue We now show how to create a customer perspective service catalogue that is based on the customer perspective ontology discussed in section 3 . 2 . 2 . This catalogue is 48 Consequences as a key concept created for customers interested in communicating over a distance ( e . g . abroad ) and that employ ICT services as a means for doing so . 3 . 3 . 1 Elicit service suppliers and the offered elementary services The aim of this step is to get a list of ICT services of the service supplier ( s ) , in this case KPN . We do this by eliciting the ICT services that KPN offers to its end - customers . From KPN , we found ﬁve ICT services : ( 1 ) VoIP , ( 2 ) IP - connectivity , ( 3 ) homepage capability , ( 4 ) e - mail , and ( 5 ) spam ﬁlter . In this case study , we performed this elicition by constructing an initial service catalogue based upon documentation received from KPN . For validation of the initial service catalogue , we then held a feedback session with an enterprise architect from KPN . However , the found services from KPN could have equally well been provided by separate enterprises . Each enterprise then focuses on his / her core competencies . In the case study , we also considered separate organizations that provide services similar to KPN . We did this to illustrate how we make a distinction between two wants that at ﬁrst appear similar . We do not show these alternative services in this step . Instead , we include the services and the beneﬁts we found , while considering a multi - enterprise setting , directly in the service catalogue as discussed in the next section . 3 . 3 . 2 Formalizing ICT services from a customer perspective We build up the service catalogue in a bottom - up fashion ; we take the services and their suppliers found as a starting point and , on the basis of these , elicit the needs , wants and demands they cover , as well as beneﬁts . Populate the service catalogue with demands and ﬁnd the beneﬁts contained within them The ﬁrst step is to populate the service catalogue with the services . These services are actually similar to demands , since they are the services as pro - visioned by the speciﬁc suppliers . Next , we add the beneﬁts as contained in the demands . Beneﬁts are elicited by reviewing the speciﬁc properties of a service that provide the end - customer with more value in use . For instance , the property of web - based e - mail access is a beneﬁt because it allows a customer to access mail at any site , without having to install a separate mail - client . Creating a customer perspective service catalogue 49 Need Want Demand KPN Voice consumer VoIP # phone numbers : < = 2 Number recognition XS4all VoIP Location : location - independent # phone numbers : = > 1 Number recognition Microsoft Instant messsaging Location : location - independent Communication : in writing Communication : oral Communication : oral VoIP Instant messaging capability Communication : in writing Location : location - independent Location : location - independent Communication : oral # phone numbers = > 1 Caller - ID Avoid unwanted conversations [ efficiency ] Number recognition Communicatedirectly Hear voice during conversation [ excellence ] Get message across directly [ efficiency ] Make > 1 calls simultanuously [ efficiency ] Get message across directly [ efficiency ] Use at any site w / connectivity [ efficiency ] Use at any site w / connectivity [ efficiency ] Communication : { oral in writing } # phone numbers : < = 2 Microsoft ID Microsoft ID Legend Supplier Consequence [ value derivation ] Benefit need want demand Number portation Number portation Number portation Number portation Number portation Number portation Keep current phone number [ efficiency ] C / E Adds value Avoid unwanted conversations [ efficiency ] XOR Send and receive text [ excellence ] Skype VoIP Communication : oral , in writing Caller - ID Text and voice communication [ excellence ] Figure 3 . 7 : A partial e - service catalogue for the need ‘communicating with family abroad’ 50 Consequences as a key concept For example , ‘ # phone number < = 2‘ , ‘ communication : oral’ and ‘number recogni - tion’ are all beneﬁts from KPN’s VoIP service . These beneﬁts again illustrate that a demand is not the same as a beneﬁt , since beneﬁts such as ‘ # phone number < = 2’ cannot be viably delivered on their own . The resulting explication of beneﬁts and the demands that contain them , can be found in ﬁgure 3 . 7 . Derive wants On the basis of the demands , we elicit wants . We ﬁrst abstract away from the speciﬁc values that the suppliers give to their beneﬁts . So , for in - stance , in the case of a customized domain we abstract away from the supplier - speciﬁc property of providing the customer with a personalized e - mail address that ends with ‘ . nl’ . After having made this abstraction , the services that contain these beneﬁts become the wants . If there are multiple similar services available from multiple suppliers , there will be a merge of these multiple services into a single want . For instance , a demand ‘VoIP’ as provisioned by the speciﬁc suppliers KPN and Skype becomes a want ‘VoIP’ , independently of these suppliers . This single want will then also inherit the beneﬁts from these different service objects . To il - lustrate this , consider the want ‘VoIP’ in ﬁgure 3 . 7 . This want contains not only the beneﬁts from KPN’s VoIP service , but also the beneﬁts from a different supplier , namely Skype . Using consequences to show how beneﬁts contribute to satisfying a functional need Next , we derive the consequences from the beneﬁts by asking the question : ‘What happens when we consume a service in which this beneﬁt is contained ? ’ . As mentioned in section 3 . 3 , we use the value derivation framework from Holbrook to aid us in this process . To illustrate , take the beneﬁt ‘communication : oral’ from our VoIP service modeled in ﬁgure 3 . 7 . By using the value derivation ‘efﬁciency’ from Holbrook , we can state that this beneﬁt results in the purely functional conseqeunce ‘Hear voice during conversation’ . By using the consequences we can now derive a set of needs . We do this by con - sidering the goal that is achieved through a consequence . The process of ﬁnding needs for consequences is based on the process of laddering , refered to earlier in 3 . 2 . 2 . Here , the idea is to ask the question why possessing a certain capability is valuable . For example , the capability represented by the consequence ‘get mes - sage across directly’ from the KPN VoIP - service enables satisfaction of the need ‘communicate directly’ . Create a supplier perspective catalogue of ICT services 51 Deﬁne relationships between wants Now that we have deﬁned both the wants and the consequences , we can deﬁne the ‘adds value’ relationships that exist be - tween wants . In the case study , this relationship can be illustrated by the C / E dependency that exists between the wants ‘e - mail hosting’ and ‘spam ﬁlter’ . This dependency has already been discussed in our customer perspective ontology ( sec - tion 3 . 2 . 2 ) ; therefore , we sufﬁce with a short summary . A spam ﬁlter could , from a customer perspective , add value to an e - mail hosting service , where the con - sequence of one of the beneﬁts in the spam ﬁlter service - ‘increase in relevant e - mails’ - indicates why it can add value to the e - mail hosting service . 3 . 4 Create a supplier perspective catalogue of ICT ser - vices We explain how to step - wise create a supplier perspective service catalogue , using the supplier perspective ontology from section 3 . 2 . 3 . We use the multi - supplier supplier - perspective service catalogues from ﬁgure 3 . 8 for illustration . Inventory supplier - speciﬁc services First the individual , supplier - speciﬁc ser - vices elements are modelled . Here , commercial feasibility is the criterion to model something as a service element . We model the service elements as rounded boxes , and the suppliers as rectangels around the service elements . For reference with respect to the visualization of the service catalogue concepts , see the legend from ﬁgure 3 . 6 . EXAMPLE : VoIP from KPN is modelled as a service element because it is com - mercially feasible to be provisioned on its own . A property of VoIP from KPN , such as the number of phone numbers , would not be modelled as a service element because it cannot be provisioned commercially on its own right . It is always part of the VoIP service from KPN . Identify resources and service properties In this step , we identify the resources that are produced by a service element , and the resources required as input for a service element . Additionaly , service properties are identiﬁed . As pointed out in 3 . 2 . 3 , service properties can be part of resources or service elements . EXAMPLE : We identify the capability resource ‘Synchronous voice communica - tion’ as a , for the customer , valuable outcome of the VoIP service from Skype . ‘Latency < = 50 ms . ’ is a service property from this resource that expresses the 52 Consequences as a key concept C / S EX NOT KPN EX NOT KPN OB OB EX NOT KPN C / S C / S Figure 3 . 8 : Partial service catalogues of three suppliers Reasoning about needs - driven service bundling 53 maximum latency for this VoIP service . The resource Money is required as an in - put resource for the VoIP service . The service property ‘ e 20 , - ’ expresses the exact amount of money to be paid 1 . Model service dependencies Next , we model the dependencies between the in - dividual services identiﬁed in step 1 . To this end , we employ the service depen - dencies discussed in 3 . 2 . 3 . EXAMPLE : The relationship EX NOT KPN { VoIP ( KPN ) , Number portation ( KPN ) } expresses that the service element VoIP ( KPN ) is only provided with the service element Number portation ( KPN ) . Combining the service element VoIP ( KPN ) with a number portation service from any other supplier , such as Number portation ( XS4All ) , is not possible . 3 . 5 Reasoning about needs - driven service bundling We now show that we can reason with the previously discussed catalogues of ser - vice knowledge . We explain each of the reasoning steps from ﬁgure 3 . 9 . For illustration purposes , we use a simpliﬁed scenario an average 2 . 4 household , that wants to communicate with family abroad but ﬁnds that using a traditional phone is too expensive . Figure 3 . 7 shows the catalogue for this prototypical example . Step 1 : Select need , derive initial set of wants satisfying need In the e - service catalogue , we ﬁrst traverse from a need to ( alternative ) wants that can ( partly ) satisfy this need . Case : We assume that the customer starts at the need ‘communicate directly’ since this need - deﬁnition comes closest to the need ‘communicating with family abroad’ . By traversing from this need to the want - level , we thus ﬁnd the initial , alternative , set of wants { VoIP , instant messaging } , because both can satisfy the need ‘com - municate directly’ . Outcome of step : The set of alternative wants { VoIP , instant messaging } . Step 2 : Find consequences , and request the customer to score these conse - quences In the second step , we ask the customer to prioritize the consequences of wants found so far . We do so because , as stated in 3 . 2 . 1 , customers are not really interested in a service itself , but in the value that a service has for them . 1 We elaborate on representing prices with pricing models in section 6 . 1 . 3 . 54 Consequences as a key concept Supplier Consumer Select consumer need Score consequences Score value - enhancing consequences Find service bundles Trade - off benefits / sacrifices [ ok ] [ not ok ] Scored benefits : Scored benefits Score value - enhancing benefits Find wants satisfying need Find consequences for wants Score benefits that underly consequences Figure 3 . 9 : Initial reasoning steps of the e 3 service method Reasoning about needs - driven service bundling 55 In our customer perspective ontology ( section 3 . 2 . 2 ) , beneﬁts are the service prop - erties that are of value to the customer . Yet , the customer might not always be able to assign a preference ordering to a beneﬁt because the beneﬁt is by its deﬁnition always stated in objective ( and often technical ) terms ( recall that a beneﬁt is e . g . the size of mailbox , the bandwidth of a data - connection , etc . ) . For this reason , we ask the customer to assign a preference ordering to a consequence , which is then propagated to the underlying beneﬁt . In other words ; we present the customers with the value - in - use or goal that can be achieved through a beneﬁt , rather than the beneﬁt itself . The customer should have a concrete way to express his / her preference . For this purpose , we use a four - point importance scale based on the MoSCoW - list . The latter is often used in Rapid Application Development ( RAD ) software engineering projects ( Beynon - Davies et al . 1999 ) to prioritize software requirements . Our scale consists of the following importance categories : • Must have . A customer can assign a ‘must - have’ priority to one or more consequences . For a service bundle to be relevant for the customer , all ‘must - have’ consequences must be satisﬁed by the bundle . • Should have . A ‘should - have’ consequence should be realized by a bene - ﬁt from a supplier - speciﬁc service , but as opposed to a ‘must - have’ conse - quence , realization is not a necessity . • Could have . A ‘could - have’ consequence is something that the customer perceives as a nice - to - have feature . A ‘could - have’ consequence is perceived to be less important than a ‘should - have’ consequence . • Does not matter . As implied by name , this last category can be used by the customer to indicate that a consequence does not have to be taken into consideration in the bundling process . Case : The customer is presented with the consequences for the wants { VoIP } , and { instant messaging } . Examples include ‘hear ( natural ) voice during conver - sation’ and ‘send and receive text’ , each of which can be assigned an importance ranking . We assume that our customer assigns the importance score ‘must - have’ to ‘hear ( natural ) voice during conversation’ because the customer is interested in voice communication . Additionally , our customer assigns the importance ‘does not matter’ to the consequence ‘send and receive text’ . Subsequently , our customer assigns a ‘should have’ preference to ‘avoid unwanted conversations’ . Also , s / he assigns a ‘could - have’ preference to ‘make multiple 56 Consequences as a key concept calls simultaneously’ because there are multiple members in the household . Fi - nally , we assume that the customer assigns the importance score ‘does not matter’ to ‘text and voice communication’ . We assume that s / he is not interested in being able to do both . Outcome of this step : Must - have consequences : ‘hear ( natural ) voice during con - versation’ , Should - have consequences : ‘avoid unwanted conversations’ , Could - have consequences : ‘make multiple calls simultaneously’ . Does - not - matter conse - quences : ‘send and receive text’ , ‘text and voice communication’ . Step 3 : Score beneﬁts Next , the customer is presented with the set of beneﬁts that belong to the consequences for which an importance ranking was done . These beneﬁts are automatically assigned with the same importance ranking as their con - sequences . Next , the customer is presented with an opportunity to change the importance scores for these beneﬁts . This step is particularly relevant if a customer wants to consider the objective ben - eﬁts of a service . This is often the case for technically oriented customers who want to specify exactly the beneﬁts they expect from a service , such as the exact download speed they desire from an internet connection . Case : Our customer has selected the consequence ‘make multiple calls simultane - ously’ and would therefore be presented with the beneﬁts : ‘ # phone numbers : < = 2’ and ‘ # phone numbers : > = 1’ . As such , the customer from our average 2 . 4 house - hold has the option of specifying how many phone numbers are required . For our scenario , we assume that the customer attaches the importance score ’could - have’ to ‘ # phone numbers : > = 1’ . This is because there are more than two members in the household who each may require their own phone number . Last , we assume that our customer assigns ‘does not matter’ to the beneﬁt ‘ # phone numbers : < = 2’ . Outcome of this step : Must - have beneﬁts : ‘communication : oral’ . Should - have beneﬁts : ‘caller - ID’ , ‘number recognition’ . Could - have beneﬁts : ‘ # phone num - bers : > = 1’ . Does not matter beneﬁts : ‘communication : oral , in writing’ ‘ # phone numbers : < = 2’ Step 4 : Find and score value - enhancing consequences and beneﬁts The next step is to consider for each ‘want’ as found in step 1 , any additional wants , by checking the reiﬁed ‘adds - value’ relationships between want / consequence pairs . If , for a considered want A ( with its consequences ) , we can ﬁnd related wants B , C , . . . ( with their consequences ) , we ask the customer to decide upon inclusion of Reasoning about needs - driven service bundling 57 wants B , C , . . . , by presenting him / her the consequence for wants B , C , . . . . As such , the consequences provide the customer with a rationale to choose . Of course , we ﬁnd such add - value relationships for relevant wants only , meaning that we only consider those wants without consequences scored as ‘does not mat - ter’ . Finally , as with the consequences in step 2 , we provide the customer with an op - portunity score the beneﬁts underlying the value - enhancing consequences . Case : In our catalogue ( ﬁgure 3 . 7 ) , there is a Core / Enhancing ( C / E ) reiﬁed ‘adds - value’ relationship between ‘VoIP’ and ‘number portation’ . Based upon this re - lationship , the customer is presented with the consequence ‘keep current phone number’ for the ‘number portation’ service . We assume that the customer assigns the importance score ‘must - have’ to the consequence ‘keep current phone number’ due to hassle involved in changing phone numbers . Finally , the customer is presented with the beneﬁt underlying ‘keep current phone number’ : ‘number portation’ . In line with step 3 , this beneﬁt also inherits the importance score ‘must have’ from ‘keep current phone number’ . We assume that our customer does not change this preference . Outcome of this step : Must - have beneﬁts : ‘communication : oral’ , ‘number porta - tion’ , should - have beneﬁts : ‘caller - ID’ , ‘number recognition’ , could - have beneﬁts : ‘ # phone numbers : > = 1’ . Step 5 : Find service bundles After all beneﬁts have been prioritized by the cus - tomer , the next step is to generate the e - service bundles that provides the beneﬁts . The ‘consequences’ are important in the process , since multiple beneﬁts may have a same consequence . As a result , the service bundle composition problem becomes less constrained , thus increasing the chance of ﬁnding a valid solution . Using beneﬁts as a starting point , service bundles are found by taking the following steps ( summarized in ﬁgure 3 . 10 ) : 1 . Finding , for each must - have , should - have and could - have beneﬁt , the supplier - speciﬁc services that satisfy this beneﬁt . We can do this because , conform the discussion on beneﬁts and beneﬁt ranges in 3 . 2 . 2 , a beneﬁt is the bridging concept between a demand a stated by the customer and a service offered by the supplier . The beneﬁts scored as ‘does - not - matter’ are not taken into fur - ther consideration in the bundling reasoning . The result is a set of individual services , such as { A , B } . 58 Consequences as a key concept Use desired benefits to findindividualservices Generateall possible combinations of services Removebundlesthatcontainsubstitutes Rejectbundlesinvalid from a supplier perspective Supplementbundlesusingsupplier - side service relations Check for satisfactionof all must - have consequences Figure 3 . 10 : Steps to ﬁnd service bundles from beneﬁts 2 . Generating all possible service bundles . For services A and B , we generate the possible bundles { A } , { B } , { AB } , { BA } . 3 . Checking , for each generated bundle , if it satisﬁes all must - have conse - quences . In case a bundle does not satisfy all must - have consequences , it is discarded . We emphasize here that we check for must - have consequences , not must - have beneﬁts , with the assumption that a customer is interested in the value s / he ultimately yields from consuming a service , not in the techni - cal properties of a service that realize this value . 4 . Removing bundles that contain substitute services . Services A and B are considered to substitutes if ( 1 ) service A satisﬁes a subset of the conse - quences satisﬁed by service B , and ( 2 ) service A does not satisfy any conse - quences additional to B . 5 . Rejecting bundles that are invalid from a supplier perspective , by using supply - side service dependencies deﬁned by ( Baida et al . 2005 ) . 6 . Supplementing the remaining bundles with services necessary from a sup - plier perspective , i . e . : services that are necessary for technical , legal or com - mercial considerations . For this , we again rely on the supply - side service dependencies deﬁned by ( Baida et al . 2005 ) . Case : To generate bundles for customer beneﬁts such as ( ultimately ) ‘communica - tion : oral’ , we take the following steps : 1 . Find individual services for the must - have , should - have and could - have ben - eﬁts . Using the customer perspective service catalogue ( ﬁgure 3 . 7 ) we ﬁnd VoIP ( KPN ) , VoIP ( XS4All ) for the must - have beneﬁt ‘communication : oral’ and Number portation ( KPN ) , Number portation ( XS4all ) for the must - have beneﬁt ‘number portation’ . We ﬁnd VoIP ( Skype ) for the could - have beneﬁt ‘caller - ID’ . Reasoning about needs - driven service bundling 59 2 . Generate all possible bundles of the services found sofar . Non - exhaustively , these include { VoIP ( KPN ) } , { VoIP ( XS4all ) } , { VoIP ( KPN ) , number porta - tion ( KPN ) } but also bundles that contain substitute services such as { VoIP ( KPN ) , VoIP ( XS4All ) } and { VoIP ( KPN ) , VoIP ( Skype ) , Number Por - tation ( KPN ) } . 3 . Checking , for each generated bundle , if it satisﬁes all must - have conse - quences . For the running example , we reject the bundles { VoIP ( KPN ) } and { VoIP ( XS4all ) } , because neither satisﬁes the consequence ‘keep current phone number’ . 4 . Checking , for each generated bundle , if it contains a service whose conse - quences are a subset of another service in that bundle . For example : The bundle { VoIP ( KPN ) , VoIP ( Skype ) , Number Portation ( KPN ) } is rejected be - cause VoIP ( Skype ) satisﬁes the same consequences as the service VoIP ( KPN ) : ‘avoid unwanted conversations’ and ‘hear voice during communication’ . 5 . We reject all service bundles invalid from a supplier perspective , by consid - ering the supplier perspective service catalogue ( ﬁgure 3 . 8 ) . For example , we reject the bundles { VoIP ( KPN ) , Number portation ( XS4All ) } , { VoIP ( XS4all ) , Number portation ( KPN ) } because , for both suppliers , the Number portation service is only provided in combination with their own , proprietary Number portation service . 6 . Finally , we supplement the remaining VoIP - bundles with services necessary for supply - side reasons . Using the dependencies from our supplier perspec - tive catalogue , we thus add Internet access ( KPN ) to any bundle containing VoIP ( KPN ) due to the dependency BU ( VoIP ( KPN ) , internet access ( KPN ) ) and we add an IP - access service with a minimum up / down - speed of 96 kbps and a maximum latency of 40 ms . to VoIP ( XS4all ) due to the dependency C / S ( VoIP ( XS4All ) , Internet access ) . Outcome of this step : The unordered collection of generated bundles : • { VoIP ( KPN ) , IP - access ( KPN ) , Number portation ( KPN ) } • { VoIP ( XS4All ) , IP - access ( KPN ) , Number portation ( XS4All ) } • { VoIP ( XS4All ) , IP - access ( XS4All ) , Number portation ( XS4All ) } Note that this collection is partial , only for the sake of example . 60 Consequences as a key concept Step 6 : Rank service bundles Next , we rank the service bundles found in step 6 . 3 . For this , we rely upon the should - have and could - have beneﬁts : 1 . If bundle A satisﬁes more ‘should - have’ consequences than bundle B , bun - dle A will be preferred over B , independently of the amount of ‘could have’ consequences . This corresponds to how MoSCoW is used in RAD software engineering projects , where ﬁrst all ‘should - have’ requirements are imple - mented before , and independently of , the ‘could have’ requirements . 2 . In case two or more service are ranked equally , the number of ‘could - have’ consequences per bundle are used for ranking . Note here that if the customer has changed an importance of a beneﬁt underlying a consequence , that the importance value of this beneﬁt counts as a separate ‘should - have’ or ‘could - have’ . Case : ‘Should - have’ consequences . We ﬁrst consider the only ‘should - have’ conse - quence : ‘avoid unwanted conversations’ . Since this is satisﬁed by all example bundles from step 5 , this consequence does not discriminate between the bundles . As such , they remain ranked equally . ‘Could - have’ consequences . We consider the could - have consequence ‘make multiple calls simultaneously’ . We ﬁnd that all generated bundles satisfy the consequence ‘make multiple calls simulaneously’ , but also that the service VoIP ( XS4All ) is the only service that can provide the beneﬁt ‘ # phone numbers : > = 1’ . Therefore , any bundle containing the service VoIP ( XS4All ) will be ranked higher a bundle that does not contain this service . Outcome of this step : After checking for alternative services , we arrive at the fol - lowing possible bundles , sorted according to their correspondence to the preference ordering of consequences . 1 . { VoIP ( XS4all ) , Internet access ( XS4All ) , number portation ( XS4all ) } , { VoIP ( XS4all ) , Internet access ( KPN ) , number portation ( XS4all ) } 2 . { VoIP ( KPN ) , Internet access ( KPN ) , number portation ( KPN ) } Computational implementation of the customer perspective service catalogue 61 Step 7 : Present the customer with the sacriﬁces of services and an opportunity to change the importance rankings . Before the customer actually chooses one of the possible bundles , s / he considers the sacriﬁces of each alternative bundle . Based on the sacriﬁces , the customer may change the preference orderings assigned to the beneﬁts . We do so because the price of a service plays a signiﬁcant role in a customers’ decision to actually acquire a service ( Fishbein 1978 , Woodruff 1997 ) . In our ontology , this issue is represented with the concept ‘sacriﬁce’ If the customer is not satisﬁed with the price for a certain service bundle , s / he can change the preference ordering of the ﬁlled - in consequences . As we can see in ﬁgure 3 . 9 , changing the preference ordering of a beneﬁt entails that the customer returns to step 3 . If the customer eventually ﬁnds that there is a balance between beneﬁts received from a bundle and the price that has to be paid for it , s / he selects the bundle for provisioning . Case : Our customer zooms in on both bundles on top of the preference ordering , and ﬁnds that acquiring the beneﬁt ‘number portation’ costs e 10 in both cases . Now , for the sake of argument , say our customer ﬁnds this too expensive and wants to change the preference of the beneﬁt ‘number portation’ . For this , s / he is pre - sented with an opportunity to go back to step 3 , where all the values already ﬁlled in are still present ( such as ‘ # Phone numbers : > = 1’ . ) . Now the customer changes the preference ordering on ‘number portation’ from ‘must - have’ to ‘does not mat - ter’ and generates the alternative bundles again . A new set of service bundles is generated . These bundes are ranked similarly to the ranked bundles resulting from step 5 , only now without taking into consideration the number portation service . 3 . 6 Computational implementation of the customer per - spective service catalogue Our customer perspective ontology is actually a formal conceptualization of mar - keting theories on customer needs analysis , meaning that it is computer imple - mentable . As a proof - of - principle for the computational adequacy of the e 3 service customer perspective ontology , as well as to demonstrate that an ontology instantiation un - derlies conceptual models such as ﬁgure 3 . 7 , we developed a software tool that : 1 . Generates a conceptual model , given an ontology instantiation of the e 3 service customer perspecive in RDF ; 62 Consequences as a key concept 2 . Can edit the conceptual model , that is : Elements such as a customer need can be added , changed or removed from the conceptual model . Figure 3 . 11 shows an example of this editing functionality for a sample ISP service catalogue . When an ISP wishes to add a Core / Enhancing depen - dency between the adds - value pairs { VoIP / get message accross directly } and { Number portation / Keep current phone number } for an ISP service cat - alogue , s / he can do this through the GUI of the tool ; 3 . Can export an edited conceptual model to an ontology instantiation in RDF . For the Core / Enhancing dependency example in ﬁgure 3 . 11 , part of the out - put produced by the tool can be found in ﬁgure 3 . 12 . Of course , any ontology instantiation exported in RDF can be interpreted by the tool to again generate a conceptual model . The important point here is that our tool is capable of interpreting an ontology instantiation in RDF , exporting any edits of the instantiation to RDF and ﬁnally , that it is capable of interpreting the edited ontology instantiation to again generate a conceptual model . The tool is written as a web - application , accessible through http : / / www . e3value . com / e3family / e3service / catalog / index . php 2 3 . 7 Summary : Consequences are key In this chapter , we introduced the e 3 service methodology . We stated that a cus - tomer is not interested in a service , but in the value s / he yields from consuming this service . This , we argued , differs from the interest that suppliers hold for ser - vices such as decisions on supporting services needed ( e . g . billing ) and denying competitors access to proprietary infrastructures ( e . g . providers of 3G mobile in - ternet that exclude Skype ) . Thus a service can be modeled from two perspectives : a customer and supplier perspective . To model services from the supplier perspec - tive , we adopted the ontology from ( Baida et al . 2005 ) . For modeling services from a customer perspective , we proposed the e 3 service customer perspective ontology . Subsequently , we showed the computational adequacy of this ontology with a tool that allows for creating customer perspective service catalogues with this ontol - ogy . Also , we showed how we reason about service bundling with the e 3 service ontologies . 2 best viewed with internet explorer Summary : Consequences are key 63 Figure 3 . 11 : Adding a Core / Enhancing dependency to a e 3 service customer per - spective service catalogue 64 Consequences as a key concept < rdf _ : adds _ value rdf : about = " & rdf _ ; e3serviceneedsontology _ Instance _ 30064 " rdfs : label = " VoIP / get message across directly " > < rdf _ : has _ want rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30003 " / > < rdf _ : has _ consequence rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30049 " / > < / rdf _ : adds _ value > < rdf _ : adds _ value rdf : about = " & rdf _ ; e3serviceneedsontology _ Instance _ 30030 " rdfs : label = " number portation / keep curent phone number " > < rdf _ : has _ want rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30007 " / > < rdf _ : has _ consequence rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30022 " / > < rdf _ : dependent rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30036 " / > < / rdf _ : adds _ value > < rdf _ : Core _ Enhancing rdf : about = " & rdf _ ; e3serviceneedsontology _ Instance _ 30036 " > < rdfs : label > VoIP / hear voice during conversation . . . . . number portation / keep curent phone number < / rdfs : label > < rdf _ : has _ dependee rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30023 " / > < rdf _ : has _ dependent rdf : resource = " & rdf _ ; e3serviceneedsontology _ Instance _ 30030 " / > < / rdf _ : Core _ Enhancing > Figure 3 . 12 : The Core / Enhancing relationship between adds - value pairs in RDF The upshot from our discussion so far is that we have a formal , computationally ad - equate , conceptualization of customer needs in which consequences play a central role . Chapter 4 Applying e 3 service to practical business cases This chapter discusses the application of e 3 service to two practical business cases : ( 1 ) A case in the postal industry ( 2 ) a case in the telecom industry . Parts of this chapter have been published earlier : The application of e 3 service in the postal industry case ( section 4 . 1 ) in Proceedings of the European Conference on Information Systems 2008 ( ECIS 2008 ) ( de Kinderen & Gordijn 2008 b ) and the application of e 3 service in the telecom industry ( section 4 . 3 ) in the Proceedings of the Hawaiian International Conference on System Sciences 2008 ( HICSS 2008 ) ( de Kinderen & Gordijn 2008 a ) and the Proceedings of the Requirements Engineering conference 2008 ( RE ’08 ) ( Gordijn et al . 2008 a ) . In this chapter , we discuss two cases that assess the practical validity of e 3 service : ( 1 ) Selecting the right postal services for a Small to Medium sized Enterprise ( SME ) that wants to set up a mailing initiative online and , ( 2 ) A telecom example , which is an extension of the running ISP example used in the previous chapter . 4 . 1 B2B Case : Online design of mailings for SMEs Due to the deregulation of the European postal industry , incumbent European postal companies have to differentiate themselves in order remain proﬁtable . TPG is one such incumbent postal company 1 . In an attempt to differentiate themselves , 1 Currently TNT . At the time that this case study was carried out , 2005 , TPG was in the process of being taken over by the postal company TNT 66 Applying e 3 service to practical business cases TPG has developed a set of online mailing services . These services range from simple services such as addresses of prospect customers , to more complex ones such the ability to designing postal cards online . One such online service allows a Small to Medium sized Enterprise ( SME ) to set up a Direct Mail initiative : The Direct Mail service . This service allows a SME to ( online ) design a mailing and to upload an address list for the mailing recipients . Thereafter , TPG prints the mail and physically delivers it to the speciﬁed recipients . For SMEs , is the idea , this provides a cost - effective means for setting up a basic Direct Mail initiative , as investments into a copywriter and printer are not needed . Currently the Direct Mail service limits SMEs to sending customized A - 5 sized cards , while additional services that could enhance the mailing , such as designing a customized stamp ( another service of TPG ) , are never explicitly offered to SMEs in combination with the Direct Mail service . For some basic mailing intiatives , such as notifying existing clientele of a change of address , this is sufﬁcient . In some cases however , the customized A - 5 sized cards do not satisfy the need SMEs . Sometimes , to generate sufﬁcient response , the mailing of a speciﬁc SME should stand out from others and A5 - sized cards only hardly accomplish this . TPG now wants to explore how it can enhance its basic Direct Mail mailing service . TPG would like to accomplish this by bundling the basic Direct Mail service with its other online mailing services , such as the customized stamp mentioned before . Ideally it envisions that an SME goes to TPG’s website , states its mailing needs in an online wizard and that , based upon these needs , a bundle of mailing services is presented that matches the mailing needs of the SME . As an additional goal , TPG would like a more coherent view of its mailing services . Currently , such a coherent view is lacking , because the mailing services they offer through their website are provided by different departments that exist in isolation from each other . So : The department responsible for managing the customized card service is a different department from that responsible for the customized stamps , while the service Direct Mail advice is handled by yet another department . In the following sections , we will apply e 3 service to the mailing services of TPG . First , in section 4 . 1 . 1 , we discuss the case study set up . In sections 4 . 1 . 2 and 4 . 1 . 3 we show how to create customer and supplier perspective catalogues of mailing services . 4 . 1 . 4 shows how to reason with these catalogues to ﬁnd bundles of mail - ing services satisfying the needs of SMEs . Finally , section 4 . 2 provides practical and theoretical reﬂections on the mailing case . B2B Case : Online design of mailings for SMEs 67 4 . 1 . 1 Case study setup Business context : MalieNet , a networked organization for innovating indus - try organizations The postal industry case is part of a larger case study , that was carried out in cooperation with the networked organization MalieNet . MalieNet’s main goal is to support Dutch industry organizations that want to innovate them - selves 2 . To this end , MalieNet employs a range of ( ICT ) solutions that are specif - ically tailored to industry organizations , such as a CRM solution that speciﬁcally accounts for administring member - organizations ( which is important for industry organizations , since their income is fully dependent on membership contributions ) . MalieNet is a networked organzation : Its intention is to bring relevant parties to - gether that would each beneﬁt from cooperation , not to develop ( ICT ) solutions on their own . The CRM solution for industry organizations , for instance , is devel - oped by the partner organization Microsoft . MalieNet only ensures that Microsoft keeps in frequent contact with industry organizations , so that a CRM package is developed that is tailored to the peculiarities of industry organizations . The goal of this case was twofold : To test e 3 service in practice , but also to advise Malienet on how it could improve its support towards innovating industry organi - zations . After all , if the case was only intended to test some academic framework , the practitioners from Malienet would have had little incentives to invest time in the case study . As an input for improving the support MalieNet that provides for industry orga - nizations , we performed an organizational analysis ( see the next paragraph ) . One of the main outcomes of this analysis was that the cooperation of the partner orga - nization TPG with industry organizations to provide mailing services to member organizations ( the SMEs from 4 . 1 ) was not living up to expectations . Therefore , and because the nature of the problem as detailed in section 4 . 1 seemed to ﬁt well with our research purposes , we decided to concentrate ourselves on the TPG mail - ing services case . Study set up We ﬁrst performed an overall organizational analysis of MalieNet to ( 1 ) analyze what solutions MalieNet offers to industry organizations , and ( 2 ) ﬁnd points for improvement that we could further focus on . We focused on developing a catalogue , to clarify what solutions MalieNet offers . 2 An industry organization represents companies operating in the same industry , such as the Dutch industry organization for car dealers BOVAG . Responsibilities include bringing together companies from the same industry , and lobbying for e . g . favorable laws on taxation . 68 Applying e 3 service to practical business cases For catalogue development , we ﬁrst inventoried MalieNet’s individual services and valuable outcomes , and the organizations that provide these services . We relied on ( 1 ) documentation that we received from MalieNet , and ( 2 ) interview - rounds with MalieNet’s account manager . Subsequently , we validated the service catalogue with MalieNet’s account manager to see to what extent the modelled service cata - logue accurately reﬂects MalieNet’s service offerings . Thereafter , during a workshop - like session , we added service dependencies and demand - interdependencies ( see section 3 . 2 ) to the service catalogue together with the account manager . It is our experience that such collaborative modelling efforts allows us to model service knowledge that we could not uncover on our own . Even more importantly , however , is that such modelling efforts force a domain expert to concretely think through his / her service offerings . Development of a service catalogue naturally leads to a discussion on individual services . After catalogue development , we therefore also had a good overview of what services would be interesting to consider further . Initially , we considered two offerings from MalieNet : Website development and the TPG card service . However , because the website developer was not even willing to provide a basic price list of what they offer , we decided to focus our efforts on TPG . For the TPG mailing services , we created a service catalogue by using an approach similar to developing the service catalogue for MalieNet . The domain expert for the mailing case was a consultant from the consultancy ﬁrm Boer & Croon , who was actively involved in the improvement of TPG’s online mailing services . A note is in place here . Although the domain expert from Boer & Croon had knowledge about the services from TPG and helped us in creating TPG’s service catalogue , he suggested that to make the case really interesting we should go ahead with the case directly with TPG . Unfortunately however , our cooperation with TPG never took of because while TPG expressed interest , it had other priorities due to a upcoming take - over by the postal company TNT . In addition however , the author of this thesis had an ethical issue with the case study , feeling that a successful execution of a case study on Direct Mail would only result in an unnecessary waste of paper . Therefore , this author also never persisted with TPG . 4 . 1 . 2 Creating a customer perspective service catalogue In this section we show how to create a customer perspective service catalogue of mailing services , using the steps described in section 3 . 3 . B2B Case : Online design of mailings for SMEs 69 Design additional material demand want need Copywriter TPG TPG MKB Design cust . card Design cust . card Customized stamp Format options { A3 , A4 , A5 , . . } Paper finish { Matte , glossy , . . } Folding options { single fold , Z - fold , . . } DM - advice Format options { A5 } Paper finish { matte , glossy } Customized stamp Direct Mail advice Mailing addresses business Target audience : business Design letter - type textcolor { . . } Design template { invitation , . . } Morepersonalizedmailing Make announce ment to existing clients O / B design support C / E documentation Mailingdocumentation Mailing addresses consumer Target audience : consumers addresses of prospectconsumers addresses of prospect businesss Design additional material Additional material attract business prospects Paper finish Create additional material attract consumer prospects Cust . stamp Cust . stamp Additional material Design Customized card Format option : A4 , A5 , A6 Paper finish : . . . Folding options : . Multiple card sizes Specifyingcard finish Specifying lettertype Online design lettertype : . . . Design template Customized card Customized card … . . Customized card Create mailing O / B Save time Legend Supplier Consequence [ value derivation ] Benefit need want demand Format option : A5 Single - sized card Figure 4 . 1 : Customer - driven dependencies between services , cf . the e 3 service ontology 70 Applying e 3 service to practical business cases Populate the service catalogue with demands and ﬁnd the beneﬁts contained within them We ﬁrst elicit demands for the TPG customer perpsective service catalogue by in - ventorying the individual supplier - speciﬁc services that we want to use as input for our reasoning process . Recall from our customer perspective ontology ( sec - tion 3 . 2 . 2 ) that a demand is a supplier - speciﬁc service for which the customer is willing and able to pay . For TPG , we ﬁnd the following demands : ( 1 ) the cus - tomized Direct Mail ( DM ) card design service , ( 2 ) the customized stamp and ( 3 ) the DM - advice service . We elicit these services by creating a e 3 - value model based upon documentation from TPG . An e 3 - value model shows the actors , as well as the commercial services they exchange Gordijn & Akkermans ( 2003 ) . Additionally , we model mailing services from an alternative supplier as demands . These are ( 1 ) an alternative customized card design service from a copywriter and ( 2 ) the capability to designing additional material , such as brochures or vouchers . We choose to take these third party mailing services into consideration , because they provide for a broader coverage of mailing needs . As such , this inclusion in - creases the likelihood that a SME will actually set up a mailing initiative through the website of TPG . For TPG , this inclusion of third party mailing services can fur - ther be advantageous because ( 1 ) it can offer its own services in combination with third party services , thus providing an opportunity for sales increase and ( 2 ) it can enter into a proﬁt - sharing agreement , in which TPG receives a certain percentage of the income received from each customer it refers . For the third party supplier of mailing services , the proﬁt - sharing agreement is advantageous because it would receive additional customers through TPG . Next , we add the beneﬁts from the demands . Beneﬁts are elicited by searching for speciﬁc properties of a service that provide the customer with more value - in - use . For instance , the property ‘design template’ from the demand ‘Design customized card’ is a beneﬁt because it saves a SME time if it sets up a mailing initiative . For the demand ‘design customized card’ ( TPG ) , beneﬁts are ‘format option’ , ‘paper ﬁnish’ ‘online design letter type’ and ‘design template’ . Observe here that a de - mand is not the same as a beneﬁt : TPG chooses to provide the service ‘customized card’ in its own right , but not ‘format options’ or ‘design template’ . The latter are only provided as part of the service ‘customized card’ . The resulting beneﬁts and demands can be found in ﬁgure 4 . 1 . B2B Case : Online design of mailings for SMEs 71 Derive wants In case multiple , but similar , services are available from multiple suppliers , we merge these similar services into one single want . For instance , a demand ‘design customized card’ as provisioned by the speciﬁc suppliers TPG and a copywriter , becomes a single want ‘design customized card’ , independently of these suppliers . As a second example , ‘Mailing addresses business’ is also modelled as a want , because addresses of prospect business customers are offered as a separate , and thus commercially feasable , product by Cendris and other ( marketing ) companies . A want will then also have the beneﬁts from these different demands in the form of beneﬁt ranges . Consider the want ‘customized card’ in ﬁgure 4 . 1 . This want contains the beneﬁt ranges ‘Format option : A5’ from TPG’s customized card ser - vice , and the beneﬁt ‘Format option : A3 , A4 , A5’ from a copywriter . As stated in section 3 . 2 . 2 , we model these beneﬁts on a want - level also , so that a customer may choose upon inclusion of a beneﬁt independently of having to choose a supplier . Note here that we model ‘Format option : A5’ seperately from the beneﬁt ‘Format option : A3 , A4 , A5’ despite that ‘A5’ falls into the range ‘A3 , A4 A5’ . We choose to model these two beneﬁt ranges seperately because each beneﬁt can be valued differently . This is discussed in the next . Using consequences to show how beneﬁts contribute to satisfying a functional need Next , we derive consequences from beneﬁt ranges to represent the subjective added value for the customer of a beneﬁt range . We do this by asking , for each beneﬁt range , the question : ‘Why is this this beneﬁt range interesting for the customer ? ’ . This question is also used in laddering ( Gutman & Reynolds 1988 ) , a well - known marketing technique for discovering customer motivations for acquiring a service . Returning to the two beneﬁt ranges ‘Format option : A5’ and ‘Format option : A3 , A4 , A5’ , we can thus infer two different valuations : A5 - sized cards are sufﬁcient for those interested in a simple functional design and thus would choose a ‘single - size card’ , while differently sized cards are interesting for SME’s that want their mail to stand out from others and thus would choose ‘multiple card sizes’ . So we derive for each beneﬁt range a separate consequence : ‘single - sized card’ for ‘ format option : A5’ and ‘selectable card sizes’ for ‘Format option : A3 , A4 , A5’ . By using the consequences , we can now derive a set of needs . As stated in section 3 . 3 we again rely on consequence laddering . For example , by asking the ques - 72 Applying e 3 service to practical business cases tion ‘Why is this consequence interesting for the customer ? ’ for the consequence ‘create mailing’ , we ﬁnd the need ‘Make announcement to existing clients’ . However , we cannot always deﬁne a need based upon a single consequence . There - fore , we also search for groupings of consequences that together satisfy a need . For the mailing case , we ﬁnd that the consequences ‘create mailing’ and ‘addresses of prospect businesses’ together satisfy the need ‘attract business prospects’ . Note that the consequences ‘create mailing’ and ‘addresses of prospect businesses’ are contained in two different wants : ‘design customized card’ and ‘Mailing ad - dresses business’ . To represent that a need is satisﬁed by two or more wants together , our customer perspective ontology relies on the concept of connecting problem - solution pairs ( see 3 . 2 . 2 ) . Deﬁne relationships between wants Now that we have deﬁned both the wants and the consequences , we ﬁrst search for occurrences of the reiﬁed ‘adds value’ - relationship in e 3 service . Two examples include‘customized card’ ( want ) / ‘create mailing’ ( consequence ) , and ‘direct mail advice’ ( want ) / ‘design support’ ( consequence ) . Second , we represent dependency relationships between these pairs . For example , the C / E dependency relationship is used to show that if a ‘customized card’ is acquired , ‘design support’ might also be valuable to the customer . 4 . 1 . 3 Create a supplier perspective service catalogue Following the steps described in 3 . 4 , this section shows how we create the supplier perspective catalogue of mailing services depicted in ﬁgure 4 . 2 . Inventory supplier - speciﬁc services For TPG , we inventory the following mail - ing services : ‘Design customized DM - cards’ , ‘Design customized stamps’ and ‘Provide DM advice’ . Additionally , we ﬁnd ‘Printing DM - cards’ and ‘Printing customized stamps’ from the TPG subsidiary Cendris as services that support both online design services . Observe here that we model the printing services separately from the design services . This is because in principle , a design service from TPG could also be offered in combination with a third - party printing service . For third - party mailing services , we ﬁnd the service ‘Design additional material’ from a copywriter . We model this service because sending a customized Direct B2B Case : Online design of mailings for SMEs 73 BU BU C / S C / S OB OB OBOB OB OB C / S C / S C / S BU BU C / E - - - - - - - Figure 4 . 2 : Sample of the supplier perspective catalogue of mailing services 74 Applying e 3 service to practical business cases Mail card with additional material , such as discount - coupons , brochures and more , could have the effect that the customized card stands out more from other mailings . Furthermore , we model an alternative printing service : ‘Print material’ from a third - party printer . This printing service allows for printing Direct Mail cards in various sizes ( e . g . A4 , A5 , A6 ) , shapes ( e . g . round , star - shaped ) and with different card ﬁnsihes ( glossy , matte ﬁnishes ) and as such , acts as an interesting alternative for TPG’s subsidiary printing service , which allows for printing square , A5 - sized cards only . Identify resources and beneﬁts Next , we identify the resources and properties of these resources for the modeled individual services . In other words , conforming to the concepts from our supplier perspective ontology 3 . 2 . 3 , we model the objects of value from a service that are valuable for a customer , and the properties of these objects of value . Referring to our supplier catalogue of services we model , amongst others , the fol - lowing resources and beneﬁts : • For the service ‘Design customized card’ from TPG , the resource ‘customized card design’ with the beneﬁts ‘lettertype = arial , times , . . . ’ and ‘design tem - plate’ . • For the service ‘Print customized card’ from TPG , the resource ‘customized card’ with the beneﬁt ‘Format option : A5’ . • For the service ‘Print material’ from a third party printer , the resource ‘printed material’ with the beneﬁts ‘Format options : ‘A3 , A4 , A5’ , ‘card ﬁnish : matte , glossy’ , ‘card shape : round , star - shaped’ . Model service dependencies Next , we model the dependencies between indi - vidual service elements . For the supplier perspective catalogue of mailing services ( ﬁgure 4 . 2 ) we ﬁnd , amongst others , the following dependencies : • A Core / Supporting dependency ( C / S ) between the service element ‘Design customized DM - card’ from TPG and the service elements ‘Print customized DM - card’ ( Cendris ) and ‘Print material’ ( Printer ) . This dependency shows that a card design service should always be supported by a card printing ser - vice , be it from TPG’s subsidiary Cendris itself or from a third party printer . B2B Case : Online design of mailings for SMEs 75 • The Bundled dependencies ( BU ) between ‘Print customized stamps’ from Cendris and ‘Design customized stamps’ from TPG . This dependency shows that the stamp printing services from TPG’s subsidiary Cendris are offered only in combination with the stamp design services from TPG . • An Optionally Bundled dependency ( OB ) between ‘Design customized card’ from TPG and ‘Provide mailing addresses business’ , ‘Provide mailing ad - dresses customer’ , ‘Design customized stamp’ and ‘Design additional mate - rial’ to indicate that each of these services could add value to the customized card design service . An OB dependency is present , because these services could also be acquired separately from the customized card service . • A Core / Enhancing dependency ( C / E ) between ‘Design customized card’ and ‘Provide DM - advice’ to indicate that DM - advice could be valuable in com - bination with the customized card . A C / E - dependency is present instead of an OB - dependency because ‘DM advice’ cannot be acquired separately of TPG’s card design service . • A Bundled ( BU ) dependency between the mail design service from TPG and the Copywriter and the send mail service from TPG , to model that when a SME designs a mailing through TPG or through the copywriter , it should send the mail through TPG . TPG has made this business decision for the card design service because by its nature it is a postal company and as such , earns its money mostly through the sending of mail . 4 . 1 . 4 Reasoning with mailing ontology instantiations We now illustrate how we reason with the customer perspective service catalogue ( ﬁgure 4 . 1 ) and supplier perspective service catalogue ( ﬁgure 4 . 2 ) about generating bundles of mailing services that are tailored to the need of a SME . To this end , we suppose a scenario in which there are two SME’s that consider setting up a mailing initiative : ( 1 ) A piano tuner , who is moving and wants to make his new address known to his existing clientele , and ( 2 ) A startup store who wants to raise awareness . Step 1 : Select need , derive initial set of wants satisfying need The piano - tuner starts with the need ‘make announcement to existing clients’ to create an announcement that he is moving , while the startup store starts with a need ‘attract customer prospects’ to raise awareness amongst prospect customers . These needs 76 Applying e 3 service to practical business cases are selected by the piano tuner / start up store from the needs library made in section 4 . 1 . 2 . Next , we derive the want { ‘Customized card’ } for the need of the piano tuner and the wants { ‘Customized card’ , ‘Mailing addresses customer’ } for the need of the startup store . Here , we rely on the concept of problem - solution pairs ( see section 3 . 2 . 2 ) to represent that a need can be satisﬁed by one or more wants . Outcome of this step For the Piano tuner : the want { ‘Design customized card’ } . For the startup store : the wants { ‘Design customized card’ , ‘Mailing addresses customer’ } . Step 2 : Find consequences , request customer to score consequences Now we search in the catalogue for the consequences belonging to the wants found in step 1 , and request the SMEs to score these consequences . The want ‘Customized card’ is found for the piano tuner and the startup store , so both SMEs are requested to score consequences contained in this want . The piano tuner attaches the importance score must - have to the consequences ‘cre - ate mailing’ and ‘save time’ , since he is primarilly interested in getting a message across via mail and does not want to spend too much time on this . He scores ‘spec - ifying card ﬁnish’ as a could - have , since this is a nice to have feature that does not cost him too much time . Finally , he attaches the importance score does not matter to ‘multiple card sizes’ and ‘specifying lettertype’ . The startup store scores ‘create mailing’ , ‘multiple card sizes’ , ‘specifying card ﬁn - ish’ and ‘specifying lettertype’ as must - haves , since she is interested in letting his mailing stand out . ‘Save time’ is considered as a ‘does not matter’ feature . Next , the startup store also scores the consequence ‘addresses of prospect customers’ from the want ‘mailing addresses customer’ . Naturally , he considers this to be a must . Outcome of this step : Consequences piano tuner . Must - haves : { ‘create mailing’ , ‘save time’ } , Could - haves : { ‘specifying card ﬁnish’ } , Does not matter : { ‘multiple card sizes’ , ‘specifying lettertype’ } . Consequences startup store : Must - haves : { ‘create mailing’ , ‘specifying card ﬁn - ish’ , ‘multiple card sizes’ , ‘specifying lettertype’ , ‘addresses of prospect customers’ } , Does not matter : { ‘save time’ } . Step 3 : Score beneﬁts Next , the SMEs are presented with the beneﬁts underly - ing the consequences and the importance scores these beneﬁts inherited from the B2B Case : Online design of mailings for SMEs 77 consequences . For example , the startup store is presented with the could - have ben - eﬁts ‘folding options’ and ‘paper ﬁnish’ , because these two beneﬁts underlie the could - have consequence ‘save time’ ( see ﬁgure 4 . 1 for reference ) . Now , the SMEs are provided the option to change the importance score attached to these beneﬁts . We assume that the piano tuner changes the beneﬁt ‘folding options : . . . ’ from a could - have to a does not matter . Outcome of this step : Beneﬁts for the startup store . Must - haves : { ‘customized card’ , ‘format options : A4 , A5 , A6’ , ‘Folding options : . . . . ’ , ‘paper ﬁnish : glossy , matte’ , ‘online lettertype design’ } , Does not matter : { ‘design template’ } . Beneﬁts for the piano tuner : Must - haves : { ‘customized card’ , ‘design template’ } , Could - haves’ : { ‘paper ﬁnish : glossy , matte’ } , Does not matter : { ‘format options : A4 , A5 , A6’ , ‘folding options : . . . . ’ , ‘online lettertype design’ } . Step 4 : Find and score value - enhancing consequences and beneﬁts We con - sider the want ‘Design customized card’ that was derived in step 1 for the needs of both SMEs . According to the dependency relationships that exist in the customer perspective catalogue , we can expand our initially found pair ‘Design customized card’ ( want ) / ‘Create mailing’ ( consequence ) with other pairs of wants / consequences . An example of such an additional pair of want / consequence is ‘Direct mail advice’ ( want ) / ‘Design support’ ( consequence ) , which is in a C / E relationship with ‘De - sign customized card’ / ‘Create mailing’ ( see ﬁgure 4 . 1 ) . Now we rely upon the consequence from each value - enhancing want to let SME decide upon inclusion of a particular want in the service bundle ( see also section 3 . 5 ) . First , we consider the startup store . He may have an interest in enhancing his mail - ing , since it should stand out from other mailings to achieve his main purpose : Attracting customers . We assume she scores the consequence ‘design support’ from the want ‘Direct mail advice’ and the consequence ‘more personalized mail - ing’ from the want ‘Customized stamp’ as must - haves . Furthermore , we assume that the startup store scores ‘create additional material’ as a could - have , because the owner is unsure of the costs for designing additional material . The piano - tuner would not have much use for additional services to enhance his mailing since it mainly serves a practical purpose ; informing his existing cus - tomers . He will therefore score the consequences from the value - adding services as ‘does not matter’ . Finally , both SMEs will be presented with the beneﬁts and their importance scores inherited from the consequences . For example : The startup store is presented with 78 Applying e 3 service to practical business cases the must - have beneﬁt ‘mailing documentation’ , which underlies the must - have consequence ‘design support’ . For both SMEs , we assume that the underlying beneﬁt scores remain unchanged . Outcome of this step : Additional must - have consequences startup store : { ‘design support’ , ‘a more personalized mailing’ } . Additional could - have consequences startup store : { ‘create additional material’ } Additional must - have beneﬁts startup store : { ‘customized stamp’ , ‘mailing docu - mentation’ } . Additional could - have beneﬁts startup store : { ‘additional material’ } . For the piano tuner , the same sets of consequences and beneﬁts are found , only in his case with the importance score ‘does not matter’ . Step 5 : Generate alternative service bundles Now that we have found the wants from the SMEs and the speciﬁc beneﬁts that they desire , we can ﬁnd the actual , supplier - speciﬁc service offerings that satisfy these beneﬁts . For the scored beneﬁts from both SMEs , table 4 . 1 shows how bundles of mailing services are stepwise generated , following the steps presented in ﬁgure 3 . 10 . Some interesting observations from this stepwise creation of bundles are : • No customized card service from TPG is found for the startup store . In the customer perspective service catalogue ( ﬁgure 4 . 1 ) , one can see that this is because the customized card service from TPG does not satisfy the conse - quence ‘Specifying size of cards’ , whereas the startup store considers this a must - have . • The individual service ‘Design customized card’ from a copywriter is not found for the piano tuner . Although this service is initially found for the desired beneﬁt ‘customized card’ ( see the outcome of the ﬁrst step in table 4 . 1 ) , it is eventually rejected because it does not contain the consequence ‘Save time’ , whereas this was indicated as a must - have consequence by the piano tuner . • Based upon the service dependencies deﬁned in the supplier perspective ser - vice catalogue ( see ﬁgure 4 . 2 ) , we ﬁnd that the service elements ‘Design cus - tomized DM - cards’ , ‘Design additional material’ and ‘Design customized stamp’ are each supported by a printing service . Therefore , we supplement each of these services with a printing service . Outcome of this step : The ( partial ) unordered sets of bundles : For the startup store : B2B Case : Online design of mailings for SMEs 79 • { Design customized card ( Copywriter ) , Print customized card ( Printer ) , Send mail ( TPG ) , Design Customized stamps ( TPG ) , Printing customized stamps ( Cendris ) , DM - advice ( TPG ) } • { { Design Customized card ( Copywriter ) , Print customized card ( Printer ) , Send mail ( TPG ) , Customized stamp ( TPG ) , Printing customized stamps ( Cendris ) , DM - advice ( TPG ) , Design additional material ( Copywriter ) , Print additional material ( Printer ) } For the Piano tuner : • { { Design customized card ( TPG ) , Send mail ( TPG ) , Print customized card ( Cendris ) } Step 6 : Rank service bundles For the startup store , the bundle containing the service ‘Additional material ( Copywriter ) ’ is ranked ﬁrst since , satisfaction of all other consequences being equal , it satisﬁes an additional could - have consequence : ‘Additional material’ . Outcome of this step : The ordered set of bundles : For the startup store : 1 . { Design customized card ( Copywriter ) , Print customized card ( Printer ) , Send mail ( TPG ) , Customized stamp ( TPG ) , Print customized stamp ( Cendris ) , DM - advice ( TPG ) , Design additional material ( Copywriter ) , Print additional ma - terial ( Printer ) } 2 . { Design customized card ( Copywriter ) , Print customized card ( Printer ) , Send mail ( TPG ) , Customized stamp ( TPG ) , Print customized stamp ( Cendris ) , DM - advice ( TPG ) } For the piano tuner : 1 . { Design customized card ( TPG ) , Print customized card ( Cendris ) } Step 7 : Present the customer with the sacriﬁces of services and an opportunity to change the importance rankings The piano tuner selects the bundle { Design customized card ( TPG ) , Print customized card ( Cendris ) } . After the piano tuner has speciﬁed the number of cards that he wants to send , he is presented with the price he has to pay 3 . We assume that he is satisﬁed with this price and thus acquires this 3 To calculate prices , we rely on a formalization of pricing models . See 6 . 1 . 3 for an elaboration of pricing models . 80 Applying e 3 service to practical business cases Step ( cf . steps in ﬁgure 3 . 10 ) startup store Piano tuner Use desired bene - ﬁts to ﬁnd individ - ual services Design customized card ( Copywriter ) , Cus - tomized stamp ( TPG ) , Design additional ma - terial ( Copywriter ) , DM - advice ( TPG ) Customized card ( TPG ) , Cus - tomized card ( Copywriter ) Generate all pos - sible combinations of services . { Design customized card ( Copywriter ) } , { Design customized card ( Copywriter ) , Design Customized stamp ( TPG ) } , { Customized card ( Copywriter ) , Cus - tomized stamp ( TPG ) , DM - advice ( TPG ) } { Design customized card ( TPG ) } , { Design cus - tomized card ( Copywriter ) } , { Design customized card ( TPG ) , customized card ( Copywriter ) } Checking , for each generated bundle , if it satis - ﬁes all must - have consequences . { Design customized card ( Copywriter ) , Cus - tomized stamp ( TPG ) , DM - advice ( TPG ) } { Design customized card ( TPG ) } , { Design customized card ( TPG ) , Design customized card ( Copywriter ) } Remove bun - dles that contain substitutes { Design customized card ( Copywriter ) , Cus - tomized stamp ( TPG ) , DM - advice ( TPG ) } { Design customized card ( TPG ) } Reject all service bundles invalid from a supplier perspective { Design customized card ( Copywriter ) , Cus - tomized stamp ( TPG ) , DM - advice ( TPG ) } { Design customized card ( TPG ) } Supplement the remaining bun - dles with services necessary for supply - side rea - sons { Design customized card ( Copywriter ) , Print customized card ( Printer ) , Send mail ( TPG ) , Cus - tomized stamp ( TPG ) , Print Customized card ( TPG ) , DM - advice ( TPG ) } { Design customized card ( TPG ) , Print cus - tomized card ( Cendris ) , Send mail ( TPG ) } Table 4 . 1 : Generating bundles of services that satisfy all must - have consequences cf . steps ﬁgure 3 . 10 Practical usefulness and theoretical reﬂections 81 bundle . The startup store selects the bundle that comes closest to his preferences : The bundle that includes the design of additional material by a copywriter . As with the piano tuner , the startup store then speciﬁes the number of cards to be send and is presented with the bundle price . We assume that based upon the resulting price , the startup store decides to refrain from acquiring the bundle that includes additional material . The startup store considers that designing and printing additional material costs too much for something that he considers as a nice - to - have feature . Thus the startup store selects the next bundle in the ranking and , after seeing the calculated price , decides to acquire this bundle . Outcome of this step : Bundle for the piano tuner : { Design customized card ( TPG ) , Print customized card ( Cendris ) } Bundle for the startup store : { Design customized card ( Copywriter ) , Print cus - tomized card ( Printer ) , Customized stamp ( TPG ) , Print customized stamp ( Cendris ) , DM - advice ( TPG ) } 4 . 2 Practical usefulness and theoretical reﬂections Applicability of the e 3 service bundling reasoning process in the postal industry The e 3 service reasoning steps that we applied to a simple ISP - example ( see section 3 . 5 ) also apply for a different case study : Finding bundles of mailing services for SMEs . This we observe especially on the basis of the reasoning process , where two SMEs that started with different needs for their mailing services also ended up with bundles that realistically ﬁt with these different needs . A basic bundle with a printed A5 - sized card was proposed to the piano tuner who mainly had a functional interest in his mailing , whereas the startup store , who was interested in letting his mailing stand out , was proposed a more elaborate bundle of mailing services , including customized stamps , the possibility for multiple card designs and more . To be fair , we did not validate our reasoning process with a domain expert from TPG . This would have been interesting to give the case study more body , since it would at the least provide a practitioner’ s view on ( 1 ) to what extent the proposed reasoning process is useful in practise and ( 2 ) to what extent the bundles proposed at the end of the reasoning process reﬂect the needs started with . Too much emphasis on supply - side characteristics in the customer perspec - tive service catalogue We observe that many concepts relevant from a supplier 82 Applying e 3 service to practical business cases perspective are modelled on the customer perspective also . For example , when we assume that a customer is mainly interested in the value provided by a direct mail service , it seems not so relevant that TPG and printers can actually provide these services . Yet , the consideration that TPG and the printers provide direct mail services is depticted in our customer perspective service catalogue ( ﬁgure 4 . 1 ) . So , there seems to be too much overlap between the customer and supplier per - spective ontology . We shall discuss this section 5 . 3 . 3 , where we analyze ( 1 ) why this overlap exists , and ( 2 ) how the current customer perspective ontology can be adjusted to address this mix up of perspectives . In sum , we ﬁnd that : • The e 3 service reasoning process can also be used to reason about postal ser - vices . Thereby , its reasoning generalizes beyond the simple running e - mail example from the previous chapter ; • We use supply - side concepts in the customer perspective ontology also . To focus our customer perspective ontology on concepts relevant for the cus - tomer , we therefore require some basic housekeeping . 4 . 3 B2C Case : Bundling of end - customer telecom services Besides offering individual telecom services such as VoIP , e - mail hosting or inter - net access , telecom providers more and more offer their ICT services in a bundle , such as internet access plus VoIP plus e - mail hosting , or internet access plus VoIP . For suppliers , reasons for bundling services include being able to offer a complete solution to the customer , such as VoIP plus internet access satisfying the need for voice communication , but also to create higher switching costs 4 . Currently most bundles of telecom services are delivered as ready - made , ﬁt - for - all packages that satisfy often - encountered customer needs . For example , the bundle ‘VoIP’ plus ‘internet access’ plus ‘e - mail hosting’ plus ’web hosting’ is delivered by our case study partner KPN with the assumption that it satisﬁes the need for voice communcation and provides someone with the most commonly required in - ternet access services . 4 switching costs are all the constraints that a customer encounters when switching from one supplier to another . Constraints include money , such as a penalty fee for cancelling an ongoing contract , but also the time that it takes to ﬁnd a replacement service from another provider . B2C Case : Bundling of end - customer telecom services 83 Being generic however , a bundle might contain functionality that a customer is not interested in , but which nonetheless has to be paid for . In our example , the cus - tomer might for instance be interested in voice communcation and internet access only , and not so much in web space . Still , web space is included in the total bundle price . Additionally , a pre - packaged bundle limits the choice of individual services . In our example , the customer might have an interest in e - mailing , but not in the speciﬁc e - mail service from the provider included in the bundle , due to e . g . a limited hosting space or a limited spam ﬁlter . For this case study , we explore the concept of generating multi - supplier bundles of telecom services automatically and on the ﬂy , starting from a customer need . The idea is that such bundles more closely ﬁt with speciﬁc customer needs than do generic bundles , in the sense that ( 1 ) they contain little unnecessary functionality , only services that satisfy the stated needs , and ( 2 ) they contain services that best ﬁt the entered preferences , instead of services coming from predeﬁned suppliers . Please note that this case is a more extensive version of the running VoIP - example that we used in chapter 3 . To avoid repeating ourselves , we will therefore not extensively discuss how to build catalogues of telecom services , nor how to reason with these . Instead , we will brieﬂy recapitulate the example from chapter 3 and mainly focus our discussion on additional theoretical considerations , such as the role of status - related needs instead of functional needs . Additionally , we provide some reﬂections from our case study partner KPN . 4 . 3 . 1 Case study setup We created catalogues of ISP services and validated these with an enterprise ar - chitect from our case study partner KPN . For creating the catalogues , we ( 1 ) read publically available documentation from the KPN website and internal documen - tation , and ( 2 ) had interview rounds with the enterprise architects from KPN who were responsible for managing the ﬁt - for - all service bundles that KPN currently offers . We validated the catalogues of ISP services in a fashion similar to that of TPG . Thus we explained the modelling techniques used , and simultaneously validated and developed the catalogues of ISP services together with the domain expert . Similarly to the TPG case however , KPN unfortunately had insufﬁciently time to fully validate the results from our case study . This was mainly due to the con - stant re - organization at the time the case was carried out . Actually , over time , the 84 Applying e 3 service to practical business cases researchers carrying out this case had interviews with three different persons that occupied the same position of Enterprise architect . KPN was interested , but simply had other priorities than cooperating intensively with academe . 4 . 3 . 2 Creating a customer perspective service catalogue In this section , we brieﬂy recapitulate how we build a customer perspective service catalogue of ISP services . We will focus upon inclusion of status - related needs . For reference , the catalogue can be found in ﬁgure 4 . 3 . Please note that we already have a supplier perspective catalogue of ISP services from the running example used in chapter 3 ( see ﬁgure 3 . 8 ) . Therefore , we will not dicuss how to create a supplier perspective catalogue of ISP services again . Populate the service catalogue with demands and ﬁnd the beneﬁts contained within them We add supplier - speciﬁc ISP - services , such ‘e - mail hosting’ and ‘spam ﬁlter’ from the supplier KPN , and ‘e - mail hosting’ from the supplier Syl - cona to the customer perspective service catalogue as demands . Next , we elicit the beneﬁts ( valuable properties ) of demands . For example : ‘mailbox size = 100MB’ and ‘web - based e - mail access’ are beneﬁts for the demand ‘e - mail hosting’ from KPN . Derive wants Wants for the ISP - case are ‘VoIP’ , ‘Customized domain’ , ‘Spam ﬁlter’ and ‘E - mail hosting’ . These wants inherit the beneﬁts from demands . For example , the want ‘e - mail hosting’ inherits the beneﬁts ‘mailbox size = 20 MB’ and ‘mailbox size = 100 MB’ from the demands ‘E - mail hosting ( KPN ) ’ and ‘E - mail hosting ( Sylcona ) ’ respectively . For reference , see the customer perspective service catalogue in ﬁgure 4 . 3 . Using consequences to show how beneﬁts contribute to satisfying a functional need Next , we ﬁnd consequences for the beneﬁts from the ISP wants by means of laddering ( see section 3 . 3 ) . As discussed in 3 . 2 . 2 , we use the value derivation framework from Holbrook to aid in laddering . This framework allows us to think about the different ways in which a service can be valuable . For example , consider the application of two valuations from Holbrook to our small ISP - case in chapter 3 : ‘Efﬁciency’ , to express a func - tional value such as ‘access mail at any site with connectivity’ , and ‘Excellence’ , to express a qualitative value such as having a ‘small mailbox’ . B2C Case : Bundling of end - customer telecom services 85 Demand Want E - mailing ability value = POP , IMAP Spam reduction value = managed Call to mobile Call to fixed lines Access mail at any site with connectivity Voice mail Increasedirect Communicationpossibilities Possessing a gadget Local access to mail Increaseindirect communicationpossibilities Need Reduce unwanted e - mails Web - based e - mail access E - mail hosting Spam filter VOIP Have voice - mail Increase social stature Cost - effectivecalling [ efficiency ] Number recognition See who is calling KPN E - mailing ability value = POP , IMAP Customized domain value = . nl extension Web - based e - mail access E - mail hosting Sylconia [ efficiency ] [ efficiency ] [ efficiency ] [ status ] [ efficiency ] C / E E - mailing ability Web - based e - mail access Spam reduction Call to mobile Call to fixed lines Voice mail Number recognition Personalizationof e - mailing Customizeddomain [ status ] Customized domain C / E E - mail hosting VOIP Spam filter . . . Customized domain Mailbox size = 100 MB Medium - size mailbox [ Excellence ] Mailbox size = 100MB Mail box size = 20 MB Call to mobile Call to fixed lines Voice mail Provide VOIP Skype Call via VoIP Call via VoIP Call via VoIP Small - size mailbox [ Excellence ] Mailbox size = 20MB Figure 4 . 3 : customer perspective service catalogue , including status needs 86 Applying e 3 service to practical business cases In this extended ISP - case , we show that other value - derivations can also be im - portant . In the case of VoIP , one such value derivation is of particular importance : ‘status’ . When we look at the service catalogue from ﬁgure 4 . 3 , we ﬁnd for in - stance that calling via VoIP can also be valuable because that the customer wants to possess a gadget . Also , personalizing an e - mail address through a customized domain can be perceived as status - related . Thus we ﬁnd for the want and beneﬁt ‘customized domain’ the consequence ‘personalization of e - mailing’ . Finally , we deﬁne needs by asking for each consequence : Why would someone ﬁnd this interesting ? As such , we derive the ( status - related ) need ‘Increase so - cial stature’ for the consequences ‘Possessing a gadget’ and ‘Personalization of e - mailing’ and the ( functionally related ) need ‘Increase ( in ) direct communication possibilities’ . 4 . 3 . 3 Reasoning about ISP ontology instantiations In this section , we will brieﬂy illustrate how to use the customer and supplier per - spectives service catalogues ( ﬁgure 4 . 3 and 3 . 8 ) for reasoning about ﬁnding bun - dles of ISP - services based upon customer needs . We imagine that there are two different end customers that are both interested in increasing their communication possibilities : • A student , who is seeking an alternative for the relatively expensive mobile phone and who wants a private e - mail address besides the one provided by his college . • A yup that , besides increasing his communication abilities , mainly wants to show that he is a frontrunner when it comes to employing technology in everyday life . Step 1 : Select need , derive initial set of wants satisfying need The student starts at ( 1 ) the need of communicating directly to search for an alternative for the mobile phone , and ( 2 ) at the need of communicating indirectly where he expects to ﬁnd an e - mailing service . The yup , besides increasing his communication ca - pabilities , mainly wants to employ technology to increase his social stature . For the student and the yup , we have now found two different sets of needs : ‘increas - ing ( in - ) direct communication’ for the student , and ‘increasing social stature’ and ‘increasing ( in - ) direct communication’ for the yup . B2C Case : Bundling of end - customer telecom services 87 From the service catalogue ( ﬁgure 4 . 3 ) , we ﬁnd the wants ‘E - mail hosting’ , ‘cus - tomized domain’ and ‘VoIP’ for the yup , and ‘e - mail hosting’ and ‘VoIP’ for the student , since these wants satisfy their respective needs . Outcome of this step : The wants ‘Customized domain’ , ‘E - mail hosting’ and ‘VoIP’ for the yup . The want ‘E - mail hosting’ and ‘VoIP’ for the student . Step 2 : Find consequences , request customer to score consequences We ask the student and the yup to score the consequences for the found wants . Both customers are requested to score consequences for the want ‘VoIP’ . The stu - dent scores ‘cost - effective calling’ as a must - have since this was his primary in - terest for acquiring VoIP , and ‘have voice mail’ as a should - have because this is functionality he is already used to from his traditional phone subscription . We as - sume the student scores ‘see who is calling’ as a could - have . Finally , the student scores ‘possessing a gadget’ as does not matter , since this is not why he is interested VoIP . Also , both customers score consequences from the want ‘E - mail hosting’ . The student scores ‘local access to e - mail’ as a ‘must - have’ , ‘access at any site with connectivity’ as a should - have and ‘small mailbox’ as does not matter . The yup scores ‘local access to e - mail’ as a must - have and considers ‘access at any site with connectivity’ to be a should - have feature . Finally , he scores ‘small mailbox’ as does not matter . The yup scores ‘possessing a gadget’ as a must - have , since this is his primary reason for acquiring the VoIP service . Finally , the yup is scores the consequence ‘personalization of e - mailing’ from the want customized domain as a must - have . Outcome of this step : Consequences student : Must - haves : { ‘Cost - effective call - ing’ , ‘Local access to e - mail’ } , Should - haves : { ‘Access mail at any site with con - nectivity’ } , Could - haves : { ‘See who is calling’ } Does not matter : { ‘Possessing a gadget’ , ‘Small mailbox’ } . Consequences yup : Must - haves : { ‘Local access to e - mail’ , ‘Possessing a gadget’ , ‘Personalization of e - mail’ } , Should - haves : { ‘See who is calling’ , ‘Have voice mail’ } , Does not matter : { ‘Cost - effective calling’ } . Step 3 : Score beneﬁts Next the beneﬁts from the wants , such as ‘mailbox size’ , inherit the importance scores from the consequences . For example : For the student , the beneﬁt ‘mailbox size = 20 MB’ receives the importance score does not matter , because the underlying consequence ‘small mailbox’ was also scored as does not matter . 88 Applying e 3 service to practical business cases Forthe beneﬁts , we assume that the student and the yup both change ‘call to ﬁxed lines’ ( must - have , inherited from the consequence cost - effective calling / possessing a gadget ) to a could - have since most persons they keep in contact with have a mobile phone . For both , the remaining beneﬁts remain the same . Thus , they both keep the importance scores inherited from the consequences . Outcome of this step : Beneﬁts student : Must - have : { ‘E - mailing ability’ , ‘Call to mobile’ } , Should - haves : { ‘Web - based e - mail access’ , ‘Voice mail’ } , Could - haves : { ‘Number recognition’ } , Does not matter : { ‘Mailbox size = 100MB’ , ‘Call via VoIP’ } Beneﬁts yup : Must - haves { ‘call via VoIP’ , ‘Mailbox size = 100 MB’ , ‘E - mailing ability’ } , Should - haves : { ‘Call to ﬁxed lines’ , ‘Number recognition’ , ‘Voice mail’ } , Does not matter : { ‘Call to ﬁxed lines’ , ‘Call to mobile’ } . Step 4 : Find and score value - enhancing consequences and beneﬁts For the student , we ﬁnd the value - enhancing wants ‘Customized domain’ and ‘Spam ﬁl - ter’ for the basic want ‘E - mail hosting’ . Next , the student decides upon inclusion of these wants by scoring their value - enhancing consequences . These consequences indicate why the want is valuable in combination with the want already scored in step 3 . For the value - enhancing want ‘Customized domain’ , we ﬁnd the conse - quence ‘personalization of e - mailing’ ( see ﬁgure 4 . 3 ) . We assume that the student scores this as Does not matter since he is mainly interested in acquiring e - mail functionality . For the value - enhancing want ‘Spam ﬁlter’ , we ﬁnd the consequence ‘Reduce unwanted e - mails’ . We assume that the student scores ‘Reduce unwanted e - mails’ as a should - have . For the yup , we have so far scored a consequence from a value - enhancing want : ‘Customized domain’ . As we see in the service catalogue , a customized domain is in a Core / Enhancing relationship with the want e - mail hosting . This means that , conform our discussion of the supply - side ontology ( section 3 . 2 . 3 ) , e - mail hosting is required as a basic want to also acquire a customized domain . Thus the yup is asked to score the consequences from the basic want ‘E - mail hosting’ also : We assume that he scores ‘access mail at any site with connectivity’ and ‘local access to e - mail’ as must - haves , and ‘small mailbox’ as does not matter . Since the yup has now also scored the consequences for the want ‘E - mail hosting’ , we ﬁnd also the value - enhancing want ‘Spam ﬁlter’ and ask him to score its con - sequence ‘Reduce unwanted e - mails’ . We assume that he scores this consequence as a should - have . Assuming that neither actor changes the importance scores that the underlying ben - eﬁts inherit from these consequences , we arrive at the list of additional beneﬁts and B2C Case : Bundling of end - customer telecom services 89 their importance scores below . Outcome of this step : Beneﬁts student : Should - haves : { ‘Spam reduction’ } , Does not matter : { ‘Customized domain’ } . Beneﬁts yup Must - haves : { ‘E - mailing ability’ , ‘Web - based e - mail access’ } . Should - haves : { ‘Spam reduction’ } , Does not matter : { ‘mailbox size = 100 MB’ } . Step 5 : Generate alternative service bundles For a selection of ISP services , the bundling steps are presented in table 4 . 2 . Here , some observations are : • No bundle containing the service ‘Customized domain’ is generated for the student , because the beneﬁt ‘Customized domain’ was scored as ‘does not matter’ . As such , this beneﬁt was not used as input for the bundling reason - ing process . • Any bundle containing both the services VoIP ( Skype ) and VoIP ( KPN ) is rejected because , according to the service catalogue , ( 1 ) the consequences from the service VoIP ( KPN ) are a subset of the service VoIP ( Skype ) and ( 2 ) VoIP ( KPN ) does not provide any consequences additional to VoIP ( Skype ) . • In the last step , any bundle containing the service element ‘VoIP ( KPN ) ’ is supplemented with the service element ‘IP - access ( KPN ) ’ due to the bundling dependency between e - mail hosting ( KPN ) and IP - access ( KPN ) as deﬁned in the supplier perspective ISP - services catalogue ( ﬁgure 3 . 8 ) . Outcome of this step : The ( partial ) unordered set of bundles of ISP services : For the yup : • { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , IP - ac - cess ( KPN ) } • { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , Spam ﬁl - ter ( KPN ) , IP - access ( KPN ) } • { VoIP ( Skype ) , Customized domain ( Sylcona ) , e - mail hosting ( Sylcona ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } For the student : • { VoIP ( KPN ) , e - mail hosting ( KPN ) , IP - access ( KPN ) } • { VoIP ( KPN ) , e - mail hosting ( KPN ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } • { VoIP ( Skype ) , e - mail hosting ( Sylcona ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } 90 Applying e 3 service to practical business cases Step ( cf . steps in ﬁgure 3 . 10 ) Yup Student Use desired bene - ﬁts to ﬁnd individ - ual services VoiP ( KPN ) , VoIP ( Skype ) , Customized do - main ( Sylcona ) e - mail hosting ( KPN ) e - mail hosting ( Sylcona ) e - mail hosting ( KPN ) , e - mail hosting ( Sylcona ) , VoiP ( KPN ) , VoIP ( Skype ) Generate all pos - sible combinations of found services { VoIP ( KPN ) } , { VoIP ( KPN ) , Customized do - main ( Sylcona ) , e - mail host - ing ( KPN ) } , { VoIP ( KPN ) , VoIP ( Skype ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) } { VoiP ( KPN ) } , { VoIP ( KPN ) , VoIP ( Skype ) , e - mail hosting ( Sylcona ) } , { VoIP ( KPN ) , e - mail hosting ( KPN ) } Checking , for each generated bundle , if it satis - ﬁes all must - have consequences . { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) } , { VoIP ( KPN ) , VoIP ( Skype ) , Customized do - main ( Sylcona ) , e - mail hosting ( KPN ) } { VoIP ( KPN ) , VoIP ( Skype ) , e - mail hosting ( Sylcona ) } , { VoIP ( KPN ) , e - mail host - ing ( KPN ) } Remove bun - dles that contain substitutes { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) } { VoIP ( KPN ) , e - mail host - ing ( KPN ) } Reject all service bundles invalid from a supplier perspective { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) } { VoIP ( KPN ) , e - mail host - ing ( KPN ) } Supplement the remaining bun - dles with services necessary for supply - side rea - sons { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , IP - access ( KPN ) } { VoIP ( KPN ) , e - mail host - ing ( KPN ) , IP - access ( KPN ) } Table 4 . 2 : Generating bundles of ISP - services ( sample ) B2C Case : Bundling of end - customer telecom services 91 Step 6 : Rank service bundles Now we apply our MoSCoW - prioritization mech - anism ( section 3 . 5 ) for ranking bundles . In short , this means for any bundles A and B : If bundle A satisﬁes more should - have consequences than bundle B , bundle B will be preferred over A independently of any other consequences satisﬁed by bundle B . For example : For both the student and yup , our reasoning process ranks any bundle with a spam ﬁlter before a bundle that satisﬁes must - have consequences only . This is because such bundles satisfy an additional should - have consequence : ‘reduce un - wanted e - mails’ . Outcome of this step : The ordered ( sub - ) set of bundles : For the yup : 1 . { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , Spam ﬁl - ter ( KPN ) , IP - access ( KPN ) } , { VoIP ( Skype ) , Customized domain ( Sylcona ) , e - mail hosting ( Sylcona ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } 2 . { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , IP - access ( KPN ) } For the student : 1 . { VoIP ( KPN ) , e - mail hosting ( KPN ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } , { VoIP ( Skype ) , e - mail hosting ( Sylcona ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } 2 . { VoIP ( KPN ) , e - mail hosting ( KPN ) , IP - access ( KPN ) } Step 7 : Present the customer with the sacriﬁces of services and an opportunity to change the importance rankings The yup checks the pricing model ( to be detailed in 6 . 1 . 3 ) of the bundle { VoIP ( KPN ) , Customized domain ( Sylcona ) , e - mail hosting ( KPN ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } . We assume he is content with the costs for this bundle . The student deems the same bundle to be too expensive , compared to the bundle that includes the VoIP service from Skype . This is mainly because a ﬁxed monthly fee has to be paid for the VoIP service from KPN , which does not have to be paid for a Skype service . The student thus decides to select the Skype - bundle . Outcome of this step : Bundle chosen by the Yup : { VoIP ( KPN ) , Customized do - main ( Sylcona ) , e - mail hosting ( KPN ) , Spam ﬁlter ( KPN ) , IP - access ( KPN ) } . Bundle chosen by the student : { VoIP ( Skype ) , e - mail hosting ( Sylcona ) , Spam ﬁl - ter ( KPN ) , IP - access ( KPN ) } . 92 Applying e 3 service to practical business cases 4 . 4 Practical usefulness and theoretical reﬂections Applicability of different service valuations Taking into account considera - tions such as status or aesthetics helps with the positioning of service offerings , and thus in ﬁnding different underlying needs that a service offering can satisfy . In our ISP case for instance , we found that someone might acquire VoIP as a gadget , which in turn could contribute to an increase in social stature . This is a different consideration compared to the functional consideration of having voice communi - cation capabilities . When considering however that our goal is to use these needs ultimately in an online questionnaire , some doubts arise as to how often persons would select needs other than those related to the functions and qualities of services . This is especially true for status - related needs , such as ‘increase social stature’ . The point is that despite reﬂecting realistic motivations from end - customers , these are also sensitive issues that someone might not explicitly admit to as being relevant . In literature ( Kotler 2000 ) , we also ﬁnd this in the distinction between a stated need and a secret need . For example : Someone might state that he is interested in VoIP for the cost - effective calling , but might at the same time secretly also be interested is showing to his neighbor that he uses VoIP . However , it is questionable whether such secret needs will be easily admitted to , let alone be made explicit through an online questionnaire . Formalized creation of service catalogue helps in gaining insight in service offering The domain expert from our case study partner KPN declared that our formalized view on services provided him with new insights into what a service actually is . In particular , he liked the idea of distinguishing between a service ( demand ) and a property ( beneﬁt ) thereof by using the criterion that a service is a unit that can be provided on its own commercially , while a property cannot . Actually , the domain expert went as far as asking our permission to distribute a pa - per describing the e 3 service methodology internally , within KPN . To researchers with a technical background , this may seem surprising . A structured approach to services modelling , such as the formalized distinction between a beneﬁt and demand , is usual for them . Therefore , they may expect that such a structured ap - proach to modelling services is also an everyday practice in companies that have a technical background . Yet , from observing internal documentation on services from KPN , we learned that a structured approach to modelling services is actually oftentimes not used . Consider a process diagram that we received from KPN’s enterprise architect , Practical usefulness and theoretical reﬂections 93 which we shall not depict here due to conﬁdentiality reasons . This diagram did not distinguish between parallel and sequential process ﬂows , leaving the actual order of the process open to the interpretation of the reader . Worse still , the pro - cess diagram did not have separate notations for actors , activities and conditions for carrying out activities . As a result , it was oftentimes ambiguous who was re - sponsible for what , what conditions must be fulﬁlled to execute an activity or even which two actors interacted . In contrast , our formal approach to services modelling does take into account sep - arate modelling considerations . As a result , the domain expert stated , it allows for a more structured way of modelling their services knowledge compared to their currently used internal practice of services modelling . In sum , we ﬁnd that : • It is better to exclude sensitive preferences , such as those related to status , from our work and ﬁrst concentrate on the basic valuations function and quality ; • A formal approach to modelling commercial services forces practitioners to structure their service knowledge . This provides them with a better under - standing of their service offerings . Chapter 5 Towards interactive , consequence - based , reasoning This chapter discusses the two key ideas of our discussion so far : ( 1 ) that consequences are a key concept , and ( 2 ) that a needs - driven reasoning process requires customer - supplier interaction to weight positive against negative consequences . In addition , it discusses how to sharpen these ideas such that they are ﬁt for a ( semi - ) automated reasoning . So far , we have discussed two key ideas behind e 3 service : ( 1 ) that consequences are a key concept and ( 2 ) that customer - supplier interaction is required to weight the positive and negative features of a bundle . Both ideas have also been illustrated by the postal industry and ISP - case studies from the previous chapter , where the customer stated her requirements in terms of consequences , and where we further illustrated the trade - off between positive / negative features . The purpose of this chapter is twofold . First , we reﬂect on the two key notions in e 3 service . We summarize what we learned so far and place this in a broader perspective by , for example , comparing the the idea of using customer - supplier interaction to ﬁnd service bundles with related service marketing theories . This is done in sections 5 . 1 and 5 . 2 , which discuss consequences as a key concept and customer - supplier interaction respectively . Second , we discuss how we can sharpen these two notions further such that they allow us to reason about service bundling semi - automatically . This is done in section 5 . 3 . 96 Towards interactive , consequence - based , reasoning 5 . 1 Consequences as a key concept for needs - driven ser - vice bundling Consequences emphasize the valuable outcomes of services Consequences are a key concept in the e 3 service methodology because they reﬂect the chief motiva - tion that consumers have for acquiring services : Their valuable outcomes . Thereby , consequences differentiate themselves from concepts that emphasize analysis of a service itself instead of what is of value of that service . Prominent examples of such concepts are wants and demands ( Kotler 2000 , p . 11 ) and ( Arndt 1978 ) . Wants are ‘oriented to a speciﬁc product ’ ( Kotler 2000 , p . 11 ) while demands are ‘wants for a speciﬁc product backed by an ability to pay’ ( Kotler 2000 , p . 11 ) . As such , both concepts are oriented towards a service itself rather than what is valuable of that service for the customer . The importance of consequences was corroborated further by their application in the e 3 service reasoning process , where consequences served as the primary means for expressing customer interest . Consider the ISP case from section 4 . 3 . Here , a customer could choose an e - mailing service through scoring consequences such as ‘e - mailing capability’ and ‘medium - sized mailbox’ , without having to consider underlying supplier - speciﬁc services such as ‘e - mail hosting’ from the supplier KPN . Consequences allow for gradual speciﬁcation of a need into relevant service attributes Second , consequences suit our research well because they allow for gradually specifying a customer need ( a problem statement or goal , see section 3 . 2 . 2 ) into services by using any number of intermediary abstraction levels . For example : Speciﬁcation of the need ‘communicating with family abroad’ requires only one abstraction - level by using consequences such as ‘e - mailing capability’ and ‘voice communication’ , whereas more complex needs such as - to take an extreme example - ‘leading a happy life’ , require multiple levels of consequence speciﬁcation . Gutman & Reynolds ( 1982 ) refers to this speciﬁcation as laddering . 5 . 2 Service bundling requires customer - supplier interac - tion A key intuition behind the e 3 service reasoning process is that service bundling re - quires customer - supplier interaction . For a set of proposed service bundles , the customer may decide to adjust his / her initialy stated requirements based upon the Service bundling requires customer - supplier interaction 97 constraints from the service bundles . For those adjusted requirements , alternative service bundles with constraints are found , whose constraints could again lead the customer to adjust his / her requirements etcetera . . . This interactive process emphasizes that the decision to acquire a service bundle requires a trade - off between positive features received and sacriﬁces made . After all , to acquire a service bundle , a customer must invest scarce resources such as money or time , which s / he could also have invested otherwise ( akin to the notion of opportunity cost from micro - economic theory ) . In literature , the importance of this trade - off is further emphasized by Woodruff ( 1997 ) and Kotler ( 2000 , p . 11 ) , who both state that customer value of a product is an outcome of weighting the beneﬁts received from consuming a product against the overall cost of that product ( cost in the broader , opportunity cost , sense ) . Assuming that service - speciﬁc sacriﬁces are known only after ﬁnding a service bundle , we thus arrive at a reasoning process that requires customer - supplier interaction to negotiate the constraints attached to service bundles . In ﬁgure 5 . 1 , this intuition is captured by the bi - directional arrow between needs speciﬁcation and the found service bundles . This emphasizes that the constraints imposed by found service bundles inﬂuences needs speciﬁcation . The application of e 3 service to the postal industry ( section 4 . 1 ) and ISP ( section 3 . 5 ) cases further corroborate our intuition of using customer - supplier interaction in the reasoning process . In both examples a customer indicated a feature as a must - have - keep current phone number and designing additional material for the VoIP / Direct Mail example respectively - but decided to refrain from acquiring these features since in both cases , they were deemed too expensive by the customer . So , mapping between a customer and supplier perspective on services is not a trivial task . After all , one ( 1 ) has to translate a customer need structurally into requirements that are speciﬁc enough to ﬁnd services for , while ( 2 ) constraints coming from the ( supply - side ) services have an inﬂuence upon the ( customer - side ) requirements initially stated . When we now turn to services marketing literature , we can make a remarkable observation : Most scholars recognize that customers and suppliers view services differently ( e . g . ( Gr¨onroos 2007 ) and ( Parasuraman et al . 1985 ) ) , but that the actual translation from a customer to a supplier perspective is often left implicit . For example , ( Gr¨onroos 2007 ) points out that customers view services differently than do suppliers , but subsequently fails to address how to reconcile these different views . The same goes for the well - known service quality management framework SERVQUAL ( Parasuraman et al . 1985 ) , which points out that a gap exists between customer expectations of a service and service delivery promised by an organization , but fails to provide a methodology that could aid an organization in bridging the gap between customer and supplier . Implicitly , it seems , most service marketing literature perceive this transformation as a given . 98 Towards interactive , consequence - based , reasoning Service A Specifiedneed Service A , service C , service N Service A , service B Service A Desired consequences Service A , service C , service N Service A , service B All consequences Needs specification Needs specification Service A Specifiedneed Service A , service C , service N Service A , service B Service A Desired consequences Service A , service C , service N Service A , service B All consequences Needs specification Needs specification Figure 5 . 1 : Projection versus customer - supplier interaction There are only few frameworks that explicitly address both commercial services and perspective transformation . To the best of our knowledge , these are Quality Function Deployment applied to services design ( Dub ´ e et al . 1999 , Stuart & Tax 1996 ) and Serviguration ( Baida et al . 2005 ) . Yet , these frameworks provide a some - what simplistic , projectionist view on perspective transformation . Therein , trans - formation of customer needs to supply - side services is perceived as a one - way pro - jection from customer - perspective knowledge to supplier - perspective knowledge . Customer needs are speciﬁed until they are speciﬁc enough to ﬁnd ( supply - side ) service ( attributes ) for , services are found and the reasoning process terminates . In ﬁgure 5 . 1 , this projectionist intuition of service bundling is represented by the uni - directional arrow from needs - speciﬁcation to the service bundles . 5 . 3 Elaborating on consequence - based , interactive reason - ing We learned so far ( 1 ) that consequences are a key concept for ﬁnding bundles of services based upon customer needs and ( 2 ) that reasoning about needs - driven service bundling requires customer - supplier interaction . This section explores how we can further build upon these considerations . 5 . 3 . 1 Incrementally creating service bundles In the reasoning process ( ﬁgure 3 . 9 ) we see that customer - supplier interaction only happens when all requirements have been stated by the customer . Thus , require - ments not only related to basic functionality , such as ‘voice communication’ , but also requirements that are value - enhancing towards the basic functionality , such as the requirement ‘keep current phone number’ for ‘voice communication’ . In hidsight however , it seems more appropriate that customer - supplier interaction happens for each type of requirement under consideration . In that manner , one Elaborating on consequence - based , interactive reasoning 99 incrementally creates a service bundle , and relies on customer - supplier interaction each time that a service added to the service bundle . There are two reasons for this : • Pragmatism of intermediate feedback Currently , the customer ﬁlls in a ﬂat list of requirements that our reasoning process uses to generate service bundles . In essence , this is a crude process of trial - and - error . If the customer generates service bundles only at the end , the outcome could be that the basic requirements were too expensive to fulﬁll to start with , rendering the value - enhancing requirements irrelevant with the result that the customer has to score requirements from scratch . It would be better to have more of a directed search by ﬁnding service bun - dles for one type of a requirement at a time : First , by agreeing on a service bundle for the basic requirements , and then by incrementally building on this for each value - enhancing requirement . • Computational efﬁciency : Directed search versus trial - and - error A directed search also provides for computational efﬁciency , because ( 1 ) one only ﬁnds service bundles for value - enhancing requirements when it is rele - vant to do so , and ( 2 ) one agrees upon a basic bundle that is then gradually expanded further with value - enhancing services . This is relevant because the agreed upon bundle reduces the space of possible bundling relations that one has to consider when generating service bundles . Thus , it would be pragmatic to employ customer - supplier interaction more fre - quently to our reasoning process to gradually create a service bundle . 5 . 3 . 2 Supporting computational reasoning by Problem Solving meth - ods To support the claim that we can reason about service bundling ( semi - ) automatically , we need to ensure that our reasoning process can be made computational . This re - quires us to formalize the reasoning process , going beyond guidelines such as ” we need customer - supplier interaction more often” or ” constraints from solutions in - ﬂuence requirements” . These are useful considerations no doubt , but too vague to implement in a software reasoner . The computer science community can aid us in this formalization , because this is exactly what they concern themselves with : To formally represent a ( reasoning ) problem , so that the computer can do something with it . In particular , the notion 100 Towards interactive , consequence - based , reasoning of Problem Solving Methods is interesting , because these concern themsemselves with different types of reasoning behavior . Problem Solving Methods ( PSMs ) are a family of methods that describe generic reasoning behavior , independently of a speciﬁc application task ( Schreiber 2000 ) . ‘Conﬁguration’ , for example , is an often - used PSM . A conﬁguration task can be ( informally ) described as ” a special case of design activity , where ( 1 ) the arti - fact being conﬁgured is assembled from instances of a ﬁxed set of instances of well - deﬁned component types and ( 2 ) components interact with each other in pre - deﬁned ways” ( Sabin & Weigel 1998 ) . This sounds a bit abstract , but when ( 1 ) further speciﬁed 1 and ( 2 ) extended with task - speciﬁc knowledge , its generic rea - soning behavior can be used to conﬁgure anything , from elevators and computers ( Stumptner 1997 ) to bundles of commercial services ( Baida et al . 2005 ) . Thus , we aim for using a PSM as a skeleton , to guide us in the development of the reasoning process . The advantage of this is twofold . First , the reasoning be - havior described by PSMs has been well studied in numerous cases , ranging from elevator and computer design to classifying scientiﬁc papers ( ten Teije et al . 2004 ) and making a diagnosis based on medical images ( Grimnes & Aamodt 1996 ) . As a result , PSMs provide us with a set of well - researched types of reasoning behavior that prevent us from having to reinvent the wheel , similar to conceptualizing busi - ness literature for ontology development ( see section 3 . 1 . 2 ) . Second , PSMs allow for generalization . Following a generic methodology for developing the reasoning process makes it easier to compare our reasoning process to others that follow the same methodology . Scientiﬁcally , this comparison is more interesting than ad - hoc theory development . So , what PSM would be appropriate to explore further ? Returning to the discus - sion of our reasoning process thus far , we ﬁnd that two considerations are of par - ticular importance ( 1 ) The constraints from service bundles inform the customer requirements . Thus , there is a kind of feedback - loop in our reasoning process ( 2 ) a service bundle should be created incrementally , not in one reasoning step . The PSM Propose Critique Modify ( PCM ) seems to ﬁt well with these . It ﬁts well with the idea of a feedback loop , because it emphasizes that a solution initially found ( Proposed ) , may not hold up and that as such , some modiﬁcation is required . Actu - ally , we modify requirements and solutions . As we shall discuss more extensively in section 6 . 4 this is different from most PCM - based methods , whereby modiﬁca - tion happens mostly to solutions . Also , it ﬁts well with the idea of incrementally creating a service bundle because PCM allows for generating partial solutions and 1 There are different ways to ”ﬁll in” a conﬁguration task . ( Sabin & Weigel 1998 ) , for example , distinguishes between rule - based , model - based and case - based conﬁguration . Elaborating on consequence - based , interactive reasoning 101 building on these ( Chandrasekaran 1990 ) . Here , the idea is that partial , intermedi - ate , solutions guide the process of further building on these intermediate solutions , so that one moves more efﬁciently through the solution space . 5 . 3 . 3 Ontology clean - up So far , we have discussed that consequences are a key concept in e 3 service . How - ever , this is insufﬁciently reﬂected in our customer needs ontology . Currently , a consequence is simply one of many other concepts , such as beneﬁt , beneﬁt range and value derivation . The purpose of this section , therefore , is to analyze how we should conceptualize customer needs such that consequences play a central role . Removal of concepts relevant from a supplier perspective We developed our customer needs ontology within the conﬁnes of the need / want / demand framework , because it seemingly provided a straightforward way of framing the task of a sales - person : To direct a customer from a need towards a want and , ultimately , a demand for a speciﬁc product . Within this frame of needs / wants / demands , was the idea , we could then use consequences to simulate the guidance from a need to demand and introduce other concepts that were also seemingly relevant for reasoning about customer needs . Upon reﬂection however , need / want / demand is product - oriented . It does not focus on the value that the customer receives from consuming a product . Because we developed our ontology within the conﬁnes of need , want , demand we have thus focused our attention too much on characteristics of the services itself , such as its technical properties . As a result , we introduced concepts relevant from a supplier perspective on the customer perspective also . To illustrate , consider the ISP case from chapter 4 . Here , we have e - mail services from the suppliers KPN and Sylcona that appear , in line with our conceptualization , in the customer perspective service catalogue as demands . Furthermore , properties of these mailing services , such as ‘e - mailing ability : IMAP , POP’ appear in the customer perspective catalogue as beneﬁts . Observe from this case that the modeled concepts are supplier - oriented . What has been modelled here are services , such as e - mail hosting , and their technical properties , such as the mailing - protocols used ( IMAP and POP ) , but not what is valuable for the customer . In summary : By developing our customer ontology within the conﬁnes of need want demand , we have mixed up the initial distinction between a customer and 102 Towards interactive , consequence - based , reasoning supplier perspective on services . Thus , some basic housekeeping is required to analyze which of the modelled concepts are relevant from a supplier perspective and thus should be removed from the customer perspective . These concepts are : ( 1 ) the demand , because these actually represent the supplier - speciﬁc services ( 2 ) the beneﬁt and beneﬁt range , because these represent the technical service properties of the services modelled on the supplier perspective . Different types of consequences In the customer perspective ontology , we link service properties ( ‘beneﬁts’ ) to the value they realize ( ‘consequences’ ) via the value - derivation concept . This concept expresses the different valuations a cus - tomer can attach to consuming a service that contains these properties . The idea of having different valuations for a service seems sound . We ﬁnd it in literature ( Holbrook 1999 ) , but also in the cases thus far ; For example , the yup from our ISP - scenario acquired VoIP not only for cost - effective calling ( a functional valuation ) , but also for possessing a gadget ( a status valuation ) . We can however also represent these different valuations without having to rely on the additional concept ‘value derivation’ . This can be accomplished by intro - ducing different types of consequences . Instead of having a consequence with the ‘value - derivation’ ‘functional’ or ‘quality’ , we would then have a ‘functional con - sequence’ or ‘quality consequence’ . The advantage of this is twofold : ( 1 ) it further focuses our ontology on consequences , which is in line with our claim that con - sequences are the key concept in the customer needs ontology ( 2 ) it reduces the complexity of the ontology . Relating consequences Consequences often do not exist in isolation from other consequences : They can be related to , or grouped under a common denomina - tor with , other consequences . A prominent illustration of this is actually problem speciﬁcation through consequences . One or more consequences specify an abstract consequence , which are in turn speciﬁed by other consequences etcetera . . . until a consequence is sufﬁciently speciﬁed to be matched to a speciﬁc service . In other words : A problem speciﬁcation - relation may exist between consequences . Other prominent relations are a dependence ( e . g . a ‘small mailbox’ cannot exist in its own right . It depends on an ‘e - mailing capability’ ) and grouping of con - sequences ( e . g . ‘small mailbox’ and ‘large mailbox’ logically belong under the common denominator ‘ mailbox size’ ) . Thus , when modifying our ontology with consequences as a central concept , we should take into account that consequences can be related to each other . Summary 103 5 . 4 Summary In this chapter , we have discussed that ( 1 ) consequences are key in a conceptual - ization of customer needs and ( 2 ) that using customer - supplier interaction seems appropriate to reason about need - driven services bundling , to take into account service sacriﬁces . Following this discussion , we explored improvements to the current ontology and reasoning process . We discussed ( 1 ) an ontology clean up , to reﬂect the idea of con - sequences as a central concept , and ( 2 ) using customer - supplier interaction more often , to create service bundles incrementally . These improvements are imple - mented in the next chapter . Chapter 6 Adding customer - supplier interaction to e 3 service This chapter focuses on customer - supplier interaction being key in the e 3 service reason - ing process . One of the key points of this chapter is that our reasoning process shares characteristics with the Problem Solving Method Propose - Critique - Modify , yet that it also differs on one major point : The modiﬁcation of requirements . Parts of this chapter have been published earlier . The e 3 service customer perspective on - tology ( section 6 . 1 . 1 ) and e 3 service reasoning process ( section 6 . 2 ) have appeared in Pro - ceedings of the International Conference on Enterprise Information Systems 2009 ( ICEIS 2009 ) ( de Kinderen et al . 2009 b ) and in Revised Selected Papers of the Future of the Internet Symposium 2008 ( FIS 2008 ) ( Gordijn et al . 2008 b ) . In the previous chapter , we discussed two required modiﬁcations with respect to e 3 service . First , the ontology should be simpliﬁed with respect to the con - cepts beneﬁt , beneﬁt range and adds - value - pair . Second , we argued that customer - supplier interaction should happen for each type of requirement , so that a service bundle can be build up gradually instead of using this interaction only at the end of the reasoning process . In this chapter , we discuss a modiﬁed version of our needs ontology ( section 6 . 1 ) . Subsequently , we discuss the e 3 service reasoning process and compare this process to the Problem Solving Method Propose - Critique - Modify ( PCM ) ( section 6 . 2 ) . Thereafter , section 6 . 3 provides a detailed discussion of the e 3 service reasoning process . Finally , section 6 . 4 compares the e 3 service reasoning process to other PCM - based methods . 106 Adding customer - supplier interaction to e 3 service Specified _ by Depends on Core enhancing 1 . . . N 0 . . . N 0…N Functionalconsequence Contained in 0…N Scale 0 . . 1 Has 0 . . . N Optional bundling Want Quality consequence Need 0 . . . N Consists of Has 1 . . . N Has 0 . . . 1 Core enhancing 0 . . . N Optional bundling Consequence nominal ordinal interval ratio 0 . . . N Figure 6 . 1 : The e 3 service customer perspective ontology 6 . 1 The e 3 service ontology This section discusses the modiﬁed e 3 service supplier and customer ( sub - ) ontologies . Additionally , to further elaborate upon the notion of service constraints , we discuss an ontology for representing the pricing of service bundles . Note here that some concepts from the customer and supplier perspective ontologies , such as a ‘need’ , have already been discussed in section 3 . 2 . 2 . For the sake of completeness and clarity , we however choose to recapitulate these concepts shortly . We use a run - ning example of a customer who wants to communicate with family abroad , and employs e - mail hosting as a solution to do so . 6 . 1 . 1 The customer perspective ontology In this section , we discuss a modiﬁed version of the e 3 service customer perspective ontology introduced in section 3 . 2 . 2 . The most important changes to the customer perspective ontology are ( 1 ) the removal of supply - side concepts such as beneﬁts and beneﬁt ranges ( 2 ) the focus on consequences , by introducing different types of consequences ( functional and quality consequences ) and relations between conse - quences ( such as one consequence being value - enhancing towards another conse - quence ) . The e 3 service ontology 107 Need . A need represents a problem statement or goal , independently from a so - lution direction ( Arndt 1978 ) . EXAMPLE : A customer may have a need ‘communicate with family abroad’ . This need does not include a notion of a solution yet , as nothing is stated about how the communication will be done . Consequence . A consequence is anything that results from consuming ( a com - bination of ) valuable service propertie ( s ) ( Gutman & Reynolds 1988 ) . • Functional consequence . A functional consequence represents the func - tional goal that can be achieved through consumption of a service that has a certain valuable property . EXAMPLE : A functional consequence from the want ‘electronic mail’ is ‘send and receive text’ . • Quality consequence . A quality consequence expresses qualitative proper - ties of other , e . g . functional , consequences in customer terminology . Be - cause it expresses the qualitative properties of another consequence , a quality consequence cannot be acquired separately : It always depends on ( a relation between consequences explained below ) another type of consequence . EXAMPLE : The consequences ‘small mailbox’ and ‘large mailbox’ are qual - ity consequences for the functional consequence ‘send and receive text’ . Relations . • Speciﬁed by . A need is speciﬁed by zero or more consequences . The conse - quences - as results of a service - show how a need is satisﬁed . EXAMPLE : The consequences ‘send and receive text’ and ‘hear and speak voice’ are ways to satisfy the need ‘communicate with family abroad’ . • Core Enhancing . One or more consequences can be value - enhancing to a core consequence . As a pre - requisite for acquiring the enhancing conse - quence , the core consequence must ﬁrst be acquired . EXAMPLE : The consequence ‘decrease reception of unwanted text mes - sages’ can add value to the consequence ‘send and receive text’ and is only relevant in case a solution is chosen that has the capability ‘send and receive text’ 108 Adding customer - supplier interaction to e 3 service • Optional bundling . An optional bundling relation between two conse - quences A and B indicates that consequence B can add value to consequence A , but that consequence B can also be acquired seperately from A . EXAMPLE : The consequence ‘Create personalized e - mail address’ can add value to the consequence ‘send and receive text’ . • A consequence depends on one or more other consequences . This rela - tion states that one consequence cannot be acquired without another con - sequence . EXAMPLE : ‘Use at any site with connectivity’ and ‘access with pre - conﬁgured mail - client’ are two consequences that indicate the location from where ‘send and receive text’ can be used . • A consequence may consist of one or more other consequences . Such conse - quence laddering ( Gutman & Reynolds 1988 ) can be used to specify abstract consequences into more concrete consequences until a sufﬁciently detailed consequence is found for which solutions can be offered . EXAMPLE : ‘Send and receive text’ can be speciﬁed by the consequences ‘send text’ and ‘receive text’ . Want . A want is a speciﬁc , supplier - independent solution that is commercially feasible to be provisioned on its own . As a want indicates a solution available in the market , at least one supplier should be willing to provide the solution . Wants , interpreted as supplier - independent solutions , can typically be found in ser - vice taxonomies such as the NAPCS ( Ambler 1998 ) . Relations : • A want has one or more consequences . These consequences are used to state how the want , being a service that can be provisioned commercially by a single supplier , satisﬁes a need . EXAMPLE : The want ‘e - mail’ has the consequence ‘send and receive text’ . As stated earlier , ‘send and receive text’ is a way to satisfy the need ‘com - municate with family abroad’ . • A want is in a Core - Enhancing relationship with zero or more other wants . The Core - Enhancing relationship is used to state that for a certain want A , provided that want A is acquired , there exist zero or more wants B that could add value to A . The Core Enhancing relationship also exists on the level of The e 3 service ontology 109 consequences . However , this relationship also exists on the level of wants as wants actually package sets of consequences available on the market . EXAMPLE : The value - enhancing want ‘spam ﬁltering’ is in a Core - Enhancing relationship with the basic want ‘electronic mail’ , since there is no business logic behind acquiring a spam ﬁlter without an e - mail service . The Core En - hancing relationship between consequences ( discussed previously ) is used to indicate why a spam ﬁlter want adds value to an e - mail want . • A want is in an Optional Bundling relationship with zero or more other wants . The Optional Bundling relationship is used to state that for a cer - tain want A , there exist zero or more value - enhancing wants B . However , as opposed to the core - enhancing relationship , want B can also be acquired separately from want A . EXAMPLE : The want ‘customized domain’ can add value to the want ‘e - mail’ . Similar to the Core Enhancing relationship , the Optionally bundled relationship between two consequences can be used to show why the want ‘customized domain’ adds value to the want ‘e - mail’ . Scale In e 3 service we use the concept of a scale ( also used by software measure - ment , see e . g . ( Garc´ıa et al . 2006 ) ) to group quality consequences of the same type . For example : a scale can group ‘small mailbox’ and ‘large mailbox’ under ‘mailbox size’ . We distinguish between four types of scales ( adapted from ( Garc´ıa et al . 2006 ) ) , where each type adds expressivity to the previous : • Nominal . A nominal scale indicates that a relationship exists between quality consequences , but introduces no ordering or ranking on these consequences . EXAMPLE : ‘Use at any site with connectivity’ and ‘access with pre - conﬁgured mail - client’ are nominal categories that indicate options for email access . The preference for either one depends on the user , so it is not possible to deﬁne a preference scale upfront . • Ordinal . An ordinal scale introduces an ordering on consequences such that it is possible to state that consequence X is better than Y ( but not how much it is better ) . EXAMPLE : When one deﬁnes < = . 2 GB as a ‘small mailbox’ and > 2 GB as a ‘large mailbox’ , one deﬁnes an ordinal scale because while there is a quantiﬁed ordering on the categories ( small versus large ) , the intervals for the unit of measurement ( GB ) differ for each category . 110 Adding customer - supplier interaction to e 3 service • Interval . An interval scale is an ordered scale where intervals between conse - quences at different points on the scale have the same meaning . This means that , as opposed to an ordinal scale , on a scale from 1 to 10 , the difference between 2 and 3 means the same as the difference between 7 and 8 . EXAMPLE : ‘Mailbox size’ is an interval scale when 0 - 1 GB is deﬁned as ‘small mailbox’ and 1 - 2 GB is deﬁned as ‘large mailbox’ . For both conse - quences , the intervals of the underlying quantitative values is 1 GB . • Ratio . Additional to the properties of an interval scale , a ratio scale has an exact deﬁnition of a baseline measure . EXAMPLE : Degrees Celcius is a unit measured on a ratio scale , because there exists an exact deﬁnition of the baseline ( zero ) measure , namely : When water transforms from a liquid to a solid form . Discussion : Using scales , a word of caution Classifying a dataset according to the scale typology is a seemingly straightforward task . On the surface , all that is re - quired for classiﬁcation is analyzing if there is an order from high to low present in the data and if so , whether the intervals between datapoints on the scale remain the same and whether there is a baseline measure . However , Velleman & Wilkinson ( 1993 ) stress that assigning data to a particular scale is not at all that easy . In par - ticular , he points out , assiging a dataset to a scale depends on the type of question you want to ask . To illustrate this point , they ask the reader to imagine a reception where consecu - tively numbered lottery tickets , starting at ‘1’ , are handed out at the door to entering participants . Each participant is also informed of this consecutive numbering . At a certain point in the reception , the winning number is announced : 142 . At ﬁrst , everyone compares his or her own number to the announced number , independently of each other . So here we could perceive the set of lottery tickets to be a nominal dataset . However , next , the person holding the winning ticket counts the number of attendants and shouts : ‘it does not look like there are 142 persons here ! ’ . For that person , the set of lottery tickets is then perceived on a rational scale since s / he took ‘1’ as a baseline measure and counted upwards with intervals of 1 . Yet another classiﬁcation holds for a person with number 50 that estimates how long he should have delayed his arrival to get the winning ticket . For him , intervals are the main concern . Note here that we are not arguing for an exhaustive list of guidelines that should be used when employing scales , since this is not the goal of our research . We do want to emphasize however , that one must exercise caution when using scales to The e 3 service ontology 111 Service property 1… * 1 Contains 0…N 0 . . . N Dependson Excludes 0…N Consists of Quality consequence Functionalconsequence Scale Ordinal Interval Ratio 0 . . 1 Has Nominal 1 . . * Has 1 . . * 1 . . * 0… * 1 0… * Part of 1 Service interface Has 1 1 Supplier Requires Supplies Consequence Kind of 1 . . * Pricing model Service link Starts at Ends at 0… * 0… * Has 0… * Incomingservice port Outgoingservice port 1 0 . . * Belongs _ to 1 Want 0 . . . N 0 . . . N C / E OB Belongs _ to Has 0 . . * Service element Service port Resource 0 . . * Has 0 . . * Has Service bundle 1 BU EX . . . C / S Service dependency Elementary service element 0 . . * 0 . . * 1 . . * 1 . . * Figure 6 . 2 : The e 3 service supplier perspective ontology classify a dataset , and that it is not just a matter of lumping data in a category permanently . 1 For further reading , see especially ( Velleman & Wilkinson 1993 ) , but also ( Briand et al . 1996 ) . 6 . 1 . 2 The supplier perspective ontology In this section , we discuss the most important concepts from the e 3 service supplier perspective ontology ( ﬁgure 6 . 2 ) using the example ICT service in ﬁgure 6 . 3 . For a detailed discussion of this ontology , see ( Baida et al . 2005 ) . Note that part of this section overlaps with the the supplier perspective ontology discussed in section 3 . 2 . 3 . For the sake of completeness , we recapitulate some of these concepts here also . Consequence . A consequence is anything that results from consuming ( a com - bination of ) valuable service properties ( Gutman & Reynolds 1988 ) . Similar to 1 As an extension of argument , the same holds for instantiating ontologies ; What data ( not ) to instantiate depends mostly on matters of context and is by no means a static given . Otherwise , if instantiations were unchanging , it would be rather awkward to conceptualize the notion of scales . 112 Adding customer - supplier interaction to e 3 service Actor Resource Service interface Service port Value activity Consequence Lock - in Fee IP - access No switching of suppliers KPN IP - access fee Internet access Figure 6 . 3 : Example for supply - side concepts : Resources , service ports and ser - vice interfaces . The e 3 service ontology 113 the customer perspective ontology , there exist several supply - side types of conse - quences and of relations between consequences . Since consequences are used both in the customer and supplier perspective of e 3 service , they form the glue between both ontological perspectives . Hence , the concept of consequences is the ontolog - ical as well as reasoning key in matching customer needs to supply - side services on offer . Resource . Resources are units of delivery that can be provisioned in their own right and in a commercially feasible way . EXAMPLE : The service ‘provide IP - access’ produces the resource ‘IP - access’ . Relations in this part of the ontology are : • Realized by : A consequence is realized by zero or more resources . EXAMPLE : The consequence ‘create personalized e - mail address’ is real - ized by the resource ‘customized domain’ . Service property . A service property is a supplier - speciﬁc attribute . The distinc - tion that we make between a service property and a resource is that a resource can be provisioned on its own right and in commercially feasible way , while a property cannot . A property is therefore always part of a resource . Relations in this part of the ontology are : • Realized by : A consequence is realized by zero or more service properties . EXAMPLE : The consequence ‘send and receive text’ is realized by the ser - vice properties ‘protocol = POP3’ and ‘upspeed = 256 kbps’ and ‘downspeed = 512 kbps’ , all provided by the supplier ( say ) KPN . • A service property is always part of a supplier - speciﬁc resource . EXAMPLE : Consider that the service properties ‘upspeed = 256 kbps’ and ‘downspeed = 512 kbps’ from KPN are part of the resource ‘KPN IP access’ . Here , up - and downspeed from KPN can only be delivered in combination with IP access from KPN . 114 Adding customer - supplier interaction to e 3 service Service port . Resources are provided or consumed by service elements via ser - vice ports , represented as arrowheads in ﬁgure 6 . 3 . Service ports are a means of abstracting away from the inner workings of a service element so that one can focus on modelling the ( valuable ) inputs and outputs of a service element . We distinguish between incoming and outgoing service ports : Resources that are required as in - put for a service element are attached to an incoming service port of that element , whereas resources that are produced as output of a service element are attached to an outgoing port of that element . EXAMPLE : The resource ‘fee’ is required input for the service element ‘Provide IP - access’ , thus attached to an incoming service port . The resource ‘Internet ac - cess’ is a positive consequence for the customer from the ‘Provide IP - access’ , thus it is attached to an outgoing service port . Service interface . A service interface states that all resources attached to the service ports in this interface must be exchanged , or none at all . Therefore , a ser - vice interface is an important concept for bridging e 3 service to e 3 - value ( Gordijn & Akkermans 2003 ) . EXAMPLE : For the service ‘provide IP - access’ , a customer will only receive the consequence ‘internet access’ in exchange for the consequences ‘no switching of suppliers’ and ‘KPN IP - access fee’ . Service element . A service element is a product that is commercially offered by a speciﬁc supplier within a market environment . EXAMPLE : In ﬁgure 6 . 3 , ‘Provide IP - access’ is a service element provided by the supplier KPN . Service dependency . Service dependencies are used to model dependencies be - tween service elements . These dependencies are unidirectional , meaning that the dependency between services A and B exists independently of that between B and A . For a detailed description of the service dependencies depicted in ﬁgure 6 . 2 , see section 3 . 2 . 3 . The important point here is that consequences also exist at the supply side . We fur - thermore assume that consequences ensuing from a supply - side service catalogue are expressed in a marketing vocabulary that represents the customer perspective . This is crucial for the match - making process , discussed in section 6 . 2 . The e 3 service ontology 115 Pregenerate possible service bundles using supplier - perspective service depen - dencies Prior to the bundling reasoning process ( to be discussed in section 6 . 2 ) , we pre - generate all service bundles possible from a supplier perspective . These pre - generated service bundles , then , constitute our solution - space to which speci - ﬁed customer needs are matched . To generate the service bundles , we rely on the discussed supplier - perspective ser - vice dependencies . For example , by applying the supply side service dependency C / E ( Internet access ( KPN ) , VoIP ( KPN ) ) , we pre - generate two possible service bundles : { Internet access ( KPN ) } and { Internet access ( KPN ) , VoIP ( KPN ) } . Of course , service bundles should ideally be generated on the ﬂy . Instead of pre - generating all possible service bundles , one would then generate dynamically only those service bundles that satisfy a speciﬁc customer need . The main advantage of this is that one would not have to re - conﬁgure the entire solution space when , for example , suppliers enter or leave the network . However , implementing such dynamic bundling capabilities in software is a de - manding and time consuming task . And more importantly : On their own right , supply - side bundling dependencies do not allow for automatically ﬁnding service bundles for customer needs . Therefore , we opt to ﬁrst show that an automated needs - driven process is possible , and to assume all supply - side service bundles to be pregenerated by applying the work of Baida et al . ( 2005 ) . 6 . 1 . 3 The pricing model ontology A service bundle can be perceived as one or more services that are together sold at a single price ( Guiltinan 1987 ) . Take for example a mobile phone subscription that , for a ﬁxed monthly fee , allows a customer to call 200 minutes for free and send 100 short messages each month . For each extra message send or minute called , the customer then pays a usage based fee . For this bundle a single end - price is calculated , partly based on a ﬁxed fee , partly on a usage - based fee . For the example pricing scheme , calculating an endprice is quite straightforward . All a customer has to do is estimate how many messages s / he sends each month and how many calls are made , and compare this to another subscription that does not contain the notion of a ﬁxed monthly fee in return for a ﬁxed amount of calling minutes and short messages . However , such pricing schemes can be made more complicated quite easily by introducing conditions on the prices set . For example , the 200 calling minutes for a ﬂat fee of our mobile phone subscription might only hold for the ﬁrst three 116 Adding customer - supplier interaction to e 3 service months . Thereafter , it might be reduced to 100 minutes per month . Or it could be that the free calling minutes can only be used at off - peak times in phone trafﬁc : At peak - times in phone trafﬁc , an ordinary usage - based fee could still apply . So , the price setting of bundles can be made quite complicated . Yet , as can be seen from service pricing literature ( Monroe 1990 , Guiltinan 1987 , Tung et al . 1997 ) , no matter how complex the setting of a bundle - price is made the resulting set price is eventually based on a few basic concepts : ( 1 ) the price of an individual service can be ﬁxed , usage - based or a combination of ﬁxed and usage - based , ( 2 ) a service bundle always consists of the prices of the individual services , ( 3 ) a discount might apply to the prices of the individual services in a bundle and ( 4 ) a certain condition might hold on when to apply a certain pricing scheme , e . g . a certain discount . With the assumption that a pricing model always consists of the same basic concepts , we thus can also conceptualize these pricing models . Conceptualizing pricing models is relevant because it allows for a uniform way of representing the price setting of a bundle . Our assumption then is that through this uniform expression , prices of different bundles can be compared more easily by the customer - also because , when made computational , different bundles can be easily compared by letting the customer ﬁll in some basic variables , such as the amount of minutes called to mobile lines each month , and calculating for the customer the price of each bundle based upon these variables . In this section , we provide a conceptualization of two pricing models categories ( 1 ) pricing models of elementary services , and ( 2 ) pricing models of bundles of ele - mentary services . This conceptualization is based on a literature survey on pricing models performed in de Miranda ( 2006 ) . The ( sub - ) ontology is depicted in ﬁgure 6 . 4 . Pricing model elementary service We distinguish four types of pricing models for elementary services : • Flat fee . The customer pays a ﬁxed fee for a service , independently of usage . EXAMPLE : An internet connection with a ﬁxed fee of e 20 per month . • Usage based . The customer pays a fee only for using ( part of ) a service . Thus , the fee paid by the customer is fully dependent on usage of a service . EXAMPLE : Roaming costs , when using your mobile phone abroad . Only in case the phone is used , are these costs incurred . • Two - part tariff . The customer pays a ﬁxed fee plus a usage based fee for a service . The e 3 service ontology 117 EXAMPLE : A VoIP service where you pay a ﬁxed monthly fee of e 20 , plus a usage - based fee of e 0 . 025 per minute called over local landlines . • N - block tariff . This pricing model consists of N usage - based pricing models . For each block the usage entity is the same , but the usage amount paid per entity differs . For example in case n = 2 , that is , 2 usage - based blocks , as long as a certain condition holds , say c1 , the user of a service pays price P1 per usage entity X for block 1 . Then , for a second condition deﬁned on block 2 , the user pays price P2 per usage entity X . EXAMPLE : On the electricity market , you pay price P1 per kWh for hour 1 , price P2 for hour 2 and so on . So , if you want to calculate the price of elec - tricity for 3 hours , and the prices per kWh are e 0 . 034 , e 0 . 038 , e 0 . 032 for hours 1 , 2 , 3 respectively , then the calculation would be : X 1 0 . 034 + X 2 0 . 038 + X 3 0 . 032 ( X n being the kWh of electricity used in a certain hour ) . Pricing model bundle The pricing model of a service bundle consists of the pricing models of the elementary services in this bundle , plus one or more discounts on the outcome of these pricing models . The pricing model of a bundle is attached to the service interface of that bundle . This is because the service interface actually represents the bundling of resources for a certain bundle . We distinguish between two main types of pricing models for a service bundle : • Single discount pricing model . A single discount is applied to the outcome of the pricing models of all elementary services in a bundle . EXAMPLE : For the sake of example , consider the bundle internet connec - tion , VoIP with a single discount of 10 % . For this bundle , the calculation is 90 % ( PM Internetconnection + PM VoIP ) . So when , for a particular month , a cus - tomer calls 300 minutes , then the calculation would be 90 % ( e 20 + e 0 . 025 * 300 ) = e 24 . 85 . • Discount per elementary service . A unique discount is applied to each out - come of a pricing model of an elementary service . So , in contrast to the single discount method where one discount is applied to thge sum of the out - comes of all pricing models of elementary services , a discount is calculated per pricing model of an elementary service . EXAMPLE : We again deﬁne a bundle of our example elementary services internet connection , VoIP , but now with a 15 % discount only on the outcome of the pricing model of the internet connection . The calculation would then be : 85 % ( PM Internetconnection ) + PM VoIP . So say that if , for a particular month 118 Adding customer - supplier interaction to e 3 service Pricing model bundle Pricing model elemen . service discount Single discountPM Discount per elem . service 0…1 0…1 0… * Flat fee Usage based Two - part tariff Usage based formula Flat fee formula 1 1… * 1… * Consists of N - block tariff Consists of Has Has Has Has Service interface Service Port Has 1… * Has1 Figure 6 . 4 : The pricing model ontology , a customer calls 300 minutes , then the calculation would be 85 % ( e 20 ) + e 0 . 025 * 300 = e 24 . 50 . 6 . 2 Adding customer - supplier interaction to the reason - ing process So far , we have discussed ontologies to provide for a formal conceptualization of customer needs , services and pricing models . We now show how to use these ontologies to ( semi - ) automatically reason about needs - driven service bundling . We shall ﬁrst introduce the Problem Solving Method ( PSM ) Propose - Critique - Modify ( PCM ) , since we use this PSM as a frame of reference for our reasoning process . 6 . 2 . 1 Propose - Critique - Modify PCM refers to a family of Problem Solving Methods that are used to design arti - facts . Chandrasekaran ( 1990 ) deﬁnes design as : Adding customer - supplier interaction to the reasoning process 119 ” The design problem is speciﬁed by ( 1 ) a set of functions ( those ex - plicitly stated by the design customer as well as those implicitly de - ﬁned by the domain ) to be delivered by an artifact and a set of con - straints to be satisﬁed and ( 2 ) a technology , that is , a repertoire of components assumed to be available and a vocabulary of relations be - tween components . ” As implied by name , PCM is not a single design method , but a commonly occuring combination of individual reasoning steps ( referred to by Schreiber ( 2000 ) as in - ference tasks ) : Propose , Verify , Critique and Modify . Although the exact order of these reasoning steps may vary , all PCM - based methods share one central premise : They gradually arrive at the ﬁnal artifact by testing proposed solutions ( usually against a ﬁxed set of constraints ) , and revising these solutions if they are unsat - isfactory ( usually , solutions are unsatisfactory if they violate a set of constraints provided upfront ) . A commonly occuring interpretation of PCM , referred to by Motta ( 1999 ) as Complete - Model - Then - Revise , is the control structure depicted in ﬁgure 6 . 5 . Be - low we shall explain this interpretation of PCM , using an e - mail hosting example for illustration purposes . Please note that the e - mail example is merely for illustra - tion purposes , and that there are PCM - characteristics besides the control structure - such as ﬁx strategies - that determine the behavior of a PCM - based method . We shall more extensively discuss this in section 6 . 4 . • Propose Task description : Given user requirements and constraints , gener - ate an initial partial or complete solution . Exit in case of failure to ﬁnd a solution . Proceed with : Verify . EXAMPLE : User requirements : e - mailing capability , large e - mail box , few spam mails , customized domain name . Constraint : Should not cost more e 5 monthly . Proposed solution : e - mail hosting with spam ﬁlter , plus customized domain . Cost : e 6 monthly . • Verify Task description : Checks if the proposed solution violates constraint deﬁned upfront . Proceed with : In case of constraint violation , proceed with Critique . If no constraints are violated , present solution and exit PCM - process successfully . EXAMPLE : Cost of proposed e - mail solution exceeds constraint of e 5 monthly . Thus : Proceed with identifying part of solution that violates constraint . 120 Adding customer - supplier interaction to e 3 service Propose solution End - user Solution space State requirements and constraints Receive solution and terminate PCM - process [ no constraint violation ] Identify culprit Constraint testing Modify solution [ constraint violation ] Propose solution End - user Solution space State initial set of requirements and constraints [ no constraint violation ] Identify culprit Constraint testing Modify solution [ constraint violation ] Consider additional requirements Receive ( partial ) solution terminate PCM - process [ no additional requirements ] [ additional requirements ] Figure 6 . 5 : Control structure of a Complete - Model - Then - Revise interpretation of PCM , adapted from Motta ( 1999 ) . • Critique Task description : Identify the part of the solution that causes the constraint violation EXAMPLE : For the proposed solution , the customized domain costs e 6 monthly . Thus : The customized domain is the culprit . • Modify Task description : Modify the solution with respect to the part caus - ing the constraint violation . Proceed with : Verify . Test the modiﬁed solution against user constraints . If the modiﬁed solution violates the constraints , it shall again be critiqued , modiﬁed and veriﬁed until a solution that satisﬁes all constraints has been found . EXAMPLE : Seeking out an alternative customized domain , while keeping the proposed ad - based e - mail hosting plus spam - ﬁlter solution . The main premise of complete - model - then - revise is to state all requirements and constraints upfront , generate a complete solution ﬁrst , and - if necessary - to repair the solution until no more constraints are violated . Yet not all design problems act under a full , unchanging set of requirements and constraints ( Chandrasekaran 1990 ) . For example , Chandrasekaran ( 1990 ) points out that it may be practical to generate solutions for a partial set of requirements at a time only , to move efﬁciently through the solution space . Or that requirements change over the course of the reasoning process , based upon trade - offs that have to be made . In line with this argument , different combinations of the PCM inference tasks are possible - as long as the main premise holds : To arrive at a solution gradually , by Adding customer - supplier interaction to the reasoning process 121 verifying proposed solutions and , in case of a failure , modifying these while taking into account the part of the solution that causes the failure . With this consideration in mind , let us now discuss the e 3 service reasoning process in line with PCM . 6 . 2 . 2 Needs driven services bundling as PCM Below , we discuss the high - level reasoning steps from e 3 service as presented in ﬁgure 6 . 6 . The discussion is structured according to the task methods of the PSM Propose - Critique - Modify : Propose , Verify , Critique and Modify . We provide ( 1 ) a domain - independent description for each of the PCM - tasks ( 2 ) a domain - speciﬁc description to summarize how this task relates to the e 3 service reasoning process and ( 3 ) the running e - mail example to illustrate the domain - speciﬁc tasks that are carried out . Propose Task Description : Generate an initial partial or complete solution . Exit in case of failure to ﬁnd a solution . Domain speciﬁc implementation : Specify customer requirements , ﬁnd and rank service bundles , present ranked bundles to customer . In the generic reasoning struc - ture depicted in ﬁgure 6 . 6 , the propose - step consists of ‘choose consequences’ and ‘ﬁnd service bundles’ . Case illustration : In ﬁgure 6 . 6 , we see that a customer starts by selecting a need . In our running example , a need may be ‘communicate over a distance’ ( for reference , see the customer perspective service catalogue in ﬁgure 6 . 10 ) . Next , we arrive at the high - level step ‘choose consequences’ . Here , the customer selects which valuable features s / he wants to obtain from a service to satisfy the selected need ( for a discussion on consequences , see sections 5 . 1 and 6 . 1 ) . In our running example , ‘hear and speak voice’ and ‘send and receive text’ are two valuable features that each satisfy the need ’communicate with family abroad’ . Suppose now that the customer selects the consequence ‘send and receive text’ and states ‘95 % guaranteed reception’ as an additional requirement . For a detailed explanation of the step ‘choose consequences’ , see section 6 . 3 . Next , the chosen customer consequences are matched to supplier consequences to ﬁnd service bundles that can provide these consequences . Here , we assume that consequences on the supplier side are deﬁned similarly to consequences on the customer side . So in our running example , the consequences ‘send and receive text’ and ‘95 % guaranteed reception’ also exist on the supplier side . To these , the consequences ‘send and receive text’ and ‘95 % guaranteed reception’ as desired by the customer can then be matched ( see section 6 . 3 , step ‘ﬁnd service bundles’ ) . 122 Adding customer - supplier interaction to e 3 service Supplier Customer Choose need Choose consequences Find service bundles Trade - off positive / negative consequences [ not ok , adjust reqs ] Select bundle [ ] Desired consequences Consequences per bundle [ no bundle found ] [ value - enhancing consequences ] Critique bundle Figure 6 . 6 : The generic reasoning structure of e 3 service Adding customer - supplier interaction to the reasoning process 123 Using the matched supply - side consequences as a starting point , we now derive the service bundles that can satisfy the desired consequences ( the step ‘ﬁnd ser - vice bundles’ ) . So , for instance , the consequences ‘send and receive text’ and ‘95 % guaranteed reception’ are translated into the bundle { e - mail access with SLA ( KPN ) , IP - access ( KPN ) } ( see ﬁgure 6 . 7 ) . This bundle is then proposed to the customer as a possible solution for his requirements . Alternatively , no service bundle may be found for a certain combination of conse - quences . In this case , the e 3 service reasoning process returns to the step ‘choose consequences’ to let the customer decide upon an alternative set of consequences . IP access IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text IP access with SLA IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text Best effort IP - access fee Best effort reception 95 % guaran - teed reception IP - access SLA fee Figure 6 . 7 : Example of a proposed bundle Verify Task Description : Checks if the proposed solution satisﬁes the required properties . Domain speciﬁc implementation : The customer evaluates service bundles by trad - ing of positive and negative consequences . Bundles initially found can be rejected due to the costs incurred . In the generic reasoning structure depicted in ﬁgure 6 . 6 , the verify - step consists of ‘trade of positive and negative consequences’ . Case illustration : The customer is presented with the found bundles and their re - spective consequences . Per bundle , the customer compares what s / he gets from services in terms of value , with what s / he has to give up for the bundle . This comparison is indicated in ﬁgure 6 . 6 by the step ‘trade - off positive / negative con - 124 Adding customer - supplier interaction to e 3 service Positive consequences Priority Negative consequences Priority send and receive text Must IP - access SLA fee Must be low 95 % guaranteed recep - tion Must hosting fee Reasonable Table 6 . 1 : Trading off positive and negative consequence for the bundle { IP - access with SLA ( KPN ) , e - mail hosting ( KPN ) } sequences’ . For the running example , a trade - off for the proposed bundle can be found in table 6 . 2 . 2 . A customer may ﬁnd that the burden of the costs of a service bundle , exceeds the satisfaction of receiving the desired features . Therefore , costly features may receive less priority . For the running example , we see that the customer is not satisﬁed with the IP - access fee that has to be paid for the bundle ( as is indicated by the qualitative label ‘must be low’ in table 6 . 2 . 2 2 ) . Based upon the trade of made , the bundle { e - mail access with SLA ( KPN ) , IP - access ( KPN ) } will now be rejected because it contains a negative consequence that the customer deﬁnitely wants to avoid : The high IP - access fee . The critique - task is used to identify exactly what initial requirement is responsible for the high costs incurred . Critique Task description : When a solution fails to meet the required properties , the critique - steps identiﬁes the sources of failure . Domain speciﬁc implementation : When a service bundle is rejected , the customer can check what speciﬁc resource of a service bundle causes the high costs incurred . In the generic reasoning structure depicted in ﬁgure 6 . 6 , the critique - step consists of ‘critique bundle’ . Case illustration : Consider the critique step for our running example in ﬁgure 6 . 8 . Our reasoning process ﬁnds the culprit by ﬁrst tracing this consequence to the re - source ‘IP - access fee’ . Subsequently , it ﬁnds the service port to which this resource is attached ( the black arrowhead ) . In turn , the port is traced to the service port of the individual service that requires ‘IP - access SLA fee’ as input : ‘IP - access with SLA’ . Using the service interface of the individual service ‘IP - access with SLA’ as a starting point ( the grey box with rounded edges in ﬁgure 6 . 8 ) , the resource 2 ‘must be low’ is a simpliﬁed label the sake of example : as we will see later on , we use quan - titative importance scores from 1 to 10 to indicate importance of a consequence , since quantitative scores are more suitable for ranking bundles . Adding customer - supplier interaction to the reasoning process 125 ‘IP - access’ and , eventually , the consequence ‘95 % guaranteed reception’ is found as the cause of the high costs for the service bundle . IP access IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text IP access with SLA IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text Best effort IP - access fee Best effort reception 95 % guaran - teed reception IP - access SLA fee Figure 6 . 8 : Critique : Identifying source of costs incurred Modify Task Description : Alternative values are ﬁlled in for the requirements that the critique - step identiﬁed as sources of failure . Adjusted solutions are found , which are again veriﬁed and if needed , critiqued and modiﬁed until an acceptable solution is found . Domain speciﬁc implementation : The customer changes the initial requirements , taking into account the feedback from the critique - step . For the changed require - ments , service bundles are again found and veriﬁed by the customer . If needed , the found bundles are critiqued and modiﬁed again until a service bundle has been found that satisﬁes the desired requirements , and does so against acceptable costs . In the generic reasoning structure depicted in ﬁgure 6 . 6 , the modify - step consists of ‘choose consequences’ and ‘ﬁnd service bundles’ . Case illustration : The customer returns to the step ‘choose consequences’ to mod - ify his / her requirements . For our running example , we assume that the customer scores the consequence ‘95 % guaranteed reception’ as an irrelevant consequence and keeps ‘send and receive text’ as a must . Based upon the changed requirements , bundles of services are again generated . A possible outcome then is the bundle 126 Adding customer - supplier interaction to e 3 service in ﬁgure 6 . 9 : This satisﬁes the requirement ‘send and receive text’ , but does not include the consequence ‘95 % guaranteed reception’ . IP access IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text IP access with SLA IP access fee E - mail hosting Hosting fee Hosting fee Send and receive text Best effort IP - access fee Best effort reception 95 % guaran - teed reception IP - access SLA fee Figure 6 . 9 : Bundle initially proposed , modiﬁed with respect to the internet con - nection Propose - Critique - Modify to gradually create a service bundle The customer may decide to acquire a bundle and terminate the reasoning process . Alternatively , s / he may decide to proceed by scoring value - enhancing consequences . This scor - ing of value - enhancing consequences ( indicated by the guard [ value - enhancing consequences ] in ﬁgure 6 . 6 ) entails that the customer can search for services that provide consequences that potentially add value to the basic service bundle already acquired . For our running e - mailing example , a value - enhancing consequence could for example be ‘reduce unwanted e - mails’ . For these value - enhancing consequences the process for ﬁnding service bundles is the same as for basic consequences . In other words : We again rely upon the main steps ‘choose consequences’ , ‘ﬁnd service bundles’ and ‘trade - off feature / opportunity costs’ for ﬁnding service bundles , only now for the value - enhancing consequences . To summarize : Table 6 . 2 . 2 summarizes the comparison between the reasoning steps from e 3 service with the tasks from the problem solving method PCM . The most important points emphasized in this table and in the discussion so far are : ( 1 ) The selection of a service bundle based upon customer needs is inﬂuenced by service constraints . As such , it requires customer - supplier interaction to weight Detailed explanation of the high - level reasoning steps 127 PCM task domain - independent description e 3 service reasoning steps Propose Find initial ( part of ) solution Specify requirements , ﬁnd and rank service bundles , present bundles to customer Verify Check if solution is satisfactory Trade - off positive / negative con - sequences Critique Find culprit for unsatisfactory solution Find parts of bundle responsible for costs incurred Modify Based on critique , change re - quirements for initial solution Choose different consequences , knowing what consequences are expensive to satisfy . Table 6 . 2 : Summarized comparison of the reasoning process with PCM service beneﬁts against constraints . The Problem Solving Method PCM seems appropriate for this , especially in light of the critique step whose implementation allows for identifying exactly what requirement is expensive to fulﬁll ( 2 ) the infer - encing steps from PCM can be used for multiple types of services and requirements - both basic services and requirements , and possibly value - enhancing services and requirements . As such , one can gradually build up a service bundle . At this point , it is important to point out that the e 3 service reasoning process is in - spired by PCM , but that it cannot be considered as a ‘classic’ PCM - based method . This is because in our reasoning process , requirements are subject to change . For example : We have seen that a customer may consider the consequence ‘95 % guar - anteed reception’ as irrelevant after discovering the related costs . This is an impor - tant difference with other PCM - based methods , wherein solutions are mostly the focus . We shall discuss this more extensively in section 6 . 4 . 6 . 3 Detailed explanation of the high - level reasoning steps Choose need and choose consequences Reasoning steps Starting from a customer need , we derive an initial set of con - sequences specifying this need . In the customer perspective ontology ( section 6 . 1 . 1 ) , we do this by expanding the relation ‘speciﬁed by’ from a single need to one or more consequences specifying this need . First we focus on functional con - sequences only , since a functional consequence shows how a service can satisfy 128 Adding customer - supplier interaction to e 3 service Communicateover a distance E - mail access VoIP Send and receive text Hear and speak voice Small mailbox use at any site with connectivity Local Access type ( nominal ) Mailbox size ( ordinal ) Large mailbox Customizeddomain Create personalized e - mail address O / B . . . . . . . . . . . . . . . Need Want Consequence Scale legend Figure 6 . 10 : Customer catalog for e - mail example a need . The reasoning process ﬁrst asks the customer to choose a particular con - sequence ( via prioritization ) and then checks whether the selected consequence ‘consists of’ other , more detailed , consequences . If so , the customer is again asked to make a choice after which , for all chosen and implied consequences , the rea - soning process again reviews whether considered consequences ‘consist of’ other consequences . This continues until no more ‘consist of’ relationships are found . This process is also called ‘laddering’ and is a well - known practice from marketing theory ( Gutman & Reynolds 1988 ) . Next , the e 3 service reasoning process derives one or more wants that contain this consequence . Here , the assumption is that the experts that created the service cata - logue used for the reasoning process have deﬁned solutions upfront for detailed ( i . e . leaf ) consequences . Then , using this want as a starting point , the reasoning mecha - nism derives additional consequences that are also part of the want ( For illustration , see case example for this step ) . Thus , this ﬁrst step is a kind of bootstrapping pro - cess to ﬁnd a highly ranked consequence , and it continues by evaluating wants ( that include this consequences ) to ensure that needs elicitation is grounded in services that are in fact available on the market ( i . e . , wants ) . Case example . We start with the need : ‘communicate with someone over a dis - tance’ . By following the relation ‘speciﬁed by’ , we derive the functional conse - quences ‘send and receive text’ and ‘hear and speak voice’ . Let us assume that the customer chooses ‘send and receive text’ . Subsequently , we look whether this consequence is speciﬁed further by reviewing whether a ‘consists of’ relationship Detailed explanation of the high - level reasoning steps 129 S end and r e c e i v e t e x t H ea r and s pea k v o i c e Lo c a l S m a ll m a il bo x La r ge m a il bo x Lo ck - i n KP N I P - a cc e ss f ee C u s t o m i z ed do m a i n f ee A cc e ss t y pe M a il bo x s i z e G oog l e KP N KP N / G oog l e / C o z y ho s t e m a il bund l e U s e a t an y s i t e w i t h I P - c onne c t i v i t y . . . Figure 6 . 11 : Supplier catalog for e - mail example 130 Adding customer - supplier interaction to e 3 service exists . When we look at the service catalogue used for this speciﬁc case ( Figure 6 . 10 ) we see that ‘send and receive text’ is not speciﬁed further . Next , we derive the want that contains ‘send and receive text’ . For the basic run - ning example , the only want that contains ‘send and receive text’ is ‘email access’ . Then , our reasoning process uses the want ‘email access’ to bootstrap additional consequences . In this case we derive , next to ‘send and receive text’ , also the consequence ‘use for newsletter’ . Thus , the customer is presented with ‘send and receive text’ , which the reasoning process indicates as a solution satisfying the need ‘communicate over a distance’ , but also with the additional possibility ‘use for newsletter’ . Choose Additional Consequences Reasoning steps For a selected functional consequence , we derive its quality consequences by following the relation depends on in our customer ontology . These quality consequences are then grouped by scale by ( 1 ) deriving , for each quality consequence , its scale by following the relation ‘has’ between quality consequence and scale and ( 2 ) grouping together quality consequences that are deﬁned on the same scale . Now that the consequences are grouped per scale , we let the customer decide , per scale , on consequence prioritization . Depending on the type of scale ( recall that different types of scales exist , i . e . : Nominal or ordinal ) the customer is presented with two different prioritization tasks : • When consequences are deﬁned on a nominal scale , the customer is asked to assign to each of the consequences an importance value ranging from 1 ( unimportant ) to 10 ( must - have , i . e . the offered service bundle should always include this consequence ) ; • When consequences are deﬁned on an ordinal scale , the customer is asked to assign a preference ordering to the scale only and not to the consequences in the scale . For the scoring of consequences , we use the ranking from best to worse that is inherent to an ordinal scale . How we convert this best - to - worse ranking of consequences into a score , is discussed in the next step ( compose and rank service bundles , see below ) . Finally , by default , the selected functional consequence receives an importance ranking of ‘10’ ( must have ) . We can now use the customer preferences expressed in terms of their consequences to compose the appropriate service bundles . Detailed explanation of the high - level reasoning steps 131 Case . By following the relation depends on , we ﬁnd four quality consequences for the functional consequence ‘send and receive text’ : ‘small mailbox’ , ‘large mailbox’ , ‘access with pre - conﬁgured mail - client’ and ‘use at any site with con - nectivity’ ( cf . Figure 6 . 10 ) . These quality consequences are grouped per scale , resulting in two scales of two quality consequences each : ( 1 ) the ordinal scale mailbox size with the quality consequences ‘small mailbox’ and ‘large mailbox’ and ( 2 ) the nominal scale ‘access type’ with the quality consequences ‘access with pre - conﬁgured mail - client’ and ‘use at any site with connectivity’ . Now , the cus - tomer is asked to prioritize the consequences from these scales . For the nominal scale ‘access type’ , our reasoning process presents the consequences ‘access with pre - conﬁgured mail - client’ and ‘use at any site with connectivity’ . Say , the cus - tomer scores ‘access with pre - conﬁgured mail - client’ as ‘1’ to and ‘use at any site with connectivity’ as ‘8’ . Next , the customer is asked to assign an importance ranking to the ordinal scale ‘mailbox size’ . S / he attaches an importance ranking of ‘3’ to this scale , since the size of a mailbox is of little importance for satisfying his / her need : ‘communicate with family abroad’ . Finally , by default , the importance ranking ‘10’ is attached to the consequence ‘send and receive text’ since this is the selected functional conse - quence . Find service bundles Reasoning steps . We ﬁrst match the set of consequences desired by the cus - tomer to consequences deﬁned from a supplier’s perspective . We can do this be - cause ( conform section 6 . 1 . 2 ) the concept and theory of consequences provides the bridging connection between the customer and supplier perspective on services . The computational result of this consequence matching is a subset of all supply - side consequences that , together with the prioritization scores provided by the cus - tomer , can be used to reason about ( 1 ) ﬁnding ( composing ) service bundles and ( 2 ) ranking service bundles according to prioritization scores . We ﬁrst search service bundles that can satisfy all ‘must - have’ consequences . To ﬁnd these bundles , we search for each must - have consequence : • Supplier - speciﬁc service properties that jointly satisfy the consequence . Next , we ﬁnd the supplier - speciﬁc resources that contain these properties and ﬁ - nally bundles that contain these resources . • Supplier - speciﬁc resources that jointly satisfy the consequence . We then ﬁnd bundles containing these supplier - speciﬁc resources . Recall that , as dis - 132 Adding customer - supplier interaction to e 3 service cussed in the supplier - perspective ontology ( 6 . 1 . 2 ) , resources can also realize consequences . The result is a set of bundles per each individual must have - consequence . The set of bundles satisfying all must - have consequences then is an intersection of the sets of bundles for the must - haves . So , if must - have consequence A is satisﬁed by the set of bundles { X , Y , Z } and must - have consequence B is satisﬁed by the set of bundles { W , X } , the set of bundles containing both must - have consequences A and B is { X } . Case . From the previous step , we have the functional consequence ‘send and re - ceive text’ with importance ‘10’ and four quality consequences : ‘small mailbox’ and ‘large mailbox’ from the scale ‘mailbox size’ ( with an importance score of 3 ) and ‘access with pre - conﬁgured mail - client’ ( importance of 1 ) and ‘use at any site with connectivity’ ( importance of 8 ) from the scale ‘access - type’ . These are matched to all supply - side consequences . For an overview of all supply - side con - sequences , see ﬁgure 6 . 11 . Next , we ﬁnd the bundles that satisfy the must - have consequence ‘send and receive text’ . For this , we ﬁrst ﬁnd all possible sets of supplier - speciﬁc service properties satisfying this consequence . An example of these service properties in this case could be ‘POP3’ , ‘upspeed = 128 Kbps’ and ‘downspeed = 1 . 5 Mbps’ . These service properties belong to the resources ‘e - mail access ( KPN ) ’ and ‘IP - access ( KPN ) ’ which are attached to two service ports of the bundle ‘KPN e - mail bundle’ ( see ﬁgure 6 . 11 ) . ‘KPN e - mail bundle’ is therefore a bundle satisfying all must - have consequences and can be considered further , as is the case with all other bundles shown in ﬁgure 6 . 11 since they can all provide the consequence ‘send and receive text’ . Subsetting of resources Reasoning steps Next , the reasoning process ﬁnds the minimum bundles , to eliminate bundles that contain as of yet undesired consequences . This is accom - plished by subsetting the resources of the possible service bundles . More precisely , this means that : For any bundle A and B , if ( 1 ) A and B can both satisfy all must - have consequences and ( 2 ) all the resources of B ⊂ A and ( 3 ) bundle A contains resources additional to bundle B , then bundle A eliminated . Detailed explanation of the high - level reasoning steps 133 Case . For the sake of example , let us assume that the following two bundles satisfy the must - have consequence ‘send and receive text’ : ‘KPN e - mail bundle’ with the resources { e - mail access ( KPN ) , IP - access ( KPN ) } , and ‘e - mail plus spam ﬁltering’ with the resources { spam ﬁltering ( KPN ) , e - mail access ( KPN ) , IP - access ( KPN ) } . We ﬁnd that ( 1 ) concerning resources , all resources from the ‘KPN e - mail bundle’ ⊂ ‘e - mail plus spam ﬁltering’ and that ( 2 ) ‘e - mail plus spam ﬁltering’ contains an additional resource : Spam ﬁltering ( KPN ) . Therefore , the bundle ‘e - mail plus spam ﬁltering’ is rejected . Rank service bundles Reasoning steps We rank the found relevant bundles by calculating a ranking score for each bundle . To this end , we employ the multi - attribute scoring formula below : SB i = n j = 1 w j 10 v ij ( 6 . 1 ) Here , SB i is the ranking score for service bundle i , w j is the importance score of consequence j as provided by the customer and v ij is the numerical value for the consequence j of service bundle i , that indicates if a consequence is present in a bundle . For an illustration , see the case example . Observe that two factors are important for calculating the importance score of a service bundle : First , the importance score of a consequence as provided by the customer and second , the numerical value of a consequence to indicate the presence of a consequence in a bundle . The importance score from the customer is already known . The second factor , the score that indicates the presence of a consequence in a bundle , requires further elaboration . If a consequence is present in a bundle , it is scored according to the scale type that the consequence belongs to : • We score consequences that belong to a nominal scale in a binary way ; if a consequence is present in a bundle , it scores 1 , otherwise it scores 0 . • When a consequence belongs to an ordinal scale we convert the position in the qualitative best - to - worse ranking of the consequence to a quantitative ranking score that we can use in a ranking calculation . For this conversion , we use the Rank - Order Centroid method ( ROC , ( Barron & Barrett 1996 ) ) 134 Adding customer - supplier interaction to e 3 service which can transform a qualitative ranking of a consequence into a quantita - tive ranking whose values are normalized to a value [ 0 . . . 1 ] . ROC is a well - established tool used in management literature to support decision - making . ROC uses the following formula to convert qualitative rankings to quantita - tive ones : C k = Nj = k 1 j N ( 6 . 2 ) Where C k is the ROC score for a consequence at the k - th place in a qualita - tive ranking of consequences and N the total number consequences ranked . For an illustration of how this formula is used to calculate the score of a consequence on an ordinal scale , see the case example . Case . We ﬁrst calculate the scores for consequences to indicate their presence in a bundle : • We calculate a score for the consequences deﬁned on the nominal scale ‘Ac - cess type’ in a binary way . For example , if the consequence ‘access at any site with connectivity’ is present in a bundle , it scores ‘1’ . • We calculate a score for the consequences deﬁned on the ordinal ‘mailbox size’ scale using the ROC formula ( formula 6 . 2 ) . We perform the following calculations for each consequence : 1 + 12 2 = 0 . 75 for the consequence ‘large mailbox’ 12 2 = 0 . 25 for the consequence ‘small mailbox’ Now that we have ( 1 ) importance scores for each consequence and ( 2 ) a score that indicates the presence of a consequence in a bundle , we can calculate a ranking score for each bundle . By applying the multi - attribute formula discussed earlier ( formula 6 . 1 ) we ﬁnd the following ranking of service bundles : 1 . KPN g - mail bundle : . 8 ( 1 ) + . 3 ( . 75 ) = 1 . 25 ( . 8 ( access at any site with con - nectivity ) + . 3 ( large mailbox ) ) 2 . KPN e - mail access / random IP access bundle : . 1 ( 1 ) + . 3 ( . 25 ) = 0 . 175 ( . 1 ( ac - cess with pre - conﬁgured mail - client ) + . 3 ( small mailbox ) ) Detailed explanation of the high - level reasoning steps 135 Now , for each bundle , we ﬁnd its full set of consequences . For example , in the case of the KPN g - mail bundle , we ﬁnd two additional service ports : one containing the resource ’fee’ with a service property of ‘ e 20 , - ’ the other containing the resource ‘lock - in’ with a service property of ‘12 months’ . From these service properties , we now derive the consequences ‘IP - access fee’ and ‘lock - in’ . With the consequences already found , we arrive at the following full set of consequences for the KPN - g - mail bundle : { send and receive text , large mailbox , access mail at any site with connectivity , IP - access fee , lock - in } . Discussion When ranking service bundles , we use a combination of the com - pensatory decision technique weighted added summation ( Fishbein 1978 , Barron & Barrett 1996 ) and the non - compensatory decision technique MoSCoW from DSDM ( Stapleton 1997 ) . As in the work of Jeffreys ( 2004 ) , Elrod et al . ( 2004 ) , and Rothrock & Yin ( 2008 ) , we want to : • Rank service bundles according to how well they ﬁt with customer prefer - ences , but also : • want to reject a certain solution - in our case , a service bundle - on the basis that this solution lacks certain features perceived to be vital by the customer . On their own , compensatory and non - compensatory techniques are inadequate for this . On the one hand , compensatory decision techniques can be used for ranking service bundles . Yet , these techniques aggregate individual preference scores on consequences into a single value . This means that , when only relying on com - pensatory decision techniques , information is lost on individual preference scores . After all , the lack of a must - have consequence can be compensated by the presence of many other , but less important , consequences . As a result , it is not possible to state that a service bundle contains a consequence that is perceived as a must - have . On the other hand , non - compensatory decision techniques can be used for rejecting a solution , but are less capable of ranking solutions . Thus , to accomplish our deci - sion procedure , we rely on a combination of compensatory and non - compensatory decision rules . Trade - off feature / opportunity cost Find full set of consequences After having calculated to what extent a service bundle ﬁts with customer preferences we ﬁnd , for each bundle , additional conse - quences that a customer must also acquire . Most notably , these additional con - sequences represent objects of value that a customer has to give up to acquire a 136 Adding customer - supplier interaction to e 3 service service bundle such as a fee or customer lock - in . To ﬁnd these additional conse - quences we ﬁnd , for each service bundle , service ports additional to those already found by reviewing its service interface . Taking these additional service ports as a starting point we then derive consequences by using the process of ﬁnding ser - vice ports based upon consequences described before , only then in reverse . This means that the reasoning process ( 1 ) ﬁnds the resources attached to the service ports , ( 2 ) derives the service properties from these resources and ﬁnally ( 3 ) ﬁnds the consequences attached to these service properties and / or resources . Now we have for each bundle ( 1 ) its complete set of consequences and ( 2 ) a ranking score . However , as discussed in section 6 . 1 . 3 , a bundle also has a pricing model that should be reviewed and presented to the customer . This is discussed in the next paragraph . Case . For the KPN g - mail bundle , we ﬁnd two additional service ports : one containing the resource ‘IP - access fee’ with a service property of ‘ e 20 , - ’ the other containing the resource ‘lock - in’ with a service property of ‘12 months’ . From these service properties , we now derive the consequences ‘KPN IP - access fee’ and ’lock - in’ . With the consequences already found , we arrive at the following full set of consequences for the KPN - g - mail bundle : { send and receive text , large mailbox , access mail at any site with connectivity , IP - access fee , lock - in } . Find pricing model and present for each bundle its full set of consequences We present the found bundles in a ranking to the customer , where the ranking is based upon the multi - attribute score discussed in the paragraph ‘rank service bun - dles’ . In addition , for each bundle , the customer is presented with a speciﬁcation of the consequences s / he receives from a bundle and the consequences s / he has to give up to acquire a bundle . Furthermore , the reasoning process shows a speciﬁcation of any monetary objects in terms of a pricing model . The pricing model for a bundle is attached to the service interface of that bundle ( for reference , see the pricing model ontology in ﬁgure 6 . 4 ) . As discussed in sec - tion 6 . 1 . 3 , this pricing model of a bundle actually consists of ( 1 ) the pricing models of the individual services in that bundle , which the reasoning process ﬁnds by fol - lowing the relation ‘consists of’ between the concepts ‘pricing model bundle’ and ‘pricing model elementary service’ and ( 2 ) a discount , which can be either a single discount over the total price of the bundle , or discounts calculated over the price of the individual services in a bundle . Case . The customer is presented with the following ranked bundles : Detailed explanation of the high - level reasoning steps 137 Please ﬁnd below what the bundle KPN / g - mail can provide you with : • send and receive text • large mailbox for the consequence send and receive text • use at any site with IP - access for the consequence send and receive text For the bundle KPN / g - mail , you have to give up the following : • 12 months lock - in • KPN IP - access fee • g - mail advertisement exposure For this bundle , we found the following pricing model : * KPN / g - mail pricing model This pricing model is of the type : discount per elementary service . The price of this bundle consists of the following individual pricing models : * The ﬂat fee pricing model KPN IP access pricing model is build up as follows : 25 euro / month . This pricing model is attached to same port as the negative consequence KPN IP - access fee . Table 6 . 3 : Consequence speciﬁcation for the bundle KPN / G - mail . 1 . KPN g - mail bundle . Score : 1 . 25 2 . KPN e - mail access / random IP access bundle . Score : 0 . 175 Furthermore , a speciﬁcation of both bundles is provided . Table 6 . 3 shows a speci - ﬁcation for the KPN / G - mail bundle . For the example speciﬁcation in table 6 . 3 , the following is worth emphasizing : • The reasoning process makes an explicit distinction between positive and negative consequences . This is important for scoring the negative conse - quences of a bundle ; • The reasoning process shows the individual pricing models that together form the pricing model of a service bundle . In running example , ‘KPN discounted IP access pricing model’ is the pricing model of the individual service ; • The reasoning process speciﬁes what negative consequence represents the pricing model of an individual service . In the running example , this is con - sequence ‘KPN IP - access fee’ . This can be done because pricing models of 138 Adding customer - supplier interaction to e 3 service individual services as well as consequences can both be traced to the same service port . This speciﬁcation of what consequence belongs to what pricing model is again relevant for the task of scoring negative consequences , discussed in the next paragraph . Score negative consequences The customer can now choose to also score neg - atively valued consequences ( of course , she can also choose to make the trade - off herself ) . When this option is selected , the customer is again asked to attach a score from 1 to 10 to each consequence . However , as opposed to scoring positive conse - quences , ‘1’ is now used to indicate that the presence of a consequence in a service bundle is not negatively valued , while ‘10’ is used to indicate that a consequence should be absolutely absent from a bundle . Based upon the scores attached to the negatively valued consequences , the reason - ing process then again uses the scoring mechanism discussed in the paragraph ‘ﬁnd service bundles’ only now with the difference that : 1 . Each bundle that satisﬁes a negatively valued consequence with a score of 10 is automatically discarded , irrespective of other consequences satisﬁed by that bundle . As before , we rely on a non - compensatory decision rule , only now to discard a bundle containing a consequence instead of lacking it and ; 2 . We compute again a score for each bundle remaining after ( 1 ) by using a multi - attribute scoring formula , only now while substracting the scores of the negatively valued consequences satisﬁed by each bundle from the score already calculated for that bundle . Note here that if a bundle is rejected , the critique step as described in section 6 . 2 . 2 is invoked to ﬁnd the cause for rejection . The customer now has the option to either select a bundle from the ranking or , in case s / he ﬁnds the costs incurred for the bundles too high , to go back to the step ‘choose consequences’ and change his / her requirements . Case . We assume that , in our e - mail case , the customer scores the negative conse - quence ‘12 months lock - in’ as 4 , ‘g - mail advertisement exposure’ as 3 , and ‘KPN IP - access fee’ as 2 . The ranking scores of the bundles are changed according to the scores of negative consequences . For the bundle KPN / g - mail , the score is now . 35 . We assume that the customer is content giving up the negative consequences for the KPN / G - mail bundle and thus decides to acquire this bundle . Detailed explanation of the high - level reasoning steps 139 Review value - enhancing consequences When the customer selects a bundle , we review whether there are any value - enhancing wants ( either core / enhancing or optional bundled wants ) for that bundle . If so , we ﬁrst derive the core consequence from the core want , and review what value - enhancing consequence from the value - enhancing want provides the reason for this value - addition . Note that we need to review also the speciﬁc value - enhancing con - sequence , since a value - enhancing want can also have multiple consequences , not all of which may be relevant . As in the step ‘choose consequence’ , the customer is now asked to make a choice based on a combination of a want ( the solution ) and a consequence ( why the solu - tion is valuable ) only now for a value - enhancing service . If the customer is inter - ested in the value - enhancing want , we iterate again through the steps described so far to derive a set of possible service bundles ( i . e . : the steps ‘choose consequences’ , ‘ﬁnd and rank service bundles’ and trade - off feature / opportunity costs’ ) , only now for the value - enhancing wants . Case : The customer expresses interest in the value - enhancing want ‘customized domain’ with the consequence ‘personalization of e - mail address’ . Next , the reasoning process ﬁnds the bundle ‘KPN / g - mail / cozyhost’ ( for reference , see ﬁgure 6 . 11 ) . This bundle , besides a basic e - mail and IP - access service , also includes a customized domain . The customer is presented with a speciﬁcation of the ‘KPN / g - mail / cozyhost’ bun - dle in terms of positive consequences , negative consequences and a pricing model . From the pricing model , the customer now infers that s / he has to pay a monthly ﬁxed fee of e 5 , - and that this price is a speciﬁcation of the consequence ‘cus - tomized domain fee’ . We assume that the customer wants to avoid this monthly fee and therefore scores the negative consequence ‘customized domain fee’ as 10 ( a won’t have ) . Next , the reasoning process rejects the bundle containing the customized domain service from Cozyhost since it contains the consequence scored as a won’t have : ‘customized domain fee’ . Finally , the reasoning process presents the positive consequence ‘cus - tomized domain’ as the consequence for which the negative consequence ‘cus - tomized domain fee’ has to be given up . To ﬁnd the positive consequence ‘customized domain’ as a culprit for the high costs , the reasoning process uses the critique - step described in 6 . 2 . In ﬁgure 6 . 12 , the reasoning for the critique step is visualized for this speciﬁc case . 140 Adding customer - supplier interaction to e 3 service Customized domain Large mailbox Lock - in KPN IP - access fee Customized domain fee Google KPN KPN / Google / Cozyhost email bundle Use at any site with IP - connectivity . . . . . . . . . Figure 6 . 12 : Critique : Finding source of costs for customized domain fee Based upon the feedback , the customer decides to remain with the bundle satisfying the basic requirements only : The bundle KPN / g - mail . 6 . 4 PCM 2 : Modifying solutions and requirements So far , we have seen that the set of requirements in the e 3 service reasoning process changes as the reasoning progresses . In this section , we compare the e 3 service reasoning process to other PCM - based methods . We discuss existing PCM - based methods on characteristics deemed relevant for our discussion . Subsequently , we draw parallels between our interpretation of PCM and other PCM - based methods . Comparison between PCM - based methods In table 6 . 4 , we compare the e 3 service reasoning process to a cross section of PCM - based methods found by querying search engines for scientiﬁc resources ( for example : Google scholar , citeseer and ingentaconnect ) and by asking Problem Solving Method ( PSM ) experts for relevant sources . Table 6 . 4 compares the PCM - based methods on the following character - istics : PCM 2 : Modifying solutions and requirements 141 • Underlying PCM . Often , the PCM inferencing tasks ( Propose Verify Cri - tique and Modify ) are carried out with another PSM . For example : For the elevator design task , PCM is used together with parametric design ; • Control structure . The control structure of PCM - based methods can be roughly divided in two categories ( Motta et al . 1996 ) : ( 1 ) Complete - Model - Then - Revise , whereby ( as discussed in section 6 . 2 . 1 ) a complete solution is created before veriﬁcation and possibly modiﬁcation . For example : All parameters relevant for elevator design , such as the selection of an elevator cabin plus an elevator cable , are used as input for the reasoning process , and ; ( 2 ) Extend - Model - Then - Revise whereby a solution is created incrementally . Veriﬁcation and possibly modiﬁcation then happens each time that an addi - tion is made to the solution . For the elevator design example , a design can ﬁrst be proposed for the cabin . This design is extended afterwards by also considering an appropriate cable ; • Critique and modify . Here , we compare how the PCM - based methods ﬁll in the inferencing tasks ‘critique’ and ‘modify’ . • Adjustment of requirements . PCM - based methods focus on verifying and modifying solutions , such as verifying and modifying proposed elevator de - signs . Yet , as is apparent from our discussion on control structure , inputs for creating such solutions are sometimes gradually considered - such as addi - tional parameter values . Therefore the question is : To what extent do exist - ing PCM - based methods consider requirements also as a relevant factor , in addition to verifying and modifying solutions ? We ﬁnd that the compared PCM - based methods - e 3 service excluded - have in com - mon that : 1 . A set of constraints ( hard requirements ) is deﬁned upfront , and remains un - changed for the remainder of the reasoning process ; 2 . Proposed solutions are tested against these constraints . The inferencing steps ‘critique’ and ‘modify’ are called in case of constraint violation . These in - ferencing steps typically use : • Production rules , to relate a constraint violation to a set of ﬁx strate - gies . In this manner , one creates rule sets in the form of : If constraint X is violated , then perform the set of ﬁx strategies Y . For example : If an elevator cabin is too heavy for the cable , then a possible ﬁx strategy 142 Adding customer - supplier interaction to e 3 service Verifying solution Propose solution [ satisfactory solution ] [ unsatisfactory solution ] End - user Solution space Explore value - enhancing requirements ? Modify requirements Identify culpit Receive solution State requirements [ no value - enhancing req . ] [ value - enhancing req . ] Figure 6 . 13 : The control structure of PCM 2 may be to replace the cabin with a lighter model . PCM - based methods that rely on such rule sets are typically referred to as Propose & Re - vise ( P & R ) , a subfamily of PCM - based methods ( see , amongst others , Schreiber & Terpstra ( 1996 ) ) • A speciﬁc implementation of the steps ‘critique’ and ‘modify’ . For ex - ample : The ﬂood prevention system descibed in table 6 . 4 uses a multi agent system to mitigate constraint violations . In summary : To the best of our knowledge , PCM - based methods assume con - straints to be deﬁned upfront . If a constraint is violated , the solution is critiqued and modiﬁed . PCM compared to the e 3 service reasoning process In ﬁgure 6 . 13 , we present the control structure of PCM 2 . Here , we see that both requirements and solutions are subject to change in the e 3 service reasoning process . This is largely due to : • The trade - off that a customer has to make between the positive and negative consequences of a bundle . We have seen that negative consequences , such as a price to be paid or customer lock - in , can modify the consequences initially desired ; • The incremental creation of a service bundle . We have seen that the cus - tomer ﬁrst agrees on a bundle that satisﬁes the basic requirements , and only thereafter considers the value - enhancing requirements . PCM 2 : Modifying solutions and requirements 143 Thus , we deal with requirements dynamically : As the reasoning progresses , new requirements are considered , requirements are prioritized differently and require - ments may be removed altogether . We call this approach PCM 2 , to reﬂect that not only solutions can be subject to modiﬁcation , but requirements also . If we now compare PCM 2 to other PCM - based methods , we ﬁnd two major differ - ences : in the deﬁnition of constraints , and in the emphasis on solutions . PCM - based methods assume constraints to be deﬁned upfront , and to remain unchanged over the course of the reasoning process To the best of our know - ledge , PCM - based methods always use a set of unchanging constraints to trigger modiﬁcations . These constraints are assumed to be a static given at the start of the reasoning process . In contrast , PCM 2 does not consider constraints to be a static given , because the constraints for end - customers are relative . As the reasoning progresses , new con - straints may be discovered , and existing ones may be reprioritized or even removed altogether . PCM - based methods modify requirements , but do so mostly in the light of so - lutions We have found that PCM - based methods may also modify requirements , but that the emphasis in doing so always lies in a computational argument for ﬁnding solutions . For example , consider the comparison of the control structures extend - model - then - revise and complete - model - then - revise in Motta et al . ( 1996 ) . Here , the arguments of choosing one control structure over another focus mostly on solutions , such as complete - model - then - revise being able to minimize the amount of constraint violations . While such solution - oriented arguments are undoubtedly true , they also ignore that requirements may play an important part in PCM - based methods as well . In PCM 2 for example , an important argument for using extend - model - then - revise is that it provides the user with a ‘smart’ way of traversing the space of requirements . Finally , please note that Chandrasekaran ( 1990 ) and ten Teije et al . ( 1998 ) already point out that both requirements and constraints may be subject to modiﬁcation also . Yet , even the above references do not really focus on this notion . Therefore , to the best of our knowledge , PCM 2 is the ﬁrst method that really emphasizes that requirements and constraints are just as much a subject to change as solutions are . 144 Adding customer - supplier interaction to e 3 service R e f ere n ce D o m a i n C o n t r o l s t r u c - t u re U nd er l y i n g P S M C r i t i qu e a nd m o d i f y A d j u s t m e n t o f re qu i re - m e n t s e 3 s e r v i ce N ee d s - d r i v e n s e r v i ce bund li ng E x t e nd - M od e l - T h e n - R e v i s e C on ﬁ gu r a ti on ( f o r d e t a il s , s ee ( B a i d a e t a l . 2005 ) ) S i n ce w e do no t d e - ﬁ n e c on s t r a i n t s up fr on t , e 3 s e r v i ce do e s no t h a v e a ﬁ x - s t r a t e gy s u c h a s ‘ i n t h e ca s e o f v i o l a ti on X , p e r - f o r m ﬁ x Y ’ . B o t h s o f t a nd h a r d r e - qu i r e m e n t s a r e s ub j ec t t o c h a ng e . G r i m n e s & A a m od t ( 1996 ) D i a gno s i s o f m e d i ca l i m - a g e s C o m p l e t e - M od e l - T h e n - R e v i s e C a s e - b a s e d r ea s on i ng T h i s a pp li ca ti on h a s a l ea r n i ng m odu l e , w h i c h p r e v e n t s t h e r ea s on e r fr o m m a k i ng t h e s a m e m i s t a k e t w i ce . T h e m a i n r e qu i r e m e n t i s t o ﬁ nd a d i a gno s i s f o r a m e d i ca l i m a g e t h a t h a s a m i n i m u m a m oun t o f c on s i s t e n c y w it h ea r li e r ca s e s . T h e pu r po s e o f t h e d e s c r i b e d P C M a pp li - ca ti on i s t o ﬁ nd a d i a g - no s i s f o r m e d i ca l i m a g e s . T hu s , ﬁ nd i ng a s o l u ti on i s t h e f o c u s . R e qu i r e m e n t s a r e no t a n i n t e r e s ti ng c on - s i d e r a ti on . PCM 2 : Modifying solutions and requirements 145 R e f ere n ce D o m a i n C o n t r o l s t r u c - t u re U nd er l y i n g P S M C r i t i qu e a nd m o d i f y A d j u s t m e n t o f re qu i re - m e n t s M o li n a & B l a s c o ( 2003 ) F l ood p r e - v e n ti on C o m p l e t e - M od e l - T h e n - R e v i s e I n s t ea d o f a PS M , T h i s p a p e r d i s c u ss e s a d ece n - t r a li ze d m u lti - a g e n t s y s - t e m w h e r e by t h e a g e n t s r e l y on , a m ong s t o t h e r s , B a y e s i a n n e t w o r k s , H o r n c l a u s e s a nd r u l e s e t s t o ca rr y ou t t h e P C M i n f e r - e n c i ng t a s k s T h e m a x i m u m r i s k l e v - e l s ( d e t e r m i n e d by e . g . t h e w a t e r l e v e l i n c o m b i - n a ti on w it h t h e l e v e l o f u r b a n i za ti on ) a r e d e ﬁ n e d up fr on t . If a n a g e n t e x - cee d s t h e s e r i s k s l e v e l s ( e . g . b eca u s e t h e w a t e r r i s e s l o ca ll y by o n e m e - t e r ) , t h i s a g e n t n e go ti a t e s w it h o t h e r a g e n t s a bou t a pp r op r i a t e c oun t e r m ea - s u r e s ( e . g . a no t h e r a g e n t m a y l o ca ll y i n c r ea s e it s w a t e r s t o r a g e ) . T h e c on s t r a i n t s f o r t h i s P C M - b a s e d m e t hod ( t h e ‘r i s k l e v e l s ’ ) a r e d e ﬁ n e d up fr on t , a nd a dv e r ti s e d t o t h e a g e n t n e t w o r k . E ac h a g e n t t h e n l o ca ll y d ec i d e s ho w it s hou l d m iti g a t e a c on s t r a i n t v i o l a ti on . 146 Adding customer - supplier interaction to e 3 service R e f ere n ce D o m a i n C o n t r o l s t r u c - t u re U nd er l y i n g P S M C r i t i qu e a nd m o d i f y A d j u s t m e n t o f re qu i re - m e n t s P o ec k e t a l . ( 1996 ) E l e v a t o r d e - s i gn E x t e nd - M od e l - T h e n - R e v i s e P a r a m e t r i c D e s i gn F i x e s a r e a ss o c i a t e d w it h c on s t r a i n t s , a l on g w it h a c o s t f o r a pp l y i ng a ﬁ x . F o r e x a m p l e : If a n e l e - v a t o r ca b i n i s t o o h ea vy f o r it s ca b l e , a po ss i b l e ﬁ x s t r a t e gy m a y b e t o r e p l ace t h e ca b i n w it h a li gh t e r m od e l . P l ea s e no t e t h a t a ll o t h e r r e f e r e n ce s i n t h i s t a - b l e t h a t b e l ong t o t h e ‘ e l e - v a t o r d e s i gn ’ do m a i n , e m - p l oy a s i m il a r m e t hod f o r ca rr y i ng ou t t h e s t e p s c r i - ti qu e a nd m od i f y . N e w p a r a m e t e r s a r e c on - s i d e r e d a s t h e r ea s on i ng p r og r e ss e s , bu t p r opo s e d e l e v a t o r d e s i gn s a r e a l - w a y s t e s t e d a g a i n s t a s e t o f p r e - d e ﬁ n e d , s t a ti c c on - s t r a i n t s . PCM 2 : Modifying solutions and requirements 147 R e f ere n ce D o m a i n C o n t r o l s t r u c - t u re U nd er l y i n g P S M C r i t i qu e a nd m o d i f y A d j u s t m e n t o f re qu i re - m e n t s Y o s t ( 1996 ) E l e v a t o r d e - s i gn P r ob a b l y C o m p l e t e - M od e l - T h e n - R e v i s e , t hough t h e c on t r o l s t r u c t u r e i s no t e xp li c itl y d e ﬁ n e d P a r a m e t r i c d e s i gn . I n t e r - e s ti ng l y , t h i s p a p e r u s e s a U n i v e r s a l W ea k M e t hod t o s o l v e t h e e l e v a t o r d e - s i gn t a s k , m ea n i ng t h a t t h e p r ob l e m s o l v i ng b e - h a v i o r e xh i b it e d by t h e u s e d m e t hod i s e m e r g e n t r a t h e r t h a n d e ﬁ n e d up - fr on t . F o r t h e e l e v a - t o r d e s i gn t a s k , t h e u s e d m e t hod j u s t h a pp e n e d t o b e h a v e a s p a r a m e t r i c d e - s i gn c o m b i n e d w it h P C M . F o r a no t h e r t a s k , t h e u s e d m e t hod m i gh t j u s t a s w e ll h a v e e xh i b it e d p l a nn i ng b e h a v i o r . T h i s i s oppo s e d t o m e t hod s s u c h a s p r o - po s e d P o ec k e t a l . ( 1996 ) , w h i c h u s u a ll y c on t a i n a s t e p f o r s e l ec ti on o f t h e p r ob l e m s o l v i ng m e t hod t o b e u s e d . S i m il a r t o P o ec k e t a l . ( 1996 ) Y o s t ( 1996 ) m e n ti on t h a t t h e i r m e t hod p r ov i d e s t h e u s e r w it h t h e po ss i b il - it y t o c h a ng e p a r a m e - t e r v a l u e s o r c on s t r a i n t s , bu t t h e y do no t e xp li c - itl y m e n ti on c h a ng i ng r e - qu i r e m e n t s / c on s t r a i n t s a s p a r t o f t h e i r a pp r o ac h . 148 Adding customer - supplier interaction to e 3 service R e f ere n ce D o m a i n C o n t r o l s t r u c - t u re U nd er l y i n g P S M C r i t i qu e a nd m o d i f y A d j u s t m e n t o f re qu i re - m e n t s t e n T e ij e e t a l . ( 2004 ) C l a ss i ﬁ ca ti on w e b s e r - v i ce s . E x a m p l e s ce n a r i o : C l a ss i f y i ng s c i e n ti ﬁ c p a p e r s C o m p l e t e - M od e l - T h e n - R e v i s e P a r a m e t r i c d e s i gn A ( c o m pu t a ti on a l ) b r o - k e r a pp li e s a d j u s t s p a - r a m e t e r s o f c l a ss i ﬁ ca ti on - s e r v i ce s a nd a n a l y ze s t o w h a t e x t e nd t h i s ﬁ x e s t h e c on s t r a i n t - v i o l a ti o n P o ss i b l e s o l u ti on s a r e t e s t e d a g a i n s t p r e - d e ﬁ n e d c on s t r a i n t s , s u c h a s ‘ t h e p r opo s e d c l a ss i ﬁ ca ti on o f p a p e r s m u s t m a t c h t h e h a nd - m a d e c l a ss i ﬁ ca ti on o f t h e P C ’ . M o tt a e t a l . ( 1996 ) E l e v a t o r d e - s i gn C o m p l e t e - M od e l - T h e n - R e v i s e P a r a m e t r i c d e s i gn F o r c hoo s i ng ﬁ x e s , M o tt a e t a l . ( 1996 ) p r opo s e a m e t hod f o r m ea s u r i ng t h e c o s t o f a c o m b i n a ti on o f ﬁ x e s . T h e y f o r m a li ze t h e r ea s on i ng on t h e c o s t o f a c o m b i na ti on o f ﬁ x e s , i n s t ea d o f e v a l u a ti ng t h e c o s t o f i nd i v i du a l ﬁ x e s . A s w it h t h e p r e v i ou s l y d i s c u ss e d P C M - b a s e d m e t hod s , M o tt a e t a l . ( 1996 ) t e s t p r opo s e d s o - l u ti on s a g a i n s t c on s t r a i n t s a nd a pp l y ﬁ x kno w l e dg e i n t h e ca s e o f c on s t r a i n t v i o l a ti on . P C M 2 : M od if y i ng s o l u ti on s a nd r e qu i r e m e n t s 149 Reference Domain Control struc - ture Underlying PSM Critique and modify Adjustment of require - ments Runkel et al . ( 1996 ) Elevator de - sign Extend - Model - Then - Revise Parametric design Similar to Poeck et al . ( 1996 ) , ﬁxes are applied individually . The article mentions that domain experts can add and edit constraints , but as with Yost ( 1996 ) , con - straints are assumed to remain unchanged during the reasoning process . As such , the modiﬁcation of constraints is not an ex - plicit part of the approach . Schreiber & Terp - stra ( 1996 ) Elevator de - sign Extend - Model - Then - Revise Parametric design Schreiber & Terpstra ( 1996 ) emphasize the inﬂuence of a ﬁx upon pa - rameters other than those that caused constraint violation The constraints and re - quirements are presumed given at the beginning of the reasoning process . During the reasoning they remain unchanged . Table 6 . 4 : Comparison of PCM - based methods 150 Adding customer - supplier interaction to e 3 service 6 . 5 Summary In this chapter , we discussed a modiﬁed version of the e 3 service customer and sup - plier ontologies . Subsequently , we showed how these ontologies can be used in a needs - driven service bundling process that relies on consequences as a key concept . We showed how we create service bundles incrementally , by gradually consider - ing value - enhancing consequences , and how we use customer - supplier interaction to trade off positive and negative service consequences . Finally , we compared the e 3 service reasoning process to the Problem Solving Method Propose - Critique - Modify . We have observed that e 3 service and other PCM - based methods are simi - lar in that they both arrive solutions gradually , through a process of proposing and testing . However , we also pointed out that the e 3 service reasoning process differs from that of other PCM - based methods , in that other PCM - based methods mostly modify solutions , while we posit that requirements can be just as much a subject to change as solutions . The upshot of our discussion so far is that e 3 service has an interactive reasoning process that gradually arrives at a service bundle . We call this reasoning process PCM 2 , to reﬂect that we modify both requirements and solutions . Chapter 7 The PCM 2 software reasoner This chapter discusses the software reasoner that we developed to ensure the computa - tional adequacy of the e 3 service reasoning process . To ensure the computational adequacy of the e 3 service reasoning process , we im - plemented its reasoning steps in a software reasoner . This chapter describes the tool implementation by discussing the tools used to develop the software reasoner ( section 7 . 1 ) , the tool inferencing ( section 7 . 2 ) and a reﬂection on tool development ( section 7 . 3 ) . 7 . 1 Tools used : Protege and Jena . The tool performs the inferencing steps described in section 6 . 3 over service cata - logues , case - speciﬁc instantiations of the e 3 service customer and supplier ontolo - gies . We create ontology instantiations with the ontology editor Protege 1 . Protege pro - vides an environment for creating and editing an ontology and ontology instantia - tions , and exporting these to various formats , including XML - based formats such as RDF / S and OWL . For an example , see ﬁgure 7 . 1 . Here , for a representation of a customer catalogue of ISP - services in Protege , we see the ordinal scale ‘mailbox size’ with two quality consequences : ‘small mailbox’ and ‘large mailbox’ . We export ontology instantiations made with Protege to RDF - format and use these exported instantiations as input for our software reasoner . 1 http : / / protege . stanford . edu / 152 The PCM 2 software reasoner Figure 7 . 1 : Instantiation of the e 3 service customer perspective service catalogue in Protege Inferencing with the software reasoner 153 Our software reasoner , in turn , uses a RDF - parser from the Jena - environment 2 to interpret RDF - ﬁles and reason with these . 7 . 2 Inferencing with the software reasoner The software reasoner follows the inferencing steps from e 3 service over the RDF - representations of the ontology instantiations . It follows exactly the steps detailed in section 6 . 2 : No steps are added , modiﬁed or removed . Figure 7 . 2 shows the architecture of our reasoner . Observe here that one class performs most of the reasoning steps : e3 - serviceReasoner . The main reason for this is that , as we shall elaborate in section 7 . 2 . 1 , the reasoning process largely entails ‘hopping’ from one set of rdf - resources to another set of rdf - resources by following rdf - relations . This means that most of the reasoning can be performed by a single class , instead of having to create separate classes for each concept in the e 3 service ontologies . The classes Calculation , Scale , NominalScale and OrdinalScale form an excep - tion to this rule . The class Calculation was created to have a central repository for implemented mathematical functions - akin to java’s Math - class . As can be seen in ﬁgure 7 . 2 , Calculation contains implementations of multi - attribute scoring ( formula 6 . 1 ) and the ROC - method ( formula 6 . 2 ) . The different scale classes were mainly created to facilitate the distinction between a nominal and an ordinal scale . As we discussed in section 6 . 3 we require such a distinction because consequences deﬁned on a nominal scale are dealt with differently than consequences deﬁned on an ordinal one . So : The tool reasoning is mostly implemented in one class , that takes the required inferencing steps . It accomplishes this by following the relevant rdf - relations , to ‘hop’ from one set of rdf - resources to another . We shall ﬁrst turn to the two meth - ods of the tool that are crucial for taking inferencing steps . 7 . 2 . 1 Methods for inferencing and producing intermediate output Two methods are crucial for the tool inferencing : 2 Jena is a java - library that supports the development of semantic web applications . See : http : / / jena . sourceforge . net / 154 The PCM 2 software reasoner I n s t a n t i a t i on o f e3 - se r v i ce c u s t o m e r p e r s p ec t i ve on t o l og y I n s t a n t i a t i o n o f e3 - se r v i ce s upp li e r p e r s p ec t i ve on t o l og y + boo l ean pu t C on s equen c e ( ) + boo l ean pu t C on s equen c e V e c t o r ( ) + boo l ean pu t C on s equen c e S c o r e ( ) + V e c t o r < R e s ou r c e > ge t S c a l e A s R e s ou r c e V e c t o r ( ) + V e c t o r < D oub l e > ge t C on s equen c e S c o r e s ( ) S ca l e N o m i n a l S ca l e O r d i n a l S ca l e + s t a t i c D oub l e C a l c u l a t e M A S c o r e F o r B und l e ( ) + s t a t i c V e c t o r < D oub l e > C a l c u l a t e R O C F o r R an k i ng ( ) C a l c u l a t i on + V e c t o r < R e s ou r c e > ge t R e l a t ed O b j e c t s ( ) + v o i d p r i n t V e c t o r L i t s ( ) + V e c t o r < R e s ou r c e > p r opo s e S o l u t i o n s ( ) + R e s ou r c e c r i t i que S t ep ( ) + V e c t o r < R e s ou r c e > do M a t c h i ng C u s t o m e r S upp li e r C on f e r en c e s ( ) + V e c t o r < S c a l e > do S c o r i ng Q ua li t y C on s equen c e s ( ) + V e c t o r < R e s ou r c e > do T r ade O ff ( ) + v o i d p r i n t U s age B a s ed F o r m u l a ( ) + v o i d p r i n t U s age B a s ed P r i c i ng M ode l ( ) + v o i d p r i n t T w o P a r t T a r i ff ( ) + v o i d p r i n t S i ng l e D i sc oun t P r i c i ng M o de l ( ) + v o i d p r i n t D i sc oun t P e r E l e m en t a r y S e r v i c e ( ) e3 - se r v i ce R e as on e r Figure 7 . 2 : Classes used in the software reasoner Inferencing with the software reasoner 155 1 . Vector < Resource > getRelatedObjects ( Vector < Resource > sourceNodes , Model model , String literal ) This method takes ( 1 ) a vector of source RDF - resources and ( 2 ) a relation - ship to follow ( the String ‘literal’ ) as input and produces as output a vec - tor of resources by following the speciﬁed relationship . For example : If one provides to getRelatedObjects ( ) ( 1 ) a vector of needs ( each represented as an RDF - resource ) and ( 2 ) the literal ‘satisﬁed by’ as input then , by following the relation ‘satisﬁed by’ , this method produces a vector of consequences satisfying the need as output . 2 . void printVectorLits ( Vector < Resource > , String literal ) This method lists the property of a vector of RDF - resources , which is im - portant to produce intermediate output such as the positive consequences satisﬁed by a service bundle . A variation of this method , printLiteral ( . . . ) , allows for listing the properties of a single RDF - resource . The implemented reasoning process uses these methods frequently in conjunction to ( 1 ) perform inferencing steps and ( 2 ) present the result of these steps , for in - stance a choice to be made , to the end - user . 7 . 2 . 2 The tool reasoning process We shall now exemplify our implementation of the e 3 service reasoning steps by means of two commonly used methods : Vector < Resource > doLaddering ( Vector < Resource > chosenNeed ) and Resource critiqueStep ( Resource bundle , Resource negCons ) . Because we want to avoid repeating the detailed description of the reasoning steps from section 6 . 3 , we shall not discuss the implementation of other reasoning steps in further detail . Consequence laddering . Figure 7 . 3 shows the method doLaddering ( Vector < Resource > chosenNeed ) , the tool implementation that enables consequence laddering . First , a need is speciﬁed into consequences . This happens by specifying a selected need , represented by the variable chosenNeed , into consequences , by following the relationship ‘speciﬁed by’ . For this , the tool relies on the method getRelatedObjects ( . . . . ) . With the set of consequences that specify the customer need , the tool performs consequence laddering . As stated in , amongst others , section 5 . 1 , we ladder by specifying a consequence into one or more detailed consequences and letting the customer choose one of these . Thereafter , the chosen consequence can again be speciﬁed into more detailed consequences . This process continues until a chosen consequence can no longer be detailed : For this detailed consequence , a want is found . 156 The PCM 2 software reasoner Vector < Resource > doLaddering ( Vector < Resource > chosenNeed ) { Vector < Resource > conseq = getRelatedObjects ( chosenNeed , model , " http : / / protege . stanford . edu / rdfspecified _ by " ) ; while ( getRelatedObjects ( getRelatedObjects ( conseq , model , " http : / / protege . stanford . edu / rdfconsists _ of " ) , model , " http : / / protege . stanford . edu / rdfconsists _ of " ) . size ( ) ! = 0 ) { conseq = chooseConsequence ( getRelatedObjects ( conseq , model , " http : / / protege . stanford . edu / rdfconsists _ of " ) , model ) ; } if ( getRelatedObjects ( conseq , model , " http : / / protege . stanford . edu / rdfconsists _ of " ) . size ( ) ! = 0 ) { conseq = chooseGroupsOfConsequencesViaWants ( conseq , model ) ; } return conseq ; } Figure 7 . 3 : Implementation of consequence laddering The reasoner implements this laddering process as follows : • Check if consequence speciﬁcation is necessary . The software reasoner checks ( using the condition of the while statement in the code - sample ) if the spec - iﬁcation of a speciﬁcation of a consequence is a non - empty set of conse - quences . If so , the speciﬁcation of a consequence cannot be the most detailed - or : leaf - consequence and thus should be speciﬁed further . Note here that the tool relies on the method getRelatedObjects ( . . . . ) to perform inferencing steps , in this case to ﬁnd a set of detailed consequences for an input consequence . • If laddering is necessary , choose consequence When the speciﬁcation of the speciﬁcation of a consequence yields a non - empty set , this consequence is used as input for the method chooseConsequence ( . . . ) . The method chooseConse - quence ( . . . ) speciﬁes the consequence into detailed consequences , and asks the customer to choose one of these . When a consequence has then been cho - sen , it is returned and again used as an input for the boolean - condition of the while - statement . Thus : For the chosen detailed consequence , the tool again checks if the speciﬁcation of the speciﬁcation of this consequence yields a non - empty set . If so , the detailed consequence is again detailed further by the method chooseConsequence ( . . . ) . • If the next level in the consequence graph is the most detailed level , choose a group of consequences via wants . Consequence laddering with chooseC - onsequence ( . . . ) continues until the speciﬁcation of a speciﬁcation of a set of consequences yields an empty set . In that case , we use the method conseq = chooseGroupsOfConsequencesViaWants ( conseq , model ) Inferencing with the software reasoner 157 Resource critiqueStep ( Resource bundle , Resource negCons ) { Vector < Resource > allServicePortsSatisfyingConsequence = getRelatedObjects ( getRelatedObjects ( getRelatedObjects ( negCons , model , " http : / / protege . stanford . edu / rdfhas _ property " ) , model , " http : / / protege . stanford . edu / rdfhas _ resource " ) , model , " http : / / protege . stanford . edu / rdfbelongs _ to _ service _ port " ) ; allServicePortsSatisfyingConsequence . addAll ( getRelatedObjects ( getRelatedObjects ( negCons , model , " http : / / protege . stanford . edu / rdfconsequence _ has _ resource " ) , model , " http : / / protege . stanford . edu / rdfbelongs _ to _ service _ port " ) ) ; Vector < Resource > portToTrace = getRelatedObjects ( getRelatedObjects ( bundle , model , " http : / / protege . stanford . edu / rdfhas " ) , model , " http : / / protege . stanford . edu / rdfconsists _ of " ) ; portToTrace . retainAll ( allServicePortsSatisfyingConsequence ) ; Resource sourcePort = getRelatedObjects ( getRelatedObjects ( portToTrace , model , " http : / / protege . stanford . edu / rdfis _ start _ point " ) , model , " http : / / protege . stanford . edu / rdfends _ at " ) . get ( 0 ) ; Vector < Resource > sourcePortVec = new Vector < Resource > ( ) ; sourcePortVec . add ( sourcePort ) ; return getRelatedObjects ( getRelatedObjects ( sourcePortVec , model , " http : / / protege . stanford . edu / rdfpart _ of " ) , model , " http : / / protege . stanford . edu / rdfhas " ) . get ( 0 ) ; } Figure 7 . 4 : Implementation of the critique step : Finding the smallest unit of de - livery that causes constraint violation . to ﬁnd the wants for this consequence . The critique step The purpose of the critique step is to ﬁnd the part of the bundle that is deemed too expensive by the customer ( see table 6 . 2 . 2 ) . Figure 7 . 4 shows an implementation of this step : The method critiqueStep ( . . . . ) . cri - tiqueStep ( . . . . ) relies on two local variables : bundle , the service bundle that needs to be critiqued , and negCons , the negative consequence that needs to be traced to an ele - mentary unit of delivery in the bundle . First , the tool ﬁnds the service port to which negCons is attached as follows : 1 . The tool traces the consequence negCons to all service ports that contain a re - source that realizes a consequence , or a resource with service properties that together realize a consequence . For example , ﬁgure 7 . 4 shows the tracing of negCons by nesting the method getRelatedObjects ( ) : First , for yielding a vector 158 The PCM 2 software reasoner of resources by following the relation consequencehasresource and then , by taking this vector of resources as input , for yielding service ports belongstoserviceport . 2 . The tool ﬁnds all service ports of the bundle that needs to be critiqued . Again the method getRelatedObjects ( ) is used for this . 3 . Finally , the tool ﬁnds the port of the bundle that needs to be traced . This is accomplished by intersecting all service ports to which negCons is attached with all service ports of the bundle under critique . Once the relevant service port of the bundle to - be - critiqued is found , the method critiqueStep ( ) traces this port to the port of the elementary service that is responsible for the high costs . This is done by following the relation isstartpoint to ﬁnd the starting point of a service link , and then following the relation endsat to ﬁnd the port at the end point of that service link . Again , this tracing is realized by using the method getRelatedObjects ( ) . Finally , the tool ﬁnds the elementary service that contains the found service port , and returns this service as the culprit . 7 . 3 Tool implementation reﬂection 7 . 3 . 1 Developing tool support : Contributions to research Tool development is primarily required to support the claim that we can computa - tionally reason about the needs - driven bundling of commercial services . In addi - tion however , we ﬁnd that tool implementation enforces concrete speciﬁcation of the reasoning process and that it allows us to demonstrate the reasoning process to practitioners . Tool implementation enforces concreteness Tool development enforces speci - ﬁcity when developing the reasoning process . Actually , the reasoning process de - scribed in the previous chapter was developed partly by ( thought - ) experiments with a simple , desk - based e - mail example , and partly by implementation to be concrete in the reasoning steps taken in the thought - experiment . To illustrate , consider the following intuition that we started with prior to develop - ing tool support for the reasoning process : First use customer - supplier interaction to ﬁnd services for basic requirements against acceptable costs , and only then build on these services with value - enhancing requirements ( as discussed in 5 . 3 . 1 ) . Concluding outlook 159 This seems a reasonable intuition , yet it only remains an intuition until one makes very speciﬁc how this is going to taken into account in the reasoning process . And it is exactly in making things more speciﬁc that developing tool support really helps . Returning to our intuition for example , developing a tool helped in making speciﬁc at least the following steps in the reasoning process : • Speciﬁcation of cost sources by implementing the concepts ‘service ports’ and ‘service interfaces’ . An important question for our intuition is how to make sure of ‘acceptable costs’ . One way to do this is to implement a mech - anism that allows one to trace costs to speciﬁc sources , so that the reasoning process can locate features that the customer deems to be too expensive . The implemented concepts service port and service interface concepts really helped in making this tracing concrete , since a service port allows for tracing a source to a speciﬁc interface , and the interface then helps to locate what resources must be acquired together . • Implementation of pricing models . The implementation of pricing models helped in making monetary costs more speciﬁc , which is ( obviously ) relevant to ﬁnd ‘acceptable costs’ . Again , the implemented concepts service port and service interface are relevant here since they do not only allow for specifying the bundle price , but also for tracing elements of the bundle price to the speciﬁc prices of individual services as indicated by service ports . Tool implementation as a means of showcasing functionality to practitioners Second , tool development allows for showcasing tool functionality to domain ex - perts from case study partners . Showcasing experts an implemented reasoning process , in our experience , is a useful means for receiving feedback on the imple - mented theory . This is because , as opposed to a paper - based emulation , domain experts are directly presented with the actual outcomes of a computational pro - cess . As a result , researchers can focus their discussion on the usefulness of an actually implemented theory instead of going through the trouble of a , somewhat speculative , pen - and - paper based simulation . This is an interesting addition to the initial goal of our tool , i . e . : to mainly use the tool as a proof - of - concept for our own research purposes . 7 . 4 Concluding outlook We have developed a software reasoner as a proof - of - concept , to support the claim that e 3 service can be used to computationally reason about needs - driven service 160 The PCM 2 software reasoner bundling . The reasoner provides a one - to - one implementation of the reasoning steps from e 3 service detailed in section 6 . 2 : No steps are added , modiﬁed or re - moved . The software reasoner allows us to show the computational reasoning capabilities of e 3 service to researchers and domain experts . This is in line with its primary aim : To use it as a proof - of - concept . Ideally however , the reasoner should also be usable by customers , normal end - users that may not have a technical background . After all , customers are in the best position to comment on to what extend the e 3 service reasoning process helps them to ﬁnd services in line with their needs . Unfortunately , the reasoner is currently only usable by persons with a technical background , because ( 1 ) it requires familiarity with Java ( for example : To install the Jena - environment and to set class - paths ) ( 2 ) it is text - based and ( 3 ) domain experts require familiarity with ontology editors such as Protege if they wish to edit service catalogues . To ensure that the reasoner can be used independently of our research efforts , we therefore require software support for e 3 service that does not require separate in - stallation of java - libraries , and that can be accessed through a GUI . We envision that domain experts can edit conceptual models of service catalogues through a GUI ( akin to the web - based tool described in section 3 . 6 ) , thus hiding for them the underlying , more technical , ontology instantiation . For end - users , we envision that they can use a GUI - based question - answer game for our interactive reasoning process . Chapter 8 Hosted ICT services This chapter discusses an application of e 3 service to the hosted ICT services domain . This chapter is based on de Haan ( 2009 ) , a master thesis describing the application of e 3 service to a provider of hosted ICT services . In chapter six , we have explained the e 3 service reasoning process with a simple e - mail hosting example . To show that e 3 service can also cope with more complex cases , we shall now discuss an application to a real - life case study in the domain of hosted ICT services . After a short introduction to the case study and a discussion of the study setup ( sections 8 . 1 and 8 . 2 ) , we discuss the creation of catalogues of hosted services ( section 8 . 3 ) . Section 8 . 4 shows how to reason with these catalogues about creating meaningful bundles of hosted services . 8 . 1 Finding needs - driven bundles of hosting services at OGD With cost reduction on ICT acquisition and ICT maintenance and a focus on core competencies as key considerations ( Dibbern et al . 2004 ) , organizations may out - source ( part of ) their ICT to third party ICT - service providers . Here , outsourcing ranges from outsourcing basic ICT - services , such as e - mail hosting , to outsourcing a signiﬁcant part of the ICT - department , such as transferring hardware maintenance to a third party ICT - services provider . 162 Hosted ICT services Operator Groep Delft ( OGD ) is a Dutch ICT service provider ( + / - 750 employees ) that has recently started to provide such third party ICT - services . Currently , they offer one ICT - service to their clients : Historium , an online back - up service . Other services , such as a virtual workspace for a client that is accessed remotely through a thin client environment ( called ‘hosted desktop’ ) , are currently offered on a pilot base only . Offering hosted services is relatively new to OGD . As a result , OGD currently lacks as coherent idea of the beneﬁts of their service offerings , how individual services are interrelated , and what customer needs their services satisfy . This knowledge is either fragmented throughout OGD , or unknown altogether . For many OGD - employees , this can be problematic . Junior account managers may have trouble in stating why a service is interesting for a customer , while the marketing department may have trouble describing the service in offering texts . Therefore , OGD wants to create a service catalogue that provides a uniform idea of ( 1 ) the beneﬁts of the individual services from OGD , ( 2 ) relations between these services and ( 3 ) the customer needs these services satisfy . This should at least partially address the difﬁculties discussed : Marketing personnel could for instance beneﬁt from a standard list beneﬁts and ICT needs as a basis for writing their promotional texts . In this chapter , we describe how e 3 service was employed to create such a service catalogue . In addition , OGD is interested in our software reasoning tool to ( 1 ) train junior account managers and ( 2 ) structure the dialogue for personnel selling services by phone . In this chapter we therefore also display some typical reasoning processes as performed by the tool , and discuss ( 1 ) to what extent these processes reﬂect the sales of a real account manager , and ( 2 ) to what extent the tool could be useful in practice . Finally , it is worthwhile remarking that hosted services are - per deﬁnition - for the most part provisioned online . This makes the case especially interesting in the light of our research purposes : To online offer bundles of e - services , that can be provisioned soon after ordering . 8 . 2 Case study setup This chapter is based on a master graduation project ( see de Haan ( 2009 ) ) , where e 3 service was applied to a hosting company to ( a ) create a service catalogue and ( b ) evaluate the e 3 service reasoning process . This study consisted of three main activ - ities : ( 1 ) creating a supplier perspective service catalogue ( 2 ) creating a customer Case study setup 163 perspective service catalogue ( 3 ) validation of the e 3 service reasoning process . Creating a supplier - perspective catalogue of hosting services : First , written material on OGD ( pilot ) services was studied for creating the supplier perspective service catalogue . Offer texts written by account managers for pilot customers are an example of this . These provide an insight into provided func - tionality , combinations of services offered and terms and conditions under which services are provided . Second , service designers and account managers were interviewed to complete the service catalogues . Account managers aided in deﬁning the consequences of each service , while service designers deﬁned the individual services and dependencies between these services . Finally , the service designers and account managers veriﬁed if the service bundles were modelled correctly . Veriﬁcation was performed by ﬁrst explaining the service dependencies using the Historium service , since this easy to understand service that is already well known within OGD . Thereafter , more complex service bundles were evaluated . Creating a customer perspective catalogue of hosting services : To create a customer perspective service catalogue , interviews with OGD’s account managers were used the primary information source . They are most knowledgeable about what needs typical users of OGD services have , and what positive features of services should be emphasized in the sales process . For needs elicitation , the account managers were asked for the most common rea - sons to acquire OGD services . For example : Three of the four account managers interviewed mention that customers often state that ‘maintaining an ICT depart - ment is too expensive’ and that this is an often used starting point in offering OGD services . For eliciting consequences , the account managers were asked what moti - vations they emphasize for selling each hosted service . For example : All account managers emphasized ‘lower total cost of ownership’ as a general reason for ac - quiring hosted services , and that this contributes to satisfying the need ‘maintaining an ICT department is too expensive’ . Thus , the positive functional consequence ‘lower total cost of ownership’ was added as a positive consequence to all bundles of hosted services from OGD . Of course , ideally one would also like to interview existing customers for an insight into their needs and how they use services from OGD . However , most services were still in pilot phase , and therefore not yet used . Therefore , there was no sample of customers that could be interviewed . Validating the e 3 service reasoning process : 164 Hosted ICT services In Protege , ontology instantiations have been created of the validated customer and supplier perspective catalogues of OGD service knowledge . Thereafter , tool demonstrations with two experienced account managers were held . The principles implemented in the software tool were showcased by using sce - nario walkthroughs , whereby commonly occuring customer needs , such as ‘we need certainty that a business - critical application is available when needed’ acted as a starting point in showing the reasoning process . The account managers were then requested to react on ( 1 ) to what extent the reasoning process was similar to how they would sell services in practice , and ( 2 ) to what extent the tool is usable in practice for training junior account managers . 8 . 3 Creating catalogues of hosted services 8 . 3 . 1 Instantiating the supplier perspective ontology Figure 8 . 1 shows a supplier perspective service catalogue of hosted services from OGD . Model individual services Individual services are elicited by reviewing what units of delivery OGD considers viable to be provisioned on their own commer - cially . For example , in the supplier perspective service catalogue we see that two e - mailing solutions exist : ( 1 ) hosted exchange basic , a solution offering basic e - mailing capabilities such as sending and receiving e - mail through a standard e - mail client and ( 2 ) hosted exchange complete , a solution that offers the same basic e - mail capabilities , only then supplemented with extra features such as e - mail access via the mobile phone , a mailbox that can be shared with others , etc . The offering of two different e - mailing solutions is mostly a business decision : the underlying technology is largely the same . Therefore , while technically only one unit of pro - vision exists , from a commercial point of view OGD considers that they have two different offerings of e - mail services . Model service consequences We identify the consequences from the individual services . First , we ﬁnd functional consequences , such as ‘send and receive e - mail’ for the hosted exchange services , and ‘generic backup capability’ for the Historium service . Second , we ﬁnd quality consequences , such as ‘e - mail access by phone’ and ‘e - mail access via web browser’ for the elementary service Hosted exchange Creating catalogues of hosted services 165 complete and ‘within 4 hours’ and ‘within 7 hours’ for the elementary service Historium . Group consequences We group quality consequences using the concept of a scale ( see section 6 . 1 . 1 ) . We group ‘e - mail access by phone’ and ‘e - mail access via web browser’ under the nominal scale ‘e - mail access method’ because the prefer - ence ordering for these consequences depends on the customer . We group ‘within 4 hours’ and ‘within 7 hours’ under the ordinal scale ‘response time’ , because this indicates the different response times in recovering a lost dataset . If someone con - siders response time important , the shorter response time is always preferred over the longer one ( obviously ) . Model service dependencies Next , we model dependencies between the indi - vidual services . Some important modelling considerations depicted here are : • Helpdesk support is a standard supporting service for the depicted basic ser - vices . • Implementation and migration is a standard supporting service for both hosted exchange service offerings . OGD states that a continually functioning e - mailing capability is deemed vital by most organizations , and that they there - fore want to make sure that migration to their e - mail solutions happens as quickly as possible and by burdening the organization as little as possible . To this end , OGD wants to perform migration themselves , rather than hand - ing over the responsibility for this to the organization itself . • Implementation and migration is an enhancing service for the online back up service historium and as such , not included as a standard supporting service . The reason for this is twofold : ( 1 ) installation is relatively straightforward , requiring a single installation of a software tool on a server , and ( 2 ) OGD deems historium not to be as ‘business critical’ as an e - mail service . • Hosted exchange complete ( the hosted e - mail solution from OGD ) is in an OB relationship with Historium ( the online backup service from OGD ) to indicate that account managers often offer functionality of one of these ser - vices in combination with functionality of the other service . However , both services can also be acquired separately . • Hosted exchange complete is in an C / E relationship with the service Ex - change brick - level . This indicates that account managers often offer func - tionalities provided by these services in combination , but also that they never 166 Hosted ICT services sell exchange brick - level separate from hosted exchange complete . This is because the exchange brick level is a component that allows for making backups of individual mailboxes and as such , only makes sense in combi - nation with a basic e - mail service . Model wants Next , we identify wants and relations between these wants . Since we have only one supplier in this case , wants are equal to the individual services modeled so far . Pregenerate possible service bundles Based on the individual services and de - pendencies that exist between these services , we generate all possible service bun - dles . For example : From the dependency OB ( Hosted exchange complete , His - torium ) we generate two possible bundles : { Historium ( OGD ) } and { Historium ( OGD ) , Hosted exchange complete ( OGD ) } . A sample of the pregenerated bun - dles of hosting services can be found in table 8 . 1 . Identify positive consequences additional to the consequences of the individ - ual services Next , we review if the service bundles lead to additional positive consequences . For OGD , we ﬁnd for example that the services in a bundle such as { Historium ( OGD ) , Hosted exchange complete ( OGD ) } are supported by the same helpdesk . Thus , for such a bundle of hosted services from OGD , ‘single point of contact’ can be an additional positive consequence . 8 . 3 . 2 Instantiating the customer perspective ontology Inherit supply - side wants and consequences The consequences and wants mod - elled in the supply - side catalogue are also modelled on the customer perspective . As we can see in the customer perspective catalogue ( ﬁgure 8 . 2 ) , we thus model functional consequences such as ‘send and receive e - mail’ , and quality conse - quences ‘small mailbox’ and ‘large mailbox’ on the customer perspective also . As we discussed in section 6 . 2 . 2 , we model the same consequences on the customer and supplier perspective so that we can make a transition from one perspective to the other perspective . Model demand interdependencies Next , we model interdependencies between consequences that OGD considers to be of interest to the customers . In the OGD customer perspective service catalogue , we ﬁnd two such dependencies : Creating catalogues of hosted services 167 C / S C / S C / S SU SU C / S C / E OB OB C / S - - - - - - - - C / E - Figure 8 . 1 : Sample of the supplier perspective service catalogue for the OGD hosting services 168 Hosted ICT services Service bundle Functional consequences Hosted Exchange Access to email , contact support , don’t receive un - basic wanted email , don’t receive viruses through email , lower total cost of ownership , send and receive email , see progress of open calls , single point of con - tact Hosted Exchange Access to email , contact support , don’t receive un - complete wanted email , do not receive viruses through email , lower total cost of ownership , make appointments with colleagues , make group email addresses , op - tion to give colleagues access to your email , send and receive email , see progress of open calls , single point of contact { Historium , Access to email , contact support , don’t receive un - hosted exchange wanted email , do not receive viruses through email , complete , exchange brick - level } lower total cost of ownership , make appointments with colleagues , make group email addresses , option to give colleagues access to your email , send and re - ceive email , see progress of open calls , single point of contact , automatic back - up , contact support , data is secure , easy to use backup , free software updates , know if a backup was successful , receive a report with usage statistics , restore server to original state , see progress of open calls { Historium , Access to email , contact support , don’t receive un - hosted exchange wanted email , do not receive viruses through email , basic } backup happens without active involvement of lo - cal ICT personnel , contact support , data is secure , easy to use backup , free software updates , know if a backup was successful , receive a report with us - age statistics , restore server to original state , see progress of open calls , single point of contact Table 8 . 1 : Sample of generated service bundles and their respective functional consequences Reasoning about bundling hosting services 169 1 . Generic backup is in an Optional Bundling ( OB ) relationship with send and receive e - mail . OGD’s account managers often sell these services together , because they both provide functionality that organizations often require . 2 . ‘send and receive e - mail’ ( core ) is in a Core / Enhancing ( C / E ) relationship with ‘Backup of individual mailboxes’ ( enhancing ) . Obviously , the enhanc - ing consequence ‘backup of individual mail boxes’ is an irrelevant without having a basic e - mailing capability ﬁrst . Model needs Account managers from OGD often mention two customer con - cerns that lead organizations to acquire hosted services from OGD : ‘an ICT solu - tion should be available when needed’ and ‘an IT department is too costly’ . OGD’s clientele largely consists of SMEs , who are too small to set up a reliable , up - to - date ICT infrastructure on their own . Model consequence ladder Finally , the detailed - level consequences have to be linked to the customer needs through consequence ladders . Depending on the ab - straction level of the need , a detailed level consequence can be directly linked to a need , or might require several intermediary consequences of different levels of abstraction . For OGD , we ﬁnd that the needs ‘certainty that a business critical ICT solution is available when needed’ and ‘maintaining our IT department is expensive’ are both too abstract to be matched to a detailed - level consequence directly . We therefore ﬁrst specify intermediary - level consequences for both needs , that act as solution directions towards a detailed - level consequence . For example , in the customer per - spective service catalogue ( ﬁgure 8 . 2 ) , we can see that ‘certainty that a business critical ICT solution is available when needed’ is ﬁrst speciﬁed into ‘availability of applications’ and ‘availability of data’ . These solution directions lead to differ - ent detailed - level consequences : ‘availability of applications’ leads to applications such as a hosted desktop and e - mail hosting , while ‘availability of data’ leads to a back - up capability . Because these intermediary consequences represent differ - ent interpretations of the higher - level need , we require such intermediary conse - quences . 8 . 4 Reasoning about bundling hosting services We now display the reasoning process for hosted services . In particular , we focus on customer - supplier interaction and reasoning with value - enhancing services . We 170 Hosted ICT services M a il bo x ba ck - up C e r t a i n t y t h a t a bu s i n e ss c r i t i c a l s o l u t i o n i s a v a il a b l e w h e n e v e r i t i s n ee d e d M a i n t a i n i n g o u r I T d e p a r t m e n t i s t oo e x p e n s i v e O n li ne ba ck up H o s t ed e xc hange H o s t ed de sk t op c on t r o ll ab l e c o s t s D a t a a v a il ab l e i n c a s e o f e m e r gen cy A pp li c a t i on s a r e a v a il ab l e 24 / 7 Lo w e r t o t a l c o s t o f o w ne r s h i p Lo w dep l o y m en t t i m e o f ne w de sk t op s F l e x i b l e c apa c i t y sc a li ng Lo w e r w o r k l oad o f c u rr en t I T - pe r s onne l B a ck up happen s w i t hou t i n v o l v e m en t o f l o c a l I T pe r s onne l D a t a i s s e c u r e C / E O B - - M a il bo x s i z e ( o r d i na l ) - M ed i u m - La r ge A cc e ss t y pe ( no m i na l ) - M a il c li en t - W eb b r o w s e r - M ob il e phone B a ck up i nd i v i dua l m a il bo x e s G ene r i c B a ck up c apab ili t y 99 , 5 % up t i m e o f e - m a il s e r v e r O B . . . U s e de sk t op on an y s i t e w i t h c onne c t i v i t y Figure 8 . 2 : Sample customer perspective service catalogue for the OGD hosting services Reasoning about bundling hosting services 171 take the following scenario as a starting point : ‘An antique dealer’s current e - mail solution is not reliable enough . His server is outdated and sometimes crashes which causes some e - mail to not be received . ’ For illustration purposes , the steps from the reasoning process are accompanied by a sample of the output of the software reasoner for the hosted services case . For reference , note that : ( 1 ) We follow the reasoning steps as described in section 6 . 3 , and ( 2 ) The knowledge displayed in the tool output is equivalent to that in the customer and supplier perspective service catalogues ( ﬁgure 8 . 2 and table 8 . 1 ) . Choose need and choose consequences Of the two most commonly heard needs from OGD , the need ‘we need certainty that a business critical technical solution is available whenever needed’ is selected for the antique dealer since this comes closest the problem he currently faces : An unreliable e - mail solution . Next , the antique dealer chooses the functional consequence ‘99 , 5 % uptime of e - mail server’ and proceeds to score the attached quality consequences from the nominal scale ‘e - mail access method’ and from the ordinal scale ‘mailbox size’ . We assume the antique dealer provides the importance scores presented in table 8 . 2 . Outcome of this step : For the selected functional consequence , the quality consequences - per scale - are : We found the following scale of quality consequences : e - mail access method Please assign a score from 1 ( not important ) to 10 ( vital ) to each of these consequences e - mail using Microsoft Outlook 6 e - mail access using a web browser 8 e - mail access by mobile phone 2 We found the following scale of quality consequences : mailbox size 1 : large mailbox 2 : small mailbox please attach an importance rating ( 1 - 10 ) to this ordinal scale : 8 Table 8 . 2 : Mailing preferences entered by antique dealer Find and rank service bundles We ﬁnd the bundles ‘Hosted Exchange Basic’ and ‘Hosted exchange complete’ for the must - have functional consequence ‘99 , 5 % uptime of e - mail server’ . For this , the reasoning process : 172 Hosted ICT services 1 . Matches the customer and supplier perspective consequences ‘99 , 5 % uptime of e - mail server’ ; 2 . The supplier perspective consequence ‘99 , 5 % uptime of e - mail server’ is traced to the supplier - speciﬁc resources ‘Hosted exchange basic’ and ‘Hosted exchange complete’ 3 . The supplier - speciﬁc resources are traced to the service ports that correspond to the service bundles ‘hosted exchange basic’ and ‘hosted exchange com - plete’ . Next , bundle scores are calculated for the found bundles . For the bundle ‘Hosted exchange basic’ this calculation is presented below . • ‘small mailbox’ scores 0 . 25 because this consequence ( 1 ) is deﬁned on an ordinal scale and ( 2 ) is deﬁned on an ordinal scale that contains one addi - tional , higher ranked , consequence : ‘large mailbox’ . Using the ROC formula ( formula 6 . 2 ) the higher ranked consequence scores 0 . 75 , the lower ranked consequence 0 . 25 . • Other consequences present in the bundle , such as ‘e - mail access method : E - mail access using a web browser’ score 1 because they are deﬁned on a nominal scale . Note here that , as stated in section 6 . 3 , the scoring of consequences from an ordi - nal scale is performed differently from consequences deﬁned on an ordinal scale . See table 8 . 3 for a resulting ranked service bundles , as provided by the software reasoner . Outcome of this step : The service bundles ‘Hosted Exchange Basic and ‘Hosted exchange Complete , ranked according to how well they ﬁt with the customer pref - erences ( see table 8 . 3 ) . Trade off positive / negative consequences The bundle ‘Hosted exchange com - plete’ is more in accordance with the desired consequences than the bundle ‘Hosted exchange basic’ . Yet , from the pricing models the antique dealer also observes that the complete bundle costs e 10 per month per user , while the basic bundle costs e 5 per user per month . For a fair weighing of these costs against the beneﬁts pro - vided by each bundle , the antique dealer therefore decides to also score negative consequences , such as ‘12 month commitment to using OGD services’ and ‘hosted exchange complete fee’ . Reasoning about bundling hosting services 173 1 : The service bundle hosted Exchange Basic can satisfy all desired consequences . Please ﬁnd below what this bundle can provide you with * don’t receive viruses through e - mail * don’t receive unwanted e - mail * 99 , 5 % uptime of e - mail server * . . . Additionally , this bundle contains the following quality consequences : * mailbox size : small mailbox for the functional consequence 99 , 5 % uptime of e - mail server * e - mail access method : e - mail access using a web browser for the functional consequence access to e - mail * contact method : contact support through web interface for the functional consequence contact support * contact method : contact support by phone for the functional consequence contact support * . . . Score bundle = ( 0 . 8 * 0 . 25 ) + ( 0 . 8 * 1 . 0 ) + ( 0 . 2 * 1 . 0 ) + ( 0 . 9 * 1 . 0 ) + ( 0 . 8 * 0 . 25 ) + ( 0 . 3 * 1 . 0 ) To acquire the bundle : hosted Exchange Standard Complete you have to give up the following : * no switching of suppliers for 12 months * hosted exchange complete fee For this bundle , we found the following pricing model : * Hosted exchange standard complete This pricing model is of the type : single discount pricing model . The price of this bundle is build up as follows : * The two - part pricing model Hosted exchange standard complete fee is build up as follows : X euro installation fee + 10 euro monthly / User . This pricing model is attached to the same port as the consequence hosted exchange complete fee . . . . So the possible bundles , sorted according to preference , are : 1 : hosted Exchange Standard Complete with the score : 5 . 3 2 : hosted Exchange Basic with the score : 4 . 1 Please select a bundle . If none is to your liking , select 0 ( zero ) . Table 8 . 3 : Tool output for two bundles of mailing services , ranked according to how well they ﬁt with customer preferences The provided scores are presented in table 8 . 4 . We can see that although the antique dealer scores the fee for exchange complete higher than the fee for exchange basic , exchange complete still outranks exchange basic , albeit with a smaller margin than for the bundle scores that are based on the positive consequences only ( again , see table 8 . 4 ) . Thus , the antique dealer decides to acquire the bundle ‘Hosted exchange complete’ . Outcome of this step : The antique dealer chooses the bundle ‘Hosted exchange 174 Hosted ICT services complete’ . Would you also like to score all negative consequences to see how a bundle scores on a trade - off between beneﬁts and sacriﬁces ? ( y / n ) y Please assign a score from 1 ( does not really matter ) to 10 ( this consequence must be lacking from the bundle ) to each of the following consequences : no switching of suppliers for 12 months 3 hosted exchange complete fee 8 hosted exchange basic fee 4 Taking the negative scores into account , the new ordering of bundles is : 1 . hosted Exchange Standard Complete Score : 4 . 2 2 . hosted Exchange Basic : 3 . 6 Please select a bundle . If none is to your liking , select 0 ( zero ) . Table 8 . 4 : Trade of positive and negative consequences for hosted services Find value - enhancing services Next , the antique dealer chooses consequences that OGD considers to be interdependent in demand with the functional conse - quences already included in the selected bundle . For the consequence ‘99 , 5 % uptime of e - mail server’ , we ﬁnd two functional consequences : ‘back up individ - ual mail boxes’ and ‘generic back - up capability’ ( for reference , see the customer perspective catalogue in ﬁgure 8 . 2 ) . Because the antique dealer maintains his back - ups on a server that can itself be considered an antique , we assume that the antique dealer is interested in both functional consequences . Next , the reasoning process considers the quality consequences relevant for the scored functional consequences . As can be observed from the customer perspective service catalogue however ( ﬁgure 8 . 2 ) none of the value - enhancing consequences contain quality consequences . Outcome of this step : The additional , value - enhancing , consequences { back up individual mail boxes , quick recovery of individual mailboxes , automatic backup , data is secure , back - up happens without involvement of local IT personnel } . Find and choose bundle To ﬁnd bundles , the reasoning process uses the value - enhancing consequences as input , plus the consequences from the service bundle already selected ( ‘Hosted exchange complete’ ) . As with the basic consequences , the reasoning process ﬁnds service bundles by ( 1 ) matching these consequences with all supply - side consequences ( 2 ) tracing the Reasoning about bundling hosting services 175 consequences on the supplier perspective to service bundles that satisfy these con - sequences . Outcome of this step : The bundle ‘Hosted exchange complete Historium Exchange brick - level . Trade - off positive and negative consequences The antique dealer receives a speciﬁcation of the positive and negative consequences for the bundle ‘Hosted ex - change complete Historium Exchange brick - level’ , plus a speciﬁcation of the pric - ing model for this bundle . After reviewing the pricing model ( see table 8 . 5 ) , the antique dealer decides to score the negative consequences for the bundle ‘Hosted exchange complete Historium Exchange brick - level’ also . For this bundle , we found the following pricing model : * Hosted exchange complete Historium Brick - level exchange pricing model This pricing model is of the type : single discount pricing model . The price of this bundle is build up as follows : * The two - part pricing model Hosted exchange standard complete pricing model is build up as follows : X euro installation fee + 10 euro monthly / User . This pricing model is attached to the same port as the consequence hosted exchange complete fee . * The n - block pricing model Historium pricing model is build up as follows : Condition : Server 1 : 60 euro monthly + Condition 2 : Server 2 : 55 euro / monthly + Condition 3 : Server 3 and on : 50 euro / monthly / server . This pricing model is attached to the same port as the consequence online back - up fee . * The usage - based pricing model Exchange brick - level pricing model is build up as follows : 50 euro / monthly . This pricing model is attached to the same port as the consequence back - up individual mailboxes fee . Table 8 . 5 : Pricing model for the bundle Hosted exchange complete Historium Brick - level The antique dealer has already agreed to the fee for hosted exchange complete , and so attaches a score ‘2’ ( from 1 to 10 , where 1 indicates ‘does not matter’ and 10 ‘won’t have’ ) to the negative consequence ‘hosted exchange complete fee’ . The antique dealer attaches the score ‘6’ to the negative consequence ‘online back - up fee’ , considering that while he pays 60 euro monthly ( due to the single server he has ) he also does not have to worry about having to maintain a backup anymore . Fi - nally , the antique dealer considers the negative consequence ‘individual mailboxes fee’ as a won’t have and thus scores this as a ‘10’ . He considers the investment in a dedicated backup for his e - mail not to be worthwhile e 50 monthly , also when considering that he already has a generic backup capability . 176 Hosted ICT services Outcome of this step : No possible bundles , proceed with the critique - step . Find culprit For the negative consequence that is scored as a won’t have , the reasoning process now performs a critique - step to ﬁnd the positive consequences attached to the cost - source . As such , the antique dealer is presented with the dia - logue in table 8 . 6 . The bundle Hosted exchange complete Historium Exchange brick - level contains the won’t have Brick level fee We shall now investigate what positive consequences from this bundle require the negative consequence Brick level fee The following group of positive consequences : 1 : Back up individual mail boxes 1 : Quick recovery of individual mail boxes requires the negative consequence back - up individual mailboxes fee Table 8 . 6 : Critique : Find the preference that is too expensive to fulﬁll . As also visualized in ﬁgure 8 . 3 , the reasoning process thus ﬁnds the part of the total bundle that requires the won’t have . Outcome of this step : The consequence ‘Back up individual mail boxes’ is found as the culprit . Choose consequences Next , the antique dealer is asked to what place in the rea - soning process he should return to adjust his requirements . 1 . Start from group of detailed functional consequences you had initially chosen . This was : * don’t receive viruses through e - mail * don’t receive unwanted e - mail * 99 , 5 % uptime of e - mail server . . . 2 . Start at the value - enhancing consequences * Back up individual mail boxes * quick recovery of individual mailboxes 3 . start all over , ie : from the need . other ( > 3 ) : quit . Table 8 . 7 : Adjusting preference scores As can be seen in the dialogue from table 8 . 7 , the antique dealer selects ( 2 ) : Start at value - enhancing requirements . He now returns to the basic bundle ‘Hosted ex - Reasoning about bundling hosting services 177 S end and r e c e i v e e - m a il B a ck up i nd i v i dua l m a il bo x e s C on t a c t s uppo r t A u t o m a t i c ba ck up B l o ck v i r u s m a il s Block unwanted e - mails C o mm i t m en t t o u s i ng O G D - s e r v i c e s Implementationfee E xc hange b r i ck - l e v e l f ee Historium fee E - m a ili ng f ee E - m a ili ng f ee . . . . . . Figure 8 . 3 : Finding the part of the service bundle whose requirements are deemed too expensive 178 Hosted ICT services change complete’ and answers ‘no’ when asked if he is interested in the value - enhancing consequence ‘Back up individual mail boxes’ and ‘quick recovery of individual mailboxes’ . Outcome of this step : The consequences ‘Back up individual mail boxes’ and ‘quick recovery of individual mailboxes’ are no longer used as input for the rea - soning process . Find service bundles The reasoning process now again ﬁnds service bundles for the set of consequences belonging to the bundle ‘Hosted exchange complete Historium Exchange brick - level’ minus the consequence ‘Back up individual mail boxes’ . Thus , the bundle ‘Hosted exchange complete Historium’ is eventually found . Since this bundle contains an online e - mailing capability and online back - up functionality and the antique dealer ﬁnds the costs for both functionalities accept - able , he decides to acquire this service bundle . Outcome of this step : The bundle ‘Hosted exchange complete Historium’ . 8 . 5 Lessons learned Lesson 1 : The reasoning performed by the software tool is similar to the rea - soning performed by account managers . In reaction to a demonstration of our software reasoner , the account managers stated that the reasoning process per - formed by the reasoner is similar to how they sell services . In particular , they observed that : • They start from a problem that the customer has , independently of the avail - able solution . This is similar to our separation between needs ( problem / goal ) and consequences ( valuable features that act as solution directions for satis - fying the need ) . • Constraints do indeed inﬂuence decisions on what bundle the customer ac - quires • Account managers ﬁrst seek out a service that satisﬁes the basic requirements of the customer . Only thereafter , crossselling and upselling is performed . This is similar to our process of ﬁrst agreeing on a basic service , and only then seeking out any value - enhancing services . Lessons learned 179 Actually , the account managers have considered using the tool for guiding the sales process of junior account managers that sell OGD services over the phone . How - ever , in the end they decided to refrain from this because the tool assumes service bundles to be deﬁned upfront , while they consider the dynamic creation of service bundles to be a primary skill for account managers , also junior ones . Lesson 2 : Graphical representations are useful for together exploring services , but for usage on a daily basis a textual version is more adequate OGD in - ternally actually uses the service catalogue created during the master graduation project . Especially , it is found that the service catalogue provides non - technical personnel with a more complete insight into the pilot services that OGD wants to offer , without having to know the speciﬁc technical details . For example : Mar - keting personnel uses the service catalogue to prepare offer texts for services that are currently being piloted , while account managers use the same catalogue as a structured starting point for writing offer texts tailored to speciﬁc customer needs . This seems to be a good result from the case study . It is important to note how - ever that the service catalogues that OGD uses on a daily basis are a stripped down textual version of the conceptual models presented in this chapter . This textual representation is especially preferred by marketing personnel , who perceive a bul - let list of service beneﬁts and a list of commonly occuring customer needs more helpful in writing promotional texts than a conceptual model . Also , the account managers prefer a textual representation of the service catalogue , so that they can write a personalized offer text for customers more quickly when compared to using a conceptual model . OGD - personnel did however declare that the formal concep - tual models allowed for a structured exploration of their service offerings , and what needs these offerings satisfy . Especially , using conceptual modelling techniques , combined with a modelling expert that explained the model , allowed for explaining the same service knowledge to different members of personnel . As a result , exper - tise from different sources ( e . g . account managers and service designers ) could be eventually combined into a uniform catalogue . Thus : using conceptual modelling techniques has allowed for a synthesis of different sources of knowledge into a sin - gular service catalogue , by facilitating the communication to different audiences . In sum , it seems that conceptual modeling techniques are a good way of exploring the services that an organization offers , especially in communicating with person - nel with different backgrounds . However , for using a catalogue on a daily basis ( without the availability of persons familiar with conceptual modelling ) it seems that a stripped down textual version is sometimes more appropriate . 180 Hosted ICT services Service property 1… * 1 Contains 0…N 0 . . . N Depends on Excludes 0…N Consists of Has 1 Consequence 1 . . * Resource 0 . . * Belongs _ to Has 0 . . * Service property 1… * 1 Contains 0…N Depends on Excludes 0…N Consists of Has 1 Consequence 1 . . * Resource 0 . . * Belongs _ to Service property 1… * 1 Contains 0…N 0 . . . N Dependson Excludes 0…N Has 1 1 . . * 0 . . * Belongs _ to Has 0 . . * Resource 0 . . * Has Service bundle Consequence 0 . . * Figure 8 . 4 : [ 1 ] Consequences linked to service properties only [ 2 ] consequences linked to service properties , resources and service bundles . Lesson 3 : Consequences can also be the result of resources and service bundles For the desk - based e - mail hosting example in chapter 6 , we based consequences on service properties only . For example : the consequence ‘99 , 5 % uptime of e - mail server’ is be enabled by service properties that describe the used mailing protocol , such as POP or IMAP . This is similar to means - end chaining ( Gutman & Reynolds 1988 ) , where consequences are always assigned to product attributes only . We learned however that resources themselves can also satisfy consequences . An example from the hosted services case study is the resource ‘historium’ , that by itself leads to the consequence ‘online back - up’ . No additional service properties need to be deﬁned to enable this consequence . In addition , we ﬁnd that service bundles can have consequences additional to the consequences of the individual services in the bundle . An example is the bundle { ‘hosted exchange complete’ ( OGD ) , ‘historium’ ( OGD ) } . Here , the customer only receives the consequence ‘single point of contact’ when s / he acquires both services from this bundle from OGD . Stremersch & Tellis ( 2002 ) refer to this as product bundling . Figure 8 . 5 shows how this affects the supplier perspective ontology . Left , we ﬁnd the original ontology , where consequences are assigned to service properties only , while the modiﬁed ontology on the right shows consequences assigned to proper - ties , resources and service bundles . So , on the basis of this case study , we require a change in our ontology to accom - modate the observation that consequences can be realized in multiple ways , instead of through service properties only . Yet , our key premise still holds : That services Lessons learned 181 can be conceptualized in terms of their consequences . In sum : we ﬁnd that : • Employing conceptual models facilitates communication of service know - ledge to different audiences . For OGD , this has contributed to creating a single , coherent service catalogue out of fragmented pieces of service know - ledge residing at different members of personnel . For usage on a daily basis however , OGD prefers a textual version of the service catalogue ; • We ﬁnd that the reasoning as performed by our tool is similar to how OGD’s account managers sell services in practise , especially regarding the trade - offs and the gradual consideration of requirements that are interdependent in demand ; • Consequences do not only arise from service properties , but also from re - sources and service bundles . Chapter 9 Dementia - care services This chapter discusses the application of e 3 service to a case in the healthcare industry . Parts of this chapter ( section 9 . 3 . 2 and 9 . 4 ) have been published in Proceedings of the Bled - conference ( Bled 2009 ) ( de Kinderen et al . 2009 c ) . This chapter describes an application of e 3 service to the Dutch healthcare industry . After a short introduction of the healthcare case and a discussion of the study setup ( sections 9 . 1 and 9 . 2 ) , we show how to instantiate the e 3 service cunstomer and sup - plier ontology for the healthcare domain ( section 9 . 3 ) . We then show how e 3 service can be used to derive service bundles based upon customer preferences ( section 9 . 4 ) . 9 . 1 Reasoning about bundling dementia - care services in the privatized health - care domain As a result of the privatization of the Dutch healthcare industry , informal carers of persons with dementia can select healthcare services on their own with a personal budget . A personal budget is an allowance provided by a general insurance fund , the amount of which is determined by person - speciﬁc factors such as age , income and marital status . The key idea behind a personal budget is that informal carers can select the healthcare providers that they are most comfortable with . As such , they can select a renowned physician , or even hire a friend or family member on a regular basis to support them . 184 Dementia - care services However , this personal budget also introduces difﬁculties . First , many private and ( semi - ) public organizations now offer variations of similar healthcare - services , with the result that healthcare practitioners - let alone informal carers - cannot see the woods for the trees anymore when selecting services . Second , since informal carers generally lack expertise on healthcare services , they often have trouble ex - pressing what they need in terms that are speciﬁc enough to ﬁnd services for . As a response , Dr¨oes et al . ( 2005 ) have developed a pilot Digital Interactive Social Chart for informal carers of persons with DEMentia , called DEM - DISC . The key idea behind this social chart is that informal carers can express their care needs ( or the care needs of the person with dementia ) through a question tree on a website , and that the website subsequently responds with a list of appropriate service bun - dles . For example , an informal carer may state through the question tree that s / he is interested in social contacts for a person with dementia and state the postal code of that person , based upon which a ‘meeting group for people with dementia’ service would be found that is in the vicinity of where the person with dementia lives . In this chapter , we discuss an application of e 3 service to the social chart , and pro - vide reﬂections from healthcare practitioners on this application . For the healthcare practitioners , this application is relevant because they are considering enhancing the reasoning capabilities of the current social chart . We explore alternative rea - soning mechanisms , in particular by focusing on ( 1 ) customer - supplier interaction as an alternative to the currently used - projectionist - question speciﬁcation tree , ( 2 ) gradual consideration of requirements and , ( 3 ) the application of both compen - satory and non - compensatory decision models . 9 . 2 Case study setup Creating catalogues of healthcare services We instantiated the e 3 service ontolo - gies for the healthcare domain . These instantiations were based upon the existing social chart , supplemented with information gathered from interviews with domain experts ( on e . g . constraints such as pricing and waiting lists ) . Validating the e 3 service reasoning process Using the tool , we validated the use - fulness of e 3 service with two 2 + - hour tool demonstrations with the healthcare do - main experts that were mainly responsible for creating the original social chart . Since the tool conforms exactly to the reasoning steps from e 3 service , our as - sumption is that we can also validate the usefulness of e 3 service through such a demonstration . A customer and supplier catalogue of dementia - care services 185 The tool demonstrations consisted of scenario walkthroughs , where realistic con - sumer needs - such as a customer that tries to ﬁnd a meal - preparation service - were taken as starting points to show how the tool interacts with the informal carer . For each scenario walkthrough , the domain expert then commented to what extent the demonstrated principles could constitute a useful addition to the existing social chart . 9 . 3 A customer and supplier catalogue of dementia - care services 9 . 3 . 1 A supplier catalogue of dementia - care services Model individual services We ﬁrst model individual , supplier - speciﬁc services . For example , the ‘arrange Dining table’ service from the care - home Torendael ( see the sample of the supply - side service catalog in ﬁgure 9 . 1 ) would be modelled as follows : 1 . We ﬁnd the service ‘arrange dining table’ and its supplier ‘care - home Toren - dael’ 2 . We model the units of delivery of that service , or : parts of the service that can be meaningfully , and thus commercially , delivered on their own right . In this case , the ‘meal’ would be a unit of delivery 3 . We model the properties of these units of delivery . In this case , ’in group , with other informal carers and persons with dementia’ would be a property of the resource ‘meal’ . Model service consequences Taking the resources and their properties of each individual service as a point of departure , we deﬁne consequences . We start by deﬁning the functional consequences . This we do , as described in section 8 . 5 , for both service properties and resources . For example : Based upon the property ‘in group , with other informal carers and persons with dementia’ from the Diningtable resource ‘meal’ , we deﬁne for the functional consequences ‘social contacts for informal carer’ and ‘social contacts for persons with dementia’ . 186 Dementia - care services Group consequences Next we ﬁnd quality consequences for functional conse - quences . Examples include the dietary needs ‘sugar free’ or ‘kosher’ for the func - tional consequence ‘meal preparation’ . We ﬁnd such consequences by reviewing the supplier - speciﬁc properties of the resource based upon which the functional consequence was deﬁned . For instance , since ‘meal preparation’ was deﬁned for the resource ‘meal’ , we further review the properties of ‘meal’ and ﬁnd , amongst others , dietary needs . Note here that because diets are so speciﬁc , the quality consequences are not trans - lated in customer terminology . This is in contrast with technical properties of ICT services , such as the QoS - properties of an IP access service . These technical prop - erties often do require translation to customer terminology . Model service dependencies Now that we have modeled the individual services and their respective consequences , we model the supplier speciﬁc service depen - dencies as deﬁned in ( Baida et al . 2005 ) . In our sample supply - side service cata - log from ﬁgure 9 . 1 , OB { Dagsocieteit ( Coenen / Lydia ) , casemanagement informal carer ( Coenen / Lydia ) } is an example of such a dependency . This dependency indi - cates that if an informal carer acquires the service Dagsocieteit from Coenen / Lydia , casemanagement for an informal carer is also interesting . A service dependency of note is OB { Loaningservice ( Amsterdam home care ) , Handyman ( Cordaen ) } . We shall return to the latter dependency in the discussion on the customer perspective service catalogue . Model wants The next step is to model the wants for the individual services modelled so far . We do this by analyzing what different service types exist . We differentiate between service types by reviewing differences in functional conse - quences of services . For example , consider that the services ‘Dinner delivery’ from Schinkelshaven and ‘Dining table’ from Torendael ( see ﬁgure 9 . 1 ) satisfy different functional consequences : the service ‘Dinner delivery’ satisﬁes the consequences ‘meal delivery’ and ‘meal preparation’ , whereas the service ‘Dining table’ satis - ﬁes the consequences ‘social contacts’ and ‘meal preparation’ . Because these two services differ on their functional consequences , they are modelled as two separate wants . Pregenerate possible service bundles Now that we have deﬁned ( 1 ) individual services and relations between these services , and ( 2 ) wants and relations between these wants , we can use the conﬁguration algorithm from ( Baida et al . 2005 ) to A customer and supplier catalogue of dementia - care services 187 generate all possible bundles of services . A sample of the bundles generated for this case can be found in ﬁgure 9 . 2 . Here , we ﬁnd : • The bundles { Dagsocieteit ( Coenen / Lydia ) , casemanagement informal carer ( Coenen / Lydia ) } and { Dagsocieteit ( Coenen / Lydia ) } , which are a result of the supplier - speciﬁc bundling relation OB { Dagsocieteit ( Coenen / Lydia ) , case - management informal carer ( Coenen / Lydia ) } ( see section 3 . 2 . 3 for an expla - nation of the depicted bundling relationships ) . • The bundle { Arrange handyman ( Cordaen ) , Loaningservice ( Amsterdam home care ) } and { Loaningservice ( Amsterdam home care ) } , which is a result of supplier - speciﬁc bundling relation OB { Loaningservice ( Amsterdam home care ) , Arrange handyman ( Cordaen ) } . Identify positive consequences additional to the consequences of the individ - ual services Finally , for each generated bundle , we check if the customer re - ceives any positive consequences additional to the consequences of the individual services in that bundle . These additional consequences are often result of reusing resources ( see section 2 . 3 . 2 for a more detailed explanation ) . For the dementia case , we ﬁnd that the customer receives the additional positive consequence ‘meet the same personnel’ upon acquiring the services ‘case management informal carer’ and ‘recreation person with dementia’ . This is a result of these two services being provided by the same meeting centre ; Coenen / Lydia . 9 . 3 . 2 A customer catalogue of dementia - care services We create the customer catalogue in a bottom - up fashion , starting from the services modelled in the supplier perspective service catalogue . Inherit supply - side wants and consequences We start by modelling the speciﬁc consequences and wants already modelled on the supplier perspective . For the healthcare - case , the wants Diningtable , Transportation , Loaningservice , Handy - man and Dinner delivery , and their respective consequences would act as a baseline in deﬁning the customer perspective service catalogue . Model demand interdependencies Next , we relate consequences that form an interesting combination for the customer : The demand interdependencies . For ex - ample : We would link the consequence ‘loaning of medical equipment’ of the ser - vice ‘Loaningservice’ ( municipality of Amsterdam ) to ‘adjustments to the home’ 188 Dementia - care services F ee A rr ange o w n t r an s po r t a t i on D i n i ng t ab l e f ee S o c i a l c on t a c t s i n f o r m a l c a r e r M ea l p r epa r a t i on M ea l de li v e r y M ea l f ee A W B Z i nd i c a t i on P h y s i c a l a c t i v i t y de m en t i a pa t i en t S o c i a l c on t a c t s de m en t i a pa t i en t K eep i ng i n f o r m ed abou t de m en t i a pa t i en t S o c i a l c on t a c t s de m en t i a pa t i en t A d j u s t m en t s t o ho m e H and y m an f ee Loan i ng m ed i c a l equ i p m en t Loan i ng f ee S o c i a l c on t a c t s i n f o r m a l c a r e r c a s e m anage m en t i n f o r m a l c a r e r m ee t i ng g r oup pe r s on w i t h de m en t i a O B O B O B - - - Figure 9 . 1 : Elementary dementia - care services . A customer and supplier catalogue of dementia - care services 189 P o s s i b ili t y t o l oan e g . an ( e l e c t r i c a l ) w hee l c ha i r A d j u s t m en t s t o ho m e A rr an g e o w n t r an s po r t a t i on M ea l p r epa r a t i on K o s he r S u g a r f r ee K eep i n g i n f o r m ed abou t pe r s on w i t h de m en t i a S o c i a l c on t a c t s pe r s on w i t h de m en t i a D ea li n g w i t h t he s a m e pe r s onne l . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . D i e t Figure 9 . 2 : Sample of the generated service bundles . 190 Dementia - care services from the service ‘Provide handyman’ ( Cordaen ) . This relationship adds a ratio - nale as to why the dependency OB { ‘loaningservice’ ( municipality of Amsterdam ) , ‘Provide handyman’ ( Cordaen ) } exists 1 . Model needs Similar to the existing social chart , we based the customer needs upon earlier research into the difﬁculties that the informal face most often ( Meerveld et al . 2004 , p . 22 - 50 ) . An example of such a difﬁculty is ‘cannot cope anymore , what can help ? ’ . For informal carers , these difﬁculties often act as a starting point for seeking out services . Model consequence ladder Next , we deﬁne more abstract consequences for spe - ciﬁc consequences by means of laddering . We need to do so because needs such ‘I cannot cope anymore , what can help ? ’ are obviously too abstract to match against consequences of speciﬁc services . For the healthcare case , one can for example consider ‘Meal preparation’ and ‘Renting of medical equipment’ to be ‘Practical support for person with demen - tia’ . In turn , ‘practical support for person with dementia’ may be needed for the higher - level need ‘cannot to cope anymore’ . 9 . 4 Reasoning with the dementia - care service catalogues We now demonstrate the e 3 service bundling reasoning process by means of a scenario - walkthrough for two concerns one can reasonably expect from informal carers of persons with dementia : ( 1 ) Finding a meal preparation service for the person with dementia . With this scenario , we demonstrate customer - supplier interaction for the healthcare case and , ( 2 ) Loaning of medical equipment , such as an electric wheelchair . With this scenario , we show how we create interesting combinations of services through demand interdependency . As with the hosted services case , the reasoning steps are accompanied by tool output . For reference , note that : ( 1 ) We follow the reasoning steps as described in section 6 . 3 , and ( 2 ) The case - speciﬁc knowledge can be found in the customer and supplier catalogues from ﬁgures 9 . 3 and 9 . 1 . 1 please note that the supplier - speciﬁc dependency OB { loaningservice , handyman } was actually ‘reverse engineered’ from the link made between the consequences of the individual services . By it - self , this dependency would not have existed . Despite this , we have chosen to model this dependency , because our approach requires all possible bundles to be generated upfront . Reasoning with the dementia - care service catalogues 191 D i nne r de li v e r y I c anno t c ope an y m o r e , w ha t c an he l p ? M ea l p r epa r a t i on D i e t S uga r f r ee K o s he r F l e s h a s m a i n c ou r s e M ea t a s m a i n c ou r s e D i n i ng S e r v i c e C on t a c t t y pe : I n pe r s on P r epa r a t i on : H o t M ea l p r epa r a t i on S o c i a l c on t a c t s de m en t i a - pa t i en t S o c i a l c on t a c t s i n f o r m a l c a r e r P h ys i c a l a c t i v i t i e s f o r pe r s on w i t h de m en t i a S o c i a l s uppo r t f o r pe r s on w i t h de m en t i a S o c i a l s uppo r t i n f o r m a l c a r e r P r epa r a t i on F r o z en H o t … . … . . … . need W an t F un c t i ona l c on s equen c e S c a l e s o f qua li t y c on s equen c e s P r a c t i c a l s uppo r t f o r pe r s on w i t h de m en t i a … . . … . . Loan i ng s e r v i c e P o ss i b ili t y t o l oan eg . an ( e l e c t r i c a l ) w hee l c ha i r O B D u r a t i on : < = 6 M on t h s > 6 M on t h s - H and y m an A d j u s t m en t : La r ge , eg . S t a i r li ft M i no r , eg . R a m p s A d j u s t m en t s t o ho m e M ea l de li v e r y … . . O B O B - - T r an s po r t a t i o n T r an s po r t a t i on C o n t a c t t y pe I n t e r ne t I n pe r s on … . Figure 9 . 3 : Partial customer catalogue for the dementia case 192 Dementia - care services 9 . 4 . 1 Scenario 1 : Finding a meal - preparation service Meal preparation services are a commonly heard demand for dementia - patients who live on their own , but need support on basic household - tasks such as cooking , cleaning or maintaining their garden . Choose need and choose consequences The informal carer selects a high - level need that comes closest to his / her situation . In this case , the informal carer se - lects ‘cannot cope anymore , what can help ? ’ . Next , this need is speciﬁed by four functional consequences ( see ﬁgure 9 . 3 ) . From these , the customer chooses ‘prac - tical support’ . The consequence ‘practical support’ in turn is speciﬁed further by , amongst others , the consequences ‘loaning of supporting equipment’ and ‘meal preparation’ . Next , the reasoning process infers that the consequences specifying ‘practical sup - port’ are the most detailed - or leaf - consequences . As described in section 6 . 3 , these consequences are now found to be part of wants . For example : The conse - quence ‘meal preparation’ is part of the wants ‘Dinnerdelivery’ and ‘Diningtable’ ( see ﬁgure 9 . 3 ) . Now , as described in section 6 . 3 , the reasoning process uses the wants as a boot - strap mechanism . For example : Contained in the want ‘Diningtable’ , it ﬁnds addi - tional functional consequences such as ‘social contacts informal carer’ and ‘social contacts for person with dementia’ . The tool output in table 9 . 1 shows how the customer would be presented with the consequences from want Dining table . Let us assume that an informal carer selects the want ‘Dining table’ , because be - sides ‘meal preparation’ , it also offers the possibility of ‘social contacts for person with dementia’ and ‘social contacts for informal carer’ . Outcome of this step : The set of functional consequences { ‘Meal preparation’ , ‘social contacts informal carer’ , ‘social contacts person with dementia’ } . Choose additional consequences For the functional consequence ‘meal prepa - ration’ , the informal carer is requested to indicate her dietary needs by scoring the quality consequences from the nominal scale ‘diet’ . We assume that our infor - mal carer scores ‘ﬁsh as main course’ with 8 and ‘ﬂesh as main course’ with 6 to indicate a preference for ﬁsh over meat . In addition , she scores the quality conse - quences ‘kosher’ with 1 and ‘sugar free’ with 2 to indicate that these consequences are of little value . Reasoning with the dementia - care service catalogues 193 You will be shown the available list of needs . Please choose one : 1 : I cannot cope anymore , what can help ? 1 We have the following consequences : 1 : Physical reactivation 2 : Social support informal carer 3 : Social support person with dementia 4 : Practical support person with dementia Please choose a ( group of ) consequences : 4 You chose : * Practical support person with dementia 1 . The want Handyman satisﬁes the consequence Practical support for dementia patient through the consequence ’Adjustments to home’ 2 . The want Diningtable satisﬁes the consequence Practical support for dementia patient through the consequence ’Meal preparation’ This want also has the following consequences : * Social contacts for person with dementia * Social contacts for informal carer Finally : in choosing this group of consequences , you will automatically be assigned the following quality conse - quence : * Presentation : Warm for the functional consequence Meal preparation * Contact medium : in person for the functional consequence social contacts informal carer 3 . The want Dinnerdelivery satisﬁes the consequence Practical support for dementia patient through the conse - quence ’Meal preparation’ Please choose a want and its corresponding group of consequences 4 You chose : * Sociale contacts person with dementia * Warm * Social contacts for informal carer * Meal preparation * in person For the selected functional consequence , the quality consequences - per scale - are : We found the following scale of quality consequences : Diet Please assign a score from 1 ( not important ) to 10 ( vital ) to each of these consequences Sugarfree 2 , Kosjer 3 , Flesh as a main course 3 , Fish as main course 7 , Glutenfree 2 Table 9 . 1 : Sample of the tool output for the meal preparation scenario . 194 Dementia - care services Now , the reasoning process ﬁnds that want ‘dining table’ contains the default qual - ity consequences ‘in person’ and ‘warm’ ( see also ﬁgure 9 . 3 ) and attaches a pref - erence score of 10 to indicate that these are must - haves . Note that these default consequences are enforced by the idea behind a dining table , that is : Persons com - ing together in a care home to eat a hot meal . Finally the chosen functional consequences ‘meal preparation’ , ‘social contacts for person with dementia’ and ‘social contacts for informal carer’ will be given an importance score of 10 by default to indicate that these are must - have features . Outcome of this step : The set of functional and quality consequences and their respective importance scores { meal preparation ( 10 ) , social contacts informal carer ( 10 ) , social contacts person with dementia ( 10 ) , warm ( 10 ) , in person ( 10 ) , kosher ( 1 ) , sugar free ( 2 ) , ﬂesh as a main course ( 6 ) , Fish as main course ( 8 ) } . Find service bundles The reasoning process ﬁrst matches all supply - side con - sequences to all consequences desired by the informal carer . In this scenario , the matching results in the following subset of supply - side functional and quality con - sequences and their respective importance scores : { social contacts for person with dementia ( 10 ) , social contacts informal carer ( 10 ) , meal preparation ( 10 ) , sugar free ( 2 ) , kosher ( 1 ) } . For reference , see the supplier perspective service catalogue in ﬁgure 9 . 2 . The reasoning process now ﬁnds the pregenerated service bundles that can satisfy all ‘must - have’ consequences . Conform our supplier perspective ontology ( ﬁg - ure 6 . 2 ) , we trace consequences to service bundles through service properties , re - sources or service bundles . 1 . The reasoning process ﬁnds the set of bundles { ‘Dining table’ ( Torendael ) , ‘Dining table’ ( de Buitenhof ) } for the must - haves ‘social contacts informal carer’ and ‘social contacts for person for with dementia’ . Both bundles real - ize both consequences through the service property ‘in group , with other per - sons with dementia and their informal carers’ of the supplier - speciﬁc ‘meal’ resources . 2 . The tool ﬁnds the set of bundles { ‘Dining table’ ( Torendael ) , ‘Dining table’ ( de Buitenhof ) , ‘Dinner delivery’ ( Schinkelshaven ) } for the consequence ‘meal preparation’ , because all these bundles can satisfy this consequence through the resource ‘meal’ ( see ﬁgure 9 . 2 for reference ) . When the tool now intersects above sets , it ﬁnds the bundles ‘Dining table’ ( de Buitenhof ) and ‘Dining table kosher’ ( Torendael ) . Reasoning with the dementia - care service catalogues 195 < We now match the chosen consequences to the supply side consequences > < tool traces consequences to service bundles that realize these consequences > 1 : The service bundle Diningtable Torendael kosher can satisfy all desired consequences . Please ﬁnd below what this bundle can provide you with * Social contacts for informal carer * Social contacts for person with dementia * Meal preparation Additionally , this bundle contains the following quality consequences : * Diet : Kosjer for the functional consequence Meal preparation * Contact medium : in person for the functional consequence Social contacts for informal carer and Social contacts for person with dementia * Preparation : Warm for the functional consequence Meal preparation Score bundle = ( 0 . 3 * 1 . 0 ) for Kosjer To acquire the bundle : Diningtable Torendael kosjer you have to give up the following : * Fee Dining table Torendael kosher * Arrange own transportation For this bundle , we found the following pricing model : * Pricing model Dingitable Torendael kosher This pricing model is of the type : single discount pricing model . The price of this bundle is build up as follows : * The usage - based pricing model Pricing model Diningtable Torendael kosjer is build up as follows : 7 euro for each time . This usage - based pricing model is for the individual service Diningtable Torendale kosjer 2 : The service bundle Diningtable Welzijn ZuiderAmstel can satisfy all desired consequences . Please ﬁnd below what this bundle can provide you with . . . . So the possible bundles , sorted according to preference , are : 1 : Diningtable de Buitenhof with the score : 1 . 0 2 : Diningtable Torendael kosjer with the score : 0 . 3 Would you also like to score all negative consequences to see how a bundle scores on a trade - off between beneﬁts and sacriﬁces ? ( y / n ) Table 9 . 2 : Sample of the tool output for the meal preparation scenario , step ’ﬁnd service bundles’ . 196 Dementia - care services Outcome of this step : The set of supplier - speciﬁc service bundles { ‘Dining table’ ( de Buitenhof ) } , ‘Dining table kosher’ ( Torendael ) } . Rank service bundles We calculate a ranking score for the found bundles based upon consequences with an importance score below 10 ( of course , all found bun - dles score the same on must - have consequences ) . In this scenario , the tool thus cal - culates an importance score for each bundle based upon the consequences ‘sugar free’ , ‘kosher’ , ‘ﬁsh as main course’ and ‘ﬂesh as main course’ . To calculate a score , the reasoning process uses multi - attribute scoring ( formula 6 . 1 ) , whereby the presence of a consequence in a bundle is weighted against the importance of this consequence as provided by the customer . First , each bundle is scored based upon the consequences it provides . Since in this scenario all consequences are deﬁned on a nominal scale , this score is always pro - vided in a binary way . For example : The bundle ‘Dining table kosher’ ( Torendael ) scores + 1 for providing the consequence ‘kosher’ . Next , the importance scores from the customer are also taken into account in the bundle score . For example , our informal carer has scored ‘kosher’ as 1 . Using multi - attribute scoring , we arrive at the following scores : • 1 . 0 for ‘Dining table’ ( de Buitenhof ) ( ( 0 . 3 * 1 ) for the consequence ﬂesh as main course + ( 0 . 7 * 1 . 0 ) for the consequence ﬁsh as main course ) • 0 . 3 for ‘Dining table kosher’ ( Torendael ) ( ( 0 . 3 * 1 ) for the consequence kosher ) . Now , for each bundle we ﬁnd the full set of consequences . For example , starting from the service interface of the service bundle { Dining table ( Torendael ) } , we ﬁnd ‘dining table fee’ and ‘arrange own transportation’ . ( For details on the concept ‘service interface’ , see the supplier perspective ontology in section 6 . 1 . 2 ) . Additionally , we ﬁnd the pricing model for each service bundle by reviewing what pricing model is attached to that bundle’s service interface . For the bundle { ‘Dining table kosjer’ ( Torendael ) } , we would for instance ﬁnd the single discount pricing model ‘Pricing model dining table Torendael kosjer’ . This pricing model consists of the single usage based pricing model of the Dining table Torendael kosjer ser - vice : 7 euros for each time , with a discount of 0 % . Outcome of this step : A set supplier - speciﬁc service bundles , ranked according to how well they ﬁt with the preferences of the informal carer ( see table 9 . 2 ) . Reasoning with the dementia - care service catalogues 197 Would you also like to score all negative consequences to see how a bundle scores on a trade - off between beneﬁts and sacriﬁces ? ( y / n ) y Please assign a score from 1 ( does not really matter ) to 10 ( this consequence must be lacking from the bundle ) to each of the following consequences : Fee dining table Torendael 5 Fee dining table de Buitenhof 4 Arrange own transportation 10 No bundle is available that does not contain the won’t have consequence ’Arrange own transportation’ . You have the following starting points that you can use to relax your requirements : 1 . Start from group of detailed functional consequences you had chosen . This was : * Social contacts person with dementia * Warm * Social contacts for informal carer * Meal preparation * in person 2 . Start at the consequence chosen a level above the most detailed functional consequences . This was : Practical support person with dementia 3 . Start all over , i . e . : from the need . other ( > 3 ) : quit . Table 9 . 3 : Sample of the tool output for the meal preparation scenario , step ’trade - off positively / negatively valued consequences’ . 198 Dementia - care services Trade - off positive / negative consequences The customer is presented with the ranked bundles : 1 . Dining table ( de Buitenhof ) . Score 1 . 0 2 . Dining table kosjer ( Torendael ) . Score : 0 . 3 For each bundle , the informal carer is presented with ( 1 ) the positively valued con - sequences , ( 2 ) the negatively valued consequences and ( 3 ) the pricing model . For an example speciﬁcation of the bundle ‘dining table kosher’ ( Torendael ) , see table 9 . 2 . Next , the informal carer also scores negatively valued consequences . We assume she is content with the dining table fees from both { Dining table ( Torendael ) } and { Dining table ( de Buitenhof ) } , but attaches 10 to ‘arrange own transportation’ since she absolutely wants to avoid this . The reasoning process now notes that a consequence is scored as a won’t have and invokes the critique step for the consequence ‘arrange own transportation’ . As presented in ﬁgure 9 . 4 , both dining table services are found to contain the conse - quence ‘arrange own transportation’ . Thereby , the informal carer can be informed that acquiring the combination of positive consequences ‘meal preparation’ , ‘social contacts for informal carer’ and ‘social contacts for person with dementia’ implies having to arrange one’s own transportation . Because the informal carer scored this consequence as an absolute won’t have , the tool discards both bundles and informs the informal carer that all the initially found bundles contain the consequence ‘arrange own transportation’ . Outcome of this step : No possible bundles Choose consequences , ﬁnd and rank service bundles As can be seen in the tool output from table 9 . 3 , the informal carer can now return to any point in the consequence ladder to adjust her requirements . From the previous step , the informal carer has learned that the combination of consequences belonging to the want ‘Diningtable’ requires her to arrange her own transportation . Therefore the informal carer chooses to return to the consequence ‘practical support for person with dementia’ and to start modifying requirements from that point . Here , she observes that the want ‘dinner delivery’ also contains the consequence ‘meal preparation’ - the requirement she started with - and additionally , the conse - quence ’Meal delivery’ ( for reference , see ﬁgure 9 . 3 ) . Reasoning with the dementia - care service catalogues 199 Arrange own transportation Social contacts dementia - patient Meal preparation Sugar free Diet ( nominal ) Kosher Dining table fee Figure 9 . 4 : Critique - step for the dining - table scenario Next , the tool again elicits dietary needs for ‘meal preparation’ , but also asks the informal carer whether she would prefer hot or frozen meals . This is because , as opposed to the want ‘Diningtable’ , the want ‘Dinner delivery’ does not enforce either of these options . We assume the informal carer ﬁlls in the same dietary needs as in the step ‘choose additional consequences’ , and attaches an importance score of 4 to frozen meals and 7 to warm meals . This results in following set of consequences , that is used as input for the bundling reasoning process : meal preparation ( 10 ) , meal delivery ( 10 ) , frozen ( 4 ) , warm ( 7 ) , kosher ( 1 ) , sugar free ( 2 ) , ﬂesh as a main course ( 6 ) , ﬁsh as main course ( 8 ) . The reasoning process now ﬁnds and ranks services again and presents the follow - ing ranked service bundles to the informal carer : • 1 : Dinner delivery Schinkelshaven : 0 . 9 • 2 : Dinner delivery Amsterdam home care : 0 . 8 We assume that the informal carer is satisﬁed with the small fee that has to be paid for each service bundle , and that she decides to acquire the bundle ‘Dinner delivery’ ( Schinkelshaven ) . 200 Dementia - care services 9 . 4 . 2 Scenario 2 : Loaning a wheelchair and ﬁnding related , value - enhancing services Choose need and choose consequences The informal carer selects the need ‘cannot cope anymore , what can help ? ’ Next , this need is speciﬁed by means of four functional consequences . ( for reference , see the customer side service cat - alogue in ﬁgure 9 . 3 ) From these , the informal carer chooses ‘practical support for person with dementia’ as it comes closest to the ‘loaning of medical equipment’ . Since the functional consequences specifying ‘practical support for person with dementia’ do not consist of other , more detailed , consequences ( again , see ﬁgure 9 . 3 ) the reasoning process now ﬁnds wants , that are used to bootstrap related con - sequences . From the resulting clusters of consequences , the informal carer would choose the following option : The want loaningservice satisﬁes the consequence practical support for person with dementia through the conse - quence Possibility to loan e . g . an ( electrical ) wheelchair Next the tool requests the informal carer to score quality consequences from the scale ‘duration’ . We assume that the informal carer scores ‘longer than 6 months’ with 9 and ‘shorter than 6 months’ with 4 . Finally , the functional consequence ‘possibility to loan e . g . an ( electrical ) wheelchair’ is provided with a score of 10 by default . Outcome of this step : The set of consequences and their respective consequence scores { possibility to loan e . g . an ( electrical ) wheelchair ( 10 ) , longer than 6 months ( 9 ) , shorter than 6 months ( 4 ) } Find and rank service bundles The matching of customer and supplier conse - quences results in the following subset of supply - side consequences : { Possibility to loan e . g . an ( electrical ) wheelchair ( 10 ) , longer than 6 months ( 9 ) , shorter than 6 months ( 4 ) } . For the must - have consequence ‘possibility to loan e . g . an ( electrical ) wheelchair’ the three bundles from the sample supplier catalogue in ﬁgure 9 . 5 are found . Next , the tool ﬁnds the bundle with the minimum set of resources . In this scenario , this minimum set is { Loan equipment ( Amsterdam hc ) } , since considering resources { Loan equipment ( Amsterdam hc ) } ⊂ { Loan equipment ( Amsterdam hc ) , Arrange Handyman ( Cordaan ) } ⊂ { Loan equipment ( Amsterdam hc ) , Arrange Handyman ( Cordaan ) , Transportation ( Stadsmobiel ) } . Next , the bundles are ranked by applying multi - attribute scoring . The tool ﬁnds a ranking score of 0 . 9 for the bundle { Loan equipment ( Amsterdam hc ) } since it Reasoning with the dementia - care service catalogues 201 satisﬁes a consequence with an importance score of 9 : ‘ = > 6 months’ . 2 Finally , the informal carer is presented with the following speciﬁcation of the loaning - service bundle : Outcome of this step : 1 : The service bundle Loaningservice Amsterdam homecare can satisfy all desired consequences . Please ﬁnd below what this bundle can provide you with Possibility to loan e . g . an ( electrical ) wheelchair Additionally , this bundle contains the following quality consequences : Duration : = > 6 months for the functional consequence Possibility to loan e . g . an ( electrical ) wheelchair Score bundle = ( 0 . 9 * 1 . 0 ) To acquire the bundle : Loaningservice Amsterdam homecare you have to give up the following : * Arrange own transportation AWBZ indication Find and rank value - enhancing services The informal carer selects the bun - dle { Loaningservice ( Amsterdam homecare ) } . Next , the reasoning process ﬁnds that this bundle contains a supplier - speciﬁc service that is classiﬁed as the want ‘loaningservice’ . We can ﬁnd this classiﬁcation because , as we showed in our discussion on the supplier perspective service catalogue ( section 9 . 3 . 1 ) , wants are modelled on the supplier perspective also . Subsequently , the want ‘loaningservice’ is used in the customer perspective catalogue to ﬁnd the value - enhancing wants ‘transportation’ and ‘handyman’ ( see ﬁgure 9 . 3 for reference ) . Next , for the core consequence ‘possibility to loan e . g . an ( electrical ) wheelchair’ from the want ‘loaningservice’ , we ﬁnd the value enhancing consequences ‘transportation’ and ‘adjustments to home’ . Finally , these value - enhancing consequences are found to belong the value enhancing wants ‘transportation’ and ‘handyman’ respectively . Based upon this somewhat overly complicated reasoning process , the informal carer is now presented with the following options : For the bundle Loaningservice Amsterdam homecare we found the following optionally bundled wants : The want : Transportation through the consequences : Transportation Are you interested in this optional bundling want ? ( y / n ) n The want : Handyman through the consequences : Adjustments to home Are you interested in this optional bundling want ? ( y / n ) y 2 For the sake of completeness : There is also a seperate service - seperate since it does not require an AWBZ - indication - that loans medical equipment shorter than 6 months : this would score 0 . 4 202 Dementia - care services A rr an g e o w n t r an s po r t a t i on P o ss i b ili t y t o l oan e g . an ( e l e c t r i c a l ) w hee l c ha i r A d j u s t m e n t s t o ho m e < 6 m on t h s = > 6 m on t h s P e r i od A W B Z i nd i c a t i on Figure 9 . 5 : Sample of the supplier perspective service catalogue for the scenario ‘Loan wheelchair’ Lessons learned 203 We assume that the informal carer chooses the functional consequence ‘adjust - ments to home’ from a handyman . Next , the informal carer is requested to score the quality consequences ‘minor’ and ‘large’ for adjustments to home . We assume that the informal carer is not yet sure what type of adjustment should be made . Therefore she scores both consequences as ‘2’ . The tool now supplements the consequences chosen in the value - enhancing step with those from the bundle ‘Loaning service homecare’ . This results in the fol - lowing input for the bundling reasoning process : { Adjustments to home ( 10 ) , Mi - nor ( 2 ) , Large ( 2 ) , Possibility to loan e . g . an ( electrical ) wheelchair ( 10 ) , longer than 6 months ( 9 ) , shorter than 6 months ( 4 ) } . Since ‘adjustments to home’ is a must - have , the reasoning process ﬁnds only bun - dles that can satisfy this consequence : { Loan equipment ( Amsterdam hc ) , Arrange Handyman ( Cordaan ) } and { Loan equipment ( Amsterdam hc ) , Arrange Handy - man ( Cordaan ) , Transportation ( Stadsmobiel ) } . Because of the subsetting of re - sources ( see section 6 . 3 ) , the informal carer is only presented with the bundle : Outcome of this step : 3 : The service bundle { Loan equipment ( Amsterdam hc ) , Arrange handyman ( Cordaan ) } can satisfy all desired consequences . Please ﬁnd below what this bundle can provide you with Adjustments to home Possibility to loan e . g . an ( electrical ) wheelchair Additionally , this bundle contains the following quality consequences : Adjustment : Minor , e . g . ramps for the functional consequence Adjustments to home Adjustment : Large , e . g . stairlift for the functional consequence Adjustments to home Duration : = > 6 months for the functional consequence Possibility to loan e . g . an ( electrical ) wheelchair Score bundle = ( 0 . 2 * 1 . 0 ) + ( 0 . 2 * 1 . 0 ) + ( 0 . 4 * 1 . 0 ) 9 . 5 Lessons learned Lesson 1 : The usefulness of customer - supplier interaction depends on the characteristics of the application domain The healthcare experts commented that customer - supplier interaction is useful when someone is tied to a domain where services contain negative consequences , such as a restricted personal bud - get or long waiting lists . They stated that constraints can indeed force someone to adjust his / her requirements and maybe even to reject a bundle altogether . However , they emphasized that customer - supplier interaction was only useful for healthcare services whereby negative consequences play a prominent role . They pointed out healthcare services that are fully covered by a general insurance fund 204 Dementia - care services ( the AWBZ ) , such as admission into a care - home . Such services may not place a heavy burden on someone in terms of constraints , and may therefore not require an interactive process to trade off positive and negative consequences . So : The healthcare experts concluded that the current conﬁguration mechanism sufﬁces for services that are not heavily constrained . However , when services are heavily constrained ( such as with a restricted personal budget ) customer - supplier interaction is useful . This seems to point out that the type of reasoning process , and thus the Problem Solving Method , that is used for reasoning about services bundling depends on the context in which it is used . This is an interesting notion because to the best of our knowledge , work exists where ( web ) services bundling is seen as a planning task ( Omelayenko 2005 ) , a conﬁguration task ( Baida et al . 2005 ) and as a variation on a Propose - Critique - Modify method respectively ( this thesis ) , but that not so much work exists on how these speciﬁc implementations of PSMs compare to each other . This is also noted by ( Fensel & Motta 2001 ) , who observe a lack of balance between the large number of disparate PSM implementations that exist , and the little that has been written about constructing and articulating PSMs in a uniform manner . We feel that it is important to emphasize this apparent lack of uniformity because this inhibits one of the main advantages of using PSMs : Reusing components for Problem Solving . Lesson 2 : Customer perspective dependencies between consequences lead to interesting service combinations The domain experts declared the cross - and up - selling dependencies between consequences ( OB and C / E ) to be useful since these actually reﬂect the way in which healthcare consultants provide advice on healthcare services . These dependencies can be used to model consequences that are interdependent in demand , which allows the customer make links between re - quirements that s / he might normally not have made . Eventually , this also leads to interesting new combinations between services when compared to an approach where no means for modelling demand - interdependency exists . For example : Ask - ing the customer if s / he is interested in ‘adjustments to home’ after having selected rental of medical equipment , is a typical question that would be proposed during healthcare consultation , which can lead to the service bundle { ‘loaning of medical equipment’ , ‘handyman’ } . Without modelling demand - interdependency , such an interesting combination would not be possible . Lessons learned 205 Lesson 3 : Using Compensatory and non - compensatory decision steps can sup - port decision making , but usage depends on level of customer - involvement Our combination of non - compensatory and compensatory decision models was also found to be interesting because ( 1 ) there are indeed hard requirements , such as a sugar free diet , whose absence irrevocably leads to rejection of a bundle and ( 2 ) ranking bundles according to how well they ﬁt with requirements is also use - ful because in real - life situations , there could be many possible bundles that an informal carer can choose from ( especially when taking into account demand - interdependency ) . However the domain experts did mention that scoring all consequences is time - consuming for an informal carer and that therefore , s / he might not be willing to provide all these scores . This remark corresponds to the different buying behaviors from Solomon ( 2003 ) who states that buying behavior can , amongst others , have the form of extensive problem solving or limited problem solving . With extensive problem solving , the customer is highly involved in the buying decision and makes a fair weighting of all the positive and negative features to choose a product ( e . g . upon choosing a nursing home : Weighting travel distance against provided quality of healthcare ) . With limited problem solving on the other hand , the customer is only moderately involved in the buying decision , and relies more on heuristic cut - offs instead of fair weightings ( e . g . upon choosing a nursing home : Quality of healthcare as a criterion , independently of travel - distance ) . So , depending on the level of involvement of the customer , different decision pro - cedures can be possible . In sum , we ﬁnd that : • Customer - supplier interaction to ﬁnd service bundles can be a useful addition to the currently used , projectionist , reasoning process of the interactive social chart . However , interection is only useful when constraints play a dominant role in the domain under consideration . Otherwise , e . g . when a healthcare service is fully covered by a general insurance fund ( the AWBZ ) the current , projectionist conﬁguration mechanism also sufﬁces ; • Gradually considering user requirements by exploring demand - interdependency relationships leads to new , interesting combinations of services ; • The usefulness of combining compensatory and non - compensatory decision steps depends on user involvement . Chapter 10 Conclusions This chapter discusses the upshot of this thesis and provides directions for further research . In section 10 . 1 , we shall answer the detailed research questions , thereby discussing the key contributions . Because we discussed part of the upshot already in chapter 5 , we shall sufﬁce with a brief reﬂection on the key points . Subsequently , we discuss future research directions , in terms of research issues related directly to this thesis ( in section 10 . 2 ) as well as a general perspective for researching the bundling of commercial ICT services ( in section 10 . 3 ) . 10 . 1 Revisiting the detailed research questions The research question of this thesis reads : ” How can we semi - automatically reason about service bundling in a multi - supplier setting , such that service bundles satisfy complex customer needs against acceptable sacriﬁces ? ” . This question has two parts : ( 1 ) how to formalize customer needs such that they can be used for ﬁnding services bundles , and ( 2 ) how to ﬁnd service bundles in a multi - supplier setting that satisfy customer needs against acceptable customer sacriﬁces . 10 . 1 . 1 Formalization of customer needs Consequences are a key concept in needs - driven service bundling . Conse - quences provide a bridge between ( customer perspective ) needs and ( supplier per - spective ) services . 208 Conclusions • Consequences represent valuable outcomes . Customers are not interested in services , but their valuable outcomes . Consequences , as valuable results , represent such outcomes ; • Consequences exist on different abstraction levels . This allows for trans - lating a complex customer need gradually into something that is speciﬁc enough to ﬁnd services for ; • Consequences can represent demand - interdependency . This allows for inter - esting , unexpected combinations of services . For example : In the healthcare case study , we could relate the renting of medical equipment to adjustments to the home , thereby ultimately ﬁnding the unexpected combination of the services ‘rental of medical equipment’ and ‘handyman’ . From reﬂections of the healthcare domain experts , we learned that this type of reasoning ( linking customer requirements to ﬁnd unexpected combinations between services ) is actually also used by real care consultants . Our contribution here is twofold . First , we provide a formal conceptualization of consequences , to provide for a bridge between customer needs and bundles of commercial services ( see sections 3 . 2 . 2 , 5 . 1 and 6 . 1 ) . Second , we provide an implementation of this formal conceptualization . As such , we also contribute a computational theory of consequences ( see chapter 7 for a discussion of this im - plementation ) . 10 . 1 . 2 Finding multi - supplier service bundles that satisfy needs , against acceptable customer sacriﬁces Using ontologies to establish a shared understanding in a networked enter - prise Ontologies provide a common vocabulary that enterprises can use for ex - pressing their service knowledge . As such , ontologies seem a good ﬁrst step to - wards generating bundles of services in a multi - supplier setting . For example : By using e 3 service , enterprises agree on expressing services through their valuable outcomes , instead of the technical properties of these services . Service bundles need to be created gradually We ﬁnd that a one - way projec - tion from a set of fully speciﬁed needs to service bundles is too simplistic for a needs - driven reasoning process . Revisiting the detailed research questions 209 • Service constraints introduce trade - offs , that can force the customer to mod - ify his requirements or removing them altogether . For example , a customer may refrain from acquiring a customized domain if a monthly fee of e 5 needs to be paid ; • By gradually considering new requirements instead of considering a fully speciﬁed set of needs , we provide for a directed search . This can be advan - tageous for the customer , who only considers value - enhancing requirements when it is relevant to do so . For example : A customer only considers spam ﬁltering or a customized domain after having agreed upon a basic e - mailing service . In addition , a directed search can be advantageous for the software reasoner that implements the reasoning process , because intermediate solu - tions guide the search process through the solution space . Propose - Critique - Modify provides an appropriate frame of reference for au - tomating the needs - driven bundling process . The gradual creation of solutions through a continuous process of proposing and testing is also central to the Prob - lem Solving Method ( PSM ) Propose - Critique - Modify ( PCM ) . Other PSMs , such as Planning or Conﬁguration , by themselves usually do not explicitly address the feedback loop required for a needs - driven bundling process . Moving from modifying solutions ( PCM ) to modifying requirements and solu - tions ( PCM 2 ) To the best of our knowledge , PCM - based methods assume a fully speciﬁed set of constraints to be deﬁned a priori , and to remain unchanged over the course of the reasoning process . If a constraint is violated , the critique and modify steps are executed to respectively identify and repair the part of the solution that violated the constriant . In addition , many PCM - based methods create solutions for a fully speciﬁed set of requirements . We ﬁnd that , at least for the design problem of needs - driven service bundling , these reasoning considerations are too simplistic . As a result of ( 1 ) demand - interdependency , such as an increase in the requirement e - mail capability also caus - ing an increase in demand for spam reduction , and ( 2 ) trade - offs between positive and negative service features , both requirements and constraints are too complex and too likely to change over time , to be assumed as a static given at the beginning of the reasoning process . This also evinced by our practical case studies . For example : In the hosted ICT services case study ( chapter 8 ) , the account managers that sell hosted ICT services declared that ( 1 ) they start by selling basic hosting services , such as e - mail host - ing , and only thereafter , start selling additional value - enhancing services . In other 210 Conclusions words : They also consider requirements gradually , instead of providing them all at once . ( 2 ) The sacriﬁces that a customer has to make indeed inﬂuence the re - quirements that a customer has . For example : The decision to acquire the basic or advanced e - mail package is usually inﬂuenced by the difference in pricing between the two packages . So we propose a method , inspired by PCM , that modiﬁes requirements and solu - tions : PCM 2 . Our contribution here is twofold . First , we have shown that perceiving the process of needs - driven service bundling as a projection from a set of fully speciﬁed re - quirements to service bundles is too simplistic . It is better to perceive the discovery of service bundles as an interactive process , whereby bundles are incrementally created ( see chapters 5 and 6 ) . Second , we contribute speciﬁcally to the Problem Solving Method PCM . We propose PCM 2 , a method inspired by PCM , wherein both requirements and solutions are modiﬁed ( see sections 6 . 2 . 1 up to and including 6 . 4 for a comparison between PCM and PCM 2 ) . 10 . 2 Future research In this thesis , we concentrated on a formal conceptualization of customer needs . We showed that a needs - driven bundling process requires customer - supplier in - teraction , and is not merely a one - way projection from a set of fully speciﬁed customer needs to service bundles . This forms a modest contribution to our en - visioned research goal : To generate bundles of commercial ICT services ( semi - ) automatically , based upon a ( complex ) customer need . However , there still many topics left unexplored and too many ideal - world assump - tions made to realize our research goal . For one : Once commercially interesting bundles have been found , the next question is how to actually realize such bundles in a multi - supplier setting . Obviously , this issue is more complicated than merely introducing an ontology . This section discusses additional research directions that we consider important to be explored further . Reasoning about bundling services from a supplier perspective In our work , we concentrate on the customer perspective on services . We assume the supply - side service bundles to be generated upfront , using the service dependencies de - ﬁned by Baida et al . ( 2005 ) . However , closer inspection reveals that these supply side dependencies still have several shortcomings that need to be addressed before they are ﬁt for dynamically bundling services in a multi - supplier setting . Future research 211 First , service dependencies always exist between supplier - speciﬁc services , which makes it very difﬁcult to model considerations such as ‘We need an internet con - nection for this VoIP service , and do not care who provides this as long as the internet connection satisﬁes the following minimum requirements . . . ’ . We feel that the focus should shift from representing supplier - speciﬁc services to representing the minimum requirements that a service should adhere to . A ﬁrst step can be the representation used for the example supplier catalogue of ISP services in ﬁgure 3 . 8 . Here , we represent supporting services by stating that any supplier can provide this service , as long as it fulﬁlls these minimum requirements . Second , reasoning on price bundling ( receiving a discount on the bundle price ) and product bundling ( receiving positive consequences additional to the sum of the consequences of the individual services in the bundle ) should also be part of the effort to generate service bundles dynamically . These considerations occur too of - ten in practice to be ignored . Consider for example our healthcare case , where the customer receives the additional positive consequence ‘meeting the same person - nel’ when s / he uses the services ‘recreational activities’ and ‘meeting a physician’ from the same care centre . For the automation of product bundling , an interesting notion is that additional pos - itive consequences are often a result of reusing operational resources . For example : Customers may receive a single bill or meet the same personnel for multiple ser - vices . This means that if we could switch from a value perspective on a service bundle to an operational perspective and vice versa , we may be able dicover the reuse of resources and , as a result , discover additional positive consequences . Introduce constraints on the customer perspective also In this thesis , we use positive consequences as input for the reasoning process . Only after matching , the customer receives feedback on the constraints of service bundles . To further experiment with a PCM - type of PSM , we may introduce constraints on the supply side also . A good starting point is the micro - economic concept maximum - willingness - to - pay . Concerning variations on the current reasoning pro - cess , one can for example link the concept of willingness - to - pay to a customer need . A customer can then state his problem and his constraints , and gradually narrows down the found service bundles using consequences as additional require - ments . Critiquing multiple sources of failure We concentrate our reasoning process on detecting a single point of failure , such as a costly customized domain in the case 212 Conclusions of an e - mail service . Yet , one can imagine that a failure has more complex causes . For example : The price of multiple individual services may actually contribute to a bundle being expensive . Thus , it may be useful to extend the current reasoning process so that it can also cope with aggregation of individual services causing failures . Here , a useful starting point may be to enhance the reasoning on pricing models . In this way , if a bundle is deemed too expensive , subsets of individual services and their valuable outcomes may be found that signiﬁcantly contribute to the bundle price . Realize bundling in a multi - supplier setting We - as researchers - have modelled the services and needs for this thesis , thereby assuming the role of an intermediary . In practise however , an intermediary model implies that there is one party who controls how services are modelled . This intermediary may introduce a bias in the matches , and decides what suppliers can participate in the bundling process and what suppliers cannot . This concentration of power , residing at one intermediary , seems undesirable . Thus , it seems useful to explore how service bundling in a multi - supplier setting should be realized . As a direct opposite of an intermediary business model , one may consider a fully decentralized environment . Herein , service bundles are found in a peer - to - peer fashion . Each supplier locally expresses and maintains its service knowledge , by using a service ontology for example , whereupon the network generates service bundles . Given that suppliers can increase sales by advertising their services to the network , it seems that there are reasonable incentives for participation . However , we also foresee difﬁculties with a fully decentralized environment . For one , it introduces inconsistencies between service descriptions from different providers , because each supplier would model the valuable outcomes of their services locally . For example , different suppliers may refer to an e - mailing capability in different ways , such as ‘e - mailing’ ‘send and receive e - mail’ and ‘e - mailing services’ . Or : Different suppliers may use the same valuable outcome to describe their services for different service properties . One supplier may classify ‘2048 kbps up / 1024 kbps down’ as a ‘fast internet connection’ , while another supplier classiﬁes ‘4096 kbps up / 2048 kbps down’ as a ‘fast internet connection’ . For bundling in a decen - tralized environment , such inconsistencies need to be addressed . To address the limitations of centralized and decentralized environments , we sug - gest to explore a mix between the two . For one , in a mixed environment trusted third parties can be used to maintain a consistency in the service knowledge ex - pressed by different suppliers . Finally , all scenarios - centralized , de - centralized and a mixed between these - need The bundling of commercial ICT services : A cross - disciplinary perspective 213 to cope with the limited openness of providers . It is our experience that providers will happily expose all advantages of their services , but that they are hesitant when it comes to expressing service limitations such as customer lock - in and payment . Here , a possible starting point may be to emphasize that openness is also a form of competitive advantage . 10 . 3 The bundling of commercial ICT services : A cross - disciplinary perspective In this thesis , we introduced a computationally adequate theory for the needs - driven bundling of commercial services . As in the work of ( Gordijn & Akkermans 2003 ) ( a formal conceptualization of value ) and ( Baida et al . 2005 ) ( a formal con - ceptualization of services ) we thus use a cross - disciplinary approach to theory de - velopment . We feel that such a cross - disciplinary approach is a relevant next step to take for the development and management of commercial ICT services : Services , such as e - mail hosting ( but also the online postal services from chapter 4 and the hosted services described in chapter 8 ) , that are partially or completely realized online . In particular , with the advent of the ‘internet of services’ and the ‘internet of things’ 1 , such ICT - enabled commercial services are expected to play an important role in the years to come . We believe that disciplines on their own can make valuable contributions to sup - port such services . However , we also believe that , in their own right , they are ill - equipped to deal with some of the challenges that commercial ICT services in - troduce . Two extremes serve to illustrate this point . On the business side , Rust & Miu ( 2006 , p . 7 ) make the following lofty statement about ICT - enabled commer - cial services : ” < Through IT > real - time communication with customers becom - ing easier and more affordable . Companies can quickly identify cus - tomers’ desires , guide them to products that meet their needs , and pro - vide the necessary level of service . Additionally , ﬁrms can promptly detect and ﬁx customer problems , again increasing customer satisfac - tion and building long - term relation ships . ” 1 The internet of things is a concept whereby any object becomes ‘smart’ and can be uniquely identiﬁed and accessed through internet - based open standards ( Gershenfeld et al . 2004 ) 214 Conclusions This all sounds nice , but Rust & Miu ( 2006 ) do not back this up by a discussion on how to realize all this . They seemingly perceive ICT to be a holy grail for proﬁt generation , while in actuality realization of the above goals - even if they are all desirable and realistic - requires intensive cooperation between business and IT . On the computer science side on the other hand , we ﬁnd an approach to e - service creation that has the following intended contribution ( see Bultan et al . ( 2003 , p . 2 ) ) : ” Our goal is to set up the groundwork for studying composition of e - services . . . . While abstract and focused primarily on global behavior , our paradigm is based on the fundamental constructs of the web ser - vices as promoted by , e . g . , BPEL4WS [ 11 ] , the SOAP standard , IBMs Web services Toolkit , Microsofts . Net , and other industrial products and proposals . It also follows the model adopted by much of the re - search on web service composition [ 8 , 25 ] , work on web service pro - gramming languages [ 7 , 19 ] , and the AZTEC prototype [ 17 ] . ” Bultan et al . ( 2003 ) ignores fully that ICT - services have a commercial side as well , that should also be adequately addressed in service composition . We believe that , especially for commercial ICT services , concerns from different disciplines overlap . It is therefore that we require cross - disciplinary theory devel - opment . The business community for example , can beneﬁt from formal AI and software engineering techniques to analyze in a strucured manner if the claims they make can actually be realized by IT . For example : That IT provides ” the nec - essary level of service” is a hollow statement as long as it is unclear who decides upon what is ” necessary” , and what is exactly measured as a ” level of service” . The computer science community on the other hand , can learn about the pragmatic con - siderations relevant for commercial services from the business and requirements engineering community . They may learn that a service is not only WSDL over SOAP , but that it is ultimately a product bought and sold in a market environment . The ideas for cross - disciplinary theory development are also echoed in the recently emerging discipline of service science ( Chesbrough & Spohrer 2006 , Spohrer et al . 2008 ) , which argues for an integrated approach towards services . In this view , persons from different backgrounds - computer scientists , marketeers , require - ments engineers - develop commercial ICT services together . We ﬁrmly believe that for commercial ICT services , this is the relevant next step to take . Appendix A 215 Appendix A Intentionality as a guiding principle for deﬁning a service We feel that any deﬁnition of a service should established in light of the task that is to be accomplished and that , as a result , asking the question ‘what is a service ? ’ by itself is not so useful . We do therefore not subscribe to attempts at general service deﬁnitions such as ‘A service is present at a time t and location l iff , at time t , an agent is explicitly committed to guarantee the execution of some type of action at location l , on the occurrence of a certain triggering event , in the interest of another agent and upon prior agreement , in a certain way . ’ ( Ferrario & Guarino 2009 ) . In our view , such a general , catch - all deﬁnition is not possible , since the relevant service characterstics depend on the problem one tries to solve . Each problem has its own relevant characteristics . For example , upon designing a complaint - handling procedure for front - ofﬁce employees , the notions ‘processual nature’ and ‘customer - supplier co - production’ are important , whereas upon adver - tising a car rental service , the valuable outcomes characteristic is more important ( but not so much the processual nature , nor co - creation , nor the mutual agreement from the attempted catch - all deﬁnition ) . In this light , attempts at catch - all charac - teristics , such as services always requiring commitment ( Ferrario & Guarino 2009 ) or co - production ( Vargo & Lusch 2004 ) , seem not so useful . Besides pointing out that a general deﬁnition of a service is not possible , this line of thought also has the following consequences : ( 1 ) it is of no use to ask questions about services in general such as ‘can you store a service ? ’ , as is sometimes done on information - science conferences . Such questions are useless unless they are the result of a real - world problem . ( 2 ) it is of no use to falsify the service deﬁnitions of others by using counter - examples , such as ‘but what about a self - service ? ’ or ‘but if I visit a barber . . . ’ . Actually , the fact that each counter - example has its own service deﬁnition is suspected to be the cause of many of the endless , inconclusive debates on what a service is . ( 3 ) a service deﬁnition or service characteristic cannot be considered as ‘outdated’ if it can contribute to an argumentation . This is relevant because some service science scholars argue that intangibility is an outdated way of characterizing a service , and that knowledge and skills should be used instead . However , if intangibility helps in working towards a certain point that is to be made ( as in our work ) , then why should it be considered outdated ? ( 4 ) A context - dependent service deﬁnition relativates the importance of the discussion on what a service is . More generally , we feel that the question ‘what is a service ? ’ is related to inten - tionality , a concept from the philosophy of language act - of - speech theory ( Austin 216 Intentionality as a guiding principle for deﬁning a service 1975 , Searle 1983 ) . Since intentionality has all kinds of philosophical connota - tions , we limit our interpretation to the work of Austin ( 1975 ) , who introduces the notions of locutionary acts ( the act of saying something : e . g . the sentence ‘I promise to return that book to you next thursday’ ) , illocutionary acts ( the act in saying something : e . g . by promising to return a book next thursday , you estab - lish that the receiving party knows that you promise something , thereby putting higher expectations on the receiver than when you had merely said ‘I might return that book to you next week’ ) and perlocutionary acts ( the effect of what is said : by promising to return a book , you establish an ( informal ) contract with another party ) . We basically state that providing a deﬁnition of a service is not merely a locutionary act ( an isolated sentence ) , but also an illocutionary and perlucotionary act and that it therefore has as effect on the connotation of any argument that uses the deﬁned term . In other words : We feel that by providing a deﬁnition for a term , one ‘charges’ that term with its illocution . Therefore services should be deﬁned in line with the argument that is to be made . And what then logically follows is : No such thing as the deﬁnition of a service can exist , nor should it have to exist ( ex - cept maybe for statistical purposes ) . Finally , observe that intentionality can also be a useful guideline for other deﬁnition questions , such as upon having to deﬁne ‘value’ , ‘business IT alignment’ and ‘enterprise architecture’ . At this point , it seems appropriate to brieﬂy discuss Edvardsson et al . ( 2005 ) be - cause it is related to the point we are trying to make . Edvardsson et al . ( 2005 ) points out that the deﬁnition of a service depends on its purpose . However , we must note that this very valid point by Edvardsson et al . ( 2005 ) is muddled by : • An extensive discussion on the importance of the customer’s perspective on services . Besides not adding anything new ( amongst others ( Gr¨onroos 2000 ) already discusses this ) , this discussion dilutes the interesting point that ser - vice deﬁnitions should have a sense of purpose ; • An extensive discussion on service characteristics that should be considered as outdated , such as intangibility . This discussion seems to actually contra - dict a sense of purpose . After all , if a characteristic is useful for making a point - for example : Services are hard to capture formally largely due to their intangible characterisics - then why should we stop using the characteristic ? Finally , we feel that an abstraction step is missing in Edvardsson et al . ( 2005 ) , namely that the question of what is a service is is not so much the question of what a service is , but more a question of intentionality of deﬁnitions in general . If the discussion had focused on this point , Edvardsson et al . ( 2005 ) might also have noted that intentionality may be equally relevant to other terms such as ‘value’ , Appendix A 217 ‘business IT alignment’ or ‘enterprise architecture’ . In sum : We feel that Ed - vardsson et al . ( 2005 ) makes a good point , but we also ﬁnd that his discussion is somewhat muddled , sometimes even contradictory . Samenvatting 219 Samenvatting Dit proefschrift introduceert een methodologie waarmee we , op basis van een com - plexe behoefte van de klant , ( grotendeels ) automatisch kunnen redeneren over het samenstellen van ( mogelijk door meerdere bedrijven tezamen geleverde ) service bundels . Als een concrete toepassing hiervan kan men zich een website voorstellen waarop de klant zijn internet - behoeftes invoert ( bijvoorbeeld : ‘e - mailen met zo min mogelijk spam’ ) , waarop de website mogelijke bundels met internet - services voorstelt die aan de ingevulde behoeftes voldoen ( bijvoorbeeld : bundels met mo - gelijke e - mail en spam ﬁltering services ) . Services worden vaak aangeboden als een bundel , een pakket van individuele ser - vices dat tegen een enkele prijs aan de klant aangeboden wordt . De voornaamste reden voor bundeling is dat services vaak op zichzelf niet kunnen voldoen aan een complexe klantbehoefte , maar daartoe gecombineerd moeten worden met andere services . Denk bijvoorbeeld aan een e - mail service , die vaak gecombineerd wordt met een spam ﬁlter om ervoor te zorgen dat de klant niet te veel last krijgt van ongewenste e - mails . Het wordt steeds gebruikelijker om een bundel op te splitsen in individuele ser - vices , en de individuele services vervolgens weer samen te voegen tot een bundel die voldoet aan de speciﬁeke behoeftes van een klant . Een goed voorbeeld hiervan zijn pakketten van internetdiensten : Waar deze pakketten vroeger generiek waren , en bijvoorbeeld vrijwel altijd de service web hosting bevatten , kan een klant tegen - woordig vaak zelf kiezen welke services wel en niet in een pakket opgenomen dienen te worden . Tegelijk zien we dat Informatie Technologie ( IT ) steeds vaker een belangrijke rol speelt bij het realiseren en leveren van een service . Merk bijvoorbeeld op dat IT intrinsiek is aan voornoemde internetdiensten . Als services sterk op IT leunen , zou het ook logisch zijn als het verkoopproces van services ook via IT verloopt . Men zou zich bijvoorbeeld een scenario voor kunnen stellen waarbij de klant on - line zijn eigen pakket van relevante internetdiensten samenstelt , welke direct na samenstelling gebruikt zou kunnen worden . In dit proefschrift introduceren we een methodologie waarmee we , op een gro - tendeels geautomatiseerde manier , een pakket van services kunnen samenstellen die aan speciﬁeke behoeftes van de klant voldoet : e 3 service . e 3 service kenmerkt zich door een multi - disciplinaire theorie - ontwikkeling : Het gebruikt theorien uit de ( service ) marketing literatuur om commerciele services en klantbehoeften te analy - seren , en combineert deze vervolgens met theorieen uit de computer - wetenschappen om deze analyses zodanig te formaliseren dat de computer er wat mee kan . 220 Samenvatting Bij het ( automatisch ) samenstellen van service bundels spelen twee belangrijke vraagstukken een rol : ( 1 ) Op conceptueel niveau : Welke concepten zijn van be - lang bij het automatisch samenstellen van service bundles op basis van een klant - behoefte ? , en ( 2 ) op redeneringsniveau : Hoe gebruiken we deze concepten nu , zodanig dat we kunnen redeneren over het samenstellen van service bundels ? Op conceptueel niveau draagt e 3 service een formele theorie omtrent het concept ‘consequence’ bij . Consequences zorgen er in e 3 service voor dat : 1 . services uitgedrukt kunnen worden in termen van de waarde die zij voor de klant hebben . Dit is belangrijk omdat een klant vaak niet geinteresseerd is in een service ( bijvoorbeeld ‘e - mail hosting’ van de provider KPN ) , maar in de waarde die die service voor hem of haar heeft ( bijvoorbeeld het kunnen versturen van e - mail ) . 2 . een abstracte klantbehoefte geleidelijk aan concreter gemaakt kan worden tot deze speciﬁek genoeg is om services voor te vinden . Consequences bestaan op verschillende abstractieniveaus , waardoor een abstracte behoefte ( bijvoorbeeld : ‘contact houden met familie in het buitenland’ ) geleidelijk aan vertaald kan worden naar een passende service ( bijvoorbeeld : ‘e - mail hosting’ ) , en ; 3 . services die ‘bij elkaar passen’ in een bundel aan de klant aangeboden kun - nen worden . Dit is belangijk omdat de behoefte naar de ene service ( bijvoor - beeld ‘e - mail hosting’ ) vaak de behoefte naar een andere service impliceert ( bijvoorbeeld ‘spam ﬁltering’ ) . Het is belangrijk om op te merken dat de theorie van consequences sterk multi - disciplinair is . Het concept ‘consequence’ komt uit de marketing - wereld , en is nuttig bij het maken van behoeftenanalyses . Echter , op zichzelf is het begrip con - sequence niet formeel genoeg om door de computer ‘begrepen’ te kunnen worden . We vangen daarom het concept ‘consequences’ in een een ontologie : Een formeel conceptueel model , uit de wereld van de computer - wetenschappen , dat ervoor zorgt dat de computer uiteindelijk wat met de consequences kan . Op redeneringsniveau draagt e 3 service een dialoogstructuur voor het samenstellen van service bundels bij . Deze interactieve dialoog zorgt ervoor dat service bundels geleidelijk worden opgebouwd , op een grotendeels automatische manier : • Het samenstellen van een bundel vereist een interactieve dialoog tussen de klant en de leverancier . Op deze manier maakt de klant een weging van de Samenvatting 221 positieve en negatieve consequences van een bundel , in plaats van een bundel aan te schaffen die het best bij de ingevulde behoeftes past . Bijvoorbeeld : Een klant kan moeite hebben met een bundel van internet diensten als hij / zij daar twaalf maanden aan vast zit . • Een bundel wordt geleidelijk opgebouwd , door de klant consequences voor te leggen die goed passen bij de consequences van de service die de klant al gekozen heeft . Bijvoorbeeld : Een klant die een service met de consequence ‘e - mailing’ heeft aangeschaft , zou best baat kunnen hebben bij een service met de consequence ‘spam ﬁltering’ . • De service bundels worden grotendeels automatisch samengesteld . Het re - deneringsproces vindt automatisch passende services voor gespeciﬁceerde klantbehoeftes . Echter , voor het speciﬁceren van die behoeftes is wel in - terventie van de klant nodig . Vandaar dat het redeneringsproces goeddeels automatisch verloopt , in plaats van volautomatisch . Kortom : e 3 service stelt een structuur voor die passend is voor de dialoog met de klant tijdens het bundelingsproces . Dit is een bijdrage ten opzichte van bestaande bundelingsmethodes , waarbij het redeneringsproces slechts bestaat uit een eenzij - dige projectie van een volledige verzameling klantbehoeftes op service bundels . Om e 3 service praktisch te valideren , is deze methodologie toegepast op vier com - plexe , niet - triviale casussen , respectievelijk op het gebied van de posterijen , de telecom , de gezondheidszorg en hosted IT services . Daarnaast is e 3 service geim - plementeerd in een software tool om te laten zien dat we grotendeels automatisch kunnen redeneren over service bundeling . Summary 223 Summary This thesis introduces a methodology that allows for the ( semi - ) automated com - position of ( possibly multi - supplier ) bundles of commercial services , based upon a complex customer need . As a concrete application scenario , imagine that a cus - tomer ﬁlls in his internet needs on a website ( for example : ‘e - mailing with little spam’ ) , whereupon this website responds with suitable bundles of internet services ( for example : bundles containing e - mailing and spam ﬁltering services ) . Services are often offered as a bundle , a package of individual services that is sold at a single price . First and foremost , such bundles are required because services by themselves often satisfy a need only partially , but together satisfy this need completely . As an example , consider that an e - mail service is often supplemented by a spam ﬁlter , so as to avoid that the customer is ﬂooded by unwanted e - mails . It becomes more and more common to decompose a bundle into its constituent ser - vices , and to recompose these services into a bundle that satisﬁes speciﬁc customer needs . Consider packages of internet services . Where these packages used to be generic ( usually , the service ‘web hosting’ was included by default ) , today a cus - tomer can often choose to compose a package of internet services in line with his speciﬁc needs . At the same time , we see that Information Technology ( IT ) often plays an important role in the realization and provision of a service . Note for example that IT is intrinsic to the aforementioned internet services . If IT services strongly depend on IT , then it should also be possible to support the selling of these services by IT . One can for example imagine a scenario whereby the customer online creates his own package of services , that upon selection can be provisioned immediately . In this thesis , we introduce a methodology that allows us to reason , in a ( semi - ) automated manner , about the composition of bundles of commercial services that satisfy speciﬁc customer needs : e 3 service . Multi - disciplinarity is key to the theory development of e 3 service : We use theories from service marketing to enable anal - ysis of commercial services and customer needs , and combine these with theories from computer science to formalize the analyses to the extent that the computer can do something with it . For the automated composition of service bundles two issues are of particular im - portance : ( 1 ) on a conceptual level : What concepts play an important role in com - posing a service bundle , and ( 2 ) on a reasoning level : How do we employ these concepts , in such a way that we can reason about service bundling ? 224 Summary On a conceptual level , e 3 service contributes a formal theory of ‘consequences’ . Consequence allow e 3 service to : 1 . express services in terms of the value they provide . This is important be - cause a customer is often not interested in a service itself ( e . g . ‘e - mail host - ing’ from the provider KPN ) but in the valuable outcomes that this service provide ( e . g . an ‘sending and receiving e - mail’ ) ; 2 . gradually specify a complex customer need into something that is speciﬁc enough to ﬁnd a service for . Consequences exist on several levels of ab - straction , as a result of which a high - level need from the customer ( e . g . ‘to communicate with someone abroad’ ) can be translated into something that is speciﬁc enough to ﬁnd services for ( e . g . an e - mailing service ) ; 3 . bundle services that naturally ‘ﬁt’ together . This is important because the need for one service ( for example : ‘e - mailing’ ) often implies the need for another service ( for example : ‘spam ﬁltering’ ) It is important to note that our theory of consequences is multi - disciplinary . The consequence - concept originates from marketing , and is useful for analyzing cus - tomer needs . However , on its own terms , a consequence is not formal enough to be ‘understood’ by a computer . We therefore capture the concept of a consequence in an ontology : A formal conceptual model , used in computer sciences , that allows the computer to eventually do something with consequences . On a reasoning level , e 3 service contributes an interactive dialogue that allows a customer to incrementally create a service bundle in a semi - automated manner : • The creation of a bundle requires an interactive dialogue between customer and provider . The customer weighs the positive consequences ( for example : an e - mail hosting service ) and negative consequences ( for example : A price to be paid ) of a bundle to eventually decide upon what speciﬁc services to select ; • A bundle is created incrementally , by presenting consequences to the cus - tomer that ﬁt well with the consequences of the services that the customer has already selected . For example : If a customer has already selected a ser - vice with the consequence ‘e - mailing’ , it would be logical to also offer him a service with the consequence ‘spam ﬁltering’ . • The dialogue is carried out in a semi - automated manner . The dialogue is automated in the sense that services are found automatically for a speciﬁed Summary 225 customer need . Yet , the dialogue does require human intervention on the part of the customer . So : we provide a structure for the customer dialogue for ﬁnding service bundles . This is an addition to existing service bundling approaches , that reason about ser - vice bundling by simply projecting a set of fully speciﬁed customer needs to service bundles . To assess its practical validity , e 3 service has been applied to four real - world , non - trivial , case studies in the domains of respectively the telecom industry , the postal industry , the healthcare industry , and in the domain of hosted IT services . In ad - dition , e 3 service has been implemented in a software tool to showcase that we can indeed reason about bundling commercial services semi - automatically . Bibliography Akkermans , H . , Baida , Z . & Gordijn , J . ( 2004 ) , ‘Value webs : Ontology - based bundling of real - world services’ , IEEE Intelligent Systems 19 ( 44 ) , 23 – 32 . Ambler , C . ( 1998 ) , ‘Developing a Product Classiﬁcation System for the United States’ , US Census Bureau . Andrews et al . , T . ( 2003 ) , ebXML business process speciﬁcation schema version 1 . 01 , http : / / www . ebxml . org / specs / ebBPSS . pdf , Technical report . Last visited july 2010 . Arndt , J . ( 1978 ) , ‘How broad should the marketing concept be ? ’ , Journal of Mar - keting 42 ( 1 ) , 101 – 103 . Austin , J . ( 1975 ) , How to do things with words , Harvard University Press , 79 Gar - den Street Cambridge , Massachusetts 02138 USA . Baida , Z . , Gordijn , J . , Akkermans , H . , Saele , H . & Morch , A . Z . ( 2005 ) , ‘Finding e - service offerings by computer - supported customer need reasoning’ , Inter - national Journal of E - Business Research ( IJEBR ) 1 ( 3 ) , 91 – 112 . Baida , Z . , Gordijn , J . , Omelayenko , B . & Akkermans , H . ( 2004 ) , A shared ser - vice terminology for online service provisioning , in M . Janssen , H . G . Sol & R . W . Wagenaar , eds , ‘Proceedings of the Sixth International Conference on Electronic Commerce ( ICEC04 ) ’ , ACM Press . Bakos , Y . & Brynjolfsson , E . ( 2000 ) , ‘Bundling and Competition on the Internet’ , Marketing Science 19 ( 1 ) , 63 – 82 . Baresi , L . , Nitto , E . D . , Ghezzi , C . & Guinea1 , S . ( 2007 ) , ‘A framework for the deployment of adaptable web service compositions’ , Service Oriented Com - puting and Applications 1 ( 1 ) , 75 – 91 . Barreto et al . , C . ( 2007 ) , Web Services Business Process Execu - tion Language Version 2 . 0 , Primer ( BPEL ) , http : / / docs . oasis - open . org / wsbpel / 2 . 0 / Primer / wsbpel - v2 . 0 - Primer . pdf , Technical report . Last accessed july 2010 . Barron , F . H . & Barrett , B . E . ( 1996 ) , ‘Decision quality using ranked attribute weights’ , Management Science 42 ( 11 ) , 1515 – 1523 . Beynon - Davies , Carne , Mackay & Tudhope ( 1999 ) , ‘Rapid application develop - ment ( rad ) : an empirical review’ , European Journal of Information Systems 8 ( 3 ) , 211 – 223 . Bitner , M . , Brown , S . & Meuter , M . ( 2000 ) , ‘Technology infusion in service en - counters’ , Journal of the Academy of Marketing Science 28 ( 1 ) , 138 – 149 . Bitner , M . , Gremler , D . & Zeithaml , V . ( 2008 ) , Services marketing : Integrating customer focus across the ﬁrm , McGraw - Hill Irwin . Borst , P . ( 1997 ) , Construction of Engineering Ontologies for Knowledge Sharing and Reuse , PhD thesis , Universiteit Twente . Briand , L . , Emam , K . & Morasca , S . ( 1996 ) , ‘On the application of measurement theory in software engineering’ , Empirical Software Engineering 1 ( 1 ) , 61 – 88 . Bultan , T . , Fu , X . , Hull , R . & Su , J . ( 2003 ) , Conversation speciﬁcation : A new approach to design and analysis of e - service composition , in ‘Proceedings of the 12th international conference on World Wide Web’ , ACM New York , NY , USA , pp . 410 – 420 . Chandrasekaran , B . ( 1990 ) , ‘Design problem solving : A task analysis’ , AI maga - zine 11 ( 4 ) , 59 – 71 . Chesbrough , H . & Spohrer , J . ( 2006 ) , ‘A research manifesto for services science’ , Communications of the ACM 49 ( 7 ) , 35 – 40 . Cross , N . ( 2002 ) , Creative cognition in design : processes of exceptional designers , in ‘C & C ’02 : Proceedings of the 4th conference on Creativity & cognition’ , ACM Press , New York , NY , USA , pp . 14 – 19 . de Haan , F . ( 2009 ) , ‘Reasoning about e - services at operator group delft - e 3 service in pracise’ . M . sc . Thesis for information science , Vrije Universiteit , Amster - dam . de Kinderen , S . & Gordijn , J . ( 2008 a ) , e 3 service : An Ontological Approach for Deriving Multi - supplier IT - Service Bundles from Consumer Needs , in ‘Pro - ceedings of the 41st Annual Hawaiian International Conference on System Sciences’ , pp . 318 – 327 . de Kinderen , S . & Gordijn , J . ( 2008 b ) , e 3 service - a model - based approach for gen - erating needs - driven e - service bundles in a networked enterprise , in ‘Proceed - ings of the 16th European Conference on Information Systems’ , pp . 350 – 361 . de Kinderen , S . & Gordijn , J . ( 2008 c ) , Reasoning about Substitute Choices and Preference Ordering in e - Services , in ‘Advanced Information Systems Engi - neering : 20th International Conference , Caise 2008 Montpellier , France , June 18 - 20 , 2008 , Proceedings’ , Springer - Verlag New York Inc , pp . 390 – 404 . de Kinderen , S . , Gordijn , J . & Akkermans , H . ( 2009 a ) , ‘Delliiss wp2 deliverable’ . de Kinderen , S . , Gordijn , J . & Akkkermans , H . ( 2009 b ) , Reasoning about cus - tomer needs in multi - supplier IT - service bundles using decision models , in ‘Proceedings of the Eleventh International Conference on Enterprise Infor - mation Systems ( ICEIS ) , Volume ISAS , Milan , Italy’ . de Kinderen , S . , Gordijn , J . , Dr¨oes , R . & Meiland , F . ( 2009 c ) , A computational approach towards eliciting needs - driven bundles of healthcare services , in ‘Proceedings of the 22st Annual Bled Conference’ . de Miranda , B . ( 2006 ) , ‘An ontological approach for the use of pricing models to sell services’ . M . sc . Thesis for information science , Vrije Universiteit , Amsterdam . Dibbern , J . , Goles , T . , Hirschheim , R . & Jayatilaka , B . ( 2004 ) , ‘Information sys - tems outsourcing : a survey and analysis of the literature’ , ACM SIGMIS Database 35 ( 4 ) , 6 – 102 . Dr¨oes , R . , Meiland , F . , Doruff , C . , Varodi , I . , Akkermans , H . , Baida , Z . , Faber , E . , Haaker , T . , Moelaert , F . , Kartseva , V . et al . ( 2005 ) , ‘A dynamic interactive social chart in dementia care’ , Medical and Care Compunetics 2 , volume 114 pp . 210 – 220 . Dub´e , L . , Johnson , M . & Renaghan , L . ( 1999 ) , ‘Adapting the QFD approach to extended service transactions’ , Production and Operations Management 8 ( 3 ) , 301 – 317 . Economides , N . ( 1996 ) , ‘The economics of networks’ , International journal of industrial organization 14 ( 6 ) , 673 – 699 . Edvardsson , B . , Gustafsson , A . & Roos , I . ( 2005 ) , ‘Service portraits in service research : a critical review’ , International Journal of Service Industry Man - agement 16 ( 1 ) , 107 – 121 . Elrod , T . , Johnson , R . & White , J . ( 2004 ) , ‘A new integrated model of noncompen - satory and compensatory decision strategies’ , Organizational Behavior and Human Decision Processes 95 ( 1 ) , 1 – 19 . Fensel , D . & Motta , E . ( 2001 ) , ‘Structured development of problem solving meth - ods’ , IEEE Transactions on Knowledge and Data Engineering 13 ( 6 ) , 913 – 932 . Ferrario , R . & Guarino , N . ( 2009 ) , Towards an Ontological Foundation for Services Science , in ‘Future of the Internet Symposium 2008 - FIS 2008’ , Springer - Verlag , Heidelberg , pp . 152 – 169 . Finkelstein , A . , Kramer , J . , Nuseibeh , B . , Finkelstein , L . & Goedicke , M . ( 1992 ) , ‘Viewpoints : A framework for integrating multiple perspectives in system development’ , International Journal of Software Engineering and Knowledge Engineering 2 ( 1 ) , 31 – 58 . Fishbein , M . ( 1978 ) , Belief , attitude , intention and behavior : an introduction to theory and research , Addison - Wesley . Third print . Fowler , M . ( 2003 ) , UML distilled : a brief guide to the standard object modeling language , Addison - Wesley Longman Publishing Co . , Inc . Boston , MA , USA . Garc´ıa , F . , Bertoa , M . , Calero , C . , Vallecillo , A . , Ru´ız , F . , Piattini , M . & Genero , M . ( 2006 ) , ‘Towards a consistent terminology for software measurement’ , Information and Software Technology 48 ( 8 ) , 631 – 644 . Gershenfeld , N . , Krikorian , R . & Cohen , D . ( 2004 ) , ‘The Internet of Things . ’ , Scientiﬁc American 291 ( 4 ) , 76 – 81 . Gordijn , J . & Akkermans , H . ( 2003 ) , ‘Value based requirements engineering : Ex - ploring innovative e - commerce ideas’ , Requirements Engineering Journal 8 ( 2 ) , 114 – 134 . Gordijn , J . , de Kinderen , S . & Wieringa , R . ( 2008 a ) , Value - driven Service Match - ing , in ‘Proceedings of the 2008 16th IEEE International Requirements Engi - neering Conference - Volume 00’ , IEEE Computer Society Washington , DC , USA , pp . 67 – 70 . Gordijn , J . , de Kinderen , S . , Pijpers , V . & Akkermans , H . ( 2008 b ) , e - services in a networked world : From semantics to pragmatics . , in J . Domingue , D . Fensel & P . Traverso , eds , ‘FIS’ , Vol . 5468 of Lecture Notes in Computer Science , Springer - Verlag , Heidelberg , pp . 44 – 57 . Grifﬁn , A . & Hauser , J . ( 1993 ) , ‘The voice of the customer’ , Marketing science 12 ( 1 ) , 1 – 27 . Grimnes , M . & Aamodt , A . ( 1996 ) , A two layer case - based reasoning architecture for medical image understanding , in ‘Advances in Case - Based Reasoning’ , Springer - Verlag , Heidelberg , pp . 164 – 178 . Gr¨onroos , C . ( 2000 ) , Service management and marketing : a customer relationship management approach , John Wiley & Sons Inc . Gr¨onroos , C . ( 2007 ) , Service management and marketing : customer management in service competition , Wiley India Pvt . Ltd . Guiltinan , J . P . ( 1987 ) , ‘The price bundling of services : a normative framework’ , Journal of Marketing 51 ( 2 ) , 74 – 85 . Gutman , J . & Reynolds , T . ( 1982 ) , ‘A means - end chain model based on consumer categorization processes’ , Journal of Marketing 46 ( 2 ) , 60 – 72 . Gutman , J . & Reynolds , T . ( 1988 ) , ‘Laddering theory - analysis and interpretation’ , Journal of Advertising Research 28 ( 1 ) , 11 . Holbrook , M . ( 1999 ) , Consumer value ; a framework for analysis and research , Routledge , 29 West 35th Street , New York , NY 10001 . 1st edition . Jackson , M . ( 2001 ) , Problem frames , Addison - Wesley Longman Publishing Co . , Inc . Boston , MA , USA . Jeffreys , I . ( 2004 ) , ‘The use of compensatory and non - compensatory multi - criteria analysis for small - scale forestry’ , Small - scale Forestry 3 ( 1 ) , 99 – 117 . Kotler , P . ( 2000 ) , Marketing Management , Prentice Hall , Upper Saddle River , NJ . Loudon , D . & Della - Bitta , A . ( 1993 ) , Consumer behaviour , McGraw - Hill , New York . Lovelock , C . ( 2001 ) , Service Marketing - People , Technology , Strategy , Prentice Hall , Upper Saddle River , NJ . Fourth edition . March , S . & Smith , G . ( 1995 ) , ‘Design and natural science research on information technology’ , Decision Support Systems 15 ( 4 ) , 251 – 266 . Martin , D . , Paolucci , M . , McIlraith , S . , Burstein , M . , McDermott , D . , McGuinness , D . , Parsia , B . , Payne , T . , Sabou , M . , Solanki , M . et al . ( 2005 ) , ‘Bringing se - mantics to web services : The OWL - S approach’ , Lecture Notes in Computer Science 3387 , 26 – 42 . Meerveld , J . , Schumacher , J . , Krijger , E . , Bal . , R . & de Vries , H . ( 2004 ) , ‘Landelijk dementieprogramma werkboek’ . Molina , M . & Blasco , G . ( 2003 ) , A multi - agent system for emergency decision support , in ‘Proceedings of the IDEAL 2003’ , Springer - Verlag , Heidelberg , pp . 43 – 51 . Monroe , K . ( 1990 ) , Pricing : Making proﬁtable decisions , McGraw - Hill Compa - nies . Motta , E . ( 1999 ) , Reusable Components for Knowledge Modelling : Case Studies in Parametric Design Problem Solving , IOS Press Amsterdam , The Nether - lands . Motta , E . , Stutt , A . , Zdrahal , Z . , O’Hara , K . & Shadbolt , N . ( 1996 ) , ‘Solving VT in VITAL : a study in model construction and knowledge reuse’ , International Journal of Human - Computers Studies 44 ( 3 ) , 333 – 371 . Normann , R . ( 2000 ) , Service Management - strategy and leadership in service business , Wiley . Third edition . Normann , R . & Ramirez , R . ( 1994 ) , ‘From value chain to value constellation : de - signing interactive strategy’ , Harvard business review 71 ( 4 ) , 65 . Omelayenko , B . ( 2005 ) , Web Service Conﬁguration on the Semantic Web , PhD thesis , Vrije Universiteit , Amsterdam . O’Sullivan , J . , Edmond , D . & Ter Hofstede , A . ( 2002 ) , ‘What’s in a Service ? ’ , Distributed and Parallel Databases 12 ( 2 ) , 117 – 133 . Ouyang , C . , Verbeek , E . , van der Aalst , W . , Breutel , S . , Dumas , M . & ter Hofstede , A . ( 2007 ) , ‘Formal semantics and analysis of control ﬂow in WS - BPEL’ , Science of Computer Programming 67 ( 2 - 3 ) , 162 – 198 . Paolucci , M . , Kawamura , T . , Payne , T . & Sycara , K . ( 2002 ) , Semantic matching of web services capabilities , Springer - Verlag , Heidelberg , pp . 333 – 347 . Parasuraman , A . , Zeithaml , V . A . & Berry , L . L . ( 1985 ) , ‘A conceptual model of service quality and its implications for future research’ , The Journal of Marketing 49 ( 4 ) , 41 – 50 . Poeck , K . , Fensel , D . , Landes , D . & Angele , J . ( 1996 ) , ‘Combining KARL and CRLM for designing vertical transportation systems’ , International Journal of Human - Computers Studies 44 ( 3 - 4 ) , 435 – 467 . Preist , C . ( 2004 ) , A conceptual architecture for semantic web services , in ‘Pro - ceedings of the International Semantic Web Conference 2004 ( ISWC 2004 ) ’ , Springer - Verlag , Heidelberg , pp . 395 – 409 . Quinn , J . & Paquette , P . ( 1990 ) , ‘Technology in services : creating organizational revolutions’ , Sloan Management Review 31 ( 2 ) , 67 – 78 . Ramsay , J . ( 2005 ) , ‘The real meaning of value in trading relationships’ , Interna - tional Journal of Operations and Production Management 25 ( 6 ) , 549 – 565 . Rokeach , M . ( 1973 ) , The nature of human values , Free Press New York , LC control NO . 72092870 edition . Roman , D . , Keller , U . , Lausen , H . , de Bruijn , J . , Lara , R . , Stollberg , M . , Polleres , A . , Feier , C . , Bussler , C . & Fensel , D . ( 2005 ) , ‘Web service modeling ontol - ogy’ , Applied Ontology 1 ( 1 ) , 77 – 106 . Rothrock , L . & Yin , J . ( 2008 ) , ‘Integrating compensatory and noncompensatory decision making strategies in dynamic task environments’ , Decision Model - ing and Behavior in Uncertain and Complex Environments 21 ( 2 ) , 123 – 138 . Runkel , T . , Birmingham , W . , Balkany , A . & Solving , V . ( 1996 ) , ‘Solving VT by Reuse’ , International Journal of Human - Computer Studies 44 ( 3 / 4 ) , 403 – 433 . Rust , R . & Miu , C . ( 2006 ) , ‘What academic research tells us about service’ , Com - munications of the ACM 49 ( 7 ) , 49 – 54 . Sabin , D . & Weigel , R . ( 1998 ) , ‘Product conﬁguration frameworks - a survey’ , IEEE Intelligent Systems and their applications 13 ( 4 ) , 42 – 49 . Schreiber , A . & Terpstra , P . ( 1996 ) , ‘Sisyphus - VT : a CommonKADS solution’ , International Journal of Human - Computer Studies 44 ( 3 - 4 ) , 373 – 402 . Schreiber , G . ( 2000 ) , Knowledge engineering and management : the Com - monKADS methodology , MIT press . Searle , J . ( 1983 ) , Intentionality , an essay in the philosophy of mind , Cambridge University Press , The Edinburgh Building Shaftesbury Road Cambridge CB2 8RU United Kingdom . Shostack , G . ( 1977 ) , ‘Breaking free from product marketing’ , The Journal of Mar - keting 41 ( 2 ) , 73 – 80 . Sirin , E . , Hendler , J . & Parsia , B . ( 2002 ) , Semi - automatic Composition of Web Services using Semantic Descriptions , in ‘Web Services : Modeling , Archi - tecture and Infrastructure workshop in ICEIS 2003’ , pp . 17 – 24 . Solomon , M . ( 2003 ) , Consumer behavior : buying , having and being , Prentice Hall , Upper Saddle River , New Jersey 07458 . Sixth edition . Spohrer , J . , Anderson , L . , Pass , N . , Ager , T . & Gruhl , D . ( 2008 ) , ‘Service Science’ , Journal of Grid Computing 6 ( 3 ) , 313 – 324 . Stapleton , J . ( 1997 ) , Dynamic Systems Development Method , Addison Wesley Longman . Reading , Massachusetts . Stremersch , S . & Tellis , G . J . ( 2002 ) , ‘Strategic bundling of products and prices : A new synthesis for marketing’ , Journal of Marketing 66 ( 1 ) , 55 – 72 . Stuart , F . & Tax , S . ( 1996 ) , ‘Planning for service quality : an integrative approach’ , International Journal of Service Industry Management 7 ( 4 ) , 58 – 77 . Stumptner , M . ( 1997 ) , ‘An overview of knowledge - based conﬁguration’ , AI Com - munications 10 ( 2 ) , 111 – 125 . Tapscott , D . , Ticoll , D . & Lowy , A . ( 2000 ) , Digital Capital - Harnessing the Power of Business Webs , Nicholas Brealy Publishing , 20 Park Plaza , Boston , MA 02116 . ten Teije , A . , van Harmelen , F . & Wielinga , B . ( 2004 ) , Conﬁguration of web ser - vices as parametric design , in ‘Proceedings of the 14th International EKAW Conference’ , Springer - Verlag , Heidelberg . ten Teije , A . , van Harmelen , F . , Schreiber , A . T . & Wielinga , B . J . ( 1998 ) , ‘Con - struction of problem - solving methods as parametric design’ , International Journal of Human - Computer Studies 49 ( 4 ) , 363 – 389 . Tung , W . , Capella , L . M . & Tat , P . K . ( 1997 ) , ‘Service pricing : A multi - step syn - thetic approach’ , Journal of Services Marketing 11 ( 1 ) , 53 – 65 . Uschold , M . & Gruninger , M . ( 2009 ) , ‘Ontologies : Principles , methods and appli - cations’ , Knowledge engineering review 11 ( 02 ) , 93 – 136 . Vargo , S . & Lusch , R . ( 2004 ) , ‘Evolving to a new dominant logic for marketing’ , Journal of Marketing 68 ( 1 ) , 1 – 17 . Velleman , P . & Wilkinson , L . ( 1993 ) , ‘Nominal , ordinal , interval , and ratio typolo - gies are misleading’ , American Statistician 47 ( 1 ) , 65 – 72 . Verma , K . , Akkiraju , R . , Goodwin , R . , Doshi , P . & Lee , J . ( 2004 ) , On accommo - dating inter service dependencies in web process ﬂow composition , in ‘2004 AAAI Spring Symposium Series’ , pp . 37 – 43 . Wieringa , R . , Maiden , N . , Mead , N . & Rolland , C . ( 2006 ) , ‘Requirements engi - neering paper classiﬁcation and evaluation criteria : a proposal and a discus - sion’ , Requirements Engineering 11 ( 1 ) , 102 – 107 . Woodruff , R . ( 1997 ) , ‘Customer value : The next source for competitive advan - tage’ , Journal of the Academy of Marketing Science 25 ( 2 ) , 139 – 153 . Yost , G . ( 1996 ) , ‘Implementing the Sisyphus - 93 task using Soar / TAQL’ , Interna - tional Journal of Human Computer Studies 44 ( 3 ) , 281 – 302 . Yu , E . ( 1997 ) , Towards modelling and reasoning support for early - phase require - ments engineering , in ‘Proceedings of the 3rd IEEE Int . Symp . on Require - ments Engineering ( RE’97 ) ’ , IEEE Computer Science Press , pp . 226 – 235 . Zeithaml , V . , Parasuraman , A . & Berry , L . ( 1985 ) , ‘Problems and strategies in services marketing’ , The Journal of Marketing 49 ( 2 ) , 33 – 46 . Zhu , K . & MacQuarrie , B . ( 2003 ) , ‘The Economics of Digital Bundling : The Im - pact of Digitization and Bundling on the Music Industry’ , Communications of the ACM 46 ( 9 ) , 264 – 270 . SIKS Dissertation Series 1998 1998 - 01 Johan van den Akker ( CWI ) . DEGAS - An Active , Tem - poralDatabaseofAutonomousObjects 1998 - 02 Floris Wiesman ( UM ) . Information Retrieval by Graphi - callyBrowsingMeta - Information 1998 - 03 Ans Steuten ( TUD ) . A Contribution to the Linguis - tic Analysis of Business Conversations within the Lan - guage / ActionPerspective 1998 - 04 DennisBreuker ( UM ) . MemoryversusSearchinGames 1998 - 05 E . W . Oskamp ( RUL ) . Computerondersteuning bij Straftoemeting 1999 1999 - 01 Mark Sloof ( VU ) . Physiology of Quality Change Mod - elling ; Automated modelling of Quality Change of Agri - culturalProducts 1999 - 02 Rob Potharst ( EUR ) . Classiﬁcation using decision trees andneuralnets 1999 - 03 DonBeal ( UM ) . TheNatureofMinimaxSearch 1999 - 04 Jacques Penders ( UM ) . The practical Art of Moving PhysicalObjects 1999 - 05 Aldo de Moor ( KUB ) . Empowering Communities : A Method for the Legitimate User - Driven Speciﬁcation of NetworkInformationSystems 1999 - 06 Niek J . E . Wijngaards ( VU ) . Re - design of compositional systems 1999 - 07 David Spelt ( UT ) . Veriﬁcation support for object databasedesign 1999 - 08 Jacques H . J . Lenting ( UM ) . Informed Gambling : Con - ception and Analysis of a Multi - Agent Mechanism for DiscreteReallocation . 2000 2000 - 01 Frank Niessink ( VU ) . Perspectives on Improving Soft - wareMaintenance 2000 - 02 KoenHoltman ( TUE ) . PrototypingofCMSStorageMan - agement 2000 - 03 Carolien M . T . Metselaar ( UVA ) . Sociaal - organisatorische gevolgen van kennistechnologie ; eenprocesbenaderingenactorperspectief 2000 - 04 GeertdeHaan ( VU ) . ETAG , AFormalModelofCompe - tenceKnowledgeforUserInterfaceDesign 2000 - 05 Ruud van der Pol ( UM ) . Knowledge - based Query For - mulationinInformationRetrieval 2000 - 6 Rogier van Eijk ( UU ) . Programming Languages for AgentCommunication 2000 - 07 NielsPeek ( UU ) . Decision - theoreticPlanningofClinical PatientManagement 2000 - 08 Veerle Coup ( EUR ) . Sensitivity Analyis of Decision - TheoreticNetworks 2000 - 09 Florian Waas ( CWI ) . Principles of Probabilistic Query Optimization 2000 - 10 Niels Nes ( CWI ) . Image Database Management System DesignConsiderations , AlgorithmsandArchitecture 2000 - 11 Jonas Karlsson ( CWI ) . Scalable Distributed Data Struc - turesforDatabaseManagement 2001 2001 - 01 Silja Renooij ( UU ) . Qualitative Approaches to Quantify - ingProbabilisticNetworks 2001 - 02 Koen Hindriks ( UU ) . Agent Programming Languages : ProgrammingwithMentalModels 2001 - 03 Maarten van Someren ( UvA ) . Learning as problem solv - ing 2001 - 04 Evgueni Smirnov ( UM ) . Conjunctive and Disjunctive VersionSpaceswithInstance - BasedBoundarySets 2001 - 05 Jacco van Ossenbruggen ( VU ) . Processing Structured Hypermedia : AMatterofStyle 2001 - 06 Martijn van Welie ( VU ) . Task - based User Interface De - sign 2001 - 07 Bastiaan Schonhage ( VU ) . Diva : Architectural Perspec - tivesonInformationVisualization 2001 - 08 Pascal van Eck ( VU ) . A Compositional Semantic Struc - tureforMulti - AgentSystemsDynamics 2001 - 09 Pieter Jan ’t Hoen ( RUL ) . Towards Distributed Develop - ment of Large Object - Oriented Models , Views of Pack - agesasClasses 2001 - 10 MaartenSierhuis ( UvA ) . ModelingandSimulatingWork Practice BRAHMS : a multiagent modeling and simula - tionlanguageforworkpracticeanalysisanddesign 2001 - 11 Tom M . van Engers ( VUA ) . Knowledge Management : TheRoleofMentalModelsinBusinessSystemsDesign 2002 2002 - 01 Nico Lassing ( VU ) . Architecture - Level Modiﬁability Analysis 2002 - 02 Roelof van Zwol ( UT ) . Modelling and searching web - baseddocumentcollections 2002 - 03 Henk Ernst Blok ( UT ) . Database Optimization Aspects forInformationRetrieval 2002 - 04 Juan Roberto Castelo Valdueza ( UU ) . The Discrete AcyclicDigraphMarkovModelinDataMining 2002 - 05 Radu Serban ( VU ) . The Private Cyberspace Modeling ElectronicEnvironmentsinhabitedbyPrivacy - concerned Agents 2002 - 06 Laurens Mommers ( UL ) . Applied legal epistemology ; Building a knowledge - based ontology of the legal do - main 2002 - 07 Peter Boncz ( CWI ) . Monet : A Next - Generation DBMS KernelForQuery - IntensiveApplications 2002 - 08 JaapGordijn ( VU ) . ValueBasedRequirementsEngineer - ing : ExploringInnovativeE - CommerceIdeas 2002 - 09 Willem - Jan van den Heuvel ( KUB ) . Integrating Modern BusinessApplicationswithObjectiﬁedLegacySystems 2002 - 10 BrianSheppard ( UM ) . TowardsPerfectPlayofScrabble 2002 - 11 Wouter C . A . Wijngaards ( VU ) . Agent Based Modelling of Dynamics : Biological and Organisational Applica - tions 2002 - 12 Albrecht Schmidt ( Uva ) . Processing XML in Database Systems 2002 - 13 Hongjing Wu ( TUE ) . A Reference Architecture for AdaptiveHypermediaApplications 2002 - 14 Wieke de Vries ( UU ) . Agent Interaction : Abstract Ap - proaches to Modelling , Programming and Verifying Multi - AgentSystems 2002 - 15 RikEshuis ( UT ) . SemanticsandVeriﬁcationofUMLAc - tivityDiagramsforWorkﬂowModelling 2002 - 16 PietervanLangen ( VU ) . TheAnatomyofDesign : Foun - dations , ModelsandApplications 2002 - 17 Stefan Manegold ( UVA ) . Understanding , Modeling , and ImprovingMain - MemoryDatabasePerformance 2003 2003 - 01 Heiner Stuckenschmidt ( VU ) . Ontology - Based Informa - tionSharinginWeaklyStructuredEnvironments 2003 - 02 Jan Broersen ( VU ) . Modal Action Logics for Reasoning AboutReactiveSystems 2003 - 03 Martijn Schuemie ( TUD ) . Human - Computer Interaction andPresenceinVirtualRealityExposureTherapy 2003 - 04 Milan Petkovic ( UT ) . Content - Based Video Retrieval SupportedbyDatabaseTechnology 2003 - 05 Jos Lehmann ( UVA ) . Causation in Artiﬁcial Intelligence andLaw - Amodellingapproach 2003 - 06 BorisvanSchooten ( UT ) . Developmentandspeciﬁcation ofvirtualenvironments 2003 - 07 Machiel Jansen ( UvA ) . Formal Explorations of Know - ledgeIntensiveTasks 2003 - 08 YongpingRan ( UM ) . RepairBasedScheduling 2003 - 09 Rens Kortmann ( UM ) . The resolution of visually guided behaviour 2003 - 10 Andreas Lincke ( UvT ) . Electronic Business Negotiation : Some experimental studies on the interaction between medium , innovationcontextandculture 2003 - 11 SimonKeizer ( UT ) . ReasoningunderUncertaintyinNat - uralLanguageDialogueusingBayesianNetworks 2003 - 12 Roeland Ordelman ( UT ) . Dutch speech recognition in multimediainformationretrieval 2003 - 13 Jeroen Donkers ( UM ) . Nosce Hostem - Searching with OpponentModels 2003 - 14 StijnHoppenbrouwers ( KUN ) . FreezingLanguage : Con - ceptualisationProcessesacrossICT - SupportedOrganisa - tions 2003 - 15 Mathijs de Weerdt ( TUD ) . Plan Merging in Multi - Agent Systems 2003 - 16 Menzo Windhouwer ( CWI ) . Feature Grammar Systems - Incremental Maintenance of Indexes to Digital Media Warehouses 2003 - 17 David Jansen ( UT ) . Extensions of Statecharts with Prob - ability , Time , andStochasticTiming 2003 - 18 LeventeKocsis ( UM ) . LearningSearchDecisions 2004 2004 - 01 Virginia Dignum ( UU ) . A Model for Organizational In - teraction : BasedonAgents , FoundedinLogic 2004 - 02 Lai Xu ( UvT ) . Monitoring Multi - party Contracts for E - business 2004 - 03 PerryGroot ( VU ) . ATheoreticalandEmpiricalAnalysis ofApproximationinSymbolicProblemSolving 2004 - 04 Chris van Aart ( UVA ) . Organizational Principles for Multi - AgentArchitectures 2004 - 05 Viara Popova ( EUR ) . Knowledge discovery and mono - tonicity 2004 - 06 Bart - Jan Hommes ( TUD ) . The Evaluation of Business ProcessModelingTechniques 2004 - 07 Elise Boltjes ( UM ) . Voorbeeldig onderwijs ; voor - beeldgestuurd onderwijs , een opstap naar abstract denken , vooralvoormeisjes 2004 - 08 Joop Verbeek ( UM ) . Politie en de Nieuwe Internationale Informatiemarkt , Grensregionale politile gegevensuit - wisselingendigitaleexpertise 2004 - 09 Martin Caminada ( VU ) . For the Sake of the Argument ; explorationsintoargument - basedreasoning 2004 - 10 Suzanne Kabel ( UVA ) . Knowledge - rich indexing of learning - objects 2004 - 11 MichelKlein ( VU ) . ChangeManagementforDistributed Ontologies 2004 - 12 The Duy Bui ( UT ) . Creating emotions and facial expres - sionsforembodiedagents 2004 - 13 WojciechJamroga ( UT ) . UsingMultipleModelsofReal - ity : OnAgentswhoKnowhowtoPlay 2004 - 14 PaulHarrenstein ( UU ) . LogicinConﬂict . LogicalExplo - rationsinStrategicEquilibrium 2004 - 15 ArnoKnobbe ( UU ) . Multi - RelationalDataMining 2004 - 16 FedericoDivina ( VU ) . HybridGeneticRelationalSearch forInductiveLearning 2004 - 17 Mark Winands ( UM ) . Informed Search in Complex Games 2004 - 18 Vania Bessa Machado ( UvA ) . Supporting the Construc - tionofQualitativeKnowledgeModels 2004 - 19 Thijs Westerveld ( UT ) . Using generative probabilistic modelsformultimediaretrieval 2004 - 20 Madelon Evers ( Nyenrode ) . Learning from Design : fa - cilitatingmultidisciplinarydesignteams 2005 2005 - 01 Floor Verdenius ( UVA ) . Methodological Aspects of De - signingInduction - BasedApplications 2005 - 02 ErikvanderWerf ( UM ) . ) . AItechniquesforthegameof Go 2005 - 03 Franc Grootjen ( RUN ) . A Pragmatic Approach to the ConceptualisationofLanguage 2005 - 04 Nirvana Meratnia ( UT ) . Towards Database Support for MovingObjectdata 2005 - 05 Gabriel Infante - Lopez ( UVA ) . Two - Level Probabilistic GrammarsforNaturalLanguageParsing 2005 - 06 PieterSpronck ( UM ) . AdaptiveGameAI 2005 - 07 Flavius Frasincar ( TUE ) . Hypermedia Presentation Gen - erationforSemanticWebInformationSystems 2005 - 08 Richard Vdovjak ( TUE ) . A Model - driven Approach for BuildingDistributedOntology - basedWebApplications 2005 - 09 Jeen Broekstra ( VU ) . Storage , Querying and Inferencing forSemanticWebLanguages 2005 - 10 Anders Bouwer ( UVA ) . Explaining Behaviour : Using Qualitative Simulation in Interactive Learning Environ - ments 2005 - 11 Elth Ogston ( VU ) . Agent Based Matchmaking and Clus - tering - ADecentralizedApproachtoSearch 2005 - 12 CsabaBoer ( EUR ) . DistributedSimulationinIndustry 2005 - 13 Fred Hamburg ( UL ) . Een Computermodel voor het On - dersteunenvanEuthanasiebeslissingen 2005 - 14 Borys Omelayenko ( VU ) . Web - Service conﬁguration on theSemanticWeb ; Exploringhowsemanticsmeetsprag - matics 2005 - 15 Tibor Bosse ( VU ) . Analysis of the Dynamics of Cogni - tiveProcesses 2005 - 16 Joris Graaumans ( UU ) . Usability of XML Query Lan - guages 2005 - 17 Boris Shishkov ( TUD ) . Software Speciﬁcation Based on Re - usableBusinessComponents 2005 - 18 Danielle Sent ( UU ) . Test - selection strategies for proba - bilisticnetworks 2005 - 19 MichelvanDartel ( UM ) . SituatedRepresentation 2005 - 20 Cristina Coteanu ( UL ) . Cyber Consumer Law , State of theArtandPerspectives 2005 - 21 Wijnand Derks ( UT ) . Improving Concurrency and Re - covery in Database Systems by Exploiting Application Semantics 2006 2006 - 01 Samuil Angelov ( TUE ) . Foundations of B2B Electronic Contracting 2006 - 02 Cristina Chisalita ( VU ) . Contextual issues in the design anduseofinformationtechnologyinorganizations 2006 - 03 Noor Christoph ( UVA ) . The role of metacognitive skills inlearningtosolveproblems 2006 - 04 MartaSabou ( VU ) . BuildingWebServiceOntologies 2006 - 05 Cees Pierik ( UU ) . Validation Techniques for Object - OrientedProofOutlines 2006 - 06 ZivBaida ( VU ) . Software - aidedServiceBundling - Intel - ligentMethods & ToolsforGraphicalServiceModeling 2006 - 07 MarkoSmiljanic ( UT ) . XMLschemamatching – balanc - ingefﬁciencyandeffectivenessbymeansofclustering 2006 - 08 Eelco Herder ( UT ) . Forward , Back and Home Again - AnalyzingUserBehaviorontheWeb 2006 - 09 Mohamed Wahdan ( UM ) . Automatic Formulation of the Auditor’sOpinion 2006 - 10 Ronny Siebes ( VU ) . Semantic Routing in Peer - to - Peer Systems 2006 - 11 JoerivanRuth ( UT ) . FlatteningQueriesoverNestedData Types 2006 - 12 BertBongers ( VU ) . Interactivation - Towardsane - cology ofpeople , ourtechnologicalenvironment , andthearts 2006 - 13 Henk - Jan Lebbink ( UU ) . Dialogue and Decision Games forInformationExchangingAgents 2006 - 14 JohanHoorn ( VU ) . SoftwareRequirements : Update , Up - grade , Redesign - towards a Theory of Requirements Change 2006 - 15 Rainer Malik ( UU ) . CONAN : Text Mining in the BiomedicalDomain 2006 - 16 CarstenRiggelsen ( UU ) . ApproximationMethodsforEf - ﬁcientLearningofBayesianNetworks 2006 - 17 Stacey Nagata ( UU ) . User Assistance for Multitasking withInterruptionsonaMobileDevice 2006 - 18 ValentinZhizhkun ( UVA ) . GraphtransformationforNat - uralLanguageProcessing 2006 - 19 Birna van Riemsdijk ( UU ) . Cognitive Agent Program - ming : ASemanticApproach 2006 - 20 MarinaVelikova ( UvT ) . Monotonemodelsforprediction indatamining 2006 - 21 BasvanGils ( RUN ) . AptnessontheWeb 2006 - 22 Paul de Vrieze ( RUN ) . Fundaments of Adaptive Person - alisation 2006 - 23 Ion Juvina ( UU ) . Development of Cognitive Model for NavigatingontheWeb 2006 - 24 Laura Hollink ( VU ) . Semantic Annotation for Retrieval ofVisualResources 2006 - 25 MadalinaDrugan ( UU ) . Conditionallog - likelihoodMDL andEvolutionaryMCMC 2006 - 26 Vojkan Mihajlovic ( UT ) . Score Region Algebra : A Flex - ibleFrameworkforStructuredInformationRetrieval 2006 - 27 Stefano Bocconi ( CWI ) . Vox Populi : generating video documentariesfromsemanticallyannotatedmediarepos - itories 2006 - 28 Borkur Sigurbjornsson ( UVA ) . Focused Information Ac - cessusingXMLElementRetrieval 2007 2007 - 01 KeesLeune ( UvT ) . AccessControlandService - Oriented Architectures 2007 - 02 Wouter Teepe ( RUG ) . Reconciling Information Ex - changeandConﬁdentiality : AFormalApproach 2007 - 03 PeterMika ( VU ) . SocialNetworksandtheSemanticWeb 2007 - 04 Jurriaan van Diggelen ( UU ) . Achieving Semantic Inter - operabilityinMulti - agentSystems : adialogue - basedap - proach 2007 - 05 Bart Schermer ( UL ) . Software Agents , Surveillance , and theRighttoPrivacy : aLegislativeFrameworkforAgent - enabledSurveillance 2007 - 06 GiladMishne ( UVA ) . AppliedTextAnalyticsforBlogs 2007 - 07 NatasaJovanovic’ ( UT ) . ToWhomItMayConcern - Ad - dresseeIdentiﬁcationinFace - to - FaceMeetings 2007 - 08 MarkHoogendoorn ( VU ) . ModelingofChangeinMulti - AgentOrganizations 2007 - 09 DavidMobach ( VU ) . Agent - BasedMediatedServiceNe - gotiation 2007 - 10 Huib Aldewereld ( UU ) . Autonomy vs . Conformity : an InstitutionalPerspectiveonNormsandProtocols 2007 - 11 Natalia Stash ( TUE ) . Incorporating Cognitive / Learning Styles in a General - Purpose Adaptive Hypermedia Sys - tem 2007 - 12 Marcel van Gerven ( RUN ) . Bayesian Networks for Clin - ical Decision Support : A Rational Approach to Dynamic Decision - MakingunderUncertainty 2007 - 13 Rutger Rienks ( UT ) . Meetings in Smart Environments ; ImplicationsofProgressingTechnology 2007 - 14 NiekBergboer ( UM ) . Context - BasedImageAnalysis 2007 - 15 Joyca Lacroix ( UM ) . NIM : a Situated Computational MemoryModel 2007 - 16 DavideGrossi ( UU ) . DesigningInvisibleHandcuffs . For - mal investigations in Institutions and Organizations for Multi - agentSystems 2007 - 17 Theodore Charitos ( UU ) . Reasoning with Dynamic Net - worksinPractice 2007 - 18 BartOrriens ( UvT ) . Onthedevelopmentanmanagement ofadaptivebusinesscollaborations 2007 - 19 David Levy ( UM ) . Intimate relationships with artiﬁcial partners 2007 - 20 Slinger Jansen ( UU ) . Customer Conﬁguration Updating inaSoftwareSupplyNetwork 2007 - 21 Karianne Vermaas ( UU ) . Fast diffusion and broadening use : A research on residential adoption and usage of broadband internet in the Netherlands between 2001 and 2005 2007 - 22 Zlatko Zlatev ( UT ) . Goal - oriented design of value and processmodelsfrompatterns 2007 - 23 PeterBarna ( TUE ) . SpeciﬁcationofApplicationLogicin WebInformationSystems 2007 - 24 Georgina Ramrez Camps ( CWI ) . Structural Features in XMLRetrieval 2007 - 25 Joost Schalken ( VU ) . Empirical Investigations in Soft - wareProcessImprovement 2008 2008 - 01 Katalin Boer - Sorbn ( EUR ) . Agent - Based Simulation of FinancialMarkets : Amodular , continuous - timeapproach 2008 - 02 Alexei Sharpanskykh ( VU ) . On Computer - Aided Meth - odsforModelingandAnalysisofOrganizations 2008 - 03 Vera Hollink ( UVA ) . Optimizing hierarchical menus : a usage - basedapproach 2008 - 04 AnderdeKeijzer ( UT ) . ManagementofUncertainData - towardsunattendedintegration 2008 - 05 Bela Mutschler ( UT ) . Modeling and simulating causal dependencies on process - aware information systems fromacostperspective 2008 - 06 ArjenHommersom ( RUN ) . OntheApplicationofFormal MethodstoClinicalGuidelines , anArtiﬁcialIntelligence Perspective 2008 - 07 PetervanRosmalen ( OU ) . Supportingthetutorinthede - signandsupportofadaptivee - learning 2008 - 08 Janneke Bolt ( UU ) . Bayesian Networks : Aspects of Ap - proximateInference 2008 - 09 ChristofvanNimwegen ( UU ) . Theparadoxoftheguided user : assistancecanbecounter - effective 2008 - 10 WauterBosma ( UT ) . Discourseorientedsummarization 2008 - 11 VeraKartseva ( VU ) . DesigningControlsforNetworkOr - ganizations : AValue - BasedApproach 2008 - 12 JozsefFarkas ( RUN ) . ASemioticallyOrientedCognitive ModelofKnowledgeRepresentation 2008 - 13 Caterina Carraciolo ( UVA ) . Topic Driven Access to Sci - entiﬁcHandbooks 2008 - 14 Arthur van Bunningen ( UT ) . Context - Aware Querying ; BetterAnswerswithLessEffort 2008 - 15 Martijn van Otterlo ( UT ) . The Logic of Adaptive Behav - ior : Knowledge Representation and Algorithms for the Markov Decision Process Framework in First - Order Do - mains 2008 - 16 HenriettevanVugt ( VU ) . Embodiedagentsfromauser’s perspective 2008 - 17 Martin Op ’t Land ( TUD ) . Applying Architecture and OntologytotheSplittingandAllyingofEnterprises 2008 - 18 GuidodeCroon ( UM ) . AdaptiveActiveVision 2008 - 19 HenningRode ( UT ) . FromDocumenttoEntityRetrieval : Improving Precision and Performance of Focused Text Search 2008 - 20 Rex Arendsen ( UVA ) . Geen bericht , goed bericht . Een onderzoek naar de effecten van de introductie van elek - tronisch berichtenverkeer met de overheid op de admin - istratievelastenvanbedrijven 2008 - 21 KrisztianBalog ( UVA ) . PeopleSearchintheEnterprise 2008 - 22 HenkKoning ( UU ) . CommunicationofIT - Architecture 2008 - 23 Stefan Visscher ( UU ) . Bayesian network models for the managementofventilator - associatedpneumonia 2008 - 24 Zharko Aleksovski ( VU ) . Using background knowledge inontologymatching 2008 - 25 Geert Jonker ( UU ) . Efﬁcient and Equitable Exchange in Air Trafﬁc Management Plan Repair using Spender - signedCurrency 2008 - 26 Marijn Huijbregts ( UT ) . Segmentation , Diarization and SpeechTranscription : SurpriseDataUnraveled 2008 - 27 Hubert Vogten ( OU ) . Design and Implementation Strate - giesforIMSLearningDesign 2008 - 28 Ildiko Flesch ( RUN ) . On the Use of Independence Rela - tionsinBayesianNetworks 2008 - 29 Dennis Reidsma ( UT ) . Annotations and Subjective Ma - chines - Of Annotators , Embodied Agents , Users , and OtherHumans 2008 - 30 Wouter van Atteveldt ( VU ) . Semantic Network Analy - sis : Techniques for Extracting , Representing and Query - ingMediaContent 2008 - 31 Loes Braun ( UM ) . Pro - Active Medical Information Re - trieval 2008 - 32 Trung H . Bui ( UT ) . Toward Affective Dialogue Manage - ment using Partially Observable Markov Decision Pro - cesses 2008 - 33 Frank Terpstra ( UVA ) . Scientiﬁc Workﬂow Design ; the - oreticalandpracticalissues 2008 - 34 JeroendeKnijf ( UU ) . StudiesinFrequentTreeMining 2008 - 35 Ben Torben Nielsen ( UvT ) . Dendritic morphologies : functionshapesstructure 2009 2009 - 01 Rasa Jurgelenaite ( RUN ) . Symmetric Causal Indepen - denceModels 2009 - 02 Willem Robert van Hage ( VU ) . Evaluating Ontology - AlignmentTechniques 2009 - 03 Hans Stol ( UvT ) . A Framework for Evidence - based Pol - icyMakingUsingIT 2009 - 04 Josephine Nabukenya ( RUN ) . Improving the Quality of Organisational Policy Making using Collaboration Engi - neering 2009 - 05 Sietse Overbeek ( RUN ) . Bridging Supply and Demand for Knowledge Intensive Tasks - Based on Knowledge , Cognition , andQuality 2009 - 06 Muhammad Subianto ( UU ) . Understanding Classiﬁca - tion 2009 - 07 RonaldPoppe ( UT ) . DiscriminativeVision - BasedRecov - eryandRecognitionofHumanMotion 2009 - 08 Volker Nannen ( VU ) . Evolutionary Agent - Based Policy AnalysisinDynamicEnvironments 2009 - 09 Benjamin Kanagwa ( RUN ) . Design , Discovery and Con - structionofService - orientedSystems 2009 - 10 Jan Wielemaker ( UVA ) . Logic programming for knowledge - intensiveinteractiveapplications 2009 - 11 AlexanderBoer ( UVA ) . LegalTheory , SourcesofLaw & theSemanticWeb 2009 - 12 PeterMassuthe ( TUE , Humboldt - UniversitaetzuBerlin ) . OperatingGuidelinesforServices 2009 - 13 StevendeJong ( UM ) . FairnessinMulti - AgentSystems 2009 - 14 Maksym Korotkiy ( VU ) . From ontology - enabled ser - vices to service - enabled ontologies ( making ontologies workine - sciencewithONTO - SOA ) . 2009 - 15 Rinke Hoekstra ( UVA ) . Ontology Representation - De - signPatternsandOntologiesthatMakeSense 2009 - 16 FritzReul ( UvT ) . NewArchitecturesinComputerChess 2009 - 17 Laurens van der Maaten ( UvT ) . Feature Extraction from VisualData 2009 - 18 Fabian Groffen ( CWI ) . Armada , An Evolving Database System 2009 - 19 Valentin Robu ( CWI ) . Modeling Preferences , Strategic Reasoning and Collaboration in Agent - Mediated Elec - tronicMarkets 2009 - 20 BobvanderVecht ( UU ) . AdjustableAutonomy : Control - ingInﬂuencesonDecisionMaking 2009 - 21 StijnVanderlooy ( UM ) . RankingandReliableClassiﬁca - tion 2009 - 22 Pavel Serdyukov ( UT ) . Search For Expertise : Going be - yonddirectevidence 2009 - 23 Peter Hofgesang ( VU ) . Modelling Web Usage in a ChangingEnvironment 2009 - 24 Annerieke Heuvelink ( VUA ) . Cognitive Models for TrainingSimulations 2009 - 25 AlexvanBallegooij ( CWI ) . RAM : ArrayDatabaseMan - agementthroughRelationalMapping 2009 - 26 FernandoKoch ( UU ) . AnAgent - BasedModelfortheDe - velopmentofIntelligentMobileServices 2009 - 27 Christian Glahn ( OU ) . Contextual Support of social En - gagementandReﬂectionontheWeb 2009 - 28 SanderEvers ( UT ) . SensorDataManagementwithProb - abilisticModels 2009 - 29 StanislavPokraev ( UT ) . Model - DrivenSemanticIntegra - tionofService - OrientedApplications 2009 - 30 MarcinZukowski ( CWI ) . Balancingvectorizedqueryex - ecutionwithbandwidth - optimizedstorage 2009 - 31 Soﬁya Katrenko ( UVA ) . A Closer Look at Learning Re - lationsfromText 2009 - 32 Rik Farenhorst ( VU ) and Remco de Boer ( VU ) . Archi - tectural Knowledge Management : Supporting Architects andAuditors 2009 - 33 KhietTruong ( UT ) . HowDoesRealAffectAffectAffect RecognitionInSpeech ? 2009 - 34 Inge van de Weerd ( UU ) . Advancing in Software Prod - uct Management : An Incremental Method Engineering Approach 2009 - 35 Wouter Koelewijn ( UL ) . Privacy en Politiegegevens ; Over geautomatiseerde normatieve informatie - uitwisseling 2009 - 36 Marco Kalz ( OU ) . Placement Support for Learners in LearningNetworks 2009 - 37 Hendrik Drachsler ( OU ) . Navigation Support for Learn - ersinInformalLearningNetworks 2009 - 38 Riina Vuorikari ( OU ) . Tags and self - organisation : a metadataecologyforlearningresourcesinamultilingualcontext 2009 - 39 ChristianStahl ( TUE , Humboldt - UniversitaetzuBerlin ) . Service Substitution – A Behavioral Approach Based on PetriNets 2009 - 40 Stephan Raaijmakers ( UvT ) . Multinomial Language Learning : InvestigationsintotheGeometryofLanguage 2009 - 41 IgorBerezhnyy ( UvT ) . DigitalAnalysisofPaintings 2009 - 42 Toine Bogers ( UvT ) . Recommender Systems for Social Bookmarking 2009 - 43 VirginiaNunesLealFranqueira ( UT ) . FindingMulti - step Attacks in Computer Networks using Heuristic Search andMobileAmbients 2009 - 44 Roberto Santana Tapia ( UT ) . Assessing Business - IT AlignmentinNetworkedOrganizations 2009 - 45 JillesVreeken ( UU ) . MakingPatternMiningUseful 2009 - 46 Loredana Afanasiev ( UvA ) . Querying XML : Bench - marksandRecursion 2010 2010 - 01 MatthijsvanLeeuwen ( UU ) . PatternsthatMatter 2010 - 02 IngoWassink ( UT ) . WorkﬂowsinLifeScience 2010 - 03 JoostGeurts ( CWI ) . ADocumentEngineeringModeland ProcessingFrameworkforMultimediadocuments 2010 - 04 Olga Kulyk ( UT ) . Do You Know What I Know ? Situ - ational Awareness of Co - located Teams in Multidisplay Environments 2010 - 05 Claudia Hauff ( UT ) . Predicting the Effectiveness of QueriesandRetrievalSystems 2010 - 06 Sander Bakkes ( UvT ) . Rapid Adaptation of Video Game AI 2010 - 07 WimFikkert ( UT ) . AGestureinteractionataDistance 2010 - 08 Krzysztof Siewicz ( UL ) . Towards an Improved Regula - tory Framework of Free Software . Protecting user free - doms in a world of software communities and eGovern - ments 2010 - 09 HugoKielman ( UL ) . PolitilegegevensverwerkingenPri - vacy , Naareeneffectievewaarborging 2010 - 10 Rebecca Ong ( UL ) . Mobile Communication and Protec - tionofChildren 2010 - 11 Adriaan Ter Mors ( TUD ) . The world according to MARP : Multi - AgentRoutePlanning 2010 - 12 Susan van den Braak ( UU ) . Sensemaking software for crimeanalysis 2010 - 13 GianluigiFolino ( RUN ) . HighPerformanceDataMining usingBio - inspiredtechniques 2010 - 14 Sander van Splunter ( VU ) . Automated Web Service Re - conﬁguration 2010 - 15 Lianne Bodenstaff ( UT ) . Managing Dependency Rela - tionsinInter - OrganizationalModels 2010 - 16 Sicco Verwer ( TUD ) . Efﬁcient Identiﬁcation of Timed Automata , theoryandpractice 2010 - 17 SpyrosKotoulas ( VU ) . ScalableDiscoveryofNetworked Resources : Algorithms , Infrastructure , Applications 2010 - 18 Charlotte Gerritsen ( VU ) . Caught in the Act : Investigat - ingCrimebyAgent - BasedSimulation 2010 - 19 Henriette Cramer ( UvA ) People’s Responses to Au - tonomousandAdaptiveSystems 2010 - 20 Ivo Swartjes ( UT ) Whose Story Is It Anyway ? How Im - prove Informs Agency and Authorship of Emergent Nar - rative 2010 - 21 HaroldvanHeerde ( UT ) Privacy - awaredatamanagement bymeansofdatadegradation 2010 - 22 Michiel Hildebrand ( CWI ) End - user Support for Access toHeterogeneousLinkedData 2010 - 23 BasSteunebrink ( UU ) TheLogicalStructureofEmotions 2010 - 24 Dmytro Tykhonov Designing Generic and Efﬁcient Ne - gotiationStrategies 2010 - 25 Zulﬁqar Ali Memon ( VU ) Modelling Human - Awareness forAmbientAgents : AHumanMindreadingPerspective 2010 - 26 Ying Zhang ( CWI ) XRPC : Efﬁcient Distributed Query ProcessingonHeterogeneousXQueryEngines 2010 - 27 MartenVoulon ( UL ) Automatischcontracteren 2010 - 28 ArneKoopman ( UU ) CharacteristicRelationalPatterns 2010 - 29 StratosIdreos ( CWI ) DatabaseCracking : TowardsAuto - tuningDatabaseKernels 2010 - 30 MariekevanErp ( UvT ) AccessingNaturalHistory - Dis - coveriesindatacleaning , structuring , andretrieval 2010 - 31 Victor de Boer ( UVA ) Ontology Enrichment from Het - erogeneousSourcesontheWeb 2010 - 32 MarcelHiel ( UvT ) An AdaptiveService OrientedArchi - tecture : AutomaticallysolvingInteroperabilityProblems 2010 - 33 RobinAly ( UT ) ModelingRepresentationUncertaintyin Concept - BasedMultimediaRetrieval 2010 - 34 Teduh Dirgahayu ( UT ) Interaction Design in Service Compositions 2010 - 35 Dolf Trieschnigg ( UT ) Proof of Concept : Concept - based BiomedicalInformationRetrieval 2010 - 36 JoseJanssen ( OU ) PavingtheWayforLifelongLearning ; Facilitating competence development through a learning pathspeciﬁcation 2010 - 37 Niels Lohmann ( TUE ) Correctness of services and their composition 2010 - 38 DirkFahland ( TUE ) FromScenariostocomponents 2010 - 39 GhazanfarFarooqSiddiqui ( VU ) Integrativemodelingof emotionsinvirtualagents 2010 - 40 Mark van Assem ( VU ) Converting and Integrating Vo - cabulariesfortheSemanticWeb 2010 - 41 GuillaumeChaslot ( UM ) Monte - CarloTreeSearch