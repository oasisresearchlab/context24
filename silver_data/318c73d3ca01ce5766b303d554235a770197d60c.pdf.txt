Physica A 416 ( 2014 ) 309 – 320 Contents lists available at ScienceDirect Physica A journal homepage : www . elsevier . com / locate / physa CombiMotif : A new algorithm for network motifs discovery in protein – protein interaction networks Jiawei Luo ∗ , Guanghui Li , Dan Song , Cheng Liang College of Information Science and Engineering , Hunan University , Changsha , China h i g h l i g h t s • A new method for counting k - subtrees based on combinatorial techniques is proposed . • A new method for listing k - subtrees based on revolving door ordering is proposed . • Experimental results show the proposed method is effective to count k - subtrees . • We show major differences between unicellular and multicellular organisms . a r t i c l e i n f o Article history : Received 14 March 2014 Received in revised form 17 June 2014 Available online 6 September 2014 Keywords : Protein – protein interaction networks Network motif Non - induced subgraphs Subgraph isomorphism Combinatorial techniques a b s t r a c t Discovering motifs in protein – protein interaction networks is becoming a current major challenge in computational biology , since the distribution of the number of network motifs can reveal significant systemic differences among species . However , this task can be computationally expensive because of the involvement of graph isomorphic detection . In this paper , we present a new algorithm ( CombiMotif ) that incorporates combinatorial techniques to count non - induced occurrences of subgraph topologies in the form of trees . The efficiency of our algorithm is demonstrated by comparing the obtained results with the current state - of - the art subgraph counting algorithms . We also show major differences between unicellular and multicellular organisms . The datasets and source code of CombiMotif are freely available upon request . © 2014 Elsevier B . V . All rights reserved . 1 . Introduction Protein – protein interaction ( PPI ) networks of many species have been shown to share similar global topological features , such as small - world effect [ 1 , 2 ] , power - law degree distribution [ 3 – 5 ] , and large clustering coefficient [ 6 ] . However , some of these networks can have significant differences in terms of local structures ; for instance , the number of specific subgraphs can vary significantly among PPI networks . Thus , counting the number of subgraphs is a major challenge to comparisons of PPI networks . The problem of enumerating or counting the number of occurrences of a certain subgraph within a large graph is widely used in many applications . In biological networks , subgraph counting is used to detect motifs [ 7 ] , which occur more frequently in a particular network than expected in similar random networks . These patterns serve as the basic building blocks of networks . Network motifs have a range of applications : classifying networks into different superfamilies [ 8 ] , detecting essential proteins in a PPI network [ 9 ] , and predicting protein – protein interactions [ 10 ] are just some cases . Therefore , developing an effective algorithm for finding motifs is an important step for further studies . ∗ Correspondence to : College of Information Science and Engineering , Hunan University , Changsha , 410082 , China . Tel . : + 86 0731 88821971 . E - mail address : luojiawei @ hnu . edu . cn ( J . Luo ) . http : / / dx . doi . org / 10 . 1016 / j . physa . 2014 . 08 . 062 0378 - 4371 / © 2014 Elsevier B . V . All rights reserved . 310 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 The discovery of network motifs typically consists of two steps : counting the number of occurrences of a subgraph in the network and determining the statistical significances of this subgraph . Considerable work has already been conducted on the first step . Current methods for counting subgraph occurrences follow two very different approaches . In the first one , enumerating all subgraphs of a specific size and then determining the non - isomorphic classes of these subgraphs , such as FMNMOD [ 11 ] , NeMoFinder [ 12 ] and Kavosh [ 13 ] . The drawback is that they need to perform large number of isomorphism detection , mostly using the NAUTY [ 14 ] tool . To eliminate or decrease the number of executions of NAUTY , researchers recently devised some novel algorithms , such as SCMD [ 15 ] , NetMODE [ 16 ] , and QuateXelero [ 17 ] . In the second approach , all different non - isomorphic classes of a specific size are generated , and then the individual frequency of each class is separately calculated . Grochow – Kellis [ 18 ] and MODA [ 19 ] belong to the latter method . Relative to Grochow – Kellis and MODA , G - Tries [ 20 ] , which implements the g - trie data structure to represent collections of subgraphs , has been proposed to improve the efficiency of subgraph mapping . A recently introduced algorithm that could compute the number of isomorphic patterns by using combinatorial techniques and does not require checking isomorphism is Acc - Motif [ 21 ] . However , instead of establishing a generalized algorithm , the Acc - motif tool deals with different - sized motifs separately . Currently , Acc - Motif could only find motifs sized 3 , 4 , and 5 . Furthermore , some isomorphic patterns are considered repeatedly . Note that network motifs are not necessarily induced . Most algorithms , such as SCMD , NetMODE , QuateXelero , and Acc - Motif , rely on induced subgraphs as motifs of the network . However , Grochow – Kellis , MODA , and G - Tries could extract both induced and non - induced subgraphs simultaneously ( see Section 2 for definitions ) . In this paper , we will focus on counting non - induced occurrences of network motifs . Counting non - induced occurrences of network motifs is quite desirable because available PPI networks may include missing and spurious interactions . Thus , a specific network motif occurrence in one network may include additional edges in its occurrence in another network , and vice versa . And the definition of non - induced subgraph considers all of the possible occurrences of the motif of interest within a network . Therefore , this way of counting non - induced occurrences is more robust to the fact that there might miss edges in the motif . Another approach for subgraph counting is based on the color coding technique . By applying this technique , Alon et al . [ 22 ] proposed a randomized approximation algorithm ( Color - coding ) for counting non - induced trees and bounded treewidth subgraphs . Zhao et al . [ 23 ] designed a parallel color coding - based subgraph enumeration method called PARSE that targets distributed - memory platforms . More recently , Slota et al . [ 24 ] introduced FASCIA , multilevel shared - memory parallelization of the color coding technique for approximate subgraph counting . However , these approaches belong to approximate subgraph counting and subgraph enumeration . In this work , enlightened by Acc - Motif , we present a fast exact algorithm for counting non - induced trees called CombiMotif . Our algorithm makes use of combinatorial techniques to count the number of isomorphic patterns instead of listing non - induced subgraphs . In fact , CombiMotif does not need to perform any isomorphic detection . We evaluate our algorithm on three different biological PPI networks , namely , the protein interaction networks of core Saccharomyces cerevisiae , full Caenorhabditis elegans , and full Helicobacter pylori from the DIP database ( 2013 . 10 . 31 updated ) [ 25 ] , as well as one non - biological networks , that is , an electronic network [ 26 ] . The obtained results of our algorithm are compared with three well - known motif finding tools : G - Tries , MODA , and Color - coding . By this comparison , we show the efficiency of our algorithm . Also , we show major differences between unicellular and multicellular organisms . The rest of the paper is organized as follows . In Section 2 , we describe the main algorithms of our work and analyze the complexity of our algorithm . In Section 3 , we present the computational results , in comparison to other existing methods , and compare the distribution of subgraphs of the PPI network of four species . Finally , we conclude the paper and suggest some future work in Section 4 . 2 . CombiMotif 2 . 1 . Preliminaries In this paper , G = ( V , E ) indicates an undirected graph , where V is a finite set of vertices , | V | = n is the graph size , and E is the edge set of the graph that satisfies E ⊆ V × V . Let m be the number of edges in E . For each vertex v ∈ V , let N ( v ) be the set of all vertices adjacent to v . G − v stands for the graph arising from G deleting the vertex v and all edges having v as an endpoint . Let us call a vertex of degree 1 in a graph G an end - vertex of G . The maximum degree of a graph , denoted by D , is the maximal number of edges per vertex in the graph . Note that an induced subgraph of a network G is a subset of the vertices of G along with any edges , the endpoints of which are both in this subset . If a subgraph G ′ of G is not an induced subgraph ( i . e . , it does not include all edges in G that are present between node pairs in G ′ ) , then it is called a non - induced subgraph of G [ 27 ] . Therefore , induced subgraph is determined by the vertices that are selected , while non - induced subgraph is determined by the edges that are selected . For example , in a triangle , only one induced occurrence of pattern ‘‘ ∇ ’’ and no occurrence of pattern ‘‘ ∨ ’’ exists . While three non - induced occurrences of pattern ‘‘ ∨ ’’ and one occurrence of pattern ‘‘ ∇ ’’ exist . In fact , using linear combinations [ 28 ] facilitates switching between both ways of counting . We define a tree T that is a connected graph containing no cycle . It is unrooted and its vertices are unlabeled . A tree T ( V T , E T ) is said to be isomorphic to a subtree T ′ = ( V ′ , E ′ ) in a graph G if there is a bijection f : V T → V ′ such that if J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 311 Fig . 1 . An example of non - induced occurrences of tree T with 3 vertices in graph G . ( a ) Graph G . ( b ) Tree T . ( c ) 1 non - induced occurrences of tree T in graph G with center a . ( d ) 3 non - induced occurrences of tree T in graph G with center b . ( e ) 1 non - induced occurrences of tree T in graph G center c . ( f ) 1 non - induced occurrences of tree T in graph G with center d . ( g ) 3 non - induced occurrences of tree T in graph G with center e . Fig . 2 . An example of combinatorial optimization techniques . ( a ) Star graph G s . ( b ) Isomorphic pattern frequencies . Table 1 Number of unlabeled tree topologies . k 3 4 5 6 7 8 Trees 1 2 3 6 11 23 ( u , v ) ∈ E T then ( f ( u ) , f ( v ) ) ∈ E ′ . Such a tree T ′ is said to be a non - induced occurrence of T in G . As shown in Fig . 1 , there are totally 9 non - induced occurrences of T with 3 vertices in graph G . Note that there are overlaps between the trees we count , i . e . two occurrences of T , namely T ′ and T ′′ may share vertices ; actually , the vertex sets of T ′ and T ′′ may be same . We regard T ′ and T ′′ as different occurrences of T provided that the edge sets of T ′ and T ′′ are not same . Given a graph G with n vertices and a tree T with k vertices , we consider the problem of counting the number of non - induced subtrees of G that are isomorphic to T . In what follows , we describe how to apply combinatorial techniques to count the number of non - induced occurrences of each possible tree topology T with k vertices in a graph G with n vertices . 2 . 2 . Counting subgraphs We begin with the following almost obvious observation : Lemma 1 ( End - vertex Lemma ) . Each tree with at least 2 vertices contains at least 2 end - vertices . Lemma 2 ( Tree - growing Lemma ) . The following two statements are equivalent for a graph G and its end - vertex v : ( 1 ) G is a tree ; ( 2 ) G − v is a tree . The proofs of these two lemmas are sketched in Ref . [ 29 ] . Let A = { v | v is an end - vertex of T } be the set of end - vertices of tree T with k ≥ 3 vertices , then t = T − A is a subtree of T . Provided that we have listed all the non - induced occurrences of subtree t in a graph G , denoted as isomorphSets ( t ) , thus , given the graph G , for each subtree t ′ ∈ isomorphSets ( t ) , it is possible to obtain the frequencies of non - induced occurrences of tree T in the graph G that center on subtree t ′ and expand it using combinatorial techniques . To illustrate the combinatorial optimization techniques used in this article , we consider a star graph G s ( V s , E s ) and the tree T with 3 vertices , as shown in Fig . 2 . The tree T with 3 vertices is represented as isomorphic pattern ‘‘ o – o – o ’’ . We define n v as the size | N ( v ) | . Fig . 2 provides insight into how the proposed algorithm works . In a simple example , the number of isomorphic pattern ‘‘ o – o – o ’’ can be computed without explicit listing all instances . Thus , given a graph G ( V , E ) , for each vertex v ∈ V , there are exactly C ( n v , 2 ) [ C ( n v , 2 ) denotes the number of different combinations of two elements through n v elements ] non - induced occurrences of pattern ‘‘ o – o – o ’’ that center on vertex v . Table 1 shows the number of unlabeled tree topologies for different values of k ≤ 8 . Notably , different tree topologies T may have the same subtree t . In other words , given a subtree t ′ ∈ isomorphSets ( t ) , we could compute the number of non - induced occurrences of multiple different tree topologies T in a graph G that center on subtree t ′ and expand it using different combinatorial operation . Thus , according to different subtrees t , we divide all the possible tree topologies T with k ≤ 8 vertices into different groups . Thus , we could compute for the number of non - induced occurrences of each group tree simultaneously and decrease the repeated search for the non - induced occurrences of subtree t . 312 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 Fig . 3 . Thegroupingofthepatternofsubtree t . ( a ) showsthepatternofsubtree t : o . ( b ) showsthepatternofsubtree t : o – o . ( c ) showsthepatternofsubtree t : o – o – o . ( d ) shows the pattern of subtree t : o – o – o – o . ( e ) shows the pattern of subtree t : o – o – o – o – o . ( f ) shows the pattern of subtree t : o – o – o – o – o – o . ( g ) shows the pattern of subtree t : the star tree with a center and 3 end - vertices . ( h ) shows the pattern of subtree t : the path tree with 3 vertices together with 2 end - vertices . According to the above grouping , Fig . 3 depicts the chosen subtrees of all tree topologies for k = 3 , 4 , 5 , 6 , 7 , 8 . For each tree , the subtree t is composed of white vertices with the edges between them . Black vertices indicate the end - vertices . Below we show the combinatorial formulas for computing the number of non - induced occurrences of each tree T with k ≤ 8 vertices in a graph G . If T is a star tree with k vertices , given a graph G ( V , E ) , for each vertex v ∈ V , there are exactly C ( n v , k − 1 ) non - induced occurrences of tree T that center on vertex v . If T is not a star tree , given a graph G ( V , E ) , for each subtree t ′ ∈ isomorphSets ( t ) , to obtain the frequencies of non - induced occurrences of tree T in the graph G that center on subtree t ′ , the neighbors of subtree t ′ in graph G need to be combined . In fact at least two vertices in the subtree t ′ have to combine its neighbors step by step , and the common neighbors cannot be selected simultaneously . Table 2 shows the combinatorial formulas of each vertex combination pattern that exists in counting the number of non - induced occurrences of each tree T with k ≤ 8 vertices . In the column of vertex combination pattern , the white vertices with the edges between them represent a subtree t ′ , while the black vertices represent its neighbors needing to be combined . And keep in mind that when combining the neighbors of subtree t ′ , we need to consider its symmetries . Here we only give a case for each vertex combination pattern in Table 2 . J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 313 Table 2 Combinatorial formulas of each vertex combination pattern . Vertex combination pattern Vertex selection mode Frequency 1 2 1 – 1 N 1 N 2 − N 12 1 2 1 – 2 N 1 C ( N 2 , 2 ) − N 12 ( N 2 − 1 ) 1 2 1 – 3 N 1 C ( N 2 , 3 ) − N 12 C ( N 2 − 1 , 2 ) 1 2 2 – 2 C ( N 1 , 2 ) C ( N 2 , 2 ) − N 12 ( N 1 − 1 ) ( N 2 − 1 ) + C ( N 12 , 2 ) 1 2 2 – 3 C ( N 1 , 2 ) C ( N 2 , 3 ) − N 12 ( N 1 − 1 ) C ( N 2 − 1 , 2 ) + C ( N 12 , 2 ) ( N 2 − 2 ) 1 2 2 – 4 C ( N 1 , 2 ) C ( N 2 , 4 ) − N 12 ( N 1 − 1 ) C ( N 2 − 1 , 3 ) + C ( N 12 , 2 ) C ( N 2 − 2 , 2 ) 1 2 3 – 3 C ( N 1 , 3 ) C ( N 2 , 3 ) − N 12 C ( N 1 − 1 , 2 ) C ( N 2 − 1 , 2 ) + C ( N 12 , 2 ) ( N 1 − 2 ) ( N 2 − 2 ) − C ( N 12 , 3 ) 2 1 3 1 – 1 – 1 N 1 N 2 N 3 − N 12 N 3 − N 13 N 2 − N 23 N 1 + 2 N 123 2 1 3 1 – 1 – 2 C ( N 1 , 2 ) N 2 N 3 − C ( N 1 , 2 ) N 23 − N 2 N 13 ( N 1 − 1 ) − N 3 N 12 ( N 1 − 1 ) + 2 N 123 ( N 1 − 1 ) + N 12 N 13 − N 123 2 1 3 1 – 1 – 3 C ( N 1 , 3 ) N 2 N 3 − C ( N 1 , 3 ) N 23 − N 2 N 13 C ( N 1 − 1 , 2 ) − N 3 N 12 C ( N 1 − 1 , 2 ) + 2 N 123 C ( N 1 − 1 , 2 ) + N 12 N 13 ( N 1 − 2 ) − N 123 ( N 1 − 2 ) 2 1 3 1 – 2 – 2 N 1 C ( N 2 , 2 ) C ( N 3 , 2 ) − N 12 ( N 2 − 1 ) C ( N 3 , 2 ) − N 13 ( N 3 − 1 ) C ( N 2 , 2 ) − N 23 ( N 2 − 1 ) ( N 3 − 1 ) N 1 + 2 N 123 ( N 2 − 1 ) ( N 3 − 1 ) + N 23 N 13 ( N 2 − 1 ) + N 12 N 23 ( N 3 − 1 ) + C ( N 23 , 2 ) N 1 − 2 N 23 N 123 − N 123 ( N 2 − 1 ) − N 123 ( N 3 − 1 ) + 2 N 123 3 1 2 4 1 – 1 – 1 – 1 N 1 N 2 N 3 N 4 − N 12 N 3 N 4 − N 13 N 2 N 4 − N 14 N 2 N 3 − N 23 N 1 N 4 − N 24 N 1 N 3 − N 34 N 1 N 2 + 2 N 123 N 4 + 2 N 124 N 3 + 2 N 134 N 2 + 2 N 234 N 1 + N 12 N 34 + N 13 N 24 + N 14 N 23 − 6 N 1234 Note : 1 – 1 , there are two vertices selecting a neighbor respectively for combination . The meaning for other vertex selection mode is similar . N i represents the number of vertices adjacent to i excludes the white vertices . N ij represents the number of common neighbors between i and j excludes the white vertices . The algorithm for counting isomorphic patterns is derived from the following theorem : Theorem 1 . Let G ( V , E ) be a general undirected graph . Pattern occurrences in each vertex combination pattern , for any non - induced subtree t ′ , is given by Table 2 . Proof . This theorem is proven through induction . Let G ′ be the graph G non - induced by t ′ ∪ N ( t ′ ) . The basic case is that any vertex in N ( t ′ ) must be adjacent to only one vertex in t ′ . In this case , pattern occurrences in Table 2 correspond to such vertex if all N ij , N ijk , and N ijkl variables are zero , where i , j , k , and l ∈ { 1 , 2 , 3 , 4 } . If there are common neighbors between any two vertices i and j in subtree t ′ , then combinations that select one common neighbor between i and j must be removed . We then consider two cases . On one hand , if the number of neighbors that have to be combined respectively in i and j is more than one , then combinations that select two or more common neighbors between i and j are considered . Note that combinations that select one common neighbor between i and j have considered combinations that select two or more common neighbors many times . Concretely , combinations that select p ≥ 1 common neighbors between i and j have been included C ( p , 1 ) times in the combinations that select one common neighbor . Similarly , 314 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 combinations that select p ≥ 2 common neighbors between i and j have been included C ( p , 2 ) times in the combinations that select two common neighbors , and so on . Therefore , we need to count the times of combinations that select two or more common neighbors between i and j . As an example of mode ‘‘3 – 3’’ , the number of combinations that select one common neighbor between vertices 1 and 2 is N 12 C ( N 1 − 1 , 2 ) C ( N 2 − 1 , 2 ) . This number includes combinations that select two common neighbors twice and includes combinations that select three common neighbors thrice . Hence , we add combinationsthatselecttwocommonneighborsonce , whichalsoincludecombinationsthatselectthreecommonneighbors thrice . Finally , we remove combinations that select three common neighbors once . On the other hand , if any other vertex in subtree t ′ aside from the vertices i and j needs to combine its neighbors , then combinations that select common neighbors among three or more vertices in subtree t ′ are considered . Similarly , combinations that select one common neighbor among three or more vertices in subtree t ′ have been included once in combinations that select one common neighbor between any two vertices . In addition , other combinations that select common neighbors among the vertices of subtree t ′ may exist . Similarly , we can count the times of these combinations according to these principles . For an example of mode ‘‘1 – 1 – 1’’ , combinations that select one common neighbor between two vertices in subtree t ′ can be generated in three ways , which also includes combinations that select one common neighbor thrice among the three vertices 1 , 2 , and 3 . Hence , we add the combinations that select one common neighbor twice among the three vertices 1 , 2 , and 3 . Thus , the frequency of each vertex combination pattern is presented in Table 2 . Consequently , as long as all the non - induced occurrences of subtree t in graph G are known , we can count the number of non - induced occurrences of tree T by using a specific combinatorial formula in each non - induced occurrence of subtree t . Algorithm 1 shows how to count the number of non - induced occurrences of tree T in a graph G . In fact , the algorithm does not perform any isomorphic detection . The algorithm creates an integer variable num _ T and initializes it with zero . The corresponding frequency of Table 2 is directly incremented in num _ T . The algorithm might initially seem similar to Acc - Motif [ 21 ] , but substantial differences can be found between them . Although both CombiMotif and Acc - Motif use combinatorial techniques , the way of computing the number of isomorphism patterns is completely different for the two algorithms . First , the two algorithms use different subpatterns . Subpatterns are obtained through removing two specified vertices from the counting patterns in Acc - Motif . However , subpatterns are obtained through removing end - vertices from the counting patterns in CombiMotif . Second , some patterns are repeatedly considered and require small correction in Acc - Motif . For example , we consider the star tree T with a center and three end - vertices , denoted as S 3 . The subpattern of S 3 is the center vertex in CombiMotif , while each of the three edges of S 3 can be considered as the subpattern in Acc - Motif . Thus , patterns related to S 3 is each considered thrice in Acc - Motif . Therefore , a simple correction must be applied . 2 . 3 . Listing all non - induced occurrences of subtree t Below we describe how to list all the non - induced occurrences of subtree t in a graph G . If the size of subtree t is less than or equal to 2 , i . e . subtree t is a vertex or an edge , then all the non - induced occurrences of subtree t are the vertices or edges of graph G . Therefore , we consider the situation that the size of subtree t is greater than 2 . Let B = { v | v is an end - vertex of t } be the set of end - vertices of subtree t , then h = t − B is a subtree of t . Provided that we have listed all the non - induced occurrences of subtree h in graph G , denoted as isomorphSets ( h ) , thus , given the graph G , for each subtree h ′ ∈ isomorphSets ( h ) , the non - induced occurrences of subtree t in the graph G that center on subtree h ′ can be generated based on its neighbors addition . Similarly , if subtree t is a star tree , then h ′ is a vertex of G . For each vertex v ∈ V , to list the non - induced occurrences of subtree t in the graph G that center on vertex v , | t | − 1 neighbors of vertex v in graph G have to be combined . If subtree t is not a star tree , there are at least two vertices in the subtree h ′ needing to combine its neighbors step by step , and the common neighbors cannot be selected simultaneously . It is possible that the number of the aforesaid neighbors is more than the number of needing to be combined . Scilicet , a different selection of neighbors has to be considered . In this work , all combinations of vertices are selected by using the ‘‘revolving door ordering’’ algorithm [ 30 ] . The ‘‘revolving door ordering’’ algorithm is a special type of minimal change ordering in which two consecutive objects have a distance of 2 . In practice , the ‘‘revolving door ordering’’ algorithm is considered the fastest algorithm for generating J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 315 combinations of vertices . We also need to consider subtree h ′ symmetries . To conclude , after each subtree h ′ is processed , all the non - induced occurrences of subtree t in graph G can be listed . And we can list all the non - induced occurrences of subtree h in graph G in the same manner . To illustrate the combinatorial operation of vertices used in this paper , we now explain how to list all non - induced occurrences of the size - 3 tree in graph G . Given the graph G ( V , E ) , for each vertex v ∈ V , we select two vertices from N ( v ) to be vertices of size - 3 trees . Thus , each vertex v has C ( N ( v ) , 2 ) different selections of vertices that need to be considered . The pseudocode for listing all non - induced occurrences of the size - 3 tree is shown in Algorithm 2 . Actually , the algorithm also does not perform any isomorphic detection . The Initial _ Comb and Next _ Comb functions use the ‘‘revolving door ordering’’ algorithm as described earlier for vertex combination selections at N ( v ) . 2 . 4 . Complexity analysis of CombiMotif Given all of the non - induced occurrences of subtree t in graph G , the number of isomorphic patterns of tree T can be computed in constant time O ( 1 ) , as we have precomputed the auxiliary variables of Table 2 . Thus , the total running time of counting the number of isomorphic patterns of tree T is proportional to listing all non - induced occurrences of subtree t . We initially analyze the complexity of listing size - 3 tree . The worst complexity of the Initial _ Comb ( VL , k ) function is O ( | VL | k 2 ) for selecting any k vertices from VL . Consequently , the worst complexity of listing size - 3 tree is O ( nC ( D , 2 ) D 2 2 ) ≈ O ( nD 3 ) from a graph G of size n , where D is the highest degree of G . Generally , for any subtree t of T with k vertices , the subtree t has at most k − 2 vertices . Thus , the subtree h of subtree t has at most k − 4 vertices . The total number of connected i - subgraphs in graphs that contain a hub is dominated by the hub degree ( D ) and is approximately D i − 1 [ 31 ] . Meanwhile , we also assume that selecting the remaining two neighbors requires two steps , as the ‘‘revolving door ordering’’ algorithm will also be called in each step and will increase the time overhead . Consequently , the worst complexity of counting the isomorphic patterns of tree T with k vertices is O ( D k − 5 C ( D , 1 ) C ( D , 1 ) DD ) ≈ O ( D k − 1 ) . The total number of subgraph scales as D i − 1 , and D is typically satisfied ∆ ≤ D ≤ n , where ∆ is the mean degree of G . Therefore , D scales with n . The runtime complexities of the CombiMotif algorithm increases polynomially with the graph size as n k − 1 . 3 . Experimental results We use four network instances that are both biological and non - biological to test the performance of our algorithm . The protein interaction networks of core Saccharomyces cerevisiae ( S . cere . CR ) , full Caenorhabditis elegans ( C . eleg ) , and full Helicobacter pylori ( H . pylo ) , and an electronic network are targeted . Self - loops and repeated edges are removed from all networks . The features of these networks are given in Table 3 . All tests are performed on an Intel Xeon X5670 2 . 93 GHz 12 MB Cache 1333 MHz with 48 GB main memory running under Ubuntu 12 . 04 ( amd64 ) operating system . Source codes were compiled with C + + . 3 . 1 . Runtime comparison between CombiMotif and other algorithms In this section , we provide a thorough comparison of CombiMotif with other competing algorithms ( i . e . , G - Tries , MODA and Color - coding ) designed to count non - induced occurrences of network motifs . 316 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 Table 3 Experimental datasets . Network No . of vertices No . of edges Average degree Maximum degree Source S . cere . CR 2326 4806 4 . 132 59 [ 25 ] C . eleg 2675 4013 3 . 000 187 [ 25 ] H . pylo 706 1362 3 . 858 54 [ 25 ] Electronic 252 399 3 . 159 14 [ 26 ] 3 . 1 . 1 . Comparison with G - Tries G - Tries is the best amongst existing network motif finders and is thus selected for comparison with CombiMotif . G - Tries is superior in terms of speed . To compare with G - Tries , we download and modify the source code of G - Tries to enable the discovery non - induced occurrences of subgraphs . The results are illustrated in Table 4 . While CombiMotif is very faster than G - Tries , the level of superiority depends on the network size and structure , the number of subgraphs , and the size of subtree t . More precisely , a smaller size of subtree t makes the performance CombiMotif more superior . For example , the running time of CombiMotif is nearly zero when the pattern of the subtree t is a single vertex , but accounts for more than a quarter of the total running time when the pattern of the subtree t is the path graph with six vertices . We noted that our algorithm is more than 70x faster than G - Tries in the C . eleg network . However , our algorithm is only several times faster than the other two biological networks because the number of subgraphs ( excluding the star subgraphs in C . eleg ) is greater than the other two networks . Therefore , CombiMotif scales better than G - Tries . 3 . 1 . 2 . Comparison with MODA To compare CombiMotif with MODA , we count non - induced occurrences of subgraphs in the electronic network . The results are presented in Table 5 . We see that CombiMotif can attain substantial speedups vs . MODA . 3 . 1 . 3 . Comparison with Color - coding We do not directly compare our algorithm with Color - coding because the source code of Color - coding has not been released . However , we observed from the experimental results [ 22 ] that counting all tree topologies in the core yeast PPI network for k = 8 requires 14 min . According to Table 4 , execution time of CombiMotif for all possible k ≤ 8 vertex subtrees is less than 8 min . We further compare CombiMotif with FASCIA . Slota et al . [ 24 ] reported the execution time for all possible seven vertex subtrees on the electrical network to be approximately 22 s . According to Table 5 , execution time of CombiMotif for all possible k ≤ 8 vertex subtrees within same network is under 1 s . 3 . 2 . Comparison of PPI networks We download the PPI networks of four species , which consist of three unicellular organisms ( Saccharomyces cerevisiae , Escherichia coli , and Helicobacter pylori ) and a multicellular organism ( Caenorhabditis elegans ) from the DIP database ( 2013 . 10 . 31 updated ) . We calculate numerous topological statistics in these four networks by using Cytoscape [ 32 ] , the details of which are summarized in Table 6 . All networks display small - world and scale - free properties . However , the clustering coefficient of all networks is exceptionally small because the PPI networks of these species are far from complete . Weusetheproposedalgorithmtoobtainnormalizedtreeletdistributions , thatis , thenumberofnon - inducedoccurrences of different tree topologies of size k = 6 , 7 , 8 normalized by the total of all non - induced trees of size 6 , 7 , 8 for each PPI network . The corresponding treelet distributions are displayed in Fig . 4 . Obvious differences exist between the unicellular organisms and C . eleg ans , the multicellular model organism under consideration . Notably , the PPI network of yeast appears to be more similar to that of E . coli compared with the H . pylori PPI network . 4 . Conclusions and future work In this paper , we demonstrated the use of combinatorial techniques and the idea of reusable computation to calculate the number of non - induced occurrences of trees with k ≤ 8 vertices in time polynomial with n . The comparison with the well - known existing methods showed that CombiMotif is superior in terms of processing time . In particular , the advantage in using CombiMotif is overwhelming with small subtree t size . Moreover , we use the proposed algorithm to obtain treelet distributions for k ≤ 8 of the PPI networks and confirm previously reported differences between unicellular and multicellularorganisms . Forfuturework , weplantoextendCombiMotiftodiscoverlargermotifsaslongasthecombinatorial formulas of each new vertex combination pattern can be shown . We also intend to apply CombiMotif to deal with directed graphs . Meanwhile , we will try to propose a feasible fine - grained parallelism for CombiMotif , thus allowing for its optimized and large - scale use . J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 317 Table 4 Experimental results for CombiMotif vs . G - Tries . Algorithm Network The pattern of subtree t Classes Subgraphs Processing times CombiMotif S . cere . CR o 6 18 , 446 , 744 , 073 , 774 , 186 , 691 0 . 00 CombiMotif S . cere . CR o – o 9 5 , 160 , 508 , 293 0 . 25 CombiMotif S . cere . CR o – o – o 13 20 , 468 , 265 , 322 7 . 59 CombiMotif S . cere . CR o – o – o – o 9 25 , 726 , 058 , 159 59 . 78 CombiMotif S . cere . CR o – o – o – o – o 4 12 , 128 , 433 , 498 161 . 54 CombiMotif S . cere . CR o – o – o – o – o – o 1 1 , 862 , 568 , 269 142 . 51 CombiMotif S . cere . CR 3 4 , 095 , 054 , 649 15 . 39 CombiMotif S . cere . CR 1 2 , 742 , 807 , 191 64 . 61 Total run time 451 . 67 Algorithm Network Size Classes Subgraphs Processing times G - Tries S . cere . CR 3 1 42 , 534 0 . 002 G - Tries S . cere . CR 4 2 580 , 136 0 . 02 G - Tries S . cere . CR 5 3 9 , 493 , 149 0 . 21 G - Tries S . cere . CR 6 6 172 , 550 , 533 3 . 91 G - Tries S . cere . CR 7 11 3 , 369 , 859 , 928 71 . 66 G - Tries S . cere . CR 8 23 18 , 446 , 744 , 142 , 405 , 355 , 792 1588 . 68 Total run time 1664 . 482 CombiMotif vs . G - Tries 3 . 69x Algorithm Network The pattern of subtree t Classes Subgraphs Processing times CombiMotif C . eleg o 6 1 , 900 , 432 , 365 0 . 00 CombiMotif C . eleg o – o 9 209 , 394 , 077 , 970 0 . 29 CombiMotif C . eleg o – o – o 13 2 , 117 , 254 , 121 , 894 22 . 84 CombiMotif C . eleg o – o – o – o 9 1 , 395 , 994 , 498 , 959 219 . 25 CombiMotif C . eleg o – o – o – o – o 4 230 , 623 , 915 , 351 957 . 83 CombiMotif C . eleg o – o – o – o – o – o 1 11 , 902 , 961 , 559 621 . 18 CombiMotif C . eleg 3 121 , 190 , 688 , 066 165 . 94 CombiMotif C . eleg 1 30 , 231 , 244 , 778 429 . 30 Total run time 2416 . 63 Algorithm Network Size Classes Subgraphs Processing Times G - Tries C . eleg 3 1 76 , 233 0 . 002 G - Tries C . eleg 4 2 2 , 714 , 308 0 . 047 G - Tries C . eleg 5 3 114 , 060 , 933 1 . 592 G - Tries C . eleg 6 6 3 , 300 , 720 , 014 73 . 01 G - Tries C . eleg 7 11 127 , 234 , 721 , 753 3396 . 14 G - Tries C . eleg 8 23 3 , 987 , 839 , 647 , 701 168517 . 62 Total run time 171988 . 411 CombiMotif vs . G - Tries 71 . 17x Algorithm Network The pattern of subtree t Classes Subgraphs Processing times CombiMotif H . pylo o 6 400 , 913 , 897 0 . 00 CombiMotif H . pylo o – o 9 2 , 912 , 513 , 258 0 . 08 CombiMotif H . pylo o – o – o 13 10 , 830 , 678 , 654 2 . 35 CombiMotif H . pylo o – o – o – o 9 9 , 829 , 829 , 819 18 . 12 CombiMotif H . pylo o – o – o – o – o 4 3 , 626 , 783 , 545 48 . 19 CombiMotif H . pylo o – o – o – o – o – o 1 400 , 100 , 159 34 . 63 CombiMotif H . pylo 3 1 , 482 , 583 , 037 6 . 10 CombiMotif H . pylo 1 695 , 272 , 588 21 . 12 Total run time 130 . 59 G - Tries H . pylo 3 1 14 , 242 0 . 001 G - Tries H . pylo 4 2 213 , 578 0 . 009 ( continued on next page ) 318 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 Table 4 ( continued ) Algorithm Network The pattern of subtree t Classes Subgraphs Processing times G - Tries H . pylo 5 3 3 , 702 , 479 0 . 082 G - Tries H . pylo 6 6 69 , 607 , 943 1 . 448 G - Tries H . pylo 7 11 1 , 385 , 047 , 806 27 . 53 G - Tries H . pylo 8 23 28 , 720 , 088 , 909 632 . 93 Total run time 662 . 00 CombiMotif vs . G - Tries 5 . 07x Table 5 Experimental results for CombiMotif vs . MODA . Algorithm Network The pattern of subtree t Classes Subgraphs Processing times CombiMotif Electronic o 6 13 , 206 0 . 00 CombiMotif Electronic o – o 9 184 , 270 0 . 02 CombiMotif Electronic o – o – o 13 910 , 983 0 . 08 CombiMotif Electronic o – o – o – o 9 1 , 377 , 479 0 . 21 CombiMotif Electronic o – o – o – o – o 4 840 , 439 0 . 20 CombiMotif Electronic o – o – o – o – o – o 1 171 , 352 0 . 08 CombiMotif Electronic 3 280 , 347 0 . 05 CombiMotif Electronic 1 206 , 691 0 . 08 Total run time 0 . 72 Algorithm Network Size Classes Subgraphs Processing times MODA Electronic 3 1 1 , 161 0 . 047 MODA Electronic 4 2 4 , 625 0 . 249 MODA Electronic 5 3 21 , 627 1 . 115 MODA Electronic 6 6 110 , 370 5 . 884 MODA Electronic 7 11 591 , 201 31 . 669 MODA Electronic 8 23 3 , 255 , 783 148 . 108 Total run time 187 . 072 CombiMotif vs . MODA 259 . 82x Table 6 Topological statistics in the PPI networks we studied . Network No . of vertices No . of edges Averagedegree Clusteringcoefficient Characteristic path length Diameter Power - law distribution N = α k − r α r S . cere 5091 22 , 262 8 . 746 0 . 096 3 . 979 10 3872 . 8 1 . 692 E . coli 2700 11 , 620 8 . 607 0 . 096 4 . 000 12 1025 . 1 1 . 451 H . pylo 706 1 , 362 3 . 858 0 . 016 4 . 141 9 351 . 34 1 . 651 C . eleg 2675 4 , 013 3 . 000 0 . 020 4 . 827 14 593 . 66 1 . 604 On the other hand , protein – protein interaction data obtained from high - throughput experiments has been reported to be highly erroneous , leading to potentially spurious discoveries for motifs . We intend to filter out the incorrect data before finding motifs . It is possible to evaluate the reliability of protein interactions by using computational and mathematical methods including geometric method [ 33 ] , domain - based method [ 34 ] , sequence - based method [ 35 , 36 ] , and structure - based method [ 37 ] . In further research , we will try to apply the penalized matrix decomposition [ 38 ] to biological network to discover larger network motifs . Finally , future research for discovering motifs may include combining traditional algorithms with machine learning methods , which have been used in essential proteins discovery and acquired good results [ 39 ] . Acknowledgments This work is supported by National Natural Science Foundation of China ( Grant No . 61240046 ) and Hunan Provincial Natural Science Foundation of China ( Grant No . 13JJ2017 ) . J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 319 a b c Fig . 4 . Normalized treelet distribution ( a ) size 6 , ( b ) size 7 , ( c ) size 8 and of the Yeast PPI network ( red ) , E . coli ( green ) , H . pylori ( blue ) and C . eleg ( pink ) . ( For interpretation of the references to color in this figure legend , the reader is referred to the web version of this article . ) References [ 1 ] L . A . N . Amaral , A . Scala , M . Barthelemy , H . E . Stanley , Classes of small - world networks , Proc . Natl . Acad . Sci . USA 97 ( 21 ) ( 2000 ) 11149 – 11152 . [ 2 ] D . J . Watts , S . H . Strogatz , Collective dynamics of ‘small world’ networks , Nature 393 ( 6684 ) ( 1998 ) 440 – 442 . [ 3 ] A . L . Barabási , R . Albert , Emergence of scaling in random networks , Science 286 ( 5439 ) ( 1999 ) 509 – 512 . [ 4 ] G . Bebek , P . Berenbrink , C . Cooper , T . Friedetzky , J . Nadeau , S . C . Sahinalp , The degree distribution of the generalized duplication model , Theoret . Comput . Sci . 369 ( 1 ) ( 2006 ) 239 – 249 . [ 5 ] B . Bollobás , O . Riordan , J . Spencer , G . Tusnády , Thedegreesequenceofascale - freerandomgraphprocess , RandomStructuresAlgorithms18 ( 3 ) ( 2001 ) 279 – 290 . [ 6 ] A . Vázquez , Degreecorrelationsandclusteringhierarchyinnetworks : measures , originandconsequences ( Ph . D . dissertation ) , LaScuolaInternazionale Superiore di Studi Avanzati / International School for Advanced Studies , Trieste , Italy , 2002 . [ 7 ] R . Milo , S . Shen - Orr , S . Itzkovitz , N . Kashtan , D . Chklovskii , U . Alon , Network motifs : simple building blocks of complex networks , Science 298 ( 5594 ) ( 2002 ) 824 – 827 . [ 8 ] R . Milo , S . Itzkovitz , N . Kashtan , R . Levitt , S . Shen - Orr , I . Ayzenshtat , M . Sheffer , U . Alon , Superfamilies of evolved and designed networks , Science 303 ( 5663 ) ( 2004 ) 1538 – 1542 . [ 9 ] W . Kim , M . Li , J . Wang , Y . Pan , Essential protein discovery based on network motif and gene ontology , in : Proceedings of IEEE Bioinformatics and Biomedicine , Nov . 2011 , pp . 470 – 475 . [ 10 ] I . Albert , R . Albert , Conserved network motifs allow protein – protein interaction prediction , Bioinformatics 20 ( 18 ) ( 2004 ) 3346 – 3352 . [ 11 ] S . Wernicke , Efficient detection of network motifs , IEEE / ACM Trans . Comput . Biol . Bioinform . 3 ( 4 ) ( 2006 ) 347 – 359 . [ 12 ] J . Chen , W . Hsu , M . Lee , S . Ng , Nemofinder : dissectinggenome - wideprotein – proteininteractionswithmeso - scalenetworkmotifs , in : Proc . 12thACM SIGKDD Int’l Conf . Knowledge Discovery and Data Mining , 2006 , pp . 106 – 115 . [ 13 ] Z . Kashani , H . Ahrabian , E . Elahi , A . Nowzari - Dalini , E . Ansari , S . Asadi , S . Mohammadi , F . Schreiber , A . Masoudi - Nejad , Kavosh : a new algorithm for finding network motifs , BMC Bioinformatics 10 ( 1 ) ( 2009 ) article 318 . [ 14 ] B . McKay , Practical graph isomorphism , Congr . Numer . 30 ( 1981 ) 45 – 87 . [ 15 ] J . Wang , Y . Huang , F . X . Wu , Y . Pan , Symmetry compression method for discovering network motifs , IEEE / ACM Trans . Comput . Biol . Bioinform . 9 ( 6 ) ( 2012 ) 1776 – 1789 . 320 J . Luo et al . / Physica A 416 ( 2014 ) 309 – 320 [ 16 ] X . Li , D . S . Stones , H . Wang , H . Deng , X . Liu , G . Wang , NetMODE : network motif detection without Nauty , PLoS ONE 7 ( 12 ) ( 2012 ) e50093 . [ 17 ] S . Khakabimamaghani , I . Sharafuddin , N . Dichter , I . Koch , A . Masoudi - Nejad , QuateXelero : an accelerated exact network motif detection algorithm , PLoS ONE 8 ( 7 ) ( 2013 ) e68073 . [ 18 ] J . Grochow , M . Kellis , Network motif discovery using subgraph enumeration and symmetry - breaking , in : Research in Computational Molecular Biology , Springer , 2007 , pp . 92 – 106 . [ 19 ] S . Omidi , F . Schreiber , A . Masoudi - Nejad , MODA : an efficient algorithm for network motif discovery in biological networks , Genes Genet . Syst . 84 ( 5 ) ( 2009 ) 385 – 395 . [ 20 ] P . Ribeiro , F . Silva , G - Tries : an efficient data structure for discovering network motifs , in : Proceedings of the 2010 ACM Symposium on Applied Computing , ACM , 2010 , pp . 1559 – 1566 . [ 21 ] L . A . A . Meira , V . R . Maximo , A . L . Fazenda , A . F . da Conceicao , Accelerated motif detection using combinatorial techniques , in : 2012 Eighth International Conference on Signal Image Technology and Internet Based Systems , SITIS , IEEE , 2012 , pp . 744 – 753 . [ 22 ] N . Alon , P . Dao , I . Hajirasouliha , F . Hormozdiari , S . C . Sahinalp , Biomolecular network motif counting and discovery by color coding , Bioinformatics 24 ( 13 ) ( 2008 ) i241 – i249 . [ 23 ] Z . Zhao , M . Khan , V . S . A . Kumar , M . V . Marathe , Subgraph enumeration in large social contact networks using parallel color coding and streaming , in : 39th International Conference on Parallel Processing , ICPP , IEEE , 2010 , pp . 594 – 603 . [ 24 ] G . M . Slota , K . Madduri , Fast approximate subgraph counting and enumeration , in : 42nd International Conference on Parallel Processing , ICPP , IEEE , 2013 , pp . 210 – 219 . [ 25 ] I . Xenarios , L . Salwinski , X . Duan , P . Higney , S . Kim , D . Eisenberg , Dip , thedatabaseofinteractingproteins : aresearchtoolforstudyingcellularnetworks of protein interactions , Nucleic Acids Res . 30 ( 1 ) ( 2002 ) 303 – 305 . [ 26 ] Collaborative benchmarking and experimental algorithmics laboratory : NC State University , ISCAS89 benchmark suite , http : / / www . cbl . ncsu . edu / CBLDocs / iscas89 . html , last accessed Feb . 8 , 2013 . [ 27 ] M . Koyutürk , S . Subramaniam , A . Grama , Functional Coherence of Molecular Networks in Bioinformatics , Springer , 2012 , pp . 79 – 80 . [ 28 ] W . L . Kocay , An extension of Kelly’s lemma to spanning subgraphs , Congr . Numer . 31 ( 1981 ) 109 – 120 . [ 29 ] J . Matousek , J . Nesetril , Invitation to Discrete Mathematics , Oxford University Press , New York , 2008 , pp . 153 – 158 . [ 30 ] D . Stinson , Combinatorial Algorithms : Generation , Enumeration , and Search , CRC Press , 1999 , pp . 48 – 52 . [ 31 ] S . Itzkovitz , R . Milo , N . Kashtan , G . Ziv , U . Alon , Subgraphs in random networks , Phys . Rev . E 68 ( 2 ) ( 2003 ) 026127 . [ 32 ] P . Shannon , A . Markiel , O . Ozier , N . Baliga , J . Wang , D . Ramage , N . Amin , B . Schwikowski , T . Ideker , Cytoscape : a software environment for integrated models of biomolecular interaction networks , Genome Res . 13 ( 11 ) ( 2003 ) 2498 – 2504 . [ 33 ] L . Zhu , Z . H . You , D . S . Huang , Increasingthereliabilityofprotein – proteininteractionnetworksvianon - convexsemanticembedding , Neurocomputing 121 ( 2013 ) 99 – 107 . [ 34 ] J . F . Xia , S . L . Wang , Y . K . Lei , Computational methods for the prediction of protein – protein interactions , Protein Peptide Lett . 17 ( 9 ) ( 2010 ) 1069 – 1078 . [ 35 ] J . F . Xia , K . Han , D . S . Huang , Sequence - based prediction of protein – protein interactions by means of rotation forest and autocorrelation descriptor , Protein Peptide Lett . 17 ( 1 ) ( 2010 ) 137 – 145 . [ 36 ] J . F . Xia , X . M . Zhao , D . S . Huang , Predicting protein – protein interactions from protein sequences using meta predictor , Amino Acids 39 ( 5 ) ( 2010 ) 1595 – 1599 . [ 37 ] J . F . Xia , X . M . Zhao , J . Song , D . S . Huang , APIS : accurate prediction of hot spots in protein interfaces by combining protrusion index with solvent accessibility , BMC Bioinformatics 11 ( 1 ) ( 2010 ) 174 . [ 38 ] C . H . Zheng , D . Zhang , V . T . Y . Ng , K . S . Chi , D . S . Huang , Molecularpatterndiscoverybasedonpenalizedmatrixdecomposition , IEEE / ACMTrans . Comput . Biol . Bioinform . 8 ( 6 ) ( 2011 ) 1592 – 1603 . [ 39 ] W . Kim , Prediction of essential proteins using topological properties in GO - pruned PPI network based on machine learning methods , Tsinghua Sci . Technol . 17 ( 6 ) ( 2012 ) 645 – 658 .