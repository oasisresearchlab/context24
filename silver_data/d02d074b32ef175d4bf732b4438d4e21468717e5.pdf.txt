Facilitating the Development of Representations in Hypertext with IDE Daniel S . Jordan Daniel M . Russell Anne - Marie S . Jensen Russell A . Rogers System Sciences Laboratory Xerox Palo Alto Research Center 3333 Coyote Hill Road Palo Alto , CA 94304 ABSTRACT Hypertext systems are used for a variety of representational tasks , many that involve fairly formalized structures . Because hypertext systems are generally intended for developing informal ( unstructured data ) and semi - formal ( semantic networks ) structures , developing more formal structures can be difficult . Regular patterns in structures must often be recreated from primitive elements ( individual nodes and links ) resulting in a high overhead cost . In this paper we describe the Instructional Design Environment , or IDE , a hypertext system application that facilitates the rapid and accurate creation of regular network patterns in hypertext . IDE focuses on the task of instructional design , but its facilities are general and useful to many representation tasks . IDE features structure accelerators that provide simple menu interfaces to ( 1 ) define network structures out of patterns of typed node and link connections , ( 2 ) create new node types that contain structured content , and ( 3 ) tailor the interface for creating cards , links and structures to focus attention during different stages of the representation task . These mechanisms allow the user to tailor the hypertext environment to better meet his or her representational needs . We also report on the field use of IDE by instructional designers . 1 . INTRODUCTION Hypertext authoring systems are generally intended to help users organize information for the writing task . Hypertext systems are also used in tasks for organizing information into representations more formal than those used in writing , such as analyzing policy decision - making lJJars87 ] , capturing early design decisions [ Conk87b ] , and computer - aided design [ Deli87 ] . The advantage of using hypertext for these and similar tasks over , for example , relational database systems , is the enormous flexibility offered the user in representing structures . The basic node - and - link construct of hypertext is powerful enough to incorporate structures ranging from the formal ( e . g . , relational tables ) to semi - formal ( semantic networks ) to informal ( unstructured data ) , in a single environment . One disadvantage of building these structures in hypertext is the high cost , or “cognitive overhead” [ Conk87a ] , the user pays in performing tasks such as creating , naming and organizing links and nodes . This cost becomes particularly acute when building more formal structures with regular and recurring patterns . Repeatedly performing the same sequence of operations becomes extremely tedious . The result is either : ( 1 ) that hypertext will not be used for the task , even though it has the representational power , or , worse , ( 2 ) that hypertext will be used , but will discourage the user from properly building structures , causing improper or “sloppy” structures to be built instead . Hypertext ‘89 Proceedings 93 November 1989 In this paper we describe three mechanisms that accelerate the task of building accurate representations in hypertext . Template car & allow users to specify the contents of cards in advance based on type . Autolinks and the Structure Library allow users to define network structure “types” out of card and link types . Modes allow users to tailor the interface for creating cards , links and structures . We have implemented these mechanisms in the Instructional Design Environment , or IDE . Our project focuses on the representation tasks found in instructional design , but the mechanisms of IDE are general and would benefit any representation task . In the next section we describe the instructional design process . In Section 3 we introduce the IDE system , and in Section 4 describe the NoteCards hypertext system , on which IDE is built . Sections 5 through 8 introduce and describe the three structure accelerators in IDE . Section 9 discusses sharing representations built in IDE . In Section 10 we give an example of IDE in field use , and in Section 11 draw conclusions about the system . 2 . THE PROCESS OF INSTRUCTIONAL DESIGN The process of instructional design is typical in its representational requirements . The task often involves the management of large amounts of complex information . Typically , the process of instructional design extends from analysis of the domain knowledge to be taught , to the development and delivery of the instructional materials . The instructional designer decides what to cover in a course , and how to organize , present and , finally , produce the course materials . Determining the course content involves a “front - end” analysis of the domain and requires significant research and careful analysis of both the domain knowledge and applicable instructional principles . The instructional designer determines the instructional goals of the course , collects and analyzes knowledge about the domain to be taught , and then structures that knowledge according to the instructional goals . At the end of this process the designer produces instructional deliverables organized into a lesson sequence consisting of presentations , exercises , tests , and other material designed to achieve the instructional goals . Instructional deliverables are often multi - mediabased . These tasks make instructional design an exercise in creating , developing and coordinating knowledge representations . 3 . THE INSTRUCTIONAL DESIGN ENVIRONMENT IDE is a hypertext - based multi - media environment that facilitates the task of building representations in the instructional design process , from conception of instructional ideas and objectives to delivery of actual instruction . IDE emphasizes the “front - end” analysis portion of instructional design , where domain knowledge is analyzed and structured into semantic networks with specific patterns . This crucial step of the design process is what we believe largely determines the effectiveness of the delivered instruction . IDE promotes effective performance of this representation task with structure accelerators that greatly reduce the overhead costs incurred in creating groups of nodes and links . These accelerators enable the designer to quickly capture and reuse regularites in structures as they emerge , within an environment that continues to support informal structuring . In this way , IDE encourages the development of complex network representations that may better capture the structure of the knowledge being analyzed . Our hope is that this will improve the effectiveness and quality of the final instructional material . IDE is built on NoteCards , an extensible , full - featured hypertext system [ Hala87bl . IDE extensively tailors and extends the NoteCards system through NoteCards powerful programmer’s interface [ Trig87 ] , and passes much of this tailorability onto the instructional designer through simple menu interfaces . Because of its tailorability , IDE can support many different methods of instructional design , such as Mager’s model Hypertext ‘89 Proceedings 94 November 1989 [ Mage62 ] and Gagne’s learning hierarchy [ Gagn70 ] , giving instructional designers tremendous flexibility in pursuing their methodology of choice . IDE is a large system containing many features . We present only some of these features in this paper ; others have been described elsewhere [ Russ89 ] . 4 . OVERVIEW OF NOTECARDS NoteCards [ Hala87b ] is designed to help people record , manipulate and structure information . NoteCards provides facilities to create , organize and manage a semantic network of typed nodes as notecards connected by typed links . A notecard is the electronic version of the paper notecard , and contains text , sketches , graphs or other editable substances . Links connecting notecards are typed and unidirectional . The database of notecard substances and link connections are stored in a notefile . Figure 1 displays several notecards from a user’s notefile . The large notecard at the top of the figure is a Browser card that contains a pictorial graph of a network of notecards . In browsers and other cards , linked notecards are represented by link icons ( which appear as boxed text ) . Selecting the link icon with the mouse traverses the link , and displays the destination notecard . In browsers , links between cards are represented by lines drawn between their two respective icons . Browsers provide a very useful means of viewing the structure of a network . Extensibility in NoteCards NoteCards provides a powerful programmer’s interface of over 150 functions for extending and tailoring the basic NoteCards environment . Any operation available in the user interface is available in the programmer’s interface . NoteCards also supports a card types mechanism that features an inheritance hierarchy for creating new card types by specializing existing card types . IDE makes extensive use of both the programmer’s interface functions and the types mechanism , building on top of NoteCards . 5 . FACILIATING THE REPRESENTATION TASK IN IDE A primary goal of IDE is to facilitate rapid and accurate development of complex networks . Toward this goal IDE supports structure accelerators that speed up user interactions while guiding structural development . In the next three sections we describe three structure accelerators : ( 1 ) Template cards , ( 2 ) Autolinks and the Structure Library , and ( 3 ) Modes . 6 . CREATING STRUCTURED CONTENT An advantage of using hypertext for representating semantic networks is that nodes may be typed and , as cards , may contain arbitrary amounts of information . In many cases , however , the user may wish to start from other than blank typed cards , and include previously structured content in cards used for similar purposes . IDE allows users to specify in advance the contents of cards with Template cads . Hypertext ‘89 Proceedings 95 November 1989 Figure 1 . Example of a NoteCards screen , with a Browser card ( top ) and several Text cards , with embedded link icons . Template cards Template cards allow users to define new text - based card types by editing a “master template” card for each type . New instances of a template card type are created with the properties and text of the master template , and may include graphics , links to other cards , and other items . Template cards specialize Text cards by using the Notecards types mechanism . In the types mechanism , each card type inherits its properties , substance and functionality from its parent in a card type hierarchy . The types mechanism allows the programmer to tailor the environment by adding useful card types , and IDE’s Template cards passes this tailorability onto the non - programming user with simple menu interfaces . IDE supports a library of about 20 defauh template types , including Component , Concept and Skill cards . These templates all contain fields that appear in the text with blank values that are to be filled in by the user . For example , a Component card , shown in Figure 2 , contains fields for a machine component’s name , part number , possible failure modes , and other properties . A field might be filled in with a link to another card , graphics , or just plain text . The right side of Figure 2 shows an example of how the fields of a Component card might be completed . Here the instructional designer analyzed the Developer Housing unit of a large copier according to the fields given in the template , as part of a task analysis for creating instruction on copier repair . Template cards also provide a menu interface for editing a card type’s bitmap identifier that appears on the left of link icons ( see Figure 2 ) . This identifier enables quick interpretation of link icons of cards of many different template types . Instructional designers have found Template cards particularly useful since their task involves recording textual information with a standard format . Template cards accelerate the creation of networks by allowing the user to specify in advance text common across cards , removing the need for redundant retyping and reformatting . Hypertext ‘89 Proceedings 96 November 1989 Figure 2 . Two Component cards , one with original empty fields ( left ) and one filled in ( right ) . 7 . GUIDING AND ACCELERATING NETWORK DEVELOPMENT WITH AUTOMATIC LINKING Much of the time spent in creating networks is spent creating links between cards . In this section we describe two structure accelerators , Autolinks and the Structure Library , that automate steps in the linking process . Autolinks When creating a new link to a new card , if the structure of the network being created is already known , the typzs for the new link and card can be determined from the type of the source card . Autolinks capitalize on this fact and allow users to specify in advance ( 1 ) the type of the link , and ( 2 ) the type of the destination card in a link connection , elminating the need to specify these parameters at link creation time . For example , in a task analysis of copier components , the designer may know in advance that each component will have a failure mode and several repair tasks associated with it . Figure 3 illustrates how different copier components for this analysis would produce identical types of link connections . Autolinks allow each link connection to be created with one mouse click by specifying in advance the parameters of the connection . Autolinks reside as buttons in the text of the source card of the link connection . Autolink buttons are delineated from text by square brackets ( [ ] ) . Selecting the autolink button creates a new link of the specified type to a new card of the specified type , placing the new link icon next to the autolink button . The Component card in Figure 2 contains seven autolink buttons , including one for each of the link connections displayed in Figure 3 . Rapid extension of networks to any level of depth Autolinks feature a “creation depth” parameter for automatic creation of additional levels of a network . This feature is very powerful when used with template cards . If an autolink links to a template card that also contains autolinks , these second - level autolinks will also be activated when the top - level autolink’s creation - depth parameter is greater than 1 . Thus , the user can recursively “grow” an entire network of cards and links with a single mouse click . ( This network will necessarily be a hierarchy , since autolinks currently cannot cross - reference each other . ) Figure 4 shows several master templates with imbedded Hypertext ‘89 Proceedings 97 November 1989 autolinks and the 4 - level structure they would create by selecting an autolink button that was set to create a new EO ( “Enabling Objective” ) card . . . n * nce . . . . . . . . . . . . . . . mm . . . . . . . . I - mm . . . I . . I . . - - - mm . m . . I Figure 3 . A Browser card displaying similar fault / task substructures containing Component cards ( “Developer Housing” , “Dicorotron” ) , Fault cards ( “Failure” ) and Task cards . In addition to the link type , card type and creation depth , other editable autolink parameters are the title of the destination card and the location of the new link icon in the source cards text . The user may also specify that autolinks be “one - shot” buttons that are deleted from the text after the new link is created , Distributed vs . Centralized Structure Definitions : Autolinks and the Structure Library When autolinks are placed in master templates , they together implicitly define a structure since the structure information is locally distributed across the autolinks and templates . Activating an autolink creates a structure that grows locally at each level . Sometimes , however , the user may wish to create structures that cannot be implicitly defined by autolinks and templates , such as when the local linking of a card’s type depends on its position in a larger network . In this case , a network’s structure needs to be specified globally , and its local node and link relations explicitly defined . The Structure Library in IDE allows users to explicitly define structures by creating a “master structure type” from an existing structure instance composed of interconnected cards and links . A master structure contains only information about the types of cards and links , and their interconnectivity , found in the structure . New structure instances created from a master consist of new card and link instances of the types occurring in the master . Users can link to new structures as they do to new cards . Hypertext ‘89 Proceedings 98 November 1989 I > > v . rb - noun - object , tat . “ , w , t Of lCtlonC < tknditlonm : > > resourcss and snvironment condittons < < - 1 ti - - mw T > Dsf Ined Concapt Dascrlptlon < < I Figure 4 . Master templates with embedded autolinks ( left and bottom cards ) , and a browser displaying a structure “grown” from clicking on a single autolink . Guiding structural development of networks Autolinks , the Structure Library and Template cards together direct the rapid development of semantic networks according to predefined yet tailorable specifications . Template cards containing autolinks set to link to other template cards or to library structures direct the user to create link connections that will produce a network structure of a guaranteed form . Because autolinks and the library structures are an optional alternative to creating link connections , this structural form is encouraged but not imposed . Gains in speed and effort of building networks Great gains in the speed of building networks are achieved with autolinks and the structure library . The usual Smouse click operation of selecting ( 1 ) the new link operation , ( 2 ) the new link location in the text , ( 3 ) the new link type , ( 4 ) that a new destination card be created , and , finally , ( 5 ) the destination card type , reduces to a single mouse click with an autolink . The savings in mouse clicks becomes approximately exponential with the number of levels created . The structure in Figure 4 , for example , which was created with one mouse click with autolinks , would require 5 x 13 = 65 mouse clicks to create without autolinks . Significant gains in the cognitive effort to build networks are also achieved . Because a networks patterns are stored in the autolinks , templates and structure libraries , the need to remember specific node - and - link patterns as one builds a network is virtually eliminated . Only deviations from these patterns at creation time need be noted . The result is a great reduction in cognitive overhead . Users of IDE have reported a tremendous savings in the cognitive effort expended in building networks . Hypertext ‘89 Proceedings 99 November 1989 8 . FOCUSING THE USER’S ATTENTION ON THE IMMEDIATE TASK A byproduct of having the ability to easily define new template card and structure types is that the library of these types quickly becomes large and unwieldly . Searching menus for types relevant to the immediate task can be difficult . For example , the 20 default IDE template card types apply to different stages of the instructional design process , and the designer would only want to use a few of them at one time . To eliminate the problem of searching through a large “types library” , and to simultaneously help focus the user’s attention to the current task , IDE provides Modes . Modes Modes help the user to concentrate on developing specific portions of a network by allowing users to tailor menus that interface to card , link and structure types . Only those types currently relevant are made salient . With Modes , IDE extends the philosophy of adaptability in NoteCards ( see [ Trig87 ] ) , by providing interfaces for users to change the way in which they interface with the hypertext environment . With modes the user can specify the layout of menus used for selecting ( 1 ) card types , ( 2 ) link types , and ( 3 ) library structures to emphasize those types relevant to the current stage of the representation task . The user can easily switch modes . For example , during a task analysis the instructional designer may only use Component and Function cards , and during instructional sequencing use Script and Course cards . Figure 5 shows an example of IDE in Task Analysis mode . The menu for creating new cards ( the pop - up menu labelled “Type ? ” in the figure ) contains only those types needed in this mode . All other types are accessible under the “Other” submenu . Thus , the user is not distracted by card types irrelevant to the immediate task analysis . ; “ : 77” i I i ! Figure 5 . Example of an IDE screen in Task Analysis mode . If a Browser card is created in a particular mode ( such as the “Task Analysis” browser in Figure 5 ) , only those link types in that mode are visible . Browsers used with modes are similar to the “webs” found in Intermedia [ GarrS6 , Yank851 . The IDE Library contains four default modes that reflect generic stages we have identified in instructional design : Data Collection , Task Analysis / Structuring Knowledge ( TASK ) , Sequencing and Delivery . These modes and their corresponding stages in the instructional design process are described in more detail in [ Russ89 ] . Hypertext ‘89 Proceedings 100 November 1989 9 . STORING AND SHARING DEFINITIONS OF STRUCTURE ACCELERATORS Definitions for template cards , autolinks , library structures and modes are all stored in a special notefile called a definitions notefile . Definitions notefiles provide a clean , modular distinction between the parameters that specify how the environment is to be tailored , and the code that implements the tailorization . Definitions notefiles promote both sharability and collaboration . By passing around these notefiles users may easily share definitions . Definitions notefiles may be merged together , allowing collaboration between and integration of representational paradigms . For example , exchanging definition notefiles has made collaboration easy between our groups in California and in New York state . Sharing definition notefiles facilitates group efficiency by ( 1 ) elminating the redundancy of redefining structure accelerators , and ( 2 ) avoiding the costly duplication of problems encountered by previous designers . It is solely the information in these definition notefiles that tailors the hypertext environment to the specific representation task . In fact , the “instructional design” part of IDE resides in the definition notefiles defined by us and our users . Thus , the IDE mechanisms described in this paper , because their parameter values are stored separately , are truly general to all hypertext - based tasks . 10 . CREATING INSTRUCTION IN HYPERTEXT : IDE IN USE IDE is currently in use at a number of sites both inside and outside of Xerox . We have been closely monitoring our users to obtain feedback on existing tools and to identify needs for new ones , IDE is being used for instructional design in a number of domains , including stastistics , copier repair and foreign language instruction [ Schw89 ] . In this section we present a case of IDE in use . A Case Study : Creating instruction for complex machinery One instructional designer is using IDE to develop instructional material for the repair of printing systems . This user is performing a functional analysis of both copier and laser printer components in order to explain the relationship between familiar copier components and components in the new laser printing systems . Figure 6 shows a browser this user created that contains a network description of the possible different charging systems used in copiers and printers . This structure emphasizes that different components can be used to perform the same function of laying a uniform charge on a photoreceptive belt . This fact is articulated by connecting Component cards to the same Function card . In Figure 6 , the “Scorotron” Component card is linked to Component and Function cards representing its subcomponent ( “Coronode” ) and function ( “Charge the belt” ) , respectively . Its Function card is linked to a Concept card ( “Opposites attract” ) that represents a concept needed for a proper understanding of the Scorotron’s function . This designer created these cards and their structure in a “Task Analysis” mode . This mode contains the Component , Function and Concept card types , and Purpose , Required and Concept link types , among others . Autolinks residing in the Component cards were used to create new Purpose links to Function cards , and new Subcomponent links to other Component cards ( see the browser in Figure 6 ) . Autolinks in the Function cards created Concept links to Concept cards . During the task analysis , this designer rapidly created networks with this card - and - link pattern by activating an autolink that linked to a Component card with a creation depth of 4 . This reduced to a single mouse click the task of generating the substructure that represents a task analysis for each component . The autolinks and template cards encouraged this user to develop a task analysis structure of this general form . By using these templates , this user avoided needing to make additional decisions about how to develop the structure . It is worth emphasizing , however , that templates and their autolink buttons only suggest structural forms , and that it is up to the user to realize at creation time that , for example , the Function cards to Hypertext ‘89 Proceedings In November 1989 which the Dicorotron and Scorotron cards in Figure 6 link should be the same Function card and not two different ones . - - - - : p Opposites attract Figure 8 . A Browser card ( top ) and Function card ( bottom ) created by an IDE user for representing the charging components and their function . 11 . CONCLUSIONS Using hypertext for representation tasks that involve formalized structures can be difficult . IDE is a hypertext system application that facilitates rapid and accurate development of formal structures with the use of structure accelerators . IDE benefits the user by encouraging the creation of regular network patterns , and , therefore , promoting effective performance in the analysis of domain knowledge . The usefulness of IDE is not limited to instructional design . Template cards , Autolinks , the Structure Library and Modes would benefit design tasks other than those involving instruction , as well as other representational tasks not involving design . Other applications of hypertext systems for instruction such as Intermedia and BALSA [ Yank851 have also extended their applicability to other domains to various degrees . Tailorability , Flexibility and IDE IDE addresses a number of hypertext issues , two of which we briefly discuss here . Tailorability is an important issue for hypertext systems [ Hala87a , Trig87 ] . IDE extends the tailorability of NoteCards by allowing the user to ( 1 ) create , modify or delete types defining cards and structures , and ( 2 ) modify the menu interface of the hypertext environment to suit his or her needs . Flexibility to represent information is also an important feature of hypertext [ Trig871 . Within the domain of instructional design , IDE gives the user great flexibility to implement the design model of his or her choice . Using Template cards the instructional designer can define fields or other formatted contents for cards to hold information in a form consistent with the design model . Autolinks and the Structure Library can be used to define structures that reflect the representational specifications of the model . Modes can be used to represent the individual stages of the instructional design process recognized by the model . In conclusion , IDE and its structure accelerators described in this paper address several critical needs for building representations in hypertext , as well as several important general hypertext issues . Hypertext ‘89 Proceedings 102 November 1989 ACKNOWLEDGEMENTS We would like to thank Richard Burton for his comments on an earlier draft of this paper , and more importantly for his past guidance of the IDE project . We are grateful to Robby Robinson , Bob DeRoller , Phil Ondocin and Ken Hansen of Xerox Corporation and Joe Psotka of the Army Research Institute for their support of IDE . We thank Jonathan Cohen for his contributions to the system , and the NoteCards group ( Randy Trigg , Peggy Irish and Randy Gobbel ) for their aid , advice and bug fixes . REFERENCES [ Conk87a ] Conklin , J . Hypertext : An Introduction and Survey . Combuter , 20 , 9 , 17 - 41 . Chapel Hill , NC . 1987 . [ Conk87b ] Conklin , J . and Begeman , M . L . gIBIS : A Hypertext Tool for Team Design Deliberation . Hypertext ‘87 Papers , 247 - 251 . Chapel Hill , NC . 1987 . [ Deli861 Delisle , N . and Schwartz , M . Neptune : A Hypertext System for CAD Applications . Proceedings of ACM SIBMOD International Conference on the Management of Data ( pp . 132 - 143 ) . Washington , D . C . 1986 . [ Gagn70 ] Gagne , R . The Conditions of Learning . New York : Holt , Rinehart and Winston . 1970 . [ Garr86 ] Garrett , L . N . , Smith , L , and Meyrowitz , N . Inter - media : Issues , Strategies , and Tactics in the Design of a Hypermedia Document System . Computer - Supported Cooperative Work ( CSCW ‘86 ) Proceedings , ( pp . 163 - 174 ) . Austin , TX . 1986 . [ Hala87a ] Halasz , F . G . Reflections on NoteCards : Seven Issues for the Next Generation of Hypermedia Systems . Hypertext ‘87 Papers , 345 - 365 . Chapel Hill , NC . 1987 . [ Hala87b ] Halasz , F . G . , Moran , T . M . , Trigg , R . H . Notecards in a Nutshell . Proceedings of the ACM CHI + GI Conference ( pp . 45 - 52 ) . Toronto . 1987 . [ Mage62 ] Mager , R . Preparing Instructional Objectives . Palo Alto , CA : Fearon . 1962 . [ Mars871 Marshall , CC . Exploring Representation Problems Using Hypertext . [ Russ87 [ Russ89 Hypertext ‘87 Papers , 253 - 268 : Chapel Hill , NC . 1987 ‘J Russell , D . M . , Moran , T . P . , & Jordan , D . S . The Instructional Design Environment . In Intelligent Tutoring Systems : Lessons Learned . J . Psotka , L . D . Massey , & S . A . Mutter ( Eds ) . Lawrence Erlbaum Associates , Inc . Hillsdale , NJ . 1987 . I Russell , D . M . , Burton , R . R . , Jordan , D . S . , Jensen , A . , Rogers , R . A . , Cohen , J . C . Creating Instruction with IDE : Tools for Instructional Designers . Xerox Palo Alto Research Center Report ( System Sciences Laboratory ) P88 - 00076 . Palo Alto , CA . 1989 . [ Schw89 ] Schwartz , M . & Russell , D . M . FL - IDE : Hypertext for Structuring a Conceptual Design for Computer - assisted Language Learning . Instructional Science , 18 , 5 - 26 . 1989 . Hypertext ‘89 Proceedings 103 November 1989 [ Trig871 Trigg , R . H . , Moran , T . P . , Halasz , F . G . Adaptability and Tailorability in NoteCards . Proceedings of INTERACT ‘87 . Stuttgart , West Germany . 1987 . [ Yank851 Yankelovich , N . , Meyrowitz , N . , van Dam , A . Reading and Writing the Electronic Book . Computer , 18 ( 10 ) . 1985 . Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish , requires a fee and / or specific permission . 0 1989 ACM 089791 - 339 - 6 / 89 / 001 l / O104 $ 1 . 50 Hypertext ‘89 Proceedings 104 November 1989