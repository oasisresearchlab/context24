SOFTWARE : PRACTICE AND EXPERIENCE Softw . Pract . Exper . ( 2017 ) Published online in Wiley Online Library ( wileyonlinelibrary . com ) . DOI : 10 . 1002 / spe . 2492 Improving online learning activity interoperability with Acos server Teemu Sirkiä * , † and Lassi Haaranen Department of Computer Science , Aalto University , Espoo , Finland SUMMARY Modern online learning management systems ( LMSs ) support a variety of online learning activities , such as animations , exercises , and other interactive learning materials . However , there are many technical challenges in using the same activities in multiple LMSs because content is typically tightly coupled with one proto - col to communicate with the LMS and different LMSs use different protocols for launching activities and receiving grades . This leads to low reusability of learning activities and similar content being developed in multiple places . To overcome these issues , we present Acos , a smart learning content server , which empha - sizes the reusability of online learning activities by decoupling the content and existing interoperability protocols . It allows integrating the same learning activities into multiple LMSs using different protocols by providing a uniform interface for learning activities . Adapting this architecture allows instructors to choose activities based on pedagogical goals instead of letting technical restrictions of LMSs dictate the content selection process . Copyright © 2017 John Wiley & Sons , Ltd . Received 21 June 2016 ; Revised 2 December 2016 ; Accepted 30 January 2017 KEY WORDS : online learning activities ; learning management systems ; interoperability ; reusability 1 . INTRODUCTION In many university courses , online learning activities are an important part of the learning process . Instructors use learning management systems ( LMSs ) to host a variety of activities for students to solve . With the advent of Massive Open Online Courses ( MOOCs ) , the number of available online learning activities has increased even more . However , when an instructor uses an LMS to create a course structure and embeds suitable online learning activities for students , there are various technical hurdles . One common issue pertains to interoperability and reusability of learning content : some content exists that the instructor would like to use as a part of the course , but integrating the content with the LMS is not possible . The content uses a different protocol to communicate than the LMS supports . For example , information about learner’s identity and how the grade is submitted back to the LMS depends on the protocol . Although standardized protocols for communication have been speciﬁed to reduce the number of protocols and improve interoperability , the problem still remains that the communication protocol is tightly coupled with the content . Furthermore , this is complicated because the content typically does not support multiple protocols . In practice , this often leads to the problem that the contents of a course are not selected purely for pedagogical reasons . To increase interoperability and reusability of online learning activities , we have created Acos , a server to host online learning activities . The solution we present decouples the content and how the LMS communicates with the content . Acos implements existing interoperability protocols and acts as a proxy between the LMS and the content . Acos provides a common interface for the activities * Correspondence to : Teemu Sirkiä , P . O . Box 15400 , 00076 Aalto , Finland . † E - mail : teemu . sirkia @ aalto . ﬁ Copyright © 2017 John Wiley & Sons , Ltd . T . Sirkiä , and L . Haaranen Figure 1 . Overview of the general structure of the Acos server . All the learning activities use the same uni - form protocol to communicate with Acos , and Acos uses an interoperability protocol to relay the messages to the LMS . In this way , the developer does not need to worry about different interoperability protocols . [ Colour ﬁgure can be viewed at wileyonlinelibrary . com ] to communicate with the LMSs regardless of the actual protocol in use between Acos and the LMS . The broad architecture of Acos is shown in Figure 1 . This architecture provides two signiﬁcant beneﬁts . First , when developing new content , the devel - oper does not need to know anything about the used communication protocol ( e . g . , IMS LTI [ 1 ] ) . Acos provides a uniform communication interface that is always the same for the learning activ - ities regardless of the protocol that is actually used between the LMS and Acos . Secondly , new protocols can be implemented to support multiple LMSs , and when a new protocol is imple - mented , all the existing content can be used with the new protocol without any modiﬁcations to the content itself . Our approach beneﬁts all the stakeholders . Content developers can easily create new content without thinking any LMS - speciﬁc issues . Instructors have a broader selection of online activities available because the same content can be used in multiple LMSs . Finally , the student can hopefully learn better with pedagogically high - quality online learning activities when the instructor does not need to make compromises with the selection of learning materials . The article is structured as follows . In the next section , we outline the particular technical difﬁcul - ties and concerns in utilizing smart learning content and review relevant literature and approaches adopted by others . Section 3 describes the most salient technical and architectural features of our approach , and in Section 4 , we evaluate our system and architecture based on the challenges out - lined in Section 2 . 3 , as well as address the limitations of our approach . Finally , Section 5 concludes the paper . 2 . BACKGROUND This section describes relevant terminology in more detail and provides the context of the problem domain as well as discusses relevant previous research . The latter part of the section explores various challenges in using online learning activities , focusing on interoperability . 2 . 1 . Online learning activities and smart learning content The ability to interact with context - speciﬁc materials can enhance the learning experience and pro - vide more additional value than the traditional textbooks with exercises . We have used the term online learning activity to describe any learning activity that a student can work within a browser . In our particular case , we use this term to refer to interactive content that needs to communicate with the LMS . These are commonly implemented with JavaScript and work in the learner’s browser . For this kind of content , there are also other terms in use . The term smart learning content ( SLC ) is outlined by Brusilovsky et al . [ 2 ] . In their deﬁnition , ‘some form of interactivity is a central aspect in all SLCs’ . Smart learning content should include three stages : input , process , and output . The input can vary from simple ( e . g . , pressing buttons ) to more complex ( e . g . , writing free - form text ) . SLC processes the given input and provides an output based on it . They also argue that to improve the output , SLC should collect data about the learner’s interaction with the content . As an example from the domain of computer science education , smart learning content includes , for instance , program and algorithm visualizations . However , even multiple choice questions can be Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER considered smart if they provide rich feedback , that is , explaining why some answers were wrong and possibly using previous answers or student knowledge to form the feedback . Acos is able to host smart learning content as speciﬁed by Brusilovsky et al . However , we do not strictly focus only on SLC because , in general , Acos supports online learning activities in which the level of interaction with the student may vary . The term SLC can be seen as a subcategory of online learning activities which require a certain degree of interactivity . In computing education , content such as JSAV algorithm visualizations and exercises [ 3 ] , Jsvee program visualizations [ 4 ] and Parson’s problems [ 5 ] , and Problets [ 6 ] can be seen as online learning activities , including smart learning content . Figure 2 shows various online learning activities from the domain of computer science . 2 . 2 . Learning management systems Individual pieces of online learning activities can be combined into collections of activities , which form a part of the course materials in learning management systems . Typically , the main responsi - bility of an LMS is to provide exercises , store submissions , do bookkeeping of learners’ points , and facilitate other administrative tasks related to the course . There are a variety of LMSs available for the instructor to choose from . One of the well - known and widely used LMSs is Moodle [ 7 ] . Natu - rally , other LMSs are available as well , such as Blackboard [ 8 ] , Canvas [ 9 ] , OpenedX [ 10 ] , and A + [ 11 ] . Whichever the chosen system , it will impose some limitations on the available features and technical restrictions on the content that can be integrated into it . Dagger et al . [ 12 ] have categorized online learning platforms into three generations based on how well they can be extended . The ﬁrst generation consists of platforms which are monolithic in their design , meaning that any required changes must be coded directly to the system itself ( e . g . , the early versions of Blackboard ) . Systems belonging to the second generation are those that use a modular architecture ( e . g . , Moodle ) . Such systems can be extended by writing plugins and extensions to the core system , but those extensions still need to be created in the same programming language as the main system . Naturally , systems belonging to these two generations pose signiﬁcant technical limitations on what smart learning content can be integrated into the system . The ﬁnal category that Dagger et al . have identiﬁed is service - oriented platforms . These sys - tems can be extended with external services that enhance interoperability . For example , external services can be freely developed in any programming language or framework . One example of LMSs in this category is A + . The only technical requirement is that both systems share the same communication protocol . The issues with monolithic ( and to a certain extent modular ) systems were also noted by Brusilovsky et al . [ 2 ] . They presented a ﬁve - level classiﬁcation for LMSs based on how well they support integrating SLC . At the lowest level are systems in which the platform is independent , does not communicate with other systems , and does not allow separately developed SLC in it . At the highest level , the platform supports standard protocols , such as the Learning Tools Interoperability protocol ( LTI [ 1 ] ) , and “delivery platform is interchangeable with other such delivery platforms , and can interoperate with similar delivery platforms . ” [ 2 ] In addition to the previous viewpoints , Fontenla et al . [ 13 ] provide their four - level categorization for interoperability focusing especially on integrating external tools to the LMS . The levels range from “soft” integration to “hard” integration , depending on the possibility to add external services and the level of control the LMS has over the external service . 2 . 3 . Problem description The problems of using online learning activities we describe in this section are not speciﬁc only to computer science ( CS ) but also exist in other disciplines . Nevertheless , in the ﬁeld of computer science , the problem is more relevant as the number of online learning activities is already notable and increasing , mostly because many instructors also have coding skills to develop different kinds of systems and online learning activities for their courses [ 14 ] . Our viewpoint is largely technical , and our goal is to provide a solution that resolves the issues we have identiﬁed earlier . Although our examples are taken from CS context , the solution we suggest Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen Figure 2 . Different types of online learning activities with varying degrees of interaction from the domain of CS . In a ) , the learner can write any code and interactively see the results . In b ) , the learner input is more limited , and the learner can only arrange the given code blocks . In c ) , the input is most limited , and the learner can only control the visualization . [ Colour ﬁgure can be viewed at wileyonlinelibrary . com ] Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER is not CS - speciﬁc and can be used in any discipline that would like to create , use , and deliver smart learning content . 2 . 3 . 1 . Interoperability and Reusability . As described in the introduction , one of the major problems is the difﬁculty of incorporating different learning activities into various LMSs . Instead of creating the same or similar content separately in each institute , re - using the existing activities across the institutional boundaries would be beneﬁcial . However , to create reusable activities , the technical problem of interoperability must be solved . To provide two - way communication between the LMS and activities , the activity must support at least one protocol to enable the communication . Although the LTI [ 1 ] interoperability protocol sup - ported by multiple LMSs is becoming more widely used , there are also university - speciﬁc protocols in use ( for examples see Section 2 . 4 ) , which are not compatible with the LTI protocol . Implementing and supporting one or multiple communication protocols in each activity means extra work for the developers as the interoperability protocols tend to be complicated . Therefore , supporting only a simple protocol used in a single proprietary LMS might offer an easy solution for the developers but prevents the reusability and interoperability of the activities . A recent working group report by Brusilovsky et al . [ 2 ] details a survey to instructors , which iden - tiﬁed interoperability was one of the major challenges . The difﬁculty of setting up online learning activities to various learning platforms was also highlighted , and the issues of making SLC work in the ﬁrst place were also commonly mentioned in the responses . Two broad categories of protocols to launch the activities and communicate grading information can be seen : homebrew and widely used protocols . Homebrew protocols are used in proprietary LMSs , and one protocol is typically used by a single or a few universities . Whereas in the latter case , as the name implies , the same protocol is used in multiple LMSs , and it is often speciﬁed by a larger organization . One of the fundamental architectural decisions when creating Acos server was to remove this inter - dependency between protocols and content to make it easier to develop reusable activities , as explained in more detail later in Section 3 . 6 . 2 . 3 . 2 . Extensibility . Regardless of the used platform to deliver learning content , it should be easy to create new content types and more learning content by using the existing content types . Ideally , the creation of new content would not require coding skills or knowledge of the underlying system that smart content uses . However , LMSs typically do not support easy creation of new forms of learning materials . A typical reason may be that adding new examples to an existing system requires much coding , com - piling and uploading a large number of new ﬁles to a server . In many cases , instructors do not have the necessary skills to modify an LMS to integrate more content , although they might have a solid pedagogical understanding to design and implement new online learning activities . In the case of proprietary LMSs , the integration of new online learning activities may be technically impossible for instructors or content creators . This lack of extensibility leads to a situation where developing new content or content types requires too much work , and instructors may have no other choice than use materials which could be quite outdated . 2 . 3 . 3 . Scalability . In the current era of MOOCs , the scalability of different online learning tools is also an important concern . In the simplest case , this means the ability to handle a large amount of concurrent requests of the learning content . It is also important to handle these requests with relatively low latency , so that loading times do not distract from learning , especially if the online learning activities in question needs to communicate with a server during the task . Scalability issues might also arise if a piece of smart content stores session data about the learner . In a large enough scale , this data needs to be replicated to multiple database servers , thus complicat - ing matters even further . Similar problems need to be solved regarding the logging of activity data on a piece of online learning activities , which is of particular concern to educational researchers . 2 . 3 . 4 . Discoverability . Although there are online learning activities freely available , it is a demand - ing task for instructors to locate and explore the published online learning activities . It is typically Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen scattered over various web pages where one web page offers one type of content and another web page something else , leading to a situation where the developed tools and online learning activities do not gain enough momentum to be used in multiple universities or other institutions . Discover - ability is further hindered because there are no consistent ways of labeling created smart learning content [ 15 ] . 2 . 4 . Approaches to interoperability The issue of interoperability is typically approached by using a well - speciﬁed protocol that both ends support . The LTI speciﬁcation [ 1 ] is one of these standards which allows easy sharing of learn - ing content and can be used with learning managements systems such as Moodle [ 7 ] and OpenEdX [ 10 ] . It is a formal attempt to specify a protocol on how different online learning activities should communicate with various LMSs [ 1 ] . LTI provides a way for an LMS to launch an activity in such a manner that the learners’ / instructors’ credentials are transferred to another system supporting LTI . In addition , it can be used to integrate online learning activities to a course platform so that the points achieved in an exercise are transferred from the online learning activity back to the LMS . The adoption of these interoperability standards and protocols is slow . A fact that has also been noted previously [ 15 ] . It is hard and expensive to extend existing systems , and a considerable amount of work is required to update all the learning materials to support the new protocols . Because there is no single universally supported protocol , technical issues still limit the selection of online learning activities to be integrated into an LMS . Rey - López et al . [ 16 ] investigated the various approaches to integrate smart learning content into learning management systems . They highlight two categories of protocols to achieve this : standard ( widely used ) and non - standard ( homebrew ) . Rey - López et al . note that the standard approaches work well with interoperability and reusability in mind , but they do not offer a way to standardize content on a per - user basis or store relevant log information . On the other hand , using non - standard protocols lowers the reusability of the content in other systems . Alario - Hoyos et al . have presented the Group Learning Uniform Environment ! system ( GLUE ! ) [ 17 ] which , as the name implies , has an emphasis on collaborative learning activities . GLUE ! provides a three - tier architecture connecting LMSs and tools in a many - to - many way . In addition to the core of the system , separate adapters have to be developed for LMSs and tools . This approach addresses some of the challenges outlined in the previous section . However , it still requires that the LMS in question supports the writing of plugins to work as adapters with the core GLUE ! system . Additionally , many LMSs have technical restrictions that they impose on possible plugins and modules , which in practice means that they need to be written in the same programming lan - guage as the LMS . This is a major task if a new learning activity is created , and the developer wants it to support a variety of platforms , requiring the developer to be familiar with writing plugins for different learning platforms in different programming languages . Another approach to increase LMS interoperability and reuse of online learning activities is described by Karavirta et al . in their A + system [ 11 ] . In their LMS , the idea is to use stateless exter - nal services which provide the exercises and handle the actual grading of an exercise and return the results to the LMS . A + handles only the typical course management tasks , such as keeping track of the exercise points and deadlines . The protocol that A + uses to interact with the external services is lightweight . However , it is an example of a homebrew approach to interoperability , which means that it is not widely used . ADAPT2 [ 16 , 18 ] offers a distributed approach similar to A + protocol but focuses on adap - tive learning activities . Learning content is served from Activity Servers . These activities are accessed via Learning Portal , which collects various types of activities coming from different activ - ity servers . When a user completes an activity , the data is sent to a centralized User Model Server . This information can then be used to adapt content from activity servers for knowledge levels of the individual . Interoperability and reusability of content are not just problems for purely online activities . Orduna et al . [ 19 ] have developed a system to integrate remote learning laboratories ( accessing physical laboratory resources remotely , such as robots ) across multiple universities and learning Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER management systems . Similar to our approach , they support multiple protocols . They offer inte - gration with IMS LTI , and additionally , support for other LMSs can be added via customized approaches using HTTP . Furthermore , the issue of interoperability of tools also affects teachers . Some research has been conducted in this domain ; for example , Integrated Learning Design Environment ( ILDE ) [ 20 ] is an environment for teachers that focuses on the collaborative design of learning activities . 3 . ACOS – ADVANCED CONTENT SERVER In this section , we describe the architecture of Acos and discuss approaches to developing and adding new content , and protocols from the instructors’ and developers’ point of view . This section begins with a general description , and the technical details increase toward the end of the section . More technical documentation and the MIT - licensed source code are available at GitHub https : / / github . com / acos - server . 3 . 1 . General overview The primary motivation of Acos is to provide online learning activities to different learning man - agement systems . The server contains a set of content types and learning materials available for immediate use . The key concept is that the server consists of layers . At the lowest level , the protocol layer describes the communication between the LMS and learning activities . At the topmost level , where the actual content is located , all the features provided by the lower levels are in use . In this way , the activities can be protocol - independent and use the common inter - face that the protocol layer implements . The content does not have to be aware of which protocol is actually being used . Similarly , the protocol does not have to know about the content . This kind of separation allows decoupling the communication parts from the learning activities and makes interoperability much easier . Furthermore , the users developing the learning activities can solely focus on developing the actual content without thinking how a particular protocol should be a part of the content development . Overall , our approach splits various concerns into smaller units , which can be expanded or reﬁned without the need to modify the rest of the system . In terms of design patterns , Acos implements the adapter pattern [ 21 ] at a high level of abstraction . This , combined with commonly used tools and approaches used in modern web development , allowed us to create a system that is scalable and easily extensible . The approach implements the idea initially suggested in the working group report by Brusilovsky et al . [ 2 ] , who recommended creating a lightweight adapter that provides an LTI support for activities with a simpliﬁed interface . 3 . 2 . Main components The architecture of Acos consists of a main server module and three types of components : protocols , content types , and content packages as shown in Figure 3 . These three components form three layers that build on top of each other . The innovation of the server is that it can provide any combination of these three components , which allows all content to be used with any installed protocol . In addition , these three components can be separately developed , but they will work seamlessly together . Protocols handle the communication between learning activities , Acos and learning management systems . A protocol deﬁnes how the learning management system retrieves the content and how the results are submitted back to the LMS after the task is completed . Adding support for new communication protocols is possible , and the new protocol does not require any changes to the existing content , which can be immediately used with the newly implemented protocol . Content types describe the available learning activity types . These packages provide the common libraries that are needed for running this kind of content but do not contain any actual learning activi - ties . Content packages contain the actual interactive content and depend on the content type package . For example , a content type package can provide a library for showing program visualizations . Therefore , it is possible to create multiple content packages that offer program visualizations , which use the library provided by the content type package . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen Figure 3 . The high - level architectural depiction of different parts and stakeholders of Acos . [ Colour ﬁgure can be viewed at wileyonlinelibrary . com ] 3 . 3 . Currently supported protocols and content Currently , we support three different protocols in Acos : A + protocol [ 11 ] , ADAPT2 - protocol [ 18 ] and LTI ( version 1 . 1 ) [ 1 ] . In addition to these , we offer a simple HTML protocol that can be used to view and embed the content in a normal web page , but it does not support sending points or any other communication with the LMS . Originally , the server hosted two types of smart learning content : Jsvee program visualizations and Js - parsons code construction exercises . However , the server was not speciﬁcally designed only for these content types , and after the implementation , we have extended the selection of content with JSAV algorithm exercises [ 3 ] , which are described in Section 4 . 2 . All currently available content is listed in Tables II – III . There are content packages for Js - parsons and Jsvee content types to provide exercises that are ready to use on a course . Additionally , a generator for Js - parsons problems exists ( Section 3 . 9 ) that can be used to create more exercises without the need for any technical knowledge on how Acos and Js - parsons work . For Jsvee , there is a limited support to generate new Python program visualizations automatically . A key aspect of our architecture is that it does not limit the types of content and learning activities that can be served . We have explored this by developing content prototypes based on the idea of gamiﬁcation by taking some of the existing Js - parsons construction problems and added visual game - like elements to them . 3 . 4 . Used technologies Acos is built on top of Node . js runtime ( https : / / nodejs . org ) , which provides an efﬁcient way to create fast and scalable web applications written in JavaScript . To make the server - side development faster , we use the Express web application framework ( https : / / expressjs . com ) for Node . js . For the Node . js runtime , the Node package manager ( npm , https : / / www . npmjs . com ) is the standard way of managing and delivering libraries . It combines a large number of JavaScript Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER libraries into a single catalog that contains typical libraries needed for developing Node . js - based applications . All the libraries required by Acos are npm packages . Therefore , installing a new server instance is a straightforward process because there is no burden of ﬁnding the right library versions and trying to compile the server . As a result , a simple npm command npm can be used to search for the required versions of libraries and to install all of them without interfering with the other services on the same server . Protocols , content types , and content packages for Acos are also standard npm packages . After creating a new content package , for example , it can be registered to the package manager , and then anyone can easily install the package to their local Acos . In this way , we can take all the advantages npm provides , and we need not create a separate mechanism for delivering content with some self - designed format that is not used elsewhere . In practice , this means that installing a new content type or content package is straightforward . For example , the Jsvee content type can be installed simply with the shell command : npm install acos - jsvee . 3 . 5 . User viewpoints to the system When it comes to Acos , three different stakeholders can be considered : instructors , for whom Acos is a content repository and a tool to create new content ; learners , who complete and use the content offered ; and developers , who implement new content types and add support for additional protocols . 3 . 5 . 1 . Instructor . Instructors will see Acos as a repository of exercises and other activities because the internal architecture of the server is not relevant for them . Instructors can visit the server home - page and ﬁnd a listing of available smart learning content . Content can be browsed and tested easily in the browser . After the instructors have selected suitable content to use on a course , they can copy the content URLs and insert them in the LMS . The URL contains the activity name as well as the protocol used for integrating the content with the LMS . It is easy to share the content with other instructors by providing a direct link to the contents . This approach allows the selection of the most suitable material for the course and mixing various content types . 3 . 5 . 2 . Developer . From the developers’ point of view , there are three different task categories : implementing a new protocol , implementing a new content type , or adding more content to an exist - ing content type . These are separated so that , for example , a developer creating new content does not have to think about the protocols ; similarly , a protocol developer does not have to know about the content that will use the protocol . This separation without any dependencies between the oper - ations allows easier and more efﬁcient development processes because developers do not have to know all the details of the system . Creating a new protocol , in order to enable communication between an existing LMS and Acos , is perhaps the most demanding task . To create a new protocol , the developer must deﬁne what kind of parameters the LMS will send to a server when an exercise is launched and how the results are submitted back . Typically , in online learning activities , HTTP GET and POST are used for communication between the LMS and activities , and the protocol must implement this server - side communication . After the new protocol is deﬁned , all existing content is immediately usable with the new protocol . For a detailed description of the protocols , see Section 3 . 6 . Creating content is divided into two parts : content type packages and content packages . The purpose of content type packages is to provide general packages for a particular kind of content ( e . g . , Jsvee ) , which are required to show the content . The content type package provides the shared libraries that are required by the content . Content packages contain the actual learning activities that rely on the libraries and common functionalities provided by the content type . In this way , there can be multiple content packages in which content is grouped , for instance , by themes and programming languages . Provided that the content type supports this feature , content package can be constructed in a way that the actual deﬁnition of an activity is fetched from an external URL given in the request . In this way , Acos will only host the libraries , but the content is hosted elsewhere . This allows to create content that makes use of the protocol support and the hosted libraries , but the content itself can be deﬁned anywhere and ﬂexibly customized . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen 3 . 5 . 3 . Learner . As opposed to instructors and developers , learners interact with Acos through an LMS . From the learners’ point of view , Acos could be replaced with any system that serves the learning activities . Additionally , the learner does not need to know anything regarding the protocols that are used between Acos and the LMS . Moreover , the learner is not aware of the system . 3 . 6 . Technical description In this section , we give a detailed overview of two common use cases for requests . The ﬁrst use case shows how a request for content is processed , and the second focuses on how results are submitted back to the LMS . In both cases , we ﬁrst technically describe how the content request process . After the techni - cal description , we demonstrate with a concrete example how this process works when a learner launches a Jsvee visualization activity in Moodle . 3 . 6 . 1 . Fetching Content . Here , we describe how the process works when content is requested from Acos . See Figure 4 to follow the description . The result is presented as HTML in Listing 1 after all the steps have been completed . Step 1 Learner opens an exercise page in a browser . The LMS knows that this exercise has content that will be fetched from Acos , and LMS returns an exercise page that contains an iframe element for the interactive content . The content URL of iframe will specify the protocol , content type , content package , and the requested activity . Learner opens a Jsvee visualization activity in Moodle . Moodle returns a page that has an iframe element for the visualization . Step 2 The browser sends a request to Acos to fetch the content . Acos receives the request and starts processing it . All three main components ( protocol , content type , and content package ) in steps 3 – 5 handle the request , and together produce a web page that contains JavaScript , CSS , and HTML required for the requested activity . The learner’s browser requests the content from Acos . The URL for the iframe speciﬁes that the LTI protocol is used to launch a Jsvee visualization called hello _ world . Step 3 The protocol package receives the request . The main responsibility for the package is to parse the LMS - speciﬁc information from the request , such as learner id and submission URL . As the server is stateless , this information must be stored in the HTML page as hid - den input ﬁelds , for example . It also adds to the response the protocol - speciﬁc client - side JavaScript that is used to submit the result back to the server . Acos starts generating the HTML response . First , the LTI protocol module receives the request . The learner id and submission URL provided by Moodle will be saved as hidden ﬁelds in the HTML response . The LTI module also adds a client - side JavaScript library that is needed for communicating back to Acos . Step 4 The Content type package receives the request and typically injects the required JavaScript libraries . Figure 4 . A high - level illustration of fetching content from Acos . The numbers refer to the steps in Fetching Content part of the process described in Section 3 . 6 . 1 . [ Colour ﬁgure can be viewed at wileyonlineli - brary . com ] Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER The content type package adds a script tag to HTML head section to include the main Jsvee library as well as the required CSS . Step 5 The content package receives the request . Similarly , with the content type package , the content package also injects JavaScript and HTML to the response that produces the requested activity . The content package adds a script tag to load the actual visualization that uses the Jsvee library . It also adds a div element to the HTML body that the Jsvee library will eventually replace with the actual visualization . Step 6 After the three core elements have processed the request , Acos has dynamically created an HTML page that contains the requested activity and all the session data that must be stored in order to submit the results back later . Acos sends this HTML page to the learner . Acos has processed the request and has generated an HTML page that will contain the requested activity , required libraries , and stylesheets . The visualization will appear inside Moodle in the learner’s browser . The result of the generated HTML page is shown in the following listing . Listing 1 . Produced HTML after all the three components have processed the launch request < ! DOCTYPE html > < html > < head > < ! (cid:2)(cid:2) Protocol , s u p p o r t f o r c l i e n t (cid:2) s i d e events , added in Step 3 (cid:2)(cid:2) > < s c r i p t s r c = " / s t a t i c / l t i / j q u e r y . min . j s " > < / s c r i p t > < s c r i p t s r c = " / s t a t i c / l t i / e v e n t s . j s " > < / s c r i p t > < ! (cid:2)(cid:2) Content type , added in Step 4 (cid:2)(cid:2) > < l i n k h r e f = " / s t a t i c / j s v e e / j s v e e . css " r e l = " s t y l e s h e e t " > < s c r i p t s r c = " / s t a t i c / j s v e e / j q u e r y . min . j s " > < / s c r i p t > < s c r i p t s r c = " / s t a t i c / j s v e e / JSVEE (cid:2) min . j s " > < / s c r i p t > < ! (cid:2)(cid:2) Content package , added in Step 5 (cid:2)(cid:2) > < s c r i p t s r c = " / s t a t i c / jsvee (cid:2) python / JSVEE (cid:2) python (cid:2) min . j s " > < / s c r i p t > < s c r i p t s r c = " / s t a t i c / jsvee (cid:2) python / JSVEE (cid:2) content (cid:2) min . j s " > < / s c r i p t > < l i n k h r e f = " / s t a t i c / jsvee (cid:2) python / jsvee (cid:2) python . css " r e l = " s t y l e s h e e t " > < / head > < body > < ! (cid:2)(cid:2) Protocol , s e s s i o n d a t a f o r sending grade back to Moodle (cid:2)(cid:2) > < ! (cid:2)(cid:2) Added in Step 3 (cid:2)(cid:2) > < i n p u t type = " hidden " name = " u s e r _ i d " value = " 4867962 " > < i n p u t type = " hidden " name = " l i s _ r e s u l t _ s o u r c e d i d " value = " { d a t a : { ’ i n s t a n c e i d ’ : 763 , ’ userid ’ : 4867962 , ’ launchid ’ : 2094073342 } , ’ hash ’ : ’ b60462f94 ’ } " > < i n p u t type = " hidden " name = " l i s _ o u t c o m e _ s e r v i c e _ u r l " value = " h t t p s : / / mymoodle / mod / l t i / s e r v i c e . php " > < ! (cid:2)(cid:2) Content package , c o n t a i n e r f o r the animation (cid:2)(cid:2) > < ! (cid:2)(cid:2) Added in Step 5 (cid:2)(cid:2) > < div c l a s s = " jsvee (cid:2) animation " data (cid:2) id = " h e l l o _ w o r l d " > < / div > < / body > < / html > Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen 3 . 6 . 2 . Submitting Results . After the learner has solved the exercise , the grade can be submitted back to the LMS . A similar process can be used to send any kind of data back to the LMS . We describe here how this process works . See Figure 5 to follow the description . Step 1 The activity in the browser sends an event by calling a JavaScript function . This event can be a logging or grading event , for example . When the activity was loaded , the protocol added a client - side JavaScript - library that has a protocol - independent interface for a function that the activity can call . The only requirement for the activity is the ability to call this function if two - way communication is needed . After the visualization has ﬁnished , Jsvee visualization calls the client - side sendEvent function to submit a grading event to Acos . Jsvee does not know that LTI protocol is used to launch the exercise , it only knows that the sendEvent function is available . Step 2 The client - side JavaScript protocol library in the browser receives the event . Before the event is sent to Acos , the client - side protocol library can add any needed session or protocol - speciﬁc data to it . When the client - side processing is ready , the event is sent as a normal HTTP POST request to Acos using AJAX . The client - side support for the LTI protocol handles the function call and receives the event . A browser searches for the learner id and submission URL which are required by the LTI protocol . These are found in hidden HTML ﬁelds and are attached with the original Jsvee event data . Finally , the browser sends the event to Acos . Step 3 Acos receives the event . All three main elements ( protocol , content type , and content pack - age ) can process the event . Some events are mainly handled by the content type ( e . g . , logging ) while others require input from all the main elements , such as grading events that require communication with the LMS . Acos receives the grading event . In this case , content or content type packages can simply ignore the grading event , and the protocol takes care of handling the event . Step 4 The protocol communicates with the LMS and the protocol knows what kind of commu - nication is required to establish a connection between Acos and the LMS . The protocol transforms the event into a suitable format and sends the message to the LMS . The LMS - speciﬁc session data is typically required when this kind of communication happens . The server - side support for the LTI protocol receives the event . It extracts the grade and the Moodle submission URL from the event . The protocol communicates with Moodle using the LTI protocol and pushes the grade to Moodle . Step 5 The LMS processes the event . If it is a grading event , the LMS stores the grade , which will be visible to the learner . Other custom events can cause different actions in the LMS , and it is up to the LMS to decide what kind of events it supports and how it will process them . Moodle receives the information that the learner has ﬁnished the activity and earned , for example , 5 points . Learner can see the grade in Moodle . Figure 5 . A high - level illustration of submitting results to Acos and an LMS . The numbers refer to the steps in Submitting Results part of the process described in Section 3 . 6 . 2 . [ Colour ﬁgure can be viewed at wileyonlinelibrary . com ] Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER 3 . 7 . API Acos provides an open RESTful API for developers or other users who want to retrieve the server content listing . This API can be used , for example , to integrate Acos with an LMS to allow instruc - tors to see all the server contents directly in the LMS without visiting Acos and in this way select the suitable content for their courses . The RESTful API provides endpoints to fetch listings contain - ing all the contents , contents for a speciﬁc content type or contents inside one content package . The API also provides a simple searching mechanism to ﬁnd relevant content using keywords . The API is designed to be general for servers hosting interactive learning content . For the queries to content brokering , the API returns the results in a machine - readable JSON format . 3 . 8 . Logging Acos can persist logging event data that online learning activities send from the user’s browser . The collected log data is important for educational research , data mining , and learning analytics . The content types can decide what kind of logging events they want to send and store . Logging events can be , for example , a sequence of user actions , while using the launched activity , and they are sent from the activity as any other events sent to Acos . If the log ﬁles should be tied to a particular course instance , online learning activities can be launched using a logging key as a part of the launching request . When the logging key is deﬁned , all the logging events with this key are stored in the same log storage . To fetch the stored log data , a secret counterpart of the logging key is used . In this way , the public key that can be read from the request cannot be used to fetch the data . Acos contains a tool for creating these keys . The instructor can freely choose which logging keys ( if any ) are to be used . For example , a course instance or a learning activity type could share a common key . In addition , the content types and protocols can store data to the server even if the logging key is not deﬁned . To protect privacy or for other reasons , storing any log data can be forbidden in the launch request . In this case , the browser does not send any logging events to the server . 3 . 9 . Additional tool support In addition to the smart learning content , Acos can also host tools which are aimed at instructors , such as those for creating more content . For Js - parsons , a generator is available as a tool which takes the given exercise code and produces a JSON ﬁle that can be hosted anywhere . Instructors can host this ﬁle and then use the content in their course by using a content type that loads the exercise deﬁnitions from an external source . In this way , instructors can easily create more content as well as share their smart learning content simply by sharing links . Another example of a tool that is designed for Jsvee . It can create program visualization from the given Python code . The language support is limited , but teachers can create new animations that support learning to program in introductory courses . The tool generates a ﬁle that can be stored in an external server and speciﬁed in the launch request . For a complete list of the currently available tools , see Table IV . 4 . EVALUATION OF THE SERVER ARCHITECTURE In this section , we go through the challenges outlined in Section 2 . 3 and discuss how Acos solves these problems . We present the different course contexts where the server has been used and cur - rently available contents for the server . We also overview how new content for the server can be created and review preliminary user feedback . Finally , we discuss the limitations of our approach . 4 . 1 . Addressing problem description 4 . 1 . 1 . Interoperability and Reusability . Brusilovsky et al . [ 2 ] have described ﬁve levels of learning management systems based on their ability to serve smart learning content . Two of the highest levels ( levels 4 and 5 ) contain such LMSs that can use external content using either some homemade Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen protocols or standardized protocols . Acos is designed to host content for an LMS that operates at these two highest levels . Solving the problem of interoperability and reusability is one of the main contributions of the Acos architecture . The core idea of the architecture is to separate the content and the communication protocols as explained earlier . The Acos server handles the communication between the content and an LMS , but the content developer does not have to know anything about the underlying protocols . Acos provides a uniform and protocol - independent interface that can be used by the developer . Our approach follows the recommended approach to create an adapter , as outlined by Brusilovsky et al . [ 2 ] . Acos has been used to provide content for multiple universities for their programming courses . Presently , we are aware that over 1300 students have used the learning activities at the following universities : (cid:3) Aalto University ( Finland ) (cid:3) Arizona State University ( USA ) (cid:3) Tampere University of Technology ( Finland ) (cid:3) Universidade Federal de Uberlândia ( Brazil ) (cid:3) University of Jyväskylä ( Finland ) (cid:3) University of Pittsburgh ( USA ) Currently supported protocols are listed in Table I . The activities have been mainly launched via the Mastery Grids interface [ 22 ] using the ADAPT2 protocol . The University of Jyväskylä has used the HTML protocol and embedded the content as iframes in course materials without any two - way communication . In addition , we have veriﬁed that the other implemented communication protocols work as well . We have tested the LTI protocol with two different LMSs which support LTI launch and also pass - ing of grades back using the LTI Outcomes Service . These LMSs are Moodle ( version 3 . 1 . 2 ) and Open edX ( version 20160414 ) . We have also veriﬁed that Acos works with the A + LMS using its A + protocol . As the integration results have been promising , we look forward to getting the server in use for more courses taking advantage of the online learning activities provided by the server . Although our main goal is to beneﬁt learners and instructors by making online learning activities reusable , our approach also has implications for learning analytics and research in smart learning content . Because of the architecture , activity records from learners from different institutions are stored in a single place in the same format , regardless of the protocol . This allows a straightforward creation of multi - institution research projects with different learning activities . Furthermore , the content types themselves deﬁne what information to log , which means that the relevant data for a particular content is stored , alongside with possible user information . 4 . 1 . 2 . Extensibility . Acos solves the problem of extensibility by its package architecture . Protocols , content types , and content packages are not tied together , and Acos can be extended by creating new protocols , content types , or content packages . The separation between protocols and content makes it easier for developers to create new content because the uniform internal Acos interface hides the implementation details of the interoperability protocols . In addition , the possibility to use hosted content elsewhere expands the potential use cases , and the uniquely identifying URL scheme enables easy sharing of created content by simply distributing URLs . Table I . Acos protocols packages with descriptions . Package name Description acos - aplus A + protocol support acos - html A protocol to support embedding online activities as simple HTML pages without communication to LMSs acos - lti LTI protocol support acos - pitt Support for communication with ADAPT2 - protocol LMS , learning management systems ; LTI , Learning Tools Interoperability . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER Tables II – IV later present the currently available content types , content packages , and addi - tional tools . All the code is available as open source from GitHub repositories : https : / / github . com / acos - server / [ packagename ] . Tables II – IV also list two currently unpublished packages : a new con - tent type for JSAV algorithm visualizations ( Section 4 . 2 ) , and a content package for Js - parsons exercises that focuses on gamiﬁcation of Js - parsons activities . 4 . 1 . 3 . Scalability . The stateless architecture of Acos reduces the memory usage of a server and provides high throughput . A single server can , therefore , serve a number of simultaneous learn - ers because all the operations are quite light - weight . For example , we stress - tested our production server by loading an exercise with Apache Benchmark with 10 , 000 requests using three concurrent requests , and 99 % of the requests were served under 80 ms . However , if the capacity of a single server is insufﬁcient , under a very heavy trafﬁc , multiple Acos instances can be installed on several servers to scale out the system . In case multiple servers are used , logging the learner activities need to be handled accordingly . If an online learning activity is stateless , the architecture and technical complexity of the system are greatly reduced . For instance , there is no need to worry about replicating session data across multiple servers . Furthermore , multiple identical servers can be used to serve different subsets of learners . Using a stateless architecture also simpliﬁes the system , which in turn makes it easier to develop and maintain . Table II . Acos content type packages with descriptions . Package name Description acos - annotated Annotated examples content type acos - combo Content type that combines Jsvee and Jsparsons exercises acos - jsav * Prototype for JSAV algorithm visualization activities acos - jsparsons Content type for Js - parsons code construction exercises acos - jsvee JSVEE content type * Unpublished package . Table III . Acos content packages with descriptions . # of Package name Description activities acos - annotated - demo Demo content for annotated examples content type 1 acos - combo - python Content package for Python combo exercises 11 acos - jsparsons - gamiﬁed * Js - parsons exercises that include gamiﬁcation 3 acos - jsparsons - python Adds Python exercises with Js - parsons 32 acos - jsparsons - python - custom Enables creating acos - js - parsons exercises that are n / a deﬁned as external JSON - ﬁle acos - jsvee - python - json Downloads the Jsvee animation from the given URL as JSON ﬁle n / a acos - jsvee - csharp Jsvee content package for C # animations 5 acos - jsvee - java Java examples for JSVEE 53 acos - jsvee - python Python examples for JSVEE 56 acos - kelmu Kelmu toolkit for creating augmentations n / a * Unpublished package . Table IV . Acos tool packages and descriptions . Package name Description acos - jsparsons - generator Generates JSON - ﬁles that are compatible with acos - jsparsons - python - custom acos - jsvee - transpiler - python Transpiles Python code to a format that Jsvee understands acos - kelmu - editor Editor for creating Kelmu annotations acos - logging - keygenerator Creates key pairs for logging acos - python - parser Extracts the used programming concepts in the given Python 3 code Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen 4 . 1 . 4 . Discoverability . To solve the issue of discoverability , Acos server can be seen as a central repository which hosts the activities to multiple LMSs . Instead of collecting activities from various servers , Acos makes the activity selection process easier for teachers if there is a large collection of activities in a single place . In Acos , teachers can easily browse all the available content and try them out . In addition to the browser interface for searching content , Acos offers a content brokering API , which can be used to retrieve the information about the available content . By using this API , it is also possible to integrate Acos to allow teachers to search content within an LMS instead of visiting the Acos . 4 . 2 . Integrating new content This subsection describes how new content can be integrated into Acos . First , we overview the process , after which we describe a concrete case with code examples . 4 . 2 . 1 . Integration in General . The very ﬁrst step of integrating new content for Acos requires an existing online learning activity available that is implemented in JavaScript and can be indepen - dently used in the browser . This means that it should be possible to create a simple web page that contains the activity which is usable but does not yet support any communication with an LMS . Here , we focus on the integration procedure instead of content creation . For integration , there are server - side and client - side tasks to be done . In the server - side , it should be possible to separate the common activity parts and activity - speciﬁc content . These form the content type package and content package for Acos . The content type package provides the envi - ronment , such as the JavaScript - libraries and CSS , needed by the activities . The content package provides the actual activities . The result of the server - side code is an HTML page that contains the markup required by the exercise , as described in the Fetching Content part in Section 3 . 6 . More detailed instructions for creating these packages are available in the documentation : https : / / github . com / acos - server / acos - server / blob / master / doc / development . md . To implement the communication with the LMS , the activity must support the LMS - independent protocol provided by Acos , which is a part of the client - side JavaScript code . Typically , the content is constructed in such manner that there is a function which is called after a task is completed or a student asks for feedback . In this function , the content can call the message passing function , which Acos provides for submitting the grade . For details , see the Submitting Results part in Section 3 . 6 . 4 . 2 . 2 . Practical Example . The two content types , Jsvee and Js - parsons , were implemented to Acos during the implementation of the server itself . To verify the ﬂexibility and extensibility of the archi - tecture , we tested the Acos architecture by implementing a new content type and some content for it . Based on needs of our local courses , we chose the JSAV library [ 3 ] , which provides a framework to create algorithm visualization and simulation exercises with JavaScript . The actual content type for JSAV exercises only adds the necessary JSAV and other libraries to the loaded page . For the content , a tutorial in the JSAV documentation was chosen : https : / / jsav . io / exercises / tutorial - exercise / – Creating a Proﬁciency Exercise with JSAV . The tutorial consists of a HTML and JavaScript part , which the content package loads . The only additions required by the provided tutorial code were to integrate the sending of grades through Acos , as detailed in code listing 2 . JSAV provides a functionality where the grading of an exercise can be implemented in a custom function , which signiﬁcantly simpliﬁes the implementation . Listing 2 . Modiﬁcation to the tutorial code to enable grading with Acos / (cid:4) Defining a f u n c t i o n to handle grading e v e n t s (cid:4) / f u n c t i o n acosShowGrade ( ) { var grade = t h i s . grade ( ) / / Request p o i n t s from JSAV ACOS . sendEvent ( " grade " , { p o i n t s : grade . c o r r e c t , max _ points : grade . t o t a l } ) ; } Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER / (cid:4) Code given in the t u t o r i a l (cid:4) / var e x e r c i s e = av . e x e r c i s e ( modelSolution , i n i t i a l i z e , { feedback : " c o n t i n u o u s " , compare : { c l a s s : " j s a v h i g h l i g h t " } } ) ; / (cid:4) Modified code to i n t e g r a t e grading with Acos (cid:4) / var e x e r c i s e = av . e x e r c i s e ( modelSolution , i n i t i a l i z e , { feedback : " c o n t i n u o u s " , showGrade : acosShowGrade , / / A s s o c i a t e the f u n c t i o n with JSAV compare : { c l a s s : " j s a v h i g h l i g h t " } } ) ; Similarly , in order to log student activities to the Acos server , for instance , to be used in learning analytics later on , a small wrapper is written to pass the log events to Acos . JSAV provides events when a student does something , for example , clicks an element in an array or requests grading . Therefore , the implementation of logging is straightforward , as shown in Listing 3 . Listing 3 . Addition to the tutorial code to enable logging with Acos $ ( document ) . ready ( f u n c t i o n ( ) { $ ( " body " ) . on ( " jsav (cid:2) log (cid:2) event " , f u n c t i o n ( event , eventData ) { / / Send a l l JSAV e v e n t s to Acos f o r logging ACOS . sendEvent ( " log " , eventData ) ; } ) ; } ) ; As mentioned earlier , the code in the server - side content type module just adds relevant JavaScript libraries to the page sent to the user and otherwise only deﬁnes Acos metadata ( e . g . , package type , name , and author ) . Similarly , the code in the content package only describes the metadata and serves the ﬁnal exercise page . The implementation of the JSAV content type and the content package were created from scratch and completed in an afternoon with very little previous experience in JSAV . The example shows the lightweight additions content developer needs to do in order to integrate content with Acos . These additions enable using the content with any LMS and interoperability protocol supported by Acos . Detailed speciﬁcations are described in the developer documentation : https : / / github . com / acos - server / acos - server / blob / master / doc / development . md 4 . 3 . Preliminary feedback We collected feedback from instructors and developers currently using the Acos architecture . Because students only use Acos through an intermediary LMS , feedback was not gathered from them – students would only have become aware of the server in case it malfunctioned , which has not occurred yet . At the moment , we have only gathered general opinions and thoughts regarding the server architecture , although we plan on conducting a more formal user evaluation in the future , once more developers have integrated their content into our architecture . Overall , the feedback has been positive gathered from ﬁve collaborators who have participated in this project . After noting the ease of technical integration , one instructor highlighted the pedagogical issues of reusing online learning activities : ‘A problem is differences in opinions on what and how to teach [ regarding particular CS concepts ] ’ ( translated ) . This is an important point that although the problem can be technically solved , there are still important pedagogical considerations . Ease of integration was also mentioned in another instructor comment , as well as , the low latency of loading exercise : ‘Integrating [ Jsvee ] with Mastery Grids infrastructure was straightforward , and they load quickly in the browser , which is important considering that they are hosted in Finland ( I used [ Jsvee ] in my classes in University of Pittsburgh ) . ’ In addition to instructors , we interviewed one developer who has been working on a new content type for Acos . Mostly , he had many positive comments , especially regarding implementation of new Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen content and how little code was needed to implement a working prototype . He also felt strongly that there is a dire need for this type of interoperability solution . There was also some critique regarding the architecture , more speciﬁcally , on how the content type and content packages work together . He had a use case where the content package should contain no code , and thus the content could be implemented by an instructor who does not know any programming . He additionally noted that although the documentation ( available from GitHub ) for the architecture was good , too much of the internal server architecture was exposed to the developer . To provide another developer viewpoint , we requested his comments via email . He also high - lighted the ease of development : ‘Usability of the framework is very important as a developer to quickly follow the agile developmental approach to come up with the ﬁrst running version of the application is minimum amount of time , which ACOS server efﬁciently delivers . ’ He also mentioned the beneﬁts of working with widely - used technologies : ‘ [ Acos ] follows a standard architecture which rests on a popular Node . Js framework . This simpliﬁes the content creation to a great extent . ’ Although our main focus was on interoperability , which was also reﬂected in the feedback , there was one additional theme that one instructor pointed out . He also works as a researcher and empha - sized the importance of logging features that are brieﬂy described in Section 3 . 8 . He stressed how collecting log data provides a rich data source for various research settings and how Acos has already been useful in this regard . 4 . 4 . Limitations Because Acos is stateless , all the data needed to pass the grade back to the server is stored in the learner’s browser . As a result , the learner may tamper with this data or modify the requests between the browser and Acos . However , as long as the exercise is graded in the browser , there is always a possibility to cheat the grading system by fabricating data on the client side . Therefore , we decided not to focus on this issue . If a more secure grading solution is required , the Acos architecture allows writing a server - side checking system for the content . In addition , stemming from the stateless design , we do not support group work or collaborative assignments because that would require storing data on the server . While this is an issue in some cases , we do not see this is a major problem because the currently supported learning activities focus on small individual exercises . Because Acos takes care of the logging , if supported by the content type , this might cause privacy issues . These issues are mitigated in two ways . The ﬁrst option is that everyone can easily set up their own server and administrate the logged data . Another option is to turn off the logging feature while adding an exercise to the LMS by providing an optional parameter in the launch URL . 5 . CONCLUSIONS This article discusses how we have designed and developed Acos , a smart learning content server which can be used to embed content into various learning management systems . We have identiﬁed four main problem areas which served as design guidelines during the implementation process . The architecture of the Acos server is designed to be modular in order to decouple the contents and communication protocols , and to provide an easy way to extend the server . Typically , when smart learning content is being developed , one design goal is to think how to integrate the content to the available LMS . With our approach , developers can use more time on developing the learning contents and let Acos handle the communication between the con - tent and LMS . Our generic solution offers a ﬂexible approach to produce reusable smart learning content . As Rey - López et al . [ 16 ] noted , both standard and homebrew protocols have their limita - tions . Acos overcomes these limitations by supporting both kinds of approaches by decoupling the protocols from contents . Acos is the ﬁrst concrete implementation of the adapter architecture orig - inally proposed by a large working group , which focused on increasing adoption of online learning activities [ 2 ] . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe IMPROVING ONLINE LEARNING ACTIVITY INTEROPERABILITY WITH ACOS SERVER The real world usage experience shows that the designed architecture is suitable and works well . More importantly , implementing new content types has proven to be straightforward , and we have multiple authors creating new content for the service . As developers commented , Acos provides an easy way to quickly prototype new kinds of content . As an example of this , we piloted Acos as a way to provide gameful exercises and gamiﬁcation in addition to traditional exercises to increase the variety of learning contents . As also pointed out in the user feedback , logging is crucial for educational research , and perhaps it should have been included as one of the main problem areas . Acos already supports logging in multiple ways , but one of our future plans is further develop the logging features . However , implementing technical solutions to increase interoperability is insufﬁcient if there is a lack of community adoption . Our overall goal is that a wider variety of smart learning content would be usable for a greater number instructors . By providing a system that can take care of the technical details of communicating with different learning management systems , we hope that more rich online experiences can be developed and readily adopted . ACKNOWLEDGEMENTS This work is supported by the Advanced Distributed Learning ( ADL ) Initiative . The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the ofﬁcial policies , either expressed or implied , of the Department of Defense or the Joint Staff . REFERENCES 1 . IMS Global Learning Consortium . Learning tools interoperability , 2010 . Available from : https : / / www . imsglobal . org / toolsinteroperability2 . cfm . [ Accessed 2016 - 05 - 17 . ] 2 . Brusilovsky P , Edwards S , Kumar A , Malmi L , Benotti L , Buck D , Ihantola P , Prince R , Sirkiä T , Sosnovsky S , Urquiza J , Vihavainen A , Wollowski M . Increasing adoption of smart learning content for computer science edu - cation . Proceedings of the Working Group Reports of the 2014 on Innovation & Technology in Computer Science Education Conference , ITiCSE - WGR ’14 , ACM , New York , NY , USA , 2014 ; 31 – 57 . 3 . Karavirta V , Shaffer CA . JSAV : The JavaScript Algorithm Visualization Library . Proceedings of the 18th ACM Conference on Innovation and Technology in Computer Science Education , ITiCSE ’13 , ACM , New York , NY , USA , 2013 ; 159 – 164 . 4 . Sirkiä T . Jsvee & Kelmu : Creating and Tailoring Program Animations for Computing Education . Software Visualization ( VISSOFT ) , 2016 IEEE 4th Working Conference on , Raleigh , NC , USA , 2016 ; 36 – 45 . 5 . Ihantola P , Karavirta V . Two - dimensional parson’s puzzles : the concept , tools , and ﬁrst observations . Journal of Information Technology Education : Innovations in Practice 2011 ; 10 : 1 – 14 . 6 . Kumar AN . Results from the evaluation of the effectiveness of an online tutor on expression evaluation . Proceedings of the 36th Sigcse Technical Symposium on Computer Science Education , SIGCSE ’05 , ACM , New York , NY , USA , 2005 ; 216 – 220 . 7 . About Moodle . Available from : https : / / docs . moodle . org / 30 / en / About _ Moodle [ Accessed : 2016 - 05 - 17 ] . 8 . Blackboard Learn . Available from : https : / / www . blackboard . com / learning - management - system / blackboard - learn . aspx [ Accessed : 2016 - 05 - 17 ] . 9 . Canvas . Available from : https : / / www . canvaslms . com / [ Accessed : 2016 - 05 - 17 ] . 10 . About Open edX . Available from : https : / / open . edx . org / about - open - edx [ Accessed : 2016 - 05 - 17 ] . 11 . Karavirta V , Ihantola P , Koskinen T . Service - oriented approach to improve interoperability of e - learning systems . Advanced Learning Technologies ( ICALT ) , 2013 IEEE 13th International Conference on : IEEE , Beijing , China , 2013 ; 341 – 345 . 12 . Dagger D , O’Connor A , Lawless S , Walsh E , Wade V . P . Service - oriented e - learning platforms : from monolithic systems to ﬂexible services . Internet Computing , IEEE 2007 ; 11 ( 3 ) : 28 – 35 . 13 . Fontenla J , Caeiro M , Llamas M . A SOA architecture to improve the tailorability and extensibility of e - learning systems . IEEE Latin America Transactions 2010 ; 8 ( 2 ) : 135 – 140 . 14 . Fincher S , Petre M . Computer Science Education Research . CRC Press : New York , NY , USA , 2004 . 15 . Allison C , Miller A , Oliver I , Michaelson R , Tiropanis T . The web in education . Computer Networks 2012 ; 56 ( 18 ) : 3811 – 3824 . 16 . Rey - López M , Brusilovsky P , Meccawy M , Díaz - Redondo R , Fernádez - Vilas A , Ashman H . Resolving the problem of intelligent learning content in learning management systems . International Journal on ELearning 2008 ; 7 ( 3 ) : 363 – 381 . 17 . Alario - Hoyos C , Bote - Lorenzo ML , Gómez - Sánchez E , Asensio - Pérez JI , Vega - Gorgojo G , Ruiz - Calleja A . GLUE ! : an architecture for the integration of external tools in virtual learning environments . Computers & Education 2013 ; 60 ( 1 ) : 122 – 137 . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe T . Sirkiä , and L . Haaranen 18 . Brusilovsky P . KnowledgeTree : a distributed architecture for adaptive e - learning . Proceedings of the 13th Inter - national World Wide Web Conference on Alternate Track Papers & Posters : ACM , New York , NY , USA , 2004 ; 104 – 113 . 19 . Orduna P , Uribe SB , Isaza NH , Sancristobal E , Emaldi M , Martin AP , DeLong K , Bailey P , López - de Ipina D , Castro M , et al . Generic integration of remote laboratories in learning and content management systems through federation protocols . 2013 IEEE Frontiers in Education Conference ( FIE ) , IEEE , Oklahoma City , OK , USA , 2013 ; 1372 – 1378 . 20 . Hernández - Leo D , Asensio - Pérez JI , Derntl M , Prieto LP , Chacón J . ILDE : community environment for concep - tualizing , authoring and deploying learning activities . European Conference on Technology Enhanced Learning , Springer , Graz , Austria , 2014 ; 490 – 493 . 21 . Gamma E , Helm R , Johnson R , Vlissides J . Design Patterns : Elements of Reusable Object - Oriented Software . Addison - Wesley Professional : Boston , MA , USA , 1994 . 22 . Loboda TD , Guerra J , Hosseini R , Brusilovsky P . Mastery grids : an open source social educational progress visualization . Springer International Publishing : Cham , 2014 . Copyright © 2017 John Wiley & Sons , Ltd . Softw . Pract . Exper . ( 2017 ) DOI : 10 . 1002 / spe