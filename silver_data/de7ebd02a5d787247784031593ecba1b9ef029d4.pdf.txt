Learning Abstraction in Computer Science : A Gender Perspective David Statter Michal Armoni Weizmann Institute of Science , Rehovot , 76100 , Israel { david . statter , michal . armoni @ weizmann . ac . il } ABSTRACT In a previous study , we investigated a framework for teaching abstraction in computer science ( CS ) in the context of an introductory CS course for 7 th - grade students . The framework was found effective for developing CS abstraction skills . In this paper , we describe a study that investigated teaching abstraction in CS to 7 th - grade students through the perspective of gender . Specifically , we compared the CS abstraction abilities of boys and girls taking the introductory CS course in 7 th grade ( using the Scratch environment ) . We also examined the difference in the effect of the teaching strategy on CS abstraction abilities between boys and girls . Our findings show a significant advantage of girls over boys regarding several aspects of CS abstraction . We also found that the framework for teaching CS abstraction , which was already established in our previous study as effective in the context of an introductory course for 7 th - grade students , has an enhanced effect in this context when it comes to girls . This enhancement was manifested by a better overall performance by the girls , when comparing boys and girls that took an introductory CS course in which this framework was used . It was also manifested by the girls ' deeper and more reliable perception of CS . We conjecture that this framework has the potential to affect girls ' self - efficacy , and as a result to create a positive effect by encouraging and motivating girls to pursue CS education beyond this introductory course . That is , this framework has the potential to contribute to solving the issue of underrepresentation of females at the different stages of CS education , or in other words , to widening the CS pipeline for females . CCS Concepts • Social and professional topics ➝ K - 12 education • Social and professional topics ➝ Computer science education Keywords Gender ; Abstraction ; ANOVA ; problem - solving ; Scratch 1 . INTRODUCTION There are many different fundamental ideas of CS , as defined by Schwill [ 38 ] , following Bruner [ 10 ] , for example , recursion , non - determinism , reduction , and modeling . However , many of these ideas can be viewed as manifestations of one fundamental idea that is in a sense the essence of CS , the idea of abstraction . Aho and Ullman described CS as a “science of abstraction – creating the right model for thinking about a problem and devising the appropriate techniques to solve it” ( [ 2 ] , p . 1 ) . CS abstraction was acknowledged as a fundamental CS idea from the early days of CS as an independent discipline . For example , Dijkstra said that “the effective exploitation of his powers of abstraction must be regarded as one of the vital activities of a competent programmer” ( [ 17 ] , p . 864 ) . Knuth , when talking about “natural computer scientists” said that “they are individuals who can rapidly change levels of abstraction , simultaneously seeing things ‘in the large’ and ‘in the small’” ( [ 26 ] , p . 39 ) . Yet , abstraction constitutes a teaching challenge , since like other fundamental ideas that are general by nature , abstraction can also be viewed as a soft concept [ 15 , 42 ] , which can be characterized and referred to in multiple ways . One such view is expressed in the work of Hazzan and Tomayko [ 28 ] , who identified three ways to use abstraction . We elaborate on and exemplify each of them : ( i ) By observing what a group of objects have in common and ignoring irrelevant differences between them . This could lead to a new mathematical definition , a new interface or abstract class in an object - oriented design , and so on . In this case abstraction is used to generalize an idea or an object . A good example is the Marsupial family ( animals that carry their babies in a pouch ) , to which both the Koala and the Kangaroo belong . Other examples arise easily in any design pattern framework . For more information and design examples , see [ 23 ] . ( ii ) One can use various levels of abstraction in a natural language to describe a solution . In this case , abstraction is used , for example , to distinguish between an algorithm and the program , or to enable the programmer to discuss the requirements and the solution without committing herself to a specific programming language . That is , abstraction is used to simplify the problem and the solution at hand while focusing on the core and ignoring details that are irrelevant for that stage of the discussion . ( iii ) Abstraction can be used to describe objects by their characteristics and not by the way they are constructed or how they work . That is , one sees the “what” and not at the “how” . Take , for example , Java . util ( probably the most useful package in Java ) , which includes the class ArrayList with this description : Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than ACM must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from Permissions @ acm . org . WiPSCE ' 17 , November 8 – 10 , 2017 , Nijmegen , Netherlands © 2017 Association for Computing Machinery . ACM ISBN 978 - 1 - 4503 - 5428 - 8 / 17 / 11… $ 15 . 00 https : / / doi . org / 10 . 1145 / 3137065 . 3137081 5 WIPCSE , November 2017 , Nijmegen , Netherlands D . Statter and M . Armoni “Implement List , RandomAccess , Iterable” [ 30 ] . The ArrayList class is described by its characteristics and by the actions it performs ( the “what” ) , i . e . , implementing a random - access list , and not by the way it implements this ( the “how” ) . This is what computer scientists call the black - box approach , which is considered a highly important design tool . Another classic example would be algebraic structures such as groups or rings . We define them only by their properties . One can have good intuition about the concept of a group by considering the numbers 0 , 1 , 2 , and the operation of addition modulo 3 , but an understanding of this concept should be based on the abstract formal definition . Only then is it possible to see , for example , why permutations , or the symmetric group of a regular polygon , are groups , and internalize the meaning of the definition . In a previous work [ 40 , 41 ] , we reported on the implementation of a new framework [ 3 ] for teaching CS abstraction in the context of an introductory CS course for 7 th - grade students . Our findings indicated that the corresponding teaching strategy significantly improved students ' CS abstraction skills , as well as other aspects of their performance , and also influenced their perception of the nature of CS . Following some preliminary findings that emerged during the analysis of the data collected for the study , we decided to analyze it also from the perspective of gender . In this paper we report on the results of this analysis . The issue of gender and the increasing underrepresentation of female students , starting from junior high - school to college , was addressed in many studies and publications ( see [ 22 ] and references therein ) . In many countries , the number of female CS students is much smaller than that of males and the corresponding ratio is declining throughout the stages of CS education [ 8 , 19 , 22 , 31 ] . Another issue is that the extent of enrollment in higher - education computing programs is insufficient to meet the employment demands [ 12 , 44 ] . This problem ( termed the shrinking pipeline in [ 11 ] ) was also addressed by many , and currently it is widely agreed that it is important to expose young students to the discipline of CS as early as possible . Early exposure can impact students ' perception of CS as well as their attitudes and intentions regarding it before these are set , and before students choose their majors in high school or college [ 7 , 21 ] . In addition , in line with Bruner ' s educational theory [ 10 ] , early exposure , if implemented within a spiral curriculum , can promote meaningful learning . The results of the study described here can be used to design an effective early exposure to CS , in both these aspects , and for both genders . In the next section we describe the background for this study , including relevant literature . Section 3 presents the research objectives , research questions , and methodology . Section 4 presents the findings and in Section 5 we discuss the results . 2 . LITERATURE REVIEW Teaching abstraction in CS is by no means an easy task . The research literature reports on various difficulties students encounter regarding CS abstraction , and discusses how and when to teach abstraction in CS . Armoni and Gal - Ezer studied students ' difficulties in the context of a computational models course by examining the perception of reduction [ 5 ] and non - determinism [ 6 ] . They found that students tended to avoid using the abstract ideas of reduction and non - determinism in solving tasks , even in cases when exploiting these ideas could lead to much more elegant and even easier solutions . Or - Bach and Lavy [ 35 ] examined abstraction in the narrow context of abstract classes in object - oriented programming . In examining how students of CS1 handle abstract classes and polymorphism , they found that most students had problems reaching the desired level of abstraction . Students tended to avoid using the full power of abstract classes , thus they often had to duplicate a code instead of reusing it . Haberman [ 24 ] found that students felt less comfortable with an algorithm that had a high level of abstraction . However , more advanced students felt more comfortable with abstract algorithms than did less advanced students . This indicates that during CS training , students learn some of the skills needed to handle abstract programs . This does not mean , however , that they have reached the desired level of abstraction . Similar results were reported by Perrenet , Groote , and Kaasenbrood [ 36 ] . They defined a hierarchy of abstraction levels and used it in two consecutive studies [ 36 , 37 ] as a tool for assessing students ' levels of abstraction regarding the concept of a solution to an algorithmic problem , i . e . , an algorithm . This hierarchy was defined as follows : Level 1 : The lowest level is the execution level , at which a solution to an algorithmic problem is viewed as a specific run on a specific input and a specific concrete machine . The execution time and the results of this run are determined by the specific machine and input . Level 2 : At the program ( process ) level , a solution to an algorithmic problem is considered a process , described by a specific executable program written in a specific programming language . Level 3 : At the object level , an algorithm is considered an object that is not associated with a specific programming language . At this level , complexity measures such as time , space , and random inputs become relevant , and are measured in terms of magnitude functions that depend on input length . Level 4 : The highest level is the problem level . At this level , one can reason about an algorithm in terms of the problem it solves , which is an independent object that is not associated with a specific solution and has characteristics and attributes of its own , such as solvability or complexity . At this level , one can deal with a solution to a problem as a black box . For example , discussing the sorting problem and proving a nlog ( n ) lower bound for it is at Level 4 , whereas QuickSort is at Level 3 . Implementing QuickSort in Java is at Level 2 , and running this program on the input ( 2 , 3 , 1 ) is at Level 1 . This hierarchy ( hereafter referred to as the PGK - hierarchy ) is relevant to many contexts in CS and is a central component in various aspects of this research . In terms of the PGK - hierarchy , achieving high abilities of CS abstraction means , among other things , being aware of all the levels of the hierarchy and being 6 Learning Abstraction in Computer Science : A Gender Perspective WIPCSE , November 2017 , Nijmegen , Netherlands able to move between them freely and consciously , while constantly recognizing the proper level at which to work . Since , as noted above , several studies have shown that CS abstract thinking is acquired and improved to some extent through CS teaching [ 24 , 36 , 37 ] , and yet many students do not reach the desired levels [ 1 , 24 , 36 , 37 ] , a relevant and important question is how can one effectively teach abstraction . There are a few approaches for addressing this question , ranging from a completely indirect way , as recommended by Kramer [ 32 ] , who claimed that abstraction can be implicitly derived from teaching mathematics and modeling , to a very explicit way of teaching and illustrating abstraction through every level of education , as recommended by Hazzan [ 27 ] . In our previous [ 40 , 41 ] and current work , we investigated the explicit approach for teaching abstraction , namely , emphasizing abstraction , while explicitly demonstrating and referring to it . We did that by examining the teaching framework presented and rationalized in the theoretical work of Armoni [ 3 ] . This framework is based on the PGK - hierarchy for guiding the teaching process as well as stating its objectives . We summarize here three of the general guidelines of the teaching methodology of this framework , and refer readers to [ 3 ] , for a deeper , as well as contextualized and rationalized presentation of the complete framework : 1 . Be persistent and precise : instructors should be aware of which abstraction level they work at , and should clearly ( even meticulously ) distinguish between the levels , to make students aware of the current level of abstraction , and when it is changed . 2 . Use linguistic components as an aid to distinguish between levels . For example , in the context of Scratch , restrict the use of the word “repeat” , which is used in the corresponding Scratch blocks , to Level 2 , and at higher levels use various words or phrases , such as “perform until” . Similarly , problems belong to Level 4 , whereas algorithms belong to Level 3 ; therefore , at level 4 one will use the word “sort” , whereas the use of specific names of sorting algorithms , such as QuickSort , belongs to Level 3 . 3 . Order from high to low : all discussions start from higher levels of the hierarchy ( starting with Level 4 of the problem ) and then start oscillating between the levels as appropriate , going down to lower levels only when a more concrete treatment is required . As Dijkstra put it ( [ 18 ] , p . 1 ) , “ [ T ] his oscillation between ‘the representation’ and ‘what it stands for’ is an intrinsic part of the programmer ' s game , of which he had better be aware ! ( It could be also this oscillation , which makes programming so difficult for people untrained to switching between levels . ) ” . Working at Level 3 before going down to Level 2 can be viewed as an implementation of top - down program design , but this guideline is broader than a mere recommendation for using a top - down approach . It stresses Level 4 , which students often neglect , immediately turning to solving a problem which often they do not fully understand . It also stresses the oscillation , that is , not clinging to a lower level upon arriving to it , but instead going up again to a higher level when appropriate ( for example , going up to Level 3 after a bug was observed at Levels 1 and 2 , to understand its origin and improve the algorithm accordingly ) . In fact , top - down program design can be viewed as an expression of the broader , conceptual idea of CS abstraction . The remaining guidelines , with more details and examples , can be found in [ 3 ] . This paper focuses on gender in the context of a junior - high - school introductory CS course . In this context , a very relevant aspect is students ' verbal abilities . As described in [ 14 ] , more than a hundred studies on gender differences regarding verbal abilities at different ages have been reported in the literature . Although it is commonly accepted that girls have better verbal skills , nevertheless , the results are not clear . For example , Halpern [ 25 ] found that on average , girls tend to perform better than boys on a wide range of verbal variables , including fluency and syntax . In a meta - study , Hyde and Linn [ 29 ] analyzed 165 different publications , and their results showed no significant advantage of girls over boys regarding verbal abilities , although some of these reviewed publications did indicate such an advantage . On the other hand , Weiss et al . , who studied the differences between males and females regarding cognitive functions , argued , based on their literature survey , that “Common linguistic skills , in which females have been found to be superior , are verbal fluency , speech articulation , grammatical skills , and use of more complex and longer sentences” ( [ 43 ] , p . 864 ) . Maccoby and Jacklin analyzed 85 studies dealing with the verbal abilities of boys and girls and concluded that “At about age 11 , the sexes begin to diverge , with female superiority increasing through high school and possibly beyond . Girls score higher on tasks involving both receptive and productive language , and on ‘high - level’ verbal tasks ( analogies , comprehension of difficult written material , creative writing ) as well as on the ‘lower - level’ measures ( fluency ) . The magnitude of the female advantage varies , being most commonly about one - quarter of a standard deviation” ( [ 33 ] , p351 ) . 3 . THE RESEARCH 3 . 1 The Research Questions The study described here was part of a wider study , which aimed at investigating the effect of explicitly teaching CS abstraction to 7 th - grade students using Armoni ' s framework [ 3 ] . Motivated by some differences between boys and girls that emerged during the analysis , we added the following research questions that were at the focus of the current study : 1 . Do boys and girls that study an introductory CS course in 7th grade differ regarding their CS abstraction skills ? 2 . Is the impact of Armoni ' s framework for teaching abstraction in CS , when integrated into an introductory CS course for 7th grade , different for boys and girls ? 3 . 2 Measuring Abstraction To tackle the challenging task of measuring abstraction , we identified a few characteristics of a solution process that indicate 7 WIPCSE , November 2017 , Nijmegen , Netherlands D . Statter and M . Armoni the use of abstraction . Based on these characteristics , we defined the following dimensions , which we used to measure abstraction . Writing a verbal description : In the textbook that was used in the introductory course [ 4 ] , the intuitive term “verbal description” is used instead of the scientific term , algorithm . This was motivated by the young age of the students , and the intent to focus on the essence of the introduced concepts , and not necessarily to incorporate the corresponding “professional” terms . Creating a verbal description before writing a script is an expression of preplanning as a preliminary phase of the solution process . Obviously , as directly follows from the definition of the PGK - hierarchy , writing a verbal description constitutes clear evidence for working at Level 3 . Writing a verbal description , as a first step in the solution process , expresses the understanding that solving an algorithmic problem is encapsulated in Level 3 , and that programming is an implementation of Level - 3 solutions at a more concrete level . Providing only a verbal description : In some of the questions in the post - test the students were asked to describe a solution ( an example is Question 6 , described in Section 3 . 4 ) . Consequently , when solving these questions , the students could choose to provide only a verbal description as a solution ( rather than presenting a verbal description with a complete Scratch script , or even providing only a complete Scratch script ) . This yields a more concise answer , which is clearly on a higher level of abstraction ( Level 3 rather than Level 2 ) . Recognizing that a verbal description is sufficient also indicates a higher level of abstraction , acknowledging that a Level - 3 description manifests a solution to an algorithmic problem . Explaining the solution : An explanation to a solution [ 39 ] , which also justifies its correctness , can also serve as evidence for abstraction . In order to provide such an explanation , the students must examine the problem from a higher level of abstraction , and work at Level 3 and even Level 4 . Note that this explanation need not be written before the script is written , as is the case with preplanning in the form of a verbal description . However , both demonstrate the ability to describe the solution at a high level of abstraction , Level 3 . Using black - box arguments : In CS , a black - box argument means taking an algorithmic solution for a certain problem as an input - output mechanism ( without any knowledge of its internal details ) , and using it to solve another problem . For example , as part of designing a solution to the searching problem , one can use a solution to the sorting problem without actually knowing how it was implemented and which algorithm is being used . In order to use a block - box argument , one must be able to think about what that part of the algorithm does , rather than how it does it . Thus , by using a black - box argument the students exhibit high abstraction ability , moving from an algorithm ( a Level - 3 - specified solution ) to an unspecified tool that serves as a solution for the given problem ( Level 4 ) . Initialization : In Scratch , an environment that emphasizes spatial behavior of sprites , initialization is beyond the traditional setting of initial values to variables , and it involves sprites ' attributes ( e . g . , location , direction , and costume ) and other parameters such as the background of the stage . Including an initialization phase indicates an understanding that every script is an entity that can be executed many times ( thus , an execution can be affected by previous executions unless appropriate initialization is performed ) . Using initialization and understanding the need for it reflect working at Level 2 and above , whereas neglecting initialization indicates working at Level 1 ( considering only a single execution ) . Thus , a good initialization process indicates understanding and perceiving a program as an object that will be executed over and over again with different inputs . Therefore , we also measure the use and quality of initialization within the Scratch solutions . Level of abstraction : Some of the measures above ( for example , using black - box arguments and providing verbal descriptions ) constitute clear evidence for working at certain levels of abstraction , which , according to the literature , students tend to neglect . However , good abstraction skills are also reflected in the ability to move freely between levels of abstraction , and in a meta - layer of being aware of the abstraction level at which one is currently working , and of the transitions between abstraction levels . Basic CS knowledge , Scratch programming : We assume that since abstraction is a fundamental idea of CS , abstract thinking , expressed in better abstraction skills , will lead to better overall CS performance , that is , to higher achievements in CS performance tests . This measure expresses one aspect of CS performance that is relevant to this course , namely , how students answered simple Scratch questions . Although this is a relatively simple skill , it still represents a certain level of CS performance . A higher level is expressed by another measure , described next . Advanced CS knowledge : As for the previous measure , we also examine general CS performance , and here CS performance is indicated by the overall correctness of an answer to a test question . Here we evaluate additional CS knowledge besides basic Scratch knowledge , and consider various aspects , such as the kind and extent of errors in the solution , and the use of algorithmic patterns . 3 . 3 The Research Setting As mentioned before , the study described here was part of a wider one . This study was conducted during two full school years , in the context of an existing introductory CS unit taught to 7 th - grade students ( ages 13 - 14 ) . This unit is part of the STEP program [ 45 ] developed by the Israeli Ministry of Education for middle schools . Students are introduced to CS ideas and concepts such as algorithms , control structures , message passing , and variables , using the Scratch programming environment . We used a comparative setting with two groups : ( 1 ) an experimental group consisting of students that were taught by using the framework for teaching abstraction , and ( 2 ) a control group that was taught the same unit over the same number of hours but without using the framework . The teachers in the experimental group attended a guidance session that included an explanation 8 Learning Abstraction in Computer Science : A Gender Perspective WIPCSE , November 2017 , Nijmegen , Netherlands about abstraction in the context of this unit and introduced the guidelines for teaching , accompanied by corresponding examples . These guidelines were revisited with the teachers using specific examples during the school year . Teachers in the control group were instructed to teach the unit using the guidelines of the STEP program and were not given any additional special instructions or information about the goals of the study , or exposed to any further abstraction - related treatment during the study . Both groups were taught using a textbook [ 4 ] that was written for students aged 13 - 15 . The book introduces many ideas and concepts of CS through the use of Scratch . In general , the textbook is written in the spirit of Armoni ' s framework [ 3 ] . For example , every task in the textbook is solved from Level 4 through Level 3 and only then are the corresponding Scratch scripts presented or developed . However , the treatment of abstraction in this textbook is not explicit . The research population included 187 students ( out of 213 ) who took the final exam . Of these , 106 students participated in the first year of the research , and 81 participated in the second year . A full detailed distribution is listed below in Table 1 : Table 1 : Research population distribution First year Second year Boys / Girls Teachers / classes Boys / Girls Teachers / classes Control group 40 / 35 3 / 4 18 / 13 2 / 2 Experimental group 21 / 23 2 / 2 20 / 17 2 / 2 Overall , the girls represented approximately 47 % of the students . As will be elaborated on later , we used a pre - test to learn about the students ' backgrounds . About 30 % of the students in each group had prior experience with CS . About 60 % of the students with prior CS experience were boys , evenly distributed between the groups . Usually this consisted of one after - school course in basic programming with Scratch . However , for all of them this was the first time that they had studied CS in school . Both groups studied the same unit for the same number of hours , using the same textbook and covered the same material . As noted above , the only difference was that in the experimental group the teachers were instructed to treat abstraction explicitly and teach according to the underlying teaching framework , whereas in the control group the teachers , as well as the students , were not explicitly exposed to these ideas . 3 . 4 Research Tools In this study we used both quantitative and qualitative tools ; these included a pre - test , a post - test , class observations , and interviews with students . The pre - test was analyzed quantitatively . The post - test was analyzed both quantitatively and qualitatively . The interviews and class observations served as qualitative tools to complete the picture . Pre - test : The pre - test was administered at the beginning of each of the two years of the research . It included questions regarding students ' personal background and mathematics grades , as well as questions related to their basic knowledge of CS algorithm design , questions regarding their attitudes towards CS , and some general abstraction questions . The pre - test was used to establish a baseline regarding the use of abstraction and CS knowledge . Some of the questions were taken from a pre - test used in another study [ 34 ] for similar purposes . All of the questions were content - validated [ 16 ] by an expert in the field . We found no significant differences regarding these aspects between the experimental classes and the control ones or between boys and girls in each group and all together . Post - test : At the end of each of the two years , as part of the teachers ' regular evaluation process , the students took a final exam that served as the post - test . The exam included questions that assessed their knowledge of CS and Scratch , while focusing on abstraction . For example , here is Question 6 from the post - test ( from the first year ) : We want to design a game in which the cat asks the user to choose a direction by pressing one of the arrow keys . When the user clicks on an arrow key ( up , down , left , or right ) the cat moves in the chosen direction until it touches the edge of the stage , and then the cat says , “I walked T steps” , where T is the number of steps that the cat has just walked . The cat starts from the point where the value of x is equal to 50 and the value of y is equal to 10 , looking to the right , and progresses at a steady pace of 10 steps per second . Describe how to create such an animation . ( If you can give a clear enough description , there is no need to write a script in Scratch . ) In line with the rationale for measuring abstraction , we analyzed the students ' answers to this question regarding several dimensions presented above , such as : Did the student provide a verbal description ? Did the student provide only a verbal description , as allowed by the last guideline in this question ? Did the student use an initialization process as part of the answer ? The post - test was content - validated by an expert in the field . In addition , the test was given in preliminary pilot exam - sessions to two students who had learned the introductory unit the year before , and who did not participate in the study . These pilot exam - sessions served to verify the suitability of the questions in terms of difficulty and the extent of the required knowledge . For every question each student was graded for each of the relevant dimensions of the analysis , and then the scores were normalized to a 0 - 100 scale . After the grading was completed , a fellow researcher graded about 15 % of the tests . The scores were the same for about 91 % of the cases and after a discussion a consensus was reached in more than 96 % of the cases . Interviews : Interviews were conducted by the first author with 45 students chosen randomly by the teachers . The interviews included questions that were similar to the post - test questions . They followed Ericsson and Simon ' s “think - aloud protocol” [ 20 ] . They were recorded ( audio only ) and then transcribed . 9 WIPCSE , November 2017 , Nijmegen , Netherlands D . Statter and M . Armoni As with the post - test , the questions used in the interviews were content - validated by an expert prior to the interviews . In addition , the first author conducted two pilot interviews with volunteer students who had not participated in the study , and who already had some experience with CS and Scratch , at a level similar to the level that the students who had participated in the study were expected to reach at the end of the teaching process . Class observations : The first author served as a non - participating observer in two classes for about 80 % of the lessons during each of the two years of the research , and took detailed field notes during the observations . The field notes included all that was said and done in class by the teacher and the students . As in a classic comparative study , both groups received the same pre - test and post - test . Each year , the observations took place in one experimental class and one control class , chosen randomly . The interviews were conducted with 24 students from the experimental group and 21 students from the test group , all together . 4 . FINDINGS In Section 4 . 1 we describe the quantitative post - test variables , the statistical tests we used , and the results of these tests . We also describe the processing of qualitative interview data ( following Chi [ 13 ] ) . In Sections 4 . 2 and 4 . 3 we focus on the findings for Research Questions 1 and 2 , respectively . 4 . 1 Preliminary Analysis and Processing We defined eight variables , corresponding to the different measures ( discussed in 3 . 2 ) , as presented in Table 2 . Tables 3 and 4 present the values of the variables , comparing boys vs . girls in the experimental group and the control group , respectively . All the values of the variables were calculated by averaging the corresponding scores from all relevant post - test questions and were normalized in the target domain ranging from 0 to 100 ( More information can be found in [ 40 , 41 ] ) . For the quantitative analysis of the post - test , we used the two - way ANOVA test , and for every abstraction - related measure we compared the influence of the gender , the effects of the intervention , and the interaction between them . In [ 40 , 41 ] we compared the experimental and the control groups , without referring to gender . To this end , we used the pooled t - test and the Satterthwaite t - test to compare the values of the variables for the experimental group with the corresponding values for the control group . For those comparisons , all the results showed a significant advantage to the experimental group . Obviously , when using the 2 - way ANOVA test ( with α = 5 % ) in this study , the parallel results were consistent . That is , for each of the variables , the group the student belonged to ( experimental or control ) was found to be a significant influential factor . However , since now we focus on the issue of gender , in Table 5 below we report only on the post - test variables that had been influenced by gender or by the connection of the intervention and gender ( significant results are denoted by * ) . For a few of the variables we found that the girls had a significant advantage , whereas for the rest there was no difference related to gender ( neither an advantage nor a disadvantage ) . Table 2 : The statistical post - test variables Variable What it measures Description _ var The use of a verbal description as part of the solution Only _ Description The ability to recognize that sometimes providing a verbal description is sufficient to solve a problem . Explanation _ var Students ' tendency to explain their program . Black _ box _ var The use of black - box arguments in the students ' solutions . Initializatio n _ var The use and quality of using initialization as part of the scripts . Abstraction _ level _ var The ability to choose the correct levels of abstraction at which to work , during the problem - solving process and move freely between levels of abstraction . Know _ Scr _ var Students ' achievements on relatively simple Scratch questions . Correctness _ var Advanced CS performance . This variable evaluates additional CS knowledge besides basic Scratch knowledge . Here we examined deep understanding and implementation of CS knowledge . Table 3 : Quantitative post - test results in the experimental group by gender Variable Girls ( n = 40 ) Boys ( n = 41 ) Mean STD Mean STD Know _ Scr _ var 95 . 83 12 . 93 93 . 49 16 . 61 Initialization _ var 75 . 62 20 . 35 70 . 12 20 . 74 Correctness _ var 82 . 10 17 . 67 65 21 . 81 Description _ var 56 . 66 33 . 71 43 . 08 29 . 98 Explanation _ var 54 . 51 26 . 93 45 . 23 28 . 4 Black _ box _ var 64 . 89 30 . 94 61 . 78 30 . 88 Abstraction _ level _ var 70 . 88 15 . 39 66 . 26 17 10 Learning Abstraction in Computer Science : A Gender Perspective WIPCSE , November 2017 , Nijmegen , Netherlands Table 4 : Quantitative post - test results in the control group by gender Variable Girls ( n = 48 ) Boys ( n = 58 ) Mean STD Mean STD Know _ Scr _ var 75 34 . 38 70 . 97 32 . 27 Initialization _ var 41 . 49 31 . 25 39 . 79 26 . 49 Correctness _ var 48 . 71 25 . 81 46 . 52 20 . 35 Description _ var 25 27 . 71 20 . 25 23 . 83 Explanation _ var 27 . 33 24 . 38 20 . 07 17 . 78 Black _ box _ var 38 . 02 33 . 47 28 . 59 25 . 79 Abstraction _ level _ var 47 . 35 14 . 46 44 . 43 17 . 03 Table 5 : 2 - way Anova results Variable Gender Gender * Group Correctness _ var 0 . 002 * 0 . 021 * Explanation _ var 0 . 01 * 0 . 77 Description _ var 0 . 02 * 0 . 29 We gained some more insight from data collected during the interviews , in which a few questions about the students ' attitudes regarding some CS concepts were asked . When analyzing the interviews we examined various aspects , expressing various dimensions that reflect abstraction abilities , such as those described in Section 3 . 2 . We report on two aspects , for which the results were significant . In these analyses we followed Chi ' s methodology [ 13 ] for quantifying qualitative data . Overall , 45 students were interviewed ; thus , the use of statistical tests was justified . However , since some of the values obtained for the experimental group and for the control group were low , we used both the chi - square test and Fisher ' s exact test for the analysis ( that is , we used an exact method rather than the Monte Carlo method ) . The first aspect on which we report concerns the perception of CS and the course objectives , and the second concerns initialization . We now explain each of them , and present the corresponding quantification processes . The statistical analyses of the quantified data and their findings will be described in Sections 4 . 2 and 4 . 3 , from the perspectives of the two research questions , respectively . The introductory CS course is aimed at teaching algorithmic concepts , exposing students to CS ideas and creating a basis for CS thinking skills to build upon in later stages of CS education . Recognizing the objectives of the course and reflecting on its outcomes are meta - performances that can also illuminate students ' abstraction abilities . Do the students see the course at this high level or do they view it as a course on Scratch programming ? At the beginning of each interview , after a short introduction , we asked each student the same question , “What do you feel you have learned in this course ? ” . As reported in [ 41 ] , this simple question yielded very interesting findings about the difference between the experimental group and the control group . In the current study , analyzing this question also revealed interesting observations , this time regarding the differences between boys and girls . We followed Chi [ 13 ] and categorized every utterance ( i . e . , an answer to this interview question ) as one of the following : A : Mentioned only Scratch blocks and programming . B : Mentioned programming as well as some notion of algorithmic thinking . C : Talked mainly about algorithmic thinking , CS knowledge , and problem solving . Here are two excerpts taken from the responses of two girls , which were categorized as C : “We learned many ways to solve problems by using Scratch blocks . ” ( a girl from the control group ) . “We learned to think about problems before solving them , and also Scratch commands , how to write verbal descriptions , and how to create a script for a game or a movie . ” ( a girl from the experimental group ) . Both excerpts mention the problem solving process and the “ what ” before talking about Scratch and the “ how ” . In contrast , here are two excerpts from two boys ; the first one was categorized as B and the second one as A : · “We learned about useful programming ideas such as sending messages , iterations , changing sprites ' size and costume in Scratch . ” ( a boy from the experimental group ) . · “We learned a lot of Scratch commands and how to use them . ” ( a boy from the control group ) . The second student talked only about Scratch and programming , whereas the first one briefly mentioned CS ideas but most of his answer concerned technical options in Scratch . After the analysis was completed , a fellow researcher analyzed 8 ( out of 45 ) of the interviews . The assignments to categories were the same for more than 85 % of the cases and after discussion a consensus was reached in more than 95 % of the cases . The results of this categorization are presented in Table 6 . Table 6 : Interviewed students ' views regarding their learning outcomes Both groups Experimental group Control group A B C A B C A B C Girls 5 6 10 1 2 9 4 4 1 Boys 13 7 4 3 6 3 10 1 1 The second aspect on which we report here is the use of initialization . As argued in Section 3 . 2 , a good initialization process is an indication of working at Level 2 and above . During 11 WIPCSE , November 2017 , Nijmegen , Netherlands D . Statter and M . Armoni the interviews we asked the students to explain what initialization is and their own reasons for including initialization . We categorized their responses as follows , again following Chi [ 13 ] : A . Did not use initialization or was not sure what it is . B . Used initialization but could not provide a good explanation for it or said that was forced by the teacher to use it . C . Had a good explanation for including and using initialization . Here are two excerpts taken from the responses of two girls , which were categorized as C : · “…without it , we won ' t get the right answer since in every run of the script the cat will start in a different place . ” ( a girl from the experimental group ) . · “We must set the direction and starting point to get the same result” ( a girl from the control group ) . Both excerpts demonstrate an understanding of the separation between an execution of the script and the script itself ( Levels 1 and 2 , respectively ) . In contrast , here are two excerpts from two boys , which were categorized as B : · “I think we must use it , otherwise the result may be wrong . ” ( a boy from the experimental group ) . · “Our teacher told us to always include this part in which we decide where the sprite starts and to which direction it faces at the beginning of the script . ” ( a boy from the control group ) . The first student realized that initialization is necessary to ensure correctness but he did not provide a good explanation for this . He may not be fully aware of the difference between Levels 1 and 2 . In this case also , a fellow researcher analyzed 8 interviews and validated the assignments to categories . The results were similar to those presented above , regarding the perception of the course objectives . The quantified results following this categorization are presented in Table 7 . Table 7 : Interviewed students ' responses regarding initialization Both groups Experimental group Control group A B C A B C A B C Girls 3 5 13 0 2 10 3 3 3 Boys 6 12 6 1 5 6 5 7 0 In the next two subsections we will refer to the findings presented here , as well as the quantified interview data , but from the two perspectives of the two research questions , dealing with each separately . 4 . 2 The Difference in Abstraction Skills between Boys and Girls In order to address the first research question , and assess the effect of gender on the different variable values , we compared the values obtained for all participants in the study ( both girls and boys from the experimental and control groups ) . We used the 2 - way ANOVA test to analyze the values obtained from the post - test ( Table 5 ) , and the chi - square and Fisher tests for analyzing the categorized interview answers that are presented in Tables 6 and 7 . The findings presented in Table 5 indicate that girls have a significant advantage for three post - test variables : Description _ var , which measures the tendency to write a verbal description as a preplanning phase , Explanation _ var , which measures the tendency to provide an explanation for the correctness of the solution , and Correctness _ var , which measures the overall internalization and understanding of CS concepts , as reflected in the students ' achievements in the post - test . For all other variables the analysis revealed no difference between boys and girls , indicating that they had similar abilities regarding those variables . As described in Section 4 . 1 , the interviews provided data regarding two additional dimensions that relate to abstraction : students ' views regarding their learning outcomes and the use of initialization . The quantifications of students ' answers corresponding to these two dimensions ( following the categorizations presented in Section 4 . 1 ) were summed up in Tables 6 and 7 , respectively . To analyze the students ' views regarding their learning outcomes , we used both the chi - square test and Fisher ' s exact tests for the values included in the three leftmost columns of Table 6 , for comparing girls vs . boys in both groups together . Both tests yielded a significant result for both groups combined ( p χ 2 = 0 . 049 , p Fisher = 0 . 05 ) . Thus , we concluded that the interviewed girls were more aware of the algorithmic aspect of the unit and viewed CS as more than just programming , compared with the interviewed boys . This ability to see the algorithmic aspects of CS may potentially contribute to their view of CS as a discipline . We now turn to the aspect of initialization . In [ 40 , 41 ] we reported on a significant difference between the experimental and the control groups in favor of the experimental group regarding the use of initialization . As depicted in Table 5 , the current analysis , in which boys and girls were compared , yielded no significant differences between boys and girls regarding their tendency to include initialization in their scripts . However , we did find a difference in their understanding of the concept , as reflected in the interviews when the students were asked to explain what initialization is and their reasons for using it . We analyzed the three leftmost columns of Table 7 ( corresponding to the experimental and control groups combined together ) , as we did for Table 6 . Here we also used both the chi - square test and Fisher ' s exact test for the analysis . The tests yielded a significant result for both groups combined ( p χ 2 = 0 . 043 , p Fisher = 0 . 048 ) . We concluded that the interviewed girls had a better understanding of the need for an initialization process . Taken together , our findings indicate some advantage for girls for some of the CS abstraction measures , an advantage that does not depend on the teaching treatment . 12 Learning Abstraction in Computer Science : A Gender Perspective WIPCSE , November 2017 , Nijmegen , Netherlands 4 . 3 The Difference in the Effect of the Teaching Strategy between Boys and Girls In previous publications [ 40 , 41 ] we reported on the benefits of the teaching framework presented in [ 3 ] . As we will now show , our current findings not only strengthen our previous results , but also indicate that girls benefit more from it . Although both boys and girls benefitted from the intervention regarding their improvement in CS abstraction skills , it was found that girls gained more in terms of overall CS skills and knowledge , as well as in terms of the perception of their learning outcomes . Starting with the post - test , and the corresponding Table 5 , it is clear from the findings concerning the variable Correctness _ var in Table 5 that girls benefitted more from the intervention than did boys . Namely , the 2 - way ANOVA test result indicates that combining the two tested independent variables ( gender and the intervention ) affected the dependent variable ( Correctness _ var ) . We can conclude that in the experimental group the influence of the intervention on the girls was stronger than its influence on the boys . We continue with the students ' views regarding their learning outcomes , as reflected in their responses during the interviews ( see Table 6 for the quantification of these responses ) . Analyzing each group separately ( girls vs . boys in the experimental group and girls vs . boys in the control group ) yields a significant result for the experimental group ( p χ 2 = 0 . 05 , p Fisher = 0 . 05 ) but not for the control group ( p χ 2 = 0 . 13 , p Fisher = 0 . 13 ) . This higher level of perception of the course and its learning outcomes was markedly more evident for girls in the experimental group than for boys in the experimental group , but there was no significant difference in the control group . This indicates that the intervention influenced the girls to be more aware of the algorithmic aspects of the course and to view CS as more than just programming , more than it influenced the boys . Repeating the same analysis regarding the perception of the initialization process ( see Table 7 for the quantification of the corresponding interview responses ) did not yield any significant difference between boys and girls . We obtained p χ 2 = 0 . 092 , p Fisher = 0 . 134 and p χ 2 = 0 . 193 , p Fisher = 0 . 193 for the control group and the experimental group , respectively . In summary , our findings indicate that the intervention had better influence on girls than on boys in some aspects . 5 . DISCUSSION Our findings showed that girls had a significant advantage over boys ( with no dependence on the teaching strategy ) concerning several aspects of CS abstraction , whereas no difference was found regarding other aspects . Specifically , an advantage was found regarding the tendency to write a verbal description , the tendency to explain the solution , the understanding of the learning outcomes of the introductory CS course , and the understanding of the initialization process . These findings not only indicate that in the context of achievements in an introductory CS course for 7 th grade ( using Scratch ) , girls are comparable to boys , but in addition , they even have some advantages concerning some aspects of abstraction in CS . One possible explanation for the advantage exhibited by girls regarding the first two aspects may link abstraction in CS with verbal abilities . Obviously , the tendency to write a verbal description as a preplanning phase , as well as the tendency to provide an explanation for the correctness of the solution , relate to verbal abilities . Perhaps this connection is inherent to abstraction in CS and represents some necessary conditions . That is , possibly in order to develop certain CS abstraction skills , one needs to have good verbal abilities . If , as argued by many , girls have better verbal abilities , compared with boys , then possibly due to these better verbal skills the girls participating in this study had better CS abstraction abilities , as reflected by their tendency to preplan and to explain their solutions , and consequently , these better abstraction abilities led to an overall better CS performance . However , the differences we found between boys and girls might also be explained ( at least partiality ) in other ways . For example , when taking field notes , the first author noted that when solving a problem in class , girls indeed tended to start by writing a verbal description more than boys did . However , often this occurred since they had stationery items readily available for use , whereas the boys often had to look for paper and pens . This suggests that other factors ( that may or may not be connected , directly or indirectly , to verbal abilities ) may also play a role concerning CS abstraction abilities . Exploring possible connections between our results and verbal abilities is a very interesting direction for future research , especially when one bears in mind that CS is a field that is related by many to technology , mathematics , or engineering rather than to the humanities . We also found that girls had an advantage regarding the overall internalization and understanding of CS concepts . Together with the findings indicating that girls had advantages regarding some aspects of CS abstraction , this is consistent with our conjecture ( see Section 3 . 2 ) that better abstraction skills induce better overall CS skills . This conjecture calls for further research . Additional findings deal with the effect of the teaching strategy on the differences between boys and girls . These findings indicate that Armoni ' s framework for teaching abstraction , which we already established in [ 40 , 41 ] as effective in the context of an introductory course for 7 th - grade students , had an enhanced effect for girls in this context . This enhancement was manifested by better overall performance , when comparing boys and girls that took an introductory course using this framework . It was also manifested by the girls ' deeper and more reliable perception of CS as a problem - solving discipline that is more than just programming . Following these findings , we conjecture that Armoni ' s framework has a potential positive influence on the CS self - efficacy of 7 th - grade girls . First , since this framework induces a teaching and learning process that emphasizes CS abstraction , and since our findings indicate that 7 th - grade girls have better CS abstraction skills , such a framework seems to exploit some cognitive advantages of girls , and this may consequently influence their self - efficacy . Second , the enhanced effect that Armoni ' s framework has on the girls , expressed among other things in higher achievements , can also positively influence their self - efficacy . Increased self - efficacy can 13 WIPCSE , November 2017 , Nijmegen , Netherlands D . Statter and M . Armoni potentially have a positive influence on attitudes , motivation [ 9 ] , and intentions . Thus , this framework has the potential to be effective for encouraging and motivating girls to pursue CS education beyond this introductory course , that is , the potential to contribute to widening the CS pipeline for females . This conjecture points to an interesting direction for future research . 6 . ACKNOWLEDGMENT This research was supported by the Israel Science Foundation ( ISF ) , Grant 675 / 130 . 7 . REFERENCES [ 1 ] Aharoni , Dan . " Cogito , Ergo sum ! cognitive processes of students dealing with data structures . " ACM SIGCSE Bulletin 32 . 1 ( 2000 ) : 26 - 30 . [ 2 ] Aho , Alfred V . , and Ullman , Jeffrey D . Foundations of Computer Science . Computer Science Press , New York , NY . 1992 . [ 3 ] Armoni , Michal . " On teaching abstraction in CS to novices . " Journal of Computers in Mathematics and Science Teaching 32 . 3 , ( 2013 ) : 265 - 284 . [ 4 ] Armoni , Michal , and Ben - Ari , Mordechai . Computer Science Concepts in Scratch . https : / / stwww1 . weizmann . ac . il / scratch / scratch _ en / l : Weizmann Institute of Science , 2013 ( accessed 03 2017 ) . [ 5 ] Armoni , Michal , and Judith Gal - Ezer . " Reduction - - an abstract thinking pattern : the case of the computational models course . " ACM SIGCSE Bulletin 38 . 1 ( 2006 ) : 389 - 393 . [ 6 ] Armoni , Michal , and Judith Gal - Ezer . " Non - determinism : An abstract concept in computer science studies . " Computer Science Education 17 . 4 ( 2007 ) : 243 - 262 . [ 7 ] Armoni , Michal . and Judith Gal - Ezer . Early computing education – Why ? What ? When ? Who ? ACM Inroads Magazine , 5 ( 4 ) , ( 2014 ) : 54 - 59 . . [ 8 ] Armoni , Michal , and Judith Gal - Ezer . " High school computer science education paves the way for higher education : the Israeli case . " Computer Science Education 24 . 2 - 3 ( 2014 ) : 101 - 122 . [ 9 ] Britner , Shari L . , and Frank Pajares . " Self - efficacy beliefs , motivation , race , and gender in middle school science . " Journal of Women and Minorities in Science and Engineering 7 . 4 ( 2001 ) . [ 10 ] Bruner , Jerome S . The Process of Education . Harvard University Press , 1960 . [ 11 ] Camp , Tracy . . The incredible shrinking pipeline . Communications of the ACM , 40 . 1997 : 103 - 110 . [ 12 ] Carter , Lori . Why students with an apparent aptitude for computer science don ' t choose to major in computer science . ACM SIGCSE Bulletin , 38 . 1 . ( 2006 ) : 27 - 31 . . [ 13 ] Chi , Michelene T . H . " Quantifying qualitative analyses of verbal data : A practical guide . " The Journal of the Learning Sciences 6 . 3 , ( 1997 ) : 271 - 315 . [ 14 ] Corno , Lyn , and Eric M . Anderman , eds . Handbook of educational psychology . Routledge , 2015 . [ 15 ] Corder , Colin . Teaching Hard , Teaching Soft : A Structured Approach to Planning and Running Effective Training Courses . Aldershot : Gower , 1990 . [ 16 ] Delgado - Rico , Elena , Carretero - Dios , Hugo , and Ruch , Willibald . " Content validity evidences in test development : An applied perspective . " International Journal of Clinical and Health Psychology 12 . 3 , ( 2012 ) : 449 - 460 [ 17 ] Dijkstra , Edsger W . " The humble programmer . " Communications of the ACM 15 . 10 , ( 1972 ) : 859 - 866 . [ 18 ] Dijkstra , Edsger . W . ( 1975 ) . About robustness and the like , EWD 452 . The Archive of Dijkstra ' s Manuscripts . Available in http : / / www . cs . utexas . edu / users / EWD / [ 19 ] Eidelman , Larisa , and Orit Hazzan . " Sectoral and gender - wise analysis of the choice of Computer Science studies in Israeli high schools . " The Journal of Computers in Mathematics and Science Teaching 27 . 4 ( 2008 ) : 391 . [ 20 ] Ericsson , K . Anders , and Simon , Herbert A . " How to study thinking in everyday life : Contrasting think - aloud protocols with descriptions and explanations of thinking . " Mind , Culture , and Activity 5 . 3 , ( 1998 ) : 178 - 18 . [ 21 ] Fisher , Allan , and Jane Margolis . " Unlocking the clubhouse : the Carnegie Mellon experience . " ACM SIGCSE Bulletin 34 . 2 ( 2002 ) : 79 - 83 . [ 22 ] Galpin , Vashti . " Women in computing around the world . " ACM SIGCSE Bulletin 34 . 2 ( 2002 ) : 94 - 100 . [ 23 ] Gamma , Erich , Richard Helm , Ralph Johnson , and John Vlissides . Design patterns : Abstraction and reuse of object - oriented design . In European Conference on Object - Oriented Programming ( 1993 ) : 406 - 431 . [ 24 ] Haberman , Bruria . " High - school students ' attitudes regarding procedural abstraction . " Education and Information Technologies 9 . 2 ( 2004 ) : 131 - 145 . [ 25 ] Halpern , Diane F . Sex differences in cognitive abilities . Psychology press , 2013 . [ 26 ] Hartmanis , Juris . Turing Award lecture on computational complexity and the nature of computer science . Communications of the ACM 37 . 10 , ( 1994 ) : 37 - 43 . [ 27 ] Hazzan , Orit . " Reflections on teaching abstraction and other soft ideas . " ACM SIGCSE Bulletin 40 . 2 , ( 2008 ) : 40 - 43 . [ 28 ] Hazzan , Orit and Tomayko , James E . Reflection and abstraction in learning software engineering ' s human aspects . Computer 38 . 6 ( 2005 ) : 39 - 45 . [ 29 ] Hyde , Janet S . , and Marcia C . Linn . " Gender differences in verbal ability : A meta - analysis . " ( 1988 ) : 53 . [ 30 ] Java - Util . ( 2017 ) . http : / / docs . oracle . com / javase / 7 / docs / api / java / util / ArrayList . html . Retrieved 02 2017 [ 31 ] Ilias , Aristidis , and Maria Kordaki . Undergraduate studies in computer science and engineering : Gender issues . Inroads – ACM SIGCSE Bulletin , 38 ( 2006 ) : 81 – 85 . [ 32 ] Kramer , Jeff . " Abstraction – is it teachable ? the devil is in the detail . " In Proceedings of the 16th Conference on Software Engineering Education and Training , ( March 2003 ) : 32 - 32 . [ 33 ] Maccoby , E . E . , and C . N . Jacklin . " The psychology of gender differences . " ( 1974 ) . [ 34 ] Meerbaum - Salant , Orni . Armoni , Michal , and Ben - Ari , Mordechai , . " Learning computer science concepts with Scratch . " Computer Science Education 23 . 3 , ( 2013 ) : 239 - 264 . [ 35 ] Or - Bach , Rachel , and Ilana Lavy . " Cognitive activities of abstraction in object orientation : an empirical study . " ACM SIGCSE Bulletin 36 . 2 ( 2004 ) : 82 - 86 . [ 36 ] Perrenet , Jacob , Jan Friso Groote , and Eric Kaasenbrood . " Exploring students ' understanding of the concept of algorithm : levels of abstraction . " ACM SIGCSE Bulletin . 37 . 3 . ACM , ( 2005 ) : 64 - 68 . [ 37 ] Perrenet , Jacob , and Eric Kaasenbrood . " Levels of abstraction in students ' understanding of the concept of algorithm : the qualitative perspective . " ACM SIGCSE Bulletin . 38 . 3 . ACM , ( 2006 ) : 270 - 274 . [ 38 ] Schwill , Andreas . " Fundamental ideas of computer science . " Bulletin - European Association for Theoretical Computer Science , 53 , ( 1994 ) : 274 - 274 . [ 39 ] Soloway , Elliot . " Learning to program = learning to construct mechanisms and explanations . " Communications of the ACM 29 . 9 ( 1986 ) : 850 - 858 . [ 40 ] Statter , David , and Armoni , Michal . " Teaching Abstract Thinking in Introduction to Computer Science for 7th Graders . " In Proceedings of the 11th Workshop in Primary and Secondary Computing Education , ( October 2016 ) : 80 - 83 . [ 41 ] Statter , David , and Armoni , Michal . Teaching Abstraction in Computer Science in 7th Grade . submitted . [ 42 ] Stolin , Yuila , and Hazzan , Orit . Students ' understanding of computer science soft ideas : the case of programming paradigm . ACM SIGCSE Bulletin , 39 . 2 , ( 2007 ) : 65 - 69 . [ 43 ] Weiss , Elisabeth M . , et al . " Sex differences in cognitive functions . " Personality and individual differences 35 . 4 ( 2003 ) : 863 - 875 . [ 44 ] Zweben , Stuart , and Betsy Bizot . " 2014 Taulbee Survey . " COMPUTING 27 . 5 ( 2015 ) . [ 45 ] Zur Bargury , I . A new curriculum for junior - high in computer science . In Proceedings of the 17th ACM annual conference on Innovation and technology in computer science education . ACM ( 2012 ) : 204 - 208 14