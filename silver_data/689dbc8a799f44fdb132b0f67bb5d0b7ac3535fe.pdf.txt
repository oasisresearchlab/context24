Coordinating Technical Support Platforms Susanne Bødker COMMUNICATIONS OF THE ACM 215 Susanne Bødker ( bodker @ intermedia . au . dk ) is an associate professor at the Center for Human - machine Interaction & InterMedia , Department of Computer Science , Aarhus University , Denmark . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . © 2000 ACM 0002 - 0782 / 00 / 1100 $ 5 . 00 The process of tailoring , as development of technical platforms is often referred , has been studied for some time , as have the roles of tailors , or as we also refer to them : platform coordinators . Whereas Gantt and Nardi [ 4 , 7 ] looked primarily at adapta - tion by individuals , Mackay [ 6 ] pointed out that tailoring is an organizational process . Taking this a step further , Okamura et al . [ 8 ] consider how the human medi - ation of the introduction of a CSCW system is important . Trigg and Bødker support this observation in an article addressing the increased bureaucratization of the tailor - ing process , and the development of formally recognized roles of the tailors [ 10 ] . Although tailoring is usually seen as enabling an ever - increasing variety of use pat - terns , it can play an equally important role in organization - wide efforts to standard - ize . The activities of sharing and distribution are thus natural parts of the organiza - tional process of adapting and appropriating technology . Whereas MacLean et al . [ 7 ] considered that the qualifications of tailors can be categorized into three ways of deal - ing with the platform , this article proposes that it is necessary to study how the qualifi - cations of tailors , users , and the platform in general develop over time . Tailoring is an emergent phenomenon in an organization , and cannot be preplanned . We focus on the kind of tailoring that Schmidt [ 9 ] called articulation work ; that is , the secondary activities needed to divide , allocate , coordinate , schedule , mesh , and interrelate individual work activities . Tailors are thus gatekeepers who handle the artic - ulation work related to the technical platform . They also play an active role in mediat - ing the relationship between users and the platform , which is why this article prefers the term platform coordination to tailoring . The article further discusses the issues of orga - nizational and technical mechanisms for platform coordination , the emergent compe - tencies of platform coordination , and the articulation work related to the use of the plat - form . Based on the assumption that platform coordination is under continuous develop - ment and not just a set of procedures adapted once , this article uses longitudinal study results to explain the specifics of how the platform , the competencies , and so forth develop over time . The primary study was conducted in two sequences of qualitative interviews some three years apart . The first investigation was carried out together with 15 graduate stu - COMMUNICATIONS OF THE ACM 216 dents in spring 1993 . We conducted 50 – 60 hours of qualitative interviews with system developers , managers , and in - house users , as well as presentations and demonstrations . In the fall of 1995 I returned for hour - long interviews with a system developer , a pro - ject manager , and the platform coordinator in charge of the shared classes and libraries . All three were trained computer scientists who did not work with the company in 1993 . The second study was part of an action - oriented research effort , which lasted for two years while an organization introduced PCs running WordPerfect and Windows [ 10 ] . We followed the use of this technology from its early introduction , conducting infor - mal interviews and observations of everyday work of a small group of early users . For six months I spent a half day every third week at the office . I helped with technical prob - lems as they arose in exchange for time spent talking to the users and platform coordi - nators . After six months of less frequent interaction , we conducted interviews with the two platform coordinators , a programmer , and a user . Case One : TR - Partner TR - partner is a spin - off of two major suppliers and consultant companies of public sector IT . In existence since 1991 , its focus is support for and planning of public transportation . Employees of TR - partner had varied backgrounds ranging from tra - ditional approaches , mainframes , and relational databases . Before the spin - off , the companies had developed two transport planning systems , and several of the employ - ees of the new company had backgrounds in transportation planning . The company had never applied any systematic or structured method , and they saw object - orienta - tion ( OO ) as a step toward better control of the process and of the quality of the products . Thus , a pilot project ( TR - bus ) was launched in 1993 using the Coad / Yourdon approach , and three groups of designers worked on it . The traffic planners were used to working with the existing system , and they con - sidered the project an expansion of this system . Some technicians who were connected with the project from the very start were part of the decision to introduce OO . They had some understanding of traffic planning from previous projects , and they took part in analysis and design as well as in programming . Their main concern was to become systematically object - oriented . Other technicians were newcomers , hired for their understanding of OO . They were mainly programming components that had been defined earlier through depictions of screens on paper and textual descriptions of functionality . The project produced an object - oriented analysis ( OOA ) model that played a dom - inant role in connecting parts as well as activities . This model was projected on a wall in a main office where people met to discuss problems related to TR - bus implementa - tion . The project group had several problems regarding OO use , and at one point during the project went back to some of their old ways . The overall design of screen images was put into the hands of one experienced designer / traffic planner . The remaining design - ers started programming . As a consequence the design of screen images did not take advantage of OO’s potential for inheritance and reuse . The 1993 OOA model attend - ed mostly to the problem domain , whereas traditional technical concerns dominated design and implementation . The projects were still object - oriented in 1995 , based on Windows , C + + , and Oracle . In some cases the design documents were used for customer approval , and in others the users saw the OO model and design documentation to a limited extent . Employees COMMUNICATIONS OF THE ACM 217 hired after 1993 typically had a background in these methods and tools . Also by this time TR - partner was applying a core library of 50 – 60 classes to all projects . This library was maintained by the platform coordinator . The project manager handled overall analysis , design , and resource estimates for the various components of a particular project . In many projects , the OOA was a sketchy outline based on the previous experience of the project manager . The main emphasis was on orienting the design model toward a solution , specifying the components com - prising the product , how they interacted , and what components from the project plat - form were to be applied in building the various parts . The model was a formalization that served its main purpose well : To support making good programs . Furthermore , the model was the starting point for design of the user interface and database , and the spec - ification of these components was seen as more important in the communication with programmers than the OOA model . Although the model aided in delimiting compo - nents to be handed out to programmers , the decomposition was an iterative process , where sharing and idea development were considered important . The platform coordinator offered his service to the projects through active participa - tion in the design of programs . He knew the platform well enough to be able to pro - duce a “parts list” of objects and classes that each project needed from the shared library . One or two people from each project typically followed the development of the shared library closely and constituted the main contact between a project and the platform coordinator . Previous experience demonstrated the inappropriateness of letting each project expand on the general classes . Instead , based on the parts list , each project got its ver - sion of the shared objects and classes to work on and specialize to its needs . The plat - form coordinator decided what to include in the shared classes and which classes to des - ignate as shared , basing these decisions on close contact with the projects , and at times upon direct requests . The main criteria for the design of shared classes and objects were that they had to be easy to use , not too complex , and without many preconditions . If these criteria could not be fulfilled , the idea was abandoned , at least temporarily . Newsgroup postings and literature were often used in finding inspiration for solutions . The role of the platform coordinator together with the associated assistants resembles what has been referred to as an architecture group [ 2 , 5 ] . Information about new mate - rial in the shared classes was conveyed at meetings that emphasized the ideas behind the design . According to the coordinator , such meetings helped prevent the spread of myths among programmers about how the shared classes may be used , what bugs they con - tain , and so forth . Characterizing his own role , the coordinator said that by know - ing the programming environment and the shared classes very well , he was able to give advice to project managers and to engage in open dialogue with programmers . The main focus in 1995 was on solutions rather than models of the application domain . However , among the platform and platform coordinator , the concepts of the solution were aligned more with OO thinking than in 1993 . The common platform— originally aimed at sharing and reusing code—served as a means of implementing new principles and working methods in the organization ( See Table 1 ) . Case Two : The AT study The AT is a governmental institution that inspects and advises companies on health and safety matters . In 1992 , a small group of eight inspectors and a secretary began using PCs , including WordPerfect and Windows , and within a year this technology COMMUNICATIONS OF THE ACM 218 Table 1 . Summary of primary case . COMMUNICATIONS OF THE ACM 219 had spread to all inspectors . Accompanying the technological change was a crucial change in work practice : the secretaries stopped writing for the inspectors . Toward the end of the project , inspectors produced their own text and performed most of their own information retrieval work . They had access to email and to some central data - bases from their PCs , but they ran almost no other computer applications . Adapting technology to the local needs of the AT branch office involved customiz - ing WordPerfect with button panels , macros , standard forms , and paradigma ( collec - tions of legally valid standard phrases ) . Approximately 10 secretaries and 50 inspectors worked at the Aarhus branch , two of whom had official roles as platform coordinators , along with their work as labor inspectors . The organization also hired a programmer to administer the technical platform . The platform coordinators’ tailoring efforts were mostly driven by their concern for the quality of inspection work and documentation . Their work in tailoring , integrating and otherwise adapting the technology to the work in the organization made them the official mediators and articulators between design and use—the ones who made sure the new designs were indeed usable and who crys - tallized ideas into new designs . Together with a programmer , they formed the heart of an emerging community of tailoring practice at the AT . As further discussed in [ 10 ] , the evolving shared platform was important for the development of new working methods in the organization ( See Table 2 ) . Comparing the Two Cases Both cases contain integration of design / development and use . Compared to tradi - tional systems development , the developers of the shared platforms are part of the communities of use in both cases , and mechanisms are set up to support the interac - tion between development and use of the shared platforms . These mechanisms include the formalized collaboration with project managers at TR - partner , the tech - nology committee at AT , and in both places , meetings to provide information about the changed platform . For both , the development in use emerges both through the active work of the platform coordinators , and through the technical platform itself . Differences between the two cases also exist . First , the mechanisms for sharing and distribution that emerged to support the development process are somewhat different . In particular , different strategies for the mediation of the tailors emerged . Furthermore , Table 2 . Summary of secondary case . COMMUNICATIONS OF THE ACM 220 the technical qualifications of the two groups of users differ , which may partly account for the differences in sharing , cooperation , and distribution around the shared platform . The Sharing and Distribution Mechanism It took TR - partner a long time to develop the sharing and reusing of components . Several approaches were attempted , such as copying from others , and extension of existing classes to accommodate for new exceptions , until finally the shared platform was established from which components are pulled out to be applied by the various projects . Building and sharing this OO platform is very much dependent on the active mediation of both the project leader and platform coordinator . The project coordinator explained that the shared use of the platform goes more smoothly when he is involved . The complexity of presenting the platform and coordinating its use is reduced mainly through increased integration with actual use / work . In the working method of TR - partner , delegation and distribution of work also take place through the active mediation of the project manager and platform coordinator , both of whom ben - efit from OO encapsulation and abstraction mechanisms . The AT made significant efforts to find appropriate ways of distributing so - called “standards” among the workers , including paradigms ( collections of legal phrases ) , new or modified buttons and button panels , new WordPerfect forms and schema for gener - ating them , and new or modified macros . The sharing / distribution of standards hap - pens in three ways : 1 . Paradigms are discussed in meetings of a technology committee . 2 . WordPerfect schemas and forms are designed by individual workers or by plat - form coordinators . 3 . Macros and button panels are developed by the platform coordinators and dis - tributed throughout the branch . Standards ( forms , or macros , for example ) were initially developed and distributed opportunistically , for example when someone copied a colleague’s tailoring , and perhaps further customized it . When the process later became more systematic , ideas were con - veyed to the platform coordinators , who used them as the basis for new standards . Distributing standards at the AT was semi - automatic ; individual PCs were configured to download the new facilities when started each morning . When potentially disruptive changes were downloaded , the workers were explicitly notified and told how the new functionality was intended to be used . Except for certain modifications related to the technical infrastructure ( the network ) , people at the AT were free to use or ignore the standards they received , but they normally did not make their own standards indepen - dent of this process . The platform coordinators were pleased with the new process because it improved the quality and accessibility of standards , and eased their own work by ensuring consistency . It is interesting to note how sharing and distribution became formalized and some - what automatic at AT , whereas the active mediation of the TR - partner platform coor - dinator continued to be crucial . Flexibility was important at TR - partner , where it was essential to support the needs of the projects with a variety of use patterns . At AT it was more important to produce platform components that were easy to use . Through active mediation by the TR - partner platform coordinator , the variety of use patterns co - exist - COMMUNICATIONS OF THE ACM 221 ed with sharing and reuse as natural parts of the organizational process of adapting and appropriating technology . Tailoring Competence While the platform coordinators at AT were placed between development and use , the TR - partner platform coordinator was more integrated , embodying the principle that everyone should in principle be able to master the platform coordinator’s job . In neither case was development based on abstract models of use , or on formal concep - tions of the technical artifact . However , as we pointed out for the AT case [ 10 ] , the lack of ability to step back and think in a more abstract way was a problem for plat - form coordination , resulting in a failure to make more radical construction changes to the platform . At TR - partner there was an initial tendency to abandon OO tech - niques when things got critical , even though TR - partner programmers possessed much more technical and abstraction skills than AT programmers did . Apparently programmers made here - and - now solutions to problems without concern for con - nections to other parts , or for stability and accessibility regarding reuse . How did TR - partner finally make reusable components stable , documented , and accessible ? The company platform coordinator took an interest in design patterns and other advanced OO concepts , and his technical background enabled him to look for advanced solutions . The AT platform coordinator asked for a technically competent “sparring partner” to accomplish the same goal [ 10 ] . The development of the shared platform is an interactive process among users , fel - low platform coordinators , and the material worked on . No one at AT or TR - partner could have preplanned the actual shared platform , or the procedures surrounding its use and further development . This realization affects how we can think of tailoring or plat - form coordination methods . Clearly , we must see the platform not as static but under continuous development . Organizing the shared ( re - ) use was in both cases a stepwise process , starting from very specific solutions and moving toward more general ones . Both cases indicated that shared use was only possible through the continuous efforts of the platform coordina - tors . Process systematization was a priority for AT , while at TR - partner the active role of the platform coordinator remained important . In both cases the articulation work changed over time but did not go away . The active human mediation in both cases con - tinued to be important , and in neither case could the platforms be seen as reducing articulation work . On the contrary , most of this work only existed because the platform and the ideas of sharing were introduced . Conclusion Incorporating a shared platform into the everyday work of the organization was not just a matter of adaptation in the two cases we studied . The adaptation process involved cooperative development , an integration of development and use among developers , and required user participation . A number of mechanisms for sharing , or distribution of emerging platform compo - nents partly depended on the skills of the platform developers . This article shows two rather different strategies for platform coordination . In one , active participation in pro - jects of use is essential , and in the other structures and delegation become increasingly important . Participation and formalization are two alternative strategies for addressing increasing complexity of platform coordination . In both cases the efficiency and quali - COMMUNICATIONS OF THE ACM 222 ty of sharing went hand in hand with additional articulation work by the platform coor - dinators . Either these kinds of platforms are not computer supported cooperative work ( CSCW ) , as defined by Schmidt and Bannon [ 9 ] , or we have to abandon the reduction of articulation work as a quality criteria for CSCW systems . This article has illustrated that the latter is to be preferred to the former , since this kind of articulation work is an important vehicle for increasing the quality of the product resulting from the shared platform use . References 1 . Bowers , J . The work to make a network work : studying CSCW in action , in Futura , R . and Neuwirth , C . In Proceedings of CSCW 94 , ACM Press , 1994 , 287 – 298 . 2 . Bürkle , U . , Gryczan , G . and Züllighoven , H . Object - oriented system development in a bank - ing project : Methodology , experience and conclusions . Human - Computer Interaction 10 ( 1995 ) , 293 – 363 . 3 . Button , G . and Sharrock , W . Occasioned practices in the work of software engineers . In Jirotka , M . and Goguen , J . Requirement Engineering . Social and Technical Issues . Academic Press , London , 1994 , 217 – 240 . 4 . Gantt , M . , and Nardi , B . A . Gardeners and gurus : Patterns of co - operation among CAD users . In Proceedings of CHI ‘92 , 107 – 117 . ( Monterey , CA , May 3 – 7 ) . 5 . Jakobson , I . , Christersson , M . , Jonsson , P . , and Övergaard , G . Object - Oriented Software Engineering—A Use - Case Driven Approach . Addison - Wesley , Reading , MA , 1992 . 6 . Mackay , W . E . Patterns of sharing customizable software . In Proceedings of ACM CSCW’90 Conference on Computer - Supported Cooperative Work . ACM Press , Portland , Oregon , 209 – 221 . 7 . MacLean , A . , Carter , K . , Lovstrand , L . , and Moran , T . User - tailorable systems : Pressing the issues with buttons . In Proceedings of ACM CHI’90 Conference on Human Factors in Computing Systems , 175 – 182 . 8 . Okamura , K . , Fujimoto , M . , Orlikowski , W . J . , and Yates , J . Helping CSCW applications suc - ceed : The role of mediators in the context of use . In Proceedings of ACM CSCW’94 Conference on Computer - Supported Cooperative Work , ACM Press , 55 – 66 . 9 . Schmidt , K . and Bannon , L . Taking CSCW seriously : Supporting articulation work . CSCW Journal 1 , 1 – 2 , ( 1992 ) , 7 – 40 . 10 . Trigg , R . and Bødker , S . From implementation to design : Tailoring and the emergence of sys - tematization in CSCW , in Futura , R . and Neuwirth , C . In Proceedings of CSCW 94 , ACM Press , 45 – 54 .