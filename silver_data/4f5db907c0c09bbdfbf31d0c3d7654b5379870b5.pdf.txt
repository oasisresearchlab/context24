AI EDAM http : / / journals . cambridge . org / AIE Additional services for AI EDAM : Email alerts : Click here Subscriptions : Click here Commercial reprints : Click here Terms of use : Click here CoMem : Designing an interaction experience for reuse of rich contextual knowledge from a corporate memory R . FRUCHTER and P . DEMIAN AI EDAM / Volume 16 / Issue 03 / June 2002 , pp 127 - 147 DOI : 10 . 1017 / S0890060402163025 , Published online : 15 November 2002 Link to this article : http : / / journals . cambridge . org / abstract _ S0890060402163025 How to cite this article : R . FRUCHTER and P . DEMIAN ( 2002 ) . CoMem : Designing an interaction experience for reuse of rich contextual knowledge from a corporate memory . AI EDAM , 16 , pp 127 - 147 doi : 10 . 1017 / S0890060402163025 Request Permissions : Click here Downloaded from http : / / journals . cambridge . org / AIE , IP address : 142 . 58 . 129 . 109 on 16 Mar 2015 CoMem : Designing an interaction experience for reuse of rich contextual knowledge from a corporate memory R . FRUCHTER 1 and P . DEMIAN 2 1 Director of Project Based Learning Lab , Civil and Environmental Engineering Department , Stanford University , Stanford , California 94305 , USA 2 Civil and Environmental Engineering Department , Stanford University , Stanford , California 94305 , USA ( Received October 20 , 2001 ; Accepted March 28 , 2002 ! Abstract Managing and reusing knowledge in architecture , engineering , and construction firms can lead to greater competitive advantage , improved designs , and more effective management of constructed facilities . However , reuse often fails because knowledge is not captured ; it is captured out of context , rendering it not reusable ; or there are no formal mechanisms for finding and retrieving reusable knowledge . This paper presents ongoing research on design knowledge reuse that introduces the notion of knowledge in context from a corporate perspective . We argue that in order for knowledge to be reusable , the user should be able to see the rich context in which this knowledge was originally created and interact with it . We call a repository of such knowledge in context the corporate memory . We describe empirical observations of designers reusing knowledge from their personal design experiences . Based on these observations , we formalize two key activities in the process of knowledge reuse from a corporate repository : finding reusable items and understanding these items in context . We formalize six degrees of exploration that lead to understanding . We describe a prototype system , CoMem , that supports these activities . CoMem is distinguished from the document - centric state of practice solutions by its approach of “overview first , zoom and filter , and then details on demand . ” In order to accomplish this approach we propose three metaphors : corporate map , fisheye lens , and storyteller . These metaphors and their implementation in CoMem are illustrated using an industry scenario . Keywords : Human – Computer Interaction ; Design ; Knowledge Reuse ; Context ; Corporate Memory ; Knowledge Management 1 . INTRODUCTION The average designer , whether consciously or subcon - sciously , draws from a vast well of previous design experi - ence . “All design is redesign” ~ Leifer , 1997 ! . This can be experience acquired by the individual or by his or her men - tors or professional community . We refer to this activity as design knowledge reuse . Specifically , we define design knowledge reuse as the reuse of previously designed arti - facts or components , as well as the knowledge and exper - tise ingrained in these previous designs . We distinguish between two types of reuse : 1 . Internal knowledge reuse : a designer reusing knowl - edge from his or her personal experiences ~ internal memory ! . For example , a structural designer might remember that the last time she designed a floor slab for a hotel ballroom it was too thin , which resulted in vibration problems . The next time she is faced with a similar design situation , she designs the floor slab to be deeper . 2 . External knowledge reuse : a designer reusing knowl - edge from an external knowledge repository ~ external memory ! . For example , the same structural designer might look for floor slab designs in her company’s Reprint requests to : Dr . Renate Fruchter , Department of Civil and En - vironmental Engineering , Terman Engineering Center , CIFE , Stanford Uni - versity , Stanford , CA94305 - 4020 , USA . E - mail : fruchter @ ce . stanford . edu Artificial Intelligence for Engineering Design , Analysis and Manufacturing ~ 2002 ! , 16 , 127 – 147 . Printed in the USA . Copyright © 2002 Cambridge University Press 0890 - 0604 0 02 $ 12 . 50 DOI : 10 . 1017 0 S0890060402163025 127 standard components database . She retrieves a floor slab design that comes with a spreadsheet for calcu - lating the correct slab thickness . This spreadsheet takes into account the company’s previous experiences with bouncy floor slabs and increases the depth beyond the minimum required by the building code . Whereas internal knowledge reuse is effective , external knowledge reuse often fails . This failure occurs for numer - ous reasons , including the following : • Designers do not appreciate the importance of knowl - edge capture because of the additional overhead re - quired to document their process and rationale . Consequently , knowledge is often not captured . • Even when knowledge capture does take place , it is limited to formal knowledge ~ e . g . , documents ! . Con - textual or informal knowledge , such as the rationale behind design decisions or the interaction among team members on a design team , is often lost , rendering the captured knowledge not reusable , as is often the case in current industry documentation practices . • There are no mechanisms , from both the information technology and organizational viewpoints , for captur - ing , finding , and retrieving reusable knowledge . Empirical observations of designers at work show that in - ternal knowledge reuse is effective since : • The designer can quickly find ~ mentally ! reusable items . • The designer can remember the context of each item and can therefore understand and reuse it more effectively . We use these observations of internal knowledge reuse as the basis for improving external knowledge reuse . We introduce the notion of knowledge in context . Knowl - edge in context is design knowledge as it occurs in a de - signer’s personal memory : rich , detailed , and contextual . This context includes design evolution @ from sketches and back of the envelope calculations to detailed 3 - dimensional computer aided design ~ CAD ! , analysis , and simulations # , design rationale , and relationships among different per - spectives within cross - disciplinary design teams . We define the corporate memory as a repository of knowledge in con - text ; in other words , it is an external knowledge repository containing the corporation’s past projects that attempts to emulate the characteristics of an internal memory , that is , rich , detailed , and contextual . The corporate memory grows as the design firm works on more projects . We view knowledge reuse as a step in the knowledge life cycle ~ Fig . 1 ! . Knowledge is created as designers collabo - rate on design projects . It is captured , indexed , and stored in an archive . At a later time , it is retrieved from the archive and reused . Finally , as knowledge is reused , it is refined and becomes more valuable . In this sense , the archive sys - tem acts as a knowledge refinery . The current study focuses on the knowledge reuse phase and builds on previous work that addresses knowledge creation , capture , indexing , and archiving ~ Fruchter , 1996 ; Fruchter et al . , 1998 ; Reiner & Fruchter , 2000 ! . 1 . 1 . Practical motivation The motivation behind the development of external knowl - edge reuse systems is that the capture and reuse of knowl - edge is less costly than its recreation . In many architecture , engineering , and construction ~ A 0 E 0 C ! firms today , knowl - edge capture and reuse is limited to dealing with paper archives . Even when the archives are digital , they are usu - ally in the form of electronic files ~ documents ! arranged in folders , which are difficult to explore and navigate . A typ - ical query might be , “how did we design previous cooling tower support structures in hotel building projects ? ” In many cases , the user of such systems is overloaded with informa - tion but gains very little context to help him or her decide if and what to reuse . This paper addresses the following central questions : • What are the key characteristics of the knowledge re - use process ? • How can the design knowledge reuse process in the A 0 E 0 C industry be supported by a computer system ? • What are natural idioms that can be modeled into a computer system to provide a designer with an effec - tive knowledge reuse experience ? Fig . 1 . The knowledge life cycle . Knowledge is created , captured , indexed , and stored in an archive . At a later time it is retrieved from the archive and reused . As it is reused it becomes refined . This research focuses on the knowledge reuse phase . 128 R . Fruchter and P . Demian Our objective is to assist the designer and to support the pro - cess of design knowledge reuse rather than to automate it . 1 . 2 . Related research Related research studies on design knowledge reuse focus on either the cognitive aspects or the computational aspects . Research into the cognitive aspects of reuse has helped to identify the information needed by designers . Kuffner and Ullman ~ 1990 ! found that the majority of information requested by mechanical engineers concerned the operation or purpose of a designed object , information that is not typically captured in standard design documents ~ drawings and specifications ! . Finger ~ 1998 ! observed that designers rarely use CAD tools to help them organize and retrieve design information . This research extends these findings by formalizing the requirements for contextual information when reusing items from previous projects . On the computational side , research into design knowl - edge reuse focuses on design knowledge representation and reasoning . Knowledge representation ranges from informal classification systems for standard components 1 ~ see , e . g . , Culley , 1998 ! to more structured design rationale ap - proaches ~ Hu et al . , 2000 gives an overview ! . There is a trade - off in design rationale systems between the overhead for recording design activities and the structure of the knowl - edge captured . History - based rationale approaches , such as electronic notebooks ~ Lakin et al . , 1989 ! , require a low overhead but result in a collection of disparate documents . Argumentation - based approaches ~ McCall , 1987 ; Chung & Goodwin , 1994 ! and device - based approaches ~ Baudin et al . , 1993 ! provide a more uniform structure but add a documen - tation overhead to the design process . Highly structured representations of design knowledge can be used for reasoning . However , these approaches usu - ally require manual pre - or postprocessing , structuring , and indexing of design knowledge . For example , ARCHIE is a case - based reasoning tool for aiding architects during con - ceptual design ~ Domeshek & Kolodner , 1993 ! . ARCHIE breaks down previous design cases into “chunks” and uses indexes such as issues , building space , and life cycle phase to automatically identify the chunks that are the most useful to the architect . CASECAD enables designers to retrieve previous design cases based on formal specifications of new design problems ~ Maher , 1997 ! . IDEAL is a model - based reasoning tool that uses both general domain knowledge and knowledge from specific cases ~ Bhatta et al . , 1994 ! . These tools enable knowledge retrieval and reuse based on a priori set representations that are specific to narrowly defined domains and media types . This research brings together the cognitive and compu - tational approaches . We consider reuse to be a combined effort involving both the human and the computer . We there - fore address the issue of design knowledge reuse as a human – computer interaction ~ HCI ! problem , and we take a user - centered approach to designing this interaction . We aim to provide a knowledge reuse experience that leverages natu - ral idioms and metaphors in order to support the designer in doing his or her work , and we consider automatic reasoning approaches to constrain the user’s knowledge reuse activities . In our approach , capture and indexing take place in real time , with the least possible intrusion on the design pro - cess . Knowledge is captured by supporting the typical com - munication and coordination activities that occur during collaborative design . 2 . EMPIRICAL OBSERVATIONS 2 . 1 . Ethnographic study We conducted a 2 - week ethnographic study in a structural design office in California . The objective of the study was to investigate the reuse process qualitatively and gain a deeper understanding of the steps involved and the types of information reused , rather than to analyze the designers’ work practices statistically . For a discussion of the use of ethnographic methods for design , see Blomberg et al . ~ 1993 ! . The firm has three offices in the United States with a total of 20 engineers . The California office employs five engineers , including the founder and senior engineer . The study focused on the interactions between an expert ~ the senior engineer ! and a novice structural designer . Internal knowledge reuse was observed and recorded when the nov - ice came to the expert with questions . Our observations indicated that the expert always referred to his work on previous projects when answering these questions . Observations were recorded by taking notes throughout the working day . During this 2 - week period , three project design meetings were held , each lasting for 3 – 4 h . All three design meetings were videotaped and transcribed in their entirety for video protocol analysis . In addition to this , we also accompanied the two design - ers on a 5 - h site visit to a hotel construction site in Southern California . The discussions between the field engineer , ex - pert designer , and novice designer were videotaped and tran - scribed for video protocol analysis . In the following months , we conducted several 3 – 4 h visits to the design office . The purpose of these visits was to interview the expert designer in order to refine the reuse model that was developed . These meetings were video - taped and transcribed for video protocol analysis . The transcripts and notes from these meetings were ana - lyzed qualitatively . All instances of reuse , whenever a de - signer referred to a previous project or design experience , were identified and coded . In addition to ethnographic observations , we collected a large amount of data from one of the projects on which the designers had worked . This included a complete set of CAD 1 It has been argued that component reuse should not be restricted to standard parts coming from catalogs but should also include reuse of designed components ~ Culley & Theobald , 1997 ! . Reuse of knowledge from a corporate memory 129 files for the project ~ about 1200 AutoCAD files ! and 200 internet discussion forum messages , as well as sketches , spreadsheets , and other documents . This data was used as a preliminary set of test cases during the development of our prototype system . 2 . 2 . Knowledge reuse process During our study , the expert’s internal knowledge reuse process was observed to be very effective , although it would have been impossible to evaluate his mental retrieval pro - cess quantitatively in terms of precision and recall . He was always able to directly recall related past experiences and apply them to the situation at hand . Two key observations in particular characterize the effectiveness of internal knowl - edge reuse : 1 . Even though the expert’s internal memory was very large ~ he has over 20 years of experience ! , he was always able to find relevant designs or experiences to reuse . 2 . For each specific design or part of a design he was reusing , he was able to retrieve a lot of contextual knowledge . This helped him to understand this de - sign and apply it to the situation at hand . When de - scribing contextual knowledge to the novice , the expert explored two contextual dimensions : the project con - text and the evolution history . The project context dimension encapsulates the levels of granularity at which contextual knowledge about the de - sign project can be explored . Given an item from the cor - porate memory , we identified the following directions of exploration : • Up : From component to subassembly . Designers move upward along this dimension to explore the discipline and project in which this item occurs . For example , if a structural designer considers reusing a cooling tower frame 2 from a previous project , he or she might recall the structural system or the entire project from which this cooling tower frame is taken . • Down : From subassembly to component . Designers move downward along this dimension to consider the subparts or subcomponents of which this item is com - posed . For the cooling tower frame , the structural de - signer can consider the individual beams , columns , braces , and connections of which the frame is composed . • Sideways : From one item to related items . Designers move sideways to explore related items in the corpo - rate memory . For the cooling tower frame , the de - signer reusing the frame can consider the cooling tower unit supported by the frame to determine what load it exerts on the frame , or he or she might explore archi - tectural features related to the frame . The evolution history is the record of how an item evolved from an abstract idea or a set of requirements to a fully designed physical entity . Given an item from the corporate memory , we identified the following directions of exploration : • Up : From detailed to conceptual . Designers move up - ward along this dimension to trace the concepts that were explored early on in the design of this item . For the cooling tower frame , the designer might recall a sketch of the conceptual braced - frame design that was created early in the design process . • Down : From conceptual to detailed . Designers move downward along this dimension to follow the evolu - tion of this item into a fully designed physical compo - nent . For the cooling tower frame , the designer reusing the frame might follow its evolution into a fully de - tailed design in a CAD file and can even study photo - graphs of the frame as it was built . • Sideways : From alternative to alternative . Designers also move sideways to explore the different alterna - tives that were considered at any stage in the design process . The designer reusing the cooling tower frame might recall that steel and concrete alternatives were considered . Perhaps the concrete alternative that was originally abandoned can now be reused . There are therefore six degrees of exploration , three ~ up , down , and sideways ! in each of the two contextual dimensions . The observed process of internal knowledge reuse is for - malized into three steps : 1 . finding a reusable item , 2 . exploring its project context in order to understand it and assess its reusability , and 3 . exploring its evolution history in order to understand it and assess its reusability . We use these observations of internal knowledge reuse as the basis for supporting external knowledge reuse from a corporate memory ~ Fig . 2 ! . 2 . 3 . Trade - off between productivity and creativity Reusing items from previous designs can increase the pro - ductivity of the design process but may also compromise the creativity of the designed artifact . When guiding the novice on what to reuse , the expert constantly struggled to manage this trade - off . In particular , we identify two general characteristics of design knowledge that are considered by the designer when making a reuse decision : 2 Acooling tower is a large air conditioning unit . Acooling tower frame is a support structure that holds the cooling tower up . 130 R . Fruchter and P . Demian • Level of granularity : from the whole artifact to small subcomponents of the artifact . Reiner and Fruchter ~ 2000 ! recognize level of granularity as an important factor in capturing and reusing design knowledge . Re - turning to the cooling tower frame example , if the de - signer is able to reuse the cooling tower frame , he or she might consider reusing the entire structural subsys - tem from which it comes . Conversely , if the designer is unable to reuse the frame , he or she might consider reusing a subpart ~ for example , a connection detail ! . • Level of abstraction or precision : from abstract or con - ceptual ideas to precisely defined physical compo - nents . Altmeyer and Schürmann ~ 1996 ! refer to this as refinement level , and they present a formalization of the design process in which each design step takes the artifact from a more abstract refinement level to a more precise refinement level . Similarly , Sutherland ~ 1963 ! describes the design process as “a spiral that proceeds from the abstract to the particular over time . ” In the example of the cooling tower frame , if the designer is not able to reuse the cooling tower frame in its fully designed version , he or she might be able to extract and reuse some concepts described in early sketches or notes . These two attributes correspond to the two contextual dimensions explored by the designers that we observed in practice . As the design process progresses over time , the generated design knowledge goes from abstract to precise , or from conceptual to detailed . Broadly speaking , the evo - lution history “varies” along the precision axis and the project context “varies” along the granularity axis . These two axes , when used to define a 2 - dimensional knowledge space ~ Fig . 3 ! , can be used to express the trade - off between productivity and creativity . At the top right corner of the knowledge space , the knowledge being reused is precise and pertains to a whole artifact , for example , reusing a fully designed structural system for a building . This occurs , for example , during evolutionary design . In this situation , “a lot of reuse is happening , ” but this is more likely to result in a loss of creativity because the whole artifact is used as is , without exploration of alternatives . Conversely , at the bottom left corner of the knowledge space , the knowledge being reused is abstract and pertains to small subcomponents of the artifact ~ e . g . , reusing an ab - stract principle for joining a beam to a column ! . In this situation , “less concrete reuse is happening , ” which will not affect the originality of the solution . A similar diagram as that shown in Figure 3 is used by Rasmussen ~ 1990 ! to represent the problem space in computer troubleshooting . Whether an item from the corporate memory can be re - used will depend on that item’s levels of granularity and precision . These are general characteristics . We argue that , in general , in the A 0 E 0 C industry , items that pertain to small grains of the artifact and that express abstract con - cepts ~ rather than precise designs ! will be more reusable . Our aim is to use these observations to design an inter - action experience that supports the designer in making this decision . Of course , whether an item can be reused will also depend on the similarity between the designer’s current sit - uation and the situation in which this item was originally designed . In our framework , this assessment of similarity is part of the task of finding reusable items . In finding reus - able items from previous projects , the expert was implicitly comparing the current project to previous projects and iden - tifying similar previous projects . We therefore argue that the understand steps in the knowl - edge reuse process ~ exploring the project context and the evolution history ! not only facilitate the understanding of this item and its effective reuse but also help to manage the trade - off between productivity and creativity . 3 . SCENARIO - BASED DESIGN METHODOLOGY CoMem ~ Corporate Memory ! is a prototype system that supports external knowledge reuse by supporting the three Fig . 2 . ~ a ! The observed process of internal knowledge reuse . The designer finds a reusable item and then explores its project context and evolution history in order to understand it . ~ b ! The formalized process of external knowledge reuse . External knowledge reuse is based on the same steps as those observed during internal knowledge reuse . Reuse of knowledge from a corporate memory 131 steps observed during internal knowledge reuse : find , ex - plore project context , and explore evolution history . In developing CoMem , we adopted a scenario - based ap - proach to the design of HCI ~ Rosson & Carroll , 2001 ! . The premise behind scenario - based methods is that descriptions of people using technology are essential in analyzing how technology is reshaping or will reshape their activities . The scenario - based design process begins with an analy - sis of current practice using problem scenarios . These are transformed into activity scenarios , which are narratives of typical services that users will seek from the system . Infor - mation scenarios are elaborations of the activity scenarios that provide details of the information that the system will provide to the user . Interaction scenarios describe the de - tails of user interaction and feedback . The final stage is prototyping based on the interaction scenarios and evalua - tion . The process as a whole , from problem scenarios to prototype development , is iterative . CoMem is being developed using three sets of scenarios , all of which stem from our empirical observations of de - signers at work . In the first set , a novice designer asks a mentor for help . This was later developed into a scenario in which the mentor was unavailable . In this case , the novice had to rely on CoMem to help him identify reusable items and provide enough contextual information for him to be able to understand and reuse these items . The second set of scenarios also starts with the novice asking his mentor for help . However , this was developed into a scenario where the mentor uses CoMem as a mentor - ing tool by identifying parts of the corporate memory for the novice to explore on CoMem . The third set of scenarios considers reuse from the per - spective of an experienced designer , who is more con - cerned with productivity than understanding or learning . He knows what he is looking for and he uses CoMem to help him find it and reuse it . The interaction model here is closer to retrieval than exploration . Ongoing development of CoMem is guided by the itera - tive analysis , testing , and refinement of these scenarios . The following is an example of a problem scenario that was developed based on our empirical observations . It will be revisited in this paper to illustrate the use of CoMem . An expert structural designer , Eric , and a novice , Nick , both work for a structural design office in northern Cal - ifornia . The office is part of the “X Inc . ” Structural En - gineering Firm . They are working on a ten - story hotel that has a large cooling tower unit . Nick must design the frame that will support this cooling tower . Nick gets stuck and asks Eric for advice . Eric recalls several other hotel projects that were designed by “X Inc . ” He tells Nick to look at the drawings from the Bay Saint Louis Fig . 3 . The knowledge space . Items that pertain to small grains of the artifact and that express abstract concepts ~ rather than precise designs ! will generally be more reusable without compromising the creativity of the design . Designers consider these two character - istics ~ precision and granularity ! in order to manage the trade - off between productivity and creativity . 132 R . Fruchter and P . Demian project , a hotel project that “X Inc . ” designed a couple of years ago . Nick spends over an hour looking for the Bay Saint Louis drawings in the “X Inc . ” paper archive . He eventually finds the drawing sheet with the Bay Saint Louis cooling tower frame . He shows it to Eric . The drawing shows the cooling tower frame as it was finally built . It is a steel frame . Eric realizes that what he had intended Nick to reuse is an earlier version that had a steel part and a concrete part . He is not sure if this earlier version is documented somewhere in the archive . Rather than go through the paper archive again , Eric simply sketches the design for Nick . Eric’s sketch also shows the load path concept much more clearly than the CAD drawing would have , which helps Nick to understand the design . Eric explains to Nick how and why the design evolved . Given the current project they are working on , it would be more appropriate to reuse the earlier composite version . Eric recalls that the specifications of the cooling tower unit itself , which were provided by the heating , ventilation and air conditioning ~ HVAC ! subcontractor , had a large impact on the design . Nick now feels confident enough to design the new cooling tower frame by reusing the same concepts as the Bay Saint Louis cooling tower frame , as well as some of the standard details . 4 . CoMem : A CORPORATE MEMORY COMPUTER ENVIRONMENT 4 . 1 . Points of departure 4 . 1 . 1 . Design as reflection in action CoMem is the latest in a line of research projects on design knowledge management conducted at the Project - Based Learning Lab at Stanford University . These projects are based on Schön’s Reflective Practitioner paradigm of design ~ Schön , 1983 ! . Schön argues that every design task is unique and that the basic problem for designers is to determine how to approach each particular unique task . Schön places this tackling of unique tasks at the center of design practice , a notion he terms knowing - in - action : Once we put aside the model of Technical Rationality which leads us to think of intelligent practice as an ap - plication of knowledge . . . there is nothing strange about the idea that a kind of knowing is inherent in intelligent action . . . . it does not stretch common sense very much to say that the know - how is in the action—that a tight - rope walker’s know - how , for example , lies in and is re - vealed by , the way he takes his trip across the wire . . . . There is nothing in common sense to make us say that the know - how consists in rules or plans which we entertain in the mind prior to action . ~ Schön , 1983 , p . 50 ! To Schön , design , like tightrope walking , is an action - oriented activity . However , when knowing - in - action breaks down , the designer may consciously transition to acts of reflection . Schön calls this reflection - in - action . In a cycle that Schön refers to as a reflective conversation with the situation , designers reflect by naming the relevant factors , framing the problem in a certain way , making moves to - ward a solution , and evaluating those moves . Schön argues that whereas action - oriented knowledge is often tacit and difficult to express or convey , what can be captured is reflection - in - action . 4 . 1 . 2 . Semantic modeling engine This reflection - in - action cycle forms the conceptual ba - sis of knowledge capture in the semantic modeling engine ~ SME , Fruchter , 1996 ! . SME is a framework that enables designers to map objects from a shared product model to multiple semantic representations and other shared project knowledge . Figure 4 shows a simplified entity – relationship diagram of the SME schema @ Fig . 4 ~ a ! # , and an example of actual project knowledge @ Fig . 4 ~ b ! # . In SME , a project object encapsulates multiple discipline objects and a disci - pline object encapsulates multiple component objects . Each SME object can be linked to graphic objects from the shared 3 - D product model or to other shared project documents or data ~ such as vendor information , analysis models , sketches , or calculations ! . SME supports Schön’s concept of reflection - in - action by enabling the designer to declare his or her particular per - spective on the design ~ i . e . , framing the problem ! by creat - ing a discipline object . Next , he or she proceeds to name the individual components of the problem as he or she sees it by creating component objects . SME discipline objects are exported to external analysis tools to derive building behav - ior and evaluate it by comparing it to functional require - ments . The designer uses these as the basis for making design decisions , that is , making moves toward the solution and evaluating those moves . SME acts as an integration environment to support the development of a shared building model that uses an Au - toCAD graphic representation as the central interface among designers ~ human to human ! and as the gateway to tools or services ~ human to machine ! in support of cross - disciplinary design . It enables designers to share and explore designs , capture multicriteria semantics , and design rationale cri - tiques , explanations , and change notifications . It enables a design - build team to explore the different cross - disciplinary issues and to : • augment shared graphic product models with the team members’intents , interests , and responsibilities and with formal and informal design rationale , knowledge , and information ; • gather networked information by using the discipline subsystems to customize their search for additional dis - cipline information ; • analyze and evaluate the discipline subsystems to de - rive the building’s behavior and compare it to func - tional requirements ; Reuse of knowledge from a corporate memory 133 • explain the results to other members of the team ; • capture design perspectives at different levels of gran - ularity , that is , the component , discipline , and project levels ; • infer shared interests and route change notifications with regard to a modified component or discipline sub - system ; and • search for relevant information based on keywords or graphic object selections in the shared building model ~ Figure 5 ! . Certain topics are beyond the scope of this discussion , in - cluding gathering network information using the WWW - Coach tool ~ Fruchter & Reiner , 1996 ! , analyzing and evaluating designs using networked services , and explain - ing evaluation results using knowledge - based tools such as the following : • Comfort for passive energy conservation critique ~ Fruchter , 1996 ! ; • Egress for floor plan egress evaluation ~ Fruchter , 1996 ! ; • QLRS ~ Fruchter et al . , 1993 ! for qualitative structural analysis ; and • CMM ~ Fischer & Aalami , 1996 ! for constructibility evaluation . These tasks and the tools supporting them were presented in a previous paper ~ Fruchter , 1996 ! . The information and knowledge related to the shared prod - uct model are organized as the follows : • Graphics objects contain drawing interchange file ~ DXF ! representations of the graphic model entities . • Discipline objects encapsulate features for a particular perspective . A discipline object has two primary attributes : a list of component classes and a list of component objects . Component classes provide an on - tology to describe the semantic meaning of the graph - ics within a context . This ontology can be defined or augmented by the user at run time . The list of compo - nent objects is edited by the user and contains the in - stances from a particular graphic model that are relevant to an interpretation . • Component objects capture the link between graphic entities and symbolic entities . We define a component as a constituent element of a design that has meaning to a designer within a particular context . The basic elements of a component object are a component class , an identifier or component name , and a list of graph - ics objects . Other information objects can be linked to component objects , such as note objects , W - Doc objects , and notification objects . Component objects allow graphic entities to have multiple meanings within different discipline objects . For example , the same physical object can be named a “shear wall” by the structural engineer and a “partition wall” by the architect . • Person objects serve as a record of the project partici - pants and their declared roles and interests . A person object consists of the designer’s name , a user name , a user password , an E - mail address , a list of responsibil - ities , and a list of interests . Person objects can be added , updated , and deleted by the users . The lists of interests and responsibilities are used to infer which team mem - Fig . 4 . ~ a ! A simplified entity - relationship diagram of the SME schema . A project object contains multiple discipline objects , and a discipline object contains multiple component objects . These semantic objects can be linked to graphic objects or external data . ~ b ! An example of actual project knowledge in SME . 134 R . Fruchter and P . Demian bers should be sent E - mail notifications about changes to a portion of the design . • Note objects contain text written by the project mem - bers . They are used to capture the design rationale or other design related information that a designer tradi - tionally records in notebooks , memos , and so on . Notes are encapsulated in component objects to describe de - sign requirements or intents . • W - Doc objects provide a mechanism for linking a com - ponent object to sources of information . References to any information published on the worldwide web ~ WWW ! can be handled . A component in the graphic model can be linked to component specification sheets , code pages , structural details , schedule and cost infor - mation , vendor catalog information , services available on the WWW , or a photograph of the construction site . • Change notification objects : SME facilitates commu - nication among designers using these objects . These notifications are used to solicit feedback , give ap - proval , broadcast changes , or initiate negotiations . SME routes change notifications automatically , based on mul - tiple interpretations of graphic objects and interests expressed by the design team members . Figure 5 illustrates the results of different information search options , that is , by pointing and clicking to select a graphic object in the AutoCAD shared building model or by typing in a keyword . The building model represents the project memory of one of the pilot projects—a $ 5 . 5 million classroom and lab facility on a university campus—that was used to test the SME system . The screen snapshots also depict the multiple discipline interpretations of the selected graphic object , that is , the architect annotated it as “Exterior Wall of the auditorium” and the construction manager anno - tated it as “Milestone2 Exterior Closure” ; and the different external information and knowledge objects that are linked Fig . 5 . The results of a search by graphic object and by keyword and links to external knowledge . Reuse of knowledge from a corporate memory 135 to the component objects in the shared graphic model , for example , ~ N ! notes , ~ D ! data , ~ H ! for hyperlinks to W - Docs . 4 . 1 . 3 . Project memory The ProMem ~ project memory ! system ~ Fruchter et al . , 1998 ; Reiner & Fruchter , 2000 ! takes the semantic model - ing engine as its point of departure and adds to it the time dimension . ProMem captures the evolution of the project at the three levels of granularity identified by SME as emulat - ing the structure of project knowledge : project , discipline , and component . ProMem automatically versions each SME object every time a change is made in the design or addi - tional knowledge is created . This versioning is transparent to the designer . The designer is able to go back and flag any version to indicate its level of importance ~ low , conflict , or milestone ! and its level of sharing ~ private , public , or con - sensus ; Fig . 6 ! . The ProMem system architecture consists of three mod - ules : the shared graphic modeling environment ~ i . e . , Auto - CAD ! ; VisionManager , a module that was developed for knowledge management and integrated within AutoCAD to provide the link between the shared graphic model and the third module ; and the Informix object - relational database management system ~ ORDBMS ! for storing the evolution of the product models . The system was implemented using C , AutoLisp , DCL , and SQL statements . It runs on Sun workstations and Windows platforms . It has been tested and validated in a dozen building projects in both education and industry test case projects , as well as for pilot product development projects in other vertical markets such as the automotive , manufacturing , and aerospace industries ~ Fruchter et al . , 1998 ! . 4 . 2 . CoMem modules for supporting reuse CoMem extends ProMem first by grouping the accumu - lated set of project memories into a corporate memory , and second by supporting the designer in reusing design knowl - edge from this corporate memory in new design projects . This support for knowledge reuse is based on our observa - tions of internal knowledge reuse by designers at work . This knowledge reuse is not limited to designed compo - nents and subcomponents , but includes the evolution , ratio - nale , and domain expertise that contributed to these designs . Here we echo Schön’s ~ 1983 ! contention that design exper - tise lies , not in “rules or plans entertained in the mind prior to action , ” but in the action itself . The CoMem HCI experience is based on the principle of “ overview first , zoom and filter , and then details - on - demand ” ~ Shneiderman , 1999 ! . This principle is used to design a user experience that is based on our empirical observations of internal knowledge reuse ~ Fig . 7 ! . Fig . 6 . The version browser in ProMem . The version browser lists the versions . Each version indicates a date , the originator of the change , a snapshot of the design , and its levels of importance and sharing . The version browser provides functionality for flagging and viewing versions . 136 R . Fruchter and P . Demian Based on the three reuse activities identified above ~ find , explore project context , explore evolution history ! , CoMem has three corresponding modules : an overview , a project context explorer , and an evolution history explorer . Fig - ure 8 shows the views of the SME corporate memory that will be generated for each of the three modules . For each module , we are investigating various metaphors , as well as possible visualization and interaction techniques . Metaphor here is used in an HCI interaction sense . Met - aphors increase the usability of user interfaces by support - ing understanding by analogy . Modern operating systems use the desktop metaphor . On - line services use shopping cart and checkout metaphors to relate the novel experience of buying on - line to the familiar experience of buying at a bricks and mortar store . See Nelson ~ 1990 ! for a discussion of the advantages and pitfalls of using metaphors . The overview supports the designer in finding reusable items . The objective is to enable the designer to view the entire corporate memory at a glance . The overview gives the designer an indication of which “regions” of the corpo - rate memory contain potentially reusable items . The over - view might be extremely dense . Filtering tools are used to avert information overload and help the designer focus by adding emphasis to certain items . Once the user has selected an item from the overview , the project context explorer supports the designer in exploring this item’s project context . This shows the project and dis - cipline to which this item belongs , as well as related com - ponents , disciplines , and projects . The item selected from the overview becomes the focal point of the project context explorer . Finally , in the evolution history explorer , the designer can explore the evolution history of any item selected from the overview . This view tells the story of how this item evolved from an abstract idea to a fully designed and de - tailed physical artifact or component . Fig . 7 . The CoMem HCI experience . Transformation from observed reuse steps to user interactions . Fig . 8 . The CoMem modules . ~ a ! The overview shows the entire corporate memory . ~ b ! The project context explorer takes a single item ~ in this case a structural frame ! as its focal point . ~ c ! The evolution history explorer shows the versions of a single item . Reuse of knowledge from a corporate memory 137 4 . 3 . CoMem interface This section describes each of the three CoMem modules : overview , project context explorer , and evolution history explorer . 4 . 3 . 1 . CoMem overview module The interaction design process for this module is based on the empirical observation that a designer can find reus - able items from his or her internal memory . We argue that an external memory system ~ CoMem ! needs to support the finding activity . We translate this activity need into an in - formation need : the need for an overview of the corporate memory . Assuming that the designer does not know a priori where in the corporate memory reusable items can be found , the overview should initially show all items . The overview needs to provide a succinct “at a glance” view of the entire cor - porate memory . CoMem uses a map metaphor for the over - view . Figure 9 shows a map of the “X Inc . ” corporate memory from the scenario . The map shows the four projects that constitute the corporate memory : Bay Saint Louis , Grand Californian , San Rafael Bridge Retrofit , and Imaginary Ho - tel . Each project contains several disciplines . For example , the Bay Saint Louis project has architecture , engineering , and site disciplines . Each discipline contains several com - ponents . For example , the Bay Saint Louis engineering dis - cipline contains a cooling tower frame component . An SME corporate memory is a hierarchical data struc - ture in which a corporation contains multiple projects , a project consists of multiple disciplines , and a discipline con - tributes multiple components . This hierarchy can become very large . For example , consider a small design practice that has worked on 10 projects , each project involving 10 disciplines , each discipline contributing 20 components , with each object versioned 50 times over the course of the project . The total number of objects in the corporate memory is close to 10 5 . Conventional techniques for visualizing hier - archies using nodes connected by links are inappropriate , given that the overview needs to show the entire corporate memory in a single display . Even creative variations of tra - ditional node - link diagrams , such as cone trees ~ Robertson et al . , 1991 ! and hyperbolic trees ~ Lamping & Rao , 1996 ! , cannot meaningfully display this large number of nodes . CoMem uses the squarified treemap ~ Bruls et al . , 1999 ! technique to display an overview of the corporate memory . The treemap technique has the advantage of making full use of the available display space , and it compliments the map metaphor . It is particularly effective for very large , fixed depth hierarchies , such as an SME corporate memory . Projects , disciplines , and individual components are repre - sented as rectangles nested within each other ~ Fig . 10 ! . The rectangles are laid out so as to minimize the average aspect ratio at each level of the hierarchy . The area on the map allocated to each item is based on a measure of how much knowledge this item encapsulates , that is , how richly annotated it is , how many times it is versioned , and how much external data is linked to it . Each item on the map is color - coded by a measure of relevance to the designer’s current task . Currently , this rel - evance measure is based on latent semantic analysis ~ LSI ; Landauer & Dumais , 1995 ! of the textual data in SME . LSI is a form of text analysis based on the text vector model . Text analysis is particularly effective here because SME objects are usually very richly annotated with text strings but otherwise have little formal data . In the text vector model , each text ~ in our case , the set of words used to label and annotate a semantic object ! is represented as a vector in high - dimensional space ~ Salton et al . , 1995 ! . The similarity between two vectors can be taken as the Euclidean distance or dot product . The principle behind LSI is that the way a pair of words occurs in small subsamples of language re - flects the psychological similarity between those two words . This similarity can be deduced by reducing the dimension - ality of the text vector . Using this technique , a search for the term cooling tower would also return results with the term vibration . A less experienced designer might not know that one of the most common problems in cooling towers is vibration , but the system would infer this from the way that these terms repeatedly appear together in the corporate memory . Fig . 9 . The CoMem overview . A map of the corporate memory using the squarified treemap technique ~ Bruls et al . , 1999 ! . The map shows four projects : Bay Saint Louis , Grand Californian , San Rafael Bridge Retrofit , and the Imaginary Hotel . Each project contains several disciplines . The Bay Saint Louis project has architecture , engineering , and site disciplines . Each discipline contains several components . One of the components in the Bay Saint Louis engineering discipline is the cooling tower frame . 138 R . Fruchter and P . Demian CoMem allows the user to filter out items from the over - view using dynamic querying . In a dynamic querying envi - ronment , search results are instantly updated as the user adjusts sliders or selects buttons to query a database ~ Shnei - derman , 1994 ! . The designer can filter based on the following : • Relevance : The designer can filter out projects , disci - plines , or components that have a small relevance measure . • Date : For very large corporate memories , a designer might only be interested in projects from the past three or four years . • Keywords : Keywords can be applied separately at the component , discipline , and project levels , that is , at each level or granularity . For example , the designer might only be interested in hotel projects with atriums , in the structural disciplines from these projects , and particularly in cooling tower frames . • Ownership : The designer might want to view only items designed by a particular individual in the corporate memory . For example , during our ethnographic study we observed that the typical designer prefers to reuse items that were designed by him - or herself . Items that are filtered out either appear grayed out or are not drawn at all , leaving more space for the remaining items ~ Fig . 11 ! . For a corporate memory containing many thou - sands of items , these filtering tools can be used to reduce the number of items displayed in the overview . To summarize , the treemap technique provides an effec - tive visualization for the overview of the corporate mem - ory . The relevance measure and filtering tools provide further assistance to the designer in finding reusable items . Once a reusable item is found , the designer can explore contextual information about this item in separate modules . 4 . 3 . 2 . CoMem project context explorer module The interaction design process for this module is based on the empirical observation that a designer can under - stand a found reusable item because he or she can remem - ber that item’s project context . We argue that an external Fig . 10 . The construction of a treemap . ~ a ! First , the display space is divided among the projects in the corporate memory . ~ b ! Second , each project rectangle is divided among the disciplines in that project . ~ c ! Third , each discipline rectangle is divided among the components in that discipline . Fig . 11 . Filtered treemaps . ~ a ! Filtered items on the treemap are grayed out . ~ b ! Filtered items are not displayed at all . Reuse of knowledge from a corporate memory 139 memory system should support project context explora - tion . We translate this activity need into an information need : the need for details on demand about an item’s project context . The project context explorer supports the designer in ex - ploring the project context of any item selected from the overview . This item becomes the focal point of the inter - action . CoMem uses a fisheye lens metaphor for the project context explorer . A fisheye lens balances local detail with global context . This metaphor is used here to suggest that the designer is initially concerned only with the item of interest but begins to explore the context outwards as necessary . Given a user - specified focal point , CoMem uses the fish - eye formulation ~ Furnas , 1981 ! to assign a degree of inter - est to every item in the corporate memory . Items with a higher degree of interest are displayed more prominently in the project context explorer . That is , given a focal point , the user will not be equally interested in all items . Furnas de - composes the degree of interest into a priori and a posteri - ori components . The a priori component is a contribution to interest that transcends the given interaction . In CoMem , the a priori component is taken as the level of granularity of an item , that is , how high up in the hierarchy it is . Consequently , a project object is intrinsically more important than a disci - pline object , which is intrinsically more important than a component object . The a posteriori component is the contribution to interest that depends on the current focal point . In CoMem , the a posteriori component is taken as the distance to the focal node , that is , the number of links in the shortest path be - tween the focal node and the node in question . Figure 12 shows a view of the CoMem project context explorer . Each object is positioned in the vertical axis ac - cording to its level of granularity and in the horizontal axis according to its degree of interest . The current focal node , in this case the Cooling Tower Frame component object , is displayed at the right - hand side of the image , along with the Engineering discipline object and Bay Saint Louis project object to which it belongs . To the left of those are items that are one degree of interest less : other projects in the “X Inc” corporate memory , other disciplines that were involved in the Bay Saint Louis project , and other components that were part of the Engineering discipline . This visualization em - phasizes structural relationships in the hierarchy that are obscured in the treemap and facilitates effective explora - tion of the focal node’s context . Fig . 12 . The CoMem project context explorer . Each project is positioned in the vertical axis according to its level of granularity and in the horizontal axis according to its degree of interest with respect to the Cooling Tower Frame focal point . 140 R . Fruchter and P . Demian 4 . 3 . 3 . CoMem evolution history explorer module The interaction design process for this module is based on the empirical observation that a designer can under - stand a found reusable item because he or she can remem - ber that item’s evolution history . We argue that an external memory system should support evolution history explora - tion . We translate this activity need into an information need : the need for details on demand about an item’s evo - lution history . The evolution history explorer enables the designer to explore the evolution history of any item selected from the overview . This view tells the story of how this item evolved from an abstract idea to a fully designed and detailed phys - ical component , discipline subsystem , or , even , entire project . CoMem uses a storytelling metaphor for the evolution his - tory explorer . This is based on our observation that the most striking means of transmitting knowledge from experts to novices in A 0 E 0 C design offices is through the recounting of experiences from past projects . Stories convey great amounts of knowledge and information in relatively few words ~ Gershon & Page , 2001 ! . In the evolution history explorer @ Fig . 13 ~ a ! # , all the ver - sions of an item captured by ProMem are displayed . Each version is represented by a circle that is color - coded to indicate this version’s level of importance ~ low , conflict , or milestone ! and level of sharing ~ private , public , or consen - sus ! . The levels of importance and of sharing are provided by the original designers working on the project . Next to this circle , thumbnails appear for any CAD objects , sketches , documents , or notes linked to this version . The designer is able to click on any of the thumbnails for a larger view of this content @ Fig . 13 ~ c ! # . With all the versions shown , the Fig . 13 . The CoMem evolution history explorer , showing the evolution of the cooling tower frame . ~ a ! All versions of the cooling tower frame are visualized . With all the versions shown , the display is very dense . ~ b ! Here the designer uses filters to show only milestone and consensus versions ~ the highest levels of importance and sharing , respectively ! . The evolution of the cooling tower frame is clearer . The early versions have sketches attached to them , and the later versions are linked to CAD drawings . ~ c ! The designer expands some of the thumbnails to view notes , sketches , calculations , and CAD drawings . Reuse of knowledge from a corporate memory 141 display can be very dense @ Fig . 13 ~ a ! # . The designer is able to filter out versions based on the levels of importance and sharing @ Fig . 13 ~ b ! # . 4 . 4 . CoMem system architecture Figure 14 illustrates the preliminary CoMem system archi - tecture . CoMem is implemented in Java . The database , containing the accumulated set of project memories , has a C programming language interface . There is a Java class that has methods implemented in C using the Java Native Interface to connect to , and retrieve data from , the data - base . Currently , the software modules for the native meth - ods must be present on the CoMem client . A future version of CoMem is planned in which Remote Method Invoca - tion will be used to run those methods on the CoMem server , so that the client would only need to have a Java - enabled web browser . 4 . 5 . Interaction scenario The following is an example of an interaction scenario that was developed from the problem scenario presented in Sec - tion 3 . It illustrates the use of CoMem in the design of the hotel cooling tower support structure . As before , Eric and Nick are working on a ten - story hotel that has a large cooling tower unit , and Nick is assigned the task of designing the frame that will support this cooling tower . They are using the ProMem system ~ Fig . 15 ! . Nick gets stuck , but Eric is not around to help . Nick clicks on the Reuse button in ProMem , which brings up CoMem . CoMem displays a map of the entire “X Inc . ” corporate memory ~ Fig . 16 ! . Items on the map are color - coded according to how relevant they are to his current project . Nick uses sliders to filter out irrelevant projects , disciplines , and components from the map . Most of the rectangles in the map are now grayed out ~ Fig . 17 ! . Of the few items that remain highlighted , Nick notices the Bay Saint Louis project . It has a relevant Engineering discipline and several relevant components within that discipline . He clicks on the component labeled Cooling Tower Frame . The project context and evolution history of the Bay Saint Louis cooling tower frame appear in two separate dis - plays ~ Fig . 18 , top right and bottom left corners ! . Nick Fig . 14 . Implementation of the CoMem system . Designers working on a project use AutoCAD to collaborate on a single shared product model in ProMem . This model is stored in a database in the ProMem server . At a later time , a designer may use CoMem to explore the accumulated set of project memories . The CoMem graphic user interface ~ GUI ! is implemented as a set of Java applets , which connect to the ProMem database using the Java Native Interface . 142 R . Fruchter and P . Demian examines the evolution of the frame . He chooses to view only milestone versions of the evolution ~ Fig . 19 ! . He sees that it started as a composite steel – concrete frame but was later changed into a steel frame . He sees several notes that were exchanged between the architect and en - gineer that help to explain this change . Nick clicks on Fig . 15 . Nick is working in the ProMem system when he gets stuck . He presses the Reuse button . Fig . 16 . CoMem pops up on the screen and displays the corporate map . Fig . 17 . Nick filters out some items from the map using the sliders . He notices the cooling tower frame and clicks on it . Reuse of knowledge from a corporate memory 143 one of the versions , and a detailed view of it appears ~ Fig . 20 ! . He finds a useful early sketch of the composite frame , which he saves to his local hard drive . Next , Nick begins to explore the project context of the Bay Saint Louis frame . He clicks on the Engineering discipline object in the project context explorer and sees that the Bay Saint Louis structural design criteria are similar to those in his current project ~ Fig . 21 ! . He no - tices a related component under the HVAC discipline : it is labeled Cooling Tower . This is the air - conditioning unit that is supported by the frame . Attached to this com - ponent , Nick finds a specifications sheet ~ Fig . 22 ! , which gives him an idea of the loads for which he must now design his cooling tower . 5 . CONCLUSIONS From empirical observations , we identify three steps in the process of internal knowledge reuse : find , explore evolu - tion history , and explore project context . We argue that a system for supporting external knowledge reuse should em - ulate this process . We describe CoMem , a prototype corpo - rate memory system that supports these three activities using three modules : an overview , a project context explorer , and an evolution history explorer . CoMem proposes metaphors based on natural idioms for each of the three modules ~ Fig . 23 ! . Metaphors are an important element in the design of human – computer interaction . They help the user form a conceptual model and understand the interface . This is par - Fig . 18 . The project context and evolution history of the cooling tower are displayed . Fig . 19 . Nick filters out unimportant versions from the cooling tower evo - lution using the slider and enlarges several thumbnails by clicking on them . Fig . 20 . Nick clicks on a particular version of the cooling tower from the evolution history explorer . The details of this version appear in the display area . Fig . 21 . Nick uses the project context explorer to view information about the structural system . He clicks on the document icon to bring up the design criteria document in a separate window . 144 R . Fruchter and P . Demian ticularly true for unfamiliar interactions such as the ones we are proposing . However there is a risk of choosing an unsuitable metaphor or applying a metaphor too literally . A major aspect of our ongoing work on CoMem is to identify and refine the metaphors and to specify how they manifest themselves in the various modules . We accomplish this through an iterative process of usability testing and re - design . In our preliminary study , we observed the following advantages and issues that need further research : 5 . 1 . Overview module The map metaphor serves as an effective conduit of knowl - edge from the computer to the human . It provides a suc - cinct representation that facilitates rapid and targeted knowledge finding . Information flows from the human to the computer in the form of the human’s interactions , which , through filtering based on the generated overviews , facili - tate appropriate problem rescoping by the designer . The treemap technique has been used with great success in a variety of contexts ~ e . g . , for visualizing the stock mar - ket and for displaying the contents of hard drives ! . Atreemap of the corporate memory can provide the user with a com - plete overview at a glance of past projects that are relevant to the current issue or information query . We plan to further study and identify filtering criteria that will be useful to designers in their everyday work . Further efforts are under - way to refine the relevance measure and to link it to mech - anisms that give the designer more control over the criteria used in this measure . 5 . 2 . Project context explorer module The project context provides succinct and focused contex - tual information by using the fisheye lens metaphor to control the amount of data generated and represented . Information flows from the human to the computer in the form of inter - actions in which the human reformulates the problem in terms of reusing a larger or smaller grain of the design or reusing a related item based on his or her interest . The application of Furnas’ fisheye formulation is effec - tive . It is based on structural relationships within the SME hierarchy . For example , for an engineer exploring the con - text of the cooling tower frame , the west corridor compo - nent from the architectural discipline and the cooling tower unit component from the HVAC discipline are assigned the same degree of interest . This indicates the need for further refinement of the degree of interest measure to provide a distinction based on similarity factors inferred from the SME semantics . 5 . 3 . Evolution history module The evolution history explorer provides rich , contextual rep - resentation of the evolution of project data , information , knowledge , and models over time . This facilitates better understanding of past solutions and decisions , which in turn enables the designer to refine his or her problem and decide what knowledge to reuse . We observed that the evolution history explorer display of a specific project history containing a multitude of ver - sions of data , information , knowledge , 3 - D models , and so forth in CoMem can lead to information overload . Fur - ther work is needed to identify other filtering criteria , such Fig . 22 . Nick uses the project context explorer to view information about the cooling tower unit . He views a spreadsheet attached as a hyperlink to the cooling tower object . Fig . 23 . CoMem reuse steps , user inter - actions , and metaphors . Reuse of knowledge from a corporate memory 145 as filtering by media type , volume of changes between versions , and so forth . In addition , a zooming option will be explored to enable improved evolution history exploration . Preliminary observations indicate that CoMem supports effective knowledge reuse . The map enables the finding activity much faster than , for example , searching for files on a hard drive using the Microsoft Windows explorer . The project context explorer and evolution history provide con - textual information that is not provided by state of practice systems , such as CAD file repositories or archived project extranets . This facilitates understanding of the item being reused and leads to informed and responsible reuse of de - sign knowledge . We plan to conduct further usability tests and a formal validation of CoMem with a number of indus - try partners . ACKNOWLEDGMENTS This research is supported by the UPS Endowment Fund at Stan - ford University . The authors would like to thank Dr . Gregory Luth and his colleagues at KL & A Structural Engineers and Builders for their time and attention . We also wish to thank Professor Helmut Krawinkler and Professor Terry Winograd for providing invalu - able input from their respective domains of structural design and HCI . CoMem uses the Treemap Java Library by Christophe Bouth - ier and the Latent Semantic Indexing software by Telcordia Technologies . REFERENCES Altmeyer , J . , & Shürmann , B . ~ 1996 ! . On design formalization and re - trieval of reuse candidates . In Artificial Intelligence in Design ’96 , Proc . Fourth Int . Conf . AI in Design ~ Gero , J . S . , & Sudweeks , F . , Eds . ! , pp . 231 – 250 . Lausanne , Switzerland : Kluwer Academic Press . Baudin , C . , Underwood , J . , Baya , V . , & Mabogunge , A . ~ 1993 ! . Using device models to facilitate the retrieval of multimedia design informa - tion . Proc . 13th IJCAI , pp . 1237 – 1243 . Bhatta , S . , Goel , A . , & Prabhakar , S . ~ 1994 ! . Innovation in analogical design : A model - based approach . Proc . Third Int . Conf . Artificial In - telligence in Design ( AID - 94 ) , pp . 57 – 74 . Blomberg , J . , Giacomi , J . , Mosher , A . , & Swenton - Wall , P . ~ 1993 ! . Ethno - graphic field methods and their relation to design . In Participatory Design : Principles and Practices ~ Schuler , D . , Ed . ! , pp . 123 – 155 . Mah - wah , NJ : Erlbaum . Bruls , D . M . , Huizing , C . , & van Wijk , J . J . ~ 1999 ! . Squarified treemaps . In Data Visualization 2000 , Proc . Joint Eurographics and IEEE TCVG Symp . on Visualization ~ de Leeuw , W . , & van Liere , R . , Eds . ! , pp . 33 – 42 . Vienna : Springer . Chung , P . , & Goodwin , R . ~ 1994 ! . Representing design history . In Artifi - cial Intelligence in Design ’94 , Proc . Second Int . Conf . AI in Design ~ Gero , J . S . , & Sudweeks , F . , Eds . ! , pp . 735 – 751 . Lausanne , Switzer - land : Kluwer Academic Press . Culley , S . J . ~ 1998 ! . Classification approaches for standard parts to aid design reuse . Proc . of the Institution of Mechanical Engineers 213 ~ Part B ! , pp . 203 – 207 . Culley , S . J . , & Theobald , G . ~ 1997 ! . Dealing with standard compo - nents for knowledge intensive CAD . In Knowledge Intensive CAD ~ Mantyla , M . , Finger , S . , & Tomiyama , T . , Eds . ! , Vol . 2 , pp . 235 – 255 . London : Chapman & Hall . Domeshek , E . , & Kolodner , J . ~ 1993 ! . Finding the points of large cases . Artificial Intelligence for Engineering Design , Analysis and Manufac - turing 7 , 87 – 96 . Finger , S . ~ 1998 ! . Design reuse and design research—Keynote paper . Proc . Engineering Design Conf . 1998 on Design Reuse , pp . 3 – 10 . Fischer , M . , & Aalami , F . ~ 1996 ! . Scheduling with computer - interpretable construction method models . Journal of Construction Engineering and Management , ASCE 122 , 337 – 347 . Fruchter , R . ~ 1996 ! . Conceptual , collaborative building design through shared graphics . AI in Civil and Structural Engineering 11 , 33 – 41 . Fruchter , R . , Krawinkler , H . , & Law , K . H . ~ 1993 ! . Qualitative modeling and analysis of lateral load resistance in frames . Artificial Intelligence for Engineering Design , Analysis and Manufacturing 7 , 239 – 256 . Fruchter , R . , & Reiner , K . ~ 1996 ! . Model centered world wide web coach . ASCE 3rd Congress of Computing in Civil Engineering ~ Vanegas , J . , & Chinowsky , P . , Eds . ! , pp . 1 – 7 . Anaheim , California . Fruchter , R . , Reiner , K . , Leifer , L . , & Toye , G . ~ 1998 ! . VisionManager : A computer environment for design evolution capture . CERA : Concur - rent Engineering : Research and Application Journal 6 , 71 – 84 . Furnas , G . W . ~ 1981 ! . The FISHEYE view : A new look at structured files . In Readings in Information Visualization ~ Card , S . K . , MacKinlay , J . D . , & Shneiderman , B . , Eds . ! , pp . 312 – 330 . Los Altos , CA : Morgan Kaufmann . Gershon , N . , & Page , W . ~ 2001 ! . What storytelling can do for information visualization . Communications of the ACM 44 , 31 – 37 . Hu , X . , Pang , J . , Pang , Y . , Atwood , M . , Sun , W . , & Regli , W . C . ~ 2000 ! . A Survey on design rationale : Representation , capture and retrieval . DETC 2000 0 DFM - 14008 . ASME Design Engineering Technical Confs . , 5th Design for Manufacturing Conf . Kuffner , T . A . , & Ullman , D . G . ~ 1990 ! . The information requests of me - chanical design engineers . Proc . Second Int . Conf . Design Theory and Methodology , pp . 167 – 174 . Lakin , F . , Wambaug , H . , Leifer , L . , Cannon , D . , & Sivard , C . ~ 1989 ! . The electronic design notebook : Performing medium and processing me - dium . Visual Computer : International Journal of Computer Graphics 5 , 214 – 226 . Lamping , J . , & Rao , R . ~ 1996 ! . The hyperbolic browser : A focus 1 context technique for visualizing large hierarchies . In Readings in Information Visualization ~ Card , S . K . , MacKinlay , J . D . , & Shneiderman , B . , Eds . ! , pp . 382 – 408 . Los Altos , CA : Morgan Kaufmann . Landauer , T . K . , & Dumais , S . T . ~ 1995 ! . Asolution to Plato’s problem : The latent semantic analysis theory of acquisition , induction and represen - tation of knowledge . Psychological Review 104 , 211 – 240 . Leifer , L . ~ 1997 ! . Stanford University class ME210 , course notes , Stan - ford , CA . Maher , M . L . ~ 1997 ! . CASECAD and CADSYN : Implementing case re - trieval and case adaptation . In Issues and Applications of Case - Based Reasoning in Design , ~ Maher , M . L . , & Pu , P . , Eds . ! . Mahwah , NJ : Erlbaum . McCall , R . ~ 1987 ! . PHIBIS : Procedurally hierarchical issue - based infor - mation systems . In Proc . Conf . Planning and Design in Architecture . Boston : ASME . Nelson , T . ~ 1990 ! . The right way to think about software design . In The Art of Human – Computer Interface Design ~ Laurel , B . , Ed . ! . Reading , MA : Addison – Wesley . Rasmussen , J . ~ 1990 ! . Mental models and the control of action in complex environments . In Mental Models and Human – Computer Interaction ~ Ackermann , D . , & Tauber , M . J . , Eds ! . Amsterdam : North - Holland . Reiner , K . , & Fruchter , R . ~ 2000 ! . Project Memory Capture in globally distributed facility design . In Computing in Civil and Building Engi - neering , Proc . Eight International Conf . ( ICCCBE - VIII ) , pp . 820 – 827 . Robertson , G . G . , Mackinlay J . D . , & Card S . K . ~ 1991 ! . Cone trees : Ani - mated 3d visualizations of hierarchical information . In Proc . ACM CHI’91 , Conf . on Human Factors in Computing Systems , pp . 189 – 194 . Rosson , M . B . , & Carroll , J . M . ~ 2001 ! . Usability Engineering : Scenario - Based Development of Human – Computer Interaction . Los Altos , CA : Morgan Kaufmann . Salton , G . , Allan , J . , Buckley , C . , & Singhal , A . ~ 1995 ! . Automatic analy - sis , theme generation , and summarization of machine - readable texts . In Readings in Information Visualization ~ Card , S . K . , MacKinlay , J . D . , & Shneiderman , B . , Eds . ! , pp . 413 – 418 . Los Altos , CA : Morgan Kaufmann . Schön , D . A . ~ 1983 ! . The Reflective Practitioner . Basic Books . Shneiderman , B . ~ 1994 ! . Dynamic queries for visual information seeking . In Readings in Information Visualization ~ Card , S . K . , MacKinlay , J . D . , & Shneiderman , B . , Eds . ! , pp . 236 – 243 . Los Altos , CA : Morgan Kaufmann . 146 R . Fruchter and P . Demian Shneiderman , B . ~ 1999 ! . Supporting creativity with advanced information - abundant user interfaces . In Human - Centred Computing , Online Com - munities , and Virtual Environments ~ Earnshaw , R . , et al . , Eds . ! , pp . 469 – 480 . London : Springer – Verlag . Sutherland , I . E . ~ 1963 ! . Sketchpad—A man - machine graphical communi - cation system . PhD Thesis . Cambridge , MA : MIT . Renate Fruchter is the director of the Project Based Learn - ing Laboratory ~ PBL Lab ! in the Department of Civil and Environmental Engineering at Stanford University . She received her engineering diploma from the Institute for Civil Engineering in Bucharest , Romania ~ 1981 ! , and her MS ~ 1986 ! and PhD ~ 1990 ! from the Technion , Israel , Institute of Technology . At Stanford she leads a research group that develops collaboration technologies for multi - disciplinary , geographically distributed teamwork and e - Learning . Dr . Fruchter’s interests are focused on knowl - edge capture , sharing , and reuse . In 1993 she launched the innovative Computer Integrated Architecture , Engineer - ing , Construction ~ A 0 E 0 C ! course currently offered in a global setting , including universities in the United States , Japan , and Europe . Peter Demian is a research assistant at the PBL Lab at Stanford University . He received his BA and MEng degrees in structural engineering from Cambridge University . He is currently working toward his PhD at the Department of Civil and Environmental Engineering at Stanford . Reuse of knowledge from a corporate memory 147