What is a Feature ? A Qualitative Study of Features in Industrial Software Product Lines Thorsten Berger 1 , Daniela Lettner 2 , Julia Rubin 3 , Paul Grünbacher 2 , Adeline Silva 4 , Martin Becker 4 , Marsha Chechik 5 , Krzysztof Czarnecki 1 1 University of Waterloo , 2 Johannes Kepler University Linz , CD Lab MEVSS , 3 Massachusetts Institute of Technology , 4 Fraunhofer IESE , 5 University of Toronto ABSTRACT The notion of features is commonly used to describe the functional and non - functional characteristics of a system . In software product line engineering , features often become the prime entities of software reuse and are used to distinguish the individual products of a product line . Properly decomposing a product line into features , and correctly using features in all engineering phases , is core to the immediate and long - term success of such a system . Yet , although more than ten di ﬀ erent deﬁnitions of the term feature exist , it is still a very abstract concept . Deﬁnitions lack concrete guidelines on how to use the notion of features in practice . To address this gap , we present a qualitative empirical study on actual feature usage in industry . Our study cov - ers three large companies and an in - depth , contextualized analysis of 23 features , perceived by the interviewees as typical , atypical ( outlier ) , good , or bad representatives of features . Using structured interviews , we investigate the rationales that lead to a feature’s perception , and identify and analyze core characteristics ( facets ) of these features . Among others , we ﬁnd that good features precisely describe customer - relevant functionality , while bad features primarily arise from rashly executed processes . Outlier features , serv - ing unusual purposes , are necessary , but do not require the full engineering process of typical features . 1 . INTRODUCTION Software Product Line Engineering ( SPLE ) approaches rely on identifying and explicitly managing commonalities and variabilities of a product portfolio . These commonalities and variabilities are often captured in an abstract manner using entities called features . The use of features is motivated by the fact that customers and engineers often speak of product characteristics in terms of features a product has or delivers . A feature is usually deﬁned as “a logical unit of behavior speciﬁed by a set of functional and non - functional requirements” [ 7 ] or “a distinguishable characteristic of a Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . Copyrights for components of this work owned by others than the author ( s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , topostonserversortoredistributetolists , requirespriorspeciﬁcpermission and / or a fee . Request permissions from permissions @ acm . org . SPLC 2015 , July 20 - 24 , 2015 , Nashville , TN , USA c ⃝ 2015 Copyright held by the owner / author ( s ) . Publication rights licensed to ACM . ISBN 978 - 1 - 4503 - 3613 - 0 / 15 / 07 . . . $ 15 . 00 DOI : http : / / dx . doi . org / 10 . 1145 / 2791060 . 2791108 concept ( system , component , etc . ) that is relevant to some stakeholder of the concept” [ 9 ] . In fact , many additional deﬁnitions of the term feature can be found in the literature [ 1 , 17 , 32 , 15 , 25 , 18 , 23 , 20 , 8 , 31 ] . Yet , companies still face di ﬃ culties deciding when to intro - duce a feature , determining the right level of granularity for a feature , and deﬁning the aspects that should be taken into consideration when engineering features . Without this knowl - edge , using SPLE concepts and the numerous existing tools for managing product line features is problematic . In fact , all authors of this paper—when presenting feature - related engineering or analysis techniques—are commonly faced with the question : “What is a feature ? ” In this paper , we aim to address this issue by empirically investigating the experiences of three successful industrial companies that develop software product lines ( SPLs ) and explicitly manage features . We conducted a qualitative study to elicit , understand , and describe features managed by the companies . We also describe the companies’ perspective on their successes and failures in managing features . Our main goal is to improve the empirical understanding of the notion of features in industry , by providing insights into the range of real - world feature deﬁnitions and usages . We rely on semi - structured interviews , whose design and analysis was guided by two main research questions : RQ1 : What reasons cause companies to perceive a feature as typical , atypical , good or bad ? We study concrete examples of features by asking our interviewees for typical , atypical ( outlier ) , good and bad exemplars , and by diving into the reasons for such classiﬁcation . Our intention was to be as open as possible , trying to disambiguate existing perceptions of features among our interviewees . RQ2 : What are important characteristics of features ? When discussing each feature , we asked the interviewees to describe its di ﬀ erent facets : intrinsic qualities of a feature , such as its purpose within the software lifecycle or its binding time . Using feature facets as the basic terminology allowed us to structure the discussion , to compare the features across companies , and to organize our ﬁndings . We present ﬁrst - hand opinions of industrial practitioners on practices contributing to the development of features that are perceived as typical , successful or failing . In addition to narrative descriptions of features and their classiﬁcation rationales , we provide an in - depth cross - case analysis of all the features . In summary , we contribute : ( i ) a set of facets that can be used as a terminology for describing and comparing features ( Table 2 ) ; ( ii ) reasons ( rationales ) for 16 Table 1 : Interview participants part . 1 role exp . 2 features K e b a A developer 12 LINMovement , Oscilloscope , Euromap , SilentMode B productmanager 19 ProﬁNetSlave , Wizard , ManualConﬁguration , UserGuidance C developer 3 LanguageTranslation , ProductionOverview , DataManager , HeatUpOptimization O p e l D team lead / architect 5 LaneKeeping , ParkAssist , EmergencyBraking D a n f o ss E architect 4 Torque , CascadeController , ProductG , PowerUpFastFuncs F team lead 8 . 5 Wobbler , FieldBus , ResetFix , BoardSupportPackage 1 participant ( interviewee ) 2 experience with the product line in years a feature being classiﬁed as typical , outlier , good , or bad ( Table 4 ) ; ( iii ) a range of values for di ﬀ erent facets of concrete features engineered in industry ( Sec . 6 ) ; and ( iv ) a set of core observations from the cross - case analysis that have practical impact on engineering features for SPLs . We proceed by outlining our research methodology in Sec . 2 . We then introduce the subject companies and their product lines in Sec . 3 . We address RQ1 in Sec . 4 and 5 , where we present features and their classiﬁcation rationales . In Sec . 6 , we address RQ2 with the cross - case analysis of the feature facets . Finally , we discuss threats to validity in Sec . 7 , related work in Sec . 8 , and conclude in Sec . 9 . 2 . RESEARCH METHODOLOGY We describe how we selected the companies for our study and present our approach to designing and conducting the interviews and analyzing the results . 2 . 1 Company Selection To conduct our study , we focused on companies that ( i ) de - velop SPLs ; ( ii ) explicitly record , track , and manage features— both common and variable ones ; and ( iii ) maintain an active collaboration with at least one of the authors of this paper . Our selection criteria ensured that we consider “meaningful” examples that are of general interest to the SPL community , and that allowed us to reliably interpret the ﬁndings based on our understanding of the companies’ product lines and their organizational context . We selected the three companies Keba , Opel , and Danfoss from the domains of industrial automation , automotive , and power electronics . For each company , we selected up to three interviewees , covering a range of roles , such as product manager , architect , and developer . For Opel , we interviewed a single person . Overall , we collected data about 23 features : twelve from Keba , three from Opel , and eight from Danfoss . Table 1 summarizes our interviewees , their roles , experience with the product line , and the features they described . 2 . 2 Interview Design Feature Facets . The goal of our study was to collect examples of features developed in industrial practice , and to outline the reasons for speciﬁc features being considered good , bad , typical or outliers . To gain insights into these questions , we conducted a set of semi - structured interviews with employees of the studied companies . We structured our interviews around feature facets —quali - ties of features that we aimed at exploring , such as lifecycle purpose and binding time . These facets were initially deﬁned by consulting the existing literature [ 19 , 7 , 8 , 10 ] , and then further reﬁned based on our previous collaborations with the studied companies . More speciﬁcally , three of the authors created within - case writeups of the general architecture and the organizational structure of each company , which were then used to guide the deﬁnition of the facets . The resulting set of facets , along with their description and clarifying examples , are given in Table 2 . Interview Process . We started the interview with ques - tions about our interviewees themselves , including ( i ) their professional background , ( ii ) how long they have been work - ing in the current profession , ( iii ) how long they have been involved with the product line , ( iv ) their role in the product line , and ( v ) the number of features they were involved with . We then asked each interviewee to describe three to four features , providing guidance in the selection process . We asked for one typical , one outlier , one good , and one bad feature . Our goal was to be as open as possible , leaving it to our interviewee’s judgment which criteria they use for selecting a feature for each type . Yet , to provide some guidance , we gave some hints , for instance , that a good feature could be one that is well - received and popular with customers , commercially successful , or on - time , on - budget , easily reusable , or has a low defect count . For a bad feature , we said it could be one that is problematic , troublesome , di ﬃ cult to develop , confusing , buggy , or which destroyed user conﬁdence , damaged the brand , or showed unexpected behavior . An outlier is a feature whose properties are rarely observed in other features . Finally , a typical feature is neither especially good nor bad , and not an outlier in any sense . For each feature described by the interviewees , we asked about the reasons why they considered it to be typical , good , bad , or outlier . We then asked to discuss the feature from the perspective of each facet . When interviewees had di ﬃ culties answering our questions , we used a “by - example” strategy , providing possible answers to our facet questions , as described in Table 2 . In case of surprising responses , we dug deeper by asking speciﬁc questions , trying to elicit the underlying reasons for such responses . 2 . 3 Data Collection and Analysis Each of the conducted interviews was fully recorded , with the obtained recordings between 68 and 117 minutes long . In addition to these , core answers to our facet - related questions were summarized by the interviewer during the interview itself . These summaries were further cross - checked against the recording by an author who did not participate in the corresponding interview . Such reviews were used to verify the summaries and to augment them when needed . The obtained information was used to describe the company - speciﬁc features in terms of their facets in Sec . 6 . Further , we created full transcripts for parts of the inter - views that discuss the rationale behind considering a feature as good , bad , typical or outlier . We applied open coding [ 2 ] to identify the main concepts related to this classiﬁcation , which are discussed and exempliﬁed in Sec . 4 and 5 . 3 . SUBJECT COMPANIES We now provide background information about our subject companies and the product lines they develop . 3 . 1 Keba : Industrial - Automation Provider Keba AG is a medium - scale company producing injection molding machines , energy appliances , and robotics solutions 17 Table 2 : Variety of feature facets elicited in interviews facet question examples Rationale Why does the feature exist ? Business reasons ( e . g . , customer request , market demand ) , regulatory needs ( e . g . , export restriction , country codes ) , aspects of the technical environment ( e . g . , platform , OS , library , installation environment ) or social aspects ( e . g . , usage context , user needs ) Level At what organizational level does the feature exist ? Customer - facing features ( e . g . , those managed by product managers ) or technical features ( e . g . , logical and physical architecture , or implementation - level features ) Nature What is the nature of the feature ? Primarily a unit of functionality ( e . g . , to characterize system capabilities , behavior , or data ) , a unit of variability ( e . g . , an optional functionality ) or a conﬁguration / calibration parameter Scope What is the scope of the feature ? Local to one component of a system or cross - cutting ( i . e . , scattered across architectural components ) Architecturalresponsibility What is the architectural responsibility of the feature ? Addresses user - interface requirements , encapsulates some application logic , or infrastructure - level tasks Lifecycle Does the feature have a purpose for the lifecycle of a system ? Testing , debugging , build , optimization , packaging , deployment , simulation , or monitoring Deﬁnition and approval How has the feature been deﬁned and approved ? Feature elicitation workshops with customers , systematic studies of similar system , or market analyses Representation Which artifacts / tools are used to deﬁne the feature ? Feature models , conﬁguration tools , code - level conﬁguration options , product maps , or spreadsheets Use In what ways is the feature used in the organization ? Deﬁning a product line’s scope , explaining a system to a customer , changing behavior at runtime , or supporting software composition Dependencies What are the dependencies to other features ? Dependencies between features ( e . g . , require or exclude ) , dependencies across levels ( e . g . , to logical and physical components ) Implementation and deployment Which languages and technologies have been used to implement and deploy the feature ? Programming languages used , build - time integration of libraries , feature deployment in app stores Inclusion / Exclusion Which mechanisms are used for including or excluding the feature ? Conﬁguration tool , conﬁguration ﬁle , user preferences at runtime Binding time At what stage is the feature included into the product ? Compile , build , load , or run time Responsibility Which people , roles , or teams are in charge of the feature ? Application engineers developing customer - speciﬁc features , platform engineers developing core functionality Position in hierarchy What are the features above ( if any ) and the features below ( if any ) ? Concrete feature names or not applicable Testing Which methods and tools are used for testing the feature ? Automated component test suites or manual system integration tests Evolution How did the feature change over time ? Changed frequently ( e . g . , daily , weekly or monthly ) , mostly stable , rolled out , or retired Metrics Which metrics are used to characterize the feature ? Number of products in which a feature exists , number of feature instances per product Quality and performance Which non - functional characteristics are important for the feature ? Reaction time , power consumption , or efﬁciency of a feature implementation used for industrial automation [ 22 ] . Around 700 people are employed at the head o ﬃ ce in the company’s home coun - try Austria , while a branch in China exists for the Chinese market . Keba’s industrial - automation solutions include hard - ware , software , and tools . We focus on the software product lines for injection - molding and robotics solutions . Keba ships about 7 , 000 injection - molding solutions to 25 customers per year . Four resellers are available for the injection - molding branch . Furthermore , Keba sells about 1 , 800 robotics so - lutions to about 30 customers per year and works with six resellers related to the robotics branch . Architecture . Layered technological platforms exist in diverse variants to meet requirements in di ﬀ erent market segments . Keba’s automation platform is organized as a product line , and di ﬀ erent variants are derived to develop domain solutions for injection molding , robotics , and energy automation . The platform for injection - molding machines provides an application framework , while the robotics plat - form uses a DSL - based approach for programming robots . The di ﬀ erent layers and their interfaces strongly inﬂuence the development process : multiple system platforms are derived from a system platform architecture to support multiple runtime systems . Domain solutions are built on top of each system platform , by exploiting the interfaces of the platform . Products are deﬁned by adding new functionality on top of the domain solutions using cloning . Products are ﬁne - tuned using conﬁguration parameters during installation and setup . Keba uses a wide range of variability mechanisms to sup - port product derivation : platform and product variants are created by exploiting interfaces to hook in new functionality ; by adding , exchanging or reloading modules ; by deﬁning spe - ciﬁc I / O - ports ; by modifying parameters to inﬂuence program behavior ; by adapting conﬁguration ﬁles to change system behavior and performance as well as by pre - processing code to integrate speciﬁc product variants during compilation . Organizational Structure . Dedicated teams maintain the automation platform and the domain - solution platforms . Project teams then work with customers on individual prod - ucts . There are also external developers contributing code— for example , domain engineers working for OEMs , and ap - plication engineers working for resellers . This has signiﬁ - cant impact on Keba’s development process , in particular , challenging platform evolution . Domain - solution engineers regularly review and prioritize features for upcoming releases . 3 . 2 Opel : Car Manufacturer Opel is a German subsidiary of GM—a large car manu - facturer operating across 157 countries , comprising 202 , 000 employees , and having sold 9 million vehicles in 2011 . Opel has software product lines aligned with the mechani - cal product lines and the engineering culture of cars . The product lines discussed in this paper are part of an initiative at GM called Next Generation Tools ( NGT ) [ 14 ] , created to handle the complexity introduced as a by - product of new technologies , such as hybrid and alternative - fuel engines . SPLE plays a major role in the NGT and is implemented following the Second Generation PLE ( 2GPLE ) approach , in which features are treated as ﬁrst - class citizens . Vehicles can now be described in terms of a bill - of - features , which facili - tates the communication between business , marketing , and engineering units . The tool used for modeling the features is BigLever GEARS . The development process is organized in ﬁve di ﬀ erent levels covering feature model , requirements , logical architecture , technical architecture , and deployment . 18 Development activities correspond to the “V - Model” : the process starts with deﬁning requirements and architecture for the future vehicle , and on the bottom of the V - Model is the creation of hardware and software components that correspond to the requirements speciﬁcation . Architecture . Opel uses a system - of - systems architec - ture managed as a hierarchical product line of product lines . It covers domains , subsystems , functions , functional elements , and components ( being aggregations of functional elements ) . The software components are as general as possible to allow ﬂexibility with respect to variations . The manufacturing process is driven by the selection of features and part num - bers of physical car components determining which ECUs ( electronic control units ) are in the car . The ECUs contain the feature implementation , and their presence determines whether a feature is available . The software components are made speciﬁc to every produced vehicle . In this calibration process , the Vehicle Option Codes—parameters determining the startup of optional software components installed by ECUs in the car—are saved to a ﬂash database . Organizational Structure . There are di ﬀ erent teams , including individual teams for each product line ; they are referred to as a body of knowledge—the teams have special - ized knowledge about the instantiation of their product line . There is also the concept of a feature owner , referring to the main technical contact person in charge of a feature . The feature owner also models the feature in GEARS . 3 . 3 Danfoss : Component Producer Danfoss is a large producer of electronic and mechanical components for industrial and consumer applications . It has 23 , 000 employees globally , distributed over 56 factories in 18 countries . We focus on Danfoss Drives , a subdivision producing frequency converters ( drives ) , which are used in a wide range of applications , such as for HVAC or for winding machines in the textile industry . Consequently , the drive ﬁrmware has a high degree of variability , as the motors to be controlled vary signiﬁcantly . While the variability had initially been handled using a clone & own approach [ 12 ] , Danfoss later adopted an SPLE approach by migrating the cloned products into an integrated platform [ 16 ] . Architecture . Danfoss has multiple product lines , each realized with a typical embedded - platform architecture and a codebase of a few million lines of C / C + + code . Our focus , the frequency - converter product line , consists of a platform , which realizes 14 main products , complemented with addi - tional repositories of 30 extensions ( “sub - products” ) . The platform’s variability is realized using the C / C + + preproces - sor by referencing static features in conditional - compilation directives ( e . g . , # IFDEF ) ; by generating build ﬁles ; and by using dynamic parameters that inﬂuence the run - time of a concrete product . Features are deﬁned in a feature model and mapped to source ﬁles using the commercial tool pure : : variants from pure : : systems . Upon creating a conﬁguration ( i . e . , a selection of features ) , pure : : variants generates the build ﬁles and the set of parameters belonging to the product - speciﬁc conﬁgura - tion . Not all parameters are present in all products , and the conﬁguration of these parameters ( e . g . , limits and default values ) considerably varies across products . Initially , only variability in source code was managed . Af - ter positive experience , variability management was extended to further artifacts , such as requirements and test cases [ 30 ] — enabling the derivation of variants of these artifacts by con - ﬁguration , and improving traceability . Organizational Structure . A dedicated team , involv - ing software architects from all development sites , supports and maintains the platform . Application - engineering teams contribute new functionality of the drives . However , there is no real split between application and domain engineering . The platform team is also responsible for the feature - model development , and each feature is assigned to a feature owner . From the product perspective , there are product managers determining which features will go into a product . When there is a change request for a particular feature , the product manager has to contact the feature owner . 4 . TYPICAL AND OUTLIER FEATURES We now introduce concrete examples of the features we studied , beginning with typical and atypical ( outlier ) features . We discuss the rationales behind our interviewees’ classiﬁca - tion , complementing them with quotations . Table 3 shows all features with their ID and the respective classiﬁcation - rationale codes . These codes—indicated by special for - matting in the following descriptions—are further explained in Table 4 . 4 . 1 What is a Typical Feature ? Most interviewees argued that typical features represent core functionality of the domain and are , thus , a prime prereq - uisite for a company’s business . The feature Danfoss . Wobbler is an example : it was not explicitly requested by a customer , but is regarded essential in the textile industry domain , as it allows frequency converters to operate properly without pro - ducing waves . Another feature providing core functionality is Keba . ProﬁNetSlave , implementing inter - machine communi - cation based on the Industrial Ethernet standard Proﬁnet . Other typical features are either generally demanded by the market or requested by a speciﬁc customer . For instance , the feature Opel . LaneKeeping satisﬁes a very common mar - ket demand expressed nowadays by car buyers . Customer request s are also considered as common examples , such as expressed by interviewee E : A typical feature is one re - quested by a customer , a new motor control for example . It’s a functional one . He refers to Danfoss . Torque , which extends existing motor - control functionality . Keba . LanguageTranslation is another example of a typical feature , as it was realized following a management decision ( internal standard ) to o ﬀ er certain system localizations by default to support customers in speciﬁc regions . It was also marked as typical , since it represents ubiquitous functional - ity a ﬀ ecting not only the EasyNet control - station program for which it was initially conceived , but now almost all parts of the product line . 4 . 2 What is an Outlier Feature ? Not surprisingly , there is less agreement in what constitutes an outlier feature , with almost everyone giving di ﬀ erent reasons . We also did not observe any overlap in the rationales between classifying a feature as typical or as an outlier . For instance , the feature Keba . SilentMode enables instal - lations without user interaction . It is realized as a hidden command - line option of the setup program and only used internally for testing , not providing a core functionality for customers ( deployment ) . 19 Table 3 : Features and their classiﬁcation rationales company feature ID feature description classiﬁcation rationale t y p i c a l Keba LINMovement linear movement command of a robot domain Keba ProﬁNetSlave implementation of the PROFINET standard for the ﬁeldbus communication stack domain , market demand Keba LanguageTranslation translation of the EasyNet control - station program into several languages ubiquitous , market demand , internal standard Opel LaneKeeping driver assistance to keep the lane , including active steering domain , market demand Danfoss Torque enables high starting - torque for permanent - magnet machines customer request Danfoss Wobbler smoothes the movement of electric motors ( to avoid waves ) in the textile industry domain o u t li er Keba SilentMode non - interactive ( “silent” ) installation procedure deployment Keba UserGuidance user guidance for device conﬁguration placeholder , usability Keba HeatUpOptimization optimizes heat - up procedures of multiple machines by distributing power peaks optimization , startup Danfoss PowerUpFastFuncs moves the execution of some functions from RAM to the ﬂash drive optimization , build Danfoss BoardSupportPackage new Hardware Abstraction Layer ( HAL ) to improve board support evolvability , maintainability goo d Keba Oscilloscope software oscilloscope for recording signals error - free Keba Wizard wizard - based conﬁguration support for the initial robot setup popular with customers Keba ProductionOverview historical overview on the production process ( operation modes and “shots” ) popular with customers , popular with developers Opel ParkAssist automated steering in parking situation well modularized Danfoss CascadeController enables control of multi - drive ( pump ) setup to manage pressure or level well implemented , well modularized Danfoss FieldBus enables the ﬁeldbus communication stack for frequency converters distinct functionality , well modularized , thoroughly tested b a d Keba Euromap enables the Euromap protocol support in the ﬁeldbus communication stack test challenges , frequent changes Keba ManualConﬁguration manual conﬁguration of EncoderBox market demand , rushed development , customer complaints Keba DataManager export / import of low - level machine data rushed development , workaround , variability Opel EmergencyBraking autonomous emergency braking highly cross - cutting Danfoss ProductG implements product - speciﬁc features for one particular customer highly cross - cutting Danfoss ResetFix ﬁxes a defect in another feature ( Reset Counter ) defect fix , frequent changes Another interesting example is the feature Keba . UserGui - dance , which serves as a placeholder for product managers to plan future usability improvements regarding device - conﬁguration support . Speciﬁcally , users requested better dependency resolution and choice propagation in the con - ﬁgurator to catch misconﬁgurations early , which otherwise could only be discovered at system startup . Our interviewee also classiﬁed this as a bad feature , since it is too vague ( explained shortly in Sec . 5 . 2 ) and needs reﬁnement . B : We didn’t really know how to improve it . That’s why we are using it as a placeholder for projects where one needs to improve something . [ . . . ] Basically , it’s an accumulative feature . Two of the outlier features—Keba . HeatUpOptimization and Danfoss . PowerUpFastFuncs —were only introduced for the optimization of non - functional aspects as explained by an interviewee : E : Outliers are technical features for tuning and tweaking performance . It’s not really a feature from the drive perspective , but we can conﬁgure a drive to be faster or slower . We can tweak the product to indirectly fulﬁll the customer requirements . Furthermore , these two outliers only have a speciﬁc lifecycle purpose—they control the startup or the build process of the system . For instance , Danfoss . PowerUp - FastFuncs improves system performance by moving functions from ﬂash to RAM using a dedicated compiler macro . Finally , Danfoss introduced the mandatory feature Board - SupportPackage , a more intelligent hardware abstraction layer ( HAL ) to reduce the number of variants . Third - party board vendors urge Danfoss to update the boards by increasing the price for old boards . The more robust abstractions provided by this feature account for improved maintainability and evolvability , to quickly support new boards . This feature is not visible to the customer and only exists at the architecture and development level . However , it needed to be approved by the product management and other engineering teams , to verify that it does not negatively a ﬀ ect existing business logic . In this light , considering this new HAL as a feature makes it a unit of maintenance in Danfoss that various teams can use for communication , and the management for planning . 5 . GOOD AND BAD FEATURES We also studied features perceived as good or as bad by our interviewees . Similar to the discussion before , we now introduce examples of such features , describe the underlying classiﬁcation rationales , and provide illustrative quotations . 5 . 1 What is a Good Feature ? In two cases , our interviewees mentioned customer satis - faction ( popular with customers ) as their prime rationale for considering a feature as good . For instance , the feature Keba . Wizard allows performing the initial robot setup and installation in a few minutes by avoiding error - prone manual conﬁguration . Keba . ProductionOverview provides monitor - ing capabilities for injection molding machines , including an overview of operation modes and the history of production sequences . In particular , customers like the possibility to inspect variables during system operation . The feature is also highly valued by Keba developers who use it for diagnoses ( popular with developers ) . Features also need to provide a distinct functionality to the product line . On the other hand , ambiguous features not meeting this criterion are considered as bad features ( explained shortly ) . Recall the outlier feature Keba . UserGui - dance which was only vaguely understood by customers and the management . Features have also been rated as good if they are perceived as well implemented and error - free . For instance , the feature Keba . Oscilloscope provides signal charts and two - dimensional plots for monitoring and diagnosing robotics solutions . According to our interviewee A : it just always worked . General statements about the implementation aspect further emphasize the absence of surprising feature interac - tions and adherence to architectural rules : E : A good feature fulﬁlls the requirements , but does not introduce any bugs on the way or impact existing features of the product line . [ . . . ] It has to follow the architecture rules and the coding style . Features are also considered as good if they are well modularized , not cross - cutting multiple components . For 20 Table 4 : Expressed feature - classiﬁcation rationales rationale description occ . 1 t y p i c a l domain core domain functionality 4 ubiquitous common feature affecting many assets 1 market demand required to be competitive in the market 4 internal standard management decision for an internal standard 1 customer request requested by a speciﬁc customer 1 o u t li er deployment only supports system deployment 1 placeholder placeholder for future improvements 1 usability improves usability for customers 1 optimization optimizes a non - functional aspect ( e . g . , power consumption , performance ) 2 startup controls or affects system startup 1 build controls or supports build process 1 evolvability improves future system evolvability 1 maintainability improves system maintainability 1 goo d popular w / customers positive customer feedback 2 well modularized feature implementation limited to module 3 popular w / developers supports system diagnosis 1 error - free no or very few defects since inception 1 well implemented implementation adheres to architecture rules and coding styles 1 distinct funct . graspable concept that is easily understood 1 thoroughly tested high conﬁdence in correctness 1 b a d rushed development implemented under pressure 2 workaround compromise during implementation 1 customer complaints bad feedback from the market 1 frequent changes implementation modiﬁed frequently 2 highly cross - cutting scattered feature implementation 2 test challenges difﬁcult or laborious to test 1 variability need to make a feature optional 1 defect fix defects that became features 1 1 number of occurrence of the rationale in interviews instance , the feature Opel . ParkAssist is not scattered across multiple components , therefore signiﬁcantly limiting coordi - nation e ﬀ ort between the suppliers , who commonly imple - ment the components . 5 . 2 What is a Bad Feature ? Among our interviewees , bad features are usually the result of time pressure and rushed development as well as com - promises during implementation ( workaround ) . For instance , the features Keba . ManualConﬁguration and Keba . DataMana - ger were implemented too hastily , resulting in low imple - mentation quality . The feature Keba . ManualConﬁguration , supporting the conﬁguration of an encoder box to reduce wiring costs , was developed under time pressure and released prematurely to selected customers . However , this led to neg - ative market feedback ( customer complaints ) as expressed by interviewee B : There was an extreme pressure from the customer side to support this feature . [ . . . ] We sensed that customers would not agree with [ the complicated conﬁgura - tion ] , but due to pressure we realized it . [ . . . ] Would have been better to realize the feature with complete tool support before release . A related problem are highly volatile features ( frequent changes ) , such as the feature Opel . EmergencyBraking , which required continuous improvements and extensions to support an increasing number of deceleration proﬁles and object types on the road that are recognized . Scattered and highly cross - cutting feature implemen - tations led to a bad perception of two features : Danfoss . Pro - ductG realizes a request for one speciﬁc customer , requiring many little tweaks to the code . Opel . EmergencyBraking is also considered as a highly crosscutting feature . It is also more complex than the typical feature Opel . LaneKeeping due to di ﬀ erent deceleration proﬁles and object types , more sub - variants , and parameters for calibration . However , cross - cutting features are not necessarily considered bad , as we will discuss in Sec . 6 . 2 . Interestingly , the necessity to make a feature optional ( variability ) also led to problems . The feature Keba . Data - Manager supports copying mold and protocol data between an injection molding machine and a PC , allowing to modify the machine cycle . Due to safety concerns of a key customer , the feature had to be made optional , resulting in high e ﬀ ort . We also observed features that originated from defects ( defect fix ) . This happened for the feature Danfoss . Reset - Fix , where a bug ﬁx for a reset functionality of counters was deﬁned as a new feature . It ﬁxes an unintended feature interaction between a counter feature and a feature providing a reset functionality for the counter , resulting in incorrect counting . In general , deﬁning bug ﬁxes as features helped Danfoss to support customers who were used to the incorrect behavior and did not wish a mandatory bug ﬁx . Finally , both duplicate and superﬂuous features were re - ported as bad features . Danfoss reported that the same functionality—for instance , the feature ResetFix from above— was implemented twice through a lack of coordination be - tween application - engineering teams . Superﬂuous features are those that were developed but never used , in e ﬀ ect wast - ing development e ﬀ ort . None of our studied features belongs to this category , but Danfoss reported such : E : The worst case scenario is a feature which has been implemented but not used at all . It happens . 6 . CROSS - CASE ANALYSIS In our study , we also conducted a cross - case analysis by investigating the various facets ( cf . Table 2 ) of all 23 features . We now discuss the results of this analysis and explicitly formulate the core observations . 6 . 1 Rationale , Level , and Nature Rationale . In all subjects , typical , good , and bad features were mainly introduced for business - related reasons , such as general market demand and customer requests . However , the introduction of certain operational modes ( e . g . , Keba . Oscillo - scope , a feature adding logging and monitoring support ) or regulatory requirements ( e . g . , ECE - R 79 requirements on steering interventions and automatically commanded steering for Opel . ParkAssist ) were mentioned as well . Outlier features were often the result of a technical concern that had to be addressed . Indirectly , these features also realize customer requirements . Their prime rationale was the support for dedicated Lifecycle tasks of a system , such as deployment , debugging , monitoring , conﬁguration , system startup , or usability improvements . Level . We observed that the notion of features is used at all organizational levels . For almost all of our features , traces exist at all levels . For Keba , these levels comprise the product management , architecture , and development . Opel has similar levels , ranging from the feature - deﬁnition level at the top via the requirements , the logical and physical architecture , down to the deployment level . Similarly , for Danfoss , nearly every feature is identiﬁable at the business level down to all other levels . We also found that most of the features were leaf fea - tures , which were very concrete and easy to describe , and top - level features deﬁned in product maps . Intermediate features were fuzzier and more abstract , making it di ﬃ cult for the practitioners to talk about them . Two interviewees explicitly stated this point , for instance , F : Product features 21 on a top - level are good features , which describe a speciﬁc functionality [ . . . ] Yet , intermediate features are frequently used , both for a grouping purpose ( Danfoss ) or for deﬁning functionalities with di ﬀ erent variants ( Keba and Opel ) . Observation 1 : Outlier features . Features do not only ad - dress functional or non - functional concerns that end up in a product . Features are also used for atypical purposes such as supporting a system’s lifecycle . Outlier features are an important part of the development process . Yet , they do not need to be developed according to the full feature - development process . In other words , they do not exist on all levels . For instance , Keba . UserGuidance solely exists at the product - management level and is used internally . Keba . SilentMode exists only at the development level ; it is a hidden command - line option only used by service engineers during setup . Also , Danfoss . PowerUpFastFuncs exists only at the architecture and development levels . Thus , outlier features are coordinated or implemented only by a subset of the typical roles involved ( e . g . , developers , architects , or product managers ) and are in most cases not visible to the customer ( Keba . HeatUpOptimization is an ex - ception ) . Surprisingly , only Opel has no such outlier features according to our interviewee . For the domain under consider - ation , all features currently represent functionality . However , according to the long engineering history , Opel has further co - existing entities ( e . g . , basic software components ) , which might be used for this purpose . Investigating those entities and their relation to features is valuable future work . Nature . The features we investigated were treated primar - ily as a unit of functionality to deﬁne system capabilities , behavior or data . This is often the case for mandatory fea - tures covering core functionality . Only as a secondary aspect are features also a unit of variability—when the function - ality should be optional . Recall Keba . DataManager , where an allegedly mandatory addition ( a new feature ) had to be made optional , causing substantial development e ﬀ ort . In both cases , features do not only provide a unit of functional - ity , but can immediately serve as a unit of variability when necessary—without the need to introduce a new feature , but potentially with a signiﬁcant implementation e ﬀ ort . Only one of our features ( Danfoss . CascadeController ) pri - marily o ﬀ ered parametrization to other existing features or functionality . Interestingly , Keba decided to consider the sup - port for the conﬁguration of other features as features them - selves : Keba . UserGuidance , Keba . Wizard , and Keba . Man - ualConﬁguration . Yet , recall that the ﬁrst one was just a placeholder for future plans to improve the usability of the device conﬁguration . Finally , almost every feature came with further conﬁgura - tion ( a . k . a . calibration ) parameters to ﬁne - tune it . Danfoss and Opel manage large parameter databases . For instance , in Danfoss , the feature model has about 1 , 000 features , whereas the parameter model has about 2 , 800 parameter . Parameters are either directly assigned to and controlled by features but can also be stand - alone , as in the case of Danfoss . The latter arose for historical reasons—the parameter database existed before features and a software product line were adopted . Observation 2 : Features vs . parameters . Parameters are not treated in the same way as features . Parameters are important entities managed by our com - panies in addition to features . Yet , the handling and the characteristics of parameters are di ﬀ erent . Parameters do not have a process attached to them as features do , have no architectural responsibility , and no dedicated responsible role ( usually the feature - owner is also responsible for parameters ) . 6 . 2 Scope and Architecture Scope . Not surprisingly , we observe both localized and cross - cutting features , scattered over large parts of the product line . Half of Keba’s and Danfoss’ studied features are cross - cutting . For instance , Keba . Oscilloscope introduces logging and a global monitoring mode for operating the system , a ﬀ ecting many parts of the codebase . In Opel’s active - safety domain , almost all features are cross - cutting , with implementations being scattered over many components and ECUs . Among the three Opel features , only one ( ParkAssist ) is well localized in its current implementation . Another highly cross - cutting feature , spanning many domains , is Danfoss . ProductG , which is the result of one customer request , but whose realization needed many tweaks throughout the codebase . Yet , while some features are bad features due to their highly cross - cutting nature , the scope of a feature is not a di ﬀ erentiator between good and bad features . As one interviewee explicitly explains , F : If a feature is cross - cutting , that itself is not bad . There can be good reasons for a scattered feature implementation . Observation 3 : Cross - cutting features . Scattered feature implementations do not necessarily lead to problematic fea - tures . Architectural responsibility . The majority of studied features across all companies contributes core business logic . In Keba , all of the features discussed a ﬀ ect the user interface ( UI ) . At Opel , all three discussed features a ﬀ ect both sub - stantial business logic and the UI . At Danfoss , most of the features ( except the outliers ) handle business logic , whereas only one feature ( Danfoss . Wobbler ) also contributes to the UI . This small number is not surprising given the small display panels built into frequency converters . The outliers , and other features to a lesser extent , al - most always a ﬀ ect the product - line infrastructure for a spe - ciﬁc lifecycle purpose . However , recall the outlier feature Danfoss . BoardSupportPackage , which only contributes a new architecture ( and some business logic ) . Deﬁning this new architecture as a feature allowed internal communication and approval ( explained shortly ) , but also booking developers’ time on realizing the feature . This was also explained by a Keba interviewee : B : There are internal features [ . . . ] [ used ] for project controlling [ . . . ] [ to communicate ] how much of our time we invest into them . 6 . 3 Process and Representation Definition and approval . While a deep study of processes is out of scope of our work , we observed a diversity of pro - cesses . At Keba , the features we studied are deﬁned by an internal project team , or existing speciﬁcations are used in case the feature implements an existing standard ( e . g . , for Industrial Ethernet ) . Sometimes , capabilities found in simi - lar systems are also studied . Usually , there is no dedicated approval necessary—none of the studied features required it . Opel follows the typical V - shaped software - engineering process : new features are deﬁned in a so - called Advanced Technology Work project , comprising the elicitation of re - quirements and building a prototype vehicle . A speciﬁc focus 22 is on safety - critical aspects ; for instance , possible feature interactions are investigated . Features are commonly rede - ﬁned based on customer clinics and ﬁeld experience . At Danfoss , a feature is typically created based on input from customers and goes through a regular development process ( requirements , analysis , etc . ) . Before going into a product , it has to be approved by the product owner . Danfoss’ outliers are created without customer involvement . It was surprising that the actual process was not a di ﬀ er - entiator between good and bad features . However , as brieﬂy discussed before ( Sec . 5 . 2 ) , our feature sample shows that time pressure is a clear indicator . Observation 4 : Immature features . A rushed development process causes problematic features . Danfoss reported on bad experiences with an experiment called “time - boxing” : E : Because of the time pressure , we are told not to think , just to implement . [ With time - boxing ] there was a limited amount of time to do some things . It was OK to implement the code , but not to do any documentation . Representation . While Opel and Danfoss represent features in dedicated feature - modeling tools , the situation at Keba is more diverse . Keba deﬁnes high - level product features and their descriptions in product maps—matrices that allow com - paring related products over numerous features—using the Polarion requirements management system and spreadsheets . Feature requests are also managed in an issue - tracking sys - tem , used by application engineers to communicate with domain engineers about future platform features . Keba also has a home - grown conﬁguration tool that allows , relying on selecting and customizing features by developers , to quickly clone a product variant based on the domain platform . De - velopers further use conﬁguration ﬁles to deﬁne lower - level features and parameters associated with features . Opel uses GEARS for features and DOORS for require - ments . Surprisingly , safety - critical dependencies are currently modeled in the requirements , not in the feature model . At Danfoss every feature is represented in one central feature model managed via pure : : variants ( with current modulariza - tion attempts ) . Features are cross - linked to the parameter database and requirements models managed in CaliberRM . 6 . 4 Use , Implementation and Deployment , and Product Derivation Use . Most frequently , interviewees reported that features are used for explaining a system to a customer and for internal communication . B : On the one hand it is the communication to the customers—which features we have . [ . . . ] On the other hand , it’s also for communication with the development . Features were also frequently used for other closely related activities such as scoping to create awareness for feature reuse . B : When planning a project , we say that we can do a project with those features . [ Then ] someone comes and says [ . . . ] we can realize automated tests with the existing features . Conﬁguration was another common use of features . Some of Keba’s and Danfoss’ features also contribute a conﬁg - uration interface , allowing a feature’s parametrization by customers during setup or run - time . All of Opel’s features also contribute a large variety of calibration parameters used for feature customization during manufacturing . Implementation and deployment . We observed a large va - riety of implementation techniques . To implement features , Keba uses multiple programming languages ( e . g . , C , C + + , C # , Java , . NET , IEC 61131 - 3 ) and a home - grown domain - speciﬁc language ( TeachTalk ) , in which high - level robot - movement commands are declared . Danfoss’s features are implemented in C and C + + , partly also using home - grown DSLs . For deployment , Keba and Danfoss exploit binary and properties ﬁles ; Keba also uses OSGi bundles and the TeachTalk scripts . For the domain under consideration , Opel’s features are mostly developed in C and typically deployed as AUTOSAR components . All of the studied features are implemented and validated by the ECU suppliers , who receive a speciﬁcation deﬁning the calibration parameters the component needs to support ( for instance , for realizing other cross - cutting features a ﬀ ecting this component ) . The resulting AUTOSAR components are integrated and validated on the vehicle level and deployed to the ECUs . Given that most components realizing features are developed by ECU suppliers , most development and integration e ﬀ ort is spent on the calibration . Inclusion / Exclusion . The mechanisms for including or excluding optional features are very diverse . At Keba , for in - stance , dedicated robot commands ( e . g . , Keba . LINMovement ) are activated at startup - time by TeachTalk scripts , which also allow ﬁne - grained customization of the movement logic . Other features are selected in the home - grown conﬁguration tool or activated via either a command - line option , a pref - erences menu in the UI , or using dedicated description ﬁles . The latter can be a ﬁle delivered only to certain customers to activate a feature ( e . g . , Keba . ManualConﬁguration ) , or it can be a hardware - description ﬁle , activating a feature when certain hardware is present . Opel’s mechanisms are driven by the calibration parameters , whose value determines startup of the feature’s components , or by the presence of hardware ( if not present , the respective ECU and component is not included ) . Danfoss uses the tool chain provided by pure : : variants , comprising feature selection and a subsequent build process driven by the C preprocessor as well as the family model of pure : : variants , determining the respective source ﬁles to include . For the outlier Danfoss . PowerUp - FastFuncs , compile macros are used to instruct the linker to move functions from ﬂash memory into RAM . 6 . 5 Quality Assurance and Evolution Testing . For Keba , manual system tests are more important than automated test procedures , which are primarily used at the levels of components . Opel’s procedures follow the typical levels outlined in the “V” development process : component testing , integration testing , and vehicle testing . The software is tested in an environment ; integration testing is usually done on a bench or on a hardware - in - the - loop platform . Afterwards , the software is validated in the vehicle . Danfoss conducts integration and regression tests for a ﬁxed set of products that are actually sold . Features are not tested via component tests . We noticed that cross - cutting features are problematic in cases when they involve manual testing process . Such features can usually only be tested at integration time , potentially also requiring hardware , making them high risk . Observation 5 : Testing and feature scattering . Scattered features that have to be manually tested are problematic . Evolution . The features at Keba were characterized as stable with core functionality remaining unchanged . Customiza - tions , reﬁnements or refactorings are made upon request . 23 For instance , the feature Keba . Oscilloscope was extended to support additional chart types , and the feature Keba . Silent - Mode was recently refactored and re - implemented using a di ﬀ erent programming language . At Opel , features in the active - safety domain are very dynamic . Therefore , a major part of the evolution e ﬀ ort is spent in calibration , minor adjustments of features , and code refactorings . For the fast - evolving feature Opel . EmergencyBraking , engineers gradually added support for recognizing additional objects triggering the automatic brake ( e . g . , stationary vehicle , pedestrian , or bicycle in front ) . 7 . THREATS TO VALIDITY External Validity . As with any case - study research , results of our work might not generalize beyond the cases that we considered . Thus , we carefully avoided making any generalizations , but rather presented an in - depth analysis of the selected cases . We also focused on large , inﬂuen - tial companies which we selected using well - deﬁned criteria ( cf . Sec . 2 . 1 ) , and we sought to obtain a diverse sample of features . This sampling approach is commonly known as theoretic sampling [ 13 ] . To get a broader perspective , we selected interviewees covering a range of roles in the studied companies . We thus believe that the observations reported in this paper are of value to the wide SPL community . Internal Validity . We see two main threats to the in - ternal validity . First , we might have phrased our interview questions in a way that a ﬀ ected the participants’ answers , especially in cases where speciﬁc examples were given . We attempted to mitigate this threat by performing a pilot study and reﬁning our interview guide when we observed that our questions raised confusion . We also avoided providing exam - ples of possible answers unless the participants experienced di ﬃ culties to address a raised question . Second , we might have misinterpreted the participants’ answers and derived incorrect conclusions , threatening the reliability of our study . To mitigate this threat , all interviews were recorded and their summaries were cross - checked by an author of the paper who did not attend the interview . Unclear cases were discussed and some were further veriﬁed with the interviewees . 8 . RELATED WORK Feature Deﬁnitions . Many deﬁnitions of the term fea - ture exist [ 1 , 17 , 32 , 15 , 25 , 18 , 23 , 20 , 8 , 31 ] , each of which emphasizes certain feature characteristics . For in - stance , Kang et al . [ 19 ] provide a deﬁnition covering im - plementation , testing , deployment , and maintenance of a feature . Bosch mentions functional and quality requirements specifying logical units of behavior [ 7 ] . Further deﬁnitions focus on features as user - visible aspects [ 17 ] or features as aspects valuable to a customer [ 24 ] . However , existing ap - proaches do not combine multiple feature characteristics nor do they describe relations between them . The feature facets presented in this paper can be useful as a terminology for describing di ﬀ erent properties of features . Our observations also indicate possible dependencies between such properties . Feature Identiﬁcation . Scoping methods propose a top - down approach to determine the boundaries of a product line and are an important planning activity that may determine the success or failure of a product line e ﬀ ort [ 26 ] . Some scoping techniques ground the identiﬁcation of the product line scope based on business objectives [ 11 , 27 ] . Scoping methods also cover the identiﬁcation of features in product lines , but guidance is typically very speciﬁc in this regard . While feature identiﬁcation is not the primary aim of our work , the presented facets of 23 real - world features can be useful for organizations in their scoping activities . Variability Modeling . Variability modeling is essential for deﬁning and managing the commonalities and variabili - ties in software product lines . A wide range of variability - modeling approaches has been proposed , including feature modeling [ 17 ] , decision modeling [ 28 ] , and orthogonal vari - ability modeling [ 23 ] . Empirical studies report on experiences of applying variability modeling [ 6 , 5 ] . Survey papers [ 8 , 29 , 3 , 28 , 10 ] compare variability - modeling approaches from dif - ferent perspectives , which informed the deﬁnition of feature facets in our study . For instance , a survey paper comparing feature models and decision models [ 10 ] uses ten dimensions to characterize the di ﬀ erent techniques . Although the focus of our study was not on variability modeling , some dimensions described in this survey supported the deﬁnition of feature facets ( e . g . , applications , dependencies , binding time ) . Feature - Oriented Engineering Methods . Feature - oriented software development ( FOSD ) is a programming concept for managing the construction , customization , and synthesis of software systems based on features as ﬁrst - class citizens [ 1 ] . FOSD primarily addresses implementation - level aspects of features , while our aim was to empirically investi - gate a wider range of feature facets in di ﬀ erent organizations . Empirical Studies . Many experience reports of success - ful industrial product lines are provided by van der Linden et al . [ 31 ] and the SPL community’s ’Hall of Fame’ . While these provide valuable insights into economic , organizational , and process aspects of real - world product lines , only few de - tails are given on characteristics of individual features . Some experience papers provide more details about features at di ﬀ erent levels of product lines . For instance , Lee et al . [ 21 ] report detailed experiences from developing an elevator con - trol software product line comprising 490 features . Berger et al . [ 4 ] provide an analysis of features in 128 variability models , including metrics about feature types and feature de - pendencies . While these results helped us identify important facets of features , our aim was to complement existing empir - ical studies by conducting a qualitative study in companies and providing details about selected features . 9 . CONCLUSION We presented a qualitative study on the practical use of features in three large companies . The study provides a con - textualized and in - depth analysis of 23 features in real - world settings—organizations that manage features and explicitly track them . We reported insights into successful and failed practices of feature usage together with the respective condi - tions ( RQ1 ) as well as a cross - case analysis on the range of feature deﬁnitions and usages in practice ( RQ2 ) . What is a Feature ? The notion of what a feature is varied widely across the three companies we studied . Yet , we have observed a surprising consistency of what makes features good or bad . We also found that one of the most important characteristics of a feature is that it needs to repre - sent a distinct and well - understood aspect of the system . We found that good features need to precisely describe customer - relevant functionality , that bad features primarily arise from rashly executed processes , and that cross - cutting features scattered over the codebase are not necessarily bad . We also 24 observed that outliers are necessary , while not requiring the full engineering process of typical features . We hope that our results on the actual feature usage and on issues arising from it will be interesting for both practitioners and researchers . Future Work . We plan to trace and study the lifecycles of features in more detail . Speciﬁcally , the insights we gained into the feature - deﬁnition and approval process suggest that an in - depth study in this area would be highly valuable . Such a study should also capture the coordination among roles and teams required to engineer and evolve a feature . The paper used a set of facets for describing and communicating about important characteristics of features . We plan to reﬁne the facets as a basis for developing a language for describing features . Finally , our study reported initial observations re - lating feature characteristics and their success . Further work should investigate the development of approaches helping predict when a feature is going to be good or bad . Acknowledgments We thank the companies , all our interviewees , and Manfred Sch¨olzke for participating in our study . This work was par - tially supported by Keba AG and the Christian Doppler Forschungsgesellschaft Austria , the Artemis Joint Undertak - ing ( grant 332830 / 2012 - 1 ) , and the Ontario Research Fund . 10 . REFERENCES [ 1 ] S . Apel and C . K¨astner . An Overview of Feature - Oriented Software Development . J . Object Techn . , 8 ( 5 ) : 49 – 84 , 2009 . [ 2 ] E . R . Babbie . The Practice of Social Research . Cengage Learning , 13th edition , 2012 . [ 3 ] D . Benavides , S . Segura , and A . R . Cort´es . Automated Analysis of Feature Models 20 Years Later : A Literature Review . J . Information Systems , 35 ( 6 ) , 2010 . [ 4 ] T . Berger , D . Nair , R . Rublack , J . M . Atlee , K . Czarnecki , and A . W % asowski . Three Cases of Feature - Based Variability Modeling in Industry . In Proc . MODELS , 2014 . [ 5 ] T . Berger , R . Rublack , D . Nair , J . M . Atlee , M . Becker , K . Czarnecki , and A . W % asowski . A Survey of Variability Modeling in Industrial Practice . In Proc . VaMoS , 2013 . [ 6 ] T . Berger , S . She , R . Lotufo , A . W % asowski , and K . Czarnecki . A Study of Variability Models and Languages in the Systems Software Domain . IEEE Trans . on Soft . Eng . , 39 ( 12 ) , 2013 . [ 7 ] J . Bosch . Design and Use of Software Architectures – Adopting and Evolving a Product - line Approach . ACM Press , 2000 . [ 8 ] A . Classen , P . Heymans , and P . - Y . Schobbens . What’s in a Feature : A Requirements Engineering Perspective . In Proc . FASE , 2008 . [ 9 ] K . Czarnecki and U . W . Eisenecker . Generative Pro - gramming : Methods , Tools , and Applications . Addison - Wesley , 2000 . [ 10 ] K . Czarnecki , P . Gr¨unbacher , R . Rabiser , K . Schmid , and A . W % asowski . Cool Features and Tough Decisions : A Comparison of Variability Modeling Approaches . In Proc . VAMOS , 2012 . [ 11 ] J . - M . DeBaud and K . Schmid . A Systematic Approach to Derive the Scope of Software Product Lines . In Proc . ICSE , 1999 . [ 12 ] Y . Dubinsky , J . Rubin , T . Berger , S . Duszynski , M . Becker , and K . Czarnecki . An Exploratory Study of Cloning in Industrial Software Product Lines . In Proc . CSMR , 2013 . [ 13 ] K . M . Eisenhardt and M . E . Graebner . Theory Building from Cases : Opportunities and Challenges . Academy of Management J . , 50 ( 1 ) : 25 – 32 , 2007 . [ 14 ] R . Flores , C . Krueger , and P . Clements . Mega - Scale Product Line Engineering at General Motors . In Proc . SPLC , 2012 . [ 15 ] I . Jacobson , M . Griss , and P . Jonsson . Software Reuse : Architecture , Process and Organization for Business Success . 1997 . [ 16 ] H . P . Jepsen , J . G . Dall , and D . Beuche . Minimally Invasive Migration to Software Product Lines . In Proc . SPLC , 2007 . [ 17 ] K . Kang , S . Cohen , J . Hess , W . Nowak , and S . Peterson . Feature - Oriented Domain Analysis ( FODA ) Feasibility Study . Tech . Rep . , 1990 . [ 18 ] K . Kang , J . Lee , and P . Donohoe . Feature - Oriented Product Line Engineering . IEEE Software , 19 ( 4 ) , 2002 . [ 19 ] K . C . Kang , S . Kim , J . Lee , K . Kim , E . Shin , and M . Huh . FORM : A Feature - Oriented Reuse Method with Domain - Speciﬁc Reference Architectures . Ann . Softw . Eng . , 5 : 143 – 168 , Jan . 1998 . [ 20 ] J . Lee and D . Muthig . Feature - oriented Variability Management in Product Line Engineering . Commun . ACM , 49 ( 12 ) : 55 – 59 , Dec . 2006 . [ 21 ] K . Lee , K . C . Kang , E . Koh , W . Chae , B . Kim , and B . W . Choi . Domain - Oriented Engineering of Elevator Control Software : A Product Line Practice . In Proc . SPLC , 2000 . [ 22 ] D . Lettner , F . Angerer , H . Pr¨ahofer , and P . Gr¨unbacher . A Case Study on Software Ecosystem Characteristics in Industrial Automation Software . In Proc . ICSSP , 2014 . [ 23 ] K . Pohl , G . B¨ockle , and F . van der Linden . Software Product Line Engineering : Foundations , Principles , and Techniques . Springer - Verlag , 2005 . [ 24 ] M . Riebisch . Towards a More Precise Deﬁnition of Feature Models . In Modelling Variability for OO Product Lines . 2003 . [ 25 ] J . Savolainen and J . Kuusela . Volatility Analysis Framework for Product Lines . In Proc . ISSR , 2001 . [ 26 ] K . Schmid . Scoping Software Product Lines : An Analysis of an Emerging Technology . In SPLC , 2000 . [ 27 ] K . Schmid , I . John , R . Kolb , and G . Meier . Introducing the PuLSE Approach to an Embedded System Population at Testo AG . In Proc . ICSE , 2005 . [ 28 ] K . Schmid , R . Rabiser , and P . Gr¨unbacher . A Comparison of Decision Modeling Approaches in Product Lines . In Proc . VaMoS , 2011 . [ 29 ] P . - Y . Schobbens , P . Heymans , J . - C . Trigaux , and Y . Bontemps . Feature Diagrams : A Survey and a Formal Semantics . In Proc . RE , 2006 . [ 30 ] K . Sierszecki , M . Ste ﬀ ens , H . H . Hojrup , J . Savolainen , and D . Beuche . Extending Variability Management to the Next Level . In Proc . SPLC , 2014 . [ 31 ] F . J . van der Linden , K . Schmid , and E . Rommes . Software Product Lines in Action . 2007 . [ 32 ] P . Zave . FAQ Sheet on Feature Interactions . Available at http : / / www . research . att . com / ˜pamela / faq . html , 2004 . 25