Cellular - Assisted COVID - 19 Contact Tracing Fan Yi , Yaxiong Xie , Kyle Jamieson Department of Computer Science , Princeton University { fanyi , yaxiongx , kylej } @ cs . princeton . edu Abstract The coronavirus disease ( COVID - 19 ) pandemic has caused social and economic upheaval around the world . Contact tracing is a proven effective way that health authorities may contain the spread of COVID - 19 , but is challenging for air - borne disease . In this paper , we propose LTESafe , a cellu - lar - assisted privacy - preserving COVID - 19 contact tracing system . LTESafe leverages a deep neural network based fea - ture extractor to map the cellular CSI to a high - dimensional feature space , within which the Euclidean distance between points indicates the proximity of devices . By doing so , we preserve user privacy by hiding the physical locations of smartphones and at the same time achieve high accuracy . Our preliminary experimental results demonstrate that LTE - Safe achieves an overall accuracy of 92 . 79 % in determining whether two devices are within six feet proximity or not , and only misses 1 . 35 % of close contacts . CCS Concepts • Human - centered computing → Ubiquitous and mobile computing . Keywords COVID - 19 , Proximity estimation , Contact tracing , Cellular network , LTE , Neural networks ACM Reference Format : Fan Yi , Yaxiong Xie , Kyle Jamieson . 2021 . Cellular - Assisted COVID - 19 Contact Tracing . In 2nd Workshop on Deep Learning for Well - being Applications Leveraging Mobile Devices and Edge Computing ( HealthDL’21 ) , June 24 , 2021 , Virtual , WI , USA . ACM , New York , NY , USA , 6 pages . https : / / doi . org / 10 . 1145 / 3469258 . 3469848 Permission to make digital or hard copies of all or part of this work for personalorclassroomuseisgrantedwithoutfeeprovidedthatcopiesarenotmadeordistributedforprofitorcommercialadvantageandthatcopiesbearthisnoticeandthefullcitationonthefirstpage . Copyrights for components of this work owned by others than ACM must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from permissions @ acm . org . HealthDL’21 , June 24 , 2021 , Virtual , WI , USA © 2021 Association for Computing Machinery . ACM ISBN 978 - 1 - 4503 - 8598 - 5 / 21 / 06 . . . $ 15 . 00 https : / / doi . org / 10 . 1145 / 3469258 . 3469848 1 Introduction The ongoing COVID - 19 pandemic has already resulted in millions of deaths all around the world , causing unprece - dented social and economic crisis . Except vaccines , a proven effective way of containing the spread of COVID - 19 is accu - rate , complete and timely contact tracing . According to the world health organization ( WHO ) , a close contact is a person who has been within six feet to someone that is COVID - 19 positive for more than 15 minutes . Contact tracing is the process of identifying , assessing , and managing people who are close contacts with the contagious positive cases . Cur - rently , contact tracing is accomplished through manually interviewing each COVID - 19 positive cases by the health authorities , which , however , is extremely labor intensive , time consuming , and unscalable , motivating techniques that can accelerate and automate the process of contact tracing . The core task of contact tracing is to identify the close contacts of the positive cases , which requires comparing the locations of two citizens . The ubiquity of smartphones , e . g . , more than 81 % of Americans own a smartphone in 2019 , and their capability of performing device localization and proximity estimation make them ideal devices for building an automatic and fast contact tracing system that scales . Identifying close contacts by comparing the exact loca - tions of smartphones is a straightforward solution . There exists many mature techniques we can leverage to accurately localize the smartphones , including GPS , Wi - Fi based [ 18 – 20 ] , cellular based [ 6 ] and Bluetooth based [ 2 , 12 ] . Exposing the location to any third party , however , hinders the privacy of both healthy citizens and the people who have been in - fected with the virus , making the location based solutions impractical to implement . Essentially , identifying close contacts only requires the distance between two people , so localizing the smartphones people carry is overkill . Knowing the proximity of devices is enough for contact tracing , which also preserves user privacy . Proximity estimation using RSSI of Bluetooth has drawn a significant amount of attention from the research commu - nity [ 5 , 16 ] , the industry [ 1 , 8 ] , and the government [ 4 ] . RSSI based proximity estimation , however , suffers from errors [ 21 ] , as there are many factors other than the dis - tance that can affect the received signal strength , including hardware imperfections , interference from other signals that share the ISM band and multipath effect . Furthermore , these systems require the device to frequently transmit beacons 1 HealthDL’21 , June 24 , 2021 , Virtual , WI , USA Fan Yi , Yaxiong Xie , Kyle Jamieson to detect each other , which consumes a large amount of en - ergy and also makes the device trackable by malicious third parties . (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:2) (cid:2)(cid:16)(cid:5)(cid:10)(cid:8)(cid:6)(cid:7)(cid:4)(cid:11)(cid:1)(cid:6)(cid:8)(cid:14)(cid:15)(cid:4)(cid:11)(cid:5)(cid:7) (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:4) (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:3) (cid:7)(cid:14)(cid:18)(cid:17)(cid:12) (cid:2) (cid:6)(cid:12)(cid:8)(cid:7)(cid:14)(cid:10)(cid:12)(cid:11) (cid:7)(cid:14)(cid:18)(cid:17)(cid:12) (cid:3) ( a ) Location mapping . (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:2) (cid:5)(cid:21)(cid:10)(cid:16)(cid:15)(cid:11)(cid:12)(cid:9)(cid:17)(cid:1)(cid:11)(cid:15)(cid:19)(cid:20)(cid:9)(cid:17)(cid:10)(cid:12) (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:4) (cid:5)(cid:9)(cid:7)(cid:14)(cid:15)(cid:13)(cid:9)(cid:1)(cid:3) (cid:4)(cid:8)(cid:6)(cid:1)(cid:18)(cid:13)(cid:1)(cid:7)(cid:14)(cid:18)(cid:17)(cid:12)(cid:1)(cid:2) (cid:4)(cid:8)(cid:6)(cid:1)(cid:18)(cid:13)(cid:1)(cid:7)(cid:14)(cid:18)(cid:17)(cid:12)(cid:1)(cid:3) (cid:3)(cid:7)(cid:16)(cid:13)(cid:4)(cid:10)(cid:1)(cid:11)(cid:7)(cid:15)(cid:17)(cid:12)(cid:13)(cid:9) ( b ) CSI mapping . Figure 1 : Mapping physical locations of smartphones ( a ) and measured CSI ( b ) to a high - dimensional feature space . This paper proposes LTESafe , a location based proximity estimation algorithm that is accurate in estimating proximity and at the same time preserves user privacy by hiding the exact user location . We plot the intuition of our algorithm in Figure 1 ( a ) , from which we see that , instead of directly comparing the physical locations to get the proximity of two devices , we propose to map the locations to a point inside a high - dimensional feature space and then calculate the Euclidean distance inside the feature space to derive the proximity . To achieve this goal , we have two requirements for such mapping . First , we require that the Euclidean distance of two points in the feature space indicates the proximity of their corresponding physical locations . Second , to preserve user privacy , the mapping should be irreversible so any third party cannot reconstruct the exact user location using the exposed location inside the feature space . To realize our idea in Figure 1 ( a ) , two tasks remain un - solved : localizing the smartphone and finding a mapping that that satisfies the aforementioned two requirements . For the localization task , we rely on the channel state in - formation ( CSI ) , which fully characterizes the signal propaga - tion between the transceivers , including both the parameters of line - of - sight path and surrounding objects’ reflections . To fully make use of the information conveyed by CSI , we directly map the CSI to a point in the feature space , as shown in Figure 1 ( b ) . In our implementation , we choose the cellu - lar CSI because of its wide coverage , and the availability of fine - grained cellular reference signals . For the mapping task , we propose to leverage a deep learn - ing based feature extractor to find the mapping that satisfies our two requirements , as shown in Figure 1 ( b ) . Recent ad - vances in deep learning has proven that convolutional deep neural network ( CNN ) , is powerful in selecting represen - tative features for diverse tasks . Therefore , after training , a CNN based feature extractor would automatically select the set of features that forms the desired high - dimensional feature space within which the Euclidean distance indicates the proximity . Furthermore , the extracted features become incomprehensible when the neural network goes deep . We implement a prototype of LTESafe using USRP as frontend to collect CSI from commercial cell towers . Our experiments show that LTESafe achieves an overall accuracy of 92 . 79 % in determining whether two devices are within six feet or not , and only misses 1 . 35 % of close contacts . 2 LTE Primer (cid:5)(cid:4)(cid:8)(cid:32)(cid:37) (cid:11)(cid:19)(cid:20)(cid:38)(cid:36)(cid:22)(cid:33)(cid:37)(cid:32)(cid:29)(cid:38)(cid:38)(cid:26)(cid:25)(cid:23)(cid:41)(cid:6) (cid:3)(cid:4) (cid:22)(cid:33)(cid:38)(cid:26)(cid:33)(cid:33)(cid:22) (cid:11)(cid:19)(cid:20)(cid:38)(cid:36)(cid:22)(cid:33)(cid:37)(cid:32)(cid:29)(cid:38)(cid:38)(cid:26)(cid:25)(cid:23)(cid:41)(cid:7) (cid:2)(cid:1) (cid:22)(cid:33)(cid:38)(cid:26)(cid:33)(cid:33)(cid:22) (cid:2)(cid:5)(cid:6)(cid:4) (cid:20)(cid:39)(cid:23)(cid:27)(cid:36)(cid:22)(cid:32)(cid:26) (cid:1) (cid:9) (cid:4) (cid:8)(cid:10) (cid:4) (cid:7) (cid:3)(cid:11) (cid:18)(cid:28)(cid:41)(cid:37)(cid:29)(cid:24)(cid:22)(cid:31)(cid:36)(cid:26)(cid:37)(cid:34)(cid:39)(cid:36)(cid:24)(cid:26)(cid:23)(cid:31)(cid:34)(cid:24)(cid:30)(cid:1)(cid:18)(cid:19)(cid:10)(cid:2)(cid:9)(cid:17)(cid:14)(cid:12)(cid:16)(cid:37)(cid:41)(cid:32)(cid:23)(cid:34)(cid:31)(cid:37)(cid:3)(cid:6)(cid:7)(cid:37)(cid:39)(cid:23)(cid:24)(cid:22)(cid:36)(cid:36)(cid:29)(cid:26)(cid:36)(cid:37) (cid:19)(cid:26)(cid:37)(cid:34)(cid:39)(cid:36)(cid:24)(cid:26)(cid:26)(cid:31)(cid:26)(cid:32)(cid:26)(cid:33)(cid:38)(cid:1)(cid:19)(cid:13)(cid:2) (cid:4)(cid:5) (cid:6) (cid:1) (cid:1) (cid:1) (cid:1) (cid:1) (cid:7)(cid:12)(cid:15)(cid:33)(cid:38)(cid:26)(cid:36)(cid:35)(cid:34)(cid:31)(cid:22)(cid:38)(cid:29)(cid:34)(cid:33) (cid:11)(cid:20)(cid:15)(cid:34)(cid:27) (cid:6) (cid:3)(cid:4) (cid:22)(cid:33)(cid:38)(cid:26)(cid:33)(cid:33)(cid:22) (cid:11)(cid:20)(cid:15)(cid:34)(cid:27) (cid:7) (cid:2)(cid:1) (cid:22)(cid:33)(cid:38)(cid:26)(cid:33)(cid:33)(cid:22) Figure 2 : Location of LTE CRS and the mobile client side two - dimensional interpolation . LTE adopts OFDM in the physical layer , so the smallest time - frequency unit is one subcarrier in frequency and one OFDM symbol in time , which is also denoted as one resource element ( RE ) . LTE groups all REs inside a block spanning seven OFDM symbols and 12 subcarriers into a physical re - source block ( PRB ) , as shown in Figure 2 . To support multiple access , LTE divides the time into one millisecond length sub - frames and allocates the PRBs inside each subframe to one or multiple mobile users for data transmission . Channel estimation in LTE network . To facilitate chan - nel estimation , the base station transmits predefined cell specific reference signal ( CRS ) , inside several specific REs of a PRB , as shown in Figure 2 . The CRSs transmitted by multi - ple antennas of one base station are non - overlapping with each other , so a mobile client can separate them and esti - mate the channel between each transmitting antennas and its receiving antenna independently . Since the sequence of CRS is known , a mobile client is able to estimate the channel of all REs that carry CRS . To obtain the channel estimation of every RE , the mobile client performs a two - dimensional interpolation , i . e . , over time and frequency , as shown in Fig - ure 2 . We note that the base station always broadcast the CRS no matter it has data to transmit or not , so a mobile user can estimate the downlink channel at any time point . 3 LTESafe Design In this paper , we propose LTESafe , a cellular - assisted , pri - vacy - preserving contact tracing system , whose architecture is plotted in Figure 3 . Generally , LTESafe consists of a mobile client data collection module and server side close contact identifier , which are detailed in the following sections . Mobile client side . Each cellular - connected mobile client first measures the CSI of the channels between itself with 2 Cellular - Assisted COVID - 19 Contact Tracing HealthDL’21 , June 24 , 2021 , Virtual , WI , USA Overlapping cell Feature extractor Features Cell info Timestamp Server User 1 User 1 User 2 User 2 CSI Close contact identifier … Figure 3 : The system architecture of LTESafe . The mobile clients extract features from CSIs , and then send packed feature vectors to the server . The server stores feature vectors reported by all mobile clients , and run close contact identifier to find all exposed users . one or multiple cell towers , then maps the CSI to a vector of contact features via a deep - learning based feature extractor , and at last tags each feature vector with timestamp and information about the cell from which the CSI is measured , including the cell ID , antenna number , and bandwidth . The mobile client regularly uploads the extracted feature vectors together with the tagged information to the server . Server side . The server stores feature vectors reported by all mobile clients , and runs the proximity estimation process to find all potentially exposed users . In the proximity esti - mation process , the server first identify all the users who appear at the same cell coverage area at the same time with positive COVID - 19 users , by checking the timestamp and cell information list associated with positive COVID - 19 users against the list of all other users . The server then runs close contact identifier on feature vectors of potentially exposed users and that of positive COVID - 19 users to further find out users who have close contacts with positive cases . 3 . 1 Data Preprocessing The extracted CSI has a granularity of 14 samples per mil - lisecond , which has information redundancy in time domain . To reduce the number of CSI being processed , we downsam - ple the CSI to one sample per 32ms , if the extracted CSI is finer than this granularity . The measured CSI is noisy because of hardware imperfec - tions . For CSI amplitude , we run Hampel filter to identify and remove outlier CSIs . To eliminate the phase error intro - duced by frequency offsets and timing offset , we feed the phase difference across antennas to the deep neural network . Phase difference captures the relative relationship between phase across antennas but loses the absolute value . We , there - fore , input the sanitized phase of the first antenna [ 11 ] , to compensate for the information loss . 6 (cid:104) 100 CSI Input 2 ResNet Block 1 … 8 3 FC Layers 1 (cid:104) 64 Feature Vector 2 CSI Input 1 1 (cid:104) 64 Feature Vector 1 L2 norm Contrastive Loss Feature Extractor CNN CNN CNN CNN Figure 4 : The architecture of Siamese network , which runs two identical neural networks on two CSIs . 3 . 2 CNN based Contact Feature Extractor LTESafe leverages a deep neural network to automatically select a set of features of the CSI . The requirement of the selected features is that the Euclidean distance between the feature vectors of any two CSIs represent the physical prox - imity of two mobile clients from which the CSIs are measured . We plot the structure of LTESafe’s deep learning based fea - ture extractor in Figure 4 , which is modified from ResNet [ 10 ] . The neural network converts the CSI inputs into the final feature vector . We adopt the Siamese neural network ( sometimes called the Twin network ) to train our feature extractor [ 3 ] , which consists of two identical neural networks that run in paral - lel , as shown in Figure 4 . These two neural networks share weights , and thus extract the same set of features of the input CSI . The Siamese network outputs the Euclidean distance of two feature vectors , which are extracted by the two parallel neural networks . The goal of training is to minimize the loss function over the training dataset . We use contrastive loss [ 9 ] as our loss function , which is defined as : L 𝑐 = 𝑌 · 𝐷 2 + ( 1 − 𝑌 ) · [ max ( 0 , 𝑚 − 𝐷 ) ] 2 ( 1 ) where L 𝑐 represents the contrastive loss ; 𝐷 is the Euclidean distance of the two feature vectors generated from the two feature extractors ; and 𝑌 is the proximity ground truth of two CSI inputs , which is a binary value representing whether the two devices are close or not . The 𝑚 is a configurable hyperparameter whose value is set to 2 in our training . The combination of Siamese network and contrastive loss turn the training process into a process of finding the weights that guarantee the Euclidean distance is minimized for any CSI pairs that are measured from two mobile devices that are within six feet , i . e . the close contacts ; and are maximized for CSI pairs that are measured from two far away mobile devices . Specifically , for CSI pairs with ground truth 𝑌 = 1 , i . e . two devices are close contact with each other , the loss equals to L 𝑐 = 𝐷 2 , so the training goal becomes minimizing the Euclidean distance 𝐷 of feature vectors of the CSI pair . On the other hand , for CSI pairs with ground truth 𝑌 = 0 , i . e . two far away devices , the loss equals to L 𝑐 = [ max ( 0 , 𝑚 − 𝐷 ) ] 2 , 3 HealthDL’21 , June 24 , 2021 , Virtual , WI , USA Fan Yi , Yaxiong Xie , Kyle Jamieson (cid:2) (cid:2) (cid:6) (cid:7) (cid:8) (cid:3) (cid:2)(cid:1)(cid:2) (cid:3) (cid:2)(cid:1)(cid:3) (cid:3) (cid:2)(cid:1)(cid:5) (cid:3) (cid:2)(cid:1)(cid:4) (cid:2) (cid:3) (cid:6) (cid:7) (cid:8) (cid:3) (cid:3)(cid:1)(cid:2) (cid:3) (cid:3)(cid:1)(cid:3) (cid:3) (cid:3)(cid:1)(cid:5) (cid:3) (cid:3)(cid:1)(cid:4) (cid:2)(cid:16)(cid:10)(cid:9)(cid:5)(cid:9)(cid:6)(cid:7)(cid:4)(cid:11)(cid:1)(cid:6)(cid:9)(cid:14)(cid:15)(cid:4)(cid:11)(cid:5)(cid:7)(cid:1) (cid:1) (cid:2) (cid:3)(cid:8)(cid:12)(cid:11)(cid:6)(cid:1)(cid:20) (cid:8)(cid:1)(cid:2)(cid:4)(cid:5)(cid:5)(cid:7)(cid:10)(cid:6)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:7)(cid:12)(cid:6)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:7)(cid:13)(cid:1)(cid:9) (cid:3)(cid:8)(cid:12)(cid:11)(cid:6)(cid:1)(cid:21) (cid:8)(cid:1)(cid:2)(cid:4)(cid:5)(cid:5)(cid:7)(cid:11)(cid:6)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:7)(cid:12)(cid:6)(cid:1)(cid:3)(cid:4)(cid:5)(cid:5)(cid:7)(cid:14)(cid:1)(cid:9) (cid:3)(cid:17)(cid:7)(cid:13)(cid:10)(cid:4)(cid:12)(cid:12)(cid:9)(cid:11)(cid:8)(cid:1)(cid:5)(cid:7)(cid:10)(cid:10) (cid:2)(cid:6)(cid:4)(cid:15)(cid:16)(cid:13)(cid:6)(cid:1)(cid:17)(cid:6)(cid:5)(cid:15)(cid:12)(cid:13)(cid:14)(cid:1)(cid:12)(cid:7)(cid:1)(cid:5)(cid:6)(cid:10)(cid:10)(cid:19)(cid:22)(cid:1)(cid:18)(cid:8)(cid:9)(cid:5)(cid:8)(cid:1)(cid:8)(cid:4)(cid:14)(cid:1) (cid:4) (cid:6) (cid:5) (cid:4)(cid:11)(cid:15)(cid:6)(cid:11)(cid:11)(cid:4)(cid:14)(cid:1) Figure 5 : Each smartphone reports the feature vectors of a group of neighbouring cells . Two smartphones may have one or multiple overlapping cells in their reported data . where the training goal becomes maximizing the Euclidean distance 𝐷 . The contrastive loss also ignores the CSI pairs whose distance 𝐷 are already large enough . 3 . 2 . 1 Diverse physical layer configurations . The configura - tions of the cellular physical layer determine the size of CSI matrices that are fed into the contact feature extractor . To be more specific , the size of the CSI matrix is represented as 𝑀 × 𝑁 × 𝑆 , where 𝑀 and 𝑁 is the number of antennas in array of the base station and the mobile phone , respectively , and 𝑆 is the number of subcarriers , which is determined by the channel bandwidth of the base station 1 . The physical layer configuration varies across base sta - tions and mobile devices , so the size of CSI varies accordingly . We train for the combinations of one base station antenna ( 𝑀 = 1 ) , two mobile phone antennas ( 𝑁 = 2 ) and all available bandwidth . We separate the CSI with 𝑀 > 1 into 𝑀 CSIs with antenna number 𝑀 = 1 , so that we can reuse the single antenna model . 3 . 3 Close Contact Identifier When a positive case is reported , the server runs the close contact identifier to find all users that are potentially ex - posed to the COVID - 19 positive user , which involves two steps . First , the identifier reduces the search space by finding users who has overlapping cells in their reported the feature vectors , as shown in Figure 5 . Second , the identifier scans all users found in step one and identifies all possible close contacts that has been exposed to the positive case . In the rest of this section , we introduce our algorithm to identify close contacts using reported feature vectors . Since each user reports feature vectors of a group of neighbour - ing base stations , the number of overlapping cells between two users may vary . We , therefore , begin with the introduc - tion of close contact identification under the scenario of one overlapping cell and then generalize to multi - cell cases . 3 . 3 . 1 Single overlapping cell . Supposing two smart phones share one base station that has 𝑀 antennas in its array , the 1 A mobile device measures the CSI of the entire frequency band of the channel ( § 2 ) , regardless of the detailed bandwidth allocation . close contact identifier first calculates the Euclidean distance 𝐷 𝑗 between the feature vector of 𝑓 1 , 𝑗 and 𝑓 2 , 𝑗 , as shown in Figure 5 , and then derive the average Euclidean distance between the feature vectors 𝐹 𝑖 of two users as : 𝐷 = 1 𝑀 𝑀 (cid:2) 1 𝐷 𝑗 , ( 2 ) based on which , the identifier makes a preliminary identifi - cation 𝑃 𝑝𝑟𝑒 : 𝑃 𝑝𝑟𝑒 = (cid:3) − 1 , if 𝐷 ≤ 𝐷 𝑡ℎ𝑟𝑒ℎ 1 , if 𝐷 > 𝐷 𝑡ℎ𝑟𝑒ℎ , ( 3 ) where 𝐷 𝑡ℎ𝑟𝑒ℎ is the prediction threshold . We set 𝐷 𝑡ℎ𝑟𝑒ℎ to 0 . 9 in our experiments . A preliminary identification of 𝑃 𝑝𝑟𝑒 = − 1 means the two devices , that report the two feature vectors , are within 6 feet with each other , and vice versa . We note that this preliminary estimation is made on a single pair of CSI , which covers only one millisecond in time . Due to the fine granularity of downlink reference signal , we have dense preliminary estimations within a short period , where the specific number of estimations depends on CSI sampling rates . To mitigate the influence of sudden environ - mental changes or unpredictable interference , we propose to add another voting layer on top of the preliminary esti - mations . The voting result P 𝑣 over a series of feature vector pairs is defined as follows : P 𝑣 = 𝑘 (cid:2) 𝑡 = 1 𝑃 𝑝𝑟𝑒 , 𝑡 ( 4 ) where 𝑘 is the number of feature vector pairs in a voting , 𝑃 𝑝𝑟𝑒 , 𝑡 is the preliminary estimation on the 𝑡 - th feature vector pair . If the resulting voting decision P 𝑠 ≤ 0 , the final esti - mation is that these two devices has a close contact in the voting time span , and vice versa . 3 . 3 . 2 Multiple overlapping cells . We modify the voting scheme to handle multiple overlapping cells . Supposing two mobile users share 𝑛 𝑐 overlapping cells in their reported feature vectors , the voting results is given by : P 𝑚 = 𝑘 (cid:2) 𝑡 = 1 (cid:4) 𝑛 𝑐 (cid:2) 𝑖 = 1 𝑤 𝑖 𝑃 𝑡 , 𝑖 (cid:5) , ( 5 ) where 𝑃 𝑡 , 𝑖 is the preliminary estimation results obtained from 𝑡 - th feature vector of the 𝑖 - th base station , and the weight 𝑤 𝑖 is used to adjust the impact of 𝑖 - th base station on the final voting results . Different base station have different band - width and transmitting antennas , so feature vectors origi - nated from different bandwidths contain different amount information . Higher weight should be given to base station with larger bandwidth and more antennas . In our experi - ments , we set 𝑤 𝑖 to 1 when the 𝑖 - th base station has 20 MHz bandwidth and four antennas in its array , and then decrease 4 Cellular - Assisted COVID - 19 Contact Tracing HealthDL’21 , June 24 , 2021 , Virtual , WI , USA the value of 𝑤 𝑖 proportional to the bandwidth and array size when the 𝑖 - th base station adopts other configurations . 4 Implementation Mobile client side . As a proof of concept , we implement the CRS decoding and CSI extraction parts on USRP X310 and B210 radios by modifying srsLTE [ 7 ] , an open - source LTE library . We use two laptops , each connecting with two USRPs , to emulate two mobile clients . Each mobile client extracts the feature vectors from the measured CSI , tags the feature vector with timestamps and cell information , and at last uploads the feature vectors together with the tag to the server . Server side . We use PyTorch [ 17 ] to train our feature vector on a server , where the CPU is Intel i7 - 9700 , and the GPU is Geforce RTX 2060 . We set the initial learning rate to 0 . 01 , and decrease the learning rate by a factor of 0 . 7 every 5 epochs to stabilize the training . We set the hyperparameters 𝑚 = 2 during the training . The server distributes the CNN based feature extractor to mobile clients , after finishing the training . To identify close contacts , the server sets the voting time span to 18s and the prediction threshold 𝐷 𝑡ℎ𝑟𝑒ℎ to 0 . 9 . 5 Evaluation In this section , we evaluate the performance of LTESafe . We first introduce our evaluation methodology , and then give the end - to - end performance under diverse physical layer configurations , followed by a micro - benchmark evaluating the accuracy gains arising from each component of LTESafe . 5 . 1 Methodology Data collection . We collect a diverse dataset of CSI pairs by moving the two mobile clients together with two people around each mobile client to emulate the impact of human body on wireless signal propagation . To get the ground truth of proximity between clients , we fix the distance between two mobile clients to smaller than six feet and larger than six feet . In total we collect data at ten different locations over a period of 16 days . and the signals are from 6 nearby cell towers owned by three mobile network operators , Verizon , AT & T and T - mobile The operating frequencies range from 1805MHz up to 2355MHz . These 6 cell towers cover all an - tenna configurations , i . e . , one , two and four transmitting an - tennas , and three commonly used bandwidths , 5MHz , 10MHz and 20MHz . Each mobile client has two antennas in its array . In total , we collect 3 , 959 , 442 CSI pairs . We train our feature extractor using the data we collected from the first six days and then evaluate the system performance using data from the later ten days . Ground truth Close Far Predictions Close TP = 48 . 86 % FP = 5 . 85 % Far FN = 1 . 35 % TN = 43 . 93 % Table 1 : The confusion matrix result of LTESafe 90 % Verizon AT & T T - mobile Network Operators 0 25 50 75 100 A cc u r ac y ( % ) Figure 6 : Overall accuracy of LTESafe working with data collected from different network operators . 90 % 1 2 4 Array size 0 25 50 75 100 A cc u r ac y ( % ) 5MHz 10MHz 20MHz ( a ) Varying antenna , 1 cell . 90 % 1 2 3 4 Cell number 0 25 50 75 100 A cc u r ac y ( % ) 5MHz 10MHz 20MHz ( b ) Varying cells , 2 antenna . Figure 7 : LTESafe’s performance under diverse physical layer configurations . 5 . 2 Close Contacts Identification Accuracy We evaluate LTESafe’s accuracy in identifying close contacts . We compare the identification results with the ground truth to calculate the accuracy . Except the overall accuracy , we also calculate the true positive ( TP ) , i . e . , the correct close contact discovery rate , the true negative ( TN ) , i . e . , the correct far contact identification rate , the false negative ( FN ) , i . e . , the close contact missing rate , and the false positive ( FP ) , i . e . , the false alarm rate . 5 . 2 . 1 End - to - end accuracy . We run LTESafe on all testing CSI pairs we collected and calculate the accuracy . We give the confusion matrix of LTESafe’s identification accuracy in Table 1 , from which we see that the overall accuracy of LTESafe , is 𝑇𝑃 + 𝑇𝑁 = 92 . 79 % . In addition , in the context of Covid - 19 contact tracing , missing close contacts is a much more severe problem than giving false alarms . From Table 1 , we see that even though LTESafe gives false alarms to 5 . 85 % of CSI pairs , it only misses 1 . 35 % of close contacts in the dataset . We also provide LTESafe’s identification accuracy with CSI pairs measured from cell towers of different network operators in Figure 6 . We observe that LTESafe achieves a 5 HealthDL’21 , June 24 , 2021 , Virtual , WI , USA Fan Yi , Yaxiong Xie , Kyle Jamieson high average accuracy working with data collected from different network operators . 5 . 2 . 2 Impact of diverse physical layer configurations . In this section , we evaluate the impact of diverse physical layer con - figurations on the end - to - end accuracy . The configurations we investigate include channel bandwidth , array size of the cell tower and the number of overlapping cells . Impact of bandwidth . We plot the accuracy of close con - tact identification in Figure 7 ( a ) and 7 ( b ) . We can observe from these two figures that LTESafe achieves higher accu - racy when the bandwidth becomes larger and the highest achieved accuracy under one overlapping cell is 96 . 36 % with 20 MHz bandwidth and four antennas . Even in the worst case , where two devices share one overlapping cell that has 5 MHz bandwidth and one antenna in its array , LTESafe can still achieve an accuracy of 85 . 14 % . Impact of array size . To evaluate the impact of array size of the cell tower on the accuracy , we fix the number of over - lapping cells to one , and plot the accuracy of close contact identification in Figure 7 ( a ) . We see that increasing the array size significantly improve the accuracy . When the two de - vices are in connected mode with a configuration of 20MHz , one overlapping cell , two antennas , which is the most com - monly used configuration in our collected data , LTESafe can achieve a accuracy of 91 . 07 % on our testing dataset . Impact of overlapping cells . To evaluate the impact of the number of overlapping cells on the identification accuracy , we fix the array size to two antenna , and plot the accuracy of close contact identification in Figure 7 ( b ) . We note that , since each mobile user in our implementation has only two radio chains ( two USRPs due to limited available hardware ) , so we emulate the four cell cases by concatenating two traces . We observe higher accuracy when two devices have more overlapping cells . Specifically , the highest accuracy is 98 . 74 % when two devices share four cells . 6 Related Work Contact tracing using device proximity hides the exact user location and thus preserves user privacy , which makes it a promising solution . Diverse techniques have been proposed to estimate the proximity of mobile devices . WiFi proxim - ity using direct signal transmissions between two device has been proposed [ 15 ] , which , however , only works when the devices are in close proximity , i . e . , centimeters apart . Bluetooth based proximity estimation has been well stud - ied [ 13 , 14 ] , and its application to contact tracing has been explored by both the research community [ 5 , 16 ] and com - mercial companies like Google and Apple [ 8 ] . Most of these contact tracing systems estimates the proximity using Blue - tooth RSSI , whose value is affected by several factors other than distance , including the hardware , interference from signals that share the 2 . 4 GHz ISM band and the multipath effect . 7 Conclusion We propose a cellular - assisted , privacy - preserving contact tracing system for containing the spread of COVID - 19 . We leverage a deep learning based feature extractor to map CSI into a point in a feature space , which preserves user privacy and achieves high accuracy in identifying close contacts . Acknowledgments This work is supported by an award from the Office of the Princeton University Dean for Research . This material is based upon work supported by the RAPID program of the National Science Foundation under Grant No . CNS - 2027647 . References [ 1 ] N . Ahmed , R . A . Michelin , et al . A survey of covid - 19 contact tracing apps . IEEE Access , 2020 . [ 2 ] R . Ayyalasomayajula , D . Vasisht , D . Bharadia . Bloc : Csi - based accurate localization for ble tags . ACM CoNEXT , 2018 . [ 3 ] J . Bromley , I . Guyon , Y . LeCun , E . Säckinger , R . Shah . Signature verifi - cation using a " siamese " time delay neural network . NeurlIPS , 1993 . [ 4 ] CDC . Digital Contact Tracing Tools . [ cdc . gov ] . [ 5 ] J . Chan , S . Gollakota , et al . Pact : Privacy sensitive protocols and mechanisms for mobile contact tracing . arXiv : 2004 . 03544 , 2020 . [ 6 ] J . A . del Peral - Rosado , et al . Survey of cellular mobile radio localization methods : From 1g to 5g . IEEE Communications Surveys Tutorials , 2018 . [ 7 ] I . Gomez - Miguelez , A . Garcia - Saavedra , et al . srslte : an open - source platform for lte evolution and experimentation . ACM WiNTECH , 2016 . [ 8 ] Google , Apple . Exposure Notification Bluetooth Specification . [ 2020 ] . [ 9 ] R . Hadsell , S . Chopra , Y . LeCun . Dimensionality reduction by learning an invariant mapping . IEEE CVPR , 2006 . [ 10 ] K . He , X . Zhang , S . Ren , J . Sun . Deep residual learning for image recognition . IEEE CVPR , 2016 . [ 11 ] M . Kotaru , K . Joshi , D . Bharadia , S . Katti . Spotfi : Decimeter level localization using wifi . ACM SIGCOMM , 2015 . [ 12 ] P . Lazik , N . Rajagopal , et al . Alps : A bluetooth and ultrasound platform for mapping and localization . ACM SenSys , 2015 . [ 13 ] R . Momose , T . Nitta , M . Yanagisawa , N . Togawa . An accurate indoor positioning algorithm using particle filter based on the proximity of bluetooth beacons . IEEE GCCE , 2017 . [ 14 ] A . Montanari , et al . A study of bluetooth low energy performance for human proximity detection in the workplace . IEEE PerCom , 2017 . [ 15 ] T . J . Pierson , T . Peters , R . Peterson , D . Kotz . Proximity detection with single - antenna iot devices . ACM MobiCom , 2019 . [ 16 ] R . L . Rivest , J . Callas , et al . The pact protocol specification . Private Automated Contact Tracing Team . , 2020 . [ 17 ] P . Team . PyTorch . https : / / pytorch . org / . [ 18 ] Y . Xie , Z . Li , M . Li . Precise power delay profiling with commodity Wi - Fi . ACM MobiCom , 2018 . [ 19 ] Y . Xie , J . Xiong , M . Li , etal . mD - Track : Leveragingmulti - dimensionality for passive indoor Wi - Fi tracking . ACM MobiCom , 2019 . [ 20 ] Y . Xie , Y . Zhang , J . C . Liando , M . Li . SWAN : Stitched wi - fi antennas . ACM MobiCom , 2018 . [ 21 ] Q . Zhao , H . Wen , et al . On the accuracy of measured proximity of bluetooth - based contact tracing apps . Springer SECURECOMM , 2020 . 6