Learner - Centered Design The Challenge For WC1 In The Xst Century Elliot Soloway , Mark Guzdial and Kenneth E . Hay n the 1980’s a major transformation took place in the computing world : attention was finally being paid to making computers easier - to - use . You know the history : in rhe 1970’s folks at Xerox were exploring so - called personal computers and developing graphical , point - and - click interfaces . The goal was to make using computers less cognitively taxing , there - by permitting the user to focus more mental cycles on getting the job done . For some time people had recognized that there would be benefits if users could interact with computers using visual cues and motor movements instead of testu - - L J”“ al / linguistic strings . However , computer cycles were costly ; they could hardly be wasted on supporting a non - textual inter - k - : _ face . There was barely enough zorch ( i . e . , computer power , measured in your favorite unit ) to simply calculate the payroll . ‘5 . : . - . EUIOT SOLOWAY is an Associate Profasor in the Department of EECS , Universi ~ of Michigan , Ann Arbor , MI , email : soloway @ umicb . edu ~ WETH E . HAYS ic an Assistant Profasor in the School of & & cation at Indiana University & Purdue Univmig , Indianapolis , IN , emaik khay @ indyyax . iupui . edu MARK J . GUIDE is an Asshant Profissoc Georgia Institute of & ! mohg , College of Computing , Atkznti , GA . , entail - guzdial @ cc . gatecb . edu - - . - . - _ ~ _ _ - . - . - . . - - - _ - _ _ _ - - - - - m - . . . - - - , - . . . . : ’ Figure 1 Plotthg the Computer ihch Curve Against HCI Goalr The Xerox researchers were ahead of their time . It wasn’t until the 1980’s that sufficient zorch - at almost consumer prices - was available to permit the computer to do its work and still have enough power left over to support an eas - ier to use graphical user interface . With the publication of several seminal books ( e . g . , Card , Moran , and Newell’s “Human Computer Interaction” in 1983 , and Norman and Draper’s “User - Centered Systems Design” in 1985 ) and the grand successes of the early ACM CHI con - ferences ( e . g . , Gaithersburg in 1983 ) , the Human - Computer Interaction movement shifted into high gear . The early interface researchers dared to imagine what using a computer could be like if the computer were truly more powerful . And we are in an analogous position today . The 500 MIP notebook - sized machine is just around the corner . What could using such a computer be like ? Of course , one goal should still be to use that increased zorch to make computers even easier to use , in as many ways as possible , e . g . , from even more clever visual , gestural , auditory interfaces to intelligent agents . However , is ease of use the only need ? The answer is a resound - ing NO ! The challenge , as posed by Buxton ( 1991 ) for HCI is how to support individuals i q interactions . and groups of individuals in developing exper - tise in their professions , in developing richer and deeper understandings of content and prac - tices . Making people smarter is really the long - term goal of computing . It is our position that computing technolo - gies are finally reaching the point where the HCI community can address the “make people smarter” ( Norman , 1993 ) challenge . Consider the graph in Figure 1 . In the early days of com - puting , interface design was driven by concern for over - taxing the technology . In the 1980’s , a favorable cost / performance ratio for computing afforded us the opportunity to be concerned with over - taxing the computer user . The cost / performance ratio of computing in the sec - ond half of the 199O’s - and beyond - will permit even more cycles to be devoted to the interface . What function , then , can the interface serve ? Simply put , the HCI community must make another transition : we must move from “user - centered” design to “learner - centered” design . In what follows , we address three key questions . * Why support learners and learning ? l How might the interface support learners and learning ? l What are the issues involved in providing such support ? . . april 1994 Why Support Learning and Learners ? Who is a learner ? After all , a professional is supposed to be an expert . Table 1 provides a characterization of the traditional differences between students and professionals . For exam - ple , at first blush one might reasonably assume that a professional accountant would under - stand the principles underlying a spreadsheet , but one can not assume that same understand - ing when introducing spreadsheets to students in introductory accounting . Moreover , one might assume that a professional accountant will be motivated to persevere in learning to use a spreadsheet ; again , a student’s motiva - tion , and hence the student’s perseverance , is very much in question . But learning is not just for students in class - rooms ! Professionals are - should be - constantly learning , e . g . , a professional accountant may not understand the power of forecasting meth - ods . Moreover , when the professional is acting as a learner , that person is susceptible to all the challenges faced by students . For example , the professional may be unable to stop staring out the window when faced with the process of learning the forecasting tool . In sum , profes - sionals are students who happen to learn out - side of a classroom . In fact , companies are interactions coming to realize that investing in the growth and development of their people is good busi - ness . The notion of the “learning organization” ( Senge , 1990 ) is a provocative and compelling idea in management these days : first , the value of a company is directly related to how deeply its employees understand their business , and secondly , effectively competing in today’s mar - ketplace requires that this understanding con - tinues to grow and change . The company that is successful , time after time , is the company that learns from its successes and mistakes , that deals effectively with the many changes in the marketplace , that can nimbly respond to opportunities , etc . And , who is ‘ihe company” - it’s people ; it’s individuals from increasingly diverse backgrounds . The need to support Tab . & I Traditional Differences Between Professionals and Students r I Nature of i Professionals Do Know Domain Are motivated Homogeneous populations Growth IS the issue Nature of Student - _ _ _ Do NOT know domain NOT motivated Diverse populations Growth is not an issue i . . april 1994 f . ’ : , - - - - _ . - - . - ~ - - - - Table 2 learning and learners in the workplace of the 21st century is clear . Fortunately , the intensive use of computers in the workplace sets up just the right condi - tions to effectively support learning and learn - ers , thus there are good reasons to be optimistic that computers and interfaces can be successful in providing such support . That is , computers are coming to be used on a moment - by - moment basis for all aspects of work . In knowl - edge - intensive industries , personal computers are ubiquitous ; standard issue to a new employ - ee is a desk , a phone and a computer linked into the company’s network . Given that computers are being used for doing one’s job , there is a clear opportunity to use those same computers supporting learning Addressing the Needs of Learners Understanding Is the Goal Modeling , coaching , critiquing GPC Editor Motivation Is The Basis “Low overhead , Immediate success” use MediaText Diversity is the Norm Growth Is the Challenge Collections of various techniques Adaptable MediaText , ScienceWorks Emile as one is engaged in ‘doing . ” ‘While not neces - sarily widely practiced in schools , the effective - ness of the educational philosophy of “learning by doing” is widely acknowledged . Plato , Why is learning by doing so effective ? When Dewey , your mother - they all knew the value of one really cares about what one is doing , one seems able to muster the energy , the attention , learning from direct experience , from on - the - the patience to master whatever is necessary to achieve the goal . However , when learning is job training . divorced from doing a meaningful task - as are many arbitrary , decontextualized activities in the classroom - then learning becomes just another chore , low on the priority stack . Performing well on the job is a motivating goal ; walking through a cookbook set of steps to find Avogadro’s Number in the chemistry lab , on the other hand , may not engender much enthusi - asm , and hence not much genuine learning . Why devote computer zorch to the interface to support learning and learners ? Answer : there is a clear need to support students and profes - sionals in developing their expertise . And , there is a clear opportunity for success ; the way in which computers are being used in the worlc - place provides precisely the right conditions under which learning should take place , name - ly , learning in the context of doing . User - Centered Design to Learner - Centered Design In designing a sofnvare environment , there are three top - level issues that must be addressed : l Tasks : What tasks need to be undertaken in the software ? l Tools : What tools are provided to cope with those tasks ? l Interfaces : What is the interface to those tools ? The insight offered by the user - centered design movement ( Norman & Draper , 1985 ) was that the user needed to be at the center of those issues ( see Figure 2a ) . In putting learners at the center of the design , however , the special needs of learners must be addressed : l Understanding is the Goal : Learners will not know accounting principles or practices when a spreadsheet is presented to them . HOW will they learn to use that spreadsheet ? l Motivation is the Basis : One can not count on the motivation of learners : both stu - dents and professionals have a strong tendency to procrastinate , to fritter away time , when con - fronted with a task for which they are unpre - pared . Why can’t software play a role in supporting the learner’s wavering motivation ? l Diversity is the Norm : Classrooms and professions are composed of individuals from a diverse set of backgrounds , with a diverse set of interests , skills and abilities . How can an appli - cation be “one size fits all” ? l Growth is the Challenge : A spreadsheet is by and large the same on day 1 as it is on day 100 . But an individual can be very different , e . g . , that person may have learned quite a bit . . april 1994 - . . _ _ _ _ _ _ _ . _ . . - , , - - . . : - - ; . A - _ - . - . - - . . . - - _ - . - - : . . L I’ : 1 . 1 - - - - - . - - - - - in focus l - - - - - - : about a problem domain and might have devel - oped a set of skills and practices in that’domain . The individual has changed but the software hasn’t . Tools - jnterfaces - Learner’s Needs - Tasks ( TILT ) Our suggestion is that the soon - to - be - available zorch can permit us to put the kamer at the center ( Figure 2b ) - and provide mechanisms that can address their special needs . Hence , we have proposed the TILT Model ( Tools , Interfaces , Learner’s needs , Tasks ) to guide the design of learner - centered software : the ’ objective of the model is to highlight how software might address the special needs of the learner . In education , scaffolding is a technique for providing support to learners while they are learning a new task ( Wood , Bruner , Ross , 19 75 ; Rogoff , 19 9 0 ) . For example , as a student begins a new task , say , calculating a set of numbers , a teacher may scaffold the student by stopping the student by making helpful hints or correct - ing mistakes . The key is that the student is doing the task and the teacher provides struc - ture and guidance to ensure successful comple - tion of the task . As the student gains expertise , a good teacher provides less and less coaching . Scaffolding , then , is provided to help a learner do a task that he or she can not do alone ; as the learner develops the needed knowledge and skills , the scaffolding fades so that the learner is fully in control . The TILT Model ( Figure 2b ) identifies spe - cific scaffolding strategies that are particularly appropriate for the special needs of the learner : interactions . l Task : Coaching is a scaffolding technique that could be used to help students acquire knowledge and the specific practices of a task domain . This technique is popular in “intelli - gent tutoring systems ( ITSs ) ” ( Wenger , 1989 ) . l Tools : In order to support a learner grow - ing in expertise , the tools must be adaptable . l Interlace : In order to enable learners to express themselves and communicate , the inter - face must scaffold the use of different media and modes of expression . CAD for Kids , And Teachers , Too Over the past 5 years , we have implemented , classroom tested , and even commercially so1 . d various pieces of software that are designed to support learners ( Guzdial et al . , 1992a ) . But , in order to prepare the way for a description of that software and how it exemplifies the TILT Model , we need to first be clear about our edu - cational philosophy . We subscribe to the constructivist theory of learning espoused by Jean Piaget ( 1954 ) , Lem vygostky ( 19W , and Seymour Papert ( 1993 ) . Students learn through an active , social process of meaning construction ; understanding is built up through the acts of conversing with others , constructing artifacts , and reflecting on those conversations and artifacts . This theory of learning leads to a theory of teaching : stu - dents need to actively engage in projects , and teachers need to act as mentors , coaches , man - agers . A contrasting view - and one that is prevalent in classrooms today - is that learning is a copying process : what the student hears , the students knows . This theory of learning leads to . . april 1994 - _ - . . Figure 2 a CW Tasks - Took - Interfaces ( TTI ) user - centered morsel b ( right ) Toolr - lnterfaces - Learner ? Need + Tmks ( TILlJ learner - centered model Figure 3 Student selecting a Valid - Data - Enhy ( VDIJ Planjom the GPC Editor library Figure 4 Using the GPC Editor Decompose jilnction to idmt $ the selected Valid - Data - Ertty ( WE ) Plan interactions . . . april 1994 the didactic theory of teaching : the teacher talks , students listen , and knowledge gets deposited directly into the gray matter . In effect , students are empty vessels that need to be filled . We apologize for over simplifying both positions . We do not apologize , however , for our skepticism of the “learning as informa - tion rransmission” model . In turn , the constructivist theory of learning suggests that students need software that sup - ports them in constructing artifacts and con - versing with others about those artifacts . We view the construction of artifacts as a design process ; and , inasmuch as professional designers routinely employ CAD systems in their design activities , we feel that learners deserve suitably scaffolded CAD support as well . And , since classroom teachers are also learners , and need the same kind of support as their students , we have developed scafholded CAD tools for their tasks ( e . g . , project and instruction planning , Soloway et al . , 1994 ) . In our software , you will not see drill - and - kill sofi - ware that teaches specific facts , motivating stu - dents by rewarding them with playing time on an arcade - style game . Rather , you will see scaf - Students have little trouble mastering an if - statement or variable assignment . But , they do have considerable difficulty in putting state - ments together in a coherent fashion to solve a problem . The GPC Editor supports students in carrying out this task in the following ways : l Change the nature of the task : Traditionally , students use some sort of text editor to create programming statements and then run and debug the program in an execu - tion environment . While introductory pro - gramming courses try to teach students to first plan their programs , there is little computer - based support for such planning . The upshot , quite reasonably , is that by and large students do not plan their programs . In contrast , the GPC Editor provides an integrared environment that supports plan - ning , generating , and testing . In fact , one never writes a line of code ; rather , one selects plans from a library that achieve the specified goals . For example , in Figure 3 , we see a stu - dent selecting the Valid - Data - Entry ( VDE ) Plan to achieve her goal of testing input data for validity . Notice the VDE Plan is a nice sized chunk of code . Eacbers tire the gatekeepers of the chssroom . . + _ - _ _ _ _ _ _ . _ - . . _ _ - _ _ . _ 7 - _ _ . . . - - . . - . - in focus L - ~ - - - - - Y , . , . * - / They won’t let somethingpdsss through the gate zj’tbey don ? feel comfortdble with it themselves . . . indsmucb ds they feel comfortdble with Media Text , it is permitted to pass tbroagb the gate into tbe bands of t - be students . folded CAD environments where learners con - struct a wide range of artifacts . In what follows we illustrate how our soft - ware uses scaffolding to address the needs of learners identified in Table 2 . Supporting the Learning of a Task : The GPC Editor We developed the GoalPlanCode ( GPC ) Editor to support students learning elementary Pascal programming ( Soloway , et al . , 1993 ) . . Guide student actions : In creating a pro - gram , a student needs to carry out a range of actions . Using a scaffolding strategy we call “tight process control” the GPC Editor chan - nels students to construct a program in a spe - cific order . In particular , the GPC Editor scafIolds students to decompose a problem into goals and subgoals , identify code fragments ( plans ) from the library that achieve those sub - goals , and then compose the plans together - _ interactions . . . april 1994 _ . . , , - - . , - - . . . - - ‘ . ’ I . . > ‘y . : . - : . , , , , _ : , : - , ’ Figure 5 l $ pical learning curve for a new application is shown in red but what people really want to experience is closer to the ideal learning curve shown in blue . into a program ready for testing . The decom - pose menu that directs subgoal decomposition - plan identification activities in the GPC editor is displayed in Figure 4 . The GPC Editor has been used for four years at Community High School in Ann Arbor , MI . We have found that students who would be considered “low achievers” ( e . g . , stu - dents in the bottom half of the class ) produce computer programs of the same quality as stu - dents who would be considered “high achiev - ers . ” Moreover , we found that students who moved off the GPC Editor and into Think Pascal wrote programs that were highly strLc - tured , GPC - like programs . And we found that students initially liked the tight process control , but by the middle of the semester they wished that it would fade away ! Adaptive scaffolding , however , was not available in the GPC Editor ; we learned our lesson , though , in the construc - tion of Emile , described later . Interface Scaffolding For Wavering Motivation Technology has been mak - ing it easier and easier for individuals to create text : from the quill to the pen to the typewriter to the word processor . If one is good with words , this technology is truly empowering . However , as Gardner ( 1993 ) argues , there are many types of intelligences and many types of literacies . The challenge for technology , then , is to go beyond crayons and the camera - no mean feat - so that individuals incur no penalty for ‘ < writing in” non - textual media . There are a range of multimedia authoring tools on the market . However , the learning curve for mastering such tools is steep ( Figure 5 ) . A steep learning curve is not uncommon in technology - oriented contexts , and that makes it hard to stay motivated and persevere . People expect a benefit ( the area above the blue line in Figure 5 ) commensurate with the cost , i . e . , the blue area in Figure 5 . MediaText is a multimedia processor that has a learning curve that is closer to the blue interactions , line than it is to the red line . MediaText enables students ( and , most importantly , their teachers ) to create documents that include images , ani - mations , video , sound and music , as well as fez ( Guzdial , et al . 1992b ; Hay , et al . , 1994 ) . For example , Figure 6 depicts a portion of a docu - ment written by a student at Community High School . The margin on the right contains icons that display their contents when clicked . A vanilla word processor enables students to enter text to the left of the margin . Why is MediaText so learnable ? The inter - face scaffolding strategy adopted in MediaText is to mimic operations that users already know , MediaText employs a page metaphor where a person purs multimedia annotations in the margin . Since users already know how to manipulate marginalia from their experiences with ruled paper , the step to multimedia mar - ginalia is not all that great . Now , the first thing techies want to do when they see MediaText is move the icons out of the margin and integrate them into the text in a hypertext / hypermedia fashion . We have such a version in our lab ; it’s technically not compli - cated to remove that margin . However , the resultant interface is more like a canvas than a document . How many people feel comfortable writing on a canvas ? The interface scaffolding strategy employed in MediaText is one that has been employed quite successfUlly before in computer - based spreadsheets . The first computer - based spread - sheets were one - for - one with their paper cousins , except for one function : the user could change one number and the computer would automatically recalculate the spreadsheet , Current - day computer - based spreadsheets pro - vide all sorts of functions literally impossible to mimic in paper : voice and video annotations , automatic graphing , presentation tools . Why did the initial spreadsheets catch on so dramat - ically ? The “blue line” ( Figure 5 ) learning curve , is our bet . After using MediaTat for a while , users report that they want to create more visually exciting documents ; they want to embed a pic - ture or movie inside the text itself , for example . In effect , they want more control over page lay - out and they want that margin to go away ! Alas , like the GPC Editor , MediaText too is not . . aptil 1394 able to fade its interface scaffolding . By the way , the document depict - ed in Figure 6 is not just another report to be filed in the circular file cabinet . Rather , it is a report on the status of a tree planting project writ - ten by a student at Community High School . The student , who has an interest in trees , was taking an Urban Ecology course and approached the Michigan Department of Natural Resources to see if there was a project they needed help with . Well , it turns out that the Michigan Department of Natural Resources had funds to plant trees in Ann Arbor , but no funds to follow up and see how those trees were doing . The student took her camera out to the streets suggest - ed by the DNR , took pictures , and moved them from a Kodak PhotoCD disk into her MediaText document . Without MediaText it would have been much harder to create an appro - priate , professional - level report . Given the importance of the task , and the low overhead for using the technology , it’s not hard to see why the student’s motivation and perse - verance remained high . ; . ( _ ! . - , - . - - - - - . - - - zzEzwxssy - - - - - - - - - in focus t - . . _ . _ _ . _ . . . - 2 Adaptable Tools To Support Growth of Expertise Emile is a scaffolded environment in which high school students learn sci - ence by building physics simula - tions - worlds where objects fall , bounce , and launch in parabolic tra - jectories . Programming in Emile plays on the same themes that made MediaText easy and learnable . Students construct simulations in Emile by assembling components in a plug - and - play fashion , something that students already know how to do from playing with Lego . Over one hundred components are built into Emile’s library to start ( though students can always add more ) , ranging from graphical objects that can be dragged and dropped in a simulation of one - dimensional projectile motion , down to code segments that play digi - tized video or sound . We finally learned our les - interactions . . . april 1994 son from the GPC Editor and MediaText : Emile enabled the student to adapt the scaf folding . Figure 7 depicts the Preference Page from the student’s Design Notebook ( where students gather and connect their components in Emile ) . Note the range of scaffolding strate - gies employed in Emile over which students had direct control . l Note the check box for “Process Control . ” With this preference selected , which it was ini - tially , Emile channeled the student in how he or she went about constructing the simulation . However , as students grew more confident in Figure 6 Media Text ‘Xnn Arbor Trees” documentproduced ly a hgh school student : ‘ , , : . - _ , . - ’ , , ~ - : . - _ - . . . Ej AllOWGX + i & hOXWS aCxateterndEditActia Navigation Took q Piemtvtits q ChUtC & Ol q WSLeCr Figure 7 Student - selectable preferences in the Em & scaffolded environment . their abilities , they went to the Preference Page and turned off this scaffolding . When they were ready , they were on their own to figure out what to do first and then next . l Note the check box for ‘Create and Edit Actions . ” Actions in Emile are the code seg - ments that students used from the library . When students reached the point where they wanted a code segment that was not in the library , they could go back to the Preference Page and check this on . Now they were free to create their own components and add them to the library . / / 4 ! I , 1 * Note the check box for “Directly Edit Behaviors . ” A behavior in Emile determined how a graphical object fimctioned in a simula - tion . When students knew enough about pro - gramming in EmiIe that they wanted to go beyond components , they turned this switch on . Then , Emile was no longer plug - and - play . It was type - and - go . Interestingly , some students turned the scaf - : , folding off and on several times during a pro - ject . Piaget called this behavior “horizontal decollage . ” The idea is that students do not progress across the board in all skills at the same rate . Some days they move forward in some areas , some days they stand still in others . A student might feel compIeteIy comfortable cre - / j q interactions . I ating actions and working without process control when he or she is set - ting things up , say , to show instructions for a simulation , but the student may want all the scaffolding back on when it comes time to actually build the simu - lation . That’s okay , too . Scaffolding is not an all - or - nothing deal . Good scaf - folding is there when the student wants it , and is not there when the student wants to work independently . The bottom line with Emile is that students built simulations that they found exciting and joyful and they learned a lot about physics in the process ( Guzdial , 1994 ) . Students went from talking about how heavy objects fall faster , to the role of acceleration due to gravity . They stopped saying that rocks just fall from buildings , and start - ed talking about instantaneous and average velocity . That’s the point : Construction in pursuit of learning , and in Emile , at the student’s own pace . Challenges to Realizing Scaffolding In Software The notion of scaffolding comes out of the edu - cation literature where there is an assumption that humans provide the scaffolding . To realize scaffolding in sofnvare several issues need to be explored . l First , the challenge for software designers is in instantiating scaffolding techniques , e . g . , coaching , in sofnvare . The challenge is very serious : a good human coach can have a sub - stantial battery of strategies for scaffolding , while even implementing one or two in soft - ware is quite non - trivial . The human coach can pick and choose which particular strategies and tactics to use , whereas sofnvare - realized scaf - folding may not be as flexible . How can we ensure the effectiveness of such sofnvare - renl - ized scaffolding ? l Second while the education literature argues that scaffolding must , by definition , fade , there appears to be times that fading saft - ware - realized scaffolding might not be appro - priate . For example , supporting a learner in adapting tools , or providing a help system for the tools , are functions that should always be available . What are the differences , then , . april 1934 _ - - - - _ l - _ _ l a . . in focus L - - . . - . . . A - . between software - realized scaffolding and human - realized scaffolding ? l Third , our use of the notion of scaffolding ( Collins , Brown , and Newman , 1989 ) is broad - er than that found in the education literature . For example , coaching would be a legitimate scaffolding strategy , but “‘adaptable tools’ would not . Perhaps we have over - burdened the term ; or perhaps the education world has too limited a notion of that term . l Fourth , what new s & olding types might arise precisely because we can realize them in software , in a computational medium ? By and large the scaffolding strategies that have been instantiated in software to date mimic human strategies . This is a reasonable place to start ; new technology mimics old - for a time . However , the computational medium surely will afford new opportunities ; what , then , are the scaffolding strategies and tactics that exploit a computational medium ? Build learner - centered software ! Build scaf - folding ! Easy to say , hard to do . What To Do Next ? In a rare moment of humility , we recognize that the TILT Model is just the beginning ; if the field is truly going to support learners in a seri - ous way a great deal of invention and hard work needs to be done . Will AI solve “the problem ? ” The AI community has long pro - moted the notion of “‘smart machines . ” Intelligent interfaces will know about you and use that information to better serve you . Making computers smarter is not incompatible with making humans smarter ; quite the con - trary , in fact : the two ideas go hand - in - hand . Now , let’s get on with it ! Understanding task domains and practices is a high priority : what is it that people need to know and do - and how does that change as a function of the new technology ? What new interaction paradigms will arise as a function of that new technology ? What is the nature of the conversation between humans and machines when the latter have speech and vision ? And , what is learning ? What is the impact of indi - vidual differences and different rates of devel - opment ? The laundry list of unknowns is staggering - as it always is . The fundamental issue remains , however : Is the distinction between the notion of users and learners merely rhetoric or is there truly a sub - stantive distinction being made ? If words count for something , then there is a genuine distinc - tion being made : if addressing the needs of users is the driver , then it is natural to focus on ease of use ; if addressing the needs of learners is the driver , then it is natural to focus on the development of understanding , performance , and expertise . The former is unquestionably important ; however , the latter is unquestion - ably critical . The engines of the 21st century inspire awe ; what does it mean to have 1000 MIPS inside a 2 ounce , 8 . 5 x 11 inch notebook ? What does it mean to be able to see and talk to anyone , any - where , anytime ? The human - computer interac - tion community is being handed an unprecedented opportunity : we are the creators of the gates through which millions and mil - lions of people will gain access to those mighty engines . What is our responsibility ? Taming those engines for human use is surely a value - added ; but the opportunity is grander than that : if we support learning and learners , then we support that which is quintessentially human : individual developing into better indi - vidaak Such a challenge and responsibility Dz ~ inspires awe . H References q Buxton , W . ( 1991 ) Presentation at Opening Panel , ACM CHI ‘91 Conference , Monterey , CA . q Card , S . , Moran . , T . , Newell , A . ( 1983 ) The P $ ~ cbologv ofHuman Computer Interaction , L . Erlbaum & Associates , Hi & dale , NJ . q Collins , A . , Brown , J . S . , & Newman , S . E . ( 1989 ) . Cognitive apprenticeship : Teaching the craft of reading , writing , and mathematics . In L . B . Resnick ( Ed . ) , Knowing , Learning , and Instruction : Essays in Honor of Robert Gkzser Hillsdale , NJ : Lawrence Erlbaum and Associates . M 1 Dewey J . ( 1964 ) Jobn Dewy on Education , Selected Wtiitings , RD . Archambault ( Ed . ) , U . of Chicago Press , Chicago , IL . rm Gardner , Howard ( 1993 ) Multiple Intelligences : Theory in Practice , Basic Books , New York , NY a Guzdial , M . , Soloway , E . , Blumenfeld , E , Hohmann , L . , Ewing , K . , Tabak , I . , Brade , K . , & Kafai , Y ( 1992a ) . The fircure of CAD : Technolog - ical support for kids building artifacts . In D . Acknowledgements The authors wish to thank the fohwing for their comments on earlier drafk of this artick : fite Biekzqc , fitby Bra & Shari / a & on , J @ Spitulnik , Steve StraFford . : . > - / The artikk owes deeply to the insights of our colleagues Pbylll Blumen ~ % ~ Joe Krajcik , and Ron Mam . And , we gratefilb acknowkdge the productive and jouf ; rl colkzboration between us and the teachers and studhts of Community High School in Ann Arbor , Michigan . The preparation of this article was supported in part , by grantsjom the National Science Foun & tion , @ red - 9359481 and nsf ipe - 9153753 . Balescri , S . Ehrmann , & D . L . Ferguson ( Eds . ) , Learning to design , designing to barn : Using tecbnolo - gy to transform the curriculum Nonvood , NJ : Ahlex Publishing Company . II Guzdial , M . , Weingrad , E , Boyle , R , & Soloway , E . ( 1992b ) . Design support environment for endusers . In B . A . Myers ( Ed . ) , Languagesfor developing user inte & ees ( pp . 57 - 78 ) . Boston , MA : Jones and Bartlett . rm : Guzdial , M . J . ( 1993 ) . En & Sojware - realizdzaf - folding for science learners programming in mixed media . Unpublished Ph . D . dissertation , University of Michigan . q Hay , KE . , Jackson , S . , Boyle , R , Guzdial , M . and Soloway , E . ( 1994 ) Student Creation of Multimedia Documents . Journal of Computers and Education , In press . q . Jackson , S . L . , Hu , J . T . , Soloway , E . , ( 1994 ) The ScienceWorks Modeler : Scaffolding rhe Doing of Science , ACM CHI ‘94 Conference Proceedings Companion , April 1994 , Boston , MA , in press . q Norman , D . , Draper , S . ( 1986 ) User Centered System Design , L . Erlbaum & Associates , Hillsdale , NJ - q Norman , D . , ( 1993 ) Things That Make Us Smart , Addison - Wesley , Reading , MA . In Paperr , S . ( 1993 ) The CbiMrenS Macbine : Rethinking School in the Age of rbe Computer , Basic Books , New York , NY . mm Piagec , J . ( 1954 ) The Commrction afReality in t / w Cbiu Basic Books , New York , NY . q Rogoff , B . ( 1990 ) . Apprenticeship in thinking : Cognitive development in social context . NW York : Oxford University Press . la Senge , l ? ( 199 ) The F $ b Discipline : Tbe Art nnd Practice of The Learning Organization , Doubleday , New York , NY . q Soloway , E . , Guzdial , M . , Brade , K . , Hohmnnn , L . , Tabak , I . , Weingrad , I ? , PC Blumenfeld , I ? ( 1373 ) . Technological support for the learning and doing of design . In M . Jones & l ? H . Winne ( Eds . ) , FounLtiom andjPontiers of adaptive lrarning cnvir - onments New York : Springer - Verlag . ml : Vygotsky , L . S . 1962 . Tbougbt dnd kznguoge . Cambridge , MA : MIT Press . q Wenger , E . ( I 987 ) . Ar $ cial Intelligence and lirtoring Syztemc Computational and Cognitive Approaches to the Communication of hilorulcdge . Morgan Kaufman . ml l D . Wood , J . S . Bruner , G . Ross . 1975 . The role of tutoring in problem - solving . / ownal of cbilrlpsycbal - ogv andpvcbiaq V . 17 . 89 - 100 . The Vanguard Group Of Investment Companies , the world’s largest pure no - load mutual fund compan w ~ tb over $ 130 billion in assets , is committed to becoming a T ecbnology Leader b concentrating our resources on aggressively implementing lea B - in edge client / server applications to maintain our competitive e & e . COMPUTER TO HUMAN INTERFACE PROFESSIONAL Vanguard offers a competitive salary and a full range of benefits . To apply , % lease forward resume and salary requirements to : The Vanguar Group , Inc . , De L INRFCH , P . O . Box 876 , Valley Forge , PA 19482 . Fax : ( 610 P 669 - 6640 . Equal Opporhmity Em - ployer . Drug Free / Smoke Free Work Enwonment . Drug saeen - mg employer . Minorities , individuals with disabilities and veter - ans encouraged to apply . Graphical User Interface ( GUI ) Design Training Analysis and Design Mefhods for Complex User / nterfaces @ Learn practical methods and skills that will make your software : l easy to learn and use l reduce user errors l increase user satisfaction Learn valuable methods and techniques for user analysis , screen design , prototyping , and evaluation . We include information on the QUE Development Methodologym , an exciting new usability engineering methodology from Cognetics Corporation . For More Information Call : B ( 201 ) 267 - 6007 Software Jsability Seminars P . O . BOX 512 . Morristown , NJ 07963 interactions . . . april 1994