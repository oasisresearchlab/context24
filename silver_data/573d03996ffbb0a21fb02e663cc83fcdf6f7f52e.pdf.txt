Enabling principles of concurrency and simultaneity in concurrent engineering BIREN PRASAD Unigraphics Solutions , Knowledge - based Engineering ~ KBE ! PBUs , CERA Institute , P . O . Box 250254 , West Bloomfield , MI 48325 - 0254 , USA . ( Received May 20 , 1997 ; Revised October 27 , 1997 ; Final Revision November 20 , 1998 ; Accepted February 12 , 1999 ! Abstract The paper describes a set of seven fundamental principles for achieving “best concurrency and simultaneity . ” The concurrent approach is gaining worldwide attention at this moment . The paralleling of life - cycle activities and process restructuring are being deemed necessary by more and more industries . An automobile product development process example is used in this paper to illustrate many aspects of these seven principles . The principles help the concurrent teams , first , to define how to decompose the product , process and work activities and then , how to arrange these decomposed activities so that “ best concurrency and simultaneity ” can be achieved . Keywords : CE Principles ; Concurrent Engineering ; Principles of Concurrency ; Time - to - Market ; Product Development Teams ; Concurrent Product Design ; Concurrent Process 1 . INTRODUCTION The concept of Concurrent Engineering was initially pro - posed as a potential means to minimize the product design , development , and delivery ~ PD 3 ! time . Since then , many interpretations of “Concurrent Engineering” ~ CE ! have emerged in literature ~ Carter & Baker , 1992 ; Turino , 1992 ; Parsaei & Sullivan , 1993 ; Zhang & Zhang , 1995 ! . For in - stance , Zhang and Zhang ~ 1995 ! list over 123 papers deal - ing on this subject . Today , CE is much more encompassing . Expectations range from a modest productivity improve - ment ~ Chelsom , 1994 ! to a complete push - button type au - tomation ~ Prasad , 1996 , 1997 ! , depending upon the views expressed . CE is a paralleled approach—replacing the time - consuming linear process of serial engineering and expen - sive prove - outs . CE is intended to encourage the product developers , from the start , to consider the “total job” in - cluding company’s support functions ~ Carter & Baker , 1992 ; Turino , 1992 ! . CE has a major impact on process set up and the way an organization conducts the PD 3 business . As shown by Prasad ~ 1996 ; Fig . 2 . 26 ! , concurrent engineering replaces the tra - ditional sequential “over - the - wall” approach with a simul - taneous design and manufacture approach with parallel , less interdependent processes . It aims at reducing the total ef - fort in bringing the product from its concept to delivery , while meeting the needs of both the consumers and indus - trial customers . The four major phases of product design and develop - ment ~ as shown in Fig . 2 . 26 ; Prasad , 1996 ! have been de - tailed into nine tracks ~ shown in Fig . 1 ! running in parallel . Figure 1 illustrates the different tracks of the development process . These tracks are : mission definition , concept def - inition , engineering and analysis , product design , prototyp - ing , production engineering and planning , production operation and control , manufacturing , and finally support and delivery . The continuous improvement—“support and delivery”—is an ongoing coordination track that runs for the full life cycle . This track provides normal project - management functions , sequencing , cooperation , and gen - eral support to the other tracks . These nine tracks are not unique to any particular product ; individual steps and time overlaps may differ from product to product . 2 . KEY DRIVERS FOR CE Earlier , Prasad ~ 1996 ! chose to divide forces that influence a CE domain into seven agents ~ called here as 7Ts ! : tal - Reprint requests to : Biren Prasad , Unigraphics Solutions , Knowledge - based Engineering ~ KBE ! PBUs , CERA Institute , P . O . Box 250254 , West Bloomfield , MI 48325 - 0254 , USA . E - mail : ^ prasadb @ ugsolutions . com & Artificial Intelligence for Engineering Design , Analysis and Manufacturing ~ 1999 ! , 13 , 185 – 204 . Printed in the USA . Copyright © 1999 Cambridge University Press 0890 - 0604 0 99 $ 12 . 50 185 ents , tasks , teams , techniques , technology , time and tools . One of the primary team issues is the decomposition of tasks . Another team issue is its composition . Teams are of - ten used to cooperatively solve the problem . Technology issues arise from increased needs for higher operational efficiency and effectiveness . Examples of popular technol - ogies in CE are soft prototyping , visualization , product data management , design for X - ability , multimedia , electronic data interchange ~ EDI ! , etc . Tools mean software , hard - ware , and networks that make CE practical in today’s world of multinational corporations , multipartner projects , and vir - tual corporations . From the time point of view , CE is an initiative of the product - development community that has the goal of reducing the length of the product design and manufacturing cycle time by allowing teams of engineers to develop design modules concurrently from their perspec - tives ~ Pennell & Slusarczuk , 1989 ! . Training also plays an important role in CE . A popular word in the business press is re - engineering , meaning , in short , revamp the processes by which one satisfies customers needs . Timing is an important consideration in product design , development and delivery ~ PD 3 ! system . A lot rides on tim - ing of decision making and problem discovery . Approxi - mately 80 % of a product’s life - cycle cost is driven by decisions made in the first twenty percent of the program effort ~ DARPA , 1987 , 1988 ! . Once a PD 3 process is decomposed into a set of tracks , and a track is decomposed into a set of activities , they be - come one full spectrum of steps leading to a product real - ization . The staggering of their ~ steps’ ! start points and overlaps is indicative of partial information sharing . Orders are indicative of their precedence . The amount of overlap between any two consecutive activities is indicative of the degree of dependency that may exist between them ~ Krish - nan , 1993 ! . In general , there will be a greater affinity ~ close relationship and dependence ! between pairs of activities , which are adjacent to each other . The farther away the ac - tivities are positioned from each other , the lesser would be the degree of affinity or the need for information transfer among them . For example , a mission definition track would be more closely related to concept definition track , but would have little bearing with activities such as those belonging to a manufacturing track . Similarly , manufacturing track would be closely related to production operations and control track , Fig . 1 . Showing concurrency during phases of product design and development process . 186 B . Prasad but would be less sensitive to activities belonging to farther tracks such as an engineering and analysis track . If the tracks and activities are completely independent , they all can be aligned along the left margin of the diagram ~ Fig . 1 ! keep - ing the precedence intact . The time - to - market in that case would be dominated by tracks that take the longest time to finish . This is a case of a true “Simultaneity” or a “Simul - taneous Engineering ~ SE ! ” situation . 2 . 1 . Measure of concurrency ( MOC ) or overlap Let us denote the activities in a track , A - set , as a 1 , a 2 , a 3 , . . . , a i 2 1 , a i , a i 1 1 , . . . a n 2 1 , a n , where a i is the i th activity , and A - set is the activity set : A - set [ $ a 1 , a 2 , a 3 , a 4 , . . . , a i , a j , a k , . . . , . . . a n % . ~ 1 ! An activity , a i , itself can be a set of smaller tasks that an activity can be decomposed into . Let us also assume that these activities are arranged concurrently , meaning their start and end times are staggered . If we denote ~ Fig . 2 ! : ts i as the start time , the time when an i th activity , a i , starts ; te i as the end time , the time when an i th activity , a i , ends . ~ 2 ! Then , duration of an i th activity , also called the lead - time , d i , can be expressed as : d i 5 ~ te i 2 ts i ! . ~ 3 ! If we denote c i as the “measure of concurrency” between any two consecutive activities , a i and a i 2 1 the measure of concurrency or overlap can be expressed as follows : c i 5 1 2 ~ ts i 2 ts i 2 1 ! / d i 2 1 , ~ 4 ! where d i 2 1 is the duration of an activity a i 2 1 . Using Eq . ~ 3 ! , d i 2 1 can be expressed as d i 2 1 5 ~ te i 2 1 2 ts i 2 1 ! . ~ 5 ! ~ ts i 2 ts i 2 1 ! is the time - delay in the start of an activity , a i , with respect to its predecessor activity a i 2 1 . The above definitions yield the following characteristics . If the two activities , a i and a i 2 1 , are arranged such that ~ a ! they run sequentially or serially , then ts i 5 te i 2 1 and c i 5 0 ; and ~ 6 ! Fig . 2 . Defining measures for concurrency and overlap . Concurrency and simultaneity in concurrent engineering 187 ~ b ! the two activities completely overlap , then ts i 5 ts i 2 1 and c i 5 1 . ~ 7 ! For a partial overlap , c i may range in between 0 and 1 . Based on the definitions of c i , the cycle - time for designing and developing a product , whose activities , a i through a n , when arranged in parallel , can be expressed as follows : If T i is the clock time of an i th activity . The clock time is the time an i th activity , a i , takes from start ~ t 5 0 ! to its finish . Following this definition , then T 1 , T 2 , T 3 , T 4 , . . . T n , can be expressed as T 1 5 d 1 , T 2 5 $ d 2 1 d 1 * ~ 1 2 c 2 ! % , T 3 5 $ d 3 1 d 1 * ~ 1 2 c 2 ! 1 d 2 * ~ 1 2 c 3 ! % , T k 5 $ d k 1 d 1 * ~ 1 2 c 2 ! 1 d 2 * ~ 1 2 c 3 ! 1 d 3 * ~ 1 2 c 4 ! 1 * * * 1 d k 2 1 * ~ 1 2 c k ! % , ~ 8 ! T n 5 H d n 1 ( i 5 1 i 5 n 2 1 d i * ~ 1 2 c i 1 1 ! J ~ 9 ! The Eqs . ~ 8 – 9 ! provide a basis for computing the total prod - uct development time , T k * . If the activities in the A - set are arranged concurrently . The term “ d i * ~ 1 2 c i 1 1 ! ” repre - sents a time delay , a fraction of the time - duration ~ d i ! when two activities , a i and a i 1 1 , do not overlap with each other . T k * 5 max @ T 1 , T 2 , T 3 , T 4 , T 5 , T 6 , T 7 , T 8 , T 9 , . . . T k , . . . , T n # ~ 10a ! Or T k * 5 max @ T i # ; " i ; i 5 1 , 2 , . . . , k , . . . , n . ~ 10b ! It is clear from the Eqs . ~ 9 ! and ~ 10 ! that the total cycle - time , T k * , depends upon the duration of each activity , d i and its “degree of concurrency or overlap , ” c i . • The shortest cycle time , T kS can be reached when c i 5 1 " i , i 5 1 , 2 , . . . , n . That is , when each and every one of the activities , a 1 through a n is scheduled to start si - multaneously . This means that the starting point of each activity is aligned to the leftmost point as far as possi - ble in Figure 2 . • The longest cycle - time , T kL will occur when c i 5 0 " i , i 5 1 , 2 , . . . , k , . . . , n . Meaning , when each and every one of the activities , a 1 through a n , run serially . The idea of “ best concurrency and simultaneity ” is to align each activity step to the farthest left of the diagram ~ Fig . 1 ! satisfying the following 3 M s : ~ a ! M aintain the precedence of the activities in the A - set that were decomposed , that is , t si 1 1 ‡ t si for " i , i 5 1 , 2 , . . . , n 2 1 . ~ 11 ! ~ b ! M aximize the horizontal overlap between the con - secutive activities , a i and a i 1 1 , that is , maximize ~ d i * c i 1 1 ! for " i , i 5 1 , 2 , . . . , n 2 1 . ~ 12 ! ~ c ! M aximize the independence of the decomposed ac - tivities , a i and a i 1 1 in the A - set , meaning , a i ø a i 1 1 ’ 0 . for " i ; i 5 1 , n 2 1 , ~ 13 ! where ø denotes an intersection of the adjacent activities in questions in the A - set . This is based on the understanding that an activity , a i , itself can be a set of smaller tasks that an activity can be decomposed into ~ Prasad , 1996 ! . In many practical situations , depending upon the level of decompo - sitions used , it is possible to create a set of activities , which are not dependent on the rest . The three terms ts i , d i , and c i 1 1 are defined earlier in Eqs . ~ 2 ! through ~ 4 ! . This paper describes a set of seven fundamental princi - ples for achieving this “best concurrency and simultane - ity . ” An automobile - product - development process example is introduced first in the next section to introduce the basic nomenclatures and terminology . The same terms are used in the remainder of the paper to illustrate the abstract nature of these fundamental principles . The seven principles help the teams define : ~ a ! how to decompose the activities in the A - set and then ~ b ! how to arrange these decomposed activities in the A - set so that “best concurrency and simultaneity” can be achieved . The concurrent approach is gaining worldwide attention at the moment . The paralleling of life - cycle activities is being deemed necessary by more and more industries to adapt quickly to changing market conditions and to achieve shrink - ingtime - to - markettargets . Section3describesanautomobile - manufacturing - process example , and Section 4 extracts a number of key principles from this example to maximize c i , minimize d i , and minimize T k * . 3 . AN AUTOMOBILE MANUFACTURING PROCESS EXAMPLE Most automotive companies introduce a new car model ev - ery2to3yearsatacostofabilliondollarspervehicle ~ Prasad , 1996 ! . Thenew - car - developmentprogramintheUnitedStates now ranges in between 3 to 4 years , whereas in Japan it takes less than 3 years ~ Tsuda , 1995 ! . Development is generally the responsibility of the operating platform groups , with the new product sold by one or more of their marketing units . The ma - jor elements of an automobile are : 188 B . Prasad • Outside Body : It includes major designs for outside body parts , structures , such as roof , moveable roof , body glass , quarter panel , fender , A - pillar , B - pillar , C - pillar , decklid , trunk , Apron , shot - gun , vehicle tools , paints , etc . They are often designed by a staff group . • Styling is done by a central design staff with support from components’ divisions and outside suppliers . They come up with the design of the outside contour , “look and feel , ” mostly from aesthetic considerations . • Detail design of the parts and body panels are done by the CAD 0 CAM shop contractors . • Analysis is proposed by the engineers but often per - formed by the analysts on contracts . • Tooling and dies are handled by process engineers in - ternally and by outside prototype shops . The following systems are designed by a prototype shop , one or more of the components’ groups , or first - and second - tier suppliers ~ Prasad , 1996 ! : • Interior Systems : instrument panels , air bag , steering wheel , door trims , door modules , and related hard - ware , latching , window regulators , power closures , power sliding door , seat systems—seat trim , adjusters , recliners , frames , head rest , arm support , etc . • Vehicle Wiring Systems : ignition wiring , fiber - optic data transmission , fiber - optic lighting distribution , electrical 0 electronics connection , multiplex , wire harness , inte - gration of electrical electronics into modular structures , temperature sensors , electronic modules , and switches . • Brake Systems : antilock brake , traction control , intel - ligent brake control , power brake assemblies , electric brake , disc and drum , corner assemblies , wheel spin - dle bearings , knuckles , calipers , and rotors , etc . • Suspension Systems : suspension assemblies , con - trolled suspension , structural composites , integrated chassis , module suspension , powertrain mounts , etc . • Climate Control Systems : heating , ventilation and air conditioning , condensers , compressors , accumulator de - hydrators , evaporators , heater cores , etc . • Engine 0 Transmission Cooling Systems : radiators , oil coolers , engine cooling module , etc . • Engine Management Systems : air fuel , ignition , fuel handling and evaporative emissions , electronic control modules and algorithms , exhaust system , valve train , etc . • Energy Management System : power generation and storage , batteries , generators , sensors , and solenoids , electric vehicle , etc . • Lighting Systems : forward lighting , signal lighting , cen - ter high mounted stop lamps , distributed lighting , high intensity discharge lamps , etc . • Vehicle Control Systems : advanced steering , power steering , pumps , gears and hoses , variable effort steer - ing , standard and adjustable steering columns , inter - mediate steering shafts , etc . • Driveline Systems : axles , front and rear , propshaft , half - shaft assemblies , constant velocity joints , intermediate drive shafts , boot seals , etc . • Engine : structural , crankdrain , valve train , cam drive , accessory drive , lubrication system , cooling system , air intake , PCV , combustion , exhaust , sealing and fasten - ing assembly , etc . • Transmission Systems : transmission ~ auto and manu - al ! , torque converter , case and cast components , gears and shafts , mechanical components ~ clutches , free wheelers , chain drive ! , cooling and lubrication , sealing and fastening , dress components , transfer case , etc . • Powertrain controls and diagnostics : diagnostics , elec - trical , electronics , software , driver display , driver con - trols , sensors , actuators , and other misc . systems . • Others : Entire program is supported by thousands of second and third tier suppliers that provide interior parts , bolt - in - parts , and hundreds of other components and materials . An operating group or platform normally is responsible for a particular line of automobiles , small or sporty cars , for example . A corporation generally has engineering facilities in multiple cities and has assembly plants in multiple coun - tries , ~ such as United States , Canada , and Mexico ! . Many of its plants are spread throughout the United States ~ e . g . , the Midwest and South ! . Operations within an operating group are supported by an extensive vendor network or a supply chain . During this 3 - year cycle of a new vehicle or product development process , an operating group or a platform must also build other car lines . This means , in the current year 199 X – 199 X 1 1 ~ say X 5 7 ! , manufacturing engineers would be building 199 X 1 1 ~ 1998 ! model cars . While pro - cess engineers will work on 199 X 1 2 ~ 1999 ! models , and product engineers concern themselves with 199 X 1 3 ~ 2000 if X 5 7 ! product lines . Other groups within the company must support these four groups : design groups , process group , manufacturing group , and the operating group . For instance , design - support groups may seek a balance among piece cost , manufacturing , assembly , fuel consumption ~ mileage ! , emission and safety regulations . The planning group may balance investments with budgets . Marketing groups may seek competitive concerns , such as styling , ve - hicle content , quality , and numerous other issues . These groups are often matrixed to each other to address these concerns . Because many of these groups are indepen - dent of each other , no one manager is likely to own the right or control the total program . Funding and control of re - sources are usually decided through committees . Each group , thus , ends up suboptimizing their own portions of the de - sign with lack of overall coordination between the groups . The problem is typical of a situation where groups have too much independence , but not enough coordination . Systems Concurrency and simultaneity in concurrent engineering 189 Engineering and QFD models are often used to simplify the problem in such cases ~ Tsuda , 1995 ! . 3 . 1 . How product complexity is handled today Complexity of the products and of the processes present in the system ~ e . g . , an automobile ! , often compels a product manufacturer to look for their products and processes break - down structures . This breakdown structure is necessary to exploit any inherent concurrency , so that the individual ac - tivities can be overlapped and thus run in parallel . Physical - based decomposition is one way to achieve this parallelism , as shown in Figure 3 . Perspectives represent the first level of physical - based description ~ PhD ! . PhD is also com - monly referred to as “ Product Holistic Decomposition ” or PhD in short ~ Prasad , 1996 ! . Other possible levels of PhD ~ into which product can be decomposed to exploit concur - rency ! are : hierarchy , multiplicity , alternatives , characteris - tics , and projects ~ see Fig . 3 ! . Please note “decomposition” is not intended here to mean clustering the problem param - eters in different ways . A typical case of this type occurs when a problem is decomposed simultaneously into a num - Fig . 3 . Areas of concurrency during product synthesis ~ bottom - up representation ! . 190 B . Prasad ber of ways ~ such as program phase , subsystem , and disci - pline ! . The term “ decomposition ” is used here to mean “ product holistic decomposition ( PhD ) . ” Parameters are not fragmented into separate decomposed sets . All parameters belonging to a particular class or a part family stay together ~ after decomposition ! and collectively influence the decision - making process . PhD A - tree [ @ $ A - perspectives % , $ A - hierarchy % , $ A - multiplicity % , $ A - alternatives % , $ A - characteristics % , $ A - projects % # , ~ 14 ! where the curly bracket , $ x % , denotes the activity - set of quan - tities of type x and is governed by Eq . ~ 1 ! . An activity tree ~ short form is A - tree ! is comprised of several activity sets . The following are examples of some typical decomposition scenarios of a PhD A - tree ~ Prasad , 1996 ! : A . Perspective : A design problem usually involves mul - tiple perspectives . Each may have its own set of con - straints and could interact with each other . At the highest level , different work groups can work in par - allel on separate competing perspectives of product life - cycle concerns . Such concerns are often required for product evaluation or assessment . These perspec - tives include the intellectual process of commonality or class hierarchy between different families of prod - ucts , such as : • Size - wise ~ large , medium , or small ! • Model - wise ~ sporty , coupe , or luxury ! • Engine - wise ~ 4 - cylinders , 6 - cylinders , 8 - cylinders , etc . ! P size - wise [ $ extra - large , large , medium , small , . . . % P model - wise [ $ luxury , sporty , coupe , . . . % P engine - wise [ $ 4 - cylinder , 6 - cylinder , 8 - cylinder , . . . % , ~ 15 ! where , the letter P denotes the perspective . A class - hierarchy can be based on the • usage @ passenger car , commercial vehicles ~ jeep 0 trucks ! and bus # . One commonly used perspective used during organization and management of infor - mation is by a combination of size , usage , and mar - keting perspectives . This for automotive industry has transpired into a triad , spanned by three axes , as shown in Figure 4 . • The vertical axis shows the division by platform types . The common platform types for automo - biles are small car , mini - van , large car , Jeep 0 Truck . The subclasses of Jeep 0 trucks can be jeep , pick - up , vans , tractor - trailer , multi - purpose ve - Fig . 4 . A three - dimensional concurrent triad ~ automobile manufacturing example ! . Concurrency and simultaneity in concurrent engineering 191 hicles , etc . Powertrain ~ Engines & Transmissions ! is also categorized as a type of a platform , since it cuts across all major car lines . • The horizontal axis lists the division by program types , such as P90 , W , or C car programs . There is usually a Product Development Team ~ PDT ! re - sponsible for each car program . They are generi - cally named here as PDT A , PDT B , PDT C , PDT D , . . . , X , etc . • Concurrent to each program there usually is a third dimension , nowcommonlycalledcenters . Thesecen - ters perform concurrent tasks or activities such as marketing , design office , engineering , finance , pro - curement & supply , manufacturing , service & parts , and product support . They are either dedicated ser - vices to a program or are matrix across several pro - grams : such as PDT A , PDT B , PDT C , etc . Defining a product breakdown structure ~ PtBS ! tree to perspectives attaches additional meaning and or - der to the complex product design process ~ Tsuda , 1995 ! . A passenger automobile’s basic product struc - ture ~ e . g . , four wheels , 4 – 8 cylinders , reciprocating gasoline engine in front , round steering wheel , 2 – 4 doors , 1 – 2 rows of seats , interior instrument panel , trims , etc . ! has not changed much in three decades . Many new models have been introduced , inheriting the basic concept of the automobile . B . Hierarchy : The physical product or the “product sys - tem” may be divided into several logical hierarchical blocks or classes depending upon its complexity . The advantage of this logical division is that different peo - ple can work in parallel in these different hierarchical blocks . The associated teaming between groups of peo - ple in a large manufacturing organization is discussed in Section 4 . If separate teams are assigned to each class and subclass , they can work concurrently . PtBS example for an automobile class is shown in Figure 5 . PtBS A - tree [ @ $ System % , $ Subsystems % , $ Components % , $ Parts % , $ Materials % , $ Characteristics % # . ~ 16 ! The PtBS activity - tree can be superimposed on work groups involved in the system design , with support - ing subteams dealing with subsystems design , and an - other set of subteams handling the remainders , such as components , parts’ design , materials , form fea - tures , etc . A nested routing work - flow model can be drawn starting from the bottom and showing the ac - tivities of each of the PtBS’s trees leading up to the system - flow model as information builds up . Some dependencies can exist between the branches . An important job of the CE work groups is to rec - ognize and manage interdependency between the PtBS nodes . Establishing common interface standards for communications and dictionary definitions ~ stan - dard ! of problem parameters and checkpoints can al - low parallel groups to work concurrently . Checkpoints are essential to ensure the smooth cou - pling of completed activities . This is accomplished by staggering the product breakdown structure ~ PtBS ! tree as shown in Figure 3 . For example , the system level activities can only begin when activities for sub - system track are already well underway . The subsys - tem level activities can begin only when tasks for component track are well underway and so on . PtBS organizes a product hierarchy by using a step - wise refinement and differentiation technique . Step - wise refinement adds hierarchy to the structure and differentiation adds details at a particular level . Prod - uct or process features , materials , attributes , and pa - rameters provide the lowest level of hierarchical abstraction . The amount of granularity present at each level is usually a function of the product and process complexity and their knowledge , such as knowledge of objects , functions , design cases and needs . Object knowledge for product ~ i . e . , topology , geometry , etc . ! provides attributes , structures , assembly , and their re - lationships . Functional knowledge produces evidence for hierarchical decomposition ~ systems , subsys - tems , components , parts , . . . , etc . ! . Design cases or case histories provide additional evidence of break - ing the hierarchy into alternatives , characteristics , etc . During the differentiation technique , different char - acteristics and alternatives can be assigned to a PtBS tree , as shown in Figure 5 . The PtBS tree drives the product or the process design to a manageable set of units and nodes that can be independently worked upon by the work groups or the concurrent subteams . Figure 5 shows how a hierarchy of system decom - position would look if we started with system assem - bly of an automobile and worked our way down from this top level . Each decomposed element combines with other decomposed elements of about the same level to make up the next larger level . Strategy ~ what services to render and to whom ! and processes ~ how to convert inputs to outputs and how to deliver out - puts to the customer ! practically determine expected quality level , productivity , costs , and profitability . C . Multiplicity : Within each different hierarchical group , for example , a part or a component group , multiple parts or components going into the final product may be worked upon simultaneously . $ Parts % of a PtBS A - set [ $ part _ 1 , part _ 2 , part _ 3 , . . . . , part _ n % . ~ 17 ! 192 B . Prasad Similarly , the teams in the work groups may work con - currently on a multiplicity of models used to repre - sent a multidimensional enrichment of a part . For example , the geometry of parts may be modeled , first in the early design stages using sketches , then by means of a solid model using CAD 0 CAM tool , and later by an orthographic projection drawing . As such , a decomposed element of a PtBS tree can be a quan - tified set . D . Alternatives : Within one hierarchy level , a group of designers guided by its hierarchy leader may work on several alternative ideas in parallel . E . Characteristics or Aspects : Each alternative idea may involve integrating some life - cycle aspects , that is , val - idating its output through compliance from multiple characteristic views . Where , each characteristic view may represent a different life - cycle aspect such as aero - dynamics , noise , ride quality ; NVH ~ noise , vibration , and harness ! , strength , stiffness , energy management , packaging , etc . Each life - cycle concern may further be looked upon from different view points : from a well - defined view points ~ e . g . , rigid body dynamics ! , to an ill - or vaguely defined viewpoints ~ e . g . , manufactur - ability ! . Subteams from different disciplines and back - ground may be needed to support these aspects or viewpoints . These subteams can work in parallel on each characteristic view . F . Projects : Multiple projects , such as predictive analy - ses , fault - tree analysis ~ FTA ! , QFD ~ Tsuda , 1995 ! , DFMA 0 FMEA analyses , may be required to evaluate product compliance to functional specifications . Many Fig . 5 . Areas of concurrency in an automotive top - down decomposition—An example . Concurrency and simultaneity in concurrent engineering 193 analysis subteams may be working in parallel to de - termine the integrity of the design with respect to these specifications . Additional details , increased accuracy , and other aspects of alternative designs may be con - sidered as typical examples for projects . The next section describes a set of enabling principles of con - currency and simultaneity . The information is extracted from this automobile case history and presented in a generic form to be applicable across many other product families . 4 . BEST CONCURRENCY AND SIMULTANEITY Concurrency and simultaneity are the major force of Con - current Engineering . There are seven enabling principles to achieve the best concurrency and simultaneity in Concur - rent Engineering : 4 . 1 . Principle 1 : Parallel work group Parallel work group is one of the well - known and widely used methods of achieving concurrency . There are many con - cepts of such parallel work groups have been described in the literature ~ DARPA , 1988 ; Prasad , 1996 , 1997 ! . Paral - leling describes a “time overlap” of one or more activities in the A - set , tasks , etc . CE is structured around multifunc - tional teams that bring specialized knowledge necessary for the program . 4 . 1 . 1 . Multidisciplinary team The multidisciplinary setup , called product development team ~ PDT ! , is composed of several distinct technical sub - units specializing in a variety of disciplines : • Product Planners ~ T pp ! , • Product concept engineers ~ T ce ! , • Engineers and analysts ~ T ea ! , • Product designers ~ T pd ! , • Prototype engineers ~ T pe ! , • Production engineering planners ~ T ep ! , • Management & control ~ T mc ! , • Computer integrated manufacturing ~ CIM ! and Assem - blers ~ T ma ! , • Delivery & support ~ T ds ! teams : PDT - set [ @ $ T pp % , $ T ce % , $ T ea % , $ T pd % , $ T pe % , $ T ep % , $ T mc % , $ T ma % , and $ T ds % # ~ 18 ! where , the square bracket signifies union - of sets contained within the curly brackets , and T stands for “talents . ” In the above , nine concurrent sets of teams are intentionally cho - sen to show the actual correspondence with each of the nine concurrenttracksofFigure1 . Eachtrackisresponsibleforde - veloping and integrating its own aspect to the product’s life - cycle as the program requires . However , there could be as many activities per track ~ referred here as A - set ! and teams ~ referred here as PDT - set ! as needs arise . For example , ex - perts from the volume production area must be involved in prototype production to identify as early as possible oppor - tunities to improve process reliability . By using this multi - functionalteamapproachtomergedesignandmanufacturing , GE Aircraft engine division reduced design and fabrication lead time for some GE engine components from 22 to 3 weeks ~ Machine Design , 1993 ! . A product design and development process is not a concurrent - engineering process unless it involves all par - ties that are responsible for its making , regardless of to whom they administratively report . Subcontracting compa - nies must be included as participants in the CE teams , at least until the interface design requirements have been de - termined , evaluated , and are firmed up . The distributors or retailers often tell the product manufacturers exactly what the consumer wants . The product manufacturers then are able to communicate upstream to the suppliers what parts or materials they would require to manufacture the prod - uct . For the organization to function as a unit and product to compete globally , all participants have to know what is expected from each other and in what time frame . Correct communication links have to be in place . This will ensure a complete integration of the OEM’s product needs with supply chain capabilities . With such integration , the sub - contractors can influence requirements before it is too late . Requirements can be stated in joint terms that the subcon - tractors can effectively satisfy , and that they are reason - ably stable and unlikely to undergo any significant change . 4 . 1 . 2 . Inclusion of outside trade partners An effective inclusion of outside ~ trade ! partners in co - operative development is frequently one of the underempha - sized issues related to the implementation of a CE process . In today’s environment , because of the growth in the com - plexity of consumer products and the increased reliance on specialized technologies and methods to manufacture them , partnership has become an increasingly important issue . Companies often rely on outside partners to supply exper - tise , services , and products in various specialized disci - plines . Many examples exist ~ Womack et al . , 1990 ! . In conjunction with the United States Council for Auto - motive Research ~ USCAR ! , GM , Ford , and Chrysler are working to establish voluntary parts standards on items like light bulbs , car jacks , radiator caps , switches , handles , and other noncompetitive parts to reduce the influx of parts and boost global competitiveness . Taken to its extreme , this will mean the emergence of a concept called “virtual com - pany , ” where the core company has only a limited staff . They are the financiers or planners of ideas of a product . The major work force is comprised of individuals from various other companies that have the appropriate skills to transform these ideas into a useful product . A list of typi - cal participants of a virtual company is shown in Figure 6 . 194 B . Prasad They are mostly contract employees . However , they are responsible for delivering the services or products that they are contracted for on time and at budget . There is a global partnership among the participants : the product manufac - turers ~ stylists , designers , engineers , managers , white - collar workers ! , process planners ~ Manufacturing resource planning—MRP , Computer - aided Process planning— CAPP ! , robots 0 assemblers , machinists ~ blue - collar work - ers ! , parts suppliers ~ vendors , contractors ! or materials suppliers ~ operators , programmers ! , and product support - ers ~ sales and service outlets , distributors , schedulers , de - liverers , retailers ! . Virtual _ Company - set [ @ $ T wc % , $ T pp % , $ T sd % , $ T ra % , $ T bc % , $ T cop % , $ T s v c % # , ~ 19 ! where T wc denotes white - collar , T pp denotes process planners , T sd : schedulers & delivery , T ra : robots assemblers , T bc : blue - collar , T sop : materials suppliers , operators and programmers , T s v c are parts’ suppliers , vendors and contractors , and where the square brackets denote “union - of” the indi - vidual sets . The curly brackets indicate the presence of sets . It will do little good for a company to adopt a CE envi - ronment ~ or to control its product definition process ! with - out including its trade partners , if a major or significant portion of its production is performed by outside suppli - ers . Establishing a partnership can be strategically very important . It can eliminate or minimize the needs for in - house inspection . By establishing some type of partner - ship , where the certification program is a part of the deal one can ensure the delivery of quality incoming materials . In that case , the cost - benefits of inspecting incoming ma - terials and sorting out defective parts for return to vendors must be weighted against the supplier’s cost of acquiring defect - free parts . Successful partnership requires a harmo - nious communication environment characterized by rapid , accurate and “paperless” business transaction . Other claimed benefits of partnership include greater satisfaction to the customer , simplified recycling , fewer computer entries , smaller inventories , and greater economy of scale . The in - creased use of electronic commerce technologies , such as Electronic Data interchange , or EDI , via Wide Area Net - works , Value Added Networks , and Electronic Vendor Bul - letin Boards are paving the ways of making this partnership painless . They are widely used in the auto industry to ex - change purchase orders , shipping notices and payments , particularly with first - tier supply - chain partners that de - liver directly to OEMs . A first - tier supplier of instrument panel , for example , may be required to deliver product within a few hours of receiving an order , and deliver it in the assembled order needed on the assembly line . This close partnership has directly reduced inventory industry - wide . Fig . 6 . Typical participants in a virtual company . Concurrency and simultaneity in concurrent engineering 195 Figure 7 shows a bi - directional sandwiched structure for an Integrated Product Development ~ IPD ! System . In one direction , IPD - set are supported by the customer on the top , and the infrastructure ~ organization ! at the bottom . In a per - pendicular direction , PDT - set are sandwiched between prod - uct and process on one side , and tools and technology on the other side . IPD - Set [ @ $ Customers % , $ Product % , $ Process % , $ Tools % , $ Technology % , $ Infrastructure % , $ PDT - set % # ~ 20 ! where , square brackets indicate union - of several sets . PDT stands for product development team . An example of a PDT - set is defined earlier in Eq . ~ 18 ! . The curly brackets indicate the presence of several sets given in Eq . ~ 20 ! . The infra - structure involves a wide range of disciplines including multi - functional teams , strategic business units ~ SBUs ! , culture and practices , business process re - engineering , logistics , fi - nance , information technology , education and training , and synchronous manufacturing organization . As shown in Fig - ure 7 , the customers help establish the requirements for IPD including QFD , marketing , strategic 0 tactical business plan - ning ~ Tsuda , 1995 ! . In the IPD - set system , PDT - set inte - grates the customer’s inputs , their product and processes with their own experience in business solutions ~ tools ! , knowl - edge of future directions ~ technology ! , and the organiza - Fig . 7 . A typical product development team ~ PDT ! —An example . 196 B . Prasad tional infrastructure to provide worldwide competitive ad - vantage . The PDT - set , which replaces the traditional func - tional department , are often organized along goal - oriented principles . Experts in the field of mechanical , electrical , in - dustrial , chemical and material engineering , as well as a va - riety of other fields , work together . Removals of barriers to cooperation and resolution of conflicts are responsibilities of the PDT manager ~ Deming , 1993 ! . The demands of today’s ever - changing international mar - ketplace are immense . Goals are moving targets , undergo - ing constant changes and shifting in response to market conditions . The diversity of disciplines in CE is essential to leverage core competency to address the growing complex - ity of today’s product needs and global manufacturing trends . CE requires a new approach to project management . Each team must work closely with other teams to identify and develop techniques that are more cost - effective , innova - tive , and simple to use . 4 . 2 . Principle 2 : Parallel product decomposition Smith and Browne ~ 1993 ! describe decomposition as a fun - damental approach to handling complexity in engineering design . Product decomposition means viewing the product realization process as a part of the whole and then aggre - gating ~ summing ! the decomposed A - sets to recreate or re - construct the whole set ~ IPD - set ! from its parts ~ A - sets ! . In other words , Product Realization ? @ $ Decomposing parts - from - the - whole % ¯ $ Reconstructing the whole - from - the - parts % # . ~ 21 ! The symbol ? signifies that product realization is logically “ composed or made out of ” two essential sets contained in the square brackets and shown in Eq . ~ 21 ! . The term “whole” also includes multiple characteristics of life - cycle concerns ~ e . g . , X - ability ! . Although not all life - cycle activities are in - dependent , many sets can be decomposed safely . For exam - ple , it is not necessary to delay the start of an activity if the information required for that activity is not dependent on the rest . Due to an increased global pressure to bring a product into the marketplace early , parallel processing in CE is be - coming a necessity . There are , however , many ways a prod - uct , process or work information can be decomposed and overlaid in parallel ~ Kusiak & Wang , 1993 ! . If a product , pro - cess , or a work information activity does not affect other pa - rameters or processes , it can be performed locally . If it does , it can be performed in a distributed fashion . Local or distrib - uted processing , to a large extent , depends on how a product structureisoriginallybrokenupordecomposed ~ D’Ambrosio et al . , 1996 ! . Do the decomposed parts exhibit independent or semi - independent characteristics ? Decomposition allows the scheduling of activities to proceed in parallel . Thetwo ~ decomposition 1 concurrency ! allowsonetoiden - tify activities that can be overlapped or performed simulta - neously . It also allows one to formulate product realization strategies , for example , indexing , alternate decomposition , teaming , or restructuring leading to satisfaction of all inter - mediatelife - cyclerequirementsandconstraintsduringthisre - alization process . Previously , in Eq . ~ 1 ! , an activity set , A - set , was broken up into activities : a i , a j , a k , etc . There are four possible ways such activities can be related to each other ~ Prasad , 1996 ! . They are shown in Figure 8 . This means that A - set in Eq . ~ 1 ! can be split into four subgroups . The corresponding sets for these four subgroups are : ~ a ! dependent activities set , $ A dep % ; ~ b ! semi - independent activities set , $ A sin % ; ~ c ! independent activities set , $ A ind % ; and ~ d ! inter - dependent activities set , $ A int % . Fig . 8 . Possible relationships between pair of activities . Concurrency and simultaneity in concurrent engineering 197 • Dependent Activities : A pair of activities ~ say , a i , a j ! is said to be dependent , if an activity requires informa - tion , which is an output from another activity . The in - formation required could be a complete output transfer or it may represent only a portion of the output . If the transfer of information is complete , they are usually run in a series . This is shown in Figure 8 ~ a ! . • Semi - independent Activities : A pair of dependent ac - tivities ~ say , a i , a j ! is said to be semi - independent if the transfer of output from one activity to the other is only a partial transfer ~ pseudo - parallel ! . The pseudo - parallel structure means that there exist weak inter - actions among groups of activities . In Figure 8 ~ b ! , an activity , a k is said to be dependent upon the activities , a i and a j because partial outputs from both a i and a j are used to complete activity a k . • Independent Activities : A pair of activities ~ say , a i , a j ! is said to be independent if no portion of the output from one activity or the other is required for the com - pletion of both activities . Figure 8 ~ c ! shows a pair of activities , a i and a j that is independent . • InterdependentActivities : Apairofactivities ~ say , a i , a j ! issaidtobeinterdependent , ifatwo - wayinformationex - change is required for the completion of the job . Mean - ing , information from one activity ~ say , a i ! is used to complete the second activity ~ say , a j ! and the informa - tion from the second activity ~ a j ! is used to complete the first activity ~ a i ! . This is shown in Figure 8 ~ d ! . In other words , if the activities in the A - set @ shown in Eq . ~ 1 ! # are reorganized along the above four subgroups , Eq . ~ 1 ! can be expressed in the following way : A - set [ @ $ A dep % , $ A sin % , $ A ind % , $ A int % # . ~ 22 ! The square bracket implies union - of the individual sets , which are contained within the curly brackets of Eq . ~ 22 ! . Paralleling activities and the amounts of overlap depend upon the types of relationship and the degree of depen - dency that exist between them ~ Kusiak & Wang , 1993 ! . The overlap between two intermediate activities or specifications 0 outputs represents the time elapse to build the information required for the start of the subsequent activities . Coordi - nating activities that exhibit dependent $ A dep % or indepen - dent characteristics $ A ind % are quite straightforward . The dependent activities , belonging to the set $ A dep % , are ar - ranged in series and independent activities , belonging to the set $ A ind % , are stacked in parallel . For the work groups , how - ever , the challenges of CE are extremely difficult when many activities are interdependent , those that belong to the set $ A int % . Meaning they are coupled and cannot be separated explicitly either in a series or in a parallel mode . As dis - cussed earlier , interdependent ~ or coupled ! activities take more design time and many iterations ~ of information trans - fer back and forth ! before they finally converge . CE strives for simultaneity and immediacy . In practice , however , mutually independent group of activities seldom exist . Strategically , decomposing the interdependent activ - ities , which belong to the set $ A int % , into a series of depen - dent : $ A dep % , semi - independent : $ A sin % , and independent activities : $ A ind % , can reduce the size of the working groups and the number of iterations required to obtain a reasonable solution . 4 . 3 . Principle 3 : Concurrent resource scheduling Facilitating the transfer of work information among work groups is an essential organizational responsibility of any company . Concurrent resource scheduling involves sched - uling the distributed activities , A - set , so that they can be performed in parallel . Paralleling is simple for activities exhibiting independent or semi - independent characteris - tics : $ A ind % , $ A sin % . However , it is not so simple for depen - dent activities set , $ A dep % . There are many cases when activities are dependent ~ not yet coupled ! , but need to be scheduled in parallel with other activities . A simple case is that of an overlap . Even though an activity is dependent on another , there is no need for one to wait until the other task ends . If an activity precedes and generates the needed information for a later activity , the next task can start as soon as the needed information is made available . There is no need to wait for the completion of the former task . If the two activities are independent , they can be scheduled in any order necessary . The other options that address these issues more precisely are : optimal scheduling ~ minimizing time , resource , cost , etc . ! , backward scheduling ~ meeting target time ! , and team - based project management . San - born Manufacturing Company employed a backward sched - uling to set up major milestones consisting of hard and fast dates and worked back from those dates as a planning mechanism ~ Machine Design , 1993 ! . If the set of activities in the A - set are independent , that is the activities belong solely to the $ A ind % set , a pair of activ - ities ~ say a i , a j ! can start immediately , meaning t si a t sj . ~ 23 ! The symbol a means starting time is coincident with re - spect to initial timing . The term ‘ ts ’ in Eq . ~ 23 ! denotes a time of start for an activity ‘ a ’ , where A - set was defined in Eq . ~ 1 ! , A - set [ $ a 1 , a 2 , a 3 , a 4 , . . . , a i , a j , a k , . . . , . . . a n % . Frequently , the “product and process” are radically re - designed to achieve parallelism . Paralleling of activities pro - vides management team with opportunities to reorganize and control the resources applied during CE . These resources fall into three main categories : • teams ~ e . g . , people , machines , facilities , outside firms ! ; • tasks ~ activities or projects they work on , knowledge of the projects , information they need to work with ! ; and • time . 198 B . Prasad The trio provides a basis for defining a work breakdown structure ~ WBS ! . A WBS is really a series of interrelated work tasks initially set in motion by the planning track . New tasks are added or created by the subsequent tracks when put into motion . The latest series of tasks are mostly due to support and delivery track . These tasks are over only when that product is finally disposed at the end of its useful life . A good WBS contains all three elements : paralleling of tasks , paralleling of teams ( work groups ) , and optimal time schedules . A good WBS uses tasks’ decomposition knowl - edge that designers commonly use as much as possible . It contains knowledge that aggregates the existing evidence for concurrent work scheduling . Techniques such as opti - mal resource planning , cost accounting , level balancing , OPT , and other load management approaches are considered in - tegral to WBS in achieving concurrent resource scheduling . The types of WBS required within an organization dictate how 7Ts should be developed and used . Figure 9 also shows how CE activities and work groups should be organized into loops , linked ~ digitally connected ! together by a product breakdown structure ~ PtBS ! and 0 or process breakdown struc - ture ~ PsBS ! hierarchy . The product decomposition details have been integrated into such loops . Concurrent resource scheduling is shown in Figure 9 as a central block , where arrows to and from the nested loops or decision blocks ei - ther emanate or terminate . The outer loop starts with the multiple perspectives of design and the innermost loop ends with multiple analyses ~ or projects ! . There is a series of nested loops to prune the elements or the information en - velope required to build a total product or process model . 4 . 4 . Principle 4 : Concurrent processing Managing time is the fulcrum of concurrent engineering . Some companies rely on milestones . Others use strategic routing and queuing as another way to manage time . Con - current processing means optimal routing and queuing of activities both from the work - group distribution and infor - mation build - up standpoint . This is essential to guide the design of the product and its processes toward a quality end . Concurrent processing is never easy , particularly in indus - trial settings where solvable technical problems are pre - vailed upon by cultural considerations . Resistance to change is quite predominant . This is seen , for example , in the au - tomotive industry , and more generally , in companies where the age profile of the technical staff is high ~ Womack et al . , 1990 ; Prasad , 1996 ! . The three most important concepts associated with concurrent processing are : creation of “variable - driven” product 0 process models , route manage - ment , and queue management . Fig . 9 . Schemata for exploiting concurrency . Concurrency and simultaneity in concurrent engineering 199 In concurrent processing , activities are staggered ~ per - formed simultaneously or overlapped ! rather than carried out sequentially . Keeping track of those complex dependencies that vary with time is a critical task in concurrent processing . Appropriate synchronization efforts between different CE teams have to be made . If the set of activities in A - set is performed simulta - neously ~ complete overlap ! , it implies a pair of activities , a i and a j can start together , that is t s i a t s j . ~ 24 ! If the set of activities in A - set is overlapped ~ partial ! , it im - plies that a pair of activities , a i and a j , start and end times are related as follows , t s i , t s j t e i . t s j , ~ 25 ! where , the symbol a means that the beginning or the start timing of the two activities “coincides . ” 4 . 5 . Principle 5 : Minimize interfaces This entails reducing ~ or minimizing ! all sorts of interfaces during a “product realization process” ~ PRP ! subject to a given set of constraints imposed on the IPD - set @ defined ear - lier in Eq . ~ 20 ! # . This can be expressed symbolically as : Number - of PRP interfaces ] Minimum ~ 26 ! Subject to “IPD - set” @ expressed by Eq . ~ 20 ! # converging to a feasible or compatible set . The symbol , ] , means “drive to . ” The PRP should be re - designed with CE in such a way that the number of interfaces present in a new “redesigned PRP with this CE principle” is driven to a bare minimum . These interfaces include the re - lationships between management and design , supplier inter - face , design - development interface , design - manufacturing interface , production interface , etc . Such interfaces depend upon the size of the company , the product and process com - plexity , and decomposition . Shared product design can be fa - cilitated by introducing adequate interface management . The main focus is on identifying various sources of interfaces and determining whether they are actually needed . The goal is to reduce the number of design and manufacturing interfaces to a minimum . “Reducing interfaces” means taking steps to re - design and simplify business systems and processes , search out best practices ~ 3Ps ! , to develop a more competitive work force , andtoexplorenewbusinessmethods . Thisprinciplefos - tersout - of - comfort - zonethinking , reliesonvalue - addedben - efitstoboththecustomerandthebusiness , andfocusesheavily on7Ts ~ talents , tasks , teams , techniques , technology , time , and tools ! . Itrequiresfollowthroughuntilthenewprocessisfirmly entrenched . Unlike organizational restructuring , “minimize interfaces” principle involves alterations in the level of ab - straction to reconfigure the subject PRP system . It may in - volvereconstitutingthisPRPintoanewformortoanewlevelofabstractdescriptions , and a new implementation of an al - tered form of PRP . This saves time , reduces design costs , and gets the needed partners involved early in the process . “Min - imize interfaces” involves at a minimum reducing or elimi - nating three types of interfaces that are commonly found in a PD 3 process : productinterfaces , processinterfaces , andcom - puter interfaces ~ Prasad , 1996 ! . 4 . 5 . 1 . Minimize product interfaces The product design problem is often decomposed into sub - domains , each having its own design variables and constraints . Product - set [ @ $ System % , $ Subsystem % , $ Components % , $ Parts % , $ Features % # . ~ 27 ! Product - set is defined as a union of the sets contained within the square brackets . Equation ~ 27 ! is similar to what was shown for an automobile example in Section 3 , Eq . ~ 16 ! . Here $ Features % represents a combination of $ materials % and $ Characteristics % . These subdomains can be quite indepen - dent of each other except in a limited number of common interfaces . The PtBS tree thus drives the product design to an interface - driven integration technique . The PtBS also serves as the model index structure and helps keep the digital equivalent organized and easier to cross - reference with other indexes . The problems of each subdomain can be solved in parallel and the results brought back to satisfy global needs at a later time . Such a decom - position of design , as represented by the structured PtBS tree , can be achieved in a number of ways . For example , the design problem can be divided into a four - step process as shown in Figure 10 . The first step is to develop a functional system . It yields system characteristics , which is input to the next step to identify and develop subsystems . The sub - systems characteristics are then input to the third step to identify and develop components . Finally , the components’ characteristics are then fed into the fourth step to identify and develop parts ~ see Fig . 10 ! . There are four decision blocks , corresponding to four loops : conceptual design , lay - out design , subassembly design , and an assembly design , which checks whether the corresponding design is satisfac - tory or not . The other aspect of the PtBS tree is the mini - mization of interfaces among these five steps : system , subsystems , components , parts and features . This was illus - trated in Section 3 by an automobile example . Product - interface - set [ @ $ System % ø $ Subsystems % # ł @ $ Subsystems % ø $ Components % # ł @ $ Components % ø $ Parts % # ł @ $ Parts % ø $ Features % # . ~ 28 ! 200 B . Prasad Product - interface - set is defined as a union of the sets con - tained within the square brackets . Where ł means union of the sets in the square brackets . The symbol ø means inter - section of the two sets identified within the curly brackets . If a decomposed element is decoupled ~ or loosely con - nected ! , the tasks of interface definition are simple and straightforward . Tolerances , finish , and fit requirements have little or no impact on conceptual design , assembly , or com - ponents’ functions . Material types , as represented by the structured bill - of - materials , can often be modified without jeopardizing the part , component , or assembly function . The convenience of processing design problems in parallel can lead to a converged design much faster than conventionally possible . However , if decomposed elements of PtBS tree overlap ~ cross areas’ boundaries ! , the interface definitions could be quite complex and intertwined . The major product devel - opment challenge in such cases is to integrate the many ~ de - composed ! subproblem solutions into a well - connected system . Some organizations address this by assigning teams of analysts or conflict resolution engineers to handle the in - teractions between the decomposed subproblems . The trou - ble is that such interactions are rarely known in advance or their implications are not well understood . Interface man - agement is the technique used to minimize interfaces . Man - agement implies preparing the PtBS tree or its content so as to preclude possible interfaces between the decoupled ele - ments . Through this approach , the design at the complete product level supports the next level of design , which sup - ports the next level and so on . The decomposition is con - sistent with their interface requirements . This does not prematurely commit the product to a high cost . 4 . 5 . 2 . Minimize process interfaces Like in product design , the process design problem can also be decomposed into subdomains . These subdomains can be quite independent of each other except a limited number of interfaces . Similar to the product design case , problems of each process plan domain can be solved in parallel and results brought back to satisfy global needs at a later time . Such a decomposition of a process plan—a process break - down structure ~ PsBS ! is shown in Figure 11 . Here the pro - Fig . 10 . Minimize product interfaces . Concurrency and simultaneity in concurrent engineering 201 cess plan is divided into four stages : product planning , process planning , production planning , and production in - tent ~ manufacturable product or service ! . Process - set [ @ $ product - planning % , $ process - planning % , $ production - planning % , $ production - intent % # , or Process - set [ $ product - planning % ł $ process - planning % ł $ production - planning % ł $ production - intent % . ~ 29 ! Process - set is defined as a union of the sets contained within the square brackets in Eq . ~ 29 ! . The first stage is to identify a functional set of production planning steps . It yields product specifications , which are input for the next stage to identify process planning steps . The resulting process specifications are then input to the third stage to identify production plan - ningsteps . Finally , itsoutputsarethenfedintothefourthstage to obtain a production intent ~ see Fig . 11 ! . There are four decision blocks , corresponding to such four loops : manufacturing design , production design , process de - sign , and product design . Process - interface - set [ @ $ Product - design % ł $ Process - design % ł $ Production - design % ł $ Manufacturing - design % # ~ 30 ! where , Product - design [ @ $ Product - planning % ø $ Process - planning % # ~ 31 ! Process - design [ @ $ Process - planning % ø $ Production - planning % # ~ 32 ! Production - design [ @ $ Production - planning % ø $ Production - intent % # ~ 33 ! Manufacturing - design [ @ $ Production - intent % ø $ Desirable - specifications % # . ~ 34 ! Fig . 11 . Minimize process interfaces . 202 B . Prasad The process - interface - set is defined as the union of the four curly - bracket sets contained within the square brackets . The decision blocks check whether the corresponding plan is sat - isfactory or not . In essence , PsBS is the process by which a company designs and manufactures its products , while PtBS is the means used to describe or capture the inherent com - plexity of a product . 4 . 5 . 3 . Minimize computer interfaces Too many computer interfaces can create problems with the smooth flow of information . Each program has its own data , input , and output format requirements . For these pro - grams to run seamlessly , the inputs and outputs of these pro - grams must work in concert with each other . Manual data entry is error prone . Moreover , there should be a single data source from where all inputs originate , so that if a param - eter is changed , the correct value is passed on to all interface - programs using them . 4 . 6 . Principle 6 : Transparent communication This provides virtual communication between the individ - ual activities that are partitioned ~ decomposed ! , and among the concurrent team members ~ discussed in Principle 1 ! . Transparent communication involves identification and def - inition of mission - critical data . All members of the CE teams need to have the same common understanding of the fre - quently used terms and their meanings . It may require def - inition of “data dictionary and semantics” as a structured approach to resolving conflicts and for consensus building . The elements that contribute to transparent communica - tions are ~ a ! global access ~ b ! Universal Product Code ~ c ! Electronic Data Interchange ~ EDI ! ~ d ! Technical memory ~ Prasad , 1997 ! . 4 . 7 . Principle 7 : Quick processing Quick processing means performing individual activities , a i , or device means to perform activities , a i , @ see Eq . ~ 1 ! # in A - set as fast as possible using productivity tools or design aids . It also amounts to speeding up the preparation time in building up the information content before and after an ex - ecution of an activity . This emphasizes the mandate for short - ening the pre - and postprocessing time and the time it takes for completing the decomposed activities themselves . Quick Processing ? Minimize ~ d i ! for " i ; i 5 1 , n . ~ 35 ! Equation ~ 35 ! symbolically states that “ quick processing ” is logically equivalent to minimizing all elements of d i . Where , n is the number of activities in the A - set @ see Eq . ~ 1 ! # . The term d i is the time duration—defined in Eq . ~ 3 ! . There is a difference between the complexity of the philosophies ~ such as product complexity , process com - plexity , enterprise complexity , or complexity of cognitive behavior ! , and the philosophies of their management . An organization committed to making complex products in the shortest possible time need not require an equally complex management philosophy . Organizations can still handle all that while following a simple management philosophy . This simple management philosophy is the philosophy of de - composition followed by concurrent processing . This is sim - ilar to what used to be at one time the European philosophy of “divide and concur . ” To apply this to a complex prod - uct , a systematic decomposition of the product and pro - cess , including 7Ts @ see Fig . 4 . 1 in Prasad ~ 1996 ! # . Fast processing can be accomplished through high - bandwidth and backbone technology or building flexibility into the process . Management techniques , which are the product of decades of corporate learning , can be captured as knowledge or rules . With high bandwidth and backbone technology , such as object - oriented databases , technical memory , parallel computers , multimedia , X - window , a large amount of information exchange can take place at a very high speed . Using such means , product development rules can be coded into knowledge - based design and manufac - turing software programs ~ Prasad , 1997 ! . Once these knowledge - based programs and technical memories are de - ployed as useful life - cycle aids , they can provide consid - erable competitive advantage to companies in terms of design speed , accuracy , and quality ~ Prasad , 1997 ! . The competitive advantage earned through process manage - ment techniques is not only retained in this case but the methods are also readily available for future use , when mar - ket conditions suddenly change or a competitor develops a superior product . The flexibility inherent in knowledge - based systems can be exploited to overcome any such short - term market fluctuations . 5 . CONCLUDING REMARKS At the heart of any good product design , development , and delivery ~ PD 3 ! process , there lays a set of underlying prin - ciples for satisfying the interests of the customers and the company . The paper described a set of seven principles of concurrency and simultaneity ~ namely parallel work group , parallel product decomposition , concurrent resource sched - uling , parallel processing , minimize interfaces , transparent communication , and quick processing ! . The company fo - cus shows up in applying these seven principles initially to identify concurrent teams and then to organize the activities that can be overlapped or performed simultaneously . The set of these principles provides companies signifi - cant competitive advantages and organizational abilities to manufacture a quality product in less time and cost that a customer would like to buy . CE Principles also help the teams to formulate significant product and process strategies lead - ing to their separation ; for example , indexing , alternate de - composition , teaming , or restructuring . Concurrency and simultaneity in concurrent engineering 203 REFERENCES Carter , D . E . , & Baker , B . S . ~ 1992 ! . Concurrent engineering : The product development environment for the 1990s . Addison - Wesley Publishing Company , Reading , Massachusetts . Chelsom , J . V . ~ 1994 ! . Concurrent engineering case studies : Lessons from Ford Motor Company experience . In Concurrent Engineering : Con - cepts , Implementation and Practice , ~ C . S . Syan and U . Menon , Eds . ! pp . 24 – 48 . Chapman & Hall . D’Ambrosio , J . , Darr , T . , & Birmingham , W . ~ 1996 ! . Hierarchical concur - rent engineering in a multiagent framework . Concurr . Eng . Res . Ap - plications Int . J . 4 ( 1 ) , 47 – 58 . DARPA . ~ 1987 ! . Workshop on Concurrent Design December 1 – 3 , KeyWest , FL . Defence Advanced Research Projects Agency ~ DARPA ! , Wash - ington , DC . DARPA . ~ 1988 ! . WorkshoponConcurrentDesign December2 – 4 , KeyWest , FL . Defence Advanced Research Projects Agency ~ DARPA ! , Wash - ington , DC . Deming , W . E . ~ 1993 ! . The new economics . MIT Center for Advanced En - gineering Study , Cambridge , Massachusetts . Krishnan , V . ~ 1993 ! . Design process improvement : Sequencing and over - lapping activities in product development . DSc Thesis . Massachusetts Institute of Technology , Cambridge , MA . Kusiak A . , & Wang , J . ~ 1993 ! . Decomposition of the design process . J . of Mechanical Design , Trans . ASME 115 ( 4 ) , 687 – 695 . ~ 1993 ! . How to make concurrent engineering work , Part 6—Measuring success from CE . Machine Design 65 ( 23 ) , 77 – 80 . Parsaei , H . R . , & Sullivan , W . G . , Eds . ~ 1993 ! . Concurrent engineering : Con - temporary issues and modern design tools . Chapman & Hall , London . Pennell , J . , & Slusarczuk , M . ~ 1989 ! . An annotated reading list for con - current engineering . Report No . HQ 89 - 034130 . Institute for Defense Analyses , Alexandria , VA . Prasad , B . ~ 1996 ! . Concurrent engineering fundamentals , Volume I : Inte - grated product and process organization . Prentice Hall , New Jersey . Prasad , B . ~ 1997 ! . Concurrent engineering fundamentals , Volume II : In - tegrated product development . Prentice Hall , New Jersey . Smith , G . F . , & Browne , G . J . ~ 1993 ! . Conceptual foundations of design prob - lem solving . IEEE Trans . Sys . Man Cybern . 23 ( 5 ) . Tsuda , Y . ~ 1995 ! . QFD models for concurrent engineering development processes of automobiles . Concurr . Eng . Res . Applications—An Int . J . 3 ( 3 ) , 213 – 220 . Turino , J . L . ~ 1992 ! . Managing concurrent engineering : Buying time to a market : A definitive guide to improved competitiveness in electronics design and manufacturing . Van Nostrand Reinhold , New York . Womack , J . P . , Jones , D . T , & Roos , D . ~ 1990 ! . The machine that changed the world . Macmillan Publishing Co . , New York . Zhang , H . C . , & Zhang , D . ~ 1995 ! . Concurrent engineering : An overview from manufacturing engineering perspectives . Concurr . Eng . Res . Ap - plications Int . J . , 3 ( 3 ) , 221 – 236 . . Biren Prasad is the Director of Knowledge - based Engi - neering ~ KBE ! , Product business Unit at Unigraphics So - lutions Inc . Before Joining Unigraphics , Dr . Prasad was Senior Engineering Consultant at Electronic Data Systems ~ EDS ! at General Motors account , where he was in charge of Automated Concurrent Engineering ~ ACE ! Consulting Group . He has written or co - authored over 100 technical publications , including 80 archival papers and twelve books . His most recent original contribution is a two - volume textbook on “Concurrent Engineering Fundamentals” with Prentice Hall , USA . This has become very popular for teaching CE best practices both in U . S . universities and abroad . His most referred edited text is Modern Manufac - turing : Information Management and Control ( 1994 ) , published by Springer Verlag . In 1989 , he edited a set of three - volume book entitled CAD 0 CAM , Robotics and Fac - tories of the Future , 1989 , Springer - Verlag . He has served as editors for several additional texts , monographs and proceedings . Dr . Prasad earned his Ph . D . from Illinois Institute of Tech - nology , Chicago , a Degree of Engineer from Stanford Uni - versity , California . He received a Master ~ M . S . ! degree from Indian Institute of Technology , Kanpur and a B . S . M . E . De - gree from Bihar College of Engineering , Patna , both from India . While completing studies for his D’Engineer , he worked at Xerox Research Center , and Failure Analysis As - sociates , both at Palo Alto , California . He is an Adjunct Pro - fessor of Mechanical & Aerospace Engineering at West Virginia University . He also teaches at Wayne State Univer - sity , Oakland University and Lawrence Tech University in Michigan . Dr . Prasad has served on numerous committees forASCE , ASME and SAE . He is the Chairman of the SAE’s Computer Readers’ Committee . His professional honors in - clude : Associate Fellow of AIAA , Fellow of ASME , ASCE , SAE , AAAI , and fellow and life member of ISPE . He is listed in International Men of Achievement , International Biographical Center ~ IBC ! , England ~ 1986 ! , Dictionary of International Biography , IBC ~ 1986 ! , Who’s who in Fron - tier Science & Technology ~ 1985 ! , Who’s who in Technol - ogy Today ~ 1985 ! , Who’s who in Aviation & Aerospace ~ 1983 ! , International Directory of Engineering Analysts ~ IDEA ! ~ 1983 ! , Personalities of America ~ 1986 ! . 204 B . Prasad