a r X i v : 2402 . 13739v1 [ c s . S E ] 21 F e b 2024 Hidden Gems in the Rough : Computational Notebooks as an Uncharted Oasis for IDEs Sergey Titov sergey . titov @ jetbrains . com JetBrains Research Paphos , Cyprus Konstantin Grotov konstantin . grotov @ jetbrains . com JetBrains Research Munich , Germany Ashwin Prasad S . Venkatesh ashwin . prasad @ upb . de Paderborn University Paderborn , Germany ABSTRACT In this paper , we outline potential ways for the further develop - ment of computational notebooks in Integrated Development En - vironments ( IDEs ) . We discuss notebooks integration with IDEs , focusing on three main areas : facilitating experimentation , adding collaborativefeatures , and improving codecomprehension . We pro - pose thatbettersupportofnotebookswillnot only beneﬁt the note - books , but also enhance IDEs by supporting new development pro - cesses native to notebooks . In conclusion , we suggest that adapting IDEs for more experimentation - oriented notebook processes will prepare them for the future of AI - powered programming . CCS CONCEPTS • Software and its engineering → Development frameworks and environments . ACM Reference Format : Sergey Titov , Konstantin Grotov , and Ashwin Prasad S . Venkatesh . 2024 . Hidden Gems in the Rough : Computational Notebooks as an Uncharted Oasis for IDEs . In Proceedings of ACM Conference ( Conference’17 ) . ACM , New York , NY , USA , 3 pages . https : / / doi . org / 10 . 1145 / nnnnnnn . nnnnnnn 1 COMPUTATIONAL NOTEBOOKS AND IDE In recent years , computational notebooks have become a popular environment for writing code . They yield extensive application in numerous ﬁelds including , but not limited to , data science and an - alytics [ 9 ] , education [ 2 ] , science [ 10 ] , and much more . The most popular computational notebooks platform [ 1 ] is an open - source project Jupyter [ 5 ] . Technically , Jupyter Notebookcan be assumed to be an Integrated Development Environment ( IDE ) because it supports many programming languages , from popular ones like Python or C + + to new ones like Mojo [ 7 ] . It also oﬀers various extensions to help improve the development process , for example , code completion extension or AI - assistant . 1 Moreover , Jupyter notebooksintegrate data visualization toolsand provide an interactive platform , making them highly practical for data analy - sis . 1 https : / / www . tabnine . com / install / jupyternotebook Permission to make digital or hard copies of all or part of this work for personal or classroomuseisgranted without fee provided that copiesarenot made ordistributed for proﬁt or commercial advantage and that copies bear this notice and the full cita - tion on the ﬁrst page . Copyrights for components of this work owned by others than ACMmustbehonored . Abstractingwith credit ispermitted . Tocopy otherwise , orre - publish , topost on serversortoredistributeto lists , requirespriorspeciﬁcpermission and / or a fee . Request permissions from permissions @ acm . org . Conference’17 , July 2017 , Washington , DC , USA © 2024 Association for Computing Machinery . ACM ISBN 978 - x - xxxx - xxxx - x / YY / MM . . . $ 15 . 00 https : / / doi . org / 10 . 1145 / nnnnnnn . nnnnnnn While the Jupyter Notebook is an IDE that can be improved ac - cordingly , there is another direction of computational notebook evolution in the form of online services . Several solutions oﬀer a fresh perspective on enhancing the notebook workﬂow . These are not merely feature additions for coding but signiﬁcantly unique ap - proaches . For the comparison we chose Hex , 2 Datalore , 3 and Deep - Note . 4 All the mentioned services focused on improving collabora - tive aspects of working in notebooks , for example , by adding team chats , version control , and organization spaces . Also , they improve the developer’s workﬂow by adding no - code widgets for working with data , for example , for convenient analysis of the data tables or data visualization purposes . Overall , these features allow users to organize experimental workﬂow within the team faster and spend less time on monotonous work with data . Although all the these solutions oﬀer a convenient cloud - based platformfor experimentation and collaboration , they are all similar to business intelligence systems ( for example Redash 5 or Tableau 6 ) with the additional possibility of code development . As a result , these approaches come with a restricted range of options when choosing the environment — e . g . , users are limited to using speciﬁc versions of Python and have a ﬁnite number of built - in utilities . The online cloud - based approach showed its usefulness in the form of existing products , but it has its limitations . At the same time , we have modern , powerful IDEs , that solve these problems , providing rich customization and a much bigger amount of code features . In modernIDEs like Pycham orVScode , notebooksare supported . However , current integration is focused on enriching notebooks with IDE features like code completion or debugging tools with - out supporting the notebooks - speciﬁc workﬂows . The unique and intertwined nature of development within note - books frequently causes users to face challenges in their workﬂow , thereby disrupting the eﬃciency of their development processes [ 3 , 11 ] . This situation underscores the need for the customizationofin - tegrated tools to address these speciﬁc challenges . Consequently , Jupyter and notebooks , in general , should not be viewed merely as another form of a code editor in an IDE . Instead , they should be seen as a platform for conducting experiments , brainstorming , and exploration . This perspective suggests that notebooks demand tools not only to enhance the code but also to improve the overall development process , with a particular focus on experimentation and exploration . 2 https : / / hex . tech 3 http : / / datalore . jetbrains . com 4 https : / / deepnote . com 5 https : / / redash . io / 6 https : / / www . tableau . com / Conference’17 , July 2017 , Washington , DC , USA Sergey Titov , Konstantin Grotov , and Ashwin Prasad S . Venkatesh We believe that the inclusion of the notebooks in IDE signif - icantly increases the design space for both notebooks and IDEs , providing new possible features for both instruments . 2 EXPLORING NOTEBOOKS IN IDE DESIGN SPACE The integration of the notebooks as a form of interaction within IDEs oﬀers multiple opportunities for novel features that can rec - tify some of the inherent problems faced by web - based notebooks while simultaneously creating new and valuable functionalities for IDE users . This work concentrates on three key areas : enhancing the ease of experimentation , oﬀering collaborative features , and bolstering the comprehensibility of notebooks . Facilitation of experimentation . Notebooks are convenient tools for brainstorming and experimentation [ 12 ] . A potential solu - tion to enhance the experience could be streamlining the initiation of the experimentation process . While Jupyter requires launching a server before starting work , and most IDEs necessitate setting up a project before granting access to the editor itself , we propose that streamlining the commencement of experimentation could signif - icantly improve the user experience . Initiating a notebook should be as straightforward as opening a note or terminal . A potential obstacle to a quicker start - up could be the manage - ment of environments . Rather than creating and conﬁguring vir - tual environments separately , the IDE could oﬀer a default envi - ronment associated with each programming language kernel for the notebook . This default environment would serve as the start - ing point for the user if no speciﬁc environment were chosen be - fore beginning work in the notebook . This approach is commonly practiced in R notebooks , where the user operates with one pri - mary environment and conﬁgures a new one only if necessary . 7 IDEs could take it one step further by providing users with a pre - conﬁgured environment tailored for diﬀerent tasks , such as data analysis or machine learning . Contrary to traditional approaches that add numerous function - alities , we believe in removing excess features and focusing on the essentials . We aim to streamline the notebook experience by minimizing environment setup time , allowing us to conduct ex - periments faster . By simplifying the interface and reducing unnec - essary complexity , we seek to enhance user productivity and ef - ﬁciency within notebooks . Without thinking about setting up the environment and the quality of the code , you can fully concentrate on the task and quickly solve it in a non - linear manner . Collaboration features . The non - linearity of notebooks [ 11 ] and the diﬃculties in their versioning [ 15 ] are signiﬁcant chal - lenges forconvenient collaborationwithin a notebook . Online note - book platforms like Hex and Deepnote facilitate easier collabora - tion by allowing the creation of comment dialogues for selected cells or code elements . While a similar outcome can be achieved in oﬄine notebooks through commentary in Markdown cells or in - line code comments followed by sharing the notebook with com - mentary through a version control system , this approach is far from ideal . This type of commentary often lacks several important features . : 7 https : / / rmarkdown . rstudio . com / lesson - 10 . html • Authorship – while it still can be accessed by looking at who committed each comment , it still is very problematic to de - ﬁne , especially in a remote development setup • Granularity – markdown cells and comments , don’t allow precisely pinpointing the target of the comment . In the note - books , people may discuss speciﬁc parameters or resulting numbers . • Dialog resolution and history – while any text in the note - book could be saved using version control systems , there’s no integrated way oftracking comment edits , resolutions , or mention ofother collaborators . Collaborating and comment - ing in the notebooks should be as easy as in documents . Developing a dedicated ﬁeld in the cell metadata to store com - mentary dialogues and support their visualization in IDEs could solve these problems and enhance notebook communication . The most challenging aspect of this feature is establishing a uniﬁed standard for these dialogues to ensure compatibility across diﬀer - ent computational notebook platforms—this requires collaborative eﬀorts from the entire notebook community . Code Comprehension Enhancements . Recent studies have found that notebooks tend to be longer and more entangled than scripts [ 4 ] , making navigability and comprehension issues partic - ularly critical for notebooks . To address these problems within an IDE , integrating automateddocumentation and structuraltext gen - eration features could be a promising approach , as evidenced by recent results [ 14 ] . Customizing the UI to highlight key code ele - ments can also assist in unraveling complex notebook structures . Utilizing static analysis tools available in IDEs might help with en - tanglement by highlighting cells potentially impacted by recent changes . This can aid in dealing with non - linear execution and identify cells that may become non - reproducible after the updates . Anotherway toenhance comprehensibility isby improving note - book search capabilities . Various studies have proposed methods for classifying notebook cells [ 11 , 14 , 16 ] , which couldbe leveraged to tag cells for faster navigation or group similar cells together , pro - vided it does not disrupt the ﬂow of the notebook . These classiﬁ - cations could oﬀer an additional layer of organization by categori - cally grouping cells within the notebook . 3 CONCLUSION Integrating computational notebooks into IDEs poses new chal - lenges and opportunitiesin IDE design . Whether we see notebooks as standalone environments or as integrated components of exist - ing IDEs like PyCharm or VSCode , they present numerous unique development practices that could beneﬁt from adding new features and tools . This design space could become even more critical with the advent of large language models ( LLMs ) , as recent studies in - dicate that software development is becoming more iterative and experimental with the introduction of LLMs [ 6 , 8 , 13 ] . Focusing on the support of the brainstorming and experimentation process for computational notebooks integrated into IDEs will not only im - prove user experience with notebooks but also help IDE designers prepare for the future of programming . Hidden Gems in the Rough : Computational Notebooks as an Uncharted Oasis for IDEs Conference’17 , July 2017 , Washington , DC , USA REFERENCES [ 1 ] 2022 . Developer Ecosystem Survey . Web Application . https : / / www . jetbrains . com / lp / devecosystem - 2022 / data - science / [ 2 ] Lorena A Barba , Lecia J Barker , Douglas S Blank , Jed Brown , Allen B Downey , TimothyGeorge , LindseyJHeagy , Kyle TMandli , JasonKMoore , DavidLippert , et al . 2019 . Teaching and learning with Jupyter . Recuperado : https : / / jupyter4edu . github . io / jupyter - edu - book ( 2019 ) , 1 – 77 . [ 3 ] Souti Chattopadhyay , Ishita Prasad , Austin Z Henley , Anita Sarma , and Titus Barik . 2020 . What’s wrong with computational notebooks ? Pain points , needs , and design opportunities . In Proceedings of the 2020 CHI conference on human factors in computing systems . 1 – 12 . [ 4 ] Konstantin Grotov , SergeyTitov , VladimirSotnikov , YaroslavGolubev , andTim - ofey Bryksin . 2022 . A large - scale comparison of Python code in Jupyter note - books and scripts . In Proceedings of the 19th International Conference on Mining Software Repositories . 353 – 364 . [ 5 ] Thomas Kluyver , Benjamin Ragan - Kelley , Fernando Pérez , Brian Granger , Matthias Bussonnier , Jonathan Frederic , Kyle Kelley , Jessica Hamrick , Jason Grout , Sylvain Corlay , Paul Ivanov , DamiánAvila , SaﬁaAbdalla , and CarolWill - ing . 2016 . Jupyter Notebooks – a publishing format for reproducible compu - tational workﬂows . In Positioning and Power in Academic Publishing : Players , Agents and Agendas , F . Loizides and B . Schmidt ( Eds . ) . IOS Press , 87 – 90 . [ 6 ] Andrew M McNutt , Chenglong Wang , Robert A Deline , and Steven M Drucker . 2023 . On the design of ai - powered code assistantsfor notebooks . In Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems . 1 – 16 . [ 7 ] Modular . 2023 . Mojo Programming Language . https : / / docs . modular . com / mojo / programming - manual . html . [ 8 ] OpenAI . 2023 . GPT - 4 Technical Report . ArXiv abs / 2303 . 08774 ( 2023 ) . https : / / arxiv . org / abs / 2303 . 08774 [ 9 ] Jeﬀrey M Perkel . 2018 . Why Jupyter is data scientists’ computational notebook of choice . Nature 563 , 7732 ( 2018 ) , 145 – 147 . [ 10 ] Jeﬀrey M Perkel . 2021 . Ten computer codes that transformed science . Nature 589 , 7842 ( 2021 ) , 344 – 349 . [ 11 ] Dhivyabharathi Ramasamy , Cristina Sarasua , Alberto Bacchelli , and Abraham Bernstein . 2023 . Workﬂow analysisof data sciencecode in publicGitHub repos - itories . Empirical Software Engineering 28 , 1 ( 2023 ) , 7 . [ 12 ] Adam Rule , Aurélien Tabard , and James D Hollan . 2018 . Exploration and expla - nation incomputational notebooks . In Proceedings of the2018CHIConference on Human Factors in Computing Systems . 1 – 12 . [ 13 ] Paul van den Broek , Mary Jane White , Panayiota Kendeou , and Sarah Carlson . 2009 . Reading between the lines . Developmental and individual diﬀerences in cognitiveprocessesinreadingcomprehension . In . K . Wagner , C . Schatschneider , & C . Plythian - Sence ( Eds . ) , Beyond decoding : Thebehavioral andbiological foundations of reading comprehension ( 2009 ) , 107 – 123 . [ 14 ] Ashwin Prasad Shivarpatna Venkatesh , Jiawei Wang , Li Li , and Eric Bodden . 2023 . Enhancing Comprehension and Navigation in Jupyter Notebooks with Static Analysis . In 2023 IEEE International Conference on Software Analysis , Evo - lution and Reengineering ( SANER ) . IEEE , 391 – 401 . [ 15 ] April Yi Wang , Anant Mittal , Christopher Brooks , and Steve Oney . 2019 . How datascientistsusecomputationalnotebooksforreal - timecollaboration . Proceed - ings of the ACM on Human - Computer Interaction 3 , CSCW ( 2019 ) , 1 – 30 . [ 16 ] Ge Zhang , Mike A Merrill , Yang Liu , Jeﬀrey Heer , and Tim Althoﬀ . 2022 . Coral : Code representation learning with weakly - supervised transformers for analyz - ing data analysis . EPJ Data Science 11 , 1 ( 2022 ) , 14 .