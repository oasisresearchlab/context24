Nifty Assignments Nick Parlante , Julie Zelenski ( moderators ) Stanford University nick . parlante @ cs . stanford . edu zelenski @ cs . stanford . edu Phil Ventura University of South Florida pventura @ usf . edu Ben Stephenson University of Calgary ben . stephenson @ ucalgary . ca Michael Guerzhoy University of Toronto guerzhoy @ cs . toronto . edu Ali Malik Stanford University malikali @ stanford . edu David Reed Creighton University davereed @ creighton . edu Josh Hug University of California , Berkeley hug @ cs . berkeley . edu CCS Concepts Applied computing ~ Digital libraries and archives Keywords Education ; assignments ; homeworks ; examples ; repository ; library ; nifty ; pedagogy ACM Reference format : N . Parlante , J . Zelenski , P . Ventura , B . Stephenson , M . Guerzhoy , A . Malik , D . Reed , and J . Hug . 2018 . Nifty Assignments . In SIGCSE ’18 : 49th ACM Technical Symposium on Computer Science Education , Feb . 21 – 24 , 2018 , Baltimore , MD , USA . ACM , NY , NY , USA , 6 pages . https : / / doi . org / 10 . 1145 / 3159450 . 3159458 Abstract I suspect that students learn more from our programming assignments than from our much worried - over lectures , with their slide transitions and attempts at live coding in lecture . A great assignment is deliberate about where the student hours go , concentrating the student ' s attention on material that is interesting and useful . The best assignments solve a problem that is topical and entertaining , providing motivation for the whole stack of work . Unfortunately , creating great programming assignments is both time consuming and error prone . The Nifty Assignments special session is all about promoting and sharing the ideas and ready - to - use materials of successful assignments . Each presenter will introduce their assignment , give a quick demo , and describe its niche in the curriculum and its strengths and weaknesses . The presentations ( and the descriptions below ) merely introduce each assignment . A key part of Nifty Assignments is the mundane but vital role of distributing the materials – handouts , data files , starter code – that make each assignment ready to adopt . The Nifty Assignments home page , nifty . stanford . edu , gathers all the assignments and makes them and their support materials freely available . If you have an assignment that works well and would be of interest to the CSE community , please consider applying to present at Nifty Assignments . See nifty . stanford . edu for more information . Hurricane Tracker ( CS0 / CS1 ) – Phil Ventura In hurricane season , news reports frequently show “hurricane track” maps , combining graphics with a map to show the predicted track of a hurricane over time . In this CS0 / CS1 assignment students write code using the Python turtle module to produce hurricane track maps with real data . Students are provided with hurricane data scraped from Weather Underground’s website in a CSV file . The students must write the code to read each row of the data and then extract only the needed data ( latitude , longitude , and wind speed ) from each row . They must then use that data to plot the path of the hurricane along with the encoding the storm’s strength . The assignment is nifty because it is so realistic : parsing data from a real source and producing graphs that everyone recognizes from real life . Random Mondrian Art ( CS1 ) – Ben Stephenson This assignment begins with an algorithm that creates pseudo - random art . The generated art has a Mondrian style , consisting of black lines and rectangular regions that are white , blue , red and yellow . The algorithm is naturally recursive and non - trivial . As a result , it gives students an excellent opportunity to use recursion to solve a larger problem and gain additional hands - on experience with this challenging topic . Once students have implemented the provided algorithm , they are encouraged to modify and add to their programs so that they continue to generate art that is of a Mondrian style ( interpreted loosely ) while simultaneously reflecting the student ' s own artistic style . This open - ended challenge encouraged experimentation , both with programming and students ' sense of artistic style , and resulted in students spending more time practicing writing code . Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for third - party components of this work must be honored . For all other uses , contact the Owner / Author . SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA . © 2018 Copyright is held by the owner / author ( s ) . ACM ISBN 978 - 1 - 4503 - 5103 - 4 / 18 / 02 . DOI : https : / / doi . org / 10 . 1145 / 3159450 . 3170601 Paper Session : Nifty Session SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 912 We used Random Mondrian Art as the first assignment in a third - year programming language paradigms course where students were programming in a functional language ( Haskell ) for the first time . Students were given approximately two weeks to complete the assignment so that they had time to overcome the challenges that they faced when working in an unfamiliar paradigm , and so that they had time to experiment with the artistic aspects of the assignment . We also believe that this assignment would be effective when introducing recursion in a first year course . Pong AI Tournament ( CS1 ) – Michael Guerzhoy In this open - ended assignment , students write an AI engine for Pong from scratch . Students can have their AI engines play against each other , and participate in a class - wide tournament . Students can get started by writing a very simple AI engine that beats an AI that simply follows the y - coordinate of the ball . To design and test a good AI engine , students have to read , understand , and modify the game engine code . We provide an implementation of Pong in Python using PyGame , and the students need only to submit a file with a function that interacts with the implementation . The function simply takes in the coordinates of the ball and the paddles , and returns " up " or " down " . Students need to store the state of the game to compute the velocity of the ball and then use that information . The assignment is accessible to any CS1 student , but leaves room for a lot of exploration and creativity when designing and testing the AI — we have had success engaging both excellent students who had little difficulty in CS1 and students who found CS1 challenging . We make the assignment work as a bonus assignment in a class of 300 students . Student earn bonus marks by beating the baseline AI , and we award more bonus marks for winning top spots in the class - wide tournament for AI engines . Having the best AI engines play against each other in class is always a lot of fun . . WikiRacer ( CS2 ) – Ali Malik Human beings are obsessed with finding patterns . Whether it be in the depths of mathematical study or the playground of hobbies like Chess and Sudoku , it is clear that the human race enjoys engaging with the art and science of discovering trends . One interesting place to look for meaningful structure is the vast collection of articles on Wikipedia . For example , there is a famous observation that repeatedly clicking the first , non - parenthesised / italicised link starting on any Wikipedia page will always get you to the Philosophy page . Trends like this , where a collection of information conceives a web of emerging relationships , can give enormous insight into the structure of human knowledge and understanding . One fun game to play is Wikiraces , where any number of participants race to get to a target Wikipedia page by using links to travel from page to page . Although usually just a fun past time , looking at different Wikipedia ladders can give a lot of interesting insights into the relationship and semantic similarity between different pages . In this assignment , you get to implement a bot that will intelligently find a Wikipedia link ladder between two given pages . In the process you will get practice working with iterators , algorithms , templates , and special containers like a priority queue . Nifty Remixes ( CS2 ) – David Reed Like many teachers , I have made extensive use of Nifty Assignments in my classes . However , adopting a Nifty Assignment is rarely as simple as downloading a document and assigning it . Sometimes the intended student level of the assignment does not match my students or the intended course . Reusability can also be a problem , as solutions to many nifty assignments are freely available . The answer to all of these challenges is remixing - identifying Nifty features from repository assignments and building them into locally designed assignments . Remixing allows the instructor to match the assignment to the desired skills and student level . It also enables the instructor to easily create variants that exercise similar skills , but in different contexts that appear unique to students . For example , Guitar Heroine ( Kevin Wayne , 2012 ) included the nifty idea that a guitar string could be modeled using a queue of numbers , with pitch determined solely by queue length . Building on this idea , I have developed one assignment where students model a player piano that can read and play notes and chords from a file . Similarly , I have created an assignment in which students simulate a hammered dulcimer using their computer keyboard . Another example of remixing is taking the recursive backtracking approach to solving Boggle ( Julie Zelenski , 2002 ) , and applying it to contemporary grid - based games ( Sudoku , Nonogrid , KenKen , Hidato , Futoshiki , 3 - in - a - row ) . Remixing existing assignments greatly reduces the work of the instructor , while still allowing students to solve novel problems ( for which answers are not readily available ) . Bear Maps ( CS2 ) – Josh Hug Bear Maps ( CS2 ) In this assignment , students build the back end of a street mapping application that uses the Open Street Map dataset . This application supports panning , zooming , calculating and display of driving directions , and searching for locations of interest . Appropriate abstractions are provided so that the student feels that they ' ve built all of the intelligence in the system , while hiding a considerable amount of unnecessary front end and middle - tier code that might scare them . The three parts of the assignment can be done independently , allowing the instructor to pick and choose as they please . In the first part of the assignment , students write code that takes as input the coordinates to be displayed ( in latitude and longitude ) as well as the window size of the web browser . They must then return a 2D list of the names of the png files to be displayed . Quadtrees provide a natural solution to this problem , though there are alternate ways of solving it . In the second part of this assignment , students use an XML parser to build a graph of all street intersections . Students then write code that takes as input a start and end point , and must return a list of street intersections that provide the shortest route ( in total road distance ) from the start to the finish . A * is the most natural solution , though slower and simpler algorithms also provide reasonable results ( BFS , DFS ) . In the final part of this assignment , students write code that takes as input a string and which returns the set of all notable locations which prefix match that string ( e . g . " baskin robbins " and " bass pro shop " would both prefix match " bas " ) . The most natural solution is a Trie , though other solutions are possible . Paper Session : Nifty Session SIGCSE’18 , February 21 - 24 , 2018 , Baltimore , MD , USA 913