Listing 1 : Processing script setup . m 1 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 1 : Set up inputs 23 % % % % % % % % % % % % % % % % % % % % % % 4 % Block A : Inputs % 5 % % % % % % % % % % % % % % % % % % % % % % 6 % 7 % User specific and geometry specific inputs . May need to be adpated . 89 % catalogue related inputs : 10 catPath = ' . . / catalogues / c001 ' ; 11 docFilePath = ' . . / catalogues / tomograms . doc ' ; 1213 % particle folders path ( will contain all particle folders ) 14 particleFolderPath = ' . . / particles / ' ; 1516 % geometry related inputs : 17 sep = 120 ; % separation in pixel for oversampling of dipole model surfaces 18 boxSizeFirst = 256 ; % box size for first alignment project 19 boxSizeSecond = 192 ; % box size for second alignment project 20 dTh = 37 ; % distance threshold to eliminate particle dublicates 2122 % computation related inputs : 23 mw = 16 ; % number of matlab workers ( CPU cores ) for averaging 24 gpu = [ 0 : 7 ] ; % GPU id ' s for alignment projects 252627 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 28 % Block B : Parse inputs & generate filenames % 29 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 30 % 31 % Setting up filenames for automatically generated files . This can be left as it is . 3233 % read and parse doc file 34 fileID = fopen ( docFilePath ) ; D = textscan ( fileID , ' % d % s ' ) ; fclose ( fileID ) ; 35 tomoID = D { 1 , 1 } ' ; % get tomogram ID 36 nTomo = length ( D { 1 , 2 } ) ; % get total number of tomograms 3738 % project names 39 pr _ 0 = ' pr _ ts001 _ 0 ' ; % project to generate reference 40 pr _ a = ' pr _ a ' ; % alignment project of averages 41 pr _ EO = { ' pr _ E ' , ' pr _ O ' } ; % even / odd projects 42 pr _ EO _ 2 = { ' pr _ E _ 2 ' , ' pr _ O _ 2 ' } ; % evon / odd projects refinement 4344 % table names 45 tEO _ ccGood _ TableName { 1 } = ' tE _ ccGood . tbl ' ; % cc filtered even for refinement 46 tEO _ ccGood _ TableName { 2 } = ' tO _ ccGood . tbl ' ; % cc filtered odd for refinement 47 tableFileNameEO { 1 } = ' merged _ particlesE . tbl ' ; % merged particles even 48 tableFileNameEO { 2 } = ' merged _ particlesO . tbl ' ; % merged particles odd 49 tableFileName = ' merged _ particles . tbl ' ; % merged particles all 50 51 % star file name for merged particles 52 starFileName = ' merged _ particles . star ' ; 5354 % em maps names 55 template _ name _ 1 = [ ' result _ ' pr _ 0 ' _ recentered . em ' ] ; 56 template _ name _ h = ' axis _ alignment _ template _ h . em ' ; 57 refFilenameEO = { ' referenceE . em ' , ' referenceO . em ' } ; 58 refEven = ' aE _ for _ refinement . em ' ; 59 refOdd = ' aO _ for _ refinement . em ' ; 60 refMask = ' mem _ mask _ merged _ adapted . em ' ; 6162 % create tomogram specific strings ( idx = array index of tomogram and not tomogram ID ) 63 for idx = 1 : nTomo 6465 % stack name 66 stackName { idx } = D { 1 , 2 } { idx , 1 } ( end − 8 : end − 4 ) ; 67 1 68 % particle folders 69 targetFolder _ 1 { idx } = [ particleFolderPath ' pa _ ' stackName { idx } ' _ s256 ' ] ; 70 targetFolder _ 2 { idx } = [ particleFolderPath ' pa _ ' stackName { idx } ' _ s192 _ sb1 ' ] ; 71 targetFolder _ 3 { idx } = [ particleFolderPath ' pa _ ' stackName { idx } ' _ s192 _ sb2 ' ] ; 7273 % project names 74 pr _ 1 { idx } = [ ' pr _ ' stackName { idx } ' _ 1 ' ] ; 75 pr _ 2 { idx } = [ ' pr _ ' stackName { idx } ' _ 2 ' ] ; 7677 end 7879 % folder name for particles of alignment project of averages 80 folderAllaverages = [ particleFolderPath ' pa _ averages _ pr1 ' ] ; 8182 % define which particles will be used to create first reference 83 targetFolder _ 0 = targetFolder _ 1 { 1 } ; Listing 2 : Processing script oversample . m 1 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 2 : Oversampling of VLP hexameric lattice 23 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 4 % Block A : Define dipole models % 5 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 6 % 7 % Manually create dipole models for each VLP through catalogue . 8 % Do this before running this script . 91011 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 12 % Block B : Process dipole models % 13 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 14 % 15 % Create crop points on VLP surface ( oversampling ) . 1617 % read dipole models from catalogue into matlab workspace 18 dcmodels ( catPath , ' tc ' , ' dipoleSet ' , ' gm ' , 1 , ' ws ' , ' o ' ) ; 1920 % loop over tomograms and run model workflow 21 for idx = 1 : nTomo 2223 % read model 24 ds = o . models { idx } ; 2526 c = 1 ; tv = [ ] ; 27 for i = 1 : length ( ds . dipoles ) % loop over models 2829 % vesicle workflow 30 v = dmodels . vesicle ( ) ; % create empty vesicle model 31 v . center = ds . dipoles { i } . center ; % add dipole center to vesicle model 32 v . radius = norm ( ds . dipoles { i } . north . . . 33 − ds . dipoles { i } . center ) ; % add radius 34 v . separation = sep ; % separation of crop points ( in px ) 35 v . crop _ distance _ from _ surface = 0 ; 36 v . updateCrop ( ) ; % update vesicle model 3738 tv { c } = v . grepTable ( ) ; % create crop table from vesicle model 39 tv { c } ( : , 22 ) = i ; % add model number to table 4041 % check consistency 42 if ~ strcmp ( ds . cvolume . file ( end − 8 : end − 4 ) , stackName { idx } ) 43 warning ( ' CAREFUL : Model index and tomogram ID not consistent . ' ) 44 end 4546 tv { c } ( : , 20 ) = tomoID ( idx ) ; % add tomogram number to table 47 c = c + 1 ; 48 end 2 4950 % merge model specific tables to tomogram specific table and visualize 51 tAll = dynamo _ table _ merge ( tv , ' linear _ tags ' , 1 ) ; 52 figure ; dtplot ( tAll , ' pf ' , ' oriented _ positions ' ) ; axis equal 5354 % crop particles 55 dtcrop ( docFilePath , tAll , targetFolder _ 1 { idx } , boxSizeFirst , ' mw ' , mw ) ; 56 finalTable = dread ( [ targetFolder _ 1 { idx } ' / crop . tbl ' ] ) ; 5758 % average particles , save in same particle folder and visualize 59 oa = daverage ( targetFolder _ 1 { idx } , ' t ' , finalTable , ' fc ' , 1 , ' mw ' , mw ) ; 60 dwrite ( oa . average , [ targetFolder _ 1 { idx } ' / template . em ' ] ) ; 61 dview ( oa . average ) 62 end 636465 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 3 : Create initial reference 6667 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 68 % Block A : Alignment project for reference % 69 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 70 % 71 % Generate an initial reference average using one tomogram . 7273 % create first template with randomized azimuth 74 tOri = dread ( [ targetFolder _ 0 ' / crop . tbl ' ] ) ; 75 tRandAz = dynamo _ table _ randomize _ azimuth ( tOri ) ; 76 oa = daverage ( targetFolder _ 0 , ' t ' , tRandAz , ' fc ' , 1 , ' mw ' , mw ) ; 77 dwrite ( oa . average , [ targetFolder _ 0 ' / template _ RandAz . em ' ] ) ; 78 dwrite ( tRandAz , [ targetFolder _ 0 ' / crop _ RandAz . tbl ' ] ) ; 7980 % create alignment project 81 dcp . new ( pr _ 0 , ' d ' , targetFolder _ 0 , ' t ' , [ targetFolder _ 0 ' / crop _ RandAz . tbl ' ] , . . . 82 ' template ' , [ targetFolder _ 0 ' / template _ RandAz . em ' ] , ' masks ' , ' default ' , ' show ' , 0 ) ; 8384 % set alignment parameters for 2 rounds 85 dvput ( pr _ 0 , ' ite ' , [ 3 3 ] ) ; % n iterations 86 dvput ( pr _ 0 , ' dim ' , [ 64 128 ] ) ; % subvolume sidelength ( binning ) 87 dvput ( pr _ 0 , ' low ' , [ 23 23 ] ) ; % lowpass filtere 88 dvput ( pr _ 0 , ' cr ' , [ 60 30 ] ) ; % cone range 89 dvput ( pr _ 0 , ' cs ' , [ 10 5 ] ) ; % cone search step 90 dvput ( pr _ 0 , ' ir ' , [ 90 30 ] ) ; % inplane rotation 91 dvput ( pr _ 0 , ' is ' , [ 10 5 ] ) ; % inplane search step 92 dvput ( pr _ 0 , ' rf ' , [ 5 5 ] ) ; % refinement 93 dvput ( pr _ 0 , ' rff ' , [ 2 2 ] ) ; % refinement factor 94 dvput ( pr _ 0 , ' lim ' , [ 80 20 ] ) ; % shift limit 95 dvput ( pr _ 0 , ' limm ' , [ 1 2 ] ) ; % limit mode 96 dvput ( pr _ 0 , ' sym ' , ' c1 ' ) ; % symmetry 9798 % set computational parameters 99 dvput ( pr _ 0 , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 100 dvput ( pr _ 0 , ' gpus ' , gpu ) ; 101102 % check / unfold / run 103 dvrun ( pr _ 0 , ' check ' , true , ' unfold ' , true ) ; 104105 % prepare resulting average for chimera 106 aPath = ddb ( [ pr _ 0 ' : a ' ] ) ; 107 a = dread ( aPath ) ; 108 dwrite ( dynamo _ bandpass ( a , [ 1 23 ] ) * ( − 1 ) , [ ' result _ ' pr _ 0 ' _ INVERTED . em ' ] ) ; Listing 3 : Processing script locate . m 1 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 2 % Block B : Define particle center % 3 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 4 % 3 5 % Define manually center of particle in chimera ucsf ( for next step ) . 6 % Save coordinate as : reference _ center . cmm 7 % Do this before running this script _ C . m 8910 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 11 % Block C : Center particles and re − average % 12 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 13 % 14 % Center the initial reference . 1516 % prepare coordinates 17 cmmFile = ' reference _ center . cmm ' ; % . cmm file with center coordinate 18 newCenter = dpcomp . chimera . cmm2mat ( cmmFile , 1 , 1 ) ; % read . cmm file 19 newCenter = round ( newCenter ) ; % round the coordinates 20 boxCenter = ( boxSizeFirst / 2 + 1 ) * [ 1 , 1 , 1 ] ; % center of box 2122 % compute vector pointing from box center to new coordinate 23 rSubunitFromCenter = newCenter − boxCenter ; 2425 % get table from project that will be transformed 26 tOriPath = ddb ( [ pr _ 0 ' : rt ' ] ) ; 27 tOri = dread ( tOriPath ) ; 2829 % transform table 30 T = dynamo _ rigid ( ' shifts ' , − rSubunitFromCenter ) ; % create transformation 31 tSub _ 1 = dynamo _ table _ rigid ( tOri , T ) ; % transform table 3233 % re − average , save and visualize 34 % this will be the starting reference for the next projects 35 oa = daverage ( targetFolder _ 0 , ' t ' , tSub _ 1 , ' fc ' , 1 , ' mw ' , mw ) ; 36 dwrite ( oa . average , template _ name _ 1 ) ; 37 dview ( oa . average ) 383940 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 4 : First alignment project 4142 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 43 % Block A : First alignment project % 44 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 45 % 46 % Run an alignment project for each tomogram . 47 % Reference is centered final average from previous project . 4849 for idx = 1 : nTomo 5051 % randomize azimuth of table before using it in project 52 tOri = dread ( [ targetFolder _ 1 { idx } ' / crop . tbl ' ] ) ; 53 tRandAz = dynamo _ table _ randomize _ azimuth ( tOri ) ; 54 dwrite ( tRandAz , [ targetFolder _ 1 { idx } ' / crop _ RandAz . tbl ' ] ) 5556 % define first alignment project 57 dcp . new ( pr _ 1 { idx } , ' d ' , targetFolder _ 1 { idx } , . . . 58 ' t ' , [ targetFolder _ 1 { idx } ' / crop _ RandAz . tbl ' ] , ' template ' , template _ name _ 1 , . . . 59 ' masks ' , ' default ' , ' show ' , 0 ) ; 6061 % set alignment parameters for 2 rounds 62 dvput ( pr _ 1 { idx } , ' ite ' , [ 3 3 ] ) ; 63 dvput ( pr _ 1 { idx } , ' dim ' , [ 64 128 ] ) ; 64 dvput ( pr _ 1 { idx } , ' low ' , [ 23 23 ] ) ; 65 dvput ( pr _ 1 { idx } , ' cr ' , [ 60 30 ] ) ; 66 dvput ( pr _ 1 { idx } , ' cs ' , [ 10 5 ] ) ; 67 dvput ( pr _ 1 { idx } , ' ir ' , [ 90 30 ] ) ; 68 dvput ( pr _ 1 { idx } , ' is ' , [ 10 5 ] ) ; 69 dvput ( pr _ 1 { idx } , ' rf ' , [ 5 5 ] ) ; 70 dvput ( pr _ 1 { idx } , ' rff ' , [ 2 2 ] ) ; 71 dvput ( pr _ 1 { idx } , ' lim ' , [ 80 20 ] ) ; 72 dvput ( pr _ 1 { idx } , ' limm ' , [ 1 2 ] ) ; 4 73 dvput ( pr _ 1 { idx } , ' sym ' , ' c6 ' ) ; % from now on c6 symmetry 7475 % set computational parameters 76 dvput ( pr _ 1 { idx } , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 77 dvput ( pr _ 1 { idx } , ' gpus ' , gpu ) ; 7879 % check / unfold / run 80 dvrun ( pr _ 1 { idx } , ' check ' , true , ' unfold ' , true ) ; 8182 % check resulting table with visualization in plot 83 tPath = ddb ( [ pr _ 1 { idx } ' : rt ' ] ) ; 84 t = dread ( tPath ) ; 85 figure ; dtplot ( t , ' pf ' , ' oriented _ positions ' ) ; axis equal 86 % dpktbl . plots . disks ( t , ' r ' , boxSizeFirst / 2 ) 8788 end 899091 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 5 : Determine candidate particles 9293 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 94 % Block A : Create ' average of averages ' % 95 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 96 % 97 % Align averages from first alignment project to prepare first step of subboxing . 9899 % create folder for previous averages 100 mkdir ( folderAllaverages ) 101102 % copy previous averages into new folder ( particle tag number = tomogram number ) 103 for idx = 1 : nTomo 104 aPath = ddb ( [ pr _ 1 { idx } ' : a ' ] ) ; 105 copyfile ( aPath { 1 } , . . . 106 [ folderAllaverages ' / particle _ ' num2str ( tomoID ( idx ) , ' % 06 . f ' ) ' . em ' ; ] ) 107 end 108109 % create corresponding table and save it in new particle folder 110 ta = dynamo _ table _ blank ( nTomo ) ; 111 ta ( : , 13 ) = 0 ; % no missing wedge compensation needed 112 ta ( : , 20 ) = ta ( : , 1 ) ; % set particle tag number = tomogram number 113 ta ( : , 24 : 26 ) = 129 * ones ( nTomo , 3 ) ; % set centers 114 dwrite ( ta , [ folderAllaverages ' / crop . tbl ' ] ) 115116 % create template , put it in particle folder and visualize 117 oa = daverage ( folderAllaverages , ' t ' , [ folderAllaverages ' / crop . tbl ' ] , ' fc ' , 1 ) ; 118 dwrite ( oa . average , [ folderAllaverages ' / template . em ' ] ) ; 119 dview ( oa . average ) % visualize 120121 % create the alignment project of averages to align the 5 particles ( averages ) 122 dcp . new ( pr _ a , ' d ' , folderAllaverages , ' t ' , [ folderAllaverages ' / crop . tbl ' ] , . . . 123 ' template ' , [ folderAllaverages ' / template . em ' ] , ' masks ' , ' default ' , ' show ' , 0 ) ; 124 125 % set alignment parameters for 2 rounds 126 dvput ( pr _ a , ' ite ' , [ 3 3 ] ) ; 127 dvput ( pr _ a , ' dim ' , [ 64 128 ] ) ; 128 dvput ( pr _ a , ' low ' , [ 23 23 ] ) ; 129 dvput ( pr _ a , ' cr ' , [ 60 30 ] ) ; 130 dvput ( pr _ a , ' cs ' , [ 10 5 ] ) ; 131 dvput ( pr _ a , ' ir ' , [ 90 30 ] ) ; 132 dvput ( pr _ a , ' is ' , [ 10 5 ] ) ; 133 dvput ( pr _ a , ' rf ' , [ 5 5 ] ) ; 134 dvput ( pr _ a , ' rff ' , [ 2 2 ] ) ; 135 dvput ( pr _ a , ' lim ' , [ 80 20 ] ) ; 136 dvput ( pr _ a , ' limm ' , [ 1 2 ] ) ; 137 dvput ( pr _ a , ' sym ' , ' c6 ' ) ; 138139 % set computational parameters 140 dvput ( pr _ a , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 5 141 dvput ( pr _ a , ' gpus ' , gpu ) ; 142143 % check / unfold / run 144 dvrun ( pr _ a , ' check ' , true , ' unfold ' , true ) ; 145146 % prepare resulting average for chimera 147 aPath = ddb ( [ pr _ a ' : a ' ] ) ; 148 a = dread ( aPath ) ; 149 dwrite ( dynamo _ bandpass ( a , [ 1 23 ] ) * ( − 1 ) , [ ' result _ ' pr _ a ' _ INVERTED . em ' ] ) ; Listing 4 : Processing script refine . m 1 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 2 % Block B : Define coordinates of all unit cells % 3 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 4 % 5 % Define manually center of all unit cells in chimera ( for next step ) . 6 % Save coordinate as : particle _ centers . cmm 7 % Do this before running this script _ D . m 8910 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 11 % Block C : Map coordinates back to the averages % 12 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 13 % 14 % First step of subboxing , where the coordinates are mapped back onto the averages . 1516 % get table from the alignment project of averages 17 tOriPathCombined = ddb ( [ pr _ a ' : rt ' ] ) ; 18 tOriCombined = dread ( tOriPathCombined ) ; 1920 % prepare coordinates 21 cmmFileCombined = ' particle _ centers . cmm ' ; % . cmm file with center coordinates 22 newCenterCombined = dpcomp . chimera . cmm2mat ( cmmFileCombined , 1 , 1 ) ; % read . cmm file 23 newCenterCombined = round ( newCenterCombined ) ; % round the coordinates 24 boxCenterCombined = ( boxSizeFirst / 2 + 1 ) * [ 1 , 1 , 1 ] ; % center of box 2526 % compute vector from box center to new coordinate for each coordinate 27 % and create mini table for each average that contains the corresponding coordinates 28 for i = 1 : length ( newCenterCombined ( : , 1 ) ) 29 disp ( [ ' working on point : ' num2str ( i ) ] ) 30 rSubunitFromCenterCombined ( i , : ) = newCenterCombined ( i , : ) − boxCenterCombined ; 31 tSubCombined { i } = . . . 32 dynamo _ subboxing _ table ( tOriCombined , rSubunitFromCenterCombined ( i , : ) ) ; 33 end 3435 % merge mini tables 36 tSubAllCombined = dynamo _ table _ merge ( tSubCombined , ' linear _ tags ' , 1 ) ; 3738 % create the newCenter variable for each average that will be used in next steps 39 for idx = 1 : nTomo 40 tSubOneCombined = tSubAllCombined ( tSubAllCombined ( : , 20 ) = = tomoID ( idx ) , : ) ; 41 newCenterCell { idx } = tSubOneCombined ( : , 24 : 26 ) ; 42 end 434445 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 46 % Block D : Map coordinates back to the tomograms % 47 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 48 % 49 % Second step of subboxing , where coordinates are mapped back into the tomograms . 5051 % subbox each tomogram 52 for idx = 1 : nTomo 5354 % get table from first alignment 55 tOriPath = ddb ( [ pr _ 1 { idx } ' : rt ' ] ) ; 6 56 tOri = dread ( tOriPath ) ; 5758 % prepare coordinates 59 newCenter = newCenterCell { tomoID ( idx ) } ; % get centers from subboxing 60 newCenter = round ( newCenter ) ; % round the coordinates 61 boxCenter = ( boxSizeFirst / 2 + 1 ) * [ 1 , 1 , 1 ] ; % center of box 6263 % compute vector from box center to new subbox center and perform subboxing 64 for i = 1 : length ( newCenter ( : , 1 ) ) 65 disp ( [ ' working on : ' num2str ( i ) ] ) 66 rSubunitFromCenter ( i , : ) = newCenter ( i , : ) − boxCenter ; 67 tSub { i } = dynamo _ subboxing _ table ( tOri , rSubunitFromCenter ( i , : ) ) ; 68 end 6970 % merge tables 71 tSubAll = dynamo _ table _ merge ( tSub , ' linear _ tags ' , 1 ) ; 7273 % exclude coordinates describing the same unit cell 74 tSubAllEx = dpktbl . exclusionPerVolume ( tSubAll , dTh ) ; 7576 % plot and save table 77 figure ; h = dpktbl . plots . sketch ( tSubAllEx , ' haxis ' , gca ( ) ) ; h . zlength . value = 100 ; 78 dwrite ( tSubAllEx , [ ' subbox _ ' stackName { idx } ' . tbl ' ] ) 79 end 8081 % crop particles for each tomogram 82 for idx = 1 : nTomo 8384 % re − crop subboxed particles 85 tSubAllEx = dread ( [ ' subbox _ ' stackName { idx } ' . tbl ' ] ) ; 86 dtcrop ( docFilePath , tSubAllEx , targetFolder _ 2 { idx } , boxSizeSecond , ' mw ' , mw ) ; 8788 % re − average subboxed particles 89 finalTable = dread ( [ targetFolder _ 2 { idx } ' / crop . tbl ' ] ) ; 90 oa = daverage ( targetFolder _ 2 { idx } , ' t ' , finalTable , ' fc ' , 1 , ' mw ' , mw ) ; 91 dwrite ( oa . average , [ targetFolder _ 2 { idx } ' / template . em ' ] ) ; 92 dview ( oa . average ) 93 end 949596 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 97 % Block E : Second alignment project % 98 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 99 % 100 % run second alignment project with new table and template 101102 for idx = 1 : nTomo 103104 % set up project 105 dcp . new ( pr _ 2 { idx } , ' d ' , targetFolder _ 2 { idx } , . . . 106 ' t ' , [ targetFolder _ 2 { idx } ' / crop . tbl ' ] , . . . 107 ' template ' , [ targetFolder _ 2 { idx } ' / template . em ' ] , . . . 108 ' masks ' , ' default ' , ' show ' , 0 ) ; 109110 % set alignment parameters for 1 round with 3 iterations 111 dvput ( pr _ 2 { idx } , ' ite ' , 3 ) ; 112 dvput ( pr _ 2 { idx } , ' dim ' , 96 ) ; 113 dvput ( pr _ 2 { idx } , ' low ' , 23 ) ; 114 dvput ( pr _ 2 { idx } , ' cr ' , 45 ) ; 115 dvput ( pr _ 2 { idx } , ' cs ' , 5 ) ; 116 dvput ( pr _ 2 { idx } , ' ir ' , 30 ) ; 117 dvput ( pr _ 2 { idx } , ' is ' , 5 ) ; 118 dvput ( pr _ 2 { idx } , ' rf ' , 4 ) ; 119 dvput ( pr _ 2 { idx } , ' rff ' , 2 ) ; 120 dvput ( pr _ 2 { idx } , ' lim ' , [ 30 , 30 , 30 ] ) ; 121 dvput ( pr _ 2 { idx } , ' limm ' , 3 ) ; 122 dvput ( pr _ 2 { idx } , ' sym ' , ' c6 ' ) ; 123 7 124 % set up computational parameters 125 dvput ( pr _ 2 { idx } , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 126 dvput ( pr _ 2 { idx } , ' gpus ' , gpu ) ; 127128 % check / unfold / run 129 dvrun ( pr _ 2 { idx } , ' check ' , true , ' unfold ' , true ) ; 130 end 131132133 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 6 : Cross − correlation classification 134135 % % % % % % % % % % % % % % % % % % % % % % % % % % % 136 % Block A : CC theshold % 137 % % % % % % % % % % % % % % % % % % % % % % % % % % % 138 % 139 % Automatically exclude false − positive subvolumes by cc thresholding . 140141 for idx = 1 : nTomo 142143 % get table 144 tPath = ddb ( [ pr _ 2 { idx } ' : rt ' ] ) ; 145 t = dread ( tPath ) ; 146147 % fit gaussian mixture model ( GMM ) to cc distribution 148 gmdist = fitgmdist ( t ( : , 10 ) , 2 ) ; 149 gmsigma = gmdist . Sigma ; 150 gmmu = gmdist . mu ; 151152 % define threshold at minimum between gaussians plus constant 153 x = 0 : 0 . 001 : 0 . 5 ; 154 TF = islocalmin ( pdf ( gmdist , x ' ) ) ; 155 thresh = x ( TF ) ' + 0 . 01 ; 156157 % use std in case no threshold found 158 [ maxMu , maxMuI ] = max ( gmmu ( : ) ) ; 159 if isempty ( thresh ) 160 thresh = maxMu − 1 . 5 * sqrt ( gmsigma ( maxMuI ) ) ; 161 end 162163 % plot results of fit 164 figure ; 165 hold on ; 166 histogram ( t ( : , 10 ) , ' Normalization ' , ' pdf ' , ' EdgeColor ' , ' none ' ) 167 plot ( x , pdf ( gmdist , x ' ) ) 168 xline ( thresh ) 169 xlim ( [ 0 0 . 5 ] ) 170 legend ( ' CC distribution ' , ' GMM fit ' , ' Threshold ' ) 171 title ( [ ' Stack : ' stackName { idx } ] ) 172 xlabel ( ' CC ' ) 173 ylabel ( ' Occurencies ' ) 174175 % visualize kept / excluded particles 176 figure ; 177 hold on 178 h = dpktbl . plots . sketch ( t ( t ( : , 10 ) > thresh , : ) , ' haxis ' , gca ( ) ) ; 179 h . centerSettings . colorFill = ' b ' ; 180 h = dpktbl . plots . sketch ( t ( t ( : , 10 ) < thresh , : ) , ' haxis ' , gca ( ) ) ; 181 h . centerSettings . colorFill = ' r ' ; 182 title ( [ ' Particles excluded by CC filtering , stack : ' stackName { idx } ] ) 183184 % define cc filtered table 185 t _ ccFilt = t ( t ( : , 10 ) > thresh , : ) ; 186187 % Exclude coordinates describing the same unit cell 188 t _ ccFilt _ Ex = dpktbl . exclusionPerVolume ( t _ ccFilt , dTh ) ; 189 dwrite ( t _ ccFilt _ Ex , [ ' t _ ccFilt _ Ex _ ' stackName { idx } ' . tbl ' ] ) ; 190 end 191 8 192 % make new average and save it 193 for idx = 1 : nTomo 194 t _ ccFilt _ Ex = dread ( [ ' t _ ccFilt _ Ex _ ' stackName { idx } ' . tbl ' ] ) ; 195 oa = daverage ( targetFolder _ 2 { idx } , ' t ' , t _ ccFilt _ Ex , ' fc ' , 1 , ' mw ' , mw ) ; 196 dwrite ( oa . average , [ targetFolder _ 2 { idx } ' / average _ ccFilt _ Ex . em ' ] ) ; 197 dview ( oa . average ) 198 end 199200201 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 202 % Block B : Adjust height of particles % 203 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 204 % 205 % Create consistent height of particles across all tomograms . 206207 % create synthetic reference for alignemnt to height 208 mr = dpktomo . examples . motiveTypes . Membrane ( ) ; % create membrane object 209 mr . thickness = 104 ; % choose thickness of membrane 210 mr . radius = 348 ; % choose radius of membrane 211 mr . sidelength = 192 ; % choose sidelength of box 212 mr . getMask ( ) ; % compute mask 213 template _ h = ( mr . mask ) * ( − 1 ) + 1 ; % invert contrast 214 dwrite ( template _ h , template _ name _ h ) 215 dview ( template _ h ) 216217 for idx = 1 : nTomo 218219 % read average 220 template _ average = dread ( [ targetFolder _ 2 { idx } ' / average _ ccFilt _ Ex . em ' ] ) ; 221222 % align average to template ( only z − shift allowed ) 223 sal = dalign ( dynamo _ bandpass ( template _ average , [ 1 23 ] ) , . . . 224 dynamo _ bandpass ( template _ h , [ 1 23 ] ) , ' cr ' , 1 , ' cs ' , 1 , ' ir ' , 1 , ' is ' , 1 , ' dim ' , 96 , . . . 225 ' limm ' , 1 , ' lim ' , [ 1 , 1 , 20 ] , ' rf ' , 5 , ' rff ' , 2 ) ; 226 dview ( sal . aligned _ particle ) ; 227228 % apply transformation to table 229 t _ ccFilt _ Ex = dread ( [ ' t _ ccFilt _ Ex _ ' stackName { idx } ' . tbl ' ] ) ; 230 t _ ccFilt _ Ex _ Ali = dynamo _ table _ rigid ( t _ ccFilt _ Ex , sal . Tp ) ; 231232 % Exclude again coordinates describing the same unit cell 233 t _ ccFilt _ Ex _ Ali _ Ex = dpktbl . exclusionPerVolume ( t _ ccFilt _ Ex _ Ali , dTh ) ; 234 dwrite ( t _ ccFilt _ Ex _ Ali _ Ex , [ ' t _ ccFilt _ Ex _ Ali _ Ex _ ' stackName { idx } ' . tbl ' ] ) ; 235 end 236237238 % % % % % % % % % % % % % % % % % % % % % % % 239 % Block C : Re − crop % 240 % % % % % % % % % % % % % % % % % % % % % % % 241 % 242 % Extract subvolumes using latest table . 243 244 for idx = 1 : nTomo 245 % read table and re − crop particles 246 t _ ccFilt _ Ex _ Ali _ Ex = dread ( [ ' t _ ccFilt _ Ex _ Ali _ Ex _ ' stackName { idx } ' . tbl ' ] ) ; 247 dtcrop ( docFilePath , t _ ccFilt _ Ex _ Ali _ Ex , targetFolder _ 3 { idx } , 192 , ' mw ' , mw ) ; 248 end 249250 for idx = 1 : nTomo 251 % Make and save average of last particle folder for sanity check 252 finalTable = dread ( [ targetFolder _ 3 { idx } ' / crop . tbl ' ] ) ; 253 oa = daverage ( targetFolder _ 3 { idx } , ' t ' , finalTable , ' fc ' , 1 , ' mw ' , mw ) ; 254 dwrite ( oa . average , [ targetFolder _ 3 { idx } ' / template . em ' ] ) ; 255 dview ( oa . average ) 256 end 257258259 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 7 : Gold standard alignment 9 260261 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 262 % Block A : Combine tomograms and generate even / odd dataset % 263 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 264 % 265 % Combine all particles from all tomograms and then split them in an even / odd dataset 266267 % create table array 268 for idx = 1 : nTomo 269 tableName { idx } = [ targetFolder _ 3 { idx } ' / crop . tbl ' ] ; 270 end 271272 % create ParticleListFile object ( this object only exists temporarily in matlab ) 273 plfClean = dpkdata . containers . ParticleListFile . mergeDataFolders ( . . . 274 targetFolder _ 3 , ' tables ' , tableName ) ; 275276 % create and write the . star file 277 plfClean . writeFile ( starFileName ) 278279 % create merged table 280 tMergedClean = plfClean . metadata . table . getClassicalTable ( ) ; 281282 % write full / even / odd merged tables 283 dwrite ( tMergedClean , tableFileName ) 284 dwrite ( tMergedClean ( 2 : 2 : end , : ) , tableFileNameEO { 1 } ) 285 dwrite ( tMergedClean ( 1 : 2 : end , : ) , tableFileNameEO { 2 } ) 286287 % create and save even / odd references 288 oaE = daverage ( starFileName , ' t ' , tableFileNameEO { 1 } , ' fc ' , 1 , ' mw ' , mw ) ; 289 oaO = daverage ( starFileName , ' t ' , tableFileNameEO { 2 } , ' fc ' , 1 , ' mw ' , mw ) ; 290 dwrite ( oaE . average , refFilenameEO { 1 } ) ; 291 dwrite ( oaO . average , refFilenameEO { 2 } ) ; 292293294 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 295 % Block B : Set up even / odd project % 296 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 297 % 298 % Run first even / odd alignemnt projects . 299300 for r = 1 : 2 % loop over even / odd 301302 % define alignment project 303 dcp . new ( pr _ EO { r } , ' t ' , tableFileNameEO { r } , ' d ' , targetFolder _ 3 { 1 } , . . . 304 ' template ' , refFilenameEO { r } , ' show ' , 0 , ' masks ' , ' default ' ) ; 305 dvput ( pr _ EO { r } , ' data ' , starFileName ) 306307 % set alignment parameters for 3 rounds 308 dvput ( pr _ EO { r } , ' ite ' , [ 3 3 3 ] ) ; 309 dvput ( pr _ EO { r } , ' dim ' , [ 96 192 192 ] ) ; 310 dvput ( pr _ EO { r } , ' low ' , [ 23 28 32 ] ) ; 311 dvput ( pr _ EO { r } , ' cr ' , [ 45 12 6 ] ) ; 312 dvput ( pr _ EO { r } , ' cs ' , [ 5 2 1 ] ) ; 313 dvput ( pr _ EO { r } , ' ir ' , [ 30 12 6 ] ) ; 314 dvput ( pr _ EO { r } , ' is ' , [ 5 2 1 ] ) ; 315 dvput ( pr _ EO { r } , ' rf ' , [ 5 4 3 ] ) ; 316 dvput ( pr _ EO { r } , ' rff ' , [ 2 2 2 ] ) ; 317 dvput ( pr _ EO { r } , ' lim ' , [ 30 12 6 ] ) ; 318 dvput ( pr _ EO { r } , ' limm ' , [ 2 2 2 ] ) ; 319 dvput ( pr _ EO { r } , ' sym ' , ' c6 ' ) 320321 % set computational parameters 322 dvput ( pr _ EO { r } , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 323 dvput ( pr _ EO { r } , ' gpus ' , gpu ) ; 324325 % check / unfold / run 326 dvrun ( pr _ EO { r } , ' check ' , true , ' unfold ' , true ) ; 327 end 10 328329330 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 8 : Refinement 331332 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 333 % Block A : CC filter again ( normalized & per tomogram ) % 334 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 335 % 336 % Before the refinemet we exclude partciles with low CC again 337338 % get last tables 339 tEPath = ddb ( [ pr _ EO { 1 } ' : rt ' ] ) ; 340 tOPath = ddb ( [ pr _ EO { 2 } ' : rt ' ] ) ; 341 tE = dread ( tEPath ) ; 342 tO = dread ( tOPath ) ; 343344 % remove particles per tomogram based on normalized CC 345 for idx = 1 : nTomo 346 [ tE _ ccGood _ Array { idx } , tE _ ccBad _ Array { idx } ] = . . . 347 dpksta . filters . byCC ( tE ( tE ( : , 20 ) = = idx , : ) ) ; 348 [ tO _ ccGood _ Array { idx } , tO _ ccBad _ Array { idx } ] = . . . 349 dpksta . filters . byCC ( tO ( tO ( : , 20 ) = = idx , : ) ) ; 350 end 351352 % merge tables of accepted particles 353 tEO _ ccGood { 1 } = dynamo _ table _ merge ( tE _ ccGood _ Array ) ; 354 tEO _ ccGood { 2 } = dynamo _ table _ merge ( tO _ ccGood _ Array ) ; 355356 % save tables 357 dwrite ( tEO _ ccGood { 1 } , tEO _ ccGood _ TableName { 1 } ) ; 358 dwrite ( tEO _ ccGood { 2 } , tEO _ ccGood _ TableName { 2 } ) ; 359360 % make averages for new references and save them 361 oaE = daverage ( starFileName , ' t ' , tEO _ ccGood _ TableName { 1 } , ' fc ' , 1 , ' mw ' , mw ) ; 362 oaO = daverage ( starFileName , ' t ' , tEO _ ccGood _ TableName { 2 } , ' fc ' , 1 , ' mw ' , mw ) ; 363 dwrite ( oaE . average , refEven ) ; 364 dwrite ( oaO . average , refOdd ) ; 365366367 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 368 % Block B : Refine even / odd project % 369 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 370 % 371 % Last even / odd alignment project . With alignment mask and stricter lowpass . 372373 % create adapted mask and visualize it 374 mr = dpktomo . examples . motiveTypes . Membrane ( ) ; 375 mr . thickness = 145 ; 376 mr . sidelength = 192 ; 377 mr . radius = 348 ; 378 mr . shifts = [ 0 0 5 ] ; 379 mr . getMask ( ) ; 380 mem _ mask = mr . mask ; 381 cyl _ mask = dynamo _ cylinder ( 87 , 192 , [ 97 97 97 ] ) ; 382 final _ mask = mem _ mask . * cyl _ mask ; % subtract cylinder 383 dwrite ( final _ mask , refMask ) 384 dwrite ( final _ mask , ' my _ smask . em ' ) 385 dview ( final _ mask ) 386387 % read averages ( for template ) 388 aEOPath { 1 } = refEven ; 389 aEOPath { 2 } = refOdd ; 390391 for r = 1 : 2 392393 % define alignment project 394 dcp . new ( pr _ EO _ 2 { r } , ' t ' , tEO _ ccGood _ TableName { r } , ' d ' , targetFolder _ 3 { 1 } , . . . 395 ' template ' , aEOPath { 1 , r } , ' show ' , 0 , ' masks ' , ' default ' ) ; 11 396 dvput ( pr _ EO _ 2 { r } , ' data ' , starFileName ) 397 dvput ( pr _ EO _ 2 { r } , ' file _ mask ' , refMask ) 398399 % set alignment parameters for 1 round 400 dvput ( pr _ EO _ 2 { r } , ' ite _ r1 ' , 3 ) ; 401 dvput ( pr _ EO _ 2 { r } , ' dim _ r1 ' , 192 ) ; 402 dvput ( pr _ EO _ 2 { r } , ' low _ r1 ' , 38 ) ; 403 dvput ( pr _ EO _ 2 { r } , ' cr _ r1 ' , 6 ) ; 404 dvput ( pr _ EO _ 2 { r } , ' cs _ r1 ' , 1 ) ; 405 dvput ( pr _ EO _ 2 { r } , ' ir _ r1 ' , 6 ) ; 406 dvput ( pr _ EO _ 2 { r } , ' is _ r1 ' , 1 ) ; 407 dvput ( pr _ EO _ 2 { r } , ' rf _ r1 ' , 3 ) ; 408 dvput ( pr _ EO _ 2 { r } , ' rff _ r1 ' , 2 ) ; 409 dvput ( pr _ EO _ 2 { r } , ' lim _ r1 ' , [ 6 , 6 , 6 ] ) ; 410 dvput ( pr _ EO _ 2 { r } , ' limm _ r1 ' , 2 ) ; 411 dvput ( pr _ EO _ 2 { r } , ' sym _ r1 ' , ' c6 ' ) ; % symmetry introduced 412413 % set computational parameters 414 dvput ( pr _ EO _ 2 { r } , ' dst ' , ' matlab _ gpu ' , ' cores ' , 1 , ' mwa ' , mw ) ; 415 dvput ( pr _ EO _ 2 { r } , ' gpus ' , gpu ) ; 416417 % check / unfold / run 418 dvrun ( pr _ EO _ 2 { r } , ' check ' , true , ' unfold ' , true ) ; 419 end 420421422 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % Step 9 : Prepare half − maps 423424 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 425 % Block A : Prepare half − maps % 426 % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 427 % 428 % Align half − maps and save them for post − processing . 429430 % get last maps 431 aEPath = ddb ( [ pr _ EO _ 2 { 1 } ' : a ' ] ) ; 432 aOPath = ddb ( [ pr _ EO _ 2 { 2 } ' : a ' ] ) ; 433 aE = dread ( aEPath ) ; 434 aO = dread ( aOPath ) ; 435436 % get last tables 437 tEPath = ddb ( [ pr _ EO _ 2 { 1 } ' : rt ' ] ) ; 438 tOPath = ddb ( [ pr _ EO _ 2 { 2 } ' : rt ' ] ) ; 439 tE = dread ( tEPath ) ; 440 tO = dread ( tOPath ) ; 441442 % align even to odd ( with C6 imposed ) 443 sal = dalign ( dynamo _ csym ( aE , 6 ) , dynamo _ csym ( aO , 6 ) , ' cr ' , 3 , ' cs ' , 1 , ' ir ' , 3 , ' is ' , 1 , . . . 444 ' dim ' , 192 , ' limm ' , 1 , ' lim ' , [ 3 , 3 , 3 ] , ' rf ' , 5 , ' rff ' , 2 , . . . 445 ' destination ' , ' matlab _ gpu ' , ' gpu _ identifier _ set ' , 1 ) ; 446447 % transform even table ( of which halfmap was aligned ) 448 tEr = dynamo _ table _ rigid ( tE , sal . Tp ) ; 449450 % make average 451 oaEr = daverage ( starFileName , ' t ' , tEr , ' fc ' , 1 , ' mw ' , mw ) ; 452453 % save aligned halfmaps ( with symmetry ) for FSC estimation 454 dwrite ( dynamo _ csym ( oaEr . average , 6 ) * ( − 1 ) , ' half1 _ final _ reaveraged _ unfil . mrc ' ) 455 dwrite ( dynamo _ csym ( aO , 6 ) * ( − 1 ) , ' half2 _ final _ reaveraged _ unfil . mrc ' ) 456457 % reaverage all particles for post − processing ( correct fourier compensation ) 458 oAll = daverage ( starFileName , ' t ' , dynamo _ table _ merge ( { tEr , tO } ) , ' fc ' , 1 , ' mw ' , mw ) ; 459 dwrite ( dynamo _ csym ( oAll . average , 6 ) * ( − 1 ) , ' final _ reaveraged . mrc ' ) 12