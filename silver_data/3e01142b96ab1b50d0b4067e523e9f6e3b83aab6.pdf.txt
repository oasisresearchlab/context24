Diagrams - as - Code for Conceptual Modeling in Computational Problem Solving Matthew Dinmore Johns Hopkins University Applied Physics Lab Laurel , USA matthew . dinmore @ jhuapl . edu Abstract — We introduce an interface for a novel integration of diagrams - as - code and data analysis tools that links interactive conceptual modeling to data science tools for computational problem solving . The interface allows a user to seamlessly move between creating and updating their conceptual model of the problem while visualizing it , decomposing the problem with these modeling tools , and developing code to implement computational solutions and visualize results . All concepts identified in the models are visible throughout the process , allowing for easy navigation and model awareness . Implicit dependencies enable model checking and results aggregation . The integration with computational kernels offers an alternative to notebook - style interfaces that addresses several known shortcomings , while also providing polyglot integration among the computational components . Index Terms — conceptual model , diagram , computational notebook , problem solving , visualization , data analysis I . I NTRODUCTION Computational notebooks such as Jupyter [ 6 ] have become commonplace in data science and are increasingly employed in other fields . However , numerous shortcomings intrinsic to the linear design of these notebooks have been noted in the literature [ 12 ] , [ 15 ] . While excellent for ad hoc , interactive analyses , the inability to guide the analysis from an overarching analytic plan or – without considerable additional discipline – provide a conceptual framework for the problem and approach to the solution as part of the notebook , reduces the ability to effectively use notebooks as a means for shaping , solving and communicating about a problem , especially as problems scale . To explore potential designs to address this , we introduce Quarry , an interactive tool for computational problem solving . The design integrates conceptual modeling – realized through a “diagrams as code” [ 2 ] approach – and the same kinds of computation and visualization available in notebooks , but with focused , element - by - element interaction approach rather than an all - at - once linear presentation . These elements of computation are tied together through a navigable directory of constructs explicated ( primarily ) from the conceptual model that serves as the framework for organizing and interacting with the computational elements of the solution . Moreover , the first - class nature of all project elements enables them to be easily used together for synthesis and presentation of results . This paper briefly introduces the rationale for linking conceptual modeling and computational problem solving , presents the initial design of Quarry , discusses how it additionally addresses several challenges with computational notebooks , identifies specific issues we will explore in design research studies , and concludes with our plan for future work . II . C ONCEPTUAL M ODELING FOR C OMPUTATIONAL P ROBLEM S OLVING Storey , Lukyanenko , and Castellanos [ 3 ] define conceptual modeling as “…capturing , abstracting , and representing relevant aspects of reality , to support understanding , communication , design , and decision making . ” Robinson , et al . [ 9 ] discussed the use of conceptual models for understanding the “problem situation , ” and Pace [ 5 ] identifies four quality attributes : completeness ( all relevant constructs are captured ) , consistency among the constructs , coherence in overall function , and correctness of the representation relative to the intended application . Eickelmann , et al . [ 10 ] illustrate the relationship between problem solving and computational thinking , grouping activities into three categories : conceptualizing problems , operationalizing solutions , and evaluating solutions . We seek to develop tools that most effectively enable all of these activities . Computational notebooks present a linear interface of cells in which text , code and other assets can be intermingled [ 6 ] . While principally focused on operationalizing a solution in the form of executable scripts , in theory , the notebook can also be used to capture , scope , and decompose the problem at hand . However , empirical examination of actual notebook use suggests users often don’t do this [ 13 ] . Our prototype , Quarry , attempts to address this by making the capture of the conceptual model representing the problem both explicit and fully integrated into the process of developing code and synthesizing results . It does so by leveraging “diagrams as code” [ 2 ] tools , designed to support informal diagrammatic representations of software architecture [ 1 ] , to s imultaneously capture a “sketch” of the problem and link it to code or other elements of the solution to create a holistic , communicative result . III . D ESIGN The interface for Quarry is implemented in three panes – the construct directory , the code editor , and the visualizer – each with consistent purposes during both the conceptual modeling and computational coding activities ( Fig . 1 ) . The code editor and visualizer show the input and output for the selected item in the construct directory ; they adjust as needed for the type of code being written and the form of the output to be displayed . The design of the construct directory represents a novel contribution . Organized loosely as a tree , a new project begins with a single , top - level item representing a construct . Constructs exist in problem space and are typically implemented as a model 239 2023 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) 1943 - 6106 / 23 / $ 31 . 00 ©2023 IEEE DOI 10 . 1109 / VL - HCC57772 . 2023 . 00041 2023 I EEE S y m p o s i u m o n V i s u a l L a n g u a g e s a nd H u m a n - C e n t r i c C o m pu t i n g ( V L / H CC ) | 979 - 8 - 3503 - 2946 - 9 / 23 / $ 31 . 00 © 2023 I EEE | D O I : 10 . 1109 / V L - H CC 57772 . 2023 . 00041 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply . ( or sub - models ) , by writing a modeling language or diagram - as - code script in the editor ; alternatively , narrative text may also be used to describe the model . Within the model , a simple markup notation is applied to identify model constructs . Once processed , this notation is removed in the version of the modeling code passed to the model rendering engine , but the extracted constructs automatically create new construct placeholders in the navigator . A similar markup can identify expressions – pieces of computation – that will be associated with the construct being described ; these are also added as children to the construct . The directory displays model constructs as rounded - rectangles and expressions as rectangles to differentiate them . It is also possible for users to add ad hoc entries that are not originated in the model ; these – and any items that become orphaned due to model changes – are indicated with dashed borders , allowing for quick visual inspection . Similarly , constructs without children are indicative of incomplete parts of the model or analysis . This markup is a simple , user - facing notation for interacting with the underlying integrative computational model . A project is composed of expressions , which take some input , such as a script , and produce an output , such as a diagram , plot , or value . These inputs and outputs are clearly visible to the user as connected units in the editor and visualization panes , respectively . They represent conceptual model constructs and expressions , which are the only types of items presented in the navigator . The markup defines and relates these pieces as a lightweight addition to any text - based modeling or coding language , allowing the problem solver to make use of what they already know , rather than requiring them to learn a significant new programming or domain - specific language . IV . A LTERNATIVE TO C OMPUTATIONAL N OTEBOOKS As an alternative to a computational notebook , Quarry offers potential solutions to several key challenges that have emerged in studies of notebook use in practice : A . Conceptualization and problem structuring As discussed above , the primary contribution of this work is enabling conceptual model capture and integration into the computational problem - solving process . In addition to helping the problem solver explicitly structure the problem situation and align the solution to it , observing the dependency structure and naming all of the elements of the problem and solution improves working through and describing the problem - solving process . B . Polyglot interoperability One of the collateral benefits of explicitly organizing and naming the problem constructs and solution elements is that they – and all of the elements of the project , for that matter – can be globally referenced . Using a transclusion scheme as the foundational model for polyglot integration , the runtime can share computed values among scripts , even when they are in different languages . Further , this is implemented reactively , providing for automatically updating computation that reflects the problem structure , making it easier for the end user to reason about the relationships among elements of the solution . Finally , the ability to reference products from anywhere in the project simplifies synthesis and presentation of key results in composable summary views . C . Execution order The typical notebook design implies a linear execution of the cells , but this is not how the notebook actually works , presenting a confusing mental model of the computation to users [ 12 ] . Quarry focuses the user on each element of computation , and any dependencies among them are made explicitly . The interaction with the element is well defined , adopting a spreadsheet - like cell editing experience in which the user “checks” the cell in order to commit it and cause its recalculation , as well as that of any dependencies . Other researchers have also explored non - linear notebook designs [ 8 ] . D . Versioning Similarly , this focus on a single element of computation at a time and committing updates to it enables checkpointing , as well as the ability to easily navigate back to and re - execute earlier versions . Annotations associated with each computational element , which are also versioned , can help to further explain implementation decisions and changes ( and because these , like all other parts of the project , are addressable data , these can easily be computed with and displayed elsewhere in the project to create , for example , a problem - solving history summary ) . The need for versioning in support of exploratory analysis has been established in prior research [ 7 ] . V . D ESIGN R ESEARCH Open questions for the design that we will explore in an iterative evaluation include the usability and utility of the construct directory and the effectiveness of focusing the user on a single piece of computation at one time as compared to the linear , all - at - once presentation of traditional computational notebooks . A particular concern we will explore is problem - solvers’ willingness and ability to learn and employ the ‘diagrams - as - code’ approach as opposed t o a graphical , direct - manipulation approach ; this research may be the first formal study of this increasingly popular paradigm . Later , we are also interested in examining the scalability to larger projects , taking existing notebook - based projects as a benchmark , as well as the scope of practical modeling and simulation and engineering projects for which digital design tools that leverage conceptual models are used . Part of this exploration will be to find effective handoff points between high - level problem solvers working in Quarry to those working in other tools that implement , for example , underlying computational libraries and services leveraged by Quarry users . VI . D EMONSTRATION AND F UTURE W ORK We will present Quarry as a poster and interactive software demonstration to illustrate the contributions discussed here . As diagrams , computational notebooks , and end - user programming are of interest to the VL / HCC community , and we are engaging research issues relating to computational notebooks previously discussed at VL / HCC , we expect Quarry will provide ample opportunity for researchers in these areas to share feedback about this design . In future work , we intend to evaluate its utility for facilitating analyses in different domains including policy analysis and model - based systems engineering . Additionally , we will examine how well its features are able to address common computational notebook shortcomings in practice . 240 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply . A PPENDIX – Q UARRY I NTERFACE A CKNOWLEDGEMENTS The author would like to thank his colleagues and the reviewers for their comments that helped to improve this paper . R EFERENCES [ 1 ] R . Jongeling , F . Ciccozzi , A . Cicchetti , and J . Carlson , “From Informa l Architecture Diagrams to Flexible Blended Models , ” in Software Architecture , I . Gerostathopoulos , G . Lewis , T . Batista , and T . Bureš , Eds . , in Lecture Notes in Computer Science , vol . 13444 . Cham : Springer International Publishing , 2022 , pp . 143 – 158 . doi : 10 . 1007 / 978 - 3 - 031 - 16697 - 6 _ 10 . [ 2 ] J . Cabot , “Text to UML and other ‘diagrams as code’ tools – Fastest way to create your models , ” Modeling Languages , 2020 . https : / / modeling - languages . com / text - uml - tools - complete - list / ( accessed Jun . 11 , 2023 ) . [ 3 ] V . C . Storey , R . Lukyanenko , and A . Castellanos , “Conceptual Modelin g : Topics , Themes , and Technology Trends , ” ACM Comput . Surv . , p . 3589338 , Mar . 2023 , doi : 10 . 1145 / 3589338 . [ 4 ] D . Dori , Model - Based Systems Engineering with OPM and SysML . New York , NY : Springer New York , 2016 . doi : 10 . 1007 / 978 - 1 - 4939 - 3295 - 5 . [ 5 ] D . K . Pace , “Ideas About Simulation Conceptual Model Development , ” JOHNS HOPKINS APL TECHNICAL DIGEST , vol . 21 , no . 3 , 2000 . [ 6 ] T . Kluyver et al . , “Jupyter Notebooks - a publishing format for reproducible computational workflows , ” in International Conference on Electronic Publishing , 2016 . [ 7 ] M . B . Kery , B . E . John , P . O’Flaherty , A . Horvath , and B . A . Myers , “Towards Effective Foraging by Data Scientists to Find Past A nalysis Choices , ” in Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems , Glasgow Scotland Uk : ACM , May 2019 , pp . 1 – 13 . doi : 10 . 1145 / 3290605 . 3300322 . [ 8 ] Z . J . Wang , K . Dai , and W . K . Edwards , “StickyLand : Breaking the Linear Presentation of Computational Notebooks , ” in CHI Conference on Human Factors in Computing Systems Extended Abstracts , New Orleans LA USA : ACM , Apr . 2022 , pp . 1 – 7 . doi : 10 . 1145 / 3491101 . 3519653 . [ 9 ] S . Robinson , R . Brooks , K . Kotiadis , and D . - J . Van Der Zee , Conceptual modeling for discrete - event simulation . CRC Press , 2010 . [ 10 ] B . Eickelmann , A . Labusch , and M . Vennemann , “Computational Thinking and Problem - Solving in the Context of IEA - ICILS 2018 , ” in Empowering Learners for Life in the Digital Age , D . Passey , R . Bottino , C . Lewin , and E . Sanchez , Eds . , in IFIP Advances in Information and Communication Technology , vol . 524 . Cham : Springer International Publishing , 2019 , pp . 14 – 23 . doi : 10 . 1007 / 978 - 3 - 030 - 23513 - 0 _ 2 . [ 11 ] S . Nalchigar and E . Yu , “Designing Business Analytics Solutions : A Model - Driven Approach , ” Bus Inf Syst Eng , vol . 62 , no . 1 , pp . 61 – 75 , Feb . 2020 , doi : 10 . 1007 / s12599 - 018 - 0555 - z . [ 12 ] S . Chattopadhyay , I . Prasad , A . Z . Henley , A . Sarma , and T . Barik , “What’s Wrong with Computational Notebooks ? Pain Points , Needs , and Design Opportunities , ” in Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems , in CHI ’20 . New York , NY , USA : Association for Computing Machinery , 2020 , pp . 1 – 12 . doi : 10 . 1145 / 3313831 . 3376729 . [ 13 ] A . Rule , A . Tabard , and J . D . Hollan , “Exploration and Explanation in Com putational Notebooks , ” in Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems - CHI ’18 , Montreal QC , Canada : ACM Press , 2018 , pp . 1 – 12 . doi : 10 . 1145 / 3173574 . 3173606 . [ 14 ] J . F . Pimentel , L . Murta , V . Braganholo , and J . Freire , “A Large - Scale Study About Quality and Reproducibility of Jupyter Notebooks , ” in 2019 IEEE / ACM 16th International Conference on Mining Software Repositories ( MSR ) , Montreal , QC , Canada : IEEE , May 2019 , pp . 507 – 517 . doi : 10 . 1109 / MSR . 2019 . 00077 . [ 15 ] A . Head , F . Hohman , T . Barik , S . M . Drucker , and R . DeLine , “Managing Messes in Computational Not ebooks , ” in Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems - CHI ’19 , Glasgow , Scotland Uk : ACM Press , 2019 , pp . 1 – 12 . doi : 10 . 1145 / 3290605 . 3300500 . Fig . 1 . Quarry prototype showing ( left - to - right ) construct directory , code editor , and visualizer . Fi 1 Q t t h i ( l ft t i ht ) t t di t d dit d i li 241 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply .