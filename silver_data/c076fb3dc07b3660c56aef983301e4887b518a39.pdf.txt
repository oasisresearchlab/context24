An axiomatic model for concept structure description and its application to circuit design Cristian Ferent a , Alex Doboli a , ⇑ , Simona Doboli b a Department of Electrical and Computer Engineering , State University of New York at Stony Brook , Stony Brook , NY 11794 - 2350 , United States b Department of Computer Science , Hofstra University , Hempstead , NY 11549 , United States a r t i c l e i n f o Article history : Received 3 May 2012 Received in revised form 22 February 2013 Accepted 23 February 2013 Available online 7 March 2013 Keywords : Concept structure Axiomatic model Design innovation knowledge structure circuit design a b s t r a c t This paper describes an axiomatic model to express concept structures in analog circuit design . The con - cepts of a structure represent sets of circuit designs , and are deﬁned based on the similarities and differ - ences in their circuit topology , behavior and performance . Similarities and differences are found through concept matching , a main operator of the concept structure . A concept structure is extended with new concepts that are created by combining the features of existing concepts and by exploring new relations between variables through instantiation . Concepts are characterized by a set of metrics , e . g . , variety , util - ity , novelty , complexity , ﬂexibility , constraining factor , and bottleneck . The paper presents a novel circuit design methodology as an application of the model . Two case studies illustrate the utility of the axiomatic model in expressing knowledge structures for various types of circuits . (cid:2) 2013 Elsevier B . V . All rights reserved . 1 . Introduction Many analog circuit design tools have been developed to auto - mate design activities like layout design , transistor sizing , circuit topology generation , and design testing and veriﬁcation [ 1 , 2 ] . In spite of their variety , design tools often share a common paradigm in that the design problem is ﬁrst cast as a closed - form optimiza - tion problem which is then solved using mathematical solvers [ 3 – 5 ] or heuristic optimization algorithms [ 6 – 9 ] . Optimization problems are described as sets of mathematical relations express - ing basic building blocks ( e . g . , electronic devices , library circuits , and parameterized cells ) and predeﬁned rules for the individual design steps ( i . e . where to place devices on a layout , or how to set transistor sizes ) . Design tools increase design productivity and lower cost by reducing designer effort and time . Most optimization - based circuit design methods implicitly as - sume that there is sufﬁcient domain knowledge available to pro - duce closed - form representations of the problems to be addressed . The domain knowledge includes knowing the best topologies for given speciﬁcations , and the relevant performance trade - offs and design variables . Having enough domain knowledge implies that sufﬁciently many , conceptually - similar design prob - lems have already been solved prior to building the tool . Signiﬁcant effort in manual design , analysis , and validation is needed to build the domain knowledge . Moreover , this suggests that most circuit design tools mainly target tedious but conceptually - well under - stood , routine activities . In contrast , there is less domain knowledge available for prob - lems that introduce conceptually new challenges or problems which evolve in time . Such problems are difﬁcult to describe as closed - form optimization models . Instead , the solving process mainly involves prediction , reasoning , and decision making in an effort to address open - ended issues and create the missing domain knowledge . For example , circuit topology design for novel applica - tions requires extended conceptual design for identifying new principles , procedures , and paths for signal processing and control . New ways of structurally connecting devices , novel rules for con - straining device operation , and new sub - structures might be de - vised . Similarly , topology reﬁnement for novel requirements needs precise adjustment of a topology’s structure to address the speciﬁc bottlenecks ( e . g . , certain performance trade - off limita - tions ) that prevent a topology from meeting the speciﬁcation . Fi - nally , design speciﬁcations can often be open ended , such as maximizing a utility like the capability of fast mobile processing ( but without setting precise requirements ) . Besides , some utilities must be maximized over time , such as the total expected return for investing in a certain design concept . Then , it is important to iden - tify conceptual solutions that can target emergent economic niches and opportunities . Devising a model to express evolving and expanding domain knowledge is a ﬁrst step towards new design tools that can effectively tackle a wide range of open - ended problems . This paper present an axiomatic model for deﬁning concept structures that describe domain knowledge in analog circuit 0950 - 7051 / $ - see front matter (cid:2) 2013 Elsevier B . V . All rights reserved . http : / / dx . doi . org / 10 . 1016 / j . knosys . 2013 . 02 . 013 ⇑ Corresponding author . Tel . : + 1 6316321611 . E - mail address : adoboli @ ece . sunysb . edu ( A . Doboli ) . Knowledge - Based Systems 45 ( 2013 ) 114 – 133 Contents lists available at SciVerse ScienceDirect Knowledge - Based Systems journal homepage : www . elsevier . com / locate / knosys design . As shown in Fig . 1 , concept structures expand design solu - tion spaces , which have been traditionally addressed by circuit de - sign methods , like tools for transistor sizing and layout generation . Concept structures express explicit , symbolic design features that create conceptual solutions ( e . g . , circuit topologies , signal ﬂow graphs , etc . ) to meet the requirements of a problem . Each concep - tual solution ( or concept ) originates speciﬁc performance trade - off surfaces between the related design variables , such as surfaces T 1 and T 2 in Fig . 1 deﬁning trade - offs between performance P and variables v 1 and v 2 . Trade - off surfaces are part of the numerical solution space , and are explored through traditional circuit design methods , including optimization - based techniques . Concepts are grouped to create abstractions that describe collectively the group . The existing concepts and their abstractions deﬁne the available concept structure . In addition , the model supports the creation of new concepts through operations , like concept combination and induction . This produces the incremental concept structure , called closure . Finally , the unknown concept structure is the region that cannot be reached based only on the features of the current concepts . More speciﬁcally , the concept structure presents explicitly the similarities and differences between circuit features at the levels of topology , behavior , and performance . Circuit features ( attri - butes ) relate circuit variables and performance attributes for a set of constraints deﬁning the context of the feature . Concepts in - clude all designs that share a number of matched attributes as well as a set of attributes that distinguish them from other concepts . New concepts are added to the structure by induction , by combin - ing the features of existing concepts , or by exploring new relations between variables . Concepts are characterized by a set of metrics , including concept variety , utility , novelty , complexity , ﬂexibility , constraining factor , and bottleneck . The concept structure orga - nizes the concepts based on relations like instantiation and abstraction . More metrics characterize the typicality and versatil - ity of concepts , and the expected increase of a concept structure . A novel circuit design methodology is also introduced as an appli - cation of the model . Two case studies illustrate the utility of the axiomatic model in expressing knowledge structures for various types of circuits . The axiomatic model discussed in this paper was inspired by work in cognitive psychology . Many studies in psychology focus on studying concepts and conceptual solution devising . Studies show that concept combinations are the main step in problem solving , including creativity and innovation [ 10 ] . Wisniewski and Love [ 11 ] explain that combinations are of two kinds , thematic and property - based . Thematic combinations assign a role to each of the concepts . Property combinations indicate that the properties of one concept ( called modiﬁer ) are transferred to the second con - cept ( referred as head ) . Thematic combinations are modeled as schemata with predeﬁned slots ﬁlled by concept features [ 12 ] . Identifying similar and dissimilar concept features is a main oper - ator of the combination process [ 13 ] . Gagne [ 14 , 15 ] suggests the Competition Among Relations in Nominals theory according to which the relations established between the modiﬁer and head concepts are the main driver in producing new attributes for com - binations . Similar to [ 16 ] , relations are of different kinds , like causes , has , for , and located modiﬁers . Hampton [ 17 ] proposes a model for attribute inheritance of conjunctive concept combina - tions according to which the inherited attributes must be sufﬁ - ciently important , quite typical , and feasible for both concepts . The interaction between the concepts is indicated as a prediction factor for the attributes of combinations . Extensional feedback is a mechanism through which new attributes are introduced due to the conjunction’s associations with experience . Estes and Ward [ 18 ] discuss the emergence of new attributes during concept com - bination . They suggest that the main mechanisms are as follows : increase in salience , which denotes that less signiﬁcant but present attributes become important after combination , inferentional rea - soning to deduce the expected attributes of the combination , and extensional feedback to select features of remembered instances of the concept . A cognitive model for concept combinations based on quantum mechanics is described in [ 19 ] . Design methods using evolutionary computation , such as Ge - netic Algorithms ( GA ) , are expected to address many facets of con - ceptual design [ 20 ] . However , the analysis in [ 21 ] shows that circuit topologies synthesized using GA - based methods have sig - niﬁcantly different topological characteristics than manually de - signed circuits . Using hard - coded design rules can help in making the synthesized topologies more similar to human devised solu - tions [ 8 , 9 ] . However , modern research in biology and social sys - tems [ 22 , 23 ] suggests that the nature of the evolutionary mechanisms in nature is only partially captured by current evolu - tionary algorithms . In general , evolutionary methods used in cir - cuit design do not capture the interaction between groups of solutions , including grouping of speciﬁc design instances into broader design concepts , creation of design abstractions , combin - ing design features into new concepts , and inferring new design principles starting from a given set of design instances . Also , many issues still need to be clariﬁed to better understand how biological and social systems are capable of evolving new conceptual solu - tions [ 24 ] and what role group competition and collaboration plays in this process [ 24 ] . The paper has the following structure . Section 2 offers an over - view of the model , followed by the description of the concept structure in Section 3 . Section 4 presents the design methodology based on concept structures . Section 5 discusses two case studies for the model . Conclusions end the paper . 2 . Overview of the model There have been many studies on problem description in elec - tronic system and circuit design , including expression of functional and performance constraints [ 25 – 27 ] . Speciﬁcation methods in - clude different styles , i . e . algorithmic , structural , and declarative , which are applied at various levels of abstraction . Algorithmic descriptions deﬁne the sequence of activities ( e . g . , operations ) that are performed to achieve a required functionality . Structural descriptions express the topological interconnection of building blocks with basic functions , so that the overall functionality results from the composition of the building blocks . Finally , declarative speciﬁcations express the properties that unambiguously deﬁne a system . Our work does not concentrate on problem description , but in - stead considers that the functional and performance constraints of design problems are formulated as mathematical expressions be - tween input , output , and state variables . This corresponds to declarative descriptions . In the proposed model , algorithmic and Concept 1 v 2 T 1 T 2 Available P solutionNumerical Unkown Abstractionlevels combinations & Concept Incremental induction concept concept concept structure space structure structure grouping v Fig . 1 . Concept structure model and numerical solution space . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 115 structural descriptions could be part of the domain knowledge space as they represent implementations of certain constraints , hence solutions to the posed problems . The main goal of the proposed concept structure representation is to support design steps that resemble the cognitive activities performed during design innovations , like combining ideas ( fea - tures ) [ 17 , 13 , 10 ] and utilizing analogies and metaphors to spawn ideas of new solutions [ 28 – 30 ] . There is some similarity between design innovation and design reuse as both involve utilizing previ - ous knowledge and solutions to solve new problems . Traditionally , design reuse does not however change the semantics of the reused features while design innovations modify the semantics of the fea - tures with respect to the accomplished functionality and perfor - mance . Semantic modiﬁcations can also refer to different levels of abstraction and to distinct constraints that express the condi - tions ( approximations ) under which the behavior is considered to be correct . Hence , similar to cognitive models of human creativity and innovations [ 31 , 32 ] , the proposed design representation must include capabilities to perform design concept comparison , abstraction and instantiation , conditioning and un - conditioning , and representation restructuring . A suitable set of metrics must capture characteristics of the description , such as the ﬂexibility of a design to be combined with new features , or the typicality and versatility of a design feature . Fig . 2 presents the knowledge structuring process during de - sign . The starting knowledge set is described by a set of concepts , e . g . , existing circuit designs . New concepts are added to the set during the design process . Pairs of designs , i . e . concept i and concept j are compared to understand the similarities and differences of the designs with respect to their topology ( structure ) , electrical behav - ior , and performance . This step is analogous to feature alignment in cognitive models in psychology [ 33 – 35 ] . Feature alignment estab - lishes a correspondence between the features of two concepts and then evaluates the degree of similarity or dissimilarity between the corresponding features . Design similarities and differences are then utilized by the structuring step to produce an associative knowledge description that reﬂects the various design categories ( classiﬁcations ) as well as situations in which concepts have been used together to create design solutions . Categories have been known to be fundamental in knowledge description [ 36 – 38 ] . The ﬁrst structure type focuses on concept properties ( attributes ) , and the second structure considers the useful connections ( compo - sitions ) of concepts [ 11 ] . During design , the knowledge structure undergoes two main transformational processes , shown in the ﬁgure . Abstraction / instantiation uses the knowledge description to learn invariant as - pects on the design solutions , including templates , patterns , and constraints . The learned aspects are then used for abstraction and instantiation to modify the set of variables , features , and constraints of the design concepts used to build the knowledge structure . The approximation criteria used in concept comparison also change . For example , templates and patterns generalize the features of the individual designs into an encompassing concept that includes all common features of the design . Instantiation is the opposite process in which details are added to a given solution by replacing some of its building blocks with a more reﬁned description . Restructuring , the second transformational process , modiﬁes the perspective in knowledge structuring , such as the rel - evance of the concept features utilized in design comparison . Stud - ies on knowledge restructuring in psychology are offered in [ 39 , 40 ] . Fig . 14 presents the pseudocode of a circuit design methodology based on concept structure representations . 3 . Concept structure description Fig . 3 presents an overview of the concept structure model . The main elements of the model are attributes , concepts and instances , concept combinations , induction methods , and concept structures . Each of the elements is characterized by a set of speciﬁc metrics , shown as rectangles in the ﬁgure . (cid:2) Attributes deﬁne relations ( rel ) between variables ( vars ) for given conditions ( context ) . Similarity and uniqueness , two attri - bute features , are found based on distance function d applied to attribute pairs . (cid:2) Concepts represent sets of instances , which are design solutions to the problem deﬁnition or other concepts . In the model , a con - cept is deﬁned by its attributes , which are grouped into two sets , I and U . Set I ( Invariants ) describes attributes that deﬁne the nature of the concept , hence exist for all concept’s instances too . Set U ( Uniqueness ) are attributes that distinguish the con - cept from other concepts , thus are unique to the concept and possibly its instances . In addition , set E ( Enabling ) presents the constraints imposed to the attributes . Concept metrics are as follows . Variety is the diversity of a concept’s instances and is described by the instances’ uniqueness attributes . Distance ( dist ) between two concepts expresses the number of their dis - tinct attributes . Matched concepts have most of their attributes similar . The utility of a concept is the closeness of a concept to satisfying a problem deﬁnition . Concept novelty depends on the unique attributes of a concept that improve the closeness of the concept to the problem deﬁnition . (cid:2) Concept combinations combine the attributes of two concepts to produce a new concept in the concept space . Concept combi - nation reduces a concept’s distance to the problem description ( metric API ) or extends the attribute variable domains ( metric VDM ) . Flexibility is a concept’s capability to be combined with various sets of attributes to improve the concept’s utility in solving the problem . Constraining factor ( metric CF ) is the set Comparison Change ( approx . ) i concept j concept Abstraction / instantiation Restructuring structuringKnowledge detailingExtraction / Knowledge restructuring Relevance . . . . . . concept 1 M concept Similarity Dissimilarity descriptionKnowledge Add new concepts patterns & criteria Add templates , structuring criteria Features Variables Constraints perspective Change Add new Fig . 2 . Concept structure representation during design . 116 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 of concept combinations that are invalidated by an attribute’s inclusion into a concept . Bottleneck is a concept’s attribute that stops further reduction of the distance between a concept and problem deﬁnition . (cid:2) Induction generates new instances for a concept by using the existing instances to identify a method to produce more invari - ants and uniqueness sets ( for instances ) . (cid:2) Concept structure represents the related instances and con - cepts , concept combinations , and induction methods . The met - rics of a structure include typicality and versatility of the attributes that appear in different concepts , Expected Diversity ( ED ) and Expected Increase of Concept Space ( EICS ) for present - ing the concepts still possible to be created for a structure , and Concept Complexity Index ( CCI ) that predicts the effort in implementing a given concept as a design . The details of the concept space model are discussed next . 3 . 1 . Attributes Attributes characterize instances ( i . e . designs ) and concepts representing groups of instances . Attributes are deﬁned based on variables , which are physical properties ( of the instances ) that can be sensed through sensors and measurement equipments , e . g . , position , size , temperature , time , current , voltage , and so on . Every variable has values from a bounded domain : V i ¼ DOM 1 (cid:3) DOM 2 (cid:3) . . . DOM k ð 1 Þ The domain of variable V i is the Cartesian product of the domains DOM 1 , . . . , DOM k . Each domain DOM j can be explicit ( i . e . enumer - ated , numerical ) or implicit ( e . g . , speciﬁed by their properties , like the values that meet a certain condition ) . A variable is virtual if its domain is not yet speciﬁed , but becomes more speciﬁc during the design process . Attributes deﬁne associations ( relations ) between variables or other , already deﬁned , attributes . Attributes are triplets : ð v ars ; rel ; context Þ ð 2 Þ where ( i ) vars represents a set of variables or already deﬁned and named attributes , ( ii ) rel is a relation linking the variables in the set , and ( iii ) context are the conditions ( constraints ) under which the relation holds . A virtual attributes involves at least one virtual variable , or unspeciﬁed relation rel , or unspeciﬁed constraint context . In circuit design , depending on the nature of the involved vari - ables and relations between variables , attributes refer to the ( i ) de - sign topology , ( ii ) electrical circuit behavior , and ( iii ) circuit performance . Topology - related attributes use circuit nodes as vari - ables and the node connections as relations . For example , variables are nodal voltages and currents , and relations express Kirchhoff’s and Ohm’s laws . Behavior - related attributes have variables corre - sponding to the electrical signals of a design ( e . g . , state variables ) and relations representing the transfer functions between vari - ables . Performance - related attributes include variables that are cir - cuit parameters and performance attributes , and relations represent the dependencies among attributes , including design trade - offs . For example , such variables are circuit gain , bandwidth , slew rate , etc . and relations describe the trade - offs among these variables . Note that attribute constraints include all conditions re - lated to the variable domains , such as device operation conditions and constraints due to the application requirements . Example . Fig . 4a shows a basic V – I converter that produces output current I od proportional to input voltage V id . For transistors operating in saturation , the following attribute relates the output to the design variables : ðf I S ; V id ; V 1 ; ds ; V 1 ; gs ; V 2 ; ds ; V 2 ; gs ; K 1 ; K 2 ; I od g ; gain ¼ I od V id ¼ ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 2 I S K p V id ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 1 (cid:4) K 2 I S V 2 id s ; f V 1 ; ds > V 1 ; gs (cid:4) V t ; V 2 ; ds > V 2 ; gs (cid:4) V t ; K 1 ¼ K 2 ¼ K gÞ The attribute represents the involved design variable ( e . g . , bias cur - rent , voltages , and transistor sizes K ) , the gain performance ex - pressed as a relation between variables , and the context , which states that the two transistor operate in saturation and their sizes are matched . Deﬁnition ( distance between two relations ) . Let’s consider two mathematical relations rel 1 and rel 2 deﬁned over two non - identical sets of numerical variables vars 1 and vars 2 , respectively ( vars 1 - – vars 2 ) . The distance d between relations rel 1 and rel 2 is the total worst case difference between the two relations computed over their variable domains : d ð rel 1 ; rel 2 Þ ¼ X 8 v 2 CV max 8 v 1 2 DV 1 ; 8 v 2 2 DV 2 j rel 1 ð v ; v 1 Þ (cid:4) rel 2 ð v ; v 2 Þj ð 3 Þ where CV is the common domain of the common variables vars 1 - \ vars 2 , and DV 1 and DV 2 are the domains of the two difference sets , vars 1 (cid:4) vars 2 and vars 2 (cid:4) vars 1 , respectively . Fig . 4c illustrates the distance between relation rel 1 with variables v 1 , v 2 , and v 3 and relation rel 2 with variables v 1 , v 2 , and v 4 . Let’s consider two attributes A 1 = ( vars 1 ; rel 1 ; context 1 ) and A 2 = ( vars 2 ; rel 2 ; context 2 ) with numerical variables ( e . g . , sets vars 1 and vars 2 ) and with mathematical relations rel 1 and rel 2 . The next deﬁnition describes the conditions under which the two attributes are similar , hence share a common context C 1 , 2 for which their relations numerically differ by less than error (cid:2) while there are less than n distinct variables present in the two relations . < I , U , E > C − Typicality − Versatility − ED − EICS − CCI A 2 C n C j C 1 C i C 2 A 1 − Similar − Unique − API − VDM − Flexibility − CF − Bottleneck − Matched − Utility − Novelty − Variety Conceptstructure ( vars ; rel ; context ) C k Inductionmethod dist Concept Instances Attributes d combinationConcept Problemdefinition Fig . 3 . Overview of the concept structure model . I S V 1 , gs id V V 1 , ds V 2 , ds I S I S v 1 v 2 v 3 v 4 V 2 , gs 1 2 dist ( A , A ) K ( a ) 1 K 2 od I R id od I V ( b ) 1 K K 2 , ( c ) rel 1 rel 2 + commonregion Fig . 4 . ( a ) Design variables of basic V – I converter , ( b ) linear V – I converter , and ( c ) distance between two relations . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 117 Deﬁnition ( similar attributes ) . Given value n and error (cid:2) , attri - butes A 1 and A 2 are similar with respect to distance d , if the follow - ing three requirements are met : ( 1 ) There is a mapping that associates the variables in vars 1 and vars 2 , such that the number of unmapped variables for each attribute is less than n . ( 2 ) d ( rel 1 , rel 2 ) < (cid:2) ( 3 ) ( C 1 , 2 = context 1 \ context 2 ) – ; , the conditions in which requirements ( 1 ) and ( 2 ) are met . Attribute similarity is denoted as A 1 (cid:5) n , (cid:2) , d A 2 , or as A 1 (cid:5) A 2 for brevity . Deﬁnition . Attribute A 1 is more similar to attribute A than attri - bute A 2 is similar to attribute A , if ( i ) there are more mapped vari - ables between A 1 and A than between A 2 and A , and ( ii ) d ( rel 1 , rel ) < (cid:2) 1 and d ( rel 2 , rel ) < (cid:2) 2 with (cid:2) 1 < (cid:2) 2 . Deﬁnition ( unique attribute ) . An attribute is unique if it is not similar to any other attribute . A circuit design is a set of attributes . Similarly , problem deﬁnition h f , p i is a set of attributes f i and p j that express functional and performance requirements , respectively . A circuit design is a solution for the problem , if for every functional attribute f i 2 f there is a design attribute A k such that A k (cid:5) f i , and for every performance attribute p j 2 p there is a design attribute A m such that A m (cid:5) p j for the variable subdomains that meet the constraints of the attri - butes’ contexts . 3 . 2 . Concepts Deﬁnition ( concept ) . A concept represents a set of one or more instances ( designs or other concepts ) with the following proper - ties : ( i ) the instances share a non - empty set of common attributes ( called Invariants ) , ( ii ) the concept can be distinguished from other concepts ( representing other design sets ) through at least one common attribute , i . e . these attributes are unique for the concept ( called Uniqueness ) , ( iii ) its attributes can be conditioned by a set of enabling conditions , and ( iv ) for concepts with multiple attri - butes , there is at least one relation between the variables of each attribute and the variables of another attribute , e . g . , there are no isolated attributes or isolated attribute clusters . Concept C is denoted as C = h Invariants , Uniqueness , Enabling i or C = h I , U , E i . Attr ( C ) is the set of all attributes of C . D i are instances of concept C . The above deﬁnition is mathematically described as follows : ð I ð C Þ ¼ f A i j A i 2 \ 8 D i 2 C Attr ð D i ÞgÞ – ; ð 4 Þ ð U ð C Þ ¼ f A i j A i 2 I ð C Þ ^ A i R I ð C k Þ ; 8 C k – C gÞ – ; ð 5 Þ E ð C Þ ¼ f e j9 A i 2 Attr ð C Þ s : t : e ! context A i g ð 6 Þ 8 A i 2 Attr ð C Þ ; 9 A j 2 Attr ð C Þ s : t : A i – A j ^ v j 2 v ars A i \ v ars A j – ; ð 7 Þ Invariants deﬁne patterns that are speciﬁc to all instances of the concept . Enabling conditions include constraints deﬁning the con - text of the concept . The connectivity set Con ( A i ) of attribute A i is the set of all attributes that are related to attribute A i . Example . Fig . 5 shows three concepts : concept 1 has attributes A 1 , A 2 , and A 0 . Its invariant is I = { A 1 , A 2 } , its uniqueness set is U = { A 0 } , and its enabling set is E = { cond 1 } , the conditions under which the three attributes hold . concept 2 and concept 3 , which are instances of concept 1 , share attributes A 1 and A 2 . The uniqueness set for concept 2 is { A 3 } and its set E contains cond 2 , which deﬁnes the context of the three attributes of the concept . The uniqueness set of concept 3 is { A 4 } and its set E is { cond 3 } . Note that the contexts of attributes A 1 and A 2 for the two concepts can be different from the context of the respective attributes for concept 1 , thus cond 1 – cond 2 , cond 3 , but cond 1 \ cond 2 – ; and cond 1 \ cond 3 – ; . Lemma 1 . Let’s consider concept C B to be an instance of concept C A ( C A is an abstraction of C B ) . Then , there are m P 1 invariant attributes of concept C A similar to the attributes of C B , and concept C B has dissim - ilar attributes that involve variables of the m similar attributes . Proof . The ﬁrst part of the lemma results directly from the deﬁni - tion of a concept . Concept C B must also include at least one unique attribute that separate it from concept C A . The connectivity requirement requests that the unique attribute has common vari - ables with invariant attributes . If there are multiple uniqueness attributes then at least one of them must have common attributes with the invariant attributes . Otherwise , the set of unique attri - butes is isolated from the invariants . For example , the dissimilar attributes of an instantiated concept restrict the domain of some variables of invariants to a smaller range compared to the domain of the abstract concept ( e . g . , to improve the matching of its performance attributes ) . The con - straining attribute allows distinguishing the concept from other concepts instantiated from the same concept . h Deﬁnition ( variety ) . The variety ( V ) of concept C is the reunion of all its instances’ unique attributes that are not similar with the attributes of the invariant set of concept C . V ð C Þ ¼ [ D i 2 C f A i 2 U ð D i Þj 8 A j 2 I ð C Þ ! A i ¿ A j g ð 8 Þ The variety of concept 1 in Fig . 5 includes attributes A 3 and A 4 . The variety of a concept induces a classiﬁcation criterion ( CL ) according to which the related instances can be distinguished . Entropy [ 41 , 42 ] can be used as a measure to characterize the diversity of a concept’s variety . Moreover , there can be multiple concept structuring corresponding to different entropy functions reﬂectingvariousorganizationcriteria . Theinsightonthevarietyset ( i . e . mining patterns in the set ) can be utilized to predict other unique attributes for the concept instances , such as through induction method X . More details on induction are offered at the end of this subsection . Deﬁnition ( distance between two concepts ) . The distance dist ( C 1 , C 2 ) between two concepts C 1 and C 2 is the number of dissimilar ( not similar ) attributes of C 1 and C 2 . Mathematically , this deﬁnition is expressed as follows : dist ð C 1 ; C 2 Þ ¼ Card ðf A i 2 Attr ð C 1 Þj A i ¿ B j ; 8 B j 2 Attr ð C 2 ÞgÞ ð 9 Þ 1 1 1 , A 2 A I : 1 , A 2 : I A U : A E : cond concept 2 3 2 1 , A 2 A I : U : A E : cond concept 3 4 3 0 U : A E : cond concept Fig . 5 . Concept descriptions . 118 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 The distance deﬁnition is similar to semantic distance discussed in cognitive modeling , e . g . , [ 43 ] . The semantic distance between two concepts is equal to the number of non - aligned features of the con - cepts . Two concepts are sufﬁciently different , if the distance be - tween the concepts is greater than a threshold value THV . Example . Let’s consider concepts concept x and concept y in Fig . 6a . Both are instantiated from concept 1 but in addition one is also hav - ing attributes from concept 2 . dist ( concept x , concept y ) > THV and dist ( concept a , concept b ) > THV as the four concepts are distinct . Deﬁnition ( matched concepts ) . Given value N , two concepts are matched with respect to value N , if the number of their dissimilar attributes is less than N , and ( C i , j = context i \ context j ) – ; , where C i , j , the common context , is computed for all similar attributes A i and A j . The deﬁnition is expressed mathematically as follows : dist ð C 1 ; C 2 Þ þ dist ð C 2 ; C 1 Þ 6 N ð 10 Þ 8 A i 2 C 1 ; A j 2 C 2 : A i (cid:5) A j ! context i \ context j – ; ð 11 Þ Two matched concepts are identical within error (cid:2) for domain \ C i , j . Note that the distance between two concepts and concept matching depend on the relation distance function d , dimension n , and error (cid:2) used to decide attribute similarity . The three elements can change during the design cycle in Fig . 2 . Deﬁnition ( concept utility ) . For a problem description h f , p i , the utility of concept C describing a solution of the problem is the inverse of the distance between the problem description and concept : Utility ð < f ; p > ; C Þ ¼ 1 dist ð < f ; p > ; C Þ ð 12 Þ ( The distance between the problem description and a concept is computed using expression ( 9 ) as the description is a collection of attributes . ) Utility is the closeness of a concept’s attributes to the description . Circuit simulators are often used to evaluate circuit functionality and performance , and to describe a circuit’s utility with respect to applications that value processing preciseness and tolerance to non - idealities [ 1 , 9 , 25 ] . Lemma 2 . Let’s assume that designs D i are instances of concept C , which is a solution to the problem description h f , p i . Then , the attri - butes of the invariants sets of designs D i include attributes similar to those in sets f and p . The attributes of the uniqueness set of D i improve the similarity of the invariants attributes to the attributes in f and p , and / or add new functionality and performance attributes , but that are not part of the description . Each uniqueness attribute is connected to at least one invariant attribute . Proof . Let’s assume that the lemma is incorrect . Then , there is an instance D i that has a uniqueness attribute A u that is similar to a functional or performance attribute of the problem description , A pr . Attribute A u is not among the invariant attributes of the other instances . Hence , the other design instances of the concept are not actually implementing the problem description as there is no attri - bute similar to A pr . Moreover , concept C cannot be a solution to the problem description . This contradicts the initial assumption . Also , according to the connectivity requirement , uniqueness attributes relate to at least one of the functional or performance require - ments , hence this connection improves the satisfaction of the requirement . Besides , it can introduce a new functional or perfor - mance attribute , but which is beyond the current h f , p i . Finally , the connectivity requirement imposes that each unique attribute is related to at least one invariant attribute . The lemma suggests that the invariant attributes of all designs forming a concept characterize the design approach for a problem while the uniqueness attributes customize that approach to satisfy better the problem requirements . Producing a new problem description and a novel solution for that description requires that some uniqueness attributes become part of a new invariant attribute set . Thus , design methodologies that target creation of novel conceptual solutions must incorporate uniqueness attributes into a new concept’s invariants set . Concept combination , dis - cussed in Section 3 . C , is such a method . Open ended problems do not have a complete problem description h f , p i with fully speciﬁed attributes f i and p j . Instead , the utility might be characterized by tuple h u 1 , u 2 , u 3 , . . . i , in which each component u i describes the importance of attribute f i or p j that relates to the needs of the problem . For example , high frequency mobile applications value high circuit bandwidth and low supply voltages , without indicating speciﬁc values that need to be achieved . But the components u i for bandwidth and voltage supply have a high importance . Another possibility is to estimate u k based on customer need analysis , such as the Kano model [ 44 ] . Future work will consider the implications of partial problem descriptions on the proposed model . h Deﬁnition ( concept novelty ) . Given problem description h f , p i and set S of concepts describing problem solutions , the novelty of con - cept C , a problem solution , compared to the concepts in set S is the set of unique and useful attributes of concept C . An attribute is use - ful if it reduces the distance of the concept to h f , p i . Novelty index ( NI ) is the cardinality of the set of novel attributes . The mathematical description of concept novelty is as follows : No v elty ð C Þ ¼ f A i 2 Attr ð C Þj A i R Attr ð C i Þ ^ dist ð < f ; p > ; C Þ < dist ð < f ; p > ; C (cid:4) A i Þ ; 8 C i 2 S g ð 13 Þ Deﬁnition ( induced concepts ) . Let’s assume that concepts C 2 = h I 2 ; U 2 ; E 2 i and C 3 = h I 3 ; U 3 ; E 3 i are instances of C 1 = h I 1 ; U 1 ; E 1 i ( see Fig . 7a ) . Also , let’s assume that there is method X to obtain h I 2 , U 2 i = X ( I , U , E ) and h I 3 , U 3 i = X ( I , U , E ) . Then , concept C x is induced , if the following conditions hold : ( 1 ) vars # vars x ( 2 ) h I x , U x i = X ( I , U , E ) ( 3 ) I # I x ( 4 ) U x – ; ( 5 ) U x \ { I [ I 1 [ I 2 } = ; ( 6 ) The problem description h f , p i and the constraints of concept C x are not conﬂicting . Induction assumes that the existing information on invariants and attribute variety is sufﬁcient to identify method X to construct more instances . A typical ( b ) concept x concept 2 1 concept I < 1 , U 1 , E 1 > I < , U , E > 2 2 2 I < , U , E > x x x ( a ) concept y concept a concept b dist dist Fig . 6 . ( a ) Distance between concepts and ( b ) concept combinations . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 119 situation is that in which X includes the complementary operations , like summation and difference , integration and differentiation . Example . The responses in Fig . 10f and g are induced using com - plementarities from the responses in Fig . 10c and d , respectively . 3 . 3 . Concept combinations Deﬁnition ( concept combinations ) . Given concepts C 1 = h vars 1 ; rel 1 ; cont 1 i and C 2 = h vars 2 ; rel 2 ; cont 2 i , the combination of C 1 and C 2 is concept C x = h vars x ; rel x , cont x i that meets the following conditions : Attr ð C x Þ \ Attr ð C 1 Þ – ; ^ Attr ð C x Þ \ Attr ð C 2 Þ – ; ð 14 Þ I ð C x Þ \ f I ð C 1 Þ [ I ð C 2 Þg – ; ð 15 Þ U ð C x Þ – ; ^ U ð C x Þ \ I ð C 1 Þ ¼ ; ^ U ð C x Þ \ I ð C 2 Þ ¼ ; ð 16 Þ E ð C x Þ – ; ð 17 Þ The last condition indicates that enabling conditions of C x are feasi - ble , including the constraints of the contexts of the attributes ac - quired from C 1 and C 2 . The deﬁnition indicates that the combined concept receives attributes from both concepts , and there must be invariant attributes of C x obtained from the invariants of at least one of the concepts C 1 or C 2 . There can be invariants that are not in I ( C 1 ) or in I ( C 2 ) . Also , there are uniqueness attributes that distinguish concept C x from C 1 and C 2 . Fig . 6b illustrates concept combination . The above deﬁnition is consistent with schemata model which assumes that one of the concepts is the modiﬁer and the other concept the modiﬁed [ 17 ] . Example . Linear V – I converter circuits reduce the output non - lin - earity by changing the relation between output and design variable I S . For example , the circuit in Fig . 4b is a combination of the design solution in Fig . 4a and the concept representing a resistor . The combined concept implements resistive degeneration . The new attribute of the combined concept changes the original input – out - put relation to the differential output current performance I od ¼ V id R , where resistance R is a new variable of the combined concept . Similar to models in the cognitive psychology literature [ 11 , 13 ] , there are particular cases of concept combinations . Relation - based combinations are characterized by I ( C 1 ) [ I ( C 2 ) # I ( C x ) , where concept C x is the combination of concepts C 1 and C 2 . The conditions indicates that the two combined concepts are preserved in the new concept C x by being linked with each other . If this condition is not met , but I ( C 1 ) # I ( C x ) ( or I ( C 2 ) # I ( C x ) ) then concept C 1 ( or ( C 2 ) ) is the head concept , while concept C 2 ( or ( C 1 ) ) is the modiﬁer . This kind of combinations are called property - based . Not all attributes of a combined concept must be obtained from the two initial concepts . New attributes h var n ; rel n , context n i can be added , but the following conditions must be met : ( i ) the new attribute shares variables with the attributes of the initial concepts C i or C j ( vars n \ vars i – ; _ vars n \ vars j – ; ) , ( ii ) thereisanon - empty commoncontextbetweenthenewattributeandtheotherattributes ( context n \ context i \ context j – ; ) , and ( iii ) the new attribute is not similar to any attribute of the initial concepts . Such attributes are called emergent . New variables can be part of emergent attributes . Lemma 3 . Let’s consider that concepts C 1 and C 2 are instantiated from the same concept C , and that concept C x is combined from con - cepts C 1 and C 2 ( as in Fig . 7 b ) . Then , concept C x includes at least one of the uniqueness attributes of C 1 or C 2 , Attr ( C x ) \ { U ( C 1 ) [ U ( C 2 ) } – ; . Proof . Let’s assume the contrary . For example , concept C x does not include any of the unique attributes of concept C 2 . Then , concept C x can be directly instantiated from concept C 1 making the combina - tion unnecessary , which is contrary to the assumption . A similar reasoning proves that C x includes at least one attribute of C 1 . h Example . Concept C x in Fig . 7b gets attributes from concepts C 1 and C 2 . The attributes of C x must not conﬂict with each other , otherwise the context is empty . Hence , the unique attributes of C 1 and C 2 should not conﬂict with each other as the two concepts share the same invariant set . Moreover , the uniqueness attributes must produce different kinds of improvements in the matching of the problem description , and / or add new kinds of functionality to the function . Depending on their purpose , concept combinations are of two kinds , enabling and deﬁning . Enabling concepts inﬂuence the context in which other concepts behave , but do not change the identity of the concepts . They describe that the attributes of a concept are used to control ( reﬁne ) more speciﬁc attributes for the other concept . For example , the attributes of the initial concept relax some attribute contexts of another concept , thus potentially increasing of the utility of the combined concept . Deﬁnition ( enabling ) . Concept C 2 is enabling for concept C 1 , if it has attributes that share variables with the contexts of the attri - butes of concept C 1 , and those variables can be used to modify the context . Deﬁning relations state that a concept changes the relations of the attributes of another concept , hence modiﬁes the nature of the concept . Introducing a new deﬁning relation is justiﬁed only if it reduces the distance of the concept to at least one function or performance attribute of the problem description . Deﬁnition ( deﬁning ) . Concept C 2 is deﬁning for concept C 1 , if it has attributes that share variables with at least one relation com - ponent rel of the attributes of concept C 1 , and the variables modify the relation . Aggregated Performance Increase ( API ) describes the improve - ment of the matching between problem description h f , p i and the combination of concept C and attribute set SA ( the combination is denoted as Comb ( C , SA ) ) . API offers a cumulative view on the matching improvement . As some attributes improve more than others , API considers the normalized improvement . Deﬁnition ( API ) . API is the product of the normalized attributes that improve the matching between problem description and a concept combination : API ð < f ; p > ; C ; Comb ð C ; SA ÞÞ ¼ X 8 Imp j Y 8 a i 2 Imp j d ð a i ; A i Þ d a i ; A combi (cid:3) (cid:4) ð 18 Þ ( b ) C y C x C 3 C 2 C 1 inducedconcepts ( a ) C C C C C x 1 2 3 Fig . 7 . ( a ) Induced concepts and ( b ) relations between concepts . 120 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 Sets Imp j # h f , p i are maximal sets of attributes of the problem description , such that the attributes A Combi of the combined concept have better similarity to the corresponding attributes a i in Imp j than the attributes A i of the initial concept C . The metric does not con - sider the attributes that are worse for the combined concept . Example . Let’s consider the linearity of gain G m of the V – I con - verter in Fig . 8a , gain G m = d I od / d V id , where V id is the differential input voltage and I od is the differential output current . The gain is equal to G m ¼ ﬃﬃﬃﬃﬃﬃﬃ 2 I S K p 1 (cid:4) KV 2 idIS (cid:3) (cid:4) ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 1 (cid:4) KV 2 id 2 IS q . The linearity depends on the two variables as they appear in the expression of the V id coefﬁcient . The cross - coupled design in Fig . 8b results by combining the previ - ous circuit with itself . Its gain is equal to G m = G m 1 (cid:4) G m 2 , where G m 1 and G m 2 are deﬁned by the previous equation for each of the two cross - coupled designs . The gain now depends on four design variable , I S 1 , I S 2 , K 1 , and K 2 . If K 1 K 2 (cid:3) (cid:4) 3 = 2 ¼ I S 1 I S 2 (cid:3) (cid:4) 1 = 2 and K 1 – K 2 and I S 1 - – I S 2 , the gain becomes perfectly linear G m ¼ ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 2 I S 1 K 1 p (cid:4) ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ 2 I S 2 K 2 p with no non - linear term present . Deﬁnition ( VDM ) . Variable Domain Modiﬁcation ( VDM ) captures the extension of the variable domains after concept combination . VDM is deﬁned as follows : VDM ð C ; Comb ð C ; SA ÞÞ ¼ X 8 Con j ð C Þ Y 8 v i 2 Con j ð C Þ Dom ð v Combi Þ Dom ð v i Þ ð 19 Þ Set Con j ( C ) are the maximal subsets of variables v i of the initial con - cept C , such that the domain of each variable v i increases in the combined concept Comb ( C , SA ) as compared to concept C . The size of the domain of variable i of the combined concept is Dom ð v Combi Þ . Dom ( v i ) is the variable domain in concept C . Example . In Fig . 9a , the basic V – I converter ( Fig . 4a ) has three attributes with respect to requirements Power , G m and Input Range ( K are transistor sizes ) : ( i ) bias current I S determines Power and is related with V DD , ( ii ) I S determines the gain G m and is related with variable K , and ( iii ) I S determines the Input Range and is related with K . The concept combination representing resistive source degeneration ( Fig . 4b ) introduces two new attributes , one indicat - ing that variable R determines G m and has no correlations to other variables , and second showing that variable R determines Input Range and is correlated with both K and I S . Attribute ( ii ) of the ini - tial concept is eliminated , and attribute ( iii ) now also includes a correlation to the new design variable R . The domain of variable I S in the original circuit depends on all three performance require - ments . For the new circuit , gain G m does no longer correlate to the domain of I S ( G m = 1 / R ) , and I S is only constrained by Power and Input Range . This simpliﬁes the constraints between variables . The ﬂexibility of concept C is the set of attributes that improve API and VDM of concept C when combined with that concept C . Flexibility depends on the variable subsets of the variables in the invariants and uniqueness attributes of C , the matching between problem description h f , p i and concept C , the number of extra variables that can be added to improve matching , the domain of extra variables , the number of relations that improve matching , and the expected utility of any new relation that has never been used by the attributes of concept C . Note that variety is the subset of ﬂexibility attributes that have already been combined with the concept . Deﬁnition ( concept ﬂexibility ) . The ﬂexibility of concept C = h I , U , E i is the number of attribute sets SA that can be combined with concept C , so that the attributes in SA are connected to the attri - butes of C , there are no conﬂicts between the attributes of SA and the attributes and constraints of concept C , and the new attributes improve the matching of C and the problem description h f , p i and / or relax the constraints of the attributes and set E ( hence , improve utility ) : F ð C Þ ¼ f SA j API ð < f ; p > ; Comb ð C ; SA ÞÞ > 0 _ VDM ð C ; Comb ð C ; SA ÞÞ > 0 g ð 20 Þ Comb ( C , SA ) is the combined concept of C and set SA . Flexibility in - dex ( FI ) is the cardinality of the ﬂexibility set . Design ﬂexibility has been traditionally deﬁned as the capabil - ity of a design solution to meet a speciﬁcation described as a bounded range [ 45 , 46 ] . This deﬁnition considers that a design includes a static set of attributes that can be resized to modify the performance of the design . Concept ﬂexibility extends the deﬁni - tion by allowing that new attributes are added to a concept to improve its matching to functionality and performance . The above deﬁnition is also useful for open ended problems as it refers to improvement instead of bounded speciﬁcation ranges , which might not be available for open ended problems . Concept ﬂexibility refers only to property - based combinations , in which concept C is the head and the combined attributes from set SA are modiﬁers to either enable , if the variable domains are relaxed , or to deﬁne , if there is a better matching to the problem description . Example . Fig . 10 illustrates concept ﬂexibility . The top concept in Fig . 10a corresponds to the problem description h f , p i , which is to produce a linear output y for input x . The domains of variables x and y are D x and D y , respectively . The ﬁrst solution is shown in Fig . 10b and has y in quadratic relation with x . Hence , the initial domain of variable x is reduced to D 0 x , so that the error from the desired linear relation is within error (cid:2) , thus is acceptable for the description . The left most concept in Fig . 10a corresponds to this case . The concept in Figure ( c ) includes an additional variable c , which re - scales the quadratic function after its error is too large by subtracting the value (cid:4) D from the input . This solution has a lar - ger domain for variables x and y . The concept can be further expanded by adding additional variables c i that adjust the input for successive exceeding of the acceptable error by subtracting multiple D ’s from the input . The concept in Figure ( d ) uses one more additional variable , d , to control through value C the position of point x 0 at which the quadratic and linear functions meet . The new variable offers additional control to match the problem description . Finally , the concept in Figure ( e ) has a different domain D 00 x for variable x . Combinations ( b ) – ( e ) are all deﬁning because they change the relation between input and output . In addition , combinations ( c ) – ( e ) are also enabling as they condition the relation that subtracts from the input . ( b ) V id I od I S1 I S2 K 2 K 2 K 1 K 1 I S I od V id K K ( a ) Fig . 8 . Performance changes in concept combination : ( a ) initial circuit design and ( b ) combined concept . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 121 Fig . 11 presents the procedure to estimate concept C ’s ﬂexibil - ity . Inputs are the problem description h f , p i , the set SBR of basic relations , the set S of existing concepts , and concept C . The output is ﬂexibility F . First , it ﬁnds set VS of all variable subsets of concept C ( the variables of C’s attributes ) . Then , for each variable subset V 2 VS , the procedure analyzes if adding new variables and relations between the variables in set V and the new variables improves API and VDM while factor CCI ( design effort ) is accept - able . ( The deﬁnition of CCI is given at the end of the section . ) Set Cb is a list of all newly generated concepts . The relations of the new attributes are considered from three sources : ( 1 ) In the pseudocode labeled as combinations ( 1 ) , relations rel p , already utilized in instances of other concepts C k 2 S , are used to create the new attributes a x . ( 2 ) In the pseudocode labeled as combinations ( 2 ) , relations from the set SBR of basic relations ( e . g . , those in Fig . 10 ) are used to link the variables . This source resembles trial - and - error , but only considers a small number of variables to be linked together and tackles a precise need , i . e . improving the matching of the concept and problem description or relaxing speciﬁc con - straints . The combined concepts that do not improve API or relax VDM are removed from set Cb . ( 3 ) New concepts are created through induction method X . The concept generation process continues until no more concepts are added to set Cb . Example . Let’s assume that the concepts in Fig . 7a have the fol - lowing variables : C has variables v 1 and v 2 , C 1 has variables v 1 , v 2 and v 3 , and C 2 has variables v 1 , v 2 and v 4 . Also , let’s assume that the set of basic relations SBR = { F , G } , so that F ( v 2 , v 3 ) is valid for C 1 and G ( v 1 , v 2 , v 4 ) is valid for C 2 . Then , the concepts produced in step combinations ( 2 ) include all situations that use function F to connect two variables , e . g . , F ( v 1 , v 2 ) , F ( v 1 , v 3 ) , F ( v 2 , v 4 ) , and so on , and all combinations that utilize function G to connect three vari - ables , i . e . G ( v 2 , v 3 , v 4 ) , G ( v 2 , v 3 , v 4 ) , etc . To keep the complexity of this step low , combinations based on basic relations have to involve only small number of variables and serve a precise need . Deﬁnition ( constraining factor ) . For concept C , the constraining factor ( CF ) of attribute set SA is the difference F ( C ) (cid:4) F ( C (cid:4) { SA } ) , the ﬂexibility reduction due to attribute set SA . CF describes the attribute sets that cannot be added to concept C because of attribute set SA . Deﬁnition ( bottleneck ) . Attribute set SA is the bottleneck ( B ) of concept C , if its CF is equal to F ( C ) , hence the concept’s API or VDM cannot be further improved due to set SA . 3 . 4 . Concept structures The associations between concepts form concept structures that express the knowledge domain available in the set of circuit de - signs . The upper level concepts in a structure include attributes that relate to the main functional and performance requirements of the problem description . These attributes deﬁne that the upper level concepts are conceptual solutions to the problem as they are invariants that also exist for the related instances . Lower level con - cepts include new attributes that produce performance improve - ments or new , but secondary , functions . Lemma 4 . The number of invariant attributes is higher for lower level concepts in a concept structure . Proof . The proof results directly from the observation that an instantiated concept includes all invariant attributes of its parent concept . h Lemma 5 . The number of uniqueness attributes ( thus , variety ) ﬁrst increases then decreases with the top - down traversal of the structure . I S domain bounded by Power , Input Range & G m Power Input Range G m G m not by domain bounded by Power , Input Range & I S Power Input Range simple diff . pair transconductor added resistive degeneration ( b ) G ( a ) m Fig . 9 . Variable domain modiﬁcation after concept combinations . and ( d ) y y : D’ x x : D’ y y : D’ x x : D’ −Δ c y y : D’ x x : D’ c x : D x y : D y −Δ y y : D’ c1 −Δ −Δ c d y y : D’ x x : D’ D x x D’ D’ y D x x0 x D’’ y x D x D x D x D x x D’’ < f , p > ( a ) x x : D’ c2 c3 Γ− Δ− x D y y x y variable c extra extra variable d x y x y ( c ) ( d ) ( b ) ( e ) ( f ) ( g ) x y induced by ( c ) induced by ( c ) Fig . 10 . Concept ﬂexibility . 122 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 Proof . Starting from the more abstract concepts , the variety increases initially as new invariants and variables are introduced , thus creating the opportunity for more variable subsets to be linked through new relations . The variety decreases when the already introduced constraints do not allow more new relations for the variables or there is no signiﬁcant improvement in API . Thus , the number of additional attributes per level decreases at a certain point as new relations overconstrain the problem , hence limiting the number of feasible solutions . The increase in number of invariant attributes is also less while traversing the structure from the top to the bottom . The above conclusions are consistent with observations made by experimental studies in cognitive psychology [ 18 ] . As the upper levels have less invariant attributes , the similarity between the concepts instantiated from the same abstract concept have lower similarity as compared to the concepts at lower levels . The ratio of similar and dissimilar attributes is higher at the abstract level , which is also true for concept combinations in general [ 43 ] . Dissimilarity is likely to increase as new specializing attributes are added to concepts at lower levels . For the lowest levels , dissim - ilarity is less as there are less opportunities for more specialization . The uniqueness attributes act as modiﬁers of invariant attributes , which are similar to head concepts [ 17 ] . Concept typicality indicates the likelihood of an attribute to be present in a design solution . Typical attributes are more likely to be part of the solution as they capture the main characteristics of the problem description . h Deﬁnition ( typicality ) . For concept structure CS , the typicality of an attribute is the frequency of the attribute’s inclusion in the con - cept invariants in the structure . The typicality of a concept is the sum of its attributes’ typicality . The mathematical description of attribute A i ’s typicality is as follows : Typicality ð CS ; A i Þ ¼ Card ðf C i 2 CS j A i 2 I ð C i ÞgÞ N total ð 21 Þ N total is the total number of concepts in structure CS . Versatility is the capability of an attribute set to improve the matching ( thus , reduce distance ) of concepts in structure CS to problem description h f , p i . Deﬁnition ( versatility ) . For concept structure CS , the versatility of attribute set SA is the number of concepts that improve their matching to problem description h f , p i due to attributes in SA . Mathematically , versatility of attribute set SA is expressed as follows : Versatility ð < f ; p > ; CS ; SA Þ ¼ Card ðf C i 2 CS j SA R C i ^ dist ð < f ; p > ; Comb ð C i ; SA ÞÞ < dist ð < f ; p > ; C ÞgÞ ð 22 Þ Deﬁnition ( EICS ) . Expected Increase in Concept Structure ( EICS ) represents the new concepts that can be created using structure CS . The resulting structure is called closure . The mathematical description of EICS is as follows : EICS ð CS Þ ¼ [ C i 2 CS f F ð C i Þg ð 23 Þ where ﬂexibility F ( C i ) is computed for all concepts C i in structure CS . Expected Diversity ( ED ) indicates how much of the possible concept combination space of concept C is unexplored . The possible concept combination space represents the ﬂexibility of the concept . The explored space corresponds to the instances of concept C . Deﬁnition ( ED ) . ED is the difference between the ﬂexibility and the varieties of concept C and all its instances D i that originated at C : Fig . 11 . Procedure to estimate concept ﬂexibility . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 123 ED ð C Þ ¼ F ð C Þ (cid:4) V ð C Þ (cid:4) X 8 D i V ð D i Þ ð 24 Þ Complexity characterizes the difﬁculty of ﬁnding a design solution that matches the problem description h f , p i . Deﬁnition ( concept complexity ) . The complexity of concept C is the effort required to ﬁnd a sequence of instantiated concepts : Seq ¼ C ; C 1 ; C 2 ; C i ; C i þ 1 ; . . . C n ð 25 Þ such that the following conditions are met : ( 1 ) Distance dist ( h f , p i , C n ) < Acc ( Acc indicates that C n matches well the problem deﬁnition ) . ( 2 ) C i + 1 = Comb ( S i , SA ) _ C i + 1 is induced by concept C j , where j < i ( C i + 1 is a combination of its previous concept C i in the sequence or is induced by a preceding concept C j ) . SA is an attribute set . Providing a mathematical description of concept complexity is difﬁcult as it depends not only on the characteristics of the problem deﬁnition , the available concepts in the concept structure but also on the available design strategies to ﬁnd a solution . A strategy must identify the sequence of concepts that solve the problem . Instead of giving a mathematical description of concept complexity , the model considers that the design effort increases with the complexity of the solution space , including the number of variables and constraints , the type of additional relations that can be added to a current design solution , the non - linearity of the relations , the number of trade - offs , and variable domains . A similar approach to estimate the solving effort is presented in [ 47 ] . It approximates the problem non - linearity as the minimum degree of the approximating Chebyshev polynomials , which are then used to predict the problem complexity . Deﬁnition ( CCI ) . Concept complexity index ( CCI ) considers that concept complexity decreases with three aspects : ( i ) if variables are correlated in small groups , e . g . , every concept attribute involves only a small number of variables , ( ii ) if each variable inﬂu - ences a reduced number of concept attributes , and ( iii ) if attribute relations and constraints are mainly linear . CCI of concept C is mathematically expressed as follows : CCI ð C Þ ¼ 1 P 8 A i 2 C P v j 2 v ars ð A i Þ lin ð v j ; p i Þ T ð A i ; v j Þ ð 26 Þ where A i are attributes of concept C , and v j are variables of attribute A i . Function lin captures the linearity of variable v j in relation rel and context of attribute A i . Expression T ð A i ; v j Þ ¼ P 8 A k ; v j 2 A i \ A k lin ð v j ; p k Þ characterizes the linearity of all attributes A k , which have a common variable v j with attribute A i . Requirements ( ii ) and ( iii ) are modeled through terms lin and T . Requirement ( i ) results from the fact that the denominator of CCI is larger as the number of variable subsets is higher due to correlating the variables in small sets . Concept combinations change the complexity of the original concept as the natures of relations and constraints are modiﬁed . The complexity change is D CCI = CCI ( C x ) (cid:4) CCI ( C ) , where C x is the combined concept and C is the original concept . Deﬁnition . The importance of combining two concepts is deﬁned by the maximum ﬂexibility gain F ( C x ) (cid:4) F ( C ) for all possible con - cept combinations C x , and by the maximum D CCI , the maximum reduction in complexity , hence the expected design effort reduction . Finally , note that instances based on multiple concepts can introduce new , implicit classiﬁcation criteria , thus can introduce new induction methods X . This can cause restructuring the concept structure , if concepts are differentiated better or different structuring facets are exposed . For example , entropy can be used as a metric to capture the diversity of circuit features . An entropy - based classiﬁcation criterion to automatically generate concept structures is discussed in [ 48 ] . Example . Fig . 12a shows criterion ( CL ) used to distinguish con - cepts C 2 , C 3 , and C 4 . However , there can be more criteria as shown in Fig . 12b – d . Criterion CL 1 in Fig . 12b and c distinguishes concept C 2 from concept C ⁄ . C ⁄ has as instances concepts C 3 and C + , which are distinguished by criterion CL 2 . Also , C + has as instances con - cepts C 4 and C 5 differentiated by criterion CL 3 . Similar concepts and criteria are introduced for the structures in Fig . 12c and d . 4 . Concept structure - based circuit design 4 . 1 . Overview This section presents a design methodology for incremental cir - cuit topology reﬁnement based on reasoning . The methodology is an application of the proposed concept structure model . The meth - odology considers that there exists a set of available topologies that offer a sufﬁciently comprehensive sampling of the conceptual space with respect to related abstractions and instances , including the variety of the instances available for each concept . New infer - ence rules X and concept combinations are identiﬁed to extend the current concept space by constructing the closure of the existing designs . The space outside the closure can be further explored by producing new attributes that link variable clusters that have not yet been related by the present concept attributes through basic relations or relations present in the attributes of other concepts . Conceptually , the methodology identiﬁes the least abstract con - cept in the structure that best matches the problem description h f , p i , hence is distance - wise ( dist ) closest to the problem and does not include bottlenecks that prevents it from further improving the matching to the problem . Then , instances of the concept are cre - ated until obtaining the needed matching to the problem deﬁnition by ( i ) using induction rules for various concepts , ( ii ) combining concept attributes , ( iii ) creating new abstractions starting from no - vel groupings of the existing design instances , and ( iv ) ﬁnding new relations between previously unrelated attributes . The concept structure supports the four reasoning activities by indicating the ‘‘directions’’ along which new combinations created or novel in - ducted concepts are identiﬁed . Note that each of the four above reasoning steps might have to explore an exponential number of alternatives , thus can be NP complete . For example , new abstractions correspond to all possi - bilities of grouping the available instances . Moreover , the concept structure changes during the design process as additional concepts might be generated through induction , combination , abstraction , and instancing . For example in Fig . 13a , new concepts are created through concept combinations , i . e . concepts conc 1 and conc 2 . The two concepts have new attributes that match better problem description h f , p i , thus introduce new invariants and uniqueness attributes , as well as rel and context elements for the attributes . Various strategies can be devised for traversing and extending the solution space , as shown in Fig . 13b . The strategies are based on concept metrics , like versatility , typicality , variety , novelty , util - ity , ﬂexibility , and complexity . For example , design strategies for topology reuse might attempt to combine concepts of high ﬂexibil - ity with attributes of high versatility . A strategy that emphasizes 124 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 creating new design concepts ﬁrst considers concepts with high novelty . Note that this work does not discuss a way of constructing efﬁcient strategies based on concept metrics . This constitutes fu - ture work . As explained , the current strategy attempts to ﬁrst reach a design concept without performance limiting bottlenecks and then create instances until matching well the problem description . 4 . 2 . Detailed methodology Fig . 14 presents the pseudocode of the design methodology based on concept structure representation . Inputs are the problem description h f , p i , the concept structure CS built based on the avail - able circuit topologies , and the distance Acc that indicates that a concept is a solution to the problem . Output is concept C , the solu - tion to the problem ( the reﬁned topology in our case ) . The ﬁrst step of the algorithm computes the distance dist between every concept C x in structure CS and the problem description h f , p i , and concept C x ’s ﬂexibility F , bottleneck B , and complexity CCI . The topological elements ( e . g . , variables , relations , and context ) pertaining to the bottlenecks are also identiﬁed . Next concept C 2 CS is selected such that C has the lowest abstraction level in the structure ( is close to a physical implementation ) , minimum distance to the problem description , and highest ﬂexibility . The way in which the three cri - teria are balanced is called criterion W in the pseudocode ( for brev - ity of the presentation ) . As long as the distance between concept C and the problem description is greater than the limit Acc , the methodology iterates as follows . If the bottleneck attributes of concept C are part of its uniqueness set , then the methodology explores bottom - up abstractions C S with uniqueness sets that do not include the bottle - necks of C . This strategy is called N in the algorithm ( for brevity ) . Concept C is updated as C S . The next step extends the concept structure through concept combination and induction . Attributes Att present in concepts C x 2 CS and not available in C , Att R C are combined with C if this reduces the distance to the problem . The concept combinations extend concept structure CS . Then , more concepts are added to CS through induction method X ( assuming there is a procedure to deﬁne method X ) . Next , concept C Y is selected from the newly extended structure CS using criterion W ( already explained above ) . If concept C Y has shorter distance to the problem description than concept C then C is set to C Y ( the else part of the if statement ) . Otherwise , new attributes AX are created for the variable subsets vars of concept C ( vars ( C ) ) using basic rela - tions in set SBR . Attributes AX are combined with C . The resulting combined concepts are added to the structure as well as any con - cepts that can be further induced . Finally , if no concept C Y is found closer to the problem descrip - tion than C then the methodology attempts to replace the invariant attributes that are linked the bottleneck , and further move bottom - up to a higher abstraction of concept C . The next iteration considers this abstraction as being the new current concept C . The concept structure used by the methodology is produced such that it maximizes the number of common attributes in the invariant sets of the abstract concepts . After ﬁnding the similarity and diversity of circuit features , the procedure identiﬁes the in - stances with most similar attributes and groups them in an ab - stract concept . The process is repeated using the ungrouped instances and the produced abstractions until the entire concept structure is built top - down . Finding concept invariants and uniqueness is done through con - cept comparison . The procedure compares two circuits by comput - ing the matched and unmatched nodes of a circuit , and then calculating the impact of circuit similarities and differences on the circuit performance , bottlenecks , and circuit complexity ( CCI ) . The proposed algorithms for concept comparison are presented in [ 49 ] . Circuits are simulated to ﬁnd similar attributes as well as the distance between attributes . Hence , circuit simulation is per - formed every time the following elements are computed : the dis - tance between two concepts , ﬂexibility , bottlenecks , concept combinations , induced features , API , and VDM . 4 . 3 . Discussion The concept space - based design methodology tackles problems that present conceptually new challenges by ﬁnding new abstrac - tions , instances , concept combinations , and applying induction methods . New concept attributes are also created by relating vari - ables through basic relations such that bottlenecks are removed . The process is guided by the objective of removing the bottlenecks that prevent a concept from matching the problem description . The process extends the concept space as new concepts are identiﬁed . The concept structure expresses the domain knowledge avail - able in the existing circuit designs . Each concept is characterized by its shared and unique attributes which describes the common as well as distinguishing functional and performance capabilities of a circuit design . The algorithms that use shared and unique attri - butes to compare the AC performance of two circuits are presented in [ 49 ] . Abstraction attributes indicate the common principles of operation for a set of designs , e . g . , signal ﬂows , parameter con - straints . Instances and concept varieties describe ways of detailing the concept towards ﬁnal design while improving the matching of CL C C C C 1 2 3 4 5 C + * + ( a ) C CL CL C CL CL CL CL C C CL CL CL C * * ( b ) ( c ) ( d ) C C C C C C 2 1 3 4 5 1 C C C C C C C C 2 3 1 1 4 2 3 5 5 C 1 + + * 6 3 5 2 4 8 7 C 4 * Fig . 12 . Different concept structures . < f , p > conc conc conc conc conc conc conc conc conc conc conc conc conc conc conc ( a ) ( b ) conc conc conc 1 2 instantiation / abstractioncombining x path path path 1 path 2 3 4 conc y description : Problem Fig . 13 . ( a ) Extension of the concept space during design and ( b ) various space traversing strategies . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 125 a problem description . Each abstraction - instance pair tackles a speciﬁc functional or performance need of the solution , hence rep - resents reasoning step along the way of constructing a solution . Variety also suggests variable groups or relations that were not considered as part of a concept’s instances . Hence , the related trade - offs were not explored . Constructing a concept space offers several advantages as com - pared to traditional automated design methods . First , the speciﬁc circuit features in a design solution can be directly related to the functional and performance requirements of the problem . This makes the design methodology similar to a reasoning process by designers , and gives insight into the made design decisions . The produced designs are easier to understand , correct , and modify by a designer . This can improve the acceptance of the tools by designers . Second , it is natural to incorporate into the design framework speciﬁc design features and rules that have been proved to be efﬁcient in particular instances . The instances are in - cluded into the concept structure and the related abstractions and concept combinations . Third , the concept structure , thus the do - main knowledge , continuously extends as a result of solving more design problems . This is similar to manually - developed designs , where besides developing a certain solution , the design process also generates new insight and expertise which is important in fu - ture solutions . Finally , the methodology can handle analogies , which are often considered as an important vehicle for design innovation [ 31 , 28 , 50 ] . For example , the relations of attributes in invariants and uniqueness sets of new concepts are constructed similar to the relations of the existing concepts , but involving other variables or slightly modifying the relations . Variables that affect the bottleneck are linked through the analoguos relations , if the resulting set of constraints is feasible for the functional and perfor - mance requirements of the problem . To the best of our knowledge , analogies have been not been used as strategies to diversify the solutions created by existing design tools . 5 . Case studies This section presents two case studies for constructing the con - cept structure for analog circuits . The ﬁrst case study refers to cur - rent mirror circuits . The second case study is for operational ampliﬁer circuits ( OpAmps ) . 5 . 1 . Current mirror circuits The case study refers to developing current mirror circuits ( CM ) using the concept representation - based design methodology . The study illustrates the deﬁning elements of the representation , such Fig . 14 . Concept structure - based circuit design . 126 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 as attributes , concepts , concept structures , and their related me - trics . CMs are basic electronic circuits used to generate an output current I o that is related to the input current I i as follows : I o = a I i , where a is a constant . Hence , the CM functionality is expressed as f = min j I o (cid:4) a I i j . The performance attributes p i of CM circuits in - clude maximizing the output resistance max R o ¼ dV o dI o ( V o is the out - put voltage ) , increasing the domain of output V o ( output swing ) , and minimizing the errors due to threshold voltage variations , sta - tistical variations of the transistor dimensions and parasitic resis - tances . Fig . 15 presents four popular current mirror circuits : two cascode current mirrors ( simple ( CCM ) and wide swing ( WSCCM ) designs ) and two Wilson current mirrors ( simple ( WCM ) and im - proved ( IWCM ) circuits ) [ 51 ] . While CMs are simple electronic cir - cuits , they are sufﬁcient to illustrate concept structures and the related design ﬂow in Section 4 . Attributes . For brevity , we presented only the attributes related to small - signal AC ( frequency ) behavior , such as poles at the circuit nodes and coupling between nodes [ 49 ] . For example , the attri - butes expressing the poles at node V 3 in Fig . 15 are similar for de - signs CCM and WSCCM , and involve the matched variables g ms 2 and g md 4 and C gs 2 , C sb 2 , C gd 4 , and C db 4 , respectively . Having the two attributes similar imposes the following constraints on the de - sign variables of devices M 2 and M 4 in the two circuits : R 3 = 1 / ( g ms 2 + g md 4 ) and C 3 = C gs 2 + C sb 2 + C db 4 + C gd 4 . The constraints are part of the context for the two attributes . For the same node V 3 , cir - cuits WCM and IWCM have pole - related attributes that are differ - ent from the attributes of the pair CCM and WSCCM , thus they are dissimilar . The pole is characterized by the parameters of devices M 2 , M 4 , and M 3 , e . g . , g ms 2 , g md 4 , g mg 4 and C gs 2 , C sb 2 , C db 4 , C gs 4 , C gb 4 , C gs 3 , C gd 3 , and C gb 3 . The same analysis was performed for the attri - butes for coupling between circuit nodes . For example , the cou - pling V 1 ? V 2 differs between IWCM and WSCCM circuits , thus the attributes are not similar : sC gs 1 + g md 1 + g mg 1 for IWCM , and sC gd 3 + g md 1 (cid:4) g mg 3 for WSCCM . The entire set of attribute matching results by formulating the expressions of all attributes representing the node poles and node couplings as well as the constraints that condition the matching of the expressions . Table 1 presents the number of dissimilar attributes for pairs of current mirror circuits . The columns show the compared pairs . The rows indicate the topological features that originate the attri - butes , e . g . , node pole components ( R i and C i ) and node coupling ( V i ? V j ) . Each entry shows two numbers , depending on the order of comparison . For example , component C 1 has one dissimilar attribute if CCM and WSCCM are compared , and one dissimilar attribute if WSCCM and CCM are compared . The two numbers are different if the attribute is present in one circuit but not in the other . According to expression ( 9 ) , the distance between two concepts is the number of all dissimilar attributes , thus the sum of all entries in the table ( there are two distances depending on the comparison order ) . The last row presents the distance values . WSCCM circuit has the largest distances to both simple CCM and IWCM . This indicates that this concept has more unique features , while CCM and the IWCM circuits have many similar attributes . Concepts . The methodology in Fig . 14 starts with the problem description h f , p i i and the simple current mirror design ( SCM ) in Fig . 16a . The design forms the initial concept C 1 and speciﬁes the semantics of CM implementations as any other CM circuit serves the same purpose but has different performance p i . The ﬂexibility of concept C 1 depends on the variable clusters that can be instan - tiated in various forms . The circuit has three variables that corre - spond to the voltages of the circuit nodes , v 1 , v x and v o , as shown in Fig . 16a . A new variable v y can be introduced , as in Fig . 16b , linked to variable v o through a MOS device . Having the new vari - able added is justiﬁed as it improves the API related to output resistance . The new concept is denoted as C 2 . It has a free variable v g . The other two alternatives of introducing new variables , related to v 1 and v x , are not justiﬁed as they do not improve API or VDM . In addition , there is one design that can be induced from SCM by changing the connection between v 1 , v x , and v o as in Fig . 16c . It is a new concept as it improves the VDM of v 1 , which is now not con - strained to be equal to variable v x . Let’s name it C 3 . The ﬂexibility of SCM is two . The concept sub - structure of the three concepts is shown in Fig . 16d . Concept C 2 has free variable v g that can be instantiated in three ways : v g can be connected to v o , v 1 , and v e , an additional voltage va - lue ( i . e . voltage source ) . The three alternatives are depicted in Fig . 17a with dotted line . The ﬁrst option does not represent a new concept as it does not differ from the initial concept C 1 . The second option , while having different attributes , is infeasible to operate , thus discarded too . Only the third option generates a new concept as it changes the output swing v o , thus improves the API related to v o . The resulting concept , C 4 , is presented in Fig . 17b . Concept C 3 improves the VDM of v 1 as compared to concept C 1 but its v o range is limited compared to C 2 . Also , it has a smaller out - put resistance compared to concept C 2 . The range of v o is part of the bottleneck of the concept . Similar to concept C 1 , variables v 1 , v x and v o of concept C 3 support adding a new variable as shown in Fig . 17c with possible connections of the free variable v g to v o , v 1 and v e . It represents a concept C 5 as it has superior resistance R o . The instan - tiation to v 1 is now feasible and represents a new concept , C 6 . The corresponding circuit is WCM in Fig . 15c . Note that producing cir - cuit WCM through evolution from concept C 1 is difﬁcult because adding the device produces an infeasible circuit which would be eliminated from the population . The bottleneck of concept C 6 is the limited output swing v o , which is caused by the correlation between variables v 1 , v 3 and v ds of M 2 ( in Fig . 15c ) . The correlation limits the maximum value of output v o . The bottleneck can be addressed by changing the relation between v 1 and v g to allow a higher swing , as in C9 M3 M4 M2 M1 CCM ( a ) WSCCM ( b ) WCM ( c ) IWCM ( d ) C10 C13 C6 V1 V4 V2 V3 M1 M2 M4 M3 V1 V4 V2 V3 Vb M1 M2 M4 M3 V1 V4 V3 M2 M4 M3 V1 V4 V2 V3 Fig . 15 . Current mirror circuits . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 127 Fig . 17d . This deﬁnes a new concept C 7 . Variables v 1 and v g can be independently changed ( within a limited range ) to obtain the needed range of v o . An instance of concept C 7 is shown in Fig . 15d and represents IWCM circuit . It represents a new concept C 9 and has improved output resistance and output swing . An abstraction of concept C 9 results by decoupling variables v g and v g 1 , as in Fig . 18a . Concept C 14 allows v g 1 to be linked to v 1 , v x , v y , v g and an external value v e . The ﬁrst two options are infeasible , while the last option does not improve API or VDM . The ﬂexibility of C 14 is one as connecting v g and v g 1 is the only option . Concept C 14 is combined with concept C 5 in Fig . 17c to produce concept C 8 in Fig . 18b . Concept C 15 in Fig . 18d results by combining concepts C 2 and C 14 . Concept C 1 and C 9 are combined to create a new concept C 10 , which corresponds to CCM circuit in Fig . 15a . It has a higher API for R o than concepts C 1 and C 9 , and comparable VDM of v o as con - cept C 9 . Further , adding repeatedly the combined attribute to con - cept C 10 creates a stacked CCM , which further improves the output resistance R o . It represents concept C 11 . Concept C 8 can be also instantiated to create concept C 12 , as in Fig . 18c . This circuit improves the range of the output voltage v o . Concept C 13 , the circuit WSCCM in Fig . 15b , is an instance of concept C 5 . Fig . 19 illustrates the concept structure of this case study . 5 . 1 . 1 . Discussion Several conclusions can be drawn based on the case study . Solv - ing a new design problem requires ﬁnding a sequence of design steps that modify the structure , such that each step either im - proves a performance attribute or relaxes some constraints . The latter case usually produces the premise for future performance improving steps . Having only performance improvement steps , as in many traditional design optimization methods , is insufﬁcient . The proposed methodology does not create structural alternatives with similar performance and constraints as they are not justiﬁed by the sequence of design steps . For example , the device M 1 of con - cept C 9 is used only if device M 3 of concept C 7 is present . Tradi - tional circuit synthesis methods have difﬁculties in avoiding devices that are not justiﬁed by the nature of the circuit . The methodology is driven by the need to address the solution bottlenecks that prevent a better matching to the problem descrip - tion . Every step targets the set of variables of the bottleneck rather than the entire set of variables as in other circuit synthesis meth - ods . This reduces the size of the search space . The attributes that are candidates for combination are those that have in their versa - tility sets structures with transfer functions that can be matched to that of the current structure . The versatility of a structure ( and its related attributes ) is deﬁned by the set of transfer functions that after being combined with the structure improves API or VDM . 5 . 2 . Ampliﬁer circuits The second case study built the concept structure for a set of ampliﬁer designs [ 52 – 59 ] and the classic 2 - stage Miller OpAmp . Each design was divided into three blocks , e . g . , differential input lock , single - ended conversion block , and output block . The corre - sponding concept structure was built for each block . For brevity , we discuss the concept structures for the input and single - ended conversion blocks . The time required to produce the concept structure was around seven hours . Some activities are automated but other were carried out manually following the presented deﬁnitions and algorithms . The similar attributes for OpAmp circuits are found automatically . The complete set of similar attributes was generated in about 6 min for all circuits . The concept abstractions were produced manually . For the 10 ampliﬁer set , identifying one abstraction Table 1 Number of dissimilar attributes for current mirror concepts . Attribute CCM – WSCCM WCM – IWCM CCM – IWCM IWCM – WSCCM R 1 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) C 1 1 ( 1 ) 1 ( 1 ) 0 ( 0 ) 1 ( 1 ) R 2 0 ( 0 ) 0 ( 1 ) 0 ( 0 ) 0 ( 0 ) C 2 1 ( 1 ) 0 ( 1 ) 1 ( 1 ) 0 ( 0 ) R 3 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) C 3 0 ( 0 ) 0 ( 0 ) 1 ( 1 ) 1 ( 1 ) R 4 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) C 4 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) V 1 ? V 2 1 ( 1 ) 0 ( 1 ) 0 ( 0 ) 1 ( 1 ) V 1 ? V 3 1 ( 1 ) 0 ( 0 ) 0 ( 0 ) 1 ( 1 ) V 1 ? V 4 1 ( 0 ) 0 ( 0 ) 0 ( 0 ) 1 ( 0 ) V 2 ? V 3 1 ( 0 ) 0 ( 1 ) 0 ( 0 ) 1 ( 0 ) V 3 ? V 4 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) 0 ( 0 ) Distance 6 ( 4 ) 1 ( 5 ) 2 ( 2 ) 6 ( 4 ) ( d ) v1 vo M1 vx C3 ( c ) M2 v1 vo M1 ( a ) vx M2 C2 C3 C1 v1 M1 vx ( b ) vy M2 vo M3 C1 C2 vg Fig . 16 . Concepts corresponding to CM circuits . ( b ) C4 ( c ) v1 M1 vx vo vy vg M1 v1 ( d ) C7 C5 vo M3 ve ve M2 M3 vx vo vy vg M2 M3 v1 M1 vx vy M2 vg ( a ) C2 v1 M1 vx vy M2 vo M3 vg Fig . 17 . Concepts corresponding to CM circuits ( continued ) . 128 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 requires about 5 – 10 min . The structures for the 10 ampliﬁer exam - ple consists of 28 independent concepts . The rest of the remaining time was used for circuit simulation and analysis . More than 250 simulations were performed in total for the three concept structures . 28 simulations were needed for the indi - vidual blocks . In addition , 9 simulations were required for concept combinations ( input - conversion - output blocks ) . A total of 210 sim - ulations were needed to explore and verify all speciﬁc circuit implementations that were derived from the structures . Analyzing only the abstract concepts used 42 simulations . The produced solutions are interpretable by a designer as each sub - structure justiﬁes a purpose related to the problem descrip - tion . There are no redundant sub - structures which reduces the structural complexity of the solution . However , there can be sim - pler problem satisfying solutions as the sequence of selected steps is not always minimal . Each circuit was described as its AC model including the fre - quency domain cross - coupling between the circuit nodes and the poles at the nodes . Hence , the concept attributes correspond to the AC behavior of the circuits , including poles and cross - coupling . In the following ﬁgures , the attributes common to multiple con - cepts are shown in green , and the distinguishing attributes be - tween concepts are in red . Differential input block . Fig . 20 illustrates the schematic struc - tures for concepts D to D 7 discussed next . Fig . 21 presents the concept structure for the differential input stage of the ampliﬁer set . The top level concept , D , is the general input conﬁguration . The attributes common to multiple concepts include those indicating the gate - source coupling from both inputs to a center structure ( sC gs + g mg ) , the gate - drain coupling on the two symmetrical differential paths ( sC gd (cid:4) g mg ) , and the cross - cou - pling from the center structure to the differential paths ( g ms / g md ) . The center structure is characterized by attribute F . The coupling of the output nodes with poles P 4 is described by attribute G . Different instances of concept D result by replacing attributes F and G . One instance , concept D 1 , has F = 1 . The center structure of concept D is merged into a single node with its pole ( P 2 ) compo - nents equal to g ms + g ms + g md ( resistive part ) and C gs + C sb + C gs + - gs + C sb + C gs + C sb + C gd + C db ( capacitive part ) . Concept D 1 describes any differential input using source - coupled transistor pair . The second instance is concept D 2 , which is implemented in cir - cuit [ 57 ] . For G = 1 , active source degeneration is realized by instantiating feature F – 1 . The two differential devices’ sources are no longer identical ( as in concept D 1 ) but symmetrically cross - coupled through the degeneration devices ( attribute g ms + - g md ) and with an additional input coupling ( sC gd (cid:4) g mg ) . The struc - ture of the poles at node P 2 also changes . It includes the two devices’ contributions , g ms + g ms + g md + g md ( resistive part ) and C gs + C sb + C gs + C sb + C gd + C db + C gd + C db ( capacitive part ) . The advantage of the structure is improved linearity , but the input capacitance and power dissipation are also higher . Continuing from concept D 1 , the concept structure includes in - stances for various features G that set the block’s output structure . For G = 1 in concept D 3 , the nodes P 4 and P 3 merge . This concept represents the simple differential pair with active transistor loads used in designs [ 59 , 52 , 55 ] and in the Miller ampliﬁer . Another instance uses feature G to create additional gain . Con - cept D 4 illustrates the structure of a folded cascode differential in - put implementation . Nodes P 3 and P 4 are cross - coupled through g ms / g md of the cascode devices . This concept appears in ampliﬁers [ 53 , 54 , 56 , 58 ] . Circuit [ 58 ] further instantiates concept D 4 into concept D 7 . It adds cascode common source biasing to the differential pair through cross - coupling g ms / g md to another node characterized by pole P x . All other attributes remain unchanged . The advantage is a more constant biasing current at the expense of an additional non - dominant pole and a reduced input swing . The concept structure in Fig . 21 suggests two new concepts that are not present in the initial ampliﬁer set . The concepts are high - lighted in pink . One concept results through the combination of concepts D 2 and D 4 to create concept D 5 , a source degenerated cascode input stage . Similarly , none of the initial OpAmps use cas - code biasing of a simple differential pair . Concept D 6 includes this feature as a combination of concepts D 7 and D 3 . Concept D 3 has a bottleneck for gain performance . It involves the DC component of the direct coupling attribute from the signal input attribute ( (cid:4) g mgx ) and the pole resistive component attribute of P 3 ( R 3 = 1 / ( g mdx + g md ) ) . Fig . 22 ( top plot ) illustrates the normal - ized gain behavior with respect to variables g mgx and g mdx for a ten - fold variation of the biasing current ( 175 l A – 1 . 75 mA ) . A gain variation of (cid:6) 50 % is noted over the simulated current range . How - ever , it can be observed for the later half of the bias current range , gain begins to saturate and only 10 % improvement is achieved . Concept D 4 relaxes the gain bottleneck of concept D 3 by adding the g ms / g md cross - coupling to the additional node with pole P 4 . As shown in Fig . 22 ( top plot ) for the same conditions , the gain varies M2 ve vg v1 vo vx M1 vg vg1 vf M4 v1 C15 vy ( d ) M3 ve vo ( a ) vx vy M1 vg vg1 M4 C14 v1 M2 M3 ve ( b ) vo vx vy M1 vg vg1 C8 vf M4 v1 ve M2 M3 M2 M3 C12 ( c ) vx vy M1 M4 vg1 vf vo Fig . 18 . Concepts corresponding to CM circuits ( continued ) . C6 C2 C3 C4 C1 C14 C8 C7 C9 C15 C13 C12 C10 C11 C5 Fig . 19 . Concept structure for CM circuits . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 129 over an extended range of (cid:6) 65 % . Also , for the same biasing current conditions , concept D 4 presents a more linear change in gain . Fig . 22 ( bottom plot ) presents the magnitude response in the case of maximum current . The gain advantage of concept D 4 is (cid:6) 25 dB . However , the relaxed gain bottleneck of concept D 4 im - pacts its bandwidth performance . In this regard , concept D 3 has more than one decade improvement in 3 dB frequency . Single - ended conversion block . Fig . 23 presents the concept struc - ture for the single - ended conversion blocks of the OpAmp circuits . The top level concept , S , is the most abstract concept . The coupling between the nodes where the single - ended conversion occurs is described by attributes F and G , which express the gate - drain cross - couplings ( sC gd (cid:4) g mg / sC gd ) . The pole at node P 2 ( output side ) has the same attributes as pole P 1 , and is common to all concepts in the structure . Instance S 1 results for G = 0 , which corresponds to a single cross - coupling path . Starting from concept S 1 , the instance with F = 0 yields no single ended conversion mechanism ( no cross - cou - pling ) . The concept represents fully - differential circuits , like ampli - ﬁers [ 56 , 57 , 59 ] . Concept S 4 is an instance of concept S 1 with attribute F = 1 . This concept implements a simple current mirror ( SCM ) topology . Ampliﬁers [ 52 , 55 , 59 ] and the basic Miller OpAmp implement this concept . Concept S 2 instantiates a more complex cross - coupling structure , through the intermediate node P x . The symmetry of the structure is preserved by also including the inter - mediate node P y cross - coupled to P 1 through gate - drain and drain - source connections across two devices . The concept corresponds to wide - swing cascode current mirror ( WSCCM ) , which improves output resistance while allowing higher output voltage range . The concept is utilized in OpAmps [ 54 , 58 ] . Concept S 5 uses two cross - coupling paths ( G – 0 ) , one direct and one through two intermediate nodes P 3 and P 4 . It also com - bines two attributes from concept S 4 ( two SCMs P 1 (cid:4) P 2 and P 3 (cid:4) P 4 ) . The respective pole structures are maintained as in con - cept S 4 . The cross - coupling through attribute G illustrates that either orientation of the intermediate SCM ( P 3 (cid:4) P 4 ) is possible . One alternative appears in concept S 7 . The orientation of the inter - mediate current mirror ( P 3 (cid:4) P 4 ) is opposed to that of the main path ( P 1 (cid:4) P 2 ) . The output node of the intermediate SCM ( N 4 ) is not directly coupled to the output of the main SCM ( P 2 ) , but rather to its input node ( P 1 ) . The concept is implemented by the im - proved Wilson current mirror ( IWCM ) with the intermediate SCM providing feedback . Ampliﬁer [ 53 ] uses this high output impedance topology . None of the initial OpAmp designs in the set implements concept S 6 , which maintains the input - input , output - output correspondence for the two SCMs in the concept . The same cross - coupling expressions are used as in concept S 7 , but to oppo - site intermediate nodes . Concept S 6 implements the cascode cur - rent mirror ( CCM ) . Concept S 7 has a similar output voltage swing as concept S 6 ( IWCM ) , but offers slightly higher output impedance . 5 . 2 . 1 . Discussion The considered set of ampliﬁers represents only 9 distinct com - binations of concepts from the concept structures for differential input , single - ended conversion , and output blocks . However , the P1 P1 M6’ M7’ M7 P3 P3 P4 P4 M6 M1 M3 P2 M1’ D4 P1 P1 M3 M4 Px M1 P3 P2 M1’ P3 D6 P1 P1 M1 P2 M1’ M3 M4 Px M6’ M7’ M7 P3 P3 P4 P4 M6 D7 P1 P1 P2 P2 M1 M5 M5’ M3’ M3 M1’ M6’ M7’ M7 P3 P3 P4 P4 M6 D5 P1 P1 M3 M1 P3 P2 M1’ P3 D3 P1 P1 M1 P3 M1’ P3 P4 P4 G G M3 P2 D1 P1 P1 P3 P3 P4 P4 G G P2 P2 F M1 M1’ D P1 P1 P3 P3 P2 P2 M1 M1’ M5 M5’ M3’ M3 D2 Fig . 20 . Schematic structures of concepts D – D 7 . 130 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 three structures can be used to produce more than 200 distinct concept combinations . Some combinations are not feasible since the advantages of one concept are diminished when combined with a certain concept . Also , some speciﬁcation cannot be met by certain combinations . For example , combining concept D 4 ( folded cascode input ) with concept S 4 ( SCM single - ended conversion ) re - duces the high gain offered by concept D 4 . The closure of the OpAmp concept structure includes concept combinations that improve performance or relax constraints . Fig . 24 illustrates two alternatives of combining differential input and single - ended conversion concepts . In the ﬁrst case , concept D 4 ( folded cascode input ) is combined with concept S 7 ( IWCM ) . The output nodes of one concept are shared as the input nodes of a different concept . This combination is similar to relation - based combinations . Another option involves ﬁnding a suitable combina - tion of concepts , which can have many shared attributes . The sec - ond example in Fig . 24 shows the case when concept D 4 is combined with concept S 2 ( WSCCM ) . This concept combination enables sharing all nodes of concept S 2 . The structure of the inter - mediate nodes of S 2 ( P x and P y ) is included in the differential pair output nodes of D 4 ( P 2 ) and enables the sharing . Similarly , the pole structure P 3 of concept D 4 is fully included in that of P 1 and P 2 from concept S 2 . This combination is similar to property - based combinations . Concepts can also be instantiated as multiple , duplicated copies . Combining them in parallel is used to create complementary signal paths which share the output nodes . An example is the concept of rail - to - rail ampliﬁer [ 58 ] . Alternatively , concept duplicates can be combined in series . Examples are the ampliﬁers [ 52 , 55 ] , which combine in series two identical implementations of single - stage and two - stage ampliﬁers concepts , respectively . In this case , the D5 gmd + gms gms + gmd * D2 D1 G = 1 D3 G P1 P1 P2 P2 P3 P3 P4 P4 G F D Px Px D7 D6 F = 1 P2 P3 P3 P2 P3 P3 P4 P4 * G G D4 P4 P4 P3 P3 gmd + gms gms + gmd G = P4 Px F = P2 s C g s + g m g s C g s + g m g } sCgd−gmg gmsgmd sCgd−gmg gmsgmd } s C g s + g m g g m s g m s g m d g m s g m d { s C g s + g m g } sCgd−gmg sCgd−gmgsCgd gms + gmd gmd + gms g m s g m d g m s g m d g m s g m d g m s g m d g m s g m d g m s g m d gmsgmd gms gmd g m s g m d g m s g m d gmsgmd g m s g m d g m s g m d gmsgmd gmsgmd gmsgmd sCgd−gmgsCgd−gmg g m s g m d g m s g m d gms gmd gmsgmd sCgd−gmg sCgd−gmg sCgd−gmg s C g s + g m g s C g s + g m g g m s s C g s + g m g s C g s + g m g sCgd−gmg sCgd−gmg s C g s + g m g s C g s + g m g sCgd−gmg sCgd−gmg sCgd−gmg s C g s + g m g sCgd−gmg sCgd−gmg s C g s + g m g s C g s + g m g s C g s + g m g sCgd−gmg sCgd−gmg sCgd−gmg s C g s + g m g g m d s C g s + g m g g m d Fig . 21 . Concept structure for differential inputs in ampliﬁer circuits . Fig . 22 . Bottlenecks in concepts D 3 and D 4 . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 131 output node is shared with an input node , creating the current feedback speciﬁc to these designs . 6 . Conclusion This paper discusses an axiomatic model that deﬁnes concepts , concept relations , and concept structures based on the similarities and differences among the attributes of the concepts . Analog cir - cuit design is used to illustrate the axiomatic model and its useful - ness during the design process . Concepts represent sets of circuits with their attributes describing the topology , behavior , and perfor - mance of the circuits . A concept structure organizes the concepts based on relations like instantiation and abstraction . New concepts are added to a structure by combining the attributes of existing concepts and by exploring new relations between the existing vari - ables . Concepts are characterized by metrics like concept variety , utility , novelty , complexity , ﬂexibility , constraining factor , bottle - neck , the similarity and dissimilarity of concepts , and the expected increase of a concept structure . The metrics are important to guide the concept combination process of a design methodology based on concept structure . The axiomatic model suggests that new automated design methodologies can be developed to address circuit design as a solv - ing problem rather than a mathematical optimization process . This is important to make synthesized circuits more similar to the de - signs produced by humans , thus offering insight into the solving process and automatically extending the design knowledge for a given problem description . Every step of the solving process aims to improve performance and / or relax constraints by comparing existing concepts to ﬁnd ways of abstracting , instantiating and combining concepts . The concepts to be combined are identiﬁed based on the bottlenecks and versatilities of their attributes . This design process conceptually resembles the principle of contradic - tion removal suggested by Altshuller [ 60 ] for inventive problem solving . Future work will focus on the developing of computational methods for the proposed axiomatic model , including algorithms to estimate the ﬂexibility of a concept , concept instantiation and combination , and restructuring of the concept structure to reﬂect new insight on the similarities and differences between concepts . Work will also address the ﬁnding of minimal length solving step sequences for a given problem description and concept structure . Acknowledgements This work was supported by the National Science Foundation under Grant No . 0856038 . Any opinions , ﬁndings , and conclusions or recommendations expressed in this material are those of the author ( s ) and do not necessarily reﬂect the views of the National Science Foundation . References [ 1 ] G . Gielen , R . Rutenbar , Computer aided design of analog and mixed - signal integrated circuits , Proceedings of IEEE 88 ( 12 ) ( 2000 ) 1825 – 1852 . [ 2 ] E . Martens , G . Gielen , Classiﬁcation of analog synthesis tools based on their architecture selection mechanisms , Integration , the VLSI Journal 41 ( 2008 ) 238 – 252 . [ 3 ] M . Mar Hershenson , S . Boyd , T . Lee , Optimal design of a cmos op - amp via geometric programming , IEEE Transactions on Computer - Aided Design of ICS 20 ( 1 ) ( 2001 ) 1 – 21 . [ 4 ] H . Tang , A . Doboli , High - level synthesis of delta - sigma modulators optimized for complexity , sensitivity and power consumption , IEEE Transactions on Computer - Aided Design of Integrated Circuits and Systems 25 ( 3 ) ( 2006 ) 597 – 607 . [ 5 ] Y . Wei , H . Tang , A . Doboli , Systematic methodology for designing reconﬁgurable delta sigma modulator topologies for multimode communication systems , IEEE Transactions on Computer - Aided Design of Integrated Circuits and Systems 26 ( 3 ) ( 2007 ) 480 – 496 . [ 6 ] B . Liu , F . Fernandez , G . Gielen , Efﬁcient and accurate statistical analog yield optimization and variation - aware circuit sizing based on computational intelligence techniques , IEEE Transactions on Computer - Aided Design of ICS 30 ( 6 ) ( 2011 ) . [ 7 ] T . Massier , H . Graeb , U . Schlichtmann , The sizing rules method for CMOS and bipolar analog integrated circuit synthesis , IEEE Transactions on Computer - Aided Design of ICS 27 ( December ) ( 2008 ) 2209 – 2221 . [ 8 ] T . Sripramong , C . Toumazou , The invention of CMOS ampliﬁers using genetic programming and current - ﬂow analysis , IEEETransactions onComputer - Aided Design of ICS 21 ( November ) ( 2002 ) 1237 – 1252 . [ 9 ] A . Das , R . Vemuri , Topology synthesis of analog circuits based on adaptively generated building blocks , in : Proc . Design Automation Conference , 2008 , pp . 44 – 49 . [ 10 ] T . Amabile , The Social Psychology of Creativity , Springer , 1987 . [ 11 ] E . Wisniewski , B . Love , Relations versus properties in conceptual combinations , Journal of Memory and Language 38 ( 1998 ) 177 – 202 . [ 12 ] G . Murphy , Comprehending complex concepts , Cognitive Science 12 ( 1988 ) 529 – 562 . [ 13 ] E . Wisniewski , When concepts combine , Psychonomic Bulletin & Review 4 ( 2 ) ( 1997 ) 167 – 183 . [ 14 ] C . Gagne , Relation - based combinations versus property - based combinations : a test of the carin theory and the dual - process theory of conceptual combinations , Journal of Memory and Language 42 ( 2000 ) 365 – 389 . [ 15 ] C . Gagne , The competition - among - relations - in - nominals theory of conceptual combination : implications for stimulus class formation and class expansion , Journal of the Experimental Analysis of Behavior 78 ( 3 ) ( 2002 ) 551 – 565 . [ 16 ] J . Levi , The Syntax and Semantics of Complex Nominals , Academic Press , 1978 . G = 0 G < > 0 ; P3 , P4 F = 0 F = 1 F = 1 S5 S S1 S2 S6 S7 Py Px P4 P3 S4 S3 N4 N3 N3 N4 P1 P2 F = Px , Py ( N3 N4 ) ( N4 N3 ) sCgd−gmg + gmd s C gd G } } sCgd + gms g m s s C gd − g m g s C gd g m d s C gd − g m g s C gd − g m g s C gd F } s C gd sCgs + gmg sCgs s C gd − g m g s C gd − g m g s C gd s C gd s C gd sCgs + gmg + gmd gmsgmd sCgs + gms s C g s + g m g s C g s s C gd − g m g gmsgmd s C gd − g m g s C gd s C gd − g m g s C gd F s C gd − g m g s C gd s C gd − g m g s C gd s C g s + g m g + g m d } s C g s + g m s gmsgmd s C gd − g m g Fig . 23 . Concept structure for single ended conversion blocks . P 3 / P 2 P 3 / P 1 S7 D4 P3 / P2 P 3 / P 1 P2 / Py P 2 / P x D4 S2 s C gd s C gd − g m g gmsgmd sCgd + sCgd−gmg + gmdgms Fig . 24 . Concept combinations for the OpAmp concept structure . 132 C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 [ 17 ] J . Hampton , Inheritance of attributes in natural concept conjunctions , Memory & Cognition 15 ( 1 ) ( 1987 ) 55 – 71 . [ 18 ] Z . Estes , T . Ward , The emergence of novel attributes in concept modiﬁcations , Creativity Research Journal 14 ( 2 ) ( 2002 ) 149 – 156 . [ 19 ] L . Gabora , Cognitive Mechanisms Underlying the Origin and Evolution of Culture , PhD Thesis , Vrije University Brussel , 2001 . [ 20 ] P . Bentley , D . Corne , Creative Evolutionary Systems , The Morgan Kaufmann Series in Artiﬁcial Intelligence , 2002 . [ 21 ] C . Ferent , A . Doboli , Towards measuring the innovation of analog circuit design , Integration , the VLSI Journal 44 ( 1 ) ( 2011 ) 39 – 50 . [ 22 ] U . Alon , An Introduction to Systems Biology : Design Principles of Biological Circuits , Chapman & Hall , 2007 . [ 23 ] A . Wagner , Robustness and Evolvability in Living Systems , Princeton University Press , 2005 . [ 24 ] A . Wagner , The Origins of Evolutionary Innovations , A Theory of Transformative Change in Living Systems , Oxford University Press , 2011 . [ 25 ] A . Doboli , R . R . Vemuri , Behavioral modeling for high - level synthesis of analog and mixed - signal systems from vhdl - ams , IEEE Transactions on CADICS 22 ( 2003 ) . [ 26 ] S . Szykman , J . Racz , R . Sriram , The representation of function in computer - based design , in : Proc . of ASME Design Engineering Technical Conference , 1999 . [ 27 ] T . Grotker , S . Liao , G . Martin , S . Swan , System Design with SystemC , Springer , 2002 . [ 28 ] D . Gentner , The Mechanisms of Analogical Learning , Similarity and Analogical Reasoning , Cambridge University Press , 1989 . [ 29 ] G . Murphy , On metaphoric representation , Cognition 60 ( 1996 ) 173 – 204 . [ 30 ] R . Harrison , A biologically inspired analog ic for visual collision detection , IEEE Transactions on Circuits and Systems I 52 ( 11 ) ( 2005 ) 2308 – 2318 . [ 31 ] P . Yaner , A . Goel , Visual analogies at multiple levels of abstraction , in : Proc . of Annual Meeting of the Cognitive Science Society , 2006 . [ 32 ] T . Mak , L . Shu , Abstraction of biological analogies for design , in : Annals of CIRP , vol . 53 ( 1 ) , 2004 , pp . 117 – 120 . [ 33 ] M . Lassaline , G . Murphy , Alignment and category learning , Journal of Experimental Psychology 24 ( 1 ) ( 1998 ) 144 – 160 . [ 34 ] R . Goldstone , D . Medin , Similarity , interactive activation , and mapping : an overview , in : K . Holyoak , J . Barnden ( Eds . ) , Advances in Connectionist and NeuralComputation Theory : Analogical Coonections , Norwood , 1994 , pp . 321 – 362 . [ 35 ] A . Markman , D . Gentner , Structural alignment during similarity comparisons , Cognitive Psychology 25 ( 1993 ) 431 – 467 . [ 36 ] L . Barsalou , Ad hoc categories , Memory & Cognition ( 11 ) ( 1983 ) 211 – 227 . [ 37 ] J . Anderson , The adaptive nature of human categorization , Psychological Review ( 98 ) ( 1991 ) 409 – 429 . [ 38 ] T . Yamauchi , A . Markman , Category - learning by inference and classiﬁcation , Journal of Memory and Language ( 39 ) ( 1998 ) 124 – 148 . [ 39 ] D . Little , S . Lewandowsky , Ad hoc category restructuring , Memory & Cognition 34 ( 7 ) ( 2006 ) 1398 – 1413 . [ 40 ] S . Lewandowski , M . Kalish , T . Grifﬁths , Competing strategies in categorization : expediency and resistance to knowledge restructring , Journal of Experimental Psychology : Learning , Memory & Cognition 26 ( 2000 ) 1666 – 1684 . [ 41 ] R . Adler , A . Konheim , M . McAndrew , Topological entropy , Transaction of American Mathematical Society ( 114 ) ( 1965 ) 309 – 319 . [ 42 ] R . Adler , B . Marcus , Topological entropy and equivalence of dynamical systems , Memoirs of the American Mathematical Society 20 ( 219 ) ( 1979 ) . [ 43 ] A . Markman , E . Wisniewski , Similar and different : the differentiation of basic - level categories , Journal of Experimental Psychology : Learning , Memory , and Cognition 23 ( 1 ) ( 1997 ) 54 – 70 . [ 44 ] Q . Xu , R . Jiao , M . Helander , R . Jiao , H . Khalid , An analytical kano model for customer need analysis , Design Studies 30 ( 1 ) ( 2008 ) 87 – 110 . [ 45 ] D . Kazmer , D . Hatch , L . Zhu , C . Roser , D . Kapoor , Deﬁnition and application of a process ﬂexibility index , Transactions of the ASME 125 ( February ) ( 2003 ) 164 – 171 . [ 46 ] P . Rajan , M . Van Wie , M . Campbell , K . Wood , K . Otto , An empirical foundation for product ﬂexibility , Design Studies 26 ( 2005 ) 405 – 438 . [ 47 ] E . Vladislavleva , G . Smits , D . Hertog , Order of nonlinearity as a complexity measure for models generated by symbolic regression via pareto genetic programming , IEEE Transactions on Evolutionary Computation 13 ( 2 ) ( 2009 ) 333 – 349 . [ 48 ] C . Ferent , A . Doboli , A symbolic technique for automated characterization of the uniqueness and similarity of analog circuit design features , in : Design , Automation and Test in Europe Conference ( DATE’11 ) , 2011 . [ 49 ] C . Ferent , A . Doboli , Symbolic matching and constraint generation for systematic comparison of analog circuits , IEEE Transactions on CADICS , in press . [ 50 ] M . Keane , F . Costello , Setting limits on analogy : why conceptual combination is not structural alignment , in : D . Gentner , K . Holyoak , B . Kokinov ( Eds . ) , The Analogical Mind : Perspectives from Cognitive Science , MIT Press , 2001 . [ 51 ] J . Baker , CMOS Circuit Design , Layout , and Simulation , Wiley - IEEE Press , 2010 . [ 52 ] Erkan Yuce , Shahram Minaei , A modiﬁed CFOA and its applications to simulated inductors , capacitance multipliers , and analog ﬁlters , IEEE Transactions on Circuits and Systems I 55 ( February ) ( 2008 ) 266 – 275 . [ 53 ] G . Palumbo , S . Pennisi , Current - feedback ampliﬁers versus voltage operational ampliﬁers , IEEE Transactions on Circuits and Systems I 48 ( May ) ( 2001 ) 617 – 623 . [ 54 ] Joao Ramos , Michiel S . J . Steyaert , Positive feedback frequency compensation for low - voltage low - power three - stage ampliﬁer , IEEE Transactions on Circuits and Systems II 51 ( October ) ( 2004 ) 1967 – 1974 . [ 55 ] Brent J . Maundy , Ataur R . Sarkar , Stephan J . Gift , A new design topology for low - voltage CMOS current feedback ampliﬁers , IEEE Transactions on Circuits and Systems II 53 ( January ) ( 2006 ) 34 – 38 . [ 56 ] Hee - Cheol Choi , Young - Ju Kim , Gil - Cho Ahn , Seung - Hoon Lee , A 1 . 2 - V 12 - b 120 - MS / s SHA - free dual - channel nyquist ADC based on midcode calibration , IEEE Transactions on Circuits and Systems I 56 ( May ) ( 2009 ) 894 – 901 . [ 57 ] Yuanjin Zheng , Jiangnan Yan , Yong Ping Xu , A CMOS VGA with DC offset cancellation for direct - conversion receivers , IEEE Transactions on Circuits and Systems I 56 ( January ) ( 2009 ) 103 – 113 . [ 58 ] Lei Yao , Rifat Khan , Vamsy P . Chodavarapu , Vijay S . Tripathi , Frank V . Bright , Sensitivity - enhanced CMOS phase luminometry system using xerogel - based sensors , IEEE Transactions on Biomedical Circuits and Systems 3 ( October ) ( 2009 ) 304 – 311 . [ 59 ] Jaime Ramı´rez - Angulo , Ramón G . Carvajal , Juan A . Galán , Antonio López - Martı´n , A free but efﬁcient low - voltage class - AB two - stage operational ampliﬁer , IEEE Transactions on Circuits and Systems II 53 ( July ) ( 2006 ) 568 – 571 . [ 60 ] G . Altshuller , The Innovation Algorithm : TRIZ , Systematic Innovation , and Technical Creativity . Technical Innovation Center , Worcester , MA , 1999 , ISBN : 0964074044 . C . Ferent et al . / Knowledge - Based Systems 45 ( 2013 ) 114 – 133 133