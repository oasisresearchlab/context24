Articial Intelligence for Engineering , Design , Analysis and Manufacturing http : / / journals . cambridge . org / AIE Additional services for Articial Intelligence for Engineering , Design , Analysis and Manufacturing : Email alerts : Click here Subscriptions : Click here Commercial reprints : Click here Terms of use : Click here Function – behavior – structure paths and their role in analogy - based design Lena Qian and John S . Gero Articial Intelligence for Engineering , Design , Analysis and Manufacturing / Volume 10 / Issue 04 / September 1996 , pp 289 - 312 DOI : 10 . 1017 / S0890060400001633 , Published online : 27 February 2009 Link to this article : http : / / journals . cambridge . org / abstract _ S0890060400001633 How to cite this article : Lena Qian and John S . Gero ( 1996 ) . Function – behavior – structure paths and their role in analogy - based design . Articial Intelligence for Engineering , Design , Analysis and Manufacturing , 10 , pp 289 - 312 doi : 10 . 1017 / S0890060400001633 Request Permissions : Click here Downloaded from http : / / journals . cambridge . org / AIE , IP address : 129 . 93 . 16 . 3 on 09 Apr 2015 Artificial Intelligence for Engineering Design , Analysis and Manufacturing ( 1996 ) , 10 , 289 - 312 . Printed in the USA . Copyright © 1996 Cambridge University Press 0890 - 0604 / 96 $ 11 . 00 + . 10 Function - behavior - structure paths and their role in analogy - based design LENA QIAN 1 AND JOHN S . GERO 2 1 Canon Information Systems Research Australia , 1 Thomas Holt Drive , North Ryde , NSW 2113 Australia 2 Key Centre of Design Computing , Department of Architectural and Design Science , University of Sydney , NSW 2006 Australia ( RECEIVED April 3 , 1995 ; ACCEPTED January 31 , 1996 ) Abstract In many creative design processes , cross - domain knowledge is required to inspire the new design result . Thus , in knowledge - based design , how we represent the cross - domain knowledge becomes a key issue . In this paper , we present a formalism for design knowledge representation . By analyzing function representation in different design domains , from graphic design and industrial design to architectural and engineering device designs , we find that although the focus of each kind of design is different , the function representation can be generalized into a small number of catego - ries . This formalism can be used in an explorative model of design by analogy , where designs from different design domains are sources to help produce a new design . Keywords : Creative Design ; Design by Analogy ; Function - Behavior - Structure 1 . INTRODUCTION It has long been recognized that in design it is possible to articulate a description of existing and putative designs using a function - behavior - structure ( FBS ) framework . This frame - work has provided a satisfactory basis for the development of design process models of routine design . Here routine design is taken to mean that class of designing where all the design or structure variables and all the performance or be - havior variables are known priori and what is to be done is to determine values for the structure variables . When all these variables are not known at the outset we move into an area characterized as nonroutine or creative design . A number of processes have been developed to assist designers to intro - duce new variables in their designs . One such process is analogy , where variables from another existing but appro - priate design are introduced into the current design . How to select appropriate designs and appropriate variables from the selected design are important questions , which do not yet have well - understood answers . This paper presents an approach to the solution of these problems using a formal - ism built around the function - behavior - structure frame - Reprint requests to : Professor John S . Gero , Key Centre of Design Com - puting , Department of Architectural and Design Science , University of Syd - ney , NSW 2006 Australia . E - mail : john @ arch . su . edu . au . work . It utilizes the associations between function , behavior , and structure as goal achievement paths , which have been generalized over classes of designs . It is suggested that although designs may appear different within a single domain and certainly between domains , de - sired functions can only be achieved in a limited number of ways , called FBS paths or goal achievement paths . These FBS paths are utilized as the basis of a class of design processes . A design process typically starts with a set of require - ments , from which a designer develops a conceptual idea of the design . In an analogy - based design system , this design , referred to as the target concept design , along with its anal - ogous design , referred to as the source design , establishes a platform for the exploration of a new solution . Both target concept design and source design can be represented in the formalism described in this paper during the design process by analogy . This design model has been implemented as a design sup - port system using C , Lisp , and XView on Sun workstations . Designs from mechanical design , industrial design , and soft - ware design have been tested in the system . The system is not an automated design tool , rather , it is an exploration re - source in creative design . In this paper , we focus on the design knowledge repre - sentation through FBS paths , as a basis for cross - domain analogy - based design and suggest that this representation 289 290 L . Qian and J . S . Gero plays a crucial role in what follows . Then we give a brief description of a model using this formalism . Finally , we pro - vide two examples using cross - domain knowledge based on this approach . 2 . KNOWLEDGE REPRESENTATION FOR DESIGN BY ANALOGY Some designs from different domains might have similari - ties at different levels of abstraction . Surface similarities such as attributes of a structure ( e . g . , color and material ) and struc - tural relationships are most recognizable as these attributes can be seen , heard and felt , without requiring deeper rea - soning . They have been used in many case - based design systems to retrieve relevant information for new design re - quirements . However , in analogy - based design , similarity in higher order relations such as function and behavior is the con - cern . While functions specify what a design does , behav - iors describe how a design achieves its functions . A definition of analogous designs is given as : DEFINITION : TWO designs are analogous if they have a similar function or similar behavior ; they may or may not have similar structures . • The aim of analogy - based design is to obtain new ideas of possible structures and associated operations from an ex - isting design with a similar function and / or similar behav - ior . Thus , an organization of the design knowledge that can help function and behavior indexing is required . Once an analogous design is found , what is transferred to produce the new design depends upon the structured design knowl - edge and the model of reasoning . Two representational is - sues for analogous designs are raised here . • What should be included in the representation of a de - sign or a class of designs ? and • How should designs from different domains be orga - nized ? The design goal is achieved by conscious ordering and planning of design elements . A design element is either a physical or logical entity and the relationships between el - ements are physical connections or logical links . Each ele - ment can be defined with many attributes . The elements , their attributes , and their relationships form a design de - scription and are considered as shallow , or superficial , knowledge . Behind the design description are reasons for the design structure and the functionality of that structure . The behav - ior of the design structure has an associated function and provides a causal explanation for the design . Function and behavior are considered to be deep , or high - level , knowledge . Design knowledge covers many aspects , for example , quantity , space , time , physics , goals , plans , needs , and com - munication . However , one design domain might use certain aspects of this knowledge and ignore others . For a bridge design for instance , one needs to calculate the resistance to load that provides the essential function of the bridge . There - fore , this design domain is primarily concerned with quan - tity , space , and physics . On the other hand , graphic designs do not require exact measurements of quantity , although space and color are taken into consideration . For example , a tree is to be drawn in a picture , it is not necessary to mea - sure exactly where it should be placed . An air traffic control system is concerned with flight departure and arrival times and the spatial arrangement of the airport . Here , time and space need to be taken into account . 2 . 1 . Causal knowledge A design description contains structural features including elements , their attributes , and their relationships ( or config - urations ) . This design description is essential for manufac - turers and is the basis for many CAD systems . However , these design descriptions contain only shallow knowledge about the design : its syntactic information is not sufficient for knowledge - based design systems , especially creative de - signs ( Zhao & Maher , 1992 ) . Finding analogous designs using these design descriptions alone is almost impossible , particularly when different design domains are involved . When a design is analyzed according to its deep knowl - edge , its behavior can be derived from a given structure ( De - Kleer & Brown , 1984 ; Gero , 1990 ) . State changes of the structure , the structure ' s attributes , the structure ' s relation - ship with other structures , and certain external effects in - teracting with the structure at a particular time , are used in determining the structure ' s behavior . Although differences among different kinds ( or domains ) of designs vary from high - level abstraction ( e . g . , function , behavior ) to low - level abstraction ( e . g . , structure and words used in expressing knowledge ) , the causal links in the de - signs can be generalized into FBS models . Specifically , from a design perspective , an artefact is designed in such a way as to achieve functionality through a FBS path . This inclusion of the function and behavior in the design description and relating the three individual entities ( i . e . , function , behavior , and structure ) in one module reflects the causal knowledge in the design ( Sembugamoorthy & Chandrasekaran , 1986 ; Gero , 1990 ) . The path from struc - ture to behavior , and then to function for an existing design shows the causal relationship of the design and is a one way derivation : B Relations between function , behavior and structure are referred to as a FBS path or the causal knowledge through - out this paper . Although behavior can be derived from a given structure , the FBS path can trace individual entities in both direc - FBS paths and analogy - based design 291 tions . Well - understood behavior derived from the structure can be specified by linking it with its function , thus elimi - nating the need for derivation every time the same structure is to be evaluated . This behavior can be saved and used ef - ficiently to relate its associated structure and function . Given a function , one can identify the behavior that realizes the function , and the structure that causes such behavior . Given a structure , its expected behavior and function can be found through the FBS path . When design experiences are stored with related causal knowledge or in a FBS path , a retriever can find structure and the reason behind the design . Compiling causal knowledge of a design into a knowl - edge base establishes a basis upon which we can reason about a design by analogy . A function does not necessarily asso - ciate with only one behavior . Instead , it can be associated in many ways ( i . e . , one function may correspond to many be - haviors and one behavior may be associated with more than one function ) . Similarly , behavior can be derived from more than one structure . The central idea of design by analogy is to capture this mapping to find different design descrip - tions . In other words , having specified a design function or behavior , its design structure might be different . The func - tion and behavior are considered to be analogical retrieval cues or search indexes , which retrieve designs of a similar nature . 2 . 2 . Generalized design knowledge In existing knowledge - based design systems , generalized and specific knowledge are used to carry out the design process . Generalized design knowledge represents the abstraction of many individual design experiences . It covers a range of situations and features under the abstracted variables . Gen - eralized knowledge is stored in memory , and during the de - sign process it is instantiated into a specific design to suit particular design requirements ( Gero , 1990 ) . Case or specific knowledge includes the specific design experience , episode , and / or the process that transformed the design requirements into the design description and all its relevant details . The design case has a design description with specific values for all instantiated variables . With domain - specific knowledge the case - based design process retrieves a similar case , adapts the old design case , and mod - ifies the case to produce the new design ( Maher et al . , 1995 ) . Rosenman et al . ( 1991 ) have argued that generalized knowledge and specific knowledge are important because the integration of both can compensate for the disadvan - tages of each . However , analogy - based design is more con - cerned with generalized knowledge , because the abstraction of a design concept containing general information about the design ' s function , its behaviour and its structure in terms of variables is sufficient to carry out the design process . Generalized design knowledge can be characterized by design variables representing structure , behavior , and func - tion as design ontology . It is also required to account for between - domain knowledge , that is , to generalize knowl - edge from different design domains . To implement this con - cept , some design systems classify knowledge taxonomically . Information is compiled into abstract trees covering between - domain knowledge . The taxonomies are used for generat - ing individual examples ( Sycara & Navinchandra , 1991 ) . 3 . STRUCTURE As a design representation formalism through FBS paths , we need to describe each individual entity , that is , function , behavior and structure , and their links in more detail . This section is about structure . The structure specifies what elements the design is com - posed of , what the attributes of the elements are , and how they are related . The existence of each individual element and the relations between them can directly or indirectly contribute to the functionality of the design . Structure rep - resentation varies from design to design , and from domain to domain . To initialize analogy - based design , a formalism representing different kinds of structure is essential . 3 . 1 . Structure representation A structure variable can be an element , an attribute , a rela - tionship , an operation , or a process . A set of potential struc - ture variables with their valid values constructs a design solution space . The design structure can be described with a graph , G s , which consists of five finite sets for elements , attributes , relationships , operations , and processes ( Fig . 1 ) : G s = { £ , A , R , O , P } . ( 1 ) where A = a finite set of attribute variables ( represented by hex - agonal shaped nodes linked to the elements in the graph ) { a , - } ; E = a finite set of element variables ( represented by cir - cular shaped nodes in the graph ) { e , } ; 0 = a finite set of operations ( represented by single rect - angles ) { o , } ; P = a finite set of processes composed of operations ( rep - resented by double rectangles ) { / ? , } ; and R = a finite set of relation variables between two ele - ments ( represented by undirected arcs ) , ( R C E X £ , k - } ) . The structure is divided into two parts in Figure 1 : the data structure on the left - hand side , and the process struc - ture on the right - hand side . An element is surrounded by a set of attributes and elements are related if they are joined by an arc . The dotted line represents detachable relations . The operations are linked by control flows ( thin arrows ) that show the sequence of the process . An operation can have more than one branch according to the condition at the time of execution . The thick arrow shows the data flows , which 292 L Qian and J . S . Gem Data structure Process structure Pi o element relation ^ y attributte , r detachablerelation control flow Fig . 1 . Structure graph . result from operations and can come from an attribute or an element . The description of each term is as follows : • Primitive Element and Structure Element : Any design structure is composed of elements . An ele - ment in the system that cannot be divided is called a primitive element . A primitive element can be either a physical or logical entity . For example , mechanical engineering , civil engineering , and architectural de - signs involve physical elements , while software engi - neering designs and graphic designs deal with logical elements . For instance , a chair consists of six physical primitive elements : a seat , four legs , and a back , while in a software design , an array can be treated as a log - ical element . Some elements group together and form a substructure or structure element , that has well - defined character - istics . For example , a keyboard is a substructure of a computer . The keyboard has many keys , some LEDs , and a cable . A structure element consists of a combi - nation of primitive elements or other structure ele - ments . Both primitive and structure elements are passive . They can be seen , accessed , or manipulated by designers or reasoning processes . These passive elements are re - ferred to as part of the data structure and are similar to the concept found in software engineering . The most important step in the design process is to choose elements for a design . These elements will af - fect the function of the design . For instance , a chair is not stable if it has two legs . Attribute : An element has many properties , or attributes , for ex - ample , color , shape , material , and so on . The value of an attribute may be continuous ( e . g . , the width of the door is a continuous numerical value ) , or discrete ( e . g . , the material from which the door is made can be wood or glass ) . The attribute itself or combined with others can play a key role in achieving certain behaviors . For example , the use of color in a picture conveys in - formation that achieves an effect and / or reflects a goal . Not all attributes and their values are necessarily de - signed to achieve goals . Some are unintentional but can be transformed into an intentional goal if new goals are introduced . An attribute is characterized by an attribute variable and is encompassed in the data structure . Relationship : In addition to the element attribute , the relations of the elements can also be used to achieve a function . The relationship between the elements is described with re - lation variable and is also included in the data structure . If the elements are physical , the relationship between them is a physical interconnection using topological or geometrical data . Examples include the configuration of rooms in a house and the interconnections between parts of a can opener in a mechanical device design . A different topology or geometry of the rooms and the can opener might result in a different use for them . If the elements are logical entities , their relationship is abstract and the entities are linked through internal or external actions . For example , in a simple string copy FBS paths and analogy - based design 293 program , two strings are defined as logical elements . One string is then appended to another by transferring the electronic data . The append action relates the two strings . A relationship between elements can be fixed or change - able . One kind of changeable relation is that two ele - ments might be tied up together but have loose ends : the relative position of the two elements can be changed , but they are always together . Another kind of change - able relation is detachable , for example , a key can be inserted into a lock or exists by itself . It is only re - quired when one wants to open the lock . • Operation and Process : Some designs , like software engineering and chemical control systems , have processes incorporated into the design structure . Operation is an active element that receives information from passive elements and takes appropriate control action to adjust the structure ' s be - havior . A process is formed by a sequence of opera - tions and subprocesses , each of which is referred to as a process unit . As this process is part of the design de - scription , it is referred to as a process structure . Ex - amples of such processes are chemical process control systems and programs in software designs . 3 . 2 . Static and dynamic structure Elements , their attributes , and their relationships are fixed , and no active element or process is included in a static struc - ture . The values of the structure variable are decided at the end of the design process and are used as the design de - scription . They are assumed not to change with time . In ar - chitectural and civil engineering design , static structures are dominant . When a building is constructed , the number of floors and the position of the windows and doors are fixed . Dynamic structure means that elements , attributes , and their relationship to one another can be changed . For exam - ple , glass color ( an attribute ) in phototropic spectacles can darken in the sunlight ; a door ' s structure is dynamic as its position in relation to the door frame changes when it opens or closes . Some substructures are detached from the main body of the design and are thus dynamic structures . For ex - ample , a lid can be either on or off on a cooking - pot . Sim - ilarly , elements that enter or leave a design are defined as dynamic . For instance , data in a program can be created or deleted at run time . A process structure is itself dynamic as it has a sequence of operations , each executed at a specific time . The range of values of a dynamic structure variable needs to be determined at the time of designing , but these values can be changed later at " run - time " or once the design is pro - duced . For instance , the angle range of a door in relation to the door frame is between 0 to 90 degrees , which is deter - mined at design time , but the actual position is decided when it is used . Here , the angle is a structure relation variable . 4 . BEHAVIOR Behavior is one of the ways by which the meaning of the structure is inferred by a designer or user . It is characterized by behavior types , behavior variables , and qualitative causal relations in this work . 4 . 1 . Behavior types and behavior variables Behavior can be generalized into two classes of interest here . • Spatial : Spatial behavior describes the behavior of or - dered objects in 2D or 3D space . • Temporal : Temporal behavior obeys time constraints . Events can happen sequentially , overlap one another , be simultaneous , or be of specific duration . The effects of these events are states that occur in different times or intervals . Behavior can also be characterized by two kinds of behav - ior variables . • Structural ( Direct ) : A behavior is derived from the struc - ture itself without any external effect . For example , the floor of a room has an area as a behavior variable , which is directly derived from the room ' s width and length . • Exogenous ( Indirect ) : A specific kind of behavior is shown when an external object is applied to a struc - ture . For example , the water tap or faucet has an area that water can pass through , but water is not part of the water tap design , it is only related to the design . The water flow is an indirect behavior variable controlled by the diameter of the water tap . 4 . 2 . External effects An external effect can be defined as an object imposed onto the design ( e . g . , water flowing in a faucet ) , an environment around the design ( e . g . , location and riverbed conditions for a bridge design ) , or an operation applied to the design ( e . g . , pushing a door open ) . The external effect can be a human action or any environmental effect applied to the design such as temperature or wind . Many engineering designs , such as mechanical design and electronic equipment design , re - quire external operations to change the structure status to reach a goal . Although the external effect does not belong to the de - sign , it affects the design behavior . Without a correct inter - action between the external effect and the design , the design could not mean anything at all . For instance , a bridge is built for a particular river . The same design of the bridge might not be useful for a different river . The external effects can be characterized by exogenous variables in the same way as the structure variables . An exogenous variable describes a passive situation ( e . g . , a river - bed ) , or an operation ( e . g . , pushing a door open ) . An exog - 294 L . Qian and J . S . Gero enous variable applied to a structure variable may cause a change in the structure if the structure variable is dynamic . For example , the door ' s position is a structure variable that is changed by imposing force upon it . In this case , a dy - namic structure causes a dynamic behavior . However , a static structure can also generate a dynamic behavior . For in - stance , a water pipe has a static structure designed for water to pass through . Water is considered an exogenous variable . The behavior of water passing through the pipe can be char - acterized by a behavior variable , water flow rate . From a design process point of view , behavior can be used for problem formulation , synthesis , analysis , evaluation , and reformulation ( Gero , 1990 ) . Descriptive terms for the be - havior can explicitly address the functional requirements of a design . Behavior plays an important role in linking the structure and the functions ( Tham et al . , 1990 ) . A design artefact is teleologically driven as any design is produced to meet a goal or achieve a purpose ( here called function ) . The purpose provides a means of understanding the behav - ior of the design . 4 . 3 . Qualitative causal relation During the conceptual design phase , quantitative or de - tailed data about the structures might not be important , but qualitative analysis can help the designer to develop con - cepts without concentrating on numbers . The incremental qualitative analysis of DeKleer and Brown represents quan - tities according to how they change when a system input is perturbed , for example , increasing , decreasing , constant , or indeterminate ( DeKleer & Brown , 1984 ) . Qualitative physics is involved with representing and rea - soning about the physical world in qualitative terms . It pro - poses formalizing the commonsense knowledge about the everyday physical world in a way that is simpler than clas - sical physics . Qualitative physics captures the tacit knowl - edge underlying the mathematics of continuously varying quantities and differential equations , and retains important distinctions ( DeKleer & Brown , 1984 ; Forbus & Gentner , 1990 ) . Research in this area has been growing rapidly over the past 20 years , though often under different names such as qualitative process theory , naive physics , or common - sense knowledge . Qualitative physics involves two key issues . • Qualitative expression : Continuous properties of the world are expressed through a discrete system of symbols . Qualitative descriptions are approximations by quantization and fuzzy variables , but not all approximations are useful . Each qualitative state of the system should lead to qualitatively distinct be - havior ( Forbus & Gentner , 1990 ) . • Production of causal accounts of physical mecha - nisms : Causal accounts of physical mechanisms are much eas - ier to understand than the behavior of their physical environment ( Bobrow , 1984 ) . Causality plays an im - portant role in qualitative physics . A systematic set of conventions is used to represent how information is propagated through physical artefacts to achieve the overall purpose or function . This set of conventions is called causality and can be used to analyze , design , and diagnose engineered artefacts . Causality is a link be - tween function and structure through behavior . The causal relations among the states or behavior vari - ables can be represented as causal ordering or as an influ - ence graph ( Sycara & Navinchandra , 1991 ) . While the causal ordering labels the causal link with an equation name , an influence has a qualitative differential relation between two variables where a change in one variable is dependent on the other . The influences of the problem variables in a phys - ical situation can be used to represent the dynamic behavior of the situation . This behavioral description expresses causal interactions between the structure and behavior variables , and it is a thematic abstraction that has been used in CA - DET to retrieve cross - contextual designs ( Sycara & Navin - chandra , 1991 ) . To efficiently identify a structure and its potential behav - ior , the qualitative causal reasoning process can be codified into a design representation as a qualitative causal relation . Instead of deriving behavior from a structure , this behavior can be explicitly specified . 4 . 4 . Behavior representation Behavior type , behavior variable , and qualitative causal relation are used to represent a generic behavior of a struc - ture . This representation covers the following aspects : be - havior type ; static and dynamic behavior of a structure ; external and internal effects on changes ; direction of causa - tion or dependencies of the structure and behavior variables ; qualitative measurement of the changes ; and qualitatively dis - tinct states . The following formalism shows the qualitative causal re - lation between a structure variable and a behavior structure : B ( T ) { q b } ^ S { q s , Ex \ O } . where B = a behavior variable , Ex = an exogenous variable , O = internal operation , q b = qualitative state of B , q s = qualitative state of S , S = a structure variable , T = behavior type , < - = causal direction , { } = optional symbol . ( 2 ) FBS paths and analogy - based design 295 This expression not only reveals the dependency relation between the structure and the behavior , it also describes the qualitative change from the structure to the behavior , and relates the structure to the external effect . This behavior type is encoded into this expression to give a more comprehen - sive explanation about the design . If the behavior is static , the corresponding behavior vari - able , B , is dependent on a structure variable 5 with or with - out the exogenous variable Ex . Therefore , the qualitative causal relation for static behavior becomes : B ( T ) < - S { Ex } . ( 3 ) A static behavior does not change with time . It is derived from a static structure . For example , a cup is static in the sense that neither its handle nor shape can be changed , once it has been designed . Therefore , the volume of the cup ( as a behavior variable ) is fixed . The external effect is optional , that is , a behavior might or might not be affected by an external effect . If the behavior is dynamic , the respective qualitative states ( q s , q h ) in eq . ( 2 ) are required to describe how the changes can occur . The qualitative state describes a stable status and change tendency in terms of a qualitative measurement such as increasing ( + ) and decreasing ( - ) . For instance , the hinge angle of a door can be increased or decreased . A status can have discrete values or continuous values quantized into in - tervals . A discrete value with an interval for continuous val - ues or a changing tendency makes distinctive qualitative states . For example , in a hand dryer design , there are two main structure variables that keep the air temperature constant : coil and thermostat switch , an exogenous variable : air , and two behavior variables : temperature and thermostat status , Table 1 . If the temperature of the hot air exceeds 80°C , the thermostat switch is turned off . When the temperature of the hot air decreases below 80°C , the thermostat switch is turned on . The temperature with continuous values is then quantized into 0 and 1 , where 0 corresponds to temperature below 80°C and 1 represents the status of temperature equal to or above 80°C . The thermostat status has two discrete values : 0 for Off and 1 for On . The qualitative causal relation also describes the link be - tween two structure variables , and between two behavior variables . If there are n related behavior variables and m structure variables where the mth structure variable has a direct effect on the first behavior variable , the causal prop - Table 1 . Qualitative measurement of hand dryer design Behavior variable Qualitative values Heat coil temperature Thermostat status l ( On ) , O ( Off ) ) , 0 ( < 80°C ) agation is from structure to behavior . This is referred to as series propagation and is expressed as : B n < - B n _ , . . . B , S m _ , S , ( 4 ) and Note that B and S are shorthand for B { T ) { q b ) S { q s , Ex \ O ) , respectively . Multiple influences from structure to structure , from struc - ture to behavior , or from behavior to behavior represent an - other type of causal propagation called parallel propagation . If m structure variables affect one type of behavior or if m behavior variables cause another behavior change , this can be expressed , respectively , by eq . ( 5 ) : or by eq . ( 6 ) : ( 5 ) ( 6 ) By combining series and parallel causal propagation , struc - tures and behaviors can be represented as behavior graphs , which are similar to those of Sycara and Navinchandra ( 1991 ) . In Figure 2 , the arrows linking structure to behavior variables , and behavior to behavior variables show the cau - sation direction or their dependencies , and allow linking two variables with attached qualitative symbols ( e . g . , an arrow from B 5 to B 2 with a numeric symbol , 1 , and a symbol , + , respectively ) . If a relation between two variables is static , no qualitative symbols are shown . An exogenous variable can be directly applied to a structure variable or a behavior variable . The causal dependencies can be cyclic , that is , one vari - able A affects another variable B , meanwhile B also affects A . An example of a behavior graph , the hand dryer design , is shown in Figure 3 . This models the standard control loop . Initially , the thermostat switch that controls the heating coil is on ( e . g . , 1 ) . This causes the temperature of the blowing air to increase ( e . g . , + ) . Until the temperature reaches 80°C ( e . g . , 1 ) , the switch is turned off ( e . g . , 0 ) . Because the switch is off the hot air becomes cooler and its temperature drops Behavior Structure External effects Fig . 2 . Behavior graph . 296 L . Qian and J . S . Gero Structure External effect Fig . 3 . Behavior graph for hand dryer . ( e . g . , - ) . When the temperature decreases to below 80°C , the switch is turned on again . In the behavior graph , the arrow indicates the causal di - rection , while the small rectangle attached to the end of the arrow represents the qualitative state . The change from one behavior state to another might be described by more than one qualitative causal relation . For instance , temperature < — connection and temperature £ - connection describe two dis - tinctive qualitative state changes . These changes are then combined into temperature < — connection . Unlike the influence graph where a monotonic expres - sion is used by marking the change tendency on the causa - tion arrow ( e . g . , a £ - b means a increases while b increases ) , the above behavior graph needs to describe the qualitative measurement at both ends of the causation arrow . This rep - resentation extends the capabilities of expressing the changes caused not only by other changes , but also by a certain sta - ble state , for example , temperature above 80°C . Behavior variables and behavior graphs can be used to retrieve anal - ogous designs . stract word . In analogy - based design , abstract function is a key representation for discovering analogous designs . For example , an umbrella ' s function of blocking raindrops and a door ' s function of blocking access ( e . g . , people , animals , etc . ) can be expressed as the generalized function of block - ing an object . 5 . 1 . Taxonomies and function variable There is no uniform definition or representation of func - tion . Function is associated with a design ' s teleology . A widely accepted definition of function in design research is that a function is a relationship between the input and out - put of energy , material and information , or the manipula - tion of the fluxes of energy , material and information ( Wirth & O ' Rorke , 1993 ) . Manipulation of fluxes involves associ - ated actions . Function has also been defined as to do some - thing , which is represented by to verb objectives , where the verb describes actions like storing , transmitting , transform - ing , changing , etc . , and the objectives are fluxes . Function can be characterized by two kinds of variables— action and flux . Their values correspond to the nodes ap - pearing in two taxonomy hierarchies : action taxonomy and flux taxonomy . The action taxonomy represents a hierarchy of verbs with associated parameters . For example , an action can store or transmit fluxes , transform one flux into another , change the amount of flux , and so on . A function of a curtain is to con - trol light intensity . Here , control is a special kind of change action , whereas light intensity is the amount of the light flux . The flux taxonomy has a flux root node that is subcat - egorized as material , energy , and information . Under the ma - terial node , are fluid , solid objects , etc . The fluid may be any of water , oil , and so on . 5 . FUNCTION Functions are usually shown as labels representing the pur - poses of an artefact . Existing design systems tend to limit functional descriptions to a few words due to the difficul - ties of interpreting natural language . The function label then can be used to identify behaviors that achieve the corre - sponding function . Because a function label is used as a key word , or an in - dex , to retrieve corresponding behavior , it is necessary that the functional requirements are represented in a consistent way . Spelling mistakes or incorrect word order can impede the recognition of associated behaviors . Thus , a sophisti - cated parser with the capability of partial matching , and re - ordering of words , is required to process function labels . Another problem in using function labels is that any spe - cific meaning of a label may be limited in a search for an analogous function . One word can be used in one domain and another used in a different domain , but the two words might be synonymous and generalizable into a more ab - 5 . 2 . Function decomposition A list of functions can be specified for a design . Any func - tion that is directly associated with a set of behaviors , is called a primitive function . An abstracted function needs to be decomposed into several more specific primitive func - tions . For example , the function of a house is the provision of a living area , this in turn can be decomposed into sleep - ing area , eating area , etc . This information is available only through domain knowledge . Eating area , for example , re - quires light potentially provided by windows in the room , and heat insulation is potentially provided by the thickness of the walls and the materials out of which they are made . Thus , provision of light and heat insulation are two primi - tive functions . Some functions of the design product are primary , others are secondary . Primary functions determine the name and the concept of the design product while secondary func - tions are supportive , realized or user interpreted . FBS paths and analogy - based design 5 . 3 . Function representation In Wirth & O ' Rorke ( 1993 ) , function is characterized by five attributes : input flux , output flux , source component , destination component , and function carrier . In the case of the hot - cold water faucet example , hot and cold water are two kinds of input fluxes , and the mixture of both is the output flux . The person who controls the water flow is the source component . If the output water mixture is to be used for washing hands , the hands are considered to be the des - tination component . The hot - cold water faucet is the func - tion carrier . The source and destination components defined here should not be confused with the component defined in the structure of the design prototype . Taking a different approach , the FBS model ( Sembuga - moorthy & Chandrasekaran , 1986 ) treats function , behav - ior , and structure as individual concepts , and relates them to causal relationship , or a dependency network ( Gero , . 1990 ; Zhao & Maher , 1992 ) . The function representation given here is defined accord - ing to function variables , and the relations between func - tion and their corresponding behaviors . Although design products differ from one domain to an - other , the way in which the structure or substructure achieves the design goal or function through behavior can be classi - fied across design domains . A function can be accom - plished in the following generalized FBS path types or FBS types : • FBS type I : achieved by a static behavior ( F < — B s ) . • FBS type II : achieved by a state of a dynamic behavior ( F < - B ' ' ) . • FBS type III : achieved by a set of behaviors occurring at same time ( F < - { B } U { B } ) . • FBS type IV : achieved by a set of behaviors occurring in sequence ( F < - ( ( B } , { B } ) + ) . B * and B rf represent static and dynamic behavior states , re - spectively . Here , B without any superscript denotes either B s or B rf , that is , BIB ' ' . B rf can be a value or a range of val - ues of the behavior variable . ( { B } U { B } ) represents the coexistence of two sets of behavior states referred to as par - allel states , while ( { B ) , { B } ) describes two sets of behavior states occurring in sequence , referred to as series states . The plus ( + ) sign represents state repetition . The ( { B } , { B } ) + describes two sets of behavior , one of which repeats after the other at least once . FBS types I and II are considered to be primitive func - tion achievement because each function associates with one behavior variable ( Fig . 4 ) . A direct behavior variable can be derived from other indirect behavior variables either in par - allel or in series . 297 Function Behavior Structure FBS type 1 - < « ! FBS type II • Fig . 4 . FBS types I and II marked with hatching . In FBS type I one function is realized by static behavior . The FBS type II design has a function associated with a dynamic behavior state . The behavior state ( with a quali - tative measurement ) is represented by a small rectangle in Figure 4 . However , in many designs , a function depends on more than one behavior variable . The set of variables can be com - posed in parallel ( FBS type III ) , in sequence ( FBS type IV ) , or both ( Fig . 5 ) . A function achieved by repetition of sev - eral behavior variables is seen as a special case of sequen - tial behavior . The number marked on the arrows for FBS type IV function indicates the order of the states . In general , the function representation can be described as below : Fir - B ' lB ' KfB } U { B } ) I ( { B } , { B } ) + ( 7 ) Knowing the FBS type establishes a basis for analogy - based design in between - domain designs . If two designs have the same FBS type , they are considered for analogical map - ping because they have the same way of behaving to achieve a function . To some extent , the FBS type sets constraints Function Behavior Structure FBS type III FBS type IV Fig . 5 . FBS types III and IV marked with hatching . 298 L . Qian and J . S . Gero upon retrieving analogous designs and elaborating analog - ical mapping . 5 . 3 . 1 . FBStypel The FBS type I design involves functions achieved purely by the existence of a structure : no operation is required . This is a primitive description of the relation between a function variable and a behavior variable . The behavior variable might be generated from one or more structure variables . Both structure and behavior variables are static . Static structure variables such as elements , attributes , and relationships ( not processes ) can behave statically . The struc - ture may also relate to external effects . If external effects are involved , they tend to be environmental , that is , they relate to the design without the intention to change the struc - ture . For example , in architectural design , a view can exist due to the strategically placed windows . The static relation - ship between the windows ( i . e . , the design structure ) and the surroundings ( i . e . , the environment effects ) enables the view exists functionality . 5 . 3 . 2 . FBS type II The FBS type II design deals with dynamic structure and behavior . A dynamic structure variable has a valid range of values that can be changed by external effects or by a change in other structures . A specific value or a range of values de - termines a qualitatively distinct state of the structure and the behavior , and in turn provides a function . The function is achieved by a state or a qualitative value of a behavior variable . For example , opening a door allows access while closing the door impedes access and provides privacy . When the behavior variable access area is zero , the door is closed , otherwise it is open . The physical position of the door is a dynamic structure variable . Depending on the operation ap - plied to the door , different behaviors occur and different func - tions can be achieved . 5 . 3 . 3 . FBS type III The FBS type III design composes primitive FBS paths conjunctively . In many complex designs , a function is af - fected by more than one behavior variable . A set of static behavior and dynamic behavior variables or a combination of these are present simultaneously . For instance , the function carry - load in a rigid frame design is achieved by two static behavior variables— mechanism bending and mechanism compression , each of which is deduced from other behaviour variables ( Zhao & Maher , 1992 ) . 5 . 3 . 4 . FBS type IV The FBS type IV design has functions attained by a se - quence of behavior states . The function not only depends upon several behavior states , but also upon their sequence , and some states may be required to repeat one after another . Repeat behavior variables are special sequences that allow the same behavior states to reoccur several times after they have changed . In the door example , although the opened and closed states provide the access and private functions , there is no incor - porated information as to how the opened state is reached from the closed state . There should be two functions , the first of which allows the door to open ( if it is closed ) and the second allows the door to close ( if it is open ) . The open - ing function involves state change from closed to opened , while the closing function does the reverse . Figure 6 shows an example that has a behavior sequence expressed as follows : ( OB , Ufl 2 ) , B 3 , ( ( B 4 , B 5 ) + U B 6 ) , B 7 , B 8 ) . First , behavior states B t and B 2 should be presented si - multaneously , followed by B 3 . B 4 and B 5 have a repeat se - quence that exists simultaneously with B 6 . When B 6 is no longer true , the repetition of B 4 and B 5 is terminated before B 7 starts . B s is the final state in the sequence . The sequence of the behavior contributes to the function , F . 6 . DESIGN PROTOTYPES Design prototypes are chunks of knowledge representing a class of generalized design experiences ( Gero , 1990 ) . The content of a design prototype includes pertinent descrip - tions of the function , behavior , structure and external ef - fect , and various forms of knowledge that support the commencement and continuation of a design process . initialstale Fig . 6 . Behavior sequence . FBS paths and analogy - based design 299 Design prototypes have been used successfully in PROBER , a routine design system in the building envelope domain ( Tham et al . , 1990 ) . Through the dependency net - work that relates the function , behavior , and structure vari - ables , PROBER identifies the structure element for design instantiation . The notion of design prototypes has also been developed for creative design ( Zhao & Maher , 1992 ) in a structural design domain . The dependency network is extended with generic causal relations such as data dependency relations , existence dependency relations , and component - system re - lations , so that mutation and analogy techniques can be applied . However , both design systems deal with static structures like building and structural designs . To overcome the short - age of knowledge representation for designs with dynamic structures and to provide a uniform representation for between - domain analogies , this research enriches the no - tion of the design prototype by adding a new kind of knowl - edge called qualitative causal knowledge . 6 . 1 . Design prototype representation Design prototypes include shallow , operational knowledge as well as deep causal knowledge . While the shallow - level knowledge can be seen as knowledge that is sufficient for performing a task itself , the deep knowledge captures an underlying causal relationship between the function , behav - ior , and structure . The design prototype is defined by a set of design vari - ables and various kinds of knowledge described in the fol - lowing formalism : P — { F , B , S , Ex , K r , K q , K cnl , K cmp , K q , ( 8 ) where B = a finite set of behavior variables , Ex = a finite set of exogenous variables , F = a finite set of function variables , K cmp = computational knowledge , K cnt = context knowledge , K q = qualitative knowledge , K qc = qualitative causal knowledge , K r - relational knowledge , 5 = a finite set of structure variables . While function describes goals or intentions of the de - sign artifact , structure specifies individual elements , their attributes , and relationships between them . The exogenous variables describe the environment affecting the structure of an artifact . The link between the structure , exogenous , and function is established by behavior and represented by qualitative causal knowledge and relational knowledge . The relational knowledge , K r , represents the dependen - cies between function , behavior , and structure , while qual - itative knowledge , K q , describes the directional effect on other variables of changing a variable . The design proto - type also contains computational knowledge , K cmp , which is the quantitative counterpart of qualitative knowledge , and context knowledge , K cnl , which identifies effects from ex - ternal agents on the design in relation to exogenous vari - ables . Distinguished from K r , which focuses on the control of variables during the design process , K qc concerns the dy - namic characteristics of the design artefact once the design is made . 6 . 2 . Qualitative causal knowledge Qualitative causal knowledge summarizes causal relations between the function and the behavior qualitatively and be - tween the behavior and the structures . This is summarized by the following expressions ( from 7 , 2 , 4 , 5 , 6 ) : U \ B ( T ) { q b } , Ex \ O } B n < - B n _ , . . . B , < - S m < - S m _ , \ Qualitative causal knowledge provides a basis for analogy - based design as it includes the deep knowledge about what and how a behavior achieves a function , and what and how a structure derives the relevant behavior . This is especially useful during the analogy retrieval and analogy elaboration processes . 7 . AN ANALOGY - BASED DESIGN MODEL Usually , an analogical problem - solving process is applied when a routine design fails to yield a design solution . An analogous design ( or source ) with similar requirements could be retrieved , then adapted or transformed for the current de - sign with the assistance of domain knowledge in the form of heuristic rules and transformation operators . If a design plan is stored with the source design solution , it provides more information about adaptation and transformation ( Bhansali & Harandi , 1992 ) . Design is also an exploration process that differs from search . While a search process locates values of design vari - ables in a defined state space , an exploration process pro - duces state spaces ( Gero , 1994 ) . A design state space is defined by a set of variables and processes operating within a bounded context . By producing state spaces , is meant that either new design state spaces are created or existing design state spaces are modified . While most design systems use analogy to search for so - lutions to design problems , this research concentrates on the 300 L . Qian and J . S . Gero exploration aspect . An existing design is studied , that is , de - sign variables such as function , behavior , and structure vari - ables are obtained from the existing design . From this known design state space an analogous design can be retrieved . By mapping the current existing design and the analogous or source design , useful information is transferred by analogy to the current design to modify the existing state space . This design process bases itself on an existing design solution for a new design problem and explores alternative solutions to generate a creative design . The intention of the remainder of this paper is to explore the potential of having a computational model that can work with between - domain analogies using the design prototype knowledge representation driven by function and behavior . This approach proposes a model combining analogical problem - solving and analogical exploration in the design process ( Fig . 7 ) . The upper section shows the exploration process while the lower section shows the problem solving process . Both processes have retrieval and elaboration tasks , but their tasks differ . The design retriever is divided into two tasks : a concept retriever and an analogy retriever . While the concept re - triever retrieves a target concept design with the given de - sign name , the analogy retriever finds designs different from the new design , but with a similar function or behavior . The primary functions , associated causal explanation or behav - ior , and deduced features can then be used to retrieve anal - ogous designs . In the analogy elaboration process , mapping between the target and the source can be found . The corre - spondences are considered to be learned features , which can be transferred and transformed from the source to the target as a guide in the problem - solving process . The result of the analogy elaboration is a design structure conjecture . This is the proposed new design and needs to be evaluated . The design model proposed here aims to explore new de - sign solutions from analogous designs . This model differs from the purely problem - solving approach in two respects : ( 1 ) useful features are derived from a target design concept and used to retrieve between - domain analogies ; ( 2 ) adapta - tion and transformation of the source analogy solution is guided by mapping between the source and the target . This model compiles design prototypes into the knowl - edge base . Each design prototype contains the qualitative causal knowledge that provides a platform to explain how an existing design achieves its functionality . It explores the solution space by using a target concept design , which in - creases the possibility of retrieving between - domain anal - ogies and guides the adaptation process . In contrast to failure triggered creative design models , this model uses a target concept design as a starting point . 7 . 1 . Design retrieval process There are two distinct tasks involved in the design re - triever . The first is to find a target design concept and the second is to retrieve an analogy source design . Design requirements can be decomposed into function , behavior , and / or structure , and usually they provide a de - sign concept name ( i . e . , what is to be designed ) . The con - cept retriever uses the concept name to find an existing design and deduce its primary function and corresponding behavior . The deduced function and behavior then act as analogical retrieval cues . The analogy retriever receives input from design re - quirements and / or from the target concept design . These can be generalized as label indexes or graph indexes that retrieve analogous designs with the same function or behavior . A target concept design can be found according to the design requirements . This target concept design is used to explain how an existing design works . The primitive func - tions and associated behaviors of the existing design are then used as analogy retrieval cues to search for analogous de - signs in different domains . Although an analogy can be re - trieved from the same design domain , this paper focuses on between - domain analogies and the issues related to them . 7 . 2 . Analogy elaboration process As part of an exploration process , mapping is used to identify correspondences between the source and target , Design retriever Analogy elaboration Problemsolving Analogy evaluation analogyevaluation Fig . 7 . Analogical problem solving and exploring processes . FBS paths and analogy - based design 301 Source Target > — s X matching mapping Fig . 8 . Matching via function and behavior , mapping via structure . while transferring analogy inferences indicates what can be used from the source design ( Kedar - Cabelli , 1988 ) . The aim of analogy - based design is to find structures and external effect mappings ( in terms of design variables ) through function or behavior matching ( Fig . 8 ) . Matching means that two function variables , two behavior variables , or two behavior graphs are identical at an abstract level . Mapping means that two structure variables or two exog - enous variables have the same associated functions or be - haviors . If two functions match , their associated mapping for be - havior and structure , plus external effect , can be found . If two behaviors ( two behavior variables or behavior graphs ) match , only structure plus external effect mapping can be obtained . In the case of matching behaviors , different struc - tures might be found to attain different functions . As part of the problem - solving process , the source de - sign is transferred partially , and may be transformed , to the target resulting in a new design . This adaptation process is guided by the structure mapping process . In other words , structure mapping identifies potential design variables that can be transferred from the source to the target . 7 . 2 . 1 . Mapping process From a design point of view , the mapping process aims to find structure correspondences between the source and target designs . As mentioned in Section 3 , a structure has four kinds of design variables ( refer to Fig . 1 ) : ( 1 ) element ; ( 2 ) attribute ; ( 3 ) relation ; and ( 4 ) process . Elements , attributes , and relations can be seen as data structure while the process is referred to as process struc - ture . Data structure is a formalism that represents the or - dered and accessible relationships in the data ( i . e . , elements and their attributes ) . The process represents a unique and finite set of events that is defined by its purpose or effect , which is achieved under certain conditions . The process per - forms operations on the data . Data structures and process structures have significant differences . A data structure is passive , but accessible . Its elements are ordered spatially , causally , or logically . A pro - cess structure , on the other hand , is active and can act on the data , that is , it can change the data ( if the data has a dynamic structure ) . The process structure involves tempo - ral knowledge : the sequence of operations affects the se - quence of the behavior states . This difference between data and process structures suggests that mapping occurs from data - to - data structure or from process - to - process structure . The process structure needs to operate on the data struc - ture and the process mapping is performed before the data mapping . A mapping unit ( MU ) is the structure ( including data and process ) identified through the FBS path or qualitative causal knowledge , and contains one or more structure variables . A data structure MU appears in designs of FBS type I , II , or III , while a process structure MU is found in designs of FBS type IV . The mapping rules are domain - independent and de - fined for these four types of FBS paths . At the end of any mapping process , a list of correspon - dences for elements , attributes , relations , and operations are recorded . Some will be selected for transference from the source to the target . This structure mapping process , which guides the anal - ogy elaboration , occurs at different levels , for example , the level of the individual variable ( element , attribute , relation , or process ) and the level of the groups ( behavior or struc - ture ) . Due to the nature of between - domain analogy , map - ping rules are defined without recourse to domain - dependent knowledge . A summary of the mapping and transferring rules is shown in Table 2 . Three rules have been defined for one - to - one mapping . Rule 1 applies when an attribute variable maps another attribute variable . Rule 2 applies when an attribute variable and a relation variable are mapped . Rule 3 is for mapping two relation variables . These three rules are primitive rules , which can be applied to the static and dynamic structure mapping processes invoked by Rule 4 and Rule 5 . The static structure mapping process in Rule 4 takes every pair of the structure variables from the source and target and compares them in a generalized form . General knowledge is more successful if the pair has the same kind of structure , for example , both are attribute structures or both are relation structures . However , a pair in which one is an attribute and the other is a relation is more dif - ficult to match using only structure information , be - cause attributes and relations are different types of design features . The dynamic mapping process in Rule 5 is based on struc - ture mapping theory ( Falkenhainer et al . , 1989 / 90 ) , in which structural properties are mapped from a source domain to a target domain . This mapping theory suggests that a system of relations known to hold in the source also holds in the target , through causal links . The preservation of the behav - ior , which is generated from relations , enables the detailed mapping between two designs to be traced . Furthermore , the composite mapping rule Rule 6 applies Rule 4 and Rule 5 for static and dynamic structures , respec - tively . Rule 5 consists of a complicated process that finds 302 L . Qian and J . S . Gero Table 2 . Summary of mapping and transferring rules Rule Rule 1 Rule 2 Rule 3 Rule 4 Rule 5 Rule 6 Rule 7 Rule 8 Condition ( J , « = > fly a , < = » tj r , < = > rj static structures dynamic structures combined static and dynamic process structure for primary function process structure for secondary function Mapping e , < = > ej e , . « { « , , , . . . , * , „ ) { e lV . . . , e f J « = > { < ? , . , , . . . , e Jn ) apply static structure mapping process apply dynamic structure mapping process apply composite behavior mapping process apply process structure mapping process apply process structure mapping process on initial and final states Transferring a s a s and e , or r s and { e t | , . . . , e s j r s and some of [ e si , ••• , e s j combined combined combined Ex , 0 , or 5 Ex , 0 , or S the mapping at the element level . Due to the dynamic be - havior of the design structure , behavior semantics offer use - ful hints regarding the mapping . The mapping process uses qualitative causal knowledge to generalize behavior - structure graphs constructed from FBS paths and related static structures . The mapping is executed using a subgraph isomorphism algorithm . Rule 7 and Rule 8 are process struc - ture mapping rules for primary function and secondary func - tion , respectively . The algorithms are described in more detail in Qian ( 1995 ) . Mappings at different levels provide an easy way to trans - fer the source structure to the target . The transference of knowledge is based on the corresponding mapping rules . The transference process merely suggests what can be passed from the source to the target for certain structure variable combinations . Mapping rules 1 to 6 result in mappings at four levels ( Fig . 9 ) . Starting with function matching , two behavior groups are mapped using the FBS path ( mapping level 1 , LI ) , then individual behavior variables are mapped ( L2 ) , followed by the mapping of element group ( L3 ) , and finally elements are mapped ( L4 ) . The mapping at the top is more general than the one at the bottom . Mappings LI and L3 come directly from FBS paths while mappings L2 and L4 are obtained by mapping rules . In process structure mapping , internal processes and ex - ternal operations imposed on the structure play key roles in composing the behavior sequence . Therefore , not only de - sign data structures , but also corresponding operations , or process structures , are required for mapping to produce a new design . If mapping of a primary function is required , the behav - ior sequence must be mapped exactly . This means that not only should the number of behavior states be equal , but so should their state orders . The state values should be identi - Source • for matching < § MI«WII ^ and for mapping Fig . 9 . Mapping levels for data structure . FBS paths and analogy - based design 303 cal in terms of generalized qualitative state values . If a pro - cess structure is associated with a secondary function , its mapping process is different from the one associated with a primary function . A secondary function of FBS type IV con - siders the initial state and final states as being more impor - tant than the intermediate states . As long as the initial state is transformed into the final state , any number of transi - tional states can be included . The different mapping levels contain different kinds of details about mapping . This pro - vides a great deal of flexibility for knowledge transference in the analogy elaboration process . 7 . 2 . 2 . Knowledge transference and transformation After a mapping is found , some structure variables are identified for transference from the source to the target . Each mapping rule causes a transference of an element , an attribute , a relation , or a process , or combination of the primitive elements . The transferred variables might require transformation to adapt to the target situation . General rules are defined for knowledge transference and transformation . 7 . 3 . Analogy evaluation process The adapted design structure conjecture created by between - domain analogy needs to be evaluated using domain knowl - edge , according to the design requirements . New design variables introduced from the source to the target do not include associated domain knowledge , thus it is difficult to justify the design conjecture . In such circumstances , auto - matic machine checking of the structure and behavior is not realistic . Therefore , in a design exploration model , inter - action between human and machine is recommended ( Kolod - ner , 1991 ) . Interactive evaluation processes and visual design conjectures are proposed as important factors that over - come this lack of between - domain knowledge . 8 . EXAMPLES The framework described in the previous sections for analogy - based design has been developed as DEsign Sup - port System Using Analogy ( DESSUA ) , of which the core system is implemented to demonstrate the feasibility , prac - ticality , and potentiality of the model . DESSUA is capable of representing design prototypes ( using a description lan - guage [ Qian , 1995 ] ) , carrying on design processes using anal - ogies and exploring new design ideas . DESSUA is implemented on Sun workstations . The anal - ogy engine is written in IBUKI Common Lisp , the require - ment processor , the prototype manager , and the UI are programmed in C and XView . Part of the prototype man - ager is integrated with Protokit , implemented by Balachan - magnetizedspace 1 magnetizedspace 2 manual switch Fig . 10 . Buzzer ' s circuit . dran in the Key Centre of Design Computing , University of Sydney . Two examples are presented to demonstrate the ideas and the system . Although there are target designs in the current design knowledge base , we want to produce new designs by analogy . From the existing structures , behav - iors and functions , an analogical design may be retrieved . By exploring the target and source , we expect to produce new designs . The first example shows how a buzzer design is created from a flashing cursor program . Two structure elements are replaced with a process structure through the analogical map - ping and transference . The second example designs new doors from analogous behavior of a curtain design . A dif - ferent structure element is introduced to produce a different kind of door . 8 . 1 . Designing a buzzer using a serial behavior analogy A buzzer is typically designed with a clapper bell , clapper base , coil , battery , and switch ( Fig . 10 ) . The buzzing is con - trolled by the magnetized clapper base repeatedly connect - ing and disconnecting the bell to the base . This behavior achieves the buzzing function ( Fig . 11 ) . The relevant part of the buzzer design prototype is shown below ; comments follow the semicolon . Function Behavior Structure Fig . 11 . Buzzer ' s behavior . 304 L . Qian and J . S . Gem ( buzzer ( ELEMENT ( battery ) ( switch coil ( clapper ( clapper - bell clapper - base ) design name clapper is composed with clapper - bell and clapper - base ; dynamic relation ( RELATION ( connect switch battery ) ( connect b a t t e ry coil ) ( connect c o il clapper - bell ) ( connect c l a p p e r - b e ll clapper - base D ( 1 0 ) ) ( connect clapper - base switch ) ) ( FUNCTION ( 1 t ( buzzing ) iv < — ( REPEAT ( ii < — ( connected ( 1 ) ) ( ii < — ( connected ) ( 0 ) ) ) ) ) ; ' connected ' is changed between 1 and 0 ( BEHAVIOR ( ( connected clapper ) ( 10 ) < — ( magnetized _ space2 clapper ) ( - + ) < — ( magnetized _ spacel coil ) ( - + ) < - ( voltage coil ) ( 01 ) ) ( ( voltage coil ) ( 01 ) < — ( connected clapper ) ( 01 ) dynamic behavior changes indirect behavior variables One primary function of the buzzer is buzzing derived from a temporal behavior . The FBS path type is IV , which means the function is achieved by a sequence of behavior states . In this example , connected is the dynamic behavior variable with its value as a state changed to 1 ( or on ) and 0 ( or off ) repetitively . The retrieval is performed by function and behavior matching . Although the description of the function variables and dynamic behavior variables are different in different designs , they are turned into variable names at retrieval time . In other words , the following function and behavior representation is used as index for searching : ( FUNCTION ( 1 t ( ? F 1 ) iv < - ( REPEAT ( ii ( ? B1 ) ( 1 ) ) ( ii < - ( ? B 1 ) ( 0 ) ) ) ) ? F1 and ? B1 are function and behavior variable names , respectively . With the repetition of the change in behavior states , a software program design flashing cursor is retrieved ( Fig . 12 ) . The relevant part of its design prototype is shown below : ( flashing _ cursor ( ELEMENT ( screen cursor ) design name two structure elements ( RELATION ( on cursor screen D ( 1 0 ) ) ( PROCESS ( WHILE DO ( ( copy cursor screen ) ( ( wait half second ) ) ( ( remove cursor screen ) ( ( wait half second ) ) ( copied ) ( 1 ) ) ( copied ) ( 0 ) the relation is dynamic the process has a while loop each loop has 4 actions : 1 : copy let the behavior variable ' copied ' state to 1 ; 2 : wait ; 3 : remove cursor ; 4 : wait ( FUNCTION ( 1 t ( flashing ) ) ( BEHAVIOR iv ( REPEAT ( ii ( copied ) ( 1 ) ( ii < - ( copied ) ( 0 ) ) ) ) ; show behavior changes FBS paths and analogy - based design Function Behavior Structure Process Fig . 12 . Flashing cursor ' s behavior . The behavior copied is derived from the process struc - ture in ( PROCESS . . . ) . There is no indirect behavior , thus ( BEHAVIOR . . . ) is empty . Flashing is a primary function with a kind of temporal behavior . The FBS path type is also IV and there is a dynamic behavior variable , copied , with its state changed from / ( can be on or interpreted as a bool - ean TRUE ) and 0 ( off or as FALSE ) repetitively . The behavior of the two designs , buzzer and flashing cur - sor , are analogical because both have repetitive changes from one state to another to achieve a function . The flashing ef - fect is accomplished by copying the cursor image on the 305 screen for half a second , then removing it and waiting an - other half a second , copying it again , removing it again , and so on . This on / off behavior is exactly the same as the buzz - ing effect although the clapper connection and the cursor are completely different concepts in different design do - mains . The behavior of both designs belong to FBS type IV , thus the process structure mapping rule , Rule 7 , is applied . The mapping between buzzer and flashing cursor design is shown in Figure 13 . The behavior matching between the two designs occurs in the state changes . Their associated behavior variables , connected and copied are mapped . The rest of behavior in the buzzer is mapped to nothing in the flashing cursor . From the buzzer design , coil and clapper are two direct structure elements that affect the behavior , whereas in the flashing cursor design cursor and screen are the two direct structure elements . These two direct structure elements are also mapped . The last map is battery and switch in the buzzer to the process structure in the flashing cursor . They are indi - rect structures to derive the behavior . The identification and mapping of these key variables are performed by DESSUA by checking ELEMENT , RELATION , PROCESS , BEHAV - IOR subjects in the design prototypes . Function Behavior Fig . 13 . Mapping between buzzer and flashing cursor designs . 306 L . Qian and J . S . Gem Once the key variables are identified and mapped , knowledge transference and transformation are required to produce a design conjecture . Keeping the direct behavior variables connected and direct structure elements coil and clapper , the process structure from the flashing cursor design is transferred . The following script shows the transference and transfor - mation process to suggest a design conjecture ( capital characters are prompts by DESSUA , lower cases are typed in by the designer , and comments are started by a semicolon ) : CANDIDATE INFERENCES : STRUCTURE : ( ELEMENT ( COIL ( CLAPPER ( CLAPPER - BELL CLAPPER - BASE ) ) structure to be transferred clapper is composed with clapper - bell and clapper - base ( RELATION ( CONNECT COIL CLAPPER ) ( CONNECT CLAPPER - BELL CLAPPER - BASE D ( 1 0 ) ) ( PROCESS ( WHILE DO ( ( COPY COIL CLAPPER ) = > ( ( WAIT HALF SECOND ) ) ( ( REMOVE COIL CLAPPER ) ( ( WAIT HALF SECOND ) ( CONNECTED ) ( 1 ) ) ( CONNECTED ) ( 0 ) ) replaced cursor with coil and screen with clapper also replaced copied with connected FOR CONJECTURE FROM ANALOGICAL INFERENCES , ANSWER : ' Y ' for ACCEPT ; ' M ' for MODIFICATION ; ' N ' for REJECTION . ( COIL ( CLAPPER ( CLAPPER - BELL CLAPPER - BASE ) ) ) ? y ( CONNECT COIL CLAPPER ) ? y ( CONNECT CLAPPER - BELL CLAPPER - BASE D ( 1 0 ) ) ? y ( WHILE ( ) DO ( ( COPY COIL CLAPPER ) = > ( CONNECTED ) ( ON ) ) ? m ( hit coil clapper ) = > ( connected ) ( 1 ) ) ( ( WAIT HALF SECOND ) ) ? y ( ( REMOVE COIL CLAPPER ) = > ( CONNECTED ) ( 0 ) ) ? y ( ( WAIT HALF SECOND ) ) ? y Start evaluation acceptacceptaccept modify copy to hit typed by the designer acceptacceptaccept CONJECTURE : STRUCTURE : ( ELEMENT ( COIL ( CLAPPER ( CLAPPER - BELL CLAPPER - BASE ) ) ) ) ( RELATION ( CONNECT COIL CLAPPER ) ( CONNECT CLAPPER - BELL CLAPPER - BASE D ( 1 0 ) ) ( PROCESS ( WHILE DO ( ( HIT COIL CLAPPER ) = > ( CONNECTED ) ( 1 ) ) ( ( WAIT HALF SECOND ) ) ( ( REMOVE COIL CLAPPER ) = > ( CONNECTED ) ( 0 ) ( ( WAIT HALF SECOND ) ) FBS paths and analogy - based design 307 Function Behavior Structure Process Fig . 14 . New buzzer ' s behavior . The candidate inference is a direct result of substitution adaptation by DESSUA . It then prompts the designer for an evaluation . By examining the process structure part ( PRO - CESS ) , it can be seen that copy is not an appropriate action to produce a connected behavior , so the designer changes to another action , which produces the same behavior ; for ex - ample , hit is one of the possible actions . Figure 14 shows the new buzzer . The present design uses a coil to hit the clapper . These structure elements may not be ideal for a real design , rather than the clapper - bell to hit the clapper - base . However , this element substitution is not automated in this system . Although the conjecture of the new buzzer design does not have details of how the structure elements are related and how the control signal is sent to start the hit action , the new concept is novel , in the sense of incorporating a soft - ware program that generates an electronical signal to create a force to hit the clapper . 8 . 2 . Designing a new door using a dynamic behavior analogy The following example demonstrates a door design using a dynamic behavior analogy . The behavior discovered = = = = = = = = = = = = Target concept design = = = = = = = = = : Obtaining DOOR ' S behavior graphs I n i t i al BSG elements : ( AREA DOOR HINGE ) causal dir = ( ( 2 1 ( ( + ) ( + ) ) ) ( 1 0 ( ( + ) ( + ) ) ) ) e x p a n d - l i st BSG e l e m e n ts ( AREA DOOR HINGE ) w i th ( DOOR _ FRAME ) Added c a u s al d i r : c a u s al e n t ry = ( 3 2 ( ( S ) ( S ) ) ) c a u s al e n t ry = ( 2 3 ( ( S ) ( S ) ) ) c a u s al e n t ry = ( 2 1 ( ( + ) ( + ) ) ) c a u s al e n t ry = ( 1 0 ( ( + ) ( + ) ) ) F i n al BSG e l e m e n t s : ( AREA DOOR HINGE D00R _ FRAME ) BSG : through the FBS path of a target concept design ' s primary function provides the retrieval cue to find other analogous designs . A door structure is dynamic in that the relation between a door and a door frame is changeable . For different positions of the door , there are corresponding functions . These func - tions are achieved related to the status of a dynamic behav - ior and are FBS type II . If a door has no internal process to control the opening and closing , this door only has a data structure . At retrieval time , each of the behaviors associated with each of the primary functions are used as retrieval cues to search for analogy candidates . Unlike function retrieval , which requires similarity of the function description , behav - ior retrieval constraints specify that both design FBS paths have the same FBS type and matching behavior graphs . Be - havior matching is not label matching per se , but rather a form of a semantic matching . For demonstration purposes , the primary function allow access is chosen . This function is achieved by FBS type II ( i . e . , achieved by a state of a dynamic behavior ) . The fol - lowing designs are retrieved for FBS type II from the de - signs database : curtain , flush tank , hot - cold water faucet , locker , scales , water tap . However , only curtain and water tap have the same behavior as the door ' s when we apply the dynamic structure mapping process ( Rule 5 ) and the sub - graph isomorphism algorithm ( Qian , 1995 ) . Taking the curtain suggested from the retrieval process as an example , one of the common behaviors between the curtain design and the door design is that they both contain a behavior variable capable of changing from 0 to a con - stant ( > 0 ) . The two states ( 0 and > 0 ) directly contribute to two functions . The curtain ' s behavior is similar to the behavior of the door , that is , they share same qualitative causal relations . The FBS paths are shown in Figure 15 . Based on these FBS paths , the script run by DESSUA showing the process of behavior matching between the door and curtain designs ( with debug on ) , is given below : = ; obtain target - matrix or behavior ; structure graphic ( BSG ) of main stream [ Qian 1995 ] elements in BSG ( shows behav . change ) indexes of elements are 0 , 1 , 2 0 : area , l : door , 2 : hinge expanded with static element door _ frame which has index 3 S means static relation causal rel from door _ frame to hinge causal rel from hinge to door _ frame causal rel from hinge to door causal rel from door to hinge behavior and structure element list generalized qualitative causal relation CC can be + + , — , etc . 308 L . Qian and J . S . Gero 0 0 0 0 ( CO 0 0 0 o ( co o ( s ) 0 0 ( S ) 0 = = = = = = = = = = = = Source concept design = = = = = = = = = = = = Obtaining CURTAIN ' S behavior graphs Initial BSG elements : ( LIGHT CURTAIN RINGS STRING ) ( ( + ) C means continue change of a dynamic variable S means static Dynamic change can be also discrete ( D ) obtain source - matrix or BSG element indexes , 0 : light , l : curtain , 2 : rings , 3 : string causal dir = ( ( 32 ( 2 1 ( 1 0 ( ( + ) ( - ) ) ) ) expand - list BSG elements ( LIGHT CURTAIN RINGS STRING ) 2 behavior vars related to curtain causal causal causal causalcausal Final I BSG : 0 with ( entry = entry = entry = entry = entry = ( 4 ( 2 ( 3 ( 2 ( 1 3SG elements ( LIGHT 0 ( CC ) 0 000 ( CC ) 0 0 ROD ) 2 ( 4 ( 2 ( 1 ( 0 ( CURTAIIv 000 ( CO ( S 1 ) ( S ) ( S ) ( + ) ( + ) ( + ) ( S ) ) ) ( S ) ) ) ( - ) ) ) ( + ) ( + ) ) ) ( - ) ) ) I RINGS STRING ROD ) 0 0 0 0 0 00 ( S ) 00 Calculating the isomorphism of two BSGs : b - list = ( AREA DOOR HINGE DOOR _ FRAME ) t - list = ( LIGHT CURTAIN RINGS STRING ROD ) tmp = ( CURTAIN RINGS STRING ROD ) , del - elist = NIL tmp = ( RINGS STRING ROD ) , del - elist = ( CURTAIN ) tmp = ( STRING ROD ) , del - elist = ( CURTAIN ) tmp = ( ROD ) , del - elist = ( STRING CURTAIN ) nth elem to delete = 1 n = 1 , t - list = ( LIGHT RINGS STRING ROD ) nth elem to delete = 3 n = 3 , t - list = ( LIGHT CURTAIN RINGS ROD ) isom res = ( ( DOOR CURTAIN ) ( ( AREA DOOR HINGE DOOR _ FRAME ) ( LIGHT CURTAIN RINGS ROD ) ) ( ( 0 0 0 0 ) ( ( CC ) 0 9 0 ) ( 0 { CO 0 ( S ) ) ( 0 0 ( S ) 0 ) ) ( ( 0 0 0 0 ) ( ( CC ) 0 0 0 ) ( 0 ( CC ) 0 ( S ) ) ( 0 0 ( S ) 0 ) ) ) ) Mapping set is : expanded with static element rod with index 4 two behavior variables for curtain ( 1 ) behavior and structure element list base list ( short list ) transformation list find possible delete elements ( no behav . variable nor static struct , elem . ) try delete CURTAIN or STRING curtain ( 1 ) is tried first , but no isomorphism is found string ( 3 ) is tries second , and an isomorphism is found reverse dependencies are checked and results the following mapping design name mapping element mapping graph matching successful TARGET NAME : BEHAVIOR : DOOR SOURCE CURTAIN FBS paths and analogy - based design 309 ( ACCESS AREA ) ( INTENSITY LIGHT ) STRUCTURE : TARGET : SOURCE : ELEMENT : EXTERNAL : ( ( SCREWED _ IN HINGE DOOR ) ( DOOR _ ANGLE DOOR DOOR _ FRAME D ( 0 - 90 DEGREE ) ) ( ANGLE _ ANGLE HINGE D ( 0 - 90 DEGREE ) ) ( SCREWED _ IN HINGE DOOR _ FRAME ) ) ( ( MOVE _ ALONG RINGS ROD D ( 0 - 10 CM ) ) ( IMPOSED _ ON RINGS ROD ( PASSED _ THROUGH STRING RINGS ( STITCHED ( TOP CURTAIN ) RINGS ) ) ) ( DOOR HINGE DOOR _ FRAME ) WALL R ( CURTAIN RINGS ROD ) ( TOP WINDOW ) The graphical representation of the structure mapping is shown in Figure 16 . The transference and transformation process for FBS type II design is different from the process for FBS type IV in the previous example . It consists of the following steps ( demonstrated using the example shown in Fig . 17 ) : Step 1 : Identify the elements between the final behavior element and the static element in the target design ( Fig . 17 . 1 ) ; Step 2 : Replace the intermediate elements , hinge , with the ones in the source graph , rings ( Fig . 17 . 2 ) ; Step 3 : Bring in the relation if it is possible ( Fig . 17 . 3 ; e . g . , stitched - top and imposed ) ; Step 4 : If a new element cannot be related with the suggested relation from the source design , there are two ways to fix this problem : a . add the source element , for example , rod , to the target , resulting in a new design ( Fig . 18 ) , or b . change the target ' s element to fit the relation , resulting in a new design ( Fig . 19 ) , for example , rings are imposed on the top of the door frame . By going through every mapped relation , useful parts of the source design are transferred to the target and a new structure is gradually constructed . When the source structure variable is transferred to the target structure , and if no domain - specific knowledge is used as validation , human interaction is needed . The following script shows the steps of the transference and transformation process : CANDIDATE INFERENCES : STRUCTURE : ( MOVE _ ALONG RINGS DOOR _ FRAME ) ( IMPOSED _ ON RINGS DOOR _ FRAME ) ( PASSED _ THROUGH STRING RINGS ) ( STITCHED ( TOP DOOR ) RINGS ) FOR CONJECTURE FROM ANALOGICAL INFERENCES , ANSWER : ' Y ' for ACCEPT ; ' M ' for MODIFICATION ; ' N ' for REJECTION . ( MOVE _ ALONG RINGS DOOR _ FRAME ) ? m ( move _ along rings rod ) ( fixed rod door _ frame ) ( IMPOSED _ ON RINGS ROD ) ? y ( PASSED _ THROUGH STRING RINGS ) ( STITCHED ( TOP DOOR ) RINGS ) ? m ( stitched ( top folded _ door ) rings ) structure to be transferred static struct rod is replaced by door frame direct struct curtain is replaced by door Start evaluation modify relation see Fig . transfer step 4a . add a new relation take as it is , transferred all change to folded door 310 L . Qian andJ . S . Gem CONJECTURES : ; a new structure is created STRUCTURE : ; See folding door figure ( MOVE _ ALONG RINGS ROD ) ( FIXED ROD DOOR _ FRAME ) ( IMPOSED _ ON RINGS ROD ) ( PASSED _ THROUGH STRING RINGS ) ( STITCHED ( TOP FOLDED _ DOOR ) RINGS ) Alternatively , the designer can change the door frame to produce a sliding door ( Figure 19 ) in the following adaptation process : ( M0VE _ AL0NG RINGS DOOR _ FRAME ) ? m ( move _ along rings changed _ door _ frame ) ( IMPOSED _ ON RINGS CHANGED _ DOOR _ FRAME ) ? y ( PASSED _ THROUGH STRING RINGS ) ? n ( STITCHED ( TOP DOOR ) RINGS ) ? y CONJECTURES : STRUCTURE : ( MOVE _ ALONG RINGS CHANGED _ DOOR _ FRAME ) ( IMPOSED _ ON RINGS ( TOP CHANGED _ DOOR _ FRAME ) ) ( STITCHED ( TOP DOOR ) RINGS ) modify relation see Fig . transfer step 4b . accept discard the relation accepted although transference a new structure is created See folding door figure 9 . CONCLUSION DESSUA aims at assisting creative design rather than automating it . Interaction between the system and the human designer is important . It is claimed that the feedback from analogy retrieval and analogical mapping and transferring can stimulate the human ' s creative thinking . DESSUA is an interactive system with capabilities of helping creative design . Function door Behavior a . FBS path for door design Structure curtain b . FBS for curtain design Fig . 15 . FBS paths for door and curtain . FBS paths and analogy - based design 311 nngs II ! lit Fig . 16 . Structure mapping between door and curtain . m Fig . 18 . " Folding " door design . Between - domain analogy - based design requires design knowledge represented by : ( 1 ) qualitative causal relations of how design structures achieve functions through rele - vant behaviors ; ( 2 ) generalized design knowledge ; and ( 3 ) three distinct categories—function , behavior , and structure . As analogous designs do not share superficial commonali - ties , the causal relations provide the deep understanding of the design and provide a platform for analogical reasoning . Gen - eralized knowledge provides sufficient information to carry out the reasoning task . Function , behavior , and structure are characterized as design variables and play different roles in understanding the design . A formalism that represents structure , behavior , and func - tion has been presented . A design structure is defined using a data structure and process structure . While the data struc - hinge . \ elementfor final behavior static structure nngs nn S s ture is composed of elements , attributes and relations , the process structure includes operations and processes . Any of the data and process structures is a structure variable . Behavior is represented by behavior type , behavior vari - able , and qualitative causal relations . Generalized behavior types are spatial , temporal , and aesthetic . The value of a behavior variable is either deduced from a structure vari - able or an exogenous variable . Qualitative causal relations describe static and dynamic characteristics of behavior . Function consists of two parts : variable and FBS path . While the function variable expresses intentions of a design using action and flux taxonomies , FBS path type general - izes a design goal achievement path . Although designs are different from one to another , the FBS path type is limited to one of four kinds : a function can be achieved by ( 1 ) a static behavior , ( 2 ) a dynamic behavior state , ( 3 ) parallel behavior , or ( 4 ) sequential behavior . This formalism incorporates different kinds of designs from different domains . Generalized behavior and function representation is taken into account to facilitate the search for analogous designs in different domains . Qualitative causal relations give generic causal explanations about the behav - ior of a design while the FBS type is concluded from the goal achievement path . The current design prototype has capabilities to meet most requirements of knowledge representations for analogy - based design , but it lacks the knowledge required for de - signs with dynamic structures . This paper extends the notion of design prototype by adding qualitative causal knowl - edge . This is a unified knowledge representation for struc - tures with static and dynamic characteristics , and describes generic behavior - structure and function - behavior relations . 4a . rings 4b . changeddoor _ frame Fig . 17 . Transference process from the curtain design to the door design . Fig . 19 . " Sliding " door design . 312 ACKNOWLEDGMENTS This work was executed at the Key Centre of Design Computing , University of Sydney . REFERENCES Bhansali , S . , & Harandi , M . ( 1992 ) . Synthesizing UNIX programming using derivational analogy . No . KSL 92 - 02 . Knowledge Systems Laboratory , Stanford University , Stanford . Bobrow , D . G . ( Ed . ) ( 1984 ) . Qualitative reasoning about physical systems . Elsevier , North - Holland , Amsterdam . Carbonell , J . G . ( 1986 ) . Derivational analogy : A theory of reconstructive problem solving and expertise acquisition . In Machine Learning II : An Artificial Intelligence Approach , ( Michalski , R . S . , Carbonell , J . G . , and Mitchell , T . M . , Eds . ) , pp . 371 - 392 . Morgan Kaufmann , Los Altos , Cal - ifornia . DeKleer , J . , & Brown , J . S . ( 1984 ) . A qualitative physics based on conflu - ences . Artif . Intell . 24 , 7 - 83 . Falkenhainer , B . , Forbus , K . D . , & Gentner , D . ( 1989 / 90 ) . The structure - mapping engine : Algorithm and examples . Artif . Intell . 41 , 1 - 63 . Forbus , D . K . , & Gentner , D . ( 1990 ) . Causal reasoning about quantities . In Readings in Qualitative Reasoning About Physical Systems , ( Weld , D . S . , and DeKleer , J . , Eds . ) , pp . 666 - 677 . Morgan Kaufmann , Los Altos , California . Gero , J . S . ( 1990 ) . Design prototypes : A knowledge representation schema for design . AI Magazine 11 ( 4 ) , 26 - 36 . Gero , J . S . ( 1994 ) . Towards a model of exploration in computer - aided de - sign . In Formal Design Methods for CAD , ( Gero , J . S . , and Tyugu , E . , Eds . ) , pp . 315 - 336 . North - Holland , Amsterdam . Iwasaki , Y . , & Chandrasekaran , B . ( 1992 ) . Design verification through function - and behaviour - oriented representations : Bridging the gap be - tween function and behaviour . In Artificial Intelligence in Design ' 92 , ( Gero , J . S . , Ed . ) , pp . 597 - 616 . Kluwer , Dordrecht . Kedar - Cabelli , S . T . ( 1988 ) . Toward a computational model of purpose - directed analogy . In Analogica , ( Prieditis , A . , Ed . ) , pp . 89 - 107 . Mor - gan Kaufmann , Pitman , London . Kolodner , J . ( 1991 ) . Improving human decision making through case - based decision making . AI Magazine 12 , 52 - 68 . Maher , M . L . , Balachandran , B . , & Zhang , CM . ( 1995 ) . Case - based rea - soning in design . Lawrence Erlbaum , Hillsdale , NJ . Maher , M . L . , Zhao , F . , & Gero , J . S . ( 1989 ) . Creativity in humans and com - puters . In Knowledge - Based Systems in Architecture , ( Gero , J . S . , and Oksala , T . , Eds . ) , pp . 129 - 141 . Acta Polytechnica Scaondinavica , Hel - sinki . Qian , L . & Gero , J . S . ( 1993 ) . Design part classification by goal achieve - ment . In Reasoning About Function , ( Kumar , A . N . , Ed . ) , pp . 121 - 125 . Workshop Preprints , AAAI - 93 , Washington , DC . L . Qian and J . S . Gero Qian , L . ( 1995 ) . Creative Design by Analogy , Ph . D . Thesis , Department of Architectural and Design Science , University of Sydney , Australia . Rosenman , M . A . , Gero , J . S . , & Oxman , R . E . ( 1991 ) . What ' s in a case : The use of case based , knowledge based and databases in design . In CAAD Futures ' 91 , ( Schmitt , G . N . , Ed . ) , pp . 263 - 277 . ETH , Zurich . Sembugamoorthy , V . , & Chandrasekaran , B . ( 1986 ) . Functional represen - tation of devices and compilation of diagnostic problem - solving sys - tems . In Experience , Memory and Reasoning , ( Kolodner , J . , and Riesbeck , C , Eds . ) , pp . 47 - 73 . Erlbaum , Hillsdale , NJ . Sycara , K , & Navinchandra , D . ( 1991 ) . Index transformation techniques for facilitating creative use of multiple cases . In UCAI - 91 Workshop on AI in Design , ( Gero , J . S . , Ed . ) , pp . 15 - 20 . University of Sydney , Australia . Tham , K . W . , Lee , H . S . , & Gero , J . S . ( 1990 ) . Building envelope design using design prototypes . ASHRAE Trans . 96 ( 2 ) , 508 - 520 . Wirth , R . , & O ' Rorke , P . ( 1993 ) . Representing and reasoning about func - tion for failure modes and effects analysis . In Reasoning about Func - tion , pp . 188 - 194 . Workshop Preprints , AAAI - 93 , Washington , DC . Zhao , F . , & Maher , M . ( 1992 ) . Using network - based prototypes to support creative design by analogy and mutation . In Artificial Intelligence in Design ' 92 , ( Gero , J . S . , Ed . ) , pp . 773 - 793 . Kluwer , Dordrecht . Lena Qian received a master ' s degree in computer engi - neering in Mexico and a Ph . D . from the Key Centre of De - sign Computing at the University of Sydney in 1995 . Her research area is creative design using analogy . She is the author of a number of papers on that topic . Currently she is a development engineer at Canon Information Systems Re - search Australia . John Gero is Professor of Design Science and Co - Director of the Key Centre of Design Computing at the University of Sydney . He has been a visiting professor of architecture , civil engineering , mechanical engineering , and computer sci - ence in the United States , United Kingdom , France , and Swit - zerland . He is the author / editor of 23 books and has published over 300 research papers . His research areas cover compu - tational and cognitive models of design with a particular focus on creative design .