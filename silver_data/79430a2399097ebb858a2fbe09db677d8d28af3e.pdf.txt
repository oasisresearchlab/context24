Structural Properties of Hypertext Seongbin Park Computer Science Department University of Southern California Los Angeles , CA 90089 - 0781 separk @ pollux . usc . edu ABSTRACT We provide a framework that allows one to study structural properties of hypertext in connection with formal language theory . We model hypertext as a transformation device ( an a - transducer ) that transforms a link - following into a sequence of matched pairs : basic linkable units . Then , we address the following questions : What can hypertext do ? What structure is formed when a link - following is done ? What structure is built when a virtual document is constructed ? We show that the set ofall link - followingsinhypertext isa regularset . Then , the set of all possible outputs of link - followings is shown to be context - free , which means that constructing virtual docu - ments is essentially same as generating words of a context - free language . KEYWORDS : Hypertext structure , Dexter model , regular set , context - free language , Hypertext models , link - following , a - transducer , virtual document . INTRODUCTION Structureinformationinhypertext is importantin many ways . One can make use of underlying hypertext structure to de - sign a query language [ 9 ] for structural search . One can also exploit structural properties of hypertext for designing efﬁ - cient pattern matching algorithms [ 1 , 17 ] . Hypertext data are semistructured and are signiﬁcantly different from relational data . Recently , extracting structural information in a collec - tion of semistructured data has attracted interests in database research [ 11 , 16 , 21 ] . Structures that exist implicitly in hyper - text can serve as a basis for supporting information manage - ment and a basis forinteractionbetween humans as well . These structures can also be used for users to recognize and express regular structures that exist in hypertext and be useful for re - ducingrepresentational problems that exist in node - linkmod - els [ 14 ] . Understanding structure in hypertext is also impor - tant since search in hyperspace is onlypossiblewithinthescope that the structural analysis provides [ 19 ] . Several aspects of hypertext structure have received attention recently [ 14 , 15 , 20 ] . In [ 20 ] , a framework for the discussion of the structure of hypertext activities was introduced . Hy - pertext activities were studied using the concepts of acteme , episode , and session . An acteme is the lowest level of hyper - text activity to execute interactive structure operations such as following a link . An episode is a group of actemes that cohere in the reader’s mind as a tangible entity and obtained from the composition of actemes . A session is the entirety of contiguous activity . An episode was viewed as a virtual doc - ument and questions about episode structure were addressed , which led tothe discussionofgatheringinterfaces such as that implemented in VIKI [ 15 ] . Marshall and Shipman [ 14 ] stud - ied the role of structure in hypertext and examined the possi - bilityof creating hypertext by spatial arrangement . Examina - tion of such questions as where hypertext structure lies , how it is constrained , and how it is conveyed showed that it is fea - sible to recognize implicit structures in hypertext . Spatial hy - pertext [ 15 ] came from the positive experimental results in [ 14 ] and exploits the fact that hypertext allows contents to appear in different contexts ; structures that readers can grasp change from reading to reading and authors can form differ - ent structures depending on their understanding of the con - tents in hypertext . Spatial proximity and visual cues can ex - press emergent structures . In thispaper , we studya formal model of some structural prop - erties of hypertext . As in [ 20 ] , we consider hypertext in the reader’s point of view . However , we use formal language the - ory in order to give characterizations of hypertext structures . In formal language theory , a language is deﬁned as a set of words over a set of abstract symbols , where words are con - catenations of abstract symbols . If we consider components in hypertext that can link other components as abstract sym - bols and view links as a way to substitute components with other components , the structure of hypertext is very similar to the structure of the set of words in a language . In other words , we have a set of hypertext components which serves as a set of abstract symbols . Links on the set of components are viewed as a way to produce words over the set of compo - nents . Grammars are a mechanism to describe a set of words and therefore it is natural to use such a mechanism to explain how hypertext is structured . This viewpoint opens up the pos - sibility of investigating structural properties of hypertext us - ing the well - studied ﬁeld of formal language theory . Many formalisms have been introduced for modeling hyper - text structures [ 10 , 13 , 18 , 22 ] . Our model uses two levels to describe hypertext structure . One is called the inner structure and the other is called the outer structure . The inner structure is to capture the hierarchical structure of a node in a node - link model . Nodes in a node - link model are called hypertext ﬁles in the current model . Contents of the nodes are not ex - plicitly represented although the model can be trivially ex - tended toexplicitlyrepresent node contents , if necessary . Un - like the Dexter model [ 10 ] where the within - component layer is not considered as hypertext per se , we view the inner struc - ture as a part of hypertext . The hierarchical inner structure means that it is not currently possible to model systems of non - orderedcontainerssuch as VIKI [ 15 ] , Storyspace [ 3 ] , and NoteCards [ 9 ] . The outer structure is a set of hypertext ﬁles , and links between them . A link - following is a sequence of links that can result in a virtual document . The results of a link following represent a view of the document that results from activating the links in the following . Within this frame - work , we examine the effects of link - followings deﬁned on the set of hypertext ﬁles . We show that the set of all link - followings in hypertext is a regular set and that the set of all possible outcomes of link - followings is context - free . Our work is closely related to the browsing semantics of hy - pertext [ 5 , 6 , 22 , 23 , 25 ] where dynamic properties of hypertext in terms of reader’s experience are studied . The browsing se - mantics of a given hypertext network is the set of possible paths over the network [ 5 ] and hypertext can be considered as a ﬁnite automaton [ 23 ] . DFA - like browsing behavior is one of various browsing semantics supported in Trellis [ 6 ] . This paper is organized as follows . First , some of the basic materials in formal language theory are given in the prelim - inaries section . Then , concepts that are used in the later part of the paper are introduced in the components of hypertext section . The results section contains theorems together with examples that illustratethe ideas . Finally , we draw some con - clusions and give future research directions . PRELIMINARIES Some concepts of formal language theoryare reviewed in this section . More detailed discussions can be found in the refer - ences given at the end of this paper [ 7 , 8 , 24 ] . An alphabet is a ﬁnite nonempty set of abstract symbols . A word ( of length k (cid:21) 0 ) over an alphabet (cid:6) is a ﬁnite se - quence x1 ; : : : ; xk of elements in (cid:6) . A word x1 ; : : : ; xk is usually written without commas , i . e . , as x1(cid:1)(cid:1)(cid:1)xk . The word of length zero , called the empty word , is denoted by (cid:15) . The set of all words , including (cid:15) , over an alphabet (cid:6) is de - noted by (cid:6) (cid:3) . If x = x1 (cid:1)(cid:1)(cid:1)xr and y = y1 (cid:1)(cid:1)(cid:1)y2 are words , then x (cid:1) y called the concatenation or ( complex ) product of x and y , is the word x1(cid:1)(cid:1)(cid:1)xry1 (cid:1)(cid:1)(cid:1)ys . Usually , xy is used instead of x(cid:1) y . Let x and y be words in (cid:6) (cid:3) . x is a subword of y if y = uxv for some u and v in (cid:6) (cid:3) . Let (cid:6) be an alphabet . The regular sets over (cid:6) are deﬁned re - cursively as follows : (cid:15) Basis : ; , f(cid:15)g , and fag , for every a2(cid:6) are regular sets over (cid:6) . (cid:15) Recursive step : Let X and Y be regular sets over (cid:6) . The sets X [ Y , XY , and X (cid:3) are regular sets over (cid:6) . (cid:15) Closure : X is a regular set over (cid:6) only if it can be obtained from the basis elements by a ﬁnite number of applications of the recursive step . A phrase - structure grammar ( or rewritingsystem ) is a 4 - tuple G = ( V ; (cid:6) ; P ; (cid:27) ) , where (cid:15) V is an alphabet , (cid:15) (cid:6) (cid:18) V is an alphabet , (cid:15) P is a ﬁnite set of ordered pairs ( u ; v ) , with u in ( V (cid:0)(cid:6) ) (cid:3) (cid:0) f(cid:15)g and v in V (cid:3) , and (cid:15) (cid:27) is in V (cid:0) (cid:6) . Elements of V (cid:0) (cid:6) are called variables ( or nonterminals ) . Elements of (cid:6) are called letters ( or terminals or terminal let - ters ) . Elements of ( u ; v ) of P are called productions ( or rewrit - ing rules ) and are usually written u ! v . Let G = ( V ; (cid:6) ; P ; (cid:27) ) be a phrase - structure grammar . For w and y in V (cid:3) write w ) G y ( or w ) y when G is understood ) if there exist z1 ; z2 ; u , and v such that w = z1uz2 ; y = z1vz2 , and u ! v is in P . For w and y in V (cid:3) , write w ) (cid:3) G y ( or w (cid:3) ) y when G is understood ) if either w = y or there ex - ist w0 ; : : : ; wr such that w0 = w ; wr = y , and wi ) wi + 1 for each i . The sequence w0 ; : : : ; wr is called a derivation or generation ( of length r ) and is denoted by w0 ) w1 ) (cid:1)(cid:1)(cid:1) ) wr . If G = ( V ; (cid:6) ; P ; (cid:27) ) is a phrase - structure grammar , L ( G ) = fx in (cid:6) (cid:3) j(cid:27) (cid:3) ) xg . A context - free grammar is a phrase structure grammar G = ( V ; (cid:6) ; P ; (cid:27) ) in which each productionin P is of the form (cid:24) ! v , where (cid:24) is in V (cid:0) (cid:6) and v is in V (cid:3) . L (cid:18) (cid:6) (cid:3) is said to be a context - free language if and only if L is generated by some context - free grammar . Given a context - free grammar G = ( V ; (cid:6) ; P ; (cid:27) ) , (cid:27) = w0 ) (cid:1)(cid:1)(cid:1) ) wr is a leftmost derivation if for each i , wi = uiviyi and w i + 1 = u i z i y i , with v i ! z i a production and u i in (cid:6) (cid:3) . A context - free grammar G = ( V ; (cid:6) ; P ; (cid:27) ) is said to be am - biguous if there is some word in L ( G ) generated by two left - most derivations ( from (cid:27) ) . A grammar which is not ambigu - ous is said to be unambiguous . a b c b c d Figure 1 : Hypertext ﬁle abcbcd . A sequential transducer with accepting states ( a - transducer ) is a 6 - tuple M = ( K1 ; (cid:6)1 ; (cid:6)2 ; H ; p0 ; F ) , where (cid:15) K1 ; (cid:6)1 , and (cid:6)2 are ﬁnitesets ( ofstates , inputs , and outputs , respectively ) , (cid:15) H is a ﬁnite subset of K1 (cid:2) (cid:6) (cid:3) 1 (cid:2) (cid:6) (cid:3) 2 (cid:2) K1 ( the moves ) , (cid:15) p0 is in K1 ( the start state ) , and (cid:15) F (cid:18) K1 ( the set of accepting states ) . The moves cause M to function in the followingmanner . Let ` be the relationon K1(cid:2)(cid:6) (cid:3) 1 (cid:2)(cid:6) (cid:3) 2 deﬁned byletting ( p ; xw ; z1 ) ` ( q ; w ; z2 ) for each w in (cid:6) (cid:3) 1 if ( p ; x ; y ; q ) is in H and z2 = z1y . The triple ( p ; w ; z ) represents the fact that M is in state p , with w the input still to be read , and z the accumulated out - put . ( p ; w ; z ) ` (cid:3) ( p 0 ; w 0 ; z 0 ) means that M can gofrom ( p ; w ; z ) to ( p 0 ; w 0 ; z 0 ) by a sequence of zero ormore elementary moves . An a - transducer M = ( K1 ; (cid:6)1 ; (cid:6)2 ; H ; p0 ; F ) is said to be 1 - bounded if H (cid:18) K1 (cid:2) ( (cid:6)1 [ f(cid:15)g ) (cid:2) ( (cid:6)2 [ f(cid:15)g ) (cid:2) K1 . COMPONENTS OF HYPERTEXT In this section , concepts that are used in the later part of this paper are introduced . Hypertext ﬁle – Inner structure We ﬁrst introduce a speciﬁc context - free grammar that deter - mines the inner structure of a hypertext ﬁle . Let G1 be the phrase structure grammar ( V ; (cid:6) ; P ; (cid:27) ) , where (cid:15) V = fS ; X ; a ; b ; c ; dg , (cid:15) (cid:6) = fa ; b ; c ; dg , (cid:15) P = fS ! aXd ; X ! XbXcX ; X ! (cid:15)g , and (cid:15) S is the start symbol . A hypertext ﬁle is a word in L ( G1 ) . In a hypertext ﬁle , a and d are outermost brackets that model the boundary of a hypertext ﬁle and b and c are brackets for substructures inside a hypertext ﬁle . ( See ﬁgure 1 . ) Notice that we do not explicitly consider the contents of a hy - pertext ﬁle ; we only focus on its hierarchical structure . How - ever , The contents of a ﬁle can be modeled by augmenting the grammar so with additional productions for the nonterminal X that produce the additional contents . For example , abcd , abcbcd , abbccd , etc are in L ( G1 ) , but ad , abc , etc are not . Notice that G1 is ambiguous . For example , S ) aXd ) aXbXcXd ) aXbXcXbXcXd ) abXcXbXcXd (cid:3) ) abcbcd and S ) aXd ) aXbXcXd ) abXcXd ) abXbXcXcXd (cid:3) ) abcbcd are two leftmost derivations of abcbcd . We use the structure of the resulting strings rather than the parse tree , so that this ambiguity is not a problem . Matched pair In order to talk about parts of words in L ( G1 ) that can link others as well as themselves , we need a concept for the basic linkable unit . It is called a matched pair and corresponds to the anchor in the Dexter model [ 10 ] . The identiﬁcation of matched pairs in a given word in L ( G1 ) is done using the level and the order of the symbols in the word . Intuitively , the levels of symbols in a word in L ( G1 ) tell us that how deep those symbols appear in the word . For example , we can think of the structure of abcbcd as ( ( ) ( ) ) , where the levels of outermost parentheses ( i . e . , leftmost ( and rightmost ) ) are 1 and the levels of other parentheses are 2 . In order to deﬁne the level of each symbol , we can introduce the attribute level for each symbol in the grammar G1 and rewrite the grammar G1 as an attribute grammar : S ! aXd fX : level = 1 ; a : level = 1 ; d : level = 1 g X0 ! X1bX2cX3 f ( X1 ; X2 ; X3 ; b ; c ) : level = X0 : level + 1 g X ! (cid:15) Example : The levels of symbols in abcbcd are 1 , 2 , 2 , 2 , 2 , and 1 , respectively . Since many symbols can appear in the same level , we need a concept that tells us where each symbol appears in the level and the order of each symbol has such information . Given a word in L ( G1 ) , the orders of the symbols at the same level are deﬁned as follows : (cid:15) The orders of a and d are both 1 . (cid:15) The order of the leftmost b ( c ) in the level is 1 . (cid:15) The orders of other b ’s ( c ’s ) at the level are 1 + the number of preceding matched pairs in the level . The order is unique within a level . Example : The orders of symbols in abbccbbccd are 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 1 . Given a word in L ( G1 ) , the identiﬁer for each symbol in the word is the pair ( x ; y ) , where x is the level and y is the order of the symbol , respectively . Example : The identiﬁers of symbols in abbccbbccd are ( 1 ; 1 ) , ( 2 ; 1 ) , ( 3 ; 1 ) , ( 3 ; 1 ) , ( 2 ; 1 ) , ( 2 ; 2 ) , ( 3 ; 2 ) , ( 3 ; 2 ) , ( 2 ; 2 ) , ( 1 ; 1 ) . ( See the ﬁgure 2 . ) Notice that a matched pair is a subword of a word in L ( G1 ) , where the identiﬁer of the ﬁrst symbol of the subword is the same as the identiﬁer of the last symbol of the subword . a d b c b c b ( 1 , 1 ) ( 1 , 1 ) ( 2 , 1 ) ( 2 , 1 ) ( 2 , 2 ) ( 2 , 2 ) ( 3 , 1 ) ( 3 , 1 ) c b ( 3 , 2 ) ( 3 , 2 ) c Figure 2 : Hypertext ﬁle abbccbbccd with ( level , order ) attached to each symbol . Example : There are ﬁve matched pairs in abbccbbccd . They are abbccbbccd , bbcc , bc , bbcc , and bc . ( See the ﬁgure 2 . ) The level of a matched pair is deﬁned as the level of the ﬁrst symbol of the matched pair , the order of a matched pair is de - ﬁned as the order of the ﬁrst symbol of the pair , and the iden - tiﬁer is deﬁned as the identiﬁer of the ﬁrst symbol of the pair . Example : The levels of abcbcd , bc , and bc are 1 , 2 , and 2 , re - spectively . Given two matched pairs u and v , u is called a descendant of v ( and v is called an ancestor of u ) if u is a subword of v and the level of u is greater than or equal to 1 + the level of v . Example : bc is a descendant of abcbcd . Hypertext – Outer structure A Hypertext consists of hypertext ﬁles that are generated by the context - free grammar G1 , augmented with additionallink information . This is called the outer structure of the hyper - text . Formally , hypertext is deﬁned as follows : A hypertext is a 3 - tuple HT = ( E ; X ; L ) , where (cid:15) E is a ﬁnite nonempty multiset of hypertext ﬁles , (cid:15) X is a ﬁnite nonempty set of all matched pairs in elements of E , and (cid:15) L is a ﬁnite nonempty set of ordered pairs of matched pairs in X . Each hypertext ﬁle in hypertext has a unique name and pos - itive integers are used for the names of hypertext ﬁles like UIDs in the Dexter model [ 10 ] . Every symbol in a hypertext ﬁle in hypertext has a subscript which is a 3 - tuple ( n ; x ; y ) , where n is the name of the hypertext ﬁle , x is the level of the symbol , and y is the order of the symbol , respectively . Given hypertext HT = ( E ; X ; L ) , an element of L is called a link . Let ( u ; v ) be a link . Then , l1 l2 l5 l3 l4 l6 l7 l8 l9 e1 e2 e3 x1 x2 x3 x4 x5 x6 x7 Figure 3 : Hypertext that has three hypertext ﬁles e1 , e2 , and e3 , where e1 contains two matched pairs x1 and x2 , e2 contains three matched pairs x3 , x4 , and x5 , and e3 contains two matched pairs x6 and x7 . There are nine links l1 , l2 , l3 , l4 , l5 , l6 , l7 , l8 , and l9 . Notice that l1 ; l2 ; l3 ; l4 , and l5 are outer links and l6 ; l7 ; l8 , and l9 are inner links . (cid:15) u and v are called the start and the end of the link , respec - tively . (cid:15) u and v are said to have an outgoing link and an incoming link , respectively . We call a link ( u ; v ) an inner link if both u and v are in the same hypertext ﬁle . If u and v reside in different hypertext ﬁles , the link ( u ; v ) is called an outer link . Example : Consider the hypertext HT = ( E ; X ; L ) , where E = fe1 ; e2 ; e3g , X = fx1 ; x2 ; x3 ; x4 ; x5 ; x6 ; x7g , and L = fl1 ; l2 ; l3 ; l4 ; l5 ; l6 ; l7 ; l8 ; l9g . ( See ﬁgure 3 . ) Elements in E , X , and L are as follows : (cid:15) e1 = a ( 1 ; 1 ; 1 ) b ( 1 ; 2 ; 1 ) c ( 1 ; 2 ; 1 ) d ( 1 ; 1 ; 1 ) , e2 = a ( 2 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) b ( 2 ; 2 ; 2 ) c ( 2 ; 2 ; 2 ) d ( 2 ; 1 ; 1 ) , and e3 = a ( 3 ; 1 ; 1 ) b ( 3 ; 2 ; 1 ) c ( 3 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) . (cid:15) x1 = a ( 1 ; 1 ; 1 ) b ( 1 ; 2 ; 1 ) c ( 1 ; 2 ; 1 ) d ( 1 ; 1 ; 1 ) , x2 = b ( 1 ; 2 ; 1 ) c ( 1 ; 2 ; 1 ) , x3 = a ( 2 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) b ( 2 ; 2 ; 2 ) c ( 2 ; 2 ; 2 ) d ( 2 ; 1 ; 1 ) , x4 = b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) , x5 = b ( 2 ; 2 ; 2 ) c ( 2 ; 2 ; 2 ) , x6 = a ( 3 ; 1 ; 1 ) b ( 3 ; 2 ; 1 ) c ( 3 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) , and x7 = b ( 3 ; 2 ; 1 ) c ( 3 ; 2 ; 1 ) . (cid:15) l1 = ( x1 ; x3 ) , l2 = ( x2 ; x6 ) , l3 = ( x5 ; x6 ) , l4 = ( x7 ; x4 ) , l5 = ( x6 ; x1 ) , l6 = ( x1 ; x2 ) , l7 = ( x3 ; x4 ) , l8 = ( x3 ; x5 ) , and l9 = ( x6 ; x7 ) . Link - following Given hypertext , a link - following is a sequence of links that satisfy certain conditions as follows : Given hypertext HT = ( E ; X ; L ) , where E = fe1 ; (cid:1)(cid:1)(cid:1) ; efg , X = fx1 ; (cid:1)(cid:1)(cid:1) ; xgg , and L = fl1 ; : : : ; lmg , a link - following ( of size r ) is a sequence of links , li1 ; (cid:1)(cid:1)(cid:1) ; lir , where 1 (cid:20) ij (cid:20) m and 1 (cid:20) j (cid:20) r such that (cid:15) If r = 1 , then li1 is in L . (cid:15) If r (cid:21) 2 , then for each lik , the end of lik = the start of lik + 1 , where 1 (cid:20) k (cid:20) r (cid:0) 1 . A link - following l1 ; : : : ; ln is usually written without com - mas , i . e . , as l1 (cid:1)(cid:1)(cid:1)ln . Notice that a link - following is always a sequence of matched pairs without discontinuities . Example : l1l8l3l9l4 is a link - following in the previous ex - ample . ( See ﬁgure 3 . ) There are three possible effects of a link - following . If a link is from a matched pair to its descendant , it does not change anything . Otherwise , it can either jump to the end of the link as in standard traversal or expand in place as in Guide [ 4 ] . We can view a link - followingas a substitutionoperationsince parts of a string ( i . e . , matched pairs ) are substituted with oth - ers when a link - following is done . In other words , we start with a matched pair which is described as a string and a link - following may replace parts of the string successively . The outcome of the link - followingis a virtual document which is what remains at the end of the link - following . A link - following is deﬁned as an operation on a hypertext as follows : Givena hypertext HT = ( E ; X ; L ) , where E = fe1 ; (cid:1)(cid:1)(cid:1) ; efg , X = fx1 ; (cid:1)(cid:1)(cid:1) ; xgg , and L = fl1 ; : : : ; lmg , the outcome of the link - following , l1 (cid:1)(cid:1)(cid:1)ln , is cn , where li = ( xi(cid:0)1 ; xi ) ; 1 (cid:20) i (cid:20) n , n (cid:21) 1 , and cj ( 0 (cid:20) j (cid:20) n ) is deﬁned as follows : (cid:15) c0 = x0 (cid:15) cj , where 1 (cid:20) j (cid:20) n ( 1 ) if xj is xj(cid:0)1 0 s descendant , cj = cj(cid:0)1 ( 2 ) otherwise , ( a ) if cj(cid:0)1 = xj(cid:0)1 , then cj = xj ( b ) if xj(cid:0)1 is cj(cid:0)1 0 s subword 1 , then cj is the one that results from the replacement of xj(cid:0)1 in cj(cid:0)1 by xj . Example : In the previous example , the outcome of the link - following l1l8l3l9l4 is c5 = a ( 2 ; 1 ; 1 ; ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) a ( 3 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) d ( 2 ; 1 ; 1 ) which is computed as follows : (cid:15) c0 = x1 = a ( 1 ; 1 ; 1 ) b ( 1 ; 2 ; 1 ) c ( 1 ; 2 ; 1 ) d ( 1 ; 1 ; 1 ) (cid:15) c1 = x3 = a ( 2 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) b ( 2 ; 2 ; 2 ) c ( 2 ; 2 ; 2 ) d ( 2 ; 1 ; 1 ) (cid:15) c2 = x3 = c1 (cid:15) c3 = a ( 2 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) a ( 3 ; 1 ; 1 ) b ( 3 ; 2 ; 1 ) c ( 3 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) d ( 2 ; 1 ; 1 ) , where a ( 3 ; 1 ; 1 ) b ( 3 ; 2 ; 1 ) c ( 3 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) = x6 . (cid:15) c4 = c3 (cid:15) c5 = a ( 2 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) a ( 3 ; 1 ; 1 ) b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) d ( 3 ; 1 ; 1 ) d ( 2 ; 1 ; 1 ) , where b ( 2 ; 2 ; 1 ) c ( 2 ; 2 ; 1 ) = x4 . Notice that c5 is a virtual document that is constructed by fol - lowing links in the hypertext . 1 Notice that xj(cid:0)1 is not necessarily cj(cid:0)1 ’s descendant because link - followings can perform compositions that createresults that are not just por - tions of the same hypertext ﬁle RESULTS In this section , we show that the set of all link - followings in hypertext is a regular set . Then , the set of all possible out - comes of link - followings is shown to be context - free . The following theorem shows that we can view a hypertext HT = ( E ; X ; L ) as a transformation device that transforms L (cid:3) into X (cid:3) . Theorem 1 : Let HT = ( E ; X ; L ) be hypertext , where E = fe1 ; (cid:1)(cid:1)(cid:1) ; erg , X = fx1 ; (cid:1)(cid:1)(cid:1) ; xng , and L = fl1 ; (cid:1)(cid:1)(cid:1) ; ltg . Then , there exists an a - transducer M = ( K ; (cid:6) ; (cid:1) ; H ; p0 ; F ) such that jKj = n + 1 , j(cid:6)j = t , and j(cid:1)j = n . Proof : Intuitively , each matched pair has an associated state and there is a designated start state p0 . From the start state , all matched pairs are reachable and all states except p0 are accepting states . The moves are deﬁned such that whenever there is a link between two matched pairs in a hypertext , (cid:15) the state changes from the one associated with the start of the link , to the one associated with the end of the link , (cid:15) the matched pair at the start of the link is the input , and (cid:15) the matched pair at the end of the link is the output . Formally , we construct an a - transducer M = ( K ; (cid:6) ; (cid:1) ; H ; p0 ; F ) , where (cid:15) K = fp0 ; (cid:1)(cid:1)(cid:1) ; png . (cid:15) (cid:6) = L = fl1 ; (cid:1)(cid:1)(cid:1) ; ltg . (cid:15) (cid:1) = X = fx1 ; (cid:1)(cid:1)(cid:1) ; xng . (cid:15) H consists of the following , where 1 (cid:20) i ; j (cid:20) n and 1 (cid:20) k (cid:20) t , ( 1 ) ( p0 ; (cid:15) ; (cid:15) ; pi ) is in H . ( 2 ) ( pi , lk , xj , pj ) is in H , where lk = ( xi ; xj ) . (cid:15) p0 is a start state . (cid:15) F = fp1 ; (cid:1)(cid:1)(cid:1) ; png . Example : Consider the hypertext given in the previous sec - tion ( See ﬁgure 3 . ) Then , the corresponding a - transducer is M = ( K ; (cid:6) ; (cid:1) ; H ; p0 ; F ) , where (cid:15) K = fp0 ; p1 ; p2 ; p3 ; p4 ; p5 ; p6 ; p7g , (cid:15) (cid:6) = fl1 ; l2 ; l3 ; l4 ; l5 ; l6 ; l7 ; l8 ; l9g , (cid:15) (cid:1) = fx1 ; x2 ; x3 ; x4 ; x5 ; x6 ; x7g , (cid:15) H = f ( p0 ; (cid:15) ; (cid:15) ; p1 ) , ( p0 ; (cid:15) ; (cid:15) ; p2 ) , ( p0 ; (cid:15) ; (cid:15) ; p3 ) , ( p0 ; (cid:15) ; (cid:15) ; p4 ) , ( p0 ; (cid:15) ; (cid:15) ; p5 ) , ( p0 ; (cid:15) ; (cid:15) ; p6 ) , ( p0 ; (cid:15) ; (cid:15) ; p7 ) , ( p1 ; l1 , x3 ; p3 ) , ( p1 ; l6 , x2 ; p2 ) , ( p2 ; l2 , x6 ; p6 ) , ( p3 ; l7 , x4 ; p4 ) , ( p3 ; l8 , x5 ; p5 ) , ( p5 ; l3 , x6 ; p6 ) , ( p6 ; l5 , x1 ; p1 ) ( p6 ; l9 , x7 ; p7 ) , ( p7 ; l4 , x4 ; p4 ) g , and (cid:15) F = fp1 ; p2 ; p3 ; p4 ; p5 ; p6 ; p7g . The output of the link - following l5l6l2l9l4 in this hypertext is the sequence of matched pairs x1x2x6x7x4 , computed as follows : M ( l5l6l2l9l4 ) = fzj ( p0 ; l5l6l2l9l4 ; (cid:15) ) ` (cid:3) ( p ; (cid:15) ; z ) , p in Fg = fx1x2x6x7x4g . Notice that M is a 1 - bounded a - transducer . Since the set accepted by a ﬁnite automaton is a regular set [ 24 ] , and an a - transducer is a ﬁnite automatonaugmented out - put function , we have the following corollary . Corollary : The set of all link - followings is a regular set . The following theorem shows that the set of all possible out - comes of link - followings is context - free , which in turn im - plies that constructing virtual documents is same as generat - ing words of a context - free grammar . Theorem 2 : Let HT = ( E ; X ; L ) be hypertext , where E = fe1 ; (cid:1)(cid:1)(cid:1) ; erg , X = fx1 ; (cid:1)(cid:1)(cid:1) ; xng , and L = fl1 ; (cid:1)(cid:1)(cid:1) ; ltg . Then , there exists a context - free grammar G2 = ( V ; (cid:6) ; P ; (cid:27) ) that describes the set of all possible outcomes of link - followings . Proof : Informally , we want to show that each of the produc - tions in the grammar G2 = ( V ; (cid:6) ; P ; (cid:27) ) is the form of (cid:24) ! v , where (cid:24) is in V (cid:0)(cid:6) and v is in V (cid:3) . We can easily see that starts of linkscan serve as nonterminalsand satisfythe lefthandside restriction of the grammar that makes it context - free . Formally , let Y = fy1 , (cid:1)(cid:1)(cid:1) , yug be the set of the symbols that appear in the elements of X and Z = fy 0 m jym 2Y , 1 (cid:20) m (cid:20) ug , respectively . ( Primed symbols are used for terminals . ) Then , the set of all possible outcomes of link - followings is described by the grammar G2 = ( V ; (cid:6) ; P ; (cid:27) ) , where (cid:15) V = f(cid:27)g [ X [ Y [ Z (cid:15) (cid:6) = Z . (cid:15) P consists of the following : ( 1 ) for each xi , 1 (cid:20) i (cid:20) n , ( a ) (cid:27) ! xi is in P ( b ) xi ! x 0 i is in P , where x 0 i is a word over Z such that each symbol q in xi changes to q 0 in x 0 i . ( 2 ) for a link ( xj ; xk ) , 1 (cid:20) j ; k (cid:20) n , ( a ) if xk is xj ’s descendant , xj ! x 00 j is in P , where x 00 j is same as x 0 j except xk inside xj is not primed . ( b ) otherwise , xj ! xk is in P . (cid:15) (cid:27) is the start symbol . Example : Consider the hypertext in the ﬁgure 3 . Then , X , Y and Z are as follows : X = fx1 , x2 , x3 , x4 , x5 , x6 , x7g Y = fa ( 111 ) , b ( 121 ) , c ( 121 ) , d ( 111 ) , a ( 211 ) , b ( 221 ) , c ( 221 ) , b ( 222 ) , c ( 222 ) , d ( 211 ) , a ( 311 ) , b ( 321 ) , c ( 321 ) , d ( 311 ) g Z = fa 0 ( 111 ) , b 0 ( 121 ) , c 0 ( 121 ) , d 0 ( 111 ) , a 0 ( 211 ) , b 0 ( 221 ) , c 0 ( 221 ) , b 0 ( 222 ) , c 0 ( 222 ) , d 0 ( 211 ) , a 0 ( 311 ) , b 0 ( 321 ) , c 0 ( 321 ) , d 0 ( 311 ) g Therefore , the grammar is G2 = ( V ; (cid:6) ; P ; (cid:27) ) , where (cid:15) V = f(cid:27)g [ X [ Y [ Z (cid:15) (cid:6) = Z (cid:15) P consists of the following 2 : x1 ! a 0 ( 111 ) b ( 121 ) c ( 121 ) d 0 ( 111 ) j x3 j x 0 1 x2 ! x6 j x 0 2 x3 ! a 0 ( 211 ) x4b 0 ( 221 ) c 0 ( 221 ) d 0 ( 211 ) j a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) x5d 0 ( 211 ) j x 0 3 x4 ! x 0 4 2 Notice that A ! B j C means A ! B and A ! C . x5 ! x6 j x 0 5 x6 ! a 0 ( 311 ) x7d 0 ( 311 ) j x1 j x 0 6 x7 ! x4 j x 0 7 (cid:15) (cid:27) is the start symbol . Since virtual documents are constructed while link - following is done , we can consider the words generated by the context - free grammar given in the theorem 2 as virtual documents . For example , the virtual document c5 in the previous section has a derivation as follows : (cid:27) ) x1 ) x3 ) a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) x5d 0 ( 211 ) ) a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) x6d 0 ( 211 ) ) a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) a 0 ( 311 ) x7d 0 ( 311 ) d 0 ( 211 ) ) a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) a 0 ( 311 ) x4d 0 ( 311 ) d 0 ( 211 ) ) a 0 ( 211 ) b 0 ( 221 ) c 0 ( 221 ) a 0 ( 311 ) b 0 ( 221 ) c 0 ( 221 ) d 0 ( 311 ) d 0 ( 211 ) Since there is a pushdown acceptor for each context - free lan - guage [ 24 ] , we have the following corollary . Corollary : Given hypertext , there exists a pushdownacceptor that accepts theset of all possibleoutcomes of link - followings . CONCLUSION AND FUTURE DIRECTIONS Studying hypertext structures from the viewpoint of formal language theory allows close investigationof hypertext struc - tures and may give new insights into fundamental questions about hypertext structure [ 12 ] . We view hypertext as an a - transducer that transforms a link - following into a sequence of matched pairs that constitute a virtual document . The set of all link - followings is shown to be a regular set and the set of all possible outcomes of link - followingsis described by a context - free grammar , which im - plies that many known structural properties of context - free language [ 7 ] can be used for studies about hypertext struc - tures according to this model . Automatic generation of the grammar of a hypertext may even provide a useful new anal - ysis technique for authors . We conclude this paper by providing directions for future re - search . First , we can explore the possibilityof classifying hypertexts based on the structures that they exhibit . Depending on the roles of links and their associated inner structures , we can ex - amine structural propertiesand classify hypertexts . This is re - lated to the browsing semantics of hypertext since the brows - ing semantics of a particular hypertext is deﬁned by the set of paths that are allowable within the hypertext [ 5 ] and deter - mined by the underlying hypertext structures . Classes of hy - pertext structures with different browsing semantics can also be used to study accessibility properties . Currently , we view links as structure - preservingmap since they connect matched pairs which take on the form of balanced parentheses that are generated by a context - free grammar and link - followingsuc - cessively changes parts of matched pairs with other matched pairs ; i . e . , we start with a set of words generated by a context - free grammar and allow parts of the words to be replaced by others when there are links between them . However , we can also interpret links as a transformation . For example , if the inner structure can follow a ﬁnite number of different gram - mars , linkscould connect twodifferent structuresand the links would serve as grammar transformations between two struc - tures that are involved . Correspondingly , the outer structure can become a different structure than the one that exists when we consider the same inner structure . Depending on the outer structure , we can further talk about families of hypertexts as in families of languages in formal language theory [ 8 ] . Second , we can generalize thethe deﬁnitionof a link - following so that the type of resolution becomes a property of the links instead ofthe traversal . Currently , we have twotypesof traver - sals , i . e . , simply traversing over a set of matched pairs and rewriting a part of a matched pair . Adding link properties to control the type of traversal would increase the ﬂexibility of the model , and provide more varied browsing semantics . Third , we can exploit structural properties of hypertext in or - der to design a good index structure for the data stored in hy - pertext . As was addressed in a panel discussion about index - ing and hypertext [ 2 ] , devising a good index for hypertext is important and we hope that structural characterizations that we present could be useful for understandingwhat kind of ac - cess methods and index structures might be good for hyper - text . Fourth , we can study the semantics of the context - free gram - mar G2 . We can viewthe nonterminalsas syntactic categories as in programming languages and investigate the meanings of the outcomes of the link - followings . For example , some of the constructs that are generated ( i . e . , virtual documents ) might be meaningful and some might not be . Understanding the semantics could provide insights into the design of hyper - texts . Finally , it would be interesting to modify the model so that it could better deal with unordered structures within hypertext ﬁles . ACKNOWLEDGMENT I would like to thank Professor Peter Beerel , Professor Ming - Deh Huang , and Professor Seymour Ginsburg for helpful dis - cussions and comments . I also wish to thank David Durand formany suggestionsand clariﬁcations . Finally , I wish tothank anonymous reviewers for many other useful suggestions . REFERENCES 1 . Amihood Amir , Moshe Lewenstein , and Noa Lewenstein , Pattern Matching in Hypertext , Workshop on Algorithmsand Data Structures , Halifax , Nova Scottia , Canada , August 6 - 8 , 1997 . 2 . Mark Bernstein , James Critz , Nancy Mulvany , Rosemary Simpson , and Mary - Claire van Leunen , Panel : Indexing and Hypertext , Hypertext’89Proceedings , ACM , 1989 , pages 387 - 390 . 3 . Jay David Bolter , Michael Joyce , John B . Smith , and Mark Bernstein , Storyspace Hypertext Writing Environment , East - gate Systems , Watertown MA , 1991 . 4 . Peter J . Brown , Turning ideas into products : The Guide system , Hypertext’87Proceedings , ACM , 1987 , pages 33 - 40 . 5 . Paul De Bra and Geert - Jan Houben , An Extensible Data Model for Hyperdocuments , ACM ECHT Conference 1992 , pages 222 - 231 . 6 . Richard Furuta and P . David Stotts , Programmable Brows - ingSemantics inTrellis , Hypertext’89Proceedings , ACM , 1989 , pages 27 - 42 . 7 . Seymour Ginsburg , The mathematical theory of context - free languages , McGraw - Hill Book Company , 1966 . 8 . Seymour Ginsburg , Algebraicand automata - theoreticprop - erties of formal languages , North - Holland Publishing Com - pany , 1975 . 9 . Frank G . Halasz , Reﬂections on NoteCards : Seven Issues for the Next Generation of Hypermedia Systems , Communi - cations of the ACM , July 1988 , Vol . 31 , No . 7 , pages 836 - 852 . 10 . Frank Halasz and Mayer Schwartz , The Dexter Hyper - text Reference Model , Communications of the ACM , Febru - ary 1994 , Vol . 37 , No . 2 , pages 30 - 39 . 11 . J . Hammer , H . Garcia - Molina , J . Cho , R . Aranha , and A . Crespo , Extracting Semistructured Information from the Web , WorkshoponManagement of SemistructuredData , Tuc - son , Arizona , May 16 , 1997 . 12 . Peter Liebscher , Hypertext and Indexing , Challenges in Indexing Electronic Text and Images , ASIS Monograph Se - ries , Chapter 6 , 1994 , pages 103 - 109 . 13 . CatherineC . Marshall , Frank G . Halasz , Russell A . Rogers , and William C . Jr . , Janssen , Aquanet : a hypertext tool to hold your knowledge in place , Hypertext’91 Proceedings , ACM , 1991 , pages 261 - 275 . 14 . Catherine C . Marshall and Frank M . Shipman III , Search - ing for the Missing Link : Discovering Implicit Structure in Spatial Hypertext , Hypertext’93Proceedings , ACM , 1993 , pages 217 - 230 . 15 . Catherine C . Marshall and Frank M . Shipman III , Spatial Hypertext : DesigningforChange , Communicationsof theACM , August 1995 , Vol . 38 , No . 8 , pages 88 - 97 . 16 . Svetlozar Nestorov , Serge Abiteboul , and Rajeev Mot - wani , Inferring Structure in Semistructured Data , Workshop on Management of SemistructuredData , Tucson , Arizona , May 16 , 1997 . 17 . Kunsoo Park and Dong Kyu Kim , StringMatching in Hy - pertext , 6th Symposium on Combinatorial Pattern Matching , Helsinki , Finland , 1995 . 18 . H . Van Dyke Parunak , Don’t Link Me In : Set Based Hy - permedia for Taxonomic Reasoning , Hypertext’91 Proceed - ings , ACM , 1996 , pages 233 - 242 . 19 . Ehud Rivlin , Rodrigo Botafogo , and Ben Shneiderman , Navigating in Hyperspace : Designing a structure - based tool - box , Communications of the ACM , February 1994 , Vol . 37 , No . 2 , pages 87 - 96 . 20 . Jim Rosenberg , The Structure of Hypertext Activity , Hy - pertext’96 Proceedings , ACM , 1996 , pages 22 - 30 . 21 . K . Shoens , A . Luniewski , P . Schwarz , J . Stamos , and J . Thomas , The RufusSystem : InformationOrganizationfor Semi - Structured Data , Proceedings of the 19th VLDB Conference , Dublin , Ireland 1993 , pages 97 - 107 . 22 . P . David Stotts and Richard Furuta , Petri - Net - Based Hy - pertext : Document StructurewithBrowsingSemantics , ACM Transactions on Information Systems , Vol . 7 , No . 1 , January 1989 , pages 3 - 29 . 23 . P . David Stotts and Richard Furuta , Hyperdocuments as Automata : Trace - based BrowsingPropertyVeriﬁcation , ACM ECHT Conference 1992 , pages 272 - 281 . 24 . Thomas A . Sudkamp , Languages and machine , Addison - Wesley , 1997 . 25 . Yi Zheng and Man - Chi Pong , Using Statecharts to Model Hypertext , ACM ECHT Conference 1992 , pages 242 - 250 .