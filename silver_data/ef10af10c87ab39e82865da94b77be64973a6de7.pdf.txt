M AY / J UNE 2007 THIS ARTICLE HAS BEEN PEER - REVIEWED . 21 IPython : A System for Interactive Scientiﬁc Computing P Y T H O N : B A T T E R I E S I N C L U D E D T he backbone of scientiﬁc computing is mostly a collection of high - perfor - mance code written in Fortran , C , and C + + that typically runs in batch mode on large systems , clusters , and supercomputers . However , over the past decade , high - level environ - ments that integrate easy - to - use interpreted lan - guages , comprehensive numerical libraries , and visualization facilities have become extremely popu - lar in this ﬁeld . As hardware becomes faster , the crit - ical bottleneck in scientiﬁc computing isn’t always the computer’s processing time ; the scientist’s time is also a consideration . For this reason , systems that allow rapid algorithmic exploration , data analysis , and vi - sualization have become a staple of daily scientiﬁc work . The Interactive Data Language ( IDL ) and Matlab ( for numerical work ) , and Mathematica and Maple ( for work that includes symbolic manipula - tion ) are well - known commercial environments of this kind . GNU Data Language , Octave , Maxima and Sage provide their open source counterparts . All these systems offer an interactive command line in which code can be run immediately , with - out having to go through the traditional edit / compile / execute cycle . This flexible style matches well the spirit of computing in a scientific context , in which determining what computations must be performed next often requires significant work . An interactive environment lets scientists look at data , test new ideas , combine algorithmic ap - proaches , and evaluate their outcomes directly . This process might lead to a final result , or it might clarify how to build a more static , large - scale production code . As this article shows , Python ( www . python . org ) is an excellent tool for such a workflow . 1 The IPython project ( http : / / ipython . scipy . org ) aims to not only provide a greatly enhanced Python shell but also facilities for interactive distributed and par - allel computing , as well as a comprehensive set of tools for building special - purpose interactive envi - ronments for scientiﬁc computing . Python : An Open and General - Purpose Environment The fragment in Figure 1 shows the default inter - active Python shell , including a computation with long integers ( whose size is limited only by the available memory ) and one using the built - in com - plex numbers , where the literal 1j represents . i (cid:34) (cid:18) 1 Python offers basic facilities for interactive work and a comprehensive library on top of which more sophisticated systems can be built . The IPython project provides an enhanced interactive environment that includes , among other features , support for data visualization and facilities for distributed and parallel computation . F ERNANDO P ÉREZ University of Colorado at Boulder B RIAN E . G RANGER Tech - X Corporation 1521 - 9615 / 07 / $ 25 . 00 © 2007 IEEE Copublished by the IEEE CS and the AIP 22 C OMPUTING IN S CIENCE & E NGINEERING This shell allows for some customization and ac - cess to help and documentation , but overall it’s a fairly basic environment . However , what Python lacks in the sophistica - tion of its default shell , it makes up for by being a general - purpose programming language with access to a large set of libraries with additional ca - pabilities . Python’s standard library includes modules for regular expression processing , low - level networking , XML parsing , Web services , object serialization , and more . In addition , hun - dreds of third - party Python modules let users do everything from work with Hierarchical Data Format 5 ( HDF5 ) files to write graphical appli - cations . These diverse libraries make it possible to build sophisticated interactive environments in Python without having to implement every - thing from scratch . IPython Since late 2001 , the IPython project has provided tools to extend Python’s interactive capabilities be - yond those shipped by default with the language , and it continues to be developed as a base layer for new interactive environments . IPython is freely available under the terms of the BSD license and runs under Linux and other Unix - type operating systems , Apple OS X , and Microsoft Windows . We won’t discuss IPython’s features in detail here—it ships with a comprehensive user manual ( also accessible on its Web site ) . Instead , we highlight some of the basic ideas behind its design and how they enable efﬁcient interactive scientiﬁc computing . We encourage interested readers to visit the Web site and participate on the project’s mailing lists . One of us ( Fernando Pérez ) started IPython as a merger of some personal enhancements to the basic interactive Python shell with two existing open source projects ( both now defunct and sub - sumed into IPython ) : •LazyPython , developed by Nathan Gray at Cal - tech , and •Interactive Python Prompt ( IPP ) by Janko Hauser at the University of Kiel’s Institute of Marine Research . After an initial development period as a mostly single - author project , IPython has attracted a growing group of contributors . Today , Ville Vainio and other collaborators maintain the sta - ble ofﬁcial branch , while we’re developing a next - generation system . Since IPython’s beginning , we’ve tried to pro - vide the best possible interactive environment for everyday computing tasks , whether the actual work was scientiﬁc or not . With this goal in mind , we’ve freely mixed new ideas with existing ones from Unix system shells and environments such as Mathematica and IDL . Features of a Good Interactive Computing Environment In addition to providing direct access to the un - derlying language ( in our case , Python ) , we con - sider a few basic principles to be the minimum requirements for a productive interactive comput - ing system . Access to all session state . When working interac - tively , scientists commonly perform hundreds of computations in sequence and often might need to reuse a previous result . The standard Python shell remembers the very last output and stores it into a variable named “ _ ” ( a single underscore ) , but each new result overwrites this variable . IPython stores a session’s inputs and outputs into a pair of num - bered tables called In and Out . All outputs are also accessible as _ N , where N is the number of results ( you can also save a session’s inputs and outputs to a log file ) . Figure 2 shows the use of previous re - sults in an IPython session . Because keeping a very large set of previous results can potentially lead to memory exhaustion , IPython lets users limit how many results are kept . Users can also manually delete individual references using the standard Python del keyword . A control system . It’s important to have a secondary control mechanism that is reasonably orthogonal $ python # $ represents the system prompt Python 2 . 4 . 3 ( Apr 27 2006 , 14 : 43 : 58 ) [ GCC 4 . 0 . 3 ( Ubuntu 4 . 0 . 3 - 1ubuntu5 ) ] on linux2 Type “help” , “copyright” , “credits” or “license” for more information . > > > print “This is the Python shell . ” This is the Python shell . > > > 2 * * 45 + 1 # long integers are built - in 35184372088833L > > > import cmath # default complex math library > > > cmath . exp ( – 1j * cmath . pi ) ( – 1 – 1 . 2246063538223773e - 16j ) Figure 1 . Default interactive Python shell . In the two computations shown—one with long integers and one using the built - in complex numbers—the literal 1j represents . i (cid:34) (cid:18) 1 M AY / J UNE 2007 23 to the underlying language being executed ( and in - dependent of any variables or keywords in the lan - guage ) . Even programming languages as compact as Python have a syntax that requires parentheses , brackets , and so on , and thus aren’t the most con - venient for interactive control systems . IPython offers a set of control commands ( or magic commands , as inherited from IPP ) designed to improve Python’s usability in an interactive con - text . The traditional Unix shell largely inspires the syntax for these magic commands , with white space used as a separator and dashes indicating op - tions . This system is accessible to the user , who can extend it with new commands as desired . The fragment in Figure 3 shows how to activate IPython’s logging system to save the session to a named file , requesting that the output is logged and every entry is time stamped . IPython auto - matically interprets the logstart name as a call to a magic command because no Python variable with that name currently exists . If there were such a variable , typing % logstart would disambiguate the names . Operating system access . Many computing tasks involve working with the underlying operating system ( reading data , looking for code to execute , loading other programs , and so on ) . IPython lets users create their own aliases for common system tasks , navigate the file system with familiar com - mands such as cd and ls , and preﬁx any command with ! for direct execution by the underlying OS . Although these are fairly simple features , in prac - tice they help maintain a ﬂuid work experience— for example , they let users type standard Python code for programming tasks and perform common OS - level actions with a familiar Unix - like syntax . IPython goes beyond this , letting users call system commands with values computed from Python variables . These features have led some users ( es - pecially under Windows , a platform with a very primitive system shell ) to use IPython as their de - fault shell for everyday work . Figure 4 shows how to perform the simple task of normalizing the names of a few ﬁles to a differ - ent convention . Dynamic introspection and help . One benefit of working interactively is being able to directly ma - nipulate code and objects as they exist in the run - time environment . Python offers an interactive help system and exposes a wide array of introspec - tive capabilities as a standard module ( inspect . py ) that provides functions for exploring various types of objects in the language . IPython offers access to Python’s help system , the ability to complete any object’s names and at - tributes with the Tab key , and a system to query an object for internal details , including source code , $ ipython Python 2 . 4 . 3 ( Apr 27 2006 , 14 : 43 : 58 ) Type “copyright” , “credits” or “license” for more information . IPython 0 . 7 . 3 — An enhanced Interactive Python . ? – > Introduction to IPython features . % magic – > Information about IPython magic % functions . Help – > Python help system . object ? – > Details about object . ? object also works , ? ? prints more . In [ 1 ] : 2 * * 45 + 1 Out [ 1 ] : 35184372088833L In [ 2 ] : import cmath In [ 3 ] : cmath . exp ( – 1j * cmath . pi ) Out [ 3 ] : ( – 1 – 1 . 2246063538223773e – 16j ) # The last result is always stored as ' _ ' In [ 4 ] : _ * * 2 Out [ 4 ] : ( 1 + 2 . 4492127076447545e – 16j ) # And all results are stored as N , where _ N is their number : In [ 5 ] : _ 3 + _ 4 Out [ 5 ] : 1 . 2246063538223773e – 16j Figure 2 . The use of previous results in an IPython session . In IPython , all outputs are also accessible as _ N , where N is the number of results . In [ 2 ] : logstart – o – t ipsession . log Activating auto – logging . Current session state plus future input saved . Filename : ipsession . log Mode : backup Output logging : True Raw input log : False Timestamping : True State : active Figure 3 . Activating IPython’s logging system to save the session to a named ﬁle . IPython interprets the logstart name as a call to a control command ( or magic command ) . 24 C OMPUTING IN S CIENCE & E NGINEERING by typing the object’s name and one or two “ ? ” ( two for extra details ) . These features are useful when developing code , exploring a problem , or us - ing an unfamiliar library because direct experi - mentation with the system can help produce working code that the user can then copy into an editor as part of a larger program . Figure 5 shows the information returned by IPython after querying an object called DeepThought from a module called universe . In line 2 , we’ve hit the Tab key , so IPython com - pletes a list of all the attributes defined for DeepThought . Then , for the sequence Deep - Thought ? ? , IPython tries to find as much infor - mation about the object as it can , including its entire source code . Access to program execution . Although typing code interactively is convenient , large programs are written in text editors for significant compu - tations . IPython’s % run magic command lets users run any Python file within the IPython session as if they had typed it interactively . Upon comple - tion , the program results update the interactive session , so the user can further explore any quan - tity computed by the program , plot it , and so on . The % run command has several options to assist in debugging , profiling , and more . It’s probably the most commonly used magic function in a typ - ical workflow : you use a text editor for significant editing while code is executed ( using run ) in the IPython session for debugging and results analy - sis . Typing run ? provides full details about the run command . Figure 6 compares IPython to the default Python shell when running a program that con - tains errors . IPython provides detailed exception tracebacks with information about variable values , and can activate a debugger ( indicated by the ipdb > prompt ) , from which a user can perform postmortem analysis of the crashed code from its in - memory state , walk up the call stack , print vari - ables , and so on . This mechanism saves time dur - ing development , because the user doesn’t need to reload libraries used by a program for each new test . It also lets the user perform expensive ini - tialization steps only once , keeping them in mem - ory while the user explores other parts of a problem by making changes to code and running it repeatedly . A Base Layer for Interactive Environments In addition to these minimal requirements , IPython exposes its major components to the user for modification and customization , making it a In [ 36 ] : ls tt0 . dat tt1 . DAT tt2 . dat tt3 . DAT # ‘var = ! cmd’ captures a system command into a Python variable : In [ 37 ] : ﬁles = ! ls = = [ ‘tt0 . dat’ , ‘tt1 . DAT’ , ‘tt2 . dat’ , ‘tt3 . DAT’ ] # Rename the ﬁles , using uniform case and 3 - digit numbers : In [ 38 ] : for i , name in enumerate ( ﬁles ) : . . . . : newname = ‘time % 03d . dat’ % i . . . . : ! mv $ name $ newname . . . . : In [ 39 ] : ls time000 . dat time001 . dat time002 . dat time003 . dat Figure 4 . Normalizing ﬁle names to a different convention . These code fragments show how IPython allows users to combine normal Python syntax with direct system calls ( preﬁxed with the “ ! ” character ) . In such calls , Python variables can be expanded by preﬁxing them with “ $ . ” In [ 1 ] : from universe import DeepThought In [ 2 ] : DeepThought . # Hit the Tab key here DeepThought . _ doc _ DeepThought . answer DeepThought . question DeepThought . _ module _ DeepThought . name In [ 2 ] : DeepThought ? ? Type : classobj String Form : universe . DeepThought Namespace : Interactive File : / tmp / universe . py Source : class DeepThought : name = “Deep Thought” question = None def answer ( self ) : “””Return the Answer to The Ultimate Question Of Life , the Universe and Everything””” return 42 Figure 5 . Information returned by IPython after querying an object called DeepThought from a module called universe . When the user hits the Tab key ( line 2 ) , IPython lists all attributes defined for DeepThought . For the sequence DeepThought ? ? , IPython finds as much information about the object as it can , including its source code . M AY / J UNE 2007 25 flexible and open platform . Other scientific com - puting projects have used IPython’s features to build custom interactive environments . A user can declare these customizations in a plaintext ﬁle—an IPython proﬁle —and load them using the – proﬁle ﬂag at startup time . Input syntax processing . Underlying IPython is a running Python interpreter , so ultimately all code executed by IPython must be valid Python code . However , in some situations the user might want to allow other forms of input that aren’t necessar - ily Python . Such uses can range from simple trans - formations for input convenience to supporting a legacy system with its own syntax within the IPython - based environment . As a simple example , IPython ships with a physics profile , which preloads physical unit sup - port from the ScientificPython library ( http : / / sourcesup . cru . fr / projects / scientific - py ) , and in - stalls a special input filter . This filter recognizes text sequences that appear to be quantities with units and generates the underlying Python code to define an object with units , without the user having to type out the more verbose syntax , as Figure 7 shows . IPython exposes the input ﬁltering system , which users can customize to deﬁne arbitrary input trans - formations that might suit their problem domains . For example , the Software for Algebra and Geom - etry Experimentation ( Sage ) 2 project uses an input ﬁlter to transform numerical quantities into exact integers , rationals , and arbitrary precision ﬂoats in - stead of Python’s normal numerical types . ( See the “Projects Using IPython” sidebar for a description of this and other examples . ) Error handling . A common need in interactive en - vironments is to process certain errors in a special manner . IPython offers three exception handlers that treat errors uniformly , differing only in the amount of detail they provide . A custom environ - ment might want to handle internal errors , or er - rors related to certain special objects , differently from other normal Python errors . IPython lets users register exception handlers that will ﬁre when an exception of their registered type is raised . Python’s uniform and object - oriented approach to errors greatly facilitates this feature’s implementa - tion : because all exceptions are classes , users can register handlers based on a point in the class hier - archy that will handle any exception that inherits from the registered class . The PyRAF interactive environment at the Space Telescope Science Insti - tute has used this capability to handle its own in - ternal errors separately from errors that are mean - ingful to the user . Tab completion . Tab completion is a simple but useful feature in an interactive environment be - cause the system completes not only on Python variables but also on keywords , aliases , magic com - mands , files , and directories . IPython lets users register new completers to explore certain objects . ( a ) ( b ) Figure 6 . Comparison of IPython to the default Python shell . ( a ) IPython provides detailed error information and can automatically activate an interactive debugger to inspect the crashed code’s status , print variables , navigate the stack , and so on . ( b ) The same error displayed in the default Python shell . In [ 1 ] : mass = 3 kg In [ 2 ] : g = 9 . 8 m / s ^ 2 In [ 3 ] : weight = mass * g In [ 4 ] : weight Out [ 4 ] : 29 . 4 m * kg / s ^ 2 # We can see the actual Python code generated by IPython : In [ 5 ] : % history # % history is an IPython “magic” command 1 : mass = PhysicalQuantityInteractive ( 3 , ‘kg’ ) 2 : g = PhysicalQuantityInteractive ( 9 . 8 , ‘m / s * * 2’ ) 3 : weight = mass * g 4 : weight Figure 7 . Code using IPython’s physics proﬁle and input ﬁlter . The ﬁlter recognizes text sequences that appear to be quantities with units and generates the underlying Python code to deﬁne an object with units . 26 C OMPUTING IN S CIENCE & E NGINEERING The PyMAD project at the neutron scattering fa - cility of the Institute Laue Langevin in Grenoble , France , uses this feature for interactive control of experimental devices . The IPython console runs on a system that connects to the neutron spec - trometer over a network , but users interact with the remote system as if it were local , and Tab com - pletion operates over the network to fetch infor - mation about remote objects for display in the user’s local console . Graphical Interface Toolkits and Plotting Python provides excellent support for GUI toolk - its . It ships by default with bindings for Tk , and third - party bindings are available for GTK , WxWidgets , Qt , and Cocoa ( under Apple OS X ) . You can use essentially every major toolkit to write graphical applications from Python . Al - though few scientists look forward to GUI design , they increasingly have to write small - to medium - sized graphical applications to interface with sci - entific code , drive instruments , or collect data . Python lets scientists choose the toolkit that best fits their needs . However , graphical applications are notoriously difficult to test and control from an interactive command line . In the default Python shell , if a user instantiates a Qt application , for example , the com - mand line stops responding as soon as the Qt win - dow appears . IPython addresses this problem by of - fering special startup flags that let users choose which toolkit they want to control interactively in a nonblocking manner . This feature is necessary for one of scientists’ most common tasks : interactive data plotting and visualization . Many traditional plotting libraries and programs have Python bindings or process - based interfaces , but most have various limitations for interactive use . The matplotlib project ( http : / / matplotlib . sourceforge . net ) is a sophisticated plot - ting library capable of producing publication - qual - ity graphics in a variety of formats , and with full LaTeX support . 3 Matplotlib renders its plots to several back ends , the components responsible for generating the actual ﬁgure . Some back ends ( such as for PostScript , PDF , and Scalable Vector Graph - ics ) are purely disk - based and meant to generate files ; others are meant for display in a window . Matplotlib supports all these toolkits , letting users choose which to use via a conﬁguration ﬁle setting . ( The Scientiﬁc Programming department on p . 90 explores matplotlib in more detail . ) IPython and matplotlib developers have collab - orated to enable automatic coordination between the two systems . If given the special – pylab startup flag , for example , IPython detects the user’s mat - plotlib settings and automatically conﬁgures itself to enable nonblocking interactive plotting . This P ROJECTS U SING IP YTHON S everal scientiﬁc projects have exploited IPython as a plat - form rather than as an end - user application . Although the vast majority of IPython users do little customization be - yond setting a few personal options , these projects show that there is a real use case for open , customizable interac - tive environments in scientiﬁc computing : • Sage ( http : / / modular . math . washington . edu / sage ) , a sys - tem for mathematical research and teaching with a focus on algebra , geometry , and number theory , uses IPython for its interactive terminal - based interface . • The Space Telescope Science Institute’s PyRAF environ - ment ( www . stsci . edu / resources / software _ hardware / pyraf ) uses IPython for astronomical image analysis . PyRAF pro - vides an IPython - based shell for interactive work with sev - eral special - purpose customizations . We made numerous enhancements to IPython based on requests and sugges - tions from the PyRAF team . • The National Radio Astronomy Observatory’s Common Astronomy Software Applications ( CASA , http : / / casa . nrao . edu ) uses IPython in its interactive shell . • The Ganga system ( http : / / ganga . web . cern . ch / ganga / ) , developed at the European Center for Nuclear Research ( CERN ) for grid job control for the large hadron collider beauty experiment ( LHCb ) and Atlas experiments , uses IPython for its command - line interface ( CLIP ) . • The PyMAD project ( http : / / ipython . scipy . org / moin / PyMAD ) uses IPython to control a neutron spectrometer at CEA - Grenoble and the Institute Laue Langevin in France . • The Pymerase project ( http : / / pymerase . sourceforge . net ) for microarray gene expression databases exposes an IPython shell in its interactive iPymerase mode . Based on the lessons learned from this usage , we’re currently restructuring IPython to allow interactive parallel and distrib - uted computing , to build better user interfaces , and to pro - vide more ﬂexible and powerful components for other projects to build on . We hope that if more projects are devel - oped on top of such a common platform , all users will bene - ﬁt from the familiarity of having a well - known base layer on top of which their speciﬁc projects add custom behavior . M AY / J UNE 2007 27 provides an environment in which users can per - form interactive plotting in a manner similar to Matlab or IDL but with complete ﬂexibility in the GUI toolkit used ( these programs provide their own GUI support and can’t be integrated in the same process with other toolkits ) . In the example in Figure 8 , plots are generated from an interactive session using matplotlib . We use the special function and numerical integration routines provided by the SciPy package 4 to verify , at a few points , the standard relation for the first Bessel function . The last line shows matplotlib’s capabilities for ar - ray plotting with a simple 32 (cid:2) 32 set of random numbers . Although matplotlib’s main focus is 2D plotting , several packages exist for 3D plotting and visual - ization in Python . The Visualization Toolkit ( VTK ) is a mature and sophisticated visualization library written in C + + that ships with Python bind - ings . Recently , developers have introduced a new set of bindings called Traits - enabled VTK ( TVTK ) , 5 which provides seamless integration with the NumPy array objects and libraries as well as a higher - level API for application development . Figure 9 shows how to use TVTK interactively from within an IPython session . Because matplotlib has WXPython support , you can use both TVTK and matplotlib concurrently from within IPython . Interactive Parallel and Distributed Computing Although interactive computing environments can be extremely productive , they’ve traditionally had one weakness : they haven’t been able to take ad - vantage of parallel computing hardware such as multicore CPUs , clusters , and supercomputers . Thus , although scientists often begin projects us - ing an interactive computing environment , at some point they switch to using languages such as C , C + + , and Fortran when performance becomes crit - ical and their projects call for parallelization . In re - cent years , several vendors have begun offering distributed computing capabilities for the major commercial technical computing systems ( see the “Distributed Computing Toolkits for Commercial Systems” sidebar for some examples ) . These pro - vide various levels of integration between the com - putational back ends and interactive front ends . An early precursor to these systems , whose model was one of full interactive access to the computational nodes , is ParGAP ( www . ccs . neu . edu / home / gene / pargap . html ) , a parallel - enabled version of the open source package Groups , Algorithms , and Pro - gramming ( GAP ) for computational group theory . In the Python world , several projects also exist that seek to add support for distributed computing . The Python - community - maintained wiki keeps a list of such efforts ( http : / / wiki . python . org / moin / ParallelProcessing ) . Of particular interest to scien - tific users , Python has been used in parallel com - puting contexts both with the message - passing interface ( MPI , http : / / sourceforge . net / projects / pympi ; http : / / mpi4py . scipy . org ) 6 , 7 and the Bulk Synchronous Parallel 8 models . J x x d 0 0 1 ( ) cos sin (cid:34) (cid:13) (cid:14) (cid:181) (cid:85) (cid:75) (cid:75) (cid:85) Figure 8 . IPython using the – pylab ﬂag to enable interactive use of the matplotlib library . Plot windows can open without blocking the interactive terminal , using any of the GUI toolkits supported by matplotlib ( Tk , WxWidgets , GTK , or Qt ) . Figure 9 . An IPython session showing a 3D plot done with TVTK . The GUI toolkit used is WXPython , so IPython is started with the - wthread ﬂag . 28 C OMPUTING IN S CIENCE & E NGINEERING Building on Python’s and IPython’s strengths as an interactive computing system , we’ve begun a signiﬁcant effort to add interactive parallel and dis - tributed capabilities to IPython . More speciﬁcally , our goal is to enable users to develop , test , debug , execute , and monitor parallel and distributed ap - plications interactively using IPython . To make this possible , we’ve refactored IPython to support these new features . We’ve deliberately built a system whose basic components make no speciﬁc assump - tions about communications models , data distrib - ution , or network protocols . The redesigned IPython consists of • the IPython core , which exposes IPython’s core functionality , abstracted as a Python library rather than as a terminal - based application ; • the IPython engine , which exposes the IPython core’s functionality to other processes ( either lo - cal to the same machine or remote ) over a stan - dard network connection ; and • the IPython controller , which is a process that ex - poses a clean asynchronous interface for work - ing with a set of IPython engines . With these basic components , specific models of distributed and parallel computing can be imple - mented as user - visible systems . Currently , we sup - port two models out of the box : a load - balancing and fault - tolerant task - farming interface for coarse - grained parallelism , and a lower - level interface that gives users direct interactive access to a set of run - ning engines . This second interface is useful for both medium - and fine - grained parallelism that uses MPI for communications between engines . Most importantly , advanced users and developers can use these components to build customized in - teractive parallel / distributed applications in Python . End users work with the system interac - tively by connecting to a controller using a Web browser , an IPython - or Python - based front end , or a traditional GUI . Speciﬁc constraints that are relevant in scientiﬁc computing guided this design : • It should support many different styles of paral - lelism , such as message passing using MPI , task farming , and shared memory . • It should run on everything from multicore lap - tops to supercomputers . • It should integrate well with existing parallel code and libraries written using C , C + + , or For - tran , and MPI for communications . • All network communications , events , and error handling should be fully asynchronous and nonblocking . • It should support all of IPython’s existing fea - tures in parallel contexts . The architectural requirements for running IPython in a distributed manner are similar to those required for decoupling a user front end from a computational back end . Therefore , this restruc - turing effort also lets IPython offer new types of user interfaces for remote and distributed work , such as a Web browser - based IPython GUI and collaborative interfaces that enable multiple remote users to simultaneously access and share running computational resources and data . T he first public release of these new components was in late 2006 . While it should still be considered under heavy development and subject to changes , we’ve already been contacted by several projects that have begun using it as a tool in production codes . Details about this work are available on the IPython Web site . Acknowledgments IPython wouldn’t be where it is today if it weren’t for its user community’s contributions . Over the years , users have sent bug reports , ideas , and often major portions of new code . Some of the more prolific contributors have become codevelopers . As a Free D ISTRIBUTED C OMPUTING T OOLKITS FOR C OMMERCIAL S YSTEMS S ome vendors offer distributed computing capabilities for the ma - jor commercial technical computing systems : • Matlab Distributed Computing Toolbox , www . mathworks . com / products / distribtb . • FastDL , www . txcorp . com / products / FastDL . • Mathematica Parallel Computing Toolkit , http : / / documents . wolfram . com / applications / parallel . • Mathematica Personal Grid Edition , www . wolfram . com / products / personalgrid . • Grid Mathematica , www . wolfram . com / products / gridmathematica . • HPC - Grid , www . maplesoft . com / products / toolboxes / HPCgrid . • Star - P , www . interactivesupercomputing . com . Other projects seek to support distributed computing using Python ( see http : / / wiki . python . org / moin / ParallelProcessing ) . M AY / J UNE 2007 29 Software project , it is only because of such a community that it continues to improve . We thank Ville Vainio for maintaining the stable branch of the project , and Benjamin Ragan - Kelley for his continued work as a key developer of IPython’s distributed and parallel computing infrastructure . This research was partially supported by US Department of Energy grant DE - FG02 - 03ER25583 and DOE / Oak Ridge National Laboratory grant 4000038129 ( F . Pérez ) and by Tech - X Corporation ( B . Granger ) . We thank Enthought for the hosting and infrastructure support it has provided to IPython over the years . References 1 . T . - Y . B . Yang , G . Furnish , and P . F . Dubois , “Steering Object - Ori - ented Scientiﬁc Computations , ” Proc . Technology of Object - Ori - ented Languages and Systems ( TOOLS ) , IEEE CS Press , 1998 , pp . 112 – 119 . 2 . W . Stein and D . Joyner , “SAGE : System for Algebra and Geome - try Experimentation , ” Comm . Computer Algebra , vol . 39 , 2005 , pp . 61 – 64 . 3 . P . Barrett , J . Hunter , and P . Greenﬁeld , “Matplotlib : A Portable Python Plotting Package , ” Astronomical Data Analysis Software & Systems , vol . 14 , 2004 . 4 . E . Jones , T . Oliphant , and P . Peterson , “SciPy : Open Source Sci - entiﬁc Tools for Python , ” 2001 ; www . scipy . org . 5 . P . Ramachandran , “TVTK : A Pythonic VTK , ” Proc . EuroPython Conf . , EuroPython , 2005 ; http : / / svn . enthought . com / enthought / attachment / wiki / TVTK / tvtk - paper - epc2005 . pdf . 6 . D . M . Beazley and P . S . Lomdahl , “Extensible Message Passing Application Development and Debugging with Python , ” Proc . 11th Int’l Parallel Processing Symp . , IEEE CS Press , 1997 , pp . 650 – 655 . 7 . P . Miller , “Parallel , Distributed Scripting with Python , ” Third Linux Clusters Inst . Int’l Conf . Linux Clusters : The HPC Revolution , Lawrence Livermore Nat’l Laboratory , 2002 ; www . llnl . gov / tid / lof / documents / pdf / 240425 . pdf . 8 . K . Hinsen , “High - Level Parallel Software Development with Python and BSP , ” Parallel Processing Letters , vol . 13 , s 2003 , pp . 473 – 484 . Fernando Pérez is a research associate in the Department of Applied Mathematics at the University of Colorado at Boulder . His research interests include new algorithms for solving PDEs in multiple dimensions with a focus on prob - lems in atomic and molecular structure , the use of high - level languages for scientific computing , and new approaches to distributed and parallel problems . Pérez has a PhD in physics from the University of Colorado . Contact him at Fernando . Perez @ colorado . edu . Brian E . Granger is a research scientist at Tech - X . He has a background in scattering and many - body theory in the context of atomic , molecular , and optical physics . His re - search interests include interactive parallel and distributed computing , remote visualization , and Web - based inter - faces in scientiﬁc computing . Granger has a PhD in theo - retical physics from the University of Colorado . Contact him at bgranger @ txcorp . com . The American Institute of Physics is a not - for - profit membership corporation chartered in New York State in 1931 for the purpose of promoting the advancement and diffusion of the knowledge of physics and its application to human welfare . Leading societies in the fields of physics , astronomy , and related sciences are its members . In order to achieve its purpose , AIP serves physics and related fields of science and technology by serving its member societies , individual scientists , educators , students , R & D leaders , and the general public with programs , services , and publications— information that matters . The Institute publishes its own scientific journals as well as those of its member societies ; provides abstracting and indexing services ; provides online database services ; disseminates reliable information on physics to the public ; collects and analyzes statistics on the profession and on physics education ; encourages and assists in the documentation and study of the history and philosophy of physics ; cooperates with other organizations on educational projects at all levels ; and collects and analyzes information on federal programs and budgets . The Institute represents approximately 134 , 000 scientists through its member societies . In addition , approximately 6 , 000 students in more than 700 colleges and universities are members of the Institute’s Society of Physics Students , which includes the honor society Sigma Pi Sigma . Industry is represented through the membership of 38 Corporate Associates . Governing Board : * Mildred S . Dresselhaus ( chair ) , David Aspnes , Anthony Atchley , Martin Blume , Marc H . Brodsky ( ex officio ) , Slade Cargill , Charles W . Carter Jr . , Hilda A . Cerdeira , Marvin L . Cohen , Timothy A . Cohn , Lawrence A . Crum , Bruce H . Curran , Morton M . Denn , Robert E . Dickinson , Michael D . Duncan , Judy R . Franz , Brian J . Fraser , John A . Graham , Toufic Hakim , Joseph H . Hamilton , Ken Heller , James N . Hollenhorst , Judy C . Holoviak , John J . Hopfield , Anthony M . Johnson , Angela R . Keyser , Louis J . Lanzerotti , Harvey Leff , Rudolf Ludeke , Robert W . Milkey , John A . Orcutt , Richard W . Peterson , S . Narasinga Rao , Elizabeth A . Rogan , Bahaa A . E . Saleh , Charles E . Schmid , Joseph Serene , James B . Smathers , Benjamin B . Snavely ( ex officio ) , A . F . Spilhaus Jr , and Hervey ( Peter ) Stockman . * Board members listed in italics are members of the Executive Committee . Management Committee : Marc H . Brodsky , Executive Director and CEO ; Richard Baccante , Treasurer and CFO ; Theresa C . Braun , Vice President , Human Resources ; James H . Stith , Vice President , Physics Resources ; Darlene A . Walters , Senior Vice President , Publishing ; and Benjamin B . Snavely , Secretary . w w w . a i p . o r g