A Visual Calendar For Scheduling Group Meetings David Beard and Murugappan Palanlappan * with Alan Humm , ’ David Banks , Anil Nair * and Yen - Ping Shari”” Department of Computer Science , University of North Carolina , Chapel Hill , NC 27599 ABSTRACT Scheduling group meetings requires access to participants’ calendars , typically located in scattered pockets or desks . Placing participants’ calendars on - line and using a rule - based scheduler to find a time slot would alleviate the problem to some extent , but it often is difficult to trust the results , because correct scheduling rules are elusive , varying with the participants and the agenda of a particular meeting . What’s needed is a comprehensive scheduling system that summarizes the available information for quick , flexible , and reli - able scheduling . We have developed a prototype of a priority - based , graphical scheduling system called Visual Scheduler ( VS ) . A controlled experiment comparing automatic scheduling with VS to manual scheduling demonstrated the former to be faster and less error prone . A field study conducted over six weeks at the UNC - CH Computer Science Department showed VS to be a generally useful system and provided valuable feedback on ways to enhance the functionality of me system to increase its value as a groupwork tool . In particular , users found priority - based time - slots and access to scheduling decision reasoning advantageous . VS has been in use by more than 75 faculty , staff , and graduate students since Fall 1987 . 1 . INTRODUCTION Scheduling group meetings is difficult because it involves a number of participants agree - ing upon a specific meeting time , A participant refers to any resource such as a person , a piece of equipment , or an office . Consider the following scenario : Ms . White , a secretary in the Computer Science Department , has to schedule a two - hour meeting the following week , with two professors , Dr . Brooks and Dr . Fuchs , and three graduate students , Ms . Pink , Mr . Orange , and Mr . Blue . The group requires both a slide projector and an overhead projector . This scheduling problem involves the availability of a two - hour time - slot of mutual acceptability to the five individuals and the availability of a meeting room , a slide projector , and an overhead projectorfor the same period . We have developed a prototype priority - based , graphical scheduling system , called Visual Scheduler ( VS ) that summarizes the “availability” information , points out time - slots most likely to be acceptable , and still allows the meeting coordinator to look behind the results to see who is blocking a time - slot with what event . Participants maintain their schedules by adding or removing events to a transparent calendar template which is in the form of a grid . An event is represented by a shaded time - slot on the transparency . The * The work described in this paper was performed when these authors were at UNC - CH . Their present addresses appear at the end of this paper . CSCW ‘90 Proceedings October 1990 279 shading is darker for high - priority events and lighter for low - priority events . A user quickly locates mutually acceptable time slots by stacking the participants’ calendars to - gether and looking for open slots . If there is no open slot , the least disruptive slot corre - sponds to the one admitting the most light . The user can look behind the stacked calendar transparencies to see a list of the participants blocking a time slot , thereby allowing him / her to make spontaneous scheduling decisions according to the particular needs of a meeting . To assess the effectiveness of VS , we performed a controlled experiment using six sub - jects to examine the relative merits of visual - automated versus manual scheduling . The evaluations demonstrated the former to be quicker and less error prone . In addition , we conducted a field study over a period of six weeks at the UNC - CH Computer Science Department through interviews , a focus group , and limited user obser - vation . As in the controlled experiment , users in the field study appraised VS to be a use - ful scheduling tool . In particular , users found priority - based time - slots and access to scheduling decision reasoning advantageous . Users provided valuable feedback on ways to enhance the functionality of the system to increase its value as a groupwork tool . VS has been is use by more than 75 faculty , staff , and graduate students since Fall 1987 . Below we first describe how people use calendars and briefly review other on - line auto - matic scheduling systems . Then we describe the VS user interface and present a discussion of why we thii it is effective . Next we outline the two experiments and summarize the effectiveness of the VS system based on the results of both our controlled experiment and field study . 2 . BACKGROUND 2 . 1 Pocket Calendars How office workers keep - or “should” keep - their personal calendars is the subject of a great deal of study ( [ MacK76 ] , [ Xe1182 ] , [ Kinc85 ] , [ Malo83 ] ) . While there are many indi - vidual differences , certain patterns are evident . Most office workers keep a calendar on their person . Quite often this calendar is very small and portable , making it easily acces - sible . A few individuals keep a desk calendar as well as a pocket version . They find a larger calendar’s additional space advantageous , despite the maintenance problems two cal - endars present . Both pocket and desk calendars are used for a variety of purposes . The calendar may be used as a schedule , that is , a reminder of future events . It may also be used as a diary recording past activities and expenses . Finally , both types of calendars serve as structured notebooks , providing a place to record phone numbers , addresses , birthdays and other im - portant dates . While all these uses are important , this paper is only concerned with calen - dars used for maintaining schedules and scheduling meetings . While portable pocket calendars are convenient for individuals , they create problems for those trying to schedule meetings . First , the scheduler needs to view several people’s cal - endars simultaneously . Accessing individual pocket calendars may require many minutes if not hours . Second , accurate calendars are needed ; often , at the time of scheduling , the copies of individuals schedules may not reflect their engagements . Finally , people have various priorities for the events on their schedules and its difficult for one to evaluate the priority of another’s event , since these priorities are usually not explicitly written down . 2 . 2 On - Line Automatic Scheduling We agree with ( [ Ehlr87 ] , [ Grud88 ] ) that scheduling systems are only successful to the ex - tent that users maintain their schedules on - line . Ehlrich suggests , however , that more in - dividuals will maintain their calendars on - line if the perceived collective benefit were CSCW ‘90 Proceedings October t 990 280 higher ; that is , if organizations recognized how much they may be losing through ineffi - cient meeting scheduling . For example , it would be beneficial in a medical environment to maintain on - line the schedules of specialists , operating rooms , and scarce medical equipment to help doctors share these resources more effectively . Also , Grudin states that scheduling could be targeted to environments or groups making the most uniform use of electronic calendars . Examples of two environments would be an office or an academic in - stitution in which most people have access to and perform most of their daily work on computers . Further , recently developed “pocket” computers such as Atari’s Portfolio and Sharp’s Wizard allows users to maintain portable electronic calendars . It should be possible for these computers to be attached or “docked’ to a network [ UttiQO ] so that a user can make his or her schedule available to others . Once the schedules are on - line and are accessible by others , many software systems such as MIT’s MPCAL [ Cimr83 ] . RTCAL [ Sari85 ] , Target System’s Target Meeting [ Gian89 ] , WordPerfect’s Office Desktop Organizer [ Thom88 ] . and Cross Wind’s Synchronize indicate mutually open time - slots . If there are no open time - slots ( as often is the case ) , these systems allow users to schedule conflicting meetings at random . Due to the random scheduling , this approach is not reliable and is potentially “costly . ” An alternative approach used by other systems is to use a “black - box” automatic sched - uler , using a rule - based expert - system [ L & n871 or a programmed equivalent , to locate a meeting time . Heuristic “scheduling rules” are developed in an attempt to analytically de - scribe how the typical user schedules the typical meeting . By acting on these rules , such scheduling systems quickly produce scheduling solutions that often match the expecta - tions and needs of the scheduling user . We argue , however , that such “scheduling rules” cannot really reflect the normal processes individuals use to schedule meetings . Those processes are either too varying or too sensi - tive to be encoded . Different people use different rules , and situations vary widely , so it is difficult to develop a generally useful fixed set of rules . For example , many experts sug - gest scheduling certain critical meetings just before lunch or quitting time to insure a de - cision is quickly made [ MacK76 ] , while other meetings require sufficient time for reflec - tion . Or , depending on the agenda , certain people may not be critical to a discussion and could be left out , simplifying the location of an acceptable meeting time . Further , schedulers often use “hidden rules” that they will not allow into common laiowl - edge . For example , a manager might intentionally schedule a conflicting meeting to in - sure that a disruptive person cannof attend . A rule for this situation might read , “Choice between two otherwise equal time slots , select the one that Jones cannot attend . ” In short , people schedule meetings using a wide variety of complex , constantly changing rules , many of which they cannot allow into common knowledge , and therefore cannot place into a rule - based “black box” automatic scheduler . What we need is a “grey box” so - lution in which an automatic scheduler fist calculates a set of possible solutions , includ - ing both any mutually available time slots and those with minimal conflict , then displays the results in an easy - to - assimilate manner , allowing the scheduler to look behind the re - sults to see how they were obtained . 3 . TRANSPARENCY METAPHOR Consider the following metaphor : an individual’s weekly calendar is organized as a grid and placed on an overhead transparency . Columns indicate days of the week , and rows rep - resent hours . Events are darkened blocks with the event’s priority denoted by the blocks opacity . One locates a mutually open time slot by stacking a number of people’s trans - parent calendars , holding the stack up to a light , and looking for openings . As is often the CSCW ‘90 Proceedings October 1990 281 case with even a small group of busy people , there may be no completely open slot . In this case , the least disruptive time slot corresponds to the one admitting the most light . With this metaphor , each potential meeting can be thought as a local minimum in a space of points representing time - slots and events . In this space , a point’s value is the conjunction of a set of fuzzy - logic or weighted variables determined by the priorities of events at that point ( [ Zade65 ] , [ Zade73 ] ) . While using vision to search a mathematical space is not common , it is not unknown . For example , the Jonker information - retrieval system [ Jonk67 ] uses a somewhat similar approach to locate papers . 4 . THE VISUAL SCHEDULER The Visual Scheduler is written in Xerox Smalltalk and currently operates on networked Sun workstations running 4 . 3 BSD UNIX operating system . The system requires either a networked or central file system connecting all participants ; our current implementation uses a “schedule” file , located in each participant’s home directory , to store that individ - ual’s schedule . Users do not need to know Smalltalk to use the system . VS is both a system for maintaining personal calendars and a system for scheduling meet - ings . A user can view and edit his / her own calendar and can view other users’ calendars . Some users may have permission to edit calendars other than their own . For instance , all secretaries may have permission to edit the calendars of any equipment or room . Users can schedule meetings based on the composite schedule resulting from viewing participants’ calendars . 4 . 1 Creating and Maintaining a Personal Calendar Figure 1 shows a VS display . The top portion of the screen displays a user’s weekly cal - endar , showing the days of the week , and the time of the day from 8 : 00 a . m . until 690 p . m . Below the calendar display , typing one or more users’ names in the Name field dis - plays either a single or a composite calendar and typing any date in the Date field displays that weeks calendar . The bottom portion of the screen provides detailed information about individual events . A mouse - driven user interface is used for creating and editing events . Although mere are three buttons on the Sun’s mouse , VS uses only two of them - the left and the middle buttons . To add a new event to the calendar , say from 2 pm to 4 pm , a user will move the pointer to one end of the time slot , press the left button , move the pointer to the other end and release the button . A newly created event is automatically selected . To select an existing event , a user will press the left button on any time slot of the event . A selected event is shown with a white border . A description of the selected event appears at the bot - tom portion of the screen . Quite often , users may create an event for an hour , then , realize that event may need two hours . Instead of having to t - e - create the event , users can simply resize its visual extent . The bottom left portion of the screen is the Public area , which displays two types of data : calendar information ( time , movability , and frequency ) and textual information ( scheduled by , title , and a “comments” field in the center ) . The first type echoes information about the event in the calendar . The second type contains textual description about the event it - self . By default , an event is created with a low priority . Users can edit the priority of an event by pressing the middle button in the movability field to bring up a pop - up menu and choosing one of the five priorities ( 1 : low priority : light gray shading , . . . . 5 : highest prior - ity : black shading ) , thereby indicating how flexible they are at any given time . CSCW ‘90 Proceedings October 1990 282 Likewise , users can edit the frequency of an event by choosing one of the five frequencies ( once , daily , weekly , monthly , yearly ) . An event is , by default , assigned a frequency of once . The other frequencies are provided for repeated or “standing” events . , Examples of standing events include project team meetings , class - periods , weekly faculty lunches , and yearly birthdays . Specifying a repeating frequency causes VS to propagate the event eter - nally ; however , a user can limit the eternal propagation by viewing the calendar at the later date and deleting the future occurrences of the event . For example , a student may want to create a weekly event from now until the end of May . Therefore , s / he needs to create the event , specify its frequency as weekly , advance the calendar to the beginning of June , and delete the event . The textual information associated with an event is available to the other users of the sys - tem . The name of the user , by default , appears in the Schedule & y field . The ScheduledBy field is significant if a number of users have permission to edit a calendar . For example , “Conference Room 3” may be editable by several secretaries . Users can type an event name in the Title field , which then appears on the event in the calendar display . In the bottom center portion of the screen is a comments area . It provides a Smalltalk editor [ Gold801 that allows any amount of information to be associated with an event . In the bottom right portion of the screen is the Private area . Like the Public comments area , it provides an editor . The Private area allows users to keep private notes regarding an event . This facility potentially eliminates the need to keep any personal paper record of the event . VS does not allow anyone other than the creator to see the contents of this area . VS allows users to create and view overlapping events . For example , a student may want to attend Chemistry lab from 3 to 6 p . m . if it rams , otherwise , to play tennis from 5 to 7 p . m . By repeatedly clicking on the overlapped events , users may view the events one after the other . CSCW ‘90 Proceedings October 1990 283 Users can also cut , copy , and paste events . Cutting an event deletes it from the calendar . Pasting an event at a different time location maintains the same attributes of the original event except for the time field which VS updates to the pasted time . This facility allows users to create a tentative event ; later , when they are sure of a time for the event , cut it from the temporary time slot and paste it in the new time slot . VS allows users to print a hard copy of their weekly schedule on a laser printer , complete with priority - shaded events . This functionality allows users to post a “pretty” copy of their weekly engagements outside their office . VS also provides on - line context - dependent help . In summary , a user is presented with a simple graphical user interface for creating and maintaining a personal calendar on - line . By typing any date , a user can display his or her schedule of events ( shaded ) with their titles for that week . By selecting an event , a user can see the textual information associated with it , both in the Public and Private areas . A user can view ( but not modify ) another user’s calendar in exactly the same manner as viewing his or her own calendar except that s / he does not have permission to read the con - tents of the Private area associated with an event . This functionality helps one in know - ing : 1 ) the availability of a user and 2 ) possibly , the whereabouts of a user . 4 . 2 Scheduling a Meeting To schedule a meeting , a user enters the participants’ names into the name field and the system generates and displays the composite schedule , as shown in Figure 2 . With a composite schedule , no event labels are displayed , however , clicking on a time slot re - sults in the display of a list of participants who have events scheduled during that time . This functionality is especially helpful when one or more of the participants are non - essential and block an otherwise mutually agreeable time slot . Continuing with our scenario : First , Ms . White looked at the following week’s composite schedule of the five individu - als , a meeting room , a slide projector , and an overhead projector . Not surprisingly , she found no free time slots nor possible two - hour time slots with little disruption . As four of the five individuals , with the exception of Orange , were essential to the meeting , White , then , looked at only their composite schedule . Again , she did not find a free hvo - hour slot ; however , she found three possible two - hour time - slots with little disruption . Next , she added Orange’s schedule but the resulting composite schedule eliminated all three possibilities . Therefore , she deleted Orange’s schedule and added the schedulesfor the meeting room , the slide projector , and the overhead projector . The resulting composite schedule eliminated one of the possibilities . Hence , among the remaining two possibili - ties , White scheduled the meeting with the least disruptive two - hour time slot . How VS combines event priorities to form the composite schedule - its priori0 algo - rithm - is critical to its effectiveness as a scheduler . VS currently treats each event’s prior - ity as a percentage of transmitted light : A free time slot ( 0 - no shading ) transmits 100 % ; a low priority ( 1 - light grey shading ) event transmits 80 % ; . . . . a high priority ( 4 - dark grey shading ) event transmits only 20 % ; and a maximum priority ( 5 - black shading ) event transmits 0 % . Events are superimposed by multiplying the transmitted light per - centages . The priority algorithm can be expressed in mathematical form as : where xc is the composite priority of a time slot and xi is the priority of the same time slot corresponding to the i * calendar . All fractions are rounded off to the nearest integer . CSCW ‘90 Proceedings October 1990 284 Figul ‘e 2 : Dr . F : uchs , Dr . Brooks and their composite schedule S 5 . EVALUATION We argue that VS is noteworthy for several reasons : it is quicker and less error prone than manual methods ; its priority - based scheduling mechanism helps users perform flexible scheduling ; and finally , it is a useful groupwork tool . In this section , we evaluate VS to determine whether the above assertions are correct . First , a controlled experiment examines whether automatic scheduling using VS is supe - rior to manual scheduling . Then , a field study examines the effectiveness of the entire sys - tem in a real setting with users doing real work . 5 . 1 Experiment We wanted to determine if automatic visual scheduling is superior to manual scheduling in terms of total response time , error - free response time , and percent error . Preliminary tests indicated that considering priority when manually scheduling is slow and more error prone with an increasing number of participants . Therefore , for this experiment , all scheduling events were considered to have the same priority . People typically use text schedule descriptions , such as those found in a pocket calendar , rather than visual descriptions , when manually scheduling a meeting . We , therefore , com - pared visual scheduling with VS ( visual - automated ) to both manual scheduling with vi - sual representations of each participant’s schedule ( visual - manual ) , and manual scheduling with text representations ( text - manual ) . Figure 3 shows a sample schedule in text - manual form . In both visual - scheduling and manual - scheduling , a trial was started with subjects being given a list of four to seven meeting participants . With visual - manual scheduling , the 4” X 4” ( VS ) schedules were printed on separate sheets of paper and spread out in front of the users for simultaneous viewing ( see Figure 2 ) . With text - manual scheduling , the sched - ules of all participants were typed on the same sheet of paper ( see Figure 3 ) . The subjects had a Sun 3 / 180 in front of them for doing the scheduling tasks with VS . CSCW ‘90 Proceedings October 1990 285 Participant # l : Mon . I & 11 : 30 , l - 2 , 3 - 4 Tue . 9 : 30 - l 1 , 11 : 30 - 3 : 30 Wed . 8 - 12 : 30 , 1 - 2 , 3 : 30 - S , 5 : 30 - 6 Thu . 9 : 30 - 11 , 11 : 30 - 3 : 30 , 5 : 30 - 6 Fri . g - 12 : 30 , l - 2 , 3 - 4 Figure 3 : Sample schedule in text - manual form The entire experiment was conducted in a room with controlled light and isolated from ex - ternal noise . A large table placed in front of the subject contained the Sun3 / 180 and suffi - cient additional room for the visual - manual and text - manual scheduling tasks . A stop watch was used to time all events . For all three scheduling methods , the subject was in - structed to indicate the mutually - available time - slots on a blank - schedule answer - sheet . A pilot study was conducted to debug the experimental procedure . Hypothesis : We predicted that visual - automated scheduling would have faster response - time ( total and error - free ) and would have lower percent error than both visual - manual and text - manual . Subjects : Six computer science graduate students , four males and two females , partici - pated in the experiment . Although computer science graduate students may seem inappro - priate for evaluating a tool to be used by general office staff , pilot evaluations suggest that the task of manually scheduling meetings without errors is difficult for anyone , not just office workers . All subjects were familiar with the three scheduling methods . Procedure : Each subject was instructed to work as quickly as possible without making er - rors . They were told they could write anything they wished on the blank - schedule answer - sheet as long as they clearly indicated the mutually available time slots for the meeting participants . Design : The experiment was designed as a one - way repeated measures analysis of variants with the three scheduling methods . For each method , each subject scheduled six meetings and the average score was recorded . Each of a subject’s 18 meeting - scheduling trials used a different set of meeting participants . Each of these sets was scheduled once by each sub - ject , ordered ( Latin square ) to insure the sets of subjects did not affect the results . Separate analyses were conducted to determine the effect of a scheduling method on total response time , error - free response time , and percent correct . A meeting trial answer was graded in - correct if it had one or more mistakes . Resulb : All six subjects successfully completed the experiment . A statistical analysis of the recorded scores using the Newman - Keuls [ Wine621 procedure ( p = . Ol ) , revealed that : 1 ) visual - automated scheduling had faster total response time and resulted in fewer incorrectly scheduled meetings than both visual - manual and text - manual , which did not significantly differ from each other , and 2 ) visual - automated scheduling had faster error - free response time than both visual - manual and text - manual , and visual - manual was faster than text - manual . With the visual and text manual tasks , four of the subjects independently developed the following “complement” algorithm to schedule meetings : first the subjects systematically marked the unavailable times for each participant on the blank - schedule answer - sheet . They then circled or otherwise indicated the mutually available time slots . All subjects conceded that manual scheduling was quite difficult . Subjects 5 and 6 developed an interesting procedure for visual - manual scheduling , appar - ently based on their exposure to VS . Both subjects realized that the time - consuming and error - prone aspects of the visual - manual task was transferring each participant’s schedule CSCW ‘90 Proceedings October 1990 286 to the blank schedule . For each participant’s schedule , they superimposed the blank - sched - ule on top of the participant’s schedule , held the combination up to the light , and marked the unavailable time slots on the answer - sheet where corresponding events showed through . Finally , they circled the available time slots . After examining individual subjects’ scores , we concluded that the visual - manual schedul - ing had shorter error - free response time than the text - manual scheduling , largely due to the unexpected method used by subjects 5 and 6 . We believe these experimental results can be extrapolated to larger meetings and provide the following arguments : Analyzing the “complement algorithm” used by most subjects indicates that they would take more time to schedule meetings using manual - scheduling methods with increasing number of participants . On the other hand , we may expect sub - jects using visual - automated scheduling to take less time with increasing number of par - ticipants because more participants would , on average , have fewer mutually available time slots . 5 . 2 Field Study While controlled experiments can produce clear , detailed answers to narrow , precise ques - tions , field studies can consider the entire system in a real setting with users doing real work . The purpose of the study was to examine how VS was used and to evaluate if VS was a useful groupwork tool . We focused on scheduling activities by small research teams over a period of six weeks at the UNC - CH Computer Science Department . Over 15 peo - ple used VS to schedule meetings during this period . Interviews , a focus group , and lim - ited user observation were used to gather data . Data Collection : The primary method for gathering data was the interview . After VS had been in the field for four weeks , an announcement was made asking users to meet with the authors and discuss their scheduling experiences . The pwpose of the interview was to develop answers to several questions : first , what sort of meetings were scheduled ? Were they standing or one - time meetings and how many participants were to attend ? Second , did visually - represented priority helped locate meeting times ? Third , what method did schedulers use to locate an acceptable meeting time and in particular , how often did they look behind the results of VS to determine which participants were blocking a time slot with what events ? Finally , we asked whether VS was useful , that is , did it help them in their work and would they continue to use it ? We observed several users to verify the re - sults of the interviews . After finishing the individual interviews , we conducted a focus group . A focus group is a meeting designed to spawn discussion . While we asked similar questions as in the inter - views , we focused on finding features that could be added to make VS a more useful tool . Results : Typical scheduling tasks ranged from scheduling a student project meeting in - volving three participants , to trying to locate a time when all the graduate students could meet and discuss an important issue , to locating standing - meeting times for a large re - search group . For many of these scheduling sessions , there were no mutually open time slots available . Schedulers reported that the event priority rating was particularly helpful in locating mutually acceptable time slots . In general , users reported scheduling meetings as follows : first , they would generate a composite schedule of all meeting participants who had on - line schedules . Often , there would be no mutually open time - slots . Then they would focus on the light grey time slots displayed on the composite schedule . They asked questions such as : “Who was blocking a possible time slot ? Did that participant have to be at the meeting ? What was the blocking person doing during the time slot in question ? Could the blocking event be moved or skipped ? Did the blocking person overrate the priority of a blocking event ? ” CSCW ‘90 Proceedings October 1990 287 When one or two possible meeting times were located , they would send electronic mail to all the participants asking whether the time slot choices were acceptable . Schedulers reported that the system helped them schedule meetings and would continue to do so after the field evaluation period . They particularly appreciated being able to see not only the open time slots , but also other possibly open time slots , represented by various grey levels , and second , being able to look behind the automatically generated results to determine which meeting participants had events when and at what priority . Since the Fall of 1987 , research groups have been using VS to schedule their group meetings . In addi - tion to entering their standing schedules at the beginning of each semester , the group members use it on a weekly basis to enter their engagements for the upcoming week . Despite finding VS generally useful , users reported several limitations of VS . First , the word “priority” has two possible meanings : How imporrant an event is and how hard it is to move it . A meeting between a student and his faculty advisor is very important , but can often be moved . On the other hand , a lower priority meeting between six faculty members may not be crucial , but would be very difficult to reschedule . The scheduler needs to know how much trouble it would be to move an event . To this end , we tried us - ing the label “movability” instead of “priority . ” Despite this , users often rated an event by its importance , rather than its movability . Second , the current algorithm used by VS to combine event priorities produces too dark a time slot when combining several low priority , highly movable events . We expect an al - gorithm which is more a function of the maximum priority and less a function of the to - tal number of participants would be superior . Third , users often rated the priority of an event too highly . For example , a few students wanted to assign attending classes a low priority but were uncomfortable since others ( e . g . a class professor ) could view their schedules . Therefore , they ended up assigning a much higher priority to an event than they wanted to . This seemed to increase the number of occasions when schedulers had to look behind a composite time slot to see who had events when . Fourth , while schedulers could point to a time slot on a composite schedule and see a list of the users blocking the tune slot , they reported that they also would like to know the title and priority of each event blocking a time slot . One scheduler went to the trouble of displaying the calendar of each blocking participant to help in determining whether that time slot could be made available . Finally , all the users stated that they want VS to be integrated within their desktop envi - ronment ; VS is implemented within Smalltalk , which requires a separate environment . Since it takes time to switch between their standard desktop environment ( X windows ) and Smalltalk , many users use VS to enter their standing schedule and to schedule meet - ings but not as their only calendar . With a new version of VS now been written in C + + using X windows , we believe users will more often maintain their current calendar on - line . Users also suggested that future versions be integrated with electronic mail , elec - tronic news , and any on - line personal information system in use as discussed in [ Malo87 ] . 6 . CONCLUSIONS Despite the limitations in the original implementation of VS , the fact that more than 75 individuals at UNC - CH Computer Science Department continue to use the system since Fall 1987 is proof that the concept of a priority - based , grey - box visual scheduler is more effective than manual scheduling . Both the results of the controlled experiment and the field evaluation showed VS to be quicker and more reliable than manual scheduling . Further , VS appears to be a strong alternative to typical computer - based schedulers be - cause of the flexibility priority - based calendars provide in scheduling meetings and be - cause users feel they can look behind the automatically - generated results , understand bow the scheduling decisions are made , and locate possible alternate times . CSCW ‘90 Proceedings October 1990 288 Based on the field study and on user feedback , we have identified a number of features that we believe are crucial for an on - line calendar scheduling system . Fist , a calendar is a necessary tool for most office workers and should be readily accessi - ble from within the worker’s desktop environment . Features of the scheduling system should provide sufficient motivation for a user to maintain an up - to - date on - line calendar . Examples of such features include a visual representation and direct manipulation of one’s engagements and a propagation of repetitive events . The system should be built on a net - worked or central file system for easy access to individuals’ schedules . Further , as more office workers use portable computers as their “pocket” offices , an on - line calendar can begin to resemble a pocket calendar . Obviously , the schedule in the portable computer would have to be synchronized periodically with the community accessible version for group scheduling to still be effective . Second , a grey box automatic scheduler resembles manual scheduling more closely than a black box automatic scheduler and therefore allows more flexible and reliable scheduling . Observations of individuals scheduling meetings indicate that it is useful to be able to ex - amine why a time slot is unsuitable . The system should provide features to aid in this ef - fort : first . for a given time slot , the ability to quickly display the individuals’ names and their engagements with associated priorities ; and second , the ability to quickly display a participant’s schedule . Third , the system should be integrated with related on - line personal information systems such as electronic mail and should be allowed to create tentative events on users’ calen - dars . Once someone has used the system to schedule a meeting , the system should auto - matically generate mail to alert the participants . If all the participants agree to the meet - ing , then the system should commit the transaction by making the tentative events per - manent . If one or more participants object , it should report the cause of the problem to the scheduler . Fourth , the system should provide integration with database function . For example , one should be able to find the next “office” birthday , assuming that all office workers update their birthdays on their calendars . Another example might be to find the average number of hours per week faculty spend in meetings each semester . 7 . ACKNOWLEDGEMENTS We thank Professors James Coggins and Frederick Brooks for their assistance in develop - ing the prototype , for the support of the faculty , staff , and students of UNC - CH Computer Science Department in its evaluation , Nicole Yankelovich , Karen Catlin , and Professors Marilyn Mantei and Kathy Spoehr for their valuable critique of this paper . We also thank Helen DeAndrade for her help in preparing the final revision of the paper . The present addresses of the authors not currently at UNC - CH are : 1 ) Murugappan Palaniappan , IRIS , Brown University , Box 1946 , Providence , RI 02912 , 2 ) Anil Nair , Quintus Computer Systems , 1310 , Villa St . , Mountain View , CA 94040 , and 3 ) Alan Humm , University of Pennsylvania . 4 ) Yen - Ping Shan , IBM Cary , P . O . Box 60000 , Cary , NC 27512 - 9968 . 8 . REFERENCES [ Cimr83 ] Cimral , J . J . , “Integrating coordination support into automated information systems , ” Master’s thesis , Dept . of Electrical Engineering and Computer Science , Massachusetts Institute of Technology , Cambridge , May 1983 . lEhlr871 Ehlrich S - F . , “Strategies for Encouraging Successful Adoption of Office Communication Research , “ACM Transactions on Office Information Systems , Vol . 5 , No . 4 , Oct . 1987 , 340 - 357 . CSCW ‘90 Proceedings October 1990 289 [ G & u393 [ Gold801 [ Grud881 [ Jonk67 ] [ Kell82 ] CKinc851 [ LehnW Gianatasio , D . , Utility finds free times , places for meetings , Digital Review , Vol . 6 , No . 1 , Jan . 9 , 1989 , 26 ( 1 ) . Goldberg , A . , “Smalltalk - 80 : The Interactive Programming Environment , ” Addison - Wesley Publishing Company , 1980 . Grudin J . , “Why groupware applications fail : problems in design and evalua - tion , ” CSCW 88 Proceedings , Portland , OR , Sep . 1988 . The Jonker Ir $ ormation Systems Manual , Jonker Corporation , Gaithersburg , MD , 1967 . Kelly , J . F . and Chapanis , A . , “How Professional Personnel Keep Their Calendars : Implications for Computerization , ” Journal of Occupational Psychology , 1982 , 55 , 241 - 256 . Kincade , C . M . , Dupont , P . B . , and Kaye , A . R . , “Electronic Calendars in the Office : An Assessment of User Needs and Current Technology , ” ACM Transactions on Oftice Information Systems , Vol . 3 , No . 1 , Jan . 1985 . Lehner , P . E . and Zirk , D . A . , “Cognitive Factors in User / Expert - System Interaction , ” Human Factors , 1987 , 29 ( l ) , 97 - 109 . [ MacK76 ] MacKenzie , R . A . , Time - Trap : How to get more done in less time , MacGraw - Hill , 1976 . [ Malo83 ] Malone , T . W . , “How People use Office Systems , ” ACM Transactions on Office Information Systems , Vol . 1 , No . 1 , Jan . 1983 , 99 - 112 . [ Malo87 ] Malone , T . W . , Grant , K . R . , Lai , K . Y . , Rao , R . , Rosenblitt , D . , “Semi Structured Messages are Surprisingly Useful for Computer - Supported Coordination , ” ACM Transactions on Office Information Systems , Vol . 5 , No . 2 , Apr . 1987 , 115 - 131 . [ SariSS ] Sarin , S . , and Greif , I . , “Computer - based real - time conferences , ” IEEE Computer , Vol . 18 , No . 10 , Oct . 1985 , 33 - 45 . [ Thorn881 Thompson , K . M . , WordPerfect Oflice desktop organizer includes e - mail , group scheduling , PC Magazine , Vol . 7 , No . 21 , Dee 13 , 1988 , 38 ( 1 ) . IUttiSO ] Utting , K . , “Data Dock : A New Style of Computing , ” IRIS TR90 - 2 , 1990 . Nine621 Winer , B . J . , Statistical Principles in Experimental Design , MacGraw - Hill , 2nd Edition , 1962 . [ Zade65 ] Zadeh , L . A . , “Fuzzy Sets , ” Information Control , Vol . 8 , 1965 , 338 - 353 . [ Zade73 ] Zadeh , L . A . , “Outline of a New Approach to the Analysis of Complex Systems and Decision - Making Approach , ” IEEE Transactions on Systems , Man , and Cybernetics , Vol . SME - 3 , No . 1 , Jan . 1973 , 28 - 45 . Permission to copy without fee all or part of this material is granted provided that the copies arc not made or distributed for direct commercial advantage , the ACM copyright notice and the tide of the publication and its date appear , and notice is given that copying is by permisssion of the Association for Computing Machinery . To copy otherwise , or to republish . requires a fee and / or specific permission 0 1990 ACM 089791 - 402 - 3 / 90 / 0010 / 0290 $ 1 . 50 CSCW ‘90 Proceedings October 1990 290