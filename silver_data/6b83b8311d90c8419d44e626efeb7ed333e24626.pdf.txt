Discrete Optimization A new approach for modeling and solving set packing problems Bahram Alidaee a , Gary Kochenberger b , * , Karen Lewis a , Mark Lewis c , Haibo Wang d a School of Business , University of Mississippi , United States b School of Business , University of Colorado at Denver , United States c School of Professional Studies , Missouri Western State University , United States d College of Business Administration , Texas A & M International University , United States Received 3 June 2004 ; accepted 28 December 2006 Available online 1 March 2007 Abstract In recent years the unconstrained quadratic binary program has emerged as a uniﬁed modeling and solution framework for a variety of combinatorial optimization problems . Experience reported in the literature with several problem classes has demonstrated that this uniﬁed approach works surprisingly well in terms of solution quality and computational times , often rivaling and sometimes surpassing special purpose methods . In this paper we report on the application of this uniﬁed framework to set packing problems with a variety of coeﬃcient distributions . Computational experience is reported illus - trating the attractiveness of the approach . In particular , our results highlight both the eﬀectiveness and robustness of our approach across a wide array of test problems . (cid:2) 2007 Elsevier B . V . All rights reserved . Keywords : Integer programming ; Combinatorial auctions ; Metaheuristics ; Set packing problem ; Unconstrained quadratic binary program 1 . Introduction The conventional wisdom in combinatorial opti - mization includes the notion that diﬃcult problems are best approached by tailoring solution methods for the problem at hand . Such problem - oriented methods are typically designed to exploit the speciﬁc structure of the problem , yielding a method that performs reasonably well for the intended problem but of limited usefulness in other problem domains . Set covering problems are solved by set covering heuristics , multiple knapsack problems are solved by multiple knapsack heuristics , and so forth . For the most part , this approach of tailoring the solution method to the problem has served the opti - mization community quite well over the years and will likely remain a key part of what is considered 0377 - 2217 / $ - see front matter (cid:2) 2007 Elsevier B . V . All rights reserved . doi : 10 . 1016 / j . ejor . 2006 . 12 . 068 * Corresponding author . E - mail addresses : Balidaee @ bus . olemiss . edu ( B . Alidaee ) , Gary . Kochenberger @ Cudenver . edu ( G . Kochenberger ) , Klewis @ bus . olemiss . edu ( K . Lewis ) , Mlewis14 @ Missouriwestern . edu ( M . Lewis ) , hwang @ tamiu . edu ( H . Wang ) . Available online at www . sciencedirect . com European Journal of Operational Research 186 ( 2008 ) 504 – 512 www . elsevier . com / locate / ejor ‘‘best practice’’ for some time . In recent years , however , this tenet of standard practice has been brought into question by work illustrating that many standard combinatorial problems can be com - petitively solved by ﬁrst recasting them into the common framework of the unconstrained quadratic binary program and solving the resulting instance of xQx . The purpose of this paper is to illustrate how easily and eﬀectively this uniﬁed approach can be applied to set packing problems . 1 . 1 . Problem statement Set packing problems ( SPP ) are important in the ﬁeld of combinatorial optimization due to their application potential and their computational chal - lenge . The standard formulation for SPP is : SPP : max X n j ¼ 1 w j x j s . t . X n j ¼ 1 a ij x j 6 1 for i ¼ 1 ; : : : ; m ; x binary where the a ij are 0 / 1 coeﬃcients and the w j are weights . Many important applications of SPP have been reported in the literature . The recent paper by Delorme et al . ( 2004 ) ( DG & R ) reports applica - tions in railway infrastructure design , ship schedul - ing , resource constrained project scheduling , and the ground holding problem . Applications in combi - natorial auctions , and forestry are reported by Pe - kec and Rothkopf ( 2003 ) and Ronnqvist ( 2003 ) , respectively . Other applications , particularly as part of larger models , are found throughout the litera - ture . An extensive survey of set packing and related models may be found in Vemuganti ( 1998 ) . Since SPP is known to be NP - hard , exact meth - ods generally cannot be relied upon to generate good solutions in a timely manner . In particular , the linear programming relaxation does not provide good bounds for these diﬃcult problems . Nonethe - less , considerable work has been devoted to improv - ing exact methods for SPP with innovations in branch & cut methods based on polyhedral facets as described in Padberg ( 1973 ) and the extensive work of Cornue´jols ( 2001 ) . Despite these advances in exact methods , however , SPP remains resistant to them and , in general , heuristic methods must be employed to obtain solutions . This is particularly true for problem instances with a large number of variables that are neither loosely , nor tightly constrained . Despite a clear need for heuristic methods , few papers exist in the literature describing heuristics for SPP . Lau and Goh ( 2002 ) describe an ‘‘iterative greedy’’ heuristic that is reported to work reason - ably well on very small problems but appears to be dominated by the simulated annealing method ( SAG ) of Guo et al . ( 2006 ) on problem instances larger than 100 variables and 100 rows . However , SAG degrades in performance as problem size grows , which is characteristic of simulated anneal - ing in many settings . The best published heuristics for SPP appear to be the GRASP methods given by DG & R ( Delorme et al . , 2004 ) . DG & R report very favorable perfor - mance on real problems from the railway industry and on diﬃcult random problems ranging up to size 2000 variables and 10 , 000 constraints . These meth - ods and the results DG & R report become a bench - mark and a basis of comparison for some of the computational work reported here . Moreover , we report on additional test problems with non - binary coeﬃcients derived from a variety of probability dis - tributions . For these problems , comparisons are made with the branch and cut method of CPLEX . The remainder of this paper is organized as follows : Section 2 describes the uniﬁed approach highlighted by a small example illustrating the re - formulation into xQx . Section 3 describes our tabu search approach to solving xQx , and Section 4 presents our computational results . We then conclude with some summary remarks . 2 . Uniﬁed framework The uniﬁed framework we employ is the uncon - strained quadratic binary program xQx , where x is a vector of n binary variables and Q is an n - by - n symmetric matrix of coeﬃcients . The idea of recasting a combinatorial problem into the form of an unconstrained quadratic binary program ( xQx ) was put forth many years ago by Hammer and Rudeanu ( 1968 ) and more recently by Hansen ( 1979 ) and Boros and Hammer ( 2002 ) . Nonetheless , very few applications appear in the literature prior to the recent papers such as Kochenberger et al . ( 2004 , 2005a , b ) , Lewis et al . ( 2005 ) and Alidaee et al . ( 2006 ) . The transformation from a classical B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 505 formulation to the uniﬁed xQx framework is accomplished by replacing constraints by quadratic infeasibility penalties . This reformulation , as illus - trated below , is particularly easy for SPP . Note that this uniﬁed framework is not tailored to problem speciﬁcs , that is , the framework is generally applica - ble to a wide range of problems . In addition , the problem size is relatively unaﬀected by the number of constraints , which is typically a major contribu - tor to problem complexity . For a more general dis - cussion and survey of many applications the reader is referred to Kochenberger et al . ( 2004 ) . 2 . 1 . Recasting into the form of xQx In general we refer to a penalty function , g ( x ) , as being a valid infeasibility penalty ( VIP ) if g ( x ) is zero when x is feasible and positive otherwise . The struc - ture of the constraints in SPP enables quadratic VIPs to be easily constructed for each constraint simply by summing all products of constraint vari - ables taken two at a time . To illustrate , consider the constraint x 1 þ x 2 þ x 3 6 1 : Such a constraint can be replaced by the quadratic penalty function P ð x 1 x 2 þ x 1 x 3 þ x 2 x 3 Þ ; where P is a positive scalar . Clearly this quadratic penalty function is a VIP since it is zero for feasible solutions and positive otherwise . Similarly , the gen - eral packing ( or GUB ) constraint X n j ¼ 1 x j 6 1 can be replaced by the penalty function P X n (cid:2) 1 i ¼ 1 x i X n j ¼ i þ 1 x j ! ; which is a VIP for the constraint at hand . By sub - tracting such penalty functions from the objective function of a maximization problem , we have a model in the general , uniﬁed form of xQx . This pro - cedure is illustrated by the following example : Example : weighted SPP ( Sandholm et al . , 2005 ) : Max 2 x 1 þ 2 x 2 þ 2 x 3 þ 2 x 4 þ 4 : 5 x 5 þ 3 x 6 s : t : x 1 þ x 3 6 1 x 1 þ x 2 6 1 x 2 þ x 3 þ x 4 6 1 x 3 þ x 4 6 1 x 4 þ x 5 6 1 x 5 þ x 6 6 1 : Applying the positive scalar penalty P = 2 M , the equivalent unconstrained problem is : Max 2 x 1 þ 2 x 2 þ 2 x 3 þ 2 x 4 þ 4 : 5 x 5 þ 3 x 6 (cid:2) 2 Mx 1 x 3 (cid:2) 2 Mx 1 x 2 (cid:2) 2 Mx 2 x 3 (cid:2) 2 Mx 2 x 4 (cid:2) 2 Mx 3 x 4 (cid:2) 2 Mx 4 x 5 (cid:2) 2 Mx 5 x 6 which can be re - written as : Max ð x 1 x 2 x 3 x 4 x 5 x 6 Þ 2 (cid:2) M (cid:2) M 0 0 0 (cid:2) M 2 (cid:2) M (cid:2) M 0 0 (cid:2) M (cid:2) M 2 (cid:2) M 0 0 0 (cid:2) M (cid:2) M 2 (cid:2) M 0 0 0 0 (cid:2) M 4 : 5 (cid:2) M 0 0 0 0 (cid:2) M 3 2 666666664 3 777777775 (cid:3) x 1 x 2 x 3 x 4 x 5 x 6 0 BBBBBBBB @ 1 CCCCCCCCA which is of the form Max x 0 Qx where Q , as shown above , is a square , symmetric matrix . All problem characteristics are embedded in the Q matrix . Solv - ing this quadratic binary program yields x 1 ¼ x 4 ¼ x 6 ¼ 1 ( all others equal zero ) for which the objective function is 7 . Before turning to some preliminary computa - tional experience , we conclude this section with some remarks about the procedure illustrated above : 1 . In the manner illustrated , any SPP problem can be re - cast into an equivalent instance of xQx . 2 . This reformulation is accomplished without the introduction of new variables . 3 . It is always possible to choose the scalar penalty suﬃciently large so that the solution to xQx is feasible for SPP . At optimality the two problems are equivalent in the sense that they have the same solution . 506 B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 4 . For ‘‘weighted’’ instances of SPP , the weights , w j , show up on the main diagonal of Q . 5 . Note that the size of the problem , Max x 0 Qx , is independent of the number of constraints , m . Thus a set packing problem with 100 variables and 100 constraints and another with 100 vari - ables and 500 constraints would each yield an equivalent unconstrained quadratic binary pro - gram with a Q matrix of size 100 - by - 100 . 3 . Solving xQx Employing the xQx uniﬁed framework to solve combinatorial problems requires the availability of a solution method for xQx . The recent literature reports major advances in such methods involving modern metaheuristic methodologies . The reader is referred to references Billionet and Sutter ( 1994 ) ; Alkhamis et al . ( 1998 ) ; Amini et al . ( 1999 ) ; Beasley ( 1998 ) ; Boros and Hammer ( 2002 ) ; Boros et al . ( 1989 ) ; Glover et al . ( 2002 ) ; Glover et al . ( 1999 ) ; Glover et al . ( 1998 ) ; Katayama et al . ( 2000 ) ; Lodi et al . ( 1999 ) ; Merz and Freisleben ( 1999 ) ; Palubeckis ( 1995 ) for a description of some of the more successful methods . The pursuit of fur - ther advances in solution methods for xQx remains an active research arena . In the work reported here , we used a basic tabu search method due to Glover et al . ( 1999 ) . A brief overview of the approach is given below . For com - plete details the reader is referred to the aforemen - tioned references . Our TS method for xQx is centered around the use of strategic oscillation , which constitutes one of the primary strategies of tabu search . The method alter - nates between constructive phases that progressively set variables to 1 ( whose steps we call ‘‘add moves’’ ) and destructive phases that progressively set variables to 0 ( whose steps we call ‘‘drops moves’’ ) . To control the underlying search process , we use a memory structure that is updated at critical events , identiﬁed by conditions that generate a subclass of locally optimal solutions . Solutions corresponding to critical events are called critical solutions . A parameter span is used to indicate the ampli - tude of oscillation about a critical event . We begin with span equal to 1 and gradually increase it to some limiting value . For each value of span , a series of alternating constructive and destructive phases is executed before progressing to the next value . At the limiting point , span is gradually decreased , allowing again for a series of alternating constructive and destructive phases . When span reaches a value of 1 , a complete span cycle has been completed and the next cycle is launched . The search process is typ - ically allowed to run for a pre - set number of span cycles . Information stored at critical events is used to inﬂuence the search process by penalizing poten - tially attractive add moves ( during a constructive phase ) and inducing drop moves ( during a destruc - tive phase ) associated with assignments of values to variables in recent critical solutions . Cumulative critical event information is used to introduce a sub - tle long term bias into the search process by means of additional penalties and inducements similar to those discussed above . Other standard elements of tabu search such as short and long term memory structures are also included . 4 . Computational experience In this section we present preliminary computa - tional experience illustrating the potential of our approach . We ﬁrst report on the random problems from DG & R where comparisons are made with the results they reported earlier . We next report in additional test problems with objective function coeﬃcients derived from diﬀerent distributions . Our motivation here comes from the paper by Ley - ton - Brown et al . ( 2000 ) which demonstrated that the computational burden of set packing problems in the context of combinatorial auctions varied tre - mendously with distribution . In all cases , compari - sons were also made with CPLEX in order to supply another benchmark . 4 . 1 . DG & R test problem The paper by Delorme et al . ( 2004 ) ( DG & R ) reports on 16 large , random SPP instances . For comparison , each of these problems was recast into the uniﬁed xQx form and solved by the tabu search method outlined above . A description of the prob - lems and the results we obtained are summarized in Table 1 . The ‘‘best known’’ values listed in the table , except for problem # 7 , were taken from the DG & R paper . The best result for problem # 7 was obtained by the testing we conducted using CPLEX on the set of test problems . These problems , as reported by DG & R , are gen - erally diﬃcult for exact methods relying on LP relaxations ( such as CPLEX ) . This behavior was B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 507 conﬁrmed by our testing . For example , after 42 hours on CPLEX version 8 . 1 , problem # 4 of Table 1 still had a 157 % optimality gap . CPLEX had dif - ﬁculty with most of the other problems as well , although it did prove that problem # 7 was optimal at a larger value than reported earlier by DG & R . The average amount of time for our CPLEX ( ver - sion 8 . 1 ) runs before memory limitations were reached was 38 hours ( on a hyper - threaded 2 . 4 GHz processor ) . Table 1 gives the size of the various problems along with their best known solutions and the solu - tions reported by DG & R . The table also gives our xQx results along the pre - set number of span cycles allowed . The 1000 variable problems were arbi - trarily run for 500 span cycles and the 2000 variable problems were run for 1000 span cycles . Runs with these span limits took approximately 2 minutes and 20 minutes , respectively on a 1 . 96 GHz pc . These run times , as indicated below , are much smaller that those reported by DG & R . In each case , the xQx solution value given in the table is the best solution found during the span cycles allowed . All 16 prob - lems were re - cast into the common framework of xQx using a penalty , M , equal to 999 . As shown in the table , our xQx approach was able to match the best known results for 13 of the 16 problems and produced results that were roughly 99 % of best known for the other 3 problems . Prob - lems 7 , 8 , and 15 , for which best known solutions were not found by our method , were diﬃcult for our heuristic . Subsequent runs allowing for addi - tional span cycles failed to yield improved solutions over those reported in the table . Nonetheless , for the entire test bed , the generic xQx approach pro - duced very high quality solutions very quickly . ( Less than 20 minutes for the largest problems . ) The paper by DG & R lists best known solutions for 15 of the 16 problems . The results they report in their paper are the best solutions obtained from several independent runs of various GRASP imple - mentations , with each run stopping after 260 GRASP iterations or 5 hours , which ever occurred ﬁrst . Thus , while the results reported by DG & R are of high quality , it appears that they took consid - erable computation time to produce—substantially longer than the xQx times . Note also that our tabu search heuristic that pro - duced the results shown in Table 1 was designed to solve the generic instance of xQx and , as such , was not tuned or in anyway specialized to take into account the nature ( structure ) of set packing prob - lems . In contrast to this , the GRASP procedures employed by DG & R were specially constructed for SPP . Moreover , they embodied a fairly sophisti - cated design utilizing path relinking for intensifying the search process and pre - processing procedures to reduce the size of various instances . Neither of these procedures are part of the basic tabu search method we used in this research . 4 . 2 . Additional test problems ( CATS ) Motivated by the work of Leyton - Brown et al . ( 2000 ) , we adopted the benchmark program CATS ( Leyton - Brown et al . , 2000 ) to generate additional Table 1 Test problem results ID n m Best known xQx sol xQx % Best known DG & R Sol DG & R % Best known 1 1000 5000 67 67 100 % 67 100 % 2 1000 5000 4 4 100 % 4 100 % 3 1000 5000 661 661 100 % 661 100 % 4 1000 5000 48 48 100 % 48 100 % 5 1000 1000 222 222 100 % 222 100 % 6 1000 1000 15 15 100 % 15 100 % 7 1000 1000 2260 2223 98 . 3 % 2255 99 . 7 % 8 1000 1000 175 174 99 . 4 % 175 100 % 9 2000 10 , 000 40 40 100 % 40 100 % 10 2000 10 , 000 2 2 100 % 2 100 % 11 2000 10 , 000 478 478 100 % 478 100 % 12 2000 10 , 000 32 32 100 % 32 100 % 13 2000 2000 140 140 100 % 140 100 % 14 2000 2000 9 9 100 % 9 100 % 15 2000 2000 1784 1773 99 . 3 % 1784 100 % 16 2000 2000 131 131 100 % 131 100 % 508 B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 test problems of diﬀering size with objective func - tion coeﬃcients derived from diﬀerent probability distributions . The Leyton - Brown study indicated that depending on the distribution used , some set packing problems used in the context of combinato - rial auctions were actually quite easy for exact meth - ods ( like CPLEX ) while others were very diﬃcult . Our intent here was to produce additional test prob - lems using distributions associated with diﬃcult instances in order to illustrate the uniformity and robustness of our xQx method across such problem sets . Following the CATS lead in terms of diﬃcult problems , the test problems used here were derived using uniform , binomial , and decay distributions with problem sizes varied from 1000 to 5000 vari - ables and 50 to 200 constraints . These problems are available author’s website . ( http : / / www . ta - miu . edu / ~ hwang / research / ) . Since the GRASP procedures employed by DG & R are not available to provide comparisons on these problems , we used the CPLEX 8 . 1 MIP solver as a benchmark with which to compare the performance of our xQx approach . CPLEX 8 . 1 , much improved over the 6 . 0 version used by DG & R , was able to terminate with optimal solu - tions on 33 out of 45 of the test problems within 10 hours of CPU time . Nine of the 45 problems were solved to optimality within a 40 hour time limit . For the other three , CPLEX terminated without proving optimality due to node count limits . The results are shown in Tables 2 and 3 . Note that the computa - tional times for CPLEX vary greatly from distribu - tion to distribution . Sandholm et al . ( 2005 ) reported similar ﬁndings for both the CABOB algorithm and CPLEX 8 . 0 for problems with uniform and decay distributions of moderate size . In this study , we solved much larger problems via the CPLEX 8 . 1 MIP solver utilizing the clique cut strategy instead of relying on the LP solver as an upper - bounding method . For the decay distribution , CPLEX 8 . 1 can solve large instances ( 5000 variables and 200 constraints ) within 10 seconds ( see Table 2 ) . How - ever , for uniform and binomial distributions , CPLEX 8 . 1 took hours sometimes days to solve the large instances . When compared with CPLEX 8 . 1 , xQx produced solutions consistently within 5 % from the optimal for all three distributions within 4 hours ( see Table 3 ) . For the decay distribu - tion , CPLEX 8 . 1 is more eﬃcient than xQx on all instances even though both approaches ﬁnd optimal solutions for all problems . For uniform and bino - mial distributions , xQx is more eﬃcient than CPLEX 8 . 1 , ﬁnding optimal solutions for small instances and eﬃciently ﬁnding high quality solu - tions ( perhaps optimal ) for the larger instances . Across the three categories ( distributions ) of problems , the performance of CPLEX is erratic . This is in sharp contrast to the uniform behavior of the xQx approach . This contrasting behavior is highlighted in Figs . 1 and 2 ( for CPLEX and xQx respectively . ) . As shown in Fig . 1 , there is no appar - ent correlation between number of variables and computational times across all distributions when Table 2 Test suites results with CPLEX 8 . 1 on uniform , binomial and decay distributions M n Uniform distribution Binomial distribution Decay distribution Solutions CPU time ( seconds ) Solutions CPU time ( seconds ) Solutions CPU time ( seconds ) 50 1000 15 , 426 647 . 57 37 , 404 600 . 68 492 , 024 0 . 28 50 2000 15 , 706 35 , 660 . 62 40 , 116 1500 . 18 497 , 712 0 . 68 50 3000 15 , 801 45 , 734 . 18 40 , 532 11 , 509 . 43 498 , 619 1 . 34 50 4000 15 , 827 50 , 842 . 7 42 , 225 13 , 429 . 83 498 , 892 3 . 39 50 5000 15 , 928 54 , 198 . 23 42 , 626 19 , 114 . 21 498 , 858 5 . 17 100 1000 29 , 580 552 . 24 49 , 679 230 . 11 969 , 984 0 . 61 100 2000 31 , 447 4755 . 52 50 , 457 1794 . 9 986 , 476 0 . 94 100 3000 31 , 910 35 , 100 . 94 55 , 735 12 , 067 . 88 992 , 604 2 . 29 100 4000 32 , 124 53 , 169 . 31 55 , 736 14 , 464 . 18 993 , 116 3 . 15 100 5000 32 , 334 56 , 956 . 98 55 , 827 18 , 021 . 36 995 , 320 4 . 44 40 5000 12 , 924 43 , 434 . 25 38 , 309 11 , 529 . 33 399 , 595 3 . 71 80 5000 25 , 631 84 , 449 . 9 53 , 756 17 , 827 . 72 797 , 671 4 . 32 120 5000 38 , 832 111 , 525 . 89 61 , 422 17 , 549 . 05 1 , 193 , 585 5 . 19 160 5000 51 , 325 101 , 296 . 39 66 , 579 110 , 683 . 62 * 1 , 588 , 612 5 . 78 200 5000 63 , 173 199 , 133 . 19 * 75 , 770 114 , 069 . 4 * 197 , 535 6 . 3 * Terminated without ﬁnding optimal solution . B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 509 the test instances are solved by CPLEX 8 . 1 . How - ever , in Fig . 2 , there is a positive correlation between number of variables and computational times across all three distributions . 5 . Summary and conclusions In this paper we have demonstrated that the xQx construct can be successfully used to model and solve set packing problems . The results of our preli - minary testing are very competitive with a very good ( perhaps the best ) special purpose method for solv - ing SPP . Our results also compare favorably with those obtained from CPLEX applied to the classical linear 0 / 1 model for SPP . As such , we have demon - strated that xQx can serve as an alternative model - ing approach for set packing problems from which high quality solutions can be quickly computed Computational Time vs Number of Variables ( m = 50 ) 0 100002000030000400005000060000 1000 2000 3000 4000 5000 Number of Variables C o m pu t a t i on a l T i m e ( s ) UniformBinomialDecay Computational Time vs Number of Variables ( m = 100 ) 0 100002000030000400005000060000 1000 2000 3000 4000 5000 Number of Variables C o m pu t a t i on a l T i m e ( s ) UniformBinomialDecay UniformBinomialDecay Computational Time vs Number of Constraints ( n = 5000 ) 0 50000 100000 150000 200000 250000 40 80 120160200 Number of Constraints C o m pu t a t i on a l T i m e ( s ) Fig . 1 . CPLEX 8 . 1 computational results on uniform , binomial and decay distributions . Computational Time vs Number of Variables ( m = 50 ) 0 2000400060008000100001200014000 1000 2000 3000 4000 5000 Number of Variables C o m pu t a t i on a l T i m e ( s ) UniformBinomialDecay Computational Time vs Number of Variables ( m = 100 ) 0 200040006000800010000 1000 2000 3000 4000 5000 Number of Variables C o m p u t a t i on a l T i m e ( s ) UniformBinomialDecay UniformBinomialDecay Computational Time vs Number of Constraints ( n = 5000 ) 0 200040006000 80001000012000 40 80 120 160 200 Number of Constraints C o m pu t a t i on a l T i m e ( s ) Fig . 2 . xQx computational results on uniform , binomial and decay distributions . Table 3 Test suites results with xQx on uniform , binomial and decay distributions M n Uniform distribution Binomial distribution Decay distribution Solutions CPU time ( seconds ) Solutions CPU time ( seconds ) Solutions CPU time ( seconds ) 50 1000 15 , 426 567 37 , 404 454 492 , 024 588 50 2000 15 , 706 1791 40 , 116 1491 497 , 712 1721 50 3000 15 , 801 3720 40 , 501 3163 498 , 619 3578 50 4000 15 , 816 5969 42 , 211 5586 498 , 892 5763 50 5000 15 , 903 11 , 629 42 , 597 8491 498 , 858 8663 100 1000 29 , 580 768 49 , 679 484 969 , 984 749 100 2000 31 , 447 2269 50 , 457 1456 986 , 476 2038 100 3000 31 , 910 4537 55 , 721 3106 992 , 604 2057 100 4000 32 , 124 6469 55 , 714 5342 993 , 116 6253 100 5000 32 , 334 9057 55 , 805 8176 995 , 320 9250 40 5000 12 , 924 9210 38 , 309 8015 399 , 595 8616 80 5000 25 , 617 9008 53 , 748 8142 797 , 671 8968 120 5000 38 , 832 9537 61 , 403 8322 1 , 193 , 585 9563 160 5000 51 , 325 9297 66 , 549 9273 1 , 588 , 612 10 , 200 200 5000 63 , 164 9524 75 , 732 9571 197 , 535 10 , 788 510 B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 via methods designed for the generic xQx instance as contrasted with methods specially crafted to take advantage of the structure of SPP . The uniformity and eﬃciency of performance of our modeling and solution approach , across problems of diﬀering size and characteristics , is particularly noteworthy . We note that similar success with this approach of using xQx as an alternative modeling and solu - tion framework has been reported in Kochenberger et al . ( 2004 ) for a variety of other problem classes . As research continues to provide improved methods for solving xQx , this uniﬁed approach will become more and more attractive as an alternative to classi - cal models and their special purpose solution methods . Acknowledgements The authors wish to thank Xavier Delorme , Xa - vier Gandibleux , and Joaquin Rodiguez for making their test problems available for us and other researchers to use . We would also like to acknowl - edge the contributions of Gyung Yung to the early stages of this work . Finally , we would like to thank Fred Glover for his feedback on an earlier version of this paper . References Alidaee , B . , Glover , F . , Kochenberger , G . , Wang , H . , 2006 . Solving the Maximum Edge Weight Clique Problem via Unconstrained Quadratic Programming , Working paper , University of Colorado at Denver . Alkhamis , T . M . , Hasan , M . , Ahmed , M . A . , 1998 . Simulated annealing for the unconstrained quadratic pseudo - Boolean function . European Journal of Operational Research 108 , 641 – 652 . Amini , M . , Alidaee , B . , Kochenberger , G . A . , 1999 . Scatter search approach to unconstrained quadratic binary programs . In : Corne , D . , Glover , F . ( Eds . ) , New Methods in Optimization . McGraw - Hill , pp . 317 – 330 . Beasley , E . , 1998 . Heuristic Algorithms for the Unconstrained Binary Quadratic Programming Problem , Working Paper . Billionet , A . , Sutter , A . , 1994 . Minimization of a quadratic pseudo - Boolean function . European Journal of Operational Research 78 , 106 – 115 . Boros , E . , Hammer , P . , 2002 . Pseudo - Boolean optimization . Discrete Applied Mathematics 123 ( 1 - 3 ) , 155 – 225 . Boros , E . , Hammer , P . , Sun , X . , 1989 . The DDT Method for Quadratic 0 – 1 Minimization RUTCOR Research Center , RRR 39 - 89 . Cornue´jols , G . , 2001 . Combinatorial Optimization : Packing and Covering , CBMS - NSF . Delorme , X . , Gandibleau , X . , Rodriques , J . , 2004 . GRASP for set packing . European Journal of Operational Research 153 , 564 – 580 . Glover , F . , Kochenberger , G . A . , Alidaee , B . , 1998 . Adaptive memory tabu search for binary quadratic programs . Man - agement Science 44 , 336 . Glover , F . , Kochenberger , G . , Alidaee , B . , Amini , M . , 1999 . Tabu search with critical event memory : An enhanced application for binary quadratic programs in meta - heuristics . In : Voss , S . , Mortello , S . , Osman , I . , Roucairol , C . ( Eds . ) , Advances and Trends in Local Search Paradigms for Opti - mization . Kluwer , pp . 93 – 109 . Glover , F . , Alidaee , B . , Rego , C . , Kochenberger , G . , 2002 . One - pass heuristics for large - scale unconstrained binary quadratic problems . European Journal of Operational Research 137 , 272 – 287 . Guo , Y . , Lim , A . , Rodrigues , B . , Zhu , Y . , 2006 . Heuristics for a bidding problem . Computers & Operations Research 33 , 2179 – 2188 . Hammer , P . , Rudeanu , S . , 1968 . Boolean Methods in Operations Research . Springer - Verlag , New York . Hansen , P . B . , 1979 . Methods of nonlinear 0 – 1 programming . Annals Discrete Mathematics 5 , 53 – 70 . Katayama , K . , Tani , M . , Narihisa , H . , 2000 . Solving large binary quadratic programming problems by an eﬀective genetic local search algorithm . In : Proceedings of the Genetic and Evolu - tionary Computation Conference ( GECCO’00 ) , Morgan Kaufmann . Kochenberger , G . , Glover , F . , Alidaee , B . , Rego , C . A . , 2004 . Uniﬁed modeling and solution framework for combinatorial optimization problems . Operations Research Spectrum 26 , 237 – 250 . Kochenberger , G . , Glover , F . , Alidaee , B . , Lewis , K . , 2005a . Using the unconstrained quadratic program to model and solve Max 2 - Sat problems . International Journal of Opera - tional Research 1 , 89 – 100 . Kochenberger , G . , Glover , F . , Alidaee , B . , Rego , C . , 2005b . An unconstrained quadratic binary programming approach to the vertex coloring problem . Annals of OR 139 , 229 – 241 . Lau , H . , Goh , Y . , 2002 . An intelligent brokering system to support multi - agent web - based 4th party logistics . In : Pro - ceedings of the 14th International Conference on Tools with AI , pp . 10 – 11 . Lewis , M . , Alidaee , B . , Kochenberger , G . , 2005 . Using xQx to model and solve the uncapacitated task allocation problem . OR Letters 33 , 176 – 182 . Leyton - Brown , K . , Pearson , M . , Shoham , Y . , 2000 . Towards a Universal Test Suite for Combinatorial Auction Algorithms , In : ACM conference on electronic commerce . Lodi , A . , Allemand , K . , Liebling , T . , 1999 . An evolutionary heuristic for quadratic 0 - 1 programming . European Journal of Operational Research 119 , 662 – 670 . Merz , P . , Freisleben , B . , 1999 . Genetic algorithms for binary quadratic programming . In : Proceedings of the 1999 Inter - national Genetic and Evolutionary Computation Conference ( GECCO’99 ) , pp . 417 – 424 . Padberg , M . , 1973 . On the facial structure of set packing polyhedra . Mathematical Programming 5 , 199 – 215 . B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512 511 Palubeckis , G . A . , 1995 . Heuristic - branch and bound algorithm for the unconstrained quadratic zero - one programming problem . Computing , 284 – 301 . Pekec , A . , Rothkopf , M . , 2003 . Combinatorial auction design . Management Science 49 , 1485 – 1503 . Ronnqvist , M . , 2003 . Optimization in forestry . Mathematical Programming , Series B 97 , 267 – 284 . Sandholm , T . , Suri , S . , Gilpin , A . , Levine , D . , 2005 . CABOB : A fast optimal algorithm for winner determination in combina - torial auctions . Management Science 51 , 374 . Vemuganti , R . , 1998 . Applications of set covering , set packing and set partitioning models : A survey . In : Zhu , D . , Pardalos , P . ( Eds . ) , Handbook of Combinatorial Optimization . Kluwer Academic Publishers . 512 B . Alidaee et al . / European Journal of Operational Research 186 ( 2008 ) 504 – 512