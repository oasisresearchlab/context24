COLLABORATION ENGINEERING WITH THINKLETS 31 Journal of Management Information Systems / Spring 2003 , Vol . 19 , No . 4 , pp . 31 – 64 . © 2003 M . E . Sharpe , Inc . 0742 – 1222 / 2003 $ 9 . 50 + 0 . 00 . Collaboration Engineering with ThinkLets to Pursue Sustained Success with Group Support Systems ROBERT O . BRIGGS , GERT - JAN DE VREEDE , AND JAY F . NUNAMAKER JR . R OBERT O . B RIGGS is Research Coordinator at the Center for the Management of Information at the University of Arizona and Associate Professor of Collaboration Engineering at Delft University of Technology in the Netherlands . He is also Director of Research and Development for GroupSystems . com . As a researcher , he has pub - lished more than 60 scholarly works on the theoretical foundations of collaboration , and he applies his findings to the development and deployment of collaborative tech - nology to enhance team productivity , team creativity , and team satisfaction . His work on organizational transition to collaborative technology led to new insights about how to conceive of and deploy group support systems so as to create self - sustaining and growing communities of users . He received his Ph . D . from University of Arizona in 1994 . G ERT - J AN DE V REEDE is a Professor at the Department of Information Systems & Quantitative Analysis at the University of Nebraska at Omaha where he is director of the Peter Kiewit Institute’s Program on E - Collaboration . He is also affiliated with the Faculty of Technology , Policy , and Management of Delft University of Technology in the Netherlands , from where he received his Ph . D . His research focuses on the appli - cation , adoption , and diffusion of collaboration technology in organizations , the de - velopment of repeatable collaborative processes , facilitation of group meetings , and the application of collaboration technology in different sociocultural environments . His articles have appeared in various journals , including Journal of Management In - formation Systems , Journal of Decision Systems , Communications of the ACM , Jour - nal of Creativity and Innovation Management , DataBase , Group Decision and Negotiation , and Journal of Simulation Practice and Theory . J AY F . N UNAMAKER J R . is Regents and Soldwedel Professor of MIS , Computer Sci - ence and Communication and Director of the Center for the Management of Informa - tion at the University of Arizona , Tucson . He has over 40 years of experience in examining , analyzing , designing , testing , evaluating , and developing information sys - tems . He has served as a test engineer at the Shippingport Atomic Power facility , as a member of the ISDOS team at the University of Michigan and as a member of the faculty at Purdue University , prior to joining the faculty at the University of Arizona in 1974 . His research on group support systems addresses behavioral as well as engi - neering issues and focuses on theory as well as implementation . Dr . Nunamaker re - ceived his Ph . D . in systems engineering and operations research from Case Institute of Technology , an M . S . and B . S . in engineering from the University of Pittsburgh , and a B . S . from Carnegie Mellon University . He has been a registered professional engineer since 1965 . 32 BRIGGS , DE VREEDE , AND NUNAMAKER A BSTRACT : Field research and laboratory experiments suggest that , under certain cir - cumstances , people using group support systems ( GSS ) can be significantly more productive than people who do not use them . Yet , despite their demonstrated poten - tial , GSS have been slow to diffuse across organizations . Drawing on the Technology Transition Model , the paper argues that the high conceptual load of GSS ( i . e . , under - standing of the intended effect of GSS functionality ) encourages organizations to employ expert facilitators to wield the technology on behalf of others . Economic and political factors mitigate against facilitators remaining long term in GSS facilities that focus on supporting nonroutine , ad hoc projects . This especially hampers scaling GSS technology to support distributed collaboration . An alternative and sustainable way for organizations to derive value from GSS lies in an approach called “collabora - tion engineering” : the development of repeatable collaborative processes that are con - ducted by practitioners themselves . To enable the development of such processes , this paper proposes the thinkLet concept , a codified packet of facilitation skill that can be applied by practitioners to achieve predictable , repeatable patterns of collabo - ration , such as divergence or convergence . A thinkLet specifies the facilitator’s choices and actions in terms of the GSS tool used , the configuration of this tool , and scripted prompts to accomplish a pattern of collaboration in a group . Using thinkLets as building blocks , facilitators can develop and transfer repeatable collaborative processes to prac - titioners . Given the limited availability of expert facilitators , collaboration engineer - ing with thinkLets may become a sine qua non for organizations to effectively support virtual work teams . K EY WORDS AND PHRASES : collaboration engineering , collaboration technology , group support systems , technology acceptance model ( TAM ) , technology adoption , tech - nology transfer , technology transition model ( TTM ) , thinkLets . P UBLISHED STUDIES FROM THE LABORATORY and from the field have shown that group support systems ( GSS ) have the potential to provide great benefit to teams and orga - nizations . Yet that potential has not been realized with widespread diffusion of GSS into the workplace . A GSS is a suite of collaborative software tools that can be used to focus and struc - ture a team’s deliberation while reducing cognitive costs of communication and infor - mation access and minimizing distraction among teams working collaboratively toward a goal [ 12 ] . 1 GSS software runs on a network of computers , typically with a separate workstation for each team member . In most GSS tools , all participants have their own cursors in , and can contribute simultaneously to the same shared objects ( e . g . , a shared list or shared outlines ) . The contributions of any one user are immediately visible on the screens of other users . GSS tools are designed to influence the patterns of group interaction in a variety of useful ways that are elaborated later in the paper . There is robust empirical support for the benefits of GSS . An analysis of 54 GSS field studies shows that in 86 . 5 percent of the cases , the organizations and organiza - tional groups using GSS reported GSS to improve performance [ 23 ] . This is in line with earlier overviews of GSS field studies ( see , e . g . , [ 14 , 16 , 41 ] ) . Likewise , labora - COLLABORATION ENGINEERING WITH THINKLETS 33 tory research suggests that , under certain circumstances , GSSs offer substantial po - tential for increased team productivity ( see [ 15 , 22 ] for a compendia of experimental GSS research ; see [ 7 , 13 , 19 , 25 , 26 , 29 , 50 ] for specific examples ) . A typical cost to establish a permanent GSS facility for 15 people , including hard - ware , software , facility remodeling ( lighting , cooling , etc . ) and furniture is approxi - mately $ 150 , 000 . A portable system of networked laptop computers might cost half that amount . Staffing such a facility typically costs $ 100 , 000 – $ 150 , 000 per year . We recently surveyed 400 organizations with current maintenance agreements for GSS software , and received 153 responses . The survey respondents reported an average annual financial benefit derived from their GSS facilities of $ 1 . 73 million . A recently published case study comparing the in situ use of a GSS in four organizations , reported consistent productivity gains ( ranging from 50 to 71 percent person hours savings , and 33 to 92 percent calendar time savings ) and high levels of satisfaction use [ 57 ] . Given the demonstrated potential of GSS , it is interesting to consider why GSSs have not diffused more widely in the workplace . If the GSS business case is as strong as field evidence suggests , one might expect to find GSS facilities in every company , and yet this is not the case . Moreover , field observations at dozens of government , military , and industry sites reveal that GSS facilities often establish a small beach - head in an organization , but then do not diffuse beyond the initial installation . It also frequently happens that , after several years of active , sustained , and documented suc - cess , GSS facilities are abandoned by an organization . Organizations that the authors investigated where this occurred include the Indian Health Service [ 30 ] ; Boeing ; the World Bank ; DC Public Schools ; Palo Verde High School in Tucson , Arizona ; the Acquisition Center of Excellence ( ACE ) ; and the Vereniging Nederlandse Gemeenten ( representative organization of Dutch Municipalities ) . Some of these organizations , and others like them , have since established new , successful GSS facilities . Others have not . There are both academic and practical dimensions to the question of why GSS does not diffuse rapidly and widely . From an academic perspective , it is interesting to know why positive research findings do not translate into technology transfer . Little is known about adoption and diffusion of GSS [ 40 ] . From a practical perspective , it is useful to find out why the potential benefits of GSS are not reaped and what can be done to increase chances that this will happen . Especially given that organizational work is increasingly executed in virtual teams that require GSS and other groupware tools to collaborate [ 40 ] , it is important to understand what may make collaboration technology transfer successfully ( or unsuccessfully ) to every organizational mem - bers’ desk . This paper proposes an explanation for the slow diffusion of GSS technol - ogy , and suggests an approach for creating self - sustaining and growing use of GSS in ways that create substantial value for organizations . To this end , we must understand and answer the following research questions : (cid:149) What are the underlying mechanisms of GSS acceptance , adoption , and use ? (cid:149) Why do organizations cease to use GSS facilities that produce measurable eco - nomic benefits ? 34 BRIGGS , DE VREEDE , AND NUNAMAKER (cid:149) How can we leverage this knowledge to assist organizations in averting the aban - donment of GSS facilities that produce measurable economic benefit ? This paper reasons from the literature and from ( reported ) field experiences to ad - dresses these questions . Based on technology transition theories , it proposes several mechanisms underlying GSS technology use and acceptance that help us to explain why , in many cases , GSS transition may follow a slow and faltering pattern . The paper is structured as follows . The next section will discuss an number of rel - evant technology transition theories that provide insight into GSS transfer in the field . Rooted in Davis’s [ 9 ] Technology Acceptance Model ( TAM ) and Rogers’s [ 45 ] Dif - fusion of Innovations Theory , the paper presents the Technology Transition Model ( TTM ) . Using TTM , the next section argues why GSS facilities are self - extinguish - ing . Based on this argumentation , a number of guidelines and requirements for creat - ing self - sustaining GSS facilities are presented in the fourth section . Here we introduce the thinkLets concept and argue how this can be used as building blocks for repeat - able collaboration processes in organizations . The paper ends with a summary of the main arguments presented , a discussion of the implications on research and practice , a description of the limitations of this research , and an outline of directions for future research . GSS Technology Transition T HEORIES ON TECHNOLOGY TRANSITION AND DIFFUSION may provide answers to the question why GSS technology diffusion is slow . Technology transition has been the subject of much research . The information systems ( IS ) literature shows various theories and models about how individuals , groups , and organizations embrace new informa - tion technology into their workplace . Some of these theories describe transition pro - cesses and mechanisms ( e . g . , Rogers’s [ 45 ] stage model of innovations in organizations ) , whereas others define causality among factors to predict successful transition of a technology ( e . g . , Davis’s [ 9 , 10 ] TAM ) . Whereas a complete overview of existing adoption , diffusion , and innovation theories and models is beyond the scope of this paper , we will introduce the most prominent ones below . For more de - tailed overviews , refer to Gallivan [ 24 ] and Zmud [ 58 ] . Technology Transition Theories and Models Bikson [ 3 ] presents a process - centric view of ( collaboration ) technology transition as a series of decisions and actions by means of which the collaborative technology is incorporated into the organization . This model posits the implementation process as the strongest influence on the eventual use and diffusion of the technology . To investigate and analyze this implementation process , Bikson offers a socio - technical framework , focusing on the social system ( e . g . , work groups , facilitation , and tasks ) , the technical system ( e . g . , hardware and GSS software ) , and their interaction . The assumed reciprocal interdependency between the social and technical system is con - COLLABORATION ENGINEERING WITH THINKLETS 35 sistent with that posited by Structuration Theory [ 43 ] and Adaptive Structuration Theory [ 18 ] . Rogers [ 45 ] also takes a process - centric approach to technology transition in his seminal work on innovations in organizations . He posits an innovation process model consisting of five sequential stages . In the Agenda Setting stage , awareness of organi - zational problems transforms into explicit perceived needs for innovations . The Match - ing stage focuses on establishing a fit between the perceived organizational problems and possible innovations . Third , the Redefining / Restructuring stage concerns the modification and reinvention of selected innovations to fit the organization and changes to organizational structures and processes to accommodate the innovation . In the Clari - fying stage , the relationship between the organization and the innovation is defined more clearly . Finally , the Routinizing stage reflects the point from where the innova - tion becomes an ongoing element in the organization’s activities and loses its identity as an innovation . Any given stage has to be completed before a later stage in the process can be undertaken [ 45 ] . The strength of process theories and models is that they offer detailed and struc - tured descriptions or prescriptions of the myriad of important details to which an organization must attend to accomplish a transition to a technology innovation . Yet such a description by itself does not explain why a process is successful , nor what may happen if a process were changed . Process models do not explain the causal mechanisms that underlie transition . To this end , a number of authors have proposed factors and causal theories that predict actual technology transition , sometimes in the context of a given process model . Rogers , for example , identifies five innovation attributes that influence its adoption [ 45 ] : (cid:149) Relative advantage—the degree to which an innovation is perceived as being better than its precursor . (cid:149) Compatibility—the degree to which an innovation is perceived as being consis - tent with the values , needs , and experiences of its adopters . (cid:149) Complexity—the degree to which an innovation is perceived as being difficult to use . (cid:149) Observability—the degree to which the results of an innovation are observable to others . (cid:149) Trialability—the degree to which an innovation may be experimented with be - fore adoption . Moore and Benbasat [ 37 ] add two more innovation attributes to these five : (cid:149) Image—the degree to which the use of an innovation is seen to enhance one’s status . (cid:149) Voluntariness of use—the degree to which use of the innovation is voluntary . A similar blend between process and factor aspects is reflected in Applegate’s [ 2 ] model on the assimilation of technology support for teams . Her model describes the transition of innovations from their inception to their institutionalization . She pro - poses a number of stimulators and inhibitors of technology transfer , for example , 36 BRIGGS , DE VREEDE , AND NUNAMAKER level of frustration of end users with current processes and the alignment of a reward structure to support the use of the innovation . Based on the framework and field experiences , she illustrates a number of possible propositions between the elements of the model , for example , GSS adoption and ownership is positively correlated with the presence of an effective management sponsor . The strength of a factor - based ap - proach is that it provides a checklist for designers and innovators to consider as they contemplate a transition to a new technology . Further , a factors model can become the inspiration for , and perhaps the foundation of , a causal model . A causal model , in turn , may provide an explanation for observed transition trajectories . Davis’s TAM [ 9 , 10 , 11 ] posits a causal relationship between a set of factors that lead to system use . Its purpose is to predict usage patterns among users several weeks after an initial one - hour exposure to the technology . Specifically , TAM posits that people will develop an intention - to - use , and therefore will use a new technology to the extent that it is perceived as useful , to the extent that it is easy to use ( Figure 1 ) . TAM also posits that other unnamed external factors may influence a person’s per - ception of usefulness and ease of use . There is robust empirical support for TAM ( see , e . g . , [ 1 , 20 , 27 , 36 , 48 , 49 , 51 , 52 ] ) . However , it may have limited applicability to the study of GSS transition because : (cid:149) TAM focuses on individual intentions and perceptions to use a technology , whereas GSSs represent a technology that must be accepted by groups of individuals si - multaneously ( although the actual use may be asynchronously ) ( see also [ 24 ] ) . Differently stated , GSSs differ from more traditional IS in that they support inter - action between people rather than between people and applications [ 29 ] . (cid:149) TAM was devised to predict software usage a few weeks subsequent to the first hour of exposure . Normally GSSs are not used within a few weeks subsequent to a demonstration . (cid:149) TAM does not offer any explanation why an organization would eagerly em - brace a technology for two years and then abandon it . (cid:149) Field studies show that the user friendliness of GSS is rated very high by users ( see , e . g . , [ 23 , 57 ] ) . In addition , positive user feedback regarding perceived added value ( see , e . g . , [ 42 , 44 , 54 ] ) would also hint at a high level of actual systems use . Yet , whereas some of the organizations continue to use GSS , others that reported positive field experiences no longer use the technology . The Technology Transition Model Notwithstanding the limitations of TAM , when it was combined with Rogers [ 45 ] and Moore and Benbasat’s [ 37 ] innovation attributes , and informed by longitudinal expe - riences in the field , it became a solid foundation upon which the TTM was built . TTM is a causal model to predict and explain technology transition . For a detailed descrip - tion of the development and foundation of TTM , we refer to Briggs et al . [ 5 ] . Like TAM , TTM ( Figure 2 ) posits that system use ( U ) is a positive function of behavioral intentions ( BI ) . However , unlike TAM , TTM posits that intention - to - use is a multiplicative function of : COLLABORATION ENGINEERING WITH THINKLETS 37 1 . the perceived magnitude of the net value ( V ) that may be obtained after a switch to the new technology , and 2 . the perceived frequency ( F ) with which said value may be obtained . TTM posits that perceived magnitude of net value ( V ) is an overall sense , derived through the parallel processing of the brain , rather than a rational , deliberate summa - tion of each individual cost or benefit . Indeed , people may arrive at some V without being able to articulate all the factors that weighed in the assessment . TTM posits that as people consider using a new system , they perceive value ( both cost and benefit , both negative and positive ) along a number of dimensions , among them : (cid:149) Usefulness : The extent to which the user beliefs the technology will enhance or hinder job performance ( incorporated from TAM ) . (cid:149) Affective : The extent to which the technology will invoke positive or negative emotional response in the user . Figure 1 . The Technology Acceptance Model [ 11 ] Figure 2 . The Technology Transition Model [ 5 ] 38 BRIGGS , DE VREEDE , AND NUNAMAKER (cid:149) Economic : The extent to which the technology will increase or decrease the user’s cash , assets , marketability , and so on . (cid:149) Physical : The extent to which the technology will increase or decrease the user’s health or comfort . (cid:149) Political : The extent to which the technology will increase or decrease the user’s power or influence within or across organizations . (cid:149) Social : The extent to which the technology will enhance or detract from the user’s personal relationships with other people , such as colleagues , friends , and family . (cid:149) Cognitive : The extent to which the technology will increase or decrease the user’s amount of mental effort expended to complete tasks the technology sup - ports . This dimension has at least three components : – Perceptual load : User friendliness—the amount of mental effort required to find and control the features and functions of the technology required to ac - complish the task at hand . – Access load : Availability—the amount of mental effort required to gain per - mission and access to use the components of the technology needed for the task at hand . – Conceptual load : Understanding—the amount of effort required to under - stand what the technology is supposed to do for the user . Notice that the Perceived Ease - of - Use construct from TAM and the Complexity construct from Rogers [ 45 ] is expanded in the Cognitive value dimension in TTM . TTM posits that the direct causal relationship between V * F and BI is moderated by two factors : 1 . A multiplicative function of the degree of certainty ( C ) about perceptions of magnitude and frequency of value . The model posits that certainty is an as - ymptotic function of exposure to the technology through testimony , observa - tion , and experience . Although increasing exposure to a system may cause perceptions about the system to swing dramatically , the more exposure one has to a new system , the more certain one feels about ones perceptions of that system . 2 . An additive function of the perceived net value of transition ( T ) . There are both costs and benefits to the transition process that are different from the costs and benefits of using the new system once it is in place . In conclusion , TTM can be summarized as a mathematical approximation as : ( ) ( ) f f U BI VFC T . @ @ + Finally , we like to stress that it is not the purpose of TTM to replace TAM or Rogers [ 45 ] and Moore and Benbasat’s [ 37 ] Innovation Attributes . Rather , TTM builds on these preceding models , extending them and adding details to serve a different pur - pose . TAM predicts and explains System Use several weeks after a short exposure to an information technology . The Innovation Attributes offer insight into factors that may give rise to an initial adoption decision . TTM seeks to explain the existence ( or COLLABORATION ENGINEERING WITH THINKLETS 39 nonexistence ) of self - sustaining and growing communities of users for technologies . As a side benefit , TTM may illuminate the mechanisms by which the “External Fac - tors” of TAM give rise to perceptions of Usefulness and Ease - of - Use . Table 1 illus - trates the harmony among these models . Why GSS Installations Are Self - Extinguishing F IELD OBSERVATIONS BASED ON TTM suggest a causal explanation for why GSS fa - cilities may become self - extinguishing in some cases , and self - sustaining in others ; why some previously successful GSS facilities fall into disuse , but others seem to flourish . The explanation requires several logical steps that draw on several parts of the model . The first element of the explanation appears to lie in the components of TTM’s Cog - nitive dimension of perceived net value from system use . GSS users regularly report low Perceptual Load , that is , high levels of Perceived User Friendliness when they used GSS with the help of a professional facilitator ( see , e . g . , [ 5 , 53 , 55 , 57 ] ) . 2 How - ever , a number of users reported high Conceptual Load , that is , they found it difficult to understand what the system was supposed to do for them and for their group when they were asked to run the system for themselves [ 5 ] . Table 1 . The Harmony Between TTM [ 5 ] , TAM [ 9 , 10 ] , and the Innovation Attributes [ 37 , 45 ] TTM TAM Innovation attributes Perceived frequency of net value Usefulness Perceived magnitude of net value Relative advantage Usefulness Usefulness Compatibility Affective Usefulness Economic Usefulness Physical Usefulness Compatibility Political Usefulness Compatibility , image , voluntariness Social Usefulness Compatibility , voluntariness Cognitive Ease of use Compatibility Perceptual load Ease of use Complexity Access load Ease of use Complexity Conceptual load Ease of use Compatibility , complexity Certainty of perceptions Testimony Observation Observability Experience Trialability Perceived net value of transition Behavioral intentions Behavioral intentions System use System use 40 BRIGGS , DE VREEDE , AND NUNAMAKER GSSs tend to be rich , flexible , full - featured platforms with hundreds of configurable features that can be used to guide groups through many different kinds of collabora - tive efforts . However , there is nothing on the screen of a GSS to make it obvious what will happen to group dynamics when one or another of the system features is acti - vated . Each configuration can have a subtle , yet powerful effect on the patterns of interaction among group members . Often , an inexperienced user cannot guess which of the many configurations may be useful for the task at hand . Whereas it may only take two to three days to learn how to run the features of a typical GSS , it can take a year or more to learn how the features can be wielded effectively in the service of group dynamics . Many knowledge workers who could benefit from the use of GSS do not have the time to develop the requisite expertise . Therefore , because GSS can present high conceptual load , GSS interventions are usually prepared and guided by professional facilitators . The facilitators who run GSS are either hired internally to provide services to oth - ers in the organization , or hired as external consultants . If an organization hires an external consultant to run its GSS technology , it is , by definition , not a self - sustaining community of GSS users , because , when the consultant leaves , nobody remains to run the technology on behalf of teams . However , even when an organization hires internal facilitators and sets up its own GSS facility , there are two scenarios based on two other components of TTM , which , over time , can cause a GSS facility to be self - extinguishing , even after several years of high - value use . The less common of these scenarios derives from TTM’s Eco - nomic dimension of Perceived Net Value for system use . The more common one derives from the Political dimension . Below , each will be discussed in turn . Economic Causes for Self - Extinguishing GSS Facilities There are several economic factors that work against the creation of a self - sustaining community GSS users . First , GSS can provide value for many different kinds of col - laborative tasks in many different kinds of work units . Therefore , when organizations adopt GSS , they tend to establish general purpose facilities to serve the diverse needs of their organization . As work units have special problems or projects , they engage the facilitator and make use of the facility , often with outstanding results ( see Fjermestad and Hiltz [ 23 ] for a compendium of GSS field studies ) . Because work units tend to be organized around routine , repeatable tasks , it is rare for any one work unit to encoun - ter sufficient challenges to justify the expense of its own facilitator . Because GSS facilities tend to cut across organizational boundaries , they are typically approved and funded fairly high up in the organizational structure . When a budget crunch comes ( and they always come eventually ) , organizational leadership can disband the GSS facility and lay off its facilitators without alienating any of the work units , because no work unit is likely to need the GSS facility fre - quently . Therefore , no work unit is likely to sacrifice an internal position to keep the GSS facility operational for the whole organization . COLLABORATION ENGINEERING WITH THINKLETS 41 Even a superb business case for a GSS facility may not be sufficient to prevent its closure during a budget crunch . In a typical example , one GSS facility that we ob - served in a high - technology , capital - intensive industry reported a carefully documented ROI on its first GSS facility of more than 600 percent . Yet it was closed in less than two years . The business case can be insufficient for two reasons . First , the financial returns on GSS facilities tend to be in terms of cost savings and cost avoidance . Thus , at the end of a year , there is no line item on any budget that quantifies and draws attention to the value the GSS created for the organization . The savings tend to be invisible in normal financial analyses , and tend to be dispersed across many work units . Second , because GSS facilities tend to be used to support ad hoc special events and nonroutine problem - solving , facilitators cannot build a case for structural sav - ings they might cause in the future . Past projects are done , past problems are solved , and it is not possible to predict what new ones may arise a month or a year hence . We have seen this economic scenario occur in , for example , ACE and several other well - established GSS facilities . However , experience in the field suggests the sce - nario described in the next section is a far more common cause for GSS facilities to fall into disuse . Political Causes for Self - Extinguishing GSS Facilities Even when economic factors do not work against the long - term survival of a well - used GSS facility , there is a political scenario that can make it self - extinguishing . Consider the characteristics and skills that an effective facilitator must possess . In order to suc - ceed , a GSS facilitator must be , among other things ( see , e . g . , [ 6 , 19 , 39 , 56 ] ) : (cid:149) a good communicator ; (cid:149) a task - focused problem - solver ; (cid:149) a people - person who perceives group objectives and understands group dynamics ; (cid:149) experienced with configuring and maintaining the GSS critical hardware and netware ; (cid:149) flexible ; (cid:149) a leader . Consider further that the facilitator is likely to be working fairly high up the organi - zational structure ( see the previous section ) . It is rare to find flexible , task - focused , problem - solving people - persons with a flair for technology and leadership . Observa - tions and interviews at more than a dozen sites suggest that when these facilitators come in contact with people of influence and power in the organization , the facilitator’s skills and attributes give them considerable credibility and influence with the very people who control the organization’s assets and career paths . These people quickly find “better” things for the facilitators to do than running a GSS facility . GSS facilita - tors are often promoted away quickly . In the aftermath , either a person of lesser talent takes over the GSS , in which case the facility may soon fade to disuse , or another talented person takes over , only to be promoted away a few months later . We have 42 BRIGGS , DE VREEDE , AND NUNAMAKER encountered this pattern in over a dozen organizations such as the World Bank , IBM , and the U . S . Navy . Summary Thus , TTM suggest that because of the high conceptual load of GSS , organizations that use GSS frequently rely on facilitators , but for economic and political reasons , it can be difficult to keep high - quality facilitators in place . Therefore , the facilitator may be a key bottleneck for the widespread diffusion of GSS . A remarkable example was described in a case study by Munkvold and Anson [ 38 ] . They report on a Norwe - gian oil company that installed four GSS meeting rooms and trained more than 100 people as facilitators . Facilitation services would be provided through the informa - tion technology department to the rest of the organization . A year later , only one room was still being used regularly . One room had been dismantled , whereas the other two are hardly used . The primary cause cited was a lack of access to facilitators . Of the more than 100 people trained to facilitate , only a handful continued to practice as facilitators [ 38 ] . This example is not unusual . Whereas there are notable exceptions ( e . g . , the U . S . Army’s Redstone Arsenal ) , in many cases , GSS facilities that focus their efforts on serving the emergent needs of multiple business units tend to fade within 18 months to three years . This then provides an answer to our second research question : Why do organizations cease to use GSS facilities that produce measurable economic ben - efits ? The high conceptual load of GSS forces organizations to use facilitators against whom economic and political reasons combine to mitigate their long - term affiliation with the GSS facility . When organizations employ GSS to support anytime - anyplace collaboration , the number of teams and GSS sessions may increase dramatically and so may their need for facilitation support . In that situation , a lack of access to talented facilitators may become an insurmountable bottleneck . The only way forward for organizations want - ing the reap the benefits of GSS then becomes to create a self - sustaining GSS facili - ties and self - sustaining communities of users . Creating Self - Sustaining GSS Facilities W HEREAS GSS FACILITIES IN SOME ORGANIZATIONS fall into disuse , we found other organizations where GSS user communities became self - sustaining , even years after the original product champion had been promoted away . Field observations suggested a common characteristic among these self - sustaining GSS communities : the GSS was routinely used to support day - to - day execution of mission - critical tasks . For ex - ample , an avionics manufacturing plant we observed installed a GSS facility on the factory floor . The nature of the work required very high production standards . Sev - eral times per month , a quality problem emerged on the production line . When this happened , the line workers retreated to their GSS facility and execute a canned col - COLLABORATION ENGINEERING WITH THINKLETS 43 laborative analysis to identify the cause of the problem and to choose a solution . They went through the same five steps each time they met . Therefore , they had no need to learn or understand all the possibilities offered by their GSS software . They only needed to learn how to run their five steps . In a similar case , a group of military intelligence officers with whom we worked over a period of several years adopted GSS to support their situation assessment pro - cess . Their task ran through a few simple steps , 24 hours a day for weeks or months at a time . They only needed ( and therefore only learned ) a fraction of the capabilities their GSS provided . They learned their own process in a one - hour training session rather than learning general GSS facilitation skills in a yearlong apprenticeship . After the training , they had no further need for the facilitator who had designed the process for them . In both these cases , and in others we observed , people who learned to conduct a repeatable process for a mission - critical task experienced low Conceptual Load , and so were able to use their GSS without a professional facilitator . Further , Perceived Frequency of Value Derived from System Use was much higher for these users than for the users who occasionally used a general purpose GSS facility for special projects . Lower conceptual load leading to a higher Perceived Net Value combined with a higher Perceived Frequency of Net Value appeared to be sufficient to cause the emer - gence of self - sustaining GSS user communities in these organizations . Based on TTM and observations in the field , we derived two guidelines for creating self - sustaining use of GSS in an organization : 1 . Do not focus solely on “general purpose” facilities . Rather , focus on creating solutions for mission - critical collaborative tasks that recur frequently . General purpose GSS facilities cannot create sufficient value for any single organizational unit alone to justify a continuing investment . However , if the core business of the facility is to support repeatable processes , then users may come to regard the technology as critical to the successful execution of their work . This may increase the Economic dimension of the Perceived Net Value of the facility . Further , if the facility is used frequently for repeated processes , the Per - ceived Frequency of Net Value will be high . Combined with a higher Eco - nomic dimension of the Perceived Net Value it may then be easier to build a business case that the GSS provides sustained structural value , and should not be eliminated in a budget crunch . Consider the case of a GSS facility installed by a government agency that conducts large - scale , high - risk , high - technology projects . Following a common pattern , the facility was installed on a follow - ing the general purpose model to provide services to many different organiza - tional units . For the first two or three years , the facility struggled to establish itself through active internal marketing efforts . The teams that used the facility reported high productivity and very high satisfaction , but most did not return to the facility for new projects . When past users were interviewed , many re - ported that they just “didn’t think of it” because it wasn’t a common way for 44 BRIGGS , DE VREEDE , AND NUNAMAKER them to conduct business . Others reported that they had not had new occasions arise where they needed to gather a team to solve a problem . One of the facilitators learned that the agency used a 100 - question checklist to verify that all safety concerns had been adequately addressed before under - taking an operation that could potentially pose a risk to human life . About 60 to 80 people responded to the checklist for each operation . However , the origi - nal checklist was comprised of simple yes - or - no questions . Project personnel expressed concern to the facilitator that the checklist did not allow them to provide rich explanations and qualifiers to their answers . Therefore , the facili - tator created a simple GSS - based process that allowed for both the yes – no questions and text - based explanations of each answer . She offered it to an operation team on a trial basis . The operation team reported that the GSS gave them results that were far more valuable and informative than their previous paper - based approach had yielded . The operation analysis process became the backbone of the services provided by the GSS . People who used the GSS regularly for operation analysis also began to request its use for other pro - cesses . The facilitator team devised other repeatable processes for After Ac - tion Debriefing , for Strategic Planning , and for Pre - Retreat planning , to name three examples . In 2002 , when faced with serious budget shortfalls , the agency considered disbanding the GSS facility . However , given the mission - critical nature of the processes being conducted there and the support of the work units who made regular use of the facility , management decided to retain it , and to find other ways to cut the budget . 2 . Do not rely on skilled general purpose facilitators for long - term GSS success . Rather , have these people design effective collaborative processes , and train “practitioners” to run them . Practitioners are not facilitators . Rather , they are professionals who are par - ticularly well versed in how to conduct their own tasks , without necessarily having the skills to guide others through other tasks . A good facilitator is ca - pable of designing and supporting any collaborative process that is required by drawing on facilitation techniques and GSS functionality . However , people who are not facilitators can nonetheless be trained in short order to conduct a single mission - critical process using just the GSS features they need . Practi - tioners of such repeatable processes do not need to know anything about the GSS beyond how they use it for their own repeatable process . Nor do they necessarily need to understand the group dynamics invoked by the process design . They only need to follow its steps to succeed . This reduces their Con - ceptual Load for using the GSS . Therefore , practitioners of repeatable mis - sion - critical collaborative tasks can derive great benefit from GSS without the intervention of a facilitator . We have observed this phenomenon in a variety of settings , for example , among systems engineers who use GSS to conduct requirements negotiations [ 4 ] , programmers who conduct code - reviews [ 28 ] , and intelligence officers who conduct situational assessments for the U . S . Navy using GSS [ 5 ] . A given prac - COLLABORATION ENGINEERING WITH THINKLETS 45 titioner may use only a fraction of the available GSS functionality . Often they will be completely unaware of , and uninterested in , any other possible uses for the GSS . One such example involved planners at a U . S . Air Force base that used about 3 percent of the available features in their GSS for their ongoing strategic planning process . They were surprised to learn that Navy personnel used the same GSS for intelligence analysis . Said one Air Force planner , “That’s odd , why would the Navy use a strategic planning system to do intelligence analysis ? ” The planners had no need to understand how the GSS could be used for intelligence work , and the intelligence officers had no need to understand how GSS could enhance strategic planning . Each group succeeded without fa - cilitators , because each group used just what they needed for its own task . Practitioners will seldom be able to facilitate GSS workshops in areas outside their own expertise . Yet they are experts regarding the mission - critical task they have been assigned to . As a result , they are much less likely to be promoted to a different posi - tion in the organization than expert facilitators . Hence , the key in achieving sustain - able success with GSS is to design primary collaborative processes , and to train practitioners and groups to be self - sustaining in these processes with GSS . This en - deavor is a fundamental goal of collaboration engineering . The remainder of this section will present a number of requirements for effective collaboration engineering and then introduces the thinkLet concept as way to fulfill these requirements . Requirements for Effective Collaboration Engineering Collaboration engineering is an approach for the design and deployment of collabo - rative technologies and collaborative processes to support mission - critical tasks . A fundamental goal of collaboration engineering is to minimize cognitive load for prac - titioners while transferring to them relevant facilitation skills and knowledge about GSS and group dynamics . Collaboration engineering seeks to package facilitation skills and GSS experience . This is not an easy challenge . To execute successful col - laboration engineering efforts , at least the following three requirements must be met : 1 . Requirement 1 : GSS - related facilitation skills must be packaged in such a way that the conceptual load for practitioners is reduced significantly . This implies that the GSS functionality and facilitation techniques must be mapped to the steps of the practitioners’ own processes . First click this , then click that , then say this , then the group does this , then click that , and then we are done . This way , practitioners , unlike facilitators , only need to learn the functionality and operation of the GSS that is required for each step in their own process rather than every nuance of a GSS to be prepared for any eventuality . 2 . Requirement 2 : GSS - related facilitation skills need to be packaged in such a way that different practitioners using the same packaging will get similar , pre - dictable results from their groups . Gopal and Prasad [ 31 ] assert , “As with any other technology , GSS use is subject to multiple interpretations by various users and facilitators in organizations . ” If that is the case , then , to achieve 46 BRIGGS , DE VREEDE , AND NUNAMAKER consistent and predictable results with GSS use , collaboration engineers must find ways to limit ambiguity in GSS environments . They must find ways to make proven , successful interpretations readily available to practitioners at run time . If different practitioners get very different group dynamics and dif - ferent group results every time they applied some packaged facilitation skills , the organization could not count on the effective execution of the mission critical collaborative process . They would have to go back to expert ( outside ) facilitators to ensure meeting success . 3 . Requirement 3 : Collaboration engineers must find ways to package GSS - re - lated facilitation skills in such a way that the packages can be reused to enable short development times for new processes . It would be very cumbersome to define new packages of facilitation techniques and GSS skills for every mis - sion - critical collaborative process that exists in organizations . It would be more practical to have access to a library of building blocks that can be combined into different repeatable processes with comparatively little effort . Moreover , such a library would consist of reusable “standard” building blocks that would have been tested and fine - tuned through numerous field experiences . Creating new facilitation packages for each collaboration process would place a big burden on the collaboration engineer to establish every time that the intended effects on group dynamics and group outcome are achieved . Therefore , in order to create sustained success with GSS , collaboration engineers must seek to minimize the need to train practitioners to execute mission - critical col - laborative processes by packaging facilitation skills as reusable units and mapping those building blocks into methods that yield predictable , repeatable results when applied by different groups . Such building blocks we call thinkLets . 3 We elaborate on them below . ThinkLets : Packaging Facilitation Skills and Experience In order to achieve a goal collaboratively , people must move through a reasoning process . To move through a reasoning process , people must engage in a sequence of basic patterns of collaboration . A thinkLet constitutes the smallest unit of intellectual capital required to create one repeatable , predictable pattern of collaboration among people working toward a goal . A thinkLet describes an elementary group process from a leader’s point of view by providing explicit , scripted prompts for the group , and by guiding the practitioner through the decisions that must be made based on the group’s behavior . In addition , a thinkLet defines which GSS tool ( s ) to use and how to configure each of them . A thinkLet encapsulates a facilitator’s best - practice regard - ing establishing a certain pattern of collaboration . Each thinkLet has a name , and each creates a particular pattern of collaboration among a team of participants assuming that these participants have congruent goals , and are willing to collaborate . For example , one thinkLet may cause a group to di - verge whereas another one may stimulate group consensus building . We have identi - COLLABORATION ENGINEERING WITH THINKLETS 47 fied five general patterns of collaboration that constitute five broad categories for thinkLets . These are defined below . Specific examples of thinkLets for each of these patterns of collaboration are presented in the Appendix : 1 . Diverge : To move from a state of having fewer concepts to a state of having more concepts . The goal of a divergence thinkLet is for a group to create con - cepts that have not yet been considered . Brainstorming is an example of a divergence thinkLet . A special class of divergence thinkLets concerns elabo - ration , or adding detail around “seed” concepts that are already in place . Dur - ing an elaboration process , a group may start with a set of previously generated concepts as an inspiration to come up with more concepts . Groups may also start with previously generated concepts to analyze them or increase compre - hensiveness by adding more information . 2 . Converge : To move from a state of having many concepts to a state of having a focus on , and understanding of , the few worthy of further attention . The goal of a “converge” thinkLet is for a group to reduce their cognitive load by reduc - ing the number of concepts they must address . A convergence process has at least two components . The first is an element of filtering—eliminating some concepts from consideration . Filtering may be accomplished by eliminating concepts from consideration , or by abstracting multiple specific concepts into a more general concept . The second is an element of understanding—estab - lishing shared meaning for the concepts under consideration . Frequently , dif - ferent people understand the same term to represent different concepts . For example , in one requirements negotiation workshop we conducted , the term “affiliate” turned out to have five orthogonal meanings among the stakehold - ers on the team . As a team converges on a subset of its available concepts , its members must assure themselves that they have similar understandings of the concepts that remain under consideration . 3 . Organize : To move from less to more understanding of the relationships among concepts . The goal of an “organize” thinkLet is to reduce the effort of a fol - low - on activity . When a group organizes a group of concepts , they develop an understanding of the relationships among the concepts . They consider pos - sible relationships among concepts , and determine which relationships exists among which concepts . They might , for example , organize a mixed list of ideas into a number of categories , or arrange them into a tree . An “organize” thinkLet is typically not executed as a goal in itself ; its purpose is usually to facilitate the subsequent ( team ) activity , for example , a distribution of catego - ries of action items over a number of subgroups for further elaboration ( diver - gence ) . 4 . Evaluate : To move from less to more understanding of the possible conse - quences of concepts . The goal of an “evaluate” thinkLet is to focus a group’s discussion or inform a group’s choice based on a judgment of the worth of a set of concepts with respect to a set of task - relevant criteria . The discussion may be focused or the choice may be informed by either the estimated value 48 BRIGGS , DE VREEDE , AND NUNAMAKER of the concepts or the group’s consensus of that value or both . For example , an “evaluate” thinkLet may involve having a team use a one - to - ten scale to rate the merits of a set of alternatives . An evaluation thinkLet is frequently fol - lowed by a divergence thinkLet , if people need to understand the assumptions and information underlying their patterns of polling , or a “build consensus” thinkLet if they must take a joint decision . 5 . Build consensus : To move from having less to having more agreement on courses of action . The goal of a “build consensus” thinkLet is to let a group of success - critical stakeholders arrive at mutually acceptable commitments . A team may use such thinkLets to stimulate the stakeholders to move from having less agreement to having more agreement about , for example , a course of action or a distribution of funds over projects . Components of a ThinkLet A thinkLet has a name , and at least three other components . In order to create a specific pattern of collaboration , thinkLets must be defined at least in terms of the tool used , the configuration of this tool , and the facilitation script : (cid:149) Tool —the specific version of the specific hardware and software technology used to create a pattern of collaboration . (cid:149) Configuration —the specifics of how the hardware and software were config - ured to create a pattern of collaboration . (cid:149) Script —the sequence of events and instructions given to the group to create the pattern of collaboration . A specification of these three components taken together constitutes the specific stimulus that causes a predictable , repeatable pattern of collaboration . Lacking knowl - edge of any one of these components , practitioners or other facilitators cannot recre - ate the stimulus , and so may not be able to reliably recreate the intended collaboration pattern . That each component has an effect on outcomes of a group process in which a GSS is used can be inferred from the rich body of published GSS literature . Con - sider each component in turn . Tool GSS is not a unitary thing . Any given GSS is not necessarily a single tool , but may be a collection of tools that differ widely from one another . One could not expect to obtain the same results with an electronic brainstorming tool as one obtains with a group outline or an electronic voting tool . Therefore , without knowing which tool a facilitator used , one cannot reproduce the results that the facilitator achieved . Further , GSSs are not a single system , but a category of systems , and the systems in that category differ widely . For example , the electronic brainstorming tool in some systems may require that all users contribute ideas to the same electronic page , whereas the electronic brainstorming tool in another system might require that all participants COLLABORATION ENGINEERING WITH THINKLETS 49 contribute to different pages , and that they swap the pages among themselves . The literature also reports on studies showing that differences among tools can cause dif - ferences in results , for example : (cid:149) Dennis et al . [ 17 ] demonstrated that people brainstorming in multiple dialogs tended to outperform people contributing to a single dialog . (cid:149) Easton et al . [ 21 ] found that an electronic conversation tool produced better results than an electronic brainstorming tool for convergence tasks , but the re - verse was true for divergence tasks . (cid:149) Hollingshead et al . [ 34 ] showed that groups using one version of a GSS outper - formed groups using a different version of the same CMC . Thus , one must conclude that differences in technology can produce differences in outcome , and one must define the exact tool to be used in order to be confident that practitioners can reproduce the results of experienced facilitators . However , just know - ing which tool was used is not sufficient to assure replication of results . Configuration Some GSS tools have many possible configurations , and different configurations may have different effects on group outcomes . For example , GroupSystems’ Electronic Brainstorming Tool ( Workgroup Edition 3 . 4 ) has 19 configurable features , for a total of 524 , 288 possible combinations . Those features are configurable precisely to allow teams to change their patterns of thinking and interaction . Just one example is the feature that allows teams either to contribute anonymously or to have every contribu - tion tagged with a user’s name . There are a host of papers in the GSS literature dem - onstrating that anonymous groups perform differently than identified groups ( see , e . g . , [ 8 , 21 , 35 ] ) . Thus , in order to understand how a group achieved its results , one must know ex - actly which tool was used , and exactly how that tool was configured . However , know - ing both the tool and its configuration is still not sufficient if the goal is to create a repeatable , predictable pattern of collaboration among the members of a team . Script The very same GSS tool configured in the very same way can produce very different patterns of collaboration , depending on the script in which it is embedded . A script is the sequence of events and oral or written prompts given to a group as they use a GSS tool . There are several robust illustrations in the GSS literature of the powerful differ - ences in group dynamics that can be produced by changing a script , for example : (cid:149) Shepherd et al . [ 47 ] used a set of tightly scripted treatments to assess the effects of social comparison on brainstorming productivity . However , in one treatment , one of the three facilitators on the project changed just two phrases in a ten - page script . Instead of saying “performing above average , ” he adopted a jocular tone and used the phrase “kicking butt . ” Instead of saying “performing below 50 BRIGGS , DE VREEDE , AND NUNAMAKER average , ” he said “brain - dead . ” This slight variation produced laughter among the subjects , which raised the salience of the social comparison , which caused a double - digit improvement in their brainstorming productivity . When the research - ers discovered the script anomaly , the facilitators reversed roles . Those who had been using a neutral tone adopted the jocular tone and phrases . The one who had been using a jocular tone adopted the neutral tone and phrases . All facilita - tors were able to produce double - digit improvements by assuming a jocular tone when making the social comparison to the group . (cid:149) Connolly et al . [ 7 ] demonstrated that using a script that urged a critical evalua - tive tone caused anonymous GSS users to produce more ideas of higher quality than did those using a script that encouraged a positive evaluative tone . (cid:149) Santanen et al . [ 46 ] compared free brainstorming and directed brainstorming scripts . In free brainstorming , subjects got a single problem stimulus and were subsequently asked to generate as many solutions as possible . In directed brain - storming , subjects got a single problem stimulus , but at designated time inter - vals , they received prompts that directed them to focus on different facets of the solution space . Subjects exposed to the directed brainstorming script produced 200 percent more unique solutions than those using nondirected brainstorming . Also , the ratio of unique solutions to total solutions offered was 37 percent higher with directed brainstorming than with the free brainstorming script . Thus , in order to transfer a predictable , repeatable nugget of facilitation skill to a practitioner , a thinkLet must at least encapsulate precise information about ( a ) the tools , ( b ) the configuration of the tools , and ( c ) the scripts used to create the desired pattern of group interaction . ThinkLets represent a significant step toward fulfilling the three requirements for effective collaboration engineering that we described above . The next section will elaborate on this . ThinkLets as Building Blocks for Collaborative Processes The knowledge encapsulated in a thinkLet can reduce the Conceptual Load of using GSS . By following a prescription for the tool , the configuration , and the script , one may be able to recreate the stimulus used by others to produce a pattern of collabora - tion without having to comprehend the complete range of support a GSS may offer ( Requirement 2 ) . However , lacking knowledge of any one of the three thinkLet com - ponents , it may not be possible to reproduce results achieved by others with a GSS . Although thinkLets represent a means for allowing less - experienced GSS users to wield the technology on their own behalf , they do not represent a repeatable process . A thinkLet is a way to create a pattern of collaboration ; a repeatable process is a step - by - step way to accomplish a mission - critical collaborative task like strategic plan - ning or requirements negotiation . However , a collection of thinkLets may become a versatile toolbox containing building blocks for such processes ( Requirement 3 ; see also Figure 3—arrows refer to an “is element of” relationship ) . Designers of repeatable group processes ( collaboration engineers ) may use and reuse thinkLets as building blocks for repeatable processes for accomplishing mis - COLLABORATION ENGINEERING WITH THINKLETS 51 sion - critical tasks , for example , formalizing processes such as generating a mission statement , evaluating a project , or running a marketing focus group . Once such pro - cesses are described in terms of a sequence of thinkLets in combination with some process logic , organizational staff members may be trained to moderate these pro - cesses . A number of examples of collaborative processes built with thinkLets have been successfully developed and transferred to organizations in the areas of Software Requirements Negotiation [ 4 , 33 ] and Risk Management [ 32 ] . For each of these ar - eas , we were able to decompose the repeatable collaborative process into a number of discrete steps that could be matched to the five patterns of collaboration . Appropriate thinkLets could be selected or developed to capture the knowledge required to create the desired pattern ( Requirement 1 ) . The granularity of the thinkLets , such as the examples listed in the Appendix , appeared to match the decomposed process steps . To illustrate the above , consider the area of risk management . We developed a re - peatable process for Risk and Control Self - Assessment ( R & CSA ) workshops . The complete process consists of 20 activities covering all five patterns of collaboration . In total , 11 different thinkLets are required to carry out these steps . The first phase of this process , Risk Identification , is depicted graphically in Figure 4 . For a complete description of the process we refer to van Grinsven and de Vreede [ 32 ] . Experiences also suggest that the thinkLet notation allows for an efficient descrip - tion ( Requirement 3 ) of a repeatable collaborative process . By giving each thinkLet a unique name , we have a notation by which intricate group processes and interactions can be concisely described with a few key words and phrases . The Software Require - ments Negotiation process reported in Boehm et al . [ 4 ] originally required a 130 - page handbook that articulated every detail of every step in the process . Using the thinkLet notation , the same process was expressed in less than one - twentieth of the pages of the original handbook . In summary , the answer to the third research question is that by ( 1 ) applying GSS to support mission - critical repeatable collaborative processes , and ( 2 ) by transferring responsibility for executing some of these processes from professional facilitators to Figure 3 . ThinkLets Are Building Blocks of Collaborative Repeatable Processes 52 BRIGGS , DE VREEDE , AND NUNAMAKER Figure 4 . A Graphical Representation of a Repeatable Process Using ThinkLets practitioners , organizations may be able to achieve sustainable success with GSS . In order to package necessary facilitation skills in a format that can easily be transferred to practitioners , we propose the thinkLet concept : a specific instance of GSS tool choice , GSS tool configuration , and a facilitation script to create a predictable pattern of collaboration . Early experiences from the field suggest that thinkLets represent efficient and effective building blocks to create repeatable processes that can be run by practitioners using GSS . Conclusions H IGH CONCEPTUAL LOAD ( understanding what a GSS could do for a group ) encour - ages dependence on the expert facilitator to operate the technology and guide the group process . Therefore , high conceptual load obstructs diffusion and self - sustained use of GSS in organizations as for negative economic reasons and positive political reasons , expert facilitators become transient , leaving a GSS facility susceptible to abandon - ment . This becomes an especially critical problem given that an increasing amount of organizational work is being carried out in virtual teams supported by GSS . Although the technology itself may be scalable to anytime - anyplace collaboration , the availabil - ity of expert facilitation support is unlikely to keep up with the growing need . This paper has argued that a focus on GSS support for repeatable ( distributed ) mis - sion - critical collaborative processes represents a promising avenue to pursue self - sustaining communities of GSS users . This involves packaging the required facilitation COLLABORATION ENGINEERING WITH THINKLETS 53 skills to moderate a collaborative process in such a way that practitioners can execute it themselves using GSS . We have introduced the thinkLet concept as an appropriate way to package facilitation skill . A thinkLet captures the required tool choice , tool configuration , and facilitation script to re - create a pattern of collaboration among a group of GSS users . Since thinkLets define the facilitator’s actions and prompts in a step - by - step fashion , the Conceptual Load of using the GSS is significantly reduced . ThinkLets can be used and reused as building blocks for collaborative repeatable processes , especially for distributed teams . Implications The research presented in this paper has implications for both practice and research . The main implications for practice are fourfold : 1 . If organizations want to reap the benefits of GSS and create self - sustaining communities of users , they should identify their critical repeatable processes that are frequently carried out by groups of practitioners . Unless they can iden - tify such processes , investments in a GSS facility may carry a high risk , as the facility may become self - extinguishing . In such organizations , TTM suggests that it may be more economical to hire external consultants when there is an ad hoc or nonroutine need for GSS support . 2 . A self - sustaining community of GSS users may at first appear to be inconsis - tent with professional facilitators’ business interests . If practitioners can run GSS without the assistance of professional facilitators , facilitator revenues may decline . However , creating self - sustaining communities of GSS users presents professional facilitators with a new opportunity : they can use their experience and skill as collaboration engineers to create custom collaborative processes for practitioners . Not only may they be paid for designing robust repeatable processes from thinkLet building blocks but they may also be paid for con - ducting pilot events of the process , for developing process documentation , for developing training materials , and in actually training the practitioners their process . Further , they may , if they so choose , negotiate licenses for their pack - aged expertise , and receive a subscription from every practitioner of the pro - cess . This could provide facilitators with an ongoing revenue stream , even when they are not running facilitated engagements . 3 . GSS developers need to produce new collaborative technologies that allow for the rapid development of purpose - built collaborative applications . A focus on the thinkLet , rather than on the GSS technology’s functionality itself , may lead eventually to a fundamental shift in the structure and purpose of the GSS . A GSS is commonly perceived as a collection of useful software tools for groups making a concerted effort . No existing GSS yet supports directly the capture and delivery of all three components of a thinkLet for the purpose of creating a repeatable process for mission - critical tasks . 54 BRIGGS , DE VREEDE , AND NUNAMAKER 4 . If organizations want to achieve successful organization - wide virtual collabo - ration , then developing and rolling out repeatable distributed collaborative pro - cesses that are run by the practitioners may be the only avenue left to go . Organizations cannot rely on having sufficient capable facilitators around long enough to satisfy the needs of all virtual teams using GSS . The implications of our research for the GSS research community are as follows : (cid:149) We used TTM to argue why GSS facilities will become self - extinguishing when used for ad hoc nonroutine collaborative problem - solving . However , the appli - cability of TTM may be broader than just GSS . TTM is framed in terminology and constructs that are “technology type free . ” TTM may provide a useful per - spective on sustained use of technology by individuals and organizations over time . (cid:149) We urge GSS researchers to report on the thinkLets they use in research manu - scripts . This will help to provide a solid basis for ( meta ) - analysis and comparison of GSS field and laboratory studies . Field studies become far more controllable if their GSS interventions are scripted and documented , and if measures are taken to determine whether a thinkLet’s expected pattern of collaboration does , in fact , emerge during the GSS intervention . Laboratory studies become far more replicable when all components of the thinkLet stimulus are controlled and reported . (cid:149) Much of the existing GSS literature focuses on divergence tasks [ 22 , 23 ] . With a few notable exceptions , little has been done to explore ways to effectively and predictably address the other four basic patterns of collaboration—converge , organize , evaluate , and build consensus . ThinkLets may provide a promising point of departure for researchers to come to grips with those patterns as well . Limitations There are two limitations that must be taken into account when interpreting and using the research presented in this paper . First , whereas it is promising , the TTM that we used as the foundation for our argument has been substantiated by a still relatively limited number of field cases and observations . Focused studies will have to be car - ried out to develop measurement instruments for the various constructs , apply these in the field , and find further confirmation ( or disconfirmation ) for this theory . Sec - ond , a thinkLet is not a mechanistic guarantee for repeatable results . Even with iden - tical scripts , different people may produce different outcomes . ( Consider , for example , the effect of casting the actor Woody Alan , instead of Sean Connery , in the role of James Bond . ) There is robust empirical and anecdotal evidence that differences among facilitators can cause differences in outcomes [ 19 ] . There are many other factors that influence GSS outcomes . Fjermestad and Hiltz [ 22 ] identified many independent vari - ables that seem to have an impact on GSS outcomes . Nonetheless , we submit based on numerous experiences in the field that a thinkLet provides at least a good approxi - mation to create a desired pattern of collaboration . COLLABORATION ENGINEERING WITH THINKLETS 55 Directions for Future Research The research presented in this paper is but a start for a program of research into the creation of methods and tools to foster self - sustaining communities of GSS users . Elements of such a collaboration engineering research program that merit attention include : (cid:149) The development of a design method to create repeatable processes using thinkLets as building blocks . A design method should be defined in terms of at least a way of working and a way of modeling . A way of working specifies the activities a collaboration engineer has to execute , including their order and in - terdependencies , if he or she is to create a repeatable process . A way of model - ing specifies how collaborative processes and group interaction can be repre - sented on a useful level of abstraction . The notion in Figure 4 gives a first ex - ample of a repeatable process modeling technique for thinkLet - based collabora - tive processes . (cid:149) Although experience in the field shows that certain thinkLets appear to result in reproducible patterns of collaboration time and time again , little is yet known about which elements of a given thinkLet might be causal , and which might be mere superstition . Only rigorous theoretically driven empirical research can tease out an answer to that question . (cid:149) Most thinkLets that have been recorded at this time are geared toward support - ing same - time / same - place collaboration . There still is a void in our knowledge on effective facilitation support for distributed collaboration , especially con - cerning convergence and consensus building . (cid:149) In order to investigate the efficiency and effectiveness of thinkLets and , when they are combined , a repeatable collaborative process , measurements must be defined for each of the five basic patterns of collaboration . Currently , each of the patterns has been defined in terms of a movement and a change , such as from fewer ideas to more ideas ( divergence ) , or from less agreement to more agreement ( build consensus ) . This framing points the way for empirical mea - sures of efficiency and effectiveness . For example , if a thinkLet were meant to cause convergence , one may measure the degree to which and the speed with which people were able to focus their attention on ideas worthy of further atten - tion . If a thinkLet were meant to cause the building of consensus , one may use coefficients of concordance to measure the degree of consensus in a group . As it matures , the discipline of collaboration engineering may reduce some of the pain , uncertainty , and risk of teamwork , and may give rise to widespread diffusion of GSS technologies and its accompanying benefits in the workplace . Acknowledgments : The ideas and concepts presented in this paper were shaped through many interactions with many colleagues and organizations in the field . In particular , the authors thank Bill Becker , Douglas L . Dean , Tom Gregory , Jürgen van Grinsven , Paul Grünbacher , Robert Harder , Brice Marsh , Danny Mittleman , Bruce Reinig , Eric Santanen , David Tobey , Jeroen Wien , and Capt . Rick Williams , USN ( Ret . ) . This research could not have been con - 56 BRIGGS , DE VREEDE , AND NUNAMAKER ducted without the generous cooperation and support of DARPA , the U . S . Air Force , the U . S . Navy , and many facilitators in many government and industrial organizations on three conti - nents . The authors also extend special thanks for the time and expertise provided by the anony - mous reviewers , who provided thorough , cogent , and sometimes painful insights that helped significantly improve the paper . N OTES 1 . Examples of current commercially available GSS include GroupSystems , MeetingWorks , Facilitate . com , WebIQ , and Council . 2 . The GSS used in these studies was GroupSystems by GroupSystems . com . 3 . The term , “thinkLet” was coined by David Tobey . In an effort to explain reusable packets of facilitation skill , he said , “ [ t ] hey are something like applets , only they are . . . thinkLets . . . packets of programming that create a group thinking process . ” 4 . Descriptions of these modules may be obtained on the vendor’s Web site . R EFERENCES 1 . Agarwal , R . , and Prasad , J . Are individual differences germane to the acceptance of new information technologies ? Decision Sciences , 30 , 2 ( 1999 ) , 361 – 391 . 2 . Applegate , L . M . Technology support for cooperative work : A framework for studying introduction and assimilation in organizations . Journal of Organizational Computing , 1 , 1 ( 1991 ) , 11 – 39 . 3 . Bikson , T . K . Groupware at the World Bank . In C . U . Ciborra ( ed . ) , Groupware and Team - work—Invisible Aid or Technical Hindrance ? Chichester , UK : John Wiley & Sons , 1996 , pp . 145 – 183 . 4 . Boehm , B . ; Grünbacher , P . ; and Briggs , R . O . Developing groupware for requirements negotiation : Lessons learned . IEEE Software , 18 , 3 ( May – June 2001 ) , 46 – 55 . 5 . Briggs , R . O . ; Adkins , M . ; Mittleman , D . ; Kruse , J . ; Miller , S . ; and Nunamaker , J . F . , Jr . A technology transition model derived from field investigation of GSS use aboard the U . S . S . Coronado . Journal of Management Information Systems , 15 , 3 ( Winter 1998 – 99 ) , 151 – 195 . 6 . Clawson , V . K . ; Bostrom , R . P . ; and Anson , R . The role of the facilitator in computer - supported meetings . Small Group Research , 24 , 4 ( 1993 ) , 547 – 565 . 7 . Connolly , T . ; Jessup , L . ; and Valacich , J . S . Effects of anonymity and evaluative tone on idea generation in computer - mediated groups . Management Science , 36 , 6 ( 1990 ) , 689 – 703 . 8 . Cooper , W . H . ; Gallupe , R . B . ; Pollard , S . ; and Cadsby , J . Some liberating effects of anonymous electronic brainstorming . Small Group Resear ch , 29 , 2 ( 1998 ) , 147 – 178 . 9 . Davis , F . D . A Technology Acceptance Model for Empirically Testing New End - User Information Systems : Theory and Results . Cambridge , MA : Sloan School of Management , MIT , 1986 . 10 . Davis , F . D . User acceptance of information technology : System characteristics , user perceptions and behavioral impacts . International Journal of Man - Machine Studies , 38 , 3 ( 1993 ) , 475 – 487 . 11 . Davis , F . D . ; Bagozzi , R . P . ; and Warshaw , P . R . User acceptance of computer technology : A comparison of two theoretical models . Management Science , 35 , 8 ( 1989 ) , 982 – 1003 . 12 . Davison , R . M . , and Briggs , R . O . GSS for presentation support . Communications of the ACM , 43 , 9 ( 2000 ) , 91 – 97 . 13 . Dennis , A . R . Information exchange and use in group decision making : You can lead a group to information but you can’t make it think . MIS Quarterly , 20 , 4 ( 1996 ) 433 – 455 . 14 . Dennis , A . R . , and Gallupe , R . B . A history of group support systems empirical research : Lessons learned and future directions . In L . M . Jessup and J . S . Valacich ( eds . ) , Group Support Systems—New Perspectives . New York : Macmillan , 1993 , pp . 59 – 77 . 15 . Dennis , A . R . ; Haley , B . J . ; Vandenberg , R . J . A meta - analysis of effectiveness , efficiency , and participant satisfaction in group support systems research . In J . I . DeGross , S . Jarvenpaa , COLLABORATION ENGINEERING WITH THINKLETS 57 and A . Srinivasan ( eds . ) , Proceedings of the Seventeenth International Conference on Informa - tion Systems . Atlanta , GA : Association for Information Systems , 1996 , pp . 278 – 289 . 16 . Dennis , A . R . ; Nunamaker , J . F . , Jr . ; and Vogel , D . R . A comparison of laboratory and field research in the study of electronic meetings systems . Journal of Management Information Systems , 7 , 2 ( Fall 1991 ) , 107 – 135 . 17 . Dennis , A . R . ; Valacich , J . S . ; Carte , T . A . ; Garfield , M . M . ; Haley , B . J . ; and Aronson , J . E . The effectiveness of multiple dialogs in electronic brainstorming . Information Systems Re - search , 8 , 2 ( 1997 ) , 203 – 211 . 18 . DeSanctis , G . , and M . S . Poole . Capturing the complexity in advanced technology use : Adaptive structuration theory . Organization Science , 5 , 2 ( 1994 ) , 121 – 147 . 19 . Dickson , G . ; Limayem , M . ; Lee Partridge J . ; and DeSanctis , G . Facilitating computer supported meetings : A cumulative analysis in a multiple criteria task environment . Group De - cision and Negotiation , 5 , 1 ( 1996 ) , 51 – 72 . 20 . Doll , W . J . ; Hendrickson , A . ; and Deng , X . Using Davis’s perceived usefulness and ease - of - use instruments for decision making : A confirmatory and multigroup invariance analysis . Decision Sciences , 29 , 4 ( 1998 ) , 839 – 869 . 21 . Easton , G . K . ; George , J . F . ; Nunamaker , J . F . , Jr . ; and Pendergast , M . O . Using two differ - ent electronic meeting system tools for the same task : An experimental comparison . Journal of Management Information Systems , 7 , 1 ( Summer 1990 ) , 85 – 99 . 22 . Fjermestad , J . , and Hiltz , S . R . An assessment of group support systems experimental research : Methodology and results . Journal of Management Information Systems , 15 , 3 ( Win - ter 1998 – 99 ) , 7 – 149 . 23 . Fjermestad , J . , and Hiltz , S . R . Group support systems : A descriptive evaluation of group support systems case and field studies . Journal of Management Information Systems , 17 , 3 ( Winter 2000 – 1 ) , 115 – 159 . 24 . Gallivan , M . J . Organizational adoption and assimilation of complex technological inno - vations : Development and application of a new framework . Database , 32 , 3 ( 2001 ) , 51 – 85 . 25 . Gallupe , R . B . ; Cooper , W . H . ; Grise , L . M . ; and Bastianutti , L . M . Blocking electronic brainstorms . Journal of Applied Psychology , 79 , 1 ( 1994 ) , 77 – 86 . 26 . Gallupe , R . B . ; Dennis , A . R . ; Cooper , W . H . ; Valacich , J . S . ; Bastianutti , L . M . ; and Nunamaker , J . F . , Jr . Electronic brainstorming and group size . Academy of Management Jour - nal , 35 , 2 ( 1992 ) , 350 – 369 . 27 . Gefen , D . , and Straub , D . W . Gender differences in perception and adoption of e - mail : An extension to the technology acceptance model . MIS Quarterly , 21 , 4 ( 1997 ) , 389 – 400 . 28 . Genuchten , M . , van ; Wieger , C . ; and van Dijk , C . Supporting inspections with an elec - tronic meeting system . Journal of Management Information Systems , 14 , 3 ( Winter 1998 – 99 ) , 165 – 178 . 29 . George , J . F . ; Dennis , A . R . ; and Nunamaker , J . F . , Jr . An experimental investigation of facilitation in an EMS decision room . Group Decision and Negotiation , I , 1 ( 1992 ) , 57 – 70 . 30 . George , J . F . ; Nunamaker , J . F . , Jr . ; and Valacich , J . S . Electronic meeting systems as inno - vation—A study of the innovation process . Information & Management , 22 , 3 ( 1992 ) , 187 – 195 . 31 . Gopal , A . , and Prasad , P . Understanding GDSS in symbolic context : Shifting the focus from technology to interaction . MIS Quarterly , 24 , 3 ( 2000 ) , 509 – 546 . 32 . Grinsven , J . , van . , and de Vreede , G . J . Addressing productivity concerns in risk manage - ment through repeatable distributed collaboration processes . In R . H . Sprague Jr . ( ed . ) , Pro - ceedings of the Thirty - Sixth Hawaiian International Conference on System Sciences . Los Alamitos , CA : IEEE Computer Society Press , 2003 . 33 . Grünbacher , P . , and Briggs , R . O . Surfacing tacit knowledge in requirements negotiation : Experiences using easywinwin . In R . H . Sprague Jr . ( ed . ) , Proceedings of the Thirty - Fourth Hawaiian International Conference on System Sciences . Los Alamitos , CA : IEEE Computer Society Press , 2001 . 34 . Hollingshead , A . B . ; McGrath , J . E . ; and O’Connor , K . M . Group task performance and communication technology : A longitudinal study of computer - mediated versus face - to - face groups . Small Group Research , 24 , 3 ( 1993 ) , 3307 – 333 . 35 . Jessup , L . M . ; Connolly , T . ; and Galegher , J . The effects of anonymity on GDSS group process with an idea - generating task . MIS Quarterly , 14 , 3 ( 1990 ) , 313 – 321 . 58 BRIGGS , DE VREEDE , AND NUNAMAKER 36 . Matieson , K . Predicting user intentions : Comparing the technology acceptance model with the theory of planned behavior . Information Systems Research , 2 , 3 ( 1991 ) , 173 – 191 . 37 . Moore , G . C . , and Benbasat , I . Development of an instrument to measure the perceptions of adopting an information technology innovation . Information Systems Research , 2 , 3 ( 1991 ) , 192 – 222 . 38 . Munkvold , B . E . , and Anson , R . Organizational adoption and diffusion of electronic meet - ing systems : A case study . In T . Rodden and I . Zigurs ( eds . ) , Proceedings of ACM GROUP01 . New York : ACM , 2001 , pp . 279 – 287 . 39 . Niederman , F . ; Beise , C . M . ; and Beranek , P . M . Issues and concerns about computer - supported meetings : The facilitator’s perspective . MIS Quarterly , 20 , 1 ( 1996 ) , 1 – 22 . 40 . Nunamaker , J . F . , Jr . Future research in group support systems : Needs , some questions and possible directions . International Journal of Human - Computer Studies , 47 , 3 ( 1997 ) , 357 – 385 . 41 . Nunamaker , J . F . , Jr . ; Briggs , R . O . ; Mittleman , D . D . ; Vogel , D . R . ; and Balthazard , P . A . Lessons from a dozen years of group support systems research : A discussion of lab and field findings . Journal of Management Information Systems , 13 , 3 ( Winter 1997 – 98 ) , 163 – 207 . 42 . Nunamaker , J . F . , Jr . ; Vogel D . R . ; Heminger , A . ; Martz B . ; Grohowski R . ; and McGoff , C . Experiences at IBM with group support systems : A field study . Decision Support Systems , 5 , 2 ( 1989 ) , 183 – 196 . 43 . Orlikowski , W . J . The duality of technology : Rethinking the concept of technology in organizations . Organization Science , 3 , 3 ( 1992 ) , 398 – 427 . 44 . Post , B . Q . A business case framework for group support technology . Journal of Manage - ment Information Systems , 9 , 3 ( Winter 1993 – 94 ) , 7 – 26 . 45 . Rogers , E . M . Diffusion of Innovations , 4th ed . New York : Free Press , 1995 . 46 . Santanen , E . L . ; Briggs , R . O . ; and de Vreede , G . J . The cognitive network model of cre - ativity : A new causal model of creativity and a new brainstorming technique . In R . H . Sprague Jr . ( ed . ) , Proceedings of the Thirty - Third Hawaiian International Conference on Systems Sci - ences . Los Alamitos , CA : IEEE Computer Society Press , 2000 . 47 . Shepherd , M . M . ; Briggs , R . O . ; Reinig , B . A . ; Yen , J . ; Nunamaker , J . F . , Jr . Social com - parison to improve electronic brainstorming : Beyond anonymity . Journal of Management In - formation Systems , 12 , 3 ( Winter 1996 – 97 ) , 155 – 170 . 48 . Straub , D . W . The effect of culture on IT diffusion : E - mail and fax in Japan and the U . S . Information Systems Research , 5 , 1 ( 1994 ) , 23 – 47 . 49 . Straub , D . W . ; Keil , M . ; and Brennan , W . Testing the technology acceptance model across cultures : A three country study . Information and Management , 33 , 1 ( 1997 ) , 1 – 11 . 50 . Valacich , J . S . ; Dennis , A . R . ; and Connolly , T . Idea generation in computer - based groups : A new ending to an old story . Organizational Behavior and Human Decision Processes , 57 , 3 ( 1994 ) , 448 – 467 . 51 . Venkatesh , V . , and Davis , F . D . A theoretical extension of the technology acceptance model : Four longitudinal field studies . Management Science , 46 , 2 ( 2000 ) , 186 – 204 . 52 . Venkatesh , V . , and Morris , M . G . Why don’t men ever stop to ask for directions ? Gender , social influence , and their role in technology acceptance and usage behavior . MIS Quarterly , 24 , 1 ( 2000 ) , 115 – 139 . 53 . Vreede , G . J . , de . Collaborative support for design : Animated electronic meetings . Jour - nal of Management Information Systems , 14 , 3 ( Winter 1997 – 98 ) , 141 – 164 . 54 . Vreede , G . J . , de . A field study into the organizational application of group support sys - tems . Journal of Information Technology Cases & Applications , 2 , 4 ( 2000 ) , 27 – 47 . 55 . Vreede , G . J . , de . , and G . W . Dickson . Using GSS to support designing organizational processes and information systems : An action research study on collaborative business engi - neering . Group Decision and Negotiation , 9 , 2 ( 2000 ) , 161 – 183 . 56 . Vreede , G . J . , de . ; Boonstra , J . A . ; and Niederman , F . What is effective GSS facilitation ? A qualitative inquiry into participants perceptions . In R . H . Sprague Jr . ( ed . ) , Proceedings of the Thirty - Fifth Hawaiian International Conference on System Sciences . Los Alamitos , CA : IEEE Computer Society Press , 2002 . 57 . Vreede , G . J . , de . ; Vogel , D . R . ; Kolfschoten , G . ; and Wien , J . S . Fifteen years of in - situ GSS use : A comparison across time and national boundaries . In R . H . Sprague Jr . ( ed . ) , Pro - COLLABORATION ENGINEERING WITH THINKLETS 59 ceedings of the Thirty - Sixth Hawaiian International Conference on System Sciences . Los Alamitos , CA : IEEE Computer Society Press , 2003 . 58 . Zmud , R . W . Framing the Domains of IT Management : Projecting the Future Through the Past . Cincinnati : Pinnaflex , 2000 . 60 BRIGGS , DE VREEDE , AND NUNAMAKER Appendix : ThinkLet Examples B ELOW WE WILL DESCRIBE ONE THINK L ET for each pattern of collaboration . With each thinkLet we highlight the criteria for selecting it , a brief overview of the thinkLet , the setup of the technology ( tool choice and configuration ) , and the script . Because each thinkLet must explicitly identify a specific tool and its specific con - figuration , the thinkLets presented here make reference to modules of the GroupSystems GSS , the technology we use in our work . The modules mentioned are Topic Commenter , Categorizer , Group Outliner , Topic Commenter , Vote , and Opinion Meter . However , it is not the purpose of this Appendix to promote a par - ticular product , so the details of these modules are not provided here . 4 Rather , these write - ups are offered as examples of how a thinkLet can be documented . Indeed , variations on these and other thinkLets could be ( and , one hopes , will be ) mapped for every GSS , and indeed , for paper - and - pencil , for felt - pen and flip charts , for white boards , for telephones , and for any other collaboration tools that teams use to make themselves effective . Diverge : LeafHopper Choose this thinkLet . . . . . . when you know in advance that the team must brainstorm on several topics at once . . . . when different participants will have different levels of interest or expertise in the different topics . . . . when it is not important to assure that every participant contributes to every topic . Overview Participants start with an electronic list of several discussion topics . Each item on the list links to an instance of a simultaneous comment window . Each participant hops among the topics to contribute as dictated by interest and expertise . Setup Use Topic Commenter with the following configuration : (cid:149) Participants may contribute comments under each topic . (cid:149) Participants may not contribute new topics . (cid:149) Contributions will be anonymous . (cid:149) Create one topic card for each brainstorming question in Topic Commenter or one of the other list / comment tools . COLLABORATION ENGINEERING WITH THINKLETS 61 Script 1 . Explain the topics to the group and verify that the participants understand them . 2 . Explain the kinds of ideas that the group must contribute . 3 . Explain how to open the comment window under each discussion item . 4 . Say this : a . Start working on the topics in which you have the most interest or the most expertise . Then , if you have time , move to each of the other topics to read and comment on the contributions of others . b . You may not have time to work on every topic , so work first on the topics that are most important to you . Converge : Pin the Tail on the Donkey Choose this thinkLet . . . . . . when a group has generated a lot of comments ( 100 – 400 and more ) on a set of ideas , proposals , plans , and so on . . . . to build shared understanding within a group on some key comments and discus - sion issues . . . . to avoid going through each comment with the group separately , but focus on perceived highlights only . Overview The Pin the Tail on the Donkey thinkLet is appropriate when a group has generated a large number of comments on ideas , propositions , proposal , and so on . During a ple - nary discussion , it is very costly to consider each comment individually . It takes too much time . With Pin the Tail on the Donkey you can let group members pin down key contributions . These “gems” will be brought to the table during a plenary discussion . You can help people create shared understanding regarding their own key issues . Setup 1 . Participants may view comments in Topic Commenter , Electronic Brainstorm - ing , Categorizer , or GroupOutliner . 2 . Facilitators allows participants to read comments and add annotations . ( Note : the adding of an annotation causes a yellow “sticky” icon to appear “pinned” next to the comment it annotates . ) Script 1 . Say this : a . We have elaborated on the issues at hand extensively and created many comments . Let’s now zero in on the key ones and discuss them together . 62 BRIGGS , DE VREEDE , AND NUNAMAKER b . I like you to go through the comments and pin an annotation to comments that you feel are key , that sparked you , that made you think , that changed your perception on the issue at hand , or that best summarize a number of other comments . c . The contents of the annotation itself is not important ; just make sure a ‘pin’ appears in the margin of the comment . d . You may only add ( X ) annotations . 2 . The group reads through the comments and places their annotation pins . 3 . If the group is done placing their annotation pins , invite them : “Please skim through the comments and check out the ones that are ‘pinned . ’ We will dis - cuss these together in a few moments . ” 4 . After the group has placed their annotation pins and read the highlighted com - ments , facilitate an oral discussion during which you invite people to explain why they felt certain comments were key . Organize : RichRelations ( Contributed by Bill Becker , U . S . Department of Defense ) Choose this thinkLet . . . . . . to create a set of categories for organizing brainstorming comments . . . . after any divergence thinkLet and before a thinkLet where ideas will be sorted into categories . Overview Participants browse their brainstorming comments and find two items that are related in some way . They articulate the relationship between the two items , and if the group agrees , that relationship becomes the name of a category . Setup Use Categorizer with the following configuration : 1 . Post the brainstorming comments as list items in one bucket ( category ) of the Categorizer tool . 2 . Display the bucket ( category ) column 3 . Prepare to add a new bucket ( category ) . Script 1 . Say this : a . Please read through the comments on your screen . If you find two more comments that are related in some way , tell me how they are related . COLLABORATION ENGINEERING WITH THINKLETS 63 2 . Add a new bucket ( category ) with the relationship as a label . 3 . Continue the process until participants can find no more relationships . Evaluate : StrawPoll Choose this thinkLet . . . . . . to measure consensus within a group . . . . to reveal patterns of agreement or disagreement within a group . . . . to assess or evaluate a set of concepts . Overview StrawPoll enables you to take the temperature of the group . It lets you quickly find out which preferences the group has and what the level of consensus is among the participants . Setup 1 . Post a set of issues to the Vote tool . 2 . Select a voting method . 3 . Establish the voting criteria . Script 1 . Say this : a . We are going to take a straw poll . We are not making a final decision right now . We just want to get a sense of the group so we can focus our subse - quent efforts where they should be focused . b . I have sent you a ballot containing a set of X items . c . Please rate each item on a scale from Y to Z . d . A rating of Y means . . . e . A rating of Z means . . . f . When you are done voting , click the “submit ballot” button that appears just above the ballot on the left . Build Consensus : MoodRing Choose this thinkLet . . . . . . to track patterns of consensus on a single issue in real time . . . . to know when it is time to stop the talking and make a decision . Overview Participants register their opinion on a single topic , then begin an oral discussion . As they talk , if they hear something that changes their opinion either direction , they change their vote . Results update in real time . Setup 1 . Post a statement about an issue in the Opinion Meter tool . 2 . Open the Opinion Meter on the participants’ screens . 3 . Make sure the group understands the issue . Script 1 . Say this : a . Please register your opinion in the Opinion Meter tool . b . Now let’s talk about the issue . If you hear anything that changes your mind in either direction , shift your vote accordingly . We will keep talking until we’ve reached some sort of consensus on this issue .