Getting Around the Task - Artifact How to Make Claims and Design JOHN M . CARROLL and MARY BETH ROSSON IBM Watson Research Center Cycle : by Scenario We are developing an “action science” approach to human - computer interaction ( HCI ) , seeking to better integrate activities directed at understanding with those dwected at design . The approach leverages development practices of current HCI with methods and concepts to support a shift toward using broad and explicit design rationaIe to reify where we are in a design process , why we are there , and to guide reasoning about where we might go from there . We represent a designed artifact as the set of user scenarios supported by that artifact and more finely by causal schemas detailing the underlying psychological rationale . These sch emas , called datms , unpack wherefores and whys of the scenarios . In this paper , we stand back from several empirical projects to clarify our commitments and practices . Categories and Subject Descriptors : D . 2 . 1 [ Software Engineering ] : Requirements / Specifics - tions—methodologies : tools ; D . 2 . 2 [ Software Engineering ] : Tools and Techniques : H . 1 . 0 [ Mod - els and Principles ] : General ; H . 1 . 2 [ Models and Principles ] : User / Machine Systems—lcu - man factors General Terms : Design , Documentation , Human Factors Additional Key Words and Phrases : Design rationale , planning , user interfaces 1 . INTRODUCTION Here is a perplexing contrast . In the world of science , everything is made as self - consciously explicit as it possibly can be . In the world of practice , many things of critical importance are never made explicit . Indeed , some have raised this to a principle of ineffability , claiming that the most important things cannot be made explicit [ 34 ] . Design worlk on human – computer interaction ( HCI ) is a case in point : lots of scrupulously detailed normal science , lots of implicitly detailed design work . We wish to develop a proactive understanding of the gap between science and practice in HCI . Our approach is to try to build science in the extant practice , to reify the practical ontology of design so that it can be used more deliberately , interrogated , improved , and applied . Authors’ address : IBM Thomas J . Watson Research Center , P . O . Box 704 , Yorktown Heights , NY 10598 ; email : carroll @ watson . ibm . tom , rosson @ watson . ibm . corn . Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish , requires a fee and / or specific permission . @ 1992 ACM 1046 - 8188 / 92 / 0400 - 0181 $ 01 . 50 ACM Transactions on Information Systems , Vol . 10 , No . 2 , Aprd 1992 , 181 - 212 182 . J . M . Carroll and M B Rosson 1 , 1 Developing an Action Science Our project has two goals : to contribute to the development of HCI as a scientific domain and to contribute to the development of design methodology for HCI artifacts . Our interest is to make progress on these two goals conjointly , that is , through the same activity on our part . We propose viewing HCI research as an action science , a science that produces “knowledge - in - implementation” [ 1 , 71 ] , and viewing HCI design practice as inquiry . In part , our commitment rests on critiques of the alternatives : the historically disappointing “normal science” paradigm for HCI research [ 8 , 11 ] and analytic - decomposition paradigm for HCI design [ 14 ] . More construc - tively , we are encouraged by modest success at creating an inquiry - based approach to instructional design grounded in an action science of learning [ 9 ] . But it must be noted that though our orienting commitments are not clearly the standard view of HCI , they are at least implicit in an increasing propor - tion of current discussion about HCI [ 21 , 40 , 41 , 74 ] and about computer science more broadly [ 25 , 31 ] . Historically , basic science and technology development have generally had little mutual impact [ 3 , 39 , 51 ] . The complexity of modern science and technology have created the need for better integration , and one can cite impressive recent examples of action science , particularly in large industrial laboratories . A good example is the invention of the transistor ; see [ 35 , pp . 317 – 319 ] , [ 52 ] , and [ 63 , pp . 177 – 182 ] . The physics of the semiconductor effect was understood well enough to have allowed the development of the transistor as early as 1931 . However , early work was hindered by pursuing too closely the analogy to vacuum tubes and by an oversimplified practical understanding of the semiconductor effect . In “n” ( or negative ) semiconduc - tors , there are many more electrons ( negative - charge carriers ) than holes ( positive - charge carriers ) ; whereas in “p” ( positive ) semiconductors , the nla - jority carriers are holes , and the minority carriers are electrons . However , the practical understanding tended to see n semiconductors as simply negative and p semiconductors as simply positive . In the late 1940s , Bell Labs significantly stepped up work on semiconduc - tors , including the establishment of a small group directed at building a semiconductor amplifier : a practical goal , but one with significant science dependencies and opportunities . The work of this group consisted of embody - ing various hypothesized mechanisms in prototype solid - state amplifiers . Discrepancies in predicted performance were grist for further hypotheses and prototypes . The project culminated in ( 1 ) the recognition that minority - carrier current flow is a major effect in semiconductor devices and ( 2 ) the discovery of the transistor effect ( minority flow induced by one point contact back through another ) . It is moot , of course , whether a richer practical understanding of semicon - ductors , one that kept in view the dual nature of semiconductor current flow , might have allowed the development of the transistor in the early 1930s . But it is clear that technology development can be obstructed by incomplete practical understandings . Our work seeks to promote balanced design analy - ACM Transactions on Information Sysi , ems , Vol 10 , No , 2 , Aprd 1992 Getting Around the Task - Artifact Cycle . 183 sis so that important factors ( the HCI analogs of minority - current flow ) are not overlooked . 1 . 2 Status Our task - artifact framework seeks to enrich the concepts - in - action that HCI researchers and designers work with by rendering explicit the underlying ontology of HCI . Specifically , we construct explicit descriptions of tasks and artifacts in a concrete and psychology - laden vocabulary . We use these de - scriptions as scientific analyses , that is , for explanation and abstraction , but also as design rationale—this is the sense in which we are building an action science . Our approach to task analysis enumerates critical and typical use - scenarios : the things users characteristically want to do and need to do , as well as the momentous events of user interaction ( breakthrough insights and errors ) . All task analysis schemes do this in some sense ; however , ours seeks to identify a “basic” task level [ 59 ] ; we are concerned with tasks at the level people construe their work to themselves : the level at which tasks become meaning - ful to the people who engage in them . Many task analysis schemes focus on a much lower level than this ( e . g . , the unit task of [ 6 ] ) . We believe a good inventory of basic tasks is the best design representation of an artifact [ 15 ] . Moreover , building such a representation has uniqulely empowering design pragmatic . A set of basic tasks are obligatory prerequisites for constructing task - oriented instruction and other user support ( e . g . , [ 9 ] ) and usability evaluation instruments [ 18 , 58 ] . Such a representation makes it more feasi - ble to convey the design to users—both within the design process [ 21 ] and subsequently . In our approach , an inventory of basic tasks , also serves as the fundamental rubric for our approach to artifact analysis . Designed artifacts ( hardware , software , applications , interfaces ) can be interpreted as theories and as embodying myriad specific propositions about their users and the circumstances of their use . For example , a self - instruction manual can be seen as embodying a range of assertions about what the learners know , what they do , what they experience , about the nature of the learning tasks and the contexts within which these tasks are carried out , etc . This view often surfaces in “design memoirs” ( e . g . , [ 66 ] ) , which can play a proactive role in organizing subsequent design efforts by focusing attention on particular issues . However , such memoirs casually confound designer intention ( which may or may not characterize the realized artifact ) and design analysis ( in which assertions are systematically grounded in general laws of psychology , specific user data , or other rationale ) . In our approach , thle psychological design rationale of an artifact - in - use is articulated in causal schemas ( which we call claims ) relating properties of the artifact with specific psychological conse - quences , under the scope of a basic task usage situation . Thus , for example , including open - ended exercises in an instruction manual supports learning - by - exploration for situations in which the learner wonders what sorts of projects might be appropriate to work on . ACM Transactions on Information Sysl , ems , Vol . 10 , No . 2 , April 1992 . 184 . J . M . Carroll and M . B . Rosson Such a “claim” might have been enabled by a manual because the designer intended to do it . However , the claim is neither more nor less true of the artifact in virtue of this intention , and the relevance and truth of the claim vis - a - vis the artifact and its use can be investigated independent of mere intention . Our objective in constructing descriptions and accounts of artifacts and their use is intended to improve the chance that designers will more deliberately manage the causal schemas they embody in their work . The ontology of HCI is a task - artifact cycle ( Figure 1 ) in which designers respond to user requirements ( in the sense of basic level tasks to be enabled or proscribed ) by building artifacts , which in turn present or deny possibili - ties to their users . On the one hand , we seek to support a more thorough and deliberate enumeration and assessment of the basic tasks ( versus designing to an overly narrow or plainly mistaken set of use - scenarios ) and on the other hand to support a more thorough and deliberate enumeration and assess - ment of claim schemas implicit in the design ( versus creating unintended and undesirable psychological consequences for users ) . Our approach is similar to contextualist [ 73 ] , participatory design [ 21 ] , and situated action [ 67 ] approaches in that we conceive computer systems and applications to be rich and dynamic contexts for user activity . However , we are more concerned with developing analytic models for understanding and design . Conversely , our approach is similar to modern efficiency - oriented ap - proaches ( e . g . , [ 6 ] ) in its concern with analytic models and methods , but different in taking the broader - scope perspective on user activity and experi - ence . Our approach differs somewhat from all these approaches in its action science commitment , in integrating the development of HCI as a domain of study with its development as a domain of design practice . We have had reasonable initial success at applying this framework to a variety of problems . A scenario - based claims analysis of the Displaywriter [ 17 ] was shown to reproduce the design arguments underlying the Training Wheels Interface . The methodology guided the development of two View Matcher programming environments for Smalltalk [ 16 ] . Subsequent work applied the methodology to the design of a task browser [ 4 ] , a software design environment [ 60 ] , and an intelligent tutoring system [ 65 ] . Prescriptive design models as “second - order artifacts” [ 12 ] can direct credit - blame attributions to models as well as to exemplars , and thus unify design evaluation and model building [ 18 ] . 1 . 3 Overview The balance of this paper attempts to operationalize the task - artifact frame - work . It is both more and less than an instruction manual because we may not yet know how best to do what we seek to do , and as a result we may raise many methodological and conceptual issues ( perhaps both wittingly and unwittingly ) . The initial discussion in Sections 2 and 3 draws on the Display - writer and Smalltalk case studies mentioned above ; in Section 4 we sketch a more complete example of the whole process , couched for the design of an instructional manual ( which is a less technically demanding design domain ACM TransactIons on Information Systems , VOI 10 , No . 2 , April 1992 Getting Around the Task - Artifact Cycle . 185 requirements tasks artifacts possibilities Fig . 1 . The task - artifact cycle . than Smalltalk programming environments and broadens the application bounds of the methodology ) . 2 . GENERATING SCENARIOS Whether analyzing an existent artifact or envisioning an artifact in design , we begin by generating a set of basic - level task scenarios . Each scenario is a description ( in text , in a storyboard , etc . ) of the activities a user might engage in while pursuing a particular concern . A set of these scenarios is a concrete representation of the use to which the artifact will be put . For any reasonably complex system , the scenario representation is necessarily incomplete ( there is an infinity of possible use - scenarios ) . Yet even though it may be heuristic at best , the analyst and the designer need to have a scenario set that provides good coverage of the possible use - scenarios . 2 . 1 The Empirical Approach One obvious method is to collect scenarios empirically . Of course , observing people or asking them what they do often confounds predictions made on purely analytic grounds . A learner we studied , who was following an exercise to type and edit a lease , made horrendous errors , but continued somehow on the grounds that , not being a lawyer herself , she could not judge what a proper lease ought to look like [ 47 ] . We might have projected the scenario in which she made the errors , but we could never have anticipated the creativity she brought to bear in seeing an obvious and ugly editing disaster as a lease . The problem with purely empirical approaches is two - fold , however . First , they are not merely rich ; they are too rich . They generate unmanageably huge scenario sets with no internal structure , no principle for classifying or ACM Transactions on Information Systems , ~ 01 . 10 , No . 2 , April 1992 186 . J . M . Carroll and M . B . Rosson grouping scenario tokens . They provide no means of saving effort ; each project of scenario development starts with a blank slate . Second , they are necessarily a posteriori . One must already have a system to collect empirical use - scenarios for the system . Often , design work is really redesign , and the scenarios collected after the fact for an earlier system version or level can be used as a priori guides for subsequent versions and levels . Nevertheless , both problems point to the importance of a complementary analytical approach to developing scenario sets . 2 , 2 The Analytic Approach An analytic approach to generating scenarios would start with a theory of the kinds of scenarios there are . These types could be used to organize empiri - cally collected scenarios , but also to generate scenarios . Of course , a theory of scenarios might not classify all empirically obtained scenarios ; it might fail to predict even the majority of obtained scenarios , but still be useful both for generating scenarios more efficiently than a purely empirical approach and for providing systematic insight into the relations among scenarios . We have built a typology of use - scenarios by converging several of our design and analysis projects . The first step was to recognize that basic - level use - scenarios cluster around pervasive user concerns . Indeed , when people construe their activities to themselves as being essentially similar , it is typically because in varying activities they are pursuing the same underlying concern . For example , the new user of a word processing system may want to type and print a simple document . This concern can spawn a staggering number of scenarios , even if we restrict attention to those scenarios in which the user is able to mount a thoughtful , measured , and error - free effort . But many of these differences are akin to the various ways of performing a musical piece . we can appreciate the differences , but we are overwhelmed by the similarities [ 26 ] . Also similar to musical pieces , we have found that scenarios can be classified at multiple levels of abstraction . Thus , the type and print concern for word processor learners can be seen as instantiating an even more general concern learners have with determining how to accomplish goals that they ( think they ) already understand . These abstractions can be very useful . In designing or analyzing a word processor , for example , one can closely link extant psychological design rationales ( e . g . , [ 17 ] ) to new cases ; many aspects of the type - and - print concern are invariant across word processors . More broadly still , one can link analyses and design argumentation generated for how - to - do - it scenarios even across application types ( for example , between learning the Displaywriter and learning Smalltalk [ 16 ] ) . In Figure 2 , we have listed and exemplified six of the most general user concerns from two of our design and analysis projects . The Displaywriter is a word processor with a hierarchical menu - based interface ; we developed a training wheels interface overlay that blocked the advanced functions that tended to attract learner errors [ 17 ] . Smalltalk is an object - oriented language and environment—programming in Smalltalk consists of the reuse and specialization of a rich library of classes ( object types ) . We developed a tool ACM TransactIons on Information Systems , Vol . 10 , No , 2 , Aprd 1992 Getting Around the Task - Arllfact Cycle . 187 orienting to zppropriatc goals . I ) lsplaywrltcr , how cm tt ] is help me write a Iettcr to illorng e , Smdlltdlli reuse wh ( [ a rwr can conlrit ! we 10 m . b > cola } - vzlxin , q upplicu [ i ( m ? intmxting with the cnviromnent ( Jl ) l ? [ ) rtunistically . Ilsplayw nter choosing an npt ] on m the ( ’rcate ( u I { cwsc menu l Smalltalk reuse mnsidering rcuw of the Sh & r class searching under a dcscriptiou * t ) lsplaywritcr jkdmg [ k < > mrnu jiv , wgr [ OJOU1 . Smd ] k + lk reuse , looking for a Ass that snnulatcf , analng alput , iindmg the Shder Imouse cmIvcrsI { m method seeking how - to - do - it procdural information l llspl . lywritcr typing A prmtlng a letter ; formattmg a letter l Smalltdk reuse honking up J Sllder instance to an application , scttmg a slldcr’s rclatlvc width scckiog how - it - works explanatory infarmaticm * I hspktywrit . r finding out ~ vhy noth , ng has hccn prmtd yet ; mfclrlng the mlc of dcf : iult settrags in menus l Smdltdk reuse tindIag out why the slider shows the wrong SAC posltlon . Smdkdk reuse dmxdmg to whclass Sllder , Jctcrnunlng \ vt ] at the spccd ! mtlon shoultl pmvlJc Fig . 2 . A typology of user concerns . The example concerns come from our task analyses of learning the Displaywriter and re - using Smalltalk classes ; the italicized concerns were generated after developing the typology . ( the Reuse View Matcher ) that presented multiple coordinated views of an exemplary application using a target class , allowing a programmer to explore concretely a typical usage situation [ 161 . The first user concern in Figure 2 is : orienting to appropriate goals . The new user of a word processor may know something about the functional capability of such systems , enough to have wanted to switch it on , but may still wonder how the device can help in pursuing document preparation goals , such as writing a letter . Analogously , the Smalltalk programmer understands the black - box reuse paradigm ( e . g . , [ 20 ] ) , but still must determine what specific classes can play a role in the particular project under development . Users pursue a variety of such concerns . They interact opportunistically with the system environment , wondering what the objects they encounter can do and exploring the consequences of various possible actions . They search for things , text - processing functions they imagine might exist , Smalltalk classes and behaviors they think they might need . They wonder how to ACM Transactions on Information Systems , Vol . 10 , No . 2 , April 1992 . 188 . J , M , Carroll and M . B . Rosson accomplish procedural goals , how to format a letter , or how to hook up a slider to a color mixer . They seek explanations for events and relationships they notice ; for example , after losing track of a print job in the word processor queue , they may wonder how the queue works . And they reflect on the design of their own activity , considering how to streamline a word processing task or whether and how to specialize an existing Smalltalk class . Even such a simple and coarse - grained typology can find use as a heuristic generator of scenario candidates . The italicized user concerns in Figure 2 are ones that we did not consider [ 16 , 171 . We generated them from the typology . To some extent , we can understand why these may have been overlooked . The “orienting” concern for code reuse raises a particularly ill - defined version of the classic “aboutness” question ; it is a critical concern , but it is not clear how to address it ; and it is particularly unclear how to address it within an example - based analysis system like the Reuse View Matcher , Similarly , it is easy to imagine a word processor user with the “search” concern , but the Training Wheels design , which hinges on rendering functions nonexecutable , may implicitly discourage a designer from attending to that concern . In these cases it seems that early design commitments ( e . g . , to example - based analy - sis or to state blocking ) can obscure or preempt consideration of plausible user concerns . It is not surprising that a designer’s extant commitments , to a genre such as the View Matcher or to an instructional approach such as training wheels , can create a sort of “scenario bias” ( a term used by Kevin Singley and Steve Payne ) . Clearly , any designer will have incomplete and skewed knowledge of the usage situations to which the design work is targeted ; this is also a source of bias . None of this is a particular problem for HCI design ; it is in the background of all design . However , such biases can operate without being recognized . A common example is the tendency to consider only scenarios of routine and expert errorless performance , overlooking the pervasiveness of user scenarios incorporating slips , mistakes , and confusions [ 111 . Such biases can be mitigated by enumerating paradigmatic types of cases to help ensure that a rich set of possibilities are generated for any particular situation—in - creasing the chance that typical , critical , and appropriate ones will be in that set . Figure 3 illustrates a scenario elaboration of one of the concerns enumer - ated in the typology of Figure 2 ; we have built a story describing a user’s experience of changing an option in the Displaywriter’s Create or Revise menu . The learner responds to the “item” prompt opportunistically , trying out the functionality offered , setting and changing a menu option , and perhaps learning something through the interaction , before moving on . An important use of the typology is to pursue hypothetical “what could go wrong ? ” lines of reasoning . That is , in addition to detailing how the various user concerns of the typology can be instantiated or satisfied , we also detail how they can go awry . Thus , the opportunistic interaction scenario for the Displaywriter can , under certain conditions , become self - sustaining , and result in an option loop error ( [ 9 , pp . 29 ] and Figure 4 ) . This complementary use of the typology emphasizes generating error scenarios , though it still ACM Transact , . ns on Information Systems , Vol . 10 , No . 2 , Aprd 1992 Getting Around the Task - Artifact Cycle . 189 The learner IS on the Create or Revl , se menu which oITers various “items” ( format and storage options ) to be specfled . ‘There is a highlighted prompt “Type ID letter to choose Item ; press Fmtcr “ ; aad aa uuhighlighted prompt “When fmlshed with this ] menu , press Pnter , ” The learner voices aa mtcrest in scemg what “ltcms” are hkc typing the ID letter of a menu item and pressing Enter . A further menu is displayed , listing various “choices , ” with a prompt “Type your chmce , press Enter “ The “choices” are parameter values for the items , for example wuiuus formats The user specifies a choice , and the menu and prompt revert to the mltml state ( I c , , with the original highhghted aad unhighhghted prompts dnplayed ) The learner presses Enter to proceed to the Typing Area ( the next system state ) Fig , 3 . Interacting with the environment opportunistically , as exemphfied in Displaywriter option choice scenario . The leaner is on the Create or Revise menu which offers various “items” ( format aad storage options ) to be specdied . There is a higbl @ ted prompt : “Type ID letter to choose item , press Enter . ” The learner types the ID letter of a menu item aad presses Entcn a further menu is displayed , hstmg various “choices , ” with a prompt . Type your choice , press Enter “ The “choices” are yaramctcr values for the items , for example various formats , The user specdies a choice aud the menu md prompt revert to the mitxd state ( i . e . , w ] th the hlghh ~ ted prompt , “Type ID letter to choose Item ; press Imter” ) . The learner specfles ltcms and choices over and over , changing opt ] oas and then chaaging them back again , The leaner expresses fmstration aad helplessness , can’t secm to see a way out , and feels that she has failed in hcr original goal of typing ancl printing a letter , Comment : The learner does not seem to “see” the emt prompt ( on the screen all the time ) , “When fmtshed with this menu , press Enter , ” ( that is , press Eater withou [ having specified an item ) , Fig . 4 . Interacting with the envmmment opportunistically , as exemplified in the option loop error scenario . undergenerates ( for instance , it might not generate error scenarios very far off - path such as the mutilated - lease scenario ) . We are not attempting to make scenario generation automatic . Using the typology to develop scenarios always requires detailed information andior assumptions about the user’s prior knowledge and the contexts and situa - tions in which the scenarios might arise . Indeed , the most important user concerns for a given design project might well be the ones that do not instantiate any of the concerns in our typology . We see the typology only as a heuristic theory of scenarios and as a tool for systematically reifying one’s understanding of the user’s activity and experience . 2 . 3 Scenario - Based Design At some point , one has to stop just generating scenarios , or at least diversify efforts , and do something with them . To the extent that one is generating scenarios empirically , one might decide to stop when half of the use - scenarios observed are ones that have been seen before ( to be more conservative , one might set the threshold at three - quarters ) . To the extent one is generating scenarios analytically , the stopping rule might be that every category of scenario in whatever typology or theory is being used has been concretely ACM Transactions on Information Systems , Vol . 10 , No . 2 , April 1992 . 190 . J . M . Carroll and M . B . Rosson The learner is on the Create or Revm menu which offers varmus “items” ( format and storage options ) to be specified ‘1‘here N a lughhghted prompt “Type ID letter to choose item ; press Emter “ The learner types the ID letter of a menu Item and presses Enter , a message appears at the bottom of the screen , ‘Change Aftcmatc Format is not available on the Training Ehsplajwriter” , After tg mg sm cral other items , with analogous effects , the learner presses Enter to proceed to the Typing Area ( the next system state ) Fig . 5 . Interacting with the environment opportunistically , as exemplified in Training Wheels option choice scenario . instantiated ( again , to be more conservative , one might decide to stop after generating three exemplars of each type ) . Each scenario should be detailed and developed to capture and explore the finer structure of the operative psychology in the situations of use one has projected and \ or observed . Thus , the scenarios in Figures 3 and 4 have been developed beyond merely enumerating the option choice concern of Figure 2 . This detailing captures more about the knowledge , goals , reactions , and qualities of experience that inhere in the scenario . The learner in the error scenario does not seem to appreciate the optionality of the original prompt ; it is treated as a directive ( i . e . , you must or should type an ID letter ) . Most of the actions that comprise the elaboration of the option choice concern are not relevant to the learner’s goal and are seen by the learner as being nonrelevant . Such detailed scenarios constitute a narratiue theory of the artifact in use . Displaywriter scenarios such as those in Figure 3 and in Figure 4 helped us to envision alternative scenarios such as Figure 5 in designing the Training Wheels interface [ 9 ] . Scenarios have the important property that they can be generated and developed even before the situation they describe has been created . Thus , one might have created a narrative theory of the Displaywriter before it was built , working with story boards , or story board software . If one had had the scenario typology of Figare 2 , one might have generated scenar - ios for the choosing - an - option - in - the - Create - or - Revise - menu concern ; by ask - ing what could go wrong in such a scenario , one might have generated the option loop error scenario in Figure 4 . We believe that use - scenarios can be the principal design representation of an artifact [ 15 ] and have used them in the design of various tools for Small - talk programming ( see also [ 16 ] and [ 60 ] ) . The example scenario in Figure 6 was generated before we ever implemented the Reuse View Matcher [ 621 ; the scenario was a key element in the design specification for that implementation . 3 . CONSTRUCTING CLAIMS The set of scenarios that a designed artifact affords ( and inflicts upon ) its users entrains a set of specific empirical claims enabled by the artifact : claims that the user will attempt and can achieve a given scenario and claims about the psychological consequences of pursuing the scenario . We may ACM TransactIons on Information Systems , Vol . 10 , No . 2 , April 1992 . Getting Around the Task - Artifact Cycle . 191 A rmwammer sws Shclcr in the class hierarchy , aad the name sounds Me it nnght be useful to the current pm ] cct , a CO1O1 - mixing application l’he programmer opens a View hlatcher on it , and sckzts the first example , a football player andysls program A short demo of the football progr ~ m IS shown , and the pmgrammcr sccs that sliders alc being used to mmipul ~ tc player charactcnstic , tlmt predict several player succcss measures “1he programmer recognizes that this sltu ~ tion IS very simdar to the needs of the color - nuxcr , Fig . 6 . Interacting with the environment opportunistically , as exemplified in the sliders scenario ( from [ 16 ] ) . design an instruction manual to support how - to - do - it scenarios such as the basic one in which a learner wishes to follow the manual to type and print a letter . We may add to this the associated what - could - go - wrong scenarios , for example , the scenario in which the learner fails to coordinate events in the system with steps in the manual . Enumerating typical and critical use - scenarios characterizes the scope of an artifact’s use , i . e . , the inventory of basic - level tasks it facilitates and obstructs . The details of each scenario show how and why that scenario was supported or not supported by the artifact . The seen arios provide a represen - tation medium for exploring and altering the designl . However , from an action science perspective , one wants to facilitate design analysis that can appeal to relevant abstractions , that can generalize from prior design projects . The transistor design group wodd not have succeeded to the same extent if they had merely discovered how to produce a particular solid - state amplifier . Their greatest success was discovering the right ab - straction for understanding a broad class of solid - state devices . The analog for us has been the objective of making the implicit psychology embodied in situations of using an HCI artifact more systematically explicit than it is in an enumeration of use - scenarios . We do this by articulating fine - g - rained causal relationships that inhere in situations of use . We ask , “In this scenario context , what might this feature of the artifact contribute ? ” Thus , in the scenarios of Figure 3 and 4 , we can ask what the highlighting of the “items” prompt ( relative to the unhigh - lighted “exit” prompt ) is contributing to the seqpence of events in the scenario , and more broadly to the user’s understanding of the events , the user’s experience of the events , and the user’s subsequent recollection and use of these events . Where scenarios provide a narrative account , claims provide a causal account . The five claims enumerated in Figure 7 comprise the answer offered in our earlier analysis of the Displaywriter [ 17 ] : Each hypothesizes a specific psy - chological consequence of a system feature ( the tw , o prompts , their relative highlighting , and display interaction ) under the scope of the option choice concern . The menu prompts explicitly define an action path for the learner in a manner that is consistent with other menus in the Displaywriter interface . But these causal relations also incorporate potential tradeoffs , or downsides ( in italics ) . The third claim in Figure 7 addresses consequences of highlight - ACM TransactIons on Informatlm Systems , Vol . 10 , No , 2 , Apr , l 1992 192 . J . M . Carroll and M . B Rosson 1 stwdarcl Itcm” and “exit” prompts cue Znd slmphfy menu mtcractlon ( but urrr may not JJCI haw ICen ( IIC [ Iihrr mcnur [ hat uw 1 / 11slcchnlqu < , , and may assume l { [ nd [ ro [ er > omrdting rprrIfic ubou [ duT ~ [ [ ua ( wn ) ~ the Item prompt conveys the pmccdurc for changing options ( bul I ( may lJe mIcIprcicd as a drcc [ we by U . WS who we rcv [ usrd o , unwrr ) 4 conlmucd highlighting [ If the itcm prompt \ uggcsts the continuing . Ipproprialcncss of changing opt ] ons ( but / nay tntihe II hard - r to rrcognlzr t } wzi I ( u alw OK 10 PXIL ) 5 returning the uw to the ( ; rmtc or RCVMC menu lb adequate feedback that m option ch : mge attempt ] s successful ( bul nwy nof bc cmugh jicdbork jor users do me unwr m c @ ~ Icd ) Fig . 7 . Psycholo ~ cal claims embodied in the Dlsplaywriter option choice scenario ( from [ 17 ] ) . ing the item prompt : the possibility of changing options is rendered more salient to the user , but at the cost of rendering less salient the possibility of not changing options . Recall that for the transistor a key obstacle was the failure to appreciate all the properties of the n and p semiconductors ( each type of semiconductor also includes minority carriers , which in the other type are the majority carrier ) . This claim schema is intended to keep attention focussed on all aspects of the psychological consequence . In the scenario of Figure 6 , we can similarly ask what the example application is contributing to the user’s planning , action , evaluation , and experience of the considering - reuse - of - the - Slider - class concern . Interacting opportunistically with paradigmatic examples can provide a powerful learn - ing situation by offering guided discovery in the context of meaningful activity [ 16 ] . In the particular scenario of interacting with an application using a slider , the functionality of the object is conveyed directly and con - cretely . A downside associated with any example - based learning claim is that concepts induced from examples are often overly narrow . A downside specific to the reuse scenario is that users could have trouble isolating the slider’s functionality in the football example . 3 . 1 Generating Claims Making a claims analysis is an analytical process that involves generating and evaluating a set of candidate claims . The chief empirical source for claims , as in the case of scenarios , is observation and analysis of user reports and behavior . But whereas a scenario set is merely an inventory of the typical and momentous things that users do , a claims analysis seeks to get at just how the artifact suggests to users that they do something one way or another , how it supports and fails to support their efforts , and how it signals progress and error . Thus , for the option change scenarios , the deployment of highlighting , the specific wording of the prompts , the immediate effects of given user actions all convey crucial meanings to the user , and together these can conspire to ACM Transactxms on Information Systems , Vol 10 , No 2 , April 199’2 Getting Around the Task - Artifact Cycle . 193 cause the scenarios of Figure 3 and Figure 4 . The scenarios are integrated descriptions of what can happen to the user , and as such they are important pieces of information for understanding the Display writer and , of course , for redesigning it . A claims analysis goes further ; it offers an explanation of the scenarios , an analysis of why the scenarios can occur . We use the schematic structure exemplified in Figure 7 to stress that a claims analysis is an analysis of tradeoffs : ( artifact feature or technique ) CAUSES ( desirable psychological consequence ) BUT MAY ALSO CAUSE ( undesirable psychological consequence ) . 1 We want to transcend both the uncritical advocacy of design memoirs and the unsympathetic negativity often associated with human factors evaluations . Similar to Rittel [ 57 ] , we assume that the key issues pertaining to a design will involve both arguments for and against . Because a claims analysis juxtaposes the positive arguments or desirable psychological consequences for an artifact feature with its associated qualifications or downsides , it provides a medium for combining the traditional strengths of designer justifi - cation and usability evaluation . Error scenarios such as Figure 4 seem to be particularly good claim generators . When one sees another person snarled in some misconception or unfortunate sequence of actions , one naturally asks “Why ? ” In the option choice scenario , one might say that the user was misled by the highlighting . But to stop there would misgauge the role of the highlighting ( e . g . , in conveying to the user the possibility of altering multiple options ) . Thus , the prominence of downside consequences in error scenarios can be a sort of bias and could lead to thrashing . In complex situations there frequently are not unique causes ; if we make a directly remedial design change each time we identify a downside , we will often undermine desirable consequences that might have been less prominent ( at least , perhaps , until we have ill advisedly disturbed them ) . Of course , we should exploit the strikingness of error scenarios in helping to call attention to causal relations , but we also need to avoid focussing too narrowly on only certain causal relations in a complex situation . The claim schema , by balancing the desired and undesired entailments of an artifact feature , supports this . More generally , we can broaden the focus of a claims analysis just by generating lots of claims . lNota bene that this schema is to be interpreted as under the scope of a use - scenario . In some presentations ( e . g . , [ 16 ] ) , we have incorporated situation descrl ption into the identification of artifact features and techniques , which is redundant but perhaps clearer . For a 1earner exploring the Smalltalk environment opportunistically , we hypothesized : exploring demos helps new users learn by doing ( but offers little for the user to do ) ( but the demos may not be paradigmatic application nlodels ~ ( but learners may have difficulty finding the corresponding code ) Striking the word “exploring” fits the claim schema better and is less redundant vis - a - vis the situation of use . ACM Transactions on Information Systems , Vol . 10 , No . 2 , Aprd 1992 . 194 . J . M . Carroll and M . B . Rosson Figure 8 lists questions one can ask to generate claims from observed scenarios . We built this list by considering Norman’s stage theory of action [ 55 ] . For each stage , we imagined the general kinds of psychological conse - quences an artifact might have , translating those possible consequences into questions that one might ask about the artifact . The question list can be used similarly to the user concern typology in Figure 2 ; that is , for a given artifact , one can try to instantiate one or more claims from each question in the figure . For example , the first question under “Goals” in Figure 8 directs our atten - tion to how the artifact suggests a possible goal and in that sense generates claim 4 of Figure 7 ; the first question under “Evaluation” in Figure 8 directs our attention to how the artifact conveys completion of a task and thereby can generate claim 5 in Figure 7 . Generating claims directly from scenarios is demanding . However , given a literature of claims analyses , there is a supplementary method : analogy . In our work , we frequently refer to earlier analyses for suggestions . Particular scenarios , artifact features , even types of applications tend to be associated with particular claims . One has to be careful about overestimating the utility of this method : we may be unusually narrow designers ( it seems that almost everything we design involves example - based learning ) . But then this might not be so atypical . At the least , the possibility of creating apt analogies from one claims analysis to another indicates that this kind of description and analysis can cumulate and generalize . A stopping heuristic for claims generation is suggested by Figure 8 and by the relation of claims to scenarios . A claims analysis has attained reasonable completeness when it provides some causal account for each critical and typical scenario . One can use Figure 8 to ask whether a given causal account covers every relevant stage of action in a scenario ; in fact , one can do this by just posing each of the questions listed in Figure 8 . This heuristic will typically lead to a large set of claims , but the claims might be prioritized , first by ranking scenarios with respect to criticality and frequency , and then by ranking individual claims within each scenario according to the importance of their user consequences to the given scenario ( e . g . , weighting consequences involving high - level goals more heavily than those involving low - level goals ) . 3 . 2 Justifying Claims In problem solving , generation is the hardest stage . However , once one generates a set of claims , the next step is to justify them . Because our concern is to develop an action science approach to HCI , we have focussed on justification by deductive linking to scientific principles . For the most part we have limited our consideration to psychology , though clearly other sciences are relevant ( economics , sociology , physics ) . Moreover , we must often settle for less than real deduction ; basic science , and psychology perhaps more so than most , often leaves boundary conditions inadequately specified . This is the conundrum of getting from the laboratory to the real world ; the only general solution for it is a theory of the world . Our framework bounds the theory - of - the - world problem : we depend on basic science only for justification of claim consequences . In cases for which ACM TransactIons on Information Systems , Vol . 10 , No , 2 , April 1992 Getting Around the Task - Artifact Cycle . 195 goals l How does the artifact evoke goals in the user ? . IIOW does the artifact encourage users to impoti pre - existing task goalso intention l HOW does the artfact suggest that a particular task goal 1s appropriate or inappropnate ? sunple or dficult ? basic or advanced ? risky or safe ? . What inappropriate goals are most hkely ? most costly ? speciticat ion . What distinctions must bc understood in order to decompose a task goal into methods ? how sre these distinctions conveyed by the artifact ? l What plznning mistakes are most hkelyy most costly ? * How does the artifact encourage the use of background knowledge ( concepts , metaphors , skills ) m pknmmg a task7 execution . IIow does the tiifact make it easy m dtilcult to perform a taslk7 l What slips are most likely ? most costly’J l EIOW does the srtfact mdlcate progress m task performance ? perception . What are the most mhent features of the atifact ? what do these features communicate to the user7 l What features are connnoxdy missed and at what cost ? l What features of the artifact change as users carry out a task ? what do these changes communicate to the user ? interpretation . How does the artifact guide the user to make correct inferences ? l What incorrect inferences are most likely ? most costlyv l I Iow does the tiifact encourage the use of background knowledge in making inferences ? evaluation . How does the artiact convey completion of a task ? l How does the artifact help users to recognize , diagnose and recover from emurs ? s How does the afiifact encourage elaboration and retrieval of tw , k goals and methods ? Fig , 8 . Questions to ask in generating claims , organized by Norman’s seven stages of action [ 55 ] . there is no relevant science , our approach converges with deliberately ascien - tific , argumentation approaches ( e . g . , [ 19 ] ) . In other words , we are working toward grounding claims in science , but if the science lets us down in the end , we still have the claims ; and our design arguments still proceed ( justified in this case only within the design context itself and by the utility of the design result ) . We also hope that by linking scientific justification to a design argument , we can improve the relevance of the science itself . Simon [ 64 ] suggests that psychology is a science of adaptation to artificial circumstances . Thus HCI is a good venue for basic psychology . The justification we build for claim ACM TransactIons on Information Systems , Vol . 10 , No . 2 , April 1992 . 196 . J M . Carroll and M . B . Rosson consequences , even if we fail to import anything of value from official academic sources of psychology , is psychological analysis nonetheless . If it proves eventually to be both useful and abstract at all , it is psychological science . In other words , we can try to give some science back to psychology . Finally , whether or not we are in the position of linking psychology to claim consequences , we believe it is important not to give up the possibility of linkage . If we do this , we are surely on the slippery slope of design memoir with little to ground our descriptions of a design but our intentions , our common sense , and , at length , the empirical bottom - line of a design result . We might not be able to do better than this , but we ought to try . Much psychological theory can be adduced to back up the claims of Fig - ure 7 . For example , the advantages of structural consistency in learning were developed in Esper’s [ 22 ] work on artificial languages ( see also [ 7 ] ) and in Thorndike’s [ 70 ] work on common elements ( see also [ 36 ] ) , The tendency of persons in low - power roles to take suggestions as directions , the downside of the second claim in Figure 7 , is also a fairly broad and basic finding [ 32 , 49 ] . The tendency for the relative salience of one entity in a perceptual field to undermine the salience of others ( claim 4 ) is developed in Gestalt theories of figare / Wound organization [ 38 ] and in more modern theories of attentional limits [ 37 ] . Finally , the parsing problems associated with determining the ending of a sequence ( claim 5 ) are very general [ 29 ] . Claims are not justified in isolation , either from one another or from the use situations they describe . Besides linking consequences to abstract phe - nomena , we seek to “interrogate” the claims themselves . One rule of thumb we use is to deny the causal consequence and reason from this toward a “contradiction . ” This is a logically degenerate form of reductio ad absurdum . The highlighting claim in Figure 7 , for example , can be denied as “highlight - ing the item prompt makes the possibility of changing options less salient . ” This seems overwhelmingly implausible , and hence encourages some coni - 3 - dence that the original ( undenied ) claim was right . Or , recall the example - based - learning claim of the what - do - sliders - do ? scenario . Denying the causal consequent would yield the new claim : “paradigmatic examples of an object’s use do not support the analysis of its functionality . ” It is difficult to find a truly paradigmatic usage example that fails to convey something about an obj ect’s functionality . As with any heuristic , one must be careful about using this method too mechanically . Its strength is that it takes a single claim and generates a set of variant claims not all of which are likely to be true . Thereby , it poses questions to the analyst that in our experience have often led to the rejection or tuning of a hypothesized claim . Another heuristic that can help the analyst confront candidate claims is to collect and group consequences that bear tradeoff relations . For example , claim 3 in Figure 7 addresses both desirable and undesirable salience conse - quences of the relative highlighting of prompts . Grouping these together into a claim schema helps the analyst confront both sides of the tradeoff and thereby the pertinence of the claim as a causal account of what could be salient to a user in an option change scenario . Indeed , a measure of how well ACM Transactions on Information Systems , Vol . 10 , No 2 , April 1992 . Getting Around the Tas } f - Artifact Cycle . 197 consequences are grouped is the extent to which the resulting claim schemas are effective in provoking inquiry . Note that nothing deep hinges on the labeling of consequences in a claim schema as desirable and undesirable ; this merely provides a heuristic way of organizing claims that bear a tradeoff relation . An alternative to this schema is to merely enumerate the implicit causal relationships engendered by an artifact and list them alphabetically . But collecting related claims into a more encompassing schema makes it easier to compare and contrast the bases of relations . Fronting the desirable consequences helps the designer or analyst keep track of what has been accomplished in the design—claims currently regarded as true and desirable . Italicizing the undesirable downside claims helps to call attention to aspects of the design that may still require work , more analysis , or redesign . The heuristic of grouping related upsides and downsides has the benefit also of helping generate a more thorough psychological design rationale ; i . e . , if one has a claim without a downside or , perhaps , without an upside , one may be moved to more aggressively ask why and to focus more on what the complete rationale could be . z There is no guarantee that there will be an answer to the question , but in our experience there often is an answer ; and making that bit of rationale explicit helps get out the relevant issues : it is minority and majority current flow in semiconductors again ; we do not want to make the mistake of thinking that only the most obvious claims matter—quite often it is just the reverse . Claims analysis is neither system modeling nor user modeling . Indeed , we feel that separating these two is responsible for the lack of impact either has had on design and design analysis . Our interest is in keeping all the key components causally linked . A system model that organizes artifact features without causal commitments to specific psychological consequences for users is of little interest for HCI design or design ana ~ ysis ; a user model that systematizes psychological capacities and experiences without causal commit - ments to specific artifact features is also of little interest . 3 . 3 Using Claims In Scenario - Based Design Claims analysis can produce situated explanations of predecessor artifacts , and these understandings can be used to envision and to craft new scenarios and new artifacts . The amount and fidelity of information that can enter into a claims analysis will be greatest for artifacts and situations that have been implemented and deployed ; in such cases , analytic work can be enriched and complemented by empirical observation . However , the method loses little when applied to artifacts and situations that are only designs and not yet implementations ( though we may be less likely to discover shocking causal 2There may be several different sorts of trading relationships . For example , psychological consequences derive from variables known to covary , a richer clisplay will always be a more complex display . In others , the trading relationship is more poorly uncferstood . Example - based documentation may produce in the learner too narrow a concept , but it is not clear how the degree of example paradigmicity contributes to or mitigates this tradeoff . ACM Transactions on Information Systems , Vol 10 , No . 2 , Aprd 1992 . 198 . J . M . Carroll and M . B Rosson relations strictly by analysis , just as we may be less likely to analytically generate shocking scenarios such as the mutilated lease ) . Thus , claims analysis can be strongly proactive in the sense that it can be used to develop and iteratively refine explanations of artifacts that do not yet exist . This sort of use was illustrated in the development of the Reuse View Matcher [ 16 ] . Our use of claims analysis in scenario - based design is similar across evolution from an existing artifact and iteration within an artifact under design . Our basic gambit is to remove , mitigate , or alter downsides ( undesira - ble consequences ) while maintaining or strengthening upsides ( desirable consequences ) . This is easy to say but more difficult to do for two reasons . First , one does not alter claims directly . Claims are causal relations between artifacts and users . We want to improve the consequences of the artifact for the user , but we can do this only by altering properties of the artifact . The claim schemas guide our attention to relevant artifact features and make explicit the underlying tradeoffs for the user that inhere in using the artifact . We can reason backwards , denying a downside , maintaining or strengthening its upside , and projecting a change in the artifact ( for example , a change in Displaywriter highlighting ) that could bring this about . But we can only alter what is of real interest to us ( the user consequence ) indirectly . The second reason that claim - driven design can be difficult is the problem of nonunique causes . Suppose we focus our design attention on a particular claim , wishing to improve the consequence for users in some specific way . We turn to the causally relevant artifact feature , reason about its upsides and downsides , and make a design change , which may lead to a new claim . How confident can we be now that the new claim is justified ? The answer depends , at least in principle , on every other claim embodied in the use of the artifact . This web of causality does not adhere in claims analysis or any class of method ; it inheres in the nature of design [ 57 ] ( see [ 10 ] and [ 13 ] for related discussion ) . Claims analysis provides a vocabulary for reasoning about causal relations between persons and design options . This vocabulary directly links the classes of things the designer can actually alter ( namely , artifact features ) with those things the designer really cares about but must alter indirectly ( namely , the consequences for users and their basic tasks ) . Designers will try to do this anyway ; they have no choice . However , when they do not have a detailed representation , such as a claims analysis , they will use whatever they do have , namely the ( inarticulate ) artifact features over which they have direct control . Thus we will revisit the Displaywriter and Smalltalk reuse claims and illustrate how claim - based reasoning can play a role in design and , in particular , how it can manage the two difficulties of indirection and nonunique causes . To mitigate the downside of the highlighting claim in Figure 7 , the high - lighting might be removed or the scenario redesigned so that the user’s attention is not so strongly drawn to the item prompt . More dramatically , we could consider scenarios in which the item prompt is not even presented ; after all , for new users of the Displaywriter , resetting options is one of those ACM TransactIons on Information Systems , Vol 10 , No 2 , Apr , l 1992 Getting Around the Tasl ( - Artifact Cycle . 199 unrecommended activities . However , taking this approach has other conse - quences for the user . For example , the item prompt and the exit prompt are standard dialog components in the Displaywriter interface ; hence , altering their relative highlighting or their appearance at all has global consistency consequences ( i . e . , undesirable consequences in other use - scenarios ) . Even within the scope of the option choice scenario , there are consequences ; i . e . , without the item prompt the procedure for changing options would never be presented ; without continued highlighting of the prompt the continued possi - bility of changing options would not be clear , etc . In sum , these approaches mitigate a particular downside , but they do this by moving the tradeoff elsewhere , possibly worsening the net consequence for users . One can develop this line of argumentation to derive the redesign move that was actually made in this case , namely , the development of the Training Wheels interface [ 17 ] . This solution involves a global mode for the system in which requests to the item prompt are intercepted and trigger a special “blocking message” ( for example , “Change Alternate Format is not available on the Training Displaywriter , ” recall Figure 5 ) . This solution is not without some cost ; the learner who wants to change alternate format from within the Training Wheels interface will be frustrated . Nevertheless , the design argu - ment and experimental studies indicated that this design move is effective and pleasant . In designing the Reuse View Matcher , it was salient to us that when programmers wondered what some class ( say , Slider ) could do in the context of an on - going project ( an opportunistic interaction scenario ) , their decision to reuse the class typically involved instantiating it ( e . g . , in a workspace ) , perhaps embedding the new object in a context of use , and then exploring its behavior and its possible contribution to their project . We summarized this in a claim schema : an instantiated object supports discovery of its functionality ( but firlding or creating a representative instance ma - v be difficult ) ( but trying out indiu ~ dual messages may be tedious or distracting to ongoing work ) In our design argumentation , we tried to maintain the upside of learning from an instantiated example , but mitigate the downsides of having to do the instantiation and orchestrate an illuminating example , We reasoned by analogy to our View Matcher for learning that we might offer the user prefabricated , paradigmatic examples , examples cri ~ fted to illuminate the typical use of the target object and animated to minimize the potential distractions to a user who , by assumption , was interested in using the target object in some oth w - on - going project . This line of design argument converged on the scenario in Figure 6 and ultimately in the Reuse View Matcher system [ 62 ] . New scenarios such as this , and the eventual artifact , entrained changes in the claim : paradigmatic scripted demos that use an object help programmers analyze its functionality ( but the concept induced might be too narrow ) ( but users may have difficulty isolating the target functionality ) ACM Transactions on Informatmn Systems . Vol . 10 , No . 2 , April 1992 . 200 . J . M . Carroll and M . B . Rosson The original downsides have been mitigated , though they are superseded by other downsides ( see the earlier discussion of example - based learning tech - niques ) . That tradeoffs remain is unremarkable ; the key point is that the claims representation allowed us to keep track of where we were with respect to these upsides and downsides , to deliberately and selectively work on specific issues in the design , and to assess our work . It is said that the objective of building a principled methodology is that one does not have to think ; the thought required is preempted just to the extent that the principles of the methodology do some work . This orientation can easily get out of hand , as in the notorious search for a figure of merit in traditional human factors . One wants to get work out of an action science approach , but one neither expects nor wishes to have a rich and complex decision space conceptually bleached . 4 . THE TASK - ARTIFACT FRAMEWORK : AN EXAMPLE In the foregoing two sections , we have presented the main representations and techniques for scenario - based design and for constructing psychological design rationales . In this section , we exchange the analytical view for a more synthetic development ; we sketch the “information flow” [ 10 , 75 ] in a gedanken design project . We describe the design of an instructional manual for a word processor . First , we generate scenarios ( that is , we make a basic - level task analysis of the domain ) . Second , we use the task analysis as a rubric for investigating the psychological design rationale for an existent manual ( artifact ) . Third , we use the claims analysis to drive the design argumentation to produce a new manual design ( that is , a set of redesigned use - scenarios ) . Finally , we assess the design project by developing psychologi - cal design rationale for the new manual . ( This example is a pedagogic reconstruction of our early work on the Minimal Manual [ 9 ] . ) 4 . 1 Generating Scenarios In Figure 9 the scenario typology of Figure 2 is used to generate a list of candidate scenarios for a word processor’s instruction manual . As “orienting” concerns , the user may wonder about the kind of instructional situation this is and just how the manual will help in accessing and using the word processor’s functionality . The user may refer opportunistically to the manual , wondering how to make the screen match a given figure on a given page , seeing a function referred to in a summary or review , and then deciding to practice or explore that function ( out of sequence ) . The user may search for terms in the manual or for concepts without being sure of the correct term . In conventional manuals , the user may wonder how to follow instructions and may be unsure about how to coordinate the manual with events in the system . The user may not always immediately see how the manual works , for example , with respect to typographical conventions , and even so , the user may reflect on the rationale for the manual ( perhaps wondering why certain activities and not others were selected as exercises ) . Finally , the user may ACM TransactIons on Information Systems , Vol . 10 , No 2 , April 1992 Getting Around the Task - Artifact Cycle . 201 orien tin * to appropriate goals l how should 1 use this manualq l how can this help me tind out how to wrtte a letter t { ) Mom ? interacting with the cnvimnmcnt opportunistically . using an appcahng figure in the bcmk as a goal . skipping ahc ~ d to the “rcfhrmatting” chapter scarcking under a description . Iookmg for the print” procedure e matchmg the screen state to some figure in the book l finding information on the thulg that corresponds to a clipboard seeking how - to - do - it pmccdural information . following steps to type and print z lctkx . following a prompt to check the screen for feedback seeking how - it - works explanatory information . infernng what text indentation sigmtles . understanding why It is useful to practice creating a kasc . conjecturing why the “print” pruccdurc was repeated reflecting upon and crafting me’s own work . annotating and highlighting the index . Iearnmg to ignore indented text Fig . 9 . Scenarios for an instruction manual generated from the typology . reflect on his or her developing skill , about how tasks can be simplified or enriched , what can really be skipped , and what is really important . Of course the typology will undergenerate , preserving an incentive to augment the scenario set with empirically attested scenarios—for example , the infamous lease mutilation scenario ( see also chapters 2 and 3 of [ 9 ] ) . 4 . 2 Psychological Design Rationale for a Manual Given a decent scenario set , we try to expose and codify psychological explanations for why the scenarios can occur . Consider the central orienting - to - goals and how - to - do - it scenarios in following the manual to type and print a letter . ( We are assuming a self - instruction manual exemplifying the “sys - tems approach” of [ 28 ] ; again for more details see [ 9 , chapters 2 and 3 ] ) . The learner seeking to create and print a letter is immediately confronted by supporting material that does not directly bear on the type - and - print concern : a description of the workstation hardware , explanations about magnetic storage devices , pointers , displays , and an orientation to the use of word processing equipment in office settings . The learner defers the type - and - print goal to read through ( some of ) this material . The learner confirms that all the system components are present . At length ( about 25 pages later ) , the learner reaches the procedural part of the manual and is introduced to the use of menus and command keys through some elementary exercises . The learner scrupulously follows each instruction , occasionally feeling some frustration at ACM TransactIons on Information Systems , Vol 10 , No 2 , Apr ] l 1992 . 202 . J M . Carroll and M . B . Rosson not making more rapid and tangible progress and occasionally wondering what other things could be done with the screens and menus involved in the exercises , but basically confident that the manual “knows” what it is doing . After three chapters of this , the learner successfully prints out a first document . Figare 10 presents claims that generalize and abstract hypothesized causal relations between features and techniques of the manual artifact and conse - quences for a learner pursuing the type - and - print concern . Perhaps not all of the downsides in Figure 10 are exemplified in the type - and - print scenario described above , but it is easy to imagine that they might have been ( see [ 9 , chapters 2 and 3 ] ) . Each of these claims could be constructed by asking the questions of Figure 8 . The first claim is suggested by the third question under “Specification , ” asking how the artifact encourages the use of background knowledge in task planning . The second claim is suggested by the first question under “Specification , ” asking about the distinctions needed to de - compose task goals and how these are conveyed . The third claim is suggested by the first question under “Interpretation , ” asking how the user is guided toward correct inferences . The claims can also be justified by the laws of basic psychology : for example , with respect to claim 1 , many studies describe the role of mental models and advance organizers in learning and exercising procedural skills ( e . g . , [ 21 and [ 301 ) ; some have characterized specific boundary conditions on the utility of mental models [ 33 ] . With respect to claim 2 , separately practic - ing skill components can simplify the learning of a complex skill [ 28 ] . However , making errors during learning can also corrupt what is learned [ 69 ] , and some skill decompositions do not prepare learners to apply what they know in performing a whole skill [ 42 ] . With respect to the third claim in Figure 10 , the utility of closely coordinat - ing feedback with learner actions to facilitate performance has been described [ 46 ] . But undermining the learner’s control of the situation can obstruct learning [ 72 ] . Of course , the analysis merely sketched here would be carried out to greater detail in a real design process and would be carried out for several or many different scenarios ( as in Figure 9 ) . As we proceed , we confront hypothesized consequences of our claims to try to generate new perspectives and considerations . We reason counter factually about the hypothesized claim consequences as a sanity check on the analysis ( e . g . , asking whether having instructions and action in lock - step contiguity do not help the learner know just what to do and when ) . 4 . 3 Scenario - Based Design of a Better Manual The claim representation can be used to fathom the design space and to orient redesign work concretely and comprehensively ( again pursuing the transistor analogy , we move on to the task of designing a solid - state amplifier with an explicit theory of semiconductors—including an explicit inscription about minority carriers ) . Our first heuristic is to focus on the downsides of the claims ( in Figure 10 ) , asking how we might redesign the type - and - print scenario to mitigate these downsides . ACM TransactIons on Information Systems , Vol . 10 , No , 2 , Aprd 1992 , Gethng Around the Task - Artifact Cycle . 203 I a structural clcscr ! ptlon of major system c ( nnponcnts mnvcys ~ mental model of how the dcwcc works ( \ vhich may help ground or rationalize the Icarncr’s umierstmdmg of how , to use it ) ( [ Ju ( [ he cfrwfwal derc , zpt ! m ma } dzrfract [ II . Iw , , Ic , , mg ~ fi - u , slrafe [ h . 10 . WWLY roncwri wi [ h [ j , , mng and prmllng , and may rmzpb Jui [ [ o wppm f uw [ jr dIc devh ? ) 2 decomposing “typing and prlntlngr’ ink component steps and tminmg cwh of these m turn allows J mmplcx target ohjectlvc to he systematically hudt u [ ~ from parts ( [ Ml IWJVW r m ~ y noI ! o / wa [ r such r < Iir pr < jgra } ntnr , r , m - may mzh c C ? f17rr WIIICA rot r7 @ w4ut rr karncd ) ( k ( lILIT mxcmiza [ [ on may no [ facih [ a [ c reirieval and appllcw { on m rcol IUrk rci [ mgy ) 3 kmpmg directive in , tructmns and learner zctlons m Iock . step cont } { < ully allows the Imnwr to know cmctly what to do and when ( pmmotmg confidence and curtallmg unccrtamty ) ( [ z < ( [ ius does nof pwmo [ c IeJ7ec / ion or ana ~ , ~ u on [ hr pczr / of lIIC Iwrwr ) ( hul lrczrnmf mu , ll rrlinqui , rh . onlrolj Fig . 10 . Claims embodied in the type - and - print - a - letter scenario . Thus we ask how the description of system components can be less of a distraction , less of a frustration to a user with a how - to - do - it concern ; we ask how it might be made more directly useful to someone pursuing that concern . For example , we might consider a type - and - print scenario in which the system description is minimal , perhaps a single picture or diagram . In this scenario , the user quickly scans for information of possible relevance or interest and more fluidly moves on to the how - to - do - it procedure . With respect to the second claim , we ask how the instructional sequence could be made less rigid , how the occurrence of errors can be managed so that mistakes are not made , or at least are not misinterpreted as events of instruction and learned ! We ask how the practice can better facilitate re - trieval and application in real task situations . For example , we might envi - sion scenarios in which the instructional sequences are more flexible , allow - ing users to follow procedures more loosely . We consider scenarios in which the procedures to be followed are designed to appear to the user intrinsically structured ( an analogy with the way old - fashioned specification selection errors were obviated by graphical interfaces ) . We imagine scenarios for error blocking to preempt confused interpretations and untoward learning , scenar - ios for error detection , diagnosis and recovery to streamline the process of getting back on track , and scenarios for providing post mortem commentary to clarify how errors were made and how they can be avoided in the future . And we consider scenarios in which potential contexts of real application for a skill being practiced are suggested or scenarios in which the practice occurs in the context of a real task . With respect to the third claim in Figure 10 , we ask how reflection and analysis might be promoted for the learner and how the learner might be encouraged to feel more control . We imagine scenarios in which concept reflection questions or suggestions are intermittently presented to learners throughout the manual . We consider how the illusion of control might be projected to learners or how more real control might be introduced . ( Again , this sort of reasoning process would be carried out for many more claims ; ACM Transactions cm Information Systems , Vol . 10 , No . 2 , April 1992 . 204 . J . M . Carroll and M . B . Rosson indeed , each line of scenario reasoning sets constraints for all the other possible scenarios , which in effect structures and simplifies the design space in which one ends up working . ) The flip side of our heuristic is to maintain or strengthen the upsides of claims , to capitalize on the desirable consequences for users that might have already been secured through given artifact features and techniques . We want to present some structural description of the device to convey a mental model to support learning procedures . We want to decompose the target skill into components , each of which is more easily learned than the whole skill . We want to keep the learner’s reading in the manual coordinated with the learner’s interaction with the system . As we proceed , we try to balance this diversity of requirements in the set of use - scenarios we design , reiteratively assessing the impact of design commit - ments on the design goals and relations embodied in the claims analysis . The scenario in Figure 11 shows part of one design solution ; a set of such scenarios—sufficiently developed—could serve as a design representation for a new manual . 4 . 4 Understanding the New Design We are not only after artifacts though . We want to understand how and why the new manual may be better . 3 Having only just envisioned the new and perhaps improved artifact , we ask more skeptically what is really at stake in this design . Having tried to strengthen and develop desirable consequences for the user and eradicate undesirable ones , we try now to make explicit the inevitable tradeoffs that inhere in the new design . One of the key properties of true design problems is that they are never finally solved ( e . g . , [ 57 ] ) , and our method is deliberately directed at creating possibilities for conversation and consideration , denying the illusion of closed cases , and keeping the open issues in view . Figure 12 presents a claims analysis for the piece of the manual design we have been discussing . The first claim is a simple case . The course of the design argument addressed the downsides of the corresponding mental - model claim in Fig - ure 10 , controlling the potential problems of distraction and frustration brought on by a long introductory section , but introducing potential problems of inadequate information . This is a very typical case in which designers move along a curve , trading off one downside for another . The value added by an explicit claims analysis , even in such a simple case , is that the designer is disabused of seeing what happened as merely moving in the design space from a bad situation to a good one and at the same time is confronted with open issues ; to wit , how bad a problem is it that the user cannot diagnose system errors ? How can the user be assured that the minimal structural description is adequate ? 30f course , the new manual was better actually , and for the reasons enumerated here , among others ( see [ 9 , pp . 143 – 186 ] ) . But this is incidental to the present discussion , ACM Transactions on Information Systems , Vol . 10 , No 2 , April 1992 Getting Around the Task - Artifact Cycle . 205 The learner qmcld y scam a lahcled chagram of the major system cc mpunents , noting corrc - spondeacc w ] th the system bcmg used and assoclatmg generaf funct , , onaf K ) lCS w , th some of the major parts Some other general infmmat ] on about using the manual , starting the system , and recovering from errors ( on the next 3 pages ) is only aoted m passing ‘Ihe next 9 pages dctd the type and print pmc . dure , the chapter suhhcadings arc named by the major menus and command cnvmmments accessed in the proccdur . ‘l’he pmuxfur . s are couched at a lcvd that compels the learam to notice , rcmcmbcr , and reason about details ( for example , the second time the mm mzds to usc the Typing ‘1’zsks men” , the hstructlc > n merely s ~ ys get to the Typing f‘asks menu , ’ leaving gcneratlon , rcm Ucctl an , m’ search for the procedural dctads to the learner ) , The manual presents a continuous typing and printing project wlthm whlcb the learner is presented with the core functions lJ . vents on the screen and passages ia the manual arc ex - plicitly coordinated by interrogative prompts ( “Can you find tfus prompt on the screen ? ” ) The learner reflects on ~ vhat IS happcnmg in the sltuatmn , and at one point not ! ces that the prompts do not match ‘ [ ’he learner glances up a few lines in the text and notices a spccizd dingbat indicating situation - specific cnor rccove ~ reformation , and follows the recovery pro - cedure Every few p ~ gcs an open - emfcd “on your own” exercxse n suggested ( ’Type a letter to a frlcnd “ ) ‘rhc learner chooses to undertake one of these tasks and SPWKJS S . VWJI mm”tes planmng and crcatmg a pcrsomd document Fig . 11 . A redesign for the type - and - print - a - letter scenario . 1 a mmlmd structured dcscrlptmn of the major systcm components ( a labeled graphic ) conveys an adequate mcmtal model of how the device works to support lc ~ mmg how to Usc It ( hut ihc rtrurtw al dcsrrip ! km mu . v he too mcomplrte fur wine purp [ , m . r g , diagno ring Yj sfem pr oblrm r , or may [ cm P Tome [ earner c w , orripd dta [ ( key C { O KU understand enough to go on ) ~ ckxmmposmg “typing and pnntmg” Into the key menu and command enwronmcnt com - ponents , hut training the cntlrc coherent procedure , allows a complex target skill to he analy ~ cd and synthesized at the same time , and may thcrchy h ~ ~ th speed up initial lcarmag and facihtate subsequent rctrlcv ai and applwatmn m reaf task SCItings ( bul [ CCUnrr , r turd 10 ! yS ( Ctn , ! - , St @ C lt ? C ( } UC ( l ( M could hP made unr17 } r @ ’lab [ e o } wmotq ; drm hy no [ . swmg rmnpmzrn ( ~ CII - LUL ! V , spli [ OU [ from one ww [ hcr fir . wpura ( c m lrur [ n , na [ prc , ~ - mfuiifm ) ( hut leatmv , r could fm over wh ~ [ med h ~ [ he contextual dc [ cnl of a real , SILC fczrk , i 3 suppofilng crmr dctcctlnn , dmgmms and reu ) vmy focuses WI ( I motimtcs learners and helps to slmrpcn a concept of correct performance ( but errors run be / FuTtruting , call dmzpf tcz ~ k goalr , and can rorfup [ wha ( Ir learned ) 4 more rmhstlc mstructlonai tasks , system - m , anual cx > ordinatlon pn ~ mpts , cm ) r rcmvcg prmxdurcs , and “on your own” suggcstmns encourage Icamers tu reflect on thcm ~ ctions and expcnenccs m tf ] c sltuatmn and to feel rcsponslbdlty for : { nd control over wfmt IS happening ( but IIXUners may he LU - MWUYabou [ brar mg suck rrsponsib ! ht { e , r ) Fig . 12 Claims embodied in the type - and - print - a - letter scenario The second claim in Figure 12 describes the new design’s response to problems people have in tolerating rote learning and getting much out of it ( problems transferring skill to real settings , a downside of the second claim in Figure 10 ) and to the downside of the third claim of Figure 10 about promoting reflection and analysis . The redesigned manual decomposes tasks ACM Transactions on Information Systems . Vol . 10 , No . 2 , April 1992 . 206 . J . M . Carroll and M . B . Rosson into the key menu and command environments users need to access in the task and presents these components in a more integrated task setting . The claim schema asserts that these features will encourage more analysis during the synthesis of the skill ( since a meaningful task is being worked on , it is possible to think about it as a whole ) , and will facilitate subsequent retrieval and application in real tasks ( since the target real tasks and the instructional task are similar ) . It also claims this will be an efficient rearrangement . The downsides left open pertain to the learners’ likely familiarity with system - style decomposition and the possibility that learning by working on a real task will be too difficult . For the third claim , our reasoning concerning errors in rote learning programs ( a downside of the second claim in Figure 10 ) impelled scenario work on error detection , diagnosis , and recovery . The other downside of that claim , pertaining to transfer to real tasks , moved us to consider scenarios with more flexible and realistic instructional tasks—perhaps inviting other types of learner error . Finally , the downside of the third claim in Figure 10 concerning reflection and analysis further urged more explicit attention to error . Thus , an assortment of downside issues , across two claim schemas , had the effect of raising what finally became a separate issue : error handling . The rote manual implicitly assumed that error would not occur ( the steps were so modest , split out from each other and from any context , and the sequence clearly marked ) . It is also interesting that this claim schema includes downsides that are not different in kind from the downside which impelled the consideration of errors : frustration , disruption , and the corruption of what is learned . This example makes the point that claims analysis is not cognitive Taylorism [ 68 ] : one does not count claims , one thinks about them . What is important about the error claim in Figure 12 is that ( 1 ) new considerations entered into the design argument , ( 2 ) new artifact features and techniques were deployed in the manual design , ( 3 ) and new potential consequences for users were created . The value added lies in systematically presenting implicit reasoning and rationale to be critiqued and improved . The final claim in Figure 12 focuses on promoting reflection and analysis and learner control . The techniques of realistic tasks , explicit system - manual coordination and error support , and open - ended exercises encourage this by giving the learner something meaningful to manage , decisions to make , and consequences to evaluate . But of course , people could be anxious about being put in control ; it is another case of sliding along the tradeoff curve from one design hazard to another . The structure of this kind of design process is schematized in Figure 13 , a more deliberated reconstituting of the task - artifact cycle as an integration of design and analysis . 5 . TOWARD AN ACTION SCIENCE We must be heedful of a facile and historically mistaken view about the nature of technology evolution ; that basic science regularly holds up a beacon to show the way forward [ 3 , 39 , 50 , 51 ] . In the modern era , the need for ACM Transactions on Information Systems , Vol 10 , No . 2 , Aprd 1992 Getting Around the Task - Artifact Cycle . 207 / ’ developing scenarios narrative theory of user tasks \ ‘x hypothesizing and \ synthesizing claims causal claims theory of analysis user tasks of artifact evaluating and factoring claims \ \ scenario representation of artifact “’G / ” observing and understanding scenarios Fig . 13 . The task - artifact cycle as an information flow for HCI . science - based technology development has dramatically increased ; technology is more complex and it evolves more quickly than ever before . The opportunity for science - based technology development is also better than ever before . The notion of action science—science that seeks simultane - ously to understand the world and to improve it—can be a key to this . As illustrated in the example of the transistor ( among many others , e . g . , [ 35 ] ) , this paradigm is already up and running in the contemporary physical sciences . The notion has been articulated for the social sciences [ 1 , 71 ] , but there is a need for compelling exemplification . This work hinges on the simple argument that if we make the concepts and actions of HCI design work more explicit we will be better able to manage and to learn from it . We share many of the goals of software methodologists ( e . g . , [ 5 , 25 , 27 , 31 ] ) , since we assume that action science starts and ends with the real experiences and activities of the field : learning . , using , and designing ACM Transactions on Information Systems , Vol . 10 , No . 2 , Aprd 1992 . 208 . J . M . Carroll and M . B Rosson computer systems and applications . But we want to pursue these interests in such a way as to construct explanations and generalizations about HCI tasks and artifacts ; we want an action science of HCI . Our work focuses on codifying , sharpening , and applying the concepts - in - action that already typify practice—the arguments developed for design decisions , either within the design process or as design memoir reflections on that process , and the scenarios embodying user concerns and requirements , either attributed as such to users or envisioned as possibilities to be enabled by new artifacts . We seek to refine these concepts - in - action to make them better practical methods and better abstractions for action science . The task - artifact cycle reifies the background for practical activity in the field , which sets an appropriate target for scientific abstractions and a context for developing methodology . The notion of user concern allows ab - straction of scenarios , better narrative theories of artifacts in use , but also a typology of scenarios that can be a heuristic generator . The yield is a po - tentially thorough , systematic , and generalized design representation , and a framework for design analysis that is also richly contextualized . Psychological design rationale , the implicit psychological claims embodied in the use of artifacts , provides a conceptual framework for distinguishing between designer intention and design actuals , a means of more systemati - cally producing design memoirs ( indeed , of producing them in advance of producing the design ) , but also the conceptual elements of a causal theory of artifacts in use . The yield is an explicit “quasideductive” design argument detailing what was done and why , grounding the design in a framework of prior artifacts and embodied principles . The minimized and naturalized ontology of tasks and artifacts allows this framework for science - in - design to be bought - into strictly as necessary and as desired . For example , design can focus on scenarios alone , concrete instantia - tion of basic - level tasks , and problems pertaining to them . ( See [ 15 ] and [ 45 ] for even stronger positions . ) The typology of user concerns can be invoked to guide abstraction of a scenario - based design representation . One can go further and detail the claims embodied in scenarios to explain why the scenarios incorporate the phenomena they do . And finally , one can assimilate claims analyses of given artifacts - in - use to other such analyses to draw out and to bound principles and abstractions about HCI , and about psychology more generally . The key to an HCI action science is to accommodate the background of current practice , adding to it a flexible range of options such that a modest assimilation of the framework is edifying but only modestly disruptive , and such that larger assimilations are no more than proportionately disruptive and perhaps more than proportionately edifying . In this way , designers can pursue projects and make recognizable progress with the confidence of familiarity . In our own work we design things that we and others will use , but with a deliberate metafocus on how we do that work . Thus , we know that the method can be used , since through its development it always has been used . Most generally , it helps in providing the designer with a framework for ACM TransactIons on Information Systems , Vol . 10 , No , 2 , April 1992 , Getting Around the Task - Artifact Cycle . 209 developing and interrogating ideas concretely and conceptually at the same time with seemingly little overhead . Using the task - artifact framework has diminished in us the tendency to fix problems tout court by helping us to more regularly focus on what is good about a current situation and to work through the implications a design move under consideration may have for those good aspects as well as for the more attention - getting problematic aspects ( cf . [ 23 ] ) . Many challenges lie ahead . For example in an alCtiOn science of HCI , knowledge produced , refined , and contextualized in design must be reused in subsequent design work . But how is this supposed to happen ? It seems questionable whether discursive analyses like Figure 7 , Figure 10 , and Figure 12 are suitable , not merely because they are intellectually demanding , but because they do not make explicit the myriad interconnections among user concerns , scenarios , claims , artifact features , types of applications , etc . Exploring and investigating these interconnections in the context of a design project is the real vision of an action science : knowledge relevant to action , provided in the context of action ( see [ 24 ] ) . An important subcase in which analyses of scenarios and claims must be rendered easier to synthesize is in tracking dependencies . Clearly , one cannot expect to improve a design overall by focusing on a single scenario , or by extension , on a single claim ; every scenario potentially constrains what other scenarios can be envisioned . We are developing a software tool to help designers manage a set of use - scenarios , by providing explicit connections among the ( shared ) components of different scenarios , along with techniques for abstracting across a set of scenarios to generate a design model [ 60 ] . A third arena of technical challenge is that of developing our understand - ing of artifacts and situations to better recognize and exploit what generali - ties there are . For example , as basic tasks can be seen as instantiating general user concerns ( Figure 2 ) , artifacts can be seen as instantiating genres [ 16 , 53 ] or prescriptive design models [ 18 ] . Such “second - order artifacts” [ 12 ] can be described by the typical and critical scenarios their exemplars “inherit” and by the claims embodied in these scenarios . For example , an analysis of the MiTTS [ 18 ] minimalist tutorial and tools for Smalltalk [ 18 , 611 showed how MiTTS inherits claims from both the minimalist model and the systems approach [ 28 ] . Several current projects are developing tools and methods for making explicit what would otherwise be implicit justification for design choices [ 16 , 19 , 24 , 43 , 45 , 48 ] . Some of this work shares with ours the specific interest in grounding rationale in scientific principles [ 48 ] . Other work is directed at developing systematic frameworks for usability evaluation [ 44 , 54 , 56 , 76 ] . Some of this work has incorporated a commitment to grounding evaluations in scientific principles [ 441 . An action science of HCI that embraces and deliberately nurtures what rationality there is and can be in technology evolution could be an important vehicle for constructing rich understandings of human beings and their situations and for designing appropriate tools and environments to delight and empower them . ACM TransactIonson Information Systems , Vol . 10 , No . 2 , April 1992 . 210 . J . M . Carroll and M . B , Rosson ACKNOWLEDGMENTS We are grateful to Steve Draper for observing that Norman’s theory of action could provide a framework for our claim questions and to Bob Allen , Susan Rudman and the reviewers for comments on this paper . REFERENCES 1 . ARGYRIS , C . The Inner Contradictions of Rzgorous Research Academic Press , New York , 1980 . 2 . AC ~ WJBIiL , D . P . The use of advance organizers m the learning and retention of meaningful verbal material , J . Educ Psychol . 51 , ( 1960 ) , 267 – 272 . 3 . BASALLA , G . The Euolutzon of Technology . Cambridge University Press , New York , 1988 . 4 . BELLAMY , R . K . E . , AND CARROLL , J . M , Structuring the programmer’s task . Int . J . McLn - Machzne Studzes 35 ( 1992 ) . 5 . BROOKS , F . P . The Mytlucal Man - Month Addison - Wesley , Reading , Mass , 1975 . 6 . CARD , S , K . , MORAN , T . P . , AND NEWELL , A . The Psychology of Human – Computer Interac - tion . Erlbaum , Hillsdale , N , J , , 1983 . 7 . CARROLL , J . M . What’s irt a Name ? An Essav zn the Psychology of Reference . W . H . Freeman , New York , 1985 . 8 . CAFLROLL , J , M . Evaluation , description and mventlon : Paradigms for human - computer interaction . In Aduances ~ n Computers , Vol . 29 , M , C . Yovits , Ed , Academic Press , Orlando , Fla . . 47 – 77 , 9 . CARROLL , J . M . The Nurnberg Funnel : Deslgnlng Mmzmalist In . ~ tructzon for Practical Computer SkLU . MIT Press , Cambridge , Mass . , 1990 , 10 . CARROLL , J . M Infinite detad and emulation in an ontologically minimized HCI . In Pro - ceedings of CHI’90 . Conference on Human Factors In Computing Sy ~ tems ACM , New York , 321 - 327 . 11 . CARROLL , J . M , , AND CAMP ~ ~ LL , R . L . Softening up hard science : Reply to Newell and Card , Human - Conzput . Interactmn 2 , ( 1986 ) , 227 - 249 12 , CARROLL , J . M , , AND CAMPBELL , R . L . Artifacts as psychological theories : The case of human - computer interaction . ~ ehaz . Inf , Tech . 8 ( 1989 ) , 247 - 256 . 13 . CARROLL , J . M . , AND KELLOGG , W A . Artifact as theory - nexus : Hermeneutlcs meets theory - based design . In Proceedings of CHI’89 Conference on Human Factors zn Computmg Systems , ACM , New York , 1989 , 7 - 14 . 14 CARROLL , J . M . , AND RO % ON , M . B . Usablhty specification as a tool in mteractwe develop - ment . In Aduances in Human - Computer Interaction 1 , H . Hartson , Ed . Ablex , Norwood , N . J , 1985 , 1 - 28 , 15 . CARROLL , J . M . , ANn ROSSON , M . B . Human computer mteractlons scenarios as a design representation . In Procecdzngs of HICSS - 23 . Ha wa LL Interns flonal Conference on System Sctences . IEEE Computer Society Press , Los Alamitos , Calif . , 1990 , 55 – 561 . 16 . CARROLL , J . M . , AND ROSSON , M . B . Deliberated evolutlon : Stalking the View Matcher in design space . Hum - Cornput . Interact [ on 6 ( 1991 ) , 281 - 318 17 . CARRnLL , J , M . , KELLOGG , W A . , AND ROSSON , M . B . The task - artifact cycle . In Deszgning Interaction : Psychology at the HamamComputer Interface , J . M . Carroll , Ed . Cambridge Umvers , ty Press , New York , 1991 , 74 – 102 . 18 , CARROLL , J M . , SIN ~ LEY , M . K . , AND ROSS ( ON , M . B . Toward an architecture for in strut’uon al evaluation In Proceedings of the International Conference on the Learning Sciences 1991 ( Chicago , Aug . 4 - 7 ) . Association of Computing in Education , New York , 1991 19 . CONKLIN , J . , AND YAKEMOVIC , B , K , C . A process - oriented paradigm for design rationale , Hum . - Compat . Interaction 6 ( 1991 ) , 357 - 391 . 20 CO . Y , B J . Object - Orzented Programming : An Elocutionary Approach . Addison - Wesley . Reading , Mass . , 1986 , 21 , EHN , P , Work - Oriented Design of Computer Artifacts . Erlbaum , Hillsdale , N . J , 1988 . 22 . ESPER , E . A A technique for tbe experimental investigation of associative interference in artificial linguistic material Lang . Monographs 1 ( 1925 ) , 1 – 47 . ACM Transactxms on Information Systems , Vol . 10 , No 2 , Aprd 1992 . Getting Around the Task - , Artifact Cycle . 211 23 . FESTINGER , L . A Theor ? of Cognitive Dissonance , Harper & Rc ) wj New York , 1957 . 24 . FISCHER , G . , LEMKE , A . C . , MCCALL , R . , AND MORCH , A . I . Making argumentation serve design . Hurn . - Comput . Interaction 6 ( 1991 ) , 393 - 419 . 25 . FLOYD , G . , ZULLIGHOVEN , H . , BUDDE , R . , AND KKII . - SLAWIK , R . , EDS . Softt & , are Det , elopnze ~ lt and Reality Construction . Springer - Verlag , New York , 1992 . 26 . FODOR , J . A . Could there be a theory of perception ? J . Philosophy 6 , ? ( 1966 ) , 375 - 395 . 27 . FREIUW ~ N , P . Software Perspectives : The System is the Message . Addison - Wesley , Reading , Mass . , 1987 . 28 . GAGNE , R . M . , AND BRIGGS , L , J . Prmclples of Instructional Design . Holt , Rinehart and Winston , New York , 1979 . 29 . GARN ~ R , W . R . The Processing of Information and Structure . Erlbaum , Potomac , Md . , 1974 . 30 . GENTN ~ R , D , , ANI ) STEVENS . A , Mental Models . Erlbaum , Hil ] sdale , N . J . , 1983 . 31 . GILB , T Principles of Software Engineering Management . Addison - Wesley , Reading , Mass . , 1988 . 32 . GRIC ~ , H . P . Logic and conversation . In The Logic of Grammar , D . Davidson and G . Harman , Eds . Dickenson , Encino , Calif . , 1967 . 33 . HALASZ , F . G . , ANrI MOWN , T . P . Mental models and problem solving in using a calculator . In Proceedings of CHI’83 : Conference on Human Factors in Computing Systems . ACM , New York , 1983 , 212 - 216 . 34 . HEInE ~ GIZR , M . Bezng and , Tzme . ( Trans . by J . Macquarrle and E . Robinson . ) Harper & Row , New York , 1962 . 35 . JEWKES , J . , SAWERS , D , , AND STILLERMAN , R . The Sources of Invention . Macmillan , New York , 1958 , 36 . KIERAS , D . E . , AND POLSON , P . G . An approach to the formal analysls of complexity . Znt . J . Man - Mac / zzne Stud . 22 . ( 1985 ) , 365 - 394 . 37 . KAHNEMAN , D . Attention and Effort . Prentice - Hall , Englewood Cliffs , N . J . , 1973 , 38 . KOHLER , W . Gestalt Psychology . Livenght , New York , 1929 . 39 . KUHN , T . S . Comment . In The Rate and Direction of Inuentzue Activity : Economic and Social Factors . Universities - National Bureau Conference Series , 13 , Princeton University Press , Princetonj N . J . , 450 - 457 . 40 , LANI ) AUER , T . K . Psychology as a mother of invention . In Proceedings of CHI + GI’87 : Human Factors m Computzng Systems and Graphics Interface ( Toronto , Apr . 5 - 9 , 1987 ) . ACM , New York , 1987 , pp . 333 - 335 . 41 . LANDAUER , T , K . Let’s get real : A position paper on the role of cogmtive psychology in the design of human useful and usable systems . In Deszgning Interaction : Psychology at the Haman - Computer Interface , J . M . Carroll , Ed . Cambridge University Press , New York , 1991 , 60 - 73 . 42 . LAVE , J , Cognzfzon zn Practzce : Mind , Mathematics , and Culture . Cambridge University Press , New York , 1988 . 43 . L ~ E , J . , ANI ) LAI , K . - Y . What’s in design rationale , Hum . - Comput , Interaction 6 ( 1991 ) , 251 – 280 . 44 . LEWTS , C . H . , POISON , P . , WHARTON , C . , ANLI RIEMAN , J . Testing a walkthrough methodology for theory - based design of walk - up - and - use interfaces , In Proceedings of CHI’90 : Conference on Human Factors in Computzng Systems . ACM , New York , 1990 , 235 – 242 . 45 . LEWIS , C . H . , RJEMAN , J . , AND BELL , B . Problem - centered de ! sign for expressiveness and facility in a graphical programming system . Hum . - Contput . Znteractzon 6 ( 1991 ) , 319 - 355 . 46 . LEWIS , M . L . , AND ANDERSON , J . R . Discrimination of operator schemata in problem solving Learning from examples . Cognitice Psychol . 17 ( 1985 ) , 26 - 65 . 47 . MAC ~ , R . L . , LEWIS , C . H . , AND CARROLL , J . M . Learning to use office systems : Problems and prospects . ACM Trans . Office Inf . Svst . 1 ( 1983 ) , 254 - 271 . 48 . MACLEAN , A . , YOLTN ~ , R . , BELLOTTT , V . , AND MORAN , T . P . Questions , options and criteria : Elements of a design rationale for user interfaces . Hum , - Comput . Interaction 6 ( 1991 ) , 201 - 250 . 49 , MILGR . MW , S . Some conditions on obedience and disobedience to authority . J . Abnormal Social Psychol . 6 ( 1968 ) , 259 - 276 . 50 , MORRISON , E . From KnozwHou , to Nowhere . Blackwell , Oxford , 1974 . ACM Transactmns on Information Systems , Vol . 10 , No , 2 , Aprd 1992 , 212 . J . M . Carroll and M . B . Rosson 51 . MULTHAUF , R . P . The scientist and the improver of technology . Tech . Culture ( 1959 ) , 38 - 47 . 52 . NELSON , R . The link between science and invention : The case of the transistor . In The Rate and . Du”ectzon of In uentz ue Actwz ty : Economic and Social Factors . Universities - National Bureau Conference Series , 13 . Princeton University Press , Princeton , N . J . , 1962 . 53 , NEWMAN , W . M . The representation of user interface style . In People and Computers IV , D . M . Jones and R Winder , Eds . Cambridge University Press , Cambridge , U . K . , 1988 , 123 - 143 . 54 . NIELSEN , J , , AND MOLICH , R . Heuristic evaluation of user interfaces In Proceedings of CHI’90 : Conference on Human Factors m Computing Systems . ACM , New York , 1990 , 249 - 256 . 55 . NORMAN , D . A . Cognitive engineering In User Centered System Design , D . A . Norman and S . W . Draper , Eds . Erlbaum , Hillsdale , N . J . , 1986 , 31 - 62 . 56 . RAVDEN , S . , . AND JOHNSON , G . Eualuatzng U . wzbillty of Human - Computer Interfaces : A Practzcal Method . Ellis Horwood , Chichester , 1989 . 57 . RITTEL , H . W . J . Second - generation design methods . In Developments LTZ Design Methodol - ogy , N . Cross , Ed . Wiley . New York . 1984 , 317 – 327 58 . RO ~ ERTS , T . L , AND MORAN , T . P . The evaluation of text editors , Methodology and empirical results . Commun . ACM 26 , ( 1983 ) , 265 – 283 . 59 . ROSCH , E . , MERVIS , C . B . , GRAY , W . , JOHNSON , D . , AND BOYES - BRAEM , P . Basic objects in natural categories . Cognzttue Psychol 7 ( 1976 ) , 573 – 605 . 60 . RCISSON , M B . , AND CARROLL , J M Extending the task - artifact framework In Aduanees in Human - Computer Interaction 4 . H . R . Hartson and D . Hix , Eds . Ablex , Norwood , N J . , 1992 . 61 . ROSSON , M . B . , CARROLL , ~ J . M , AND BELLAMY , R . K . E . Smalltalk scaffolding : A case study in minimalist instruction . In pruceedmgs of CHI’90 : Conference on Human Factors zn Comput - zngsystems . ACM , New York , 1990 , 423 – 429 . 62 . ROSSON . M B , CARROLL , J , M . , AND SWEENEY , C . A View Matcher for reusing Smalltalk classes . In Proceedings of CHI’91 . ACM , New York , 1991 , 277 – 284 . 63 . SCHON , D . A . The Reflective Practztzoner : How Professionals Think in Action . Basic Books , New York . 1983 . 64 . SIMON , H . A . The Sczence . s of the Artlficral . 2nd Ed . MIT Press , Cambridge , Mass . , 1981 . 65 . SIN ~ L ~ Y , M . K . , CARROLL , J . M . . ANII ALPERT , S . R Psycholo ~ cal design rationale for an mtelhgent tutoring system for Smalltalk . In Empirzca 1 Studzes of Programmers , IV , S . R . Robertson , Ed . Ablex , Norwood , N . J . , 1991 , 196 - 209 . 66 . SMITH , D C . , IR ~ Y , C . , KTM ~ AIM . , R , VERPLAN ~ , B . , AND H . ARSLEM , E . Designing the Star user interface . Byte 7 , 4 ( Apr . 1982 ) , 242 – 282 . 67 . SLTCHMAN , L . A . Plans and Sztuated Actzons : The Problem of Human - Machmc Communzca - tzon Cambridge University Press , New York , 1987 . 68 . TAYLOR , F . W . The Prznctples of Sc [ entifzc Management . Harper and Row , New York , 1911 . 69 . TIi ~ RACE . H . Errorless transfer of a discrimination across two continua . J . Exper . Anal . Behau 6 ( 1963 ) , 223 - 232 . 70 . THORNDIRE , E . L . Educational Psychology . Lemke & Buechner , New York , 1903 . 71 , TORBERT , W . Creating a Communzty of Inqz ~ iry , Wdey , New York , 1976 . 72 . WFXNRR , B Human Motluatron . Holt , Rinehart and Winston , New York . 1980 . 73 . WHITESI ~ R J , . AND WIXON , D . Improving human - computer interaction—A quest for cogni - twe science . In Interfacing Thought : C’ognztzl , e Aspects of Hunzan - Computer Interaction , J . M . Carroll , Ed . Bradford / MIT Press , Cambridge , Mass . , 1987 , 337 - 352 . 74 . WIXON , D . , HOLTZBLP . TT , K . , AND KNOX , S . Contextualist design : An emergent view of system design . In Proceedings of CHI’90 . Cun ference on Human Factors In Computmg Systems . ACM , New York , 1990 , 329 - 336 . 75 WRIGHT , P . Feeding tbe interface eaters : Suggestions for integrating pure and apphed research m language comprehension . lnsti - . Sci . 7 ( 1978 ) , 249 – 312 . 76 . WRIGH1 , P . , AND MONK , A . F Evaluation for design . In People and Computers , V , A . Sutcliffe and L . Macaulayj Eds . Cambridge University Press , New York , 1989 , 345 - 358 . Received June 1991 ; revised November 1991 ; accepted Aprd 1992 ACM Transactions on Informatmn Systems , Vol . 10 , No . 2 , Aprd 1992