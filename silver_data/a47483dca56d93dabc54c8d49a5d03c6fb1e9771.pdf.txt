Sequence analysis Minimap2 : pairwise alignment for nucleotide sequences Heng Li * Department of Medical Population Genetics Program , Broad Institute , Cambridge , MA 02142 , USA * To whom correspondence should be addressed . Associate Editor : Inanc Birol Received on January 1 , 2018 ; revised on March 16 , 2018 ; editorial decision on March 22 , 2018 ; accepted on May 4 , 2018 Abstract Motivation : Recent advances in sequencing technologies promise ultra - long reads of (cid:2) 100 kb in average , full - length mRNA or cDNA reads in high throughput and genomic contigs over 100 Mb in length . Existing alignment programs are unable or inefﬁcient to process such data at scale , which presses for the development of new alignment algorithms . Results : Minimap2 is a general - purpose alignment program to map DNA or long mRNA sequences against a large reference database . It works with accurate short reads of (cid:3) 100 bp in length , (cid:3) 1 kb genomic reads at error rate (cid:2) 15 % , full - length noisy Direct RNA or cDNA reads and assembly contigs or closely related full chromosomes of hundreds of megabases in length . Minimap2 does split - read alignment , employs concave gap cost for long insertions and dele - tions and introduces new heuristics to reduce spurious alignments . It is 3 – 4 times as fast as mainstream short - read mappers at comparable accuracy , and is (cid:3) 30 times faster than long - read genomic or cDNA mappers at higher accuracy , surpassing most aligners specialized in one type of alignment . Availability and implementation : https : / / github . com / lh3 / minimap2 Contact : hengli @ broadinstitute . org Supplementary information : Supplementary data are available at Bioinformatics online . 1 Introduction Single Molecule Real - Time ( SMRT ) sequencing technology and Oxford Nanopore technologies ( ONT ) produce reads over 10 kbp in length at an error rate (cid:2) 15 % . Several aligners have been devel - oped for such data ( Chaisson and Tesler , 2012 ; Li , 2013 ; Lin and Hsu , 2017 ; Liu et al . , 2016 , 2017 ; Sedlazeck et al . , 2018 ; Sovi (cid:2) c et al . , 2016 ) . Most of them were five times as slow as mainstream short - read aligners ( Langmead and Salzberg , 2012 ; Li , 2013 ) in terms of the number of bases mapped per second . We speculated there could be substantial room for speedup on the thought that 10kb long sequences should be easier to map than 100bp reads because we can more effectively skip repetitive regions , which are often the bottleneck of short - read alignment . We confirmed our speculation by achieving approximate mapping 50 times faster than BWA - MEM ( Li , 2016 ) . Suzuki and Kasahara ( 2018 ) extended our work with a fast and novel algorithm on generating base - level alignment , which in turn inspired us to develop minimap2 with added functionality . Both SMRT and ONT have been applied to the sequencing of spliced mRNAs ( RNA - seq ) . While traditional mRNA aligners work ( Iwata and Gotoh , 2012 ; Wu and Watanabe , 2005 ) , they are not opti - mized for long noisy sequence reads and are tens of times slower than dedicated long - read aligners . When developing minimap2 initially for aligning genomic DNA only , we realized minor modifications could enable the base algorithm to map mRNAs as well . Minimap2 becomes a first RNA - seq aligner specifically designed for long noisy reads . We have also extended the original algorithm to map short reads at a speed faster than several mainstream short - read mappers . In this article , we will describe the minimap2 algorithm and its applications to different types of input sequences . We will evaluate the performance and accuracy of minimap2 on several simulated and real datasets and demonstrate the versatility of minimap2 . V C The Author ( s ) 2018 . Published by Oxford University Press . All rights reserved . For permissions , please e - mail : journals . permissions @ oup . com 3094 Bioinformatics , 34 ( 18 ) , 2018 , 3094 – 3100 doi : 10 . 1093 / bioinformatics / bty191 Advance Access Publication Date : 10 May 2018 Original Paper 2 Materials and methods Minimap2 follows a typical seed - chain - align procedure as is used by most full - genome aligners . It collects minimizers ( Roberts et al . , 2004 ) of the reference sequences and indexes them in a hash table , with the key being the hash of a minimizer and the value being a list of locations of the minimizer copies . Then for each query sequence , minimap2 takes query minimizers as seeds , finds exact matches ( i . e . anchors ) to the reference , and identifies sets of coli - near anchors as chains . If base - level alignment is requested , mini - map2 applies dynamic programming ( DP ) to extend from the ends of chains and to close regions between adjacent anchors in chains . Minimap2 uses indexing and seeding algorithms similar to mini - map ( Li , 2016 ) , and furthers the predecessor with more accurate chaining , the ability to produce base - level alignment and the support of spliced alignment . 2 . 1 Chaining 2 . 1 . 1 Finding the optimal chaining scores An anchor is a 3 - tuple ( x , y , w ) , indicating interval x (cid:4) w þ 1 ; x ½ (cid:5) on the reference matching interval y (cid:4) w þ 1 ; y ½ (cid:5) on the query . Given a list of anchors sorted by ending reference position x , let f ( i ) be the maximal chaining score up to the i - th anchor in the list . f ( i ) can be calculated with dynamic programming : f i ð Þ ¼ max f max i > j (cid:3) 1 f f j ð Þ þ a j ; i ð Þ (cid:4) b j ; i ð Þg ; w i g ( 1 ) where a j ; i ð Þ ¼ min f min f y i (cid:4) y j ; x i (cid:4) x j g ; w i g is the number of matching bases between the two anchors . b j ; i ð Þ > 0 is the gap cost . It equals 1 if y j (cid:3) y i or max f y i (cid:4) y j ; x i (cid:4) x j g > G ( i . e . the distance between two anchors is too large ) ; otherwise b j ; i ð Þ ¼ c c y i (cid:4) y j (cid:2) (cid:3) (cid:4) x i (cid:4) x j (cid:2) (cid:3) (cid:2) (cid:3) ( 2 ) In implementation , a gap of length l costs c c l ð Þ ¼ 0 : 01 (cid:6) (cid:3) w (cid:6) j l j þ 0 : 5log 2 j l j l ¼ 0 ð Þ 0 l ¼ 0 ð Þ ( where (cid:3) w is the average seed length . For N anchors , directly comput - ing all f (cid:6)ðÞ with Equation ( 1 ) takes O N 2 (cid:2) (cid:3) time . Although theoreti - cally faster chaining algorithms exist ( Abouelhoda and Ohlebusch , 2005 ) , they are inapplicable to generic gap cost , complex to imple - ment and usually associated with a large constant . We introduced a simple heuristic to accelerate chaining . We note that if anchor i is chained to j , chaining i to a predecessor of j is likely to yield a lower score . When evaluating Equation ( 1 ) , we start from anchor i (cid:4) 1 and stop the process if we cannot find a better score after up to h iterations . This approach reduces the average time to O ( hN ) . In practice , we can almost always find the optimal chain with h ¼ 50 ; even if the heuristic fails , the optimal chain is often close . 2 . 1 . 2 Backtracking Let P ( i ) be the index of the best predecessor of anchor i . It equals 0 if f i ð Þ ¼ w i or argmax j f f j ð Þ þ a j ; i ð Þ (cid:4) b j ; i ð Þg otherwise . For each anchor i in the descending order of f ( i ) , we apply P (cid:6)ðÞ repeatedly to find its predecessor and mark each visited i as ‘used’ , until P ( i ) ¼ 0 or we reach an already ‘used’ i . This way we find all chains with no anchors used in more than one chains . 2 . 1 . 3 Identifying primary chains In the absence of copy number changes , each query segment should not be mapped to two places in the reference . However , chains found at the previous step may have significant or complete overlaps due to repeats in the reference ( Li and Durbin , 2010 ) . Minimap2 used the following procedure to identify primary chains that do not greatly overlap on the query . Let Q be an empty set initially . For each chain from the best to the worst according to their chaining scores : if on the query , the chain overlaps with a chain in Q by 50 % or higher percentage of the shorter chain , mark the chain as secondary to the chain in Q ; otherwise , add the chain to Q . In the end , Q contains all the primary chains . We did not choose a more sophisticated data structure ( e . g . range tree or k - d tree ) because this step is not the performance bottleneck . For each primary chain , minimap2 estimates its mapping quality with an empirical formula : mapQ ¼ 40 (cid:6) 1 (cid:4) f 2 = f 1 ð Þ (cid:6) min f 1 ; m = 10 g (cid:6) log f 1 where log denotes natural logarithm , m is the number of anchors on the primary chain , f 1 is the chaining score , and f 2 (cid:7) f 1 is the score of the best chain that is secondary to the primary chain . Intuitively , a chain is assigned to a higher mapping quality if it is long and its best secondary chain is weak . 2 . 1 . 4 Estimating per - base sequence divergence Suppose a query sequence harbors n seeds of length k , m of which are present in a chain . We want to estimate the sequence divergence (cid:2) between the query and the reference sequences in the chain . This is useful when base - level alignment is too expensive to perform . If we model substitutions with a homogeneous Poisson process along the query sequence , the probablity of seeing k consecutive bases without substitutions is e (cid:4) k (cid:2) . On the assumption that all k - mers are independent of each other , the likelihood function of (cid:2) is L (cid:2) j n ; m ; k ð Þ ¼ e (cid:4) m (cid:6) k (cid:2) 1 (cid:4) e (cid:4) k (cid:2) (cid:4) (cid:5) n (cid:4) m The maximum likelihood estimate of (cid:2) is b (cid:2) ¼ 1 k log n m : In reality , sequencing errors are sometimes clustered and k - mers are not independent of each other , especially when we take minimizers as seeds . These violate the assumptions in the derivation above . As a result , b (cid:2) is only approximate and can be biased . It also ignores long deletions from the reference sequence . In practice , fortunately , b (cid:2) is often close to and strongly correlated with the sequence divergence estimated from base - level alignments . On the several datasets used in Section 3 . 1 , the Spearman correlation coefficient is around 0 . 9 . 2 . 1 . 5 Indexing with homopolymer compressed k - mers SmartDenovo ( https : / / github . com / ruanjue / smartdenovo ; J . Ruan , personal communication ) indexes reads with homopolymer - compressed ( HPC ) k - mers and finds the strategy improves overlap sensitivity for SMRT reads . Minimap2 adopts the same heuristic . The HPC string of a string s , denoted by HPC s ð Þ , is constructed by contracting homopolymers in s to a single base . An HPC k - mer of s is a k - long substring of HPC s ð Þ . For example , suppose s ¼ GGATTTTCCA , HPC s ð Þ ¼ GATCA and the first HPC 4 - mer is GATC . To demonstrate the effectiveness of HPC k - mers , we performed read overlapping for the example E . coli SMRT reads from PBcR ( Berlin et al . , 2015 ) , using different types of k - mers . With normal 15bp minimizers per 5bp window , minimap2 finds 90 . 9 % of (cid:3) 2kb overlaps inferred from the read - to - reference alignment . With HPC 19 - mers per 5bp window , minimap2 finds 97 . 4 % of overlaps . Aligning nucleotide sequences with minimap2 3095 It achieves this higher sensitivity by indexing 1 / 3 fewer minimizers , which further helps performance . HPC - based indexing reduces the sensitivity for current ONT reads , though . 2 . 2 Aligning genomic DNA 2 . 2 . 1 Alignment with 2 - piece affine gap cost Minimap2 performs DP - based global alignment between adjacent anchors in a chain . It uses a 2 - piece affine gap cost ( Gotoh , 1990 ) : c a l ð Þ ¼ min f q þ j l j (cid:6) e ; ~ q þ j l j (cid:6) ~ e g ( 3 ) Without losing generality , we always assume q þ e < ~ q þ ~ e . On the condition that e > ~ e , it applies cost q þ j l j (cid:6) e to gaps shorter than d ~ q (cid:4) q ð Þ = e (cid:4) ~ e ð Þe and applies ~ q þ j l j (cid:6) ~ e to longer gaps . This scheme helps to recover longer insertions and deletions ( INDELs ) . The equation to compute the optimal alignment under c a (cid:6)ðÞ is H ij ¼ max f H i (cid:4) 1 ; j (cid:4) 1 þ s i ; j ð Þ ; E ij ; F ij ; ~ E ij ; ~ F ij g E i þ 1 ; j ¼ max f H ij (cid:4) q ; E ij g (cid:4) e F i ; j þ 1 ¼ max f H ij (cid:4) q ; F ij g (cid:4) e ~ E i þ 1 ; j ¼ max f H ij (cid:4) ~ q ; ~ E ij g (cid:4) ~ e ~ F i ; j þ 1 ¼ max f H ij (cid:4) ~ q ; ~ F ij g (cid:4) ~ e 8 > > > > > > > > > < > > > > > > > > > : ( 4 ) where s ( i , j ) is the score between the i - th reference base and j - th query base . Equation ( 4 ) is a natural extension to the equation under affine gap cost ( Altschul and Erickson , 1986 ; Gotoh , 1982 ) . 2 . 2 . 2 The Suzuki – Kasahara formulation When we allow gaps longer than several hundred base pairs , nucleotide - level alignment is much slower than chaining . SSE accel - eration is critical to the performance of minimap2 . Traditional SSE implementations ( Farrar , 2007 ) based on Equation ( 4 ) can achieve 16 - way parallelization for short sequences , but only 4 - way paralleli - zation when the peak alignment score reaches 32 767 . Long sequence alignment may exceed this threshold . Inspired by Wu et al . ( 1996 ) and the following work , Suzuki and Kasahara ( 2018 ) pro - posed a difference - based formulation that lifted this limitation . In case of 2 - piece gap cost , define u ij ¢ H ij (cid:4) H i (cid:4) 1 ; j v ij ¢ H ij (cid:4) H i ; j (cid:4) 1 x ij ¢ E i þ 1 ; j (cid:4) H ij ~ x ij ¢ ~ E i þ 1 ; j (cid:4) H ij y ij ¢ F i ; j þ 1 (cid:4) H ij ~ y ij ¢ ~ F i ; j þ 1 (cid:4) H ij 8 > > < > > : We can transform Equation ( 4 ) to z ij ¼ max f s i ; j ð Þ ; x i (cid:4) 1 ; j þ v i (cid:4) 1 ; j ; y i ; j (cid:4) 1 þ u i ; j (cid:4) 1 ; ~ x i (cid:4) 1 ; j þ v i (cid:4) 1 ; j ; ~ y i ; j (cid:4) 1 þ u i ; j (cid:4) 1 g u ij ¼ z ij (cid:4) v i (cid:4) 1 ; j v ij ¼ z ij (cid:4) u i ; j (cid:4) 1 x ij ¼ max f 0 ; x i (cid:4) 1 ; j þ v i (cid:4) 1 ; j (cid:4) z ij þ q g (cid:4) q (cid:4) e y ij ¼ max f 0 ; y i ; j (cid:4) 1 þ u i ; j (cid:4) 1 (cid:4) z ij þ q g (cid:4) q (cid:4) e ~ x ij ¼ max f 0 ; ~ x i (cid:4) 1 ; j þ v i (cid:4) 1 ; j (cid:4) z ij þ ~ q g (cid:4) ~ q (cid:4) ~ e ~ y ij ¼ max f 0 ; ~ y i ; j (cid:4) 1 þ u i ; j (cid:4) 1 (cid:4) z ij þ ~ q g (cid:4) ~ q (cid:4) ~ e 8 > > > > > > > > > > > > > > > > > < > > > > > > > > > > > > > > > > > : ( 5 ) where z ij is a temporary variable that does not need to be stored . An important property of Equation ( 5 ) is that all values are bounded by scoring parameters . To see that , x ij ¼ E i þ 1 ; j (cid:4) H ij ¼ max f(cid:4) q ; E ij (cid:4) H ij g (cid:4) e With E ij (cid:7) H ij , we have (cid:4) q (cid:4) e (cid:7) x ij (cid:7) max f(cid:4) q ; 0 g (cid:4) e ¼ (cid:4) e and similar inequations for y ij , ~ x ij and ~ y ij . In addition , u ij ¼ z ij (cid:4) v i (cid:4) 1 ; j (cid:3) max f x i (cid:4) 1 ; j ; ~ x i (cid:4) 1 ; j g (cid:3) (cid:4) q (cid:4) e As the maximum value of z ij ¼ H ij (cid:4) H i (cid:4) 1 ; j (cid:4) 1 is M , the maximal matching score , we can derive u ij (cid:7) M (cid:4) v i (cid:4) 1 ; j (cid:7) M þ q þ e In conclusion , in Equation ( 5 ) , x and y are bounded by (cid:4) q (cid:4) e ; (cid:4) e ½ (cid:5) , ~ x and ~ y by (cid:4) ~ q ½ (cid:4) ~ e ; (cid:4) ~ e (cid:5) , and u and v by (cid:4) q (cid:4) e ; M þ q þ e ½ (cid:5) . When (cid:4) 128 (cid:7) (cid:4) q (cid:4) e < M þ q þ e (cid:7) 127 , each of them can be stored as a 8 - bit integer . This enables 16 - way SSE vectorization regardless of the peak score of the alignment . For a more efficient SSE implementation , we transform the row - column coordinate to the diagonal - antidiagonal coordinate by let - ting r i þ j and t i . Equation ( 5 ) becomes : z rt ¼ max f s t ; r (cid:4) t ð Þ ; x r (cid:4) 1 ; t (cid:4) 1 þ v r (cid:4) 1 ; t (cid:4) 1 ; y r (cid:4) 1 ; t þ u r (cid:4) 1 ; t ; ~ x r (cid:4) 1 ; t (cid:4) 1 þ v r (cid:4) 1 ; t (cid:4) 1 ; ~ y r (cid:4) 1 ; t þ u r (cid:4) 1 ; t g u rt ¼ z rt (cid:4) v r (cid:4) 1 ; t (cid:4) 1 v rt ¼ z rt (cid:4) u r (cid:4) 1 ; t x rt ¼ max f 0 ; x r (cid:4) 1 ; t (cid:4) 1 þ v r (cid:4) 1 ; t (cid:4) 1 (cid:4) z rt þ q g (cid:4) q (cid:4) e y rt ¼ max f 0 ; y r (cid:4) 1 ; t þ u r (cid:4) 1 ; t (cid:4) z rt þ q g (cid:4) q (cid:4) e ~ x rt ¼ max f 0 ; ~ x r (cid:4) 1 ; t (cid:4) 1 þ v r (cid:4) 1 ; t (cid:4) 1 (cid:4) z rt þ ~ q g (cid:4) ~ q (cid:4) ~ e ~ y rt ¼ max f 0 ; ~ y r (cid:4) 1 ; t þ u r (cid:4) 1 ; t (cid:4) z rt þ ~ q g (cid:4) ~ q (cid:4) ~ e 8 > > > > > > > > > > > > > > > > > < > > > > > > > > > > > > > > > > > : In this formulation , cells with the same diagonal index r are inde - pendent of each other . This allows us to fully vectorize the computa - tion of all cells on the same anti - diagonal in one inner loop . It also simplifies banded alignment ( 500bp band width by default ) , which would be difficult with striped vectorization ( Farrar , 2007 ) . On the condition that q þ e < ~ q þ ~ e and e > ~ e , the initial values in the diagonal - antidiagonal formuation are x r (cid:4) 1 ; (cid:4) 1 ¼ y r (cid:4) 1 ; r ¼ (cid:4) q (cid:4) e ~ x r (cid:4) 1 ; (cid:4) 1 ¼ ~ y r (cid:4) 1 ; r ¼ (cid:4) ~ q (cid:4) ~ e u r (cid:4) 1 ; r ¼ v r (cid:4) 1 ; (cid:4) 1 ¼ g r ð Þ 8 > > < > > : where g r ð Þ ¼ (cid:4) q (cid:4) e r ¼ 0 ð Þ (cid:4) e r < (cid:6) ~ q (cid:4) q e (cid:4) ~ e (cid:4) 1 (cid:7) (cid:8) (cid:9) r (cid:6) e (cid:4) ~ e ð Þ (cid:4) ~ q (cid:4) q ð Þ (cid:4) ~ e r ¼ (cid:6) ~ q (cid:4) q e (cid:4) ~ e (cid:4) 1 (cid:7) (cid:8) (cid:9) (cid:4) ~ e r > (cid:6) ~ q (cid:4) q e (cid:4) ~ e (cid:4) 1 (cid:7) (cid:8) (cid:9) 8 > > > > > > > > > > > < > > > > > > > > > > > : These can be derived from the initial values for Equation ( 4 ) . When performing global alignment , we do not need to compute H rt in each cell . We use 16 - way vectorization throughout the align - ment process . When extending alignments from ends of chains , we need to find the cell ( r , t ) where H rt reaches the maximum . We resort to 4 - way vectorization to compute H rt ¼ H r (cid:4) 1 ; t þ u rt . Because this computation is simple , Equation ( 5 ) is still the dominant perform - ance bottleneck . In practice , our 16 - way vectorized implementation of global alignment is three times as fast as Parasail’s 4 - way vectorization 3096 H . Li ( Daily , 2016 ) . Without banding , our implementation is slower than Edlib ( (cid:4) So (cid:4) si (cid:2) c and (cid:4) Sikic , 2017 ) , but with a 1000bp band , it is consid - erably faster . When performing global alignment between anchors , we expect the alignment to stay close to the diagonal of the DP matrix . Banding is applicable most of the time . 2 . 2 . 3 The Z - drop heuristic With global alignment , minimap2 may force to align unrelated sequences between two adjacent anchors . To avoid such an artifact , we compute accumulative alignment score along the alignment path and break the alignment where the score drops too fast in the diago - nal direction . More precisely , let S ( i , j ) be the alignment score along the alignment path ending at cell ( i , j ) in the DP matrix . We break the alignment if there exist i 0 ; j 0 ð Þ and ( i , j ) , i 0 < i and j 0 < j , such that S i 0 ; j 0 ð Þ (cid:4) S i ; j ð Þ > Z þ e (cid:6) j i (cid:4) i 0 ð Þ (cid:4) j (cid:4) j 0 ð Þj where e is the gap extension cost and Z is an arbitrary threshold . This strategy is first used in BWA - MEM . It is similar to X - drop employed in BLAST ( Altschul et al . , 1997 ) , but unlike X - drop , it would not break the alignment in the presence of a single long gap . When minimap2 breaks a global alignment between two anchors , it performs local alignment between the two subsequences involved in the global alignment , but this time with the one subse - quence reverse complemented . This additional alignment step may identify short inversions that are missed during chaining . 2 . 2 . 4 Filtering out misplaced anchors Due to sequencing errors and local homology , some anchors in a chain may be wrong . If we blindly align regions between two mis - placed anchors , we will produce a suboptimal alignment . To reduce this artifact , we filter out anchors that lead to a > 10bp insertion and a > 10bp deletion at the same time , and filter out terminal anchors that lead to a long gap towards the ends of a chain . These heuristics greatly alleviate the issues with misplaced anchors , but they are unable to fix all such errors . Local misalignment is a limita - tion of minimap2 which we hope to address in future . 2 . 3 Aligning spliced sequences The algorithm described above can be adapted to spliced alignment . In this mode , the chaining gap cost distinguishes insertions to and deletions from the reference : c c l ð Þ in Equation ( 2 ) takes the form of c c l ð Þ ¼ 0 : 01 (cid:6) (cid:3) w (cid:6) l þ 0 : 5log 2 l l > 0 ð Þ min f 0 : 01 (cid:6) (cid:3) w (cid:6) j l j ; log 2 j l jg l < 0 ð Þ ( Similarly , the gap cost function used for DP - based alignment is changed to c a l ð Þ ¼ q þ l (cid:6) e l > 0 ð Þ min f q þ j l j (cid:6) e ; ~ q g l < 0 ð Þ ( In alignment , a deletion no shorter than d ~ q (cid:4) q ð Þ = e e is regarded as an intron , which pays no cost to gap extensions . To pinpoint precise splicing junctions , minimap2 introduces reference - dependent cost to penalize non - canonical splicing : H ij ¼ max f H i (cid:4) 1 ; j (cid:4) 1 þ s i ; j ð Þ ; E ij ; F ij ; ~ E ij (cid:4) a i ð Þg E i þ 1 ; j ¼ max f H ij (cid:4) q ; E ij g (cid:4) e F i ; j þ 1 ¼ max f H ij (cid:4) q ; F ij g (cid:4) e ~ E i þ 1 ; j ¼ max f H ij (cid:4) d i ð Þ (cid:4) ~ q ; ~ E ij g 8 > > > > > < > > > > > : ( 6 ) Let T be the reference sequence . d ( i ) is computed as d i ð Þ ¼ 0 if T i þ 1 ; i þ 3 ½ (cid:5) is GTA or GTG p = 2 if T i þ 1 ; i þ 3 ½ (cid:5) is GTC or GTT p otherwise 8 > > < > > : where T i ; j ½ (cid:5) extracts a substring of T between i and j inclusively . d ( i ) penalizes non - canonical donor sites with p and less frequent Eukaryotic splicing signal GT C = T ½ (cid:5) with p = 2 ( Irimia and Roy , 2008 ) . Similarly , a i ð Þ ¼ 0 if T i (cid:4) 2 ; i ½ (cid:5) is CAG or TAG p = 2 if T i (cid:4) 2 ; i ½ (cid:5) is AAG or GAG p otherwise 8 > > < > > : models the acceptor signal . Equation ( 6 ) is close to an equation in Zhang and Gish ( 2006 ) except that we allow insertions immediately followed by deletions and vice versa ; in addition , we use the Suzuki – Kasahara diagonal formulation in actual implementation . If RNA - seq reads are not sequenced from stranded libraries , the read strand relative to the underlying transcript is unknown . By default , minimap2 aligns each chain twice , first assuming GT – AG as the splicing signal and then assuming CT – AC , the reverse comple - ment of GT – AG , as the splicing signal . The alignment with a higher score is taken as the final alignment . This procedure also infers the relative strand of reads that span canonical splicing sites . In the spliced alignment mode , minimap2 further increases the density of minimizers and disables banded alignment . Together with the two - round DP - based alignment , spliced alignment is several times slower than genomic DNA alignment . 2 . 4 Aligning short paired - end reads During chaining , minimap2 takes a pair of reads as one fragment with a gap of unknown length in the middle . It applies a normal gap cost between seeds on the same read but is a more permissive gap cost between seeds on different reads . More precisely , the gap cost during chaining is ( l ¼ 0 ) : c c l ð Þ ¼ 0 : 01 (cid:6) (cid:3) w (cid:6) j l j þ 0 : 5log 2 j l j if two seeds on the same read min f 0 : 01 (cid:6) (cid:3) w (cid:6) j l j ; log 2 j l jg otherwise ( After identifying primary chains ( Section 2 . 1 . 3 ) , we split each frag - ment chain into two read chains and perform alignment for each read as in Section 2 . 2 . Finally , we pair hits of each read end to find consistent paired - end alignments . 3 Results Minimap2 is implemented in the C programming language and comes with APIs in both C and Python . It is distributed under the MIT license , free to both commercial and academic uses . Minimap2 uses the same base algorithm for all applications , but it has to apply different sets of parameters depending on input data types . Similar to BWA - MEM , minimap2 introduces ‘presets’ that modify multiple parameters with a simple invocation . Detailed settings and command - line options can be found in the minimap2 manpage ( sup - plementary information ) . In addition to the applications evaluated in the following sections , minimap2 also retains minimap’s function - ality to find overlaps between long reads and to search against large multi - species databases such as nt from NCBI . Aligning nucleotide sequences with minimap2 3097 3 . 1 Aligning long genomic reads As a sanity check , we evaluated minimap2 on simulated human reads along with BLASR ( v1 . MC . rc64 ; Chaisson and Tesler , 2012 ) , BWA - MEM ( v0 . 7 . 15 ; Li , 2013 ) , GraphMap ( v0 . 5 . 2 ; Sovi (cid:2) c et al . , 2016 ) , Kart ( v2 . 2 . 5 ; Lin and Hsu , 2017 ) , minialign ( v0 . 5 . 3 ; https : / / github . com / ocxtal / minialign ) and NGMLR ( v0 . 2 . 5 ; Sedlazeck et al . , 2018 ) . We excluded rHAT ( Liu et al . , 2016 ) and LAMSA ( Liu et al . , 2017 ) because they either crashed or produced malformatted out - put . In this evaluation , minimap2 has higher power to distinguish unique and repetitive hits , and achieves overall higher mapping accuracy ( Fig . 1a ) . Minimap2 and NGMLR provide better mapping quality estimate : they rarely give repetitive hits high mapping qual - ity . Apparently , other aligners may occasionally miss close subopti - mal hits and be overconfident in wrong mappings . On run time , minimap2 took 200 CPU seconds , comparable to minialign and Kart , and is over 30 times faster than the rest . Minimap2 consumed 6 . 8GB memory at the peak , more than BWA - MEM ( 5 . 4GB ) , similar to NGMLR and less than others . On real human SMRT reads , the relative performance and frac - tion of mapped reads reported by these aligners are broadly similar to the metrics on simulated data . We are unable to provide a good estimate of mapping error rate due to the lack of the truth . On ONT (cid:2) 100kb human reads ( Jain et al . , 2018 ) , BWA - MEM failed . Kart , minialign and minimap2 are over 70 times faster than others . We have also examined tens of (cid:3) 100bp INDELs in IGV ( Robinson et al . , 2011 ) and can confirm the observation by Sedlazeck et al . ( 2018 ) that BWA - MEM often breaks them into shorter gaps . The issue is much alleviated with minimap2 , thanks to the 2 - piece affine gap cost . 3 . 2 Aligning long spliced reads We evaluated minimap2 on SIRV control data ( AC : SRR5286959 ; Byrne et al . , 2017 ) where the truth is known . Minimap2 predicted 59 918 introns from 11 018 reads . 93 . 8 % of splice juctions are pre - cise . We examined wrongly predicted junctions and found the majority were caused by clustered splicing signals ( e . g . two adjacent GT sites ) . When INDEL sequencing errors are frequent , it is difficult to find precise splicing sites in this case . If we allow up to 10bp dis - tance from true splicing sites , 98 . 4 % of aligned introns are approxi - mately correct . It is worth noting that for SIRV , we asked minimap2 to model the GT : : AG splicing signal only without extra bases . This is because SIRV does not honor the evolutionarily prevalent signal GT A = G ½ (cid:5) : : C = T ½ (cid:5) AG ( Irimia and Roy , 2008 ) . We next aligned real mouse reads ( Byrne et al . , 2017 ) with GMAP ( v2017 - 06 - 20 ; Wu and Watanabe , 2005 ) , minimap2 , SpAln ( v2 . 3 . 1 ; Iwata and Gotoh , 2012 ) and STAR ( v2 . 5 . 3a ; Dobin et al . , 2013 ) . In general , minimap2 is more consistent with existing anno - tations ( Table 1 ) : it finds more junctions with a higher percentage being exactly or approximately correct . Minimap2 is over 40 times faster than GMAP and SpAln . While STAR is close to minimap2 in speed , it does not work well with noisy reads . We have also evaluated spliced aligners on a human Nanopore Direct RNA - seq dataset ( http : / / bit . ly / na12878ont ) . Minimap2 aligned 10 million reads in < 1 wall - clock hour using 16 CPU cores . 94 . 2 % of aligned splice junctions consistent with gene annotations . In comparison , GMAP under option ‘ - k 14 - n 0 - min - intronlength 30 – cross - species’ is 160 times slower ; 68 . 7 % of GMAP junctions are found in known gene annotations . The percentage increases to 84 . 1 % if an aligned junction within 10bp from an annotated junc - tion is considered to be correct . On a public Iso - Seq dataset ( human Alzheimer brain from http : / / bit . ly / isoseqpub ) , minimap2 is also faster at higher junction accuracy in comparison to other aligners in Table 1 . We noted that GMAP and SpAln have not been optimized for noisy reads . We are showing the best setting we have experimented , but their developers should be able to improve their accuracy further . 3 . 3 Aligning short genomic reads We evaluated minimap2 along with Bowtie2 [ v2 . 3 . 3 ; ( Langmead and Salzberg , 2012 ) ] , BWA - MEM and SNAP [ v1 . 0beta23 ; ( Zaharia 0 . 9 0 . 92 0 . 94 0 . 96 0 . 98 1 10 - 5 10 - 4 10 - 3 10 - 2 10 - 1 F r a c t i on o f m apped r ead s Error rate of mapped PacBio reads ( a ) blasr - mc bwa - mem graphmapminialignminimap2ngm - lr 0 . 9 0 . 92 0 . 94 0 . 96 0 . 98 1 10 - 7 10 - 6 10 - 5 10 - 4 10 - 3 10 - 2 10 - 1 F r a c t i on o f m apped r ead s Error rate of mapped short reads ( b ) bowtie2 bwa - mem minimap2snap Fig . 1 . Evaluation on aligning simulated reads . Simulated reads were mapped to the primary assembly of human genome GRCh38 . A read is considered correctly mapped if its longest alignment overlaps with the true interval , and the overlap length is (cid:3) 10 % of the true interval length . Read alignments are sorted by mapping quality in the descending order . For each mapping quality threshold , the fraction of alignments ( out of the number of input reads ) with mapping quality above the threshold and their error rate are plotted along the curve . ( a ) Long - read alignment evaluation . 33088 (cid:3) 1000bp reads were simu - lated using pbsim ( Ono et al . , 2013 ) with error proﬁle sampled from ﬁle ‘m131017 _ 060208 _ 42213 _ * . 1 . * ’ downloaded at http : / / bit . ly / chm1p5c3 . The N50 read length is 11628 . Aligners were run under the default setting for SMRT reads . Kart outputted all alignments at mapping quality 60 , so is not shown in the ﬁgure . It mapped nearly all reads with 4 . 1 % of alignments being wrong , less accurate than others . ( b ) Short - read alignment evaluation . 10 mil - lion pairs of 150bp reads were simulated using mason2 ( Holtgrewe , 2010 ) with option ‘ – illumina - prob - mismatch - scale 2 . 5’ . Short - read aligners were run under the default setting except for changing the maximum fragment length to 800bp Table 1 . Evaluation of junction accuracy on 2D ONT reads GMAP minimap2 SpAln STAR Run time ( CPU min ) 631 15 . 9 2076 33 . 9 Peak RAM ( GByte ) 8 . 9 14 . 5 3 . 2 29 . 2 # aligned reads 103669 104199 103711 26479 # chimeric alignments 1904 1488 0 0 # non - spliced alignments 15854 14798 17033 10545 # aligned introns 692275 693553 692945 78603 # novel introns 11239 3113 8550 1214 % exact introns 83 . 8 94 . 0 87 . 9 55 . 2 % approx . introns 91 . 8 96 . 9 92 . 5 82 . 4 Notes : Mouse cDNA reads ( AC : SRR5286960 ; R9 . 4 chemistry ) were mapped to the primary assembly of mouse genome GRCm38 with the follow - ing tools and command options : minimap2 ( ‘ - ax splice’ ) ; GMAP ( ‘ - n 0 – min - intronlength 30 – cross - species’ ) ; SpAln ( ‘ - Q7 - LS - S3’ ) ; STARlong ( according to http : / / bit . ly / star - pb ) . The alignments were compared to the EnsEMBL gene annotation , release 89 . A predicted intron is novel if it has no overlaps with any annotated introns . An intron is exact if it is identical to an annotated intron . An intron is approximate if both its 5 0 - and 3 0 - end are within 10bp around the ends of an annotated intron . Chimeric alignments are deﬁned in the SAM spec ( Li et al . , 2009 ) . 3098 H . Li et al . , 2011 ) ] . Minimap2 is 3 – 4 times as fast as Bowtie2 and BWA - MEM , but is 1 . 3 times slower than SNAP . Minimap2 is more accurate on this simulated dataset than Bowtie2 and SNAP but less accurate than BWA - MEM ( Fig . 1b ) . Closer investigation reveals that BWA - MEM achieves a higher accuracy partly because it tries to locally align a read in a small region close to its mate . If we disable this feature , BWA - MEM becomes slightly less accurate than mini - map2 . We might implement a similar heuristic in minimap2 in future . To evaluate the accuracy of minimap2 on real data , we aligned human reads ( AC : ERR1341796 ) with BWA - MEM and minimap2 , and called SNPs and small INDELs with GATK HaplotypeCaller v3 . 5 ( Depristo et al . , 2011 ) . This run was sequenced from experi - mentally mixed CHM1 and CHM13 cell lines . Both of them are homozygous across the whole genome and have been de novo assembled with SMRT reads to high quality . This allowed us to con - struct an independent truth variant dataset ( Li et al . , 2017 ) for ERR1341796 . In this evaluation , minimap2 has higher SNP false negative rate ( FNR ; 2 . 6 % of minimap2 vs 2 . 3 % of BWA - MEM ) , but fewer false positive SNPs per million bases ( FPPM ; 7 . 0 versus 8 . 8 ) , similar INDEL FNR ( 11 . 2 % versus 11 . 3 % ) and similar INDEL FPPM ( 6 . 4 versus 6 . 5 ) . Minimap2 is broadly comparable to BWA - MEM in the context of small variant calling . 3 . 4 Aligning long - read assemblies Minimap2 can align a SMRT assembly ( AC : GCA _ 001297185 . 1 ) against GRCh38 in 7min using eight CPU cores , over 20 times faster than nucmer from MUMmer4 ( Marc¸ais et al . , 2018 ) . With the paf - tools . js script from the minimap2 package , we called 2 . 67 million single - base substitutions out of 2 . 78Gbp genomic regions . The transition - to - transversion ratio ( ts / tv ) is 2 . 01 . In comparison , using MUMmer4’s dnadiff pipeline , we called 2 . 86 million substitutions in 2 . 83Gbp at ts / tv ¼ 1 . 87 . Given that ts / tv averaged across the human genome is about 2 but ts / tv averaged over random errors is 0 . 5 , the minimap2 callset arguably has higher precision at lower sensitivity . The sample being assembled is a female . Minimap2 still called 201 substitutions on the Y chromosome . These substitutions all come from one contig aligned at 96 . 8 % sequence identity . The con - tig could be a segmental duplication absent from GRCh38 . In con - strast , dnadiff called 9070 substitutions on the Y chromosome across 73 SMRT contigs . This again implies our minimap2 - based pipeline has higher precision . 4 Discussions Minimap2 is a versatile mapper and pairwise aligner for nucleotide sequences . It works with short reads , assembly contigs and long noisy genomic and RNA - seq reads , and can be used as a read map - per , long - read overlapper or a full - genome aligner . Minimap2 is also accurate and efficient , often outperforming other domain - specific alignment tools in terms of both speed and accuracy . The capability of minimap2 comes from a fast base - level align - ment algorithm and an accurate chaining algorithm . When aligning long query sequences , base - level alignment is often the performance bottleneck . The Suzuki – Kasahara algorithm greatly alleviates the bottleneck and enables DP - based splice alignment invol - ving > 100kb introns , which was impractically slow 10 years ago . The minimap2 chaining algorithm is fast and highly accurate by itself . In fact , chaining alone is more accurate than all the other long - read mappers in Figure 1a ( data not shown ) . This accuracy helps to reduce downstream base - level alignment of candidate chains , which is still several times slower than chaining even with the Suzuki – Kasahara improvement . In addition , taking a general form , minimap2 chaining can be adapted to non - typical data types such as spliced reads and multiple reads per fragment . This gives us the opportunity to extend the same base algorithm to a variety of use cases . Modern mainstream aligners often use a full - text index , such as suffix array or FM - index , to index reference sequences . An advant - age of this approach is that we can use exact seeds of arbitrary lengths , which helps to increase seed uniqueness and reduce unsuc - cessful extensions . Minimap2 indexes reference k - mers with a hash table instead . Such fixed - length seeds are inferior to variable - length seeds in theory , but can be computed much more efficiently in prac - tice . When a query sequence has multiple seed hits , we can afford to skip highly repetitive seeds without affecting the final accuracy . This further alleviates the concern with the seeding uniqueness . At the same time , at low sequence identity , it is rare to see long seeds any - way . Hash table is the ideal data structure for mapping long noisy sequences . Acknowledgements We owe a debt of gratitude to H . Suzuki and M . Kasahara for releasing their masterpiece and insightful notes before formal publication . We thank M . Schatz , P . Rescheneder and F . Sedlazeck for pointing out the limitation of BWA - MEM . We are also grateful to minimap2 users who have greatly helped to suggest features and to ﬁx various issues . Funding This work was supported by the National Human Genome Research Institute [ 1R01HG010040 - 01 ] . References Abouelhoda , M . I . and Ohlebusch , E . ( 2005 ) Chaining algorithms for multiple genome comparison . J . Discrete Algorithms , 3 , 321 – 341 . Altschul , S . F . and Erickson , B . W . ( 1986 ) Optimal sequence alignment using afﬁne gap costs . Bull . Math . Biol . , 48 , 603 – 616 . Altschul , S . F . et al . ( 1997 ) Gapped BLAST and PSI - BLAST : a new generation of protein database search programs . Nucleic Acids Res . , 25 , 3389 – 3402 . Berlin , K . et al . ( 2015 ) Assembling large genomes with single - molecule sequencing and locality - sensitive hashing . Nat . Biotechnol . , 33 , 623 – 630 . Byrne , A . et al . ( 2017 ) Nanopore long - read RNAseq reveals widespread tran - scriptional variation among the surface receptors of individual B cells . Nat . Commun . , 8 , 16027 . Chaisson , M . J . and Tesler , G . ( 2012 ) Mapping single molecule sequencing reads using basic localalignment with successivereﬁnement ( BLASR ) : appli - cation and theory . BMC Bioinformatics , 13 , 238 . Daily , J . ( 2016 ) Parasail : sIMD C library for global , semi - global , and local pairwise sequence alignments . BMC Bioinformatics , 17 , 81 . Depristo , M . A . et al . ( 2011 ) A framework for variation discovery and genotyp - ing using next - generation DNA sequencing data . Nat . Genet . , 43 , 491 – 498 . Dobin , A . et al . ( 2013 ) STAR : ultrafast universal RNA - seq aligner . Bioinformatics , 29 , 15 – 21 . Farrar , M . ( 2007 ) Striped Smith - Waterman speeds database searches six times over other SIMD implementations . Bioinformatics , 23 , 156 – 161 . Gotoh , O . ( 1982 ) An improved algorithm for matching biological sequences . J . Mol . Biol . , 162 , 705 – 708 . Gotoh , O . ( 1990 ) Optimal sequence alignment allowing for long gaps . Bull . Math . Biol . , 52 , 359 – 373 . Holtgrewe , M . ( 2010 ) Mason : a read simulator for second generation sequenc - ing data . Technical Report TR - B - 10 - 06 . Institut fu¨r Mathematik und Informatik , Freie Universita¨t , Berlin . Aligning nucleotide sequences with minimap2 3099 Irimia , M . and Roy , S . W . ( 2008 ) Evolutionary convergence on highly - conserved 3’ intron structures in intron - poor eukaryotes and insights into the ancestral eukaryoticgenome . PLoSGenet . , 4 , e1000148 . Iwata , H . and Gotoh , O . ( 2012 ) Benchmarking spliced alignment programs including Spaln2 , an extended version of Spaln that incorporates additional species - speciﬁc features . Nucleic Acids Res . , 40 , e161 . Jain , M . et al . ( 2018 ) Nanopore sequencing and assembly of a human genome with ultra - long reads . Nat . Biotechnol . , 36 , 338 – 345 . Langmead , B . , and Salzberg , S . L . ( 2012 ) Fast gapped - read alignment with Bowtie 2 . Nat . Methods , 9 , 357 – 359 . Li , H . ( 2013 ) Aligning sequence reads , clone sequences and assembly contigs with BWA - MEM . arXiv , 1303 . 3997 . Li , H . ( 2016 ) Minimap and miniasm : fast mapping and de novo assembly for noisy long sequences . Bioinformatics , 32 , 2103 – 2110 . Li , H . , and Durbin , R . ( 2010 ) Fast and accurate long - read alignment with Burrows - Wheeler transform . Bioinformatics , 26 , 589 – 595 . Li , H . et al . ( 2009 ) The Sequence Alignment / Map format and SAMtools . Bioinformatics , 25 , 2078 – 2079 . Li , H . et al . ( 2017 ) New synthetic - diploid benchmark for accurate variant call - ing evaluation . bioRxiv , doi : 10 . 1101 / 223297 . Lin , H . - N . , and Hsu , W . - L . ( 2017 ) Kart : a divide - and - conquer algorithm for NGS read alignment . Bioinformatics , 33 : 2281 – 2287 . Liu , B . et al . ( 2016 ) rHAT : fast alignment of noisy long reads with regional hashing . Bioinformatics , 32 , 1625 – 1631 . Liu , B . et al . ( 2017 ) LAMSA : fast split read alignment with long approximate matches . Bioinformatics , 33 , 192 – 201 . Marc¸ais , G . et al . ( 2018 ) MUMmer4 : a fast and versatile genome alignment system . PLoS Comput . Biol . , 14 , e1005944 . Ono , Y . et al . ( 2013 ) PBSIM : pacBio reads simulator—toward accurate genome assembly . Bioinformatics , 29 , 119 – 121 . Roberts , M . et al . ( 2004 ) Reducing storage requirements for biological sequence comparison . Bioinformatics , 20 , 3363 – 3369 . Robinson , J . T . et al . ( 2011 ) Integrative genomics viewer . Nat . Biotechnol . , 29 , 24 – 26 . Sedlazeck , F . J . et al . ( 2018 ) Accurate detection of complex structural variations using single - molecule sequencing . Nat . Methods , doi : 10 . 1038 / s41592 - 018 - 0001 - 7 . (cid:4) So (cid:4) si (cid:2) c , M . , and (cid:4) Sikic , M . ( 2017 ) Edlib : a C / C þþ library for fast , exact sequence alignment using edit distance . Bioinformatics , 33 , 1394 – 1395 . Sovi (cid:2) c , I . et al . ( 2016 ) Fast and sensitive mapping of nanopore sequencing reads with GraphMap . Nat . Commun . , 7 , 11307 . Suzuki , H . , and Kasahara , M . ( 2018 ) Introducing difference recurrence rela - tions for faster semi - global alignment of long sequences . BMC Bioinformatics , 19 , 45 . Wu , S . et al . ( 1996 ) A subquadratic algorithm for approximate limited expres - sion matching . Algorithmica , 15 , 50 – 67 . Wu , T . D . , andWatanabe , C . K . ( 2005 ) GMAP : agenomicmappingandalignment programformRNAandESTsequences . Bioinformatics , 21 , 1859 – 1875 . Zaharia , M . et al . ( 2011 ) Faster and more accurate sequence alignment with SNAP . arXiv , 1111 : 5572 . Zhang , M . , and Gish , W . ( 2006 ) Improved spliced alignment from an informa - tion theoretic approach . Bioinformatics , 22 , 13 – 20 . 3100 H . Li