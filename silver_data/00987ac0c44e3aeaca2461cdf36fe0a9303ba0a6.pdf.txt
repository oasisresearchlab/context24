Learning Theory in Practice : Case Studies of Learner - Centered Design Elliot Soloway , Shari L . Jackson , Jonathan Klein , Chris Quintana , James Reed , Jeff Spitulnik , Steven J . Stratford , Scott Studer University of Michigan 1101 Beal Ave . Ann Arbor , MI 48109 , USA E - mail : sw . lcd @ umich . edu ABSTRACT learning organization in order to be productive , LCD should also have validity for the workplace . The design of software for learners must be guided by educational theory . We present a framework for learner - centered design ( LCD ) that is theoretically motivated by sociocultural and constructivist theories of learning . LCD guides the design of software in order to support the unique needs of learners : growth , diversity , and motivation . To address these needs , we incorporate scaffolding into the context , tasks , tools , and interface of software learning environments . We demonstrate the application of our methodology by presenting two case studies of LCD in practice . The central claim of LCD is that software can embody learning supports— scaffolding —that can address the learner’s growth , diversity , and motivation . Scaffolding is an educational term which refers to providing support to learners while they engage in activities that are normally out of their reach [ 37 , 39 ] . For example , Carroll’s [ 7 ] “Training Wheels” model suggests that one scaffolding strategy would be to initially hide sophisticated commands from novices . KEYWORDS : Learner - Centered Design , Educational Applications , Science Applications , Socioculturalism , Constructivism , Case Study , Scaffolding . Our selection of particular scaffolding strategies is directly informed by sociocultural and constructivist theories of learning . An expanded discussion of this theoretical framework and the practices that are informed by the framework is given in Section 2 . 1 . A brief example here will convey the basic idea : 1 . INTRODUCTION : MOTIVATION AND GOALS Education—in schools , in homes , in the workplace—is arguably one of the top growth areas for computing technologies . In designing software for education , we are designing for learners . Learners are also users , so principles of user - centered design apply ; however , user - centered design guidelines are not sufficient to address the unique needs of learners : • Theory . One tenet of constructivist theory is that learning is a process of actively building mental representations . • Practice . An implication of this theory for software - realized scaffolding is to design software which supports learners in visualizing the process of doing the task ( e . g . , writing a program ) . For example , Guzdial’s Emile [ 14 ] , a computer - based environment for learning HyperCard programming , supports students in building an explicit plan before actually writing code . • Growth . At the core of education is the growth of the learner ; promoting the development of expertise must be the primary goal of educational software . Rather than just support “doing” tasks , software designed for learners must support “learning while doing . ” • Diversity . Developmental differences , cultural differences , and gender differences play a major role in the suitability of materials for learners . To be usable by all learners , a range of software tools which address these differences must be available . Other examples of systems informed by this constructivist framework are Resnick’s StarLogo [ 27 ] , Fischer’s software - based critics [ 12 ] , and Schank’s active learning environments [ 30 ] . In contrast , Anderson’s work on intelligent tutoring systems [ 2 ] is informed by an information processing framework . • Motivation . In contrast to software developed for professionals , the student’s initial interest and continuing engagement cannot be taken for granted . The push for educational reform in the U . S . is strong . Currently , the dominant educational paradigm is “didactic instruction , ” where learning is viewed as an information transmission process : teachers have the information , students don’t , and teachers’ lectures serve to move information into the heads of students . In contrast , national and state education reform movements are advocating that To address these unique needs of learners , we are extending the established user - centered design ( UCD ) framework [ 21 ] to a learner - centered design ( LCD ) framework [ 33 ] . Our current focus is on K - 16 learners ; however , given Senge’s [ 31 ] compelling arguments that an organization must be a some combination of sociocultural and constructivist paradigms be implemented , at least in K - 12 . For example , Project 2061 , a national science curriculum developed by the American Association for the Advancement of Science [ 1 ] calls for students to engage in long - term , authentic investigations . In such an education model , the student’s role is to actively build mental representations and assimilate professional practices , while the teacher’s role becomes one of mentor and manager as opposed to information deliverer [ e . g . , 4 , 20 ] . parameters by which learner - centered software could be designed , this section illustrates what we mean by learning and how learning can be supported . Drawing upon two the - oretical perspectives , constructivism and socioculturalism , we define a framework for the discussion of context , tasks , tools , and interface to support the needs of learners . We chose these two perspectives because together they provide a wealth of principles and evidence for effective learning never before realized in the history of educational theory . From the constructivist paradigm , we draw upon research on cognition that reveals a richness to the capabilities of the human brain that previous theories of learning did not reveal . From the sociocultural paradigm , we draw upon research on activity and practice that shows that knowledge , learning , and understanding are contextualized , situated , and culturally - based . These two perspectives have informed recent developments in curricula and pedagogy ; for example , project - based science [ 4 ] , Community of Learners [ 5 ] , and cognitive apprenticeship [ 9 ] . These paradigms have also informed recent work in the use of technology in educational settings , for example , CSILE [ 29 ] , the anchored instruction work at Vanderbilt [ 8 ] , the work at Northwestern ( formerly at Bank Street ) [ 15 , 23 ] , the research at Apple’s Learning Technologies Group [ 17 ] , and Papert’s work on constructionism [ 22 ] . Since these approaches have been shown to be quite effective , the principles for LCD software are derived from the same body of evidence . Furthermore , we claim that the use of LCD software in these settings will prove to be quite advantageous ( one goal of this paper is to illustrate this claim ) . Sociocultural and constructivist theories therefore inform an authentic , project - based learning environment—and in such an environment , the need for software - realized scaffolding is paramount . ( This is discussed more fully in Section 2 . ) For example , the tasks students undertake are more complex , and often more diverse . Software - realized scaffolding can reduce the complexity of these tasks by relating discrete subtasks to their current mental representations . In this paper , then , our goals are as follows : • Articulate the Theoretical Rationale . O u r perspective , LCD , is based on the learning theories of the sociocultural and constructivist genres ( described in Section 2 . 1 ) . • Articulate the LCD Framework . We outline the main principles of LCD ( Section 2 . 2 ) . • Illustrate LCD via Case Studies . In Section 3 , we provide several case studies that exemplify how LCD has informed the design of software that is being used by both high school students and college undergraduates . Table 1 shows how the constructivist and sociocultural perspectives define the learning process , and provides a few examples of how this process might be realized through scaffolding . We conclude by summarizing the key issues in LCD . 2 . LEARNING THEORY IN PRACTICE In this section , we highlight the key notions in the sociocultural and constructivist paradigms that underlie LCD and the key notions in our perspective of LCD . In preparation for that discussion , we need to first provide a characterization of a learning environment . In particular , there are four elements that must be addressed in constructing an effective learning environment : Learning is facilitated in a multitude of ways through the scaffolding process [ 37 , 39 ] . Scaffolding is support that enables a learner to accomplish a goal that would not be attainable without the support . However , what counts as successful and appropriate scaffolding depends on how one defines learning . Table 1 shows that in the constructivist perspective , the goal is to help learners build knowledge representations and mental skills like those of experts . The table also shows that the goal in the sociocultural perspective is to help learners socially construct knowledge through the use of language , tools , and practice in a community . These two ideas lead to very different , yet useful conceptions of how scaffolding ( also shown in the Table 1 ) can be provided through the context , tasks , tools , and interface . • Context : What is the environment in which the software will be embedded ? How will it be used , and by whom ? • Tasks : What are the tasks the software will support ? • Tools : What tools will perform these tasks ? • Interface : What is the interface to those tools ? We propose to develop theoretically - motivated scaffolding strategies that focus on each of these elements . Constructivism : According to the constructivist perspective , learning is assimilation , augmentation , and self - reorganization of the incomplete mental structures held by learners [ 25 , 26 , 36 , 37 ] . The goal is to enable knowledge organization , depth , and structure that corresponds to that of an expert in the domain under study . 2 . 1 Theoretical Rationale for LCD One goal of formulating and applying LCD principles is to realize current theories of learning in software that can shape and augment curricula in ways that have been shown to be beneficial for learning . Therefore , to describe the 2 One way to support this goal is to create a context through which students actively engage in the task of working with in - formation to build external rep - resentations of their knowledge . In turn , this construction task can be scaffolded by tools , such as information management , or - ganization , and communication tools , that break the content and task into sub - parts that relate to currently held mental structures of the student . ( This concept is listed in the Examples of Scaffolding row of Table 1 . ) The tools must support the student in moving toward expert - like knowledge organizations , depth , and structure . Finally , use of these tools ( and thus the move toward expert - like knowledge ) can be scaffolded by providing visual or conceptual representa - t i o n s i n t h e interface t h a t correspond to those held by the student . Furthermore , the repre - sentations help relate the student ' s knowledge to more expert - like representations . • Reduce task complexity by structuring the task into discrete steps ( that relate to the student’s mental representations ) to reduce cognitive overhead , which will enable assimilation and accomo - dation of the new information . • Relate ( positively or negatively ) new information to currently held knowledge structures though examples , analogies , and multiple representations that help move the learner to more expert - like representations . • Motivate the student to become actively engaged by making the information or task relevant , personal , meaningful , and approachable . • Model metacognitive practices and encourage articulation and reflec - tion , being explicit about the cogni - tive benefits of these activities . How is scaffolding provided ? Examples of Scaffolding Socioculturalism Constructivism • Learning is enculturation , the process by which learners become collaborative meaning - makers among a group defined by common practices , language , use of tools , values , beliefs , and so on . • Scaffolding is provided by the contextual constraints and affordances that support under - standing , action , and meaning making through language use , practices , tools , social inter - actions , and so on of a culture . • Reduce task complexity by enabling authentic activities which provide tools and contexts that constrain the process of accomplishing the task . • Support different learners by enabling participation in co - construction of meaning and meaningful artifacts within the culture . • Provide translation from use of the learner’s cultural symbol system to that of the professional culture . • Enable the socially constructed development of value systems that support activity , engagement , and meaning making in the culture . • Learning is assimilation , augmentation , and self - reorganization of the incomplete mental structures held by learners . • Learning is growth in the abilities to self - monitor acquisition , management , and use of information and knowledge . • Scaffolding is provided by teacher - student , student - student , and student - tool / material interactions . What is learning ? Table 1 : Learning as Defined by Constructivism and Socioculturalism Furthermore , in the construc - tivist perspective , learning is growth in the abilities to self - monitor acquisition , manage - ment , and use of information and knowledge . Therefore , scaf - folding can be provided in the construction task by providing processes that the student is able to undertake , and by also explic - itly encouraging other , more expert - like mental processes used in the task . This explicit - ness , noted in Table 1 , enables social interaction , communication , and so on which , according to Table 1 , contain constraints and affordances that scaffold the execution of the tasks and practices and help move the learner toward culturally appropriate , and thus meaningful professional practices . Finally , use of the tools ( and the move to professional practices ) , can be scaffolded , for example , by providing symbol systems in the interface that have meaning in the learner’s culture , but also help move the learner toward the use of symbol systems used in the professional culture . the student to assimilate the expert - like mental skills and learn how to consciously use them . Socioculturalism : According to the sociocultural perspective , learning is enculturation , the process by which learners become collaborative meaning - makers among a group defined by common practices , language , use of tools , values , beliefs , and so on [ 6 , 19 , 28 , 38 ] . The goal is to enable practices and meaning making that are appropriate in the professional culture of the domain under study . Through LCD software , we create and sustain a learning context in which authentic , personally relevant , project - based , constructivist activities are carried out . This encourages understanding and growth in the constructivist sense that students build knowledge structures and mental Enculturation is enabled by creating an authentic context through which students participate in the tasks and practices of the professional culture . Participation in these tasks and practices require the use of tools , language , 3 skills as they engage in activities , and also in the sociocultural sense that students learn and partake in the understandings developed during professional , authentic activities rich with scaffolding cues . The use of technology is not paramount to curricula that draw upon the constructivist and sociocultural paradigms ; nonetheless , we argue that properly designed software—LCD software—can help foster the success of teaching and learning in contexts that substantiate these theories . in the upper - level undergraduate curriculum . NoRIS is a problem - solving environment we have developed for use in these classrooms . While on the surface these two contexts are different , at their core they both require the same sorts of scaffolding ; the only real difference is one of emphasis . In the high - school context , motivation is a big issue , while it is less so in the undergraduate context . However , in the undergraduate context , structuring the complex tasks that make up a computational science - style argument is the real challenge . 2 . 2 Learner - Centered Design : Connecting Theory to Needs to Practice In our discussion of each example , we first present the software design , and how it incorporates scaffolding to address learner’s needs regarding software context , tasks , tools , and interface , as summarized in Table 2 . Then , we present examples from the user testing data which illustrate the impact of specific software features designed to provide scaffolding . At the outset of this paper , we identified three needs of learners : growth , diversity , and motivation . In a fully - articulated LCD framework , each of these three needs would be addressed by theoretically - motivated scaffolding strategies in each element of a learning environment . At this point in our work , we can only partially complete this picture . Thus , Table 2 describes our current rationale for the links between theoretical justifications , learning environment element , learner need , scaffolding strategy , and implementation . 3 . 1 Case Study One : Model - It Model - It is designed to support learners in building and testing models of dynamic systems . Scientists build models to test theories and to develop a better understanding of complex systems [ 18 ] . Similarly , we want to support students in the building of models , as sociocultural learning theory says that learners should be involved in professional practices . Constructivist learning theory predicts that by constructing external representations of scientific phenomena , learners are building an internal , mental model of the phenomena . We believe that by building models , students will support , refine , and develop their understanding of a scientific system by constructing models to represent their understanding of the phenomenon and its complex interrelationships . Our research strategy has been to focus on what we feel are the most salient linkages ; we indicate that focus in Table 2 by emphasizing the salient learner’s need . In the Task element , the scaffolding strategies that we have identified , rationalized , and implemented , focus on supporting growth of understanding in the learner . In the Tools element , they focus on the diversity of learning styles and levels of expertise . And in the Interface element , they focus on motivation . To ground these rather abstract notions , in the next section we present two case studies of how we implemented the scaffolding strategies in software , and what impact that software has had on learners . Table 2 summarizes the connections between theory , needs , and practice . The modeling tools that have typically been designed for students fall into two categories : pre - defined simulations , and modeling environments . Pre - defined simulations , such as Maxis’ SimEarth and Wings for Learning’s Explorer , are not constructivist ; although user - friendly and informative within their pre - programmed domains , they do not provide access to underlying functions and representations which drive the simulation , nor the ability to add or change functionality . On the other hand , modeling environments , such as High Performance System’s Stella or Knowledge Revolution’s Working Model , allow unlimited flexibility in building models . However , they are difficult to learn because they don’t support the novice’s knowledge representation of the domain ; for these tools , building complex models requires mastery of a complex authoring language [ 35 ] . Thus , current modeling tools inadequately address the needs of learners . 3 . LEARNER - CENTERED DESIGN : TWO CASE STUDIES Model - It and NoRIS are learner - centered software tools which we have designed for two different contexts : • Model - It : High school , project - based science classroom : We are working with science teachers at Community High School in Ann Arbor to develop a new high school science curriculum in which computing technologies are routinely used , and in which the subject matter of earth science , chemistry , and biology is combined and taught in the context of meaningful , long term projects . Model - It , software for building and testing computational models , is one of the tools we are developing for use in this environment . 3 . 1 . 1 Design and LCD Scaffolding Context : Model - It , with its emphasis on building and testing models , is designed to be used in an authentic , project - based science curriculum , grounded in constructivist and sociocultural educational paradigms . The 9th and 10th grade students in our pilot studies have been engaged in a • NoRIS : University nuclear engineering classroom : The University of Michigan Nuclear Engineering department encourages the use of computational science 4 long - term project investigating the question “How safe is our water ? ” Specifically , they are studying a tributary of the Huron River which flows near the school , collecting a variety of data to determine the quality of the water . Since this water eventually ends up in their drinking fountains , the question is motivating and personally meaningful to the students . To support different learning styles , and to facilitate the learner’s shift to more abstract mental representations , these tools provide both textual and graphical representations of relationships . Given a qualitative definition , the software translates the text into a quantitative visual representation ; e . g . “decreases by less and less” is interpreted as shown by the graph in Figure 1 . Using Model - It , the students constructed models of the stream ecosystem , 1 and were assigned open - ended projects in which they were asked to build models to represent their choice of particular stream phenomena , e . g . , land use practices : the impact of man - made structures such a golf course or parking lot on stream quality . Creating models is motivating to students because the students are engaged and challenged to create an original artifact . Furthermore , as students have more input into the choice and control of their environments , their motivation for pursuing cognitively challenging problems increases [ 4 ] . Allowing students to decide how to plan , design , and work on their models can engage them in the learning process . Figure 1 : Qualitative relationship definition : Text View Tasks : Model - It scaffolds the complexity of the modeling task by providing a set of pre - defined high - level objects ( e . g . stream , bugs , golf course ) . These physical objects match the learner’s knowledge representation of the domain , in contrast to an expert’s knowledge representation which might consist of domain - independent primitives of inputs , outputs , functions and states . Figure 2 : Quantitative relationship definition : Table View Students select from this set of objects , define factors of the objects , and relationships between the factors . Model - It redefines the task of defining relationships by supporting a qualitative representation of relationships , rather than requiring formal mathematical expressions . This scaffolding is important for learners because their knowledge structures don’t initially include a quantitative command of the concepts involved . Interface : Learners often need extra motivation to sustain interest in a task , and the interactivity and engaging personal graphics of Model - It can help provide that motivation . To make the task more concrete and authentic , objects are represented with actual digitized photographs and user - defined graphics . Students can create their own objects and paste in their own pictures . In Figure 3 , the background graphic is a photograph of the actual stream the students studied . According to sociocultural perspectives of learning , this personalized representation creates a context through which the activity has meaning . Tools : Learners need tools appropriate for their learning styles and levels of expertise ; therefore Model - It provides tools for both qualitative and quantitative definition o f relationships . Initially , relationships can be defined qualitatively by selecting descriptors in a sentence , e . g . , “As stream phosphate increases , stream quality decreases by less and less” ( Figure 1 ) . As students’ knowledge representations of the domain become more expert - like , they have the option of defining the relationship more quantitatively , e . g . , by entering data points into a table ( Figure 2 ) . Model - It also supports a similar qualitative definition of rate relationships which define how one factor sets the rate of change of another factor over time . The Factor Map ( Figure 4 ) provides an interactive overview of the model . It helps students structure the task by providing a means of visualizing the network of factors and relationships , rearranging the nodes in a meaningful way , and making changes ( e . g . , drawing an arrow to create a new relationship ) . 1Model - It can be used to build a wide range of process flow models ; for our preliminary classroom study we chose the domain of stream ecosystems . In our description of the program , we use examples from this domain . 6 Figure 3 : Model - It simulation window were asked to create their own models to represent some chosen ecological phenomenon . In a recent paper [ 16 ] , we present a detailed analysis of the data . The following discussion focuses on a representative pair of students , Paul and Jim , two 9th graders from our first classroom study , and how Model - It scaffolded them in creating a complex model in just one 45 - minute period . Context : The open - ended modeling task assigned to the students gave them the flexibility to branch off and explore different topics , and to express their own understanding . For example , to demonstrate land use impacts , Paul and Jim chose to put the golf course object into their model , and show how factors of the golf course might affect the stream and the organisms living in it : J : Let ' s use that one . Figure 4 : Interactive overview of the model : Factor Map P : The golf course ? J : Yeah , we haven ' t used that one yet . P : How the golf course affects what , though ? J : How the golf course affects , um , bacteria . P : Too hard . J : It ' s easy . Because the golf course , a lot of geese are on the golf course , and the geese feces go in the water . P : Oh , and it affects fecal coliform J : Which in turn affects the bacteria , and the fecal coliform grows on bacteria . P : Okay , where do you want the golf course ? J : Right there . This opportunity to build their own models was extremely motivating for Paul and Jim ; they displayed excitement and enthusiasm for the project throughout the class period . Once they had completed their initial goal of representing the golf course impact , they branched out on their own to create more relationships , from the stream quality to the mayfly population . They expressed pride in their model , and called the teacher over to show it off to her . This reaction was typical of the entire class ; as one student said in post - interviews , “It makes you think more about a real - life situation , where ' s there ' s no real answer— you set it up and everything . ” The highly interactive , direct manipulation interface of Model - It can help provide sustained engagement in the task [ 21 , 32 ] . During a simulation , meters and graphs provide immediate feedback of factor values as they change over time ( Figure 4 ) . Students can make changes in factor values even while the model is running , and immediately see the impact . From a constructivist perspective , interactively working and reworking the representation enables the student to continue constructing their knowledge representations [ 24 ] . By integrating the building and testing components of modeling , Model - It supports an iterative process of model construction . Tasks : Students were comfortable expressing themselves qualitatively , and using the qualitative definition of relationships , they were able to build complex relationships very quickly : P : As geese increases fecal coliform increases at about the same . And then if we want , it won ' t take long to put in nitrates . Finally , to encourage students to reflect , and therefore extend their knowledge and their metacognitive skills , the interface encourages articulation by providing explanation fields ( e . g . , Figure 2 ) where students can enter explanations for the objects , factors and relationships they create . J : Okay . P : We can add that in . J : Cause that ' s part of fertilizer . . . P : Cause that ' s part of fertilizer , yeah . So we go to stream . . . okay . . . to nitrates N I T nitrates . J : Lesser and lesser . 3 . 1 . 2 Results Versions of Model - It have been used in several classroom studies with 9th and 10th grade students . In each , students have worked in groups of two with the program , over a period of one or two weeks . Each study culminated in the assignment of an open - ended modeling task , where students Paul and Jim created four accurate , interrelated relationships in four minutes , and in the next four minutes , tested and verified their model , and found another relationship to add ( they realized that the size of the golf course should affect 7 the number of geese on it ) . Figure 4 , above , shows the factor map of their final model . In class discussion , they proudly described how their model worked : researchers are turning to computational science when they investigate problems because increased computing power allows them to model physical phenomena , giving more explanatory power to their arguments . Therefore , it is important for students to use authentic tools as they learn to conduct investigations and construct scientific arguments [ 10 ] . However , learning to use computational science tools and techniques is a complex process that poses difficulties to the learner . P : The size of the golf course affected the geese , the number of geese . . . J : The more land there is the more geese . . . And the more geese the more fecal coliform . P : The golf course size affected nitrates and phosphates . . . because the bigger golf course has more fertilizer and fertilizer has nitrates and phosphates in it . First , there are many different individual computational tools available to scientists , but few tools that provide comprehensive support for the entire investigative process . For example , visualization packages are very powerful , but very specific for a certain subtask of an investigation . Others , such as Mathematica , Maple , etc . , are attempting to integrate more functionality within a single package , but the packages are still complex and do not support all investigative tasks [ 34 ] , nor do they provide support for learners . Teacher : Do you have any [ relationships ] going to quality ? P : Well I’m getting there , okay ? This is complicated ! Okay , fecal coliform goes to quality , phosphate goes to quality , nitrate goes to quality . . . And then the quality went to rate of growth . Teacher : Why ? P : Because the better quality . . . J : There is the more mayflies can grow . And then the growth went to count and the decay went to the count . Second , computational science results in artifacts of different media types , but there is no support for the construction of the scientific argument , or for the management of the artifacts necessary to support the investigatory process [ 13 ] . For example , in a given situation , a student may need to refer to a source code file , data file , and graph , all of which may reside in different directories . The responsibility for organization and access of these artifacts is with the student . Tools : Providing a variety of modeling and visualization tools proved very useful for learning , as students could choose the tool which made the most sense to them . For example , we provide both qualitative and quantitative means of defining relationships to support students at different levels of expertise . While Paul and Jim exclusively used the qualitative “text view” tool , another classmate preferred the precision afforded by the quantitative “table view . ” Often , students transitioned from one to the other during our longer studies , switching to the " table view " when they realized a need to make their models more accurate . Finally , students are confronted with a variety of different interfaces and tools , which adds an additional level of complexity to the investigation . Interface : Meters and graphs provided visualization of simulations as they ran , and were used for model testing and verification . For instance , during their testing , Paul and Jim used the meters to try different values of golf course size , and realized that it should affect the number of geese on the golf course , so they went back to put that relationship in : “So , golf course size affects golf course geese . Yeah , we can do it . As golf course size increases , geese increases by about the same . ” In order to address these shortcomings and provide computer - based support to help students learn the investigative process , we have developed NoRIS ( Notebook - based Research and Investigative process Support system ) . 3 . 2 . 1 Design and LCD Scaffolding Context : NoRIS provides a platform that enables students to use computational science so that they can carry out a scientific investigation . NoRIS is being used in a senior - level nuclear engineering class where students investigate numerical methods . NoRIS assumes more of a sociocultural perspective : by giving these students an environment that reduces many of the complexities inherent in computational science , NoRIS aims to support students as they begin learning the tools and practices of the professional researcher . 3 . 1 . 3 Summary Our Model - It testing showed that the software design scaffolded the learners ' growth , diversity , and motivation . Within the context of this project - based classroom , working on an authentic problem , students were able to build and test computational models , a task which is usually inaccessible to learners in high school science classrooms . Students used modeling tools provided by the software in ways reflective of their learning styles ; their engagement with the modeling task was evident in their interaction with the interface as they built and tested their models . Tasks : Students with little expertise can be hindered by having to remember the variety of disjointed , lower - level tasks that make up an investigation . NoRIS therefore restructures an investigation in terms of high - level tasks : 3 . 2 Case Study Two : NoRIS NoRIS is designed to provide an environment that will enable students to use professional computational science tools to carry out a scientific investigation . More and more • Notekeeping : Students continually record important observations , data , etc . throughout an investigation . 8 • Building cases : A case encompasses the major tasks that use computational tools , such as writing numerical - method programs , visualizing data , etc . NoRIS has a simple , consistent interface to all of the different tools , by providing button and menu - based access to each tool . This corresponds to the constructivist principle that complexity is reduced by offering similar processes that match current mental structures for a range of tasks . Examples include : By providing support and structure for these high - level tasks , NoRIS allows the student to begin constructing an understanding of the investigative activities that researchers perform . • The Workspace Tool ( Figure 6 ) provides button and menu - based access to the tools needed by the student to build and analyze numerical method cases . As well as restructuring the investigative process , NoRIS also reduces complexity by handling the student’s managerial tasks , such as artifact management . Artifact management is important because throughout an investigation , the student may have to re - use , modify , or refer to artifacts such as notes , source code , data files , etc . However , it becomes tedious and distracting for a student to coherently organize their artifacts . By supporting artifact management , the student can focus more on their investigation less on mundane , bookkeeping tasks . Figure 6 : The Workspace Tool Tools : In order to provide an environment that students can use for scientific inquiry , NoRIS provides the variety of tools needed by beginning students to complete their tasks . As we have seen , there are many computer tools that can be used in a scientific investigation : computational tools ( such as compilers and algebraic / mathematical software ) , visualization tools , etc . NoRIS provides this functionality by integrating existing software packages . • The Multiplot Tool ( Figure 7 ) allows the researcher to easily plot data files in the same graph window for analysis . The student can simply “check off” all of the files that they want to plot and then press the Plot button . However , for tasks such as artifact management , there are no existing tools that the student can use . NoRIS is designed as a computer notebook , a metaphor that c o r r e s p o n d s t o t h e s t u d e n t ' s c u r r e n t m e n t a l representations—they know what it is and how to use it . The notebook metaphor provides an organizational structure to help students manage the different artifacts that they have created during the argument . For example , NoRIS includes the Notebook Summary window ( Figure 5 ) that summarizes the different numerical - method programs that have been written by the student . Figure 7 : The Multiplot Tool Figure 5 : Notebook Summary Window Once students can access the necessary functionality , they need further support to help them identify and complete their investigative tasks . To further sustain the students as they proceed through their investigation , NoRIS provides visual cues in the interface so that the students can see the different steps in the process , and the different types of information that they must record . Examples include : • The Workspace Tool ( Figure 6 ) contains a task diagram ( a constructivist concept ) of the process used to construct a case for the numerical method that they are investigating . Each button represents a different stage in the case - building process . Pressing a button presents the user with a menu identifying their options for that particular stage . Interface : One of the complexities of computational science is having to learn different computer tools and interfaces . Students may have access to the necessary functionality , but if they do not have an accessible interface to that functionality , they will not use the tools . Therefore , • Notepad windows ( Figure 8 ) contain button palettes that identify to the student the different types of 9 information that they should be thinking about and recording throughout the investigation , such as problem objectives , descriptions of the numerical methods they are investigating , etc . This structure encourages students to reflect and keep important notes throughout their investigation . We also saw that it was useful for NoRIS to handle some of the student’s tasks , such as artifact management . One student noted the advantages of this : “I am usually disorganized and after a while , I spend a lot of time organizing things—setting up directories , putting codes and things in the right places . NoRIS takes care of this—this really helps because it lets me concentrate on the problem . . ” We also saw that automatic artifact management helped students manage the complexity of re - using and modifying existing artifacts to build new cases . Since it was easy for students to find and re - use old artifacts , students could build new cases from old cases quickly ; this encouraged students to experiment with numerical methods by continually modifying a base case for the different experiments . Tools : Students liked the fact that they had all of the necessary tools available to them in one application . Since students are not experts in using computational science , they may not know what tools to use in given situations : “ [ NoRIS ] really provides an integrated package that beginning students can really use . . . having all of the needed information ‘at my fingertips’ is an advantage so that I do not have to bounce around different programs . . . this is good for students who are inexperienced with [ computers ] ” By having all of the functionality available to them in one application , the students did not have to be moving from application to application , which can be a problem for students who have little expertise with computational science . Figure 8 : Notepad Window 3 . 2 . 2 Results NoRIS was initially tested in three two - week trials with two nuclear engineering students in each trial . For each trial , the students were given a problem to work on using NoRIS . More recently , NoRIS was used in a nuclear engi - neering class by five senior - level undergraduate students who worked on week - long , project - based assignments to analyze numerical methods in particle - distribution problems . Interface : Students liked using the interface because it was easy to invoke their different tools . The fact that they could use menus and buttons to access many of their tools made it easy for the student to quickly get started with their investigation . Students also appreciated the different visual cues provided by the interface . For example , one student commented on the notepad button palette that identifies important pieces of information that should be recorded : Context : Using NoRIS , students were able to complete their particle - distribution assignments , verifying that NoRIS facilitates their investigatory process . We saw that NoRIS gave students an environment that made computational science accessible and investigations manageable . “ [ The button palette ] helps lay out the thought process I should be following when I start working on my problem . . . Seeing [ the buttons ] makes me pause and think about the problem rather than just jumping in and starting to write programs , which is what I might normally do . ” Tasks : The task decomposition defined in NoRIS helped reduce the complexity of an investigation , and students quickly caught on to the tasks decomposition . They saw that their investigation involved setting up different cases for their different numerical methods and keeping notes on those cases . We soon observed students trying out new experiments by simply setting up new cases , even though their problem did not necessarily indicate that they needed to do so . The visual cues of the interface therefore structure the task and articulate their thoughts . 3 . 3 . 3 Summary Our user testing has shown that students are able to use NoRIS to complete authentic scientific investigations , and that they find the structure provided by the program helpful . Furthermore , by providing an accessible interface to the array of computational tools used by professional 10 researchers , NoRIS supports learners in their enculturation into professional practices . 6 . Brown , J . S . , Collins , A . , & Duguid , P . ( 1989 ) Situated Cognition and the Culture of Learning . Educational Researcher , Jan - Feb , 32 - 42 . 4 . CONCLUDING REMARKS 7 . Carroll , J . M . , & Carrithers , C . ( 1984 ) Training Wheels in a User Interface , CACM , Vol . 27 , No . 8 , August , 800 - 806 Model - It and NoRIS are two components of the ScienceWare suite of tools , a “computational workbench” that we are developing to scaffold learners engaged in the full range of scientific investigatory activities . As we apply our LCD strategies to the design of the ScienceWare tools , and study the use of these tools in classroom settings , our goal is to develop a fully - articulated LCD framework in which the needs of learners are specifically addressed by theoretically - motivated scaffolding for each element of the learning environment . 8 . Cognition and Technology Group at Vanderbilt . ( 1992 ) The Jasper Series as an Example of Anchored Instruction : Theory , Program Description , and Assessment Data . Educational Psychologist , 27 ( 3 ) , 291 - 315 . 9 . Collins , A . , Brown , J . S . , & Newman , J . ( 1989 ) Cognitive Apprenticeship : Teaching the craft of reading , writing , and mathematics . In L . B . Resnick ( Eds . ) , Cognition and instruction : Issues and agendas Hillsdale , NJ : Lawrence Erlbaum Associates . 10 . Cunningham , S . , Brown , J . R . , McGrath , M . ( 1990 ) Visualization in Science and Engineering Education , Visualization in Scientific Computing , IEEE Computer Society Press , 48 - 57 . In putting forth the notion of UCD , Norman , Draper , and their book contributors [ 21 ] sought to focus attention on the needs of users at a time when there was growing interest in developing usable and productive interfaces and interaction paradigms . Similarly , in putting forth the notion of LCD , our intent is to focus discussion on work that is expressly intended for learners at a time when , as Business Week [ 3 ] declared , there is a “revolution” going on in educational software . UCD has proven itself to be a useful notion ; time will tell whether LCD is similarly so . 11 . Defanti , T . A . , Brown , M . D . , McCormick , B . H . ( 1990 ) Visualization : Expanding Scientific and Engineering Researcher Opportunities , Visualization in Scientific Computing , IEEE Computer Society Press , 32 - 47 . 12 . Fischer , G . , Nakakoji , K . , Ostwald , J . , Stahl , G . , & Sumner , T . , ( 1993 ) Embedding Computer - Based Critics in the Contexts of Design , Human Factos in Computing Systems , INTERCHI ‘93 Conference Proceedings , Amsterdam , 157 - 164 . ACKNOWLEDGMENTS We would like to extend our great appreciation to the other members of the Highly Interactive Computing ( HI - C ) research group , the teachers and students at Community High School in Ann Arbor , and Dr . William Martin and the University of Michigan Nuclear Engineering Department , for their feedback and support . 13 . Gallopoulos , E . , Houstis , E . , Rice , J . R . ( 1994 ) Computer as Thinker / Doer : Problem - Solving Environments for Computational Science , IEEE Computational Science & Engineering , Vol . 1 , No . 2 , Summer 1994 , 11 - 23 . 14 . Guzdial , M . ( 1993 ) Emile : Software - Realized Scaffolding for Science Learners Programming in Mixed Media . Unpublished Ph . D . dissertation , University of Michigan . This research has been supported by the National Science Foundation ( RED 9353481 and IRI 9117084 ) , the National Physical Science Consortium , and the University of Michigan . 15 . Hawkins , J . , & Pea , R . D . ( 1987 ) Tools for bridging the cultures of everyday and scientific thinking . Special Issue : Cognitive consequences of technology in science education . Journal of Research in Science Teaching , Vol . 24 ( 4 ) , 291 - 307 . REFERENCES 1 . American Association for the Advancement of Science ( 1992 ) Science for all Americans : A Project 2061 Report on Literary Goals in Science , Mathematics , and Technology , Technical Report , AAAS Publication , Washington , D . C . 16 . Jackson , S . L . , Stratford , S . J . , Krajcik , J . S . , & Soloway , E . ( 1995 ) Learner - Centered Software Design to Support Students Building Models , to be presented at American Educational Research Association , Annual Meeting , to appear . 2 . Anderson , J . R . ( 1988 ) The Expert Module . In Martha C . Polson & J . Jeffrey Richardson ( Eds . ) , Foundations of Intelligent Tutoring Systems , Hillsdale , NJ : Erlbaum . 17 . Kay , A . ( 1991 ) Computers , networks and education . Scientific American , 265 ( 3 ) , 138 - 148 . 18 . Kreutzer , W . ( 1986 ) Systems Simulation : Programming Styles and Languages , Addison - Wesley , Wokingham , England . 3 . Armstrong , L . , Yang , D . J . , & Cuneo , A . , ( 1994 ) The Learning Revolution , Business Week , No . 3360 , Feb . 28 , 80 - 88 19 . Lave , J . ( 1993 ) Understanding practice : perspectives on activity and context . Cambridge ; New York : Cambridge University Press . 4 . Blumenfeld , P . C . , Soloway , E . , Marx , R . W . , Krajcik , J . S . , Guzdial , M . , & Palinscar , A . ( 1991 ) Motivating Project - Based Learning : Sustaining the Doing , Supporting the Learning . Educational Psychologist , 26 ( 3 & 4 ) , 369 - 398 . 20 . Marx , R . W . , Blumenfeld , P . , Krajcik , J . S . , Blunk , M . , Crawford , B . , Kelly , B . , & Mills , K . ( 1994 ) Enacting project - based science : Experiences of four middle grade teachers . Elementary School Journal , 94 , 517 - 538 . 5 . Brown , A . , & Campione , J . ( 1990 ) Communities of learning , or A context by any other name . Contributions to Human Development , 21 , 108 - 125 . 21 . Norman , D . , Draper , S . ( 1986 ) User Centered System Design , L . Erlbaum & Assoc . , Hillsdale , NJ . 11 22 . Papert , S . ( 1993 ) The Children’s Machine : Rethinking School in the Age of the Computer , Basic Books , NY 31 . Senge , P . ( 1990 ) The Fifth Discipline : The Art and Practice of The Learning Organization , Doubleday , New York , NY 23 . Pea , R . , & Gomez , L . ( 1992 ) Distributed multimedia learning environments : Why and how ? ( Technical Report No . 25 ) The Institute for the Learning Sciences at Northwestern University . 32 . Shneiderman , B . ( 1983 ) Direct Manipulation : A Step Beyond Programming Languages , IEEE Computer . Vol . 16 , No . 8 , August , 57 - 69 24 . Perkins , A . ( 1986 ) Knowledge as Design . Hillsdale , NJ : Lawrence Erlbaum Associates . 33 . Soloway , E . , Guzdial , M . , & Hay , K . E . ( 1994 ) Learner - Centered Design : The Challenge for HCI in the 21st Century , Interactions , Vol . 1 , No . 2 , April , 36 - 48 25 . Piaget , J . ( 1954 ) The construction of reality in the child . New York : Basic Books . 34 . Springmeyer , R . R . , Blattner , M . M . , & Marx , N . L . ( 1992 ) A Characterization of the Scientific Data Analysis Process , Proceedings of IEEE Visualization ' 92 , 235 - 242 . 26 . Resnick , L . B . , & Glaser , R . ( 1976 ) Problem solving and intelligence . In L . B . Resnick ( Eds . ) , The nature of intelligence . Hillsdale , NJ : Erlbaum . 35 . Tinker , R . F . ( 1990 ) Teaching Theory Building : Modeling : Instructional Materials and Software for Theory Building , NSF Final Report , TERC . 27 . Resnick , M . ( 1992 ) Beyond the Centralized Mindset : Explorations in Massively - Parallel Microworlds , Unpublished Ph . D . dissertation . Massachusetts Institute of Technology . 36 . vonGlaserfeld , E . ( 1989 ) Cognition , construction of knowledge , and teaching . Synthese , 80 , 121 - 140 . 28 . Rogoff , B . ( 1990 ) Apprenticeship in thinking : Cognitive development in social context . New York : Oxford University Press . 37 . Vygotsky ( 1978 ) Mind in Society . Cambridge , MA : Cambridge University Press . 38 . Wertsch , J . ( Ed . ) ( 1985 ) Culture , communication and cognition : Vygotskian perspectives . Cambridge , MA : Cambridge University Press . 29 . Scardamalia , M . , & Bereiter , C . ( 1991 ) Higher levels of agency for children in knowledge building : A challenge for the design of new knowledge media . Journal of the Learning Sciences , 1 ( 1 ) , 37 - 68 . 39 . Wood , D . , Bruner , J . S . , & Ross , G . ( 1975 ) The role of tutoring in problem - solving . Journal of Child Psychology and Psychiatry , 17 , 89 - 100 . 30 . Schank , R . , ( 1993 ) Learning via Multimedia Computers , Communications of the ACM , Vol . 36 , No . 5 , May , 54 - 56 12