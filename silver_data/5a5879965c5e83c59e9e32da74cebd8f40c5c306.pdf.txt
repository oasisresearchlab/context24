Six Learning Barriers in End - User Programming Systems Andrew J . Ko , Brad A . Myers , and Htet Htet Aung Project Marmalade Human - Computer Interaction Institute Carnegie Mellon University My name is Andrew Ko , and today I’ll be talking about some work that I did with Htet Htet Aung and my advisor Brad Myers . Sarah , Bob , John on content : Bob : Worse than last year , too superﬁcial , not useful . Why categorize ? Was the number 6 useful , or was it what I found ? Implications for design : copy and paste , then build a tool to help it . Sarah : Needs to be more systematic to come up with categories . Factor analysis ! What about independence ? Objectify the categories . Both : Too high level . Wasn’t clear what the process was that produced the design recommendations . Hunch ? Strategy ? Design principle ? Where did the solutions come from ? Sarah : no links to literature . To what extent have these barriers been seen before ? Not very scholarly . Mark : Really liked it . Mark sees ways to apply it . Brad : what’s missing ? Process timeline . Motivation for environments , study of what people are doing now , a bag of results . How do we turn those into design guidelines ? What are the problems ? Come up with categories . Just to make sure the categories are reasonable , we had a colleague do it . This inspired new ideas . Now , the audience can use these categories for their design tool . Helps you come up with solutions that wouldn’t have been though of otherwise . Brad : people liked the context slide in the beginning . The future work slide was good too . Introduction ● The Study ● Six Types of Barriers ● Conclusions 2 Project Marmalade ■ Tr ying to make programming easier to do by designing new programming systems . ■ Designed the Whyline to help with debugging difﬁculties . ■ What other barrier s programming systems pose ? ■ What should be designed to remove these barrier s ? Introduction Introduction ● The Study ● Six Types of Barriers ● Conclusions 3 Rising Needs and Rising Barriers In 1991 . . . ( 1 ) Type qbasic ( 2 ) Type PRINT “Hello World ! ” ( 3 ) Type F5 . ■ By 2012 , 30 % of new jobs may require programming skills ! ( US Department of Labor ) . ■ But learning to program has only become more complex . In 2004 . . . ( 1 ) Choose File > New > Project . . . ( 2 ) Select Visual Basic Project . ( 3 ) Select Windows Application . ( 2 ) Drag a button onto the form . ( 3 ) Name the button . ( 4 ) Double - click on the button . ( 5 ) Find Private Sub MyButton _ Click ( ByVal sender as ( 6 ) Type Debug . WriteLine ( ”Hello World ! ” ) ( 7 ) Choose Debug > Start . Introduction And most aren’t professionals . When I started in 1991 . . . In 2004 . . . every single one of these is a barrier to learning to program . And we haven’t even started to program yet ! What are these barriers and how do they impact learners’ progress ? And how can they help us design better programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 4 Outline ■ What is known about learning barrier s in programming ? ■ A Study of Visual Basic . NET 2003 ■ Six types of learning barrier s and how to remove them Introduction First , I’ll brieﬂy discuss what I mean by “Learning Barriers” and describe the design of our study . The rest of the talk will be focused on the six types of barriers that we found , and some ideas on how we might remove them . Introduction ● The Study ● Six Types of Barriers ● Conclusions 5 What is Known About Barriers ? ■ Mostly about barrier s in programming languages . - “Syntax” is an awkward concept and difﬁcult to learn . ■ Ver y little about the rest of a programming system : - Editor , debugger , help system , error messages , etc . ■ Do these tools pose any barrier s ? Introduction / / Get the name of the Relation , and of the Element pointed to . StringProperty relationName = ( ( StringProperty ) currentEnvironment . get ( " name " ) ) ; ElementInterface currentEnvironmentTo = currentEnvironment . get ( " to " ) ; StringProperty elementName = null ; if ( currentEnvironmentTo ! = null ) elementName = ( StringProperty ) currentEnvironmentTo . get ( " name " ) ; String preferredName = null ; Do these tools pose any barriers ? And if so , what are they , and how do they inﬂuence learner’s success ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 6 Learning Barriers L e a r n i n g B a rr i e r Introduction When approaching barriers , what do learners do ? Blackwell has characterized learners reasoning in terms of cost , risk and reward . Introduction ● The Study ● Six Types of Barriers ● Conclusions 6 Learning Barriers L e a r n i n g B a rr i e r Introduction When approaching barriers , what do learners do ? Blackwell has characterized learners reasoning in terms of cost , risk and reward . Introduction ● The Study ● Six Types of Barriers ● Conclusions 6 Learning Barriers L e a r n i n g B a rr i e r Introduction cost , risk , reward ? ( Blackwell 2002 ) When approaching barriers , what do learners do ? Blackwell has characterized learners reasoning in terms of cost , risk and reward . Introduction ● The Study ● Six Types of Barriers ● Conclusions 7 Learning Barriers Give up and look for something else . . . L e a r n i n g B a rr i e r Introduction In this case , the system may be abandoned . What we want to happen is that the learner tries to overcome the barrier . If they do , one of three things may happen . Introduction ● The Study ● Six Types of Barriers ● Conclusions 7 Learning Barriers Give up and look for something else . . . L e a r n i n g B a rr i e r Introduction In this case , the system may be abandoned . What we want to happen is that the learner tries to overcome the barrier . If they do , one of three things may happen . Introduction ● The Study ● Six Types of Barriers ● Conclusions 8 Learning Barriers L e a r n i n g B a rr i e r Introduction What we want to happen is that learners have the conﬁdence to overcome the barrier . But this isn’t realistic . What usually happens is that 1 ) Learners make some invalid assumption and aren’t able to overcome the barrier . 2 ) Or , they make some invalid assumption which helps them overcome one barrier , but leads to another . So the focus of this study was . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 8 Learning Barriers L e a r n i n g B a rr i e r Introduction What we want to happen is that learners have the conﬁdence to overcome the barrier . But this isn’t realistic . What usually happens is that 1 ) Learners make some invalid assumption and aren’t able to overcome the barrier . 2 ) Or , they make some invalid assumption which helps them overcome one barrier , but leads to another . So the focus of this study was . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 8 Learning Barriers L e a r n i n g B a rr i e r Progress Introduction What we want to happen is that learners have the conﬁdence to overcome the barrier . But this isn’t realistic . What usually happens is that 1 ) Learners make some invalid assumption and aren’t able to overcome the barrier . 2 ) Or , they make some invalid assumption which helps them overcome one barrier , but leads to another . So the focus of this study was . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 8 Learning Barriers Invalid Assumption L e a r n i n g B a rr i e r Progress Introduction What we want to happen is that learners have the conﬁdence to overcome the barrier . But this isn’t realistic . What usually happens is that 1 ) Learners make some invalid assumption and aren’t able to overcome the barrier . 2 ) Or , they make some invalid assumption which helps them overcome one barrier , but leads to another . So the focus of this study was . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 8 L e a r n i n g B a rr i e r Invalid Assumption Learning Barriers Invalid Assumption L e a r n i n g B a rr i e r Progress Introduction What we want to happen is that learners have the conﬁdence to overcome the barrier . But this isn’t realistic . What usually happens is that 1 ) Learners make some invalid assumption and aren’t able to overcome the barrier . 2 ) Or , they make some invalid assumption which helps them overcome one barrier , but leads to another . So the focus of this study was . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 9 What are the Barriers ? ■ What are the signiﬁcant barrier s in programming systems ? ■ What types of invalid assumptions do these barrier s predispose ? ■ How can we remove these barrier s from programming systems ? Introduction To answer these questions , we designed a study of Visual Basic . NET . Introduction ● The Study ● Six Types of Barriers ● Conclusions 10 A Study of Visual Basic . NET ■ Obser ved 40 non - programmer s learning to use Visual Basic . NET 2003 . ■ Students in a cour se called Programming Usable Interfaces ■ Looking for insurmountable barrier s . The Study Taught here at Carnegie Mellon . Barriers that learners could not be overcome without help Introduction ● The Study ● Six Types of Barriers ● Conclusions 10 A Study of Visual Basic . NET ■ Obser ved 40 non - programmer s learning to use Visual Basic . NET 2003 . ■ Students in a cour se called Programming Usable Interfaces ■ Looking for insurmountable barrier s . The Study Taught here at Carnegie Mellon . Barriers that learners could not be overcome without help Introduction ● The Study ● Six Types of Barriers ● Conclusions 10 A Study of Visual Basic . NET ■ Obser ved 40 non - programmer s learning to use Visual Basic . NET 2003 . ■ Students in a cour se called Programming Usable Interfaces ■ Looking for insurmountable barrier s . The Study Taught here at Carnegie Mellon . Barriers that learners could not be overcome without help Introduction ● The Study ● Six Types of Barriers ● Conclusions 11 The Method ■ Obser ved learner s wor king on assignments from class . ■ If they got “stuck , ” they could consult an oracle for guidance . ■ When learner s sought advice , they were asked to repor t : 1 ) What they were stuck on . 2 ) The series of events led to becoming stuck . 3 ) What they had tried to “unstick” themselves . ■ After soliciting this information , the oracles helped learner s overcome the barrier . The Study ( 1 ) making a form that computes an average , ( 2 ) designing an alarm clock interface , and ( 3 ) designing a copy machine interface . After 4 weeks of observations . . . Introduction ● The Study ● Six Types of Barriers ● Conclusions 12 The Data ■ Overall , we sampled 130 barrier s from 22 students . - 74 were insurmountable . - 56 seemed to be overcome , but because learners made invalid assumptions , these led insurmountable barriers of a different type . ■ The barrier s were analyzed for similarities and common proper ties , leading to 6 distinct categories of barrier s . ■ Two individuals independently categorized each barrier , attaining 94 % agreement . The Study . . . were insurmountable , and could not overcome them without our help . For the other 56 , learners thought they had overcome them , but had actually made invalid assumptions , leading them to insurmountable barriers of a different type . Introduction ● The Study ● Six Types of Barriers ● Conclusions 13 Six Learning Barriers ■ Design ■ Use ■ Coordination ■ Selection ■ Under standing ■ Information The order in which learners typically encountered them . } Six Types of Barriers We’ll discuss these in the order that learners typically encountered them . Introduction ● The Study ● Six Types of Barriers ● Conclusions 14 Design Barriers ■ Inherently difﬁcult computational problems , independent of the programming interfaces used to solve it . ■ Learner s could easily conceive of a solution , but their solutions were wrong . A Problem A Potential Solution 3 % of barriers obser ved Six Types of Barriers This wrong solutions led to other barriers . For example , Introduction ● The Study ● Six Types of Barriers ● Conclusions 15 ■ Learner s had to sor t a list of names alphabetically . ■ Also : event concurrency , Boolean logic , and data ﬂow . Design Barriers How do I alphabetize a list of names ? . . . maybe I can just keep moving the names until it looks right . . . . David Andy Bryan Chris David Chris B r y a n Andy Six Types of Barriers Other design barriers we observed involved . . . So how can we remove design barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 16 Removing Design Barriers ■ Learner s did not have the time or interest in solving these conceptually difﬁcult problems . ■ Instead , provide solutions to these hard problems . ■ The challenge : make solutions discoverable , usable and customizable . Six Types of Barriers For example , Visual Basic was very helpful when learners found prepackaged sorting algorithms that they could use . The next type of barrier that learners typically encountered is what we call selection barriers . Introduction ● The Study ● Six Types of Barriers ● Conclusions 17 Selection Barriers ■ Aspects of a programming system’s suppor t for discovering ( 1 ) What programming interfaces are available , and ( 2 ) Which can be used to achieve a par ticular behavior . ■ Learner s typically overcame selection barrier s by ﬁnding example code . What programming interfaces can I choose from ? “Which ones can do X . . . ? ” 10 % of barriers obser ved Six Types of Barriers Introduction ● The Study ● Six Types of Barriers ● Conclusions 18 What can help me keep time ? ■ Keeping time for an alarm clock . ■ Also : text formatting , arithmetic , image drawing Selection Barriers Six Types of Barriers When learners asked Visual Basic about time , it answered : “You can keep time with one of these 500 useful tools ! ” We also observed selection barriers with text formatting , arithmetic , and image drawing . So how can we remove selection barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 18 What can help me keep time ? ■ Keeping time for an alarm clock . ■ Also : text formatting , arithmetic , image drawing Selection Barriers Six Types of Barriers When learners asked Visual Basic about time , it answered : “You can keep time with one of these 500 useful tools ! ” We also observed selection barriers with text formatting , arithmetic , and image drawing . So how can we remove selection barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 18 Which one should I use ? ? ? What can help me keep time ? ■ Keeping time for an alarm clock . ■ Also : text formatting , arithmetic , image drawing Selection Barriers Six Types of Barriers When learners asked Visual Basic about time , it answered : “You can keep time with one of these 500 useful tools ! ” We also observed selection barriers with text formatting , arithmetic , and image drawing . So how can we remove selection barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 19 Removing Selection Barriers ■ It should not be easier to go to Google and search 4 . 5 billion pages than to search the MSDN librar y ( but it was ) . ■ Group programming interfaces by what they do , what they depend on , and what they can interact with . - Provide examples that learners can use directly in their code - Provide suppor t for adapting the examples to their code ■ The challenge : do the above for potentially thousands of programming interfaces in a programming system . Six Types of Barriers Not by how they’re named or implemented . The next barrier that learners typically encountered were use barriers . Introduction ● The Study ● Six Types of Barriers ● Conclusions 20 Use Barriers ■ Proper ties of a programming interface that obscure - What actions can be performed on it , - How to perform these actions , and - What effect these actions they will have . ■ Direct manipulation interfaces tended to be surmountable What can I do to this ? How do I do it ? What will happen when I do it ? A Programming Interface 28 % of barriers obser ved Six Types of Barriers Programming interfaces are things like for loops and conditional statements , as well buttons , menus , and other programmable objects . Introduction ● The Study ● Six Types of Barriers ● Conclusions 21 ■ Array declarations did not suppor t direct manipulation . ■ Also : using widgets , methods , and data structures . Dim numbers ( 20 ) as Integer = { 5 , 10 , count , 20 } Can I put numbers in an array declaration ? Can I put them in like this ? If I only put in four numbers , what are the other 16 going to be ? Use Barriers Six Types of Barriers So how can we remove use barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 22 Removing Use Barriers ■ Design direct manipulation programming interfaces . - What actions are possible on an array declaration ? Provide a menu . - How can those actions be performed ? Click on the menu . - What happens to the array if only four are initialized ? Show its contents . ■ The challenge : design a ﬂexible and suppor tive direct manipulation code editor . Six Types of Barriers I’ll be talking about some work we’ve done on this at my student talk at 11 tomorrow . Introduction ● The Study ● Six Types of Barriers ● Conclusions 23 Coordination Barriers ■ The invisible rules that govern how programming interfaces can be combined . ■ Learner s could guess how to coordinate the pieces , but their guesses were typically wrong . I think I know what to use , but I don’t know how to make them work together . 19 % of barriers obser ved Six Types of Barriers In these situations , programming interfaces were like jigsaw puzzles . Learners could see the pieces , but didn’t know how to put them together . For example , Introduction ● The Study ● Six Types of Barriers ● Conclusions 24 Coordination Barriers ■ “Pulling” data from a window that has not been shown causes null pointer exceptions . ■ Also : language constructs , using data of different types , etc . How do I get data from this form to that form ? Six Types of Barriers So how can we remove coordination barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 25 Removing Coordination Barriers ■ Make the invisible r ules visible : - Provide examples to illustrate the rules while learners are selecting the programming interfaces to use . - Enforce and explain the rules through direct manipulation . ■ The challenge : what exactly are the rules in a programming system ? Six Types of Barriers “That can’t go here ; it has to go there . ” “You can put X and Y together in these three ways . . . ” Have to know this in order to make them visible . Introduction ● The Study ● Six Types of Barriers ● Conclusions 26 Understanding Barriers ■ Proper ties of a program’s behavior that obscure what a program did or did not do . ■ What if X did cause Y ? What if it caused Y and Z ? What if X never happened ? What if Z is Y ? I thought doing X . . . . . . would cause Y , The Program but it caused Z instead . Why ? 29 % of barriers obser ved Six Types of Barriers The big problem was that X caused Z . But , there are more subtle issues . Introduction ● The Study ● Six Types of Barriers ● Conclusions 27 ■ Why isn’t the clock updating ? ■ Is the timer added ? Is the timer’s enabled proper ty set to tr ue ? Is anything using the timer’s value to update the label ? Understanding Barriers I thought adding a timer . . . . . would update this label . . . but nothing’s happening . Six Types of Barriers Is the enabled property ? This is something they couldn’t possibly know about . So how can we remove understanding barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 28 Removing Understanding Barriers ■ The challenge : help learner s think of questions to ask and reveal any invalid assumptions . Six Types of Barriers Instead of having users think of these questions themselves , why not provide the questions for them ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 28 Removing Understanding Barriers ■ The challenge : help learner s think of questions to ask and reveal any invalid assumptions . Six Types of Barriers Instead of having users think of these questions themselves , why not provide the questions for them ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 29 Information Barriers ■ Obstacles in getting information about how a program wor ks on the inside . ■ Learner s could not ﬁnd tools to answer their questions . ■ Learner s could not use the tools that they did ﬁnd . The Program What’s this variable’s value ? What calls this method ? Where did this exception happen ? 11 % of barriers obser ved Six Types of Barriers Introduction ● The Study ● Six Types of Barriers ● Conclusions 30 ■ Programmer s often made inﬁnitely recur sive method calls , leading to stack overﬂow exceptions . ■ Most learner s pressed help . ■ Pressing break pointed learner s to the top of their program instead of to the source of the exception . Information Barriers Where did it happen ? What caused it ? What’s a stack overﬂow exception ? Six Types of Barriers Programmers had very few options when answering these questions . Here , you can see that the learners’ choices are “break” “continue” and “help” . Little do they know , clicking break will point them directly to where the exception occurred . But which do you think they click ? So how can we remove information barriers from programming systems ? Introduction ● The Study ● Six Types of Barriers ● Conclusions 31 Removing Information Barriers ■ Instead of having learners collect the information , have the computer collect it . ■ The challenge : design interfaces that automatically provide task - relevant information . Six Types of Barriers MyMethod ( int number1 ) { MyMethod ( 2 ) } This method calls itself over and over again . That’s what its good at . Already made progress with this with the Whyline . By allowing programmers to ask questions about their program’s output , the system can collect the information it needs to answer their question . This way , learners don’t have to collect it themselves . Introduction ● The Study ● Six Types of Barriers ● Conclusions 32 Future Work ■ This study has revealed several things that we would not have known otherwise . ■ Currently using the six barrier s to design a new Java programming system . - Flexible and suppor tive direct manipulation programming interfaces . - Suppor t for copying and adapting example code . - Suppor t for Why did ? and Why didn’t ? questions . - Suppor t for What can ? questions to help ﬁnd programming interfaces . Conclusions Introduction ● The Study ● Six Types of Barriers ● Conclusions 33 Questions ? Conclusions Thanks to Brad Myers , Htet Htet Aung , and the students of PUI for their help with this research . Who developed categories and how were they coded ? Categories developed , then assigned for each barrier . But the 4 . 5 billion weren’t all relevant , and their are communities for these things . But it takes a long time to ﬁnd those communities and the examples were often incorrect , or inapplicable . Aren’t these barriers at the wrong level of abstraction to support design ? For ﬁne - grained design , yes , but these were intended to guide the choice of what tools to design , not how to design them . How will you know if your environment is better ? Mimic current interfaces and compare errors and time . Introduction ● The Study ● Six Types of Barriers ● Conclusions 33 Questions ? http : / / www . cs . cmu . edu / ~ NatProg / marmalade . html Conclusions Thanks to Brad Myers , Htet Htet Aung , and the students of PUI for their help with this research . Who developed categories and how were they coded ? Categories developed , then assigned for each barrier . But the 4 . 5 billion weren’t all relevant , and their are communities for these things . But it takes a long time to ﬁnd those communities and the examples were often incorrect , or inapplicable . Aren’t these barriers at the wrong level of abstraction to support design ? For ﬁne - grained design , yes , but these were intended to guide the choice of what tools to design , not how to design them . How will you know if your environment is better ? Mimic current interfaces and compare errors and time .