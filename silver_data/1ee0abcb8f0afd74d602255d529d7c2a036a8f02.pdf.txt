Graph Theory Frank de Zeeuw August 17 , 2016 1 Introduction 3 1 . 1 Deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1 . 2 Basic facts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2 Trees 7 2 . 1 Basic facts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2 . 2 Spanning trees and basic algorithms . . . . . . . . . . . . . . . . . . . . . . 8 2 . 3 Distances and breadth - ﬁrst search . . . . . . . . . . . . . . . . . . . . . . . 9 2 . 4 Minimum - weight spanning trees . . . . . . . . . . . . . . . . . . . . . . . . 10 3 Matchings 12 3 . 1 Matchings and augmenting paths . . . . . . . . . . . . . . . . . . . . . . . 12 3 . 2 Hall’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 3 . 3 K¨onig’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 4 Covers and independent sets 16 4 . 1 Summary of matchings in arbitrary graphs . . . . . . . . . . . . . . . . . . 16 4 . 2 Matchings , covers , and independent sets . . . . . . . . . . . . . . . . . . . 16 4 . 3 Independent sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4 . 4 Dominating sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5 Coloring 21 5 . 1 Vertex coloring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 5 . 2 Edge coloring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 5 . 3 Line graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 6 Hamilton cycles 26 6 . 1 Girth and circumference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 6 . 2 Hamilton cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 6 . 3 Suﬃcient conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 7 2 - connected graphs 30 7 . 1 2 - connectedness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 7 . 2 Whitney’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 7 . 3 3 - connectedness and Brooks’s Theorem . . . . . . . . . . . . . . . . . . . . 32 These are lecture notes from the class Graph Theory that I taught at EPFL in Spring 2016 . 1 8 k - connected graphs 34 8 . 1 Menger’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34 8 . 2 k - connected graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 9 Planar graphs 38 9 . 1 Drawings of graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 9 . 2 Non - planar graph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 9 . 3 Euler’s formula . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 9 . 4 Coloring planar graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 10 Extremal graph theory I 42 10 . 1 Extremal graph theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 10 . 2 Triangles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 10 . 3 Squares . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 10 . 4 Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 11 Extremal graph theory II 48 11 . 1 Complete graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 11 . 2 Complete bipartite graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 12 Ramsey theory 54 12 . 1 Ramsey numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 12 . 2 Bounds for R ( K t , K t ) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 12 . 3 A general Ramsey theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 2 Chapter 1 Introduction 1 . 1 Deﬁnitions Deﬁnition . A graph G = ( V , E ) consists of a ﬁnite set V and a set E of two - element subsets of V . The elements of V are called vertices and the elements of E are called edges . For instance , very formally we can introduce a graph like this : V = { 1 , 2 , 3 , 4 } , E = { { 1 , 2 } , { 3 , 4 } , { 2 , 3 } , { 2 , 4 } } . In practice we more often think of a drawing like this : 1 2 3 4 Technically , this is what is called a labelled graph , but we often omit the labels . When we say something about an unlabelled graph like , we mean that the statement holds for any labelling of the vertices . Here are two examples of related objects that in this course we do not consider graphs : The ﬁrst is a multigraph , which can have multiple edges and loops ; the corresponding deﬁnition would allow the edge set and the edges to be multisets . The second is a directed graph , in which every edge has a direction ; in the corresponding deﬁnition the edges would be ordered pairs instead of two - element subsets . In this course we mostly avoid these variants for simplicity , although they are certainly very useful objects . Most facts about graphs in our sense have analogues for multigraphs or directed graphs , although those are often a bit less nice . Another type of graph that we are avoiding is inﬁnite graphs ; many facts about ﬁnite graphs do not extend to inﬁnite graphs . Some notation : Given a graph G , we write V ( G ) for the vertex set , and E ( G ) for the edge set . For an edge { x , y } ∈ E ( G ) , we usually write xy , and we consider yx to be the same edge . If xy ∈ E ( G ) , then we say that x , y ∈ V ( G ) are adjacent or connected or that they are neighbors . If x ∈ e , then we say that x ∈ V ( G ) and e ∈ E ( G ) are incident . 3 Deﬁnition ( Subgraphs ) . Two graphs G , G (cid:48) are isomorphic if there is a bijection ϕ : V ( G ) → V ( G (cid:48) ) such that xy ∈ E ( G ) if and only if ϕ ( x ) ϕ ( y ) ∈ E ( G (cid:48) ) . A graph H is a subgraph of a graph G , denoted H ⊂ G , if there is a graph H (cid:48) isomorphic to H such that V ( H (cid:48) ) ⊂ V ( G ) and E ( H (cid:48) ) ⊂ E ( H ) . With this deﬁnition we can for instance say that is a subgraph of . As mentioned above , when we talk about graphs we often omit the labels of the vertices . A more formal way of doing this is to deﬁne an unlabelled graph to be an isomorphism class of labelled graphs . We will be somewhat informal about this distinction , since it rarely leads to confusion . Deﬁnition ( Degree ) . Fix a graph G = ( V , E ) . For v ∈ V , we write N ( v ) = { w ∈ V : vw ∈ E } for the set of neighbors of v ( which does not include v ) . Then d ( v ) = | N ( v ) | is the degree of v . We write δ ( G ) for the minimum degree of a vertex in G , and ∆ ( G ) for the maximum degree . Deﬁnition ( Examples ) . The following are some of the most common types of graphs . • Paths are the graphs P n of the form . The graph P n has n edges and n + 1 vertices ; we call n the length of the path . • Cycles are the graphs C n of the form . The graph C n has n edges and n vertices ; we call n the length of the cycle . • Complete graphs are the graphs K n on n vertices in which all vertices are adjacent . The graph K n has (cid:0) n 2 (cid:1) edges . For instance , K 4 is . • Complete bipartite graphs are the graphs K s , t with a partition V ( K s , t ) = X ∪ Y with | X | = s , | Y | = t , such that every vertex of X is adjacent to every vertex of Y , and there are no edges inside X or Y . Then K st has st edges . For example , K 2 , 3 is . The following are the most common properties of graphs that we will consider . Deﬁnition ( Regular ) . A graph G is k - regular if d ( v ) = k for all v ∈ V ( G ) . Deﬁnition ( Bipartite ) . A graph G is bipartite if there is a partition V ( G ) = X ∪ Y such that every edge of G has one vertex in X and one in Y ; we call such a partition a bipartition . Deﬁnition ( Connected ) . A graph G is connected if for all x , y ∈ V ( G ) there is a path in G from x to y ( more formally , there is a path P k which is a subgraph of G and whose endpoints are x and y ) . A connected component of G is a maximal connected subgraph of G ( i . e . , a connected sub - graph that is not contained in any larger connected subgraph ) . The connected components of G form a partition of V ( G ) . 4 1 . 2 Basic facts In this section we prove some basic facts about graphs . It is a somewhat arbitrary collection of statements , but we introduce them here to get used to the terminology and to see some typical proof techniques . Proposition 1 . 2 . 1 . In any graph G we have (cid:88) v ∈ V ( G ) d ( v ) = 2 | E ( G ) | . Proof . We double count the number of pairs ( v , e ) ∈ V ( G ) × E ( G ) such that v ∈ e . On the one hand , a vertex v is involved in d ( v ) such pairs , so the total number of such pairs is (cid:80) v ∈ V ( G ) d ( v ) . On the other hand , every edge is involved in two such pairs , so the number of pairs must equal 2 | E ( G ) | . This fact is sometimes called the “handshake lemma” because it says that at a party the number of shaken hands is twice the number of handshakes . It has useful corollaries , such as the fact that the number of odd - degree vertices in a graph must be even . The next lemma gives a condition under which a graph must contain a long path or cycle . Note that “contains a path” means that the graph has a subgraph that is isomorphic to some P n , and similarly for cycles . The proof is an example of an extremal argument , where we take an object that is extremal with respect to some property , and show that this extremality implies some other property of the object . Proposition 1 . 2 . 2 . A graph G with minimum degree δ ( G ) ≥ 2 contains a path of length at least δ ( G ) and a cycle of length at least δ ( G ) + 1 . Proof . Let v 1 · · · v k be a maximal path in G , i . e . , a path that cannot be extended . Then any neighbor of v 1 must be on the path , since otherwise we could extend it . Since v 1 has at least δ ( G ) neighbors , the set { v 2 , . . . , v k } must contain at least δ ( G ) elements . Hence k ≥ δ ( G ) + 1 , so the path has length at least δ ( G ) . To ﬁnd a long cycle , we continue the proof above . The neighbor of v 1 that is furthest along the path must be v i with i ≥ δ ( G ) + 1 . Then v 1 · · · v i v 1 is a cycle of length at least δ ( G ) + 1 . Note that in general these bounds cannot be improved , because K δ + 1 has minimum degree δ , but its longest path has length δ and its longest cycle has length δ + 1 . In Problem Set 1 we will see that we can ﬁnd longer paths in graphs that are not complete . The following lemma can be helpful when trying to prove certain statements for general graphs that are easier to prove for bipartite graphs . The lemma says that you don’t have to remove more than half the edges of a graph to make it bipartite . The proof is an example of an algorithmic proof , where we prove the existence of an object by giving an algorithm that constructs such an object . Proposition 1 . 2 . 3 . Any graph G contains a bipartite subgraph H with | E ( H ) | ≥ | E ( G ) | / 2 . Proof . We prove the stronger claim that G has a bipartite subgraph H with V ( H ) = V ( G ) and d H ( v ) ≥ d G ( v ) / 2 for all v ∈ V ( G ) . Starting with an arbitrary partition V ( G ) = X ∪ Y ( which need not be a bipartition for G ) , we apply the following procedure . We refer to X and Y as “parts” . For any v ∈ V ( G ) , we see if it has more edges to X or to Y ; if it has more edges that connect it to the part it is in than it has edges to the other part , then we move it to the other part . We repeat this until there are no more vertices v that should be moved . 5 There are at most | V ( G ) | consecutive steps in which no vertex is moved , since if none of the vertices can be moved , then we are done . When we move a vertex from one part to the other , we increase the number of edges between X and Y ( note that a vertex may move back and forth between X and Y , but still the total number of edges between X and Y increases in every step ) . It follows that this procedure terminates , since there are only ﬁnitely many edges in the graph . When it has terminated , every vertex in X has at least half its edges going to Y , and similarly every vertex in Y has at least half its edges going to X . Thus the graph H with V ( H ) = V ( G ) and E ( H ) = { xy ∈ E ( G ) : x ∈ X , y ∈ Y } has the claimed property that d H ( v ) ≥ d G ( v ) / 2 for all v ∈ V ( G ) . The last lemma gives a characterization of bipartite graphs . An “odd cycle” is just a cycle whose length is odd . Again we give an algorithmic proof . Proposition 1 . 2 . 4 . A graph is bipartite if and only if it contains no odd cycle . Proof . Suppose that G is bipartite with bipartition V ( G ) = X ∪ Y , and that v 1 · · · v k v 1 is a cycle in G , with v 1 ∈ X . We must have v i ∈ X for all odd i and v i ∈ Y for all even i . Since v k is adjacent to v 1 , it must be in Y , so k must be even and the cycle is not odd . Suppose we have a connected graph G which has no odd cycles . We can obtain a bipartition using the following algorithm . Start with X , Y being empty sets . Pick an arbitrary vertex x 0 and put it in X . Put all the neighbors of x 0 in Y . For each y ∈ Y , put into X all neighbors of y that have not yet been assigned . Then for each x ∈ X , put into Y all neighbors that have not yet been assigned . Keep repeating this until all vertices have been assigned . This algorithm is well - deﬁned because no vertex is assigned more than once ( thanks to the stipulation that we only consider unassigned vertices ) . It remains to be shown that the algorithm terminates ( i . e . , it does not go on endlessly ) , and that the resulting partition is really a bipartition of V ( G ) . The algorithm terminates because G is connected ( by assumption ) . Indeed , this means that every y ∈ Y has a path yv 1 · · · v k x 0 to x 0 , and in every step at least one more vertex from this past must get assigned . Next we show that V ( G ) = X ∪ Y is a bipartition . Suppose that two vertices x 1 , x 2 ∈ X are adjacent . By construction , there is a path P from x 1 to x 0 that uses only edges between X and Y , and similarly there is such a path P (cid:48) from x 2 to x 0 ; note that these paths may intersect , so their union might not be a path . Let x 3 be the ﬁrst vertex where P intersects P (cid:48) ( this could be x 0 ) . Then we get a path P (cid:48)(cid:48) from x 1 to x 3 to x 2 that also has the property that all its edges are between X and Y . Since this path goes from X to X using only edges between X and Y , it must have an even number of edges . Thus , if we combine it with x 1 x 2 , we get an odd cycle , which is a contradiction . Similarly , if y 1 , y 2 ∈ Y are adjacent , combining this edge with the path from y 1 to y 2 gives an odd cycle . This shows that all edges of G are between X and Y , so G is bipartite . We did the above under the assumption that G is connected . If it is not , we can apply the above to each connected component , and arbitrarily combine the bipartitions of the components to get a bipartition of G . 6 Chapter 2 Trees 2 . 1 Basic facts Deﬁnition . A tree is a connected graph without cycles . A forest is a graph without cycles . In a tree or a forest , a vertex of degree one is called a leaf . Proposition 2 . 1 . 1 . Every tree with at least two vertices has a leaf . Proof . Take a longest path x 0 x 1 · · · x k in the tree ( so k ≥ 1 , since the tree has at least two vertices ) . A neighbor of x 0 cannot be outside the path , since then the path could be extended . But if x 0 were adjacent to x i for some i > 1 , then x 0 x 1 · · · x i x 0 would be a cycle . So the only neighbor of x 0 is x 1 , and x 0 is a leaf . ( Of course , the same works for x k , so there are at least two leaves . ) Proposition 2 . 1 . 2 . Any tree T satisﬁes | E ( T ) | = | V ( T ) | − 1 . Proof . We use induction on the number of vertices . If | V ( T ) | = 1 , then | E ( T ) | = 0 . Otherwise , Proposition 2 . 1 . 1 gives a leaf x 0 of T . Let T (cid:48) be the graph obtained by removing x 0 and its only edge . Then T (cid:48) is connected , since for any x , y ∈ V ( T (cid:48) ) there is a path from x to y in T , and this path cannot pass through x 0 , so it is also a path in T (cid:48) . Since T has no cycles , neither does T (cid:48) , so T (cid:48) is a tree . By induction we have | E ( T (cid:48) ) | = | V ( T (cid:48) ) | − 1 , so plugging in | E ( T (cid:48) ) | = | E ( T ) | − 1 and | V ( T (cid:48) ) | = | V ( T ) | − 1 give the desired formula . Corollary 2 . 1 . 3 . Any forest F satisﬁes | E ( F ) | = | V ( F ) | − c ( F ) , where c ( F ) is the number of connected components of F . Proof . Each connected component T of F is a tree , so Proposition 2 . 1 . 2 gives | E ( T ) | = | V ( T ) | − 1 . Summing up over the c ( F ) components gives the desired formula . Proposition 2 . 1 . 4 . A graph G is a tree if and only if for all x , y ∈ V ( G ) there is a unique path between x and y . Proof . First suppose we have a graph G in which any two vertices are connected by a unique path . Then G is certainly connected . Moreover , if G contained a cycle x 0 x 1 · · · x k x 0 , then x 0 x k and x 0 x 1 · · · x k would be two distinct paths between x 0 and x k . Hence G is a tree . Suppose G is a tree and x , y ∈ V ( G ) . Since G is connected , there is at least one path from x to y . Suppose there are two paths P (cid:54) = P (cid:48) from x to y . If these paths only intersect 7 at x and y , we can immediately combine them into a cycle , but in general the paths could intersect in a complicated way , so we have to be careful . The paths P and P (cid:48) could start out from x being the same ; let u be the last vertex at which they are the same . Let v be the ﬁrst vertex after u on P that is again on P (cid:48) . Then there is a cycle that goes along P from u to v , and then back along P (cid:48) from v to u . This is a contradiction , so there is a unique path from x to y in G . We introduce some notation for adding and removing edges in graphs . Given a graph G , we write G + xy for the graph with vertex set V ( G ) ∪ { x , y } and edge set E ( G ) ∪ { xy } ( one or both of x , y could already be in G ) . We also write G − xy for the graph with vertex set V ( G ) and edge set E ( G ) \ { xy } . Proposition 2 . 1 . 5 . Let T be a tree . If xy ∈ E ( T ) , then T − xy is not connected . If xy (cid:54)∈ E ( T ) and x , y ∈ V ( T ) , then T + xy contains a unique cycle . Proof . Let xy ∈ E ( T ) . Suppose that T − xy is connected . Then there is a path in T − xy from x to y . Combining this path with xy gives a cycle contained in T , which is a contradiction . Let xy (cid:54)∈ E ( T ) and x , y ∈ V ( T ) . By Proposition 2 . 1 . 4 , there is a unique path in T from x to y . Combining this path with xy gives a cycle in T + xy . If there were a second cycle in T + xy , it would also have to contain xy . Then removing xy from this cycle would give a second path from x to y in T , contradicting the uniqueness of the path . 2 . 2 Spanning trees and basic algorithms Deﬁnition . A spanning tree of a graph G is a tree T with | V ( T ) | = | V ( G ) | . Proposition 2 . 2 . 1 . A graph G is connected if and only if it has a spanning tree . Proof . If G contains a spanning tree T , then any two vertices in V ( G ) are connected by a path in T , which is also a path in G . Therefore G is connected . If G is connected , the following algorithm shows that G has a spanning tree . Arbitrarily pick x ∈ V ( G ) and consider it as a tree T . Repeat the following for as long as possible . For every y ∈ V ( G ) \ V ( T ) , check if y is adjacent to a vertex z in V ( T ) , and if so , replace T by T + yz . The algorithm continues until V ( T ) = V ( G ) , at which point T is a spanning tree . Indeed , it is a tree since every edge that we add has exactly one endpoint in the tree . It is spanning , because if there is still a vertex y ∈ V ( G ) \ V ( T ) when the algorithm terminates , then the connectedness of G implies that there is a path from y to x . Somewhere on this path there must be a vertex v of T adjacent to a vertex w not in T , so the algorithm can still add w , and cannot have terminated . The proof of Proposition 2 . 2 . 1 gives a very simple algorithm for ﬁnding a spanning tree . It is of course not deﬁned very formally ; in particular , we did not specify how to pick y . We could do that by putting an arbitrary order on V ( G ) , and going over the vertices in that order . Using this informal algorithm , we can give algorithms for the following basic tasks . • Determine if G is connected : If the algorithm from the proof of Proposition 2 . 2 . 1 ﬁnds a tree T with V ( T ) = V ( G ) , then G is connected ; otherwise G is disconnected . 8 • Find the connected components of G : For a graph that is not connected , the algo - rithm will ﬁnd a spanning tree of a connected component of G ; repeat this to get all the components . • Determine if G contains a cycle : Find the connected components . If some connected component H has | E ( H ) | (cid:54) = | V ( H ) | − 1 , then it contains a cycle , because it contains a spanning tree and at least one more edge . If | E ( H ) | = | V ( H ) | − 1 for every component , then each component is equal to its own spanning tree , so the graph has no cycle . 2 . 3 Distances and breadth - ﬁrst search We saw one way of obtaining a spanning tree of a graph , but this is certainly not the only way . We will now see a more speciﬁc algorithm that gives a spanning tree with special properties , called a breadth - ﬁrst search tree or BFS tree . This algorithm lets us answer various natural questions , like determining the distance between two vertices . Deﬁnition . Let G be a graph . For two vertices x , y ∈ V ( G ) , the distance d ( x , y ) = d G ( x , y ) is the length of a shortest path between x and y . The diameter of G is the length of the longest shortest path : diam ( G ) = max x , y ∈ V ( G ) d ( x , y ) . Given a graph G and a subgraph H ⊂ G , we deﬁne ∂ ( H ) = { xy ∈ E ( G ) : x ∈ V ( H ) , y (cid:54)∈ V ( H ) } for the set of edges going from vertices of H to vertices not in H . The algorithm in the proof of Proposition 2 . 2 . 1 worked by repeatedly adding an edge from ∂ ( T ) to the current tree T . Another bit of terminology : To single out one vertex of a tree , we refer to it as a root . BFS Algorithm ( given a graph G and a root r ∈ V ( G ) ) ( 1 ) Let T be the graph consisting only of r ; ( 2 ) Set S = ∂ ( T ) ; ( 3 ) For all xy ∈ S , if T + xy does not contain a cycle , replace T by T + xy ; ( 4 ) If ∂ ( T ) (cid:54) = ∅ , go back to ( 2 ) ; ( 5 ) If | E ( T ) | = | V ( G ) | − 1 , return T ; else return “disconnected” . Proposition 2 . 3 . 1 . Let G be a connected graph . The BFS Algorithm lets us ﬁnd the shortest path between any two vertices in G . Proof . Let r , s ∈ V ( G ) be the vertices between which we want to ﬁnd the shortest path . Run the BFS Algorithm with root r . Give a vertex x the label f ( x ) = k if x was added to T in the k th iteration of Step 3 ( and label f ( r ) = 0 ) . We prove by induction on f ( x ) that f ( x ) = d T ( r , x ) = d G ( r , x ) for all x . It trivially holds for x = r . 9 If f ( x ) = k , then by construction x is adjacent ( in T and G ) to a vertex y with f ( y ) = k − 1 , and by induction we have d T ( r , y ) = d G ( r , y ) = k − 1 . So there is a path ( in T and G ) of length k − 1 from r to y , which gives a path ( in T and G ) of length k from r to x . Moreover , there cannot be a shorter path in G from r to x , because then d G ( r , x ) < k , so by induction we would have f ( x ) = d G ( r , x ) < k , a contradiction . Knowing that d T ( r , x ) = d G ( r , x ) , we can ﬁnd the shortest path from r to x in G by ﬁnding the shortest path in T . To do that , we have to keep track of the “predecessor” of each x that we add in step ( 3 ) ; i . e . , the vertex p with f ( p ) = f ( x ) − 1 that x is connected to . Then , to ﬁnd the shortest path from r to s , we start from s and repeatedly take the predecessor , until we reach r . Aside from letting us ﬁnd shortest paths , the BFS algorithm lets us compute distances , and it also gives us algorithms for the following tasks on G . • Compute diam ( G ) : For each pair of vertices , we can ﬁnd a shortest path and thus the distance . Do this for all pairs and take the largest distance . • Find a shortest cycle in G : For every edge xy , ﬁnd a shortest path between x and y in G − xy ( if it exists ) ; combine this path with xy to get a cycle . Compare all these cycles to ﬁnd the shortest . Some of these algorithms are very ineﬃcient , but they are already much better than brute force approaches that go over all possible answers . There are all kinds of algorithms that do these tasks faster , but in this course , we don’t care too much about eﬃciency , and we focus on the graph - theoretical aspects ( in particular , proving that the algorithms work ) . For more sophisticated algorithms , we suggest taking a course in Combinatorial Optimization . The problem of ﬁnding a shortest path is more interesting if we have a weight function w : E ( G ) → R + , and we want a path P for which the total weight (cid:80) e ∈ P w ( e ) is minimal . The BFS algorithm above does not do this , because it ﬁnds a path with the fewest edges , whereas a minimum - weight path may use many lightweight edges . Nevertheless , the best known algorithm for ﬁnding minimum - weight paths , known as Dijkstra’s algorithm , is based on this BFS approach . 2 . 4 Minimum - weight spanning trees Another natural algorithmic problem is the minimum - weight spanning tree problem . For a graph G with a weight function w : E ( G ) → R + , we want a spanning tree T whose total weight w ( T ) = (cid:80) e ∈ E ( T ) w ( e ) is minimal ( or determine that there is none , which means G is disconnected ) . It is easy to imagine an application with locations that have to be connected by a network of roads , which has to be done with the total road length as small as possible . The easiest thing to try is what is called a “greedy” approach : Repeatedly add the smallest edge , while preserving connectedness and acyclicity ( i . e . , maintain a tree all along ) . Greedy Tree - Growing Algorithm 10 ( 1 ) Start with T being any vertex ; ( 2 ) Find e ∈ ∂ ( T ) with minimum w ( e ) ; if ∂ ( T ) = ∅ , go to ( 4 ) ; ( 3 ) Replace T by T + e ; go to ( 2 ) ; ( 4 ) If | E ( T ) | = | V ( G ) | − 1 , return T , else return “disconnected” . Theorem 2 . 4 . 1 . The Tree - Growing Algorithm returns a minimum spanning tree , if it exists . Proof . Suppose the algorithm returns T , and let e 1 , . . . , e n − 1 be the order in which the edges of T are selected . Let T ∗ be a minimum - weight spanning tree that shares as many initial vertices with T as possible ; in other words , to each minimum - weight spanning tree T ∗ associate the smallest i such that e i (cid:54)∈ T ∗ , and choose the T ∗ with the largest i . If T = T ∗ , then we are done , so assume T (cid:54) = T ∗ . Let e be the ﬁrst edge not in T ∗ that was picked by the algorithm , and let T (cid:48) be the tree that the algorithm had before it picked e . Since e (cid:54)∈ T ∗ , adding e to T ∗ creates a unique cycle by Proposition 2 . 1 . 5 . There must be an edge f (cid:54) = e in that cycle for which f ∈ ∂ ( T (cid:48) ) , since the cycle leaves T (cid:48) via e and must somehow re - enter T (cid:48) . Since the algorithm chose e over f , we must have w ( e ) ≤ w ( f ) . Now T ∗∗ = T ∗ + e − f is a tree ( because the unique cycle containing e is broken by removing f ) with w ( T ∗∗ ) ≤ w ( T ∗ ) , so T ∗∗ is also a minimum - weight spanning tree . But T ∗∗ shares more initial vertices with T than T ∗ , contradicting the deﬁnition of T ∗ . It follows that T = T ∗ , and T is minimum . There are diﬀerent greedy approaches for ﬁnding a minimum spanning tree , where a diﬀerent property is preserved in the process . In Problem Set 2 , we will see two such algorithms , one that greedily grows a forest , and one that greedily removes edges while keeping the graph connected . 11 Chapter 3 Matchings 3 . 1 Matchings and augmenting paths Deﬁnition . Let G be a graph . A set of edges M ⊂ E ( G ) is a matching if no two edges in M share a vertex . A matching M is perfect if every vertex of G is incident with an edge in M ; it is maximal if there is no matching M (cid:48) in G with M (cid:40) M (cid:48) ; it is maximum if there is no matching M (cid:48) in G with | M | < | M (cid:48) | . We will address the following questions : How can we ﬁnd a maximum matching ? How can we tell if a graph has a perfect matching ? How can we check if a given matching is maximum ? First note that a maximal matching need not be maximum . Take for instance a path with three edges , and the matching consisting of the middle edge . Similarly , a greedy approach that keeps adding edges without removing any , like we used for spanning trees , would probably not lead to a maximum matching . Instead , an algorithm to ﬁnd maximum matchings will need some kind of backtracking , where we throw away some edges that we previously selected . The following notion lets us do that in a smart way . Deﬁnition . Given a matching M in a bipartite graph G , a path is alternating if for every two consecutive edges on the path , one of the two is in M . Note that any path of length 0 or 1 is alternating . An alternating path with at least one edge is augmenting if its ﬁrst and last vertex are not matched by M . Lemma 3 . 1 . 1 . A matching M is maximum if and only if there is no augmenting path for M . Proof . We prove that M is not maximum if and only if there is an augmenting path for M . First suppose that there is an augmenting path P for the matching M . Say P = v 1 v 2 · · · v k and the matching edges on the path are v 2 v 3 , . . . , v 2 i v 2 i + 1 , . . . , v k − 2 v k − 1 ( k must be even ) . Then we can augment M , by removing these edges from M and replacing them by v 1 v 2 , . . . , v 2 i − 1 v 2 i , . . . , v k − 1 v k . More formally , we replace M by 1 M (cid:48) = M (cid:52) E ( P ) . Then M (cid:48) is a matching since v 1 and v k were unmatched by M , and we have | M (cid:48) | > | M | , so M is not maximum . Suppose M is not maximum , so there is a matching M (cid:48) with | M (cid:48) | > | M | . Let D be the graph with V ( D ) = V ( G ) and E ( D ) = M (cid:52) M (cid:48) . Every vertex has degree 0 , 1 , or 2 in D . This implies that the connected components of D are either cycles , paths , or isolated 1 We write S ∆ T for the symmetric diﬀerence of two sets , i . e . , S ∆ T = ( S \ T ) ∪ ( T \ S ) . 12 vertices . A cycle in D has the same number of edge from M as from M (cid:48) , so | M (cid:48) | > | M | implies that there is a path P in D with more edges from M (cid:48) than from M . Then P must be an augmenting path for M . Note that the proof of Lemma 3 . 1 . 1 actually works in any graph ( if we deﬁne matchings in arbitrary graphs in the obvious way ) . Lemma 3 . 1 . 1 leads to the following algorithm . It looks for an augmenting path and augments on it , until that is no longer possible . It then follows from Lemma 3 . 1 . 1 that the resulting matching is maximum . Augmenting Path Algorithm to ﬁnd a maximum matching in a bipartite graph G with bipartition V ( G ) = A ∪ B ( 1 ) Set M = ∅ ; ( 2 ) Set S = A \ ( ∪ M ) , T = B \ ( ∪ M ) ; ( 3 ) Find any alternating path P from S to T ; if none exists , go to ( 5 ) ; ( 4 ) Augment along P using M : = M ∆ E ( P ) ; go back to ( 2 ) ; ( 5 ) Return M . It is not speciﬁed how to ﬁnd alternating paths , but for bipartite graphs this is fairly simple , by considering only non - M - edges from A to B , and M - edges from B to A . Any alternating path from S to T must be of this form , since it starts from an unmatched vertex in S . Note that for non - bipartite graphs , it is not at all clear how to ﬁnd all alternating paths , and because of this it is much harder to give an algorithm that ﬁnds maximum matchings in general graphs ( even though Lemma 3 . 1 . 1 holds for general graphs ) . 3 . 2 Hall’s Theorem The following theorem gives a necessary and suﬃcient criterion for a bipartite graph to have a perfect matching . We say that a matching matches A ⊂ V ( G ) if every vertex in A is contained in an edge of the matching . Given S ⊂ V ( G ) , we deﬁne the neighborhood of S by N ( S ) = { v ∈ V ( G ) : ∃ u ∈ S such that uv ∈ E ( G ) } . Note that if S is in one part of a bipartite graph , then S ∩ N ( S ) = ∅ . Theorem 3 . 2 . 1 ( Hall ) . Let G be a bipartite graph with bipartition V ( G ) = A ∪ B . Then G has a matching that matches A if and only if for all S ⊂ A we have | N ( S ) | ≥ | S | . Proof . If G has a matching M that matches A , then the vertices of any S ⊂ A are matched by M to | S | distinct neighbors in B , which implies that | N ( S ) | ≥ | S | . Suppose that G has no matching that matches A . Let M be a maximum matching and a 0 ∈ A a vertex not matched by M . Let R be the set of all vertices in V ( G ) that can be reached by an alternating path that starts at a 0 . Note that such a path must start with a non - M - edge from a 0 to B , followed by an M - edge from B to A , then a non - M - edge from A to B , etc . We claim that | N ( R ∩ A ) | < | R ∩ A | . First we show that N ( R ∩ A ) ⊆ R ∩ B . Suppose that b ∈ B is connected to a ∈ R ∩ A . If ba ∈ M , then the alternating path from a 0 to a must go through ba , which implies 13 that b ∈ R . If ba (cid:54)∈ M , then the alternating path from a 0 to a can be extended to an alternating path from a 0 to b ( unless b is already on that path , in which case also b ∈ R ) , so again b ∈ R . Next observe that if b ∈ R ∩ B were unmatched by M , then the alternating path from a 0 to b would be an augmenting path , which by Lemma 3 . 1 . 1 would contradict M being maximum . Thus every b ∈ R ∩ B is matched by M to some a ∈ A \ { a 0 } . In that case we have a ∈ R , because adding ba to the alternating path from a 0 to b gives an alternating path from a 0 to a ( unless a is already on that path , in which case also a ∈ R ) . Hence we have | R ∩ B | < | R ∩ A | . Combining the last two paragraphs , we have | N ( R ∩ A ) | ≤ | R ∩ B | < | R ∩ A | , contradicting the assumption that | N ( S ) | ≥ | S | for all S ⊂ A . Corollary 3 . 2 . 2 . A bipartite graph G has a perfect matching if and only if for all S ⊂ V ( G ) we have | N ( S ) | ≥ | S | . Proof . Let V ( G ) = A ∪ B be a bipartition of G . If G has a perfect matching , then just as in the proof of Theorem 3 . 2 . 1 , we have | N ( S ) | ≥ | S | for all S ⊂ A and all S ⊂ B . Then for S ⊂ V ( G ) we have | N ( S ∩ A ) | ≥ | S ∩ A | and | N ( S ∩ B ) | ≥ | S ∩ B | , so summing gives | N ( S ) | ≥ | S | . On the other hand , | N ( S ) | ≥ | S | for all S ⊂ V ( G ) implies that | A | = | B | , since if one of the two were larger , its neighborhood would be smaller than itself . Applying Theorem 3 . 2 . 1 gives a matching that matches A . Since | A | = | B | , it must also match B , so it is a perfect matching . Note that Hall’s condition is not necessarily convenient in practice , since it requires checking something for all subsets of the vertex set . So if we want to know if a given graph has a perfect matching , we might still be better oﬀ ﬁnding a maximum matching with the augmenting path algorithm . However , in many theoretical applications , the condition is convenient to check ; several examples of this are on Problem Set 3 . 3 . 3 K¨onig’s Theorem We have already seen an algorithm for ﬁnding a maximum matching , but we might want a more direct method of verifying that a given matching is maximum . The following theorem gives a way to do that : If there is a vertex cover of the same size as the matching , then the matching is maximum . Deﬁnition . Given a graph G , a vertex cover for G is a set C ⊂ V ( G ) such that every edge of G is incident with a vertex in C . Note that the “size” of a matching is the number of edges in it , while the “size” of a vertex cover is the number of vertices in it . Theorem 3 . 3 . 1 ( K¨onig ) . Let G be a bipartite graph . The maximum size of a matching equals the minimum size of a vertex cover . Proof . The size of any vertex cover is at least the size of any matching , since the cover has to cover every edge of the matching with one of the endpoints of the edge . Thus the minimum size of a vertex cover is at least the maximum size of a matching . Let M be a maximum matching of G . We will show that there is a vertex cover C with | C | = | M | , which will complete the proof . 14 Let V ( G ) = A ∪ B be a bipartition . Let S ⊂ A be the set of vertices in A that are unmatched by M , and let R be the set of v ∈ V ( G ) that can be reached by an alternating path from a vertex in S . Note that an alternating path from S must use non - M - edges from A to B , and M - edges from B to A . B ∩ R A ∩ R B \ R A \ R Deﬁne C = ( A \ R ) ∪ ( B ∩ R ) . We claim that C is a vertex cover for G . Suppose there is an edge in E ( G ) not incident to C , which must be an edge ab between A ∩ R and B \ R . If ab were in M , then an alternating path from S to a would have to go through ab , contradicting the fact that b (cid:54)∈ R . If ab were not in M , then extending the path from S to a would provide an alternating path from S to b , contradicting b ∈ B \ R . Now we prove that | C | ≤ | M | ( which of course implies | C | = | M | ) . To prove this , we show that every vertex of C is matched by a diﬀerent edge of M . If a ∈ C ∩ A = A \ R , then a (cid:54)∈ R , and R contains the set S of unmatched vertices of A , so a must be matched . If b ∈ C ∩ B , then there is an alternating path from S to b , so b must be matched , because otherwise we get an augmenting path , contradicting the assumption that M is maximum . Thus C is matched by M . Moreover , no two vertices of C can be matched by the same edge of M , since this would have to be an edge from B ∩ R to A \ R , which would lead to an alternating path from S to A \ R , a contradiction . Theorem 3 . 3 . 1 is a special case of the duality theorem of linear programming . 15 Chapter 4 Covers and independent sets 4 . 1 Summary of matchings in arbitrary graphs In the previous lecture we treated matchings in bipartite graphs . As mentioned there , in this course we will not cover matchings in arbitrary graphs , mostly because it would take too much time . Nevertheless , we now give a quick overview of the basic facts about matchings in arbitrary graphs . In an arbitrary graph , it is still true that a matching is maximum if and only if there is no augmenting path for it ( the proof that we gave did not use the bipartiteness ) . However , the augmenting path algorithm that we described does not work , mainly because it is not clear how to ﬁnd an augmenting path or determine that none exists . Both Hall’s Theorem and K¨onig’s Theorem fail for arbitrary graphs . Take for instance the triangle K 3 . It is 2 - regular , but does not have a perfect matching . The maximum size of a matching is 1 , but the minimum size of a vertex cover is 2 . There is an analogue of Hall’s Theorem for arbitary graphs , known as Tutte’s Theorem , but it is more complicated . There is also a good algorithm due to Edmonds for ﬁnding a maximum matching in an arbitrary graph , known as the “blossom algorithm” . It does use augmenting paths , but its method for ﬁnding them is considerably more complicated . 4 . 2 Matchings , covers , and independent sets In this section we discuss several objects in graphs related to matchings and covers . Deﬁnition . Let G be a graph ( that is not necessarily bipartite ) . - A matching is a set M ⊂ E ( G ) such that the edges in M are pairwise disjoint ; - A vertex cover is a set C ⊂ V ( G ) such that every edge of G is incident to a vertex of C ; - An independent set is a set I ⊂ V ( G ) such that no two vertices in I are adjacent ; - An edge cover is a set C ⊂ E ( G ) such that every vertex of G is incident to an edge in C ( note that a graph with an isolated vertex has no edge cover ) . Just like for matchings and vertex covers , we would like to ﬁnd maximum independent sets and minimum edge covers . We introduce the following parameters to keep track of 16 all these extrema . m ( G ) = max { | M | : M ⊂ E ( G ) is a matching } vc ( G ) = min { | C | : C ⊂ V ( G ) is a vertex cover } α ( G ) = max { | S | : S ⊂ V ( G ) is independent } ec ( G ) = min { | C | : C ⊂ E ( G ) is an edge cover } We now prove various relations between these parameters . Lemma 4 . 2 . 1 . For any graph G we have m ( G ) ≤ vc ( G ) and α ( G ) ≤ ec ( G ) . Proof . For the ﬁrst inequality , take a matching M , and observe that any vertex cover has to have at least one vertex from each edge in M . Thus the size ( number of vertices ) of any vertex cover is at least the size ( number of edges ) of any matching , so the minimum size of a vertex cover is at least the maximum size of a matching . ( This is the same argument as we saw for bipartite graphs , but there we had equality , which is not always the case here . ) For the second inequality , take an independent set I , and observe that any edge cover has to have at least one edge incident with each vertex of I , and no edge can cover two vertices of I . Thus the size of any edge cover is at least the size of any independent sets , and the minimum size of an edge cover is at least the maximum size of an independent set . Lemma 4 . 2 . 2 . For any graph G we have α ( G ) + vc ( G ) = | V ( G ) | . Proof . Observe that I is independent if and only if V ( G ) \ I is a vertex cover . This is because I is independent if and only if every edge of G has at least one vertex in V ( G ) \ I , which means exactly that V ( G ) \ I is a vertex cover . Thus , if I is an independent set of size α ( G ) , then there is a vertex cover of size | V ( G ) | − | I | = | V ( G ) | − α ( G ) , which implies that vc ( G ) ≤ | V ( G ) | − α ( G ) . Similarly , if C is a vertex cover of size vc ( G ) , then there is an independent set of size | V ( G ) | − | C | = | V ( G ) | − vc ( G ) , so α ( G ) ≥ | V ( G ) | − vc ( G ) . Combining the two obtained inequalities gives the equality in the lemma . Lemma 4 . 2 . 3 . For a graph G without isolated vertices we have m ( G ) + ec ( G ) = | V ( G ) | . Proof . Let M be a matching with | M | = m ( G ) . Each of the | V ( G ) | − 2 | M | unmatched vertices must be incident with some edge , since otherwise the vertex would be isolated ; one endpoint of this edge must be in an edge of M , since otherwise the edge could be added to M to give a larger matching . Pick one such edge for each vertex not in an edge of M , and let C be the union of M and these | V ( G ) | − 2 | M | edges . Then C is an edge cover of size | M | + ( | V ( G ) | − 2 | M | ) = | V ( G ) | − m ( G ) , which implies that ec ( G ) ≤ | V ( G ) | − m ( G ) . Let C be a minimum edge cover , so we have | C | = ec ( G ) . Let H be the graph with V ( H ) = V ( G ) and E ( H ) = C . An edge e ∈ C shares at most one vertex with any other edge of C , since otherwise we could remove it and obtain a smaller edge cover . Thus every edge in H has at least one endpoint with degree one . This means that H is a forest whose connected components are all stars ( a star is a graph K 1 , t , consisting of one vertex of degree t connected to t vertices of degree one ) . The number of stars in H is | V ( G ) | − | C | , since that is the number of components in a forest with | C | edges . Create M by picking one arbitrary edge from each star . Then M is a matching of size | V ( G ) | − | C | , which implies that m ( G ) ≥ | V ( G ) | − ec ( G ) . Combining the two inequalities that we have obtained gives the equality in the lemma . 17 Note that in a bipartite graph G , we have m ( G ) = vc ( G ) by K¨onig’s Theorem . Com - bining this with α ( G ) + vc ( G ) = | V ( G ) | = m ( G ) + ec ( G ) from the previous two lemmas shows that in a bipartite graph we also have α ( G ) = ec ( G ) . The proof of Lemma 4 . 2 . 2 shows that in principle , if we have an algorithm that ﬁnds a maximum independent set , then we also have an algorithm that gives a minimum vertex cover , and vice versa . Similarly , the proof of Lemma 4 . 2 . 2 shows that an algorithm that ﬁnds a maximum matching also gives a minimum edge cover , and vice versa . We have mentioned that there is a fast algorithm for ﬁnding a maximum matching , so it follows that there is one for ﬁnding a minimum edge cover . However , we will see in the next section that we do not have a fast algorithm for ﬁnding a maximum independent set ; it follows that we also do not have one for ﬁnding a minimum vertex cover . 4 . 3 Independent sets Next we prove a lower bound for the independence number . We give two proofs , one simple direct proof and one algorithmic proof . Lemma 4 . 3 . 1 . For any graph G we have α ( G ) ≥ | V ( G ) | ∆ ( G ) + 1 . Direct proof . Let I be an independent set in G of size α ( G ) . A vertex v ∈ V ( G ) \ I must be connected to a vertex in I , since otherwise I could be enlarged . Since any vertex has degree at most ∆ ( G ) , at most ∆ ( G ) vertices of V ( G ) \ I are connected to the same vertex in I . This implies that | V ( G ) | − | I | ≤ ∆ ( G ) · | I | . This gives the inequality in the lemma . Algorithmic proof . We use the following greedy algorithm . Pick any vertex v 1 and remove v 1 and its neighbors , then pick v 2 and remove v 2 and its neighbors , etc . Repeat until no vertices are left . Then { v 1 , v 2 , . . . } is an independent set . In each step , we remove at most ∆ ( G ) + 1 vertices . Hence we can execute at least | V ( G ) | / ( ∆ ( G ) + 1 ) steps , so the resulting independent step has at least that many vertices . The bound in Lemma 4 . 3 . 1 is tight for the complete graph K n , which has ∆ ( K n ) = n − 1 and α ( K n ) = 1 . On the other hand , for many graphs the inequality is strict , like paths or cycles , which have ∆ ( G ) = 2 and α ( G ) ≥ (cid:98) | V ( G ) | / 2 (cid:99) . For a star K 1 , t we even have ∆ ( K 1 , t ) = | V ( K 1 , t ) | − 1 and α ( K 1 , t ) = t , so in this case the inequality is about as far oﬀ as possible . We have seen that there is a fast algorithm 1 for various questions , like shortest paths , minimum - weight spanning tree , and maximum matchings . However , there does not seem to be any fast algorithm that ﬁnds a maximum independent set . The only algorithms that can ﬁnd a maximum independent set are slow , while faster algorithms only ﬁnd approximations . In fact , the best known algorithm for ﬁnding large independent sets is the greedy algorithm given in the proof of Lemma 4 . 3 . 1 . It can be improved somewhat by picking v i to be the minimum degree vertex in the remaining graph , although in a regular graph we would have δ ( G ) = ∆ ( G ) , so this would not matter much . 1 By “fast” we mean that the time the algorithm takes on an input is bounded above by a polynomial function of the size of the input . By “slow” we mean that there is no such polynomial ; for instance , the time that the algorithm takes might be exponential in the size of the input . We do not formalize this here . 18 The problem of ﬁnding a maximum independent set is the ﬁrst example in this course of an “NP - hard problem” . We won’t go into the details of what this means , but roughly speaking it means that no fast algorithm is known . Moreover , if someone were to ﬁnd a fast algorithm for such a problem , it would give a fast algorithm for many other hard problems ; many computer scientists and mathematicians think that this is not possible ( this is the “P = NP problem” ) . 4 . 4 Dominating sets Finally , we introduce one more graph parameter . We have seen vertex covers , where vertices cover edges , and edge covers , where edges cover vertices . It makes sense to also consider sets of vertices that “cover” all other vertices ; to avoid confusion , we use the word “dominate” . Deﬁnition . Given u , v ∈ V ( G ) , we say that u dominates v if v ∈ N ( u ) ∪ { u } . A set D ⊂ V ( G ) is dominating if every vertex of G is dominated by a vertex in D ; in other words , D ∪ N ( D ) = V ( G ) . We write dom ( G ) for the minimum size of a dominating set in G . Theorem 4 . 4 . 1 . For any graph G we have 1 1 + ∆ ( G ) | V ( G ) | ≤ dom ( G ) ≤ 1 + log ( δ ( G ) + 1 ) δ ( G ) + 1 | V ( G ) | . Proof . The ﬁrst inequality follows from the fact that any vertex dominates at most ∆ ( G ) + 1 vertices . For the second inequality , we use the following greedy algorithm : Repeatedly add the vertex that dominates the most vertices that are not yet dominated , until all vertices are dominated . We ﬁrst prove a technical claim , which we will then use to prove that this algorithm gives the stated bound . Let δ = δ ( G ) and n = | V ( G ) | . Let D ⊂ V ( G ) and set U = V ( G ) \ ( D ∪ N ( D ) ) . We claim that there is a vertex y (cid:54)∈ D that dominates at least δ + 1 n | U | vertices of U . The total number of pairs ( v , u ) ∈ V ( G ) × U such that v dominates u equals (cid:88) u ∈ U | N ( u ) ∪ { u } | ≥ ( δ + 1 ) | U | . Thus , the average number of vertices of U that a vertex in V ( G ) dominates is at least δ + 1 n | U | , which implies that there is a vertex y that dominates at least that many vertices of U . By deﬁnition of U , we have y (cid:54)∈ D . The algorithm starts with D empty , and repeatedly picks the best vertex , which by the claim dominates at least δ + 1 n vertices that were previously undominated . We now prove that after log ( δ + 1 ) δ + 1 n steps , the algorithm has a set D that dominates all but at most 1 δ + 1 n vertices . This requires some calculation . If there are r vertices left undominated before step i , then , by the claim , there are at most r − δ + 1 n r = r · (cid:18) 1 − δ + 1 n (cid:19) 19 vertices undominated after step i . Hence , after log ( δ + 1 ) δ + 1 n steps , the number of undominated vertices is ( using the inequality ( 1 − x ) 1 / x < e − 1 , which follows from 1 − x < e − x ) n · (cid:18) 1 − δ + 1 n (cid:19) log ( δ + 1 ) δ + 1 n < n · e − log ( δ + 1 ) = n δ + 1 . Even if the algorithm picks all the remaining vertices , the dominating set returned by the algorithm has size at most log ( δ + 1 ) δ + 1 n + 1 δ + 1 n = 1 + log ( δ ( G ) + 1 ) δ ( G ) + 1 | V ( G ) | . This ﬁnishes the proof . Finding a minimum dominating set is also an NP - hard problem , so we do not know any fast algorithm . The proof above shows that the greedy algorithm does reasonably well : It provides a dominating set that is at most a factor log ( δ ( G ) ) ∆ ( G ) δ ( G ) ( roughly ) larger than the minimum dominating set . Theorem 4 . 4 . 1 also has a probabilistic proof , which works by selecting a random set of vertices . It is one of the classic examples of the probabilistic method in combinatorics . 20 Chapter 5 Coloring 5 . 1 Vertex coloring Deﬁnition . A vertex coloring of a graph G is a map c : V ( G ) → N such that c ( x ) (cid:54) = c ( y ) whenever xy ∈ E ( G ) . The chromatic number χ ( G ) of G is the minimum image size of a vertex coloring of G ; in other words , it is the minimum number of colors that V ( G ) can be colored with . Given a vertex coloring , each color class ( the set of vertices with the same color ) is an independent set . So a vertex coloring is the same thing as a partition of the vertex set into independent sets . A graph G has χ ( G ) = 1 if and only if it has no edges . Having χ ( G ) = 2 is the same as being bipartite ( assuming the graph has at least one edge ) . Even cycles are bipartite and thus have chromatic number 2 ; odd cycles have chromatic number 3 . A complete graph K n has chromatic number n . If G contains H , then χ ( G ) ≥ χ ( H ) . Thus , if a graph G contains a K k , then χ ( G ) ≥ k . But it is not true that if χ ( G ) ≥ k , then G must contain a K k ; we have χ ( C 5 ) = 3 , but C 5 contains no K 3 . Below are two graphs with minimum colorings . The one on the left is the Petersen graph and has chromatic number 3 ( it cannot be 2 since the graph contains a C 5 ) . The one on the right is a wheel and has chromatic number 4 ( it cannot be 3 , since we need at least three colors on the outer C 5 , which forces the middle vertex to have a fourth color ) . Note that for both depicted graphs , the chromatic number is at most the maximum degree of a vertex . On the other hand , for complete graphs and odd cycles we have χ ( G ) = ∆ ( G ) + 1 . Lemma 5 . 1 . 1 . For any graph G we have χ ( G ) ≤ ∆ ( G ) + 1 . Proof . We use the following greedy algorithm , which consecutively colors the vertices in an arbitrary order . For each vertex , we look at the neighbors that have already been colored , and we give the vertex the smallest color that is not used on those neighbors . Since any vertex has at most ∆ ( G ) neighbors , we need at most ∆ ( G ) + 1 colors to color all the vertices . 21 The greedy algorithm can be reﬁned somewhat , by choosing the ordering in a certain way , so that it does better on some graphs . However , the problem of determining the chromatic number of a graph is NP - hard , so we do not know any fast algorithm that always works . We do have an algorithm for determining whether or not a graph has chromatic number two , since we have seen an algorithm for determining if a graph is bipartite . As mentioned , complete graphs and odd cycles have χ ( G ) = ∆ ( G ) + 1 , so the inequality in Lemma 5 . 1 . 1 cannot be improved in general . In fact , complete graphs and odd cycles are the only connected graphs that attain equality , but we will not prove this until later . For now , we prove a weaker statement by choosing a speciﬁc ordering for the greedy algorithm . Lemma 5 . 1 . 2 . If a connected graph G has χ ( G ) = ∆ ( G ) + 1 , then G is regular . Proof . We show that if G is not regular , then we can choose an ordering of the vertices so that the greedy algorithm from the proof of Lemma 5 . 1 . 1 needs only ∆ ( G ) colors . Set n = | V ( G ) | . Assume G is not regular , so there is a vertex of degree at most ∆ ( G ) − 1 , which we label x n . We grow a spanning tree from x n : Starting with T consisting only of the vertex x n , we repeatedly add to T an edge from ∂ ( T ) . Since G is connected , this will indeed terminate with a spanning tree . While doing this , we label the vertices x n − 1 , x n − 2 , . . . , x 1 in decreasing order as we add them . We claim that the resulting sequence x 1 , . . . , x n has the property that each vertex has at most ∆ ( G ) − 1 neighbors in the sequence before it . Indeed , any x i with i < n has a unique path to x n in the tree , and by construction the labels on the vertices of this path increase from x i to x n . Thus x i has at least one neighbor x j with j > i . The claim also holds for x n , because we chose x n to have degree at most ∆ ( G ) − 1 . We apply the greedy algorithm from the proof of Lemma 5 . 1 . 1 , with the vertices in the ordering x 1 , . . . , x n . When we are about to color x i , at most ∆ ( G ) − 1 of its neighbors are already colored , so ∆ ( G ) colors suﬃce . 5 . 2 Edge coloring Deﬁnition . An edge coloring of a graph G is a map c : E ( G ) → N such that c ( e ) (cid:54) = c ( e (cid:48) ) whenever e , e (cid:48) are distinct edges that share a vertex . The edge - chromatic number χ e ( G ) of G is the minimum image size of an edge coloring of G ; in other words , it is the minimum number of colors that E ( G ) can be colored with . Each color class in an edge coloring is a matching , so an edge coloring is partition of the graph into matchings . An even cycle has edge - chromatic number 2 and an odd cycle has edge - chromatic number 3 . The picture on the left below is an edge coloring of the Petersen graph with four colors . We now prove that four is the minimum number ( the picture on the right illustrates the proof ) . Suppose we could color it with three colors . The outside C 5 needs three colors , and there must be three consecutive vertices on that C 5 that are incident with only two colors ( here red and blue ) . Then the third edge of each of those three vertices must have the third color ( here green ) . But then this third color cannot be used on the inside C 5 . 22 Lemma 5 . 2 . 1 . For any graph G with at least one edge we have ∆ ( G ) ≤ χ e ( G ) ≤ 2∆ ( G ) − 1 . Proof . There must a vertex of degree ∆ ( G ) , and an edge coloring must give a diﬀerent color to each of the ∆ ( G ) edges at that vertex . This implies χ e ( G ) ≥ ∆ ( G ) . The upper bound follows by a greedy algorithm just like that in the proof of Lemma 5 . 1 . 1 . Take an arbitrary ordering of the edges , and consecutively color each edge with the smallest color that is not yet used on the colored edges that it shares a vertex with . Since an edge shares a vertex with at most 2 ( ∆ ( G ) − 1 ) edges , it follows that 2∆ ( G ) − 1 colors suﬃce . Unlike for vertex coloring , the greedy algorithm for edge coloring can be signiﬁcantly improved on . This is shown in the proof of the following theorem , which tells us that any graph G has edge - chromatic number either ∆ ( G ) or ∆ ( G ) + 1 . Both are possible , since even cycles have χ e ( G ) = ∆ ( G ) and odd cycles have χ e ( G ) = ∆ ( G ) + 1 . However , this algorithm still does not always give the exact number , and in fact it is NP - hard to determine which of the two values is the edge - chromatic number of a given graph . Theorem 5 . 2 . 2 ( Vizing ) . For any graph G we have χ e ( G ) ≤ ∆ ( G ) + 1 . Proof . We use induction on the number of edges ; the statement clearly holds for a graph without edges . Given an edge xy ∈ E ( G ) , we describe an algorithm that , given an edge coloring of G − xy with at most ∆ ( G ) + 1 colors , produces an edge coloring of G with the same number of colors . To ﬁnd a color for xy , the algorithm may have to change the colors of other edges , so it is not a greedy algorithm . We ﬁrst give some ad hoc deﬁnitions . • If no edge incident with vertex v has color c , then we say that c is free at v , or that v is c - free . • Given two colors c , d , a cd - path is a path in G − xy whose edges are colored c and d . If a cd - path is maximal , then we can invert it by switching the colors c and d along the path . The result will still be an edge coloring , because if there were a conﬂict , then the path would not be maximal . • A fan consists of a vertex x , a sequence y 0 , . . . , y k of distinct neighbors of x , and a sequence c 1 , . . . , c k of distinct colors , such that xy 0 is uncolored , and for 1 ≤ i ≤ k , xy i has color c i and y i − 1 is c i - free . We can rotate a fan by recoloring edge xy i − 1 with color c i for i = 1 , . . . , k , and leaving xy k uncolored ; the result is still an edge coloring ( except for xy k ) . Given an edge coloring of G − xy with ∆ ( G ) + 1 colors , we begin by constructing a fan based at x with y 0 = y as follows . Since we have ∆ ( G ) + 1 colors and y 0 has degree at most ∆ ( G ) , there is a color c 1 that is free at y 0 . If there is an edge incident to x with color c 1 , then we label its other endpoint y 1 . We continue like this : We pick a color c i + 1 23 that is free at y i , and if possible we pick a c i + 1 - colored edge xy i + 1 that is not yet in the fan . This terminates when we have a vertex y k that is c - free for some color c , but there is no new edge incident to x with color c . Given this fan , there is a color c that is free at y k , and there is a color d that is free at x . We take a maximal cd - alternating path containing x . Such a path either consists of x , or it starts at x with a c - edge , possibly followed by a d - edge , etc . We invert the path , which gives a new edge coloring . After this inversion x is c - free . We claim that for some 1 ≤ (cid:96) ≤ k , y (cid:96) is c - free , and x , y 1 , . . . , y (cid:96) still forms a fan . If the alternating path was just x , and the inversion did nothing , then we can take the whole fan . Otherwise , the path started with some c - edge xy i + 1 , and y i must have been c - free before the inversion ; in other words , c i = c . If the path did not contain y i , then x , y 1 , . . . , y i is still a fan . Indeed , the colors c 1 , . . . , c k are distinct , so for j ≤ i the inversion did not aﬀect the fact that xy j has color c j or the fact that y j − 1 is c j - free . If the path did somehow reach y i , then the inversion made it d - free , and it colored xy i + 1 with d . In this case , x , y 1 , . . . , y k is still a fan , with the only change within the fan being that c i is replaced with d . In all cases we have a fan x , y 1 , . . . , y (cid:96) in which x and y (cid:96) are c - free . Now we can rotate the fan , so that the uncolored edge xy 0 = xy becomes colored , and xy (cid:96) becomes uncolored . Then we can color xy (cid:96) with c . 5 . 3 Line graphs Deﬁnition . The line graph of a graph G is the graph L ( G ) with vertex set V ( L ( G ) ) = E ( G ) , and with e , e (cid:48) ∈ V ( L ( G ) ) adjacent if e and e (cid:48) share a vertex in G . Line graphs explain some similarities that you may have noticed , between edge coloring and vertex coloring , and matchings and independent sets . From the deﬁnitions it should be clear that χ e ( G ) = χ ( L ( G ) ) , and similarly that m ( G ) = α ( L ( G ) ) . The cycle of a line graph is the cycle itself , which explains why the chromatic number of a cycle equals its edge - chromatic number ( if that needed any explanation ) . We have ∆ ( L ( G ) ) ≤ 2 ( ∆ ( G ) − 1 ) , since if two vertices of degree ∆ ( G ) are adjacent , then their edge corresponds to a vertex of degree 2 ( ∆ ( G ) − 1 ) in the line graph . Thus the upper bound χ e ( G ) ≤ 2∆ ( G ) − 1 actually follows from the upper bound χ ( G ) ≤ ∆ ( G ) + 1 ( and indeed , the proofs were essentially the same ) . Here is another example where this connection is useful . Lemma 5 . 3 . 1 . For any graph G we have χ ( G ) ≥ | V ( G ) | α ( G ) and χ e ( G ) ≥ | E ( G ) | m ( G ) . Proof . First we prove that χ ( G ) α ( G ) ≥ | V ( G ) | . Given a coloring with χ ( G ) colors , the color classes ( label them S 1 , . . . , S χ ( G ) ) are independent sets , and thus have size at most α ( G ) . Hence we have | V ( G ) | = χ ( G ) (cid:88) i = 1 | S i | ≤ χ ( G ) (cid:88) i = 1 α ( G ) = χ ( G ) α ( G ) . The second inequality follows directly by applying the ﬁrst one to the line graph of G . 24 Not every graph is a line graph . Suppose for instance that the following graph H is a line graph L ( G ) . The pair of vertices of H connected by the horizontal edge would correspond to a path xyz in G . The edges in G corresponding to the top and bottom vertex of H have to touch both edges of the path xyz , so one should be incident only with y and one should connect x and z . But then the edge of G corresponding to the rightmost vertex of H cannot touch the edge xz without touching xy or yz , which is a contradiction . We can now look back at the algorithmic facts that we have seen . In general , there is no good algorithm for ﬁnding independent sets . But , for graphs that are line graphs , ﬁnding an independent set in L ( G ) is equivalent to ﬁnding a matching in G , for which there is a good algorithm . Similarly , there is no good algorithm for determining the chromatic number of a graph , and the greedy algorithm is basically the best we have . But , for line graphs , determining the chromatic number of L ( G ) is the same as determining the edge - chromatic number of G . For that there is a non - greedy algorithm which does a lot better , since it gives an edge coloring of G ( and thus a vertex coloring of L ( G ) ) that is either minimal or has one color too much . 25 Chapter 6 Hamilton cycles 6 . 1 Girth and circumference Deﬁnition . The girth gir ( G ) of a graph G is the length of the shortest cycle contained in G . The circumference circ ( G ) is the length of the longest cycle contained in G . The complete graph K n for n ≥ 3 has gir ( K n ) = 3 and circ ( K n ) = n . For a less obvious example , consider the Petersen graph . It clearly has a 5 - cycle , and it is pretty easy to check that it has no 3 - cycle or 4 - cycle , so it has girth 5 . Determining the circumference is more challenging . With a little eﬀort one can ﬁnd a 9 - cycle , like the one depicted below . Let us prove that it has no 10 - cycle , so the circumference is 9 . We think of the Petersen graph as an outside 5 - cycle and an inside 5 - cycle , connected by 5 links . A 10 - cycle would have to contain an even number of such links , and not 0 since then we would not get a connected subgraph . Up to isomorphism , this leaves the two cases below : two links or four links ( depicted with thick black edges ) ; note that in the case of two links , they must hit adjacent vertices on one of the two 5 - cycles , so after possibly swapping the 5 - cycles , this is the only case with two links . In each case , we mark edges that cannot be in the cycle with red , and edges that must be in the cycle with green . Whenever a vertex has a red edge , its other two edges must be green or black . And if two edges of a vertex are green or black , then the third edge must be red . In this way we get a contradiction in both cases , either because of a vertex of degree 3 or because of a 5 - cycle . 26 Recall that in the lecture on trees we saw an algorithm for ﬁnding the shortest cycle , so we have an algorithm to determine the girth of a graph . The algorithm works by ﬁnding , for each edge xy ∈ E ( G ) , the distance from x to y in G − xy , using a breadth - ﬁrst search tree . The shortest such distance , plus one , is the girth . This works because , given a shortest cycle , if we remove an edge xy from the cycle , then the remaining path must be the shortest path between x and y . However , determining the circumference is NP - hard , so we do not have a fast algorithm for it . The example of the Petersen graph already illustrates this . In general , a BFS tree gives an easy way to ﬁnd a shortest path , because it has the special property that a shortest path between two vertices in the BFS tree is also the shortest path in the whole graph . But we do not have a tree or other structure with a similar property for longest paths . 6 . 2 Hamilton cycles Deﬁnition . A Hamilton cycle in a graph G is a cycle that contains all vertices of G . A Hamilton path in a graph G is a path that contains all vertices of G . A graph has a Hamilton cycle if and only if circ ( G ) = | V ( G ) | . Just like determining the cicumference , it is NP - hard to ﬁnd a Hamilton cycle in a graph ( or determine that there is none . A related problem is to ﬁnd a shortest Hamilton cycle in a graph with weighted edges ; this is called the travelling salesman problem and is one of the most famous NP - hard problems . Although we have no general algorithm for ﬁnding Hamilton cycles , we can still prove some theorems that are useful in certain situations . A necessary condition . Given a graph G and a set S ⊂ V ( G ) of vertices , we write G − S for the graph obtained by removing the vertices of S from G , along with all the edges that are incident to vertices in S . Lemma 6 . 2 . 1 . If G has a Hamilton cycle , then for all S ⊂ V ( G ) , G − S has at most | S | connected components . 27 Proof . The Hamilton cycle must visit all the components of G − S ( viewed as subgraphs of G ) , and to get from one component to another the cycle must pass through a vertex of S . Thus every component is connected to S by two edges of the cycle ( and possibly by other edges not in the cycle ) . Since every vertex is incident to two edges of the cycle , we have that twice the number of components is at most twice the number of vertices of S . This lemma can be useful to show that a graph does not have a Hamilton cycle . For example , if in the left - hand graph G below we let S consist of the middle two vertices , then G − S has three connected components , so by Lemma 6 . 2 . 1 the graph has no Hamilton cycle . On the other hand , one can check that the right - hand graph H satisﬁes the condition that for all S ⊂ V ( H ) , H − S has at most | S | components . Nevertheless , the graph has no Hamilton cycle . To see this , observe that for the vertices of degree 2 , both incident edges would have to be in the cycle ; but then the middle vertex would be incident to three edges of the cycle , which is impossible . 6 . 3 Suﬃcient conditions Next we prove two suﬃcient conditions for a graph to have a Hamilton cycle . First we show that a graph with many edges must have a Hamilton cycle . However , note that this bound is suprisingly weak , because a graph with this many edges is almost complete . In the proof the following deﬁnition will be convenient . Deﬁnition . The complement of a graph G is the graph G with vertex set V ( G ) = V ( G ) and edge set E ( G ) = { xy : x , y ∈ V ( G ) , xy (cid:54)∈ E ( G ) } . Theorem 6 . 3 . 1 . If G is a graph with | E ( G ) | > (cid:0) | V ( G ) | − 1 2 (cid:1) + 1 , then G has a Hamilton cycle . Proof . Set n = | V ( G ) | . The statement is clearly true for n = 1 , 2 , 3 , so we assume n > 3 . Note that (cid:0) n − 1 2 (cid:1) + 1 = (cid:0) n 2 (cid:1) − ( n − 2 ) . Thus the condition of the theorem means that | E ( G ) | < n − 2 . Thus (cid:80) d G ( v ) = 2 ( n − 2 ) < 2 n , which implies that there must be a vertex v such that d G ( v ) ≤ 1 . Then we have d G ( v ) ≥ n − 2 . We remove the vertex v from G , and we will apply induction to G − v . We distinguish the two cases d ( v ) = n − 2 and d ( v ) = n − 1 . Suppose d ( v ) = n − 2 . Then | E ( G − v ) | = | E ( G ) | − ( n − 2 ) > (cid:18) n − 1 2 (cid:19) + 1 − ( n − 2 ) = (cid:18) n − 2 2 (cid:19) + 1 = (cid:18) | V ( G − v ) | − 1 2 (cid:19) + 1 . 28 Hence , by induction , the graph G − v has a Hamilton cycle C . Since d ( v ) = n − 2 and n > 3 , v must have two neighbors u , w that are adjacent on C . Then we can remove uw from C and replace it by uv and vw , which results in a Hamilton cycle for G . Suppose d ( v ) = n − 1 . In this case we only have | E ( G − v ) | > (cid:0) | V ( G − v ) | − 1 2 (cid:1) , so we cannot apply induction right away . If G − v is complete , then G − v has a Hamilton cycle , and we can add v as in the previous case . Otherwise , we can add an arbitrary edge e to G − v , and apply induction to ﬁnd a Hamilton cycle C in G − v + e . If C does not contain e , then we can again add v as in the previous case . If C does contain e , then removing e from C gives a “Hamilton path” P in G − v . Since d ( v ) = n − 1 , v is connected to all vertices of G − v , and in particular to the endpoints u , w of P . Then adding uv and vw to P gives a Hamilton cycle of G . The statement in Theorem 6 . 3 . 1 cannot be improved , in the sense that a weaker bound on | E ( G ) | does not imply a Hamilton cycle . Take for instance the graph G consisting of K n − 1 and a single vertex connected to a single vertex of K n − 1 . This graph has | E ( G ) | = (cid:0) n − 1 2 (cid:1) + 1 , but it has no Hamilton cycle , since it has a vertex of degree 1 . As said , the condition in Theorem 6 . 3 . 1 is somewhat weak in the sense that many graphs that have a Hamilton cycle do not satisfy the condition . The following suﬃcient condition does better by looking at the minimum degree instead of the total number of edges . Its proof is a typical extremal argument that we have seen before , for instance in the proof of a lemma in Lecture 1 , which said that a graph must have a cycle of length δ ( G ) + 1 . But note that that lemma by itself is not strong enough to imply a Hamilton cycle . Theorem 6 . 3 . 2 ( Dirac ) . Let G be a graph with | V ( G ) | ≥ 3 . If δ ( G ) ≥ 12 | V ( G ) | , then G has a Hamilton cycle . Proof . First observe that G must be connected , since otherwise each connected component would contain at least δ ( G ) + 1 > 12 | V ( G ) | vertices , which is impossible . Take a longest path P = x 1 x 2 · · · x k in G . By maximality , all neighbors of x 1 and x k are on the path . Thus δ ( G ) ≥ 12 | V ( G ) | gives the following two inequalities : | { x i : 1 ≤ i ≤ k − 1 , x i x k ∈ E ( G ) } | ≥ 1 2 | V ( G ) | , | { x i : 1 ≤ i ≤ k − 1 , x i + 1 x 1 ∈ E ( G ) } | ≥ 1 2 | V ( G ) | . In other words , we have two subsets of size at least 1 2 | V ( G ) | that are contained in the set { x 1 , . . . , x k − 1 } , which has k − 1 < | V ( G ) | elements . It follows that the two subsets share an element x i , which means that we have x i x k ∈ E ( G ) and x i + 1 x 1 ∈ E ( G ) . Then C = x i · · · x 1 x i + 1 · · · x k x i is a cycle . In fact , C is a Hamilton cycle . Indeed , suppose there is a vertex u not in C . Since G is connected , there is a path from u to ( say ) x 1 . There is a vertex v on this path that is not on C but that is adjacent to some x j . Then there is a path that goes from v to x j , then all around the cycle C to a neighbor of x j . This path contains k + 1 vertices , contradicting the maximality of P . This theorem is again best possible , in the sense that a weaker bound on the minimum degree would not imply a Hamilton cycle . Take for instance the graph G consisting of two copies of K k sharing a single vertex . This graph has n = 2 k − 1 vertices and minimum degree δ ( G ) = k − 1 = 12 | V ( G ) | − 12 , but no Hamilton cycle . 29 Chapter 7 2 - connected graphs 7 . 1 2 - connectedness In this lecture we look at graphs that are “more connected” than other connected graphs . Recall that if G is a graph and x ∈ V ( G ) , then G − v is the graph with vertex set V ( G ) \ { x } and edge set E ( G ) \ { e : x ∈ e } . Deﬁnition . A graph G is 2 - connected if | V ( G ) | > 2 and for every x ∈ V ( G ) the graph G − x is connected . A vertex v ∈ V ( G ) such that G − v is disconnected is called a cut - vertex ; a graph with at least three vertices is thus 2 - connected if it has no cut - vertices . If G is 2 - connected , then δ ( G ) ≥ 2 , since if a vertex has degree 1 ( in a connected graph with more than two vertices ) , then its neighbor is a cut - vertex . Cycles C n are 2 - connected , as are complete graphs K n for n > 2 . Trees are not 2 - connected : Removing a vertex that is not a leaf disconnects the graph , since otherwise there would be a path connecting its neighbors , which would give a cycle in the tree . One can similarly deﬁne a cut - edge to be an edge e ∈ E ( G ) such that G − e is disconnected , and a graph to be 2 - edge - connected if it has no cut - edges . However , in this lecture we will focus on vertex connectivity . Our ﬁrst theorem gives a constructive characterization of 2 - connected graphs . This is useful for visualizing such graphs , and can be used in induction proofs . Deﬁnition . An ear decomposition of a graph G consists of a cycle C and a sequence of paths P 1 , . . . , P k such that G can be constructed by starting with C and consecutively attaching the paths P i by their endpoints . Theorem 7 . 1 . 1 . A graph G is 2 - connected if and only if it has an ear decomposition . Proof . Suppose G has an ear decomposition . The cycle that the decomposition starts with is 2 - connected . For any 2 - connected graph H , attaching a path P by its endpoints gives a 2 - connected graph : If we remove an internal vertex from P , each of the other vertices of P is connected to one of its endpoints , and thus to all of H ; if we remove a vertex x from H ( which may be an endpoint of P ) , then H − x is still connected , and P is still connected to H via at least one of its endpoints . It follows that a graph that has an ear decomposition is 2 - connected . Assume that G is 2 - connected . Then it is not a tree , so it has a cycle . We will show that we can build an ear decomposition starting with any cycle C . 30 Let H be any 2 - connected subgraph of G with V ( H ) (cid:54) = V ( G ) . Let x be a vertex in V ( G ) \ V ( H ) . Since G is connected , there is a path from x to any vertex in H , and this path contains a vertex y (cid:54)∈ V ( H ) that is adjacent to a vertex z ∈ V ( H ) . Since G is 2 - connected , G − z is connected , so there is a path in G − z from y to a vertex in H . Take the part of that path that goes from y to the ﬁrst vertex of the path that is in H ( which is not z ) . This subpath , combined with yz , is an “ear” that we can attach to H . Therefore , starting with any cycle C , we can ﬁnd such an ear and attach it , which gives a larger 2 - connected subgraph , and we can continue like this until there are no vertices left . At that point any remaining edge is an ear , so we can add the remaining edges one - by - one . 7 . 2 Whitney’s Theorem Recall that a graph is connected if there is a path between any two vertices . Thus it would have made sense to deﬁne “2 - connected” as any two vertices being connected by two paths . This would have been less convenient than the deﬁnition based on removal that we gave above . Nevertheless , the next theorem shows that the result would basically be the same , if we require that the two paths share no vertices besides their endpoints . We call two paths internally disjoint if they share no vertices other than ( possibly ) their endpoints . Theorem 7 . 2 . 1 ( Whitney ) . Let G be a graph with | V ( G ) | ≥ 3 . Then G is 2 - connected if and only if for any distinct x , y ∈ V ( G ) there are two internally disjoint paths from x to y in G . Proof . First we show that if every two vertices x , y ∈ V ( G ) are connected by two internally disjoint paths , then G − z is connected for any z ∈ V ( G ) , so G is 2 - connected . Fix z ∈ V ( G ) , and consider any two other vertices x , y ∈ V ( G ) . There are two internally disjoint paths from x to y , so z lies on at most one of these , and removing z breaks at most one of the paths . Hence in G − z there is still a path between x and y . Since this holds for any x , y ∈ V ( G − z ) , G − z is connected . Now assume that G is 2 - connected and let x , y ∈ V ( G ) . We use induction on the distance d ( x , y ) to prove that there are two internally disjoint paths from x to y . When d ( x , y ) = 1 , the edge xy is one path . The fact that G − x and G − y are connected implies that G − xy is connected , so there is a path from x to y that does not contain xy , and this is our second path . Let d ( x , y ) = k > 1 . Then there is a path from x to y of length k . Let z be the last vertex before y on this path , so we have d ( x , z ) = k − 1 . By induction , there are two internally disjoint paths P 1 , P 2 from x to z . Since G − z is connected , there is a path Q from x to y in G that does not contain z . If Q does not intersect P 1 or P 2 , then we have two internally disjoint paths from x to y : Q , and P 1 followed by zy . Suppose that Q intersects P 1 or P 2 ( possible more than once , and possibly both ) . Create one path by starting from y , following Q until it ﬁrst intersects P 1 or P 2 , and then following that path to x ; note that this path avoids z . Create another path by combining the other one of P 1 and P 2 with zy . This gives two internally disjoint paths from x to y . Corollary 7 . 2 . 2 . A graph G is 2 - connected if and only if for every two vertices x , y ∈ V ( G ) there is a cycle in G that contains x and y . 31 Note that in a 2 - connected graph we cannot guarantee that any three vertices lie on a cycle . Take for instance K 2 , 3 , which is 2 - connected . The three vertices on the larger side are not on any cycle , because a cycle in a bipartite graph has the same number of vertices from both sides . In the next lecture we will generalize 2 - connectedness to k - connectedness , and we will see generalizations of Theorem 7 . 2 . 1 and Corollary 7 . 2 . 2 . 7 . 3 3 - connectedness and Brooks’s Theorem Deﬁnition . A graph G is 3 - connected if | V ( G ) | > 3 and for all x , y ∈ V ( G ) the graph G − x − y is connected . In this section we will use the notion of 3 - connectedness to prove an important theorem on vertex coloring . Our proof does not actually use any theorems about 3 - connectedness , but the property is exactly what we need to distinguish between the two main cases in the proof . This is why we postponed this theorem to the current lecture . Recall that for any graph G we have χ ( G ) ≤ ∆ ( G ) + 1 . We already saw a proof that when equality holds , G must be a regular graph . Brooks’s Theorem reﬁnes that statement . Theorem 7 . 3 . 1 ( Brooks ) . Let G be a connected graph . If χ ( G ) = ∆ ( G ) + 1 , then G is a complete graph or an odd cycle . Proof . Set ∆ = ∆ ( G ) . In Lecture 5 we saw that if χ ( G ) = ∆ + 1 , then G must be ∆ - regular . The proof worked as follows : If G has a vertex x of degree less than ∆ , then we can order the vertices using a spanning tree , in such a way that every vertex has a neighbor that comes later in the order , except for x , which comes last ; the greedy algorithm is then able to color all vertices with ∆ colors . We will use that idea again . First note that if ∆ = 0 , 1 , the statement is trivial , and if ∆ = 2 then it is easy to see that G must be an odd cycle . So we can assume that ∆ ≥ 3 . We will distinguish between the case where G is 3 - connected and the case where G is not 3 - connected . Suppose that G is 3 - connected . We can assume that there are two vertices x 1 , x 2 ∈ V ( G ) such that d ( x 1 , x 2 ) = 2 , since otherwise G is complete and we are done . Thus x 1 and x 2 are not adjacent , but there is a vertex x n that is adjacent to both . Since G is 3 - connected , G − x 1 − x 2 is connected . We build a tree in G with x n as root , by repeatedly adding vertices x n − 1 , . . . , x 3 from G − x 1 − x 2 , with each x i having at least one edge to one of the previous vertices . Now we apply the greedy algorithm with the vertex order x 1 , x 2 , . . . , x n to color G with at most ∆ colors . Since x 1 and x 2 are not adjacent , they get the same color . Since each of the vertices x 3 , . . . , x n − 1 has ∆ neighbors , at least one of which is uncolored when the algorithm reaches the vertex , each of these vertices can be colored with one of the ∆ colors . Finally , when the algorithm reaches x n , all its ∆ neighbors are colored , but x 1 and x 2 are neighbors of x n with the same color , so there is a color left to color x n with . This shows that χ ( G ) ≤ ∆ ( G ) if G is 3 - connected and not complete . Now suppose that G is not 3 - connected . In this case there are x , y ∈ V ( G ) such that G − x − y is not connected . We can take subgraphs G 1 and G 2 such that V ( G 1 ) ∩ V ( G 2 ) = { x , y } , E ( G 1 ) ∪ E ( G 2 ) = E ( G ) , and there are no edges between 32 V ( G 1 ) \ { x , y } and V ( G 2 ) \ { x , y } . Speciﬁcally , let G 1 be one component of G − x − y combined with x , y and all the edges with both endpoints in this set ; let G 2 be the union of the remaining components , combined with x , y and all edges with both endpoints in this set . Since x and y must have edges in both G 1 and G 2 , these graphs are not regular , so can be ∆ - colored . If both can be colored with x , y having the same color , or both can be colored with x , y having diﬀerent colors , then we can combine the two colorings into a ∆ - coloring of G . In particular , if x and y are adjacent , then both colorings give x and y diﬀerent colors , so can be combined . Thus we can assume that x and y are not adjacent . The remaining possibility is that every ∆ - coloring of G 1 gives x , y the same color , and every ∆ - coloring of G 2 gives x , y diﬀerent colors ( or vice versa ) . If a ∆ - coloring of G 1 is forced to give x , y the same color , then it must be because d G 1 ( x ) = ∆ − 1 and d G 1 ( y ) = ∆ − 1 . Indeed , if one of these degrees were lower , then we would have an alternative color for one of the two vertices . But then d G 2 ( x ) = 1 and d G 2 ( y ) = 1 , so since ∆ ≥ 3 and x and y are not adjacent , it is not possible that a ∆ - coloring of G 2 is forced to give x , y diﬀerent colors . This is because only one color is blocked at each of x and y , and at least two colors are available at each , so there is one color that can be given to both . This is a contradiction that ﬁnishes the proof . 33 Chapter 8 k - connected graphs 8 . 1 Menger’s Theorem In this lecture we generalize our results from the previous lecture , from 2 - connected graphs to k - connected graphs . We ﬁrst prove the key tool behind these generalizations , which is Menger’s Theorem . Its proof is relatively diﬃcult and requires a few ad hoc deﬁnitions . Given two vertex sets A , B ⊂ V ( G ) , we call a path an AB - path if one endpoint is in A , the other endpoint is in B , and no other vertex on the path is in A or B . If x ∈ A ∩ B , then we consider x itself to be an AB - path . We call a set S ⊂ V ( G ) such that every AB - path intersects S an AB - separator . Theorem 8 . 1 . 1 ( Menger ) . Let G be a graph and A , B ⊂ V ( G ) . The maximum number of disjoint AB - paths equals the minimum size of a set S ⊂ V ( G ) such that every AB - path contains a vertex from S . Proof . Let s be the minimum size of an AB - separator . Any set of disjoint AB - paths contains at most s paths , since otherwise a separator of size s could not cut all the paths . We have to show that there exists a set of s disjoint AB - paths . We will prove this using induction on | E ( G ) | . When | E ( G ) | = 0 , then the only minimum AB - separator is A ∩ B itself , so we must have s = | A ∩ B | , and the s vertices in A ∩ B are disjoint AB - paths . Assume | E ( G ) | ≥ 1 and let xy be any edge in E ( G ) . We claim that if G does not have s disjoint AB - paths , then G has an AB - separator S of size s that contains both x and y . We ﬁrst show how to prove the theorem given this claim , and then we will prove the claim . Consider the graph G − xy , in which S is still an AB - separator . Consider an AS - separator R in G − xy . Observe that every AB - path in G contains an AS - path in G − xy ( this could fail if we did not have x , y ∈ S ) , so R is also an AB - separator in G , which implies | R | ≥ s . It follows that the minimum size of an AS - separator in G − xy is at least s . By induction , this implies that G − xy has s disjoint AS - paths . By the same argument on the other side , G − xy has s disjoint SB - paths . These AS - paths and SB - paths do not intersect outside S , since that would give an AB - path avoiding S . Since | S | = s , we can connect the s AS - paths with the s SB - paths to obtain s disjoint AB - paths . It remains to prove the claim that if G does not have s disjoint AB - paths , then G has an AB - separator S of size s containing x and y . We contract xy to get the graph G / xy ; this means that we remove xy and identify x and y to a vertex v xy . More precisely , we remove x , y , and all incident edges , add a new vertex v xy , and we connect v xy to every vertex that was previously adjacent to x or y ( or both ) . We modify A in the natural way : 34 If A does not contain x or y , then we let A (cid:48) be the same set in G / xy ; if A does contain x or y ( or both ) , then we set A (cid:48) = ( A \ { x , y } ) ∪ { v xy } . We do the same with B to get B (cid:48) . An A (cid:48) B (cid:48) - path P in G / xy corresponds to one or more AB - paths in G : If v xy is not on P , then P is an AB - path in G ; if v xy is on P , then there can be more than one way to modify P to an AB - path in G . Conversely , an AB - path in G corresponds to an A (cid:48) B (cid:48) - path in G / xy . Also note that disjoint A (cid:48) B (cid:48) - paths in G / xy correspond to disjoint AB - paths in G . By assumption , G does not have s disjoint AB - paths , so G / xy does not have s disjoint A (cid:48) B (cid:48) - paths . By induction ( for the statement of the theorem , not just the claim ) , this implies that the minimum size of an A (cid:48) B (cid:48) - separator in G / xy is at most s − 1 , so G / xy has an A (cid:48) B (cid:48) - separator S (cid:48) of size at most s − 1 . We must have v xy ∈ S (cid:48) , since otherwise S (cid:48) would be an AB - separator in G that is smaller than the minimum ( using the fact that every AB - path in G corresponds to an A (cid:48) B (cid:48) - path in G / xy ) . Set S = ( S (cid:48) \ { v xy } ) ∪ { x , y } . It is an AB - separator in G of size s that contains x and y . Corollary 8 . 1 . 2 . Let G be a graph and x , y ∈ V ( G ) distinct vertices with xy (cid:54)∈ E ( G ) . The maximum number of internally disjoint paths from x to y equals the minimum size of a set S ⊂ V ( G ) \ { x , y } with the property that every path from x to y contains a vertex from S . Proof . Apply Theorem 8 . 1 . 1 with A = N ( x ) and B = N ( y ) . Note that adding x and y to an AB - path gives a path from x to y , but removing x and y from a path between x and y may not give an AB - path , because a path between x and y may pass through more than one neighbor of x or y . Nevertheless , every path between x and y does contain a subpath that is an AB - path , so the maximum number of internally disjoint paths from x to y equals the number of disjoint AB - paths . By Theorem 8 . 1 . 1 , this maximum equals the minimum size of a set S ⊂ V ( G ) such that every AB - path intersects S . Any such set S also has the property that every path from x to y contains a vertex of S . It remains to show that a minimum such set S does not contain x or y . If S contains x ( say ) and every AB - path intersects S , then the same holds for S \ { x } , since a path that goes from B to A via x contains a subpath from B to A that does not contain x , and that subpath must contain some other vertex of S . 8 . 2 k - connected graphs Recall that for S ⊂ V ( G ) , G − S is the subgraph obtained from G by removing the vertices of S and all edges incident with a vertex of S . Deﬁnition . A graph is k - connected if | V ( G ) | > k and for every S ⊂ V ( G ) with | S | = k − 1 the graph G − S is connected . Note that 1 - connected is the same as connected , except ( annoyingly ) when | V ( G ) | = 1 . Theorem 8 . 2 . 1 . A graph G is k - connected if and only if for any distinct x , y ∈ V ( G ) there are k internally disjoint paths from x to y in G . Proof . If G contains k internally disjoint paths between any two vertices , then we must have | V ( G ) | > k , and after removing k − 1 vertices , any two vertices are still connected by one of the k paths , so G is k - connected . 35 Conversely , suppose that G is k - connected and contains two vertices x , y that are not connected by k internally disjoint paths . If xy (cid:54)∈ E ( G ) , then by Corollary 8 . 1 . 2 there are k − 1 vertices whose removal disconnects x from y , contradicting k - connectedness . Thus we can assume that xy ∈ E ( G ) . By assumption , any set of internally disjoint paths connecting x and y has size at most k − 1 . Moreover , any maximum such set includes the path xy , since otherwise we can add it . Thus G − xy has at most k − 2 internally disjoint paths from x to y . By Corollary 8 . 1 . 2 , there is a set S ⊂ V ( G ) \ { x , y } of size k − 2 such that every path from x to y intersects S . We have | S ∪ { x , y } | = k and | V ( G ) | > k , so there is a vertex z (cid:54)∈ S ∪ { x , y } . In G − xy , S must separate z from either x or y , since otherwise there would be a path from x to y avoiding S . Say that S separates z from x ; then S ∪ { y } is a set of at most k − 1 vertices that separates z from x in G , contradicting the k - connectedness of G . Deﬁnition . The connectivity conn ( G ) of a graph G is the maximum k such that G is k - connected . We have conn ( C n ) = 2 , conn ( K n ) = n − 1 for n ≥ 3 , and the connectivity of the Petersen graph is 3 . Note that conn ( G ) ≤ δ ( G ) , since if x is a vertex with d ( x ) = δ ( G ) , then N ( x ) is a set of δ ( G ) vertices such that G − N ( x ) is not connected . Finally , we prove the generalization of the fact from the last lecture that in a 2 - connected graph every two vertices are contained in a cycle . The proof of that fact was easy , since two internally disjoint paths between two vertices give a cycle containing those two vertices . For more than two vertices , the proof is more interesting . We require the following lemma . Lemma 8 . 2 . 2 . Let G be a k - connected graph . For every x ∈ V ( G ) and U ⊂ V ( G ) with | U | ≥ k , there are k paths from x to U that are disjoint aside from x , with each path having exactly one vertex from U . Proof . Add a vertex u that is adjacent to all the vertices in U ; the resulting graph is still k - connected ( this requires that | U | ≥ k ) . By Theorem 8 . 2 . 1 , there are k internally disjoint paths from x to u . Removing u from these paths gives paths from x to U that are disjoint aside from x . If such a path contains more than one vertex of U , then it contains a subpath with exactly one vertex from U , which we can take instead . Theorem 8 . 2 . 3 ( Dirac ) . If a graph G is k - connected for k ≥ 2 , then for every set K of k vertices in G , there exists a cycle in G containing K . Proof . We use induction on k . For k = 2 , we saw a proof in the previous lecture ; it also follows directly from the case k = 2 of Theorem 8 . 2 . 1 . Assume k > 2 and pick any x ∈ K . By induction , G has a cycle C containing K \ { x } . If x ∈ V ( C ) , we are done , so we can assume that x (cid:54)∈ V ( C ) . Suppose that | V ( C ) | = k − 1 . By Lemma 8 . 2 . 2 and the fact that G is ( k − 1 ) - connected , there are k − 1 paths from x to C that are disjoint aside from x , each containing exactly one vertex of C . We can use any two of the paths from x that end at adjacent vertices y , z ∈ V ( C ) to obtain a cycle containing x as well as K \ { x } : Remove the edge yz from C , and replace it by the path that goes from y to x and then from x to z . Since these paths were disjoint aside from x , and also contain no other vertices from C , this indeed gives a cycle . Suppose that | V ( C ) | ≥ k . By Lemma 8 . 2 . 2 and the fact that G is k - connected , there are k paths from x to C that are disjoint aside from x , each containing exactly one vertex 36 of C . The k − 1 vertices of K \ { x } partition V ( C ) into k − 1 consecutive segments ( for each vertex of K \ { x } , take that vertex and all the following ones , up to the one before the next vertex of K \ { x } ) . By the pigeonhole principle , there must be a segment that is reached by two of the paths from x . Then as in the previous case these two paths can be used to obtain a cycle containing x as well as K \ { x } . 37 Chapter 9 Planar graphs 9 . 1 Drawings of graphs We have so far only considered abstract graphs , although we often used pictures to illus - trate the graph . In this lecture , we prove some facts about pictures of graphs and their properties . To set this on a ﬁrm footing , we give a formal deﬁnition of what we mean by “picture” , although in most of the lecture we will be less formal . Deﬁnition . A drawing of a graph G consists of an injective map f : V ( G ) → R 2 , and a curve C xy ( the image of an injective continuous map [ 0 , 1 ] → R 2 ) from x to y for every xy ∈ E ( G ) , such that if z (cid:54) = x , y then z (cid:54)∈ C xy . A drawing is planar if the curves C xy do not intersect each other except possibly at endpoints . Deﬁnition . A graph is planar if it has a planar drawing . For example , the graphs K 4 and K 2 , 3 are planar graphs . Warning : Some proofs in this lecture will be not quite rigorous . This is mainly because arbitrary continuous curves can behave in unintuitive ways , which makes it hard to make intuitive arguments fully rigorous . Whenever an argument is not quite rigorous , we will point out why . In most cases , the arguments can be made rigorous using the Jordan Curve Theorem , which states that a non - self - intersecting closed curve in R 2 divides R 2 into an inside and an outside , and any path between a point inside and a point outside must pass through the closed curve . Although this statement is very intuitive , proving it turns out to be quite hard . We will not try to prove it in this course , since it would take us too far into topology and away from graph theory . Deﬁnition . A face of a drawing D of a graph G is a maximal connected set in R 2 after the vertices and edges of D are removed . We write F D ( G ) for the set of faces of D . Every drawing has an outer face , which is the unique unbounded face in the comple - ment of the drawing . Note that although typically an edge lies in the boundary of two faces , an edge can be in the boundary of a single face , which happens if and only if the edge is a cut - edge ; this fact will create some complications later on . 9 . 2 Non - planar graph To show that a graph is planar , we only have to supply a planar drawing . It is often a little harder to show that a graph is not planar . 38 Proposition 9 . 2 . 1 . The graph K 5 is not planar . Proof . The graph contains a K 3 , which can basically be drawn in only one way . If in a drawing the fourth vertex is inside this K 3 and the ﬁfth is outside , then the edge between them must cross the K 3 , which means the drawing is not planar . If both vertices are inside the K 3 , then the three edges of one vertex divide the inside face into three faces . The other vertex must then be in one of these three faces , and one of its edges must cross the boundary of this face . A similar argument applies when both vertices are outside the K 3 . Note that to make this proof rigorous , we would need the Jordan Curve Theorem to show that a drawing of a K 3 has an inside and an outside , and that to connect a vertex inside to a vertex outside we would have to cross the K 3 . Proposition 9 . 2 . 2 . The graph K 3 , 3 is not planar . Proof . The graph contains a C 6 , and the remaining three edges connect opposite corners of the C 6 in a symmetric way . Two of these three edges would have to be both inside or outside the C 6 , and there one of them would create a closed curve that the other one would have to cross . Again , this proof relies on the Jordan Curve Theorem . If a graph H is a subgraph of a graph G and H is not planar , then G is also not planar , since a planar drawing of G would give a planar drawing of H . A stronger version of this is the following . Call a graph H (cid:48) a subdivision of H if it can be obtained from H by repeatedly replacing an edge xy by a path xzy for some new vertex z ( informally , we simply place the new vertex z somewhere on top of the edge xy , subdividing it into two edges xz and zy ) . It is easy to see that a subdividion of H is planar if and only if H is planar ; the new vertices do not have any eﬀect on whether ot not we can draw the graph without crossing edges . Proposition 9 . 2 . 3 . The Petersen graph is not planar . Proof . It contains a subdivision of K 3 , 3 . Amazingly , any non - planar graph can be shown to be non - planar by displaying a subdivision of K 5 or K 3 , 3 in that graph , and a planar graph can be shown to be planar by showing that it does not contain such a subdivision . This is the content of the following theorem . Note that it states an equivalence between a topological statement ( the graph having a planar drawing ) and a combinatorial statement ( the graph not containing a certain subdivision ) . The proof of this theorem is fairly hard and we will not include it in this course . Theorem 9 . 2 . 4 ( Kuratowski ) . A graph is planar if and only if it does not contain a subdivision of K 5 or K 3 , 3 . 9 . 3 Euler’s formula Theorem 9 . 3 . 1 ( Euler ) . Let G be a connected planar graph and D a planar drawing of G . Then | V ( G ) | − | E ( G ) | + | F D ( G ) | = 2 . 39 Proof . We use induction on | E ( G ) | . Since G is connected , we have | E ( G ) | ≥ | V ( G ) | − 1 , so we can start with the base case | E ( G ) | = | V ( G ) | − 1 . In that case , G is a tree , so any planar drawing has only one face and we have | F D ( G ) | = 1 . Then | V ( G ) | − | E ( G ) | + | F D ( G ) | = | V ( G ) | − ( | V ( G ) | − 1 ) + 1 = 2 . Assume that | E ( G ) | > | V ( G ) | − 1 . Then G contains a cycle C . Pick an edge e ∈ E ( C ) . The graph G − e is connected , and the drawing D directly gives a planar drawing D (cid:48) of G − e . Moreover , since e is in a cycle , it is not a cut - edge of G , so e is on the boundary of two diﬀerent faces ( one inside C , one outside C ; here we use the Jordan Curve Theorem ) . Removing e merges these two faces , and does not aﬀect any other faces , so | F D (cid:48) ( G − e ) | = | F D ( G ) | − 1 . By induction , we have | V ( G − e ) | − | E ( G − e ) | + | F D (cid:48) ( G − e ) | = 2 . Plugging in | V ( G − e ) | = | V ( G ) | , | E ( G − e ) | = | E ( G ) | − 1 , and | F D (cid:48) ( G − e ) | = | F D ( G ) | − 1 gives Euler’s formula for G . Note that Euler’s formula implies that for two planar drawings D 1 , D 2 of a graph we have | F D 1 ( G ) | = 2 − | V ( G ) | + | E ( G ) | = | F D 2 ( G ) | , so the number of faces in a planar drawing of a graph is independent of the drawing . Proposition 9 . 3 . 2 . Let G be a planar graph with | V ( G ) | ≥ 3 . Then | E ( G ) | ≤ 3 | V ( G ) | − 6 . Proof . We can assume that G is maximally planar , i . e . , that adding any edge to G would make it non - planar . Indeed , given any planar graph , we can add edges until it is maximally planar ; if the bound holds for the maximally planar graph , then it also holds for the original graph . Then G is connected , every edge is in the boundary of two faces , and every face has exactly three edges on its boundary , since if any of these properties did not hold , then we could add an edge . Double counting the pairs ( e , f ) , where the edge e is on the boundary of the face f , gives us 2 | E ( G ) | = 3 | F D ( G ) | . Plugging | F D ( G ) | = 23 | E ( G ) | into Euler’s formula gives 2 = | V ( G ) | − | E ( G ) | + 2 3 | E ( G ) | , which rearranges to | E ( G ) | = 3 | V ( G ) | − 6 . Since this equality holds for any maximally planar graph , the inequality | E ( G ) | ≤ 3 | V ( G ) | − 6 holds for any planar graph . It is possible to prove Proposition 9 . 3 . 2 in a more direct way , without assuming the graph to be maximally planar . Basically , every edge bounds at most two faces , and every face is bounded by at least three edges , so we should have 2 | E ( G ) | ≥ 3 | F D ( G ) | . Plugging that into Euler’s formula directly gives the inequality | E ( G ) | ≤ 3 | V ( G ) | − 6 ( to apply Euler’s formula , we need the graph to be connected , but we can apply it to each connected component , which leads to the same bound ) . However , it is not always true that every edge bounds at most two faces and every face is bounded by at least three edges ; take for instance the path P 2 , which has one face bounded by two edges . For P 2 we have 2 | E ( G ) | ≥ 3 | F D ( G ) | anyway , but it is tricky to prove that this holds for all graphs . The step of making the graph maximally planar is a convenient way around this . 40 Proposition 9 . 3 . 2 gives us a quick proof that K 5 is not planar : | E ( K 5 ) | = (cid:18) 5 2 (cid:19) = 10 > 9 = 3 · 5 − 6 = 3 | V ( K 5 ) | − 6 . This does not quite work for K 3 , 3 or the Petersen graph , but their non - planarity can also be proved using Euler’s formula ( see Problem Set 9 for K 3 , 3 ) . Corollary 9 . 3 . 3 . If G is planar , then it has a vertex of degree at most ﬁve . Proof . Combining Proposition 9 . 3 . 2 with the degree formula from the ﬁrst lecture gives (cid:88) v ∈ V ( G ) d ( v ) = 2 | E ( G ) | ≤ 6 | V ( G ) | − 12 . This implies that the average degree of a vertex is strictly less than six , so there must be a vertex with degree at most ﬁve . 9 . 4 Coloring planar graphs Theorem 9 . 4 . 1 ( Five Color Theorem ) . If G is planar then χ ( G ) ≤ 5 . Proof . Fix a planar drawing of G . We use induction on | V ( G ) | . The statement is obvious for | V ( G ) | ≤ 5 . By Corollary 9 . 3 . 3 , there is a vertex v ∈ V ( G ) of degree at most ﬁve . By induction , we can color G − v with ﬁve colors . If this coloring uses at most four colors on N ( v ) , then we can color v with the ﬁfth color and we are done . Thus we can assume that v has ﬁve neighbors x 1 , . . . , x 5 , and that x i has color i . We can also assume that the edges vx 1 , . . . , vx 5 leave v in that order when we go around v in the clockwise direction ( say ) . We call a path in G an ij - path if all its vertices have color i or j . Suppose that there is no 13 - path from x 1 to x 3 . Let R be the set of vertices that are reachable from x 1 by a 13 - path . By assumption , x 3 is not in R . Then we can swap the colors 1 and 3 for all the vertices in R . This gives a valid coloring , and it leaves x 1 and x 3 both colored with 3 . Then we can color v with 1 and we are done . Now suppose that there is a 13 - path from x 1 to x 3 ; together with v this path forms a cycle C , all of whose vertices are colored with 1 or 3 ( or uncolored in the case of v ) . Let S be the set of vertices reachable by 24 - paths from x 2 . Then the cycle C separates S from x 4 ( here we use the Jordan Curve Theorem ) , so x 4 is not in S . Thus we can swap colors 2 and 4 in S , and then color v with 2 . This theorem is actually not best possible . The famous Four Color Theorem states that for any planar graph we have χ ( G ) ≤ 4 . However , the proof is extremely hard and has only been completed using computers to check many cases . 41 Chapter 10 Extremal graph theory I 10 . 1 Extremal graph theory Extremal graph theory is a wide area that studies the extremal values of graph parameters for graphs with certain properties . We have seen various examples in this course ; for instance , we saw an upper bound for the number of edges in a graph without a Hamilton cycle . In this lecture ( and the next ) , we will focus on a speciﬁc subset of problems from extremal graph theory , namely bounds on the number of edges of a graph not containing a ﬁxed subgraph . Deﬁnition . Let H be a graph . A graph G is H - free if G does not contain H . We write ex H ( n ) for the maximum number of edges in an H - free graph on n vertices . An extremal graph for H is an H - free graph that has n vertices and ex H ( n ) edges . To give a simple example , consider H = . We claim that ex H ( n ) = n − 1 for n ≥ 4 . Indeed , if we pick one edge xy in an H - free graph , then every other edge must share a vertex with it . If one edge contains x and another contains y , then they must form a triangle , and there can be no other edges . Otherwise , all edges contain the same endpoint of e , which implies that there are at most n − 1 edges . This proof also shows that the only extremal graph for H is the star K 1 , n − 1 . Usually , we ﬁrst look for an upper bound on ex H ( n ) , and then we try to ﬁnd extremal graphs matching that bound . Sometimes that will work perfectly and we can determine ex H ( n ) exactly ( see Section 10 . 2 ) , while other times it turns out to be harder and we have to settle for upper and lower bounds for ex H ( n ) ( see Section 3 ) . Compared to the previous lectures , extemal graph theory relies more often on formulas and inequalities . In this lecture we only need the following standard inequality . Lemma 10 . 1 . 1 ( Cauchy - Schwarz ) . Let x 1 , . . . , x k and y 1 , . . . , y k be real numbers . Then (cid:32) k (cid:88) i = 1 x i y i (cid:33) 2 ≤ k (cid:88) i = 1 x 2 i k (cid:88) i = 1 y 2 i . Equality holds if and only if the vector ( x i ) is a multiple of the vector ( y i ) . We will mostly use the following corollary , which follows by setting y i = 1 for all i . 42 Corollary 10 . 1 . 2 . If x 1 , . . . , x k are real numbers , then k (cid:88) i = 1 x 2 i ≥ 1 k (cid:32) k (cid:88) i = 1 x i (cid:33) 2 . Equality holds if and only if all x i are equal . 10 . 2 Triangles Theorem 10 . 2 . 1 ( Mantel ) . If G contains no triangle , then | E ( G ) | ≤ 14 | V ( G ) | 2 . Proof . Suppose G contains no triangle . Pick any xy ∈ E ( G ) . Then x and y have no common neighbor , since otherwise we would get a triangle . Thus N ( x ) and N ( y ) are disjoint subsets of V ( G ) \ { x , y } , so we have ( d ( x ) − 1 ) + ( d ( y ) − 1 ) ≤ | V ( G ) | − 2 , which implies d ( x ) + d ( y ) ≤ | V ( G ) | . Summing over all xy ∈ E ( G ) , we get | V ( G ) | · | E ( G ) | ≥ (cid:88) xy ∈ E ( G ) ( d ( x ) + d ( y ) ) = (cid:88) x ∈ V ( G ) d ( x ) 2 . The equality holds because in the sum on the left , a term d ( x ) occurs exactly d ( x ) times , once for each edge incident to x . Applying Cauchy - Schwarz , or more speciﬁcally Corollary 10 . 1 . 2 , and using (cid:80) d ( x ) = 2 | E ( G ) | , this gives | V ( G ) | · | E ( G ) | ≥ (cid:88) x ∈ V ( G ) d ( x ) 2 ≥ 1 | V ( G ) |   (cid:88) x ∈ V ( G ) d ( x )   2 = 4 | E ( G ) | 2 | V ( G ) | . This proves the theorem . Corollary 10 . 2 . 2 . We have ex K 3 ( n ) = (cid:98) n 2 4 (cid:99) , and the only extremal graph for K 3 is K (cid:98) n 2 (cid:99) , (cid:100) n 2 (cid:101) . Proof . The number of edges is always an integer , so Theorem 10 . 2 . 1 gives ex K 3 ( n ) ≤ (cid:98) n 2 4 (cid:99) . The graph K (cid:98) n 2 (cid:99) , (cid:100) n 2 (cid:101) has no triangle and has (cid:106) n 2 (cid:107) · (cid:108) n 2 (cid:109) = (cid:22) n 2 4 (cid:23) edges , so we have ex K 3 ( n ) = (cid:98) n 2 4 (cid:99) . To see that there is no other extremal graph ( up to isomorphism of course ) , we have to look back at the proof of Theorem 10 . 2 . 1 . Let us assume that n is even 1 . To get an equality in the bound , we must ﬁrst of all have an equality in the application of Cauchy - Schwarz . By Corollary 10 . 1 . 2 , this happens 1 The odd case is similar , but slightly more annoying , because then the d ( x ) are almost equal but not quite . In the next lecture , we will see a more general proof that gives the uniqueness of the extremal graph in a more pleasant way . 43 if and only if all d ( x ) are equal . Then we must have equality in d ( x ) + d ( y ) ≤ n , so d ( x ) = 12 n for all x . Pick any vertex x . It has 12 n neighbors , which form an independent set B . Each vertex in B has 12 n neighbors , which is an independent set A disjoint from B . It now follows that every vertex of A is adjacent to every vertex of B , which means that we have a complete bipartite graph with parts of size | A | = | B | = 12 n . Just for fun , we give another proof of Theorem 10 . 2 . 1 . Alternative proof of Theorem 10 . 2 . 1 . We use a technique called weight shifting . Let G be a graph without triangles . We begin with a weight w ( x ) = 1 on every vertex x ∈ V ( G ) . We will maximize S = (cid:88) xy ∈ E ( G ) w ( x ) w ( y ) by moving the weights around , in such a way that the total weight stays the same ( equal to | V ( G ) | ) , while S never decreases . When we start with every weight 1 , we have S = | E ( G ) | . Write W ( x ) = w ( N ( x ) ) for the total weight of the neighbors of a vertex . Let x , y ∈ V ( G ) be two non - adjacent vertices with W ( x ) ≥ W ( y ) . Then for any s ≥ 0 we have ( w ( x ) + s ) W ( x ) + ( w ( y ) − s ) W ( y ) ≥ w ( x ) W ( x ) + w ( y ) W ( y ) . This means that we can shift any weight from y to x without decreasing S . In general , for any two non - adjacent vertices with nonzero weight , we can shift all the weight of the one with smaller W to the one with larger W . When we do this repeatedly , we increase the number of vertices with weight 0 in each step . Therefore , after ﬁnitely many steps we cannot make any further steps , which must be because all vertices with nonzero weight have become pairwise adjacent . But there is no triangle , so at this point we must have all the weight on ( at most ) two adjacent vertices x , y . The maximum value of w ( x ) w ( y ) , under the condition w ( x ) + w ( y ) = | V ( G ) | , occurs when w ( x ) and w ( y ) are equal , so S ≤ 1 2 | V ( G ) | · 1 2 | V ( G ) | = 1 4 | V ( G ) | 2 . Note that 12 | V ( G ) | may not be an integer , but the upper bound still holds . Observe that we started with S = | E ( G ) | , and S did not decrease while shifting , so | E ( G ) | ≤ 14 | V ( G ) | 2 . 10 . 3 Squares Theorem 10 . 3 . 1 ( Erd˝os ) . If G contains no K 2 , 2 , then | E ( G ) | ≤ | V ( G ) | 3 / 2 . Proof . Suppose G has no K 2 , 2 . Set n = | V ( G ) | and e = | E ( G ) | . We will double count the number of copies of K 1 , 2 = P 2 in G ; write M for this number . On the one hand , for any vertex we get a K 1 , 2 for every pair of incident edges , so M = (cid:88) x ∈ V ( G ) (cid:18) d ( x ) 2 (cid:19) . Because there is no K 2 , 2 , there can be no two K 1 , 2 with the same two endpoints . In other words , for any pair x , y of vertices , there is at most one z such that x , y , z form a K 1 , 2 with x , y as endpoints . This gives us M ≤ (cid:18) n 2 (cid:19) . 44 Now we calculate . We have obtained (cid:18) n 2 (cid:19) ≥ M = (cid:88) x ∈ V ( G ) (cid:18) d ( x ) 2 (cid:19) = 1 2 (cid:88) d ( x ) 2 − 1 2 (cid:88) d ( x ) . Applying Cauchy - Schwarz and (cid:80) d ( x ) = 2 e gives 1 2 (cid:88) d ( x ) 2 − 1 2 (cid:88) d ( x ) ≥ 1 2 n (cid:16)(cid:88) d ( x ) (cid:17) 2 − 1 2 (cid:88) d ( x ) = 2 e 2 n − e . For convenience we use slightly rough bounds . The expression on the right can be bounded below by e 2 / n ( unless e < n , in which case we are done anyway ) . The binomial coeﬃcient (cid:0) n 2 (cid:1) can be roughly bounded above by n 2 . Thus we have n 2 ≥ e 2 n , which gives e ≤ n 3 / 2 and proves the theorem . Note that we were a bit rough with the inequalities in the proof of Theorem 10 . 3 . 1 . In the Problem Set you will prove a tighter upper bound of the form | E ( G ) | ≤ 12 | V ( G ) | 3 / 2 + c | V ( G ) | for some constant c . We now prove a lower bound , which is also rough , but it shows that 3 / 2 is the right exponent . With some more eﬀort , it can be shown that the bound from the Problem Set is almost exactly the value of ex K 2 , 2 ( n ) . Corollary 10 . 3 . 2 . We have 1 16 n 3 / 2 − n ≤ ex K 2 , 2 ( n ) ≤ n 3 / 2 . Proof . The upper bound is Theorem 10 . 3 . 1 . To prove the lower bound , we construct a K 2 , 2 - free graph with at least 12 n 3 / 2 edges . Let p be a prime and consider the ﬁnite ﬁeld F p . Let G be the graph with vertex set F 2 p , where ( a , b ) ∈ F 2 p is adjacent to ( x , y ) ∈ F 2 p if ax + by = 1 . We could think of an edge between ( a , b ) and ( x , y ) as representing the fact that the point ( x , y ) lies on the line with equation ax + by = 1 ( although this is a bit confusing because we are thinking of a vertex both as a point and as a line ) . Note that the vertex ( 0 , 0 ) is an isolated vertex . This graph is K 2 , 2 - free . A quick way to see it is to think of two vertices ( a , b ) and ( a (cid:48) , b (cid:48) ) as two lines , and a common neighbor ( x , y ) as an intersection point of those lines . Then the fact that two lines have at most one intersection point ( which is true in any plane over any ﬁeld ) implies that ( a , b ) and ( a (cid:48) , b (cid:48) ) have at most one common neighbor , which means there is no K 2 , 2 . Alternatively , we can just argue that the two equations ax + by = 1 and a (cid:48) x + b (cid:48) y = 1 have at most one common solution . We claim that every vertex ( x , y ) (cid:54) = ( 0 , 0 ) has degree at least p − 1 . If both x and y are nonzero , then for every a there is a b such that ax + by = 1 , namely b = y − 1 ( 1 − ax ) . The p values of a give p solutions to ax + by = 1 , but we do not count ( a , b ) = ( x , y ) if it is a solution , so ( x , y ) has at least p − 1 neighbors . If one of x , y is zero , then one of a , b is determined and the other can take any value . This proves the claim . The graph G has n = p 2 vertices , and the number of edges satisﬁes | E ( G ) | = 1 2 (cid:88) v ∈ V ( G ) d ( v ) ≥ 1 2 ( p 2 − 1 ) ( p − 1 ) ≥ 1 2 p 3 − p 2 = 1 2 n 3 / 2 − n . 45 This proves the lower bound ( actually , a better one ) for any n that happens to be a square of a prime . By a result from number theory 2 , for any n there is a prime p between 12 √ n and √ n . Then we can take the graph with p 2 vertices , and add isolated vertices until we have exactly n vertices . The resulting graph is still K 2 , 2 - free and has at least 12 p 3 − p 2 ≥ 116 n 3 / 2 − n edges . 10 . 4 Trees We have seen that ex H ( n ) can be quadratic in n , and that it can behave as n 3 / 2 , so subquadratic but superlinear . We now consider trees , and we will see that ex H ( n ) can also be linear . It is actually true that ex H ( n ) is linear in n if and only if H is a tree ( or a forest ) , but this is more diﬃcult . Another fact is that for any rational number r between 1 and 2 , there is a graph H such that ex H ( n ) grows like n r . Theorem 10 . 4 . 1 . Let T be any tree . If G does not contain T , then | E ( G ) | < ( | E ( T ) | − 1 ) | V ( G ) | . We prove the theorem via two convenient lemmas . Lemma 10 . 4 . 2 . If T is a tree , and G is a graph with δ ( G ) ≥ | E ( T ) | , then G contains T . Proof . We use induction on | E ( T ) | . The statement is obvious when | E ( T ) | = 1 . Let x ∈ V ( T ) be a leaf of T , and let y ∈ V ( T ) be its neighbor in T . By induction , G contains a copy of T − x . There may be more than one possible embedding of T − x in G , but we ﬁx one particular embedding . We write y for the vertex of G that corresponds to the vertex y of T in this embedding . Since d G ( y ) ≥ δ ( G ) ≥ | E ( T ) | ≥ | V ( T ) | − 1 , and since T − x has at most | V ( T ) | − 2 vertices other than y , there is a neighbor of y in G that is not in the embedding of T − x . Hence , we can label this neighbor x to get an embedding of T in G . The next lemma states that any graph has a subgraph with reasonably large minimum degree . Note that the minimum degree of the subgraph is more than half the average degree of G , since that average is ( (cid:80) d ( x ) ) / | V ( G ) | = 2 | E ( G ) | / | V ( G ) | . Lemma 10 . 4 . 3 . Any graph G with at least one edge has a subgraph H with δ ( H ) > | E ( G ) | | V ( G ) | . Proof . We use induction on | V ( G ) | . When | V ( G ) | = 2 , the statement is true , because the single edge K 2 has δ ( K 2 ) > 1 / 2 . If δ ( G ) > | E ( G ) | / | V ( G ) | , then we can take H = G , so we can assume there is x ∈ V ( G ) with d ( x ) ≤ | E ( G ) | / | V ( G ) | . Consider G − x . By induction , it has a subgraph H with δ ( H ) > | E ( G − x ) | | V ( G − x ) | ≥ | E ( G ) | − | E ( G ) | | V ( G ) | | V ( G ) | − 1 = | E ( G ) | | V ( G ) | · 1 − 1 | V ( G ) | 1 − 1 | V ( G ) | = | E ( G ) | | V ( G ) | . This proves the lemma . 2 Known as Bertrand’s Postulate ; see for instance “Proofs from the Book” by Aigner and Ziegler . 46 Proof of Theorem 10 . 4 . 1 . Let G be a graph with | E ( G ) | ≥ ( | E ( T ) | − 1 ) | V ( G ) | . By Lemma 10 . 4 . 3 , G contains a subgraph H with δ ( H ) > | E ( G ) | | V ( G ) | ≥ ( | E ( T ) | − 1 ) | V ( G ) | | V ( G ) | = | E ( T ) | − 1 . Since δ ( H ) is an integer , we actually have δ ( H ) ≥ | E ( T ) | . By Lemma 10 . 4 . 2 , H contains T , so also G contains T . 47 Chapter 11 Extremal graph theory II In this lecture , we generalize the two main theorems from the last lecture , from triangles K 3 to complete graphs K t , and from squares K 2 , 2 to complete bipartite graphs K t , t . 11 . 1 Complete graphs We ﬁrst prove an upper bound on ex K t ( n ) , which can be done with a relatively simple induction proof ( assuming that we know the bound in advance ) . Theorem 11 . 1 . 1 ( Tur´an ) . Let t ≥ 2 . If G is a K t - free graph , then | E ( G ) | ≤ 1 2 (cid:18) 1 − 1 t − 1 (cid:19) | V ( G ) | 2 . Proof . Set n = | V ( G ) | . We use induction on n ; for n < t , we can check (cid:0) n 2 (cid:1) ≤ 12 ( 1 − 1 t − 1 ) n 2 . Assume n ≥ t and let G be maximally K t - free , i . e . , adding any edges to G creates a K t . Then G must contain a K t − 1 . Let A ⊂ V ( G ) be the vertex set of a K t − 1 in G , and let B = V ( G ) \ A be its complement . The number of edges in A is (cid:0) t − 12 (cid:1) . Any vertex of B is adjacent to at most t − 2 vertices of A , since otherwise we would get a K t . Thus the total number of edges between A and B is at most ( t − 2 ) ( n − t + 1 ) . The subgraph of G on B contains no K t , so by induction G has at most 12 ( 1 − 1 t − 1 ) ( n − t + 1 ) 2 edges on B . Altogether we have | E ( G ) | ≤ (cid:18) t − 1 2 (cid:19) + ( t − 2 ) ( n − t + 1 ) + 1 2 (cid:18) 1 − 1 t − 1 (cid:19) ( n − t + 1 ) 2 = ( t − 2 ) (cid:18) 1 2 ( t − 1 ) + n − ( t − 1 ) + n 2 − 2 ( t − 1 ) n + ( t − 1 ) 2 2 ( t − 1 ) (cid:19) = ( t − 2 ) (cid:18) − 1 2 ( t − 1 ) + n + n 2 2 ( t − 1 ) − n + 1 2 ( t − 1 ) (cid:19) = 1 2 t − 2 t − 1 n 2 . This proves the theorem . This proof was fairly easy , because knowing the bound in advance made the induction easy . We now give a proof that does not require knowing the bound in advance , and moreover , with a little more eﬀort it tells us what the extremal graphs are . Recall that an extremal graph for H is a graph with the maximum number ex H ( n ) of edges among all H - free graphs on n vertices . 48 Deﬁnition . The complete k - partite graph K s 1 , . . . , s k is the graph whose vertex set consists of independent sets V 1 , . . . , V k of sizes s 1 , . . . , s k , such that for all i (cid:54) = j every vertex of V i is adjacent to every vertex of V j . The crucial observation is that a ( t − 1 ) - partite graph is K t - free . Indeed , if a graph H on t vertices is contained in a ( t − 1 ) - partite graph , then there is some part V i that has at least two of H , so these vertices are not adjacent and H is not complete . We know prove that every extremal graph for K t is a ( t − 1 ) - partite graph ; afterwards we will determine which ( t − 1 ) - partite graph has the most edges ( for a ﬁxed number of vertices ) . Theorem 11 . 1 . 2 . Let t ≥ 2 . Every extremal graph for K t is a complete ( t − 1 ) - partite graph . Proof . Suppose G is a K t - free graph . Pick x ∈ V ( G ) with d ( x ) = ∆ ( G ) . Set S = N ( x ) and T = V ( G ) \ S ( so x ∈ T ) . Since there is no K t in G , there is no K t − 1 in S , because otherwise it would combine with x to give a K t . We create a new graph H with V ( H ) = V ( G ) as follows . On S , H has the same edges as G ; on T , H has no edges at all ; and between S and T , H has all possible edges . Then H is also K t - free , because G did not have any K t − 1 on S , so any K t in H would have to have two vertices in T , which is not possible . Next , observe that for y ∈ S we have d H ( y ) ≥ d G ( y ) , since edges in S are unchanged , and edges to T are only added . For z ∈ T we also have d H ( z ) = | S | = ∆ ( G ) ≥ d G ( z ) . Thus we have | E ( H ) | = 1 2 (cid:88) d H ( x ) ≥ 1 2 (cid:88) d G ( x ) = | E ( G ) | . ( 11 . 1 ) We have shown that for any K t - free graph , there is another K t - free graph H with at least as many edges , which contains an independent set T that is completely connected to its complement . Moreover , if | E ( H ) | = | E ( G ) | , then there were no changes at all . Indeed , if an edge between S and T was added , then the degree of its endpoint in S must increase , so ( 11 . 1 ) gives | E ( H ) | > | E ( G ) | . If an edge in T was removed , then its endpoints could not have been connected to all of S in G , because otherwise their degrees would be greater than ∆ ( G ) . Thus some edge must have been added between S and T , and as we just observed , this implies that | E ( H ) | > | E ( G ) | . Let G be an extremal graph for K t . Then the above gives a K t - free graph H 1 , which cannot have more edges than G , so | E ( G ) | = | E ( H ) | , which implies H = G . This tells us that there is a nonempty independent set T 1 ⊂ V ( G ) that is completely connected to S 1 = V ( G ) \ T . Moreover , G does not have any K t − 1 on S 1 ; we write G 1 for the subgraph of G with vertices in S 1 . We modify G 1 to a K t − 1 - free graph H 2 ; we cannot have | E ( H 2 ) | > | E ( G 1 ) | , because then we would get a K t - free graph on V ( G ) with more edges than G . Thus H 2 = G 1 , and there is a nonempty independent set T 2 ⊂ V ( G 1 ) that is completely connected to S 2 = V ( G 1 ) \ T 2 . In fact , it is completely connected to V ( G ) \ T 2 . We repeat this to get a sequence T 1 , T 2 , . . . , T t − 2 ⊂ V ( G ) of disjoint nonempty independent sets , such that T i is completely connected to V ( G ) \ T i , and V ( G ) \ ( T 1 ∪· · ·∪ T i ) is K t − i - free . In particular , V ( G ) \ ( T 1 ∪ · · · ∪ T t − 2 ) is K 2 - free , so an independent set , which we label T t − 1 . We have now partitioned V ( G ) into t − 1 independent sets , each of which is completely connected to its complement . This means that G is a complete ( t − 1 ) - partite graph . To exactly determine the extremal graphs for K t , we have to ﬁgure out which ( t − 1 ) - partite graphs have the most edges . This is a fairly straightforward calculation . 49 Lemma 11 . 1 . 3 . Among all complete k - partite graphs on n vertices , the maximum number of edges is at most 12 ( 1 − 1 k ) n 2 ( but may be smaller ) , and up to isomorphism there is a unique graph with the maximum number of edges ( called a Tur´an graph , and denoted by T n , k ) . Proof . Suppose that G = K s 1 , . . . , s k is a complete k - partite graph on n vertices , and suppose there are i , j such that s i − s j ≥ 2 . Modify G by moving one vertex from the class with s i vertices to the class with s j vertices . Thus we remove s j edges , and we add s i − 1 , so , since ( s i − 1 ) − s j ≥ 1 , we increase the number of edges . We can keep repeating this until we have a complete k - partite graph with | s i − s j | ≤ 1 for all i , j , which has more edges than G . We claim that there is only one graph with that property ( up to isomorphism ) . Set a = (cid:98) n / k (cid:99) and b = n − ak . Consider the graphs K s 1 , . . . , s k with b of the s i equal to (cid:100) n / k (cid:101) , and k − b of the s i equal to (cid:98) n / k (cid:99) . Such a graph has exactly n vertices , it has | s i − s j | ≤ 1 for all i , j , and any two such graphs are isomorphic ( simply by permuting the s i ) . It follows that this is the unique complete k - partite graph on n vertices with the maximum number of edges . We deﬁne T n , k to be this graph ; it is often called a Tur´an graph . In T n , k , the vertices in the classes of size a = (cid:98) n / k (cid:99) have degree n − a , and the vertices in the classes of size a + 1 = (cid:100) n / k (cid:101) have degree n − a − 1 . Thus we have 2 | E ( T n , k ) | = n · ( n − a ) − b · ( a + 1 ) = n 2 − n · n − b k − b · n − b k − b = (cid:18) 1 − 1 k (cid:19) n 2 + b ( b − k ) k , which gives | E ( T n , k ) | ≤ 12 ( 1 − 1 k ) n 2 , since b < k . When k divides n , then in the proof above we have b = 0 , so | E ( T n , k ) | = 12 ( 1 − 1 k ) n 2 . On the other hand , when k does not divide n , we have | E ( T n , k ) | < 12 ( 1 − 1 k ) n 2 . Therefore , the bound of Theorem 11 . 1 . 2 is tight for inﬁnitely many values of n and k , but there are also inﬁnitely values for which there is a bound . Corollary 11 . 1 . 4 . The unique extremal graph for K t is T n , k , and we have ex K t ( n ) = | E ( T n , k ) | ≤ 1 2 (cid:18) 1 − 1 k (cid:19) n 2 . Proof . By Theorem 11 . 1 . 2 , every extremal graph is a complete k - partite graph . By Lemma 11 . 1 . 3 , the largest such graph is T n , k . To end this section , let us mention one important theorem that puts Tur´an’s Theorem into a larger perspective . It gives an asymptotic bound for the extremal number of any graph , dependent on the chromatic number of the graph . Theorem 11 . 1 . 5 ( Erd˝os - Stone ) . Let H be any graph . Then ex H ( n ) = 1 2 (cid:18) 1 − 1 χ ( H ) − 1 (cid:19) n 2 + f ( n ) , for some function f ( n ) such that f ( n ) n 2 → 0 as n → ∞ . 50 For suﬃciently large n , the “error function” f ( n ) will be negligibly small compared to n 2 , and thus the ﬁrst term gives a good approximation . For K t we have χ ( K t ) = t , so this matches the bound of Theorem 11 . 1 . 1 ( except for the f ( n ) ) . For a bipartite graph H , the theorem only tells us that ex H ( n ) n 2 → 0 as n → ∞ , i . e . , that bipartite graphs have subquadratic extremal functions . We will see a self - contained proof of this fact in the next section . 11 . 2 Complete bipartite graphs In our proof of the upper bound for the extremal function of K 2 , 2 , we needed the Cauchy - Schwarz inequality . For the generalization to K t , t , we need the following stronger inequal - ity . Recall that a function f : R → R is convex if f ( ax + by ) ≤ af ( x ) + bf ( y ) for all a , b ≥ 0 with a + b = 1 . Lemma 11 . 2 . 1 ( Jensen ) . If f : R → R is convex , then for all a 1 , . . . , a n ≥ 0 with a 1 + · · · + a n = 1 we have f (cid:16)(cid:88) a i x i (cid:17) ≤ (cid:88) a i f ( x i ) . The corollary of the Cauchy - Schwarz inequality that we used in the previous lecture follows if we set f ( x ) = x 2 and a i = 1 / n for all i . In the next proof we will use the following corollary for binomial coeﬃcients . Corollary 11 . 2 . 2 . For integers t , x 1 , . . . , x n ≥ 0 we have (cid:88) (cid:18) x i t (cid:19) ≥ n · (cid:18) 1 n (cid:80) x i t (cid:19) . Proof . We deﬁne a function f t by f t ( x ) = 1 t ! x ( x − 1 ) · · · ( x − t + 1 ) for x ≥ t − 1 , and f t ( x ) = 0 for x ≤ t − 1 . When x and t are integers , we have f t ( x ) = (cid:0) xt (cid:1) . We prove that f t ( x ) is convex ; by Lemma 11 . 2 . 1 and the fact that f t ( x ) = (cid:0) xt (cid:1) for integers , this implies that stated inequality . The polynomial x ( x − 1 ) · · · ( x − t + 1 ) has t roots 0 , 1 , . . . , t − 1 . Its derivative has at most t − 2 roots , and these must be in between the t − 1 roots . The second derivative has t − 3 roots , which must be in between the t − 2 roots of the ﬁrst derivative . This implies that for x ≥ t − 1 , the second derivative does not change sign . The last root of the ﬁrst derivative is a minimum of the polynomial , so the second derivative must be positive for x ≥ t − 1 . This implies that f t ( x ) is convex for t ≥ x − 1 . For t ≤ x − 1 the convexity is clear . With this tool in hand we can prove the main theorem of this section . Theorem 11 . 2 . 3 ( K˝ov´ari - S´os - Tur´an ) . If G is a K t , t - free graph , then | E ( G ) | ≤ t · | V ( G ) | 2 − 1 t . Proof . Set n = | V ( G ) | and e = | E ( G ) | . We double count the number of stars K 1 , t . On the one hand , every t edges incident to a vertex give a K 1 , t , so the number of stars K 1 , t equals (cid:88) x ∈ V ( G ) (cid:18) d ( x ) t (cid:19) . 51 On the other hand , any t vertices have at most t − 1 common neighbors , since t common neighbors would give a K t , t . Thus the number of stars K 1 , t is at most ( t − 1 ) (cid:18) n t (cid:19) . The rest of the proof is calculation . Corollary 11 . 2 . 2 gives (cid:88) x ∈ V ( G ) (cid:18) d ( x ) t (cid:19) ≥ n · (cid:18) ( (cid:80) d ( x ) ) / n t (cid:19) = n · (cid:18) 2 e / n t (cid:19) . Using the rough bounds ( a − b ) b b ! ≤ (cid:0) ab (cid:1) ≤ a b b ! for the binomial coeﬃcients we get n · (cid:0) 2 en − t (cid:1) t t ! ≤ n · (cid:18) 2 e / n t (cid:19) ≤ ( t − 1 ) (cid:18) n t (cid:19) ≤ tn t t ! . This gives (cid:18) 2 e n − t (cid:19) t ≤ tn t − 1 , which ﬁnally leads to e ≤ 1 2 t 1 / t n 2 − 1 t + 1 2 tn ≤ tn 2 − 1 t . Note that although we can bound the ﬁrst term more nicely using t 1 / t ≤ 2 , the second term could dominate when t is very large , so we do need a coeﬃcient like t to get a bound that holds for all t and n . When t is ﬁxed and small , the bound n 2 − 1 t without a coeﬃcient would work . In the Problem Set , you will see a slightly more precise version of the bound , which also makes clear the dependence on s , t for an unbalanced bipartite graph K s , t . We can deduce the following statement , which we mentioned in the previous section as consequence of the Erd˝os - Stone Theorem . Corollary 11 . 2 . 4 . If H is bipartite , then ex H ( n ) n 2 → 0 as n → ∞ . Proof . Set t = | V ( H ) | . Then we have H ⊂ K t , t , so if G is H - free , then it also K t , t - free . By Theorem 11 . 2 . 3 , we have | E ( G ) | ≤ t · | V ( G ) | 2 − 1 t . Thus ex H ( n ) ≤ t · n 2 − 1 t , and ex H ( n ) n 2 ≤ tn 1 / t → 0 as n → ∞ . We now prove a lower bound for ex K t , t ( n ) , which unfortunately does not quite match the upper bound of Theorem 11 . 2 . 3 . Determining the exact value ( or even the right exponent ) is a big open problem in combinatorics . Theorem 11 . 2 . 5 . For all t ≥ 2 there is a constant c t such that there is K t , t - free graph G with | E ( G ) | ≥ c t | V ( G ) | 2 − 2 t . Proof . We will show by counting that for some choice of e , not all the graphs with e edges are K t , t - free . More precisely , we show that fraction of all graphs with n vertices and e edges that have a K t , t is less than 1 . 52 The number of graphs with n vertices and e edges is (cid:18)(cid:0) n 2 (cid:1) e (cid:19) , and the number of those that contain a K t , t is less than (cid:18) n t (cid:19) · (cid:18) n − t t (cid:19) · (cid:18)(cid:0) n 2 (cid:1) − t 2 e − t 2 (cid:19) . The ﬁrst factor corresponds to choosing one side of K t , t , the second factor corresponds to choosing the other side , and the third factor corresponds to choosing the remaining edges . We are overcounting by a factor 2 , but this does not hurt . The fraction of graphs with n vertices and e edges that contains a K t , t is (cid:0) nt (cid:1) · (cid:0) n − t t (cid:1) · (cid:0) ( n 2 ) − t 2 e − t 2 (cid:1) (cid:0) ( n 2 ) e (cid:1) = n ! · ( n − t ) ! · ( (cid:0) n 2 (cid:1) − t 2 ) ! · e ! · ( (cid:0) n 2 (cid:1) − e ) ! t ! · ( n − t ) ! · t ! · ( n − 2 t ) ! · ( e − t 2 ) ! · ( (cid:0) n 2 (cid:1) − e ) ! · (cid:0) n 2 (cid:1) ! = c (cid:48) t · n ! · ( (cid:0) n 2 (cid:1) − t 2 ) ! · e ! ( n − 2 t ) ! · ( e − t 2 ) ! · (cid:0) n 2 (cid:1) ! = c (cid:48) t · n · ( n − 1 ) · · · ( n − 2 t + 1 ) · e · ( e − 1 ) · · · ( e − t 2 + 1 ) (cid:0) n 2 (cid:1) · ( (cid:0) n 2 (cid:1) − 1 ) · · · ( (cid:0) n 2 (cid:1) − t 2 + 1 ) ≤ c (cid:48) t · n 2 t · (cid:32) e (cid:0) n 2 (cid:1) (cid:33) t 2 ≤ c (cid:48)(cid:48) t · n 2 t − 2 t 2 · e t 2 . In the step before the last , we used the inequality a − c b − c ≤ ab , which holds for a ≤ b and c ≥ 0 . The fraction above is less than 1 if e = c t · n 2 − 2 t for a constant c t that is suﬃciently small . If that fraction is less than 1 , it means that for this choice of e there exists a K t , t - free graph . One can reformulate the proof above as an example of the probabilistic method : If we randomly choose a graph from among all graphs with n vertices and e edges ( for the right choice of e ) , then the probability is less than 1 that this graph has a K t , t , and thus the probability that the graph is K t , t - free is greater than 0 . This tells us that a K t , t - free graph with e edges exists , although it does not tell us what that graph looks like . 53 Chapter 12 Ramsey theory Note that in this lecture , when we talk about coloring the edges of a complete graph , we do not mean an edge coloring in the sense of lecture 5 , i . e . , we do not require that edges must get distinct colors if they share a vertex . 12 . 1 Ramsey numbers Proposition 12 . 1 . 1 . If the edges of K 6 are colored red and blue , then there is a red K 3 or a blue K 3 . Proof . Pick a vertex x 0 . It has ﬁve incident edges , among which there must be three red edges or three blue edges . Without loss of generality , assume there are three red edges x 0 x 1 , x 0 x 2 , x 0 x 3 . If one of the edges x 1 x 2 , x 2 x 3 , x 1 x 3 is red , then it forms a red K 3 together with the two corresponding edges to x 0 . Otherwise , the edges x 1 x 2 , x 2 x 3 , x 1 x 3 are all blue , so they form a blue K 3 . Deﬁnition . Given a coloring of the edges of a graph G , we say that G contains a monochromatic H if G has a subgraph H , all of whose edges have the same color . Deﬁnition . We write R ( H 1 , . . . , H k ) for the minimum N such that for every k - coloring of the edges of K N with the colors c 1 , . . . , c k , there is a monochromatic H i with color c i . Note that the order of the colors is important . For instance , for R ( K 3 , K 4 ) , the edges of K N are colored red and blue , and we want to ﬁnd a red K 3 or a blue K 4 ; a blue K 3 would not be enough . Proposition 12 . 1 . 1 thus states that R ( K 3 , K 3 ) ≤ 6 . In fact , we have R ( K 3 , K 3 ) = 6 , because of the following coloring of K 5 . We take a C 5 in K 5 and color its edges red ; the remaining edges form another C 5 , which we color blue . There is no K 3 in either of the colors . Proposition 12 . 1 . 2 . We have R ( K 3 , K 4 ) = 9 . Proof . Let K 9 be 2 - colored with red and blue . Suppose there is a vertex x 0 that has four red edges x 0 x 1 , x 0 x 2 , x 0 x 3 , x 0 x 4 . If one of the edges between x 1 , x 2 , x 3 , x 4 is red , it forms a red K 3 with the corresponding edges to x 0 . Otherwise , all the edges between x 1 , x 2 , x 3 , x 4 54 are blue , which means they form a blue K 4 . Thus we can assume that every vertex has at most three red edges . It is not possible that every vertex has exactly three red edges , because then the subgraph given by the red edges would have an odd number of vertices of odd degree . Thus there is a vertex y 0 with at most two red edges , which implies it has six blue edges y 0 y 1 , . . . , y 0 y 6 . Consider the subgraph on y 1 , . . . , y 6 , which is a 2 - colored K 6 . By Proposition 12 . 1 . 1 , there is a red K 3 or a blue K 3 in this subgraph . If it is a red K 3 , we are done . If it is a blue K 3 , this K 3 together with the corresponding edges to y 0 forms a blue K 4 . The above proves R ( K 3 , K 4 ) ≤ 9 . To show that R ( K 3 , K 4 ) ≥ 9 , we give a coloring of K 8 without a red K 3 or blue K 4 . Start with a red cycle C 8 ; think of it as a regular polygon . Add four red edges between every pair of opposite vertices . The resulting red graph has no K 3 . Make all other edges blue . There is no blue K 4 , since any four non - adjacent vertices on the C 8 contain an opposite pair . Proposition 12 . 1 . 3 . We have R ( P 2 , ) = 5 . Proof . First observe that R ( P 2 , P 2 ) = 3 , since if we 2 - color K 3 , then there must be two edges of the same color , and they share a vertex . Let the edges of K 5 be colored red and blue , and assume there is no red P 2 . Then there are at most two red edges , so there is a vertex x with all incident edges blue . Consider N ( x ) ; it corresponds to a 2 - colored K 4 without a red P 2 . Since R ( P 2 , P 2 ) = 3 , there must be a blue P 2 with vertices in N ( x ) . Since all the edges from this P 2 to x are blue , we get a blue . For the lower bound , take a K 4 , color two disjoint edges red , and color the other edges blue . Proposition 12 . 1 . 4 . We have R ( K 3 , K 3 , K 3 ) ≤ 17 . Proof . Let K 17 be 3 - colored with red , blue , and green . A vertex x 0 has 16 edges , among which there must be six with the same color . Without loss of generality we can assume that x 0 x 1 , . . . , x 0 x 6 are red . If any of the edges between x 1 , . . . , x 6 is red , then together with the two corresponding edges to x 0 it forms a red K 3 . Thus we can assume that the edges between x 1 , . . . , x 6 are only colored blue or green . By Proposition 12 . 1 . 1 , there must be a blue K 3 or a green K 3 on these vertices . It is true that R ( K 3 , K 3 , K 3 ) = 17 , but the 3 - coloring of K 16 required to prove this is a bit diﬃcult to describe . 12 . 2 Bounds for R ( K t , K t ) The Ramsey numbers R ( K t , K t ) have probably been studied most of all . Nevertheless , there is still a mysteriously large gap between the best lower bound and upper bound . In this section we prove lower and upper bounds that are very close to the best known bounds . Speciﬁcally , we will prove that for t ≥ 2 we have 2 12 t ≤ R ( K t , K t ) ≤ 2 2 t / √ t . There have been small improvements to these bounds , but these have not changed the bases of the exponentials on both sides , i . e . , √ 2 from below and 4 from above . It remains 55 a mystery why there is such a big gap between the bounds , and it is big open problem in combinatorics to narrow this gap . We prove the upper bound and lower bound separately . Theorem 12 . 2 . 1 ( Erd˝os - Szekeres ) . For all t ≥ 2 we have R ( K t , K t ) ≤ 2 2 t / √ t . Proof . Interestingly , for the proof of this bound for the balanced Ramsey numbers , we will work via the unbalanced Ramsey numbers . We claim that for all s , t ≥ 2 we have R ( K s , K t ) ≤ R ( K s − 1 , K t ) + R ( K s , K t − 1 ) . ( 12 . 1 ) Let N = R ( K s − 1 , K t ) + R ( K s , K t − 1 ) and consider a coloring of the edges of K N with red and blue . Pick a vertex x . It has either at least R ( K s − 1 , K t ) red edges or at least R ( K s , K t − 1 ) blue edges . The cases are symmetric , so we can assume without loss of generality that x has R ( K s − 1 , K t ) red edges . Consider the 2 - colored complete graph on the corresponding R ( K s − 1 , K t ) neighbors of x . By deﬁnition of R ( K s − 1 , K t ) , this graph has either a red K s − 1 or a blue K t . In the ﬁrst case we get a red K s , and in the second case we get a blue K t . This proves the claim . It follows from ( 12 . 1 ) that for all s , t ≥ 2 R ( K s , K t ) ≤ (cid:18) s + t − 2 s − 1 (cid:19) . ( 12 . 2 ) To prove this we use induction on s + t . The bound is easily checked for s = 2 or t = 2 . Using ( 12 . 1 ) , induction , and the equality (cid:0) mn − 1 (cid:1) + (cid:0) mn (cid:1) = (cid:0) m + 1 n (cid:1) , we get R ( K s , K t ) ≤ R ( K s − 1 , K t ) + R ( K s , K t − 1 ) ≤ (cid:18) ( s − 1 ) + t − 2 ( s − 1 ) − 1 (cid:19) + (cid:18) s + ( t − 1 ) − 2 s − 1 (cid:19) = (cid:18) s + t − 2 s − 1 (cid:19) . For s = t , ( 12 . 2 ) gives R ( K t , K t ) ≤ (cid:0) 2 t − 2 t − 1 (cid:1) , and we merely need to approximate this bound . A version of Stirling’s formula gives 2 √ nn n e − n ≤ n ! ≤ 3 √ nn n e − n , which leads to (cid:18) 2 n n (cid:19) = ( 2 n ) ! ( n ! ) 2 ≤ 3 √ 2 n ( 2 n ) 2 n e − 2 n ( 2 √ nn n e − n ) 2 = 3 2 √ 2 · 2 2 n √ n . Therefore R ( K t , K t ) ≤ (cid:18) 2 t − 2 t − 1 (cid:19) ≤ 3 2 √ 2 · 2 2 ( t − 1 ) √ t − 1 ≤ 2 2 t √ t . This proves the lemma . The recursion equation ( 12 . 1 ) can be useful in its own right . For instance , together with Proposition 12 . 1 . 2 it gives R ( K 4 , K 4 ) ≤ R ( K 3 , K 4 ) + R ( K 4 , K 3 ) = 9 + 9 = 18 , and this is the correct value ( we omit the required coloring of K 17 because it is a bit complicated ) . So far , so good . Shockingly , R ( K 5 , K 5 ) is still unknown ; the best we know it is that is between 43 and 49 . We proceed to the lower bound . Its proof is one of the ﬁrst examples of the probabilistic method in combinatorics , although here we phrase it simply in terms of counting . 56 Theorem 12 . 2 . 2 ( Erd˝os ) . For all t ≥ 3 we have R ( K t , K t ) ≥ 2 12 t . Proof . Let N be a large number that we choose at the end of the proof . The num - ber of colorings of K N is 2 ( N 2 ) . The number of colorings in which one particular K t is monochromatic is 2 · 2 ( N 2 ) − ( t 2 ) . Thus an upper bound for the total number of colorings with monochromatic K t is (cid:18) N t (cid:19) · 2 · 2 ( N 2 ) − ( t 2 ) . This is an overestimate , since a coloring with more than one monochromatic K t is counted more than once . We wish to choose N so that (cid:18) N t (cid:19) · 2 · 2 ( N 2 ) − ( t 2 ) < 2 ( N 2 ) , which is equivalent to (cid:18) N t (cid:19) < 2 ( t 2 ) − 1 . We have (cid:0) Nt (cid:1) ≤ N t / t ! ≤ N t / 2 12 t + 1 ( using t ! > 2 12 t + 1 , which holds for t > 3 , while for t = 3 we know the bound holds ) , so it suﬃces to ensure N t < 2 12 t + 1 · 2 ( t 2 ) − 1 = 2 12 t 2 , or N < 2 12 t . This implies that R ( K t , K t ) ≥ 2 12 t . 12 . 3 A general Ramsey theorem Theorem 12 . 3 . 1 ( Ramsey ) . For any graphs H 1 , . . . , H k there exists an N such that for any k - coloring of K N with colors c 1 , . . . , c k , there is a monochromatic H i with color c i . In other words , R ( H 1 , . . . , H k ) exists . Proof . It suﬃces to prove that every R ( K t , . . . , K t ) exists . Indeed , given H 1 , . . . , H k , we can set t = max | V ( H i ) | , and take N such that every k - coloring of K N contains a K t of color c i , which then contains an H i of color c i . Set N = k kt and let K N be k - colored . Pick a vertex x 0 . It has at least (cid:100) ( N − 1 ) / k (cid:101) = (cid:100) k kt − 1 − 1 / k (cid:101) = k kt − 1 edges of the same color . Let a 0 be that color , and let X 1 be the set of vertices connected to x 0 by edges of color a 0 . Pick x 1 ∈ X 1 . It has at least (cid:100) ( k kt − 1 − 1 ) / k (cid:101) = k kt − 2 edges of the same color to vertices in X 1 . Let a 1 be that color , and let X 2 ⊂ X 1 be the corresponding set of neighbors . By iterating this , we repeatedly get a set X i with | X i | ≥ k kt − i , and a vertex x i ∈ X i that is connected to all of X i + 1 by edges of color a i . We can continue as long as k kt − i > 1 . We get a sequence of colors a 0 , a 1 , . . . , a kt − 1 ( with repetitions ) , and a sequence of vertices x 0 , x 1 , . . . , x kt , such that x i is connected to all later vertices x j by an edge of color a i . 57 Since kt > k ( t − 1 ) , some color b must repeat t times in the sequence a 0 , a 1 , . . . , a kt − 1 , say b = a i 1 = a i 2 = · · · = a i t . Then the vertices x i 1 , x i 2 , . . . , x i t form a monochromatic K t . We ﬁnish with a cute application to number theory . Corollary 12 . 3 . 2 ( Schur ) . For every k there exists an N such that if { 1 , . . . , N } is k - colored , then there is a monochromatic solution of x + y = z . Proof . By Theorem 12 . 3 . 1 , we can choose N large enough so that every k - coloring of the edges of K N contains a monochromatic K 3 . Consider a complete graph K N on vertex set { 1 , . . . , N } , and color the edge ij with the color of the integer | i − j | . There must be a monochromatic K 3 in this graph , which means there are three integers i < j < k such that j − i , k − j , k − i have the same color . But k − i = ( k − j ) + ( j − i ) , so ( x , y , z ) = ( j − i , k − j , k − i ) is a monochromatic solution of x + y = z . For instance , for k = 2 we can take N = 5 . Indeed , suppose { 1 , 2 , 3 , 4 , 5 } is 2 - colored . We can assume that 1 is colored red . If 2 is also red , then 1 + 1 = 2 is a monochromatic solution , so we can assume that 2 is blue . Since 2 + 2 = 4 , we can assume that 4 is red . Then since 1 + 4 = 5 , we can assume that 5 is blue . Now if 3 is red , then 1 + 3 = 4 is monochromatic , while if 3 is blue , then 2 + 3 = 5 is monochromatic . 58