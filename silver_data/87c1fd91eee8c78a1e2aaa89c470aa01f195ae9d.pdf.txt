J HeuristicsDOI10 . 1007 / s10732 - 007 - 9026 - 2 Approximating the maximum vertex / edge weighted clique using local search Wayne Pullan Received : 28 January 2006 / Revised : 29 September 2006 / Accepted : 23 October 2006 © Springer Science + Business Media , LLC 2007 Abstract This paper extends the recently introduced Phased Local Search ( PLS ) al - gorithm to more difﬁcult maximum clique problems and also adapts the algorithm to handle maximum vertex / edge weighted clique instances . PLS is a stochastic re - active dynamic local search algorithm that interleaves sub - algorithms which alter - nate between sequences of iterative improvement , during which suitable vertices are added to the current sub - graph , and plateau search , where vertices of the current sub - graph are swapped with vertices not contained in the current sub - graph . These sub - algorithms differ in ﬁrstly their vertex selection techniques in that selection can be solely based on randomly selecting a vertex , randomly selecting within highest ver - tex degree , or random selecting within vertex penalties that are dynamically adjusted during the search . Secondly , the perturbation mechanism used to overcome search stagnation differs between the sub - algorithms . PLS has no problem instance depen - dent parameters and achieves state - of - the - art performance for maximum clique and maximum vertex / edge weighted clique problems over a large range of the commonly used DIMACS benchmark instances . Keywords Maximum weighted clique · Local search 1 Introduction The maximum clique ( MC ) problem calls for ﬁnding the maximum sized sub - graph of pairwise adjacent vertices in a given graph . MC is a prominent combinatorial op - timisation problem with many applications . For example , information retrieval , ex - perimental design , signal transmission and computer vision ( Balus and Yu 1986 ) . W . Pullan ( (cid:2) ) School of Information and Communication Technology , Grifﬁth University , Gold Coast , QLD , Australia e - mail : w . pullan @ grifﬁth . edu . au W . Pullan More recently , applications in bioinformatics have become important ( Pevzner and Sze 2000 ; Ji et al . 2004 ) . The search variant of MC can be stated as follows : Given an undirected graph G = ( V , E ) , where V is the set of all vertices and E the set of all edges , ﬁnd a maximum size clique in G , where a clique in G is a subset of ver - tices , C ⊆ V , such that all pairs of vertices in C are connected by an edge , i . e . , for all v , v (cid:3) ∈ C , { v , v (cid:3) } ∈ E , and the size of a clique C is the number of vertices in C with the cardinality of the maximum clique of G denoted by ω ( G ) . MC is NP - hard and the associated decision problem is NP - complete ( Garey and Johnson 1979 ) ; furthermore , it is inapproximable in the sense that no deterministic polynomial - time algorithm can ﬁnd cliques of size | V | 1 − (cid:3) for any (cid:3) > 0 , unless NP = ZPP ( Hås - tad 1999 ) . 1 The best polynomial - time approximation algorithm for MC achieves an approximation ratio of O ( | V | / ( log | V | ) 2 ) ( Boppana and Halldórsson 1992 ) . There - fore , large and hard instances of MC are typically solved using heuristic approaches , in particular , greedy construction algorithms and stochastic local search algorithms such as simulated annealing , genetic algorithms and tabu search . ( For an overview of these and other methods for solving MC , see Bomze et al . ( 1999 ) . ) Two important generalisations of the MC problem are : the maximum vertex weighted clique ( VWMC ) problem , where there is a positive weight w i associated with each vertex and the weight of a clique C is deﬁned as W v ( C ) = (cid:2) i ∈ C w i . The maximum vertex weighted clique of G is the clique C of G which maximises W v ( C ) . In this study the cardinality of the ( putative ) maximum vertex weighted clique of G is denoted by ω v ( G ) and the total weight of the ( putative ) maximum vertex weighted clique of G denoted by W (cid:3) v ( G ) . The second generalisation of MC is the maximum edge weighted clique ( MEWC ) problem where a positive weight w ij is associated with each edge of G and the weight of a clique C is deﬁned as W e ( C ) = (cid:2) i , j ∈ C w ij . The maximum edge weighted clique of G is the clique C of G which maximises W e ( C ) . The cardinality of the ( putative ) maximum edge weighted clique of G is de - noted by ω e ( G ) and the total weight of the ( putative ) maximum edge weighted clique of G denoted by W (cid:3) e ( G ) . These weighted versions of the MC problem have applica - tions in ﬁelds such as computer vision , pattern recognition and robotics ( Ballard and Brown 1982 ) . From the recent literature on MC algorithms , it seems that , somewhat unsurpris - ingly , there is no single best algorithm . Although most algorithms have been em - pirically evaluated on benchmark instances from the Second DIMACS Challenge ( Johnson and Trick 1996 ) , it is quite difﬁcult to compare experimental results be - tween studies , mostly because of differences in the respective experimental protocols and run - time environments . Nevertheless , particularly considering the comparative results reported in ( Pullan and Hoos 2006 ) , it seems that there are at least ﬁve heuris - tic MC algorithms that achieve , to some degree , state - of - the - art performance . The most recent of these is Dynamic Local Search - Maximum Clique ( DLS - MC ) ( Pul - lan and Hoos 2006 ) , a stochastic local search algorithm which alternates between phases of iterative improvement , during which suitable vertices are added to the current clique , and plateau search , during which vertices of the current clique are swapped with vertices not contained in the current clique . The selection of vertices 1 ZPP is the class of problems that can be solved in expected polynomial time by a probabilistic algorithm with zero error probability . Approximating the maximum vertex / edge weighted clique is solely based on vertex penalties that are dynamically adjusted during the search , and a perturbation mechanism is used to overcome search stagnation . The behaviour of DLS - MC is controlled by a single parameter , penalty delay , which controls the frequency at which vertex penalties are reduced . DLS - MC achieves substantial per - formance improvements over state - of - the - art algorithms for the MC clique problem over a large range of the commonly used DIMACS benchmark instances . Recently DLS - MC evolved into Phased Local Search ( PLS ) ( Pullan 2006 ) , which unlike DLS - MC , has no run - time parameters that need to be “tuned” for particular instances , or families of instances , and has comparable performance to DLS - MC . This paper reports the results of applying PLS to more difﬁcult benchmark MC problems than those addressed in ( Pullan 2006 ) and also extends PLS to cater for the MVWC and MEWC problems identiﬁed above . The recent literature on heuristic maximum weighted clique algorithms ( Babel 1994 ; Macambira and de Souza 2000 ; Bomze et al . 2000 , 2002 and Macambira 2003 ) typically address randomly generated graphs with randomly generated weights which makes it difﬁcult , without access to an identical random number generator , to exactly replicate their test benchmarks so that comparative results can be obtained . As a consequence , it is difﬁcult to objec - tively compare results . Given that there is no widely accepted maximum weighted clique test benchmark , a major goal of this paper is to establish MVWC and MEWC benchmark results that will allow future investigators a means of effectively compar - ing their results with those obtained in this study . The remainder of this article is structured as follows . The extended PLS algorithm is ﬁrst described . Next , empirical performance results are presented that further es - tablish PLS as state - of - the - art in heuristic MC solving . The performance of PLS on maximum weighted clique benchmarks is then presented followed by a comparative analysis with other maximum weighted clique solvers . Finally , a summary of the main contributions of this work , insights gained from this study and an outline for some directions for future research is presented . 2 The PLS algorithm PLS ( Pullan 2006 ) interleaves three sub - algorithms which use random selection ( Random sub - algorithm ) , random selection within vertex degree ( Degree sub - algorithm ) , and random selection within vertex penalties ( Penalty sub - algorithm ) , and is now described using the following notation : G ( V , E ) —an undirected graph with V = { 1 , 2 , . . . , n } , E ⊆ { { i , j } : i , j ∈ V } ; N ( i ) = { j ∈ V : { i , j } ∈ E } —the ver - tices adjacent to i ; K —current clique of G ; W ( K ) —the total vertex / edge weight of the current clique ; P —edge probability for randomly generated graphs ; and C p ( K ) = { i ∈ V : | K \ N ( i ) | = p } , p = 0 , 1—the set of all vertices not adjacent to exactly p vertices in K . The PLS algorithm is as follows . W . Pullan The PLS algorithm operates as follows : after selecting an initial vertex from the given graph G uniformly at random and setting the current clique K to the set consist - ing of this single vertex , all vertex penalties are initialised to zero . Then , the search , starting at the do ( lines 5 – 23 of the algorithm , a single complete execution of lines 5 – 23 is referred to as an “iteration” ) alternates between an iterative improvement phase , during which vertices from C 0 ( K ) are added to the current clique K , and a plateau search phase , in which vertices from C 1 ( K ) are swapped with the vertex in K with which they do not share an edge . The search phase terminates when C 0 ( K ) = ∅ and either C 1 ( K ) = ∅ or all vertices that are in C 1 ( K ) have already been an element of K during the current iteration . As the ﬁnal step of the iteration , a perturbation of K is performed to generate a new starting point for the search . Iterations are repeated until either the maximum clique / maximum weighted clique is found or the num - ber of allowed selections ( additions to the current clique ) is exceeded . Initially , PLS performs 50 iterations of the Random sub - algorithm ( referred to as a sub - algorithm “stage” ) , followed by a stage of 50 iterations of the Penalty sub - algorithm and then a stage of 100 iterations of the Degree sub - algorithm . Within PLS , the different vertex selection methods for each sub - algorithm are implemented within the function Select while the different perturbations for each sub - algorithm and the switch to the next sub - algorithm at the completion of each Approximating the maximum vertex / edge weighted clique stage are implemented within function Perturb . Note that the differences between the sub - algorithms are wholly contained within the Select and Perturb functions . Fi - nally , penalty updates are performed ( UpdatePenalties ) during all sub - algorithms but penalties are only used for vertex selection when the Penalty sub - algorithm is ac - tive . Transitioning between sub - algorithms was implemented so that the Random and Degree sub - algorithms always resumed from the point at which their previous stage completed . However , the Penalty sub - algorithm continues from the point at which the preceding Random sub - algorithm stage terminated . The three sub - algorithms of PLS are now described in more detail : Random sub - algorithm For this sub - algorithm , within Select , vertices are chosen as follows to be added or swapped into K : for MC instances , uniform randomly from C 0 ( K ) and C 1 ( K ) ; for MVWC instances , uniform randomly from the subsets of C 0 ( K ) and C 1 ( K ) that contain only the highest weighted vertices ; and , for MEWC instances , uniform randomly from the subsets of C 0 ( K ) and C 1 ( K ) that contain only those vertices which would produce the largest increase in W e ( K ) if added to K . At the completion of the iteration , function Perturb is invoked to uniform randomly select a vertex v , add this to K and remove all vertices from K that are not con - nected to v . This perturbation mechanism , referred to as Reinitialisation , provides some continuity in the search and also maintains K as relatively large at all times . Degree sub - algorithm For this sub - algorithm , Select selects a vertex from the sub - set M of C 0 ( K ) ( or C 1 ( K ) ) with maximum degree as follows : for MC instances , uniform randomly from M ; for MVWC instances , uniform randomly from the subset of M that contains only the highest weighted vertices ; and , for MEWC instances , uniform randomly from the subset of M that contains only those vertices which would produce the largest increase in W e ( K ) . Note that the computation of vertex degree is performed as part of PLS initialisation , so that the computational effort for the selection of a vertex is basically the same as for a purely random selection and no time - consuming “local” evaluation of vertices ( such as computing / updating the residual vertex degree ) takes place . This vertex selection rule turns out to be particu - larly efﬁcient when dealing with random graphs such as the DIMACS Cn family of instances . The perturbation mechanism for this sub - algorithm is the Reinitialisation method described above for the Random sub - algorithm . Penalty sub - algorithm The purpose of vertex penalties is to provide additional di - versiﬁcation to the search process , which otherwise could easily stagnate in situations where the current clique has few or no vertices in common with an optimal solution for a given MC instance . Perhaps the most obvious approach for avoiding this kind of search stagnation is to simply restart the constructive search process from a dif - ferent initial vertex . However , even if there is random ( or systematic ) variation in the choice of this initial vertex , there is still a risk that the heuristic guidance built into the greedy construction mechanism causes a bias towards a limited set of suboptimal cliques . Therefore , integer penalties are associated with the vertices that modulate the heuristic selection function used in the greedy construction procedure in such a way that vertices that repeatedly occur in the cliques obtained from the constructive search process are discouraged from being used in future constructions . W . Pullan For this sub - algorithm , within Select , vertices are chosen from the lowest penalty subset M of C 0 ( K ) and C 1 ( K ) to be added or swapped into K as follows : for MC instances , uniform randomly from M ; for MVWC instances , uniform randomly from the subset of M that contains only the highest weighted vertices ; and , for MEWC instances , uniform randomly from the subset of M that contains only those vertices which would produce the largest increase in W e ( K ) . At the completion of the itera - tion , function Perturb is invoked to uniform randomly select a vertex v and initialise K to contain only this vertex . Typically , this perturbation mechanism , referred to as Initialisation , provides relatively large discontinuities in the search trajectory . After initially setting pd = 2 , PLS reactively adjusts the pd parameter at each penalty decrease cycle , with the goal of ensuring that 75 % of vertices have a penalty value greater than zero . When the number of penalised vertices is less than this tar - get , pd is incremented by one ( which decreases the frequency of penalty decreases ) . Alternatively , if the number of penalised vertices is greater than 75 % of the total vertices , pd is decreased ( which increases the frequency of penalty decreases ) . 3 Empirical performance results In order to evaluate the performance and behaviour of PLS , extensive computational experiments were performed using the following benchmarks . BHOSLIB benchmark Benchmarks with Hidden Optimum Solutions for Graph Problems ( Maximum Clique , Maximum Independent Set , Minimum Vertex Cover and Vertex Coloring ) . 2 These are MC instances and extend the results reported in ( Pullan 2006 ) for PLS . DIMACS - VW and DIMACS - EW benchmarks These benchmarks were con - structed using the MC instances from the Second DIMACS Implementation Chal - lenge ( 1992 – 1993 ) , 3 which have been used extensively for benchmarking purposes in the recent literature on MC algorithms . The 80 DIMACS MC instances were gen - erated from problems in coding theory , fault diagnosis problems , Keller’s conjecture on tilings using hypercubes and the Steiner triple problem , in addition to randomly generated graphs and graphs where the maximum clique has been ‘hidden’ by incor - porating low - degree vertices . These problem instances range in size from less than 50 vertices and 1000 edges to greater than 3300 vertices and 5000000 edges . The DIMACS MC instances were converted to MVWC instances ( the DIMACS - VW benchmark ) by allocating weight , for vertex i , of i mod 200 + 1 and to MEWC instances ( the DIMACS - EW benchmark ) by , for an edge connecting vertices i and j , allocating a weight of ( i + j ) mod 200 + 1 . Generating the DIMACS - VW and DIMACS - EW benchmark instances using this technique allows future investigators to simply replicate the experiments performed in this study . The constant 200 in the weight calculation was determined after a number of experiments showed that the 2 http : / / www . nlsde . buaa . edu . cn / kexu / benchmarks / graph - benchmarks . htm . 3 http : / / dimacs . rutgers . edu / Challenges / . Approximating the maximum vertex / edge weighted clique generated problems appeared to be reasonably difﬁcult for PLS ( clearly , allocating weights in the range 1 , . . . , k results in an MC instance when k = 1 while , intuitively , it is reasonable to expect that as k increases , the difﬁculty in solving the instance will , in general , increase ) . As the maximum weight cliques for each instance in the DIMACS - VW and DIMACS - EW benchmark were unknown , a series of long running experiments was ﬁrst performed to identify a putative maximum weight clique for each instance and then 100 independent trials , with a lower value for the PLS max - selections limit , were performed for each instance , using the respective putative maximum weight clique as the target size for PLS . If , during the 100 trials , an improved maximum weight clique was identiﬁed then this became the putative maximum weight clique for the instance and the trials were restarted . All experiments for this study were performed on a computer that , when executing the DIMACS MC Machine Benchmark 4 required 0 . 31 CPU seconds for r300 . 5 , 1 . 93 CPU seconds for r400 . 5 and 7 . 35 CPU seconds for r500 . 5 . In the following , unless explicitly stated otherwise , all CPU times refer to the reference machine . 3 . 1 BHOSLIB benchmark results To evaluate the performance of PLS on the BHOSLIB benchmark instances , 100 independent trials were performed for each instance using target clique sizes corre - sponding to the respective known optimal clique sizes . The results from these exper - iments are displayed in Table 1 . The PLS performance results ( averaged over 100 independent trials ) are shown for the complete set of 40 BHOSLIB benchmark in - stances . Note that PLS ﬁnds optimal solutions with a success rate of 100 % over all 100 trials per instance for 21 of the 40 instances and only fails completely on two instances . As a means of comparison , some corresponding SAT instances of the BHOSLIB MC instances were used for the SAT Competition 2004 ( 55 SAT solvers ) 5 with the results shown in Table 2 . As can be seen , the results for PLS are at least competitive if not an improvement on these results . 3 . 2 DIMACS - VW benchmark results The PLS results for the DIMACS - VW benchmark are presented in Table 3 . When compared to the MC problem , adding vertex weights can increase the difﬁculty of the problem for PLS . For example , as can be seen from Table 3 , solving the brock800 _ 2 instance ( 893 . 42 CPU seconds ) is considerably more difﬁcult for PLS than solv - ing the brock800 _ 1 instance ( 31 . 46 CPU seconds ) . This is the reverse of the un - weighted case where the corresponding CPU times are 24 . 41 and 30 . 09 seconds re - spectively ( Pullan 2006 ) . There appears to be two contributing factors responsible for this increase in difﬁculty : 4 dmclique , ftp : / / dimacs . rutgers . edu in directory / pub / dsj / clique . 5 http : / / www . nlsde . buaa . edu . cn / kexu / benchmarks / graph - benchmarks . htm . W . Pullan Table 1 PLS performance results , averaged over 100 independent runs , for the complete set of 40 BHOSLIB benchmark instances . For each instance , the optimal maximum clique size is given by the 2 digits immediately following ‘frb’ in the instance name ; ‘Success’ gives the number of successful trials ( from a total of 100 ) in which the optimal maximum clique size was located ; ‘Clique’ gives the maximum clique size ( average clique size , minimum clique size ) for the 100 PLS trials ; ‘CPU ( s ) ’ is the run - time in CPU seconds , averaged over all successful runs , for each instance . ‘Selections’ is the number of vertices added to the clique , averaged over all successful runs , for each instance ; ‘Selections / second’ is the aver - age number of vertices added to the clique per CPU second , averaged over all successful runs , for each instance ; ‘Solutions’ is the total number of distinct maximum sized cliques found for each instance Instance Success Clique CPU ( s ) Selections Selections / second Solutions frb30 - 15 - 1 100 30 ( 30 , 30 ) 0 . 07 59810 569150 55 frb30 - 15 - 2 100 30 ( 30 , 30 ) 0 . 09 70339 564626 10 frb30 - 15 - 3 100 30 ( 30 , 30 ) 0 . 69 591120 566726 4 frb30 - 15 - 4 100 30 ( 30 , 30 ) 0 . 04 34563 569064 29 frb30 - 15 - 5 100 30 ( 30 , 30 ) 0 . 33 285307 568257 5 frb35 - 17 - 1 100 35 ( 35 , 35 ) 4 . 16 3096172 492175 2 frb35 - 17 - 2 100 35 ( 35 , 35 ) 1 . 23 907288 484829 16 frb35 - 17 - 3 100 35 ( 35 , 35 ) 0 . 26 200750 496610 75 frb35 - 17 - 4 100 35 ( 35 , 35 ) 5 . 65 4227661 494417 16 frb35 - 17 - 5 100 35 ( 35 , 35 ) 0 . 79 586032 487245 32 frb40 - 19 - 1 100 40 ( 40 , 40 ) 3 . 32 2152931 427923 56 frb40 - 19 - 2 100 40 ( 40 , 40 ) 54 . 10 34821526 425030 5 frb40 - 19 - 3 100 40 ( 40 , 40 ) 4 . 83 3070726 420270 58 frb40 - 19 - 4 100 40 ( 40 , 40 ) 23 . 05 14502673 415432 4 frb40 - 19 - 5 100 40 ( 40 , 40 ) 99 . 74 62872563 416294 4 frb45 - 21 - 1 100 45 ( 45 , 45 ) 41 . 35 21169777 338081 68 frb45 - 21 - 2 100 45 ( 45 , 45 ) 82 . 61 43428720 347143 91 frb45 - 21 - 3 100 45 ( 45 , 45 ) 414 . 03 218504841 348517 3 frb45 - 21 - 4 100 45 ( 45 , 45 ) 59 . 28 31510624 351030 59 frb45 - 21 - 5 100 45 ( 45 , 45 ) 108 . 88 57264948 347336 62 frb50 - 23 - 1 72 50 ( 49 . 72 , 49 ) 1045 . 59 445677494 281483 26 frb50 - 23 - 2 45 50 ( 49 . 45 , 49 ) 1171 . 15 493067479 278027 26 frb50 - 23 - 3 16 50 ( 49 . 16 , 49 ) 1041 . 40 427843869 271306 2 frb50 - 23 - 4 100 50 ( 50 , 50 ) 126 . 44 52537053 274386 86 frb50 - 23 - 5 99 50 ( 49 . 99 , 49 ) 436 . 29 183325512 277482 73 frb53 - 24 - 1 6 53 ( 52 . 06 , 52 ) 1707 . 39 633518724 245030 5 frb53 - 24 - 2 23 53 ( 52 . 23 , 52 ) 1548 . 89 565031749 240904 15 frb53 - 24 - 3 66 53 ( 52 . 66 , 52 ) 1185 . 68 435079369 242322 38 frb53 - 24 - 4 46 53 ( 52 . 46 , 52 ) 1423 . 27 521130082 241798 25 frb53 - 24 - 5 85 53 ( 52 . 85 , 52 ) 979 . 85 357143811 240697 39 frb56 - 25 - 1 12 56 ( 55 . 1 , 54 ) 1240 . 19 411367855 219045 6 frb56 - 25 - 2 6 56 ( 54 . 93 , 54 ) 1702 . 39 571076166 221526 6 frb56 - 25 - 3 8 56 ( 55 . 08 , 55 ) 1476 . 61 485919697 217315 7 frb56 - 25 - 4 68 56 ( 55 . 66 , 54 ) 1304 . 03 428447143 216970 68 frb56 - 25 - 5 81 56 ( 55 . 81 , 55 ) 1089 . 08 378580971 229556 69 frb59 - 26 - 1 0 58 ( 57 . 85 , 57 ) – – 196489 – frb59 - 26 - 2 0 58 ( 57 . 63 , 57 ) – – 197079 – frb59 - 26 - 3 6 59 ( 57 . 77 , 57 ) 1929 . 05 584483669 200087 6 frb59 - 26 - 4 5 59 ( 57 . 71 , 57 ) 2044 . 91 612964420 197948 5 frb59 - 26 - 5 78 59 ( 58 . 77 , 57 ) 1193 . 22 361047063 199818 69 Approximating the maximum vertex / edge weighted clique Table 2 PLS performance as compared to SAT Solvers in the SAT Competition 2004 for the BHOSLIB benchmark . For each instance , the number of SAT solvers ( from a total of 55 SAT solvers ) in the SAT Com - petition 2004 that were able to solve the corresponding SAT problem and also the number of successful trials ( from a total of 100 ) in which PLS located the optimal maximum clique are shown Instance SAT competition PLS success Instance SAT competition PLS success results rate results rate frb40 - 19 - 1 Solved by 28 solvers 100 % frb53 - 24 - 1 Unsolved 6 % frb40 - 19 - 2 Solved by 27 solvers 100 % frb53 - 24 - 2 Unsolved 23 % frb45 - 21 - 1 Solved by 8 solvers 100 % frb56 - 25 - 1 Unsolved 12 % frb45 - 21 - 2 Solved by 5 solvers 100 % frb56 - 25 - 2 Unsolved 6 % frb50 - 23 - 1 Solved by 1 solver 72 % frb59 - 26 - 1 Unsolved 0 % frb50 - 23 - 2 Solved by 1 solver 45 % frb59 - 26 - 2 Unsolved 0 % Fig . 1 Vertex degrees for the DIMACS - VW instances brock800 _ 2 and brock800 _ 1 . Vertices that are in the maximum vertex weighted clique are ﬂagged with circles . The average vertex weight in the maximum weighted vertex clique is 168 for brock800 _ 2 and 155 for brock800 _ 1 ( as compared to an average vertex weight of 100 overall ) 1 . The maximum vertex weighted clique is not a maximum clique —as with all sto - chastic MC solvers , PLS is inherently biased towards higher degree vertices ( how - ever the Penalty sub - algorithm of PLS does tend to mitigate this bias ) . This inher - ent bias can make a weighted instance difﬁcult for PLS if the lower degree vertices have relatively higher weights and , consequently , the maximum vertex weighted W . Pullan Table 3 PLS performance for the DIMACS - VW benchmark instances . ‘ W (cid:3) v ( G ) ’ is the putative maximum vertex weighted clique found during the initial PLS scans . ‘Success’ is the number of successful trials from a total of 100 . An entry of ‘ – ’ signiﬁes that the restricted CPU time allowed for each trial prevented PLS attaining the putative maximum vertex weighted clique found during the initial scans ; and ‘CPU ( s ) ’ is the reference computer processor time in seconds , averaged over successful trials , required by PLS . Entries of ‘ < (cid:3) ’ signify that the average CPU time required was less than 0 . 01 seconds Instance W (cid:3) v ( G ) Success CPU ( s ) Instance W (cid:3) v ( G ) Success CPU ( s ) brock200 _ 1 2821 100 0 . 19 johnson32 - 2 - 4 2033 100 44 . 68 brock200 _ 2 1428 100 0 . 02 johnson8 - 2 - 4 66 100 < (cid:3) brock200 _ 3 2062 100 0 . 01 johnson8 - 4 - 4 511 100 < (cid:3) brock200 _ 4 2107 100 0 . 70 keller4 1153 100 0 . 02 brock400 _ 1 3422 32 437 . 19 keller5 3317 100 119 . 24 brock400 _ 2 3350 61 415 . 95 keller6 7382 – – brock400 _ 3 3471 100 12 . 04 MANN _ a27 12264 – – brock400 _ 4 3626 100 0 . 05 MANN _ a45 34129 – – brock800 _ 1 3121 100 31 . 46 MANN _ a81 110564 – – brock800 _ 2 3043 69 893 . 42 MANN _ a9 372 100 < (cid:3) brock800 _ 3 3076 100 3 . 35 p _ hat1000 - 1 1514 100 7 . 61 brock800 _ 4 2971 100 3 . 77 p _ hat1000 - 2 5777 87 940 . 62 C1000 . 9 8965 5 344 . 74 p _ hat1000 - 3 7986 – – C125 . 9 2529 100 8 . 08 p _ hat1500 - 1 1619 100 48 . 91 C2000 . 5 2466 18 711 . 27 p _ hat1500 - 2 7328 4 1056 . 19 C2000 . 9 10028 – – p _ hat1500 - 3 10014 – – C250 . 9 5092 17 247 . 69 p _ hat300 - 1 1057 100 0 . 01 C4000 . 5 2792 – – p _ hat300 - 2 2487 100 19 . 36 C500 . 9 6822 – – p _ hat300 - 3 3774 47 418 . 11 c - fat200 - 1 1284 100 < (cid:3) p _ hat500 - 1 1231 100 0 . 42 c - fat200 - 2 2411 100 < (cid:3) p _ hat500 - 2 3925 – – c - fat200 - 5 5887 100 < (cid:3) p _ hat500 - 3 5361 – – c - fat500 - 1 1354 100 < (cid:3) p _ hat700 - 1 1441 100 0 . 20 c - fat500 - 10 11586 100 < (cid:3) p _ hat700 - 2 5290 100 78 . 51 c - fat500 - 2 2628 100 0 . 01 p _ hat700 - 3 7565 12 718 . 40 c - fat500 - 5 5841 100 < (cid:3) san1000 1716 – – DSJC1000 _ 5 2186 100 47 . 76 san200 _ 0 . 7 _ 1 3370 100 < (cid:3) DSJC500 _ 5 1725 100 0 . 95 san200 _ 0 . 7 _ 2 2422 66 397 . 38 gen200 _ p0 . 9 _ 44 5043 100 4 . 44 san200 _ 0 . 9 _ 1 6825 100 < (cid:3) gen200 _ p0 . 9 _ 55 5416 100 0 . 05 san200 _ 0 . 9 _ 2 6082 100 < (cid:3) gen400 _ p0 . 9 _ 55 6718 2 340 . 11 san200 _ 0 . 9 _ 3 4748 72 219 . 68 gen400 _ p0 . 9 _ 65 6935 4 200 . 79 san400 _ 0 . 5 _ 1 1455 100 200 . 44 gen400 _ p0 . 9 _ 75 8006 100 < (cid:3) san400 _ 0 . 7 _ 1 3941 100 0 . 03 hamming10 - 2 50512 100 < (cid:3) san400 _ 0 . 7 _ 2 3110 100 0 . 05 * hamming10 - 4 5086 1 1433 . 07 san400 _ 0 . 7 _ 3 2771 100 4 . 41 hamming6 - 2 1072 100 < (cid:3) san400 _ 0 . 9 _ 1 9776 100 < (cid:3) hamming6 - 4 134 100 < (cid:3) sanr200 _ 0 . 7 2325 100 0 . 62 hamming8 - 2 10976 100 < (cid:3) sanr200 _ 0 . 9 5126 5 182 . 54 hamming8 - 4 1472 100 < (cid:3) sanr400 _ 0 . 5 1835 100 0 . 67 johnson16 - 2 - 4 548 100 < (cid:3) sanr400 _ 0 . 7 2992 100 141 . 50 Approximating the maximum vertex / edge weighted clique clique is not a maximum clique . For brock800 _ 2 , the cardinality of the maxi - mum weighted vertex clique is 18 as compared to 24 for the unweighted instance which is a signiﬁcant difference . The corresponding ﬁgures for brock800 _ 1 are 20 and 23 . This requires PLS to search effectively amongst the relatively smaller ( and more numerous ) cliques for brock800 _ 2 ( as compared to brock800 _ 1 ) . Figure 1 shows that the range of vertex degrees in the maximum weighted ver - tex clique for brock800 _ 2 is 69 % of the total vertex range as compared to 49 % for brock800 _ 1 . This wider range , and in particular the presence of a highly weighted , low degree vertex in the maximum weighted vertex clique for brock800 _ 2 also contribute to increasing the relative difﬁculty of this instance . 2 . The maximum vertex weighted clique is a maximal clique but there are a large number of distinct maximal cliques , only a few of which are maximum vertex weighted cliques —an example of this , as shown in Table 4 , is the keller5 MC in - stance , for which 100 unique maximum cliques were identiﬁed in 100 independent trials ( Pullan and Hoos 2006 ) . Presumably the actual number of unique maximum cliques for keller5 is much larger than 100 but only a small subset will be max - imum vertex weighted cliques . For keller5 , the issue of locating these maximum vertex weighted cliques amongst the maximum cliques increases the average CPU time by a factor of 11 924 . Table 4 provides comparative statistics for all DIMACS - VW instances where there were signiﬁcant increases in CPU requirements when compared with those obtained for the DIMACS MC instances ( Pullan and Hoos 2006 ) . As can be seen from Table 4 , for all these instances , either (cid:4) ( = ω ( G ) − ω v ( G ) ) and / or the number of distinct maximum cliques ( Sols . ) found from 100 trials are relatively large . Table 5 shows the average and minimum values obtained , over the 100 trials , for the instances in Table 3 where the putative maximum vertex weighted clique was attained with less than 100 % success rate . The overall performance of PLS is summarised in Fig . 2 which shows the cu - mulative distributions of number of search steps and CPU seconds on the reference computer for 100 trials on the DIMACS - VW benchmark brock800 _ 1 instance . The wide distributions are typical for stochastic local search algorithms where the median is relatively low but there are a small proportion of trials that take a relatively long time before they are successful . 3 . 3 DIMACS - EW benchmark results The PLS results for the DIMACS - EW benchmark are presented in Table 6 . MEWC is a computationally more intensive problem than MVWC as PLS calculates , for each possible addition to the clique , the potential improvement in the total clique weight . Table 7 provides some characteristics of instances from Table 6 where the DIMACS - EW instance was signiﬁcantly more difﬁcult than the DIMACS instance ( Pullan and Hoos 2006 ) . It would be reasonable to expect that , in general , ω e ( G ) = ω ( G ) as , adding vertex k to a clique C adds (cid:2) i ∈ C w ik to the total edge weight of the clique ( in contrast to the vertex weighted case where only the vertex weight is added to the total weight of the clique ) . As PLS is biased towards larger cliques , it would be reasonable to expect that , in general , DIMACS - EW instances are less difﬁcult W . Pullan Table 4 Comparative statistics for the DIMACS and DIMACS - VW instances . For the ( putative ) maxi - mum vertex weighted clique of G : ω v ( G ) is the cardinality ; W (cid:3) v ( G ) is the total vertex weight ; and A ( C ) is the average vertex weight . A ( G ) is the average vertex weight of G ; CPU ( s ) is the reference com - puter processor time in seconds , averaged over successful trials , required by PLS for the DIMACS - VW instances ; ω ( G ) is the cardinality of the maximum clique reported in ( Pullan and Hoos 2006 ) for the DIMACS instance ; SCPU ( s ) is the scaled computer processor time reported in ( Pullan and Hoos 2006 ) for the DIMACS instance ; Sols . is the number of distinct maximum cliques reported in ( Pullan and Hoos 2006 ) for the DIMACS instance ; (cid:4) = ω ( G ) − ω v ( G ) Instance ω v ( G ) W (cid:3) v ( G ) A ( C ) A ( G ) CPU ( s ) ω ( G ) SCPU ( s ) Sols . (cid:4) brock200 _ 1 19 2821 148 . 5 100 . 5 0 . 19 21 0 . 01 2 2 brock200 _ 4 13 2107 162 . 1 100 . 5 0 . 7 17 0 . 02 1 4 brock400 _ 1 21 3422 163 . 0 100 . 5 437 . 19 27 0 . 96 1 6 brock400 _ 2 22 3350 152 . 3 100 . 5 415 . 95 29 0 . 21 1 7 brock400 _ 3 23 3471 150 . 9 100 . 5 12 . 04 31 0 . 08 1 8 brock800 _ 1 20 3121 156 . 1 100 . 5 31 . 46 23 24 . 29 1 3 brock800 _ 2 19 3043 160 . 2 100 . 5 893 . 42 24 6 . 77 1 5 brock800 _ 3 20 3076 153 . 8 100 . 5 3 . 35 25 9 . 43 1 5 c1000 . 9 63 8965 142 . 3 100 . 5 344 . 74 68 1 . 91 70 5 c125 . 9 30 2529 84 . 3 62 . 5 8 . 08 34 < (cid:3) 94 4 c2000 . 5 14 2466 176 . 1 100 . 5 711 . 27 16 0 . 42 93 2 c2000 . 9 73 10028 137 . 4 100 . 5 – 78 83 . 09 91 5 c250 . 9 40 5092 127 . 3 85 . 7 247 . 69 44 < (cid:3) 85 4 c4000 . 5 16 2792 174 . 5 100 . 5 – 18 77 . 93 93 2 c500 . 9 52 6822 131 . 2 90 . 7 – 57 0 . 05 3 5 dsjc1000 . 5 13 2186 168 . 2 100 . 5 47 . 76 15 0 . 34 25 2 dsjc500 . 5 12 1725 143 . 8 90 . 7 0 . 95 13 0 . 01 42 1 gen200 _ p0 . 9 _ 44 37 5043 136 . 3 100 . 5 4 . 44 44 < (cid:3) 4 7 gen400 _ p0 . 9 _ 55 46 6718 146 . 0 100 . 5 340 . 11 55 0 . 01 1 9 gen400 _ p0 . 9 _ 65 61 6935 113 . 7 100 . 5 200 . 79 65 < (cid:3) 1 4 hamming10 - 4 37 5086 137 . 5 98 . 5 1433 . 07 40 < (cid:3) 100 3 johnson32 - 2 - 4 16 2033 127 . 1 90 . 6 44 . 68 16 < (cid:3) 100 0 keller5 27 3317 122 . 9 98 . 0 119 . 24 27 0 . 01 100 0 keller6 51 7382 144 . 8 99 . 6 – 59 73 . 31 100 8 MANN _ a27 125 12264 98 . 1 95 . 8 – 126 0 . 02 100 1 MANN _ a45 339 34129 100 . 7 97 . 7 – 345 22 . 34 100 6 MANN _ a81 1090 110564 101 . 4 99 . 1 – 1099 113 . 52 96 9 p _ hat1000 - 1 9 1514 168 . 2 100 . 5 7 . 61 10 < (cid:3) 82 1 p _ hat1000 - 2 42 5777 137 . 5 100 . 5 940 . 62 46 < (cid:3) 87 4 p _ hat1000 - 3 62 7986 128 . 8 100 . 5 – 68 < (cid:3) 23 6 p _ hat1500 - 1 10 1619 161 . 9 97 . 2 48 . 91 12 1 . 16 1 2 p _ hat1500 - 2 58 7328 126 . 3 97 . 2 1056 . 19 65 < (cid:3) 90 7 p _ hat1500 - 3 88 10014 113 . 8 97 . 2 – 94 < (cid:3) 98 6 p _ hat300 - 2 20 2487 124 . 4 84 . 2 19 . 36 25 < (cid:3) 42 5 p _ hat300 - 3 29 3774 130 . 1 84 . 2 418 . 11 36 < (cid:3) 10 7 p _ hat500 - 1 8 1231 153 . 9 90 . 7 0 . 42 9 < (cid:3) 48 1 p _ hat500 - 2 33 3925 118 . 9 90 . 7 – 36 < (cid:3) 14 3 Approximating the maximum vertex / edge weighted clique Table 4 ( Continued ) Instance ω v ( G ) W (cid:3) v ( G ) A ( C ) A ( G ) CPU ( s ) ω ( G ) SCPU ( s ) Sols . (cid:4) p _ hat500 - 3 44 5361 121 . 8 90 . 7 – 50 < (cid:3) 36 6 p _ hat700 - 2 40 5290 132 . 3 93 . 5 78 . 51 44 < (cid:3) 72 4 p _ hat700 - 3 60 7565 126 . 1 93 . 5 718 . 4 62 < (cid:3) 85 2 san1000 10 1716 171 . 6 100 . 5 – 15 3 . 60 1 5 san200 _ 0 . 7 _ 2 14 2422 173 . 0 100 . 5 397 . 38 18 0 . 03 2 4 san200 _ 0 . 9 _ 3 34 4748 139 . 6 100 . 5 219 . 68 44 < (cid:3) 1 10 san400 _ 0 . 5 _ 1 8 1455 181 . 9 100 . 5 200 . 44 13 0 . 07 1 5 san400 _ 0 . 7 _ 3 18 2771 153 . 9 100 . 5 4 . 41 22 0 . 18 1 4 sanr200 _ 0 . 7 15 2325 155 . 0 100 . 5 0 . 62 18 < (cid:3) 13 3 sanr200 _ 0 . 9 36 5126 142 . 4 100 . 5 182 . 54 42 0 . 01 18 6 sanr400 _ 0 . 5 11 1835 166 . 8 100 . 5 0 . 67 13 0 . 02 4 2 sanr400 _ 0 . 7 18 2992 166 . 2 100 . 5 141 . 5 21 0 . 01 61 3 Table 5 Maximum , average and minimum weighted cliques for 100 trials of PLS on selected in - stances from the DIMACS - VW benchmark . For each instance , PLS attained the putative maximum vertex weighted clique Instance Max W v Average W v Min W v brock400 _ 1 3422 3389 . 66 3362 brock400 _ 2 3350 3339 . 08 3322 brock800 _ 2 3043 3038 . 35 3028 C1000 . 9 8965 8589 . 90 8423 C2000 . 5 2466 2448 . 17 2399 C250 . 9 5092 5053 . 95 4948 p _ hat1000 - 2 5777 5775 . 73 5758 than DIMACS - VW instances for PLS ( this observation tends to be conﬁrmed by the relatively fewer number of entries in Table 7 as compared to Table 4 ) . As for the MVWC instances , the two factors that cause the increase in difﬁculty for PLS are when either ω e ( G ) < ω ( G ) or when ω e ( G ) = ω ( G ) and there are a large number of solutions for the MC version of the instance . Table 7 shows that one or both of these situations existed for all the instances that were ‘difﬁcult’ for PLS . Figure 3 shows the distribution in edge weights for the maximum edge weighted clique for brock800 _ 1 where the average edge weight is 119 and the median is 126 with a clique size of 21 . 3 . 4 Comparative results Comparative results obtained by PLS for the subset of the DIMACS instances used in ( Bomze et al . 2000 ) are shown in Table 8 . The two algorithms that PLS is compared with are : Babel ( Babel 1994 ) , a branch and bound algorithm which identiﬁes upper and lower bounds for the maximum weight clique by colouring the weighted graph , W . Pullan Table 6 PLS performance for the DIMACS - EW benchmark instances . W (cid:3) e ( G ) is the putative maximum vertex weighted clique found during the initial PLS scans . ‘Success’ is the number of successful trials from a total of 100 . An entry of ‘ – ’ signiﬁes that the restricted CPU time allowed for each trial prevented PLS attaining the putative maximum edge weighted clique found during the initial scans ; and CPU ( s ) is the reference computer processor time in seconds , averaged over successful trials , required by PLS . Entries of ‘ < (cid:3) ’ signify that the average CPU time required was less than 0 . 01 seconds Instance W (cid:3) e ( G ) Success CPU ( s ) Instance W (cid:3) e ( G ) Success CPU ( s ) brock200 _ 1 21230 100 0 . 04 johnson32 - 2 - 4 16205 7 861 . 81 brock200 _ 2 6542 100 0 . 02 johnson8 - 2 - 4 192 100 < (cid:3) brock200 _ 3 10303 100 0 . 01 johnson8 - 4 - 4 6552 100 < (cid:3) brock200 _ 4 13967 100 0 . 02 keller4 6745 100 0 . 01 brock400 _ 1 35257 100 0 . 74 keller5 38901 100 96 . 16 brock400 _ 2 40738 100 0 . 26 keller6 179429 – – brock400 _ 3 46785 100 0 . 12 MANN _ a27 799525 – – brock400 _ 4 54304 100 0 . 06 MANN _ a45 5930064 – – brock800 _ 1 25050 100 1 . 75 MANN _ a81 60504100 – – brock800 _ 2 27932 100 11 . 30 MANN _ a9 5460 100 < (cid:3) brock800 _ 3 30972 100 8 . 48 p _ hat1000 - 1 5436 100 0 . 59 brock800 _ 4 30950 100 3 . 76 p _ hat1000 - 2 107870 100 1 . 37 C1000 . 9 234013 100 26 . 28 p _ hat1000 - 3 229500 100 0 . 02 C125 . 9 66248 100 0 . 07 p _ hat1500 - 1 7135 100 1 . 29 C2000 . 5 14927 82 3362 . 34 p _ hat1500 - 2 211069 100 9 . 69 C2000 . 9 316135 – – p _ hat1500 - 3 441998 100 0 . 93 C250 . 9 96692 100 0 . 01 p _ hat300 - 1 3321 100 0 . 03 C4000 . 5 19304 – – p _ hat300 - 2 31564 100 < (cid:3) C500 . 9 164953 100 21 . 65 p _ hat300 - 3 63390 100 < (cid:3) c - fat200 - 1 7734 100 < (cid:3) p _ hat500 - 1 4764 100 0 . 02 c - fat200 - 2 26389 100 < (cid:3) p _ hat500 - 2 63870 100 0 . 03 c - fat200 - 5 168200 100 < (cid:3) p _ hat500 - 3 122302 100 0 . 01 c - fat500 - 1 10738 100 < (cid:3) p _ hat700 - 1 5185 100 0 . 01 c - fat500 - 10 804000 100 < (cid:3) p _ hat700 - 2 96380 100 0 . 01 c - fat500 - 2 38350 100 < (cid:3) p _ hat700 - 3 191148 100 0 . 07 c - fat500 - 5 205864 100 < (cid:3) san1000 10661 100 2 . 36 DSJC1000 _ 5 12054 100 2 . 61 san200 _ 0 . 7 _ 1 45295 100 < (cid:3) DSJC500 _ 5 9626 100 0 . 35 san200 _ 0 . 7 _ 2 15073 100 0 . 02 gen200 _ p0 . 9 _ 44 94362 100 < (cid:3) san200 _ 0 . 9 _ 1 242710 100 < (cid:3) gen200 _ p0 . 9 _ 55 150839 100 < (cid:3) san200 _ 0 . 9 _ 2 178468 100 < (cid:3) gen400 _ p0 . 9 _ 55 150981 100 0 . 19 san200 _ 0 . 9 _ 3 96764 100 < (cid:3) gen400 _ p0 . 9 _ 65 208624 100 < (cid:3) san400 _ 0 . 5 _ 1 7442 100 0 . 04 gen400 _ p0 . 9 _ 75 279069 100 < (cid:3) san400 _ 0 . 7 _ 1 77719 100 0 . 05 hamming10 - 2 13140816 100 0 . 05 san400 _ 0 . 7 _ 2 44155 100 0 . 06 hamming10 - 4 83280 62 864 . 70 san400 _ 0 . 7 _ 3 24727 100 0 . 13 hamming6 - 2 32736 100 < (cid:3) san400 _ 0 . 9 _ 1 496874 100 < (cid:3) hamming6 - 4 396 100 < (cid:3) sanr200 _ 0 . 7 16398 100 0 . 01 hamming8 - 2 800624 100 < (cid:3) sanr200 _ 0 . 9 85920 100 0 . 01 hamming8 - 4 12360 100 0 . 01 sanr400 _ 0 . 5 8298 100 0 . 03 johnson16 - 2 - 4 3808 100 < (cid:3) sanr400 _ 0 . 7 22791 100 0 . 46 Approximating the maximum vertex / edge weighted clique Fig . 2 Run - time distributions of PLS for the brock800 _ 1 instance of the DIMACS - VW benchmark mea - sured in search steps ( top ) and CPU seconds ( bottom ) on the reference computer ( based on 100 independent runs each of which attained the putative maximum weighted clique ) where the number of colours represents the total sum of all weights ; and RD ( Bomze et al . 2000 ) , a parallel , distributed algorithm which formulates the MVWC as a con - tinuous quadratic program . The results in Table 8 highlight the current problem of comparing algorithms as the MVWC versions of the DIMACS instances were gen - erated by allocating a weight , to each vertex , uniformly random in { 1 , . . . , 10 } . How - ever , while the random number generator was identical for Babel and RD , as details of the generator were not published , it is not guaranteed to be the case for the PLS instances . Accordingly , it is difﬁcult to make any objective comparison other than to point out that PLS obtained the highest weight clique for 19 of the 24 instances . Also shown in Table 8 are the comparative clique sizes for the maximum weighted clique as compared to the maximum unweighted clique . Of note is that , in several cases , the maximum weighted clique size is less than the maximum unweighted clique size which again demonstrates that PLS is searching effectively at a number of levels within the search space . 4 Conclusions and future work This study has demonstrated that , by applying the general paradigm of dynamic lo - cal search to the maximum weight clique problem , the state of the art in maximum W . Pullan Table 7 DIMACS - EW instances whose difﬁculty for PLS is signiﬁcantly different to the results presented in ( Pullan and Hoos 2006 ) for the corresponding maximum unweighted clique instance . ω ( G ) is the maxi - mum unweighted clique size ; Sols . is the number of distinct maximum unweighted cliques found in ( Pullan and Hoos 2006 ) from 100 trials ; SCPU ( s ) is the scaled ( to the reference computer ) average CPU seconds reported in ( Pullan and Hoos 2006 ) over 100 trials for the maximum unweighted clique instance ; ω e ( G ) is maximum edge weighted clique size ; CPU ( s ) is the average CPU seconds required by PLS over 100 trials for the DIMACS - EW instance ; Edges is the number of edges in the maximum edge weighted clique ; Average w ij is the average edge weight in the maximum edge weighted clique Instance ω ( G ) Sols . SCPU ( s ) ω e ( G ) CPU ( s ) Edges Average w ij C2000 . 5 16 93 0 . 42 15 3362 . 34 105 142 . 16 C2000 . 9 80 – – 79 – 3081 102 . 61 C4000 . 5 18 93 77 . 93 17 – 136 141 . 94 C500 . 9 57 3 0 . 04 55 21 . 65 1485 111 . 08 hamming10 - 4 40 100 < (cid:3) 40 864 . 70 780 106 . 77 johnson32 - 2 - 4 16 100 < (cid:3) 16 861 . 81 120 135 . 04 keller5 27 100 0 . 01 27 96 . 16 351 110 . 83 keller6 59 100 73 . 31 59 – 1711 104 . 87 MANN _ a27 126 100 0 . 02 126 – 7875 101 . 53 MANN _ a45 344 100 22 . 34 344 – 58996 100 . 52 MANN _ a81 1098 96 113 . 52 1097 – 601156 100 . 65 p _ hat1500 - 2 65 90 < (cid:3) 64 9 . 69 2016 104 . 70 Table 8 Comparative results obtained for a subset of the DIMACS instances where each vertex has been allocated a weight uniformly random in { 1 , . . . , 10 } . RD are the results from ( Bomze et al . 2000 ) ; Babel are the results reported in ( Bomze et al . 2000 ) for the Babel software ( Babel 1994 ) ; PLS are the PLS results ; ω v ( G ) is the clique size of the maximum weighted clique ; ω ( G ) is the putative maximum unweighted clique size Instance RD Babel PLS ω v ( G ) ω ( G ) Instance RD Babel PLS ω v ( G ) ω ( G ) brock800 _ 1 136 156 163 18 23 p _ hat1000 - 1 77 80 82 9 10 brock800 _ 2 142 157 163 19 24 p _ hat1000 - 2 285 284 293 43 46 brock800 _ 3 141 148 162 19 25 p _ hat1000 - 3 435 349 407 63 68 brock800 _ 4 136 147 161 20 26 p _ hat1500 - 1 74 87 91 10 12 c - fat500 - 10 755 755 732 124 126 p _ hat1500 - 2 327 309 427 62 65 c - fat500 - 1 93 96 97 14 14 p _ hat1500 - 3 490 390 586 92 94 c - fat500 - 2 181 181 168 24 26 p _ hat500 - 1 56 72 75 9 9 c - fat500 - 5 371 395 418 64 64 p _ hat500 - 2 213 228 243 35 36 hamming10 - 2 2674 1923 2853 512 512 p _ hat500 - 3 307 294 338 46 50 hamming10 - 4 258 277 306 40 40 p _ hat700 - 1 54 76 76 9 11 MANN _ a45 2643 2653 2133 338 345 p _ hat700 - 2 275 272 283 43 44 san1000 80 94 90 10 15 p _ hat700 - 3 371 316 397 59 62 weighted clique solving can be improved . PLS is a stochastic reactive dynamic local search algorithm that interleaves sub - algorithms which alternate between sequences of iterative improvement , during which suitable vertices are added to the current sub - graph , and plateau search , during which vertices of the current sub - graph are swapped Approximating the maximum vertex / edge weighted clique Fig . 3 Edge weights for the maximum edge weighted clique for the DIMACS - EW instance brock800 _ 1 . Median edge weight of the edges that are in the maximum edge weighted clique is 126 with an average of 119 ( as compared to an overall median and mean edge weight of 100 for all edges in brock800 _ 1 ) with vertices not contained in the current sub - graph . These sub - algorithms differ in two ways . Firstly , their vertex selection techniques in that selection can be solely based on randomly selecting a vertex , randomly selecting within highest vertex de - gree or random selecting within vertex penalties that are dynamically adjusted during the search . Secondly , the perturbation mechanism used to overcome search stagnation differs between the sub - algorithms . PLS has no problem instance dependent parame - ters and achieves state - of - the - art performance for maximum weight clique instances over a large range of the commonly used DIMACS and other benchmark instances . The excellent performance of PLS on the benchmark instances reported here sug - gests that the underlying dynamic local search method has substantial potential to provide the basis for high - performance algorithms for other combinatorial optimisa - tion problems . References Babel , L . : A fast algorithm for the maximum weight clique problem . Computing 52 , 31 – 38 ( 1994 ) Ballard , D . , Brown , C . : Computer Vision . Prentice - Hall , Englewood Cliffs ( 1982 ) Balus , E . , Yu , C . : Finding a maximum clique in an arbitrary graph . SIAM J . Comput . 15 ( 4 ) , 1054 – 1068 ( 1986 ) W . Pullan Bomze , I . , Budinich , M . , Pardalos , P . , Pelillo , M . : The maximum clique problem . In : Du , D . Z . ( ed . ) Hand - book of Combinatorial Optimization , vol . A , pp . 1 – 74 ( 1999 ) Bomze , I . , Budinich , M . , Pelillo , M . , Rossi , C . : Annealed replication : a new heuristic for the maximum clique problem . Discret . Appl . Math . 121 , 27 – 49 ( 2002 ) Bomze , I . , Pelillo , M . , Stix , V . : Approximating the maximum weight clique using replicator dynamics . IEEE Trans . Neural . Netw . 11 ( 2000 ) Boppana , R . , Halldórsson , M . : Approximating maximum independent sets by excluding subgraphs . Bit 32 , 180 – 196 ( 1992 ) Garey , M . R . , Johnson , D . S . : Computers and Intractability : A Guide to the Theory of NP - Completeness . Freeman , San Francisco ( 1979 ) Håstad , J . : Clique is hard to approximate within n 1 − ε . Acta Math . 182 , 105 – 142 ( 1999 ) Ji , Y . , Xu , X . , Stormo , G . D . : A graph theoretical approach for predicting common RNA secondary structure motifs including pseudoknots in unaligned sequences . Bioinformatics 20 ( 10 ) , 1591 – 1602 ( 2004 ) Johnson , D . , Trick , M . ( eds . ) : Cliques , Coloring and Satisﬁability : Second DIMACS Implementation Chal - lenge , DIMACS Series , vol . 26 . American Mathematical Society , Providence ( 1996 ) Macambira , E . : An application of tabu search heuristic for the maximum edge - weighted subgraph problem . Ann . Oper . Res . 117 , 175 – 190 ( 2003 ) Macambira , E . , de Souza , C . : The edge - weighted clique problem : valid inequalities , facets and polyhedral computations . Eur . J . Oper . Res . 117 , 175 – 190 ( 2000 ) Pevzner , P . A . , Sze , S . - H . : Combinatorial approaches to ﬁnding subtle signals in DNA sequences . In : Pro - ceedings of the Eighth International Conference on Intelligent Systems for Molecular Biology , pp . 269 – 278 . AIAA , New York ( 2000 ) Pullan , W . : Phased local search for the maximum clique problem . J . Comb . Optim . 12 , 303 – 323 ( 2006 ) Pullan , W . , Hoos , H . : Dynamic local search for the maximum clique problem . J . Art . Intell . Res . 25 , 159 – 185 ( 2006 )