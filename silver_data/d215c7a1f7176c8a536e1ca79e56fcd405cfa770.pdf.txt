IEEE TRANSACTION PAMI 1 Probabilistic Finite - State Machines – Part I E . Vidal , F . Thollard , C . de la Higuera , F . Casacuberta and R . C . Carrasco Abstract Probabilistic ﬁnite - state machines are used today in a variety of areas in pattern recognition , or in ﬁelds to which pattern recognition is linked : computational linguistics , machine learning , time series analysis , circuit testing , computational biology , speech recognition and machine translation are some of them . In part I of this paper we survey these generative objects and study their deﬁnitions and properties . In part II , we will study the relation of probabilistic ﬁnite - state automata with other well known devices that generate strings as hidden Markov models and (cid:0) - grams , and provide theorems , algorithms and properties that represent a current state of the art of these objects . Index Terms Automata ( F . 1 . 1 . a ) , Classes deﬁned by grammars or automata ( F . 4 . 3 . b ) , Machine learning ( I . 2 . 6 . g ) , Language acquisition ( I . 2 . 6 . h ) , Language models ( I . 2 . 7 . c ) , Language parsing and under - standing ( I . 2 . 7 . d ) , Machine translation ( I . 2 . 7 . f ) , Speech recognition and synthesis ( I . 2 . 7 . g ) , Structural Pattern Recognition ( I . 5 . 1 . f ) , Syntactic Pattern Recognition ( I . 5 . 1 . g ) . I . I NTRODUCTION Probabilistic ﬁnite - state machines such as probabilistic ﬁnite - state automata ( P FA ) [ 1 ] , hidden Markov models ( H MM s ) [ 2 ] , [ 3 ] , stochastic regular grammars [ 4 ] , Markov chains [ 5 ] , (cid:1) - grams [ 3 ] , [ 6 ] , probabilistic sufﬁx trees [ 7 ] , deterministic stochastic or probabilistic automata ( D PFA ) [ 4 ] , weighted automata [ 8 ] are some names of syntactic objects which during the past years have attempted to model and generate distributions over sets of possible inﬁnite cardinality of strings , sequences , words , phrases but also terms and trees . Dr . Vidal and Dr . Casacuberta are with Dto . Sistemas Inform´aticos y Computaci´on and Instituto Tecnol´ogico de Inform´atica . Universitat Polit ` ecnica de Val ` encia . Spain . Dr . de la Higuera and Dr . Thollard are with EURISE and the Universit´e Jean Monnet . France . Dr . Carrasco is with Dto . de Lenguajes y Sistemas Inform´aticos . Universidad de Alicante . Spain . IEEE TRANSACTION PAMI 2 Their successes in a wide amount of ﬁelds ranging from computational linguistics [ 8 ] to pattern recognition [ 9 ] – [ 12 ] , and including language modeling in speech recognition [ 2 ] , [ 3 ] , [ 13 ] , bioinformatics [ 14 ] – [ 17 ] , music modeling [ 18 ] , machine translation [ 8 ] , [ 19 ] – [ 26 ] , circuit testing [ 27 ] or time series analysis [ 28 ] make these objects very valuable indeed . But as more and more researchers have entered this ﬁeld , deﬁnitions and notations have varied and not enough energy has been spent to reach a common language . For the outsider , the choice of the best ﬁtting syntactic object to describe the sort of distribution she / he is working on will seldom depend on anything else than the usual knowledge in the sub - ﬁeld or on her / his own background . There has been a number of survey papers dedicated to one or another of these models during the past thirty years [ 8 ] , [ 29 ] – [ 33 ] , but it is not always obvious through reading these papers how the models inter - relate , and where the difﬁculties lie . These difﬁculties have been theoretically analyzed in the computational learning theory literature [ 34 ] – [ 38 ] ; alas , these results , highly technical , seem not to have reached the adequate communities . A possible exception is the very recent article by Dupont et al . [ 39 ] . Furthermore , more and more folk theorems appear : H MM s might be equivalent to P FA , parsing a string in the non - deterministic case by taking the best derivation ( instead of summing up over the possible derivations ) could be a good approximation ; determinism might not ( as in common language theory ) modify the expressive power of P FA . Some of these results are true , others are not . And even in the case of the true “folk theorems” , most researchers would not know why they hold . The complexity of the objects themselves , and moreover of the underlying theories ( for instance probabilities , matrix calculus , rational power series ) , makes many of the usual results depend on some exterior theory : For example , consider the question ( studied in section IV - C ) of knowing if the mean of two regular deterministic distributions is also regular deterministic . If this was so , we could merge distributions using D PFA . But this is false and a proof can be given using results on rational series . We argue that such a proof ( albeit simpler than the one we propose ) offers little insight for people working in the ﬁeld . Knowing how to construct the counter - example is of much more use : It helps for instance to build hard cases that can be used for other problems , or to identify a sub - class of distributions where the IEEE TRANSACTION PAMI 3 counter - example will not hold . The above example gives the spirit in which the paper is written . It aims to provide an up to date theory of P FA , but also a survey where the objects themselves give the answers to the questions that naturally arise . Another preliminary question is that of justifying our interest in P FA to describe distri - butions rather than some other devices , among which the most popular may be the H MM s . Our choice of centering the survey on P FA instead of H MM s obeys to at least 3 reasons : (cid:0) Formal language theory appears to be today a widespread background knowledge to researchers and engineers in computer science . Adding probabilities to well known objects as automata permits to build on our intuitions and experiences . On the other hand H MM s are directly issued from probability theory . This parentage also affects the way the theory is constructed . P FA are built to deal with the problem of probabilizing a structured space by adding probabilities to structure , whereas H MM s might rather be considered as devices that structure probabilistic spaces by adding structure to probabilities . Neither choice is fundamentally better , but if concerned with a task where one wishes to use probabilistic devices in order to grasp the structure of the data , the ﬁrst one seems more appropriate . (cid:0) As we will prove in the second part of our paper [ 40 ] , P FA can represent the same distributions class as those modeled by the H MM s deﬁned in that section . Furthermore , they can do so in at most as much space , and the common algorithms are at least as simple . (cid:0) A third point is that as P FA are ﬁnite - state automata with weights that verify some constraints , then if the underlying automaton is deterministic , we have a deterministic probabilistic ﬁnite - state automaton ( D PFA ) . In formal language theory , there is a key difference between deterministic and non - deterministic ﬁnite - state machines which ex - tends to the probabilistic case : D PFA are very much favored because parsing with them is simpler , and also because they admit a minimal object , which in turn makes the equivalence problem tractable . A probabilistic deterministic machine also exists , which we will study with special attention . Even if these machines are not as powerful as their non - deterministic counterpart , they play an important role in a number of applications . IEEE TRANSACTION PAMI 4 Our ﬁrst objective will be to establish correct deﬁnitions for the different sorts of proba - bilistic automata ; this will be done in section II . The probabilistic automata we consider in this paper are generative processes . It should be noted that in the line of [ 41 ] probabilistic acceptors have also been studied . A simple problem as that of parsing can be upsetting : We provide in section III all required equations and algorithms dealing with parsing . The goal of the section is to study the relationship between the P FA and the strings they generate [ 42 ] , [ 43 ] . Section IV is devoted to study the intrinsic properties of P FA . Minimality issues are discussed in section IV - A . In section IV - B we will prove that there are distributions that cannot be represented by D PFA , whereas they can by P FA . Topology over regular distributions will be thoroughly studied in section V . On the one hand entropy - based measures such as the Kullback - Leibler divergence or the perplexity can arguably measure the quality of a model . On the other hand , alternative mathematical distances [ 16 ] , [ 17 ] , [ 44 ] can be used . Some of them can effectively be computed over the representants of the distributions , at least when these are deterministic . Part II [ 40 ] of the paper will be devoted to the comparison with other types of models , learning issues and the presentation of some of the extensions of the probabilistic automata . In order to make the manuscript more readable the proofs of the propositions and theorems are left to the corresponding appendixes . As all surveys this one is incomplete . In our case the completeness is particularly difﬁcult to achieve due to the enormous and increasing amount of very different ﬁelds where these objects have been used . In advance we would like to apologize to all those whose work on the subject we have not recalled . II . D EFINITIONS Probabilistic ﬁnite - state automata are chosen as key syntactic representations of the distri - butions for a certain amount of reasons : (cid:0) Formal language theory appears to be today one of the most widespread background knowledges to researchers and engineers in computer science . (cid:0) P FA can represent the same distributions as those modeled by some H MM s . IEEE TRANSACTION PAMI 5 (cid:0) P FA admit a deterministic version for which most natural problems become tractable ; Even though non - deterministic P FA are not equivalent to their deterministic counter - parts , these ( D PFA ) have been studied by a number of authors because of their particular properties . (cid:0) In practice , P FA can be used to implement other ﬁnite - state models . There is a variety of deﬁnitions regarding P FA in the literature . The ones we choose to give here are sufﬁciently general to cover most cases where the intended distribution is over the set of all strings ( and not just the set of strings of some special length ) . The cases that do not ﬁt in this deﬁnition will be analyzed in the second part of our paper [ 40 ] . In the general deﬁnition of such automata the probabilities are real numbers but , as they are intended for practical use , the probabilities are rather represented as rational numbers . Also , rational probabilities are needed for discussing about computational properties involving the concept of size of an automaton . A different line was successfully followed in [ 8 ] , where the probabilities are just a special case of abstract weights : The algebra over which the weights are computed then allows to deal with all cases , whether computable or not . We now give the formal deﬁnitions of probabilistic automata we are going to use in the rest of the paper . A . Stochastic languages Let (cid:0) be a ﬁnite alphabet and (cid:0)(cid:2)(cid:1) the set of all strings that can be built from (cid:0) , including the empty string denoted by (cid:3) . A language is a subset of (cid:0) (cid:1) . By convention , symbols in (cid:0) will be denoted by letters from the beginning of the alphabet ( (cid:4)(cid:6)(cid:5)(cid:8)(cid:7)(cid:9)(cid:5)(cid:8)(cid:10)(cid:11)(cid:5)(cid:13)(cid:12)(cid:14)(cid:12)(cid:15)(cid:12) ) and strings in (cid:0)(cid:16)(cid:1) will be denoted by end of the alphabet letters ( (cid:12)(cid:15)(cid:12)(cid:14)(cid:12)(cid:15)(cid:5)(cid:18)(cid:17)(cid:19)(cid:5)(cid:21)(cid:20)(cid:22)(cid:5)(cid:8)(cid:23) ) . The length of a string (cid:17)(cid:25)(cid:24) (cid:0)(cid:16)(cid:1) is written (cid:26) (cid:17)(cid:27)(cid:26) . The set of all strings of length (cid:1) ( resp . less than , at most (cid:1) ) will be denoted by (cid:0)(cid:29)(cid:28) ( resp . (cid:0)(cid:31)(cid:30) (cid:28) , (cid:0) " ! (cid:28) ) . A substring of (cid:17) from position # to position $ will be denoted as (cid:17) & % (cid:12)’(cid:12)’(cid:12) ( (cid:17) * ) . A substring (cid:17) + % (cid:12)’(cid:12)(cid:13)(cid:12) , (cid:17) * ) with $ . - / # is the empty string (cid:3) . A stochastic language 0 is a probability distribution over (cid:0)(cid:16)(cid:1) . We denote by 1(cid:27)2(cid:18)3(cid:16)45(cid:17) & 6 the probability 1 of a string (cid:17)7(cid:24) (cid:0)8(cid:1) under the distribution 0 . The distribution must verify 1 As usual , we will use the notation of 9 ; : = < ? > A @ as 9 : = < ? BDCE > (cid:9) @ and 9 ; : = < ? > GF(cid:13)HI @ as 9 : = < ? BDCJ > GF(cid:13)KLCEHI @ for any random variables B and K . IEEE TRANSACTION PAMI 6 (cid:0)(cid:2)(cid:1)(cid:4)(cid:3)(cid:4)(cid:5)(cid:7)(cid:6) 1(cid:27)2 ( 3 4 (cid:17) & 6 (cid:9)(cid:8) (cid:10) . If the distribution is modeled by some syntactic machine (cid:11) , the probability of (cid:17) according to the probability distribution deﬁned by (cid:11) is denoted 1(cid:27)2 (cid:13)(cid:12) (cid:16)45(cid:17) & 6 . The distribution modeled by a machine (cid:11) will be denoted 0 (cid:14)(cid:12) and simpliﬁed to 0 in a non - ambiguous context . If (cid:15) is a language over (cid:0) , and 0 a distribution over (cid:0) (cid:1) , 1(cid:27)2(cid:18)3 4 (cid:16)(cid:15) (cid:2)6 (cid:17)(cid:8) (cid:0) (cid:1)(cid:4)(cid:3)(cid:4)(cid:18) 182 ( 3(cid:16)45(cid:17) & 6 A sample (cid:19) is a multi - set of strings : as they are usually built through sampling , one string may appear more than once . We will write (cid:17) (cid:24) (cid:20)(cid:19) to indicate that ( all instances of the ) string (cid:17) is ( are ) represented in the sample . The size (cid:26) (cid:21)(cid:19) (cid:26) of sample (cid:19) , is the total number of strings in the sample and (cid:22)(cid:23)(cid:19)(cid:24)(cid:22) is the total sum of lengths of the all strings in (cid:19) . It should be noted that neither of these measures of sizes corresponds to the actual number of bits needed to encode a sample . The empirical ﬁnite - support distribution associated with (cid:19) will be denoted as 0 (cid:26)(cid:25) ; i . e . 1(cid:27)2 , 3 (cid:28)(cid:27) 4 (cid:17) & 6 (cid:29)(cid:8)(cid:31)(cid:30) 45(cid:17) & 6 ! (cid:22)(cid:26) (cid:21)(cid:19) (cid:26) , where (cid:30) 45(cid:17) & 6 is the frequency ( number of repetitions ) of (cid:17) in (cid:19) and 1(cid:27)2 , 3 (cid:28)(cid:27) 45(cid:17) & 6 (cid:17)(cid:8) # " if (cid:17) $ (cid:24) (cid:20)(cid:19) . B . Probabilistic automata We present in this section formal deﬁnitions about probabilistic automata . These are directly inspired by a number of works in machine learning and pattern recognition , including [ 1 ] , [ 4 ] , [ 13 ] , [ 45 ] – [ 47 ] . Deﬁnition 1 : A P FA is a tuple (cid:11) = % ’ & ( (cid:12) 8(cid:5) (cid:0) (cid:5) * ) + (cid:12) (cid:2)(cid:5) - , + (cid:12) 8(cid:5) * . / (cid:12) (cid:2)(cid:5) 10 / (cid:12)32 , where : (cid:0) & 4(cid:12) is a ﬁnite set of states ; (cid:0) (cid:0) is the alphabet ; (cid:0) ) (cid:13)(cid:12)657 & 4(cid:12)98 (cid:0) 8 : & ; (cid:12) is a set of transitions ; (cid:0) , + (cid:12)6 < = & 4(cid:12)(cid:20) > @ ? BA ( initial - state probabilities ) ; (cid:0) 0C(cid:12)6 < = ) (cid:13)(cid:12)(cid:20) > D ? EA ( transition probabilities ) ; (cid:0) . C(cid:12)6 < = & 4(cid:12)(cid:20) > @ ? EA ( ﬁnal - state probabilities ) . It should be noted that probabilities may be null ( " J(cid:24) 6 ? FA ) and therefore functions , G(cid:12) , . / (cid:12) and 0C(cid:12) can be considered as total . Similarly , for the sake of notation simpliﬁcation , 0H(cid:12) is assumed to be extended with 03(cid:12) (cid:16)4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - ILK ? 6 (cid:17)(cid:8)(cid:2) " for all 4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - IMK 6 4N (cid:24) : ) + (cid:12) . , + (cid:12) , 0 / (cid:12) and . / (cid:12) are functions such that : O P (cid:3)(cid:4)QSR , (cid:23)(cid:12) 4 JI 6 H(cid:8)T(cid:10) (cid:5) IEEE TRANSACTION PAMI 7 and (cid:0) I (cid:24) : & 4(cid:12) (cid:5) . / (cid:12) (cid:16)4 JI 6 (cid:2)(cid:1) O (cid:3) (cid:3) (cid:5) (cid:4) P (cid:6)(cid:5) (cid:3) QSR 0 / (cid:12) (cid:16)4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K 6 7(cid:8) (cid:10) (cid:12) In what follows , the subscript (cid:12) will be dropped when there is no ambiguity . A generic state of & will be denoted by I without subindex , the speciﬁc states in & will be denoted as I (cid:8)(cid:7) ’(cid:5) - I (cid:10)(cid:9) (cid:12)(cid:13)(cid:12)’(cid:12)(cid:13)(cid:5) - I (cid:12)(cid:11) Q (cid:11) (cid:13)(cid:14)(cid:9) and a sequence of states of length $ will be denoted by 4 (cid:6)(cid:15)(cid:16)(cid:9) (cid:5) (cid:17)(cid:15)(cid:19)(cid:18) ’(cid:5)(cid:13)(cid:12)’(cid:12)’(cid:12)(cid:13)(cid:5) (cid:20)(cid:15) ) 6 , where (cid:15) (cid:13) % (cid:24) & for (cid:10) (cid:22)(cid:21) 7 # (cid:23)(cid:21) $ . As will be seen in the next section , the above automata deﬁnition corresponds to models which are generative in nature . This is in contrast with the standard deﬁnition of automata in the conventional ( non probabilistic ) formal language theory , where strings are generated by grammars while the automata are the accepting devices . It is not difﬁcult to prove that the deﬁnition adopted in this article is equivalent to the deﬁnition of stochastic regular grammar [ 9 ] , [ 32 ] . From a probabilistic point of view , the process of ( randomly ) accepting a given string is essentially different from the process of generating a ( random ) string . Probabilistic acceptors are deﬁned in [ 9 ] , [ 41 ] , but they have only seldom been considered in syntactic pattern recognition or in ( probabilistic ) formal language theory . Typically , P FA are represented as directed labeled graphs . Figure 1 shows of a P FA with four states , & (cid:8) (cid:25)(cid:24) LI (cid:8)(cid:7) ’(cid:5) - I (cid:26)(cid:9) (cid:5) I (cid:8)(cid:18) ’(cid:5) - I (cid:28)(cid:27)(cid:8)(cid:29) , only one initial state ( i . e . a state I with , 4 I 6 (cid:31)(cid:30) " ) , I (cid:7) , and a four - symbol alphabet , (cid:0) (cid:8) ! (cid:24) (cid:11)(cid:4)(cid:6)(cid:5)(cid:8)(cid:7)(cid:9)(cid:5)(cid:8)(cid:10)A(cid:5) (cid:20) " # (cid:29) . The real numbers in the states and in the arrows are the ﬁnal - state and the transition probabilities , respectively . PSfrag replacements I (cid:28)(cid:7) I (cid:10)(cid:9) I (cid:28)(cid:18) I (cid:28)(cid:27) ( 1 / 16 ) ( 1 / 5 ) ( 1 ) ( 1 ) a ( 1 / 2 ) a ( 1 / 8 ) b ( 2 / 5 ) c ( 1 / 4 ) c ( 2 / 5 ) a ( 1 / 2 ) d ( 1 / 16 ) $ & % < ( ’ * ) = @ * C , + - / . C 10(cid:17)2 $ & % < ( ’ & 3 (cid:14) @ C 40 Fig . 1 . Graphical representation of a P FA . A particular case of P FA arises when the underlying graph is acyclic . This type of models are known as acyclic probabilistic ﬁnite - state automata ( APFA ) [ 48 ] . On the other hand , a more general model is deﬁned in the next subsection . IEEE TRANSACTION PAMI 8 C . (cid:3) - Probabilistic ﬁnite - state automata ( (cid:3) - P FA ) Deﬁnition 2 : A (cid:3) - P FA (cid:11) is a tuple % ’ & (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) - , + (cid:5) * . (cid:29)(cid:5) * 0 2 , where & , (cid:0) , , and . are deﬁned as for P FA , but ) is extended to ) (cid:1)(cid:0) 7 & 8 4 (cid:0) (cid:3)(cid:2) (cid:24) (cid:3) (cid:29) 6 F8 : & . 0 and . verify a similar normalization as for P FA with the sum for all (cid:4)J(cid:24) (cid:0) extended to include (cid:3) : (cid:0) I (cid:24) : & (cid:5) (cid:24) . 4 JI 6 (cid:2)(cid:1) O (cid:3) (cid:3)(cid:4)(cid:5) (cid:5)(cid:4)(cid:7)(cid:6)(cid:9)(cid:8)(cid:11)(cid:10) (cid:4) P (cid:5) (cid:3) Q 0 4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K 6 7(cid:8) (cid:10) (cid:12) (cid:3) - P FA appear as natural objects when combining distributions . They are nevertheless not more powerful than P FA in the sense that they generate the same distributions ( see sec - tion IV - C ) . (cid:3) - P FA introduce speciﬁc problems , in particular , when sequences of transitions labeled with (cid:3) are considered . In section III - C some of these problems are analyzed . When considering (cid:3) - P FA a few concepts will be needed : Deﬁnition 3 : For any (cid:3) - P FA (cid:11) (cid:8) % (cid:16) & (cid:5) (cid:0) (cid:5) - ) A(cid:5) , (cid:22)(cid:5) - . (cid:5) - 0(cid:26)2 (cid:0) A (cid:3) - transition is any transition labeled by (cid:3) ; (cid:0) A (cid:3) - loop is a transition of the form 4 I (cid:5)(cid:8)(cid:3)(cid:19)(cid:5) - I 6 ; (cid:0) A (cid:3) - cycle is a sequence of (cid:3) - transitions from ) : 4 (cid:6)(cid:15) (cid:9) % (cid:13)(cid:12) (cid:5) (cid:3) (cid:5) (cid:17)(cid:15) (cid:13) % (cid:15)(cid:14) (cid:21)6 (cid:5)A4 (cid:6)(cid:15) (cid:13) % (cid:15)(cid:14) (cid:5) (cid:3) (cid:5) (cid:17)(cid:15) (cid:13) % (cid:17)(cid:16) (cid:8)6 (cid:5)’(cid:12)’(cid:12)’(cid:12)I(cid:5)A4 (cid:6)(cid:15) (cid:13) % (cid:15)(cid:18) A(cid:5) (cid:3) (cid:5) (cid:17)(cid:15) (cid:13) % (cid:13)(cid:12) ( 6 , where (cid:0) $ < = " - $ - (cid:20)(cid:19) 4 (cid:15) ’ % (cid:22)(cid:21) , (cid:3) (cid:5) (cid:17)(cid:15) (cid:13) % (cid:22)(cid:21)(cid:9)(cid:23) (cid:12) 6 (cid:24) : ) . D . Deterministic probabilistic ﬁnite - state automata ( D PFA ) Even though determinism ( as we shall show later ) restricts the class of distributions that can be generated , we introduce deterministic probabilistic ﬁnite - state automata because of the following reasons : (cid:0) Parsing is easier as only one path has to be followed . (cid:0) Some intractable problems ( ﬁnding the most probable string , comparing two distribu - tions ) become tractable . (cid:0) There are a number of positive learning results for D PFA that do not hold for P FA . Deﬁnition 4 : A P FA (cid:11)(cid:31)(cid:8) % ’ & (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) - , + (cid:5) * . (cid:29)(cid:5) * 0 2 is a D PFA , if : IEEE TRANSACTION PAMI 9 (cid:0)(cid:1)(cid:0) I (cid:28)(cid:7) " (cid:24) & ( initial state ) , such that , & 4 I (cid:19)(cid:7) 6 (cid:17)(cid:8) (cid:10) ; (cid:0) (cid:0) I (cid:24) & (cid:5) (cid:0) (cid:4) (cid:24) (cid:0) (cid:5) (cid:26) (cid:24) LI K < (cid:22)4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K 6(cid:16)(cid:24) : ) (cid:16)(cid:29) . (cid:26) (cid:21) (cid:10) . In a D PFA , a transition 4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K 6 is completely deﬁned by I and (cid:4) and a D PFA can be more simply denoted by % ’ & (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) - I (cid:19)(cid:7) ’(cid:5) * . (cid:29)(cid:5) * 0 2 . A particular case of D PFA is the probabilistic preﬁx tree automaton ( PPTA ) where the underlying graph is a tree rooted at the initial state I (cid:7) . E . Size of a P FA If P FA are to be implemented then we are concerned with two issues . On the one hand all probabilities have to be encoded and thus the range of functions , , . and 0 should be (cid:2) ( A instead of ? EA . A second point is that in order to compute the complexity of an algorithm , we must be able to give the size of a P FA ( or D PFA , (cid:3) - P FA ) . The complexity should be polynomially linked with the number of bits needed to encode the P FA in a reasonable way . It follows that in the case of D PFA a correct measure of the size is the sum of the number (cid:1) of states , the size (cid:26) (cid:0) (cid:26) of the alphabet and the number of bits needed to encode all the non null probabilities in the automaton . In the case of P FA or (cid:3) - P FA , because of non - determinism , the number of transitions in the automaton should also appear . F . Distributions modeled by P FA P FA are stochastic machines that may not generate a probability space but a subprobability space over the set of ﬁnite - strings (cid:0) (cid:1) . Given a P FA ( or (cid:3) - P FA ) (cid:11) , the process of generating a string proceeds as follows : (cid:0) Initialization : Choose ( with respect to a distribution , ) one state I (cid:10)(cid:7) in & as the initial state . Deﬁne I (cid:8)(cid:7) as the current state . (cid:0) Generation : Let I be the current state . Decide whether to stop , with probability . 4 JI 6 , or to produce a move 4 I (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - IMK 6 with probability 0 4 JI * (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - IMK ? 6 where (cid:4) . (cid:24) (cid:0) (cid:2) (cid:24) (cid:3) (cid:29) and IMK (cid:22)(cid:24) : & . Output (cid:4) and set the current state to I K . In some cases , this process may never end ; i . e . it may generate strings of unbounded length ( see section II - G ) . If P FA generates ﬁnite - length strings , a relevant question is that of computing the probability that a P FA (cid:11) generates a string (cid:17) (cid:24) (cid:0) (cid:1) . To deal with this problem , IEEE TRANSACTION PAMI 10 let (cid:0) (cid:26)(cid:8) 4 (cid:15)(cid:19)(cid:7) ’(cid:5)(cid:18)(cid:17) K (cid:9) (cid:5) (cid:17)(cid:15)(cid:12)(cid:9) (cid:5)(cid:18)(cid:17) K (cid:18) (cid:5) (cid:17)(cid:15)(cid:19)(cid:18) ’(cid:5)’(cid:12)’(cid:12)’(cid:12)I(cid:5) (cid:17)(cid:15) (cid:2)(cid:1) (cid:28)(cid:13)(cid:14)(cid:9) (cid:8)(cid:5) , (cid:17) K (cid:1) (cid:5) (cid:17)(cid:15) (cid:2)(cid:1) (cid:9)6 be a path for (cid:17) in (cid:11) ; that is , there is a sequence of transitions 4 (cid:6)(cid:15) (cid:7) (cid:9)(cid:5) , (cid:17) K (cid:9) (cid:5) (cid:17)(cid:15)(cid:12)(cid:9) , 6 , 4 (cid:15) (cid:9) (cid:5) , (cid:17) K (cid:18) (cid:5) (cid:17)(cid:15)(cid:19)(cid:18) 6 (cid:5) (cid:12)’(cid:12)’(cid:12)(cid:13)(cid:5)(cid:9)4 (cid:6)(cid:15) (cid:2)(cid:1) (cid:28)(cid:13)(cid:14)(cid:9) (cid:5)(cid:18)(cid:17) K (cid:1) (cid:5) (cid:17)(cid:15) (cid:2)(cid:1) (cid:9)6 (cid:24) 6 ) such that (cid:17) (cid:8) (cid:17) K (cid:9) (cid:17) K (cid:18) (cid:12)’(cid:12)’(cid:12)(cid:18)(cid:17) K (cid:1) ( note that in general (cid:26) (cid:17)(cid:27)(cid:26) (cid:21) (cid:19) because some (cid:17) K ) can be (cid:3) ) . To simplify the notation , the symbols (cid:17) K ) in the sequences of transitions will be omitted if not needed . The probability of generating such a path is : 1(cid:27)2 ! (cid:12) 4 (cid:3)(cid:0) 6 (cid:17)(cid:8)(cid:2) , & 4 (cid:6)(cid:15)(cid:19)(cid:7) 6 (cid:5)(cid:4) (cid:6) (cid:1) (cid:7) ) (cid:9)(cid:8) (cid:9) 0 . 4 (cid:15) (cid:8) ) (cid:17)(cid:13)(cid:14)(cid:9) (cid:8)(cid:5) , (cid:17) K ) (cid:5) (cid:20)(cid:15) ) 6 (cid:11)(cid:10)(cid:12)(cid:4) L . 4 (cid:6)(cid:15) (cid:2)(cid:1) (cid:13)6 (cid:12) ( 1 ) Deﬁnition 5 : A valid path in a P FA (cid:11) is a path for some (cid:17) (cid:24) (cid:0) (cid:1) with probability greater than zero . The set of valid paths in (cid:11) will be denoted as (cid:13) ; (cid:12) . In general , a given string (cid:17) can be generated by (cid:11) through multiple valid paths . Let (cid:13) (cid:12) (cid:16)45(cid:17) & 6 denote 2 the set of all the valid paths for (cid:17) in (cid:11) . The probability of generating (cid:17) with (cid:11) is 1(cid:27)2 (cid:12) 45(cid:17) & 6 (cid:17)(cid:8) O (cid:14) (cid:3) (cid:2)(cid:15) R (cid:17)(cid:16) (cid:1) (cid:19)(cid:18) 1(cid:27)2 (cid:12) 4 (cid:20)(cid:0) 6 (cid:12) ( 2 ) If (cid:0) (cid:1) 1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:17)(cid:8)T(cid:10) , then (cid:11) deﬁnes a distribution 0 on (cid:0) (cid:1) ; otherwise the model does not have much interest . The conditions which guarantee this will be discussed in section II - G . A probabilistic ﬁnite - state automaton is ambiguous if a string (cid:17) exists such that (cid:26) (cid:21)(cid:13) ( (cid:12) 45(cid:17) & 6 (cid:26) (cid:30) (cid:2)(cid:10) . For the P FA of ﬁgure 1 there is only one valid path for the string (cid:4) (cid:10) (cid:10)I(cid:7) : (cid:13) (cid:12) 4 (cid:4) * (cid:10) (cid:10) (cid:7)I6 B(cid:8) ! (cid:24) 4 I (cid:8)(cid:7) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:10)(cid:9) (cid:5)(cid:8)(cid:10)A(cid:5) - I (cid:26)(cid:9) (cid:8)(cid:5)(cid:8)(cid:10)(cid:11)(cid:5) I (cid:26)(cid:9) (cid:5)(cid:8)(cid:7)(cid:9)(cid:5) - I (cid:28)(cid:27) 6 (cid:17)(cid:29) . The probability of (cid:4) * (cid:10) (cid:10) (cid:7) is : 1(cid:27)2 ! (cid:12) 4 (cid:4) * (cid:10) (cid:10) (cid:7)I6 (cid:8) , & 4 JI (cid:28)(cid:7) 6 (cid:5)(cid:4) L0 4 JI (cid:8)(cid:7) (cid:13)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:26)(cid:9) (cid:18)6 (cid:5)(cid:4) L0 4 JI (cid:10)(cid:9) (cid:5)(cid:8)(cid:10)A(cid:5) - I (cid:26)(cid:9) , 6 (cid:5)(cid:4) L0 4 JI (cid:10)(cid:9) (cid:5)(cid:8)(cid:10)A(cid:5) - I (cid:26)(cid:9) ( 6 (cid:5)(cid:4) L0 . 4 I (cid:26)(cid:9) (cid:5)(cid:8)(cid:7)(cid:9)(cid:5) - I (cid:28)(cid:27) 6 (cid:5)(cid:4) L . 4 JI (cid:8)(cid:27) (cid:8)6 (cid:8) (cid:10) (cid:12) " (cid:22)(cid:4) L " (cid:12) (cid:10) (cid:24)(cid:23)(cid:26)(cid:25)(cid:27)(cid:4) L " (cid:12) (cid:29)(cid:28)(cid:22)(cid:4) L " (cid:12) (cid:29)(cid:28)(cid:30)(cid:4) L " (cid:12) (cid:31)(cid:28) (cid:4) (cid:10) (cid:12) " (cid:8) " (cid:12) " " (cid:26) ! J(cid:12) For the string (cid:4) , there are two valid paths : (cid:13) 4(cid:12) 4 (cid:4) * 6 ( (cid:8) (cid:24) 4 JI (cid:28)(cid:7) ’(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:26)(cid:9) ( 6 (cid:5)A4 I (cid:8)(cid:7) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:28)(cid:18) 6 (cid:17)(cid:29) . Therefore , the P FA of ﬁgure 1 is ambiguous . The probability of (cid:4) is then : 1(cid:27)2 ! (cid:12) (cid:16)4 (cid:4) * 6 (cid:8) , & 4 JI (cid:28)(cid:7) 6 (cid:5)(cid:4) L0 . 4 I (cid:8)(cid:7) ’(cid:5)(cid:21)(cid:4) + (cid:5) I (cid:26)(cid:9) , 6 (cid:5)(cid:4) L . 4 JI (cid:10)(cid:9) , 6 (cid:2)(cid:1) , & 4 JI (cid:28)(cid:7) 6 (cid:5)(cid:4) L0 . 4 I (cid:8)(cid:7) ’(cid:5)(cid:21)(cid:4) + (cid:5) I (cid:8)(cid:18) 6 (cid:5)(cid:4) L . 4 JI (cid:28)(cid:18) 6 (cid:8) (cid:10) (cid:12) " " (cid:4) L " (cid:12) (cid:10) (cid:24)(cid:23)(cid:26)(cid:25)(cid:27)(cid:4) L " (cid:12) # (cid:23) (cid:1) (cid:10) (cid:12) " (cid:22)(cid:4) L " (cid:12) $ (cid:25)(cid:27)(cid:4) (cid:7)(cid:10) (cid:12) " (cid:8) " (cid:12) # (cid:25)(cid:26)(cid:23)(cid:26)(cid:25) E(cid:12) 2 In unambiguous context , % R < ’ & (cid:8) @ will be extended in section III to also mean the set of sub - paths that generate a substring & , these sub - paths will be allowed to start or end in states with null initial or ﬁnal probabilities , respectively . IEEE TRANSACTION PAMI 11 The deﬁnition of D PFA directly yields : Proposition 1 : No D PFA is ambiguous . We conclude this section by deﬁning classes of string distributions on the base of the corresponding generating automata . Deﬁnition 6 : A distribution is regular if it can be generated by some P FA . An alternative deﬁnition could be used : A regular distribution is a probabilistic distribution on a regular language . However , we do not assume this deﬁnition because it would present the following problem : There would exist regular distributions which could not be generated by any P FA . This result can be easily derived from [ 32 ] . Deﬁnition 7 : A distribution is regular deterministic if it can be generated by some D PFA . Deﬁnition 8 : Two P FA are equivalent if they generate the same distribution . From the deﬁnition of P FA and D PFA the following hierarchy follows : Proposition 2 : A regular deterministic distribution is also a regular distribution The reverse of this proposition is not always true ( see proposition 10 , section IV ) . It is interesting to note that APFA and PPTA only generate distributions on ﬁnite sets of strings . Moreover , given any ﬁnite sample (cid:19) , a PPTA can be easily constructed which generates the empirical distribution 0 (cid:25) [ 4 ] . G . Consistency of P FA The question of consistency is “do the probabilities provided by an automaton according to equation ( 2 ) sum up to 1 ? ” . In early papers in the ﬁeld the question was supposed to be simple [ 31 ] or on the contrary complex when concerned with stochastic context - free grammars ; in that setting the consistency can be checked by analyzing the behavior of the underlying probability matrix [ 32 ] , [ 49 ] . The conditions needed for a P FA to be consistent are established as follows [ 39 ] : Deﬁnition 9 : A state of a P FA (cid:11) is useful if it appears in at least one valid path of (cid:13) ( (cid:12) . Proposition 3 : A P FA is consistent if all its states are useful . Note that the condition of proposition 3 is sufﬁcient but not necessary : A non useful state is harmless if it is inaccessible ; i . e . , if no string can reach it with probability greater than zero . Once the syntactic models and the corresponding string distributions have been deﬁned , we IEEE TRANSACTION PAMI 12 discuss in the next section how to compute the probability of a given string in the distribution modeled by a given probabilistic automaton . III . P ARSING ISSUES We understand parsing as the computation of equation ( 2 ) in page 10 . In the case of D PFA , the algorithms are simpler than for non - deterministic P FA . In the ﬁrst case , the time computation cost of equation ( 2 ) ( and that of equation ( 6 ) in this section ) are in (cid:0) 4 (cid:26) (cid:17)(cid:27)(cid:26) 6 . This computational cost does not depend on the number of states since at each step the only possible next state is computed with a cost in (cid:0) E4 (cid:10) A6 . In general , as will be discussed below , the probability that a string (cid:17) is generated by a P FA , given by equation ( 2 ) , can be computed efﬁciently by using dynamic programming . Another problem related with parsing is the computation of the probability of a substring in a P FA [ 46 ] . A . Parsing with P FA The probabilities assigned to the paths in (cid:13) 4(cid:12) ( section II - F ) can be used to compute efﬁciently 1(cid:27)2 ! (cid:12) 45(cid:17) & 6 . The idea is similar to the one proposed for H MM s [ 50 ] by deﬁning (cid:1) (cid:1) 45 # (cid:18)(cid:5) - I 6 (cid:0) I L(cid:24) & and " (cid:21) # (cid:21) (cid:26) (cid:17)(cid:27)(cid:26) as the probability of generating the preﬁx (cid:17) (cid:9) & (cid:12)’(cid:12)’(cid:12) , (cid:17)(cid:6) % and reaching state I : 3 (cid:1) (cid:1) 4 # , (cid:5) - I 6 H(cid:8) O (cid:16) (cid:3)(cid:2) ) (cid:4) (cid:2) (cid:12) (cid:4) (cid:5)(cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:4) (cid:2) 3 (cid:18) (cid:3) (cid:2)(cid:15) R (cid:16) (cid:1) (cid:12) (cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:1) 3 (cid:18) , 4 (cid:15)(cid:19)(cid:7) 6 (cid:5)(cid:4) % (cid:7) ) (cid:9)(cid:8) (cid:9) 0 4 (cid:6)(cid:15) (cid:8) ) (cid:17)(cid:13)(cid:14)(cid:9) (cid:21)(cid:5)(cid:18)(cid:17) * ) (cid:11)(cid:5) (cid:20)(cid:15) ) 6 (cid:5)(cid:4) (cid:7)(cid:10) 4 I (cid:5) (cid:20)(cid:15) ’ % 6G(cid:5) ( 3 ) where (cid:10) 4 JI * (cid:5) - I K 6 (cid:29)(cid:8) (cid:10) if I (cid:8)TI K and 0 if I(cid:20)N(cid:8)TI K . In this case , the extended (cid:13) 4(cid:12) to sub - paths is used . Equation ( 3 ) can be calculated with the following algorithm : Algorithm 3 . 1 : Forward algorithm (cid:1) (cid:1) 4 J " (cid:5) - I 6 (cid:8) , & 4 JI 6 (cid:5) (cid:1) (cid:1) 45 # (cid:18)(cid:5) - I 6 (cid:8) O P (cid:5) (cid:3) Q (cid:1) (cid:1) 4 # (cid:7)(cid:6) (cid:10) (cid:5) - I K 6 (cid:5)(cid:4) L0 4 JI K (cid:5)(cid:18)(cid:17)(cid:6) % (cid:5) - I 6 (cid:5) (cid:10) (cid:21) 7 # (cid:23)(cid:21) (cid:26) (cid:17)(cid:27)(cid:26) (cid:12) For a string (cid:17) (cid:24) (cid:0) (cid:1) , the following proposition is straightforward : 3 It is assumed the notation : (cid:8) (cid:21) 3 (cid:10)(cid:9) (cid:18) (cid:12)(cid:11) 3 C , + , if (cid:13)(cid:15)(cid:14)(cid:17)(cid:16) . IEEE TRANSACTION PAMI 13 Proposition 4 : 1(cid:27)2 (cid:12) 4 (cid:17) & 6 (cid:17)(cid:8) O P (cid:3)(cid:4)Q (cid:1) (cid:1) 4 (cid:26) (cid:17)(cid:27)(cid:26) (cid:5) - I 6 (cid:4) L . . 4 I 6 (cid:12) ( 4 ) There is another way of computing 182 - (cid:12) 45(cid:17) & 6 by introducing (cid:0) (cid:1) 4 # , (cid:5) - I 6 as the probability of generating the sufﬁx (cid:17) + % A (cid:9) (cid:12)’(cid:12)’(cid:12) ( (cid:17) (cid:11) (cid:1) (cid:11) from the state I : (cid:0) (cid:1) 4 # , (cid:5) - I 6 B(cid:8) O (cid:16) (cid:2) 3 (cid:4) (cid:5)(cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:4) (cid:2) (cid:2)(cid:1)(cid:3)(cid:4)(cid:1) (cid:18) (cid:3) (cid:2)(cid:15) R (cid:16) (cid:1) 3 (cid:23) (cid:12) (cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:1) (cid:5)(cid:1)(cid:3)(cid:4)(cid:1) (cid:18) (cid:10) 4 JI * (cid:5) (cid:17)(cid:15) (cid:13) % 56 (cid:5)(cid:4) (cid:6)(cid:7) (cid:11) (cid:1) (cid:11) (cid:7) ) (cid:8) % A (cid:9) 0 4 (cid:6)(cid:15) (cid:8) ) (cid:17)(cid:13)(cid:14)(cid:9) (cid:21)(cid:5)(cid:18)(cid:17) * ) (cid:9)(cid:5) (cid:17)(cid:15) (cid:8) ) (cid:13)6 (cid:9)(cid:8)(cid:10) (cid:4) L . 4 (cid:6)(cid:15) (cid:11) (cid:1) (cid:11) 6 (cid:5) ( 5 ) that can be calculated by Algorithm 3 . 2 : Backward algorithm (cid:0) (cid:1) 4(cid:8)(cid:26) (cid:17)(cid:27)(cid:26) (cid:5) - I 6 (cid:8) . 4 JI 6 (cid:5) (cid:0) (cid:1) 4 # , (cid:5) - I 6 (cid:8) O P (cid:5) (cid:3)(cid:4)Q (cid:0) (cid:1) 4 # / (cid:1) (cid:10) (cid:5) - I K 6 (cid:5)(cid:4) L0 . 4 I (cid:5) , (cid:17)(cid:6) % (cid:5) - I K 6 (cid:5) " 1(cid:21) 7 # (cid:23)(cid:21) (cid:26) (cid:17)(cid:27)(cid:26) (cid:6) (cid:9)(cid:10) (cid:12) And the corresponding proposition : Proposition 5 : 1(cid:27)2 (cid:12) 4 (cid:17) & 6 (cid:17)(cid:8) O P (cid:3)(cid:4)Q , & 4 JI 6 (cid:4) (cid:5)(cid:0) (cid:1) 4 (cid:16) " (cid:5) - I 6 (cid:12) The computation of (cid:1) and (cid:0) can be performed with a time complexity of (cid:0) 4 (cid:26) (cid:17)(cid:27)(cid:26) (cid:4) (cid:26) ) (cid:6)(cid:26) 6 , where (cid:26) (cid:17)(cid:27)(cid:26) is the length of (cid:17) and (cid:26) ) + (cid:26) is the number of transitions in (cid:11) . B . Searching for the optimal path for a string in a P FA In equation ( 2 ) , the probability of generating (cid:17) with (cid:11) is deﬁned as a sum of the probabilities of all valid paths that deal with (cid:17) . However , it can be interesting to search for a valid path (cid:11) (cid:0) that generates (cid:17) with highest probability , (cid:11) (cid:0) ( (cid:8) argmax (cid:14) (cid:3) (cid:15) R (cid:16) (cid:1) (cid:19)(cid:18) 1(cid:27)2 (cid:12) 4 (cid:3)(cid:0) 6 (cid:12) ( 6 ) The probability of this optimal path (cid:11) (cid:0) will be denoted as (cid:12) 1(cid:27)2 (cid:12) 4 (cid:17) & 6 . The relation between (cid:12) 1(cid:27)2 (cid:12) 4 (cid:17) & 6 and 1(cid:27)2 ! (cid:12) (cid:16)4 (cid:17) & 6 from equation ( 2 ) has been studied in [ 51 ] and [ 52 ] . When “good” models are used in practice , the probability given by equation ( 2 ) is often mainly distributed among a few paths close to the optimal one . In that case , the probability of the optimal path is an adequate approximation to the probability given by equation ( 2 ) . The optimal path (cid:11) (cid:0) is of practical interest in many pattern recognition applications , since useful information can be attached to the states and in many cases the problem is to search for IEEE TRANSACTION PAMI 14 the information that is in the optimal path . This path is also useful for an efﬁcient estimation of the parameters of the model from a training sample ( see section III - A of part II ) . The computation of (cid:12) 1(cid:27)2 (cid:12) 45(cid:17) & 6 can be efﬁciently performed by deﬁning a function (cid:0) (cid:1) 4 # (cid:18)(cid:5) I 6 (cid:0) I (cid:24) & , " (cid:21) # (cid:21) (cid:26) (cid:17)(cid:27)(cid:26) , as the probability of generating the preﬁx (cid:17) (cid:9) (cid:12)(cid:13)(cid:12)’(cid:12) , (cid:17)(cid:6) % through the best path and reaching state I : (cid:0) (cid:1) 4 # (cid:18)(cid:5) I 6 (cid:17)(cid:8) (cid:1)(cid:3)(cid:2)(cid:5)(cid:4) (cid:16) (cid:2) ) (cid:4) (cid:2) (cid:12) (cid:4) (cid:5)(cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:4) (cid:2) 3 (cid:18) (cid:3) (cid:15) R (cid:16) (cid:1) (cid:12) (cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:1) 3 (cid:18) , & 4 (cid:6)(cid:15)(cid:19)(cid:7) 6 (cid:5)(cid:4) % (cid:7) ) (cid:8) (cid:9) 0 . 4 (cid:15) ) (cid:20)(cid:13)(cid:14)(cid:9) (cid:8)(cid:5)(cid:18)(cid:17) * ) A(cid:5) (cid:17)(cid:15) (cid:8) ) 6 (cid:5)(cid:4) (cid:7)(cid:10) 4 JI * (cid:5) (cid:17)(cid:15) (cid:13) % 6 (cid:5) ( 7 ) An algorithmic solution is given by the following algorithm . Algorithm 3 . 3 : Viterbi algorithm (cid:0) (cid:1) 4 J " (cid:5) - I 6 (cid:8) , & 4 JI 6 (cid:5) (cid:0) (cid:1) 45 # (cid:18)(cid:5) - I 6 (cid:8) (cid:1)(cid:6)(cid:2)(cid:5)(cid:4) P (cid:5) (cid:3) Q (cid:0) (cid:1) 4 # (cid:7)(cid:6) (cid:10) (cid:5) - I K 6 (cid:5)(cid:4) L0 4 JI K (cid:5)(cid:18)(cid:17)(cid:6) % (cid:5) - I 6 (cid:5) (cid:10) (cid:21) 7 # (cid:23)(cid:21) (cid:26) (cid:17)(cid:27)(cid:26) (cid:5) with the corresponding proposition : Proposition 6 : (cid:12) 1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:17)(cid:8) (cid:7)(cid:1)(cid:3)(cid:2)(cid:5)(cid:4) P (cid:3)(cid:4)Q (cid:0) (cid:1) 4 (cid:26) (cid:17)(cid:27)(cid:26) (cid:5) - I 6 (cid:4) L . 4 JI 6 (cid:12) The computation of (cid:0) presents the same time complexity as the computation of (cid:1) or (cid:0) , but the implementation of the last ones may lead to numerical precision problems , which can be easily circumvented in the implementation of the ﬁrst one by using logarithms . C . Parsing with (cid:3) (cid:6) P FA Given a (cid:3) (cid:6) P FA (cid:11) (cid:8) % ’ & (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) - , + (cid:5) * . (cid:29)(cid:5) * 0 2 and a string (cid:17) (cid:24) (cid:0) (cid:1) , we want to compute the probability 182 ! (cid:12) (cid:16)45(cid:17) & 6 that (cid:11) generates (cid:17) . We can introduce (cid:1) K (cid:1) 45 # (cid:18)(cid:5) - I 6 in a similar way as for equation ( 3 ) as the probability of generating the preﬁx (cid:17) (cid:9) (cid:12)’(cid:12)(cid:13)(cid:12) , (cid:17)(cid:6) % and reaching state I : (cid:1) K (cid:1) 4 # , (cid:5) - I 6 H(cid:8) O (cid:16) (cid:3)(cid:2) ) (cid:4) (cid:2) (cid:12) (cid:4) (cid:5)(cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:4) (cid:2) 3 (cid:5) (cid:18) (cid:3) (cid:15) R (cid:16) (cid:1) (cid:12) (cid:4)(cid:5)(cid:4)(cid:5)(cid:4) (cid:1) 3 (cid:18) , & 4 (cid:6)(cid:15)(cid:19)(cid:7) 6 (cid:5)(cid:4) % (cid:5) (cid:7) ) (cid:8) (cid:9) 0 4 (cid:6)(cid:15) (cid:8) ) (cid:20)(cid:13)(cid:14)(cid:9) (cid:8)(cid:5)(cid:18)(cid:17) K ) (cid:5) (cid:17)(cid:15) (cid:8) ) I6 (cid:5)(cid:4) (cid:7)(cid:10) 4 JI * (cid:5) (cid:17)(cid:15) (cid:13) % (cid:5) 6 (cid:5) ( 8 ) Here , (cid:13) (cid:12) denotes the set of sub - paths rather than full paths . On the other hand , (cid:17) K (cid:8) (cid:5) (cid:8) (cid:17) (cid:8) or (cid:17) SK (cid:8) (cid:5) (cid:8) (cid:3) with (cid:10) (cid:21) (cid:7)(cid:9) (cid:21) 7 # (cid:23)(cid:21) 7 # (cid:16)K , (cid:10) (cid:22)(cid:21) (cid:7)(cid:9) K (cid:21) 7 # JK and (cid:17) SK (cid:9) (cid:12)(cid:13)(cid:12)’(cid:12) , (cid:17) SK % (cid:5) (cid:8) 7(cid:17) (cid:9) (cid:12)(cid:13)(cid:12)’(cid:12) , (cid:17)(cid:6) % . In this case the computation of (cid:1) K (cid:1) 4 # , (cid:5) - I 6 can be performed from (cid:1) K (cid:1) 45 # (cid:6) (cid:10) (cid:5) - ILK ? 6 through a new function (cid:1) (cid:8) (cid:1) 4 # , (cid:5) $ (cid:5) - I 6 , that IEEE TRANSACTION PAMI 15 represents the probability of generating ( maybe with (cid:3) (cid:6) transitions ) the preﬁx (cid:17) (cid:9) & (cid:12)’(cid:12)’(cid:12) , (cid:17)(cid:6) % of (cid:17) and then to use $ J(cid:3) (cid:6) transitions to reach I ( that is , the last $ transitions are (cid:3) (cid:7)(cid:6) transitions ) . This function can be deﬁned as : (cid:1) (cid:8) (cid:1) 4 # (cid:18)(cid:5) - " (cid:5) - I 6 (cid:8) (cid:0) (cid:1)(cid:3)(cid:2) , 4 I 6 if # 3(cid:8)(cid:2) " (cid:0) P (cid:6)(cid:5) (cid:1) K (cid:1) 4 # (cid:6) (cid:9)(cid:10) (cid:5) - IMK 6 (cid:5)(cid:4) L0 4 JILK (cid:5)(cid:18)(cid:17)(cid:6) % (cid:5) - I 6 if # N(cid:8)(cid:2) " (cid:5) ( 9 ) (cid:1) (cid:8) (cid:1) 4 # , (cid:5) $ (cid:5) - I 6 (cid:8) O P (cid:6)(cid:5) (cid:1) (cid:8) (cid:1) 4 # , (cid:5) $ (cid:17)(cid:6) (cid:9)(cid:10) (cid:5) - I K 6 (cid:5)(cid:4) L0 4 JI K (cid:5) (cid:3) (cid:5) - I 6 if # (cid:5)(cid:4) 7 " and $ (cid:30) (cid:9) " J(cid:12) ( 10 ) By successive application of equation ( 10 ) ending by equation ( 9 ) , (cid:1) (cid:8) (cid:1) 4 # (cid:18)(cid:5) $ (cid:5) - I 6 (cid:17)(cid:8) O P (cid:6)(cid:5) (cid:1) (cid:8) (cid:1) 4 # , (cid:5) * " (cid:5) - I K 6 (cid:5)(cid:4) (cid:7)(cid:6) ) P (cid:6)(cid:5) (cid:4) P (cid:5) ( 11 ) where (cid:6) ) P (cid:6)(cid:5) (cid:4) P is the 4 JILK (cid:5) - I 6 element in the $ - th power of a matrix (cid:6) . This matrix is deﬁned as (cid:6) P (cid:5) (cid:4) P (cid:8) 0 . 4 IMK (cid:14)(cid:5) (cid:3) (cid:5) - I 6 for all I * (cid:5) - IMK (cid:24) & . Therefore , (cid:6) ) P (cid:6)(cid:5) (cid:4) P is the probability to reach I from I K using only $ (cid:3) (cid:6) transitions . From equations ( 9 ) - ( 11 ) and taking into account the existence of all possible sequence of (cid:3) (cid:6) transitions : (cid:1) K (cid:1) 45 # (cid:18)(cid:5) - I 6 H(cid:8) (cid:8) O ) (cid:9)(cid:8) # (cid:7) (cid:1) (cid:8) (cid:1) 4 # (cid:18)(cid:5) $ (cid:5) - I 6 (cid:12) ( 12 ) Finally , by applying equations ( 11 ) and ( 9 ) in equation ( 12 ) (cid:1) K (cid:1) 4 # (cid:18)(cid:5) I 6 (cid:8) O P (cid:6)(cid:5) (cid:5) (cid:1) K (cid:1) 4 # (cid:7)(cid:6) (cid:10) (cid:5) - I K K 6 (cid:5)(cid:4) O P (cid:6)(cid:5) 0 4 JI K K (cid:5)(cid:18)(cid:17)(cid:6) % (cid:5) - I K 6 (cid:5)(cid:4) (cid:8) O ) (cid:8) # (cid:7) (cid:6) ) P (cid:5) (cid:4) P (cid:12) By taking (cid:6) (cid:7) (cid:8) (cid:10)(cid:9) , the identity matrix , (cid:9) (cid:6) (cid:11)(cid:6) can be inverted in most cases and (cid:1) K (cid:1) 45 # (cid:18)(cid:5) - I 6 (cid:8) O P (cid:5) (cid:5) (cid:1) K (cid:1) 4 # (cid:7)(cid:6) (cid:10) (cid:5) - I K K 6 (cid:5)(cid:4) O P (cid:5) 0 4 JI K K (cid:5)(cid:18)(cid:17)(cid:6) % (cid:5) - I K 6 (cid:5)(cid:4) (cid:13)(cid:12)(cid:14)(cid:9) (cid:6) (cid:11)(cid:6)(cid:16)(cid:15) (cid:13)(cid:14)(cid:9) P (cid:6)(cid:5) (cid:4) P (cid:12) The probability of generating (cid:17) by a (cid:3) (cid:6) P FA (cid:11) is : Proposition 7 : 1(cid:27)2 (cid:12) 4 (cid:17) & 6 (cid:17)(cid:8) O P (cid:3)(cid:4)Q (cid:1) K (cid:1) 4 (cid:26) (cid:17)(cid:27)(cid:26) (cid:5) - I 6 (cid:4) . . 4 I 6 (cid:12) ( 13 ) Analogous results can be obtained for the backward and Viterbi algorithms . The algorithms and propositions presented in the last subsections can also be derived from some results of the theory of discrete stochastic process [ 53 ] . IEEE TRANSACTION PAMI 16 D . The most probable string problem In the previous problems a string is given and one wishes to compute its probability or that of a generating path . Other related interesting problems are the most probable string and the most probable constrained string in a P FA (cid:11) [ 43 ] . The ﬁrst problem consists in searching for the string with highest probability in 0 (cid:14)(cid:12) : argmax (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:12) ( 14 ) The second problem is the search for a string of upper bounded length with highest probability in 0 ( (cid:12) : argmax (cid:1)(cid:4)(cid:3) (cid:5) (cid:1)(cid:0) (cid:2) 1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:12) ( 15 ) When , , . and 0 are deﬁned over (cid:2) 4A , the following theorem holds . Proposition 8 : The computation of the most probable string and the computation of the most probable constrained string in a P FA are NP - Hard problems . The formal proof of proposition 8 can be found in [ 43 ] . It should be noted that the problem is at least NP - complete but that the membership to NP is an open question . A similar question is proved to be undecidable for P FA acceptors which are different to the P FA covered in this paper [ 54 ] . However the problem of searching for the string associated to the most probable derivation in a P FA , that is , given a P FA (cid:11) , compute argmax (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) (cid:12) 1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:12) ( 16 ) is polynomial [ 43 ] . IV . P ROPERTIES We now turn to study the properties of these models . What are the normal forms ? Are they equivalent one to the other ? Which are more expressive ? (cid:12)’(cid:12)’(cid:12) . These questions may be standard in formal language theory [ 55 ] , but can lead to unexpected results in the probabilistic case . IEEE TRANSACTION PAMI 17 A . A minimal form for D PFA A central question that arises when considering any ﬁnite devices is that of being able to decide the equivalence between two such devices . This is important for learning , as it is known [ 56 ] that a class is hard to learn if the equivalence problem is not tractable . In terms of probabilistic automata the question one wishes to answer is : “Given two P FA ( resp . two D PFA ) , are they equivalent ? ” . In the case of probabilistic objects a more natural question may be : Given two P FA ( respectively two D PFA ) , and (cid:0) (cid:30) (cid:9) " , are they (cid:0) - equivalent , i . e . is the distance between their distributions at most (cid:0) ? While the second question requires a concept of distance , and then will be discussed in section V , part of the ﬁrst question can be answered here . A Nerode theorem for D PFA : For any D PFA (cid:11) (cid:8)(cid:31) % ’ & (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) - I (cid:19)(cid:7) ’(cid:5) * . (cid:29)(cid:5) * 0 2 the following equiv - alence relation over (cid:0) (cid:1) has trivially ﬁnite index [ 57 ] : (cid:17)(cid:2)(cid:1) (cid:20)(cid:4)(cid:3)(cid:6)(cid:5) (cid:0) (cid:7) (cid:24) (cid:0) (cid:1) < 1(cid:27)2 K (cid:12) 4 (cid:17) (cid:7) 6 1(cid:27)2 K (cid:12) 45(cid:17) & 6 (cid:8) 1(cid:27)2 K (cid:12) 4 (cid:20) (cid:7) 6 1(cid:27)2 K (cid:12) 45(cid:20) 6 (cid:5) ( 17 ) where 1(cid:27)2 K (cid:12) 4 (cid:23) ; 6 is the probability of the unique path of states ( (cid:15)(cid:26)(cid:7) ’(cid:5) (cid:17)(cid:15)(cid:12)(cid:9) (cid:5)(cid:13)(cid:12)’(cid:12)’(cid:12)(cid:13)(cid:5) (cid:20)(cid:15)(cid:16)(cid:11) (cid:8) (cid:17)(cid:11) ) for (cid:23) from the initial state I (cid:8)(cid:7) F(cid:8) (cid:15) (cid:7) : 1(cid:27)2 K (cid:12) 4 (cid:23) 6 B(cid:8) (cid:11) (cid:8) (cid:17)(cid:11) (cid:7) ) (cid:9)(cid:8) (cid:9) 0 . 4 (cid:15) (cid:8) ) (cid:17)(cid:13)(cid:14)(cid:9) (cid:8)(cid:5)(cid:21)(cid:23)(cid:8) ) A(cid:5) (cid:20)(cid:15) ) I6 (cid:12) ( 18 ) The construction of a minimal D PFA can be found in [ 57 ] . This construction is based on the deﬁnition of an equivalence relation between strings on one hand and between states on another . Extending the Nerode relation over the states of the automaton goes as follows : I (cid:9)(cid:1) I K (cid:3)(cid:10)(cid:5) (cid:0) (cid:11) (cid:11) (cid:11) (cid:1) (cid:11) (cid:11) (cid:11) (cid:2) (cid:0) (cid:17) : < + 4 (cid:15) (cid:7) (cid:9)(cid:5) , (cid:17) (cid:9) (cid:5)’(cid:12)’(cid:12)’(cid:12)I(cid:5)(cid:18)(cid:17) (cid:1) (cid:5) (cid:20)(cid:15) (cid:1) (cid:13)6 is a path with (cid:17) (cid:8) (cid:17) (cid:9) & (cid:12)’(cid:12)’(cid:12) ( (cid:17) (cid:1) , (cid:15)(cid:19)(cid:7) E(cid:8)(cid:2)I (cid:8)(cid:7) and (cid:15) (cid:1) (cid:8) I (cid:0) (cid:17) SK < (cid:22)4 (cid:15) GK (cid:7) (cid:5)(cid:18)(cid:17) SK (cid:9) (cid:5)’(cid:12)’(cid:12)(cid:13)(cid:12)I(cid:5)(cid:18)(cid:17) SK (cid:1) (cid:5) (cid:5) (cid:17)(cid:15) GK (cid:1) (cid:5) 6 is a path with (cid:17) K (cid:8) (cid:17) SK (cid:9) (cid:12)’(cid:12)’(cid:12) ( (cid:17) SK (cid:1) (cid:5) , (cid:15) (cid:4)K (cid:7) (cid:8) I (cid:28)(cid:7) and (cid:15) GK (cid:1) (cid:5) (cid:8)(cid:2)ILK , This relation has ﬁnite index , and from it the minimal canonical D PFA can be constructed by merging equivalent states , unique up to a state - isomorphism . This can be done in poly - nomial time . In [ 8 ] an efﬁcient algorithm that does this is given . Also cases where even non - deterministic P FA can be put into canonical form ( for instance if they are acyclic ) are studied . IEEE TRANSACTION PAMI 18 This enables us therefore to test the equivalence between two D PFA : minimize each and compare . If the corresponding minimal D PFA are isomorphic ( a simple relabeling of the states through their minimum preﬁxes is enough to test this ) then the initial D PFA are equivalent . In the non - deterministic case Tzeng [ 45 ] proposes an algorithm that directly tests if two P FA are equivalent , but no result concerning a minimal P FA is known . B . Equivalence of P FA and D PFA One expects to ﬁnd standard automata results when dealing with regular stochastic lan - guages . For instance , that determinism does not imply a loss of expressive power . We prove here that this is not true . The result is mostly known and sometimes proved elsewhere ( for instance in [ 8 ] , [ 39 ] ) but the construction of the counter - example is of use : it informs us that the mean of two deterministic regular distributions may not be regular deterministic . We ﬁrst deﬁne the mean of deterministic regular distributions and argue that this distri - bution is not deterministic . Deﬁnition 10 ( Mean of two distributions ) : Given two distributions 0 (cid:9) and 0 (cid:18) over (cid:0) (cid:1) , we denote 0 (cid:9) (cid:1)(cid:0) 0 (cid:18) the distribution 0 such that : (cid:0) (cid:17) (cid:24) (cid:0) (cid:1) (cid:5)(cid:8)1(cid:27)2 , 3(cid:16)45(cid:17) & 6 (cid:17)(cid:8) # " (cid:12) $ (cid:25)(cid:27)(cid:4) A1(cid:27)2(cid:18)3 (cid:12) 45(cid:17) & 6 (cid:1) $ " (cid:12) $ (cid:25) " (cid:4) A1(cid:27)2 , 3 (cid:14) (cid:9)4 (cid:17) & 6 (cid:12) ( 19 ) Proposition 9 : Given two regular deterministic distributions 0 (cid:9) and 0 (cid:18) , 0 (cid:9) (cid:2)(cid:0)G0 (cid:18) may not be regular deterministic . The proof of this proposition is in the appendix A . Proposition 10 : There exist distributions that can be generated by P FA but not by D PFA . The proof is a simple consequence of proposition 9 : Take P FA from ﬁgure 2 as counter - example ( see appendix A ) . 0 1 / 2 2 / 3 PSfrag replacements a a ( 1 / 2 ) a ( 1 / 2 ) a ( 1 / 2 ) a ( 1 / 3 ) Fig . 2 . A counter - example about distributions that can be generated by P FA but not by D PFA . IEEE TRANSACTION PAMI 19 C . Equivalence of (cid:3) - P FA and P FA Given a (cid:3) - P FA , there is an equivalent P FA with no (cid:3) - transitions [ 58 ] : Proposition 11 : Given a (cid:3) - P FA (cid:11) , representing distribution 0 (cid:1)(cid:0) , there exists a P FA (cid:2) with just one initial state such that 0 (cid:12) (cid:8) 0 (cid:4)(cid:3) . Moreover (cid:2) is of size at most (cid:1) (cid:4) size 4 J(cid:11) 6 with at most (cid:1) states , where (cid:1) is the number of states of (cid:11) . Also , (cid:2) can be constructed from (cid:11) in polynomial time . We illustrate this proposition in ﬁgure 3 . The ﬁrst (cid:3) - P FA has been transformed into the second one that does not contain (cid:3) - transitions . ( 7 / 16 ) ( 3 / 8 ) ( 1 / 4 ) ( 3 / 10 ) PSfrag replacements I (cid:8)(cid:7) I (cid:8)(cid:7) I (cid:26)(cid:9) I (cid:26)(cid:9) a ( 1 / 4 ) a ( 1 / 4 ) b ( 5 / 16 ) b ( 5 / 8 ) b ( 1 / 2 ) (cid:5) ( 1 / 2 ) (cid:5) ( 1 / 5 ) I ( 0 ) = 1 I ( 1 ) = 0 I ( 0 ) = 1 I ( 1 ) = 0 Fig . 3 . A (cid:5) - P FA and its equivalent P FA V . C OMBINING DISTRIBUTIONS : A UTOMATA PRODUCT There can be many simple ways of combining non - deterministic P FA . But because of the special interest D PFA represent , it would be of singular use to have some means of modifying deterministic regular distributions , of combining them . We give two results in this section , one relating to the product of two automata ( the co - emission probability ) , and the second to the computation of the weight of a language inside a distribution . From proposition 9 , we know that the mean of two regular deterministic distributions may not be regular deterministic . Thus combining two D PFA has to be done in a different way . We can compute the product automaton as follows : Let (cid:11) (cid:9) (cid:8) % ’ & (cid:9) (cid:5) (cid:0) (cid:5) * ) (cid:9) (cid:5) - I (cid:7) (cid:9) (cid:5) * 0 (cid:23)(cid:9) (cid:5) - . (cid:23)(cid:9) ! 2 and (cid:11) 4(cid:18) E(cid:8) % (cid:16) & (cid:22)(cid:18) (cid:9)(cid:5) (cid:0) (cid:5) - ) (cid:28)(cid:18) ’(cid:5) - I (cid:7) (cid:18) (cid:5) * 0 (cid:18) ’(cid:5) * . (cid:18) (cid:13)2 be two D PFA . Consider the automaton (cid:11) (cid:8) % (cid:16) & 1(cid:9) 8 & (cid:22)(cid:18) (cid:9)(cid:5) L % JI (cid:7) (cid:9) (cid:5) I (cid:7) (cid:18) 2 (cid:5) (cid:0) (cid:5) * ) (cid:9)(cid:5) * . (cid:29)(cid:5) * 0 2 where ) ; (cid:8) ! (cid:24) 4 % JI (cid:26)(cid:9) (cid:5) - I (cid:28)(cid:18) + 2 I(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) L % (cid:16)I K (cid:9) (cid:5) - I K (cid:18) 2 (cid:21)6 E < (cid:22)4 JI (cid:10)(cid:9) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:9) 6(cid:29)(cid:24) ) (cid:10)(cid:9) (cid:2)(cid:7)(cid:6)(cid:9)(cid:8) 4 JI (cid:28)(cid:18) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:18) 6 (cid:24) : ) (cid:18)(cid:19)(cid:29) (cid:5) . . 4 ! % (cid:16)I (cid:5) I K 2 (cid:21)6 H(cid:8) # . (cid:9) (cid:13)4 JI 6 (cid:4) L . (cid:18) (cid:11)4 I 6 (cid:5) 0 . 4 ! % (cid:16)I (cid:26)(cid:9) (cid:5) I (cid:8)(cid:18) (cid:13)2 I(cid:5)(cid:21)(cid:4) + (cid:5) % (cid:16)I K (cid:9) (cid:5) I K (cid:18) 2 (cid:21)6 (cid:17)(cid:8) 0 (cid:23)(cid:9) (cid:13)4 JI (cid:10)(cid:9) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:9) 6 (cid:19)(cid:4) 0 (cid:18) A4 I (cid:8)(cid:18) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:18) 6G(cid:12) IEEE TRANSACTION PAMI 20 This automaton affects to each string (cid:17) the following score : 1(cid:27)2 * (cid:12) (cid:12) 45(cid:17) & 6 (cid:2)(cid:4) (cid:15)1(cid:27)2 ! (cid:12) (cid:14) 45(cid:17) & 6 . This product is called the co - emission probability of (cid:17) by (cid:11) (cid:9) and (cid:11) 4(cid:18) [ 16 ] . The score corresponds to the probability of generating simultaneously (cid:17) by (cid:11) (cid:9) and (cid:11) 4(cid:18) . The sum over (cid:0) (cid:1) of these scores deﬁnes the co - emission ( denoted (cid:0) ) between (cid:11) , (cid:9) and (cid:11) 4(cid:18) . This quantity is of use when computing the distance between two distributions , but is also of interest as it measures the interactions between two distributions . In [ 16 ] , it is proved that this is computable for APFA . Intractability results for more complicated architectures are proved in [ 17 ] . Formally : (cid:0) (cid:2)4 (cid:11) , (cid:9) (cid:5) - (cid:11) 4(cid:18) 6 H(cid:8) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2 (cid:12) (cid:12) I4 (cid:17) & 6 (cid:5)(cid:4) A1(cid:27)2 ! (cid:12) (cid:14) A45(cid:17) & 6 (cid:12) ( 20 ) We introduce one variable (cid:1) % per state in the product automata , with intended meaning : (cid:1) % (cid:8) O (cid:2)(cid:4)(cid:3) (cid:16) P ) (cid:4) (cid:2) (cid:4) P 3 (cid:18) (cid:3) (cid:15) R 1(cid:27)2A4 (cid:7) (cid:0) (cid:1) 6 (cid:12) Computing (cid:0) 4 J(cid:11) , (cid:9) (cid:21)(cid:5) - (cid:11) 4(cid:18) 6 can be done through solving the following system : (cid:1) % (cid:8) O P (cid:21) (cid:3)(cid:4)Q (cid:4) (cid:3) (cid:3)(cid:4)(cid:5) (cid:3) (cid:16) P (cid:21) (cid:4) (cid:3) (cid:4) P 3 (cid:18) (cid:3) (cid:6)(cid:5) (cid:1) ) (cid:4) 0 . 4 I (cid:21) ) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I % 56 (cid:5) and when # 3(cid:8) # " (cid:1) (cid:7) E(cid:8)T(cid:10) (cid:1) O P (cid:21) (cid:3)(cid:4)Q (cid:4) (cid:3) (cid:3)(cid:4)(cid:5) (cid:3) (cid:16) P (cid:21) (cid:4) (cid:3) (cid:4) P 3 (cid:18) (cid:3) (cid:6)(cid:5) (cid:1) ) (cid:4) 0 . 4 I (cid:21) ) A(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I I % 6 (cid:12) Solving this system of equations enables us to solve equation ( 20 ) by (cid:0) 4 J(cid:11) , (cid:9) (cid:8)(cid:5) - (cid:11) 4(cid:18) 6 H(cid:8) O P 3 (cid:3) Q (cid:1) % (cid:4) L . . 4 I I % 56 (cid:12) The same sort of techniques allows us to consider the product automaton obtained by taking a deterministic ﬁnite - state automaton 4 (cid:11) , (cid:9) and a D PFA (cid:11) 1(cid:18) : Let (cid:11) (cid:9) (cid:8)(cid:31) % (cid:16) & 4(cid:9) (cid:5) (cid:0) (cid:5) * ) (cid:10)(cid:9) (cid:5) - I (cid:7) (cid:9) (cid:5) * . (cid:9) ! 2 and (cid:11) 4(cid:18) E(cid:8) % (cid:16) & (cid:22)(cid:18) (cid:9)(cid:5) (cid:0) (cid:5) - ) (cid:28)(cid:18) ’(cid:5) - I (cid:7) (cid:18) (cid:5) * . (cid:18) ’(cid:5) * 0 (cid:18) (cid:13)2 . Consider the automaton (cid:11)(cid:31)(cid:8)(cid:31) % (cid:16) & 1(cid:9) 8 & (cid:22)(cid:18) (cid:9)(cid:5) (cid:0) (cid:5) - ) (cid:10)(cid:9) (cid:5) L % JI (cid:7) (cid:9) (cid:5) I (cid:7) (cid:18) 2 (cid:5) * . (cid:29)(cid:5) * 0(cid:26)2 where ) 4(cid:8) ! (cid:24) 4 % (cid:16)I (cid:10)(cid:9) (cid:5) - I (cid:8)(cid:18) + 2 (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) L % (cid:16)I K (cid:9) (cid:5) - I K (cid:18) 2 (cid:18)6 E < (cid:22)4 JI (cid:26)(cid:9) (cid:8)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:9) 6(cid:16)(cid:24) : ) (cid:9) (cid:5) 4 JI (cid:28)(cid:18) ’(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:18) 6 (cid:24) : ) (cid:28)(cid:18)(cid:19)(cid:29) (cid:5) . 4 % (cid:16)I * (cid:5) - I K 2 (cid:18)6 H(cid:8) (cid:0) (cid:1)(cid:3)(cid:2) . (cid:18) A4 IMK ? 6 if I (cid:24) (cid:20) . (cid:23)(cid:9) " if I (cid:24) (cid:20) . (cid:23)(cid:9) (cid:5) 0 4 % (cid:16)I (cid:10)(cid:9) (cid:5) - I (cid:28)(cid:18) (cid:13)2 I(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) L % (cid:16)I K (cid:9) (cid:5) - I K (cid:18) 2 (cid:21)6 (cid:17)(cid:8) 0 (cid:18) A4 I (cid:8)(cid:18) (cid:9)(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:18) 6 if 4 I (cid:26)(cid:9) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I K (cid:9) 6 (cid:24) : ) (cid:10)(cid:9) (cid:12) 4 We will not deﬁne these formally here , but recommend the reader refers to usual textbooks [ 55 ] if needed . IEEE TRANSACTION PAMI 21 Note that the construction does not necessarily yield a consistent D PFA : at every state the sum of probabilities might be less than 1 . The construction is nevertheless of interest and yields the following result : Proposition 12 : 1(cid:27)2 (cid:12) (cid:14) 4 (cid:16)(cid:15) (cid:12) (cid:12) 6 (cid:17)(cid:8) 1(cid:27)2 (cid:12) 4 (cid:0)8(cid:1) 6 (cid:12) The proof follows from the construction of automaton (cid:11) . This enables us to give a direct method of computing the weight of a regular language for a regular distribution , with a complexity which is linear in the product of the sizes of the two automata . It should be noted that this problem has been solved for special cases of the language (cid:15)H(cid:12) (cid:14) by more efﬁcient algorithms in [ 46 ] . VI . C OMPARING DISTRIBUTIONS : S IMILARITY MEASURES Deﬁning similarity measures between distributions is the most natural way of comparing them . Even if the question of exact equivalence ( discussed in section IV - A ) is of interest , in practical cases we wish to know if the distributions are close or not . In tasks involving the learning of P FA or D PFA one wants to measure the quality of the result or of the learning process . When learning takes place from a training sample , measuring how far the learned automaton is from a ( test ) sample can also be done by comparing distributions as a sample can be encoded as a PPTA . There are 2 families of distance measures . Those that are true distances , and those that measure a cross entropy . We study both types . A . Mathematical distances All the deﬁnitions hereafter are seen as deﬁnitions of distances between distributions over (cid:0)8(cid:1) . In doing so they implicitly deﬁne distances between automata , but also between automata and samples , or even between samples . The most general family of distances are referred to as the " (cid:28) distances or distances for the norm (cid:15) (cid:28) : " (cid:28) 450E(cid:5)(cid:18)0 K 6 H(cid:8) (cid:6) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) (cid:26) 1(cid:27)2 , 3(cid:16)45(cid:17) & 6 (cid:6) 1(cid:27)2 , 3 (cid:5) 45(cid:17) & 6(cid:9)(cid:26) (cid:28) (cid:10) (cid:12) (cid:2) (cid:12) IEEE TRANSACTION PAMI 22 For (cid:1) = 1 we get a natural distance also known as the " (cid:9) distance [ 36 ] or distance for the norm (cid:15) (cid:9) . " (cid:9) I450E(cid:5) , 0 K 6 (cid:17)(cid:8) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) (cid:26) 182 ( 3(cid:16)45(cid:17) & 6 (cid:6) 1(cid:27)2 , 3 (cid:5) 45(cid:17) & 6A(cid:26) (cid:12) In the special case where (cid:1) (cid:8) (cid:23) we obtain " (cid:18) (cid:9)450E(cid:5)(cid:18)0 K 6 (cid:17)(cid:8) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) 4 182 ( 3(cid:16)45(cid:17) & 6 (cid:6) 1(cid:27)2 , 3 (cid:5) 45(cid:17) & 6(cid:18)6 (cid:18) (cid:12) The following distance is used in [ 34 ] ( under the name " (cid:1)(cid:0) or distance for the (cid:15) (cid:8) norm ) : " (cid:3)(cid:2)(cid:5)(cid:4)(cid:7)(cid:6) 4 0E(cid:5)(cid:18)0 K 6 H(cid:8) (cid:1)(cid:6)(cid:2)(cid:5)(cid:4) (cid:1)(cid:4)(cid:3) (cid:5) (cid:6) (cid:26) 1(cid:27)2 , 3(cid:16)4 (cid:17) & 6 (cid:6) 182 ( 3 (cid:5) 4 (cid:17) & 6A(cid:26) (cid:12) When concerned with very small probabilities such as those that may arise when an inﬁnite number of strings have non null probability , it may be more useful to use logarithms of probabilities . In this way two strings with very small probabilities may inﬂuence the distance because their relative probabilities are very different : suppose 1(cid:27)2 (cid:19)(cid:9) (cid:13)45(cid:17) & 6 (cid:8) (cid:10)(cid:4) " (cid:13) (cid:9)(cid:8) and 1(cid:27)2 (cid:18) (cid:11)45(cid:17) & 6 (cid:29)(cid:8) (cid:10) " (cid:13) (cid:11)(cid:10) , then the effect for " # (cid:9) of this particular string will be of (cid:12)(cid:3)(cid:12) (cid:4) (cid:10)(cid:4) " (cid:13) (cid:11)(cid:10) whereas for the logarithmic distance the difference will be the same as if probabilities had been (cid:10) " (cid:13)(cid:14)(cid:9) and (cid:10) " (cid:13) (cid:27) . The logarithmic distance is deﬁned as " (cid:3)(cid:13)(cid:15)(cid:14)(cid:17)(cid:16) 450E(cid:5)(cid:18)0 K 6 H(cid:8) (cid:1)(cid:6)(cid:2)(cid:5)(cid:4) (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) (cid:26) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21)81(cid:27)2(cid:18)3 4 (cid:17) & 6 (cid:15)(cid:6) (cid:22)(cid:18)(cid:20)(cid:19)(cid:3)(cid:21)81(cid:27)2 , 3 (cid:5) 45(cid:17) & 6A(cid:26)(cid:21)(cid:12) It should be noticed that the logarithmic distance is inﬁnite when the probability of a string is null in one distribution and strictly positive in the other one . B . Entropy based measures Similar to the (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) distance is the well - known Kullback - Leibler divergence : " (cid:24)(cid:23) (cid:18) 4 0E(cid:5)(cid:18)0 K 6 H(cid:8) O (cid:1)(cid:4)(cid:3) (cid:5) (cid:6) 182 ( 3(cid:16)45(cid:17) & 6 (cid:5)(cid:4) (cid:25)(cid:18)(cid:20)(cid:19)(cid:26)(cid:21) 1(cid:27)2 , 3(cid:16)4 (cid:17) & 6 1(cid:27)2 ( 3 (cid:5) 45(cid:17) & 6 (cid:12) We set in a standard way that " (cid:27)(cid:18)(cid:28)(cid:19)(cid:3)(cid:21) (cid:17) " (cid:8) " and (cid:7) (cid:7) (cid:8) (cid:10) and assume (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) to represent base 2 logarithms . It should be noticed that in the case where some string has a null probability in 0 K , but not in 0 , then the Kullback - Leibler divergence becomes inﬁnite . IEEE TRANSACTION PAMI 23 Rewriting the Kullback - Leibler divergence as " (cid:11)(cid:23) (cid:18) 4 0E(cid:5)(cid:18)0 K 6 (cid:17)(cid:8) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) 4 1(cid:27)2(cid:18)3 4 (cid:17) & 6 (cid:4) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) (cid:2)1(cid:27)2 , 3(cid:16)45(cid:17) & 6 (cid:15)(cid:6) 1(cid:27)2 ( 3 4 (cid:17) & 6 (cid:4) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) (cid:2)1(cid:27)2 , 3 (cid:5) 45(cid:17) & 6 , 6 (cid:5) one can note the ﬁrst term is the entropy of 0 and does not depend on 0 K and the second term is the cross entropy of 0 and 0 K . From the information theory interpretation [ 59 ] the ﬁrst term measures the optimal number of bits needed to encode 0 and the second one measures the cost ( in number of bits of encoding ) one must pay when estimating 0 using 0 K . To ﬁx the ideas a divergence of 1 ( i . e . " (cid:9)(cid:23) (cid:18) 450E(cid:5)(cid:18)0 K 6 (cid:8) (cid:10) ) will mean that the average optimal number of bits needed to code a message of (cid:0) (cid:1) distributed according to 0 using 0 K will be one more than the optimal code obtained using 0 . Let us now consider the random variables (cid:1) and (cid:1) K from (cid:0) (cid:1) to (cid:12) " (cid:5) (cid:4)(cid:10) (cid:15) such that (cid:1) 4 (cid:17) & 6 B(cid:8) 1(cid:27)2 ( 3 4 (cid:17) & 6 and (cid:1) K 545(cid:17) & 6 (cid:17)(cid:8) 1(cid:27)2 ( 3 (cid:5) 45(cid:17) & 6 , the Kullback - Leibler divergence can be expressed as : " (cid:24)(cid:23) (cid:18) 450E(cid:5) , 0 K 6 (cid:17)(cid:8) (cid:1) 3 (cid:2) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) (cid:1) (cid:1) K (cid:4)(cid:3) (cid:12) ( 21 ) From this writing , we can see that the Kullback - Leibler divergence has some of the logarithmic distance properties . C . Some properties (cid:0) " (cid:28) , " (cid:3)(cid:2)(cid:5)(cid:4)(cid:7)(cid:6) , " (cid:3)(cid:13)(cid:15)(cid:14)(cid:17)(cid:16) are distances , i . e . , they comply with the usual properties . (cid:0) 0E(cid:5) , 0 K (cid:5) (cid:0) (cid:1) (cid:24) (cid:24) (cid:1) (cid:5) (cid:1)(cid:3)(cid:2) (cid:4)(cid:22)(cid:5) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) (cid:29) (cid:26) < 1 ) " (cid:6)(cid:5) 4 0E(cid:5)(cid:18)0 K 6 B(cid:8)(cid:2) " (cid:3)(cid:6)(cid:5) 0 (cid:31)(cid:8) 0 K ; 2 ) " (cid:6)(cid:5) 4 0E(cid:5)(cid:18)0 K 6 B(cid:8) " (cid:7)(cid:5) 450 K (cid:5)(cid:18)0 6 ; 3 ) " (cid:6)(cid:5) 4 0E(cid:5)(cid:18)0 K 6 (cid:1) " (cid:6)(cid:5) 4 0 K (cid:5)(cid:18)0 K K 6 (cid:4) " (cid:6)(cid:5) 4 0E(cid:5)(cid:18)0 K K 6 ( for " (cid:3)(cid:13)(cid:15)(cid:14)(cid:17)(cid:16) , assume 0 , 0 K and 0 K K are null on the same subset of (cid:0) (cid:1) ) . (cid:0) Obviously (cid:0) 0E(cid:5) , 0 K < " (cid:3)(cid:2)(cid:5)(cid:4)(cid:7)(cid:6) 450E(cid:5)(cid:18)0 K 6 (cid:21) " (cid:9) I450E(cid:5)(cid:18)0 K ? 6 . (cid:0) " (cid:24)(cid:23) (cid:18) is not a mathematical distance . It nevertheless veriﬁes the following properties (cid:0) 0E(cid:5) , 0 K : 1 ) " (cid:24)(cid:23) (cid:18) 450E(cid:5)(cid:18)0 K 6 (cid:4) 7 " 2 ) " (cid:24)(cid:23) (cid:18) 450E(cid:5)(cid:18)0 K 6 (cid:17)(cid:8) # " (cid:3)(cid:6)(cid:5) 0 (cid:31)(cid:8) 0 K 3 ) " (cid:24)(cid:23) (cid:18) 450E(cid:5)(cid:18)0 K 6 (cid:4) (cid:9) (cid:18) (cid:8) (cid:28) (cid:18) 4 " (cid:9) I450E(cid:5) , 0 K 6(cid:18)6 (cid:18) IEEE TRANSACTION PAMI 24 D . Computing distances We consider the following problem : given 0 and 0 K , compute the distance " (cid:5) 450E(cid:5) , 0 K 6 between them . Main positive results include : Proposition 13 : If 0 and 0 K are given by D PFA , the computation of " (cid:18) A4 0E(cid:5)(cid:18)0 K 6 can be done in polynomial time . The proof of this proposition is reported in the appendix B . Proposition 14 ( [ 44 ] ) : If 0 and 0 K are given by D PFA , the computation of " (cid:1)(cid:23) (cid:18) 450E(cid:5) , 0 K ? 6 can be done in polynomial time . E . Estimating distances In some places , it is interesting either to compare a theoretical distribution with the empirical one , or to compare different distributions with respect to an empirical one . For the ﬁrst purpose , we can use the following lemma : Lemma 1 ( [ 34 ] , lemma 14 ) : Let 0 be any distribution on (cid:0) (cid:1) , and (cid:19) a sample of size (cid:26) (cid:19) (cid:26) , then for (cid:4) (cid:30) (cid:10) , 1(cid:27)2 (cid:1) " (cid:3)(cid:2)(cid:5)(cid:4)(cid:7)(cid:6) 4 0E(cid:5) (cid:13)(cid:19) 86 (cid:31)(cid:21) (cid:3)(cid:2) (cid:4) (cid:4)(cid:22)4 (cid:18)(cid:20)(cid:19)(cid:26)(cid:21) (cid:26) (cid:21)(cid:19) (cid:26) 6 ! (cid:22)(cid:26) (cid:21)(cid:19) (cid:26) (cid:5) (cid:4) (cid:10) (cid:6) (cid:28) (cid:26) (cid:19) (cid:26) (cid:13) (cid:3) (cid:12) In case one wants to learn —or estimate— distributions , this result is commonly used to compare the different learning algorithms : a sample of the target distribution is built and a distance between the learned distribution and the sample is computed . In applications such as language modeling [ 60 ] or statistical clustering [ 61 ] , [ 62 ] , a distance based on the Kullback - Leibler divergence is commonly used to compare estimators . Let 0 be the target distribution and (cid:11) a model . As previously noted this distance can be decomposed as the entropy of 0 and the cross - entropy of 0 (cid:14)(cid:12) with respect to 0 , (cid:6) L450E(cid:5)(cid:18)0 (cid:12) 6 : (cid:6) L450E(cid:5) , 0 (cid:12) 6 7(cid:8) (cid:6) O (cid:1)(cid:4)(cid:3)(cid:4)(cid:5)(cid:7)(cid:6) 1(cid:27)2 , 3(cid:16)4 (cid:17) & 6 (cid:4) (cid:18)(cid:20)(cid:19)(cid:3)(cid:21) (cid:2)1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 Since 0 is generally unknown , it is replaced by an adequate empirical estimate 0 (cid:25) , based on a sample (cid:19) . Let (cid:19) K denote the set which contains the unique elements of the sample (cid:19) ( removing the repetitions ) . The corresponding empirical cross - entropy can then be written as : (cid:7) (cid:6)L4 (cid:16)(cid:19) (cid:5)(cid:18)0 (cid:12) 6 7(cid:8) (cid:6) O (cid:1)(cid:4)(cid:3) (cid:25) (cid:5) 1(cid:27)2(cid:18)3 (cid:28)(cid:27) 4 (cid:17) & 6 (cid:5)(cid:4) (cid:25)(cid:18)(cid:20)(cid:19)(cid:3)(cid:21)(cid:2)1(cid:27)2 ! (cid:12) (cid:16)45(cid:17) & 6 (cid:9)(cid:8) (cid:6) O (cid:1)(cid:4)(cid:3) (cid:25) (cid:5) (cid:30) 45(cid:17) & 6 (cid:26) (cid:21)(cid:19) (cid:26) (cid:4) (cid:25)(cid:18)(cid:28)(cid:19)(cid:3)(cid:21)(cid:2)1(cid:27)2 ! (cid:12) 45(cid:17) & 6 IEEE TRANSACTION PAMI 25 where (cid:30) 45(cid:17) & 6 is the number of occurrences of (cid:17) in (cid:19) . Finally , using “ (cid:17) (cid:24) (cid:19) ” in multi - set notation , we have : (cid:0) (cid:6) 4 (cid:16)(cid:19) (cid:5)(cid:18)0 (cid:12) 6 (cid:8) (cid:6) (cid:10) (cid:26) (cid:21)(cid:19) (cid:26) O (cid:1)(cid:4)(cid:3) (cid:25) (cid:18)(cid:20)(cid:19)(cid:26)(cid:21) 1(cid:27)2 (cid:12) 4 (cid:17) & 6 (cid:12) ( 22 ) Another measure often used in the language model community is the perplexity of (cid:19) for a given model (cid:11) . It is computed using equation ( 22 ) as : 0 ( 0 4 ’(cid:19) (cid:26) (cid:11) 6 (cid:8) (cid:23) (cid:1) (cid:2) (cid:16) (cid:25) (cid:4) 3 R (cid:18) (cid:12) ( 23 ) which can be also written as : 0 ( 0 . 4 (cid:16)(cid:19) (cid:26) (cid:11) 6 (cid:8) (cid:2) (cid:7) (cid:1)(cid:4)(cid:3) (cid:25) 0C(cid:12) (cid:16)45(cid:17) & 6 (cid:3) (cid:13) (cid:12) (cid:1) (cid:27) (cid:1) (cid:12) ( 24 ) In practice , rather than the entropy ( or perplexity ) per string given by the previous equations , the entropy ( or the perplexity ) per symbol is often preferred [ 3 ] . It can be obtained approximately by replacing (cid:26) (cid:19) (cid:26) with (cid:26) (cid:26) (cid:19) (cid:26)(cid:14)(cid:26) in equation ( 22 ) ( or equation ( 24 ) ) . The properties of the perplexity can be summarized as follows : (cid:0) Equation ( 22 ) says that the cross - entropy measures the average number of bits one must pay by using the model (cid:11) instead of 0 while coding the sample (cid:19) . (cid:0) From equation ( 23 ) , the perplexity measures the corresponding average number of choices entailed by this coding . (cid:0) From equation ( 24 ) , the perplexity can be seen as the inverse of the geometric mean of the probabilities of the sample strings according to the model . On the other hand , in practical work , the following properties must be carefully taken into account : (cid:0) Perplexity and entropy diverge as soon as one of the probabilities according to (cid:11) is zero . In practice , this implies that the perplexity can only be used if (cid:11) is smoothed ; i . e . , it provides a non null probability for every string of (cid:0) (cid:1) . (cid:0) Obviously , perplexity and entropy only make sense if ( the smoothed version of ) (cid:11) is really a probabilistic model ; i . e . , (cid:0) (cid:1)(cid:4)(cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2 (cid:12) 4 (cid:17) & 6 (cid:17)(cid:8) (cid:10) . (cid:0) The perplexity can compare models only using the same sample (cid:19) . IEEE TRANSACTION PAMI 26 VII . C ONCLUSION We have provided in this ﬁrst part a number of results centered on the probabilistic automata and distributions themselves . It remains to study the relationships between these models and other important models that can be found in the literature . Also the important task of approximating , learning or identifying these models , all central problems to structural pattern recognition , need to be explored . All this will be done in part II of this paper [ 40 ] . A CKNOWLEDGMENTS The authors wish to thank the anonymous reviewers for their careful reading and in - depth criticisms and suggestions . IEEE TRANSACTION PAMI 27 A PPENDIX A . Proof of the Proposition 9 Proposition 9 : Given two regular deterministic distributions 0 , (cid:9) and 0 (cid:18) , 0 (cid:9) (cid:0) L0 (cid:18) may not be regular deterministic . Proof : Consider distribution 0 (cid:9) deﬁned by the following D PFA 4 JI (cid:28)(cid:7) ’(cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:26)(cid:9) (cid:18)6 (cid:24) : ) (cid:9) (cid:5) 0 (cid:23)(cid:9) (cid:13)4 I (cid:8)(cid:7) ’(cid:5)(cid:21)(cid:4) + (cid:5) I (cid:26)(cid:9) (cid:18)6 (cid:8) (cid:10) (cid:5) . (cid:9) (cid:13)4 JI (cid:8)(cid:7) 6 (cid:8) " 4 JI (cid:10)(cid:9) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:26)(cid:9) (cid:18)6 (cid:24) : ) (cid:9) (cid:5) 0 (cid:23)(cid:9) (cid:13)4 I (cid:26)(cid:9) (cid:5)(cid:21)(cid:4) + (cid:5) I (cid:26)(cid:9) (cid:18)6 (cid:8) (cid:9) (cid:18) (cid:5) . (cid:9) (cid:13)4 JI (cid:26)(cid:9) (cid:18)6 (cid:8) (cid:9) (cid:18) (cid:5) and distribution 0 (cid:18) deﬁned by 4 JILK (cid:7) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - ILK (cid:9) 6 (cid:24) : ) (cid:18) ’(cid:5) 0 (cid:18) (cid:11)4 IMK (cid:7) (cid:5)(cid:21)(cid:4) + (cid:5) IMK (cid:9) 6 (cid:8) (cid:10) (cid:5) . (cid:18) (cid:11)4 JILK (cid:7) 6 (cid:8) " 4 JILK (cid:9) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - ILK (cid:9) 6 (cid:24) : ) (cid:18) ’(cid:5) 0 (cid:18) (cid:11)4 IMK (cid:9) (cid:5)(cid:21)(cid:4) + (cid:5) IMK (cid:9) 6 (cid:8) (cid:9) (cid:27) (cid:5) . (cid:18) (cid:11)4 JILK (cid:9) 6 (cid:8) (cid:18) (cid:27) (cid:12) But no D PFA can implement 0 (cid:9) (cid:0) 0 (cid:18) . Suppose such an automaton exists and call it (cid:11) with (cid:11) (cid:8) % ’ & (cid:5) (cid:0) (cid:5) - I (cid:28)(cid:7) (cid:9)(cid:5) * ) (cid:9)(cid:5) * . (cid:29)(cid:5) * 0(cid:26)2 ; There would ( because of determinism ) have to be some (cid:1) for which : 4 JI I % (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I I % A (cid:9) (cid:18)6(cid:16)(cid:24) : ) , for all " 1(cid:21) 7 # 8 - (cid:1) 4 I (cid:28) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:1) ’6(cid:16)(cid:24) : ) , with " 4(cid:21) (cid:19) (cid:21) (cid:1) (cid:12) Denote (cid:9) (cid:29)(cid:8) (cid:1) (cid:6) (cid:20)(cid:19) 1(cid:1) (cid:10) ( the length of the cycle ) . The automaton ( see ﬁgure 4 ) consists of a string of (cid:19) states ( with eventually (cid:19) (cid:8)T " ) followed by a cycle of (cid:9) states ( with (cid:9) (cid:30) " , as there is an inﬁnity of strings with non null probability ) . $ k $ $ l $ PSfrag replacements k l Fig . 4 . The general shape of a D PFA over a one letter alphabet Let (cid:0) < (cid:19) (cid:21) (cid:0) (cid:21) (cid:1)(cid:2)(cid:1) 1(cid:27)2 ! (cid:12) (cid:16)4 (cid:4) (cid:4)(cid:3) (cid:11)6 (cid:24)N(cid:8)(cid:2) " ( such an (cid:0) exists because of consistency ) . 1(cid:27)2(cid:9)4 (cid:4) (cid:3) 6 (cid:17)(cid:8) (cid:6)(cid:5) (cid:3) (cid:4) M(cid:30) (cid:3) (cid:5) IEEE TRANSACTION PAMI 28 where (cid:5) (cid:3) (cid:8) (cid:3) (cid:13)(cid:14)(cid:9) (cid:7) % (cid:8) # (cid:7) 0 / (cid:12) 4 JI % (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I % A (cid:9) , 6 and (cid:30) (cid:3) (cid:8)(cid:2) . 4 JI (cid:3) 6 (cid:8) (cid:10) (cid:23) 4 (cid:10) (cid:23) (cid:3) 6 (cid:1) (cid:10) (cid:23) 4 (cid:23) (cid:0) (cid:3) 6 H(cid:8) (cid:10) (cid:23) (cid:3) + A (cid:9) (cid:1) (cid:10) (cid:0) (cid:3) and 1(cid:27)2(cid:9)4 (cid:4) (cid:3) + A (cid:8) 6 H(cid:8) (cid:5) (cid:3) (cid:4) (cid:5) (cid:8)(cid:2)(cid:1)(cid:3)(cid:1)(cid:5)(cid:4) (cid:4) M(cid:30) (cid:3) (cid:5) where (cid:5) (cid:8)(cid:2)(cid:1)(cid:3)(cid:1)(cid:5)(cid:4) (cid:8)(cid:2)0 4 JI (cid:28) (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I (cid:1) ’6 (cid:5)(cid:4) (cid:28) (cid:13)(cid:14)(cid:9) (cid:7) % ’(cid:8) (cid:1) 0 4 JI % (cid:5)(cid:8)(cid:4)(cid:6)(cid:5) - I % A (cid:9) , 6 and 1(cid:27)2A4 (cid:4) (cid:3) + A (cid:18) (cid:8) 6 H(cid:8) (cid:5) (cid:3) (cid:4) (cid:5) (cid:8)(cid:2)(cid:1)(cid:3)(cid:1)(cid:5)(cid:4) (cid:4) (cid:5) (cid:8)(cid:2)(cid:1)(cid:3)(cid:1)(cid:5)(cid:4) (cid:4) M(cid:30) (cid:3) (cid:12) It follows that : (cid:5) (cid:8)(cid:2)(cid:1)(cid:3)(cid:1)(cid:5)(cid:4) (cid:8) 1(cid:27)2 ! (cid:12) (cid:16)4 (cid:4) (cid:4)(cid:3) + A (cid:8) 6 1(cid:27)2 (cid:12) 4 (cid:4) (cid:3) 6 (cid:8) 1(cid:27)2 ! (cid:12) 4 (cid:4) (cid:3) (cid:23)A (cid:18) (cid:8) 6 1(cid:27)2 ! (cid:12) (cid:16)4 (cid:4) (cid:3) (cid:1) (cid:9) 6 (cid:12) Thus (cid:9) (cid:18) (cid:7)(cid:6) (cid:23) (cid:9)(cid:8) (cid:22)(cid:23) (cid:12) (cid:1) (cid:9) (cid:27) (cid:7)(cid:6) (cid:23) (cid:10)(cid:8) (cid:9) (cid:18) (cid:7)(cid:6) (cid:23) (cid:12) (cid:1) (cid:9) (cid:27) (cid:7)(cid:6) (cid:8) (cid:9) (cid:18) (cid:7)(cid:6) (cid:23) (cid:14) (cid:8) (cid:22)(cid:23) (cid:12) (cid:1) (cid:9) (cid:27) (cid:7)(cid:6) (cid:23) (cid:14) (cid:8) (cid:9) (cid:18) (cid:7)(cid:6) (cid:23) (cid:10)(cid:8) (cid:22)(cid:23) (cid:12) (cid:1) (cid:9) (cid:27) (cid:7)(cid:6) (cid:23) (cid:9)(cid:8) (cid:12) Simplifying : 4 (cid:9) (cid:18) (cid:7)(cid:6) (cid:23) (cid:10)(cid:8) (cid:22)(cid:23) (cid:12) (cid:1) (cid:9) (cid:27) (cid:7)(cid:6) (cid:23) (cid:10)(cid:8) 6 (cid:18) (cid:8) 4 (cid:10) (cid:23) (cid:3) + A (cid:18) (cid:8) A (cid:9) (cid:1) (cid:10) (cid:0) (cid:3) + A (cid:18) (cid:8) 6 (cid:5)(cid:4) * 4 (cid:10) (cid:23) (cid:3) + A (cid:9) (cid:1) (cid:10) (cid:0) (cid:3) 6 (cid:5) (cid:23) " (cid:4) (cid:9) (cid:18) (cid:6) (cid:23) (cid:10)(cid:8) (cid:22)(cid:23) (cid:12) (cid:4) (cid:9) (cid:27) (cid:6) (cid:23) (cid:9)(cid:8) (cid:8) (cid:10) (cid:23) (cid:3) + A (cid:18) (cid:8) A (cid:9) (cid:4) (cid:10) (cid:0) (cid:3) (cid:1) (cid:10) (cid:23) (cid:3) (cid:23)A (cid:9) (cid:4) (cid:10) (cid:0) (cid:3) + A (cid:18) (cid:8) (cid:5) (cid:23) " (cid:4) (cid:9) (cid:18) (cid:8) (cid:4) (cid:9) (cid:27) (cid:8) (cid:8) (cid:10) (cid:23) (cid:18) (cid:8) (cid:1) (cid:10) (cid:0) (cid:18) (cid:8) (cid:5) (cid:23) (cid:8) (cid:13)(cid:14)(cid:9) (cid:4) (cid:0) (cid:8) (cid:8) (cid:23) (cid:18) (cid:8) (cid:1) (cid:0) (cid:18) (cid:8) (cid:12) If (cid:9) (cid:30) (cid:10) the right hand side of the equation is odd , and the the left hand side is even , so we end up to a clear contradiction . And if (cid:9) (cid:8) (cid:10) we solve and reach 3 = 13 which is also a contradiction . B . Proof of the Proposition 13 Proposition 13 : If 0 and 0 K are given by D PFA , the computation of " (cid:18) (cid:9)450E(cid:5)(cid:18)0 K 6 can be done in polynomial time . Proof : In the following , (cid:0) 4 (cid:12)(cid:11) (cid:9) (cid:5) (cid:13)(cid:11) (cid:18) (cid:8)6 matches the deﬁnition ( 20 ) in page 20 . IEEE TRANSACTION PAMI 29 " (cid:16)(cid:18) (cid:11)450E(cid:5) , 0 K ? 6 H(cid:8) (cid:1)(cid:0) (cid:0) (cid:3)(cid:2) (cid:3) (cid:5) (cid:6) (cid:26) 1(cid:27)2 , 3(cid:16)4 (cid:5)(cid:4) 6 (cid:6) 1(cid:27)2 , 3 (cid:5) 4 (cid:6)(cid:4) 6A(cid:26) (cid:18) (cid:8)(cid:7) (cid:12) (cid:14) (cid:8) (cid:1)(cid:0) (cid:0) (cid:3)(cid:2) (cid:3) (cid:5) (cid:6) 4 182 , 3 4 (cid:6)(cid:4) 6 (cid:6) (cid:25)182 , 3 (cid:5) 4 (cid:6)(cid:4) 6(cid:18)6 (cid:18) (cid:7) (cid:12) (cid:14) (cid:8) (cid:1)(cid:0) (cid:0) (cid:3)(cid:2) (cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2 , 3(cid:16)4 (cid:6)(cid:4) 6 (cid:4) A1(cid:27)2 , 3(cid:16)4 (cid:6)(cid:4) 6 (cid:1) / 1(cid:27)2 (cid:8)(cid:9) (cid:5) 4 (cid:6)(cid:4) 6 (cid:4) A1(cid:27)2(cid:18)3 (cid:5) 4 (cid:5)(cid:4) 6 (cid:6) (cid:23) 1(cid:27)2 ( 3 4 (cid:5)(cid:4) 6 (cid:4) A1(cid:27)2 ( 3 (cid:5) 4 (cid:6)(cid:4) 6 (cid:7) (cid:12) (cid:14) (cid:8) (cid:1)(cid:0) (cid:0) (cid:3)(cid:2) (cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2(cid:18)3 4 (cid:5)(cid:4) 6 (cid:18) (cid:1) (cid:0) (cid:3)(cid:2) (cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2(cid:18)3 (cid:5) 4 (cid:6)(cid:4) 6 (cid:18) (cid:6) (cid:23) (cid:0) (cid:3)(cid:2) (cid:3)(cid:4)(cid:5) (cid:6) 1(cid:27)2 , 3(cid:16)4 (cid:5)(cid:4) 6 (cid:4) A1(cid:27)2 , 3 (cid:5) 4 (cid:6)(cid:4) 6 (cid:7) (cid:12) (cid:14) (cid:8) 4 (cid:0) (cid:2)4 0E(cid:5)(cid:18)0 6 (cid:1) (cid:0) 8450 K (cid:5)(cid:18)0 K 6 (cid:6) (cid:23) (cid:0) 8450E(cid:5)(cid:18)0 K 6(cid:18)6 (cid:12) (cid:14) (cid:12) If 0 and 0 K are given by D PFA the above can be solved in polynomial time . R EFERENCES [ 1 ] A . Paz , Introduction to Probabilistic Automata . Academic Press , New York , NY , 1971 . [ 2 ] L . Rabiner , “A tutorial on hidden Markov models and selected applications in speech recoginition , ” Proceedings of the IEEE , vol . 77 , pp . 257 – 286 , 1989 . [ 3 ] F . Jelinek , Statistical Methods for Speech Recognition . Cambridge , Massachusetts : The MIT Press , 1998 . [ 4 ] R . Carrasco and J . Oncina , “Learning stochastic regular grammars by means of a state merging method , ” ser . Lecture Notes in Computer Science , R . C . Carrasco and J . Oncina , Eds . , no . 862 . Berlin , Heidelberg : Springer Verlag , 1994 , pp . 139 – 150 . [ 5 ] L . Saul and F . Pereira , “Aggregate and mixed - order Markov models for statistical language processing , ” in Proceedings of the Second Conference on Empirical Methods in Natural Language Processing , C . Cardie and R . Weischedel , Eds . Somerset , New Jersey : Association for Computational Linguistics , 1997 , pp . 81 – 89 . [ 6 ] H . Ney , S . Martin , and F . Wessel , Corpus - Based Statiscal Methods in Speech and Language Processing . S . Young and G . Bloothooft , Kluwer Academic Publishers , 1997 , ch . Statistical Language Modeling Using Leaving - One - Out , pp . 174 – 207 . [ 7 ] D . Ron , Y . Singer , and N . Tishby , “Learning probabilistic automata with variable memory length , ” in Proceedings of the Seventh Annual ACM Conference on Computational Learning Theory . New Brunswick , New Jersey : ACM Press , 1994 , pp . 35 – 46 . [ 8 ] M . Mohri , “Finite - state transducers in language and speech processing , ” Computational Linguistics , vol . 23 , no . 3 , pp . 269 – 311 , 1997 . [ 9 ] K . S . Fu , Syntactic pattern recognition and applications . Prentice Hall , 1982 . [ 10 ] L . Miclet , Structural Methods in Pattern Recognition . Springer - Verlag , 1987 . [ 11 ] S . Lucas , E . Vidal , A . Amari , S . Hanlon , and J . C . Amengual , “A comparison of syntactic and statistical techniques for off - line OCR , ” ser . Lecture Notes in Computer Science , R . C . Carrasco and J . Oncina , Eds . , no . 862 . Berlin , Heidelberg : Springer Verlag , 1994 , pp . 168 – 179 . [ 12 ] D . Ron , Y . Singer , and N . Tishby , “On the learnability and usage of acyclic probabilistic ﬁnite automata , ” in Proceedings of COLT 1995 , 1995 , pp . 31 – 40 . [ 13 ] H . Ney , “Stochastic grammars and pattern recognition , ” in Proceedings of the NATO Advanced Study Institute , P . Laface and R . D . Mori , Eds . SpringerVerlag , 1992 , pp . 313 – 344 . IEEE TRANSACTION PAMI 30 [ 14 ] N . Abe and H . Mamitsuka , “Predicting protein secondary structure using stochastic tree grammars , ” Machine Learning , vol . 29 , pp . 275 – 301 , 1997 . [ 15 ] Y . Sakakibara , M . Brown , R . Hughley , I . Mian , K . Sjolander , R . Underwood , and D . Haussler , “Stochastic context - free grammars for tRNA modeling , ” Nuclear Acids Res . , vol . 22 , pp . 5112 – 5120 , 1994 . [ 16 ] R . B . Lyngsø , C . N . S . Pedersen , and H . Nielsen , “Metrics and similarity measures for hidden Markov models , ” in Proceedings of ISMB’99 , 1999 . [ 17 ] R . B . Lyngsø and C . N . S . Pedersen , “Complexity of comparing hidden Markov models , ” in Proceedings of ISAAC ’01 , 2001 . [ 18 ] P . Cruz and E . Vidal , “Learning regular grammars to model musical style : Comparing different coding schemes , ” ser . Lecture Notes in Computer Science , V . Honavar and G . Slutski , Eds . , no . 1433 . Berlin , Heidelberg : Springer - Verlag , 1998 , pp . 211 – 222 . [ 19 ] M . G . Thomason , “Regular stochastic syntax - directed translations , ” Computer Science Department . University of Tennesse , Knoxville , Tech . Rep . CS - 76 - 17 , 1976 . [ 20 ] M . Mohri , F . Pereira , and M . Riley , “The design principles of a weighted ﬁnite - state transducer library , ” Theoretical Computer Science , vol . 231 , pp . 17 – 32 , 2000 . [ 21 ] H . Alshawi , S . Bangalore , and S . Douglas , “Learning dependency translation models as collections of ﬁnite state head transducers , ” Computational Linguistics , vol . 26 , 2000 . [ 22 ] —— , “Head transducer model for speech translation and their automatic acquisition from bilingual data , ” Machine Translation , 2000 . [ 23 ] J . C . Amengual , J . M . Bened´ı , F . Casacuberta , A . C . no , A . Castellanos , V . M . Jim´enez , D . Llorens , A . Marzal , M . Pastor , F . Prat , E . Vidal , and J . M . Vilar , “The EUTRANS - I speech translation system , ” Machine Translation Journal , vol . 15 , no . 1 - 2 , pp . 75 – 103 , 2000 . [ 24 ] S . Bangalore and G . Riccardi , “Stochastic ﬁnite - state models for spoken language machine translation , ” in Proceedings of the Workshop on Embeded Machine Translation Systems , NAACL , Seattle , USA , May 2000 , pp . 52 – 59 . [ 25 ] —— , “A ﬁnite - state approach to machine translation , ” in Proceedings of the North American ACL2001 , Pittsburgh , USA , May 2001 . [ 26 ] F . Casacuberta , H . Ney , F . J . Och , E . Vidal , J . M . Vilar , S . Barrachina , I . Garc´ıa - Varea , D . Llorens , C . Mart´ınez , S . Molau , F . Nevado , M . Pastor , D . Pic´o , A . Sanchis , and C . Tillmann , “Some approaches to statistical and ﬁnite - state speech - to - speech translation , ” Computer Speech and Language , 2003 . [ 27 ] L . Br´eh´elin , O . Gascuel , and G . Caraux , “Hidden Markov models with patterns to learn boolean vector sequences and application to the built - in self - test for integrated circuits , ” IEEE Transactions on Pattern Analysis and Machine Intelligence , vol . 23 , no . 9 , pp . 997 – 1008 , 2001 . [ 28 ] Y . Bengio , V . - P . Lauzon , and R . Ducharme , “Experiments on the application of IOHMMs to model ﬁnancial returns series , ” IEEE Transaction on Neural Networks , vol . 12 , no . 1 , pp . 113 – 123 , 2001 . [ 29 ] K . S . Fu , Syntactic Methods in Pattern Recognition . New - York : Academic Press , 1974 . [ 30 ] J . J . Paradaens , “A general deﬁnition of stochastic automata , ” Computing , vol . 13 , pp . 93 – 105 , 1974 . [ 31 ] K . S . Fu and T . L . Booth , “Grammatical inference : Introduction and survey . part I and II , ” IEEE Transactions on System Man and Cybernetics , vol . 5 , pp . 59 – 72 and 409 – 423 , 1975 . [ 32 ] C . S . Wetherell , “Probabilistic languages : A review and some open questions , ” Computing Surveys , vol . 12 , no . 4 , 1980 . IEEE TRANSACTION PAMI 31 [ 33 ] F . Casacuberta , “Some relations among stochastic ﬁnite state networks used in automatic speech recogntion , ” IEEE Transactions on Pattern Analysis and Machine Intelligence , vol . 12 , no . 7 , pp . 691 – 695 , 1990 . [ 34 ] D . Angluin , “Identifying languages from stochastic examples , ” Yale University , Tech . Rep . YALEU / DCS / RR - 614 , March 1988 . [ 35 ] M . Kearns and L . Valiant , “Cryptographic limitations on learning boolean formulae and ﬁnite automata , ” in 21st ACM Symposium on Theory of Computing , 1989 , pp . 433 – 444 . [ 36 ] M . Kearns , Y . Mansour , D . Ron , R . Rubinfeld , R . E . Schapire , and L . Sellie , “On the learnability of discrete distributions , ” in Proc . of the 25th Annual ACM Symposium on Theory of Computing , 1994 , pp . 273 – 282 . [ 37 ] M . Kearns and U . Vazirani , An Introduction to Computational Learning Theory . MIT press , 1994 . [ 38 ] N . Abe and M . Warmuth , “On the computational complexity of approximating distributions by probabilistic automata , ” in Proceedings of the Third Workshop on Computational Learning Theory . Morgan Kaufmann , 1998 , pp . 52 – 66 . [ 39 ] P . Dupont , F . Denis , and Y . Esposito , “Links between probabilistic automata and hidden markov models : probability distributions , learning models and induction algorithms , ” Pattern Recognition , 2004 , to appear . [ 40 ] E . Vidal , F . Thollard , C . de la Higuera , F . Casacuberta , and R . C . Carrasco , “Probabilistic ﬁnite state automata – part II , ” IEEE Transactions on Pattern Analysis and Machine Intelligence , vol . Special Issue - Syntactic and Structural Pattern Recognition , 2004 . [ 41 ] M . O . Rabin , “Probabilistic automata , ” Information and Control , vol . 6 , no . 3 , pp . 230 – 245 , 1963 . [ 42 ] G . D . Forney , “The Viterbi algorithm , ” in IEEE Procedings , vol . 3 , 1973 , pp . 268 – 278 . [ 43 ] F . Casacuberta and C . de la Higuera , “Computational complexity of problems on probabilistic grammars and transducers , ” ser . Lecture Notes in Computer Science , A . de Oliveira , Ed . , vol . 1891 . Berlin , Heidelberg : Springer - Verlag , 2000 , pp . 15 – 24 . [ 44 ] R . C . Carrasco , “Accurate computation of the relative entropy between stochastic regular grammars , ” RAIRO ( Theoretical Informatics and Applications ) , vol . 31 , no . 5 , pp . 437 – 444 , 1997 . [ 45 ] W . - G . Tzeng , “A polynomial - time algorithm for the equivalence of probabilistic automata , ” SIAM J . Comput . , vol . 21 , no . 2 , pp . 216 – 227 , 1992 . [ 46 ] A . Fred , “Computation of substring probabilities in stochastic grammars , ” in Grammatical Inference : Algorithms and Applications , ser . Lecture Notes in Computer Science , A . de Oliveira , Ed . Berlin , Heidelberg : Springer - Verlag , 2000 , vol . 1891 , pp . 103 – 114 . [ 47 ] M . Young - Lai and F . W . Tompa , “Stochastic grammatical inference of text database structure , ” Machine Learning , vol . 40 , no . 2 , pp . 111 – 137 , 2000 . [ 48 ] D . Ron and R . Rubinfeld , “Learning fallible deterministic ﬁnite automata , ” Machine Learning , vol . 18 , pp . 149 – 185 , 1995 . [ 49 ] C . Cook and A . Rosenfeld , “Some experiments in grammatical inference , ” NATO ASI on Computer Orientation Learning Process , pp . 157 – 171 , 1974 , bonas , France . [ 50 ] K . Knill and S . Young , Corpus - Based Statistical Methods in Speech and Language Processing . Eds . S . Young and G . Bloothoof . Kluwer Academic Publishers , 1997 , ch . Hidden Markov Models in Speech and Language Processing , pp . 27 – 68 . [ 51 ] N . Merhav and Y . Ephraim , “Hidden Markov modeling using a dominant state sequence with application to speech recognition , ” Computer Speech and Language , vol . 5 , pp . 327 – 339 , 1991 . IEEE TRANSACTION PAMI 32 [ 52 ] —— , “Maximum likelihood hidden Markov modeling using a dominant state sequence of states , ” IEEE Transaction on Signal Processing , vol . 39 , no . 9 , pp . 2111 – 2115 , 1991 . [ 53 ] R . G . Galleguer , Discrete Stochastic Processes . Kluwer Academic Publisher , 1996 . [ 54 ] V . C . V . D . Blondel , “Undecidable problems for probabilistic automata of ﬁxed dimension , ” Theory of Computing Systems , vol . 36 , no . 3 , pp . 231 – 245 , 2003 . [ 55 ] M . H . Harrison , Introduction to Formal Language Theory . Reading , MA : Addison - Wesley Publishing Company , Inc . , 1978 . [ 56 ] C . de la Higuera , “Characteristic sets for polynomial grammatical inference , ” Machine Learning , vol . 27 , pp . 125 – 138 , 1997 . [ 57 ] R . Carrasco and J . Oncina , “Learning deterministic regular grammars from stochastic samples in polynomial time , ” RAIRO ( Theoretical Informatics and Applications ) , vol . 33 , no . 1 , pp . 1 – 20 , 1999 . [ 58 ] C . de la Higuera , “Why (cid:0) - transitions are not necessary in probabilistic ﬁnite automata , ” EURISE , University of Saint - Etienne , Tech . Rep . 0301 , 2003 . [ 59 ] T . Cover and J . Thomas , Elements of Information Theory . Wiley Interscience Publication , 1991 . [ 60 ] J . Goodman , “A bit of progress in language modeling , ” Microsoft Research , Tech . Rep . , 2001 . [ 61 ] R . Kneser and H . Ney , “Improved clustering techniques for class - based language modelling , ” in European Conference on Speech Communication and Technology , Berlin , 1993 , pp . 973 – 976 . [ 62 ] P . Brown , V . Della Pietra , P . de Souza , J . Lai , and R . Mercer , “Class - based N - gram models of natural language , ” Computational Linguistics , vol . 18 , no . 4 , pp . 467 – 479 , 1992 . [ 63 ] R . C . Carrasco and J . Oncina , Eds . , Grammatical Inference and Applications , ICGI - 94 , ser . Lecture Notes in Computer Science , no . 862 . Berlin , Heidelberg : Springer Verlag , 1994 . [ 64 ] A . de Oliveira , Ed . , Grammatical Inference : Algorithms and Applications , ICGI ’00 , ser . Lecture Notes in Computer Science , vol . 1891 . Berlin , Heidelberg : Springer - Verlag , 2000 .