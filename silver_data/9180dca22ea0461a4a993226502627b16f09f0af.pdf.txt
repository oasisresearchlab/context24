iMapping – A Zooming User Interface Approach for Personal and Semantic Knowledge Management Heiko Haller FZI Forschungszentrum Informatik an der Universität Karlsruhe Haid - und - Neu - Str . 10 - 14 76131 Karlsruhe , Germany haller @ fzi . de Andreas Abecker FZI Forschungszentrum Informatik an der Universität Karlsruhe Haid - und - Neu - Str . 10 - 14 76131 Karlsruhe , Germany abecker @ fzi . de ABSTRACT We present iMapping , a zooming based approach for visu - ally organizing information objects . It was developed on top of semantic desktop technologies and especially targets the support of personal knowledge management . iMapping has been designed to combine the advantages of spatial hyper - text and other proven visual mapping approaches like mind - mapping and concept mapping , which are incompatible in their original form . We describe the design and prototypical implementation of iMapping – which is fundamentally based on deep zooming and nesting . iMapping bridges the gap be - tween unstructured content like informal text notes and se - mantic models by allowing annotations with the whole range from vague associations to formal relations . First experi - mental evaluation of the iMapping user - interface approach indicates favorable user experience and functionality , com - pared with state - of - the - art Mind - Mapping software . Categories and Subject Descriptors H . 5 . 2 [ Information Interfaces and Presentation ] : User Interfaces ; L . 1 . 0 [ Knowledge and Media ] : Knowledge Construction / Representation ; M . 4 [ Knowledge Modeling ] General Terms Design , Human Factors , Experimentation Keywords visual knowledge mapping , spatial hypertext , personal knowl - edge management , semantic desktop , human - computer in - teraction , interaction design 1 . INTRODUCTION Many knowledge management systems , especially those which rely on highly structured information and meta data being entered and maintained by the users , fail because users Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior speciﬁc permission and / or a fee . HT’10 , June 13 – 16 , 2010 , Toronto , Ontario , Canada . . Copyright 2010 ACM 978 - 1 - 4503 - 0041 - 4 / 10 / 06 . . . $ 10 . 00 . do not make this additional eﬀort if they do not have to . This may be one of the reasons why semantic technologies have not found widespread use , so far , although semantic meta data would undoubtedly improve ﬁndability , interoper - ability and , in general , automated processing of information and knowledge items . For these technologies to be widely used , they have to provide immediate beneﬁt to the user and it is crucial that they are very easy to use and do not constrain the user in her daily work . This immediate beneﬁt is more likely to be experienced when users manage their ev - eryday knowledge resources like personal notes , ﬁles , book - marks etc . like in the setting of a semantic desktop environ - ment ( cp . [ 24 ] ) . On the other hand , Frank Shipman and Catherine Mar - shall warn that such semantic formality should be “Con - sidered Harmful” , because it often forces the user to make formal decisions where they are premature , inconvenient or simply not possible [ 15 ] . We believe that it is critical to leave it up to the user , how much eﬀort she wants to put into formalizing her content . So we aim at building an envi - ronment that covers the full range from informal note - taking over more structured graphical representations up to seman - tically formal knowledge models , and that provides semantic functionalities without restricting the user’s modeling free - dom that she has in informal ( ‘non - semantic’ ) tools . In knowledge - intensive activities , it is even more crucial than otherwise , to unburden the user of all cognitive over - head in order to leave as much of the user’s limited working memory [ 19 ] to the actual task at hand . Cognitive overhead is that part of a user’s cognitive load that is not directly related to the intended action , but rather to dealing with side - issues or the software as such . When semantically formalized knowledge structures are used , content is typically ﬁne grained and highly structured . Such content structures are typically more complex than plain text or classical hypertext structures . Even with the relatively simple structures in classical hypermedia , where we just have interlinked information objects on the granular - ity level of whole pages or documents , hypertext research has shown that users may get “lost in hyperspace” when brows - ing without additional navigational help [ 8 ] . This stresses the need for user interfaces that facilitate navigation and authoring of such structures without losing orientation . Using graphical environments for structuring externalized knowledge enables the users to use their highly eﬃcient sense of spatial orientation on their personal knowledge and infor - mation space , and it enhances the link between their mental and external models because it enables the use of diagram - matic depictions whose obvious structure corresponds more closely to the structure of the content because unlike text , diagrammatic knowledge representations carry a structural analogy to the content they represent [ 25 ] . We developed iMapping as a new visual mapping approach that tries to unite the strengths of established mapping tech - niques . It combines these strengths with modern IT ap - proaches like deep zooming and semantic technologies . iMap - ping supports the whole range from easy informal note - taking to formalized knowledge engineering in the same pow - erful , yet easy - to - use , environment . The basic metaphor of an iMap is that of a large pin - board where information items can be spatially arranged , enabling users to gain a visual overview over collections of items at once . These items can represent bits of text as well as ( in the near future ) any kind of external resources like ﬁles , Web pages , pictures or other maps . They can also be nested into each other and inter - linked in various ways . Besides browsing by links , users can navigate an iMap by zooming through it . This paper is structured as follows : in Section 2 , we start from widespread visual knowledge mapping approaches and collect requirements for a new approach which combines ad - vantages of prior work . Section 3 presents iMapping , the so - lution derived from that requirements , with a short sketch of implementation aspects in Section 4 . Some emphasis is laid on experimental , comparative evaluation , discussed in Sec - tion 5 . The concluding Section 6 relates iMapping to other contemporary work , summarizes and gives a brief outlook . 2 . BACKGROUND From the many diﬀerent forms of knowledge visualization [ 9 ] , we focus on diagrammatic knowledge maps in the tra - dition of the following , that have proven useful for building knowledge models in the last decades : From the 1970ies on , a number of visual mapping techniques have evolved , some of which have found widespread use and have proven their usefulness , e . g . , as learning aids in numerous studies . Ac - cording to their basic topology , most of them can be related to one the following three fundamentally diﬀerent primary approaches : Mind - Maps . Introduced and trademarked by Tony Buzan [ 5 ] , mind - maps provide an easy - to - understand , hierarchical , tree - like structure . Labeled branches and sub - branches are drawn extending from a single central node . Mind - Mapping is an established technique for brainstorming , outlining , note taking and clustering . Mind - Maps are however not suitable for relational structures between items because they are con - strained to the hierarchical model . Concept Maps . Contrary to that , concept maps , as intro - duced by Joseph Novak [ 21 ] , have a graph - based structure which emphasizes the interrelations of items . Practically , concept maps consist of labeled nodes and labeled edges linking all nodes to a connected directed graph . They are not as easy to handle because explicitly specifying all these relations is often too laborious , e . g . , for simple note - taking or brainstorming . Spatial Hypertext . A concept that evolved somewhat later out of hypertext research is called “spatial hypertext” . The spatial hypertext paradigm in its pure form as described by Catherine Marshall and Frank Shipman [ 17 ] expressly aban - dons the concept of explicitly interrelating objects . Instead it uses spatial positioning as the basic structure . Because , as D . Kolb argues , “It would seem that linguistically labeled typed links and paths - patterns could carry more kinds of connections than spatial arrangements , if link types could be conveniently indicated . This may be so , but spatial arrange - ments can accommodate n - ary relations and gradations of meaning relations that are diﬃcult to put into link type la - bels . ” [ 16 ] ( p . 3 ) . Like that , a self - contained hypertext can so be seen from an overview perspective , by spatially arrang - ing single pages . To fuzzily relate two items , they are simply placed near to each other , but maybe not quite as near as to a third object . This allows for so - called “constructive ambiguity” [ 27 ] and is an intuitive way to deal with vague relations and orders . An overview over these and related approaches , their cog - nitive psychological foundations , studies about their eﬀec - tiveness along with an evaluation of corresponding software tools can be found in [ 11 ] . It contains a comparison of these approaches and 13 software programs for certain typ - ical knowledge mapping tasks . Semantic Desktops . To interlink existing desktop objects , e . g . contacts , e - mails , events , tasks , ﬁles and notes , and to do that in a comprehensive way that they can be accessed with semantic technologies is the goal of so - called seman - tic desktops . A semantic desktop system can , e . g . , answer queries like a list of all e - mails received from participants of the last project meeting . There are existing semantic desktop projects like DeepaMehta [ 23 ] , haystack [ 14 ] and nepomuk 1 . The development of iMapping , and the semantic data model CDS that it is based on , began as part of the nepomuk project . iMapping was designed with semantic desktop en - vironments and use - cases in mind . For more information on semantic desktop systems in general , see [ 24 ] and 2 . Zooming User Interfaces . Pad [ 22 ] as well as its succes - sor Pad + + 3 by Ben Bederson [ 2 ] , were the seminal devel - opments in this area . They have been used in various appli - cations and also as a Web browser capable of showing the viewed web pages and their link - structure from a bird eye’s view . In a study where participants had to perform brows - ing tasks in order to answer some questions , subjects using Pad + + were 23 % faster than those using Netscape [ 3 ] . This suggests that large zoomable information surfaces are well - suited hypertext front - ends . The work on Pad + + ﬁnally led to“Piccolo” [ 1 ] , now community maintained as“Piccolo2D” 4 , a scene - graph toolkit in Java and . Net that supports the de - velopment of 2D structured graphics programs , in general , and , in particular , Zoomable User Interfaces like iMapping , whose current implementation is based on it . 2 . 1 Requirements Based on the analysis of existing tools and approaches in [ 11 ] , as well as literature from the areas of UI design and cognitive science , we have identiﬁed a set of functional re - 1 http : / / nepomuk . semanticdesktop . org 2 http : / / semanticdesktop . org 3 http : / / www . cs . umd . edu / hcil / pad + + / 4 http : / / piccolo2d . org / quirements to be met by diagrammatic knowledge mapping techniques and tools in order to be cognitively adequate for personal knowledge management . This collection of require - ments and its rationale is published in [ 13 ] , and will here only be listed in brief : Requirements for Knowledge Mapping Approaches . • Free Placing ( Items should be freely placeable any - where and should maintain their positions – at least relative to their surrounding . ) • Free Relations : Interlinking items in diﬀerent levels of formality : – Formalized / semantic links ( like in ontology edi - tors ) – Informal labeled links ( like in concept maps ) – Unlabeled links ( e . g . , just plain arrows or lines ) – Free nodes that do not have any explicit relation to others . • Annotations : optionally hideable additional notes or highlights • Overview / Abstraction through clustering and hier - archical sub - maps • Scalability ( ability to visually deal with large amounts of items ) Requirements for Knowledge Mapping Software . • Simple Editing : Adding or modifying items without additional interaction needed . • Connecting External Content ( e . g . , local ﬁles or re - mote Web pages ) • Focus / Filter : deliberately narrowing down visibility to the essential • Integration of Detail and Context through smooth and steady zooming , overview functions , levels of detail . • Interoperability with other related tools We do not consider the use of formal semantics a require - ment for all visual knowledge mapping applications . How - ever if formal modelling is supported , then , as Shipman [ 15 ] argues , the system should allow incremental formalization and structure evolution rather than requiring the user to make formal decisions where she does not want to . 3 . THE IMAPPING DESIGN In the design of the iMapping approach and software tool , we aimed at fulﬁlling to the greatest possible extent the re - quirements listed above ( Sec . 2 . 1 ) and simultaneously com - bining the core advantages of the classical mapping tech - niques ( described in Sec . 2 ) . These are in particular : • visual knowledge representations with structural anal - ogy to content ( inherent in any of the mentioned ap - proaches ) ; • easy hierarchical overall topology ( like in mind - maps and as demanded by the requirement of abstraction ) ; • providing overview and scalability by integrating con - text and detail through zooming ; • facility for graph - based node - and - link representations as is common in concept maps and many other mod - eling approaches ; • allowing constructive ambiguity ( as in spatial hyper - text ) ; • support for formal semantic statements ( to reap the beneﬁts of semantic technologies ) and • querying these semantic structures at the various levels of formality they have ( so far , this is only covered the QuiKey extension mentioned in Section 3 . 1 ) . To be more concrete , here are the basic functionalities of iMapping : We began with the requirement of free placing . Like in spatial hypertext , items can be freely created at or moved to any position in the map . An iMap can be seen as a virtually inﬁnite pin board . Usually ( e . g . , for personal note - taking or idea management ) , these items will be short text passages . The size can vary from just a keyword to a short note or whole paragraphs . The current CDS - based implementation also permits the use of rich text marked up by using a Wiki syntax ( c . f . Section 4 ) . Creating and adding content to an iMap is done by click - ing anywhere in the map and typing some text . It is always possible to add informal text items . Although allowing for semantic knowledge management , it has been a fundamen - tal design decision to never force the user to specify any semantics . Content can later be reﬁned and formalized in - crementally . A basic hierarchical structure is represented by visual in - clusion : nested items are shown inside one another ( see Fig . 1 ) . Compared to a classical tree view like it is used , e . g . , in Mind - Maps , this has the following beneﬁts : ( a ) It leaves more freedom to place items according to gestalt principles [ 18 ] ( e . g . , grouping ) . ( b ) Node - and - link representations ( like in classical concept maps and many other visual languages ) are still possible without visually interfering with connect - ing lines used for the hierarchical structure . ( c ) The layout principle stays the same on all levels of the hierarchy ( in concentric trees like Mind - Maps , all sub - branches point in one direction – c . f . Fig . 2 ) . Like that , each item and each part of the map can be treated like a self - contained sub - map which largely helps clustering and modularization . ( d ) Nest - ing by inclusion ( which is also widespread , e . g . , in the use of parentheses , Venn diagrams , tree - maps ) , is closer to natural orientation where details are parts of their surrounding . In real life , when we want to see the big picture , we take a step back to see the surrounding context of something . Of course , this kind of nesting is not new in itself . How - ever , traditional , paper - and - pencil based mapping techniques can not cover many levels of hierarchy like this . But computer - based mapping approaches allow virtually inﬁnite depths of nesting . In Zooming User Interfaces ( ZUI ) like iMap - ping , transitions between levels of hierarchy are made with a smooth zooming function that allows users to swiftly change perspective from overview to any detail or back . This opens Figure 1 : Screen shot with part of an iMap ( about iMapping ) . Only links from and to one item are visible . up a virtually inﬁnite amount of space for iMaps to grow over time , e . g . when used as personal knowledge reposito - ries . Re - using existing named items in other contexts can be done in a copy - and - paste manner or just by re - using their name in a new context . The user will be prompted to decide whether she wishes to create a logically separate item or re - use the existing one which would then have multiple visual instances . These “equivalent items” are represented by the same logical item in the CDS data model . This is adequate if a logical entity is relevant in diﬀerent contexts like , e . g . , one and the same person can occur in an sub - map of friends in a private context and also in an sub - map of co - workers in a work related context . Levels of detail : Some information objects – especially text – are rather hard to recognize when they are scaled down to thumbnail size . So , composite items have two pos - sible states : open and closed ( or expanded and collapsed ) . Switching between these states is done either manually per mouse click , or can take place automatically , depending on how large the object is displayed . This method is also some - times referred to as “semantic zooming” . A longer text - item can be represented , e . g . , by a keyword in collapsed state and with its full content in expanded mode . A more structured article shows from a distance only its title , when zoomed larger also some additional information like authors and date , then the table of contents and when zoomed to reasonable size , fades over to the full content . Vice versa , the two presentation modes also serve the purpose of reduc - ing visual clutter and saving screen space : Items containing many children items can be collapsed such that the huge “belly” containing the children is not visible . This also ac - counts for Shneiderman’s idea of showing details only on demand . For establishing link structures , we distinguish several dif - ferent ways of interrelating items which can be used in an iMap : 1 . implicit linking : Following the principle of Spatial Hy - pertext , items can be loosely placed in spatial relations to one another without explicitly linking them at all . As described [ 17 ] and reﬁned [ 10 ] by Frank Shipman , these spatial relations can be parsed to extract implicit relations , like sequence , grouping or hierarchy . 2 . explicit linking on an item level ( stating a relation be - tween two objects ) ; each of these can be mere naviga - tional links or carry formal semantics if speciﬁed ; in particular , we can distinguish four kinds of links and ways of establishing them : ( a ) labeled links : If no pre - existing relation type is suitable , the user can always just enter the full label of the link to be displayed , e . g . , along the arrow . By that , in the back - end a new relation type with that name is automatically created ; ( b ) unlabeled links : Links do not have to be labeled at all ; ( c ) relating items by short semantic statements with the QuiKey tool mentioned below in Section 3 . 1 : When relating two items , the user gets a choice of existing relation types selectable by an incre - mental text search over their names , supporting reuse of existing relation types and avoiding mis - spellings ; ( d ) hyperlinks : Links do not have to be drawn as ar - rows ; hyperlinks go from within the text content of an item to any other item . In classic graph - based approaches , nodes usually have to be arranged in a layout that minimizes edge - crossings in order to reduce visual complexity . But even then , maps with large amounts of nodes and links often suﬀer from tan - gled links ( aka “spaghetti syndrome” ) . To avoid that , in item’s links are only shown on demand . Like that , the links of current interest are more salient and easier to visually integrate with the nodes they connect . Depending on user settings , links can be made permanent or , for instance , only become visible when the item is hovered over or selected ( see Fig . 1 ) . While iMaps can be freely navigated by panning ( scrolling ) and zooming like it is known , e . g . , from Google maps , our user tests have shown that users much prefer navigation guided by content structure like directly zooming to speciﬁc items by point - and - click or following links . Additional to that , a search function lets users jump to any item directly . However , any transition to another place in the iMap is car - ried out by smooth panning and zooming to maintain a sense of spatial orientation while moving through the map . 3 . 1 QuiKey iMapping focuses on overview and intuitive use through a visual approach . However it can also be a burden when ev - ery item needs to be deliberately positioned and when items need to be located before they can be edited or referred to . Hence , it is desirable to complement such a visual tool by techniques that provide map - independent access to the same structured information . Just like envisioned by Uﬀe Wiil [ 30 ] , iMapping uses a semantic back - end ( CDS – explained later in Section 4 . 2 ) that can be accessed during runtime by other CDS tools . One such tool that is speciﬁcally designed to ﬁll the above mentioned gap QuiKey , a kind of smart semantic command - line that focuses on highest interaction - eﬃciency to browse , query and author semantic knowledge bases in a step - by - step manner . It combines ideas of sim - ple interaction techniques like auto - completion , command interpreters and faceted browsing to form a generic , exten - sible user interface for graph structured knowledge bases . Among other things , QuiKey allows to jump to any item in an iMap with just a few keystrokes through a incremental search function . QuiKey is explained in more detail in [ 12 ] ; for further information , see http : / / quikey . info / . 4 . IMPLEMENTATION All implementations of iMapping so far are open source and available online 5 . 4 . 1 GUI Several rounds of prototyping have been carried out in the Semantic Desktop project Nepomuk , ranging from paper and video prototypes to Flash - and Java - based ones . Our current implementation is written in Java and based on the zooming user interface framework Piccolo2D 6 that provides a 2D scene - graph . Although our current implementation covers the basic func - tionality , is steadily growing and is seeing its ﬁrst tentative users , it is still a research prototype and forgoes some costly features in favor of bringing the basic iMapping principles to a level of usability where they can be evaluated and started to be used . 5 http : / / svn . imapping . info / 6 http : / / piccolo2d . org / In order to be able to handle extremely large maps , we prepared to use scene - graph pruning and pre - loading , so only the currently viewed part of the map and those parts directly linked to it would be loaded in memory . However , in favor of getting the more basic core features mature enough for user testing , we put the goal of inﬁnite scalability behind in our development agenda . So , in the current implementation the whole content of the map is loaded into main memory thus theoretically limiting its size . Other limitations of the current iMapping implementa - tion that are subject to ongoing and future work include the following : Currently , there are only text - items . In the future , it should be possible to drag external content into iMaps , such as pictures , documents and web pages . Also , currently iMapping does not use a spatial parser to extract implicit structures , like sequence and proximity . The only spatial conﬁguration that is structurally interpreted is inclu - sion through nesting . 4 . 2 Back End All data is stored in semantically deﬁned formats . For the actual content and its structure ( nesting and interrela - tions between items ) , we use “Conceptual Data Structures” ( CDS ) . For the merely visual metadata ( positions , sizes ex - pansion status et c . ) we use our own RDF model . Both technologies are described below . Content Datamodel : CDS . “Conceptual Data Structures” [ 29 ] is a light - weight top - level ontology , providing relations that naturally occur in common knowledge artifacts designed by humans who express their knowledge and structure their information spaces . It is designed to bridge the gap between unstructured content like informal notes and formal seman - tics like ontologies by allowing the use of vague semantics and by subsuming arbitrary relation types under more gen - eral ones . By that it is suitable for representing knowledge in various degrees of formalization in a uniform fashion , al - lowing gradual elaboration . CDS serves several purposes here : 1 . CDS is a ﬂexible semantic data model providing a set of crucial structural primitives that can be extended by the user . The core top - level relations in CDS are : order ( before , after , etc . ) ; hierarchy ( corresponding to item nesting in iMapping and subsuming semantic re - lations like is a and part of ) ; linking ( subsuming hy - perlinks as well as any other freely speciﬁed relation carrying formal semantics or not ) ; and ﬁnally annota - tion ( subsuming free - form notes as well as tagging and categorization ) . 2 . The java - based CDS - API serves as a back - end for both iMapping and QuiKey , providing basic querying and reasoning functionality . 3 . CDS supports interoperability , as the data can be di - rectly accessed and modiﬁed by other CDS based tools like QuiKey or the browser - based CDS tool HKW 7 or can be exported to other formats like plain RDF through generic CDS converters . For more information about CDS , see [ 29 ] . 7 http : / / semanticweb . org / wiki / HKW Visual Data Model . All visual metadata that does not rep - resent the explicit content structure and would not make sense to share with other CDS tools ( unless aware of iMap - ping ) , are stored separately in RDF format 8 . To generate a Java API from this semantic data model and to read and write the RDF data during runtime , we use the semweb4j 9 suite . 5 . EVALUATION During the implementation process , we have repeatedly used formative evaluation [ 26 ] to guide our design decisions . Of course , initially there were many interaction details crit - icized , of which most have been addressed by now . However some are simply too much implementation eﬀort for a re - search prototype . With the current prototype , we carried out a more com - prehensive comparative evaluation study to speciﬁcally test the suitability of the nesting and zooming approach for per - sonal knowledge management tasks on a larger scale , be - cause this seems to be the biggest diﬀerence to the classi - cal approaches discussed in Section 2 . For that purpose , we compared the iMapping prototype with MindManager 7 , the most wide - spread state - of - the - art Mind - Mapping appli - cation . 5 . 1 Method In order to reduce the necessary time , we presented test users with pre - ﬁlled maps in both applications : A small bio - logical taxonomy . Both maps contained the same content in the same structure – once as a classical Mind - Map , once as a nested iMap ( see Fig . 2 and 3 ) . In order not to be unfair to the MindManager side , we chose a limited map size of only 100 nodes that was still easily manageable in MindManager and a limited number of 8 cross - links to avoid unfair visual complexity in the mind - map paradigm that is not designed for highly interrelated structures . Each tester went through the following process : 1 . Short introduction to the ﬁrst tool : basic functionali - ties and interactions needed for the tasks . Testers were asked to try out the interactions and explore the map and the tool until they feel conﬁdent in using it . 2 . Testers were asked to carry out a set of tasks . The time taken for each task was measured for compari - son . The tasks were ( a ) adding certain new items to speciﬁc places in the structure ( b ) rearranging items in the hierarchy ( c ) interlinking existing items ( d ) ﬁnding remote items by mere visual search and reading out all their connections 3 . In the end , without being able to look at the map , sub - jects where asked a question like“How many categories of plants were there in the map , and which ones were they ? ” . We recorded the percentage of right answers . 4 . Introduction to the second tool . 5 . Second set of tasks . 8 deﬁned at http : / / dev . nepomuk . semanticdesktop . org / repos / trunk / java / org . semanticdesktop . nepomuk . comp . imapping / info . imapping . store / src / main / resources / imapping . n3 9 http : / / semweb4j . org / Figure 2 : Part of the mind - map containing a small biological taxonomy in MindManager used for eval - uation ( in German ) . 6 . After that , testers were asked for their spontaneous impressions as well as for explicit ratings of the tools in several aspects on a scale from 1 to 5 ( German school grades ) . Although structurally equivalent , the two sets of tasks dif - fered slightly to avoid content - related learning eﬀects . To also avoid eﬀects of sequence , the order of the tools was bal - anced out , so each of them came ﬁst for every second tester . To avoid cross - over eﬀects of tasks with tools , the pairing of task sets with tools was also balanced out . The sample of testers consisted of 12 rather heterogenous individuals ( 6 male and 6 female ) , aged 23 – 64 . Their pri - mary occupations were : painter , journalist , interactive me - dia engineer , photo model , students ( English and biology , computer science , psychology , economical engineering ) , PhD students ( health - care , economics , logistics , semantic web ) . The average time each user needed for the diﬀerent kinds of tasks and the ratings given by the users were compared between the two tools and tested for statistical signiﬁcance with a dependent t - test for paired samples . 5 . 2 Results There were no eﬀects of gender or age on any of the measures and there was no statistically signiﬁcant diﬀer - ence in the interaction times measured . However , as ta - ble 1 shows , there was a clear tendency of all editing tasks ( adding , rearranging and interlinking of content ) being car - ried out slightly faster in the iMapping application . This could be explained by users’ comments that in the iMap , the topology was clearer and easier to grasp , which is also reﬂected in the ratings ( see table 2 ) . Figure 3 : Part of the iMap used for evaluation containing the same taxonomy ( also German ) . When people were challenged to ﬁnd information about an item outside their current view , this was especially hard be - cause these items were not where most users expected them . And since they were asked not to use the search function , they had to visually search for it because we wanted to test the visual concept . In the iMap , it took some testers over a minute to spot the target item , resulting an a longer aver - age search time for iMapping . This can be explained by the fact that with the given size of the two maps , in MindMan - ager , which by default does not decrease font size for items deep down the hierarchy , there was a zooming level , where the whole map was still readable with very little scrolling needed . This made it easier to overlook all the content in the mind - map , while in the iMap , deeply nested items were too small to read from an overview perspective . We did not use larger maps for comparison in order to remain fair on the side of MindManager , which is not designed for very large maps that vastly exceed the size of one screen . When used with larger maps , the mind - map should become harder to overview , while in the iMap it should not get worse , since deeper hierarchies would be hidden from the overview in the tiny areas and thus not increase visual complexity for a given zoom - level . While this claim remains to be proven by further investigation , this kind of visual search can be avoided in real usage , since QuiKey oﬀers an eﬃcient search functionality , that allows to ﬁnd any item fast without scan - ning the map . While not systematically tested in this study , those users that asked for a search function were presented with QuiKey’s basic search function and uniformly appeared very satisﬁed by it . When asked to remember the number and names of cer - tain items ( how many categories of plants and categories of vertebrates there were in the map ) , recall was nearly twice as good from the iMap . This is probably due to the more char - acteristic layout allowed by iMapping compared to Mind - Manager , where all sibling items appear as a vertical list . This would also explain why the diﬀerence in remembering what these actual categories were was actually much smaller . The time until users said they were familiar enough with the tools and the content to begin with the tasks was shorter for MindManager . It could be argued that this longer prac - tice time accounts for the higher eﬃciency in certain tasks and even through a mere exposure eﬀect for the better rat - ings . However – although we avoided heavy MindManager users – 75 % of the testers had used MindManager or sim - ilar tools before , so the overall exposure to mind - mapping applications and even MindManager itself was higher than for iMapping in most cases . Several testers even explicitly stated that although they prefer the iMapping concept , us - ing the mind - map was easier for them because it was more familiar , and that they expect that , after getting used to it , iMapping would be more eﬃcient for them than mind mapping . The exact mean times and percentages in comparison can bee seen in table 1 . The average subjective ratings that were given as German school grades for both tools are listed in table 2 . iMapping was rated better in every surveyed aspect and almost one full grade better in average . Most of these ﬁndings were sta - tistically signiﬁcant – in particular : overview and aesthetics were rated better in iMapping , which was also perceived to be more suitable for note taking and personal knowledge Mind Manager iMapping diﬀerence practice time 5 , 8 min 8 , 6 min 2 , 8 min adding new text items 28 , 0 sec 23 , 6 sec - 4 , 4 sec rearranging items in hierarchy 25 , 5 sec 21 , 8 sec - 3 , 7 sec drawing links 27 , 4 sec 25 , 7 sec - 1 , 7 sec visually ﬁnding items and reading out their links 25 , 9 sec 33 , 0 sec 7 , 1 sec remembering number of certain items without looking at the map 33 , 3 % 62 , 5 % 29 , 2 % remembering names of these items without looking at the map 30 , 8 % 37 , 1 % 6 , 3 % Table 1 : Mean times and percentages for groups of tasks in comparison ( rounded values ) – None of them are signiﬁcant at the 5 % level . management in general . Especially in the overall rating , iMapping was rated ‘good’ in average as opposed to only ‘satisfactory’ MindManager . The good rating for overview is also backed by many spon - taneous comments made during testing , in the direction of iMapping providing an easier way to get an overview over es - pecially the coarse structure – through the general approach of nested items , the possibility to arrange them freely and through the facility to zoom all the way out and back in a gain with only two keystrokes . The good rating for aesthetics came somewhat as a sur - prise , since three of the female testers had vehemently com - plained about the lack of color in the predominantly grey iMapping prototype . But even so , the current visual design of the iMapping application seems to be quite well - received . We proudly note that the best rating and highest ad - vantage has been given for the aspect suitability personal knowledge management in general . However this is not sur - prising , since MindManager is not designed for very large maps whereas it was a core requirement for iMapping to be able to scale up to extremely large maps as they can evolve over years of personal knowledge management . All in all we are satisﬁed with the result that iMapping is in objective measures of time needed for interaction for typical tasks comparable and in subjective measures even superior to MindManager , which can be regarded as state of the art , has millions of users and is on the market since 1994 . Since the intended usage scenarios for iMapping exceed those overlapping with MindManager , some hypothesized advantages could not be tested in this setting and are sub - ject to ongoing investigation . Namely : Long - term use for personal knowledge management , the use of much larger maps with thousands of items , the use of QuiKey and using semantic links and queries . 6 . DISCUSSION 6 . 1 Similar Tools There is a huge variety of personal knowledge management tools – both research prototypes and industrial ones and they are way too many to be listed here . A comprehensive overview over such tools and their history can be found in [ 7 ] . The following few are some of the most closely related to iMapping : Visual Knowledge Builder . Frank Shipman’s VKB [ 28 ] is a free research tool implementing the pure Spatial Hypertext approach . It diﬀers from iMapping in several respects – most notably in that iMapping does also feature explicit visible links between items and a zooming facility to ease nested navigation . Tinderbox . by Mark Bernstein [ 4 ] is a commercial tool and probably the most widely used spatial hypertext editor . It is a mature tool rich in useful features and it is the closest to iMapping . While it seems to be mainly targeted at sup - porting authors’ writing processes , it is also being used for personal knowledge management . Its structural approach is in many aspects comparable to iMapping – e . g . it is mainly based on freely placeable text - items that can be interlinked and nested into each other and that can have user - deﬁned types of properties . However , in Tinderbox , the focus is on one hierarchy level at a time . Nested items are regarded rather as separate sub - maps that need to be expanded one at a time . Also the intended way of use is to keep separate ﬁles for separate projects . This diﬀers from the iMapping vision , which is targeted to support a continuously growing personal knowl - edge repository where everything can be semantically linked to everything else , that is represented on one inﬁnite canvas and where several levels of hierarchy are seen simultaneously and transitioned ﬂuently . Whether users actually beneﬁt from this is being investigated in ongoing user studies . Popcorn . [ 6 ] is an experimental personal knowledge base tool that combines the concept mapping approach with the principle of transclusion [ 20 ] and is in some points quite similar to iMapping . However it does not use a zooming approach to visually bind single sub - maps together and it does not use semantic technologies . 6 . 2 Summary Semantic knowledge management technologies might in the future be able to signiﬁcantly increase interoperability between applications even across context boundaries and they might leverage the creative and productive power of knowledge workers . However , if knowledge management does not start at the personal level , and starts with provid - ing immediate beneﬁt to the individual knowledge worker , it is questionable whether semantic knowledge management systems will ever spread very far . Focusing on user inter - action and cognitive ergonomics is obviously an important issue there , especially because in knowledge - intensive tasks , a user can barely aﬀord to sacriﬁce much of his limited cogni - tive capacity [ 19 ] to dealing with the tool instead of dealing with the content itself . iMapping is a zooming based visual knowledge mapping approach presented along with an implemented prototype Mind Manager iMapping diﬀerence sig . ( p ) navigation 2 . 4 2 . 1 0 . 3 . 275 overview 3 . 0 1 . 9 1 . 1 ∗∗ . 003 structure / interrelations 2 . 7 2 . 1 0 . 6 . 270 aesthetics 3 . 3 2 . 2 1 . 1 ∗ . 038 look and feel 2 . 5 2 . 0 0 . 5 . 065 suitability for brainstorming 2 . 5 2 . 0 0 . 5 . 137 suitability for note - taking 3 . 0 1 . 9 1 . 1 ∗∗∗ . 001 suitability for personal KM 3 . 3 2 . 0 1 . 3 ∗∗∗ . 000 overall rating 3 . 0 2 . 0 1 . 0 ∗∗∗ . 000 average 2 . 9 2 . 0 0 . 9 ∗∗∗ . 001 Table 2 : Mean ratings given as German school grades for both tools : iMapping is rated better en every category surveyed ( 1 = “very good” , 2 = “good” , 3 = “satisfactory” , 4 = “suﬃcient” , 5 = “insuﬃcient” ) . which is unprecedented in respect of combining a set of func - tionalities that have so far not been covered by any other technique or tool . These are in particular : ( i ) visual knowl - edge representations with structural analogy to content , ( ii ) easy hierarchical overall topology , ( iii ) providing overview by integrating context and detail through zooming , ( iv ) facility for graph - based relation mapping , ( v ) allowing constructive ambiguity , ( vi ) support for formal semantic statements and ( vii ) the ability to handle very large maps . iMapping - based user interfaces could be a step forward to make highly structured knowledge management in dif - ferent levels of formalization easier and more intuitive . Es - pecially for large knowledge repositories with highly inter - linked information items of diﬀerent levels of formalization , iMapping - based user interfaces can make knowledge man - agement more intuitive , on one hand , and more powerful , on the other hand , because it provides a medium that fos - ters the use of visual orientation in a ﬂexible and easy way and yet supports more structured knowledge modeling in just the desired degree of formalization . 6 . 3 Outlook A long - term ﬁeld study is currently being carried out to evaluate the overall usability and usefulness of the current iMapping tool in users’ everyday work environments . Statis - tical analysis of detailed interaction logs and model param - eters as well as qualitative interviews are expected to give deeper insight in the actual use of distinct features and the associated problems . Apart from that , we plan on address - ing the following areas in future research : An unobtrusive annotation assistant that proposes incre - mental formalizations . Such suggestions could come from spatial parsing [ 17 ] or could be guessed from pre - existing se - mantic information – e . g . , when an item representing a per - son is dragged into an item representing an event , probable annotations would be ‘participant of’ or ‘organizer of’ . Another ﬁeld of work is spatial search results where re - sult sets from either keyword search or semantic queries are shown in their spatial distribution . Spatial ﬁlters could limit the search to certain areas of a larger map . Query items ( like so - called “agents” in Tinderbox ) are be persistent semantic queries that automatically update their search results and that can be placed anywhere in the map like usual items . Depending on the structure of the underlying query , such query items could even be used as annotation devices : When an item is dragged into or out of the result set , the corre - sponding semantic properties could be set accordingly . While we continue improving our ﬁrst iMapping tool , we hope the general approach will ﬁnd more widespread ap - plication . Its ﬂexible , zooming - based approach , e . g . , also makes iMapping a candidate for mobile use on rather small displays which – as the iPhone has shown – is a popular way of dealing with small screen space on mobile devices . For more information on iMapping and to download the latest implementation , please check http : / / imapping . info / . Acknowledgements Partial support provided by the European Commission in the Projects NEPOMUK ( IST - FP6 - 027705 ) and MATURE ( IST - FP7 - 216356 ) . 7 . REFERENCES [ 1 ] B . B . Bederson , J . Grosjean , and J . Meyer . Toolkit design for interactive structured graphics . IEEE Trans . Softw . Eng . , 30 ( 8 ) : 535 – 546 , 2004 . [ 2 ] B . B . Bederson , J . D . Hollan , J . Perlin , K . Meyer , D . Bacon , and G . Furnas . Pad + + : a zoomable graphical scetchpad for exploring alternate interface physics . Journal of Visual Languages in Computing , 7 ( 1 ) : 3 – 31 , 1996 . [ 3 ] B . B . Bederson , J . D . Hollan , J . Stewart , D . Rogers , and D . Vick . A zooming web browser . In Human Factors and Web Development , Second Edition . LEA , Inc . , 2002 . [ 4 ] M . Bernstein . Collage , composites , construction . In Hypertext , pages 122 – 123 . ACM , 2003 . [ 5 ] T . Buzan and B . Buzan . The Mind Map Book : How to Use Radiant Thinking to Maximize Your Brain’s Untapped Potential . Plume , 1996 . [ 6 ] S . Davies , S . Allen , J . Raphaelson , E . Meng , J . Engleman , R . King , and C . Lewis . Popcorn : the personal knowledge base . In DIS ’06 : Proceedings of the 6th conference on Designing Interactive systems , pages 150 – 159 , New York , NY , USA , 2006 . ACM . [ 7 ] S . Davies , J . Velez - Morales , and R . King . Building the memex sixty years later : trends and directions in personal knowledge bases . Technical report , University of Colorado , 2005 . Available at : http : / / www . cs . colorado . edu / department / publications / reports / docs / CU - CS - 997 - 05 . pdf . [ 8 ] D . M . Edwards and L . Hardman . Lost in hyperspace : cognitive mapping and navigation in a hypertext environment . In Hypertext : theory into practice , pages 90 – 105 . Intellect Books , Exeter , UK , UK , 1999 . [ 9 ] M . Eppler and R . Burkhard . Knowledge visualization . Technical report , http : / / www . netacademy . com , 2004 . [ 10 ] L . Francisco - Revilla and F . Shipman . Parsing and interpreting ambiguous structures in spatial hypermedia . In HYPERTEXT ’05 : Proceedings of the sixteenth ACM conference on Hypertext and hypermedia , pages 107 – 116 , New York , NY , USA , 2005 . ACM . [ 11 ] H . Haller . Mappingverfahren zur Wissensorganisation , 2003 . http : / / www . knowledgeboard . com / . Last access : 2010 - 02 - 10 . In German . [ 12 ] H . Haller . Quikey . In S . Bloehdorn , M . Grobelnik , P . Mika , and T . T . Duc , editors , Proceedings of the Workshop on Semantic Search ( SemSearch 2008 ) at the 5th European Semantic Web Conference ( ESWC 2008 ) , volume 334 , pages 74 – 78 . CEUR - WS , JUN 2008 . [ 13 ] H . Haller and A . Abecker . Requirements for Diagrammatic Knowledge Mapping Techniques . In Conference Proceedings of I - KNOW’09 and I - SEMANTICS’09 , 2009 . Online Proceedings , URL : http : / / i - know . tugraz . at / . Last access : 2010 - 02 - 10 . [ 14 ] D . Huynh , D . R . Karger , D . Quan , and V . Sinha . Haystack : a platform for creating , organizing and visualizing semistructured information . In IUI ’03 : Proceedings of the 8th international conference on Intelligent user interfaces , pages 323 – 323 , New York , NY , USA , 2003 . ACM . [ 15 ] F . M . S . III and C . C . Marshall . Formality considered harmful : Experiences , emerging themes , and directions on the use of formal representations in interactive systems . In Computer Supported Cooperative Work , volume 8 , pages 333 – 352 . Kluwer Academic Publishers , 1999 . [ 16 ] D . Kolb . Places and spaces : Adjacency eﬀects , 2001 . Position Paper presented on Spatial Hypertext Workshop of the ACM Conference on Hypertext and Hypermedia , Aarhus , Denmark . [ 17 ] C . C . Marshall and F . M . Shipman , III . Searching for the missing link : discovering implicit structure in spatial hypertext . In HYPERTEXT ’93 : Proceedings of the ﬁfth ACM conference on Hypertext , pages 217 – 230 , New York , NY , USA , 1993 . ACM . [ 18 ] W . Metzger . Gesetze des Sehens . Kramer , Frankfurt , 1953 . In German . [ 19 ] G . A . Miller . The magical number seven , plus or minus two : Some limits on our capacity for processing information . Psychological Review , 63 : 81 – 97 , 1956 . [ 20 ] T . H . Nelson . The heart of connection : hypermedia uniﬁed by transclusion . Commun . ACM , 38 ( 8 ) : 31 – 33 , 1995 . [ 21 ] J . D . Novak and D . B . Gowin . Learning how to learn . Cambridge University Press , New York , 1984 . [ 22 ] K . Perlin and D . Fox . Pad : An alternative approach to the computer interface . In Proceedings of the 20th Annual Conference on Computer Graphics and Interactive Techniques , pages 57 – 64 . ACM Press , 1993 . [ 23 ] J . Richter , M . V¨olkel , and H . Haller . Deepamehta – a semantic desktop . In S . Decker , J . Park , D . Quan , and L . Sauermann , editors , Proceedings of the 1st Workshop on The Semantic Desktop . 4th International Semantic Web Conference ( Galway , Ireland ) , volume 175 . CEUR - WS , NOV 2005 . [ 24 ] L . Sauermann , M . Kiesel , K . Schumacher , and A . Bernardi . Semantic Desktop . In A . Blumauer and T . Pellegrini , editors , Social Semantic Web , pages 337 – 362 . Springer - Verlag , X . media . press , 2009 . [ 25 ] W . Schnotz and M . Bannert . Construction and interference in learning from multiple representation . Learning and Instruction , 13 : 141 – 156 , 2003 . [ 26 ] M . Scriven . Prose and cons about goal - free evaluation . American Journal of Evaluation , 1 : 55 – 62 , 1991 . [ 27 ] F . Shipman and C . Marshall . Spatial hypertext : An alternative to navigational and semantic links . ACM Computing Surveys , 31 ( 4 ) , 1999 . [ 28 ] F . Shipman , J . M . Moore , P . Maloor , H . Hsieh , and R . Akkapeddi . Semantics happen : knowledge building in spatial hypertext . In HYPERTEXT ’02 : Proceedings of the thirteenth ACM conference on Hypertext and hypermedia , pages 25 – 34 , New York , NY , USA , 2002 . ACM . [ 29 ] M . V¨olkel and H . Haller . Conceptual data structures for personal knowledge management . Online Information Review , 33 ( 2 ) : 298 – 315 , 2009 . [ 30 ] U . K . Wiil . Hypermedia technology for knowledge workers : a vision of the future . In HYPERTEXT ’05 : Proceedings of the sixteenth ACM conference on Hypertext and hypermedia , pages 4 – 6 , New York , NY , USA , 2005 . ACM .