Programming as a Performance – Live - streaming and Its Implications for Computer Science Education Lassi Haaranen Department of Computer Science Aalto University , School of Science Espoo , Finland lassi . haaranen @ aalto . ﬁ ABSTRACT This article discusses an emerging phenomenon of streaming programming to a live audience who in turn can interact with the streamer . In essence , this means broadcasting the programming environment and typically a web camera feed of the streamer to viewers . Streaming programming bears many similarities with live - streaming playing of video games , which has become extremely popular among gamers over the recent years . In fact , streaming programming often use the same web services as streaming gaming , and the audiences overlap . In this article , we describe this novel approach to program - ming and situate it in the broader context of computer science education . To gain a deeper insight into this phenomena , we analyzed viewer discussions during a particular programming stream broadcasted during a game programming competition . Finally , we discuss the beneﬁts this approach could oﬀer to computer science education . Keywords computer science education , streaming , game - based learning , online communities 1 . INTRODUCTION In recent years , the desire to include programming and computational thinking into elementary school curricula has increased . Programming and computational thinking are increasingly seen as competencies which would beneﬁt every member of the modern society . In 2014 , European Schoolnet surveyed 20 European Ministries of Education regarding the inclusion of computing or coding in their current or planned initiatives [ 1 ] . All participating countries , apart from one , either already had included coding in their curricula ( 12 countries ) or had plans to do so in the future ( 7 countries ) . The interest in learning to program is also reﬂected in the number of tools designed speciﬁcally to aid in this ac - Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page . Copyrights for components of this work owned by others than the author ( s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , topostonserversortoredistributetolists , requirespriorspeciﬁcpermission and / or a fee . Request permissions from permissions @ acm . org . ITiCSE ’17 , July 03 - 05 , 2017 , Bologna , Italy c (cid:13) 2017 Copyright held by the owner / author ( s ) . Publication rights licensed to ACM . ISBN 978 - 1 - 4503 - 4704 - 4 / 17 / 07 . . . $ 15 . 00 DOI : http : / / dx . doi . org / 10 . 1145 / 3059009 . 3059035 tivity . Tools and technical innovations are being developed and research that is speciﬁc to computing education is being conducted , such as program visualization [ 14 ] , automated as - sessment of program code [ 7 ] , incorporating professional tools to course environments [ 5 ] . Naturally , research and develop - ment of more general tools also beneﬁts computing education , such as learning management systems [ 3 ] and interoperability protocols ( e . g . , Learning Tools Interoperability [ 8 ] ) . With this article , we wish to present to the computing education research community a novel approach to dissemi - nating programming and computer science knowledge : the live streaming of programming . Live streaming , or simply streaming , has roots in the gaming community , where it has become a major phenomenon over the past few years . Stream - ing with games usually consists of a person ( the streamer ) broadcasting live footage from a particular game , as well as usually a webcam feed of his face . The streamer narrates the action and entertains the audience , which may include tens of thousands live viewers . As the streaming community has grown , some of the streamers have started to stream the act of programming ( often a game ) to a live audience . In essence , they aim to entertain as they create a new piece of software . As far as we know , this phenomenon has gone completely unnoticed by the computer science education research community . In gen - eral , learning to program in informal contexts has received relatively little attention from researchers . One aspect that makes streaming novel and diﬀerent , for example , from recording programming lectures is the audi - ence participation . Since the streamer is “performing” live , he or she can interact with the audience . The live interaction , either in programming or gaming contexts , has so far received little research interest , but new research projects will further investigate this emerging phenomenon ( e . g . , [ 13 ] ) . Streaming programming allows the audience to join the programming process , for example , by doing a code review , suggesting alternative approaches , and spotting bugs that the streamer might have missed . Naturally , the live streams can be made available online afterwards as recordings known as VODs ( Video On Demand ) . As the main contribution , this paper introduces the phe - nomena of streaming programming , especially focusing on its potential relevance to computer science education . We approach this phenomenon by ﬁrst describing the history of streaming in general and how streaming has become a popu - lar form of entertainment . After this , we focus on a speciﬁc Session 8C : Gamification ITiCSE ' 17 , July 3 - 5 , 2017 , Bologna , Italy 353 case example of streaming programming by examining the discussion that the viewers had during a stream . The rest of this article is organized as follows . In Section 2 , we review the history of streaming and programming streams in general . In Section 3 , we present a speciﬁc case of streaming programming during a game development event . Additionally , we analyze the discussion in which viewers participated in during the stream . In Section 4 , we consider the implications of streaming programming to computer science education and outreach . Finally , Section 5 concludes the article and considers directions future research . 2 . BACKGROUND In this section , we ﬁrst provide background to the birth of streaming in the gaming community . After this , we look at how computer science education and games have been connected to each other in the past . Finally , we investigate the phenomenon of streaming programming . 2 . 1 Live Streaming Streaming , whether in games or something else , takes place through a web service where diﬀerent streamers have channels , typically focused on particular themes . These chan - nels allow viewers to discover new material as well as follow the streamers that they like . One of the leading services in streaming is called Twitch . tv ( https : / / www . twitch . tv / ) . Already in 2012 , the number of viewers and streamers was considerable on Twitch . tv , reaching daily tens of thousands of viewers [ 9 ] . The phenomenon of streaming has continued to grow , alongside with e - sports ( playing computer games competitively ) ; for example , Witkowski et al . report that popular e - sports tournaments reach millions of viewers [ 16 ] . The ﬁrst major event that introduced Twitch . tv to the gaming community was“Twitch Plays Pokemon”in February 2014 . In this event , the viewers were also players and collab - oratively gave commands through IRC protocol to play the game Pokemon Red . Overall , it attracted 1 . 6 million players who participated among 55 million viewers [ 17 ] . The size of the community and the scale of the phenomena is reﬂected by the fact that Amazon decided to purchase Twitch . tv for nearly one billion dollars later in 2014 [ 10 ] . 2 . 2 Relating Games and Computer Science Ed - ucation Games in various forms have been used in computer science courses as a context for learning to program . There are many ways in which games can be used in CS courses . Wallace et al . [ 15 ] categorized diﬀerent approaches into four distinct types : • Programming a game ( designing and programming a full game as a part of a course project ) • Programming a part of a game ( implementing missing parts of an existing game project ) • Programming an agent that acts within a game world • Playing a ( serious ) game that has been created to teach particular programming context during the gameplay Generally , there has been increasing interest , especially in STEM ( Science , Technology , Engineering , and Mathemat - ics ) ﬁelds , to incorporate games into education . Based on systematic literature reviews , positive eﬀects of games and serious games in STEM education has increased in the recent years [ 2 ] . Games and game - like themes can be incorporated into in - dividual assignments , project and group work , or even used as the underlying theme for a whole course , as did Leuteneg - ger and Edgington [ 11 ] . They argued that basing a course on a game theme is motivating for most new programmers , and gained good results teaching introductory programming concepts through games . One game - related approach that has also gained popularity in recent years is gamiﬁcation , which refers to the use of game - like elements in non - game contexts , such as education [ 4 ] . Computer science education has also been a fertile testing ground for gamiﬁcation as well , with many experiments set up on computer science courses ( see e . g . [ 6 ] ) . 2 . 3 Streaming Programming Although Twitch . tv and streamers using it still mainly focus on games , Twitch . tv has recently opened up its terms and conditions to allow also other types of content . In 2015 , it was announced that Twitch . tv would introduce support for creative content : “All along , the Twitch community has included a de - termined community of artists , crafters and builders , who have been using Twitch to broadcast their creative processes . These creative broadcasters share many of the same char - acteristics as all Twitch broadcasters : passion , engagement , and a community - centric worldview . ” [ 12 ] One of these creative areas now available for stream - ing is programming ( https : / / www . twitch . tv / directory / game / Creative / programming ) . This allows programmers and de - velopers perform programming as a form of entertainment . The streamer typically has a project , commonly some form of game development , which he develops while the audience can simultaneously participate in the process via chat . The developer’s desktop is streamed live to the audience , allowing them to see the process . Figure 2 illustrates this process . 3 . CASE LUDUM DARE 37 This section ﬁrst describes Ludum Dare – a game develop - ment event , describing its history and purpose . After this , we discuss a single programming stream and analyze discussions that the viewers of this stream had over a weekend . 3 . 1 Ludum Dare – “A Regular , Theme - based , Accelerated Game Development Event” Ludum Dare ( http : / / ludumdare . com / compo / ) is a game development competition where the contestants create a game from scratch over a weekend . It is held three times a year . At the beginning of the competition , a theme speciﬁc to that competition is announced . Starting from the announcement of the theme , the participants have 48 hours to create a game alone . Alongside this competition , the event also includes a ‘jam’ , a category in which the participants can work in teams and have 72 hours to complete a game . The event is held completely online , and after the competition ends , participants can vote on the submitted entries . Although there are no tangible prizes , the best voted entries receive Session 8C : Gamification ITiCSE ' 17 , July 3 - 5 , 2017 , Bologna , Italy 354 signiﬁcant attention – and even some commercial games have started as Ludum Dare entries 1 . Ludum Dare itself has existed before live streaming , and the next event in spring 2017 marks the 15th anniversary of the competition . In addition , participants have a tradition of releasing time - lapse videos of the game development process 2 . Naturally , since streaming programming is gaining popularity , many participants create the entire game while streaming it live to an audience , which may include several thousands of viewers in popular streams . The increased popularity of Ludum Dare streams can partly be explained by the fact that Ludum Dare itself has grown to be more popular over the years , as can be seen in Figure 1 . During the weekends when Ludum Dares are arranged , more people are exposed to streaming programming . This is because some people who normally stream playing a game and have an established audience , switch to programming in order to participate in Ludum Dare . Figure 1 : Number of submissions for each Ludum Dare . Data from https : / / en . wikipedia . org / wiki / Ludum Dare For this particular case study , we recorded the discussions in a chat of one streamer participating in Ludum Dare 37 ( themed ‘One Room’ ) during December 9th - 11th , 2016 . Dur - ing the event weekend , the streamer held live streams on three occasions ( taking breaks to sleep in between ) . The streams lasted for approximately 6 hours , 12 hours , and 14 hours . During the weekend , all chat activity was logged for later analysis , including the chat when the stream was oﬄine . The over thirty hours of streaming detail the creation of a game from initial ideas to the ﬁnished product submitted to the competition , partial screenshots in Figure 2 illustrate how the stream appeared to viewers . The streams gathered approximately 3600 , 1700 , and 1100 views ( in the order of appearance ) . Overall , the chat in - cluded 183 unique participants that commented at least once . Approximately 39 000 comments were typed into the chat window during the Ludum Dare weekend . 1 http : / / store . steampowered . com / curator / 537829 - Ludum - Dare / 2 Ludum Dare 18 Timelapse Videos : http : / / www . indiegames . com / 2010 / 08 / ludum dare 18 timelapse videos . html Since the amount of text in the chat was so vast , it was ﬁltered to include only comments that pertained to computer science or programming in some way . This was detected by keywords that were found on the particular comment , the keywords by no means provide an exhaustive list , but they include diﬀerent programming languages ( C # , Java , etc . ) , programming constructs ( loops , recursion , etc . ) , and programming concepts ( debug , bug , stack trace , etc . ) . The list was created based on our initial observations on the data with some common programming languages with additional concepts . This limited the data set down to approximately 1300 comments , which were then read through to gain insight into the types of discussed themes . Naturally , ﬁltering the chat with preselected keywords also means that some of the relevant comments will be lost , and the remaining comments depend on the used keywords . How - ever , this was deemed acceptable , since the purpose was to gain an initial understanding of what types of discussions , if any , related to computer science took place in the discussions . Figure 2 : Partial screenshots captured from the Ludum Dare stream where the chat was recorded . The screenshot at the top shows the game inside the development environment , and the lower screenshot shows some code from the game . 3 . 2 Discussion During The Streams To gain further insight to the phenomena of streaming , we analyzed the discussions collected from the chat logs during the streams . The goal was not to conduct a comprehensive discussion analysis but rather to gain an insight into the themes present in the discussions . More importantly , our goal was to understand in which way topics related to computer science and programming were present . During the analysis , we read through the comments and grouped them based on their similarity . Based on the group - ing , broader themes were identiﬁed within the comments . The following sections discuss the themes and provide con - crete examples from the comments . Interest in Programming At ﬁrst glance , it might seem plausible that only those who already know programming would follow a programming stream . However , there is evidence in the discussions that this is not the case . For example , one viewer lamented that he or she did not how to program : “Wish I knew programming . I think doing this even would be something fun . ” It is also worth Session 8C : Gamification ITiCSE ' 17 , July 3 - 5 , 2017 , Bologna , Italy 355 noting that the streamer had portrayed programming in such a way that the the commenter thought of it as something fun . The common perception that programming is a particularly diﬃcult activity and that only some people are able to do it was also reﬂected on in the comments . For example , one viewer stated : “Sorry . I have no idea about coding . And seeing [ the streamer ] I think I never would understand it . I think it [ sic ] great but don’t think I can ever do it . ” Questions and Answers One of the particularly relevant themes that emerged from the discussion was the questions and answers related to computer science and programming . Overall , this theme highlights the collaborative and community - oriented nature of streaming . The questions ranged from very broad questions to speciﬁc ones . Broad questions included “ Question : How hard is it to implement multiplayer into a game ? Is it easier to make a multiplier [ sic ] game only ( against implementing it ) ? ” and “Any tips for someone that is pretty new to game dev ( will be using unity ) and never took part in a LDJAM [ Ludum Dare Jam ] ? ” Similarly , some of the very speciﬁc questions included [ chatter1 ] : “Hey [ streamer ] . A really really dumb question , but do you know how to keep an idle thread alive ? Like I have a while ( isRunning ) loop and I’m trying to pause the loop , but if I set isRunning to false , the thread instantly dies . . . so how would I go about keeping it alive ? ” . Although some of the questions were addressed to the streamer , other viewers provided answers when possible : @ [ “chatter1 ] I’m not sure exactly why you need this , but if you want to keep threads idle so they can quickly be reused consider using a ThreadPool if you are using c # ” . Interaction With Streamer Perhaps one of the reasons that streaming is so engaging lies in the possible to interact with the streamer . Accordingly , many of the comments in the chat were indeed addressed to the streamer , such as ”Hey [ streamer ] , I really enjoyed watching your hell wars game from ludum dare 33 , I learned a lot about c # delegates through it . ” The interaction with the streamer is not just limited to commenting or asking questions , but it can be more collabora - tive in nature . For example , when trying to solve a particular bug , the audience can notice details that the streamer misses , or propose alternative approaches : “try removing your clamp code that moves the model downward” General Computer Science Discussion Naturally , there was also a plenty of general discussion re - garding computer science and programming . Comments in this category were generally clearly posted by someone who is already fairly familiar with computer science and program - ming . Many of the comments in this category were devoted to discussion about programming languages and their features , with comments such as “yep python was the ﬁrst language i learned and is a great one to start with” and “ @ [ other chatter ] Long is guaranteed to be a 64 - bit integer in c # . ’ . 4 . RELEVANCE TO COMPUTER SCIENCE EDUCATION So far this article has focused on describing the phenomena of streaming programming and analyzing discourse during a streaming event . This section observes streaming pro - gramming from an educational point of view and argues its relevance to computing educators as well as researchers working in the ﬁeld . 4 . 1 Outreach One of the more interesting aspects of streaming program - ming is that it allows anyone to see the process of creating programs . This can act as an introduction to the ﬁeld of software development , and notably , one that is very easily accessible . Through streaming , anyone with internet access is able to see what a development process looks like , typically with live commentary of the development . While there are many videos ( e . g . , on YouTube ) describing what working as a software developer is like , watching a developer work live gives an unedited point of view to the profession . Particularly in the case of game programming streams , the subject matter might attract viewers who may have played games before but have no prior experience in programming . Considering the comments in the previous section regard - ing the expression of interest in programming , this type of interaction might prove to be a very valuable way to do outreach . 4 . 2 As a Teaching Method Much like streaming , Massive Open Online Courses ( MOOC ) have become highly popular in recent years . Live streaming programming could be adopted on programming MOOCs to facilitate live interaction . As opposed to watching recorded videos , live streams oﬀer the ability to interact and ask ques - tions regarding the code as they arise . Given the vast number of participants receive by some MOOCs , it might not be fea - sible for the streamer to answer all the questions , but in an open chat environment , other participants could provide an answer as well , as happened in the case study . One interesting prospect for streaming would be to utilize this approach in more advanced computer science classes . The code demonstrations often given during lectures must remain fairly shallow for practical reasons . With streaming , perhaps outside normal lecture hours , it would be possible to focus on a larger software project and talk about slightly more abstract topics such as program composition . 4 . 3 Extra - Curricular Material One related phenomenon which could prove to be an in - teresting supplementary resource to computing education is Video On Demand ( VODs ) . These are recordings of streams that are made available either in their raw form or in a more edited manner . For example , Twitch . tv enables streamers to publish their streams automatically be available after the live event . This allows someone to watch the stream again , and in the particular case of Twitch . tv , they can also see the chat unfold during the live stream . Streams and VODs can be used as supplementary materials for various courses , thus showcasing the creation of more complex programs . Session 8C : Gamification ITiCSE ' 17 , July 3 - 5 , 2017 , Bologna , Italy 356 5 . DISCUSSION In this article , we have described the phenomenon of live - streaming programming in relation to computer science edu - cation as a whole . It creates a performance out of the act of developing software and programming in general . Stream - ing allows those interested in the art of crafting programs to see in ﬁrst - hand what it is like , and furthermore , allows interaction with seasoned programmers . Perhaps one of the most interesting possibilities of stream - ing programming is its ability to reach a wider audience , and more speciﬁcally , an audience which might not have considered a programming interesting otherwise . Further - more , based on the discussions during the streams , it seems that there are a number of people who do not know how to program that are watching these streams . In some ways , streaming programming already works as an outreach pro - gram , although it is diﬃcult to estimate or investigate its true impact . It is also worth noting that the group of people that gamers are the most likely group to be exposed to stream - ing programming without explicitly seeking it . In addition , although the group of people who play games and watch gaming streams is heterogeneous , they are not representative of the whole population . The phenomenon of live streaming programming is rela - tively new and so far has not been researched . Nevertheless , it has the potential to impact formal education as outreach in computer science in a signiﬁcant way . 5 . 1 Future work Due to a preliminary and descriptive nature of this re - search , more research is needed to understand the potential applications and implications of streaming programming . It would be beneﬁcial to understand the demographics of the people watching programming streams since this would give information regarding its eﬀectiveness as an outreach . Currently , we are not aware of any courses , whether in a university or in a MOOC , which have utilized streaming programming . This type of teaching method could be partic - ularly well - suited for MOOCs . For this reason , research into an authentic setting would be particularly interesting . 6 . REFERENCES [ 1 ] A . Balanskat and K . Engelhardt . Computing our future : Computer programming and coding - Priorities , school curricula and initiatives across Europe . European Schoolnet , 2014 . [ 2 ] E . A . Boyle , T . Hainey , T . M . Connolly , G . Gray , J . Earp , M . Ott , T . Lim , M . Ninaus , C . Ribeiro , and J . Pereira . An update to the systematic literature review of empirical evidence of the impacts and outcomes of computer games and serious games . Computers & Education , 94 : 178 – 192 , 2016 . [ 3 ] D . Dagger , A . O’Connor , S . Lawless , E . Walsh , and V . P . Wade . Service - oriented e - learning platforms : From monolithic systems to ﬂexible services . IEEE Internet Computing , 11 ( 3 ) : 28 – 35 , 2007 . [ 4 ] S . Deterding , D . Dixon , R . Khaled , and L . Nacke . From game design elements to gamefulness : deﬁning gamiﬁcation . In Proceedings of the 15th international academic MindTrek conference : Envisioning future media environments , pages 9 – 15 . ACM , 2011 . [ 5 ] L . Haaranen and T . Lehtinen . Teaching git on the side : Version control system as a course platform . In Proceedings of the 2015 ACM Conference on Innovation and Technology in Computer Science Education , ITiCSE ’15 , pages 87 – 92 , New York , NY , USA , 2015 . ACM . [ 6 ] J . Hamari , J . Koivisto , and H . Sarsa . Does gamiﬁcation work ? – a literature review of empirical studies on gamiﬁcation . In 2014 47th Hawaii International Conference on System Sciences , pages 3025 – 3034 . IEEE , 2014 . [ 7 ] P . Ihantola , T . Ahoniemi , V . Karavirta , and O . Sepp¨al¨a . Review of recent systems for automatic assessment of programming assignments . In Proceedings of the 10th Koli Calling International Conference on Computing Education Research , pages 86 – 93 . ACM , 2010 . [ 8 ] IMS Global Learning Consortium . Learning tools interoperability , 2010 . http : / / www . imsglobal . org / toolsinteroperability2 . cfm . Accessed 2017 - 01 - 10 . [ 9 ] M . Kaytoue , A . Silva , L . Cerf , W . Meira , Jr . , and C . Ra¨ıssi . Watch me playing , i am a professional : A ﬁrst study on video game live streaming . In Proceedings of the 21st International Conference on World Wide Web , WWW ’12 Companion , pages 1181 – 1188 , New York , NY , USA , 2012 . ACM . [ 10 ] E . Kim . Amazon buys twitch for $ 970 million in cash . Business Insider , 2014 . Available online : http : / / www . businessinsider . com / amazon - buys - twitch - 2014 - 8 . [ 11 ] S . Leutenegger and J . Edgington . A games ﬁrst approach to teaching introductory programming . SIGCSE Bull . , 39 ( 1 ) : 115 – 118 , Mar . 2007 . [ 12 ] B . Moorier . Introducing twitch creative . Twitch Blog , 2015 . Available online : https : / / blog . twitch . tv / introducing - twitch - creative - fbfe23b4a114 . [ 13 ] A . Pellicone . Performing play : Cultural production on twitch . tv . In Proceedings of the 2016 CHI Conference Extended Abstracts on Human Factors in Computing Systems , pages 244 – 248 . ACM , 2016 . [ 14 ] J . Sorva , V . Karavirta , and L . Malmi . A review of generic program visualization systems for introductory programming education . ACM Transactions on Computing Education ( TOCE ) , 13 ( 4 ) : 15 , 2013 . [ 15 ] S . A . Wallace , R . McCartney , and I . Russell . Games and machine learning : a powerful combination in an artiﬁcial intelligence course . Computer Science Education , 20 ( 1 ) : 17 – 36 , 2010 . [ 16 ] E . Witkowski , B . Hutchins , and M . Carter . E - sports on the rise ? : Critical considerations on the growth and erosion of organized digital gaming competitions . In Proceedings of The 9th Australasian Conference on Interactive Entertainment : Matters of Life and Death , IE ’13 , pages 43 : 1 – 43 : 2 , New York , NY , USA , 2013 . ACM . [ 17 ] C . Zhang and J . Liu . On crowdsourced interactive live streaming : a twitch . tv - based measurement study . In Proceedings of the 25th ACM Workshop on Network and Operating Systems Support for Digital Audio and Video , pages 55 – 60 . ACM , 2015 . Session 8C : Gamification ITiCSE ' 17 , July 3 - 5 , 2017 , Bologna , Italy 357