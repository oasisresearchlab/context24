Framework for Trustworthy Software Development R . P . Jagadeesh Chandra Bose , Kapil Singi , Vikrant Kaulgud , Kanchanjot Kaur Phokela and Sanjay Podder Accenture Labs , Bangalore , India { jagadeesh . c . bose , kapil . singi , vikrant . kaulgud , kanchanjot . k . phokela , sanjay . podder } @ accenture . com Abstract —Intelligent software applications are becoming ubiq - uitous and pervasive affecting various aspects of our lives and livelihoods . At the same time , the risks to which these systems expose the organizations and end users are growing dramat - ically . Trustworthiness of software applications is becoming a paramount necessity . Trust is to be regarded as a ﬁrst - class citizen in the total product life cycle and should be addressed across all stages of software development . Trust can be looked at from two facets : one at an algorithmic level ( e . g . , bias - free , discrimination - aware , explainable and interpretable techniques ) and the other at a process level by making development processes more transparent , auditable , and adhering to regulations and best practices . In this paper , we address the latter and propose a blockchain enabled governance framework for building trustwor - thy software . Our framework supports the recording , monitoring , and analysis of various activities throughout the application development life cycle thereby bringing in transparency and auditability . It facilitates the speciﬁcation of regulations and best practices and veriﬁes for its adherence raising alerts of non - compliance and prescribes remedial measures . Index Terms —trustworthy software , provenance , governance , compliance , smart advisors I . I NTRODUCTION Modern software has become an integral part of our daily lives . They reside at almost all touch points that humans interact with across all domains ( e . g . , healthcare , legal , trans - portation , ﬁnance , etc . ) . Host of digital technologies ( e . g . , internet , video conferencing etc . ) have already disrupted our homes and ofﬁce spaces alike while technologies like Ar - tiﬁcial Intelligence ( AI ) , Augmented / Virtual Reality are at the pinnacle of becoming ubiquitous and autonomous , i . e . , applications can perceive , learn , decide , and act on their own . Although modern software systems offer many beneﬁts , there are growing fundamental ethical , legal , and societal concerns . There are wide ranged discussions on issues of safety , privacy , fairness , explainability , and accountability of these systems with potential thinking around bringing software under reg - ulatory frameworks [ 1 ] – [ 3 ] . For example , FDA has made signiﬁcant strides in developing policies that are appropriately tailored for ‘Software as a Medical Device’ to ensure that safe and effective technology reaches all stakeholders [ 3 ] . One of the growing topics of interest in the artiﬁcial intelligence community is on the ability to validate and certify machine learning algorithms . Just like how consumers have started demanding certain ethical and environmental standards be met in the supply chains that produce the goods and ser - vices they consume [ 4 ] , responsible organizations might start demanding certiﬁcations that AI algorithms and applications are built ethically , are unbiased and discrimination - free , are robust etc . [ 5 ] . Addressing these concerns has to be looked at from two different perspectives : • enabling intelligent and complex algorithms such as AI / ML models to naturally interact with humans pro - viding comprehensible explanations of decisions made automatically . • enabling software development processes to be trans - parent , veriﬁable , compliant , and accountable thereby increasing software’s trustworthiness . For example , soft - ware development should be augmented with abilities to explain the rationale of various design choices adopted in building the software to different stakeholders involved in the ecosystem , right from developers to auditors to regulators to clients . The latter is becoming all the more important with modern software being created by distributed teams in heterogenous environments making use of many artifacts , such as externally developed libraries , drawn from a variety of disparate sources . With the dispersion of centralized control over software de - livery to autonomous delivery organizations , the variety of processes and tools used turns transparency into opacity as autonomous teams use different software processes , tools , and metrics , leading to issues like ineffective compliance monitor - ing , friction prone coordination , and lack of provenance , and thereby trust . We argue that these modern emerging requirements need to be looked at holistically from a software engineering point of view ranging from computational architectures to software development to veriﬁcation and validation to gov - ernance models and methodologies . In this paper , we propose a blockchain enabled governance framework for trustworthy software development . Our framework : • enables an immutable recording of provenance informa - tion using standard speciﬁcations • enables the speciﬁcation of compliance / regulatory rules and best practices in the form of smart contracts • analyzes event data to identify non - compliance issues and raises alerts • allows for embedding domain knowledge in the form of ontologies and infers non - trivial knowledge • provides awareness and prescribes remedial actions • uses audit trails to assist in endorsement of compliant behavior Our governance framework can be used as an auditing framework to analyze how applications have been built and thereby assess their trustworthiness . The rest of the paper is organized as follows . Section II presents our framework for building trustworthy software . Section III discusses the implementation and application of 45 2019 34th IEEE / ACM International Conference on Automated Software Engineering Workshop ( ASEW ) 978 - 1 - 7281 - 4136 - 7 / 19 / $ 31 . 00 ©2019 IEEE DOI 10 . 1109 / ASEW . 2019 . 00027 the framework on a machine learning use case . Section IV concludes with some future directions . II . T RUSTED S OFTWARE D EVELOPMENT F RAMEWORK Modern software delivery resembles like a supply chain , and poses challenges related to visibility , transparency , auditability and integrity . Software supply chain consists of various par - ticipants , involves various phases , needs adherence to multiple regulations and needs to maintain artifacts’ integrity through - out the delivery phases . Mechanisms that address the above requirements are therefore necessary to fetch trustworthiness on the software . We believe that for any software to be trustworthy , it should address at least the following four concerns : • Responsible and Ethical : Trustworthy software need to be built ethically free from biases . They should be responsible and be able to explain outcomes / decisions . • Auditable : Trustworthy software applications and their development processes should be amenable to audits thereby providing transparency and traceability . They should facilitate the recording and tracking of relevant activities and events during the building of software and post deployment . • Compliant : Trustworthy software should be built in accordance ( or compliance ) to various regulations and best practices . • Secure and resilient : Trustworthy software should be built in a secure and resilient manner . They should ensure that an artifacts integrity is not compromised ( or tampered with ) at any stage and if compromised should be able to uncover such attacks and take corrective actions . Fig . 1 depicts our extensible framework for trustworthy software development . The framework consists of three layers • Data Layer : Modern software development is supported by a plethora of tools , e . g . , IDEs , version control systems , project and issue management systems etc . Most of these tools ( can be made to ) emanate rich data pertaining to different activities / events during software development . Such data from different tools can be imported into a uniﬁed form and published onto an immutable store to ensure that data is secure and tamper proof . The vast amounts of data from such disparate sources result in what we term as a data exhaust , which can be exploited to audit , address provenance and traceability , and analyze ( non - ) compliant behavior . We recommend the usage of standards such as the PROV family of speciﬁcations [ 6 ] and software process speciﬁc extensions [ 7 ] to model the disparate sources of data . Provenance records contain descriptions of the entities , activities , and agents involved in producing and inﬂu - encing objects and PROV speciﬁcations help capture the resource , data - ﬂow , and process - ﬂow views of software development elegantly . Such standards also addresses the challenges in integration and analysis of disparate data sources . Furthermore , our framework also accommodates the speciﬁcation of domain knowledge in the form of ontologies . Such semantic representations can help relate concepts and draw inferences . We prescribe that uniﬁed data and domain knowledge be stored on immutable distributed ledgers like blockchain or interplanetary ﬁle systems ( IPFS ) 1 since such systems provide the key properties of non - repudiation ( one cannot reject the validity of a certain piece of data , action or claim ) , immutability ( any tampering can be easily de - tected ) , availability ( no single point of failure due to de - centralized peer - to - peer architectures ) , and transparency ( transactions can be made public ) . When compared to centralized storage , blockchains provide more trust , ro - bustness and fault tolerance due to its immutability . Storage of ( large amounts of ) data on some blockchain platforms like Ethereum cost cryptocurrency . In such cases , we can choose to store critical provenance data along with cryptographic hashes of the actual data on the blockchain ( e . g . , as event logs on Ethereum ) and decide to store the full data on off - chain databases . Cryptographic immutable distributed databases such as IPFS can be used for this purpose . • Analytical Layer : The analytical layer comprises of var - ious modules that support the recording and analysis of event data for auditability , compliance checking , integrity assessment etc . Smart contracts form the core services of a blockchain framework . Various sets of smart contracts catering to different functions such as the registering ( storing ) of provenance trails , enabling trust by voting , and compliance adherence are implemented / developed . The analytical layer comprises of the following capabil - ities : – compliance analysis : Different regulations and best practices are encoded as smart contracts . For exam - ple , an organization may deﬁne constraints on the usage of third party libraries for security and business purposes such as third party libraries with a GPL license should not be used and libraries with a vul - nerability score of 5 and above are prohibited . Such requirements can be translated into smart contracts , which can get triggered when events of interest are recorded on the blockchain ( e . g . , build event reporting the usage of libraries ) . The logic embedded in the smart contracts can take appropriate actions ( e . g . , check for compliance adherence and raise alerts when non - compliant behavior is observed ) . – provenance services : these pertain to services that facilitate comprehension from provenance data by discovering nontrivial insights . Such services in - clude ( a ) provenance query services catering to agent - centric ( e . g . , people , roles , organizations etc . ) , artifact - centric ( e . g . , tracing the origins of artifacts ) , and process - centric ( e . g . , actions and steps taken to generate artifacts ) queries and ( b ) inference services - that allows for the speciﬁcation of inference rules and uses an inference engine to uncover implicit relationships and multi - level abstractions . 1 https : / / ipfs . io / 46 Fig . 1 : Framework for Trusted Software Development – identity generation and integrity assessment : these pertain to services that cater to the generation of unique cryptographic identities of artifacts based on their content as well as metadata and services that assess the integrity of those such as [ 8 ] . Any tampering of the artifacts would result in a mismatch of their immutable identities . • Advisory Layer : The advisory layer pertains to services that alert the users of any non - compliance and provides interactive exploratory mechanisms ( in the form of ques - tion and answer textual dialogs ) for users to get diagnostic information ( awareness ) . Furthermore , with the domain knowledge and inference capabilities , the advisory layer also has prescriptive services that provide action able advice for users , e . g . , remedial measures to mitigate non - compliance issues . III . I MPLEMENTATION AND A NALYSIS In this section , we discuss about the realization of the trusted software development framework and present our analysis on a simple ML application . The framework discussed in the previous section has been implemented in NodeJS / AngularJS over the TestRPC Ethereum platform 2 . For inferencing and querying , we have used prot´eg´e 3 and wit . ai 4 . Fig . 2 depicts a typical pipeline of a machine learning workﬂow that comprises of four stages viz . , data collection , data preparation , model building and model testing . We demonstrate the utility of the framework in establishing the trustworthiness on a simple deep learning based trafﬁc - sign classiﬁer application . A release manager creates a project on our platform and conﬁgures various options as depicted in Fig . 3a . The manager speciﬁes the stages of the workﬂow 2 https : / / nethereum . readthedocs . io / en / latest / ethereum - and - clients / test - rpc / 3 https : / / protege . stanford . edu / 4 https : / / wit . ai / that this project is expected to follow and the best practices that the project needs to comply with e . g . , the data should be normalized , cross - validation should be performed , and sample complexity should be proportionate to the model complexity as illustrated in Fig . 3b . Furthermore , the manager speciﬁes that the model can be deemed trustworthy if the generalization , robustness , and interpretability metrics are at least 95 % . Data Collection Data Preparation ModelBuilding ModelTesting Model Deployment Fig . 2 : Typical ML workﬂow pipeline . As the team goes about executing the project , activi - ties / events of interest are recorded on to the platform . Fig . 4a depicts the recording of event data . Typically events of interest should capture what , why , who , and when aspects such as activities , agents involved in executing the activities , artifacts generated , timestamps etc . Smart contracts on the blockchain gets triggered upon encountering certain events and they execute the logic embedded in the smart contracts . For example , compliance checking smart contracts will trigger non - compliance alerts ( see Fig . 4a ) if data is not normalized during preprocessing or if cross - validation is not performed while model building etc . The manager can then reach out to the smart advisor to get more insights ( awareness ) on these alerts . For example , for the non - compliance alert of sample complexity not in proportion to the model complexity , the smart advisor will provide context sensitive explanations . For the trafﬁc sign model , the number of hyperparameters ( weights of a deep neural network ) are ≈ 3 . 5 M while the number of training instances were 468 . The compliance rule says that the number of training instances should at least be 1 % of the model complexity ( in this case , it should be at least 35000 ) . Domain knowledge in the form of ontologies are fed into the smart advisor to infer context - sensitive insights and prescribe actions . For example , the ad - 47 Specifying the details of the project Specifying the details of the project Specifying the blockchain network to connect to ( a ) Project and platform conﬁguration Specifying the stages of ML that the project is concerned with Conﬁguring the best practices that the project should comply with Conﬁguring the best practices that the project should comply with Conﬁguring the trustworthinessthresholdsformodeltestingConﬁguringthetrustworthinessthresholdsformodeltesting ( b ) Conﬁguring workﬂow stages and compliance / trustworthy rules . Fig . 3 : Conﬁguration settings for trusted software development . Users notiﬁed of alerts ( in this case non - compliance to best practices ) Platform listening to development environment events Event data being recorded as blocks on the blockchain Smart contracts analyzing event data and recording non - compliant transactions ( a ) Provenance data recorded on blockchains and triggering of alerts . Users provided with prescriptive actions as remidial measures of non - compliance Users provided with diagnostic information ( awareness ) on non - compliance alerts ( b ) Smart advisors provide awareness and actionable remedies . Fig . 4 : Alerts and actions for trusted software development . visor infers that sample complexity non - compliance manifests as overﬁtting models and affects generalization ability . Smart advisors are also capable of prescribing remedial actions . For example , for the above non - compliance , it suggests data augmentation and reduction of hyper parameters as potential remedies ( see Fig . 4b ) such as using rotation and translation of images and converting images to gray scale as data aug - mentation techniques . It understands that the current context is of image classiﬁcation and recommends only those techniques that are appropriate . All the activities , alerts triggered , inferences obtained etc . gets immutably recorded on the blockchain . Any stakeholder can scan through these records to assess the trustworthiness of the system . Certiﬁcation authorities can use these audit trails to validate the goodness of models and thereby endorse the utility of the models . IV . C ONCLUSIONS AND F UTURE W ORK In this paper , we presented a blockchain enabled governance framework that assists in recording , auditing , and analyzing activities during a total product ( software ) delivery life cycle . Such a framework can assist regulatory bodies and respon - sible organizations in continuous monitoring enhancing trans - parency and visibility and in addressing emerging certiﬁcation concerns . A CKNOWLEDGMENTS The authors would like to thank Swapnajeet Choudhury and Sanjay Mittal for their help in implementation efforts . R EFERENCES [ 1 ] I . G . Initiative et al . , “Ethically Aligned Design , ” IEEE Standards v1 , 2016 . [ 2 ] V . Dignum , “Ethics in Artiﬁcial Intelligence : Introduction to the Special Issue , ” 2018 . [ 3 ] U . Food and D . Administration , “Proposed Regulatory Framework for Modiﬁcations to Artiﬁcial Intelligence / Machine Learning ( AI / ML ) - Based Software as a Medical Device , ” 2019 . [ 4 ] G . LeBaron , J . Lister , and P . Dauvergne , “Governing Global Supply Chain Sustainability Through the Ethical Audit Regime , ” Globalizations , vol . 14 , no . 6 , pp . 958 – 975 , 2017 . [ 5 ] I . Rahwan and M . Cebrian , “Machine Behavior Needs to Be an Academic Discipline , ” 2018 . [ Online ] . Available : \ url { http : / / nautil . us / issue / 58 / self / machine - behavior - needs - to - be - an - academic - discipline } [ 6 ] P . Missier , K . Belhajjame , and J . Cheney , “The W3C PROV Family of Speciﬁcations for Modelling Provenance Metadata , ” in Proceedings of the 16th International Conference on Extending Database Technology . ACM , 2013 , pp . 773 – 776 . [ 7 ] G . C . B . Costa , H . L . Dalpra , E . N . Teixeira , C . M . Werner , R . M . Braga , and M . A . Miguel , “Software Processes Analysis with Provenance , ” in International Conference on Product - Focused Software Process Improve - ment . Springer , 2018 , pp . 106 – 122 . [ 8 ] K . Singi , V . Kaulgud , R . P . J . C . Bose , and S . Podder , “ShIFt : software Identity Framework for Global Software Delivery , ” in Proceedings of the 14th International Conference on Global Software Engineering . IEEE Press , 2019 , pp . 112 – 118 . 48