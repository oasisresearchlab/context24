Distributed Hypertext for Collaborative Research : The Virtual Notebook System Frank M . Shipman , III , R . Jesse Chaney , and G . Anthony Gorry Baylor College of Medicine , Houston , Texas INTRODUCTION We are developing the Virtual Notebook System ( VNS ) to facilitate information acquisition , sharing and management in collaborative work . Our main concern is enhancing the productivity of scientific groups engaged in basic and clinical research in an acaademic medical center . As the name implies , the VNS is an electronic analog to the scientist’s notebook , and it functions as the repository of data , hypotheses and notes , patient information and the like . But unlike the traditional notebook , the VNS is expressly designed to enhance information sharing among the members of scientific teams . A hypertext program we have developed is the foundation for this sharing , and it enables us to integrate into the VNS a variety of computer - based information resources that are so important in biomedicine . Our principal goals were to support collaborative work and facilitate the distribution of the VNS in a heterogeneous computing environment . Early prototypes of the Virtual Notebook System used Xerox’s NoteCards and later Knowledge System’s KMS . [ Gorr88 ] But these hypertext systems lacked features we needed . NoteCards did not allow groups concurrent access to the hypertext network and so made collaborative uses of the system difficult . KMS provided concurrent access , but could not easily incorporate external information resources and applications . Further , neither system ran on a number of the platforms that are already in place at Baylor . While other hypertext systems were discussed in the literature , some with quite appealing functionality , we found all ultimately lacking for our application . [ Conk871 In some cases , the systems were simply not available in a supported form ; in others , foreign applications could not be integrated with the hypertext ; and for some , highly - specialized hardware or operating systems were required . Therefore , we somewhat reluctantly undertook the development of our own hypertext system for the VNS . The result of our effort which is described here is a hypertext system implemented in the Sybase relational database . The hypertext is intimately connected to a number of the features of the VNS . We have maintained a clear distinction between the user interface , written in the X Window System and the data access mechanism for the hypertext . This has helped us integrate information resources into the VNS . While our main goal has been to support biomedical research , we believe that the information acquisition and management tools we built for researchers will prove valuable in other settings . Certainly the technologic infrastructure we are developing - the communications architecture and the linkages to information resources and other institutions - will serve purposes at Baylor in addition to those of research . Administrative and managerial duties require similar task coordination and integration . Hypertext ‘89 Proceedings 129 November 1989 HYPERTEXT FOR THE VIRTUAL NOTEBOOK The design of the VNS envisions a number of work group servers ( WGSs ) connected through a network . A WGS would provide local information storage and management by maintaining the group’s hypertext in a relational database on the group’s server . Through a special Gatekeeper computer , users of a given WGS could share information with other groups and access information stored on other servers . The integration of the Gatekeeper and the WGSs is an important function of the VNS . The VNS is to serve as a notebook , so the basic unit in the hypertext is a page which is generally the size of a sheet of paper , but which the user can can resize within the limits of the screen . A user may create pages that allow no subsequent modification of their contents - for example for a researcher’s notebook , or pages . that can be modified at any time . A page contains a number of information objects : text ( research notes , electronic mail ) or images ( graphs , pictures ) . The user can create text objects with an EMACS - like editor or make use of the X Window System’s selection service to transfer text from other windows . Our snapshot tool permits a user to sweep out any portion of the screen with the mouse cursor and place the resulting image on a notebook page . And as discussed below , the user can create information objects in sessions with information resources ( such as the library ) using our paste facility to move information from the resource directly onto a notebook page . Figure 1 shows a notebook page with text and image objects and other pages collapsed to iconic form . The user can also “copy” objects from existing pages . When objects are copied from pages only a reference to the object is retained in the page ; the object itself occurs only once in the database and is shared among pages . Indeed , much of the support for collaboration in the Virtual Notebook is based on the sharing of objects through our distributed hypertext system . The information objects which comprise a page may in fact be distributed among several work groups’ fileservers . A user can create a new page at any time , adding and editing text , sweeping out images off the screen , or copying objects from existing pages . After the layout and content of a new page are to the user’s liking , the page composition ( information objects on the page , their location and size ) , page creator , the page’s title , and time of page creation are stored in the relational database . A VNS mail tool permits the user to mail and receive pages of a notebook . As not all scientists will have access to the VNS , we encode the pages for mailing in PostScript . This allows the page to be displayed or printed on standard PostScript devices . A VNS user may send a hypertext page to anyone who has an electronic mail address and the ability to view or print PostScript . Pages may contain links , references to other pages in the hypertext web . A web of pages connected by links is referred to as a notebook . A user may work with many notebooks , some of which may be shared by members of his immediate work group or by other users of the VNS while some notebooks may be private . In creating a new Iink on a page , the user simply positions the link in the “source” page and then clicks the mouse in the “destination” page . Information for the new link is stored immediately in the database and the new link appears in the source page . . A link on a page may point to any other page , so a single notebook may share pages with other notebooks . A link appears as a small icon on a page and allows rapid movement from one page to another . When a user moves the mouse cursor over a link a small window pops open providing information about the link and the page to which the link points : link title , link owner , destination page title , and page owner . Moving the cursor out of the link closes the information window . This provides users with a way to Hypertext ‘89 Proceedings 130 November 1989 “preview” the page which the link references . Clicking the left mouse button while in a link causes the linked page to appear in a new window . Links belong to the owner ( s ) of a notebook and although they appear to be on the page , they are , in fact , stored separately from the page . Two users might share a page , seeing the same information objects on it , but view different links . This is because the page is assembled dynamically for a given user . From the page composition and link information ( creator , types of links , and positions on the page ) , all of which are retrieved from the relational database , the hypertext application assembles a page on demand and overlays it with the appropriate links . Help pages may have links from every user in the system , though each user wants to see only his personal annotations . Figure 1 shows several open pages with various information objects and a links . Figure 1 . - Portions of Notebook Pages A first time user of the Virtual Notebook System is given a notebook with his home page containing a link to his so - called scrapbook . The Scrapbook is , as its name implies , a temporary repository for new objects that the user has not had a chance to organize . It is particularly useful in capturing information during interactions with information resources . New pages of the scrapbook are created as needed and each may contain many text or image objects . Each user’s home page contains a link to the most recently created page of that user’s Scrapbook . The pages of the Scrapbook are automatically linked together in a linear matter from the most recently created page to the oldest page . New objects pasted into the Scrapbook are always put on the most recently created page . Hypertext ‘89 Proceedings x31 November 1989 NAVIGATION Using hypertext to support large workgroups provides some problems that have not been addressed satisfactorily by previous hypertext systems . With a group of eight to ten people all sharing a one or more notebook and probably maintaining individual notebooks as well , the problem of finding information is apt to be acute . The typical hypertext method of navigation , namely following embedded icons , is not satisfactory . [ Hala88 ] We provide a “filtering” mechanism for pages , objects , and links to support directed navigation by the user . Malone uses the concept of filtering in describing his Information Lens system , “Even though the term [ filtering ] has a literal connotation of leaving things out , we use it here in a more general sense that includes selecting things out of a larger set of possibilities . ” [ Ma10871 Such filtering in the Lens systems is analogous to the information scanning , sorting , and disseminating that is so important in biomedical groups . In the hypertext , filtering involves searching a set of objects or pages to find those that meet a defined condition . Each of the items ( information objects , links , pages , notebooks , and users ) in the VNS may possess a number of attributes that are used for indexing and subsequent retrieval of the objects . Certain attributes are added . by default and others may be added by users . An example of the former are time stamp , the identity of the creator , and certain type - specific information such as the sender of mail pasted as an object on a page . The user may additionally index objects under selected terms of a common work group vocabulary . With this indexing , users can then find particular kinds of objects in the hypertext with direct calls on the data base rather than through browsing through the hypertext . ( For example , find the images created by Joe in the last month . ) The substance of the data and the structure of the hypertext network may be used as part of the description for filters . Filtering will be especially helpful in work groups where often members will be looking for information they did not organize . Besides the typical hypertext browsing mechanism and the directed navigation of filtering , we have provided a hierarchical browser for the hypertext . The hierarchical browser provides an outline of page titles for a notebook . The browser initially shows the notebook’s home page title . By choosing a page title with the mouse , another level in the outline appears . This level contains the titles of the destination pages of the links in the chosen page . The user also has the ability to bring up the actual page of the notebook from within the browser . The hierarchical browser is similar is function to the Browser Card in the NoteCards system , except that the detail ( or depth ) of the browser is interactively controlled . The browser also allows the user to search for page titles and to mark pages for easy access later . The hierarchical browser allows a variation on the traditional hypertext browsing ability in that the browser allows following links without the cluttering of the screen with the whole pages . This is useful for traversing large networks where the user has some familiarity with page content . DATABASE MANAGER All of the data in the Virtual Notebook System are stored in a relational database on a WGS . When a page from the notebook is to be displayed , the hypertext program retrieves all the information objects and links and creates a window in which it displays the page . When a page contains references to information objects not stored on the WGS , the Gatekeeper resolves these references through a mapping it maintains of object names and WGSs . The Gatekeeper can then retrieve the non - local objects for use in the hypertext display , and hypertext application running on one WGS may incorporate information objects from others . We plan to make extensive use of the ability of a Sybase dataserver to make remote procedure calls to other Sybase dataservers on different machines . This will allow us to have a dataserver to assume this Gatekeeper function . Though users of VNS may share data across several machines , most of their work will be done on their local work group machine . This arrangement distributes the processing load and disk utilization in accordance with the group activities . Within the constraints Hypertext ‘89 Proceedings 132 November 1989 imposed by Sybase , each work group may choose its computer hardware based upon projected computing power , disk requirements , availability of other software , and cost . The decentralization of the hypertext also provides a greater degree of fault tolerance . Machines may be off - line and not prevent everyone from using VNS . The power supplied by using a distributed relational database makes many other issues for a hypertext system easier to solve . We rely heavily on the Structured Query Language ( SQL ) calls for its searching power and flexibility . Other programs have easily been developed which make use of these database calls . Problems which would otherwise come up with concurrent access are solved more easily by the dataserver’s maintenance of data consistency . Locking mechanisms are provided by the dataserver . Access control , data security , can be implemented at the database level , in addition to the operating system level . The tkSW 1 I bit I i Title . : DlsplaglrQ 51 - 60 of 03 Figure 2 . - TexSearch interface and the Gatekeeper Icon INFORMATION RESOURCES With the Gatekeeper , we try to provide a seamless interface between the Virtual Notebook System and information resources distributed across hardware and software platforms . The Gatekeeper embodies X Window System interfaces to a variety of important resources including standard UNIX resources like electronic mail , the C shell , and USENET bulletin boards and other more specialized facilities for bibliographic information , genetic sequencing information , clinical data bases and others . In interacting with these resources , a scientist can move inCormation into the notebook . With one button click , information from the resource is pasted to the user’s Scrapbook . An example of this facility is our interface to Medline , an important database of bibliographic and abstract information on articles from medical journals . Medline is distributed by the National Library of Medicine . The version that we use is the TexSearch database , maintained at the M . D . Anderson Cancer Research Center in the Texas Medical Hypertext ‘89 Proceedings 133 November 1989 Center . The interface provided within the VNS masks the required network interconnection . Our interface , which is similar to the Grateful Med interface developed by the National Library of Medicine , is shown in Figure 2 . Similar interfaces exist for the Methodist Hospital Information System ( HIS ) , a very important resource for our clinical faculty and for EuGene , a program for nucleic acid and protein analyses developed at Baylor’s Molecular Biology Information Resource . We are adding interfaces to other information resources . We are developing a scanner interface to allow the introduction of printed materials and images directly into the notebook for annotation . Currently Baylor is developing the Baylor Departmental Information System ( DIS ) and when completed this database of grant and personnel data will be available through a VNS interface . Our integration of these diverse information resources through a hypertext system , to our knowledge , is unique . We feel that the hypertext paradigm is the most appropriate for this task , because of the ability to contain and organize information in many different forms . Currently the system only supports image and text data , but future versions could contain audio , video , and animation as well WINDOW SYSTEM Our program development has been done in the X Window System . The hypertext program runs as a client to an X server . The X server and the VNS may be running on different computers connected by our network . By exploiting the client / server model of X we are able to distribute computing power and load . One of the most important reasons we have developed in X is its potential to become a de facto standard for many hardware manufacturers and software developers . We currently can run our hypertext on several types of hardware , Sun Microsystems , Masscomp , Macintoshes , Unix - based PCs and NCD X terminals , although the performance varies across these platforms . X servers are being developed which will allow us to run the Virtual Notebook on MS DOS compatible computers . With the further development and stabilization of the X Window System , scientists will be able to use existing hardware and software , in which they may have great deal invested , and exploit the functions of the VNS . An X server running on a PC , a Macintosh , or an X Terminal does have some limitations , however , we feel that a typical user could be well served by such and as requirements rise , a more powerful workstation can be obtained without loss or change of function . FUTURE DEVELOPMENT The Virtual Notebook System is intended to support work groups in the biomedical setting . The need to integrate the system into a heterogeneous environment has dictated a number of the design features . The system has been organized in a manner to facilitate the gradual progression of the VNS towards a general purpose system . Much thought has gone into the initial architecture to allow future work in the areas of document preparation , versioning , and the addition of dynamic objects and links . We believe that through separating the data and the interface and by using a distributed relational database to store the data , we will be in a strong position to address these more general and advanced issues after the initial implementation is complete . Hypertext ‘89 Proceedings 134 November 1989 REFERENCES [ Gorr883 Gorry , G . A . , et al . , “A Virtual Notebook for Biomedical Work Groups , ” Bulletin of the Medical Library Association , Vol . 76 , No . 3 ( July 1988 ) , pp . 256 - 267 [ Conk871 Conklin , E . J . , “Hypertext : An Introduction and Survey”’ Computer , Vol . 20 , No . 9 , ( Sept . 1987 ) , pp . 17 - 41 [ Hala Halasz , F . G . , “Reflections on NoteCards : Seven Issues for the Next Generation of Hypermedia Systems , ” Communications of the ACM , Vol . 31 , No . 7 , ( July 1988 ) , p . 836 - 852 WOW Malone , T . W . , et al . , “Intelligent Information Sharing Systems , ” Communications of the ACM , Vol . 30 , No . 5 , ( May 1987 ) , pp . 390 - 402 ACKNOWLEDGMENT The work reported here was supported in part by Grant LMO4090501 from the National Library of Medicine . We wish to acknowledge the work of Stan Barber , Andrew Burger , Norman Furlong , Kevin Long , and Eric Taylor . Several of the applications discussed in this paper are the result of their work . Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage , the ACM copyright notice and the title of the publication and its date appear , and notice is given that copying is by permission of the Association for Computing Machinery . To copy otherwise , or to republish , requires a fee and / or specific permission . 0 1989 ACM 089791 - 339 - 6 / 89 / 001 l / O135 $ 1 . 50 Hypertext ‘89 Proceedings 135 November 1989