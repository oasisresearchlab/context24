Supporting Exploratory Programming in Domain - Speciﬁc Applications Daniel Manesh Department of Computer Science , Virginia Tech Blacksburg , VA danielmanesh @ vt . edu I . I NTRODUCTION The act of computer programming can take many different forms . For example , a software engineer might rewrite C + + code to speed up some process ; an analyst might use a spreadsheet program to gain insights into their data ; or a creative coder might write a program to create an abstract visualization that is synchronized with music . While each of these tasks is a complex activity involving creative problem - solving , the ﬁrst example has a well - deﬁned goal , while the second and third examples are more open - ended . Generally , programming activities involving data analysis or artistic creative practice can be seen as exploratory programming , characterized by rapid experimentation and an evolving set of goals [ 1 ] . In the creative coding example , the coder might explore several options using different combinations of colors , shapes , textures , and animation speeds . There is no “correct” answer for what the ﬁnal product should look like , and in fact , what they envision at the outset might be completely different from what they ultimately create . A key concern for the exploratory programmer is being able to quickly and easily explore while not getting lost in the morass of possibilities . In my work , I focus on two important design considerations for systems which support exploratory programming : • Liveness : There should be a tight feedback loop between changes to the program and changes to the output [ 2 ] , [ 3 ] . This enables the rapid exploration of several alternatives . • Versioning : There should be some type of record of what the user has done so far . By reviewing this record , the user should be able to backtrack to previous states , reﬂect on what they have already done , and plan for the future . Researchers have studied and built systems applying these principles in the data science domain [ 4 ] – [ 6 ] . However , these principles may apply differently with respect to other domain - speciﬁc applications and their target users . In my work , I want to better understand how these principles can support exploratory programming activities in other domain - speciﬁc applications . In this paper , I brieﬂy introduce projects in two different exploratory domains : analyzing spatiotemporal data for end users and live coding music [ 7 ] . In the end - user data analysis domain , I introduce Octave , an end - user This material is based upon work supported by the National Science Foundation under Grant No . 2111003 . programming environment for analyzing trajectory data which focuses on liveness . In the live coding domain , I introduce an IDE extension called Sharp , which focuses on versioning . II . S UPPORTING E ND - U SER D ATA A NALYSIS Much prior work examines how to support data scientists in their exploratory programming activities , which often involve computational notebooks and textual programming languages . However , domain experts that may not have a programming background need a different approach from textual program - ming to understand data . We have developed a system called Octave which supports exploratory data analysis for end - users using a spreadsheet - like programming environment [ 8 ] . Octave is designed for University students studying Construction Engineering and Management ( CEM ) to help them analyze spatiotemporal trajectory data , e . g . , a series of geographic coordinates collected from a GPS sensor at a construction site . Octave combines visual analytic tools with a simple computational model to support exploration and data analysis in a beginner - friendly way . One of Octave’s main design principles is a high degree of liveness between underlying data representations : a data table ( i . e . , spreadsheet ) , a 2 - dimensional visualization ( i . e . , map ) , and states ( i . e . , user - deﬁned ﬁlters ) . The data are coupled such that any time the user interacts with the data table , for example , the corresponding data points are highlighted on the map . Another design principle refers to a non - code interaction scheme to specify data queries . Users can augment their data with boolean - valued columns called “states” , which are created by interacting with specialized widgets . For example , a user can deﬁne a “region state” by drawing a region on the map , which adds a column which is TRUE for data points inside the region . A more complex example is a “combination state” , where users are presented with a clickable diagram representing the transitions between existing states in the data ( ﬁgure 1 ) . Users can , for example , use a combination state to capture all the data points going from one region to another . Clicking around on the diagram immediately updates the map to highlight the points which are TRUE given the selection , thus allowing users to explore different options and get immediate feedback as to whether or not the new state accomplishes their goal . We have validated Octave with user studies , where we found that users were able to easily understand the computational 299 2023 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) 1943 - 6106 / 23 / $ 31 . 00 ©2023 IEEE DOI 10 . 1109 / VL - HCC57772 . 2023 . 00059 2023 I EEE S y m p o s i u m o n V i s u a l L a n g u a g e s a nd H u m a n - C e n t r i c C o m pu t i n g ( V L / H CC ) | 979 - 8 - 3503 - 2946 - 9 / 23 / $ 31 . 00 © 2023 I EEE | D O I : 10 . 1109 / V L - H CC 57772 . 2023 . 00059 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply . Fig . 1 . The interface for creating a “combination state” in Octave . The user clicks on the nodes and edges to deﬁne the state , and the data points update in real time to reﬂect the current selection . model to solve tasks relevant to their domain . Participants appreciated the responsiveness of Octave , and found it easy to learn and use . Overall , Octave shows the promise of designing an end - user programming environment with a tight connection between tabular data , visualization , and computation . While we think the designs can be easily extended to support more general data analyses , Octave is currently limited to trajectory data from a single agent . In the future , we plan to adapt Octave’s core principles to design a more general end - user programming environment with a similar degree of liveness . III . S UPPORTING L IVE C ODING M USICIANS WITH M ICRO - VERSIONING In the performing arts context , live coding refers to a practice where a performer writes and runs code to make music or visuals live in front of an audience [ 7 ] . Let us consider how this process might look for a live - coding musician . The live coder might start by writing and running a block of code which creates a simple percussion loop . Then they might write and run a new block of code which creates a looping bass line , followed by another block of code which creates a simple melody . Now , they might go back and edit the ﬁrst code block to add variation to their percussion loop . In general , they may continue to write new blocks of code , or they may make edits and rerun the blocks of code they already have . This process ﬁts well into the deﬁnition of exploratory programming : there are countless options to try and there is no speciﬁc goal or “correct” option . Furthermore , the ways in which code evolves represent how music evolves , and being able to revisit history in a live performance context can enable new musical expression , especially as repetition and variation play signiﬁcant roles in musical structure . With project Sharp , we support live coding musicians by helping them keep track of the evolving state of their programs over time per musical pattern . Sharp is an add - on for the Pulsar text editor 1 which works alongside the existing live coding language Tidal Cycles 2 . With Sharp , each block of code has its own version tree embedded above it in the text editor in a special GUI component . Whenever a user executes a block of Tidal Cycles code , Sharp creates a new version node and adds it to the tree for that block . A user can navigate through the history for each block of code by clicking on different nodes in the version tree . Users can also tag nodes with a color in order to more easily remember them later . We have begun user studies where live coders use Sharp as part of their existing practice . So far , we have seen that Sharp can reduce cognitive load by replacing some manual versioning strategies , such as creating a backup copy of a code block before editing it . Our initial participants are split as to whether they prefer to use Sharp in a performance or practice setting . In a performance setting , one user liked that they could backtrack so easily and thought it would allow them to more ﬂuidly incorporate musical form into their performances . In a practice setting , another found Sharp helpful for organizing and synthesizing their explorations . Our results are preliminary , and there is still more work to do gathering and analyzing data and iterating on Sharp’s design . Based on our results so far , future work might con - sider how we can enable users to more effectively ﬁnd and use relevant version information from their version histories . While existing work has explored “foraging” version data in a data science context [ 5 ] , we believe there are different considerations in a live coding setting . For example , during a performance , browsing past histories would need to be very quick due to time constraints . Furthermore , as one participant pointed out to us , it can be difﬁcult to understand past versions at a glance when the main output is sound . IV . C ONCLUSION In these projects , we have studied how we can facilitate exploration in domain - speciﬁc applications . The characteris - tics unique to these domains ( e . g . , artifacts , users ) must be considered in designing features supporting exploration in programming environments . We believe these features devel - oped for domain - speciﬁc users can be applicable in making the general programming environment more usable , fostering computational thinking , and improving programmers’ produc - tivity . R EFERENCES [ 1 ] M . Beth Kery and B . A . Myers , “Exploring Exploratory Programming , ” in 2017 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) , pp . 25 – 29 , 2017 . [ 2 ] S . L . Tanimoto , “A Perspective on the Evolution of Live Programming , ” in 2013 1st International Workshop on Live Programming ( LIVE ) , pp . 31 – 34 , IEEE , 2013 . [ 3 ] S . W . Lee , “Liveness in Interactive Systems , ” arXiv preprint arXiv : 1910 . 02377 , 2019 . [ 4 ] R . A . DeLine , “Glinda : Supporting Data Science with Live Programming , GUIs and a Domain - Speciﬁc Language , ” in Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems , CHI ’21 , ( New York , NY , USA ) , Association for Computing Machinery , 2021 . 1 Pulsar IDE : https : / / pulsar - edit . dev / 2 Tidal Cycles live coding language : https : / / tidalcycles . org / 300 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply . [ 5 ] M . B . Kery , B . E . John , P . O’Flaherty , A . Horvath , and B . A . Myers , “Towards Effective Foraging by Data Scientists to Find Past Analysis Choices , ” in Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems , CHI ’19 , ( New York , NY , USA ) , p . 1 – 13 , Association for Computing Machinery , 2019 . [ 6 ] M . B . Kery , A . Horvath , and B . Myers , “Variolite : Supporting Exploratory Programming by Data Scientists , ” in Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems , CHI ’17 , ( New York , NY , USA ) , p . 1265 – 1276 , Association for Computing Machinery , 2017 . [ 7 ] N . Collins , A . McLean , J . Rohrhuber , and A . Ward , “Live Coding in Laptop Performance , ” Organised sound , vol . 8 , no . 3 , pp . 321 – 330 , 2003 . [ 8 ] D . Manesh , A . Luu , M . Khalid , C . Okonkwo , J . Li , A . Akanmu , I . Awolusi , H . Murzi , and S . W . Lee , “Octave : an End - user Program - ming Environment for Analysis of Spatiotemporal Data for Construction Students , ” in 2023 IEEE Symposium on Visual Languages and Human - Centric Computing ( VL / HCC ) , 2023 . 301 Authorized licensed use limited to the terms of the applicable license agreement with IEEE . Restrictions apply .