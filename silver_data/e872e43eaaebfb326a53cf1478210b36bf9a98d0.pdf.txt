10 PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences GIULIA DE ANDRADE CARDIERI , Federal University of São Carlos ( UFSCar ) , Brazil LUCIANA A . M . ZAINA , Federal University of São Carlos ( UFSCar ) , Brazil Progressive Web App ( PWA ) is a new approach to the development of mobile applications ( apps ) which was proposed by Google in 2015 . It combines technology resources of both web and native apps . Meta - design is an End - User Development ( EUD ) approach from which end - users participate actively in a system’s design process . Yet , PWAs are a recent technology and the impacts of associating EUD and PWAs has been little exploited . As the traditional PWA approach is limited regarding users acting as co - designers , we propose the PWA - EU approach , an extension of the traditional PWA architecture that includes EUD concepts . PWA - EU provides contributions in two lenses . First , the proposal was designed to be used by developers on the design / development time . Second , the app developed using PWA - EU approach will allow end - users to select design preferences , which makes them participants of the app’s design . This active participation of end - users on the design is possible due to the meta - design concepts present on the PWA - EU approach . In this article , we present the PWA - EU approach and its evaluation in the perspective of developers / designers . For the evaluation , we grouped participants according to their professional background . The results also indicate that novice developers had a reasonable performance with only one hour of training . We conclude that even novice developers could achieve better performance in a real - life environment , in which they would have more time . CCS Concepts : • Human - centered computing → User interface programming ; • Software and its engi - neering → Software architectures ; Layered systems ; Publish - subscribe / event - based architectures . Additional Key Words and Phrases : PWA , Interface Adaptation , Meta - design , End - user Development , Mobile Apps ACM Reference Format : Giulia de Andrade Cardieri and Luciana A . M . Zaina . 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences . Proc . ACM Hum . - Comput . Interact . 3 , EICS , Article 10 ( June 2019 ) , 28 pages . https : / / doi . org / 10 . 1145 / 3331152 1 INTRODUCTION The challenges of designing interfaces and interactions for different applications platforms are not a new topic and have been discussed in many works [ 5 , 18 , 22 , 24 , 27 ] . The interest has been boosted by the increase in the number of different devices for user interaction . The number of individuals using web applications on mobile devices has raised when compared with native applications . According to a Comscore research [ 8 ] , mobile internet access has already overtaken desktop internet around the globe . More than half of the minutes spent on the internet comes from mobile accounts . In countries such as Brazil , India , and Spain this number reaches over 70 % [ 8 ] . Authors’ addresses : Giulia de Andrade Cardieri , giulia . cardieri @ gmail . com , Federal University of São Carlos ( UFSCar ) , Sorocaba - SP , Brazil , São Paulo , Brazil ; Luciana A . M . Zaina , lzaina @ ufscar . br , Federal University of São Carlos ( UFSCar ) , Sorocaba - SP , Brazil , São Paulo , Brazil . Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than ACM must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and / or a fee . Request permissions from permissions @ acm . org . © 2019 Association for Computing Machinery . 2573 - 0142 / 2019 / 6 - ART10 $ 15 . 00 https : / / doi . org / 10 . 1145 / 3331152 Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 2 Giulia de Andrade Cardieri and Luciana A . M . Zaina Web mobile apps are popular and cover goes from smaller devices such as smartphones to bigger ones , smart tv for instance . Additionally , browsers and devices have their own constraints that should be analyzed by the developers and designers . This wide range of means to access apps brings the need to adapt interfaces on different resources , dimensions and contexts of use [ 18 , 24 ] . The first solution for developing applications that run on different devices and platforms were hybrid mobile apps . In this approach , apps are created by combining web technologies , such as HTML , Cascading Style Sheets ( CSS ) , and JavaScript ( JS ) codes . After some transformations , the code is hosted inside a native app that uses a kind of mobile browser to run them [ 7 ] . In a different approach , Responsive Web Design ( RWD ) uses the original web app , however , it presumes the development and design should adapt its behavior to user and environment . Adaptation is automatically made from the device screen width , orientation and platform using CSS media queries [ 4 ] . Having RWD as a foundation , Progressive Web App ( PWA ) is a recent approach proposed by Google that combines both web and native apps technology resources , still in a different way of hybrid mobile approach . PWAs are initially presented as web mobile apps with RWD which after the first user interaction , progressively , become more complete and similar to native apps [ 29 ] . This progressive feature provides an adaptive nature to PWAs since their UIs get more complete according to the growth of user interactions . As PWAs is a recent approach , no many empirical investigations have been carried out , especially focusing on the perspective of UX . Conversely , Google conducted a series of case studies with companies that adopted this approach such as Twitter , Forbes , OLX and Aliexpress [ 20 ] . In software development , a formal architecture is fundamental in order to develop an application that can be easily maintained , scaled and responsive to changes . Architecture patterns should be selected by developers according to specific needs and goals of the app in order to define its basic characteristics and behavior [ 30 ] The technologies previously described have its focus on automatic adaptations that do not consider the end - user perspective . End - user development ( EUD ) aims at allowing users who are not primarily interested in software to create , modify and extend a system according to their needs . Meta - design is a EUD approach in which the end - user is an active participant in a system’s design process . Its main goal is to create an environment that empowers end - users to do their choices . Users can participate actively in app development and are not restricted to its use [ 14 ] . The first EUD tools focused only on desktop applications [ 28 ] . Yet , in recent years a considerable amount of EUD related works have taken into account web and mobile apps as their platform [ 3 , 9 , 10 , 26 ] . Still , most works focus only on the process of understanding software development based on EUD . With that in mind , we can point out a gap related to proposals that consider both EUD and interface adaptation methods on assisting mobile apps development . This work presents the PWA - EU proposal , an extension of the traditional PWA approach associated with EUD concepts . We conducted an experimental study with the aims of evaluating our proposal on the developers’ viewpoints . Our study had 23 participants , who were grouped according to their professional background with programming . Further , we analyzed the acceptance and difficulties that PWA - EU architecture can bring to developers . To guide our study , we defined two research questions to guide our study : RQ1 - What is developers’ acceptance when using PWA - EU approach ? and RQ2 - How is developers’ feedback regarding the usefulness of the PWA - EU approach ? . Our work provides contributions in two lenses . First , the proposal was designed to be used by developers on the design / development time . Due to that , we selected participants that were not end - users to evaluate the proposal . Second , the app developed using PWA - EU approach will allow end - users to select design preferences , which makes them participants of the app’s design . This active participation of end - users on the design is possible due to the meta - design concepts present on the PWA - EU approach . By adopting PWA - EU architecture , web developers can learn a new way Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 3 to create mobile apps in which end - users play an actively role on the app’s design . Additionally , developers can replicate , extend and modify the architecture due to its layered structure , detachment from specific web technologies ( i . e . JSON or LocalStorage ) and the possibility to choose different app domains ( i . e . tourism or social network ) . 2 BACKGROUND 2 . 1 PWA and EUD Fundamentals The literature describes different interface adaptation approaches that can be used to create a design able to adapt itself depending on requirements and / or user needs . These approaches can be classified into two distinct categories separated by a very thin line , adaptable and adaptive [ 22 ] . In an adaptive UI , the system should identify the circumstances that require an adaptation and apply the appropriate actions accordingly . Therefore , both user and system status be constantly monitored . On the other hand , an adaptable UI offers to the end - users a chance to choose between existing presentation and interaction characteristics , similar to selecting an option from a predefined list . Even though adaptable systems allow users to have total control of the UI , adaptive systems can facilitate user interactions , helping users to deal with complex systems . At last , an adaptive UI with user control is a good arrangement between adaptive and adaptable interfaces approaches . In doing so , the system is responsible for the adaptation process under user’s supervision [ 22 ] . One of the most known proposals in interface adaptation area is RWD , which is based on the characteristics of a mobile device and has three technical bases : ( i ) flexible grid layouts with relative dimensions ; ( ii ) flexible images adjusted according to screen size ; and ( iii ) CSS3 media queries that automatically adapts layout behavior to screen sizes and orientations [ 4 , 25 ] . Conversely , native apps are developed linked with a specific platform , such as Java on Android , and its code is already compiled when the app is installed on a device . Similarly , hybrid apps are initially web apps build with tools as the framework PhoneGap 1 that converts its code to a compiled version tied to a certain mobile platform [ 7 ] . PWA is a new approach to develop applications by joining resources from web and native applications . This approach mixes a set of strategies , techniques , and APIs in order to deliver a native mobile - like experience [ 33 ] . This term was defined in 2015 by Alex Russell , a software engineer at Google , and Frances Berriman , a designer [ 31 ] . These applications are initially presented as web mobile apps using RWD , however , as the user progressively builds a relationship with the application over time , they become more complete and similar to native apps . Besides progressive , a PWA is ( i ) responsive , adapting its interface with RWD , ( ii ) connectivity independent , working offline or in low - quality networks , ( iii ) similar to native applications , regarding interactions , navigation and appearance , ( iv ) re - engageable , allowing features as push notifications to recover user involvement with the app , ( v ) installable , allowing users to add apps to their home screen , and ( vi ) fresh , checking for new updates when online [ 29 ] . In order to assure a PWA is reliable and fast , it must be developed using an application shell architecture . This architecture consists of loading a " shell " containing the application’s UI ( i . e . HTML , CSS and JS files , and static content such as images and fonts ) . The dynamic content from each web page is not initially loaded . Because of that , in a shell architecture is important to load as little of data as possible , including storing static resources on the local cache . Furthermore , there is no need to download new versions of the application , as the most recent release will be automatically displayed when the online server sends the most recent files [ 33 ] . Since PWAs are a recent technology , no many empirical investigations have been carried out . Still , Google has conducted case studies with companies such as Twitter , OLX , and Jumia with the aims of analyzing the impact PWA brought on apps that migrated from the web approach . Jumia is 1 Link : https : / / phonegap . com / Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 4 Giulia de Andrade Cardieri and Luciana A . M . Zaina the leading e - commerce in Africa , in which many users have intermittent connectivity and devices with data limitations . In this scenario , it is difficult to induce users to download a native app . By replacing their web app to a PWA , the company perceived that their traffic migrated from their native app by more than 12 times and is still growing [ 19 ] . End - user development ( EUD ) can be defined as a set of methods , techniques , and tools that allow users of software systems to create , modify , or extend a software artifact according to their needs and preferences . These users act as non - professional software developers and are not primarily interested in software development [ 14 , 23 ] . A more recent definition of EUD can include methods , situations , and socio - technical environments that allow and empower end - users to express themselves . Moreover , users can be independent of developers while performing EUD activities [ 15 ] . EUD appeals to distinct audiences by considering them when creating a design and building artifacts , besides developing tools to democratize knowledge creation [ 15 ] . Some examples of widely used applications in commercial software systems that have EUD concepts are recording macros in word processors , setting up spreadsheets for calculations , and defining e - mail filters . Yet , even these applications have flaws and are only a fraction of EUD’s potential they can still set good examples of why empowering end - users to modify the systems they use is a relevant contribution to the society [ 23 ] . An influential EUD approach is Meta - design , in which the end - user acts actively in a system’s design process . Its main goal is to create a user empowered environment , where all stakeholders can actively participate in application development and are not restricted to its use [ 14 , 15 ] . This approach contributes to the creation of cultures in which humans can express themselves and engage in personally meaningful activities since it shifted partial control from designers to users allowing them to contribute with their own visions and objectives [ 13 ] . Meta - design is a " design for design for after design " , which indicates that this approach allows users to modify and evolve the system at use time , creating an open system . While user - centered design and participatory design promotes " design for use before use " with the aims of forcing all design intelligence on the beginning of the design process when there is little information about what is really needed [ 15 , 16 ] . Meta - design framework proposes a set of guidelines to support domain expert in adopting EUD approach , as follow described ( [ 15 , 17 ] ) : ( 1 ) Support Human - problem Interaction . The design must support human - problem interac - tion and not human - computer interaction , as domain experts are interested in solving their own problems and not on software development . Therefore , the software domain and their problems must be more specified by users . ( 2 ) Underdesign for Emergent Behavior . Meta - design systems should be underdesigned because users should view them as a continuous beta version that can incorporate emerging design behaviors during use . However , underdesign does not mean that design responsibilities should be transferred to end - users . ( 3 ) Enable Legitimate Peripheral Participation . Newcomers to a community must be able to participate with contributions . Transparent procedures are required to incorporate user contributions into the systems , which should be visible and have a recognizable influence . ( 4 ) Share Control . The original metadesigners must find a way to transfer partial control to the end - users , who can play different roles . This assists in sustaining user participation and system evolution , since the users that acquire ownership in the system will probably continue to contribute . ( 5 ) Promote Mutual Learning and Support . Not all users have the same knowledge level , due to that , they need to learn new things to get involved and contribute to the system . Therefore , Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 5 a metadesigned system should have knowledge - sharing mechanisms that encourage users to learn from each other . ( 6 ) Reward and Recognize Contributions . Humans are motivated for diverse reasons such as psychological well - being , recognition and improving reputation . Because of that , paying attention to users’ motivation is essential for the continuous user participation and evolution of the metadesigned system . As the motivation derives from user satisfaction in shaping the software system to solve their problems . ( 7 ) Foster Reflective Communities . The knowledge required to solve a complex design issue is likely distributed among many domain experts . Due to that , it is important to create a mechanism for collaboration between these experts , in which they can share viewpoints which can lead to new insights , ideas , and artifacts . 2 . 2 Related Work This section aims to present the related works in three main areas : interface adaptation , PWAs , and EUD . HyMobWeb [ 5 ] is a hybrid approach that adapts UIs from mobile web apps taking context sensibility and multimodality into account . The proposal extends front - end frameworks by allowing developers to include adaptation points on the code . A hybrid strategy was adopted to combine both static ( i . e . during coding ) , and dynamic adaptations ( i . e . over run time ) . Gullà et al . [ 22 ] propose a method to develop adaptive UIs following a " design for all " paradigm . Their method is based on three information models : the user model ( i . e . user’s preferences , physical and cognitive structure ) , the environment model ( i . e . characteristics of the HCI environment ) and the interaction model that controls the other two models . The works from Manca [ 24 ] , Ghiani [ 18 ] and W3touch [ 27 ] on mobile web present solutions in which the interfaces are adapted automatically and are based on rules and HTML , CSS and JS code injections . Still , while Ghiani’s [ 18 ] and Manca’s [ 24 ] work also consider modalities and context of use . W3touch is a toolkit that produces analytics from user interactions and assists designers to identify issues related to the touch movement ( i . e . mis - clicked links ratio and zoom levels necessary to visualize page components ) . Positive results indicating that users can benefit from adaptations were obtained on Manca’s [ 24 ] and Ghiani’s [ 18 ] solutions . Additionally , the proposal of Ghiani [ 18 ] also demonstrated that is more flexible and provides wider support when compared to RWD . Biørn - Hansen et al . [ 2 ] propose a technical comparison between PWA , Native , Hybrid , and Interpreted applications , besides describing concepts from PWAs and their technologies . They concluded there is potential to PWAs unify web and native development without the need for cross - platform frameworks . Cardieri & Zaina [ 6 ] conducted an UX - based comparison between PWA , Native and Web apps , the authors found out that all three approaches provided a satisfying experience to end - users . Danado & Paternó [ 10 ] proposes Puzzle , a framework in which end - users with no previous experience on programming can develop or customize complex mobile apps through a simple process . Puzzle has an architecture that connects apps to web services and smart devices . Costabile et al . [ 9 ] propose a EUD desktop application based on the software shaping workshop ( SSW ) method . SSW adopts a meta - design participatory approach that continues throughout a whole software life cycle . Bosetti et al . [ 3 ] present a tool based on mobile web augmentation ( MoWA ) in which end - users can develop apps from desktop and mobile devices even when they have no programming skills . Web augmentation is a technique to manipulate and enhance web apps with new features . MoWA is a framework to extend web desktop apps to the mobile field considering the app’s environmental context . Namoun et al . [ 26 ] propose a model linking the features of performing EUD in mobile devices to end - users’ attitudes towards and intent of doing this . The proposal arose Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 6 Giulia de Andrade Cardieri and Luciana A . M . Zaina from different studies carried out with participants , that had different backgrounds on mobile EUD , about the motivations and activities they played on EUD field . The results show that rather than creating apps the end - users have more interest in customizing apps to improve their experience . Even though the works presented on this sections have multiple ways to solve interface adaptation issues , they have limitations . Most of the authors propose techniques , frameworks and intelligent algorithms that automatically generate adapted interfaces , and do not consider end - user preferences [ 5 , 18 , 24 , 27 ] . In some cases , user preferences are taken into account as a foundation of the adaptation process [ 22 ] . However , all related works in the interface adaptation field do not provide tools , methods or software architectures that assist software developers in creating mobile apps that can be modified by end - users . Additionally , none of these works associated EUD and / or meta - design concepts into the adaptation method . Regarding the studies in the EUD field , Costabile’s study [ 9 ] does not take into account mobile environments . Even though the some of the studies related to EUD consider the user empowerment in setting the mobile apps [ 3 , 10 , 26 ] , none of the studies combines the adaptive nature of PWAs and Meta - design together as a way to provide the user empowerment . On the other hand , the works related to PWAs only compare end - users interactions or technical features with other mobile platforms [ 2 , 6 ] , leaving out any connection to the potential use of PWAs to empower end - users . An unexploited gap is joining the adaptive nature from the EUD approach , such as meta - design , and PWAs concepts . On this proposal , end - users would be empowered by actively taking part in all UI adaptations , by progressively modifying their design preferences ( i . e . UI elements appearance , content display format , and interaction methods ) . Furthermore , developers could benefit from this proposal in a way they can adopt a software architecture to assist with the development of mobile apps that consider end - users’ preferences . 3 PWA - EU APPROACH Our proposal aims to combine PWAs and EUD in a way that end - users can act in the app’s design . After combining the related works , concepts of EUD , and Meta - Design ( see Section 2 . 1 ) , we noticed the potential in the association of PWAs and meta - design . This potential occurs as both approaches have an adaptive nature by becoming more complete when users interactions increase . Yet , the traditional PWA approach does not allow users’ interventions on the app and takes their preferences into account . Our proposal is an extension of the PWA architecture in which users’ preferences are considered to adapt the interface on run time . During design / development time , developers and designs work together to develop an app that follows the PWA - EU architecture . During end - user interactions , they can access and modify options such as appearance , interaction methods , and the content that is displayed . These options support users on fulfilling preferences that were not previously identified by designers and developers . PWA - EU approach allows users to take their own decisions about what they want in that interaction . 3 . 1 Architecture Proposal Figure 1 shows the PWA - EU architectural scheme . The PWA - EU architecture is displayed on the right side , while on the left side the traditional PWA is shown . In our approach , the architecture was designed to enable end - user empowerment through customization . We defined three architectural elements into The PWA - EU architecture , the User Design Model ( UDM ) ( A ) , Management Layer ( B ) and Connection Layer ( C ) ( see Figure 1 ) . Our architecture is an adaptation of the event - driven and the layered architectures for software development [ 30 ] . The event - driven part is relevant since the PWA - EU architecture depends on events triggered by users , such as modifying the UDM ( A ) or loading a new UI . The layered part relates to the separation of components with distinct Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 7 functionalities . On the PWA - EU scenario , these components are responsible for connecting the app with storage systems ( Connection Layer ( C ) ) and defining user preferences ( Management Layer ( B ) and UDM ( A ) ) . Moreover , the connection with the traditional PWA approach occurs by adapting the UI ( Adaptation Engine ( F ) ) . These three elements and the connection with the Adaptation Engine ( F ) are discussed in the following subsections . The interface adaptation on the PWA - EU proposal was outlined considering the definition of adaptable and adaptive interfaces proposed by Gullà et al . [ 22 ] . The authors emphasize the line between these two categories is very thin and each one has advantages and disadvantages . Hence , we selected a combined approach between these two categories . PWA - EU’s UI adaptation is based on the adaptive UIs in a way the system performs the adaptation . Still , it is also adaptable as the adaptation process is monitored by end - users who select their User App Preferences ( E ) on the UDM ( A ) . With regards to EUD , PWA - EU is based on the meta - design framework as it follows most of the guidelines proposed by Fisher , Nakakoji & Ye [ 17 ] ( see Section 2 . 1 ) . Below , we describe how PWA - EU meet these guidelines : ( 1 ) Support Human - problem Interaction - Designers and developers should analyze the app domain and its end - users in order to specify their problems . After this analysis , the User App Preferences are defined and included as part of PWA - EU’s UDM . ( 2 ) Underdesign for Emergent Behaviour - A PWA developed with PWA - EU has default options before the end - user initial interaction . Due to that , the design of the app is not complete before end - users modified the default options by selecting their preferences on the UDM . Moreover , a new design behavior is generated by architectural elements every time the user changes their User App Preferences on the app . Yet , end - users are not in charge of design responsibilities as the preferences were previously defined by designers and developers . ( 3 ) Enable Legitimate Peripheral Participation - New users can contribute to the app by selecting their User App Preferences . The Management and Connection Layers assure these preferences will be visible during users’ interaction . ( 4 ) Share Control - Designers and developers are the original metadesigners who define multiple User App Preferences during development . On run time , the control of these preferences , that affect app’s functionalities and appearance , is transferred to end - users who are acting as co - designers . Three of the guidelines proposed by Fisher , Nakakoji & Ye [ 17 ] were not followed on PWA - EU : 5 . Promote Mutual Learning and Support , 6 . Reward and Recognize Contributions and 7 . Foster Reflective Communities . These guidelines are related to knowledge sharing features and the first version of PWA - EU do not contemplate this one . However , PWA - EU architecture is flexible and new elements can be added to implement such features . 3 . 2 PWA - EU Architectural Scheme The main goal of the User Design Model ( UDM ) shown in Figure 1 ( A ) is to establish and combine different User App Preferences ( see Fig 1 ( E ) ) . This model was based on the user model proposed by Benyon & Murray [ 1 ] . On this proposal , end - users’ preferences and characteristics are stored on this model and may be altered by the end - user . We adapted Benyon & Murray’s [ 1 ] model into the UDM ( A ) , as the user preferences are defined on runtime by end - users and stored on the app . Still , during design / development time , it is the designers’ and developers’ role to analyze the app’s domain and the targeted end - users to define the set of preferences that will be available to end - users on runtime . Some examples of the User App Preferences ( E ) are UI elements appearance , interaction methods , and content display formats such as data and images . While planning the Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 8 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 1 . PWA - EU architectural scheme User . . . InterfaceElements Interac on Methods Datepicker Select Images ContentDisplayFormat Lists Cards Voice Movements . . . User App Preferences ( E ) UserDesignModel ( A ) Modiﬁed PWA approach considering user preferences Storage System ( D ) ManagementLayer ( B ) Connec on Layer ( C ) 2a . 2 2a . 4 2a . 1 2a . 3 2a . 5 3 2a 2b 1 Adapta on Engine ( F ) HTML , CSS and JS HTML , CSS and JS Tradi onal PWA approach Cache ( H ) Web Host ( G ) 7 6 5 8 4 UDM ( A ) , the designers and developers should include , at least , a default and a secondary option for each User App Preference ( E ) , such as lists and cards to display content . Finally , the User App Preferences ( E ) must have default settings and follow meta - design principles , in which users can change their preferences . Developers must select a technology to store these preferences and be the foundation of the UDM , such as JavaScript Object Notation ( JSON ) format . JSON is a widely adopted approach on web development for both sending and receiving requests that can be easily transformed into a JS object [ 12 ] . An example of a UDM implemented with JSON is detailed below : { ' id ' : attribute _ id , ' type ' : attribute _ type , ' name ' : attribute _ name , ' value ' : attribute _ value } The Management Layer ( ML ) on Figure 1 ( B ) is responsible for including , editing and deleting the User App Preferences ( E ) on the UDM ( A ) . It can receive two different requests from the PWA : ( i ) receiving and sending modifications to the UDM ( A ) , and ( ii ) sending an updated UDM ( A ) to the Connection Layer ( C ) . This layer is requested only when users modified their design preferences into the UDM ( A ) . Moreover , this layer is responsible for all algorithms needed to edit the UDM ( A ) structure to modify , include and delete new User App Preferences ( E ) . The UDM’s ( A ) structure should not be modified by other elements and no connections to Storage Systems ( D ) should be created . The Connection Layer ( CL ) on Figure 1 ( C ) has three functions : ( i ) sending the UDM ( A ) to the Storage System ( D ) , such as LocalStorage 2 , ( ii ) retrieving the UDM ( A ) from the Storage System ( D ) , and ( iii ) sending the latest UDM ( A ) to the Adaptation Engine ( F ) . The first scenario only occurs when the UDM ( A ) was updated by the user on the Management Layer ( B ) . The other scenarios happen when it is necessary to load a new UI on the PWA , which can occur when a new UDM ( A ) User App Preference ( E ) is set or when the user is browsing through the app . Further , the Connection Layer’s ( C ) code should include only functions that connect to the defined Storage System ( D ) . This element should not modify the UDM ( A ) structure , only transport it . Both Management ( B ) and Connection Layers ( C ) were created by two reasons : ( i ) as a way to create a software architecture that can be replicated and more easily understood by software developers ; and ( ii ) keep the traditional architecture of a PWA on the Adaptation Engine ( F ) to clearly separate it from the PWA - EU architecture . 2 https : / / www . w3schools . com / html / html5 _ webstorage . asp Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 9 The Adaptation Engine ( see Fig 1 ( F ) ) represents the combination of the traditional architecture of a PWA with the PWA - EU approach . On the traditional architecture , proposed by Google [ 21 ] , the PWA must have an application shell that stores the UI ( i . e . HTML , CSS and JS files ) and is instantly loaded when an end - user opens the app . The combination with PWA - EU comes as this engine takes into account the User App Preferences ( E ) defined on the UDM ( A ) and combines these preferences with the application shell in order to alter the app’s UI . With that in mind , all CSS and JS files that somehow modify the PWA UI can be considered part of this engine . Another task performed by this element is obtaining new files from the Web Host ( G ) if an internet connection is available . Further , this engine should store the app UI on Cache ( H ) memory and recover it when necessary . We decided to define an Adaptation Engine ( F ) based on the studies from Manca et al . [ 24 ] and Ghiani et al . [ 18 ] . Both studies define proposals in which a Adaptation Engine ( F ) is part of the UI adaptation process . More specifically , this engine is responsible for deciding how the adaptation will occur in these studies . As PWA - EU adaptation requires end - user participation and is based on PWAs , we adapted how this element works considering our proposal’s fundamentals . As pointed out by [ 22 ] , privacy is one of the main concerns of users . Individuals feel insecure about sharing their personal data in an application . Due to that , this approach recommends storing data from UDM ( A ) locally on the browser using HTML5’s LocalStorage 3 instead of a relational database located in a remote web server . Hence , users’ personal information will not be sent to a web server , anticipating possible security issues . Google recommends the Single - page Applications ( SPAs ) approach to develop an app shell architecture on PWAs [ 21 ] . This approach proposes that one HTML page is used as a shell for all other web pages and that all end - user interactions are implemented using HTML , CSS , and JS . A SPA enables apps to be less dependent on web server interactions , not needing to reload a page on each navigation . SPAs are similar to native apps regarding behavior , nonetheless , they run inside a browser [ 12 ] Recently , a high amount of frameworks SPA are available to the front - end development of a web , hybrid or PWA application . Some of the most popular SPA frameworks are Angular 4 , React . js 5 , and Vue . js 6 . There are no technologies tied to developing applications applying PWA - EU . This approach is extensible and may integrate technologies chosen by the developers . We opted for this extensible nature since new technologies rise frequently on mobile app field . Still , we suggest both Connection and Management layers be composed by JS functions , the use of LocalStorage as storing system and JSON as the basis for the UDM structure . 4 EVALUATING PWA - EU APPROACH We conducted an experimental study with 23 participants focusing on the evaluation of our proposal . The study aimed to analyze the acceptance and difficulties that the PWA - EU elements can bring to the developers . We selected participants from undergraduate and graduate computer science courses . We made this choice since Salman et al . [ 32 ] provide pieces of evidence of a small difference between students and professionals when they perform new activities . Even though professional developers have more experience , they are not familiar with new knowledge such as PWAs , which enables them to be compared to students . The motivations for this study were to understand if developers can understand the PWA - EU architecture and whether they find it useful . 3 https : / / www . w3schools . com / html / html5 _ webstorage . asp 4 https : / / angular . io / 5 https : / / reactjs . org / 6 https : / / vuejs . org / Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 10 Giulia de Andrade Cardieri and Luciana A . M . Zaina 4 . 1 Planning The first step in planning was the elaboration of a pre - questionnaire to understand the participants’ profile , who were selected by convenience and with no restriction of age This questionnaire was necessary in order to conduct an analysis to prepare the supporting materials to our study ( i . e . the technologies needed to build a PWA ) . We asked about their knowledge in front - end technologies and in which programming technologies they were familiar with . For the front - end technologies , we collected their experience using a five - item Likert scale . Table 1 presents the results of the questionnaire about the profile of the participants according to their knowledge in programming technologies . Furthermore , the questionnaire gathered if their experience was restricted to academic works or if they have acted as developers in companies . Additionally , the participants experience with web , mobile , hybrid , and PWA development was collected . This questionnaire was filled by all participants 17 days prior to the study conduction via Google Forms . After analyzing the participants’ profile , we prepared a training session to be conducted a week before the study with the participation of all individuals . The session encompassed all the technologies that were required to use PWA - EU . Aside from the training , we conducted a warm - up session on the same day as the experiment’s conduction . Based on the results from the analysis of the profile questionnaire ( see Table 1 ) , we developed an app called Where Am I ? . This app follows the traditional PWA architecture so participants could complement it with PWA - EU elements . The initial structure of Where Am I ? allows end - users to include and mark as favorite their currently watched TV shows . The screens of the main and add TV shows sections are displayed in Figure 2 . We developed this app considering the profile analysis by selecting technologies most participants were familiar with . Due to that , we opted to use HTML , CSS , and JS with no JS frameworks . Instead , we adopted the front - end component library Bootstrap ( BS ) 7 to assist on mobile - first UI development and the jQuery library ( jQ ) , required by some Bootstrap elements . Still , in order to allow it to be a SPA , the foundation of PWA applications , we included the dynamic template tool Handlebars . js 8 that assured pages could show new content without the need to make new HTTP requests . After implementing the app , we aimed at defining which user preferences should be included on the task we established . We defined User App Preferences would be restricted to editing and deleting favorite platforms to watch TV Shows , such as Netflix , Hulu , Amazon Prime , Cable , so on . By including this feature , all three PWA - EU elements ( UDM , Management Layer , Connection Layer ) should be added to the PWA . Hence , there were a few pre - requisites to accomplish this task , as participants must use the same technologies as the app was implemented and the UDM must be in JSON format and managed via LocalStorage . We established a task named Implementing PWA - EU into Where Am I ? that was available in PDF format . During this task , participants should include the PWA - EU architectural elements into a traditional PWA architecture on the code from the Where Am I ? app . Likewise the warm - up session task , participants should base their implementation on an app section called " My Design " . This section should have functionality in which users can include and remove the User App Preferences ( see Fig 1 ) , represented by TV Shows platforms on this app . Still , other elements should be added to the PWA code to represent other PWA - EU elements ( i . e . Management and Connection Layers ) . With the aims of analyzing PWA - EU acceptance and usefulness , we based our analysis on an adaptation of the Technology Acceptance Model ( TAM ) [ 11 ] . This model analyzes both participants’ acceptance and behavior on the use of technology . TAM is divided into two dimensions , the perceived ease of use and the perceived usefulness . The ease of use is related to the perception that 7 https : / / getbootstrap . com / 8 https : / / handlebarsjs . com Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 11 Table 1 . Participants profile - Likert scale : I have never heard of it ( 1 ) , I have heard of it ( 2 ) , I have some theoretical knowledge , but no practical ( 3 ) , I have good theoretical and practical knowledge ( 4 ) , I have deep theoretical and practical knowledge ( 5 ) Part . Group Age EducationLevel HTML CSS JS jQ LS BS Hjs JSON SPA RWD PWA P1 Student 21 Undergradstudent 4 4 4 2 4 4 1 5 4 3 2 P2 Student 21 Master’s de - gree 2 2 3 2 2 2 2 2 2 2 1 P3 Student 25 Undergradstudent 4 4 2 1 2 4 1 2 1 2 1 P4 Student 24 Undergrad student 4 4 4 2 3 4 2 4 2 3 2 P5 Student 22 Undergradstudent 5 5 4 2 4 5 1 4 2 4 1 P6 Student 23 Undergradstudent 3 3 3 1 3 3 1 4 3 3 2 P7 Student 20 Undergradstudent 4 4 4 1 3 4 1 3 2 2 2 P8 Student 23 Undergradstudent 4 4 4 1 3 4 1 2 2 3 2 P9 Student 23 Undergradstudent 4 4 3 2 4 4 2 4 2 2 1 P10 Student 22 Undergradstudent 2 3 3 2 2 2 1 2 1 2 0 P11 Student 20 Undergradstudent 4 4 4 1 4 2 1 2 2 2 0 P12 Student 21 Undergradstudent 4 4 4 2 2 2 1 2 1 2 1 P13 Student 23 Undergradstudent 4 4 4 1 2 2 1 2 1 3 0 P14 Prof . 22 Master’s de - gree 2 3 4 2 4 4 1 4 2 2 2 P15 Prof . 21 Undergradstudent 5 5 5 3 5 5 1 5 2 5 2 P16 Prof . 26 Master’s de - gree 5 4 4 5 5 4 3 4 1 4 3 P17 Prof . 36 Bachelordegree 2 3 3 2 3 2 2 3 2 3 2 P18 Prof . 24 Undergradstudent 4 5 4 2 4 4 1 4 4 4 2 P19 Prof . 26 Undergradstudent 3 3 3 3 2 2 3 4 1 3 1 P20 Prof . 24 Undergradstudent 4 4 4 3 4 4 1 4 3 3 2 P21 Prof . 23 Undergradstudent 2 2 3 1 2 2 1 3 1 2 1 P22 Prof . 33 Bachelor’sdegree 2 3 2 2 2 2 2 3 1 2 1 P23 Prof . 27 Bachelor’sdegree 4 4 4 4 4 4 2 4 3 4 3 technology can be adopted with no efforts . The perceived usefulness dimension represents how a person believes the use of a specific technology may improve their performance . In our analysis , we adapted the TAM and considered only the usefulness dimension . To complement TAM , we also analyzed the codes from the PWAs developed by participants . Our goal was to analyze PWA code taking into account the completeness of each PWA - EU architectural Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 12 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 2 . Where Am I ? main UIs element and the Adaptation Engine . Additionally , all participants edited their code during the training , warm - up and studies’ conduction using Brackets 9 and run it on Google Chrome Browser . 4 . 2 Conduction The training took place one week prior to the study , at a laboratory in Federal University of São Carlos , Sorocaba campus , Brazil and took about one and a half hour . Technologies such as Bootstrap , jQuery , PWA , SPA , and Handlebars . js were presented on both theoretical and practical ways . The participant’s task was to build a PWA that worked as a to - do list , called My Tasks . On this list app , participants should implement the functionality to include a new task storing data via LocalStorage , retrieving it with jQuery , and displaying using Bootstrap UI elements . During the warm - up session , we initially presented the PWA - EU architecture to participants . After this step was completed , participants had to build the PWA - EU architecture using the My Tasks app as a foundation , an app that was developed by participants on the training session . On this session , the participants used similar web technologies as the used on the training and as they will use in the study’s conduction ( i . e . LocalStorage , JSON , jQuery , so on ) . Moreover , participants had to implement a section called " My Design " in the app , which the User App Preferences ( see Fig 1 ( E ) ) should be visible and editable by future end - users . The researchers previously defined the User App Preferences of the My Tasks app as the option to choose if each item from the to - do list should be in card or list formats . The aim of the warm - up was to provide participants with an understanding of how it PWA - EU works on a practical viewpoint and provide them with supporting material for the study’s conduction . The code developed by participants on this step was available for consultation and as a support material to clarify doubts about the PWA - EU for the study’s conduction . The experimental study was conducted at a laboratory at Federal University of São Carlos , Sorocaba campus , Brazil and participants had two hours to complete one task . All 23 participants were voluntary students from undergraduate and graduate computer science programs . Their ages ranged from 20 to 36 years old , and most individuals ( 70 % ) were undergraduate students . 9 http : / / brackets . io / Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 13 Table 2 . Questions from the feedback questionnaire Question Format Optional U1 - Learning the PWA - EU architecture was easy Likert No U2 - I can use the PWA - EU architecture the way I want Likert No U3 - I find PWA - EU architecture useful for PWA development Likert No U4 - I can make an app closer to end - user characteristics and / or environment through PWA - EU architecture Likert No U5 - I clearly understand each architectural element from the PWA - EU architecture Likert No Q1 - Do you understand all PWA - EU architectural parts ? If not , which one ? Open Yes Q2 - Do you have any notes about PWA - EU’s usage or implementation ? Open Yes Participants were daily users of the internet on mobile devices and attended both the training and warm - up sessions . We set up participants environment prior to the study . A unique code editor , Brackets , and a browser , Google Chrome , were selected to our study ( i . e . training , warm - up session , and the conduction ) as they are common for individuals who implement web apps . During the study , we could restate these tools are well - known by the participants due to they did not have any doubts about these . Yet , participants were free to use their personal laptops or laboratory computers to complete the task as long as they followed our text editor and browser specifications . Furthermore , all participants should develop and debug the app simulating an iPhone 6 / 7 / 8 device on Google Chrome’s device toolbar . Even though the iPhone 6 / 7 / 8 screen size was selected , the participants did not simulate an iOS environment with this selection . Google Chrome options from Android devices had bigger screen sizes which can cause a wrong perception about the available space on the screen and consequently impact on a misconception of the UI . We set these variables to avoid validity threats . Initially , all participants received instructions about the task they should accomplish . A guide with instructions was provided to all participants in a PDF file . We collected data using two sources , Google forms and participants’ final codes using Google Classroom . After finishing the task , participants should submit their code via Google Classroom and the post - study questionnaire that included TAM’s perceived usefulness dimension and two open questions , as Table 2 points out . Even though TAM has two dimensions , we opted to select only the perceived usefulness category . Hence , we want to focus on whether developers could implement the PWA - EU approach and their remarks about this architecture usefulness . Further , we adopted a six - point Likert scale going from Strongly Disagree to Strongly Agree . 4 . 3 Analysis Prior to the experiment conduction , we analyzed the answers of the participants from the profile questionnaire . Figure 3 presents the medians calculated from Likert scale values displayed on Table 1 . We noticed most participants are experienced with the fundamentals , such as HTML , CSS , and JS . However , there is a lack of practical knowledge of specific tools such as jQuery , LocalStorage , Handlebars . js , RWD , SPA , and PWAs . Regarding Handlebars . js , most participants never heard of it . These results guided us on the training , warm - up session and also to develop Where Am I ? app . A pre - analysis was conducted in order to assure all participants filled the profile and post - study questionnaires . Later , we joined data from three data sources , participants’ profile , the post - study questionnaire and the codes produced by the participants that were implemented applying the PWA - EU architecture . With regards to the code , we observed the completeness of each PWA - EU architectural element and the Adaption Engine , as it is an important part of the connection of the traditional PWA architecture with PWA - EU . We created a three - point scale to define the Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 14 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 3 . Medians from participants previous knowledge , HTML5 , CSS , JS , jQuery , LocalStorage ( LS ) , Bootstrap , Handlebars . js ( Hjs ) , JSON , SPA , RWD , PWA LS JS Boostrap Hjs CSS RWD SPA HTML5 PWA jQuery JSON 1 - I have never heard of it 2 - I have heard of it 3 - I have some theoretical knowledge , no practical 4 - I have good theoretical and practical knowledge 5 - I have deep theoretical and practical knowledge Fig . 4 . Complete UDM example completeness of each element 1 - Non - existent , 2 - Incomplete or with errors , and 3 - Complete with no errors . Based on the participants’ profile , the analysis was conducted by separating the participants into two groups . For ease of reference , we named the first group of professionals ( i . e . 10 individuals ) which grouped the participants who have any professional experience in the programming area , and students ( i . e . 13 individuals ) the ones who the work experience on programming was limited to academic activities . With this categorization , we can examine if PWA - EU is more acceptable and / or useful for developers with certain previous experience . 5 RESULTS OF CODE ANALYSIS We divided the discussion of the results by the baseline defined for our analysis . Due to that , we created subsections for each PWA - EU architectural element and the Adaptation Engine . A scatter plot was elaborated for each of the four architectural elements that compose the combined PWA - EU and traditional PWA architecture . The caption for each numeric labels on the code analysis is described at the corresponding figures . 5 . 1 User Design Model ( UDM ) The UDM stores the User App Preferences . Participants should create a JSON object containing different platform options to watch TV shows . We considered a task was complete when the JSON was correctly formatted considering the User App Preferences . Figure 5 shows the distribution of the completeness of participants’ from both groups code . We show a code snippet that illustrates a fully - functioning UDM in JSON format in Figure 4 Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 15 Table 3 . Results from Code analysis divided by participant . Caption - Non - existent ( 1 ) , Incomplete or with errors ( 2 ) and Complete with no errors ( 3 ) Part Group Code Management Layer Connection Layer UDM Adapt . Engine P1 Students 2 2 3 3 P2 Students 2 3 3 2 P3 Students 2 2 3 1 P4 Students 1 3 3 2 P5 Students 2 3 3 2 P6 Students 2 3 3 2 P7 Students 2 2 3 3 P8 Students 2 3 3 2 P9 Students 2 3 1 1 P10 Students 2 3 2 1 P11 Students 1 2 1 1 P12 Students 1 3 3 1 P13 Students 1 2 1 2 P14 Professionals 3 3 3 3 P15 Professionals 2 3 3 3 P16 Professionals 2 3 3 3 P17 Professionals 2 3 3 1 P18 Professionals 2 3 3 3 P19 Professionals 2 3 3 1 P20 Professionals 2 3 3 2 P21 Professionals 2 2 1 1 P22 Professionals 1 3 3 1 P23 Professionals 2 3 3 2 Fig . 5 . User Design Model ( UDM ) code analysis User Design Model 1 2 3 All 1 2 3 Professionals P15 P17 P19 P21 P23 1 2 3 Students P2 P4 P6 P8 P10 P12 P4 P6 P8 P10 P12 P5 P10 P15 P20 Comparing participants from the professionals group , we noticed most of them implemented a complete UDM . An exception was found for P21 that did not create a UDM . Even though the participant stated s / he had good theoretical and practical knowledge with JSON , s / he could not implement it . When we look at the students group , we conclude most of them had a good performance . Nonethe - less , three participants could not implement the UDM ( P9 , P11 , P13 ) and one ( P10 ) implemented an incomplete version . The UDM implemented by P10 was in the JSON format but the user preferences were not related to Where Am I ? app as s / he created a model similar to the JSON example from the warm - up session . This model contained two attributes , one that represents the name of the preference and a second , named active , that indicated if the preference was visible on the main screen . Again , this attribute was linked to the warm - up session in which the user preferences could be selected between a list or a card to display tasks . Furthermore , P10 , P11 , and P13 issues might be Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 16 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 6 . UDM code from P20 Fig . 7 . UDM code from P12 related to the fact they did not have experience with JSON technology . By contrast , P9 had deep theoretical and practical knowledge of JSON . On top of that , we can also discuss the distinct ways participants correctly implemented this model . In all the cases the PWA - EU architecture was not compromised , as the UDM fulfill its role . P6 ( students group ) and P14 and P23 ( professionals group ) created a similar model to the example showed at the beginning of this subsection . The UDM implemented by P16 and P18 differs from the example as it does not contain an id attribute . Likewise , P15 created a plain array with no id or name attributes . Conversely , P3 , P4 , P17 , P19 , P20 , and P22 created a UDM with foundation similar to the one from the warm - up session . Unlike P10 ( professionals group ) , these participants adapted the model to Where Am I ? ’s domain but keep the active attribute , which was not necessary but did not hamper the development . In Figure 6 , we show an example of P20’s code , which is similar to P3 , P4 , P17 , P19 and P22 model’s . Moreover , P1 , P2 , P5 , P19 , P8 , and P12 , all from the students group , created a list with one attribute , called types or list _ types . An example from P12 is described on Figure 7 . By taking note of participants’ implementation , we learn that the UDM could be built with no errors with different approaches . Regarding participants’ issues , we learned they were related to failures in the understanding of PWA - EU and lack of knowledge of JSON . Many participants implemented their UDM structure based on the warm - up session app . This could be avoided by a more detailed definition of this element . For instance , the researcher could emphasize that the structure of the UDM should be rebuilt for each PWA , as the User App Preferences change . Additionally , the developers who implement PWA - EU should be familiar with JSON . 5 . 2 Management Layer ( ML ) The Management Layer ( ML ) is a PWA - EU architectural element in which programmers should include , edit and delete User App Preferences on the UDM . On Where Am I ? domain , this layer should be represented by a JS file including functions to include and remove TV shows platforms . In order to implement this element , participants should be able to use JS basic resources . When we take note of the professionals scatter plot on Figure 8 , we observe that almost all participants had not achieved the completeness of this layer . Only P14 implemented a complete layer . Nine participants ( P15 , P16 , P17 , P18 , P19 , P20 , P21 and P23 ) built incomplete layers . P21’s Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 17 Fig . 8 . Management Layer code analysis Management Layer 1 2 3 All 1 2 3 Students P2 P4 P6 P8 P10 P12 P5 P10 P15 P20 1 2 3 Professionals P15 P17 P19 P21 P23 code was composed by a skeleton of a function to include new preferences , moreover s / he had no practical JS knowledge . On the other hand , P15 , P16 , P18 , P20 , and P23 were familiar with JS they pointed out at least good theoretical and practical JS knowledge . These skills are observable on all participants’ code , even with errors and missing functions . P15 and P16 did not have a complete understanding of the difference between both layers from the PWA - EU architecture since both included Management Layers functions ( remove and edit platform , respectively ) on the Connection Layer file . In another way , P18’s remove function contains the delete call to the data storage , functionality that should belong to the Connection Layer . Conversely , P19 , P20 , and P23 created the include function , yet , they did not implement a remove platform functionality . Meanwhile , P19 and P17 indicated they had some theoretical JS skills . However , P17 could not implement both insert and remove functions correctly , which provoked multiple errors on the browser’s developer console . P22 was the only participant from the professionals group who did not create a Management Layer and did not have any JS knowledge . Similarly , none of the 13 students participants implemented a complete Management Layer , as Figure 8 points out . Still , on the profile questionnaire , only P3 pointed out a lack of JS knowledge . P1 , P2 , P3 , P5 , P6 , P7 , P8 , and P9 developed a layer incomplete or with errors . While P4 , P11 , P12 , P13 did not create a Management Layer . P3 created a file for this layer , yet , s / he left it empty . P9 and P10 , who also had issues with the UDM , created a file but just copied the Connection Layer code from the warm - up session . P2 , P5 , P6 , and P8 experienced a common issue , an incomplete layer in which the include and delete functions were not working . Although P1’s and P7’s layers were incomplete , their code was working . Likewise P16 from the professionals group , P1 , and P7 did not understand the limits between the Management and Connection layers . This issue made them leave functions from both architectural elements on the Connection Layer file . With regards to code , we have developed an example from a complete Management Layer taking Where Am I ? app’s domain . The code is shown in Figure 9 . Figure 10 presents the implementation from P14 , the only participant who built a complete Management Layer . Despite having fewer lines when compared to the example , P14’s code also takes all functionalities from this layer into account . With these results in mind , we noticed participants’ issues can be categorized into two categories : lack of expertise on JS and misunderstanding about Management and Connection Layer roles . By these issues , we learn that in order to implement PWA - EU developers should have experience developing with JS . Further , our proposal should put more emphasis on the differences between the Management and Connection Layers . Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 18 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 9 . Management Layer code example Fig . 10 . Management Layer code from P14 5 . 3 Connection Layer ( CL ) The Connection Layer ( CL ) is part of the PWA - EU architecture that is responsible for storing and retrieving the UDM from a storage technology . Code that edits the UDM and is not related to storing data should not be present on this layer’s code . On Where Am I ? the Connection Layer should be a JS file containing functions to set , update and get the JSON from LocalStorage . The update receives a modified UDM from the Management Layer . The set function is called only when users first access the app . The get function is requested when the Adaptation Engine is building the UI . We created a code example for all set , get and update functions , which is displayed in Figure 11 . When we look at professional group performance on Figure 12 , we note P17 delivered a com - plete implementation of this layer . Interestingly , most participants had no practical knowledge of LocalStorage . However , P21’s implementation is incomplete since his / her functions attempt Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 19 Fig . 11 . Connection Layer code example Fig . 12 . Connection Layer code analysis Connection Layer 1 2 3 1 2 3 P2 P4 P6 P8 P10 P12 Students P5 P10 P15 P20 All 1 2 3 Professionals P15 P17 P19 P21 P23 to obtain a nonexistent entry on the LocalStorage . This nonexistent model should be the UDM , another element that P21 could not implement , as pointed out in Section 3 . 2 . Unlike the professionals group , five participants ( P1 , P3 , P7 , P11 and P13 ) had incomplete Con - nection Layers on the students group , as Figure 12 indicates . None of the participants from this group were familiar with LocalStorage on either practical and theoretical perspectives . P3 did not have any JS experience , which might have influence under his / her error as s / he did not create an update UDM function . Still , P1 , P7 , P11 , and P13 had practical skills with JS , as we observe their JS knowledge as functions were created . Yet , P11’s functions were never called by the app . While P13 implemented the get function but missed out the set and update parts . On a different way , P1 and P7 were confused regarding layers limitations and included the algorithms to remove a platform from the UDM JSON on this layer , instead of the Management one . The delete function from the Connection Layer should only deal with connections to the LocalStorage . Since most participants implemented a complete Connection Layer , we can compare the codes with our example from this Subsection’s first paragraph . Most participants ( P2 , P5 , P6 , P8 , P9 , P10 , P12 , P14 , P16 , P17 , P19 , P20 , and P22 ) built their code similar to our example . This remark is linked to the warm - up session , in which a similar logic was implemented on the group activity . Unlike our example , P4’s code has only get and set functions ( see Fig 13 ) . Rather than creating a separate function to update the UDM , s / he joined both set and change functions into a unique method . Similarly , P7’s implementation ( see Fig 14 ) also has only a get and set functions . Nonetheless , s / he set default platforms on the get model . On another hand , P18’s and P23’s code do not include Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 20 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 13 . Connection Layer code from P4 Fig . 14 . Connection Layer code from P7 Fig . 15 . Connection Layer code from P18 default values into LocalStorage . Instead , value is included later , when the user includes his / her first preference . Yet , both participants implemented using distinct methods . On P18’s code , an empty model returns null , while for P23 , it returns an empty array . Below , we show P18’s ( see Fig 15 ) and P23’s ( see Fig 16 ) implementations , respectively . At last , the issues experienced by participants may be divided into two categories : lack of LocalStorage and / or JS knowledge and lack of understanding of the Management and Connection Layers roles . We notice the incomplete implementations come from participants who were novice Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 21 Fig . 16 . Connection Layer code from P23 Fig . 17 . Adaptation Engine code analysis Adaptation Engine 1 2 3 All 1 2 3 Students P2 P4 P6 P8 P10 P12 P5 P10 P15 P20 1 2 3 Professionals P15 P17 P19 P21 P23 developers . The second issue was previously discussed on the Management Layer subsection , in which we learned improvements to the description of each layer could be included on the PWA - EU approach . 5 . 4 Adaptation Engine The Adaptation Engine is part of the traditional PWA approach , as it changes the app UI by obtaining the app shell from cache , as described in Section 3 . 2 . On this study , participants should implement the engine in two steps : ( i ) design a UI on the " My Design " section using Bootstrap elements , and ( ii ) modify the include new TV shows from considering User App Preferences defined on the UDM . On the UI , all the preferences and a form to include new ones should be visible . Additionally , all the user preferences must have remove buttons . Figure 17 shows the participants who implemented a complete Adaptation Engine . We note that even on the professionals group , more than half of the developers could not create a complete engine . Moreover , four participants ( P14 , P15 , P16 , P18 ) delivered a complete Adaptation Engine . Regarding the students group , only two participants ( P1 , P11 ) successfully accomplished this task . This lower number of completeness is linked to the non - existent and incomplete code from the previously described architectural elements . We observe this relation as all three PWA - EU elements were needed in order to implement a complete Adaptation Engine . Nonetheless , there is a case scenario in which participants had an incomplete Management Layer and yet could implement a complete Adaptation Engine . On the case , participants ( P1 , P15 , P16 , and P7 ) misplaced some of the Management Layer on the Connection Layer file , but still implemented all the necessary functionalities and could create a complete Adaptation Engine . As the Adaptation Engine combines many JS and CSS files , we will not compare the codes between participants . Instead , we will compare UIs developed on the " My Design " section . On this UI , end - users can select their preferred platforms to watch TV Shows . Figure 18 presents the UIs developed by P1 , P7 , P14 , P15 and P16 . P1’s did not implement a form to include user preferences , in exchange , s / he implemented a window dialog when the button with the plus icon was touched . The other four developers implemented both include and remove features on the UI . Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 22 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 18 . P1 , P7 , P14 , P15 and P16 UIs from " My Design " section Fig . 19 . P18’s and P23’s UIs from " My Design " section As pointed out on Section 3 . 2 , P18’s and P23’s ( see Figure 19 ) UIs are distinguished from the others as an initial empty state was developed . No platform is displayed while the user has not included a preference yet . P23’s code was incomplete as remove buttons from each platform were missing together with the remove function on the Management Layer . Still , we decided to include his / her UI on this comparison due to the Adaptation Engine was almost complete and also to the relevant differences on the other layers’ implementation . In view of these results , we learned the Adaptation Engine is complete if all PWA - EU architectural elements were implemented . Yet , errors related to misunderstanding architectural layers , such as misplacing functions on wrong files , did not hamper the engine role . We noticed participants did not have issues on the steps related to implementing this element ( i . e . build a UI using Bootstrap ) . Instead , participants issues with other architectural elements led to an incomplete engine . When we put together the elements described in the previous subsections , we obtain the functionality needed to combine both PWA - EU and the traditional PWA architectures . 6 RESULTS OF PARTICIPANTS’ FEEDBACK In this Section , we will associate the code analysis results with the data obtained from the post - study questionnaire . Besides Table 4 that shows individual results from the questions of acceptance of the proposal , Figure 20 displays the group results in box plots . Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 23 Table 4 . Results from questions of acceptance of proposal divided by participant . U1 - Learning the PWA - EU architecture was easy . U2 - I can use the PWA - EU architecture the way I want . U3 - I find PWA - EU architecture useful for PWA development . U4 - I can make an app closer to end - users characteristics and / or environment through PWA - EU architecture . U5 - I clearly understand each architectural element from the PWA - EU architecture . Participants Group Questions of Acceptance of the Proposal U1 U2 U3 U4 U5 P1 Students 1 3 5 5 3 P2 Students 2 2 5 5 4 P3 Students 1 1 1 1 1 P4 Students 3 2 5 6 3 P5 Students 2 2 4 4 5 P6 Students 3 3 4 4 3 P7 Students 3 4 5 6 3 P8 Students 4 3 4 4 5 P9 Students 1 1 1 1 1 P10 Students 2 2 2 2 2 P11 Students 4 2 4 4 3 P12 Students 6 3 5 5 6 P13 Students 1 1 6 6 1 P14 Professionals 4 5 6 6 6 P15 Professionals 3 4 5 6 5 P16 Professionals 5 5 6 6 5 P17 Professionals 3 2 5 5 5 P18 Professionals 6 6 6 6 6 P19 Professionals 1 1 1 1 1 P20 Professionals 1 1 3 3 2 P21 Professionals 1 1 4 3 3 P22 Professionals 4 3 5 6 5 P23 Professionals 6 5 5 5 5 On the post - study questionnaire participants could answer two open questions , Q1 - Do you understand all PWA - EU architectural parts ? If not , which one ? and Q2 - Do you have any notes about PWA - EU’s usage or implementation ? . Most participants answered Q2 , while only a few ( 7 ) responded to Q1 . Their remarks assist us to comprehend more about their questions of acceptance of the proposal results . Regarding questions of acceptance of the proposal , three affirmatives are directly connected to the elements from the PWA - EU and traditional PWA joint architectures : U1 - Learning the PWA - EU architecture was easy , U2 - I can use the PWA - EU architecture the way I want , and U5 - I clearly understand each architectural element from the PWA - EU architecture . On all three questions we observe a 1 . 5 to 2 points difference between professionals and students groups . While professionals felt neutral regarding U1 and U2 , students widely disagreed on both affirmatives . Still , on U5 , students partially disagreed about the understanding of the PWA - EU elements and professionals widely agree with the statement . Hence , we can associate this contrast with the code analysis from the previous section . Counting all three PWA - EU elements and the Adaptation Engine , more developers from the professionals group delivered complete implementations . Associating remarks of the participants from all three data sources , we can learn more about their experience developing PWA - EU . The lower medians for U1 , U2 and U5 are connected to three main issues : ( i ) difficulties implementing the elements ; ( ii ) issues regarding inexperience with specific Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 24 Giulia de Andrade Cardieri and Luciana A . M . Zaina Fig . 20 . Questions of acceptance of the proposal 1 2 3 4 5 6 Professionals Students All U1 . Learning the PWA - EU architecture was easy 1 2 3 4 5 6 Professionals Students All U3 . I ﬁnd PWA - EU architecture useful for PWA development 1 2 3 4 5 6 Professionals Students All U2 . I can use the PWA - EU architecture the way I want 1 2 3 4 5 6 Professionals Students All U5 . I clearly understand each architectural element from the PWA - EU architecture 1 2 3 4 5 6 U4 . I can make an app closer to end - users characteristics and / or environment through PWA - EU architecture Professionals Students All Caption 1 . Strongly Disagree 2 . Widely Disagree 3 . Partially Disagree 4 . Partially Agree 5 . Widely Agree 6 . Strongly Agree technologies and ( iii ) struggle to understand the differences between Management and Connection Layer . We will discuss all the issues in the next paragraphs . The implementation issue was observed in 12 participants ( P1 , P2 , P3 , P5 , P17 , P20 , P8 , P9 , P21 , P10 , and P13 ) . Yet , only P17 , P20 , and P21 were from the professionals group . From these participants , P17 and P21 stated they clearly understood the PWA - EU architecture and their issues are connected only to the technologies required to implement . P20 complained about the large number of technologies needed to implement PWA - EU . P3 mentioned " It was hard to understand how the architecture integrates on the code " . However , P3 was the only developer with no JS practical or theoretical knowledge on the students group . The second problem , related to inexperience was identified in 8 participants ( P14 , P15 , P6 , P19 , P7 , P20 , P10 , and P11 ) , even experienced ones commented about it . P14 from the professionals group was the only participant who completed the entire PWA - EU architecture , s / he selected values 4 and over for all questions of acceptance of the proposal . Even so , s / he acknowledged " It wasn’t hard to understand the architecture , still , the activity required much knowledge about PWA development and specific libraries . " . In the same way , P20 " It was really hard to implement something completely new that encompassed so many technologies , such as the HTML / CSS and JS requirements . " . P15 mentioned s / he needed more time as PWA was something new to him / her . Looking at students viewpoint , P6 also attributed issues to his / her inexperience with PWAs . Similar to P15 , P7 stated an extra time to study the technologies would have helped him / her . On the other hand , P10 stated s / he did not know how to implement the code in JS . Also with a different opinion , P11 attributed his / her difficulties to a steep learning curve of the selected technologies . However , we did not use any JS framework with the aims of reducing the learning curve . The third issue , related to the misunderstanding of Management and Connection Layers was experienced by 8 participants ( P1 , P20 , P22 , and P13 ) . From the professionals group , P20 affirmed Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 25 s / he could not understand the architectural parts and needed more time to learn it . Conversely , P22 did not understand each layer specificity . Focusing on the students group , P1 expressed issues with Management Layer on Q1 " I could not comprehend the communication between different architectural parts , especially , the Management Layer " . Looking at his / her code , we observe incomplete Manage - ment and Connection Layers . Moreover , P13 shared his / her remarks " I found the architecture very cool , but the time to learn it and apply it was too short " . Despite lower U1 , U2 and U5 affirmatives values , U3 - I find PWA - EU architecture useful for PWA development and U4 - I can make an app closer to end - users characteristics and / or environment through PWA - EU architecture had higher acceptance rates . Nonetheless , the contrast between professionals and students still visible . Most professionals widely agree PWA - EU is useful for PWA development , while students agree partially with this statement . With respect to U4 , students only partially agree the PWA - EU assists an app to get closer to end - user characteristics . On the other hand , professionals widely to strongly agree with this statement . We can discuss if this difference relates to professionals group background , as these developers are accustomed to implementing new software architectures . Further , the outliers on U3 and U4 are related to the three participants from the students group . P3 and P9 selected 1 and P10 2 on all five acceptance of the proposal statements . P9 did not explain his / her issues . All three had issues on most architectural elements . By observing participants’ individual opinion , we notice that even with issues many agree about PWA - EU usefulness . Some examples are " I found the PWA - EU architecture useful , but I had difficulties to implement it " [ P2 ] , " Learning is interesting and useful , but the implementation was extremely complicated to me " [ P3 ] , " The idea to let user on the center of design choices , participating and modifying the UI as s / he likes is extremely interesting . . . " [ P15 ] . Unlike other developers , P18 selected 6 to all acceptance of the proposal statements and did not disclosure issues " The architecture is pretty simple and easy to learn and use " . 7 DISCUSSION Based on the findings presented in each PWA - EU architectural element results section , we can answer RQ1 - what is the developers’ acceptance when using PWA - EU approach ? . By observing participants profile we notice all of them were not familiar with some of the technologies such as LocalStorage , Handlebars . js , SPA , and PWA . Moreover , even though Salman et al . [ 32 ] point out only a small difference between students and professionals when they perform new activities , we noticed a significant contrast between these groups regarding the PWA - EU proposal acceptance . Still , we can indicate the novice developers had a reasonable performance with only one hour of training . We believe they could achieve better performance in a real - life environment , in which they would have more time . Most participants from the professionals group implemented a more complete PWA - EU architecture when compared to the students group . Additionally , only one participant ( professionals group ) implemented a complete Management Layer . Hence , we learned PWA - EU has limitations regarding its acceptance , as novice developers have more challenges on implementation , architectural and technological perspectives than experienced ones . We believe this issues could be improved in future versions of the PWA - EU , for instance , we could provide novice developers with an extended training session , create knowledge sharing tools as part of the PWA - EU , in which more experienced developers could assist less experienced ones . Moreover , we could include more details and options ( i . e . using different technologies and storage systems ) to code that serves as the foundation of the PWA - EU architecture ( i . e . the one developed by participants in the warm - up session ) . This code could be shared with developers to create a more smooth and easy adoption of the PWA - EU in the future . Still , other factors might influence participants while writing code . Namoun et al . [ 26 ] in the meta - design field affirms that writing code is a powerful yet boring activity when compared to programming by visual approaches ( i . e . drag and drop ) , which could Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 26 Giulia de Andrade Cardieri and Luciana A . M . Zaina have contributed to participants acceptance on the study . Lastly , the PWA - EU architecture can be replicated , extended and modified by developers due to its layered structure , detachment from specific web technologies ( i . e . JSON or LocalStorage ) and the possibility to choose different app domains ( i . e . tourism app , social network app , so on ) . The questions of acceptance of the proposal support our answer to RQ2 - How is developers’ feedback regarding the usefulness of the PWA - EU approach ? . By gathering participants remarks we learned web - experienced developers may accept and understand the PWA - EU approach more easily when compared to those who are beginners . This limitation is connected to the need for a broad set of technologies and also the complete comprehension of PWA - EU layers specificity . Given that , participants from all technical levels identified the usefulness of the PWA - EU architecture regarding the PWA development ( question U3 ) and in how they can make an app closer to end - users characteristics ( question U4 ) . With that in mind , we can affirm that developers found the PWA - EU approach useful , but not easy to implement . This lack of easiness could have its foundation on multiple constructs , as pointed out by Namoun et al . [ 26 ] . Furthermore , we could improve PWA - EU easiness by providing a more detailed comparison between each PWA - EU architectural element and a group discussion with multiple developers in order to define which User App Preferences are adequate for a specific application domain . This discussion is related to one of the meta - design guidelines proposed by Fisher , Nakakoji & Ye [ 17 ] . Which is linked to PWA - EU as the User App Preferences should be previously identified by designers and developers ( see Section 3 ) . 8 THREATS TO VALIDITY Four validity threats : conclusion , construction , internal and external , determined by Wohlin et al . [ 34 ] , were discussed . With the aims of mitigating conclusion threats , we adopted two distinct data sources , an online questionnaire application via Google Forms , and participants’ code obtained via Google Classroom . Thus , we triangulate data from both sources which provides reliability to the analysis . Construction threats were avoided by assuring all participants had some experience with web technologies by having taken a web development course , using the same code editor ( Brackets ) and browser ( Google Chrome ) . Furthermore , we conducted training and warm - up sessions that followed a similar scenario to the study . These sessions benefited participants as they could clarify any doubts which led to more quality implementations that could be analyzed in a more safe way . Internal threats are related to participants’ fatigue during the study , we created one task and established a time limit ( one and a half hours ) . Even though the external threats are related to the choice of selecting students as developers , Salman et al . [ 32 ] point out these individuals are acceptable on an experimental study . The authors gathered evidence of a small difference between the performance of students and professionals when carrying out new tasks . As both groups did not have previous knowledge of PWA , we can compare professionals to students . 9 FINAL CONSIDERATIONS This paper presented the PWA - EU approach , a proposal to assist developers and designers to built mobile apps that allow end - users to act on the apps’ design by combining PWAs and EUD . With the aims of evaluating our proposal , we conducted a study with developers who had distinct technical skills , divided into professionals and students groups by their background programming experience . In our study , 23 developers had to implement the three architectural parts from the PWA - EU proposal and one from the traditional PWA approach into an existing PWA called Where Am I ? . We conducted an analysis based on users’ profile , questions of acceptance of the proposal , open questions and a code analysis pinpointed to the four architectural elements . By analyzing developers’ performance and remarks , we concluded novice developers found the PWA - EU challenging on Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . PWA - EU : Extending PWA Approach for Promoting Customization based on User Preferences10 : 27 implementation , architectural and technological perspectives . Conversely , experienced developers could implement and understand it in a simpler way . Nevertheless , all developers agree about PWA - EU usefulness on PWA development and end - user experience viewpoints . With that in mind , we can discuss whether the association of PWA and the meta - design technique brings benefits to web and mobile developers . Yet , our work has limitations as we did not evaluate whether are differences in the performance of a PWA when it was implemented following the PWA - EU approach . As contributions , we can point out two main points : ( i ) a software architecture that assists designers and developers to create PWAs that allow end - users to take an active role in the app’s design during runtime ; and ( ii ) a proposal that allows end - users to become co - designers of a mobile app by selecting their design preferences . Additionally , developers who adopt the PWA - EU approach can modify and extend the architecture according to their needs , as it was created based on a layered architecture and not tied to specific technologies . As future work , we plan to conduct a study to evaluate the PWA - EU approach with end - users . The aim of this study will be to evaluate PWA - EU under end - users’ perspective , since this topic is one of the main goals of our proposal and was not considered on this paper . Specifically , we want to understand if PWA - EU can empower these users in a way their experience is improved by their active role in the app’s design . ACKNOWLEDGMENTS This study was financed in part by the Coordenação de Aperfeiçoamento de Pessoal de Nível Superior - Brasil ( CAPES ) - Finance Code 001 . REFERENCES [ 1 ] David Benyon and Dianne Murray . 1993 . Applying user modelling to human - computer interaction design . ArtifIntell Rev 7 3 - 4 ( 1993 ) , 199 – 225 . [ 2 ] Andreas Biørn - Hansen , Tim A . Majchrzak , and Tor - Morten Grønli . 2017 . Progressive Web Apps : The Possible Web - native Unifier for Mobile Development . Proceedings of the 13th International Conference on Web Information Systems and Technologies Webist ( 2017 ) , 344 – 351 . https : / / doi . org / 10 . 5220 / 0006353703440351 [ 3 ] Gabriela Bosetti , Sergio Firmenich , Silvia E . Gordillo , Gustavo Rossi , and Marco Winckler . 2017 . An End User Development Approach for Mobile Web Augmentation . Mobile Information Systems 2017 , February ( 2017 ) . https : / / doi . org / 10 . 1155 / 2017 / 2525367 [ 4 ] Jay Bryant and Mike Jones . 2012 . Responsive Web Design . In Pro HTML5 Performance . Vol . 67 . Apress , Berkeley , CA . [ 5 ] Danilo C . Bueno and Luciana M . Zaina . 2017 . HyMobWeb : A hybrid adaptation of context - sensitive Web interfaces with multimodality support in mobile devices . SBC Journal on Interactive Systems ( 2017 ) . [ 6 ] Giulia de Andrade Cardieri and Luciana Martinez Zaina . 2018 . Analyzing User Experience in Mobile Web , Native and Progressive Web Applications : A User and HCI Specialist Perspectives . In Proceedings of the 17th Brazilian Symposium on Human Factors in Computing Systems ( IHC 2018 ) . ACM , New York , NY , USA , Article 9 , 11 pages . https : / / doi . org / 10 . 1145 / 3274192 . 3274201 [ 7 ] Andre Charland and Brian Leroux . 2011 . Mobile Application Development : Web vs . native . Commun . ACM 54 , 5 ( 2011 ) , 49 – 53 . https : / / doi . org / 10 . 1145 / 1941487 [ 8 ] Comscore . 2017 . The Global Mobile Report . https : / / www . comscore . com / Insights / Presentations - and - Whitepapers / 2017 / The - Global - Mobile - Report [ 9 ] Maria Francesca Costabile , Piero Mussio , Loredana Parasiliti Provenza , and Antonio Piccinno . 2008 . End users as unwitting software developers . In Proceedings of the 4th international workshop on End - user software engineering - WEUSE ’08 . 6 – 10 . https : / / doi . org / 10 . 1145 / 1370847 . 1370849 [ 10 ] Jose Danado and Fabio Paternò . 2014 . Puzzle : A mobile application development environment using a jigsaw metaphor . Journal of Visual Languages and Computing 25 , 4 ( 2014 ) , 297 – 315 . https : / / doi . org / 10 . 1016 / j . jvlc . 2014 . 03 . 005 [ 11 ] Fred D Davis . 1989 . Perceived usefulness , perceived ease of use , and user acceptance of information technology . MIS quarterly ( 1989 ) , 319 – 340 . [ 12 ] Gil Fink and Ido Flatow . 2014 . Pro Single Page Application Development : Using Backbone . Js and ASP . NET ( 1st ed . ) . Apress , Berkely , CA , USA . [ 13 ] Gerhard Fischer . 2007 . Meta - design : Expanding Boundaries and Redistributing Control in Design . In Proceedings of the 11th IFIP TC 13 International Conference on Human - computer Interaction ( INTERACT’07 ) . Springer - Verlag , Berlin , Heidelberg , 193 – 206 . http : / / dl . acm . org / citation . cfm ? id = 1776994 . 1777019 Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 . 10 : 28 Giulia de Andrade Cardieri and Luciana A . M . Zaina [ 14 ] Gerhard Fischer . 2009 . End - user development and meta - design : Foundations for cultures of participation . Lecture Notes in Computer Science ( including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics ) 5435 LNCS ( 2009 ) , 3 – 14 . [ 15 ] Gerhard Fischer , Daniela Fogli , and Antonio Piccinno . 2017 . Revisiting and Broadening the Meta - Design Framework for End - User Development . In New Perspectives in End - User Development . Springer , Cham , 61 – 98 . [ 16 ] Gerhard Fischer , Elisa Giaccardi , Yunwen Ye , Chris DiGiano , and Kumiyo Nakakoji . 2007 . Converging on a Science of Design Through the Synthesis of Design Methodologies . In CHI ’07 Extended Abstracts on Human Factors in Computing Systems ( CHI EA ’07 ) . ACM , New York , NY , USA , 2837 – 2840 . https : / / doi . org / 10 . 1145 / 1240866 . 1241090 [ 17 ] Gerhard Fischer , Kumiyo Nakakoji , and Yunwen Ye . 2009 . Metadesign : Guidelines for supporting domain experts in software development . IEEE Software 26 , 5 ( 2009 ) , 37 – 44 . https : / / doi . org / 10 . 1109 / MS . 2009 . 134 [ 18 ] Giuseppe Ghiani , Marco Manca , Fabio Paternò , and Claudio Porta . 2014 . Beyond responsive design : Context - dependent multimodalaugmentationofwebapplications . In 11thInternationalConferenceonMobileWebandIntelligentInformation Systems - MobiWis’14 , Vol . 8640 LNCS . 71 – 85 . [ 19 ] Google Developers . 2017 . Jumia sees 33 % increase in conversion rate , 12X more users on PWA . https : / / developers . google . com / web / showcase / 2017 / jumia [ 20 ] Google Developers . 2018 . Case Studies | Web | Google . https : / / developers . google . com / web / showcase / [ 21 ] Google Developers . 2018 . Introduction to Progressive Web App Architectures . https : / / developers . google . com / web / ilt / pwa / introduction - to - progressive - web - app - architectures [ 22 ] Francesca Gullà , Silvia Ceccacci , Michele Germani , and Lorenzo Cavalieri . 2015 . Design Adaptable and Adaptive User Interfaces : A Method to Manage the Information . In Biosystems & Biorobotics . Vol . 11 . Springer International Publishing , 47 – 58 . https : / / doi . org / 10 . 1007 / 978 - 3 - 319 - 18374 - 9 [ 23 ] Henry Lieberman , Fabio Paternò , Markus Klann , and Volker Wulf . 2006 . End - user development : An emerging paradigm . End User Development 9 ( 2006 ) , 1 – 8 . https : / / doi . org / 10 . 1007 / 1 - 4020 - 5386 - X _ 1 [ 24 ] Marco Manca , Fabio Paternò , Carmen Santoro , and Lucio Davide Spano . 2013 . Generation of multi - device adaptive multimodal web applications . In 10th International Conference on Mobile Web and Intelligent Information Systems - MobiWis’13 , Vol . 8093 LNCS . 218 – 232 . [ 25 ] Ethan Marcotte . 2011 . Responsive web design , a book apart . https : / / alistapart . com / article / responsive - web - design [ 26 ] Abdallah Namoun , Athanasia Daskalopoulou , Nikolay Mehandjiev , and Zhang Xun . 2016 . Exploring mobile end user development : Existing use and design factors . IEEE Transactions on Software Engineering 42 , 10 ( 2016 ) , 960 – 976 . https : / / doi . org / 10 . 1109 / TSE . 2016 . 2532873 [ 27 ] Michael Nebeling , Maximilian Speicher , and Moira Norrie . 2013 . W3touch : Metrics - based Web Page Adaptation for Touch . In SIGCHI Conference on Human Factors in Computing Systems - CHI’2013 . Paris , France , 2311 . [ 28 ] Fabio Paternò . 2013 . End User Development : Survey of an Emerging Field for Empowering People . ISRN Software Engineering 2013 ( 2013 ) , 1 – 11 . https : / / doi . org / 10 . 1155 / 2013 / 532659 [ 29 ] Petele . 2016 . Your First Progressive Web App . https : / / codelabs . developers . google . com / codelabs / your - first - pwapp / index . html [ 30 ] Mark Richards . 2015 . Software Architecture Patterns . [ 31 ] Alex Russell . 2015 . Progressive Web Apps : Escaping Tabs Without Losing Our Soul . https : / / infrequently . org / 2015 / 06 / progressive - apps - escaping - tabs - without - losing - our - soul / [ 32 ] Iflaah Salman , Ayse Tosun Misirli , and Natalia Juristo . 2015 . Are students representatives of professionals in software engineering experiments ? . In Proceedings of the 37th International Conference on Software Engineering - Volume 1 . IEEE Press , 666 – 676 . [ 33 ] Dennis Sheppard . 2017 . Beginning progressive web app development creating a native app experience on the web . 978 – 1 pages . https : / / doi . org / 10 . 1007 / 978 - 1 - 4842 - 3090 - 9 [ 34 ] ClaesWohlin , PerRuneson , MartinHöst , MagnusCOhlsson , BjöornRegnell , andAndersWesslén . 2012 . Experimentation in software engineering : an introduction . Vol . 15 . 228 pages . https : / / doi . org / 10 . 1007 / 978 - 3 - 642 - 29044 - 2 Received February 2019 ; revised March 2019 ; accepted April 2019 Proc . ACM Hum . - Comput . Interact . , Vol . 3 , No . EICS , Article 10 . Publication date : June 2019 .