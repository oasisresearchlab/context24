323 A Top Down Method for Interactive Drawing Me1 Slater’ Ab ! $ lEWt Traditional interactive drawing programs adopt a bottom - up approach , allowing the user to construct a picture by the use of discrete tools , for example , lines , circles , rectangles , and so on . This paper presents a Merent approach , which allows users to construct graphical objects by stretching and cutting existing objects . The representation is simply implemented , based on a ring of cubic Bezier curves , and use of the de Casteljau algorithm . Keywords Bezier , graphics , drawing , interactive , de Casteljau 1 . Inb . oduction The standard paradigm for interactive drawing p r e gram has remained essentially unchanged for a number of years . The most widely known and cloned is probably the Apple @ Macintosh MacDrawW . This is based on the idea of a set of tools which the user can select and use to incrementally construct a picture . The tools include straight lines , polygons , ellipses , curves , rectangles , and free hand sketching . Application of each tool creates a new object Objects can be selected , and upon selection are highlighted . Such a highlighted object can be cut or copied to an off - screen “clip board” , translated , or re - styled ( for example , shaded if a polygon , or changed to a dashed line if a line , etc . ) . Objects currently in the clipboard can be pasted either back into the current application , or another applica - tion ( such as a word processor ) . Groups of objects can be selected , and combined into a higher order entity , which can then be treated as a single object . ( Such gir ~ al components ) . Using such a system , the usef constructs a picture from the bottom up . A distinct approach explored in this papa is to allow the user to construct a picture from the “top down” . The user begins by choosing a basic shape ( e . g . , a rectangle ) and proceeds by cutting pieces away , and stretching or shrinking it under con - straints , in order to & ape it according to groupad ObjCCts an also be “ ~ grouped” into th & on - Dcpprtmcllt of computa sci - Queen Mary college , ( Univmity of London ) Mile End Road London El 4NS Englnnd requirements . The traditional approach relies on the idea of there being a box of tools from which indivi - dual tools can be selected in sequence in order to effect changes to the picture . The new approach is based on the idea of giving the user being given pieces of stretchy material and a pair of scissors . 2 . Backgmmk Garment Manufacture The initial impetus for this work came from an indus - trially funded project . A U . K . company + involved in making computer equipment for the garment manufac - turing industry required an interactive graphics system to support pattern grading and styling . Given a set of pattern pieces corresponding to a certain size of gar - ment , the pattern grader has to create pieces in a range of sizes for this style of garment . This is a non - trivial problem , because the human body does not scale uni - formly . ( Eg . a person X who is z per cent taller than person Y does not have z per cent longer arms , z per cent thicker neck , etc . than person Y ! ) - Also , starting from a basic set of patterns for a garment , a pattern designer will wish to edit these to create diaerent styles of this type of garment . A straightforward representation was found , which proved to be popular amongst people in the industry . This was to represent the pattern pieces as closed curves , with edges formed as Hermite Polynomials ( see , for example , Bartels et al . * ) . The vertices forming the meeting points of two such curves were called “Grading Points” , represented by small circles ( Figure 1 ) . The user could , using a mouse pointing device , interactively select any grading point and move it . The point would be moved in such a way that the tangent vectors to the two curves meeting at that point would remain unchanged , thus preserving an aspect of the shape of the whole piece even though it was being stretched or shrunk ( Figure 2 ) . As the point moved the user would see the offset ( measured in mm ) of the point from its original position , this measurement being important for the activity of grading . In addition the piece could be edited by changing the curvature of the boundary curves . This was accomplished by displaying the tangent vectors of the curve to be modified . The user could select one of the vectors , and by chauging its orientation or length the curvature would change Cybrid Ltd . North - Holland Compuier Graphics Forum 7 ( 1988 ) 323 - 329 324 , , , . . . . . . . . . . . . . . - - - - - - - - - - - - - - e - M . Slater / A Top Down Method fw Interactive Drawing 4 > 4 > 0 . . . " ' " Q 30 . 5 . 4 6 . 0 Figure 1 . A piece representing part of a garment is displayed . Its grading points are denoted by small cir - cles . Figure 4 . The bottom right hand corner grading point has been locked . As the previous point is moved , so the next two curves are moved . The locked point main - tains the alignment of the two associated curves . Figure 2 . A grading point has been selected , and is being moved . The offset from the original position is shown . Figure 3 . The tangent to a cwe is shown . As the tangent is changed , so the curve changes . according to the pr0pa - t . m of the underlying Hermite representation ( Figure 3 ) . There were a number of operations possible with respect to the grading points themselves : 0 A new grading point could be placed on any curve , thus splitting the curve into two . " his would be useful , for example , for modifymg a pat - tern piece to a shape more complex than allowed by the existing set of curves . A grading point could be " locked " meaning that the relationship between the two adjoining curves could be hed . The two curves would act for all purposes as if they were one single curve ( Figure 4 ) . A grading point could be deleted altogether , thus uniting two adjoining curves into one ( the shape of the new single curve , in general would not be the same as the original shapes of the two curves ) . A prototype system embodying these ideas ( and of course many others not of interest in this discus - sion ) was implcmentcd at QMC . and this was later turned into a commercial product by the company involved . More recently commercial drawing 9ys - tems have appeared on the market ( for example Adobe IllustratorTM2 ) which do allow interactive manipulation of curves in a manner somewhat similar to that described above . The purpose of this paper is to introduce a simple and u d j h g model for such curve manipulation operations . 0 0 3 . TbeWhok - PsCoeModel After compktion of the work discussed in section 2 it was realised that an extension of the ideas used could M . Slarer J A Top Down Methodjor lnteructive Drawing 325 be employed more generally in the interactive drawing context . The new “whole - piace” model is derived from a few simple concepts . As in the case of the pattern grading system , the basic primitive is the closed sequence of curves ( called a piece ) . The vertices where two curves join are called the “signrficant points” ( or just points ) . There are three basic operations each of which applies to tither the piece as a whole , a set of sigrvsCant points , or a w e . These operations are “move” , “split” and “remove” , with interesting sym - metries between the last two . 3 . 1 . Basic Operations Moving A piece can be moved to a digerent position on the display . A m e can be moved in the sense that its curva - ture can be changed while its two end - points are unchanged . A point can be moved in the way described in sec - tion 2 . 0 0 Splitting 0 A piece can be split into two pieces , each now representing a valid piece . Splitting a piece is achieved by inserting a new curve which is the line along which the piece is divided . A m e can be split into two curves by the inser - tion of a new significant point along the curve ( except at its end - points ) . A signilicant point can be split into two points by the insertion of a new curye where the original 0 0 point was . Removing 0 0 A piece can be removed from the picture alto - gether . A curve can be removed ( its two end - points are replaced by a single end - point ) . A point can be removed ( its two adjoining curves are unified into a single curve . In addition curves and pieces can be “straightend“ . Straightening a curve simply means replacing it by a straight line . Straightening a piece mcans the applica - tion of the straighten operation to each of its curves . 3 . 2 . USerInterface These operations can best be represented in an object based user interface . A piax , curve or point can be by pointing to it and clicking the mouse ( “selectiug” ) . An object which is sucxxssfully selected is made “active” . An active object is hiwghted . For example , an active piece might be stipple shaded , an active curve might be drawn with a thicker pen , and an active point might be illustrated by a small solid filled circle . An active object can be manipulated by moving , splitting or removing . Such an interface has been implemented as an experimental system on the Apple Macintosh , following the standard Macintosh user interface conventions . After selection of an object the user can choose an available operation from the Edit menu . Those opera - tions which are possible for this object are selectable from the menu and illegal options disabled . Moving can be accomplished without the necessity of prior selection - a piece , curve or point can be moved in a single operation following the usual drag - ging paradigm ( mouse down over the object , and while the mouse is moving with the button down the object is highlighted and follows the cursor ) . If the mouse down event OCCUTS over a position on the display which is not over a piece , curve or point , then a rubber - band rec - tangle interaction is initiated . On completion of the rec - tangle , all signilicant points inside it are selected and highlighted , and the operations move , split , remove can be applied simultaneously to all of these points . The set of points selected might belong to several different pieces . 4 . Implementation 4 . 1 . Data Structure and Redring The curves are cubic Bezier curved represented as arrays of four ( control ) points In , pI , b , p , ] ( this may type is called ControlPt ) . Pieces are represented as Mgs ( doubly linked lists ) of ControlPt . Obviously , the significant points are the tint ( or last ) points of each of the Controlpt arrays in a piece . The Bezier curves are rendered using the de Casteljau recursive sub - division dg0rithm3 . 4 . Let p be an array of 4 control points , then the function to draw a Wer curve is ( in pseudeML ) : fun DrawBezier ( p ) = if Colinear ( p ) then else DrawLine ( p , , , PJ ) let Val ( q , r ) - Split ( p ) in Draw & zier ( q ) ; DrawBezier ( r ) end endif end 326 M . Stater i A Tq Down Method fw Interactive Drawing Colinear checks that the points ' pl and p are within a given tolerance of the straight line joining po and p3 . Split delivers two mays of control points correspond - ing to the usual mid - point subdivision . Calculations are in 6x4 - point arithmetic . 4 . 2 . Moving a Point Moving a point is straightforward . As the point is interactively dragged the two curves which meet at that point ( say leftcurve and rightcurve ) are updated such that : 0 the last point of leftcurve and Erst point of rightcurve are updated to the new position . the third point of leftcurve and second point of rightcurve are recalculated so as to maintain invariant the two tangent vector offsets at the moving point . 43 . MovingaCurve Moving a curve is slightly more complicated . Clearly the Erst and last control points remain unchanged . Other than this there are many possible rules which could be used to map changes of cursor position into changes to the two middle control points . In order to move a curve , the user selects a position on the curve . The selection is performed as a mouse down event while the cutsor is over the w e . While the mouse is held down , and the cursor moves , so the w e should continue to pass through ( or at least very close to ) the current cursor position ( Figure 5 ) . Suppose at some moment the cursor is at 90 , and at the next sample moment at ql . Let the parameterization of the Bezier curve be on variable t , ie . , P ( t ) traces out the curve as t varies between 0 and 1 . Let t - Tat position 40 on the w e . Then a natural requirement is that the changed curve should pass through q1 also at t = T . Hence if Po ( t ) and Pl ( t ) are the representations for the two curves , with the new middle control points for the second curve behg p , and p2 : Subtracting P o 0 from PI ( T ) gives an equation in the unknowns pl and p2 . Note that there are four unknowns @ ecause the x and y components of the two points must be found ) and two equations ( in x and in y ) . Hence there are two degrees of freedom available . In order to provide unique solutions for the unlmowns the following simple rule is adopted : If T < 1 / 3 then only the left tangent is changed ( i . e . only pI moves ) . Similarly , if T > 213 then only the right tangent is changed ( only p2 moves ) . Other - wise , both p1 and p2 change , but they are each changed by the same amount . Using this rule , the following solutions are easily found : if T < 113 then else if T > 2 / 3 then 41 - 40 3T2 ( 1 - T ) P ' 2 - p2 = else 41 - 40 3T ( l - T ) P 2 - p2 = p ' , - p i = This method clearly requires evaluation of T , which is discussed in section 4 . 10 . 7 Moving a Curve closely lollows the The curve is lurther reshaped . Notice how the curve movement cursor position . Figure 5 . 4 . 4 . Splitting a Point Splitting a point requires the insertion of a new curve in place of a single point . There are many possible choices as to how this might be done . For example , the two curves ( previous and nut ) which mcet at the point to be split might be left as they are , with the new curve forming a loop , with two end points at the same posi - tion as the original point . Although this has the advan - tage of keeping the previous and next curves unchanged , the approach could be confusing to the usa , and also would make the selection of a particular one of the two significant points located at the same position diBcult . Rather than keeping two adjoining curves exactly the same it was decided to keep them almost the same . Point p3 of the previous m e and point p0 of the next c w e are tach moved along their respective tangent vectors - half the distance to the corresponding inner M . Shtu f A Tap Down Me control point . Hence p , is offset by 0 . 5 * ( p , - p , ) , and similarly for po . These two new positions are therefore the 6rst and last points of the new curve . The simplest possible choice for the shape of the new curve is a straight line ( Figure 6 ) . The advantage of this is that it is always predictable . Earlier experiments attempted to make the new curve fit “smoothly” ( in the sense of tangent vectors ) to the previous and next curves . While this was satisfactory in some cases , there were instances ( e . g . where the point to be split occurrd at a sharp angle ) where the results achieved were counter - intuitive . In any case , choosing the new curve to be straight is no loss , since the user can always bend it subsequently . I Splitting a Point A significant point on a piece is selected The significant point is then active and therefore highllghted The ‘split’ method is then chosen from the menu , and the single point is now replaced by a curve ( initially a straight line ) Figure 6 . 4 . 5 . splitting a Curve Splitting a curve requires the insertion of a new point along the curve , thus replacing the single curve with two new wcs . An obvious requirement here is that the two new curves should reproduce the shape of the original single curve . This can easily be accomplished . When the user selects a point on the curve , the corresponding t value is computed so that P ( t ) is equal to that point . Then the de Casteljau algorithm is used to split the curve using that value of t as the splitting value . 4 . 6 . Splitting a Piece Splitting a piax results in two new pieces which together make up the shape of the old piece . Splitting is always done along a straight line . The user selects the piece as a whole and then chooses the split option from the menu . The user must then select two curves by selecting a point 011 each of them ( or perform a null selection in order to terminate the interaction ) . While the mouse is held down after selecting the first curve , a rubber band line provides feedback for the dividing edge . The t values at the selections are computed , and the two curves are split at those points , as in section nthd for Interactive Drawrng 327 4 . 5 . It is then a matter of constructing the data struc - tures for the two new pieces . and doing the necesary house keeping and redrawing . Some unanticipated pos - sibilities emerged for splitting a piece , such as the abil - ity to be able to cut away “empty space” . ( Figure 7 ) . Splitting a Piece A rectangle is reshaped by moving its two vertical edges The reshaped piece is selected ( and so highlighted ) The ‘split’ melhod from the menu is used to split the piece into two The pieces are moved apart slighty The right hand piece is duplicated . and then there is a lurther splil . cutting away some of its empty space The cut away piece is moved near to the original right hand piece Figure 7 . 4 . 7 . Removing a Point Removing a point results in the two adjoining curves bekg replaced by a single curve . In fact this operation is the inverse of “splitting a Curve” . A requirement , therefore , is that if a curve is split , and the resulting new point is subsequently removed , before any changes have been made to the new curves , then there should be no change to the piece . ( Unfortunately , it is not directly possible to make “splitting a w e ” the inverse of “removing a point” - for once the point is removed there is insutkient information available to compute what was them before ) . Using an ‘‘inverse ? ’ de Castel - jau split it is possible to recompute the original curve from the information available in the two split curves . Au @ t removal is done according to this algorithm - though obviously , points are often removed where the two adjoining curves did not origiuaUy form a single Bezier m e . 4 . 8 . RemovingaCume This operation is inverse to splitting a point in the scllse that if a point is split and the resulting new curve 328 M . Sher / A Top Down Meihud fw Inreraciive Drmving is straight away removed , then there should be no change to the piece . The algorithm adopted is the inverse to that given in section 4 . 5 . 4 . 9 . Moving and Removing Pieces These are vcry simple operations . Moving only requires updating all points in a piece by the translation vector . Removing requires the deletion of the piece from the underlying data structure which maintains a list of all current pieces on the display , and of course the neces - sary redrawing to effect the removal of the piece from the display . 4 . 10 . Computing a t vdw Corresponding to a Point Various operations above required the computation of the parameter value t , such that given a point p on a curve , and P ( t ) the parametric represenmion of the Bezier curve , P ( t ) - p . At first sight this seems to be a difEcult problem , not least bemuse the value p is delivered as the result of a urn point selection , and is unlikely to be exactly on the w e . Newton - Raphson could be used on tbe two cubic polynomial equations in t ( for each of x and y ) , but if p is not exactly on the m e this could could result in iterations which do not converge . Similarly , the exact algebraic method based on resultantsS can produce wild results where p is not exactly on the m e . Since p is “approximately” on the curve , an approximate method seems to be in order . In fact such a method can easily be derived from the de Casteljau algorithm as follows . This algorithm produces a sequence of control graphs which approximate ever closer to the true shape of the curve . The t value corresponding to the end - points of each graph will be known , since the t value at each stage of the splitting process ( using mid - point subdivision ) will clearly be half of the t values at each end of the control graph of the previous stage . When a particular control graph is found which approximates a straight line . this line is tested against the point p ( in fact by putting a small square around p , and clipping the line against this square ) . If the line is visible with respect to this clip ping box around p , then the t value corresponding to the mid - point of the part of the line within the clip box is delivered as the approximate t value for p in relation to the curve as a whole . Obviously , if the split - ting algorithm completes without such a clip being suc - cessful , then p is not close to the given m e . The experimental implementation uses this method , and it proves to be suitable for practical purposes . 5 . Conclusion This paper has presented a method for interactive drawing which is based on the idea of modifying a whole piece rather than the usual incremental tool based approach . It may prove a useful addition to the armory of methods availabte for interactive drawing . Further examples are shown in Figure 8 . It is relatively simple to implement , and although the current version is based only on cubic Bezier curves it could be extended to more complex representations . It relies heavily both for rendering and for interactive selection on the de Casteljau algorithm . It can naturally be represented in object oriented terms , since there are a few fundamental methods ( move , split , remove ) applied to Werent objects ( pieces . curves and siplicant points ) . The current implementation is only experi - mental , and there are no doubt alternative possible approaches to the implementation of the same ideas . A Simple Example A rectangle piece has its top edge split . by the insertion of a new point . and then this point is itself split io give a new curve The new curve 15 reshaped , to form a bubble emerging from the top The piece is modified further by splitting its two vertical edges , the eventual new state showing a new point added on the lowest edge The final state shows further curves pulled out of the original lower edge . and various modifications made The piece is then split into two . separated . and the lower piece has just been selected Figure 8 . AdrwlVkdg - - Thanks to Cybrid Ltd for funding the original project , and to Piotr Jug a restarcher on the original project . Thanks for help with equipment to Martin Chudley , and to Steve Cook , Kieron Drake and William Roberts and Mark Smith for commenting on an earlier draft . M . Slater / A Top Dawn Methadfor Interactive Drawing 329 References 1 . Bartels , RH . , Batty , J . C . , Barsky , B . A . , An Introduction to Splines for Use in Computer Graph - ics and Geometric Modeling , Morgan Kaufmann Publishers Inc . , CA ( 1987 ) . 2 . Adobe Systems Ioc . , Adobe Illustrator Users ' Manual , 1987 . 3 . de Casteljau , P . , Cowbes et Swfaces a Poles , Citroen , Paris ( 1959 ) . 4 . Lane , J . M . , Reisedeld , R . F . , " A Theoretical Development for the Computer Generation of Piecewise Polynomial Surfaces , " IEEE Tranrac - tiom on Pattent Analysis and Machine Intelligence Yl ) , pp . 35 - 46 ( 1980 ) . 5 . Sederberg , T . W . , Goldman , R . N . , " Algebraic Geometry for Computer - Aided Geometric Design , " IEEE Computer Graphics and Applica - tions , pp . 52 - 59 ( June , 1986 ) .