a r X i v : 2308 . 06273v1 [ c s . H C ] 28 J u l 2023 A Novel Model for Capturing the Multiple Representations during Team Problem Solving based on Verbal Discussions Alex Doboli and Ryan Duke DepartmentofElectricalandComputerEngineering , StonyBrookUniversity , StonyBrookNY117954 - 2350 Email : { alex . doboli , ryan . duke } @ stonybrook . edu Abstract Improving the effectiveness of problem solving in teams is an important research topic due to the complexity and cross - disciplinary nature of modern problems . It is unlikely that an individual can successfully tackle alone such prob - lems . Increasing team effectiveness is challenging due to the many entangled cognitive , motivational , social , and emo - tional aspects speciﬁc to teamwork . It is often difﬁcult to reliably identify the characteristics that make a team efﬁcient or those that are main hurdles in teamwork . Moreover , experiments often produced conﬂicting results , which suggests possibly incorrect modeling of team activities and / or hypothesis formulation errors . Automated data acquisition followed by analytics based on models for teamwork is a intriguing option to alleviate some of the limitations . This paper proposes a model describing an individual’s activities during team problem solving . Verbal discussions between team members are used to build models . The model captures the multiple images ( representations ) created and used by an individual during solving as well as the solving activities utilizing these images . Then , a team model includes the interacting models of the members . Case studies showed that the model can highlight differences between teams depending on the nature of the individual work before teamwork starts . Inefﬁciencies in teamwork can be also pointed out using the model . 1 Introduction Problem solving in teams , also called Collaborative Problem Solving ( CPS ) [ 1 – 3 ] , considers that a team shares a common goal in devising a solution for a problem . Teamwork starts from an initial state of the team , such as team members might have attempted to ﬁrst individually solve the problem or other situations [ 4 – 7 ] . Studying CPS has been a major research problem , as modern problems are of a knowledge diversity , complexity , and difﬁculty that cannot tackled by a single individual [ 3 ] . Effective problem solving in teams is not straightforward . Numerous examples show that individuals can often outperform entire teams . In a purely mechanistic approach , the problem solving outputs , e . g . , ideas , discussions , designs , and social and emotional interactions , would be completely explained by the physiological process in the brains of the team members . Even though this approach might seem extreme , work in neuroaesthetics attempts to explain art along this approach [ 8 , 9 ] . More re - cently , some work in engineering design creativity [ 10 – 12 ] seems to follow the same concept , at least to some degree . While having the potential to offer a causal explanation of high - level cognitive and social activities in terms of physical , physiological signals , it is hard to see how such models scale for complex activities , the well - known curse of dimension - ality . The alternative approach , traditionally used in psychology , sociology and organization research , only explores the dependencies among pairs of parameters intuitively selected based on previous experimental observations [ 13 ] . These parameters are used to deﬁne models and theories , which then spawn new experiments and models . However , while important ﬁndings were uncovered using this approach , many experiments report contradicting results and / or suggest conclusions that are subsequently invalidated by new experiments [ 3 ] . In our opinion , this limitation relates to insufﬁcient modeling , e . g . , model identiﬁcation , including selecting parameter granularities , model synthesis , like ﬁnding parameter - ized , mathematical expressions of the models , computing the model parameters , and model validation . This work argues that a team’s “sauce” , the ingredients that amplify a team’s capabilities beyond the sum of its members , is the result of the cognitive , emotional , and social interactions between members , including knowledge access , under - standing and extension , and social - emotional changes that these interactions create in the members’ behavior during problem solving . In the related literature , joint action represents the interaction among team members that aim to achieve common goals , intentions , or ground [ 1 , 14 – 16 ] . However , as conﬂicting experimental results suggest , it is difﬁcult to ﬁnd what combinations of cognitive , emotional , and social parameters consistently produce effective team problem solving . From a modeling point of view , it can be argued that the reported inconsistencies , like having a positive [ 17 – 20 ] or a neg - ative impact [ 21 , 22 ] of positive affect on problem solving , point to modeling errors due to various causes , like incorrect parameter identiﬁcation or model synthesis . While interactions between members can be directly observed in real - time using smart electronic devices , including those devised by the authors [ 23 – 27 ] , the nature and the evolution of a team model ( i . e . its “sauce” ) is hidden . Uncovering the hidden model elements only based on the traditional trial - and - error approach to devise new experiments is cumbersome and unreliable . Instead , there should be more effective methods to uncover the observable and hidden contributions of each member’s interactions and behavior to a team , and ultimately to successful team problem solving . The extracted knowledge would enable to create novel ways to form better teams , to analyze team’s behavior and performance , and to offer insight for improving problem solving and interactions in a team . Understanding the secret “sauce” of teams can also help better team learning in large and diverse settings . There are important challenges that distinguish team problem solving in real - world settings from other activities , including experiments in laboratory settings . Laboratory experiments usually control one parameter at a time : the outcomes of a reference group ( control group ) are compared with the outcomes of the experimental group , for which there was an intervention on the studied parameters . Statistical analysis , like ANOVA tests , eliminate any randomness in groups . Then , any observed differences can be assigned to the intervention . The decomposition of complex entanglements between parameters into a sequence of single , independent parameters misses any dependencies between parameters and can be a reason for the observed inconsistencies in experiments . For example , the inﬂuence of any previous activities on a current problem decision is hard to capture , even though ﬁxation ( when only similar outcomes are offered ) and other similar situations are common in real life [ 28 – 30 ] . Also , problem solving can start from different initial states , like from scratch , reusing previous designs [ 31 – 33 ] , etc . , occur in different settings , like in the laboratory , at home , through zoom etc . , and span time intervals much longer than the time intervals reported for laboratory experiments . The dependency of cognitive aspects on time , e . g . , memory [ 34 ] , knowledge representations [ 10 , 35 – 43 ] , and social and emotional parameters is important [ 18 , 34 , 44 , 45 ] . These elements can arguably make traditional experimental methods inefﬁcient and unreliable . Instead , new experimental approaches are needed , so that they can be seamlessly embedded over a long time into real - world problem - solving situations performed in a variety of conditions . This paper proposes a new model describing an individual’s activities in a team during problem solving . Models are created based on the verbal discussions between team members during problem solving . The model captures the multiple mental images ( representations ) created and used by an individual during solving as well as the solving activities that utilize the images . The team model includes the interacting models of the members . The presented model assumes that every team member operates with multiple , individual images of a problem description and related solutions . Images have the following attributes : ( 1 ) They might not include all details at all time instances , however , any degree of detailing of a problem or solution fragment can be explored during problem solving . ( 2 ) While focusing on speciﬁc details , a certain abstract description is created and used for problem solving . ( 3 ) Images might include multiple fragments and ideas repre - sentations , which are not necessarily tight together in a unitary description . ( 4 ) Images are connected with an individual’s knowledge and previous similar experiences , like previously - solved similar exercises . Under these assumptions , problem solving is the process of ﬁlling in the gaps between the images of problem descriptions and solutions using images of so - lution features ( e . g . , fragments , characteristics , constraints ) , input and output features ( i . e . examples ) , and solution goals and sub - goals to be achieved . Features can pertain to different abstraction levels depending on their positioning on the continuum between the images of the problem descriptions and solutions . Hence , in this model , a team’s “sauce” ( deﬁned as the behavior ( dynamics ) of the cognitive , emotional , and social interactions between members over time ) can be seen as the way in which interactions result based on the individual images formed and updated over time during teamwork . For example , there is a matching of the individuals’ images , if there is a consensus in a team about a ﬁnal solution , or there are important differences between the images , if there is disagreement in a team . This paper focuses mainly on how cognitive interactions in a team will likely change the individuals’ images and produce a certain team behavior . Emotional and social interactions are discussed in other work [ 25 – 27 ] . The proposed approach considers that creating a correct solution for which there is an informed consensus of every team member is possible only if 2 each individual’s solution image includes a correct understanding of the complete causality ( e . g . , effects ) of each solution feature . Any causal effects missing from an image indicate a possible error in the solution , as that feature was not fully analyzed and agreed on by the team . Then , the considered cognitive interactions include the design ( e . g . , code ) , high - level solution descriptions , solution details , cues in explanations , solution places to be changed , identiﬁed missing fragments in a solution , suggested changes , errors for certain inputs , inputs and outputs for a certain execution scenario , and data features . Speciﬁc cognitive interactions are the result of activities of the general problem - solving ﬂow , such as creating an explanation of a problem or solution , making analogies , analyzing a solution or solution description , combining new ideas with an existing solution description , generalizing from concrete situations , identifying changes to a solution , localizing where changes are needed , modifying a solution , identifying unhandled situations by a solution , ﬁnding inputs and outputs for speciﬁc errors or missing solution features , and identifying required data processing features . Analyzing the sequence of observed cognitive interactions supports making predictions on the performed solving activities , including ﬁnding design decisions executed with more or without fully understanding their consequences at the team level . This paper presents a novel model and the related methodology to characterize the degree to which cognitive , emotional , and social interactions in a team lead towards correctly solving a problem , while there is an educated consensus among team members about a solution . It is important not only to produce a solution , but also to have the team agree with the solution by understanding and analyzing its features . As different members are likely to have different perspectives , reaching a consensus suggests that the solution withstood the analysis from different points of view . Also , all members reaching a consensus is likely to increase individual learning during problem solving . As an individual’s images for problem descriptions and solutions are unknown , predictions are made for their more likely features based on the produced solutions and communicated ideas , explanations , statements , questions , analysis results , agreements , and so on . Each communicated idea serves a certain purpose in solving . It is the result of a response synthesis activity , i . e . detailing , generalization , trial and error , etc . , and its communication triggers an understanding process within the speciﬁc context and experience of each individual . The methodology uses the type of the observed outputs ( code and communications ) to estimate the nature and characteristics of the performed activities within a general - purpose problem - solving ﬂow . These activities support then making predictions about the images of the individuals . Predictions about the performed problem - solving activities and individual activities can be used to estimate the quality of the solutions , i . e . by describing the analyzed and missed design opportunities , likely errors as well as design issues that are not supported by consensus or which were not fully understood by all members . The paper has the following structure . Section 2 offers an experimental motivation of the work . Section 3 discusses related work . Section 4 presents the methodology used to study the factors that describe team interactions , i . e . those deﬁning a team’s “sauce” . Section 4 describes three types of team problem - solving scenarios . Conclusions end the paper . 2 Motivation The problem - solving space of a problem description is the set of solutions and solution fragments that pertain to the semantic space bordered by the problem description and the implementations , e . g . , C programs , that correctly address the problem description . Then , problem solving identiﬁes ways of bridging the semantic gap between a problem description and implementations , so that ( i ) there is an equivalency between the description and a solution under the assumption that ( ii ) any ambiguous , undeﬁned , or other open - ended aspects of the description are consistently identiﬁed and addressed . Example : A problem descriptions requires reading data from a ﬁle about date , temperature , humidity , and air pressure . Multiple readings can exist for the same date . Each correct value pertains to a predeﬁned range , but values might be corrupt too . The goal is to ﬁnd the dates with the most erroneous data readings . In addition , the description might include a set of test data and the associated correct outputs . They add details that clarify uncertainties about the description . Still , the description might remain uncertain with respect to some issues , like if all readings for the same date occur successively in the ﬁle , or if they are mixed up with the readings for other dates . The team activity during problem solving can be observed over time to characterize the emerging team dynamic during problem solving [ 25 – 27 , 46 ] . As summarized in Figure 1 for an example , team discussions reﬂect the following problem - solving activities and characteristics : 1 . Problem solving can be a mixture of activities , which includes not only ﬁnding ( construction ) the actual solution for 3 a description , but also understanding the description , such as reaching some degree of consensus about the problem requirements and constraints , identifying data that helps problem understanding , and solution construction and validation , and reasoning about solutions and their parts . These activities are not separated in distinct , subsequent phases ( like it is often assumed in academic work ) but are rather mixed - up . 2 . Teamwork can have different starting points ( initial states ) encompassed by the following two extremes : Team members do not understand the problem description to a signiﬁcant degree , therefore no solutions or solution parts are available and team activity starts by focusing on understanding the problem . The opposite extreme occurs when solutions are already devised to some degree by the individuals , hence teamwork focuses on addressing any of the unsolved issues and solution validation by comparing and harmonizing the solutions by different individuals . As explained later in the paper , the team dynamic is very different in the two cases . Moreover , other starting points can exist , positioned between the two extremes . 3 . From a semantic ( meaning ) point of view , the outputs of an individual during team problem solving pertains to three categories : ( i ) Detailing an existing solution fragment , ( ii ) abstracting a solution or solution fragment , and ( iii ) restating an existing fragment . Detailing involves different degrees of added information related to three aspects : ( a ) input data used to devise and explain the fragment , ( b ) conditions set for the solution results , and ( c ) process - ing steps that form a solution . Abstracting refers to creating descriptions at higher - level of abstractions about the following elements : ( a ) conditions of the inputs , ( b ) conditions of the output data , and ( c ) presentation of the solu - tion procedures and principles . Restating includes producing similar input data , output requirements , and solution steps . Detailing pertains to top - down problem - solving process , and abstraction to a bottom - up process . Detailing , abstraction , and restating belong to the semantic continuum between problem descriptions and solutions . 4 . Detailing includes steps on problem description understanding and solution construction with the following fea - tures : decomposition of an existing description into new fragments , connection of a new fragment to the rest of the solution , composition of new fragments with each other , adding new variables , capturing data and causal dependen - cies between variables and fragments , adding new conditions for data and fragments , identiﬁcation of special and general situations for the solutions and fragments , and identiﬁcation of new inputs for relevant execution cases . 5 . Abstracting refers to problem description understanding and solution development through the following actions : combining local fragments into more overall descriptions , generalizing the outputs obtained for speciﬁc data into conditions for solution outputs , and creating higher - level descriptions of a solution or fragment . Example : Figure 1 summarizes the traversal of the problem - solving space as a team attempts to solve the problem . A team of three members was considered . The ﬁgure shows the bottom - up activities in red color the , the top - down steps in blue , and the restating in green . The ﬁgure also indicates how the individual activities form broader problem - solving phases , like solution explanation to validate its correctness , changing the solution idea through restating , trial - and - error to correct errors in the code , changing ( extending ) the solution through reasoning , and restating the solution idea to ﬁnd an error in the code . This example is also discussed in Subsection 4 . 2 . In this example , all members attempted to individually solve the problem before meeting in the team setting . However , none of the solutions was complete and correct . In Figure 1 , the ordering of the performed steps follows the vertical axis from the top to the bottom of the ﬁgure . As each of the members already had some ideas on solving the problem , one member started by describing the role ( purpose ) of each part ( i . e . block ) in the solution , such as loop statements , conditionals , and so on . The discussion of the detailed processing refers to speciﬁc input data and the produced outputs . This step further leads to a description of the high - level reasoning ( idea ) behind the code . To further clarify the idea , the description is restated by referring to a counting process as being the main concept of the solution . The next step details the broad concept by adding the precise idea of using a ﬂag variable to achieve a certain sub - goal of the broad computation . Solution detailing attempts to identify the speciﬁc place where the ﬂag variable should be added . Repeated attempts are made to ﬁnd the correct insertion place . As the team is unable to correctly add the ﬂag variable to their code , the discussion shifts to making an analogy with a previously solved problem . The analogy helps creating a new overall description of the solution concept , followed by another detailing step that suggests the conditions that the correct outputs must meet . Next , based on the stated output conditions , the high - level solution is modiﬁed to include more details . This description is then related to the actual code , such as which modules are expected to complete speciﬁc parts of the overall description . This leads to a new attempt to ﬁnd the C code location that should be modiﬁed to extend the existing code . As illustrated in Figure 1 , problem solving is a complex process , which often does not follow a single predeﬁned sequence of steps . It is unclear at this point what speciﬁc situations and cues trigger a speciﬁc action by a participant , even though 4 R es t a t i ng t h e i d ea Describes the role of each module / block in the solution Identify the places in the code where the flag concept is added Explain data counting as the main idea of the solution processing flow description of the Create a new overall Analogy with a of a related problem previous solution Refer to specific input data to discuss processing Identify conditions for the solution outputs Create a description of the reasoning behind a solution Suggest using a flag to implement certain fragment of the solution Identify the places in the code where the flag concept is added Solutionspace . . . descriptionProblem Semantic gap to be bridged during problem solving Add some details to the high−level overall description Relate the code to the high−level description Select specific places in the code to check the conditions association of inputs bottom−up summarizing as a processing flow bottom−up local detailing , variable adding top−down local detailing , adding code top−down local detailing , adding code restating making an analogy with previous problems and solutions bottom−up summarizing as a processing flow identification of output requirements top−down top−down adding details to high−level description bottom−up associate high−level description to code top−down local detailing , adding code top−down t o va li d a t e s o l u t i on S o l u t i on ex p l a n a t i on t o f i x e rr o r T r i a l − a nd − e rr o r t h r ough r e a s on i ng C h a ng i ng t h e s o l u t i on t h r ough r eas on i ng C h a ng i ng t h e s o l u t i on t o und e r s t a nd e rr o r Figure 1 : Example of problem solving dynamic in a team there are o few empirical observations , like relying on trial - and - error to ﬁnd errors or going back to broad , high - level statements about the solution principle after unsuccessful debugging attempts . It can be argued that problem solving relies on a mixture of structured and ad - hoc sequence of decisions in an attempt to ﬁnd in reasonable time a correct path through the solution space . The gap has an exponential size , and exhaustively exploring all possible code structures , e . g . , through automated program generation , could identify a solution but the required time would be prohibitively large . 3 Related Work The state - of - the - art in problem solving in teams ( or CPS ) has been discussed by a number of classical and recent work in psychology , sociology , and organization research [ 1 – 7 ] . There is a set of distinguishing characteristics of problem solving in teams as compared to other collaborative activities , like learning , decision - making , and judgement [ 3 ] . They include having a shared task , i . e . the problem to be solved , the possibility of individual assessment of the degree to which the solution satisﬁes the problem ( solution quality ) , role differentiation of team members ( including role emergency during problem solving ) , and the interdependency between members depending on their contribution to successful solving [ 3 ] . Problem solving in teams shares a number of advantages with the other collaborative activities , like division of work , multiple sources of information , perspectives and experiences , improved evaluation , and individual simulation by other’s ideas , as well as some limitations , such as inefﬁcient communication , social loaﬁng , false information propagation , con - ﬂicts , and diffusion of responsibility [ 3 ] . It has been suggested that problem solving in teams comprises of two entangled layers , ( i ) the individual layer that includes the emotional and cognitive aspects of each team member , and ( ii ) the team layer , which refers to the social elements . The two layers are discussed next . Individual layer : This layer refers to an individual’s cognition modulated by emotions during problem solving . There are several well - known models about the cognition of problem solving [ 47 , 48 ] . Among these , our work follows the idea that problem solving ﬁnds a path in the problem space from an initial state to the goals of a problem using operators , like evaluation , transformation , and heuristic steps [ 4 , 41 ] . This model supports the characterization of entire sequences of cognitive activities ( e . g . , the problem - solving paths ) , and making prediction on how individual activities are inﬂuenced 5 by cognitive , social , and emotional factors . Problem spaces are described as semantic networks , in which nodes represent concepts and links describe actions or relations among concepts [ 49 ] . Then , problem solving is the activation spreading in small steps through the network [ 41 ] . The linkage of subsequent design decisions has been a major topic , like identifying the rationale or creating concurrent representations [ 41 , 50 ] . Network expansion , like using domain space extension [ 51 ] , supports modeling problem solving of ill - deﬁned problems , which require solutions beyond the space of the currently known solutions . Expanding graph - based knowledge representations offers the beneﬁt of expressing features and relations of concepts , which are analogous to properties and connections of building blocks in engineering design [ 43 , 52 – 54 ] . Identifying the problem space representation that reﬂects the mental ( internal ) representations is not trivial . Cognitive Task Analysis has been devised in an attempt to characterize the cognitive activities during problem solving based on observations and interviews , process tracing , conceptual techniques , and formal models [ 55 , 56 ] . The problem solving activities are often studied through verbalization [ 41 , 57 – 59 ] . For example in [ 41 ] , the sequence of design steps and their argument are presented for the design of a bicycle rack . The steps used in solving math equations is described in [ 59 ] . Even though external solution representations , e . g . , sketches , drawings , code , formulas , proofs , verbalization , etc . and other symbolic representations reﬂect to some degree the internal solution images [ 41 ] , there are also important mismatches between the two [ 40 , 60 ] . Related work mainly focuses on mismatches , e . g . , physical attributes or negation [ 60 ] , but there is a much richer set of features that distinguish a concept from its physical realization that operates in a physical setting . This mismatch can have a signiﬁcant impact on the effectiveness of problem solving , still , cognitive theories have rarely addressed it [ 40 ] . Experiments also show that multiple solution representation are created during problem solving [ 41 , 61 ] . For example , ﬁgural representation express implementation details while conceptual representations refer to the broader goals and requirements . [ 41 ] argues that multiple representations convey different kind of information , help memorizing and clarify ambiguities , support interpretation , describe solution transformation , modiﬁcation and reformulation , and express conﬂicts and other challenges . Studies show that working memory ( WM ) is a central component in explaining problem solving effectiveness [ 62 – 64 ] . As explained in [ 59 ] , “WM is a short - term memory system involved in the control , regulation , and active maintenance of a limited amount of information with immediate relevance to the task at hand . ” A similar deﬁnition is proposed in [ 62 ] . WM capacity ( WMC ) has been shown to be a reliable parameter in discussing other cognitive behaviors , like comprehension and reasoning [ 64 ] . WMC is around 3 - 5 chunks [ 63 , 65 ] . Individual’s WMC are assessed through span tasks , like reading , counting , and operation span [ 57 , 62 , 66 ] . Span tasks require recalling shown letters or words during the problem - solving process , like deciding if a sentence is semantically correct or solving math exercises . Research also focused on the impact of WMC on problem solving under a range affect conditions [ 62 , 63 , 66 ] , including reward [ 67 ] and work pressure [ 59 ] . Experiments show that higher WMC correlates to better problem solving under positive or neutral affect conditions , however , WMC is less important in the case of negative affect situations , as any additional WM capacity is likely used to process negative affects [ 62 , 67 ] . Dopamine and dopamine paths seem to cause the correlation to positive affect [ 67 , 68 ] , moods , and emotions [ 69 ] . Similarly , a high WMC can maintain and manipulate more features related to the problem in low pressure situations [ 59 ] . However , in high pressure situations , individuals with both high or low WMC relied on shortcuts to solve a problem . WMC is important for story telling the elements ( e . g . , ideas , concepts ) essential to conducting a cognitive activity . For example , as Conway explains for paragraph understanding , creating an integrated image ( e . g . , stored in a WM chunk ) can be realized only if one concurrently holds in mind images about the major premise , the main meaning of the previous sentence , and a fact or opinion discussed in the current sentence [ 63 ] . A similar observation was suggested for math problem solving too [ 65 ] . It has been argued that problem - solving effectiveness depends on the nature of the information stored in the limited WM space , such as shallow vs . deep features , distractions , or sensory data [ 63 ] . Guiding attention to certain features , which are then stored in WMC , was suggested to be signiﬁcant in problem solving [ 63 ] . Work also shows that affect has an important role in the cognitive activities in problem solving , like goal setting , decision making , and memory recall [ 22 , 67 , 70 ] . For example , positive affect inﬂuences the balance between ﬂexibility , e . g . , updating WM and switching goals and overcoming ﬁxation [ 28 , 29 , 70 ] , vs . perseverance , i . e . maintaining goals in the presence of distraction , irrelevant answers , and other cues [ 22 ] . This balance is critical in problem solving , as successful solving involves both considering alternatives and pursuing a certain choice . Affect also changes verbal ﬂuency [ 71 ] , helps activating remote associations in memory and producing unusual associations [ 72 ] , inﬂuences the balance between heuristic vs . analytic decision - making [ 73 ] , categorization [ 74 ] , and aids implicit judgments of semantic coherence [ 18 ] . It also inﬂuences social categorization [ 75 ] and job satisfaction [ 19 ] . Overviews of computational models for emotions are offered in [ 76 , 77 ] . 6 ∆ , µ Related experience Mental image selected cues Related experience RMDCP [ bottom − up ] Mental image of problem ∆ , µ Related experience RMDCP [ top − down ] Solution design Related experience ∆ , µ ’ Problem description ’ ’ ’ ∆ , µ RMDCP Mental image of existing solution RMDCP Mental image of expectedbehavior RMDCP Execution of solution [ code ] Solution description [ code ] Solutionanalysis Problem understanding Input from other member Input from other member of desired solution Mental image of needed changes RMDCP RMDCP RMDCP RMDCP RMDCP RMDCP RMDCP Mental image of causality for differences Mental image of observedbehavior Mental image of needed changes in problem description Figure 2 : Conceptual model for problem understanding and solving Team layer : As discussed in Joint Action Theory [ 1 , 14 – 16 ] , interactions coordinate members through synchronization , entrainment , alignment , and convergence [ 78 ] , and depend on the conversational context and the team members’ inten - tions and features [ 79 ] . For example , afﬁliative conversations have different interaction characteristics than argumentative interactions . Abney et al . explain that coordination is a complex process that occurs at different time - scales and hierarchi - cal levels [ 78 ] . A complex system behavior emerges because of explicit and implicit matching at phonetic , phonologic , lexical , syntactic , semantic , and situational levels . However , member coordination goes beyond speech attributes . Com - mon ground knowledge , shared visual information , and beliefs about the other team members inﬂuence postural and gaze coordination [ 80 ] . Affective valuation is also important during interaction [ 14 , 81 ] , such as different interpretations of the external stimuli and distinct expectations for the outputs of problem solving . Members must be committed to participate to the team effort . A detailed overview of related models and work is offered in [ 1 ] . Related models in psychology and sociology propose different scenarios for interactions in a team [ 1 ] . “Visual worlds” , arguably the simplest model , assumes that team members follow an active - passive participant approach , with no changing initiative and little coordination between members [ 82 ] . The message model states that communication is a probabilistic information ﬂow at a certain rate , during which the sender and receiver must employ the same encoding and decoding of the “packets of meaning” represented by words [ 83 ] . Social interactions are less important , as there is no coordination , intention recognition , role taking , or matching between the communicated details and the shared common perspective [ 1 ] . In contrast , social aspects are addressed in the two - stage model that focuses on lexical entrainment , shared perspective , and reuse of syntactic forms . Fowler et al . indicate that parsing and speaking durations , speaking rates , turn durations , response latencies , vocal intensities , and accents depend on coordination [ 84 ] . The interactive alignment model considers members’ perspective adjustment and creation of mental models about other team members [ 85 , 86 ] . Lowe et al . propose an extension to Associative Two - Process ( ATP ) theory to include social cues and affective states [ 14 ] . The model uses temporal difference learning to express expectations and to include social cues . Learning considers the magnitude and omission of rewards as well as the temporal difference between stimulus and learned outcome . The work argues not only for the importance of a member’s intentional behavior towards a goal but also for the need that an agent learns the other’s behavior and then adjusts accordingly . Finally , grounding models emphasize the social , collaborative view , i . e . coordination of meaning , observance of each other , and creation of mental models about others [ 1 , 80 ] . 4 Proposed Modeling Methodology This section discusses the proposed modeling methodology to describe problem understanding and solving in teams . The methodology must capture any team activity ﬂow originated for different starting conditions , like having individually completed solutions , individually devised solution fragments , or no available solutions . Besides the overall methodology , the section presents the ten related activities and the overall modeling algorithm . 7 4 . 1 Modeling Individual Problem Solving Problem descriptions include functional ( processing ) and data requirements , including output values that are expected to result for speciﬁc inputs . Unknowns and ambiguities can be part of a problem description . High - level solution descriptions are mixtures of four kinds of description features : ( a ) a sequence of actions ( e . g . , processing ) , ( b ) a set of goals that must be achieved , ( c ) a set of requirements for the outputs ( i . e . logic conditions that they should meet ) , and ( d ) a set of inputs and corresponding outputs expected for the solutions . It is unclear what parameters inﬂuence the mixture of the four feature types . The purpose of the process is to devise a solution that minimizes the difference between the requirements of the problem description and the features of a devised solution . The model for individual problem solving includes the multiple images used in solving ( e . g . , the work memory ) , the nature of knowledge representation ( i . e . long - term memory ) , the individual’s goals and expectation about being able to solve the problem and the resulting outcomes , and the sequence of activities over time as part of problem solving . Figure 2 illustrates the proposed conceptual model for an individual’s problem understanding and solving activities . The ﬂow considers two mental images , an image of the problem description and one of the solution . Both images can be mixtures of the above features ( a ) - ( d ) . The problem image results from the problem understanding activity . The solution image is created by solution analysis . Changes of the images are described by the pair ∆ ′ , µ ′ , where the ﬁrst term indicates the change and the second represents the meaning of the change . The changes of the solution images are shown as ∆ , µ . A solution is successfully created when ∆ , µ ≈ ∆ ′ , µ ′ ≈ 0 . The difference between the two images is established by RMDCP ( Recall - Match - Difference - Combine - Predict ) process , which includes four steps : recalling the two images from the memory , matching the images to relate their similar parts , ﬁnd the difference of the two , and predicting the meaning of the difference in the context of the common matched parts . A bottom - up RMDCP process starting from the image of an existing solution identiﬁes the difference ∆ ′ , µ ′ of the problem image , and a top - down RMDCP process starting from the current image of the problem ﬁnds the difference ∆ , µ of the solution image . RMDCP process is executed in the context of the related experience ( i . e . existing knowledge ) of the member . A main feature of the model in Figure 2 is the using of two images connected by the two RMDCPs . Having two images offers the following beneﬁts : ( i ) The image of the problem can serve as a reference to set goals for problem solving . It has invariant requirements ( even though ambiguities and unspeciﬁed elements can be included ) . Moreover , the image should be abstract enough to support exploration during problem solving . ( ii ) The matching and difference computation between the two images serves to guide the decision making during problem solving , such as by ∆ , µ ≈ ∆ ′ , µ ′ ≈ 0 , or by maximizing the distance ∆ , µ ≈ ∆ ′ , µ ′ [ 27 ] . ( iii ) Matching , difference , and prediction between the two images supports decomposing goals into sub - goals to decide what should be solved next , and also to predict causality , such as how different solution parts contribute to the achieving the problem requirements . Goal decomposition and causality understanding support setting priorities among sub - goals and causal relations , hence guiding decision making during solving process . It also allows to deﬁne the difference between the expected and the observed effect of a solution fragment . Finally , the two RMDCPs can express the following two situations : ( a ) If they continuously relate the two images then they mimic the subconscious activity that ﬁnally creates the feeling that something is right or not , or possibly express sudden insight . ( b ) They can represent the conscious activity when a member directs his / her attention on ﬁnding the differences between the current solution and problem requirements . The description of the resulting differences ∆ , µ of the top - down RMDCP ( which relate the solution to the problem requirements ) becomes the current sub - goal of solution design . The solution is then executed . The solution and the execution behavior ( like the outputs generated for speciﬁc inputs ) are inputs to the solution analysis activity . Solution analysis determines differences ∆ , µ between the expected and observed execution behavior . The differences represent missing or incorrect parts of the solution . The differences modify the mental images of the solution . The analysis can involve reasoning based on the code , such as mentally executing the code . Alternatively , analysis can be based on the data outputs obtained by executing the code for speciﬁc data inputs . Reasoning attempts to identify the required change ∆ , µ to the solution image by following backwards the causal sequence that created the unwanted result . Data - based analysis obtains changes ∆ , µ by generalizing the input - output behavior as a rule that creates this behavior , and then combining it with the solution image . Hence , the mental images of a solution , solution design and execution , and analysis form a bottom - up ﬂow that can involve backwards reasoning about the processing steps along the solution’s causal relations , and using the differences between the expected and observed inputs and outputs to create the processing rules of the solution . Figure 3 depicts the proposed model to describe problem understanding and solving in a team . A high - level solution 8 Generalize New processing need Place Place I d e n t i f i e d c h a ng e High−level solution description ( idea ) fragments Solution code Analyze code for solution Problem description Set of cues Previous problems Problem description ( high−level comparison ) Make analogy Create description that describe the Identify inputs − outputs missing processing codeMissing Errors for certain inputs Inputs Outputs incomplete code Idenitified Input from other member Input from other member Compare problem description and description of solution idea Identify the situations that are not addressed by the current code Modify code for solution Identify required change Localize detailing of solution description Combine change with current description Identify characteristics Combine with description Data features detailedNew , more description Figure 3 : Problem understanding and solving dynamics across the semantic space description of the main idea on how to solve the problem is initially created based on a set of cues selected from the problem description . Alternatively , the process can iterate to reﬁne the solution idea by comparing it with the problem description to expose additional cues that are incorporated into the idea . Another path to create the solution idea is based on analogy with previously solved problems . After relating the new problem description with previously solved , similar problems , an idea for solving the problem is found . This idea is changed to incorporate cues about the differences between the current and previous problems . The relating to previous problems can iterate to identify new cues . A new , more detailed description of the solution is devised starting from the high - level solution idea . The iterative detailing process includes three activities , as shown in Figure 3 , ( i ) localizing the place where detailing is performed , ( ii ) identifying the change that is performed on the higher - level description , and ( iii ) combining the change with the current solution . This process continues until the detailing changes can be transposed into code of the solution . After creating or modifying the code , code analysis identiﬁes errors in the code , such as the problem requirements that are not covered or incorrectly realized . It includes identifying the problem requirements that are not covered by the present code and the inputs - outputs for these code fragments . This analysis can continue with the sequence that starts with localizing the corresponding solution detailing ( in Figure 3 ) or identifying characteristics for the inputs and outputs that could address the errors , like the expected conditions of the outputs . The identiﬁed data features are then combined with the higher - level description . The data features could also lead to changing the analogies used in problem solving . 4 . 2 Modeling Team Behavior There can be a large variety of problem - solving ﬂows , e . g . , activity sequences , but ﬂows can be grouped into three main situations depending on the initial status of a team : ( a ) when solutions were individually developed before the team activity started , ( b ) when there was no available solution before the beginning of teamwork , and ( c ) when there were individually - developed solution fragments before the team started to work together , but these fragments did not form a complete solution . The three cases were the only main situations observed in our experiments , even though other situations showed variations of the three cases . The three cases are discussed next followed by details about the team problem - solving model . ( a ) Solutions were individually developed before team activity starts : The main goal of the team activity in this case is to integrate the individual solutions into an improved , joint solution for the conjointly accepted problem description , including addressing any misunderstandigs , inefﬁciencies , and errors that the initial solutions might have . Teamwork includes activities to explain the solutions to the other members , understand someone else’s solution , analyze , and compare different solutions to understand their advantages and limitations , combine ideas and fragments of ideas , understand the 9 improvements of the joint solutions compared to the individual solutions , and relate the individual and joint solutions to the problem description . These activities might have to be performed in a context with little incentive to do them , as solutions already exist for the problem . In summary , as shown in Figure 3 , the ﬂow emphasizes bottom - up activities , like explaining the solutions to others , understanding the solutions of others , comparing solutions to understand their pros and cons , and combining useful solution features . ( b ) There was no available solution before the beginning of teamwork : The main goal of the team activity is to jointly clarify any errors , unknowns , and ambiguities by individuals about the problem description and solution ideas , to ﬁgure out what these are for each individual , and to stitch together the individual contributions into a correct high - level solution idea and then to correctly detail it until creating the implementation code . Hence , problem solving involves problem decomposition into sub - goals and sub - problems , so that they can be tackled by individuals . It is important to understand the contributions and limits of one’s problem understandingand solution , e . g . , the uncovered parts of a problem description and the missing elements in a solution idea as compared to the problem description , and how someone else’s idea can be combined to advance towards building a complete and correct solution . Coming - up with an overall solution idea based on the individual contributions is also part of the process . Individuals learn new information from others and must integrate it with their own in an attempt to create a complete , higher - level solution idea . Individuals’ incentives to solve the problems are high as there is no solution idea available . The problem - solving ﬂow in Figure 3 emphasizes top - down activities , like decomposing into sub - goals and sub - problems , adjusting them to the knowledge of the participants , and identifying the missing solution fragments that can be solved by individuals . ( c ) There were individually developed solution fragments before the team starts to work together , but these fragments did not form a complete solution : The main role is to identify the missing solution parts , and to clarify ambiguities and unknowns in the problem description and to correct errors of the individual , partial solutions . Teamwork is based on explaining solution fragments and understanding the explanations and code . Identifying the missing parts requires localizing problem solving by detailing the existing solutions , identifying the required changes , and combining the changes with the existing solutions . Correcting errors must ﬁnd their causes through analysis . As high - level descriptions of solutions are likely to exist , problem decomposition into sub - goals and sub - problems is less important than in Case ( b ) . Incentives to solve the problems are moderately high . The ﬂow in Figure 3 is a mixture of bottom - up and top - down activities guided by identiﬁed missing parts , which become sub - goals for solving . Problem solving in a team involves a sequence of cognitive activities performed under individual incentives that are inﬂuenced by the team setting . The cognitive activities include an individual’s ( i ) images used in problem solving ( e . g . , WM ) , ( ii ) the knowledge representations ( i . e . long - term memory ) , ( iii ) the meaning associated to concepts and other outcomes , and ( iv ) the decision making that decides the problem - solving steps over time . ( v ) Individual expectations modulate the cognitive activities . The team environment includes ( vi ) the level of agreement between team members’ images , knowledge representations , and their meanings . It also refers to ( vii ) a member’s ﬂexibility to address the needs of other members as well as ( viii ) the expectation about his / her participation to the team’s activity . A team’s effectiveness in the three problem - solving scenarios depends on the following factors speciﬁc to each activity : 1 . Problem understanding : The factors describe the degree to which the requirements of the problem description and their associated cues are correctly and completely considered by a team , and the consistency of the formed mental images of each member ( Figure 2 ) . The factors include the cues from the problem description that are considered during the development of the high - level solution descriptions ( e . g . , the completeness of the cue set , cue ordering based on their importance in solving the problem , forgotten cues ) , the way in which the cues in higher - level descriptions are further tackled during detailing , and the nature of used analogies , including correct and incorrect associations between previous and current problems . The factors also address the degree to which team members agree on the way in which the cues are selected , interpreted , and used to devise the solution ideas across levels of abstraction , including the levels of agreement and disagreement and the importance assigned to cues ( e . g . , attention ) . Besides , it presents how considering some cues further inﬂuences the inclusion of new cues and cues not in the problem description . Other factors refer to participation , like adaptively raising questions about problem requirements and giving responses , and ﬂexibility in considering alternative interpretations of the requirements . 2 . Solution understanding : Similarly to problem understanding , it refers to the degree to which a solution description is correctly and completely understood by the team members , and the consistency of the related mental images formed by the team members , like the mental images of the desired and existing solutions ( Figure 2 ) . Note that the mental images of the desired and existing solutions might only partially match , as inconsistencies can occur 10 during encoding in a programming language . Multiple solution descriptions can exist at various abstraction levels . The factors include the degree of understanding of the various solution facets , like the processing ﬂows and their causal inﬂuences , the conditions controlling the ﬂow , the handling of special situations , the connections between the higher - level and more detailed descriptions , such as the way in which higher - level parts ( including analogies with similar exercises ) are realized by lower - level constructs , and the opposite relation between more detailed and more abstract descriptions during abstraction . It also includes the degree to which the individual understanding of the different solution parts is similar or differ . Participation represents a member’s engagement in creating a solution , even when the existing solution is not fully understood , as it might have been developed by others . Flexibility describes an individual’s willingness to pursue other solution ideas than his / her own . 3 . Problem explanation : The factors relate to a team member’s availability and capability to restate the requirements of a problem in response and to satisfy other members’ needs , like their questions , comments , and doubts . Ex - planations include alternatives of stating the requirements , logic conditions of the results , and expected outputs for inputs . They can refer to unspeciﬁed or ambiguous requirements too . Participation is important , including the availability to adjust explanations depending on expressed or implied needs . Flexibility describes the adjustment of the responses about the problem requirements depending on the speciﬁc needs . 4 . Solution explanation : The factors refer to a team member’s availability and capability to describe the solution ideas at different levels of detailing , including any level between the high - level and code level , depending on the degree to which the explanations match the other members’ solution understanding needs . They include the variety to which different kinds of descriptions are used at various levels of abstraction , like sequences of processing steps , required conditions of the outputs , and relevant inputs and expected outputs . Participation refers to the availability to offer and adjust solution explanations depending on expressed or implied needs . Flexibility describes explanation adjustment based on the needs . 5 . Comparison of problem and solution descriptions : As shown in Figure 2 , it includes the RMDCPs between the mental images of the problem and the desired and expected solutions . The factors include the nature and degree of recall from memory of the features of an image due to the features of the other image , the degree of correct and com - plete matching of the features of the two mental images , the speciﬁcs of the identiﬁcation of the differences between the two images , the way in which the found differences are integrated with images of previous , similar problems , and the characteristics of the predictions made after integration . The object of participation can be extremely broad , covering all features of a problem description , the high - level and the detailed solutions . Flexibility refers to the possible interpretations of the comparison results , including the importance of similarities and differences . 6 . Solution analysis to understand its pros and cons : Similarly to the previous item , the factors refers to the RMDCPs between the mental images of the expected behavior of a solution , the image of the observed behavior , and the image of the causality for the difference between the two ( Figure 2 ) . The factors include the correctness and completeness of the expected execution traces , output properties , and input - output values , as well as the completeness of the traces , properties , and values of the observed behavior . The correctness , precision , and completeness to which the differences are related to the desired and existing solution images are additional factors too . Participation can be broad , especially to compare the expected and observed behavior . Flexibility is reduced , as the required input - output behavior is ﬁxed by the problem description . The causality of the differences is also ﬁxed by the nature of the solution , even though completely understanding the causality might be hard for complex solutions . Hence , ﬂexibility can include a participant’s willingness to accept a presented causality explanation , even if the explanation is not fully understood . 7 . Identiﬁcation of the missing solution fragments : The features refer to the process of decomposing the problem requirements by the RMDCPs between the mental images of the problem description , the desired solutions and existing solutions ( Figure 2 ) . The features describe missing processing , sub - goals and requirements for the missing parts , and input - outputs that should be produced by adding the fragments . They also refer to the completeness , correctness , and the degree of details of the missing parts and their interactions with the parts of an existing solution . Participation includes not only sub - goal and missing fragment identiﬁcation but also analyzing that they reﬂect well the current solution needs . 8 . Identiﬁcation of the required changes : The corresponding features relate reasoning to ﬁnd how to address the differences between the images of the desired solutions and existing solutions ( Figure 2 ) . The RMDCPs predict the outcomes of the differences , and this insight is used to formulate hypotheses about the changes that would address the differences , including the necessary detailing of a speciﬁc solution part and the abstraction of a part 11 ? Additionaldetails Additionaldetails Additionaldetails Description features Additionaldetails Description features High−level solution description I2 : Add up all numbers and see if larger I3 : Brute−force , add−up all combinations I4 : A lot of loops I5 : Brute−force , take length of entire and check sum I7 : Shift left I9 : Check length I10 : Subtract length I11 : Smack in the middle I12 : Length is 4 , index must change I13 : Change a lot of things I15 : That would work . A lot of brute force I16 : Bubble sort , find largest sum I17 : Bubble sort might work [ Solution explanation ] [ Solution explanation ] [ Solution explanation ] [ Analyze solution ] [ Analyze solution ] [ Analyze solution ] [ Analyze solution ] [ Solution explanation ] I6 : Consider length minus 1 [ Identify required change ] [ Identify required change ] [ Identify required change ] [ Identify required change ] [ Analyze solution ] [ Identify required change ] [ Solution explanation ] [ Identify required change ] [ Identify required change ] I1 : Compare to find a larger sum requirementsSolution Solution requirements S e t o f i n i t i a l i d eas I8 : Check how many combinations I14 : Consider edge , the other side Solution requirements Solution requirements missing fragment ] [ Analyze solution / identify [ Analyze solution / identify missing fragment ] I18 : Like truth tables , each combination in a row , add them up I19 : Array has at most 30 values . High−level solution A lot of brute force . 360 loops . description High−level solution description High−level solution description High−level solution description High−level solution description Description features Description features Additionaldetails Figure 4 : Team discussions during problem solving into a higher - level description . The step identiﬁes the places ( parts ) of an existing solution that must be changed to address the new sub - goals , missing parts , and required modiﬁcations ( Figure 3 ) . Besides , the features describe the degree to which the changes are based on analysis results , like the causality of the differences between the behaviors of the desired and existing solutions , including reasoning , unaddressed situations , and unwanted input - output values . Participation refers to formulating the changes , but also to understanding the correctness of the changes . Flexibility refers to the willingness to accept the change suggestions of others . 9 . Combining the identiﬁed changes with the current solution : The features refer to combining the found changes with the images of desired and existing solutions , and possibly with the image of the problem requirements too , e . g . , when ambiguities and unknowns of the requirements are addressed ( Figure 2 ) . The meaning of the combination is inferred . The features consider the degree to which the behavior of the changes ( e . g . , changes in processing , and data values and properties ) is combined with the behavior of the rest of the solution ( Figure 3 ) and the degree to which the combination is consistent across the different mental images ( Figure 2 ) . Participation to identify all aspects of a combination is important , like the impact on all related variables and processings . Flexibility refers to the degree of acceptance of combination alternatives different than the one proposed by a member . 10 . Flow of the problem solving activities : Features describe the trace towards devising a solution , e . g . , a working program . The ﬂow of activities in Figures 2 and 3 describe how parameters about WM , LTM , participation , and engagement end - up relating the current and previous activities , such as having a sequence of solution detailing activities or switching from solution detailing to analysis . Features present how cues in previous answers , and social and emotional interaction inﬂuences the advancement towards the ﬁnal solution , the breadth and depth of the explored solution space , and the overlapping of the solution ideas of the individuals . Example : Figure 4 summarizes a sample of team discussions for a situation in which there were individually developed solution fragments before teamwork commenced , but the fragments did not form a complete solution ( Case ( c ) in Sec - tion 4 . 2 ) . The tackled problem required the ﬁnding of the contiguous sub - array with the largest sum in an existing array with the maximum length of thirty values . The ﬁgure shows the inputs produced during problem solving ( labeled with letter I ) , their role in problem solving , and the related activity performed by a team member . 12 all verb : I2 : I3 : what : bubble−sort property : add−upverb : brute−force who : verb : combine who : what : verb : take who : length goal : who : sum checkverb : who : entire I16 : find property : property : I5 : verb : find output : verb : compare output : verb : compare who : numbers property : all output : property : who : sum property : largest largest I1 : verb : compare findverb : sum larger output : goal : verb : who : numbers add−up goal : all verb : see output : property : larger X X X All : X X X Figure 5 : Meanings of the descriptions of the alternative high - level solutions As each team member individually devised fragments of the overall solution , teamwork started with solution explanation by the members ( inputs I 1 - I 3 ) . All were high - level descriptions of an envisioned solution ( mental image of the desired solution in Figure 2 ) . Note that input I 1 was part of the dialog while the team was still discussing the problem description to clarify some doubts ( e . g . , problem understanding ) , hence the solving activities were intermingled and not well separated in successive phases . Idea I 4 is an analysis of the previous description ( idea I 3 ) to communicate a feature of the idea , such as having many loops to implement the idea ( i . e . mental image of expected behavior and solution analysis to ﬁnd pros and cons ) . Idea I 5 is another high - level description ( e . g . , mental image of desired solution ) , which , as explained in the next exercise , has a semantic relatedness to the previous inputs I 1 - I 3 . Input I 6 brings additional details by identifying required changes to the description . However , there is a degree of uncertainty to which of the ideas the detailing applies best , e . g . , clarifying more the fragment all combinations of idea I 3 or referring to length of entire in idea I 5 . Also , the speciﬁc set words to which it refers is unclear . The uncertainty of the connection was shown with dashed arrows in the ﬁgure . Idea I 7 restates the meaning of the previous idea I 6 by describing one way of implementing the requirement . However , it does not clarify any of the unknowns of idea I 6 . Input I 8 introduces additional ambiguities . Besides the unknown , previous ideas to which it connects , like ideas I 3 or I 5 , its role can be ambiguous too , as it can indicate a concern to be addressed through analysis or identify a missing fragment to be addressed by subsequent solving steps . Similar unknowns exist for idea I 9 too . Idea I 10 indicates a required change to the description to add more details ( mental image of needed changes in Figure 2 ) . This step clariﬁes that the previous idea I 9 represents a missing fragment of the solution and not an analysis feature , as it could result from interpreting the idea in isolation . Idea I 11 presents another required change of the description , but it is unclear if it relates to idea I 5 or I 9 . Idea I 12 adds a new change related to idea I 9 ( mental images of expected behavior and needed change ) , thus reinforcing that the latter is a required change too . Idea I 13 is an analysis of the discussed solution , but it is unknown to which part of the solution it connects to . Idea I 14 introduces another required change in relation to idea I 5 . Idea I 15 is an analysis of the high - level idea I 5 as suggested by the word brute force , which designates the meaning of idea I 5 . The problem solving in Figure 4 continues with idea I 16 , which proposes a different solving approach than ideas I 1 − I 3 and I 5 . It relies on using an analogy ( e . g . , bubble sort ) with a previous exercise . Input I 17 is an analysis of the previous idea . Input I 18 introduces needed changes to the solution in I 16 . Finally , input I 19 is an analysis of the detailing introduced by input I 18 . Discussions during problem solving mainly focused on aspects related to the mental images of the desired solutions , expected behavior and needed changes , and less about the images of the existing solution , observed behavior , causality of differences between expected and observed behaviors , problem description and needed changes in the problem description . Participation mainly was on adding details to the desired solution and stating some of its cons , but these details were not integrated with each other or with rest of the solution . There was little focus on discussing the missing parts , as there seems to be little attempt to connect the desired solution to the problem description . Without reference to the existing solution and its observed behavior , some ideas ( like using bubble sort , I I 6 , or the additions through I 11 , I 12 and I 18 ) are hard to assess about their usefulness . Participation could have been increased by focusing more on the observed behavior and understanding the causality of the differences between the expected and observed behaviors . Regarding ﬂexibility , the team considered two high - level solution alternatives , I 5 and I 16 , but it is unclear the degree to which they shaped the individual solution contributions . Encouraging to create complete solutions along different high - level ideas would likely give more insight about the individual ﬂexibility . The inputs to the problem solving process pertain to two orthogonal dimensions : the solution space spanned by the high - level descriptions , i . e . the breadth of ideas described by inputs I 1 , I 2 , I 3 , I 5 , and I 16 , and the solution space described by the details added to the high - level descriptions , such as the speciﬁcation in depth through identiﬁcation of missing fragments and required changes . The next example discusses the idea breadth for this team problem - solving example . 13 I5 : verb : take who : length who : entire goal : X verb : check who : sum I8 : verb : check combinationwho : how many who : I9 : verb : check I10 : verb : subtract who : length who : length I11 : verb : smack where : middle I12 : verb : is output : 4 who : length I14 : who : edge where : side property : other verb : consider I6 : verb : consider Xwho : output : X verb : minus who : length who : one verb : shift where : left I7 : verb : has arraywhere : where : left property : all where : right property : all indexwho : indexwho : how : X verb : isolate output : X verb : Suggested : who : subarray property : all goal : X verb : check who : sum who : subarray take ( b ) ( a ) missing fragment from the team solution Figure 6 : ( a ) Complete solution and ( b ) team solution after detailing steps Example : Figure 5 summarizes the meanings of the ﬁve descriptions of the high - level solution ideas produced by the team . Each description was expressed by indicating the verb ( e . g . , actions ) , the object of the action ( i . e . who ) , the associated goals and outputs , and any related properties of the nouns . In addition , idea I 3 includes a noun ( e . g . , brute - force ) describing an identity ( i . e . what ) . The relatedness of the descriptions can be characterized by the maximum degree of matching between verbs and nouns of similar constructs , like what , where , who , goals , outputs , etc . Some of the components were missing in the inputs , and were marked with letter X , like the output component of input I 2 . Colored arrows show the matched words in different inputs . For example , the blue arrows show the matching of word sum in input I 1 and word add - up in input I 2 and that of word larger in the two inputs . The ﬁgure illustrates the matchings between consecutive descriptions , even though similar matching can be attempted between any two inputs I i and I j . The matching of descriptions I 1 and I 2 shows that the parts connected through blue arrows express the same meaning in two different structural forms : description I 1 combines two actions ( verb ﬁnd followed by verb sum ) to create an output , and description I 2 uses a sequence of two actions , in which the second action ( see ) is the goal of the ﬁrst action ( add - up ) . In addition , verb compare in idea I 1 and sub - structure all numbers in idea I 2 are unmatched . The matching of ideas I 2 and I 3 shows the similarity due to action add - up in both ideas , as well as the semantic relatedness between fragment all numbers in idea I 2 and sub - structure all combine ( combinations ) in idea I 3 . Note that the two are not semantically equivalent , as idea I 3 introduces an additional action through verb combine , thus it is unmatched in idea I 2 . Idea I 3 refers to brute force to introduce an analogy with similar problems and a way to create the context in which the idea is presented . The matching between ideas I 3 and I 5 is similar to the matching of ideas I 1 and I 2 , as ideas I 1 and I 5 have similar structures as do ideas I 2 and I 3 . Ideas I 1 , I 2 , and I 5 have similar structures that express the goal of an action though a verb . Moreover , the semantics of the sub - structure all numbers in idea I 2 is similar to the sub - structure entire length in idea I 5 and all in idea I 3 . Finally , the matching of ideas I 5 and I 16 includes the words connected through red arrows , while similar to idea I 3 , bubble sort introduces an analogy with previous solutions . Still , the strict meaning of ideas I 5 and I 16 is different , as word largest is unmatched in idea I 5 . Figure 5 depicts labeled with All the high - level description that includes all sub - fragments of the ﬁve ideas . As shown in Figure 2 , detailing high - level ideas used RMDCP steps between mental images to identify differences be - tween desired and existing solution images , identify the details to be added , combine the changes with the current solution , and predict expected outcomes , like pros / cons of the change and comparison to related solutions , including analogies with previously solved problems . The added details are required properties of the variables , requirements of a certain part of the solution , and computations to implement these requirements . They are localized , as they did not change the image of the overall solution idea . It is possible that the meaning of the original and detailed descriptions were not the same , like when new data properties or requirements were added . The added properties and requirements acted as a ﬁlter to eliminate options that were not part of a correct solution , an observation that can be used to support the correctness of detailing . From this perspective , a high - level description is like a template ( thread ) along which detailing is performed , but without changing the template . Example : Figure 6 ( b ) shows the detailing of the high - level idea I 5 in Figure 5 . Figure 6 ( a ) presents a correct solution of the problem . Idea I 6 adds details to the fragment entire length of idea I 5 . Ideas I 5 and I 6 are semantically not equivalent , 14 as input I 6 describes a changing of variable length . Even though idea I 6 is not a correct detailing of how variable length should be handled ( as shown in Figure 6 ( a ) ) , it is a step forward in the solving process , as it correctly identiﬁes a missing solution part . Input I 7 is a semantically equivalent restating of idea I 6 , but establishing the equivalence is based on observing the equivalence of executing the two operations , minus one and shift left ( assuming that shifting is over one position of the array ) . Idea I 8 also refers to fragment entire length of input I 5 or to fragment length minus 1 of idea I 6 . Moreover , it can represent an analysis of the solution , or the identiﬁcation of a missing solution fragment by stating a requirement , like to count the possible combinations of sub - arrays of the overall array . The addition to inspect all sub - arrays is a correct step towards solving the problem ( see Figure 6 ( a ) ) , however , the action ( i . e . verb count ) is incorrect . Similarly , input I 9 can relate to ideas I 5 or I 8 , and describe an analysis or a missing fragment . Idea I 10 restates a fragment of idea I 6 , and deﬁnes idea I 9 as having the role to identify a missing solution fragment . Input I 11 is ambiguous : its action ( e . g . , smack ) is undeﬁned with respect to its object ( who ) and the previous idea it relates to . Input I 12 adds a required change related to noun length of input I 9 . Input I 14 introduces a required change that relates to input I 5 , either its sub - structure entire length or its action check . Figure 6 ( a ) indicates the solution fragment that is missing from the solution devised by the team . In conclusion , these examples show that the team activity mainly focused on creating and elaborating the mental images of the desired solutions and their expected behavior . Changes were mainly based on matching localized solution fragments , and less on global solution analysis , comparison between the expected and observed behaviors , and matching the observed behavior to the problem requirements . These are possible reasons why the team could not correctly solve the exercise . 5 Case Studies This section presents case studies for each of the three problem - solving situations depending on a team’s status before starting teamwork . 5 . 1 Individually devised solutions existed before starting teamwork All team members devised a working solution before meeting in the team setting . As mentioned in Subsection 4 . 2 , the purpose of teamwork should have been to verify the correctness of the solutions with respect to the problem requirements , and to compare the different solution ideas with respect to their pros and cons . An overall observation is that all team discussions were signiﬁcantly shorter than for the next two problem - solving situations . While all members participated to discussions , the depth of the discussions ( e . g . , the precision of the expressed ideas ) was lower , with fewer and less connected follow - up comments . It is likely that there was less motivation to participate to teamwork as all members already had their own solution , which they assumed to be likely correct . Members usually offered high - level descriptions of their solutions . Descriptions were structured along the processing sequence of a program . Examples based on certain inputs were sometimes used to clarify some steps . However , while the processing steps were individually presented , there was no discussion of how the steps relate to each other , hence often there was no description of the overall solution idea containing the main processing ﬂow of the input data . Subsequent comments by other members were mostly broad and simple , like observing the similarity with previous exercises , discussions about code length and simplicity ( which does not require understanding the solution ) , and certain punctual elements of the solutions . There were few instances in which a question was asked about the code , and the subsequent answers improved the solution . More often , the previous ideas were repeated , which shows little ﬂexibility in understanding the questions . When more detailed descriptions were offered , like comprehensive presentations of the code and variables with reference to certain input examples and correct results , it is likely that keeping track of the offered information was hard for the others . Discussion : The analysis of team problem solving showed that team members had few incentives to spend time on teamwork , as they already solved individually the problem . With respect to Figure 2 , there was little interest in performing RMDCPs to form mental images about needed changes , causality of differences , needed changes in problem description , expected behavior , and observed behavior . Teams spent little time to verify the correctness of their solutions with respect to the problem descriptions and to compare the pros and cons of their programs . With respect to Figure 3 , interaction was less on identifying situations that are not addressed by the current code , identifying inputs - outputs that describe missing processing , comparing problem descriptions and solution ideas , identifying data characteristics , generalizing , and combining with description . There was little ﬂexibility to adjust to the other members’ questions . 15 Solution features acceptable readings . If it’s correct than plus plus , otherwise forget about it . And compare each data point to it , and depending on whether 1 or 2 has more data points , then that is your answer . I9 : For batch 1 , I would create a new variable that would record the number of I1 : I did not know how to do it . How do you store the entire line as data ? there , and just toss it , record it batch to batch . I2 : You can fscanf from the input file a bunch of text that you know is gone be I3 : I know . That’s what I did . I4 : But when I run it , it doesn’t do anything . It just quits . I5 : I showed you mine . When it executes , it just prints this out . I6 : You are not looping through the whole text . You are just scanning . I8 : Like the algorithm for the whole thing ? I10 : How do you store the parameters for that line ? I11 : You mean for each individual line ? I12 : Use a set of variables , use an array that has the most acceptable parameters , as you look through them , just replace what is in there in the array . I13 : I do not understand . I14 : Did I close the file ? I15 : It might be the fact that I have in a loop . I16 : I know . There were no curly brackets after the while . I17 : The code loops at the first line . I18 : The code is running into the problem of scanning each line . I19 : Add backslash n to scanf . I20 : Add system pause . I21 : Comment lines 8−17 . I22 : Try line 24 . I23 : Try commenting out 8 − 12 . High−level solution description I7 : I don’t know how to store each line , like its own Google data . [ Analyze solution ; Identify missing fragment ] Additional details [ Solution explanation ] Agreement [ Solution understanding ] [ Analyze solution ] Solution features Solution features [ Analyze solution ] [ Solution understanding / identify missing fragment ] [ Identify missing fragment ] Additional details Additional details Additional details High−level solution description [ Solution explanation ] [ Identify missing fragment ] Additional details Additional details [ Solution explanation ] High−level solution description Additional details Additional details [ Solution explanation ] Additional details Additional details Solution features Additional details Additional details Additional details Additional details Additional details [ Analyze solution ] [ Analyze solution ] [ Analyze solution ] [ Identified required changes ] [ Identified required changes ] [ Identified required changes ] [ Identified required changes ] [ Identified required changes ] [ Identified required changes ] [ Identified required changes ] Additional details Additional details Figure 7 : Team problem solving dialog starting from individual attempts 5 . 2 Using individually devised fragments to complete a problem solution Figure 7 presents discussions during team problem solving for the case in which members attempted to individually solve the problem before meeting in a team setting . Each of the members produced a partial but incomplete solution . In addition to missing fragments , solutions also included errors . The exercise required to “ﬁnd and display the batch with the most lines with acceptable parameters , and the batch that has the most lines with unacceptable parameters . Acceptable ranges of parameters for an acceptable seal were as follows : temperature : 150 - 170 C , pressure : 60 - 70 psi , and dwell time : 2 - 2 . 5 s . A data ﬁle named suture . txt contains information about batches . Each line contains the batch number , temperature , pressure and dwell time . Multiple lines can have the same batch number but all lines for the same batch are grouped together” [ 87 ] . The following discussion refers to the problem solving ﬂow in Figure 3 . The team problem - solving part expressed by the dialog in Figure 7 starts with input I 1 that states a missing ( local ) fragment from one of the individual solutions . This fragment was found after analyzing the solution and is expressed through a high - level description . The stated missing fragment becomes a sub - goal in problem solving . This sub - goal had to be then addressed in the context of the individual solution . Answer I 2 by another team member does not address the posed sub - goal , but instead explains the entire solution . Details are added to the suggested sequence of steps , like using the C function fscanf together with some more concrete steps , such as separately handling each batch and features of the input data . It is unclear the degree to which acknowledgment I 3 is true considering that response I 2 did not address question I 1 . Input I 4 offers a speciﬁc feature of the solution , e . g . , its execution characteristics found after analyzing the solution . Input I 5 attempts to compare the features of the discussed solution to the features of the solution by another member by explaining that it produces another output . Input I 6 offered by another team member ( not the solution author ) solves the error mentioned in input I 5 . Based on the analysis and understanding of a local part of the code of the solution , the member identiﬁed the missing fragment . In addition , the expected purpose of the missing fragment is contrasted to the actual role of the existing code . Hence , input I 6 ( highlighted in yellow ) is the conclusion of addressing one of the sub - goals , as it ﬁxes one of the errors in the individual solutions . Inputs I 7 − I 13 refocus team problem solving on the initial question I 1 about the missing fragment in one of the solutions . 16 Note that explanation I 7 is incorrect , as the stated details ( “like its own Google data” ) are not addressing the problem requirements . Still , the other members correctly understood the purpose of the missing fragment . Question I 8 and the subsequent answer I 9 ( by the same member that offered input I 2 too ) do not answer again the actual question but offer a more detailed explanation of the solution ( than explanation I 2 ) . The repeated semantic gap between the question and answers suggests that the discussion is slightly unfocused between the two members . Even though more detailed than description I 2 , explanation I 9 is a mixture of description styles , e . g . , sequence of broad processing steps and speciﬁc details , like using the C operator + + and the referencing to batches one and two . Explanation I 9 includes uncertain parts , like ‘‘compare each data point to it’’ , as the nature of ‘‘it’’ is ambiguous . Still , question I 10 suggests that answer I 9 is insufﬁcient , as the question reiterates questions I 7 and I 2 but in a more precise way . Inputs I 11 ( reinforcement ) and then I 12 ( highlighted in yellow ) suggest that the member ﬁnally understood the asked question as an explanation was offered , even though it was not understood by the member ( I 13 ) . Answer I 12 is unclear as the purpose of using a set of variables or an array with ‘‘the most acceptable parameters’’ is unknown , however , the statement ‘‘just replace what is in the array’’ indicates that the solution might actually refer to separate variables to store the batch numbers with most acceptable and unacceptable values ( correct solution ) . Hence , even though the explanation is incorrect , its underlying idea is arguably correct . The next part of team problem solving shifted to other issues than the discussed missing fragment . Inputs I 14 and I 15 indicate possible changes to the solution . They include details , and act as hypothesis about possible causes that created the observed execution output . Response I 16 ( highlighted in yellow ) addressed the error in the code . It can be argued that the team member narrowed down the search for possible causes until the precise error was found and solved . Therefore , this step describes reasoning about causality , which is important in solution understanding . Inputs I 18 − I 23 attempted to solve the observed code execution features described by input I 17 . Input I 18 offered more details about the features , such as the input characteristics for which the execution feature was observed . Inputs I 19 − I 23 are a sequence of separate hypothesis on how to correct the observed error . They describe causal reasoning by team members to ﬁgure out the cause . The randomness of attempts suggests trial - and - error , likely without being guided by an overall image of the solution . The analysis of a second team problem - solving example offered similar observations . Team members explained their solutions to each other by using mixed descriptions , like sequences of processing steps presented at a high - level , conditions of the steps , some solution details and special cases , and rarely referring to the code . The descriptions had ambiguous statements . The degree to which the other members correctly understood explanations is unknown . Providing explanations that were understood by others was not trivial . Members often only focused on their solution while paying little attention to understanding other methods . Addressing missing fragments was attempted by starting from speciﬁc examples , which while being correctly handled , were hard to generalize for other data too . As they could not identify the reason of an error , the team relied on trial and error to ﬁnd places where changes were needed . Another incorrect attempt was to modify the code to produce correct results for a particular input , as it did not also produce correct outputs for other inputs . Hence , as backward reasoning was possibly performed for one speciﬁc data , the reasoning was not generalized for all data . Discussion : With respect to the problem - solving ﬂow in Figure 3 , the main role of teamwork was to identify the missing code fragments and correct the errors of individual solutions . Identifying the missing code fragments involved localizing the solving by detailing an existing solution , identifying the required changes , and combining the changes with the existing solutions . The missing fragments were sub - goals , which were addressed starting from high - level descriptions that had to be connected to the rest of a solution . The process of correcting errors attempted to ﬁnd their causes , like through backward reasoning . Sequences of hypothesis were set to narrow down to the code part that generated an error . If the process was unsuccessful , the team switched to trial and error . Teamwork mainly involved explaining solutions and understanding explanations and code . There was less emphasis on problem description explanation and understanding . Explanations were often mixed descriptions that included sequences of processing activities , features ( e . g . , conditions ) of the input and output data , and examples . Responses contained ambiguous elements and incorrect parts , but it is likely that team members achieved a correct , shared understanding of the intended meaning ( despite the actual communication ) by correcting it within the context of problem solving to obtain the most useful understanding within that context . There were no questions or comments on the incorrect parts of the explanations . The context set by the individually developed solutions was important for explanation and understanding . 17 5 . 3 Jointly creating a new solution The example presented in Section 4 . 2 and shown in Figure 4 illustrates this case . In addition to the discussions on creating a new solution , the team ﬁrst collaborated on understanding the problem description , as one member had doubts about the meaning of contiguous sub - arrays . The doubt originated in one of the provided test cases , which did not match the member’s understanding . The discussion included deﬁnitions of terms , and examples to illustrate the using of the deﬁnitions and their differences from the provided tests . Errors occurred between the offered examples and the meaning of the problem description . As mentioned in Section 4 . 2 , discussions to clarify the doubts were mixed with high - level ideas of the solutions . Explanations included ambiguous elements . Another requirement was to connect the different explanations offered for the raised doubts . A similar problem - solving behavior was observed for another team too . Solving started with making a broad analogy with a previous problem and discussing an input with precise features before offering a high - level description of the processing steps . Solving used examples as a method to identify algorithmic steps to be added to the description . However , there were doubts about the correctness of the additions . Some doubts remained unclariﬁed . Moreover , errors likely occurred when attempting to generalize from the speciﬁcs of the examples to code that should process any input . New code was produced based on similarity with previous exercises ( analogy ) , such as a certain code fragment was cut and pasted from an existing solution . It was observed that the team did not understand some of the reused code beyond its expected outputs , hence , mistakes were made due to the differences between the old and new problems . Difﬁculties also occurred when trying to localize and identify a required change , and then combining it with the existing code . There was little effort for backwards reasoning to understand the cause of an error . Instead , changes were made mainly based on predictions made only by using the inputs and observed outputs ( i . e . reactive behavior ) . Therefore , there is no guarantee ( e . g . , explanation ) that these changes solved the errors besides the fact that the speciﬁc expected outputs were obtained . New summaries of the solution were periodically produced , as new code was added . Summaries were high - level sequences of processing steps but were rarely related to the problem description . Discussion . Team member might have had fragments of the problem solutions , but there were difﬁculties in forming a complete high - level description . Moreover , there was sometimes a need to discuss a problem description to clarify ambiguities in the descriptions or test data . Devising a complete high - level solution description started with multiple partial ideas of various degrees of semantic similarity . Broad analogies to problems , possibly from other domains , were utilized to create a high - level overall concept . Solution construction required detailing the high - level ideas at various abstraction levels , e . g . , the high - level description parts were sometimes mapped directly to code from similar exercises , or successive , more detailed descriptions were created . New detailing was not always semantically equivalent to the previous descriptions , included errors , or were ambiguous with respect to the referred concepts and connected ideas . However , even if erroneous in terms of the expressed processing , they could still have a role in problem solving , like identifying missing fragments . Analysis of alternatives , including their cons , was a team activity . Linking through backward reasoning the observed outputs to their causes was difﬁcult , instead correction was attempted based on the input - output behavior of the code . Finally , problem solving encompassed a part of the solution space , both in breadth and depth . After producing a high - level description of the solution , team discussions were localized on adding details to it . Hence , ex - planation understanding was important to have a broader participation from the entire team . Summarizing code fragments was necessary during team discussions but there was no mechanism beyond using examples to verify the correctness of the summaries or any higher - level descriptions . There was more ﬂexibility between immediate , medium , and long - term contexts . Still , the overall solution image that was formed probably included errors and ambiguities due to uncertain connections between individual ideas . 6 Conclusions This paper presents a novel model to characterize team activities during devising computer programs that address typical problem requirements . Team members jointly work on solutions and interact through discussions with each other during problem solving . The analysis of problem - solving cases showed that teamwork situations can be grouped into three groups depending on the work executed before meeting in the team set - up : ( i ) situations in which team members individually solved a problem before team meetings , ( ii ) situations in which team members individually produced incomplete solutions 18 or solutions with signiﬁcant errors before teamwork started , and ( iii ) situations in which no team member could devise a program before meeting in a team . The analysis showed that different kinds of discussions existed in the three situations , suggesting different types of activities being conducted during problem solving . A requirement for the model was to capture the speciﬁc characteristics of different problem - solving scenarios observed in real life . The proposed team problem - solving model describes that every member operates with multiple mental images of the problem description and solution - related features , like desired and existing solutions , expected and observed behaviors of the solutions , causalities of the differences between expected and observed behaviors , and changes needed to address the differences . The images can be at different levels of abstraction , from high - level ideas to concrete code . They are a mixture of different styles , like sequences of processing steps , expected input - output pairs , or requirements expressed as logic conditions about the results . Descriptions can include unspeciﬁed details , ambiguities , unknowns , and errors . The fragments of images are not always tight together in unitary representations . The model connects the various mental im - ages through cognitive activities , like creating problem descriptions , analysis of descriptions , identiﬁcation of unaddressed issues ( e . g . , missing functionality and incorrect inputs - outputs ) , identiﬁcation of the needed changes , and updating de - scriptions by combining them with cues and other results of analysis . Analyzing the sequence of team discussions using the proposed model supports making predictions on the performed solving activities , including making design changes without the team fully understanding their consequences . The model supports making predictions about changes of the team members’ images because of teamwork and tracking the discussions among them . For example , speciﬁc cogni - tive interactions are the result of certain activities , like explaining a solution to others , analyzing solution correctness , combining new ideas , localizing errors , and so on . The study of team problem - solving cases using the proposed model showed that discussion characteristics were different for the three situations depending on the nature of the individual solutions before teamwork commencement . Discussions were mostly broad summaries of the solutions if members already devised a program before working in a team . Likely , there was little motivation to have more in - depth descriptions or analysis . If incomplete solutions were devised before teamwork started , then discussions mostly presented alternative solution ideas and detailed certain parts of the ideas . The main effort focused on identifying the missing solution fragments as compared to the problem requirements . The study showed that discussions were not always well structured , hence , the missing parts were not correctly identiﬁed . Also , it was unclear the degree to which alternatives were compared to understand their pros and cons , or if reasoning was conducted to determine the missing parts of the solutions . If team members could not design a solution idea before working in a team , then discussions focused on understanding the problem requirements and associating the requirements to previously solved exercises . Explaining ideas was a main part of the discussions , but it was unclear the degree to which explanations were understood by others . Even though members had good a participation in discussions , they rarely followed a systematic procedure to combine individual ideas to progress towards a problem solution . It was unclear how the cues produced by a member illuminated new ideas by others to create joint progress . Future work will focus on using the model to devise computational methods to estimate the characteristics of the problem - solving activities and of the mechanisms that connect them in a sequence during teamwork . Another opportunity is to design algorithmic ways of detecting inefﬁciencies and errors of teamwork , such as ignoring solution analysis and comparison . Finally , the model can be used as a starting point to create new techniques to ﬁnd correlations between the team members’ social and emotional interactions and the properties of the problem - solving ﬂow . References [ 1 ] S . Brennan , A . Galati , and A . Kuhlen . Two minds , one dialog : Coordinating speaking and understanding . In Brian H . Ross , editor , The Psychology of Learning and Motivation : Advances in Research and Theory , volume 53 of Psychology of Learning and Motivation , pages 301 – 344 . Academic Press , 2010 . [ 2 ] S . Fiore , K . Smith - Jentsch , E . Salas , N . Warner , and M . Letsky . Toward an understanding of macrocognition in teams : Developing and deﬁning complex collaborative processes and products . Theoretical Issues in Ergonomic Science , 11 : 4250 – 4271 , 2010 . [ 3 ] A . Graesser , S . Fiore , S . Greiff , J . Andrews - Todd , P . Foltz , and S . Hesse . Advancing the science of collaborative problem solving . Psychological Science in the Public Interest , 19 ( 2 ) : 59 – 92 , 2018 . 19 [ 4 ] A . Newell and H . A . Simon . Human problem solving . Prentice - Hall , 1972 . [ 5 ] P . B . Paulus and R . Korde . How to get the most creativity and innovation out of groups and teams . In J . Chan and K . Thomas , editors , Handbook of research on creativity , pages 493 – 507 . Edward Elgar Publishing , 2013 . [ 6 ] E . Salas , N . Cooke , and M . Rosen . On teams , teamwork , and team performance : discoveries and developments . Human Factors , 50 : 540 – 547 , 2008 . [ 7 ] D . Serfaty , E . Entin , and J . Johnston . Making decisions under stress : Implications for individual and team training . Team coordination training , 1998 . [ 8 ] J . Onians . Neuroarthistory . From Aristotle and Pliny to Baxandall and Zeki . Yale University Press , New Haven and London , 2007 . [ 9 ] S . Zeki . A Vision of the Brain . Blackwell Scientiﬁc Publications , Oxford , 1993 . [ 10 ] K . Rothmaler , R . Nigbur , and G . Ivanova . New insights into insight : Neurophysiological correlates of the difference between the intrinsic “aha” and the extrinsic “oh yes” moment . Neuropsychologia , 95 : 204 – 214 , 2017 . [ 11 ] F . Tian , S . Tu , J . Qiu , J . Lv , D . Wei , Y . Su , and Q . Zhang . Neural correlates of mental preparation for successful insight problem solving . Behavioural Brain Research , 216 ( 2 ) : 626 – 630 , 2011 . [ 12 ] Q . Zhao , Z . Zhou , H . Xu , W . Fan , and L . Han . Neural pathway in the right hemisphere underlies verbal insight problem solving . Neuroscience , 256 : 334 – 341 , 2014 . [ 13 ] R . Croson and S . Gachter . The science of experimental economics . Journal of Economic Behavior & Organization , 73 ( 1 ) : 122 – 131 , 2010 . [ 14 ] R . Lowe , A . Almer , G . Lindblad , P . Gander , J . Michael , and C . Vesper . Minimalist social - affective value for use in joint action : A neural - computational hypothesis . Frontiers in Computational Neuroscience , 10 : 88 , 2016 . [ 15 ] M . Tomasello . Origins of Human Communication . MIT Press , 2010 . [ 16 ] C . Vesper , E . Sangati , J . Butepage , F . Ciardo , B . Crossey , A . Effenberg , D . Hristova , A . Karlinsky , L . McEllin , S . Ni - jssen , L . Schmitz , and B . Wahn . Joint action : Mental representations , shared information and general mechanisms for coordinating with others . Frontiers in Psychology , 7 , January 2017 . [ 17 ] T . Amabile , S . Barsade , J . Mueller , and B . Staw . Affect and creativity at work . Administrative Science Quarterly , 50 ( 3 ) : 367 – 403 , 2005 . [ 18 ] A . Bolte , T . Goschke , and J . Kuhl . Emotion and intuition : Effects of positive and negative mood on implicit judg - ments of semantic coherence . Psychological Science , 14 ( 5 ) : 416 – 421 , 2003 . [ 19 ] C . Estrada , A . Isen , and M . Young . Positive affect improves creative problem solving and inﬂuences reported source of practice satisfaction in physicians . Motivation and Emotion , 18 : 285 – 299 , December 1994 . [ 20 ] G . Rowe , J . B . Hirsh , and A . K . Anderson . Positive affect increases the breadth of attentional selection . Proceedings of the National Academy of Sciences , 104 ( 1 ) : 383 – 388 , 2007 . [ 21 ] G . Bjornebekk . Positive affect and negative affect as modulators of cognition and motivation : The rediscovery of affect in achievement goal theory . Scandinavian Journal of Educational Research , 52 ( 2 ) : 153 – 170 , 2008 . [ 22 ] G . Dreisbach and T . Goschke . How positive affect modulates cognitive control : Reduced perseveration at the cost of increased distractibility . Journal of experimental psychology . Learning , memory , and cognition , 30 : 343 – 53 , April 2004 . [ 23 ] R . Yarden , C . Surage , C . Kim , A . Doboli , E . Voisan , and C . Purcaru . Tuki : A voice - activated information browser . In IEEE Long Island Systems , Applications and Technology Conference , pages 1 – 9 , 2009 . [ 24 ] A . Umbarkar , V . Subramanian , and A . Doboli . Low - cost sound - based localization using programmable mixed - signal systems - on - chip . Microelectronics Journal , 42 ( 2 ) : 382 – 395 , 2011 . 20 [ 25 ] X . Liu , A . Doboli , and F . Ye . Optimized local control strategy for voice - based interaction - tracking badges for social applications . In International Conference on Computer Design , 2015 . [ 26 ] R . Duke and A . Doboli . Non - invasive speaker - focused data acquisition for team behavior modeling . In arXiv . org , 2209 . 00619 , http : / / arxiv . org / abs / 2209 . 00619 , 2022 . [ 27 ] R . Duke and A . Doboli . Applications of dialogic system in individual and team - based problem - solving applications . In IEEE International Symposium on Smart Electronic Systems ( iSES ) , 2022 . [ 28 ] E . Chrysikou and R . Weisberg . Following the wrong footsteps : ﬁxation effects of pictorial examples in a design problem - solving task . Journal of experimental psychology . Learning , memory , and cognition , 31 ( 5 ) : 1134 – 1348 , 2005 . [ 29 ] S . M . Smith and S . E . Blankenship . Incubation and the persistence of ﬁxation in problem solving . American Journal of Psychology , 104 : 61 – 87 , 1991 . [ 30 ] L . Thomas and A . Lleras . Covert shifts of attention function as an implicit aid to insight . Cognition , 111 ( 2 ) : 168 – 174 , 2009 . [ 31 ] A . Doboli and A . Umbarkar . The role of precedents in increasing creativity during iterative design of electronic embedded systems . Design Studies , 35 ( 3 ) : 298 – 326 , 2014 . [ 32 ] C . Ferent and A . Doboli . Improving design feature reuse in analog circuit design through topological - symbolic comparison and entropy - based classiﬁcation . In R . Castro - Lopez M . Fakhfakh , E . Tlelo - Cuautle , editor , Analog / RF and mixed - signal circuit systematic design . Springer , 2013 . [ 33 ] M . Keating and P . Bricaud . Reuse Methodology Manual for System - on - Chip Designs . Kluwer , 2003 . [ 34 ] J . Metcalfe . Premonitions of insight predict impending error . Journal of Experimental Psychology : Learning , Memory , and Cognition , 12 : 623 – 634 , October 1986 . [ 35 ] A . Doboli , A . Umbarkar , S . Doboli , and J . Betz . Modeling semantic knowledge structures for creative problem solving : Studies on expressing concepts , categories , associations , goals and context . Knowledge - Based Systems , 78 : 34 – 50 , 2015 . [ 36 ] C . Ferent , A . Doboli , and S . Doboli . An axiomatic model for concept structure description and its application to circuit design . Knowledge - Based Systems , 45 : 114 – 133 , 2013 . [ 37 ] C . Ferent and A . Doboli . Symbolic matching and constraint generation for systematic comparison of analog circuits . IEEE Transactions on CADICS , 32 ( 4 ) : 616 – 629 , 2013 . [ 38 ] C . Ferent and A . Doboli . Formal representation of the design feature variety in analog circuits . In Proceedings of FDL , 2013 . [ 39 ] Cristian Ferent and Alex Doboli . Analog circuit design space description based on ordered clustering of feature uniqueness and similarity . Integration , 47 ( 2 ) : 213 – 231 , 2014 . [ 40 ] V . Goel . Sketches of Thought . MIT Press , USA , 1995 . [ 41 ] G . Goldschmidt . Capturing indeterminism : representation in the design problem space . Design Studies , 18 ( 4 ) : 441 – 455 , 1997 . [ 42 ] L . Hong and S . Page . Groups of diverse problem solvers can outperform groups of high - ability problem solvers . Proceedings of the National Academy of Sciences , 101 ( 46 ) : 16385 – 16389 , 2004 . [ 43 ] F . Jiao , S . Montano , C . Ferent , A . Doboli , and S . Doboli . Analog circuit design knowledge mining : Discovering topological similarities and uncovering design reasoning strategies . IEEE Transactions on CADICS , 34 ( 7 ) : 1045 – 1059 , 2015 . [ 44 ] I . Bouty . Interpersonal and interaction inﬂuences on informal resource exchanges between r & d researchers across organizational boundaries . The Academy of Management Journal , 43 ( 1 ) : 50 – 65 , 2000 . 21 [ 45 ] J . Perry - Smith and C . Shalley . The social side of creativity : A static and dynamic social network perspective . The Academy of Management Review , 28 ( 1 ) : 89 – 106 , 2003 . [ 46 ] A . Doboli and S . Doboli . A novel learning and response generating agent - based model for symbolic - numeric knowledge modeling and combination . In Proceedings of IEEE Symposium Series on Computational Intelligence , 2021 . [ 47 ] J . Funke . Complex problem solving : A case for complex cognition ? complex problem solving : A case for complex cognition ? Cognitive Processing , 11 : 133 – 142 , 2010 . [ 48 ] R . Meyer . Thinking , Problem Solving , Cognition . W . H . Freeman and Company , 1992 . [ 49 ] K . Holyoak . Problem solving . In D . Osherson and E . Smith , editors , Thinking , pages 117 – 146 . MIT Press , 1990 . [ 50 ] O . Akin and C . Lin . Design protocol data and novel design decisions . Design Studies , 16 ( 2 ) : 211 – 236 , 1995 . [ 51 ] M . Rosenman and J . Gero . Creativity in design using a design prototype approach . In J . Gero and M . Maher , editors , Modeling creativity and knowledge based creative design , pages 111 – 138 . Erlbaum , 1993 . [ 52 ] F . Jiao , S . Montano , C . Ferent , and A . Doboli . I - Flows : A Novel Approach to Computational Intelligence for Analog Circuit Design Automation Through Symbolic Data Mining and Knowledge - Intensive Reasoning , pages 175 – 204 . Springer , 2015 . [ 53 ] F . Jiao , H . Li , and A . Doboli . Modeling and extraction of causal information in analog circuits . IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems , 37 ( 10 ) : 1915 – 1928 , 2018 . [ 54 ] H . Li , X . Liu , F . Jiao , A . Doboli , and S . Doboli . Innova : A cognitive architecture for computational innovation through robust divergence and its application for analog circuit design . IEEE Transactions on Computer - Aided Design of Integrated Circuits and Systems , 37 ( 10 ) : 1943 – 1956 , 2018 . [ 55 ] R . E . Clark and F . Estes . Cognitive task analysis . International Journal of Educational Research , 25 ( 5 ) : 403 – 417 , 1996 . [ 56 ] J . Wei and G . Salvendy . The cognitive task analysis methods for job and task design : review and reappraisal . Behaviour & Information Technology , 23 ( 4 ) : 273 – 299 , 2004 . [ 57 ] A . Conway , N . Cowan , M . Bunting , D . Therriault , and S . Minkoff . A latent variable analysis of working memory capacity , short term memory capacity , processing speed , and general ﬂuid intelligence . Intelligence , 30 : 163 – 183 , 2002 . [ 58 ] M . Kane , D . Hambrick , S . Tuholski , O . Wilhelm , T . Payne , and R . Engle . The generality of working memory ca - pacity : A latent – variable approach to verbal and visuo - spatial memory span and reasoning . Journal of Experimental Psychology : General , 133 : 189 – 217 , 2004 . [ 59 ] M . DeCaro , M . Wieth , and S . Beilock . Methodologies for examining problem solving success and failure . Methods , 42 ( 1 ) : 58 – 67 , 2007 . [ 60 ] D . R . Olson . Towards a psychology of literacy : on the relations between speech and writing . Cognition , 60 ( 1 ) : 83 – 104 , 1996 . [ 61 ] O . Akin . Psychology of Architectural Design . Pion , 1986 . [ 62 ] A . Conway , M . Kane , M . Bunting , and et al . Working memory span tasks : A methodological review and user’s guide . Psychonomic Bulletin & Review , 12 : 769 – 786 , 2005 . [ 63 ] N . Cowan . The magical mystery four : How is working memory capacity limited , and why ? Current Directions in Psychological Science , 19 ( 1 ) : 51 – 57 , 2010 . [ 64 ] R . Engle . Working memory capacity as executive attention . Current Directions in Psychological Science , 11 : 19 – 23 , 2002 . 22 [ 65 ] N . Cowan . The magical number 4 in short - term memory : A reconsideration of mental storage capacity . Behavioral and Brain Sciences , 24 ( 1 ) : 87 – 114 , 2001 . [ 66 ] N . Unsworth , R . Heitz , and R . Engle . Working memory capacity in hot and cold cognition , pages 19 – 43 . Oxford University Press , 2005 . [ 67 ] F . Ashby , A . Isen , and A . Turken . A neuropsychological theory of positive affect and its inﬂuence on cognition . Psychol Review , 106 ( 3 ) : 529 – 550 , 1999 . [ 68 ] R . Depue , M . Luciana , P . Arbisi , P . Collins , and A . Leon . Dopamine and the structure of personality : Relation of agonist – induced dopamine activity to positive emotionality . Journal of Personality and Social Psychology , 67 : 485 – 498 , 1994 . [ 69 ] D . Derryberry and D . Tucker . Neural mechanisms of emotionneural mechanisms of emotion . Journal of Consulting and Clinical PsychologyJournal of Consulting and Clinical Psychology , 60 : 329 – 338 , 1992 . [ 70 ] A . Isen . An inﬂuence of positive affect on decision making in complex situations : Theoretical issues with practical implications . Journal of Consumer Psychology , 11 ( 2 ) : 75 – 85 , 2001 . [ 71 ] L . Phillips , R . Bull , E . Adams , and L . Fraser . Positive mood and executive function : evidence from stroop and ﬂuency tasks . Emotion , 2 ( 1 ) : 12 – 22 , 2002 . [ 72 ] A . Isen , M . Johnson , E . Mertz , and G . Robinson . The inﬂuence of positive affect on the unusualness of word associations . Journal of personality and social psychology , 48 : 1413 – 26 , 1985 . [ 73 ] A . Isen and B . Means . The inﬂuence of positive affect on decision - making strategy . Social Cognition , 2 ( 1 ) : 18 – 31 , 1983 . [ 74 ] A . Isen and K . Daubman . The inﬂuence of affect on categorization . Journal of Personality and Social Psychology , 47 ( 6 ) : 1206 – 1217 , 1984 . [ 75 ] A . Isen , P . Niedenthal , and N Cantor . An inﬂuence of positive affect on social categorization . Motivation and Emotion , 16 : 65 – 78 , 1992 . [ 76 ] S . Marsella , J . Gratch , and P . Petta . Computational models of emotion . A Blueprint for Affective Computing - A Sourcebook and Manual , pages 21 – 46 , January 2010 . [ 77 ] D . Ong , J . Zaki , and N . Goodman . Computational models of emotion inference in theory of mind : A review and roadmap . Topics in Cognitive Science , 11 ( 2 ) : 338 – 357 , 2020 . [ 78 ] D . Abney , A . Paxton , R . Dale , and C . Kello . Complexity matching in dyadic conversation . Journal of experimental psychology . General , 143 , October 2014 . [ 79 ] R . Fusaroli , J . Ryczaszek - Leonardi , and K . Tyl´en . Dialog as interpersonal synergy . New Ideas in Psychology , 32 : 147 – 157 , 2014 . [ 80 ] K . Shockley , D . Richardson , and R . Dale . Conversation and coordinative structures . Topics in Cognitive Science , 1 : 305 – 319 , April 2009 . [ 81 ] R . Lowe , A . Almer , and C . Balkenius . Bridging connectionism and relational cognition through bi - directional affective - associative processing . Open Information Science , 3 : 235 – 260 , January 2019 . [ 82 ] M . Tanenhaus , M . Spivey - Knowlton , K . Eberhard , and J . Sedivy . Integration of visual and linguistic information in spoken language comprehension . Science , 268 5217 : 1632 – 1634 , 1995 . [ 83 ] M . Pickering and S . Garrod . Toward a mechanistic psychology of dialogue . Behavioral and Brain Sciences , 27 ( 2 ) : 169 – 190 , 2004 . [ 84 ] C . Fowler , M . Richardson , K . Marsh , and K . Shockley . Language Use , Coordination , and the Emergence of Coop - erative Action , volume 2008 , pages 261 – 279 . December 2007 . 23 [ 85 ] W . Horton and B . Keysar . When do speakers take into account common ground ? Cognition , 59 ( 1 ) : 91 – 117 , April 1996 . [ 86 ] B . Keysar , D . Barr , J . Balin , and J . Brauner . Taking perspective in conversation : The role of mutual knowledge in comprehension . Psychological Science , 11 ( 1 ) : 32 – 38 , 2000 . [ 87 ] D . Etter . Engineering Problem Solving with C . Pearson , 2005 . 24