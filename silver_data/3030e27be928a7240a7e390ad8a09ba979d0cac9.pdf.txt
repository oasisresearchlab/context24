~ University of Colorado at Boulder Center for lifeLong Learning and Design ( L3D ) Department of Computer Science ECOT 717 Engineering Center Campus Box 430 Boulder , Colorado 80309 - { ) 430 ( 303 ) 492 - 1592 , FAX : ( 303 ) 492 - 2844 Making Argumentation Serve Design Gerhard Fischer Center for Life Long Learning and Design ( L3D ) Department of Computer Science and Cognitive Science University of Colorado , Campus Box 430 Boulder , CO 80309 - 0430 gerhard @ cs . colorado . edu Andreas Lemke ALCA TEL - SEL Stuttgart , Germany Raymond McCall College of Environmental Design and Institute of Cognitive Science University of Colorado . Campus Box 314 Boulder , CO 80309 - 0314 Anders L Morch University of Oslo , Norway In Human Computer Interaction Journal , VoL6 , No . 3 - 4 , pp . 393 - 419 HUMAN - COMPUTER INTERACTION , 1991 , Volume 6 , pp . 393 - 419 Copyright Â© 1991 , Lawrence Erlbaum Associates , Inc . Making Argumentation Serve Design Gerhard Fischer , Andreas C . Lemke , and Raymond McCall University of Colorado Anders I . Morch NYNEX Science and Technology ABSTRACT Documenting argumentation ( i . e . , design rationale ) has great potential for serving design . Despite this potential benefit , our analysis of Horst Rittel ' s and Donald Schon ' s design theories and of our own experience has shown that there are the following fundamental obstacles to the effective documen tation and use of design rationale : ( a ) A rationale representation scheme must be found that organizes information according to its relevance to the task at hand ; ( b ) computer support is needed to reduce the burden of recording and using rationale ; ( c ) argumentative and constructive design activities must be linked explicitly by integrated design environments ; ( d ) design rationale must be reusable . In this - article , we present the evolution of our conceptual frameworks and syst ~ s toward integrated design environments ; describe a prototype of an integrated design environment , including its underlying architecture ; and discuss some current and future work on extending it . Authors ' present addresses : Gerhard Fischer , Department of Computer Science and Institute of Cognitive Science , University of Colorado , Boulder , CO 80309 - 0430 ; Andreas C . Lemke , GMD - IPSI , Dolivostr . 15 , 6100 Darmstadt , Germany ; Raymond McCall , College of Environmental Design and Institute of Cognitive Science , University of Colorado , Boulder , CO 80309 - 0314 ; Anders 1 . Morch , NYNEX Science and Technology , 500 Westchester Avenue , White Plains , NY 10604 . 268 FISCHER , LEMKE , McCALL , MORCH CONTEI . . . . iTS 1 . INTRODUCTION 2 , DF . sIGN RATIONALE 3 . SUPPORT FOR ARGUMENTATION 3 . L miS 3 . 2 . PHI and the Critique of miS 3 . 3 . PHI Hypertext 3 . 4 . Grounding Argumentation in Construction 4 . SUPPORT FOR CONSTRUCTION 5 . Il ' . ' TEGRATED DESIGN ENVIRONMENTS 5 . 1 . Reflection - in - Action 5 . 2 . An Architecture for Integrated Design Environments 5 . 3 . Evalu . ation , Shortcomings , and Limitations of jA ' - : US 6 . CURRENT AND FUTURE WORK 7 . CONCLUSIONS ABSTRACT Documenting argumentation ( i . e . . design rationale ) has great potential for sef \ lng Despite this potential benefil , our analysis of Horst Rittel ' s and Donald Schon ' s design theOl - ies and our own experience has shown that there are the foliowing fundamental obstacles to the effective documentation and use of rationale : ( a ) Arationale representation scheme must be found that organizes information according to its relevance to the task at hand ; ( b ) computer support is needed to reduce the burden of recording and llsing rationale ; ( c ) argumentative and constructive activities nlust be explicitly linked by integrated design environments ; and ( d ) design rationale must be reusable . In this chapter , we present the evolution of our conceptual frameworks and systems toward integrated design environment " describe a prototype of an integldted design environment including its underlying architecture , and discuss some cllrrent and future work on extending it . 1 . INTRODUCTION Documenting argumentation ( i . e . , design rationale ) has great potential for improving design . In addition to being invaluable for maintenance , redesign , and reuse , it promotes critical reflection during design . Despite such potential benefits , our experience has shown that there are funda menh ' ll obstacles to the effective documentation and use of design ratioll ale . i \ rgumentaliol1 does not naturally serve design ; it must be made to do so . 9 . MAKING ARGUMENTATION SERVE DESIGN 269 The structure of this chapter follows the histOIY of our work , driven by the development and evaluation of conceptual frameworks and protot ) ' Pe systems . In Section 2 , the term design rationale is characterized . In Section 3 , we discuss Issue - Based IlIJr . mnation Systems ( IBIS ) and Procedural Hierarchy oJIssues ( PHI ) , two frameworks for representing argumentation . We show that IBIS has fundamental problems . IBIS represents neither dependency relationships between issues nor nondeliberated issues . PHI is a variant of IBIS that remedies these problems . In the past , argumentation has been considered in isolation from the activity of solution construction . TIle major breakthrough in our thinking , based on observing the shortcomings of the two isolated approaches , was the realization that argumentation must be integrated into the context of construction . In Section 4 , we describe approaches to devising tools for constntction to reduce the trans formation distance from application domain to implementation domain by supporting human problem - domain communication . In Section 5 , we discuss inleg ; rated design el / vir ( ) nm ~ nts that unify construction and argumen tation . The theoretical basis for this integration is Schon ' s theory of re flection - in - action . In Section 6 , we describe current and future work on adaptive and reusable domain - oriented isslIe bases , enriched catalogs , and improved representations of the task at hand . Throughout the chapter , we use the JA ~ US system ( Fischer , McCall , & Morch , 1989a , 1989b ) as an " object - to - think - with . " The chapter discusses aspects of the JANUS system only as they are relevant to our theme ; details about . J . A . NUS can be found in the given references . 2 . DESIGN RATIONALE Design . 111 order to define design rationale , we must first define the term design . Like design theorists Cross ( 1984 ) , Rittel ( 1984 ) , Schon ( 1983 ) , and Simon ( 1981 ) , we see design not only as problem solving hut also as continual problem finding . It is a process of dealing with the kind of " messy situations " that are charactelized by uncertainty , conflict , and uniqueness . It is an evollitionary process in which " understanding the problem is identical with solving it " ( Rittcl , 1972 , p . 392 ) , and it can best be characterized by creativity , judgment , and dilemma handling , rather than by objective scientific methods . We agree with Donald Sch ( } n ' s view of design . For Schon ( 1983 ) de signing is not plimaIily a form of problem solving , information processing , or search , but a kind of making : " I shall consider designing as a conver sation with the materials of the situation " ( p . 78 ) . This definition covers a wide range of fields , including architectural ( building ) design , urban design , software design , hard \ \ yare design , and v ; uious types of engineeling design . vVe call the transactions of designers with materials and artifacL5 270 FISCHER , LEMKE , McCALL , MORCH comtruction , which is the activity of creating the actual fonn of the solution . Construction cannot always be physical , but may have to be carried out in the abstract ( e . g . , on the drafting board ) . Physical interactions with mate rials may be too expensive or too dangerous . Design Rntionale . In our approach , design rationale means statements of reasoning underlying the design process that explain , delive , and justify design decisions . A truly complete account of the reasoning relevant to design decisions is neither possible nor desirable . It is not possible because some design decisions and the associated reasoning are made implicitly by construction and are not available to conscious thinking . Some of the rationale must be reconstructed after design decisions have been made . Many design issues are tIivial ; their resolution is obvious to the competent designer , or the design issue is not very relevant to the overall quality of the designed artifact . Accounting for all reasoning is not desirable because it would divert too many resources from designing itself . Design rationale in our approach is a synonym for argumentation . Ritte ! ( 1972 ) was the first to advocate systemauc documentation of design ra tionale as part of design . He saw design problems as fundamentally open ended and controversial in the sense that there are no objective criteria for closing problem definitions and settling disagreements . Such closing and settling are necessary for design , but for the designer the decisions on closing and settling are judgmental and political in nature . The design rationale takes the form of a network of issues ( design questions ) , selected and rejected answers , and argumenL ~ for and against these answers ( see Section 3 ) . The Promise of Design Rationale . Design rationale serves design if it helps designers ( a ) to improve their own work , ( b ) to cooperate with other people holding stakes in the design , and ( c ) to understand existing artifacts ( i . e . , communicate with past designers ) . Design rationale can uigger CIitical thought in the individual designer . Writing an idea down allows the designer to make the transition from simply creaung that idea to thinking about it . Design rationale can serve as a memory aid not only to individuals but also to groups ( Conklin & Begeman , 1988 ) by providing a forum for ailing issues crucial for coordinating group activities . It is useful for triggeling and focusing discussion among members of a project team . By making the processes of reasoning public , it extends the number of people who can participate in the critical reflection on decisions . This reduces the chances of missing some important consideration and it rationalizes discussion . To alter a design sensibly - adding , fixing , or modifying features - it is crucial to have an understanding of why it has been designed the way it has . Without knowing the rationale , a designer is apt to violate constraints 9 . MAKING ARGUMENTATION SERVE DESIGN 271 and to repeat errors by ignoring what previous designers have learned . That is , the rationale created in one design pr ~ ject may be a resource for future , related design projects . Even if the difficulties encountered in a project are not overcome , they might still be informative for future de signers . The mere existence of unforeseen problems is itself valuable information . Often , design is based on mistaken predictions of how the artifact will perform in use . If these predictions are documented , they can be compared to actual use . This would allow the development of better theories for predicting perfonnance . 3 . SUPPORT FOR ARGUMENTATION On the basis of his theory of Wicked Problems , Ritte ! ( 1984 ) re - jected the efforts by the majOIity of design methodologists to automate design reasoning . The argumentative approach tries to enhance design by im proving the reasoning underlying it and is ai med at supporting the rea soning of human designers rather than replacing it with automated rea soning processes ( Fischer , 1990 ; Stefik , 1986 ) . 3 . 1 . IBIS IBIS ( Kunz & Ritte ! , 1970 ) is a method ( not a computer system ) for stnIctUling and documenting design rationale . The central activity of IBIS is deliberation , that is , considering the pros and cons of alternative - answers to questions . The questions deliberated are called issues . Proposed an swers - including ones that are mutually exclusive - are called answers or positions . Statements of the pros and cons of answers are called arguments . The decision as to which answers to accept and reject is called the resolution of the issue . The various issue deliberations are connected by a variety of interissue relationships . ll1e original IBIS included " more general than , " " similar to , " " replaces , " " tem poral successor of , " " logical successor of , " and others . Graph diagrams with labeled nodes and links representing issues and their relationships were used for visualization . Such diagrams , called issue maps , were meant to facilitate navigation through the IBIS " problemscape . " From 1970 to 1980 , a variety of projecL ~ were underta . ken that attempted to use IBIS in real - world settings . These pr ~ jects included IBIS systems for the United Nations , the Commission of European Communities , the ( West ) German Parliament , the German Federal Office of the Environment , and the German Office of Health ( Reuter & Werner , 1983 ) . None of these systems got past the pilot project sta . ge . At the end of this stage each was judged as somehow failing to adequately serve the rlesign tasks for which it had been created . 272 FISCHER , LEMKE , MCCALL , MORCH After a decade of intensive and generally well - funded efforts to imple ment IBIS , it became difficult to believe that the failures to do so were coincidental . Clearly , there were fundamental problems with the IBIS method or the approach to implementing it . The identification and solution of fundamental problems in the creation and use of issue - based design rationale has been a central concern of our research . The first step in this research was a critique of IBIS and an improved issue - based method called PHI ( McCall , 1979 ) . The next step was the proposal of a new sort of software tech nology , hypertext , to handle issue - based rationale ( McCall , Mistrik , & Schuler , 1981 ) . We next look at these suggested improvemenL ' I and the results of their implementation and use . 3 . 2 . pm and the Critique of mIS McCall ( 1979 ) suggested that there are two related types of information that are omitted from IBIS but that are required for an issue - based ap proach to serve design effectively . The first and most basic is dependency relationships between issue resolutions , that is , relationships representing the fact that the answering of issues often depends on how other issues are answered . IBIS has no v , ' ay of representing such dependencies . Instead it treats issue - resolution processes as if they were separable . The second type of information omitted from IBIS is questions that are not deliberated - - that is , questions for which pros and cons of alternative answers are not considered . IBIS ignores these in favor of those questions with which debate and controversy are most likely to be associated . Yet nondeliberated questions occur frequently in design and can influence the resolutions of issues . Furthermore , many such questions themselves have answers that depend on the resolutions of issues . In an effort to overcome these limitations of IBIS , McC , " 111 ( 1991 ) de veloped the PHI approach to documenLing design rationale . PHI , like IBIS , is a design method rather than a piece of softw , lfe . It differs from IBIS in two crucial respects : It uses a broader definition of the concept issue , and it lISes a new plinciple for linking issues together . In IBIS , the tnm issue denotes a question that is deliberated ; in PHI , however , eyer ) ' design question counts as an issue , whether delib erated or not . PHI also abandons the interissue relationships proposed by Rille ! ( 1980 ) - " temporal successor oC " " similar to , " " replaces , " and so forth . Instead it uses Sfrut ' relationships . \ \ ' e say Issuc A serves Issue B if and onlv if the n " solution of A influences the resolution of B . The dominant type of sen ' c relationship llsed in PHI is the " subissue of ' relationship , which indicates that rc ~ oh ; ng one issue is a subtask of the task of resolving another . More formalh , we sav Issue A is a subissue of Issue B if and only if : \ serves Band B is raiserl before A . Note that this means that A ' s being 9 . MAKING ARGUMENTATION SERVE DESIGN Figure 1 . An IBIS issue map . lemporal Where should Where should ~ " " " " , " S ( l ( the sink the walls / ~ ( be Io < : ated ? be located ? ~ " / _ . ~ = \ ~ = = " Where ShouJd ~ ~ Where should the doors / - the coonters _ . . . . . aIm ! Ia . . . . . . . . . . ' _ be Io < : ated ? be Io < : ated ? Where should the stove be Io < : ated ? Where should the refrigerator be Io < : aled ? 273 Figure 2 . A pm issue map . The starred issues , which are not delibenlted , are dealt with by PHI but not by IBIS . a subissue of B implies that A serves B , but A ' s serving B does not in itself imply that A is a subissue of B . In Ritte ! ' s IBIS , as evidenced by the many years of real - world and student projects , an issue map is characteristically a dense and tangled network of issues connected by a half dozen different relationships ( see I ) . In PHI , however , an issue map is a simple quasi - hierarchical structure con nected only by serve relationships and having a single root issue ( see Figure 2 ) . This structure is treelike but is seldom a pure tree , because issues can share subissues ( see Figure 2 ) . The root of a PHI issue map is an issue that represents the project as a whole . For example , if one is designing a kitchen . the root issue might be " What should be the design of this Idtchen ? " 274 FlSCHER . LEMKE . McCALL . MORCH PHI has been in nearly continual test use both with and without com puter support since 1977 . This testing has been informal rather than in the framework of a formal , experimental setting . Furthermore , the testing has emphasized intensive use by a relatively few users at a time l - ather than extensive use by many people - a style we have found to be especially informative for system - building efforts . Testing began in 1977 and 1978 with students at the University of California , Berkeley ( McCall , 1979 ) . It continued in Heidelberg , Germany , from 1979 to 1984 . Since 1984 , con tinual test use has been made of PHI at the University of Colorado , Boulder . Testing in Berkeley used eight undergraduates and was spread out over a 2 - year period . The most important results of this were the generation of issue bases ( i . e , networks of issues ) that showed the applicability of the PHI to student design projects . 3 . 3 . PHI Hypertext In Heidelberg , testing of PHI began with the attempt in 1979 to usc PHI with only typewriters and word processors . By 1980 , these efforts ran into severe diffiCulties in managing the issue - based information . In par ticular , the information management tasks were so labor intensive and error prone that the decision was made to attempt to develop computer support for PHI . The system developed , called MIKROPLIS ( McCall et ai . , 1981 ) , became the first issue - based hypertext system . The defming characteristics of hypertext are nonlinear structure and navigation . The need for the fonnerwas understood at the beginning of the MIKROPLIS project ( McCall , 1979 ) . The need for the latter emerged in 1982 from working with early users of MIKROPLIS who repeatedly pointed to displayed nodes and a " ked how to retrieve the nodes linked to them . Since the beginning of the MIKROPLIS project , a number of other issue - based hypertext systems have been developed . These include Ritte ! ' s own system ( Conklin , 1987 ) , gIBIS ( Conklin & Begeman , 1988 ) , jANUS ARGUMENTATION ( Fischer et ai . , 1989b ) , and PHIDlAS ( McCall et ai . , 1990 ) . MIKROPLIS , PHIDlAS , and JANUS - ARGUMENTATION differ from the others by using PHI rather than IBIS . To further test PHI and the computer support being developed for it , the MIKROPLIS team kept a PHI issue base for the design of the system . As soon as MIKROPLIS became usable , this issue base was maintained using the MIKROPLIS system itself . This " self - referential use " encouraged a certain level of awareness and honesty about the performance of PHI and MIKROPI JS . Additional testing of PHI and MIKROPLlS imolved the development of issue bases with MIKROPLIS by a dozen users of valious kinds over a peliod of 3 years . These users included MIKROPLIS project members , 9 . MAKING ARGUMENTATION SERVE DESIGN 275 people from other project groups \ ' o1thin the organization in Heidelberg , and several " knowledge workers " from other organizations . In 1984 , an American physician was hired to test the system on a full - time basis for 3 months by attempting to develop an issue base on health care policy . In 11 weeks he developed a tightly structured issue base equivalent to exactly 500 single - spaced pages in length . This was taken by the physician and others as evidence of the usefulness and usability of both PHI and MI KROPUS . In particular , the physician felt that he could not have achieved these results with alternative methods or technologies . Despite this success , there were still problems with using both PHI and MIKROPLIS . The artifact the physician was trying to produce was the issue base itself . To those for whom the issue bases were only means for designing other kinds of artifacts , the use of PHI involved a great deal of work over and above the ordinary work of design . MIKROPLIS substantially reduced the errors and secretarial work of creating an issue base , but there remained a large amount of conceptual and editOlial work . Many people were therefore disinclined to use PHI because the costs of invested effort ex ceeded the immediate payoff . For them , even with MIKROPLIS support , PHI still did not serve sufficiently the design task at hand . 3 . 4 . Grounding Argumentation in Construction PHI hypertext with domain - oriented issue bases reduced the cost and increased the benefits of design rationale . But as our systems dealt suc cessfully with this aspect of design rationale , another , more fundamental obstacle was revealed . There is a o - ucial design activity not supported by argumentative hypertext : collstmction . In fields such as architectural design , construction is a graphic activity traditionally done by drawing . Construc tion is the sine qua non of design , for no design project can be completed until the construction is done . Argumentation gets its usefulness in design only by influencing construction . For argumentation to serve design it must serve construction . Test use of PHI at the University of Colorado , Boulder , provided e \ 1dence for the need to integrate argumentation with construction . The test use began with two junior - level undergl - aduate environmental design studios , each with about 20 students - taught by Raymond McC ' . . all in 1985 . Each studio involved the same semester project : designing a neighborhood shopping center at a particular location in Boulder . StudenL " were asked to record their rationale in PHI form during the project . In both studios , this worked well until studenls began working out the details of the solution form , that is , actual drawings of buildings . At thi ~ point , it became effectively impossible to get students to document their rationale . To see if these difficulties were independent of instructor and project , two independent study students were asked to document a studio on 276 FlSCHER , LEMKE , McO \ LL , MORCH housing design taught by a nationally known architect , In an effort to keep this inquiry unbiased , the students who did the documentation were not told anything about the hypothesis being investigated and were given only minimal supervision by McCalL The students produced a 175 - page docu ment in PHI form , representing the work of a project group of five students in the studio , Again , the documentation of rationale ceased shortly after the constmction of solution fonn began , According to the students who did the documentation , the prC ? ject group members became unable or unwilling to talk to the documenters as form generation began . The difficulties encountered in attempting to document the studio projects suggested that there was a fundamental incompatibility between fonn constmction and PHI . To understand what this incompatibility might be , McCall made a series of three videotaped think - aloud protocols of student designers from the College of Environmental Design . The first protocol involved two juniors who worked for 6 weeks on the design of a store , The second involved a senior working for 10 weeks on the design of a house . The third involved a single senior working for 3 weeks on the design of a kitchen . All were analyzed informally and the second was selected for intensive formal analysis . In particular , representative sections of the form constmction process were transcribed and compared to the structures of PHI on a sentence - by - sentence and drawing - by - drawing basis . These results suggested some possible additions to PHI . One would be to enable explicit representation of criteria on occasion - as in the " goals " of DRL ( see Lee & Lai , 1991 [ chapter 2 in this book ] ) - though not to ahvays require this - as in QOC ( see MacLean , Young , Bellotti , & Moran , 1991 [ chapter 3 in this book ] ) ( also see Buckingham Schum , 1995 [ chapter 6 in this book ] on use of critelia in Qoq . Another addition would be to enable better representation of hypothetical reasoning - - something not prmided by any of the rationale representation schemes presented in this book . On the whole , however , our protocol studies showed a clear match between the processes the student used in fOlm generation and the proc esses represented in PHI . The student who created the 100week protocol was asked whether he felt the conclusions of this analysis were accurate . Before being shown the actual ' videotapes of his protocol he claimed that he would not be able to think in PHI form while he was designing . ' When shown the videotapes and their analysis he agreed tllal the analysis was con ' eel , but he professed great surprise at this fact . At first , these results were quite puzzling . It seemed that students claimed not to be able to use exactly the kind of thinking that they in fact used . Eventually , we found a solution to this puzzle in Schon ' s ( 1983 ) theory of ref1ection - in - action , which is explained later . Ibis theory suggests that the problem was not that students could not think in a PHI - type manner while 9 . MARING ARGUMENTATION SERVE DESIGN 277 they devised a solution fOlm , but rather that they could not be self - con sciously aware of doing so . The principle is the same as that which makes it impossible to watch one ' s 0 \ \ - 11 fingers while playing the piano and which incapacitated the fabled centipede who attempted to think about his feet while running . In the past 3 years , additional informaJ testing of PHI has gone onatBoulder , Colorado , , . " ithin the framework of an undergraduate course on design theory and methods . Each of the three times this course has been offered a consistent pattern has emerged that confirms the earlier results : Students do not deal issues of fonn construction until given a project that requires them to do so . To do this project , students rely heavily on taped protocols . One reason for the need to support constmction is that design argu mentation is densely populated " , ith deictic references to parts of the partially constmcted solution . Without the ability to relate constmction and argumentation to each other , it is impossible to discuss the solution . \ Vithout construction situations , design rationale cannot be contextualized . Students using our systems to generate issue - based design rationale invari ably left Out all the issues dealing " ' lith conslmction . They instead concen trated on philosophical discussion , requirements , programmatic analysis , and other preparatory issues rather than actually " getting into the design . " Another problem was that serve relationships were often not effective in helping the designer to generate the important rationale . Designers tended to waste time on issues with little impact on the outcome of the project . This too resulted from lack of support for construction . Designers were often unable to judge the relative merits of issues because they could not see their influence on constmction . It is only by being relevant to construction that issues serve the project . 111e serve relationships of PHI showed that resol ' < ing one issue v . ' a < ; valuable for resolving another . They could not , however , guarantee that any issue served the project as a whole , for this depended on its influencing constmctiori , This lack of relevance to conslmction promoted what architects call " talkitecture " ( i . e . , extended discussion having little impact on the solution ) , In a good design project , constmction generates and regulates argu mentation . Argumentation arises out of constmction , and is often tested by construction . Creating good design rationale requires support for con struction . 4 . SUPPORT FOR CONSTRUCTION Constmction , a subactivity of design , is the composition of elementary building blocks or materials to fonn an artifact . Sometimes the designer constructs the artifact directly , but in many domains the designer constructs it by making a model or plan of the artifact to be realized by others . The 278 FISCHER , LEMKE , McCALL , MORCH elementary building blocks and materials available for construction activi ties form the design substrate . Construction is a crucial aspect of design because it creates situations that can " talk back " to the designer : Typically [ the designer ' s ] making process is complex . There are more variables - kinds of possible moves , norms , and interrelationships of these than can be represented in a finite model . Because of this complexity , the designer ' s moves tend , happily or unhappily , to produce consequences other than those intended . \ Vhen this happens , the designer may take account of the unintended changes he has made in the situation by forming new appreciations and understandings and by making new moves . He shapes the situation , in accordance with his initial appreciation of it , the situation " talks back , " and he responds to the situation ' s backtalk . ( Sch6n , 1983 , p . 79 ) Human Problem - Domain Communication . The substrate used to design computer - based artifacts typically consists of low - level abstractions ( e . g . , statements and data structures in programming languages , and primitive geomeuic objects in engineering computer - aided design ) . Abstractions at that level are far removed from the concepts that form the basis of thinking in the application domains in which these artifacts are to operate . The great transformation distance between the design substrate and the application domain ( Hutchins , Hollan , & Norman , 1986 ) is a reason for the high cost and the great effort necessary to construct artifacts using computers . To reduce this transformation distance , high - level , domain - oriented substrates are required . Akin ( 1978 ) and others have shown that designers design with meaningful abstractions at different levels . For example , architects use domain - related chunks or parts of buildings such as clusters of rooms , individual rooms , areas , and furniture when they design . Rather than communicating with computers , designers should perceive design as communication with an application domain ; the computer should be come effectively invisible . Human problem - domain communication ( Fischer & Lemke , 1988 ) tries to achieve this goal . It provides a new level of quality in human - compllter communication because the important abstract opera tions and objects in a given area are built directly into the computing environment . In an environment supporting human problem - domain com munication , designers build artifacts from application - oriented building blocks according to the principles of that domain - not the pIinciples of software or geometr ) , . C01lstrudiml Kits . Construction kits ( Fischer & Lemke , 1988 ) support human prohlem - domain communication by offering domain - oriented huilding hlocks presented in a palette and a work area for construction by direct manipulation . Interacting with a computer - based construction kit does not provide the same " hack - talk " afforded by designing with real objects . 9 . MAKING ARGUMENTATION SERVE DESIGN 279 Figure 3 . JANUS - CONSTRUCTION : The work triangle critic . JANUS - CON STRUCTION is the construction part of JANUS . Building blocks ( design units ) are selected from the Palette and moved to desired locations inside the Work Area . Designers can reuse and redesign complete floor plans from the Catnlog . The Messages pane displays critic messages automatically after each design change that triggers a critic . Clicking with the mouse on a message activates JANUS - ARGU MENTATION and displays the argumentation related to that message ( see FIgUre 5 ) . Jl ! ! Jnus - Const ; ruct ; ; lon ( 1 . . . , . l . ' orio : Ar . . ( " t \ ~ AH [ . ; fit Gt ( lhl Oc . . : nwo . w l - t C . ul ~ s . v . In ( a " " loti Sc ! Â« : 1 . ~ 1 . - Appi ' - - - PeJ . tw _ . . . . . _ . b - . Del \ ow \ DO \ \ . - . r - f - - . ~ lDlCDl - ~ [ i ; J ~ [ ; ] r - , . . . . - â¢â¢â¢â¢â¢â¢ - - " " - lDO \ ow \ \ I I - - ' - ~ ' - ~ " ' - I - - â¢â¢ IF - : ' f ' : 0 w " " " " " ; ; " : ; " " " : ' ? _ " _ _ ' : " " " - : ; ~ - t ' - t - " O - - ' i s ~ ~ " ' ; - ~ ' rl ~ ntOf - l I . ar _ t * " I ; han 23 t _ t . e ! . ! . Sfogi . Qc ) < ) I ' - HeN ~ . 10I ' - 1 t . I ' l ( ) t Mar ow - tl ~ t ~ { QV40 - â¢ i c . - . . - II I ~ Cd ' I ~ . RU tI ~ . However , construction kits are an active medium that can react to the designer ' s actions in ways that are different from real objects . To illustrate the concept of a construction kit , we describe JANUS - CONSTRUCTION , a part of the JANUS system for the domain of residential kitchen design . JANUS - CONSTRUCTION is a construction kit for the domain of kitchen design . The palette of the construction kit contains domain - oriented build ing blocks called design units , such as sink , stove , and refrigerator ( Figure 3 ) . Designers construct by obtaining design uniLs from the palette and placing them into the work area . They can thus see how different configu rations fit the floor plan and how requirements about storage space , work flow , and other considerations can be satisfied . A situation is constructed that can " talk back " to a skilled designer . In addition to design by composition ( using the palette and constructing an artifact from scratch ) , jANUS - CONSTRUCfION also suprorL ~ design by modification . Existing designs can be modified by retrieving them from the catalog and manipulating them in the work area . The catalog can also serve as a learning tool . The user can copy both good and bad examples into the work area . The system can critique such designs to show how they 280 FlSCHER , LEMKE . McCALL , MORCH can be improved , thus allo \ \ > ing users to learn from negative examples . Designers can learn about the good features of prestored designs as well . Designers using JANUS - CONSTRUCTION expressed that they experi enced a sense of accomplishment in using the system because it enabled them to construct something quickly without having detailed knowledge about computers . But construction kits do not in themseh ' Cs lead to the production of interesting artifacts ( Fischer & Lemke , 1988 ; Norman , 1986 ) . Construction kiL ~ do not help designers perceive the shortcomings of an artifact they are constructing . In that they are passive representations , constmctions in the work area do not lalk back unless the designer has the skill and experience to form new appreciations and understandings when constructing . Designers often do not see charactCllstics that lead to breakdowns in later use situations . As Ritte ! put it : " Buildings do not speak for themselves . " 1 Designers who are unaware of the work triangle mle do not perceive a breakdown if that rule is violated ( i . e . , if the total distance between stove , sink , and refrigerator is greater than abollt 23 feet ) . Critics . Critics ope rationalize Schon ' s ( 1983 ) concept of a situation that talks back . They use knowledge of design principles to detect and critique suboptimal solutions constructed by the designer . The critics in JANUS - CONSTRUCTION identify potential problems in the artifact being designed . Their knowledge about kitchen design includes design principles based on building codes , safety standards , and functional preferences . An example of a building code is hthe window area shall be at least 10 % of the floor area " ; an example of a safety standard is " the stO \ ' e should be at least 12 inches away from a door " ; and an example of a functional preference is the work triangle nile Uones & Kapple , 1984 ; Paradies , 19i3 ) . Functional preferences may vary from designer to de signer , whereas building codes and safety standards should be violated only in exceptional cases . Critics detect and critique partial solutions constructed by the designer based on knowledge of design principles . Critics ' knowledge is represented as relationships between design units , The SlOve design unit , for example , has C1idcswith the following relations : away - from stove door ! away from stove window ! near stove sink ! near stove ref tor , and not - immediately next to stove These critics are implemented as condition - action nIles , which are tested \ , ' hen eyer the design is changed . The changes that trigger a critic are operations that modify the design in the work area . vv11en a design pril ~ ciple is \ 10Iated , 1 . One of Rittel ' s favorite sayings , it was a standard part of the lectures for his Architecture 130 course at Berkeley , 9 . MAKlNG ARGUMENTATION SERVE DESIGX 281 a critic will fire and displav a C1itique in the messages pane of Figure 3 . In the figure , the work tJiangle critic fired telling the designer that the ~ work triangle is greater than 23 feet . " This identifies a possibly problematic situation ( a breakdown ) , and prompts the designer to reflect on it . The designer has broken a rule of functional preference , perhaps out of ignorance or by a temporary oversight . Users can modify and extend JANUS - CONSTRUCTION by modifying or adding design units . critic rules , and relationships ( Fischer & Girgen sohn , 1990 ) . This end - user modifiability allows for evolution of the envi ronment as design practice and requirements change , Designers can also modify critic rules when they disagree \ \ ith the critique given . Standard building codes ( hard rules ) should not be changed , but functional pref erences ( soft rules ) vary from designer to designer and thus can and should be adapted . Designers haye the capability to express their preferences . For example , if designers disagree \ \ ~ th the design principle that the stove should be away from a door , they can edit the stoye - door rule by replacing the away from relation between stove and door with another relation ( selected from a menu ) such as near . After this modification , they will not be critiqued when a stove is not away from a door . Lack of Argume1ltative Support . The advantage of constructing something is that the constructed artifacts and situations can talk back to the designer . The back - talk of the situation is el1liched in Ollr framework with the critics , but the short messages the critics present to designers cannot reflect the complex reasoning behind the corresponding design issues . To overcome this shortcoming , we initially developed a static explanation component for the critic messages ( Lemke & Fischer , 1990 ; Neches , Swartout , & Moore , 1985 ) . The design of this component was based on the assumption that there is a " right " answer to a problem . But the explanation component proved to be unable to account for the deliberative nature of design problems . Therefore , argumentation about issues raised by critics must be supported , and argumenlation must be integrated into the COntext of construction . 5 . INTEGRATED DESIGN ENVIRONMENTS Separate systems for construction and argumentation have major defi ciencies ( as articulated in the previous sections and by Fischer et aL , I 9S9b ) . If argumentation is to sen : e design . it must do so hy informing constnlCtion , If construction acknowledges the nature of design processes ( messy situ ations that are characterized by llllcertaint \ ' , conflict , and uniqueness ) , it must have access to the argumentative component . This can happen only 282 FISCHER , LEMKE , McCALL , MORCH if constmction and argumentation are explicitly linked in an integrated design environment . 5 . 1 . Reflection - in - Action Our original attempt at integrating constmction and argumentation v . as to have constmction take place within the framework of argumentation - in other words . to raise an issue for each constluction step ( " \ Vhat should the next step be ? " ) , deliberate it , and turn the resolution into a constmctive action . Unfortunately , trials of this approach with design students showed that it did not work ( Section 3 ) . A reason for this failure can be found in Schon ' s ( 983 ) theory of design . Schon portrayed design as a continual alternation between two radically different and mutually exclusive types of design processes : " knmving - in - action " and ' Â·reflectiol1 - in - action . ~ As he ex plained , " In a good process of design , this conversation with the situation is reflective . In answer to the situation ' s back - talk , the designer reflects - in action on the construction of the problem , the strategies of action , or the model of the phenomena . which have been implicit in his moves " ( p . 79 ) . is the unself - conscious , nonreflective doing that con trols the situated action of constructing the actual artifact . Refoxtion - in - action is the self - conscious , rational process of reflecting about this action within the " actionÂ· present , " that is , the time petiod during which reflection can still make a difference to what action is taken . Reflection is required when there is a breakdO \ \ 11 in knowing - in - action . Such a breakdown typically occurs when action produces unforeseen consequences , either good or bad . When a breakdown occurs , reflection can be used to repair the breakdo \ ' m situation , and then action can continue . Schon ' s concepts do not in themselves tell us what the architecture of design support environments should be . His concepts must be further operationalized and substantially augmented if they are to provide a basis for com puterbased systems . In our work , we in te rpret action as " construction " and reflection as " argumentation . " For argumentation to get used , it must be pan of reflection - in - action , implying that it should be brought to the designer ' s attention only in breakdown situations . Construction cannot be done within an argumentative framework because the former implies unself - conscious , nonreflective engagement in creating the solution whereas the latter implies self - conscious . reflective thinking abOllt the solution . Argumentation must take place within the " action present . " If the time required to read and / or record the argumentation is greater than the action present , design is disrupted and the required context is lost . Design rationale can aid reflection by informing it with design knowledge , principles , and ideas , and by critical thought in the designer . Schon ' s theory , when operationalized , can then be used as the basis for a system architecture . 9 . MAKING ARGUMENTATION SERVE DESIGN 283 Figure 4 . A multifaceted architecture . The links between the components are crucial for exploiting the synergy of the integration . constrain scenarios inform CatalogExplorer verify Construction inform Kit reuse - - ~ - - . . . . . . . . . JI C ' atalog ConstructWn Analyzer critique reduce . . - - _ - J . _ . . . . ; , . . . . . . . search Argumentative Hypertext case - based reasoning Argumentation IUustrator 5 . 2 . An Architecture for Integrated Design Environments Over the last few years , we have developed an integrated , multifaceted architecture for design environments ( see Figure 4 ) . The multifaceted architecture consists of the follO \ \ ; ng five components : 1 . A construction kit is the ptincipal medium for implementing design . It provides a palette of domain - specific building blocks and supports the construction of artifacts using direct manipulation and form filling . 2 . An argumentative hypertext system contains issues , answers , and arguments about the design domain . Users can annotate and add argumentation as it emerges during design processes . 3 . A catalog provides a collection of prestored design examples illus trating the space of possible designs in the domain and supporting reuse and case - based reasoning . 4 . A specification component allows designers to desClibe some char acteristics of the design they have in mind . The specifications are expected to be modified and augmented duting the design process , rather than to be fully articulated at the beginning . They are used to retrieve design o ~ iects from the catalog and to filter information in the hypertext . 284 1 : 1SCHF . R . LEMKE . McCALL . MORCH 5 . A simulation component allov . ' S designers to carry Ollt ~ what - if ' games simulating usage scenalios with the artifact being designed . Integration . The mllitifaceted architecture derives its essential value from the integration of its components and links between the components . Used individually , the components are unable to achieve their full poten tial . Used in combination , however , each component augments the value of the others , forming a synergistic whole . At each stage in the design process , the partial design embedded in the design environment serves as a stimulus to users for suggesting what they should attend to next . Links among the components of the architecture are supported by valiollS mechanisms ( see Figure 4 ) : 1 . CONSTRUC710N ANALYZERÂ· Users need support for constlllction , argumentation , and perceiving breakdowns . Experience with our early systems has shov . ' l that users too often fail to hear the situation talk back ; breakdowns do not occur that trigger reflection - in - action . Additional sys tem components are needed to signal breakdowns . This is the role of the CONSTRUC : - nON ANALYZER in the multifaceted architecture . The CON STRUCTION ANALYlER is a version of the critics desClibed in Section 4 enhanced with pointers into the al ' gumentation issue base . The firing of a critic signals a breakdown to users and provides them with entry into the exact place in the argumentative hypertext system at which the corre sponding argumentation is located , 2 . ARGU ! vfENIA . TION ILLUSTRA TOR : The explanation given in argu mentation is often highly abstract and very conceptuaL Concrete design examples that match the explanation help users to understand the concept . The ARGUMENTATION ILLUSTRATOR helps users to understand the information given in the argumentative hypertext by finding a catalog example that realizes the concept ( Fischer , 1990 ) . 3 . CATALOG E ) ( PLORER : This helps users to search the catalog space according to the task at hand ( Fischer & Nakakoji , 1991 ) . It retrieves design examples similar to the current constlllction situation , and orders a set of examples by their appropliateness to the current specification . A typical cycle of events supported by the multifaceted architecture is : ( a ) Users create and refine a partial specification or construction , ( b ) breakdowns occur . ( c ) users : wiitch and consult other components in the system made relevant by the system to the partially articulated task at hand , and ( d ) users refine their understanding based on the " back talk of the situation : ' A , users go back and forth among these components , the problem space is narrowed , a shared understanding between users and the system < , \ " olH ' s , and the artifact is incrementally refined . This chapter 9 . MAKI ~ G ARGCMENTATlON SERVE DESIGN 285 Figure 5 . JANUS - ARGUMENTATION : Rationale for the work triangle rule . JANUS - ARGUMENTATION is an argumentative hypertext system based on the pm method . The Viewer pane shows a diagram illustrating this answer generated by the ARGUMENTATION IILUSTRATOR The VISited Nodes pane lists in sequential order the previously visited argumentation topics . By clicking with the mouse on one of these items , or on any bold or italicized item in the argumentation text itself , the user can navigate to related issues , answers , and arguments . Hypertext access and navigation is made possible using this feature , inherited from the SYMBOUCS DOCUMENT EXAMINER . Jl ! ! Jnus - Argument : . ! ! t ; / on _ E _ " ' - . . . . . . ( fMf ' N ~ teor . 11Mi . . lit - o " , . ) n . . dl ' ftanc - be ~ . " * , . ~ _ _ I ' d r . frt ~ . tor . I . tWI ~ rn . ~ . ~ k1 t . . . ' - I ' . M " 23 ' _ t . C - - > N . l ( wl < . t ~ chen [ tll Jl : lCj . ~ I 1 [ 1 JI ow 1 . Â· . 1 ~ lÂ«IOth of tM " " O ' < k tfl . ngi . ( 5 \ ' ( 1 . " " ' , flWtt ~ ~ QC " , SlfWllI I . . - tf ' oIlt1 Z3 I _ t . ~ ' ~ ' ~ ' : f " ' . [ VIeltN " , . , . . . ~ u : . , . . j . . . . " ~ . II " ; ' ; . i ~ l fHÂ« ; t . I _ f ' ~ ' 0 ; the ; ~ u " ' ' ' Gte ~ t ( Â¥Ialtd . OI . t . . l " taI } Ttwt _ Â«I < . trl . ngt . t fa ~ I ~ eonc ~ t In kll ~ < : IrMt { 7 < . TM ~ ttI _ flgl . ~ , . . tt " II C - efltw tr ; : . nt 4Iat . " " , . betw + M \ the thr . . _ in - WU ~ : _ 1M . . tcw and , . ~ t : Qr , Th ' - l ~ ~ M I . n t . tMan 23 f _ 1 to a ' X > ld ~ y _ " " ~ and to - - . . an . Hlclerrt . . . on . fI ( t1W k ' o " " " klt ~ ~ t ( Small " oom ) in WlW . I1 kJl ~ ~ . tM ~ trianql . I . f â¢â¢â¢ ~ ' e ' MI . . . . s . - . n " " " - ttv ~ , I R ~ . ~ \ . ( ' ' ' " ' - " t * . f ' r1v - - Ror " . S1l ' \ fr ! . $ ~ ) ' s . ! : " r ~ ~ ~ . l ( ~ ~ ~ V \ IC \ iÂ«l m71 ~ Â· Show ~ . . . . , : ~ ~ E . . . - pl . if , . . . , . . 1 ' ( MMI ' t ~ rai : M " $ 1 â¢â¢ S ~ _ , _ c . m . . . , ShcN ~ ~ l " . . . focuses on the integration of cOl1Stlllction and argumentation . Other components of the multifaceted architecture are described elsewhere ( Fischer , 1990 ; Fischer & Nakakoji , 1991 ) . JANUS - ARGUMENTATION : The Argumentation Component of JANUS . JANUS - ARGUMENTATION is the argumentation component of JANUS ( Figure 5 ) . It is an argumentative hypertext system based on the PHI method and implemented using the SYrv1BOLICS DOCUMENT EXAMINER ( Walker , 1987 ) . jANUS - . A . R . GUMENTATION offers a domain - Oliented , ge neric issue base about how to construct residential kitchens . This design knowledge has been acquired from protocol studies ( Fischer et aI . , 1989a ) and from kitchen design books Uones & Kapple , 1984 ) . InjA . . . 1 \ lUS - ARGU MENTATION , designers explore issues , answers , and arguments by navigat ing through the issue base . The starting point for the navigation is the argumentative context triggered bva CIitic message inJANUS - CONSTRUC - 286 FISCHER , LEMKE , McCALL , MORCH TION . Clicking with the mouse on a critique in JANUS - CONSTRUCTION ( see Figure 3 ) activates JANUS - ARGUMENTATION and accesses the issue and answer corresponding to the critique . At any place in the issue base , designers can invoke the ARGUMENTATION ILLUSTRATOR to obtain an example from the catalog that implements the CUlTent issue answer . 5 . 3 . Evaluation , Shortcomings , and Limitations of JANUS Evaluation . We have informally evaluated JANUS with subjects ranging from neophyte to expert designers and from neophyte to expert computer users ( Fischer et at . , 1989b ) . The subjects were tested in an experiment consisting of two tasks : a learning task and a design task . The learning Lcl . sk consisted of improving a " bad " kitchen design from the catalog ( see Figure 3 ) , and the design task consisted of designing a Mgood ~ kitchen given a set of constraims . The constraints were imposed to test the various operations of the system . Users unfamiliar with the computer system were given help by the experimenter dUling an initial learning task . A final questionnaire was given to the subjects ai " ler the expeliment . Designers with limited domain knowledge were able to understand the critics and learn from them to create reasonable kitchen designs . For example , sevenll studelUs did not know that building codes require that at least one of the elUrances into a kitchen should be at least 36 inches wide . One user also learned that the stove should be away from a door , based on safety requirernenL ~ with respect to fire and burn hazard . He found this to be especially relevant to his own home where small children are constantly running in and out of the kitchen . The critics were appreciated , but were often ignored when they actively critiqued the user during construction . One user replied to this by saying that too much infonnation was presented and that she could give attention to only one thing at a time . She preferred to complete some part of the design and then ask the system fora critique by using the Cri tique All command . Other users explained that they ignored C1itics because they had already been aware of them , either by a previous critique or by the fact that they already knew about them ( such as that the sink should be in front of a Â·window ) . In the questionnaire , all users found that critiquing was helpful in reminding them about design rules they did not think about while they were designing . Users uncertain about a critique from the system or interested in more background information about design plinciples entered the hypertext system by clicking on the critique message . No users got " lost " in the hyperdocument , but one found that some of the arguments were not justified from his point of view . He would have liked to add his O ~ l1 counterarguments to it . Currently end - user modifications of the issue base 9 . MAKING ARGUMENTATION SERVE DESIGN 287 are not supported . Another user found that some arguments did not go into enough depth in order to be persuasive . For example , he would have liked to know why a building code requires that a kitchen emrance should be greater than 36 inches - wide . Shmtcomings and Limitations . Our integrated design environments in their current form still suffer from a number of major limitations : 1 . Design emironments need to evolve for the following reasons : ( a ) The world modeled in these design environments changes ( Curtis , KrClsner , & Iscoe , 1988 ) , and ( b ) the background knowledge for a design domain cannot be fully articulated - it is tacit and requires breakdown situations to be activated ( Elm , 1988 ; Winograd & Flores , 1986 ) . End - user modifiability is a prerequisite for evolution because the breakdown situations are experienced by the domain experts using these systems , not by the knowledge engineers who built them OIiginally . Fischer and Girgensohn ( 1990 ) described a mechanism to make JANUS - CONSTRUCTION end - user modifiable . RE FLh " Cr ( described in the next section ) is an effort to make the argumentative component adaptive . One reason thatjANUS - A . . RGUMENTATION failed to achieve this goal is that the DOCUMENT EXAMINER ( Walker , 1987 ) is only a reader ' s interface to the hypertext system and requires a different writer ' s intelface ( Walker , 1988 ) . Therefore , jANUS - ARGUMENT ATION primarily serves as a design information system and does not allow the addition of new design rationale in a contextualized manner . 2 . The back - talk of the situation must be enhanced further with a simulation component providing us with insights that argumentation does not capture . This requirement became obvious in our experiments with professional kitchen designers who tested their design by running mental simulations of specific situations ( e . g . , preparing a fancy dinner , imagining work - flow patterns with more than one person working in the kitchen ) . 3 . The issue base ofjANUS - ARGUMENTATlON is generic ; that is , it is used for any kitchen design project . The issue base is also static in that it does not adapt to the individual design projects . Some issues are only relevant to some of the design projects addressed by the issue base . For example , if the kitchen has no eating area , then issues relating to the eating area in the kitchen are irrelevant . Stmctures in the issue base irrelevant to the task at hand make the issue base un ~ ieldy and make it difficult to find the relevant infonnation . To filter out irrelevant informa tion from a genelic issue base , the serves relationship must be dynamically computed from the task at hand . The exploratory nature of design makes any static argumentative hypertext system , such as jANUS - ARGUMENIA TlON , inadequate . A dynamic hypertext system adapL ~ to design decisions such as adding or removing an eating area . 288 FISCHER , LEMKE . McCALL . ~ 10RCH 6 . CURRENT AND FUTURE WORK Our current and future work is focused on four ways to make argumen tation better sen ' e design : ( a ) Static issue bases are made extensible and dynamic , ( b ) the reusability of issue bases is being improved , ( c ) design rationale is being added to the examples in the catalog , and ( d ) a system component for articulating and representing the task at hand is being developed . Some of these extensions are being carried out as separate efforts later to be integrated into the overall environment . Adaptive Issue Bases . In response to the problems caused by the static nature of JANUSÂ·ARGUMENTATION , we are exploring ways to make reusable issue bases more active and responsive to the situation , thus increasing the immediate benefit of issue bases . We have implemented these methods in REFLA . . Gr . a PHI - based hypenexl system ( Lemke , 1990 ) . In REFLA . . CT , the designer not only consults the issue base but also indicates design decisions - whether deliberated or not - by selecting one or more answers . The selected answers determine which issues the system raisesfrom its issue base . This is done with the help of the PHI subissue relationship . In REFLACT , issue bases are fully modifiable and extensible by end users . Designers can add , modifY , or delete issues , answers , and arguments without leaving REFLAGr . Reusable Domain - Oriented Issue Bases . A design rationale is a large addi tional product of the design process . Creating and representing a design rationale is a great eflon . Reuse of issue bases has the potential to dramatically reduce this effort , Every project is unique in some respects ; few ifany projects are unigue in all respects . Therefore , the contents of a project issue base are not entirely unique to that project . Similar projects overlap substantially in issues , answers , and arguments . This is not to say that the issues are resolved in the same way , but merely that a great deal of the reasoning is shared by projects . Reusable issue bases can serve as seeds that grow with each new design project . Each project extends and enhances the reusable issue base . The issue base being reused provides information about how to decompose the task , possible answers to issues , and principles of design . The issue base also warns designers of potential dead ends and unproductive solution direc tions . This is important because designers need better access to domain - ori ented information ( Cunis , et ai . , 1988 ) . Even expert designers can no longer master all the rele \ ' ant knowledge , especially in technologically oriented design , where growth and change of the knowledge base are incessant ( Draper , 1984 ; Norman , 1988 ) . 9 . M ~ ; " ; G . " ' - RGUMENTATION SERVE DESIGN 289 Domain - oriented issue bases also amplify the designer ' s ability to reflect on issues . Recurring design issues could be researched intensively and the results of this could then be stored at the appropriate location in the issue base for use by future designers encountering similar decisions in the future . This would , for example , allow the " folk theories " of designers to be su ~ ected to rigorous scientific scrutiny . Cumulative domain - oriented issue bases could also foster communication among designers , researchers , and users about recuning matters of design . The PHI subissue relationship is clUcial to making issue bases reusable . The hierarchical grouping of issues allows argumentation systems to be built that filter issue bases according to the specifics of the new task . REFLACT filters issue bases using its mechanism of issue conditions . The system provides a common issue baSe for all projects in a domain such as kitchen design . This issue base includes issues , answers . and arguments at all levels of generality . As pointed out earlier , not every issue applies in each design project , even if it falls into one general domain . Enriched Catalogs . The JANUS catalog docs not currently contain the design rationale for the designs it contains . By adding the rationale to each catalog example , designers can better understand the examples , can more easily find examples that are similar to the kitchens they are designing , and can reuse the rationale . Representation of tJw Task at Hand . More support to incrementally cap ture the task at hand is needed . Beyond the information contained in the constmction situation , our specifi ~ ation component needs to be further developed to let designers articulate the specifics of their design efTon . This knowledge can be used by REFLA . . Gr to filter out irrelevant infOlma tion from a reusable issue base . An initial effort in this direction is described in Fischer and Nakakoji ( 1991 ) 7 . CONCLUSIONS Approximately 25 years ago , Horst Rittel began the first work on design argumentat . ion ( i . e . , rationale ) . The central idea of his approach was to represent rationale as the argumentative evaluation of alternative answers to questions . Half the chapters in this book deal wilh some variant of that idea . As our experience and the experiences of others ( see Buckingham Shum , 1995 [ chapter 6 in this book ] ; Conklin & Burgess - Yakemovic , 1991 [ chapter 14 in this book ] ) make clear , this approach has mn into funda mental diHiculties . Argumentation docs not naturally and easily serve design ; it must be made to do so . The central challenge facing advocates 290 F1SCHER , LEMKE , McCALL , MORCH of design rationale capture is to understand and overcome these difficulties . This chapter has confronted this challenge . We began by identifying fundamental difficulties in making argumen tation serve design . Creating and using design rationale is a time - consum ing process that must be canied out in addition to standard design activi ties , and there is little immediate reward . Recording and accessing design rationale can disrupt design and inteliere with reflection - in - action . Argu mentation that is removed from construction loses relevance to the task at hand . Without tight integration of argumentation and constIUction , designers fail to apply argumentation in the construction activity . To understand how to overcome these difficulties , we analyzed them within the design theories of Schon ( 1983 ) and Ritte ! ( 1984 ) . This gave us a constructive understanding that suggested the following solution ap proaches . First , the IBIS method should be modified to emphasize relevance to ( i . e . , serving ) the task at hand . This notion resulted in the development of the PHI method . Refinement o [ the rationale representation scheme is not enough ; substantial computer support is also needed . Hypermedia systems can be created to reduce the secretarial work of managing issue bases . Support is also needed to reduce the conceptual work o [ creating project rationale whose content and [ arm con ' espond to the designer ' s changing understanding o [ the problem . This can be done through support [ or reuse o [ issue bases . Argumentation must be made to serve the construc tion o [ solution [ arm . To do this support for construction must be integrated with support [ or argumentation . We developed tools [ or construction that support human problem - domain communication , and integrated them with tools [ or argumentation via critics . These integrated design environments [ ann a synergistic whole by causing the constIUction situation to talk back to the designer . A final word on the generality o [ our approach . JANUS was used as an " object - t < : rthink - with " in this chapter . We used the same basic approach [ or user interface design ( Lemke & Fischer , 1990 ) , development and maintenance o [ Cobol programs ( Atwood et a ! . , 1991 ) , river basin planning and operations ( Lemke & Gance , 1990 ) , computer network design ( Fischer et al . , 1991 ) , knowledge editing , and design and planning o [ lunar habi tation . A ~ these systems get used in realistic work environments , we will get valuable feedback about the viability , the strengths , and the weaknesses o [ this approach . NOTES Background . This chapter first appeared in Ihe Human - Computl ' lIllteracticm Special Issue on Design Rationale in 1991 . 9 . MAKING ARGUMENTATION SERVE DESIGN 291 Acknowledgments . The authors thank the members of the Human - Computer Communication group at the University of Colorado , who contributed to the conceptual framework and the systems discussed in this chapter . Support . The research was supported by the National Science Foundation under Grants IRI - 9015441 , CDA - 8420944 , IRI - 8722792 , and MDR - 9253425 ; by the Army Research Institute under Grant MDA - 903 - 8 & - C0143 ; and by grants from the Intelli gent Interfaces Group at NYNEX , and from Software Research Associates ( SRA ) in Tokyo . Autlwrs ' PresentAddresses . Gerhard Fischer , Department of Computer Science and Institute of Cognitive Science , University of Colorado , Boulder , CO 80309 - 0430 ; Andreas C . Lemke , ALCATEL - SEL , ZFZ / SWI , Stuttgart , Germany ; Raymond McCall , Division of Environmental Design and Institute of Cognitive Science , Uni versity of Colorado , Boulder , CO 80309 - { ) 314 ; Anders Morch , Department of Infor matics , University of Oslo , P . O . Box 1080 , Blindern , 0316 , Oslo , Nonvay . Email : gerhard @ cs . colorado . edu , alemke @ rcs . sel . de , mccall r @ cubldr . colorado . edu , and andersm @ ifi . uio . no REFERENCES Akin , O . ( 1978 ) . How do architects design ? Inj . Latombe ( EeL ) , Artificial i7ltelligence a7ld pattern recogniti07l in computer aided design ( pp . 65 - 104 ) . New York : North Holland . Atwood , M . E . , Burns , B . , Gray , W . D . , Morch , A . I . , Radlinski , E . R . , & Turner , A ( 1991 ) . The Grace integrated learning environrnent - A progress report . Proceedings of the Fourth Intematiollal Conference all Industrial & EnginJ ? m7lg Applications of ArtifICial Intelligence & Expert Systems ( lEA / AlE 91 ) , 741 - 745 . New York : ACM Press . Buckingham Shum , S . ( 1995 ) . Analyzing the usability of a design rationale notation . In T . P . Moran & j . M . Carroll ( Eds . ) , Des1gn rationale : Concepts , teclllliquJ ? s , and use . Hillsdale , NJ : Lawrence Erlbaum Associates . [ Chapter 6 in this book . ] Conklin , E . j . ( 1987 ) . Hypertext : An introduction and survey . IEEE C " , mputer , 20 ( 9 ) , 17 - 41 . Conklin , E . j . , & Begeman , M . ( 1988 ) . gIBIS : A hypertext tool for exploratof ) ' policy discussion . Proceedings of the Conferl ' 7lce 071 C07I ! puter Supported Cooperative Work , 140 - - 152 . New York : ACM . Conklin , E . j . , & Burgess - Yakemovic , KG ( 1991 ) . A process - oriented approach to design rationale . In T . P . Moran & j . M . Carroll ( Eds . ) , Design . rationale : Concepts , techniquJ ? s , and use . Hillsdale , 1 \ 1 : La \ \ TenCe Erlbaum Associates , 1996 . [ Chapter 14 in this book . ] Cross , N . ( 1984 ) . Dl ' velopments in df ' sign methodology . New York : Wiley . Curtis , B . , Krasner , H . , & Iscoe , N . ( 1988 ) . A field study of the software design process for large systems . CommuniratiollS of till ' ACA1 , 31 ( 11 ) , 1268 - 1287 . Draper , S . W . ( 1984 ) . The nature of expertise in UNIX . Proceedings of Il \ TE . " RACF ' 84 , IFf ? Co71ferl ' 7lce 071 Human - Computer InteraetioTl , 182 - 186 . Amsterdam : Elsevier Science Publishers . 292 FISCHER , LEMKE , McCALL , MORCH Ehn , P . ( 1988 ) . Work - oriented design oj c . omputer artifacts . Stockholm , Sweden : Almquist & Wiksell International . Fischer , C . ( 1990 ) . CAloperative knowledge - based design environments for the design , use , and maintenance of software . Software Symposium ' 90 . 2 - 22 . Tokyo , Japan : Software Engineering Association . Fischer , G . â¢ & Girgensohn . A . ( 1990 ) . End - user modifiability in design environ ment ~ . f [ UTIU / 1 / Factors Â£n OJmp11ling Systems , CHI ' 90 Conference Proceedings , 183 - 19 L New York : ACM . Fischer , G . , Gwdin , ] ' . Lemke . A c . , McCall , R . , OSlwald . J . , & Shipman , F . ( 991 ) . Supporting asynchronous collaborative design with integrated knowledge - based design environments ( Tech . Rep . ) . Boulder : University of Colorado . Department of Computer Science . Fischer . G . , & Lemke , A . C . ( 1988 ) . Construction kits and design environments : Steps toward human problem - domain communication . Human - Computer Interac tion , 3 ( 3 ) , 179 - 222 . Fischer , G . . . \ fcCall , R . & ' \ lorch , A . ( 1989a ) . Design environments for constructive and argumentative design . Proaedings oj the CHI ' 89 OJnJerence on Hurrum Factors in l1Jmput11lg Systems , 269 - 276 . New York : ACM . Fischer , G . . McCall , R . , & Morch , A ( l9S9b ) . jANLJS : Integrating hypertext with a knowledge - based design . Prow ' dings oj H . ~ pertext ' 89 , 105 - 117 . New York : ACM . Fischer . G . , & Nakakoji , K ( 1991 ) . Empowering designers with integrated design environments . In ] . Gero ( Ed . ) , Proceedings oj the F ' irstInternali01lal OJnJerena on Artificial Illtettigena ill Design ( Edinburgh , Scotland ) ( pp . 191 - 209 ) . Cambridge , England : Buttenllorth - Heinemann . Ltd . Hutchins , E . L . Hollan , J D . , & Norman , D . A ( 1986 ) . Direct manipulation interfaces . In D . A Norman & S . W . Draper ( Eds . ) , User - cerJtered system deSign . Sew perspectives on human - computer interaction ( pp . 87 - 124 ) . Hillsdale , 1 ' \ J : Lawrence Erlbaum Associates . Jones , R . J . & Kapple , W . H . ( 1984 ) . Kitchen planning principles - Equiprnent - appli anas . Urbana - Champaign : University of Illinois , Small Homes Council - Building Research C . . ounciL KUllZ , W . , & Rille ! , H . \ V . J ( 1970 ) . Issues as elernenls oj inJormatioll systl ' m5 ( Working Paper So . 131 ) . Berkeley : University of California , Berkeley , Center for Planning and Development Research . Lee , ] . & Lai , K - Y ( 1991 ) . \ \ ' hat ' s in design rationale ? Human - ComputerInteractioTl , 6 , 251 - 280 . Also in T . P . Moran & J . M . Carroll ( Eds . ) , Design raliollale : OJncejJts , IRchniques , and use . Hillsdale . NJ : Lawrence Erlbaum Associates , 1996 . [ Chapter 2 in this book . ] Lemke , A . C ( 1990 ) . Framer - hypertext : An active issue - based hypertext system . Proceedings oj the WOrRs / wp 011 In IRllige : n I Access to InJol ' mati01l Spterlls , 34 - 38 . Darmstadt , Germany : GMD - IPSI . - Lemke , A . c . , & Fischer , G . ( 1990 ) . A cooperath ' c problem solving system for lls < : > r interface design . Proreedmgs oj AAA1 - 90 , Eighth ! \ ational OJnJerena on Artificial Intelllgrnce , 479 - 484 , Cambridge , ~ tA : AAAI Press / MIT Press . Lemke , A . C , & Gance , S . ( 1990 ) . End - user modifiability in a wat < : > r management application ( Tech . Rep . ) . Boulder : of Colorado , Department of Computer Science . MacLean . A . , Young , R . : VI . . Bellotti . V . ~ t E . , & \ 10r < ll1 . T . P . ( 1991 ) . Questions . options . and criteria : EIe ) 11enl ~ of space analysis . Human - Cmllputer 9 . MAKING ARGUMENTATION SERVE DESIGN 293 Interaction . 6 , 201 - 250 . Also in T . P . Moran & J . M . Carroll ( Eds . ) . Design ratianale : OJncepts , techniques , and use . Hilldale . NJ : L ' ; lwrence Erlbaum Associates , 1996 . [ Chapter 3 in this book . ] McCall , R ( 1979 ) . On lhe structure and use oJ issue systems in desigll . Unpublished doctoral dissertation , University of California , Berkeley . McCall , R ( 1991 ) . PHI : A conceplUal foundation for design hypermedia . Design Studies , 12 , 30 - 41 . McCall , R , Bennett , P . , d ' Oron2Oio . P . . Osnvald . J . . Shipman , F . , & Wallace , N . ( 1990 ) . PHIDIAS : A PHI - based design environment integrating CAD graphics into dynamic hypertext . In A . Rizk , N . Streitz , & J . Andre ( Eds . ) . Hypmext : OJrn : e / Jts , systems and applications ( pp . 152 - 165 ) . C . , ambridge . England : Cambridge University Press . McCall , R . , Mistrik , t , & Schuler , W . ( 1981 ) . An integrated information and communication system for problem solving . Proceedings oj the S / , venlh Internatto / Iill CODATA ( ' 1JnJerence , 107 - 115 , London : Pergamon . Neches , R . Swartout , W . R . , & Moore , J . D . ( 1985 ) . Enhanced maintenance and explanation of expert systems through explicit models of their development . IEEE Tmnsaclil : ms on SoJtware E . ngineering , SE " - Il ( ll ) , 1337 - 1351 . Norman . D . A ( 1986 ) . Cognitive engineering . In D . A . Norman & S . W . Draper ( Eds . ) , User - cenlered system design ( pp . 31 - 62 ) . Hillsdale , NJ : Lawrence Erlbaurn l \ ssociates . Norman . D . A . ( 1988 ) . The pSJcholc [ ! J oj everyday things . New York : Basic Books . Paradies , K . ( 1973 ) . The kitchen book . New York : Wyden . Reuter , W . , & " Verner , H . ( 1983 ) . ' Il1esen und empfehlungen 20ur anwendung von argumentativen informationssystemen [ Theses and recommendations ~ bout the use of argumentative information systems ] ( \ Vorking Paper ) . InstItut fuer Grundlagen der Planung , University of Stuttgart , Germany . Ritte ! , H . W . J . ( 1972 ) . On the planning cds is : Systems analysis of the first and second generations . Bedriftsokonomen , 8 , 390 - 396 . Rille ! , H . W . J . ( 1980 ) . APtS : A concept Jar argumentatIVe plaTining inJOnTwtlOTi systems ( Working Paper 324 ) . University of California , Berkeley : Institute of Urban and Regional Development . Rille ! , H . W . J ( 1984 ) Second - generation design methods . In N . Cross ( Ed . ) . Developments in design m . ethodolc [ ! J ( pp . 317 - 327 ) . New York : Wiley . Schon . D . A . ( 1983 ) . The reflective practitioner : How proJessionaLs think in aelion . New York : Basic Books . Simon , H . A ( 1981 ) . The sciences oj the artifuial . ( 2nd ed . ) Cambridge , MA : MIT Press . Stefik , M . J . ( 1986 ) . Tbe next knowledge medium . AI Magazine , 7 ( 1 ) , : ' 14 - 46 . Walker , J . H . ( 1987 ) . Document examiner : Delivery interface for hypertext documenl ~ . Hypertext ' 87 Papen , 307 - 323 . Chapel Hill : University of North Carolina Press . Walker , J . H . ( 1988 ) , Supporting document development \ \ ~ th concordia . IF < fÂ£ OJmputer , 21 ( 1 ) , 48 - 59 . Winograd , T . , & Flores , F . ( 1986 ) . Understanding comjJUlers alld , 1 nt ' W Jmmdation Jor design . Nonvood , Nj : Ablex .